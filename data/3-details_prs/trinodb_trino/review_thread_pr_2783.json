{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMTEyODUy", "number": 2783, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxODo0OToxOVrODekNvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDo1MDo0NFrODh5ztA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzc3MjEzOnYy", "diffSide": "RIGHT", "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/KafkaConnectorFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxODo0OToxOVrOFnxcjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxODo0OToxOVrOFnxcjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI0ODkxMA==", "bodyText": "Nit: I wouldn't wrap here, as it looks funny / different compared to the above. Keeping the wrapping the same would make it easy to see that this is simply adding another argument.", "url": "https://github.com/trinodb/trino/pull/2783#discussion_r377248910", "createdAt": "2020-02-10T18:49:19Z", "author": {"login": "electrum"}, "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/KafkaConnectorFactory.java", "diffHunk": "@@ -36,10 +37,19 @@\n         implements ConnectorFactory\n {\n     private final Optional<Supplier<Map<SchemaTableName, KafkaTopicDescription>>> tableDescriptionSupplier;\n+    private final Module additionalModule;\n \n     KafkaConnectorFactory(Optional<Supplier<Map<SchemaTableName, KafkaTopicDescription>>> tableDescriptionSupplier)\n+    {\n+        this(tableDescriptionSupplier, new KafkaConsumerModule());\n+    }\n+\n+    KafkaConnectorFactory(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzc4Njk2OnYy", "diffSide": "RIGHT", "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/BaseKafkaConsumerFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxODo1MzozNlrOFnxl6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxODo1MzozNlrOFnxl6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI1MTMwNg==", "bodyText": "I dislike this class. We generally avoid subclassing as a means to share code (part of the \"prefer delegation\" from Effective Java), and here we aren't saving anything, since it's trivial to implement KafkaConsumerFactory directly. The primary purpose seems to be to prevent subclasses from creating KafkaConsumer directly, but I don't see a reason for that.", "url": "https://github.com/trinodb/trino/pull/2783#discussion_r377251306", "createdAt": "2020-02-10T18:53:36Z", "author": {"login": "electrum"}, "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/BaseKafkaConsumerFactory.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.prestosql.plugin.kafka;\n+\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+\n+import java.util.Properties;\n+\n+public abstract class BaseKafkaConsumerFactory", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzc5NTI0OnYy", "diffSide": "RIGHT", "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/KafkaConnectorFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxODo1NjowNVrOFnxrNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxODo1NjowNVrOFnxrNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI1MjY2MQ==", "bodyText": "Maybe call this consumerModule since it's a required module (compared to other connectors where it's actually an optional, additional module)", "url": "https://github.com/trinodb/trino/pull/2783#discussion_r377252661", "createdAt": "2020-02-10T18:56:05Z", "author": {"login": "electrum"}, "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/KafkaConnectorFactory.java", "diffHunk": "@@ -36,10 +37,19 @@\n         implements ConnectorFactory\n {\n     private final Optional<Supplier<Map<SchemaTableName, KafkaTopicDescription>>> tableDescriptionSupplier;\n+    private final Module additionalModule;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDE5MDQ3OnYy", "diffSide": "RIGHT", "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/KafkaQueryRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzozMzoyMVrOFoupOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNDowNTozM1rOFovw6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI1MTU3Nw==", "bodyText": "who closes Kafka exactly?", "url": "https://github.com/trinodb/trino/pull/2783#discussion_r378251577", "createdAt": "2020-02-12T13:33:21Z", "author": {"login": "sopel39"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/KafkaQueryRunner.java", "diffHunk": "@@ -121,7 +121,7 @@ static DistributedQueryRunner createKafkaQueryRunner(\n             return queryRunner;\n         }\n         catch (Throwable e) {\n-            closeAllSuppress(e, queryRunner, testingKafka);\n+            closeAllSuppress(e, queryRunner);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI2OTkzMA==", "bodyText": "Each test that creates TestingKafka", "url": "https://github.com/trinodb/trino/pull/2783#discussion_r378269930", "createdAt": "2020-02-12T14:05:33Z", "author": {"login": "kokosing"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/KafkaQueryRunner.java", "diffHunk": "@@ -121,7 +121,7 @@ static DistributedQueryRunner createKafkaQueryRunner(\n             return queryRunner;\n         }\n         catch (Throwable e) {\n-            closeAllSuppress(e, queryRunner, testingKafka);\n+            closeAllSuppress(e, queryRunner);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI1MTU3Nw=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDE5NjA3OnYy", "diffSide": "RIGHT", "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/KafkaQueryRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzozNDo1OFrOFousoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzozNDo1OFrOFousoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI1MjQ0OQ==", "bodyText": "check not null?", "url": "https://github.com/trinodb/trino/pull/2783#discussion_r378252449", "createdAt": "2020-02-12T13:34:58Z", "author": {"login": "sopel39"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/KafkaQueryRunner.java", "diffHunk": "@@ -49,38 +49,67 @@ private KafkaQueryRunner() {}\n     private static final Logger log = Logger.get(KafkaQueryRunner.class);\n     private static final String TPCH_SCHEMA = \"tpch\";\n \n-    static DistributedQueryRunner createKafkaQueryRunner(TestingKafka testingKafka, TpchTable<?>... tables)\n-            throws Exception\n+    public static Builder builder(TestingKafka testingKafka)\n     {\n-        return createKafkaQueryRunner(testingKafka, ImmutableList.copyOf(tables));\n+        return new Builder(testingKafka);\n     }\n \n-    static DistributedQueryRunner createKafkaQueryRunner(TestingKafka testingKafka, Iterable<TpchTable<?>> tables)\n-            throws Exception\n+    public static class Builder\n+            extends DistributedQueryRunner.Builder\n     {\n-        return createKafkaQueryRunner(testingKafka, tables, ImmutableMap.of());\n-    }\n+        private final TestingKafka testingKafka;\n+        private Map<String, String> extraKafkaProperties = ImmutableMap.of();\n+        private Iterable<TpchTable<?>> tables = ImmutableList.of();\n+        private Map<SchemaTableName, KafkaTopicDescription> extraTopicDescription = ImmutableMap.of();\n+\n+        protected Builder(TestingKafka testingKafka)\n+        {\n+            super(testSessionBuilder()\n+                    .setCatalog(\"kafka\")\n+                    .setSchema(TPCH_SCHEMA)\n+                    .build());\n+            this.testingKafka = requireNonNull(testingKafka, \"testingKafka is null\");\n+        }\n \n-    static DistributedQueryRunner createKafkaQueryRunner(TestingKafka testingKafka, Iterable<TpchTable<?>> tables, Map<SchemaTableName, KafkaTopicDescription> topicDescription)\n-            throws Exception\n-    {\n-        return createKafkaQueryRunner(testingKafka, ImmutableMap.of(), tables, topicDescription);\n+        public Builder setExtraKafkaProperties(Map<String, String> extraKafkaProperties)\n+        {\n+            this.extraKafkaProperties = extraKafkaProperties;\n+            return this;\n+        }\n+\n+        public Builder setTables(Iterable<TpchTable<?>> tables)\n+        {\n+            this.tables = tables;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDE5Njc1OnYy", "diffSide": "RIGHT", "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/KafkaQueryRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzozNTowOFrOFoutBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzozNTowOFrOFoutBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI1MjU0OA==", "bodyText": "check not null?", "url": "https://github.com/trinodb/trino/pull/2783#discussion_r378252548", "createdAt": "2020-02-12T13:35:08Z", "author": {"login": "sopel39"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/KafkaQueryRunner.java", "diffHunk": "@@ -49,38 +49,67 @@ private KafkaQueryRunner() {}\n     private static final Logger log = Logger.get(KafkaQueryRunner.class);\n     private static final String TPCH_SCHEMA = \"tpch\";\n \n-    static DistributedQueryRunner createKafkaQueryRunner(TestingKafka testingKafka, TpchTable<?>... tables)\n-            throws Exception\n+    public static Builder builder(TestingKafka testingKafka)\n     {\n-        return createKafkaQueryRunner(testingKafka, ImmutableList.copyOf(tables));\n+        return new Builder(testingKafka);\n     }\n \n-    static DistributedQueryRunner createKafkaQueryRunner(TestingKafka testingKafka, Iterable<TpchTable<?>> tables)\n-            throws Exception\n+    public static class Builder\n+            extends DistributedQueryRunner.Builder\n     {\n-        return createKafkaQueryRunner(testingKafka, tables, ImmutableMap.of());\n-    }\n+        private final TestingKafka testingKafka;\n+        private Map<String, String> extraKafkaProperties = ImmutableMap.of();\n+        private Iterable<TpchTable<?>> tables = ImmutableList.of();\n+        private Map<SchemaTableName, KafkaTopicDescription> extraTopicDescription = ImmutableMap.of();\n+\n+        protected Builder(TestingKafka testingKafka)\n+        {\n+            super(testSessionBuilder()\n+                    .setCatalog(\"kafka\")\n+                    .setSchema(TPCH_SCHEMA)\n+                    .build());\n+            this.testingKafka = requireNonNull(testingKafka, \"testingKafka is null\");\n+        }\n \n-    static DistributedQueryRunner createKafkaQueryRunner(TestingKafka testingKafka, Iterable<TpchTable<?>> tables, Map<SchemaTableName, KafkaTopicDescription> topicDescription)\n-            throws Exception\n-    {\n-        return createKafkaQueryRunner(testingKafka, ImmutableMap.of(), tables, topicDescription);\n+        public Builder setExtraKafkaProperties(Map<String, String> extraKafkaProperties)\n+        {\n+            this.extraKafkaProperties = extraKafkaProperties;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDE5NzEwOnYy", "diffSide": "RIGHT", "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/KafkaQueryRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzozNToxNVrOFoutPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzozNToxNVrOFoutPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI1MjYwNA==", "bodyText": "check not null?", "url": "https://github.com/trinodb/trino/pull/2783#discussion_r378252604", "createdAt": "2020-02-12T13:35:15Z", "author": {"login": "sopel39"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/KafkaQueryRunner.java", "diffHunk": "@@ -49,38 +49,67 @@ private KafkaQueryRunner() {}\n     private static final Logger log = Logger.get(KafkaQueryRunner.class);\n     private static final String TPCH_SCHEMA = \"tpch\";\n \n-    static DistributedQueryRunner createKafkaQueryRunner(TestingKafka testingKafka, TpchTable<?>... tables)\n-            throws Exception\n+    public static Builder builder(TestingKafka testingKafka)\n     {\n-        return createKafkaQueryRunner(testingKafka, ImmutableList.copyOf(tables));\n+        return new Builder(testingKafka);\n     }\n \n-    static DistributedQueryRunner createKafkaQueryRunner(TestingKafka testingKafka, Iterable<TpchTable<?>> tables)\n-            throws Exception\n+    public static class Builder\n+            extends DistributedQueryRunner.Builder\n     {\n-        return createKafkaQueryRunner(testingKafka, tables, ImmutableMap.of());\n-    }\n+        private final TestingKafka testingKafka;\n+        private Map<String, String> extraKafkaProperties = ImmutableMap.of();\n+        private Iterable<TpchTable<?>> tables = ImmutableList.of();\n+        private Map<SchemaTableName, KafkaTopicDescription> extraTopicDescription = ImmutableMap.of();\n+\n+        protected Builder(TestingKafka testingKafka)\n+        {\n+            super(testSessionBuilder()\n+                    .setCatalog(\"kafka\")\n+                    .setSchema(TPCH_SCHEMA)\n+                    .build());\n+            this.testingKafka = requireNonNull(testingKafka, \"testingKafka is null\");\n+        }\n \n-    static DistributedQueryRunner createKafkaQueryRunner(TestingKafka testingKafka, Iterable<TpchTable<?>> tables, Map<SchemaTableName, KafkaTopicDescription> topicDescription)\n-            throws Exception\n-    {\n-        return createKafkaQueryRunner(testingKafka, ImmutableMap.of(), tables, topicDescription);\n+        public Builder setExtraKafkaProperties(Map<String, String> extraKafkaProperties)\n+        {\n+            this.extraKafkaProperties = extraKafkaProperties;\n+            return this;\n+        }\n+\n+        public Builder setTables(Iterable<TpchTable<?>> tables)\n+        {\n+            this.tables = tables;\n+            return this;\n+        }\n+\n+        public Builder setExtraTopicDescription(Map<SchemaTableName, KafkaTopicDescription> extraTopicDescription)\n+        {\n+            this.extraTopicDescription = extraTopicDescription;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDE5ODQ4OnYy", "diffSide": "RIGHT", "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/KafkaQueryRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzozNTo0MVrOFouuEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNDowODo0OFrOFov4kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI1MjgxOA==", "bodyText": "move it back to createKafkaQueryRunner?", "url": "https://github.com/trinodb/trino/pull/2783#discussion_r378252818", "createdAt": "2020-02-12T13:35:41Z", "author": {"login": "sopel39"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/KafkaQueryRunner.java", "diffHunk": "@@ -49,38 +49,67 @@ private KafkaQueryRunner() {}\n     private static final Logger log = Logger.get(KafkaQueryRunner.class);\n     private static final String TPCH_SCHEMA = \"tpch\";\n \n-    static DistributedQueryRunner createKafkaQueryRunner(TestingKafka testingKafka, TpchTable<?>... tables)\n-            throws Exception\n+    public static Builder builder(TestingKafka testingKafka)\n     {\n-        return createKafkaQueryRunner(testingKafka, ImmutableList.copyOf(tables));\n+        return new Builder(testingKafka);\n     }\n \n-    static DistributedQueryRunner createKafkaQueryRunner(TestingKafka testingKafka, Iterable<TpchTable<?>> tables)\n-            throws Exception\n+    public static class Builder\n+            extends DistributedQueryRunner.Builder\n     {\n-        return createKafkaQueryRunner(testingKafka, tables, ImmutableMap.of());\n-    }\n+        private final TestingKafka testingKafka;\n+        private Map<String, String> extraKafkaProperties = ImmutableMap.of();\n+        private Iterable<TpchTable<?>> tables = ImmutableList.of();\n+        private Map<SchemaTableName, KafkaTopicDescription> extraTopicDescription = ImmutableMap.of();\n+\n+        protected Builder(TestingKafka testingKafka)\n+        {\n+            super(testSessionBuilder()\n+                    .setCatalog(\"kafka\")\n+                    .setSchema(TPCH_SCHEMA)\n+                    .build());\n+            this.testingKafka = requireNonNull(testingKafka, \"testingKafka is null\");\n+        }\n \n-    static DistributedQueryRunner createKafkaQueryRunner(TestingKafka testingKafka, Iterable<TpchTable<?>> tables, Map<SchemaTableName, KafkaTopicDescription> topicDescription)\n-            throws Exception\n-    {\n-        return createKafkaQueryRunner(testingKafka, ImmutableMap.of(), tables, topicDescription);\n+        public Builder setExtraKafkaProperties(Map<String, String> extraKafkaProperties)\n+        {\n+            this.extraKafkaProperties = extraKafkaProperties;\n+            return this;\n+        }\n+\n+        public Builder setTables(Iterable<TpchTable<?>> tables)\n+        {\n+            this.tables = tables;\n+            return this;\n+        }\n+\n+        public Builder setExtraTopicDescription(Map<SchemaTableName, KafkaTopicDescription> extraTopicDescription)\n+        {\n+            this.extraTopicDescription = extraTopicDescription;\n+            return this;\n+        }\n+\n+        @Override\n+        public DistributedQueryRunner build()\n+                throws Exception\n+        {\n+            Logging logging = Logging.initialize();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI3MTg5MQ==", "bodyText": "No because entire DistributedQueryRunner.Builder.build() will not produce correct log messages.", "url": "https://github.com/trinodb/trino/pull/2783#discussion_r378271891", "createdAt": "2020-02-12T14:08:48Z", "author": {"login": "kokosing"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/KafkaQueryRunner.java", "diffHunk": "@@ -49,38 +49,67 @@ private KafkaQueryRunner() {}\n     private static final Logger log = Logger.get(KafkaQueryRunner.class);\n     private static final String TPCH_SCHEMA = \"tpch\";\n \n-    static DistributedQueryRunner createKafkaQueryRunner(TestingKafka testingKafka, TpchTable<?>... tables)\n-            throws Exception\n+    public static Builder builder(TestingKafka testingKafka)\n     {\n-        return createKafkaQueryRunner(testingKafka, ImmutableList.copyOf(tables));\n+        return new Builder(testingKafka);\n     }\n \n-    static DistributedQueryRunner createKafkaQueryRunner(TestingKafka testingKafka, Iterable<TpchTable<?>> tables)\n-            throws Exception\n+    public static class Builder\n+            extends DistributedQueryRunner.Builder\n     {\n-        return createKafkaQueryRunner(testingKafka, tables, ImmutableMap.of());\n-    }\n+        private final TestingKafka testingKafka;\n+        private Map<String, String> extraKafkaProperties = ImmutableMap.of();\n+        private Iterable<TpchTable<?>> tables = ImmutableList.of();\n+        private Map<SchemaTableName, KafkaTopicDescription> extraTopicDescription = ImmutableMap.of();\n+\n+        protected Builder(TestingKafka testingKafka)\n+        {\n+            super(testSessionBuilder()\n+                    .setCatalog(\"kafka\")\n+                    .setSchema(TPCH_SCHEMA)\n+                    .build());\n+            this.testingKafka = requireNonNull(testingKafka, \"testingKafka is null\");\n+        }\n \n-    static DistributedQueryRunner createKafkaQueryRunner(TestingKafka testingKafka, Iterable<TpchTable<?>> tables, Map<SchemaTableName, KafkaTopicDescription> topicDescription)\n-            throws Exception\n-    {\n-        return createKafkaQueryRunner(testingKafka, ImmutableMap.of(), tables, topicDescription);\n+        public Builder setExtraKafkaProperties(Map<String, String> extraKafkaProperties)\n+        {\n+            this.extraKafkaProperties = extraKafkaProperties;\n+            return this;\n+        }\n+\n+        public Builder setTables(Iterable<TpchTable<?>> tables)\n+        {\n+            this.tables = tables;\n+            return this;\n+        }\n+\n+        public Builder setExtraTopicDescription(Map<SchemaTableName, KafkaTopicDescription> extraTopicDescription)\n+        {\n+            this.extraTopicDescription = extraTopicDescription;\n+            return this;\n+        }\n+\n+        @Override\n+        public DistributedQueryRunner build()\n+                throws Exception\n+        {\n+            Logging logging = Logging.initialize();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI1MjgxOA=="}, "originalCommit": null, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDIyMzEyOnYy", "diffSide": "RIGHT", "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/KafkaPlugin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzo0MjoyN1rOFou9GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNDowNzoxMFrOFov0rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI1NjY2NA==", "bodyText": "I wonder if it wouldn't be better to model kafka consumer as optional binding, see how I implemented Glue column stats extension, GlueMetastoreModule.", "url": "https://github.com/trinodb/trino/pull/2783#discussion_r378256664", "createdAt": "2020-02-12T13:42:27Z", "author": {"login": "sopel39"}, "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/KafkaPlugin.java", "diffHunk": "@@ -30,12 +29,16 @@\n public class KafkaPlugin\n         implements Plugin\n {\n+    public static final Module DEFAULT_EXTENSION = binder -> {\n+        binder.install(new KafkaConsumerModule());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI3MDg5Mw==", "bodyText": "actually it is not optional. To make kafka work one has to provide kafka consumer. By it could be a different class depending on how kafka is extended.", "url": "https://github.com/trinodb/trino/pull/2783#discussion_r378270893", "createdAt": "2020-02-12T14:07:10Z", "author": {"login": "kokosing"}, "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/KafkaPlugin.java", "diffHunk": "@@ -30,12 +29,16 @@\n public class KafkaPlugin\n         implements Plugin\n {\n+    public static final Module DEFAULT_EXTENSION = binder -> {\n+        binder.install(new KafkaConsumerModule());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI1NjY2NA=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDIzMzg4OnYy", "diffSide": "RIGHT", "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/KafkaConnectorModule.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzo0NTozMFrOFovDmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNDowNjoxNFrOFovygg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI1ODMyOQ==", "bodyText": "do we really need more than one description supplier at the same time?", "url": "https://github.com/trinodb/trino/pull/2783#discussion_r378258329", "createdAt": "2020-02-12T13:45:30Z", "author": {"login": "sopel39"}, "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/KafkaConnectorModule.java", "diffHunk": "@@ -50,6 +51,7 @@ public void configure(Binder binder)\n         binder.bind(KafkaConnector.class).in(Scopes.SINGLETON);\n \n         configBinder(binder).bindConfig(KafkaConfig.class);\n+        newSetBinder(binder, TableDescriptionSupplier.class).addBinding().toProvider(KafkaTableDescriptionSupplier.class).in(Scopes.SINGLETON);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI3MDMzOA==", "bodyText": "we use two in tests", "url": "https://github.com/trinodb/trino/pull/2783#discussion_r378270338", "createdAt": "2020-02-12T14:06:14Z", "author": {"login": "kokosing"}, "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/KafkaConnectorModule.java", "diffHunk": "@@ -50,6 +51,7 @@ public void configure(Binder binder)\n         binder.bind(KafkaConnector.class).in(Scopes.SINGLETON);\n \n         configBinder(binder).bindConfig(KafkaConfig.class);\n+        newSetBinder(binder, TableDescriptionSupplier.class).addBinding().toProvider(KafkaTableDescriptionSupplier.class).in(Scopes.SINGLETON);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI1ODMyOQ=="}, "originalCommit": null, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDIzOTE4OnYy", "diffSide": "RIGHT", "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/KafkaQueryRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzo0Njo1NVrOFovGwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNDowODowNFrOFov2rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI1OTEzNw==", "bodyText": "why this one is needed? Do we lack some extensions?", "url": "https://github.com/trinodb/trino/pull/2783#discussion_r378259137", "createdAt": "2020-02-12T13:46:55Z", "author": {"login": "sopel39"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/KafkaQueryRunner.java", "diffHunk": "@@ -99,6 +102,12 @@ public Builder setExtension(Module extension)\n             return this;\n         }\n \n+        public Builder setPluginFactory(Function<Module, Plugin> pluginFactory)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI3MTQwNg==", "bodyText": "Let me check it again.", "url": "https://github.com/trinodb/trino/pull/2783#discussion_r378271406", "createdAt": "2020-02-12T14:08:04Z", "author": {"login": "kokosing"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/KafkaQueryRunner.java", "diffHunk": "@@ -99,6 +102,12 @@ public Builder setExtension(Module extension)\n             return this;\n         }\n \n+        public Builder setPluginFactory(Function<Module, Plugin> pluginFactory)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI1OTEzNw=="}, "originalCommit": null, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODc2NDMwOnYy", "diffSide": "RIGHT", "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/KafkaQueryRunner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDo0OTo1MFrOFs5Ytg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDo0OTo1MFrOFs5Ytg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYyMTg3OA==", "bodyText": "static import?", "url": "https://github.com/trinodb/trino/pull/2783#discussion_r382621878", "createdAt": "2020-02-21T14:49:50Z", "author": {"login": "sopel39"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/KafkaQueryRunner.java", "diffHunk": "@@ -64,7 +63,7 @@ public static Builder builder(TestingKafka testingKafka)\n         private Map<String, String> extraKafkaProperties = ImmutableMap.of();\n         private List<TpchTable<?>> tables = ImmutableList.of();\n         private Map<SchemaTableName, KafkaTopicDescription> extraTopicDescription = ImmutableMap.of();\n-        private Module extension = EMPTY_MODULE;\n+        private Module extension = KafkaPlugin.DEFAULT_EXTENSION;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODc2NzI0OnYy", "diffSide": "RIGHT", "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/KafkaConsumerModule.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDo1MDo0NFrOFs5akQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMDozNToyMVrOFtMyTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYyMjM1Mw==", "bodyText": "or you could use optional binding", "url": "https://github.com/trinodb/trino/pull/2783#discussion_r382622353", "createdAt": "2020-02-21T14:50:44Z", "author": {"login": "sopel39"}, "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/KafkaConsumerModule.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kafka;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Module;\n+import com.google.inject.Scopes;\n+\n+public class KafkaConsumerModule\n+        implements Module\n+{\n+    @Override\n+    public void configure(Binder binder)\n+    {\n+        binder.bind(KafkaConsumerFactory.class).to(PlainTextKafkaConsumerFactory.class).in(Scopes.SINGLETON);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkzNTc1Mg==", "bodyText": "I cannot, there has to be binding for KafkaConsumerFactory. Otherwise kafka won't fly.", "url": "https://github.com/trinodb/trino/pull/2783#discussion_r382935752", "createdAt": "2020-02-22T19:34:38Z", "author": {"login": "kokosing"}, "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/KafkaConsumerModule.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kafka;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Module;\n+import com.google.inject.Scopes;\n+\n+public class KafkaConsumerModule\n+        implements Module\n+{\n+    @Override\n+    public void configure(Binder binder)\n+    {\n+        binder.bind(KafkaConsumerFactory.class).to(PlainTextKafkaConsumerFactory.class).in(Scopes.SINGLETON);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYyMjM1Mw=="}, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkzOTcyNA==", "bodyText": "You could use default binding which can be overridden in extension", "url": "https://github.com/trinodb/trino/pull/2783#discussion_r382939724", "createdAt": "2020-02-22T20:35:21Z", "author": {"login": "sopel39"}, "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/KafkaConsumerModule.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kafka;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Module;\n+import com.google.inject.Scopes;\n+\n+public class KafkaConsumerModule\n+        implements Module\n+{\n+    @Override\n+    public void configure(Binder binder)\n+    {\n+        binder.bind(KafkaConsumerFactory.class).to(PlainTextKafkaConsumerFactory.class).in(Scopes.SINGLETON);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYyMjM1Mw=="}, "originalCommit": null, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 902, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}