{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM3MDA3NjE3", "number": 6307, "title": "Fix DATA_TYPE, DECIMAL_DIGITS for parametric date/time types", "bodyText": "Fix information reported by DatabaseMetaData#getColumns:\n\nfix DATA_TYPE for parametric time and time with time zone\nprovide DECIMAL_DIGITS for parametric time and timestamp (with\nand without zone)\n\nTest TYPE_NAME returned by that method.", "createdAt": "2020-12-11T15:22:05Z", "url": "https://github.com/trinodb/trino/pull/6307", "merged": true, "mergeCommit": {"oid": "2fe748bbdac4c6332e0a4e872fa0a6f2f2af282d"}, "closed": true, "closedAt": "2020-12-11T20:34:28Z", "author": {"login": "findepi"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdlJLX0AH2gAyNTM3MDA3NjE3OmQxOTJiNzczZTVjYjM3YTFmNzA3NWE0NWVmMmQ5MTFhYzM0MzJkNjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdlKmwcgFqTU1MDI1NDYzNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d192b773e5cb37a1f7075a45ef2d911ac3432d64", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/d192b773e5cb37a1f7075a45ef2d911ac3432d64", "committedDate": "2020-12-11T14:54:00Z", "message": "Move system.runtime's tests to system.runtime package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b480500b4f79764cd3663a3c053605afa7c718a", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/2b480500b4f79764cd3663a3c053605afa7c718a", "committedDate": "2020-12-11T15:21:35Z", "message": "Fix DATA_TYPE, DECIMAL_DIGITS for parametric date/time types\n\nFix information reported by `DatabaseMetaData#getColumns`:\n\n- fix `DATA_TYPE` for parametric `time` and `time with time zone`\n- provide `DECIMAL_DIGITS` for parametric `time` and `timestamp` (with\n  and without zone)\n\nTest `TYPE_NAME` returned by that method."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwMjAyMzg0", "url": "https://github.com/trinodb/trino/pull/6307#pullrequestreview-550202384", "createdAt": "2020-12-11T15:32:55Z", "commit": {"oid": "2b480500b4f79764cd3663a3c053605afa7c718a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNTozMjo1NVrOID965w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNTozMjo1NVrOID965w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzMTE0Mw==", "bodyText": "What is the meaning of columnSize here? It seem weird that increase by N in TIMESTAMP precision makes the columnSize increase by N.", "url": "https://github.com/trinodb/trino/pull/6307#discussion_r541031143", "createdAt": "2020-12-11T15:32:55Z", "author": {"login": "losipiuk"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestPrestoDatabaseMetaData.java", "diffHunk": "@@ -763,12 +783,30 @@ public void testGetColumns()\n                 assertColumnSpec(rs, Types.VARCHAR, (long) Integer.MAX_VALUE, null, null, (long) Integer.MAX_VALUE, createUnboundedVarcharType());\n                 assertColumnSpec(rs, Types.CHAR, 345L, null, null, 345L, createCharType(345));\n                 assertColumnSpec(rs, Types.VARBINARY, (long) Integer.MAX_VALUE, null, null, (long) Integer.MAX_VALUE, VarbinaryType.VARBINARY);\n-                assertColumnSpec(rs, Types.TIME, 12L, null, null, null, TimeType.TIME);\n-                assertColumnSpec(rs, Types.TIME_WITH_TIMEZONE, 18L, null, null, null, TimeWithTimeZoneType.TIME_WITH_TIME_ZONE);\n-                assertColumnSpec(rs, Types.TIMESTAMP, 25L, null, null, null, TimestampType.TIMESTAMP_MILLIS);\n-                assertColumnSpec(rs, Types.TIMESTAMP, 31L, null, null, null, createTimestampType(9));\n-                assertColumnSpec(rs, Types.TIMESTAMP_WITH_TIMEZONE, 59L, null, null, null, TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE);\n-                assertColumnSpec(rs, Types.TIMESTAMP_WITH_TIMEZONE, 65L, null, null, null, createTimestampWithTimeZoneType(9));\n+                assertColumnSpec(rs, Types.TIME, 12L, null, 3L, null, TimeType.TIME);\n+                assertColumnSpec(rs, Types.TIME, 8L, null, 0L, null, createTimeType(0));\n+                assertColumnSpec(rs, Types.TIME, 12L, null, 3L, null, createTimeType(3));\n+                assertColumnSpec(rs, Types.TIME, 15L, null, 6L, null, createTimeType(6));\n+                assertColumnSpec(rs, Types.TIME, 18L, null, 9L, null, createTimeType(9));\n+                assertColumnSpec(rs, Types.TIME, 21L, null, 12L, null, createTimeType(12));\n+                assertColumnSpec(rs, Types.TIME_WITH_TIMEZONE, 18L, null, 3L, null, TimeWithTimeZoneType.TIME_WITH_TIME_ZONE);\n+                assertColumnSpec(rs, Types.TIME_WITH_TIMEZONE, 14L, null, 0L, null, createTimeWithTimeZoneType(0));\n+                assertColumnSpec(rs, Types.TIME_WITH_TIMEZONE, 18L, null, 3L, null, createTimeWithTimeZoneType(3));\n+                assertColumnSpec(rs, Types.TIME_WITH_TIMEZONE, 21L, null, 6L, null, createTimeWithTimeZoneType(6));\n+                assertColumnSpec(rs, Types.TIME_WITH_TIMEZONE, 24L, null, 9L, null, createTimeWithTimeZoneType(9));\n+                assertColumnSpec(rs, Types.TIME_WITH_TIMEZONE, 27L, null, 12L, null, createTimeWithTimeZoneType(12));\n+                assertColumnSpec(rs, Types.TIMESTAMP, 25L, null, 3L, null, TimestampType.TIMESTAMP);\n+                assertColumnSpec(rs, Types.TIMESTAMP, 21L, null, 0L, null, createTimestampType(0));\n+                assertColumnSpec(rs, Types.TIMESTAMP, 25L, null, 3L, null, createTimestampType(3));\n+                assertColumnSpec(rs, Types.TIMESTAMP, 28L, null, 6L, null, createTimestampType(6));\n+                assertColumnSpec(rs, Types.TIMESTAMP, 31L, null, 9L, null, createTimestampType(9));\n+                assertColumnSpec(rs, Types.TIMESTAMP, 34L, null, 12L, null, createTimestampType(12));\n+                assertColumnSpec(rs, Types.TIMESTAMP_WITH_TIMEZONE, 59L, null, 3L, null, TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE);\n+                assertColumnSpec(rs, Types.TIMESTAMP_WITH_TIMEZONE, 55L, null, 0L, null, createTimestampWithTimeZoneType(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b480500b4f79764cd3663a3c053605afa7c718a"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwMjAyODgw", "url": "https://github.com/trinodb/trino/pull/6307#pullrequestreview-550202880", "createdAt": "2020-12-11T15:33:28Z", "commit": {"oid": "2b480500b4f79764cd3663a3c053605afa7c718a"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwMjU0NjM1", "url": "https://github.com/trinodb/trino/pull/6307#pullrequestreview-550254635", "createdAt": "2020-12-11T16:33:49Z", "commit": {"oid": "2b480500b4f79764cd3663a3c053605afa7c718a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2188, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}