{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1NTcxNTY2", "number": 3476, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOToxNTo1MFrODz4cWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOToxODoxMVrODz4gDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzI4NzMxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PruneIndexJoinColumns.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOToxNTo1MFrOGIjsIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOToxNTo1MFrOGIjsIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYyNjUzMQ==", "bodyText": "Use Java streams instead of Guava Iterables. Since the streams APIs were added to Java, we've been slowly migrating away from Guava's implementation.", "url": "https://github.com/trinodb/trino/pull/3476#discussion_r411626531", "createdAt": "2020-04-20T19:15:50Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PruneIndexJoinColumns.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner.iterative.rule;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.plan.IndexJoinNode;\n+import io.prestosql.sql.planner.plan.PlanNode;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static io.prestosql.sql.planner.iterative.rule.Util.restrictChildOutputs;\n+import static io.prestosql.sql.planner.plan.Patterns.indexJoin;\n+\n+public class PruneIndexJoinColumns\n+        extends ProjectOffPushDownRule<IndexJoinNode>\n+{\n+    public PruneIndexJoinColumns()\n+    {\n+        super(indexJoin());\n+    }\n+\n+    @Override\n+    protected Optional<PlanNode> pushDownProjectOff(Context context, IndexJoinNode indexJoinNode, Set<Symbol> referencedOutputs)\n+    {\n+        ImmutableSet.Builder<Symbol> probeInputs = ImmutableSet.<Symbol>builder()\n+                .addAll(referencedOutputs)\n+                .addAll(Iterables.transform(indexJoinNode.getCriteria(), IndexJoinNode.EquiJoinClause::getProbe));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzI5Njc4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/sql/planner/assertions/IndexJoinMatcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOToxODoxMVrOGIjxuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOToxODoxMVrOGIjxuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYyNzk2MQ==", "bodyText": "What does \"maker\" mean for the variable name? Was it supposed to be \"marker\" (i.e., a typo)?", "url": "https://github.com/trinodb/trino/pull/3476#discussion_r411627961", "createdAt": "2020-04-20T19:18:11Z", "author": {"login": "martint"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/assertions/IndexJoinMatcher.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner.assertions;\n+\n+import com.google.common.collect.ImmutableSet;\n+import io.prestosql.Session;\n+import io.prestosql.cost.StatsProvider;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.sql.planner.plan.IndexJoinNode;\n+import io.prestosql.sql.planner.plan.PlanNode;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableSet.toImmutableSet;\n+import static io.prestosql.sql.planner.assertions.MatchResult.NO_MATCH;\n+import static java.util.Objects.requireNonNull;\n+\n+final class IndexJoinMatcher\n+        implements Matcher\n+{\n+    private final IndexJoinNode.Type type;\n+    private final List<ExpectedValueProvider<IndexJoinNode.EquiJoinClause>> criteria;\n+    private final Optional<PlanTestSymbol> probeHashSymbol;\n+    private final Optional<PlanTestSymbol> indexHashSymbol;\n+\n+    IndexJoinMatcher(\n+            IndexJoinNode.Type type,\n+            List<ExpectedValueProvider<IndexJoinNode.EquiJoinClause>> criteria,\n+            Optional<PlanTestSymbol> probeHashSymbol,\n+            Optional<PlanTestSymbol> indexHashSymbol)\n+    {\n+        this.type = requireNonNull(type, \"type is null\");\n+        this.criteria = requireNonNull(criteria, \"criteria is null\");\n+        this.probeHashSymbol = requireNonNull(probeHashSymbol, \"probeHashSymbol is null\");\n+        this.indexHashSymbol = requireNonNull(indexHashSymbol, \"indexHashSymbol is null\");\n+    }\n+\n+    @Override\n+    public boolean shapeMatches(PlanNode node)\n+    {\n+        if (!(node instanceof IndexJoinNode)) {\n+            return false;\n+        }\n+\n+        IndexJoinNode indexJoinNode = (IndexJoinNode) node;\n+        return indexJoinNode.getType() == type;\n+    }\n+\n+    @Override\n+    public MatchResult detailMatches(PlanNode node, StatsProvider stats, Session session, Metadata metadata, SymbolAliases symbolAliases)\n+    {\n+        checkState(shapeMatches(node), \"Plan testing framework error: shapeMatches returned false in detailMatches in %s\", this.getClass().getName());\n+        IndexJoinNode indexJoinNode = (IndexJoinNode) node;\n+\n+        if (indexJoinNode.getCriteria().size() != criteria.size()) {\n+            return NO_MATCH;\n+        }\n+        Set<IndexJoinNode.EquiJoinClause> actualCriteria = ImmutableSet.copyOf(indexJoinNode.getCriteria());\n+        Set<IndexJoinNode.EquiJoinClause> expectedCriteria = criteria.stream()\n+                .map(maker -> maker.getExpectedValue(symbolAliases))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 177, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}