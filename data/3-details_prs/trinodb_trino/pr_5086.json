{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxMTcwOTk0", "number": 5086, "title": "Improve message Access Denied: insufficient view owner privileges", "bodyText": "If a user A creates a view and user B wants to access the view and then user A loses access to the original data then B should not be able to access data in the view.\nIf B gets and access denied, they are told whether it's because they don't have access to the view or if the view creator doesn't have access to the underlying data.\nThis PR is only about enhancing information in the error message.", "createdAt": "2020-09-07T08:13:50Z", "url": "https://github.com/trinodb/trino/pull/5086", "merged": true, "mergeCommit": {"oid": "85205d0953dcbcb1c5c059846e39f971be77489e"}, "closed": true, "closedAt": "2020-09-30T09:16:25Z", "author": {"login": "ssheikin"}, "timelineItems": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdGfM0DAFqTQ4MzM4MTc4Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdN3v6pABqjM4MjMwODI2Nzk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMzgxNzgz", "url": "https://github.com/trinodb/trino/pull/5086#pullrequestreview-483381783", "createdAt": "2020-09-07T09:01:35Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOTowMTozNlrOHN28FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOTowMTozNlrOHN28FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI5MzY1Mw==", "bodyText": "this seems generic and not specific to columns only. Are column names available (accessible) to query user?", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r484293653", "createdAt": "2020-09-07T09:01:36Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/security/AccessDeniedException.java", "diffHunk": "@@ -321,6 +326,11 @@ public static void denyCreateViewWithSelect(String sourceName, ConnectorIdentity\n         throw new AccessDeniedException(format(\"View owner '%s' cannot create view that selects from %s%s\", identity.getUser(), sourceName, formatExtraInfo(extraInfo)));\n     }\n \n+    public static void denySelectFromColumns(AccessDeniedException e)\n+    {\n+        throw new AccessDeniedException(\"View owner does not have sufficient privileges\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNjg3MzUz", "url": "https://github.com/trinodb/trino/pull/5086#pullrequestreview-483687353", "createdAt": "2020-09-07T18:40:58Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxODo0MDo1OVrOHOGK_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxODo0MTo0M1rOHOGLgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU0MzIyOQ==", "bodyText": "Improve view Access Denied messages, can you please describe what was improved?", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r484543229", "createdAt": "2020-09-07T18:40:59Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -14,13 +14,15 @@\n package io.prestosql.security;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU0MzM2Mg==", "bodyText": "This commit is very simple, and this constructor so far is not used (the usage above does not count), so I would squash these two commits.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r484543362", "createdAt": "2020-09-07T18:41:43Z", "author": {"login": "kokosing"}, "path": "presto-spi/src/main/java/io/prestosql/spi/security/AccessDeniedException.java", "diffHunk": "@@ -28,7 +28,12 @@\n {\n     public AccessDeniedException(String message)\n     {\n-        super(PERMISSION_DENIED, \"Access Denied: \" + message);\n+        this(message, null);\n+    }\n+\n+    public AccessDeniedException(String message, Throwable throwable)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzODEyODE5", "url": "https://github.com/trinodb/trino/pull/5086#pullrequestreview-483812819", "createdAt": "2020-09-08T05:54:10Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNTo1NDoxMFrOHONqVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNTo1NTowMVrOHONrkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY2NTk0Mg==", "bodyText": "Use AssertJ instead of something custom", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r484665942", "createdAt": "2020-09-08T05:54:10Z", "author": {"login": "electrum"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -295,6 +312,9 @@ protected void assertAccessDenied(\n             }\n             catch (RuntimeException e) {\n                 assertExceptionMessage(sql, e, \".*Access Denied: \" + exceptionsMessageRegExp);\n+                if (exceptionsCauseMessageRegExp != null) {\n+                    assertCauseExceptionMessage(sql, e, \".*Access Denied: \" + exceptionsCauseMessageRegExp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY2NjI1Nw==", "bodyText": "We should fix the callers instead of catching and rethrowing here", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r484666257", "createdAt": "2020-09-08T05:55:01Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -42,7 +44,12 @@ public void checkCanSelectFromColumns(SecurityContext context, QualifiedObjectNa\n         // In SQL, views are special in that they execute with permissions of the owner.\n         // This means that the owner of the view is effectively granting permissions to the user running the query,\n         // and thus must have the equivalent of the SQL standard \"GRANT ... WITH GRANT OPTION\".\n-        delegate.checkCanCreateViewWithSelectFromColumns(context, tableName, columnNames);\n+        try {\n+            delegate.checkCanCreateViewWithSelectFromColumns(context, tableName, columnNames);\n+        }\n+        catch (AccessDeniedException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MzU2NTcw", "url": "https://github.com/trinodb/trino/pull/5086#pullrequestreview-486356570", "createdAt": "2020-09-10T22:34:02Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjozNDowMlrOHQIApQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjozNDowMlrOHQIApQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3MDUwMQ==", "bodyText": "I don't think this public method makes sense here, as it's only usage is inside ViewAccessControl. The other methods are intended for use by any access control implementation. Instead, we can do this inline in ViewAccessControl.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r486670501", "createdAt": "2020-09-10T22:34:02Z", "author": {"login": "electrum"}, "path": "presto-spi/src/main/java/io/prestosql/spi/security/AccessDeniedException.java", "diffHunk": "@@ -321,6 +326,11 @@ public static void denyCreateViewWithSelect(String sourceName, ConnectorIdentity\n         throw new AccessDeniedException(format(\"View owner '%s' cannot create view that selects from %s%s\", identity.getUser(), sourceName, formatExtraInfo(extraInfo)));\n     }\n \n+    public static void denyAccessToViewBecauseOwnerLacksPrivileges(AccessDeniedException e)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NDAyODM4", "url": "https://github.com/trinodb/trino/pull/5086#pullrequestreview-489402838", "createdAt": "2020-09-16T08:40:12Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODo0MDoxMlrOHSmaaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODo0MDoxMlrOHSmaaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI2NTc3MQ==", "bodyText": "This:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new PrestoException(PERMISSION_DENIED, \"Access Denied: View owner does not have sufficient privileges\", e);\n          \n          \n            \n                        throw new PrestoException(PERMISSION_DENIED, \"Access Denied: View owner does not have sufficient privileges: \" + e.getMessage(), e);\n          \n      \n    \n    \n  \n\nwould be more useful & more actionable.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r489265771", "createdAt": "2020-09-16T08:40:12Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -74,4 +78,14 @@ public void checkCanGrantExecuteFunctionPrivilege(SecurityContext context, Strin\n     {\n         return delegate.getColumnMasks(context, tableName, columnName, type);\n     }\n+\n+    private void executeAsViewOwner(Consumer<AccessControl> consumer)\n+    {\n+        try {\n+            consumer.accept(delegate);\n+        }\n+        catch (AccessDeniedException e) {\n+            throw new PrestoException(PERMISSION_DENIED, \"Access Denied: View owner does not have sufficient privileges\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMDU5OTAw", "url": "https://github.com/trinodb/trino/pull/5086#pullrequestreview-490059900", "createdAt": "2020-09-16T22:22:11Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMjoyMjoxMlrOHTGM-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMjoyNzowMVrOHTGT0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NjYxOA==", "bodyText": "This could take Runnable since the caller already has the delegate. Then this method can be static.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r489786618", "createdAt": "2020-09-16T22:22:12Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -74,4 +78,14 @@ public void checkCanGrantExecuteFunctionPrivilege(SecurityContext context, Strin\n     {\n         return delegate.getColumnMasks(context, tableName, columnName, type);\n     }\n+\n+    private void executeAsViewOwner(Consumer<AccessControl> consumer)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4Njg1Nw==", "bodyText": "This will result in a repeated \"Access Denied\" in the message:\n\nAccess Denied: View owner does not have sufficient privileges: Access Denied: View owner 'xxx' cannot create view that selects from yyy\n\nWe should strip that off, since we know the original message always has it.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r489786857", "createdAt": "2020-09-16T22:22:52Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -74,4 +78,14 @@ public void checkCanGrantExecuteFunctionPrivilege(SecurityContext context, Strin\n     {\n         return delegate.getColumnMasks(context, tableName, columnName, type);\n     }\n+\n+    private void executeAsViewOwner(Consumer<AccessControl> consumer)\n+    {\n+        try {\n+            consumer.accept(delegate);\n+        }\n+        catch (AccessDeniedException e) {\n+            throw new PrestoException(PERMISSION_DENIED, \"Access Denied: View owner does not have sufficient privileges: \" + e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NzI2MA==", "bodyText": "Either wrap all arguments or none", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r489787260", "createdAt": "2020-09-16T22:24:03Z", "author": {"login": "electrum"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -293,10 +293,26 @@ protected void assertAccessDenied(@Language(\"SQL\") String sql, @Language(\"RegExp\n         assertAccessDenied(getSession(), sql, exceptionsMessageRegExp, deniedPrivileges);\n     }\n \n+    protected void assertAccessDenied(@Language(\"SQL\") String sql, @Language(\"RegExp\") String exceptionsMessageRegExp, @Language(\"RegExp\") String exceptionsCauseMessageRegExp,\n+            TestingPrivilege... deniedPrivileges)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4ODM2OQ==", "bodyText": "No need to use string format for simple concatenation\nString query = \"Query: \" + sql;", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r489788369", "createdAt": "2020-09-16T22:27:01Z", "author": {"login": "electrum"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -306,7 +322,11 @@ protected void assertAccessDenied(\n                 fail(\"Expected \" + AccessDeniedException.class.getSimpleName());\n             }\n             catch (RuntimeException e) {\n-                assertExceptionMessage(sql, e, \".*Access Denied: \" + exceptionsMessageRegExp);\n+                String query = format(\"Query: %s\", sql);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMzA4MDIy", "url": "https://github.com/trinodb/trino/pull/5086#pullrequestreview-490308022", "createdAt": "2020-09-17T07:19:34Z", "commit": null, "state": "DISMISSED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNzoxOTozNFrOHTUsuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNzoxOTo0M1rOHTUtCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAyNDEyMA==", "bodyText": "Please throw io.prestosql.spi.security.AccessDeniedException", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490024120", "createdAt": "2020-09-17T07:19:34Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -74,4 +78,14 @@ public void checkCanGrantExecuteFunctionPrivilege(SecurityContext context, Strin\n     {\n         return delegate.getColumnMasks(context, tableName, columnName, type);\n     }\n+\n+    private void executeAsViewOwner(Consumer<AccessControl> consumer)\n+    {\n+        try {\n+            consumer.accept(delegate);\n+        }\n+        catch (AccessDeniedException e) {\n+            throw new PrestoException(PERMISSION_DENIED, \"View owner does not have sufficient privileges: \" + e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAyNDIwMA==", "bodyText": "I considered Runnable as well, however I did not find good method name.\n\nLet's call it wrapAccessDeniedException", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490024200", "createdAt": "2020-09-17T07:19:43Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -74,4 +78,14 @@ public void checkCanGrantExecuteFunctionPrivilege(SecurityContext context, Strin\n     {\n         return delegate.getColumnMasks(context, tableName, columnName, type);\n     }\n+\n+    private void executeAsViewOwner(Consumer<AccessControl> consumer)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NjYxOA=="}, "originalCommit": null, "originalPosition": 53}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMzI2ODIw", "url": "https://github.com/trinodb/trino/pull/5086#pullrequestreview-490326820", "createdAt": "2020-09-17T07:45:37Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNzo0NTozN1rOHTVlhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNzo0NTozN1rOHTVlhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAzODY2Mg==", "bodyText": "static", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490038662", "createdAt": "2020-09-17T07:45:37Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -74,4 +78,14 @@ public void checkCanGrantExecuteFunctionPrivilege(SecurityContext context, Strin\n     {\n         return delegate.getColumnMasks(context, tableName, columnName, type);\n     }\n+\n+    private void wrapAccessDeniedException(Runnable runnable)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMzM1MTE5", "url": "https://github.com/trinodb/trino/pull/5086#pullrequestreview-490335119", "createdAt": "2020-09-17T07:56:39Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNzo1NjozOVrOHTV-yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNzo1NzowMlrOHTV_0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0NTEyOQ==", "bodyText": "i'd suggest decoupling running query with verifying the exception using\norg.assertj.core.api.Assertions#assertThatThrownBy(org.assertj.core.api.ThrowableAssert.ThrowingCallable)\na helper like io.prestosql.testing.assertions.PrestoExceptionAssert#assertPrestoExceptionThrownBy can be useful", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490045129", "createdAt": "2020-09-17T07:56:39Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -294,9 +293,28 @@ protected void assertAccessDenied(@Language(\"SQL\") String sql, @Language(\"RegExp\n     }\n \n     protected void assertAccessDenied(\n+            @Language(\"SQL\") String sql,\n+            @Language(\"RegExp\") String exceptionsMessageRegExp,\n+            @Language(\"RegExp\") String exceptionsCauseMessageRegExp,\n+            TestingPrivilege... deniedPrivileges)\n+    {\n+        assertAccessDenied(getSession(), sql, \".*\" + exceptionsMessageRegExp + \": Access Denied: \" + exceptionsCauseMessageRegExp, \".*Access Denied: \" + exceptionsCauseMessageRegExp, deniedPrivileges);\n+    }\n+\n+    protected void assertAccessDenied(\n+            Session session,\n+            @Language(\"SQL\") String sql,\n+            @Language(\"RegExp\") String exceptionsMessageRegExp,\n+            TestingPrivilege... deniedPrivileges)\n+    {\n+        assertAccessDenied(getSession(), sql, \".*Access Denied: \" + exceptionsMessageRegExp, null, deniedPrivileges);\n+    }\n+\n+    private void assertAccessDenied(\n             Session session,\n             @Language(\"SQL\") String sql,\n             @Language(\"RegExp\") String exceptionsMessageRegExp,\n+            @Language(\"RegExp\") String exceptionsCauseMessageRegExp,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0NTM5NA==", "bodyText": "can we match the full exception message here, not just a aubstring?\n(the actual message has : ... after \"privileges\")\nthis would also make sure @electrum is happy about \"Access Denied\" being or not being repeated within the message", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490045394", "createdAt": "2020-09-17T07:57:02Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -1062,6 +1062,7 @@ public void testViewColumnAccessControl()\n         // verify selecting from a view over a table requires the view owner to have special view creation privileges for the table\n         assertAccessDenied(\n                 \"SELECT * FROM \" + columnAccessViewName,\n+                \"View owner does not have sufficient privileges\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMzM5OTQ5", "url": "https://github.com/trinodb/trino/pull/5086#pullrequestreview-490339949", "createdAt": "2020-09-17T08:02:49Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwODowMjo0OVrOHTWNSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwODowMjo0OVrOHTWNSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0ODg0MQ==", "bodyText": "Please do not use .* at the begin and end of error message regexp. We need be sure if there is nothing extra here.\nSee:\n           throw new PrestoException(PERMISSION_DENIED, \"View owner does not have sufficient privileges: \" + e.getMessage(), e);\n\nThere is a suffix added that you didn't verify. Please fix this.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490048841", "createdAt": "2020-09-17T08:02:49Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -294,9 +293,28 @@ protected void assertAccessDenied(@Language(\"SQL\") String sql, @Language(\"RegExp\n     }\n \n     protected void assertAccessDenied(\n+            @Language(\"SQL\") String sql,\n+            @Language(\"RegExp\") String exceptionsMessageRegExp,\n+            @Language(\"RegExp\") String exceptionsCauseMessageRegExp,\n+            TestingPrivilege... deniedPrivileges)\n+    {\n+        assertAccessDenied(getSession(), sql, \".*\" + exceptionsMessageRegExp + \": Access Denied: \" + exceptionsCauseMessageRegExp, \".*Access Denied: \" + exceptionsCauseMessageRegExp, deniedPrivileges);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMzQxMzA4", "url": "https://github.com/trinodb/trino/pull/5086#pullrequestreview-490341308", "createdAt": "2020-09-17T08:04:32Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwODowNDozMlrOHTWRKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwODowNDozMlrOHTWRKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0OTgzMw==", "bodyText": "Actually we do not care about the cause, as this is not printed to the user. Please undo these changes.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490049833", "createdAt": "2020-09-17T08:04:32Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -306,7 +324,11 @@ protected void assertAccessDenied(\n                 fail(\"Expected \" + AccessDeniedException.class.getSimpleName());\n             }\n             catch (RuntimeException e) {\n-                assertExceptionMessage(sql, e, \".*Access Denied: \" + exceptionsMessageRegExp);\n+                String query = \"Query: \" + sql;\n+                assertThat(e).as(query).hasMessageMatching(exceptionsMessageRegExp);\n+                if (exceptionsCauseMessageRegExp != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 56}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMzczMzIy", "url": "https://github.com/trinodb/trino/pull/5086#pullrequestreview-491373322", "createdAt": "2020-09-18T11:18:48Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMToxODo0OFrOHUI2Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMToyMTozNVrOHUI7KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3ODQ5NQ==", "bodyText": "The full error message is:\nAccess Denied: View owner does not have sufficient privileges: Access Denied: View owner 'test_view_access_owner' cannot create view that selects from \\\\w+.\\\\w+.orders\\\n\nThere are two issues here.\n\nAccess Denied:  is unnecessarly doubled\nerror message is long and detailed (but on the hand it could be useful to understand why just happened). How about raising only Access Denied: View owner does not have sufficient privileges without the second part? @electrum @findepi thoughts?", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490878495", "createdAt": "2020-09-18T11:18:48Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -1060,9 +1060,9 @@ public void testViewColumnAccessControl()\n                 privilege(\"orders\", CREATE_VIEW_WITH_SELECT_COLUMNS));\n \n         // verify selecting from a view over a table requires the view owner to have special view creation privileges for the table\n-        assertAccessDenied(\n+        assertWrappedAccessDenied(\n                 \"SELECT * FROM \" + columnAccessViewName,\n-                \"View owner 'test_view_access_owner' cannot create view that selects from .*.orders.*\",\n+                \"View owner does not have sufficient privileges: Access Denied: View owner 'test_view_access_owner' cannot create view that selects from \\\\w+.\\\\w+.orders\\\\w*\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3OTA4Mg==", "bodyText": "Why assertAccessDenied is not enough? Why do you care it is wrapped? To me it is implementation detail on which test should not rely on.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490879082", "createdAt": "2020-09-18T11:20:08Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -1060,9 +1060,9 @@ public void testViewColumnAccessControl()\n                 privilege(\"orders\", CREATE_VIEW_WITH_SELECT_COLUMNS));\n \n         // verify selecting from a view over a table requires the view owner to have special view creation privileges for the table\n-        assertAccessDenied(\n+        assertWrappedAccessDenied(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3OTc4NQ==", "bodyText": "This refactor is nice, but it has nothing to do with the commit. Please extract it to separate commit.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490879785", "createdAt": "2020-09-18T11:21:35Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -299,19 +301,19 @@ protected void assertAccessDenied(\n             @Language(\"RegExp\") String exceptionsMessageRegExp,\n             TestingPrivilege... deniedPrivileges)\n     {\n-        executeExclusively(() -> {\n-            try {\n-                queryRunner.getAccessControl().deny(deniedPrivileges);\n-                queryRunner.execute(session, sql);\n-                fail(\"Expected \" + AccessDeniedException.class.getSimpleName());\n-            }\n-            catch (RuntimeException e) {\n-                assertExceptionMessage(sql, e, \".*Access Denied: \" + exceptionsMessageRegExp);\n-            }\n-            finally {\n-                queryRunner.getAccessControl().reset();\n-            }\n-        });\n+        assertException(session, sql, \".*Access Denied: \" + exceptionsMessageRegExp, deniedPrivileges);\n+    }\n+\n+    protected void assertWrappedAccessDenied(@Language(\"SQL\") String sql, @Language(\"RegExp\") String exceptionsMessageRegExp, TestingPrivilege... deniedPrivileges)\n+    {\n+        assertException(getSession(), sql, exceptionsMessageRegExp, deniedPrivileges);\n+    }\n+\n+    private void assertException(Session session, @Language(\"SQL\") String sql, @Language(\"RegExp\") String exceptionsMessageRegExp, TestingPrivilege[] deniedPrivileges)\n+    {\n+        assertThatThrownBy(() -> executeExclusively(session, sql, deniedPrivileges))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 69}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "9e03d752aea95aff37d303b4c40a981e03649ad6", "author": {"user": {"login": "ssheikin", "name": "Sasha Sheikin"}}, "url": "https://github.com/trinodb/trino/commit/9e03d752aea95aff37d303b4c40a981e03649ad6", "committedDate": "2020-09-19T12:14:23Z", "message": "Improve Access Denied message: insufficient view owner privileges\n\nIf a user A creates a view and user B wants to access the view and\nthen user A loses access to the original data\nthen B should not be able to access data in the view.\nIf B gets and access denied,\nthey are told whether it's because they don't have access to the view\nor if the view creator doesn't have access to the underlying data."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9e03d752aea95aff37d303b4c40a981e03649ad6", "author": {"user": {"login": "ssheikin", "name": "Sasha Sheikin"}}, "url": "https://github.com/trinodb/trino/commit/9e03d752aea95aff37d303b4c40a981e03649ad6", "committedDate": "2020-09-19T12:14:23Z", "message": "Improve Access Denied message: insufficient view owner privileges\n\nIf a user A creates a view and user B wants to access the view and\nthen user A loses access to the original data\nthen B should not be able to access data in the view.\nIf B gets and access denied,\nthey are told whether it's because they don't have access to the view\nor if the view creator doesn't have access to the underlying data."}, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NTExMjgy", "url": "https://github.com/trinodb/trino/pull/5086#pullrequestreview-495511282", "createdAt": "2020-09-24T12:22:03Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MzYyMDI3", "url": "https://github.com/trinodb/trino/pull/5086#pullrequestreview-497362027", "createdAt": "2020-09-28T09:58:40Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwOTo1ODo0MFrOHY2ucw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwOTo1ODo1NlrOHY2vCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgyNDQ5OQ==", "bodyText": "Please also add verify(e.getMessage().startsWith(prefix))", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r495824499", "createdAt": "2020-09-28T09:58:40Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -74,4 +77,16 @@ public void checkCanGrantExecuteFunctionPrivilege(SecurityContext context, Strin\n     {\n         return delegate.getColumnMasks(context, tableName, columnName, type);\n     }\n+\n+    private static void wrapAccessDeniedException(Runnable runnable)\n+    {\n+        try {\n+            runnable.run();\n+        }\n+        catch (AccessDeniedException e) {\n+            String prefix = AccessDeniedException.PREFIX;\n+            String msg = e.getMessage().substring(prefix.length());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgyNDY1MQ==", "bodyText": "nit: I would inline it (up to you, no change request)", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r495824651", "createdAt": "2020-09-28T09:58:56Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -74,4 +77,16 @@ public void checkCanGrantExecuteFunctionPrivilege(SecurityContext context, Strin\n     {\n         return delegate.getColumnMasks(context, tableName, columnName, type);\n     }\n+\n+    private static void wrapAccessDeniedException(Runnable runnable)\n+    {\n+        try {\n+            runnable.run();\n+        }\n+        catch (AccessDeniedException e) {\n+            String prefix = AccessDeniedException.PREFIX;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 58}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "501cb716d16b729ef1b3703edbff4ab6cb55a20a", "author": {"user": {"login": "ssheikin", "name": "Sasha Sheikin"}}, "url": "https://github.com/trinodb/trino/commit/501cb716d16b729ef1b3703edbff4ab6cb55a20a", "committedDate": "2020-09-30T07:34:46Z", "message": "Refactor Access Denied Exception testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0e70d8712b6cd3355aebec502b2afba6a5f626b", "author": {"user": {"login": "ssheikin", "name": "Sasha Sheikin"}}, "url": "https://github.com/trinodb/trino/commit/b0e70d8712b6cd3355aebec502b2afba6a5f626b", "committedDate": "2020-09-30T07:34:46Z", "message": "Improve Access Denied message: insufficient view owner privileges\n\nIf a user A creates a view and user B wants to access the view and\nthen user A loses access to the original data\nthen B should not be able to access data in the view.\nIf B gets and access denied,\nthey are told whether it's because they don't have access to the view\nor if the view creator doesn't have access to the underlying data."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "b0e70d8712b6cd3355aebec502b2afba6a5f626b", "author": {"user": {"login": "ssheikin", "name": "Sasha Sheikin"}}, "url": "https://github.com/trinodb/trino/commit/b0e70d8712b6cd3355aebec502b2afba6a5f626b", "committedDate": "2020-09-30T07:34:46Z", "message": "Improve Access Denied message: insufficient view owner privileges\n\nIf a user A creates a view and user B wants to access the view and\nthen user A loses access to the original data\nthen B should not be able to access data in the view.\nIf B gets and access denied,\nthey are told whether it's because they don't have access to the view\nor if the view creator doesn't have access to the underlying data."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3894, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}