{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMjMzNTY5", "number": 3166, "title": "Add Connector EventListener registration", "bodyText": "It adds a possibility for Connector to define its own event handlers, that will be registered\non connector creation.", "createdAt": "2020-03-19T20:56:39Z", "url": "https://github.com/trinodb/trino/pull/3166", "merged": true, "mergeCommit": {"oid": "e38de1b0aef9ffc38aae7b929027b8ef6455fbbf"}, "closed": true, "closedAt": "2020-03-27T09:43:28Z", "author": {"login": "s2lomon"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQiexLgBqjMxNTY0ODgwODM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRZ1GKgFqTM4MTg5MDkyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMDk4NTE5", "url": "https://github.com/trinodb/trino/pull/3166#pullrequestreview-380098519", "createdAt": "2020-03-24T08:44:46Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODo0NDo0NlrOF6l9wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOTowNzowNlrOF6myJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4Mzc0NQ==", "bodyText": "Commit message:\nAllow Connector to provide EventListener\n\n?", "url": "https://github.com/trinodb/trino/pull/3166#discussion_r396983745", "createdAt": "2020-03-24T08:44:46Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/connector/ConnectorManager.java", "diffHunk": "@@ -23,6 +23,7 @@\n import io.prestosql.connector.system.StaticSystemTablesProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4ODQ4OQ==", "bodyText": "inject Supplier, and let's configure default supplier that throws an exception", "url": "https://github.com/trinodb/trino/pull/3166#discussion_r396988489", "createdAt": "2020-03-24T08:52:54Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/connector/MockConnectorFactory.java", "diffHunk": "@@ -78,7 +80,8 @@ private MockConnectorFactory(\n             Function<SchemaTableName, List<ColumnMetadata>> getColumns,\n             ApplyProjection applyProjection,\n             BiFunction<ConnectorSession, SchemaTableName, Optional<ConnectorNewTableLayout>> getInsertLayout,\n-            BiFunction<ConnectorSession, ConnectorTableMetadata, Optional<ConnectorNewTableLayout>> getNewTableLayout)\n+            BiFunction<ConnectorSession, ConnectorTableMetadata, Optional<ConnectorNewTableLayout>> getNewTableLayout,\n+            EventListener eventListener)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4ODk0Mg==", "bodyText": "rnn", "url": "https://github.com/trinodb/trino/pull/3166#discussion_r396988942", "createdAt": "2020-03-24T08:53:39Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/connector/MockConnectorFactory.java", "diffHunk": "@@ -399,9 +416,15 @@ public Builder withGetNewTableLayout(BiFunction<ConnectorSession, ConnectorTable\n             return this;\n         }\n \n+        public Builder withEventListener(EventListener listener)\n+        {\n+            this.eventListener = listener;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4OTkwMA==", "bodyText": "Maybe I am ignorant, but there have been years and I still know don't know what is the difference between stubs, mocks and fakes. They are all same thing to me. Hence I would call it Mock here as it is more common name in Presto.\nOther than that, why we cannot use io.prestosql.connector.MockConnectorFactory.Builder? The point of that MockConnectorFactory was to avoid things like that.", "url": "https://github.com/trinodb/trino/pull/3166#discussion_r396989900", "createdAt": "2020-03-24T08:55:15Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/eventlistener/TestConnectorEventListener.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.eventlistener;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.spi.connector.Connector;\n+import io.prestosql.spi.connector.ConnectorContext;\n+import io.prestosql.spi.connector.ConnectorFactory;\n+import io.prestosql.spi.connector.ConnectorHandleResolver;\n+import io.prestosql.spi.connector.ConnectorMetadata;\n+import io.prestosql.spi.connector.ConnectorTransactionHandle;\n+import io.prestosql.spi.eventlistener.EventListener;\n+import io.prestosql.spi.transaction.IsolationLevel;\n+import io.prestosql.testing.LocalQueryRunner;\n+import io.prestosql.testing.TestingHandleResolver;\n+import io.prestosql.testing.TestingMetadata;\n+import io.prestosql.testing.TestingTransactionHandle;\n+import org.testng.annotations.Test;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatCode;\n+\n+public class TestConnectorEventListener\n+{\n+    @Test\n+    public void testConnectorWithoutEventListener()\n+    {\n+        LocalQueryRunner queryRunner = LocalQueryRunner.builder(testSessionBuilder().build())\n+                .build();\n+\n+        queryRunner.loadEventListeners();\n+\n+        assertThatCode(() -> queryRunner.execute(\"SELECT 1\"))\n+                .doesNotThrowAnyException();\n+    }\n+\n+    @Test\n+    public void testConnectorWithEventListener()\n+    {\n+        EventHandlingConnectorMock connector = new EventHandlingConnectorMock();\n+        LocalQueryRunner queryRunner = LocalQueryRunner.builder(testSessionBuilder().build())\n+                .build();\n+        queryRunner.createCatalog(\"event_listening\", new ConnectorFactoryStub(connector), ImmutableMap.of());\n+\n+        queryRunner.loadEventListeners();\n+\n+        assertThat(connector.getEventListenerInvocationCounter).hasValue(1);\n+    }\n+\n+    private static class EventHandlingConnectorMock\n+            implements Connector\n+    {\n+        private final AtomicLong getEventListenerInvocationCounter = new AtomicLong(0);\n+\n+        @Override\n+        public ConnectorTransactionHandle beginTransaction(IsolationLevel isolationLevel, boolean readOnly)\n+        {\n+            return new TestingTransactionHandle(UUID.randomUUID());\n+        }\n+\n+        @Override\n+        public ConnectorMetadata getMetadata(ConnectorTransactionHandle transactionHandle)\n+        {\n+            return new TestingMetadata();\n+        }\n+\n+        @Override\n+        public EventListener getEventListener()\n+        {\n+            getEventListenerInvocationCounter.incrementAndGet();\n+            return new EventListener()\n+            {\n+            };\n+        }\n+    }\n+\n+    private static class ConnectorFactoryStub", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5MzUzNQ==", "bodyText": "Please extract this class in separate commit. Same for TestingEventListener", "url": "https://github.com/trinodb/trino/pull/3166#discussion_r396993535", "createdAt": "2020-03-24T09:00:55Z", "author": {"login": "kokosing"}, "path": "presto-tests/src/test/java/io/prestosql/execution/EventsBuilder.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.eventlistener.QueryCompletedEvent;\n+import io.prestosql.spi.eventlistener.QueryCreatedEvent;\n+import io.prestosql.spi.eventlistener.SplitCompletedEvent;\n+\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+class EventsBuilder", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5NzE1OQ==", "bodyText": "I don't like this class, I would inline it. It looks much simpler to use AbstractTestFramework or QueryAssertions (preferable) to verify queries, where events could be handled manually. Something like we do io.prestosql.sql.query.TestRowFilter.", "url": "https://github.com/trinodb/trino/pull/3166#discussion_r396997159", "createdAt": "2020-03-24T09:07:06Z", "author": {"login": "kokosing"}, "path": "presto-tests/src/test/java/io/prestosql/execution/EventsAwaitingQueries.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import io.prestosql.Session;\n+import io.prestosql.testing.MaterializedResult;\n+import io.prestosql.testing.QueryRunner;\n+import org.intellij.lang.annotations.Language;\n+\n+import java.util.Optional;\n+\n+import static com.google.common.base.Strings.nullToEmpty;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+import static org.testng.Assert.fail;\n+\n+class EventsAwaitingQueries", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMDAxNTY3", "url": "https://github.com/trinodb/trino/pull/3166#pullrequestreview-381001567", "createdAt": "2020-03-25T10:00:11Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDowMDoxMVrOF7TqUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDowMDoxMVrOF7TqUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczMjQzNQ==", "bodyText": "We could make this Iterable<EventListener> and return emptyList() by default, which seems cleaner as we aren't arbitrarily restricting to a single listener, and we don't need to deal with UnsupportedOperationException.", "url": "https://github.com/trinodb/trino/pull/3166#discussion_r397732435", "createdAt": "2020-03-25T10:00:11Z", "author": {"login": "electrum"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/Connector.java", "diffHunk": "@@ -155,6 +156,14 @@ default ConnectorAccessControl getAccessControl()\n         throw new UnsupportedOperationException();\n     }\n \n+    /**\n+     * @throws UnsupportedOperationException if this connector does not have an EventListener\n+     */\n+    default EventListener getEventListener()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMDMxMTk1", "url": "https://github.com/trinodb/trino/pull/3166#pullrequestreview-381031195", "createdAt": "2020-03-25T10:41:35Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDo0MTozNVrOF7VMSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDo0NDozN1rOF7VTVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc1NzUxNQ==", "bodyText": "This looks like mistake. Undo?", "url": "https://github.com/trinodb/trino/pull/3166#discussion_r397757515", "createdAt": "2020-03-25T10:41:35Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/failuredetector/TestHeartbeatFailureDetector.java", "diffHunk": "@@ -1,125 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package io.prestosql.failuredetector;\n-\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.google.inject.Binder;\n-import com.google.inject.Injector;\n-import com.google.inject.Key;\n-import com.google.inject.Module;\n-import io.airlift.bootstrap.Bootstrap;\n-import io.airlift.discovery.client.ServiceSelector;\n-import io.airlift.discovery.client.testing.TestingDiscoveryModule;\n-import io.airlift.http.server.testing.TestingHttpServerModule;\n-import io.airlift.jaxrs.JaxrsModule;\n-import io.airlift.jmx.testing.TestingJmxModule;\n-import io.airlift.json.JsonModule;\n-import io.airlift.json.ObjectMapperProvider;\n-import io.airlift.node.testing.TestingNodeModule;\n-import io.airlift.tracetoken.TraceTokenModule;\n-import io.prestosql.execution.QueryManagerConfig;\n-import io.prestosql.failuredetector.HeartbeatFailureDetector.Stats;\n-import io.prestosql.server.InternalCommunicationConfig;\n-import org.testng.annotations.Test;\n-\n-import javax.ws.rs.GET;\n-import javax.ws.rs.Path;\n-\n-import java.net.SocketTimeoutException;\n-import java.net.URI;\n-\n-import static io.airlift.configuration.ConfigBinder.configBinder;\n-import static io.airlift.discovery.client.DiscoveryBinder.discoveryBinder;\n-import static io.airlift.discovery.client.ServiceTypes.serviceType;\n-import static io.airlift.jaxrs.JaxrsBinder.jaxrsBinder;\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertFalse;\n-import static org.testng.Assert.assertTrue;\n-\n-public class TestHeartbeatFailureDetector", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc1ODc3Mw==", "bodyText": "extract defaultEventListener?", "url": "https://github.com/trinodb/trino/pull/3166#discussion_r397758773", "createdAt": "2020-03-25T10:43:38Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/connector/MockConnectorFactory.java", "diffHunk": "@@ -350,6 +364,10 @@ public int hashCode()\n         private ApplyProjection applyProjection = (session, handle, projections, assignments) -> Optional.empty();\n         private BiFunction<ConnectorSession, SchemaTableName, Optional<ConnectorNewTableLayout>> getInsertLayout = defaultGetInsertLayout();\n         private BiFunction<ConnectorSession, ConnectorTableMetadata, Optional<ConnectorNewTableLayout>> getNewTableLayout = defaultGetNewTableLayout();\n+        private Supplier<EventListener> eventListener = () ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc1OTMxNg==", "bodyText": "rnn(eventListener);\nreturn withEventListener(() -> eventListener);", "url": "https://github.com/trinodb/trino/pull/3166#discussion_r397759316", "createdAt": "2020-03-25T10:44:37Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/connector/MockConnectorFactory.java", "diffHunk": "@@ -399,9 +417,25 @@ public Builder withGetNewTableLayout(BiFunction<ConnectorSession, ConnectorTable\n             return this;\n         }\n \n+        public Builder withEventListener(EventListener listener)\n+        {\n+            requireNonNull(listener, \"listener is null\");\n+\n+            this.eventListener = () -> listener;\n+            return this;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 110}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29fc48cbb25408427bc01d7f604eb774dc814107", "author": {"user": {"login": "s2lomon", "name": "Szymon Homa"}}, "url": "https://github.com/trinodb/trino/commit/29fc48cbb25408427bc01d7f604eb774dc814107", "committedDate": "2020-03-25T15:20:39Z", "message": "Extract EventsAwaitingQueries\n\n - extracting EventsBuilder as standalone class\n - extracting TestingEventListener as standalone class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfe23bfd27b76d44edaf411c60ecef5a81735907", "author": {"user": {"login": "s2lomon", "name": "Szymon Homa"}}, "url": "https://github.com/trinodb/trino/commit/bfe23bfd27b76d44edaf411c60ecef5a81735907", "committedDate": "2020-03-25T16:06:32Z", "message": "Allow Connector to provide EventListener"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "bfe23bfd27b76d44edaf411c60ecef5a81735907", "author": {"user": {"login": "s2lomon", "name": "Szymon Homa"}}, "url": "https://github.com/trinodb/trino/commit/bfe23bfd27b76d44edaf411c60ecef5a81735907", "committedDate": "2020-03-25T16:06:32Z", "message": "Allow Connector to provide EventListener"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxODkwOTI2", "url": "https://github.com/trinodb/trino/pull/3166#pullrequestreview-381890926", "createdAt": "2020-03-26T10:48:26Z", "commit": {"oid": "bfe23bfd27b76d44edaf411c60ecef5a81735907"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1929, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}