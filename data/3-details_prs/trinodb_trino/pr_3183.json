{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNzE1Mzc1", "number": 3183, "title": "Record filters and masks", "bodyText": "Adds a new field to query metadata section in the query completion event with the following structure:\n\"tables\": [\n   {\n      \"catalog\": \"...\",\n      \"schema\": \"...\",\n      \"table\": \"...\",\n      \"authorization\": \"...\",\n\n      \"filters\": [ \"...\", ... ]\n      \"columns\": [\n         {\n             \"column\": \"...\"\n             \"masks\": [ \"...\", ...]\n         },\n         ...\n      ]\n   },\n   ...\n]", "createdAt": "2020-03-20T19:55:52Z", "url": "https://github.com/trinodb/trino/pull/3183", "merged": true, "mergeCommit": {"oid": "1b55b866f344b59404c77dd1da0bd3b31fed5f3f"}, "closed": true, "closedAt": "2020-03-27T16:50:10Z", "author": {"login": "martint"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPmXgkgBqjMxNTA3NzMzOTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRmGQKgBqjMxNzA2MDE1NjE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4OTQ0NjUz", "url": "https://github.com/trinodb/trino/pull/3183#pullrequestreview-378944653", "createdAt": "2020-03-21T19:25:38Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxOToyNTozOVrOF5rOpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxOTo0NjozNlrOF5rVMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAyMTQxMg==", "bodyText": "CatalogSchemaTableName or io.prestosql.metadata.QualifiedObjectName instead of using these three?", "url": "https://github.com/trinodb/trino/pull/3183#discussion_r396021412", "createdAt": "2020-03-21T19:25:39Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/execution/Input.java", "diffHunk": "@@ -30,15 +29,15 @@\n @Immutable\n public final class Input\n {\n-    private final CatalogName catalogName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAyMTcxNw==", "bodyText": "use null initial values, to make sure it was not yet set, then in setReferencedTables please verify that previous value was null", "url": "https://github.com/trinodb/trino/pull/3183#discussion_r396021717", "createdAt": "2020-03-21T19:29:32Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/execution/QueryStateMachine.java", "diffHunk": "@@ -148,6 +149,7 @@\n \n     private final AtomicReference<Set<Input>> inputs = new AtomicReference<>(ImmutableSet.of());\n     private final AtomicReference<Optional<Output>> output = new AtomicReference<>(Optional.empty());\n+    private final AtomicReference<List<TableInfo>> referencedTables = new AtomicReference<>(ImmutableList.of());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAyMTc2Nw==", "bodyText": "return tables.get(NodeRef.of(table))\n     .getHandle()\n     .orElseThrow(() -> new IllegalArgumentException(format(\"%s is not a table reference\", table)));\n\nPlease be polite for my poor eyesight.", "url": "https://github.com/trinodb/trino/pull/3183#discussion_r396021767", "createdAt": "2020-03-21T19:30:12Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/Analysis.java", "diffHunk": "@@ -481,17 +488,27 @@ public RelationType getOutputDescriptor(Node node)\n \n     public TableHandle getTableHandle(Table table)\n     {\n-        return tables.get(NodeRef.of(table));\n+        return tables.get(NodeRef.of(table)).getHandle().orElseThrow(() -> new IllegalArgumentException(format(\"%s is not a table reference\", table)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAyMjE2OA==", "bodyText": "toImmutableList()? static import. Apply the same for everywhere below.", "url": "https://github.com/trinodb/trino/pull/3183#discussion_r396022168", "createdAt": "2020-03-21T19:35:06Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/Analysis.java", "diffHunk": "@@ -738,6 +760,39 @@ public void addColumnMask(Table table, String column, Expression mask)\n         return columnMasks.getOrDefault(NodeRef.of(table), ImmutableMap.of());\n     }\n \n+    public List<TableInfo> getReferencedTables()\n+    {\n+        return tables.entrySet().stream()\n+                .map(entry -> {\n+                    NodeRef<Table> table = entry.getKey();\n+\n+                    List<ColumnInfo> columns = referencedFields.get(table).stream()\n+                            .map(field -> {\n+                                String fieldName = field.getName().get();\n+\n+                                return new ColumnInfo(\n+                                        fieldName,\n+                                        columnMasks.getOrDefault(table, ImmutableMap.of())\n+                                                .getOrDefault(fieldName, ImmutableList.of()).stream()\n+                                                .map(Expression::toString)\n+                                                .collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAyMjMyNA==", "bodyText": "Do we have tests for event listener? Please add some.", "url": "https://github.com/trinodb/trino/pull/3183#discussion_r396022324", "createdAt": "2020-03-21T19:37:05Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/dispatcher/FailedDispatchQuery.java", "diffHunk": "@@ -226,6 +226,7 @@ private static QueryInfo immediateFailureQueryInfo(\n                 ImmutableList.of(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAyMzA4OA==", "bodyText": "There are missing information about accessed:\n\nprocedures (must have)\nfunctions (must have)\nDDL queries\nset session\nSHOW queries\nquery checks\n\nAll these surely should go as separate pull requests.", "url": "https://github.com/trinodb/trino/pull/3183#discussion_r396023088", "createdAt": "2020-03-21T19:46:36Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/dispatcher/FailedDispatchQuery.java", "diffHunk": "@@ -226,6 +226,7 @@ private static QueryInfo immediateFailureQueryInfo(\n                 ImmutableList.of(),\n                 ImmutableSet.of(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 2}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMTkwMzE3", "url": "https://github.com/trinodb/trino/pull/3183#pullrequestreview-380190317", "createdAt": "2020-03-24T10:46:06Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDo0NjowNlrOF6qgwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDo0OTozM1rOF6qoWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1ODI0MA==", "bodyText": "toImmutableList?", "url": "https://github.com/trinodb/trino/pull/3183#discussion_r397058240", "createdAt": "2020-03-24T10:46:06Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/Analysis.java", "diffHunk": "@@ -738,6 +762,39 @@ public void addColumnMask(Table table, String column, Expression mask)\n         return columnMasks.getOrDefault(NodeRef.of(table), ImmutableMap.of());\n     }\n \n+    public List<TableInfo> getReferencedTables()\n+    {\n+        return tables.entrySet().stream()\n+                .map(entry -> {\n+                    NodeRef<Table> table = entry.getKey();\n+\n+                    List<ColumnInfo> columns = referencedFields.get(table).stream()\n+                            .map(field -> {\n+                                String fieldName = field.getName().get();\n+\n+                                return new ColumnInfo(\n+                                        fieldName,\n+                                        columnMasks.getOrDefault(table, ImmutableMap.of())\n+                                                .getOrDefault(fieldName, ImmutableList.of()).stream()\n+                                                .map(Expression::toString)\n+                                                .collect(toImmutableList()));\n+                            })\n+                            .collect(Collectors.toList());\n+\n+                    TableEntry info = entry.getValue();\n+                    return new TableInfo(\n+                            info.getName().getCatalogName(),\n+                            info.getName().getSchemaName(),\n+                            info.getName().getObjectName(),\n+                            info.getAuthorization(),\n+                            rowFilters.getOrDefault(table, ImmutableList.of()).stream()\n+                                    .map(Expression::toString)\n+                                    .collect(toImmutableList()),\n+                            columns);\n+                })\n+                .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1ODI5NQ==", "bodyText": "toImmutableList?", "url": "https://github.com/trinodb/trino/pull/3183#discussion_r397058295", "createdAt": "2020-03-24T10:46:10Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/Analysis.java", "diffHunk": "@@ -738,6 +762,39 @@ public void addColumnMask(Table table, String column, Expression mask)\n         return columnMasks.getOrDefault(NodeRef.of(table), ImmutableMap.of());\n     }\n \n+    public List<TableInfo> getReferencedTables()\n+    {\n+        return tables.entrySet().stream()\n+                .map(entry -> {\n+                    NodeRef<Table> table = entry.getKey();\n+\n+                    List<ColumnInfo> columns = referencedFields.get(table).stream()\n+                            .map(field -> {\n+                                String fieldName = field.getName().get();\n+\n+                                return new ColumnInfo(\n+                                        fieldName,\n+                                        columnMasks.getOrDefault(table, ImmutableMap.of())\n+                                                .getOrDefault(fieldName, ImmutableList.of()).stream()\n+                                                .map(Expression::toString)\n+                                                .collect(toImmutableList()));\n+                            })\n+                            .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1OTAwNg==", "bodyText": "Return Optional<Node>", "url": "https://github.com/trinodb/trino/pull/3183#discussion_r397059006", "createdAt": "2020-03-24T10:47:27Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/RelationId.java", "diffHunk": "@@ -53,6 +53,12 @@ public boolean isAnonymous()\n         return sourceNode == null;\n     }\n \n+    @Nullable\n+    public Node getSourceNode()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1OTM2MA==", "bodyText": "requireNonNulls", "url": "https://github.com/trinodb/trino/pull/3183#discussion_r397059360", "createdAt": "2020-03-24T10:48:04Z", "author": {"login": "kokosing"}, "path": "presto-spi/src/main/java/io/prestosql/spi/eventlistener/TableInfo.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.eventlistener;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.List;\n+\n+public class TableInfo\n+{\n+    private final String catalogName;\n+    private final String schema;\n+    private final String table;\n+    private final String authorization;\n+\n+    private final List<String> filters;\n+    private final List<ColumnInfo> columns;\n+\n+    public TableInfo(String catalogName, String schema, String table, String authorization, List<String> filters, List<ColumnInfo> columns)\n+    {\n+        this.catalogName = catalogName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1OTU2NA==", "bodyText": "Please copy collections", "url": "https://github.com/trinodb/trino/pull/3183#discussion_r397059564", "createdAt": "2020-03-24T10:48:29Z", "author": {"login": "kokosing"}, "path": "presto-spi/src/main/java/io/prestosql/spi/eventlistener/TableInfo.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.eventlistener;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.List;\n+\n+public class TableInfo\n+{\n+    private final String catalogName;\n+    private final String schema;\n+    private final String table;\n+    private final String authorization;\n+\n+    private final List<String> filters;\n+    private final List<ColumnInfo> columns;\n+\n+    public TableInfo(String catalogName, String schema, String table, String authorization, List<String> filters, List<ColumnInfo> columns)\n+    {\n+        this.catalogName = catalogName;\n+        this.schema = schema;\n+        this.table = table;\n+        this.authorization = authorization;\n+        this.filters = filters;\n+        this.columns = columns;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA2MDE4NQ==", "bodyText": "it would be nice to see that filters and masks can be also collected. io.prestosql.connector.MockConnectorFactory could be modified to return some dummy masks and filters.", "url": "https://github.com/trinodb/trino/pull/3183#discussion_r397060185", "createdAt": "2020-03-24T10:49:33Z", "author": {"login": "kokosing"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListener.java", "diffHunk": "@@ -250,6 +252,32 @@ public void testNormalQuery()\n         assertEquals(queryCompletedEvent.getStatistics().getTotalRows(), expectedCompletedPositions);\n     }\n \n+    @Test\n+    public void testReferencedTables()\n+            throws Exception\n+    {\n+        // We expect the following events\n+        // QueryCreated: 1, QueryCompleted: 1, Splits: SPLITS_PER_NODE (leaf splits) + LocalExchange[SINGLE] split + Aggregation/Output split\n+        int expectedEvents = 1 + 1 + SPLITS_PER_NODE + 1 + 1;\n+        runQueryAndWaitForEvents(\"SELECT sum(linenumber) FROM lineitem\", expectedEvents);\n+\n+        QueryCompletedEvent event = getOnlyElement(generatedEvents.getQueryCompletedEvents());\n+\n+        List<TableInfo> tables = event.getMetadata().getTables();\n+        assertEquals(tables.size(), 1);\n+\n+        TableInfo table = tables.get(0);\n+        assertEquals(table.getCatalogName(), \"tpch\");\n+        assertEquals(table.getSchema(), \"tiny\");\n+        assertEquals(table.getAuthorization(), \"user\");\n+        assertTrue(table.getFilters().isEmpty());\n+        assertEquals(table.getColumns().size(), 1);\n+\n+        ColumnInfo column = table.getColumns().get(0);\n+        assertEquals(column.getColumn(), \"linenumber\");\n+        assertTrue(column.getMasks().isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "c38ec3eb7fdd9a23d33bbcc2bdcad345a5bb5334", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/c38ec3eb7fdd9a23d33bbcc2bdcad345a5bb5334", "committedDate": "2020-03-26T15:58:14Z", "message": "Derive target table from analysis"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a7177426ec967dd670b5f22a0f02756bd9e84c3", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/3a7177426ec967dd670b5f22a0f02756bd9e84c3", "committedDate": "2020-03-26T15:58:14Z", "message": "Move Output to analyzer package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d5e8b383d7ae3ea131d7ee27c747e8c80ae08f3", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/0d5e8b383d7ae3ea131d7ee27c747e8c80ae08f3", "committedDate": "2020-03-26T15:58:14Z", "message": "Unwrap catalog name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b1cff6e2410288d497f24d813388395ff29a9c2", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/5b1cff6e2410288d497f24d813388395ff29a9c2", "committedDate": "2020-03-26T15:58:14Z", "message": "Factor out common filter/mask code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "befb22de3f06a81bf2eb09d5f6516b2594e02ab9", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/befb22de3f06a81bf2eb09d5f6516b2594e02ab9", "committedDate": "2020-03-27T01:05:16Z", "message": "Use optional to represent missing node"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16c03550cc1bde93a697d4568fe4e9c479cb5af9", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/16c03550cc1bde93a697d4568fe4e9c479cb5af9", "committedDate": "2020-03-27T01:05:49Z", "message": "Record filter and mask information in query event\n\nIt adds a field to the query metadata event with the following structure:\n\n\"tables\": [\n   {\n      \"catalog\": \"...\",\n      \"schema\": \"...\",\n      \"table\": \"...\",\n      \"authorization\": \"...\",\n\n      \"filters\": [ \"...\", ... ]\n      \"columns\": [\n         {\n             \"column\": \"...\"\n             \"masks\": [ \"...\", ...]\n         },\n         ...\n      ]\n   },\n   ...\n]"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "16c03550cc1bde93a697d4568fe4e9c479cb5af9", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/16c03550cc1bde93a697d4568fe4e9c479cb5af9", "committedDate": "2020-03-27T01:05:49Z", "message": "Record filter and mask information in query event\n\nIt adds a field to the query metadata event with the following structure:\n\n\"tables\": [\n   {\n      \"catalog\": \"...\",\n      \"schema\": \"...\",\n      \"table\": \"...\",\n      \"authorization\": \"...\",\n\n      \"filters\": [ \"...\", ... ]\n      \"columns\": [\n         {\n             \"column\": \"...\"\n             \"masks\": [ \"...\", ...]\n         },\n         ...\n      ]\n   },\n   ...\n]"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1943, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}