{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1MjcwMTE4", "number": 5143, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxODoxMTowNFrOEipHBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNjoyMzowOFrOEi-lIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NzYwNTgwOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxODoxMTowNFrOHQo4OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxODoxMTowNFrOHQo4OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIwOTAxNg==", "bodyText": "private?", "url": "https://github.com/trinodb/trino/pull/5143#discussion_r487209016", "createdAt": "2020-09-11T18:11:04Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environment.java", "diffHunk": "@@ -173,6 +261,16 @@ public Builder removeContainer(String name)\n         }\n \n         public Environment build()\n+        {\n+            return build(Optional.empty());\n+        }\n+\n+        public Environment build(EnvironmentListener listener)\n+        {\n+            return build(Optional.of(listener));\n+        }\n+\n+        protected Environment build(Optional<EnvironmentListener> listener)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NzYwNzQ5OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxODoxMTozOVrOHQo5Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxODoxMTozOVrOHQo5Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIwOTI5OA==", "bodyText": "nit: I would drop \"on\" prefix from the methods.", "url": "https://github.com/trinodb/trino/pull/5143#discussion_r487209298", "createdAt": "2020-09-11T18:11:39Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentListener.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env;\n+\n+import com.github.dockerjava.api.command.InspectContainerResponse;\n+import io.airlift.log.Logger;\n+\n+import java.util.List;\n+\n+public interface EnvironmentListener", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NzY2MjMwOnYy", "diffSide": "LEFT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxODoyOToyMlrOHQpbbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxODoyOToyMlrOHQpbbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIxODAyOA==", "bodyText": "this can be moved to commit which introduced compose", "url": "https://github.com/trinodb/trino/pull/5143#discussion_r487218028", "createdAt": "2020-09-11T18:29:22Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentListener.java", "diffHunk": "@@ -54,56 +56,56 @@ default void onContainerStopped(DockerContainer container, InspectContainerRespo\n     {\n     }\n \n-    static EnvironmentListener compose(List<EnvironmentListener> listeners)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NzY2NTg5OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentListener.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxODozMDozMlrOHQpdvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDo0OTowM1rOHQtcfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIxODYyMA==", "bodyText": "make logBaseDir non-empty and instead do not create listener in code flow when now you create it with Optional.empty()", "url": "https://github.com/trinodb/trino/pull/5143#discussion_r487218620", "createdAt": "2020-09-11T18:30:32Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentListener.java", "diffHunk": "@@ -161,4 +163,24 @@ public void onContainerStopped(DockerContainer container, InspectContainerRespon\n             }\n         };\n     }\n+\n+    static EnvironmentListener logCopyingListener(Optional<Path> logBaseDir)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIzMzc5OA==", "bodyText": "I think it will make code less readable", "url": "https://github.com/trinodb/trino/pull/5143#discussion_r487233798", "createdAt": "2020-09-11T19:03:05Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentListener.java", "diffHunk": "@@ -161,4 +163,24 @@ public void onContainerStopped(DockerContainer container, InspectContainerRespon\n             }\n         };\n     }\n+\n+    static EnvironmentListener logCopyingListener(Optional<Path> logBaseDir)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIxODYyMA=="}, "originalCommit": null, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI0MTM5NA==", "bodyText": "But more proper imo. You can create some external helper tooling to construct proper listener set. Logging listener should not allow empty log pth", "url": "https://github.com/trinodb/trino/pull/5143#discussion_r487241394", "createdAt": "2020-09-11T19:17:31Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentListener.java", "diffHunk": "@@ -161,4 +163,24 @@ public void onContainerStopped(DockerContainer container, InspectContainerRespon\n             }\n         };\n     }\n+\n+    static EnvironmentListener logCopyingListener(Optional<Path> logBaseDir)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIxODYyMA=="}, "originalCommit": null, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI4MzgzOQ==", "bodyText": "Fixed.", "url": "https://github.com/trinodb/trino/pull/5143#discussion_r487283839", "createdAt": "2020-09-11T20:49:03Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentListener.java", "diffHunk": "@@ -161,4 +163,24 @@ public void onContainerStopped(DockerContainer container, InspectContainerRespon\n             }\n         };\n     }\n+\n+    static EnvironmentListener logCopyingListener(Optional<Path> logBaseDir)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIxODYyMA=="}, "originalCommit": null, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NzY2NjI5OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxODozMDo0MVrOHQpd-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxODo1MzowOVrOHQqGoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIxODY4Mw==", "bodyText": "why do we need this one?", "url": "https://github.com/trinodb/trino/pull/5143#discussion_r487218683", "createdAt": "2020-09-11T18:30:41Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentListener.java", "diffHunk": "@@ -161,4 +163,24 @@ public void onContainerStopped(DockerContainer container, InspectContainerRespon\n             }\n         };\n     }\n+\n+    static EnvironmentListener logCopyingListener(Optional<Path> logBaseDir)\n+    {\n+        if (logBaseDir.isEmpty()) {\n+            return noop();\n+        }\n+\n+        return new EnvironmentListener() {\n+            @Override\n+            public void onContainerStopping(DockerContainer container, InspectContainerResponse response)\n+            {\n+                container.copyLogsToHostPath(logBaseDir.get());\n+            }\n+        };\n+    }\n+\n+    static EnvironmentListener noop()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIyOTA4OA==", "bodyText": "if (logBaseDir.isEmpty()) {\n            return noop();\n }", "url": "https://github.com/trinodb/trino/pull/5143#discussion_r487229088", "createdAt": "2020-09-11T18:53:09Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentListener.java", "diffHunk": "@@ -161,4 +163,24 @@ public void onContainerStopped(DockerContainer container, InspectContainerRespon\n             }\n         };\n     }\n+\n+    static EnvironmentListener logCopyingListener(Optional<Path> logBaseDir)\n+    {\n+        if (logBaseDir.isEmpty()) {\n+            return noop();\n+        }\n+\n+        return new EnvironmentListener() {\n+            @Override\n+            public void onContainerStopping(DockerContainer container, InspectContainerResponse response)\n+            {\n+                container.copyLogsToHostPath(logBaseDir.get());\n+            }\n+        };\n+    }\n+\n+    static EnvironmentListener noop()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIxODY4Mw=="}, "originalCommit": null, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NzY4MDQ1OnYy", "diffSide": "RIGHT", "path": ".github/workflows/ci.yml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxODozNTo0M1rOHQpm5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwNjo0OTowNVrOHQzJ2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIyMDk2NA==", "bodyText": "I think it is fine to leave if it works", "url": "https://github.com/trinodb/trino/pull/5143#discussion_r487220964", "createdAt": "2020-09-11T18:35:43Z", "author": {"login": "losipiuk"}, "path": ".github/workflows/ci.yml", "diffHunk": "@@ -298,5 +298,5 @@ jobs:\n           rm -rf ~/.m2/repository\n       - name: Product Tests\n         run: |\n-          presto-product-tests-launcher/bin/run-launcher suite run --suite ${{ matrix.suite }} --config ${{ matrix.config }} --no-bind\n+          presto-product-tests-launcher/bin/run-launcher suite run --suite ${{ matrix.suite }} --config ${{ matrix.config }} --no-bind --logs-dir logs/", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIzMzMxMg==", "bodyText": "\ud83d\udc4d\ud83c\udffb", "url": "https://github.com/trinodb/trino/pull/5143#discussion_r487233312", "createdAt": "2020-09-11T19:02:06Z", "author": {"login": "wendigo"}, "path": ".github/workflows/ci.yml", "diffHunk": "@@ -298,5 +298,5 @@ jobs:\n           rm -rf ~/.m2/repository\n       - name: Product Tests\n         run: |\n-          presto-product-tests-launcher/bin/run-launcher suite run --suite ${{ matrix.suite }} --config ${{ matrix.config }} --no-bind\n+          presto-product-tests-launcher/bin/run-launcher suite run --suite ${{ matrix.suite }} --config ${{ matrix.config }} --no-bind --logs-dir logs/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIyMDk2NA=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM3NzM2OQ==", "bodyText": "Change commit name", "url": "https://github.com/trinodb/trino/pull/5143#discussion_r487377369", "createdAt": "2020-09-12T06:49:05Z", "author": {"login": "losipiuk"}, "path": ".github/workflows/ci.yml", "diffHunk": "@@ -298,5 +298,5 @@ jobs:\n           rm -rf ~/.m2/repository\n       - name: Product Tests\n         run: |\n-          presto-product-tests-launcher/bin/run-launcher suite run --suite ${{ matrix.suite }} --config ${{ matrix.config }} --no-bind\n+          presto-product-tests-launcher/bin/run-launcher suite run --suite ${{ matrix.suite }} --config ${{ matrix.config }} --no-bind --logs-dir logs/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIyMDk2NA=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODc1OTU3OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwNjo0Nzo0MlrOHQzJbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNjoyNjozNlrOHRFc8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM3NzI2MQ==", "bodyText": "This should be in different commit", "url": "https://github.com/trinodb/trino/pull/5143#discussion_r487377261", "createdAt": "2020-09-12T06:47:42Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -155,26 +153,70 @@ private void copyFileToContainer(String containerPath, Runnable copy)\n         log.info(\"Copied files into %s %s in %.1f s\", this, containerPath, stopwatch.elapsed(MILLISECONDS) / 1000.);\n     }\n \n-    // Mounting a non-existing file results in docker creating a directory. This is often not the desired effect. Fail fast instead.\n-    private static void verifyHostPath(String hostPath)\n+    public void clearDependencies()\n     {\n-        if (!Files.exists(Paths.get(hostPath))) {\n-            throw new IllegalArgumentException(\"Host path does not exist: \" + hostPath);\n+        dependencies.clear();\n+    }\n+\n+    public void copyLogsToHostPath(Path hostPath)\n+    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQyOTcwNw==", "bodyText": "Done.", "url": "https://github.com/trinodb/trino/pull/5143#discussion_r487429707", "createdAt": "2020-09-12T17:16:47Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -155,26 +153,70 @@ private void copyFileToContainer(String containerPath, Runnable copy)\n         log.info(\"Copied files into %s %s in %.1f s\", this, containerPath, stopwatch.elapsed(MILLISECONDS) / 1000.);\n     }\n \n-    // Mounting a non-existing file results in docker creating a directory. This is often not the desired effect. Fail fast instead.\n-    private static void verifyHostPath(String hostPath)\n+    public void clearDependencies()\n     {\n-        if (!Files.exists(Paths.get(hostPath))) {\n-            throw new IllegalArgumentException(\"Host path does not exist: \" + hostPath);\n+        dependencies.clear();\n+    }\n+\n+    public void copyLogsToHostPath(Path hostPath)\n+    {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM3NzI2MQ=="}, "originalCommit": null, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY3NzE3MA==", "bodyText": "Well - I meant whole migration from exposeLogsInHOstPath to log copying. Currently it is part of Add DockerContainer logical name.", "url": "https://github.com/trinodb/trino/pull/5143#discussion_r487677170", "createdAt": "2020-09-14T06:26:36Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -155,26 +153,70 @@ private void copyFileToContainer(String containerPath, Runnable copy)\n         log.info(\"Copied files into %s %s in %.1f s\", this, containerPath, stopwatch.elapsed(MILLISECONDS) / 1000.);\n     }\n \n-    // Mounting a non-existing file results in docker creating a directory. This is often not the desired effect. Fail fast instead.\n-    private static void verifyHostPath(String hostPath)\n+    public void clearDependencies()\n     {\n-        if (!Files.exists(Paths.get(hostPath))) {\n-            throw new IllegalArgumentException(\"Host path does not exist: \" + hostPath);\n+        dependencies.clear();\n+    }\n+\n+    public void copyLogsToHostPath(Path hostPath)\n+    {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM3NzI2MQ=="}, "originalCommit": null, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODc2MjkyOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwNjo1MjozNVrOHQzK7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwOToxMjoxNVrOHQz21A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM3NzY0Ng==", "bodyText": "Can we print to stout also in write mode", "url": "https://github.com/trinodb/trino/pull/5143#discussion_r487377646", "createdAt": "2020-09-12T06:52:35Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environment.java", "diffHunk": "@@ -280,20 +293,24 @@ public Environment build(EnvironmentListener listener)\n \n         private Environment build(Optional<EnvironmentListener> listener)\n         {\n-            // write directly to System.out, bypassing logging & io.airlift.log.Logging#rewireStdStreams\n-            PrintStream out;\n-            try {\n-                //noinspection resource\n-                out = new PrintStream(new FileOutputStream(FileDescriptor.out), true, Charset.defaultCharset().name());\n-            }\n-            catch (UnsupportedEncodingException e) {\n-                throw new RuntimeException(e);\n+            switch (outputMode) {\n+                case DISCARD:\n+                    log.warn(\"Containers logs are not printed to stdout\");\n+                    setContainerOutputConsumer(this::discardContainerLogs);\n+                    break;\n+\n+                case PRINT:", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM4ODg4NA==", "bodyText": "I've added PRINT_WRITE mode \ud83d\udc4d\ud83c\udffb", "url": "https://github.com/trinodb/trino/pull/5143#discussion_r487388884", "createdAt": "2020-09-12T09:12:15Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environment.java", "diffHunk": "@@ -280,20 +293,24 @@ public Environment build(EnvironmentListener listener)\n \n         private Environment build(Optional<EnvironmentListener> listener)\n         {\n-            // write directly to System.out, bypassing logging & io.airlift.log.Logging#rewireStdStreams\n-            PrintStream out;\n-            try {\n-                //noinspection resource\n-                out = new PrintStream(new FileOutputStream(FileDescriptor.out), true, Charset.defaultCharset().name());\n-            }\n-            catch (UnsupportedEncodingException e) {\n-                throw new RuntimeException(e);\n+            switch (outputMode) {\n+                case DISCARD:\n+                    log.warn(\"Containers logs are not printed to stdout\");\n+                    setContainerOutputConsumer(this::discardContainerLogs);\n+                    break;\n+\n+                case PRINT:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM3NzY0Ng=="}, "originalCommit": null, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODc2Mzc4OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwNjo1Mzo0OVrOHQzLSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxMToyNjo0M1rOHQ0haQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM3NzczOQ==", "bodyText": "Separate commit?", "url": "https://github.com/trinodb/trino/pull/5143#discussion_r487377739", "createdAt": "2020-09-12T06:53:49Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environment.java", "diffHunk": "@@ -304,7 +321,57 @@ private Environment build(Optional<EnvironmentListener> listener)\n                         });\n             });\n \n-            return new Environment(name, containers, listener);\n+            return new Environment(name, startupRetries, containers, listener);\n+        }\n+\n+        private Consumer<OutputFrame> writeContainerLogs(DockerContainer container, Path path)\n+        {\n+            Path containerLogFile = path.resolve(container.getLogicalName() + \"/container.log\");\n+            log.info(\"Writing container %s logs to %s\", container, containerLogFile);\n+\n+            try {\n+                ensurePathExists(containerLogFile.getParent());\n+                return new PrintingLogConsumer(new PrintStream(containerLogFile.toFile()), \"\");\n+            }\n+            catch (FileNotFoundException e) {\n+                throw new UncheckedIOException(e);\n+            }\n+        }\n+\n+        private Consumer<OutputFrame> printContainerLogs(DockerContainer container)\n+        {\n+            try {\n+                // write directly to System.out, bypassing logging & io.airlift.log.Logging#rewireStdStreams\n+                //noinspection resource\n+                PrintStream out = new PrintStream(new FileOutputStream(FileDescriptor.out), true, Charset.defaultCharset().name());\n+                return new PrintingLogConsumer(out, format(\"%-20s| \", container.getLogicalName()));\n+            }\n+            catch (UnsupportedEncodingException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+\n+        private Consumer<OutputFrame> discardContainerLogs(DockerContainer container)\n+        {\n+            // Discard log frames\n+            return outputFrame -> {};\n+        }\n+\n+        private void setContainerOutputConsumer(Function<DockerContainer, Consumer<OutputFrame>> consumer)\n+        {\n+            configureContainers(container -> container.withLogConsumer(consumer.apply(container)));\n+        }\n+\n+        public Builder setStartupRetries(int startupRetries)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM5OTc4NQ==", "bodyText": "Done", "url": "https://github.com/trinodb/trino/pull/5143#discussion_r487399785", "createdAt": "2020-09-12T11:26:43Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environment.java", "diffHunk": "@@ -304,7 +321,57 @@ private Environment build(Optional<EnvironmentListener> listener)\n                         });\n             });\n \n-            return new Environment(name, containers, listener);\n+            return new Environment(name, startupRetries, containers, listener);\n+        }\n+\n+        private Consumer<OutputFrame> writeContainerLogs(DockerContainer container, Path path)\n+        {\n+            Path containerLogFile = path.resolve(container.getLogicalName() + \"/container.log\");\n+            log.info(\"Writing container %s logs to %s\", container, containerLogFile);\n+\n+            try {\n+                ensurePathExists(containerLogFile.getParent());\n+                return new PrintingLogConsumer(new PrintStream(containerLogFile.toFile()), \"\");\n+            }\n+            catch (FileNotFoundException e) {\n+                throw new UncheckedIOException(e);\n+            }\n+        }\n+\n+        private Consumer<OutputFrame> printContainerLogs(DockerContainer container)\n+        {\n+            try {\n+                // write directly to System.out, bypassing logging & io.airlift.log.Logging#rewireStdStreams\n+                //noinspection resource\n+                PrintStream out = new PrintStream(new FileOutputStream(FileDescriptor.out), true, Charset.defaultCharset().name());\n+                return new PrintingLogConsumer(out, format(\"%-20s| \", container.getLogicalName()));\n+            }\n+            catch (UnsupportedEncodingException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+\n+        private Consumer<OutputFrame> discardContainerLogs(DockerContainer container)\n+        {\n+            // Discard log frames\n+            return outputFrame -> {};\n+        }\n+\n+        private void setContainerOutputConsumer(Function<DockerContainer, Consumer<OutputFrame>> consumer)\n+        {\n+            configureContainers(container -> container.withLogConsumer(consumer.apply(container)));\n+        }\n+\n+        public Builder setStartupRetries(int startupRetries)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM3NzczOQ=="}, "originalCommit": null, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTEyMzUzOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNjoyMzowOFrOHRFXIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNjoyMzowOFrOHRFXIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY3NTY4Mg==", "bodyText": "unrelated to commit", "url": "https://github.com/trinodb/trino/pull/5143#discussion_r487675682", "createdAt": "2020-09-14T06:23:08Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentListener.java", "diffHunk": "@@ -73,7 +75,7 @@ public void environmentStarted(Environment environment)\n             @Override\n             public void environmentStopping(Environment environment)\n             {\n-                Arrays.stream(listeners).forEach(listener -> listener.environmentStarted(environment));\n+                Arrays.stream(listeners).forEach(listener -> listener.environmentStopping(environment));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3200, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}