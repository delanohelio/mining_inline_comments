{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyNzE0NzE5", "number": 3843, "title": "Add session property for disabling Hive cache", "bodyText": "", "createdAt": "2020-05-25T11:59:29Z", "url": "https://github.com/trinodb/trino/pull/3843", "merged": true, "mergeCommit": {"oid": "77a633c61f3e6648fff514a87ea10238a6c7e983"}, "closed": true, "closedAt": "2020-05-26T10:38:16Z", "author": {"login": "sopel39"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcku5afABqjMzNzAwMTIzMDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclBFwEAFqTQxODExNjYyMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NjY5MTIy", "url": "https://github.com/trinodb/trino/pull/3843#pullrequestreview-417669122", "createdAt": "2020-05-25T12:12:28Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMjoxMjoyOFrOGZ_JxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMjoyMjowNVrOGZ_Yyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwMjI3Ng==", "bodyText": "Also drop identity and delagate to session.\nConsider leaving the non-null checks though.\nAdd description to non-null check for session.", "url": "https://github.com/trinodb/trino/pull/3843#discussion_r429902276", "createdAt": "2020-05-25T12:12:28Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HdfsEnvironment.java", "diffHunk": "@@ -128,8 +125,7 @@ public HdfsContext(ConnectorSession session, String schemaName, String tableName\n             requireNonNull(schemaName, \"schemaName is null\");\n             requireNonNull(tableName, \"tableName is null\");\n             this.identity = requireNonNull(session.getIdentity(), \"session.getIdentity() is null\");\n-            this.source = requireNonNull(session.getSource(), \"session.getSource()\");\n-            this.queryId = Optional.of(session.getQueryId());\n+            this.session = Optional.of(requireNonNull(session));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwMzA4Mw==", "bodyText": "drop hive_ prefix.", "url": "https://github.com/trinodb/trino/pull/3843#discussion_r429903083", "createdAt": "2020-05-25T12:14:30Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveSessionProperties.java", "diffHunk": "@@ -90,6 +92,7 @@\n     private static final String IGNORE_ABSENT_PARTITIONS = \"ignore_absent_partitions\";\n     private static final String QUERY_PARTITION_FILTER_REQUIRED = \"query_partition_filter_required\";\n     private static final String PROJECTION_PUSHDOWN_ENABLED = \"projection_pushdown_enabled\";\n+    private static final String HIVE_CACHE_ENABLED = \"hive_cache_enabled\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwNDA0OA==", "bodyText": "Function::identity?", "url": "https://github.com/trinodb/trino/pull/3843#discussion_r429904048", "createdAt": "2020-05-25T12:16:57Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveSessionProperties.java", "diffHunk": "@@ -363,7 +367,22 @@ public HiveSessionProperties(\n                         PROJECTION_PUSHDOWN_ENABLED,\n                         \"Projection push down enabled for hive\",\n                         hiveConfig.isProjectionPushdownEnabled(),\n-                        false));\n+                        false),\n+                new PropertyMetadata<>(\n+                        HIVE_CACHE_ENABLED,\n+                        \"Enable Hive caching\",\n+                        BOOLEAN,\n+                        Boolean.class,\n+                        rubixEnabledConfig.isCacheEnabled(),\n+                        false,\n+                        value -> {\n+                            boolean booleanValue = (boolean) value;\n+                            if (booleanValue && !rubixEnabledConfig.isCacheEnabled()) {\n+                                throw new PrestoException(INVALID_SESSION_PROPERTY, \"Cache can only be disabled via session property\");\n+                            }\n+                            return booleanValue;\n+                        },\n+                        value -> value));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwNjEyMg==", "bodyText": "This test methods tends to look to long. Consider splitting into two (possibly calling out to shared private implementation).", "url": "https://github.com/trinodb/trino/pull/3843#discussion_r429906122", "createdAt": "2020-05-25T12:22:05Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/rubix/TestRubixCaching.java", "diffHunk": "@@ -296,6 +318,41 @@ public void testCacheRead(ReadMode readMode)\n                     assertGreaterThan(getCachedReadsCount(), beforeCachedReadsCount);\n                     assertEquals(getRemoteReadsCount(), firstRemoteReadsCount);\n                 });\n+\n+        long secondRemoteReadsCount = getRemoteReadsCount();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 126}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3Njk1NDk3", "url": "https://github.com/trinodb/trino/pull/3843#pullrequestreview-417695497", "createdAt": "2020-05-25T13:01:19Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzowMToyMFrOGaAZnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzowMToyMFrOGaAZnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkyMjcxNg==", "bodyText": "I hate this one. We are not sure that we are really testing anything. If we read from cache and stats were updated infrequently the assertions would still pass.\nCould we maybe add some extra cached-read which we do after non-cached read to be sure that we actually capute updated stats?\nActually the // read data with re-enabled cache section does that - but we could be more explicit about test logic here.\nSth like:\ntry (FileSystem cachingFileSystemWithCacheDisabled = getCachingFileSystem(nonCachingContext)) {\n            assertEquals(readFile(cachingFileSystemWithCacheDisabled.open(file)), randomData);\n\n            doSmallCachedRead()\n           assertEventually(\n               ...\n               () -> {\n                    assertGreaterThan(getCachedReadsCount(), secondCachedReadsCount+smallCachedRead);\n                    assertEquals(getRemoteReadsCount(), secondRemoteReadsCount);\n                }\n\n.... this gets ugly and is not readable. But maybe you have an idea how to dress it nicely in Java code and still avoid sleeps.\nIt would be best to have jmx object which exposes last time rubix stats were updated. Can we have it?", "url": "https://github.com/trinodb/trino/pull/3843#discussion_r429922716", "createdAt": "2020-05-25T13:01:20Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/rubix/TestRubixCaching.java", "diffHunk": "@@ -296,6 +318,41 @@ public void testCacheRead(ReadMode readMode)\n                     assertGreaterThan(getCachedReadsCount(), beforeCachedReadsCount);\n                     assertEquals(getRemoteReadsCount(), firstRemoteReadsCount);\n                 });\n+\n+        long secondRemoteReadsCount = getRemoteReadsCount();\n+        long secondCachedReadsCount = getCachedReadsCount();\n+\n+        // read data with cache disabled via session property\n+        HdfsContext nonCachingContext = new HdfsContext(\n+                TestingConnectorSession.builder()\n+                        .setPropertyMetadata(hiveSessionProperties)\n+                        .setPropertyValues(ImmutableMap.of(\"hive_cache_enabled\", false))\n+                        .build(),\n+                \"test\");\n+        try (FileSystem cachingFileSystemWithCacheDisabled = getCachingFileSystem(nonCachingContext)) {\n+            assertEquals(readFile(cachingFileSystemWithCacheDisabled.open(file)), randomData);\n+\n+            // non-caching (native) file system should be used\n+            sleep(1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 140}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MDY3OTMy", "url": "https://github.com/trinodb/trino/pull/3843#pullrequestreview-418067932", "createdAt": "2020-05-26T08:14:21Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODoxNDoyMVrOGaTZ5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODoxNzo1OFrOGaTiAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzNDA4NA==", "bodyText": "There is casting involved, so it doesn't work", "url": "https://github.com/trinodb/trino/pull/3843#discussion_r430234084", "createdAt": "2020-05-26T08:14:21Z", "author": {"login": "sopel39"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveSessionProperties.java", "diffHunk": "@@ -363,7 +367,22 @@ public HiveSessionProperties(\n                         PROJECTION_PUSHDOWN_ENABLED,\n                         \"Projection push down enabled for hive\",\n                         hiveConfig.isProjectionPushdownEnabled(),\n-                        false));\n+                        false),\n+                new PropertyMetadata<>(\n+                        HIVE_CACHE_ENABLED,\n+                        \"Enable Hive caching\",\n+                        BOOLEAN,\n+                        Boolean.class,\n+                        rubixEnabledConfig.isCacheEnabled(),\n+                        false,\n+                        value -> {\n+                            boolean booleanValue = (boolean) value;\n+                            if (booleanValue && !rubixEnabledConfig.isCacheEnabled()) {\n+                                throw new PrestoException(INVALID_SESSION_PROPERTY, \"Cache can only be disabled via session property\");\n+                            }\n+                            return booleanValue;\n+                        },\n+                        value -> value));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwNDA0OA=="}, "originalCommit": null, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzNDU2Ng==", "bodyText": "I'm not sure there isn't some interaction between 3) and 5), so that's why I prefer keep them together", "url": "https://github.com/trinodb/trino/pull/3843#discussion_r430234566", "createdAt": "2020-05-26T08:15:13Z", "author": {"login": "sopel39"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/rubix/TestRubixCaching.java", "diffHunk": "@@ -296,6 +318,41 @@ public void testCacheRead(ReadMode readMode)\n                     assertGreaterThan(getCachedReadsCount(), beforeCachedReadsCount);\n                     assertEquals(getRemoteReadsCount(), firstRemoteReadsCount);\n                 });\n+\n+        long secondRemoteReadsCount = getRemoteReadsCount();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwNjEyMg=="}, "originalCommit": null, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzNjE2Mg==", "bodyText": "I hate this one. We are not sure that we are really testing anything. If we read from cache and stats were updated infrequently the assertions would still pass.\n\nI know this sleep isn't great, but 1s should be more then enough and the test won't be flaky if it hiccups. I don't know how to make it better at this point.\n\nIt would be best to have jmx object which exposes last time rubix stats were updated. Can we have it?\n\nThis is probably a good idea, but it won't allow us to skip assertEventually", "url": "https://github.com/trinodb/trino/pull/3843#discussion_r430236162", "createdAt": "2020-05-26T08:17:58Z", "author": {"login": "sopel39"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/rubix/TestRubixCaching.java", "diffHunk": "@@ -296,6 +318,41 @@ public void testCacheRead(ReadMode readMode)\n                     assertGreaterThan(getCachedReadsCount(), beforeCachedReadsCount);\n                     assertEquals(getRemoteReadsCount(), firstRemoteReadsCount);\n                 });\n+\n+        long secondRemoteReadsCount = getRemoteReadsCount();\n+        long secondCachedReadsCount = getCachedReadsCount();\n+\n+        // read data with cache disabled via session property\n+        HdfsContext nonCachingContext = new HdfsContext(\n+                TestingConnectorSession.builder()\n+                        .setPropertyMetadata(hiveSessionProperties)\n+                        .setPropertyValues(ImmutableMap.of(\"hive_cache_enabled\", false))\n+                        .build(),\n+                \"test\");\n+        try (FileSystem cachingFileSystemWithCacheDisabled = getCachingFileSystem(nonCachingContext)) {\n+            assertEquals(readFile(cachingFileSystemWithCacheDisabled.open(file)), randomData);\n+\n+            // non-caching (native) file system should be used\n+            sleep(1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkyMjcxNg=="}, "originalCommit": null, "originalPosition": 140}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "accc04a0db77dc30ad7a5c9645f0be474b9a9a43", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/accc04a0db77dc30ad7a5c9645f0be474b9a9a43", "committedDate": "2020-05-26T08:21:03Z", "message": "Include ConnectorSession in HdfsEnvironment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f13cfc82fc789618ac30c7f41219fd1e3d782fe", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/7f13cfc82fc789618ac30c7f41219fd1e3d782fe", "committedDate": "2020-05-26T08:21:03Z", "message": "Add session property for disabling Hive cache"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "7f13cfc82fc789618ac30c7f41219fd1e3d782fe", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/7f13cfc82fc789618ac30c7f41219fd1e3d782fe", "committedDate": "2020-05-26T08:21:03Z", "message": "Add session property for disabling Hive cache"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MTE2NjIx", "url": "https://github.com/trinodb/trino/pull/3843#pullrequestreview-418116621", "createdAt": "2020-05-26T09:17:28Z", "commit": {"oid": "7f13cfc82fc789618ac30c7f41219fd1e3d782fe"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1267, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}