{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2NzI2Mzc4", "number": 5856, "title": "Add data compression property to SQL Server tables", "bodyText": "Fixes #4693.", "createdAt": "2020-11-06T12:55:12Z", "url": "https://github.com/trinodb/trino/pull/5856", "merged": true, "mergeCommit": {"oid": "49c2a674b7bfbac3a96cd73b580fd3fc7174a8cc"}, "closed": true, "closedAt": "2020-12-17T12:34:21Z", "author": {"login": "Praveen2112"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZ25DcAFqTUyNTE0MzI1MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdnBkV-gFqTU1NDUwMTk5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1MTQzMjUw", "url": "https://github.com/trinodb/trino/pull/5856#pullrequestreview-525143250", "createdAt": "2020-11-06T13:22:19Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMzoyMjoxOVrOHutznA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMzoyMjoyMlrOHutzrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc0NzAzNg==", "bodyText": "The overridable method should get TableMetadata.\nWe should assume the table properties are translated into single contigyous string", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r518747036", "createdAt": "2020-11-06T13:22:19Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -492,9 +492,9 @@ protected JdbcOutputTableHandle createTable(ConnectorSession session, ConnectorT\n         }\n     }\n \n-    protected String createTableSql(RemoteTableName remoteTableName, List<String> columns)\n+    protected String createTableSql(RemoteTableName remoteTableName, List<String> columns, String tableProperties)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc0NzA1NA==", "bodyText": "remove", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r518747054", "createdAt": "2020-11-06T13:22:22Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -509,6 +509,11 @@ protected String getColumnDefinitionSql(ConnectorSession session, ColumnMetadata\n         return sb.toString();\n     }\n \n+    protected String getTableProperties(ConnectorTableMetadata tableMetadata)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4ODQ0NTg2", "url": "https://github.com/trinodb/trino/pull/5856#pullrequestreview-528844586", "createdAt": "2020-11-12T08:21:03Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwODoyMTowM1rOHxvOrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwODoyMzoyMFrOHxvYhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkxNjA3Ng==", "bodyText": "copyright", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r521916076", "createdAt": "2020-11-12T08:21:03Z", "author": {"login": "kokosing"}, "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/DataCompression.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package io.prestosql.plugin.sqlserver;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkxODU5Nw==", "bodyText": "How about verifying if all partitions have this enabled. If so you can set it to true, if all have disabled then false, otherwise you can return null. Do you think this is expensive to query sys.partitions?", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r521918597", "createdAt": "2020-11-12T08:23:20Z", "author": {"login": "kokosing"}, "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -317,6 +324,27 @@ public void testNativeMultipleInClauses()\n         sqlServer.execute(\"SELECT count(*) FROM dbo.orders WHERE \" + longInClauses);\n     }\n \n+    @DataProvider\n+    public Object[][] dataCompression()\n+    {\n+        return new Object[][] {\n+                {NONE},\n+                {ROW},\n+                {PAGE}\n+        };\n+    }\n+\n+    @Test(dataProvider = \"dataCompression\")\n+    public void testWithDataCompression(DataCompression dataCompression)\n+    {\n+        String tableName = \"test_create_\" + randomTableSuffix();\n+        assertUpdate(format(\"CREATE TABLE %s (a BIGINT, b BIGINT) WITH (DATA_COMPRESSION = '%s')\", tableName, dataCompression));\n+        // Compression can be applied per partition so we might not be able to capture them in `SHOW CREATE TABLE`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "ccf44c35f439ffa2c0d1a9d58ce67b0fa63b633c", "author": {"user": {"login": "Praveen2112", "name": "Praveen Krishna"}}, "url": "https://github.com/trinodb/trino/commit/ccf44c35f439ffa2c0d1a9d58ce67b0fa63b633c", "committedDate": "2020-11-12T10:46:52Z", "message": "Add data compression property to SQL Server tables"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NDQyMzU0", "url": "https://github.com/trinodb/trino/pull/5856#pullrequestreview-529442354", "createdAt": "2020-11-12T19:52:29Z", "commit": {"oid": "ccf44c35f439ffa2c0d1a9d58ce67b0fa63b633c"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOTo1MjozMFrOHyLmpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOTo1NDozMFrOHyLq7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM4MDk2Nw==", "bodyText": "testWithDataCompression -> testCreateWithDataCompression", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r522380967", "createdAt": "2020-11-12T19:52:30Z", "author": {"login": "findepi"}, "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -317,6 +324,27 @@ public void testNativeMultipleInClauses()\n         sqlServer.execute(\"SELECT count(*) FROM dbo.orders WHERE \" + longInClauses);\n     }\n \n+    @DataProvider\n+    public Object[][] dataCompression()\n+    {\n+        return new Object[][] {\n+                {NONE},\n+                {ROW},\n+                {PAGE}\n+        };\n+    }\n+\n+    @Test(dataProvider = \"dataCompression\")\n+    public void testWithDataCompression(DataCompression dataCompression)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccf44c35f439ffa2c0d1a9d58ce67b0fa63b633c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM4MDk4OA==", "bodyText": "test_create_ -> test_create_with_compression", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r522380988", "createdAt": "2020-11-12T19:52:31Z", "author": {"login": "findepi"}, "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -317,6 +324,27 @@ public void testNativeMultipleInClauses()\n         sqlServer.execute(\"SELECT count(*) FROM dbo.orders WHERE \" + longInClauses);\n     }\n \n+    @DataProvider\n+    public Object[][] dataCompression()\n+    {\n+        return new Object[][] {\n+                {NONE},\n+                {ROW},\n+                {PAGE}\n+        };\n+    }\n+\n+    @Test(dataProvider = \"dataCompression\")\n+    public void testWithDataCompression(DataCompression dataCompression)\n+    {\n+        String tableName = \"test_create_\" + randomTableSuffix();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccf44c35f439ffa2c0d1a9d58ce67b0fa63b633c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM4MTM1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertUpdate(format(\"CREATE TABLE %s (a BIGINT, b BIGINT) WITH (DATA_COMPRESSION = '%s')\", tableName, dataCompression));\n          \n          \n            \n                    assertUpdate(format(\"CREATE TABLE %s (a bigint, b bigint) WITH (DATA_COMPRESSION = '%s')\", tableName, dataCompression));", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r522381355", "createdAt": "2020-11-12T19:53:14Z", "author": {"login": "findepi"}, "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -317,6 +324,27 @@ public void testNativeMultipleInClauses()\n         sqlServer.execute(\"SELECT count(*) FROM dbo.orders WHERE \" + longInClauses);\n     }\n \n+    @DataProvider\n+    public Object[][] dataCompression()\n+    {\n+        return new Object[][] {\n+                {NONE},\n+                {ROW},\n+                {PAGE}\n+        };\n+    }\n+\n+    @Test(dataProvider = \"dataCompression\")\n+    public void testWithDataCompression(DataCompression dataCompression)\n+    {\n+        String tableName = \"test_create_\" + randomTableSuffix();\n+        assertUpdate(format(\"CREATE TABLE %s (a BIGINT, b BIGINT) WITH (DATA_COMPRESSION = '%s')\", tableName, dataCompression));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccf44c35f439ffa2c0d1a9d58ce67b0fa63b633c"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM4MTQ3NA==", "bodyText": "drop the table too", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r522381474", "createdAt": "2020-11-12T19:53:29Z", "author": {"login": "findepi"}, "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -317,6 +324,27 @@ public void testNativeMultipleInClauses()\n         sqlServer.execute(\"SELECT count(*) FROM dbo.orders WHERE \" + longInClauses);\n     }\n \n+    @DataProvider\n+    public Object[][] dataCompression()\n+    {\n+        return new Object[][] {\n+                {NONE},\n+                {ROW},\n+                {PAGE}\n+        };\n+    }\n+\n+    @Test(dataProvider = \"dataCompression\")\n+    public void testWithDataCompression(DataCompression dataCompression)\n+    {\n+        String tableName = \"test_create_\" + randomTableSuffix();\n+        assertUpdate(format(\"CREATE TABLE %s (a BIGINT, b BIGINT) WITH (DATA_COMPRESSION = '%s')\", tableName, dataCompression));\n+        // Compression can be applied per partition so we might not be able to capture them in `SHOW CREATE TABLE`.\n+        assertQuery(\n+                format(\"SELECT data_compression_desc FROM sys.partitions p INNER JOIN sys.tables t ON p.object_id = t.object_id WHERE t.name = '%s'\", tableName),\n+                format(\"VALUES '%s'\", dataCompression));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccf44c35f439ffa2c0d1a9d58ce67b0fa63b633c"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM4MjA2Mg==", "bodyText": "Can you add an explicit test for SHOW CREATE TABLE output?", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r522382062", "createdAt": "2020-11-12T19:54:30Z", "author": {"login": "findepi"}, "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -317,6 +324,27 @@ public void testNativeMultipleInClauses()\n         sqlServer.execute(\"SELECT count(*) FROM dbo.orders WHERE \" + longInClauses);\n     }\n \n+    @DataProvider\n+    public Object[][] dataCompression()\n+    {\n+        return new Object[][] {\n+                {NONE},\n+                {ROW},\n+                {PAGE}\n+        };\n+    }\n+\n+    @Test(dataProvider = \"dataCompression\")\n+    public void testWithDataCompression(DataCompression dataCompression)\n+    {\n+        String tableName = \"test_create_\" + randomTableSuffix();\n+        assertUpdate(format(\"CREATE TABLE %s (a BIGINT, b BIGINT) WITH (DATA_COMPRESSION = '%s')\", tableName, dataCompression));\n+        // Compression can be applied per partition so we might not be able to capture them in `SHOW CREATE TABLE`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkxODU5Nw=="}, "originalCommit": null, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMjQ2NTM5", "url": "https://github.com/trinodb/trino/pull/5856#pullrequestreview-531246539", "createdAt": "2020-11-16T11:45:23Z", "commit": {"oid": "5203622f3b35d818be7e72f3e795cb8e6e34a8b4"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMTo0NToyM1rOHz4-eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMTo1ODo0M1rOHz529Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE3MjkyMQ==", "bodyText": "add\ncheckArgument(tableMetadata.getProperties().isEmpty(), \"Unsupported table properties: %s\", tableMetadata.getProperties());", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524172921", "createdAt": "2020-11-16T11:45:23Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -492,7 +492,7 @@ protected JdbcOutputTableHandle createTable(ConnectorSession session, ConnectorT\n         }\n     }\n \n-    protected String createTableSql(RemoteTableName remoteTableName, List<String> columns)\n+    protected String createTableSql(RemoteTableName remoteTableName, List<String> columns,  ConnectorTableMetadata tableMetadata)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5203622f3b35d818be7e72f3e795cb8e6e34a8b4"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE3OTU4NQ==", "bodyText": "This is correct because currently SQL Server does not seem to support enabling table compression by default for a schema or database. However, they can add in the future.\nTherefore today NONE is a good default, but can become a wrong choice without a code change on our part.\nLet's replace NONE with UNSET (or DEFAULT). Then do not add WITH (DATA_COMPRESSION clause when compression is the UNSET.\ncc @kokosing", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524179585", "createdAt": "2020-11-16T11:51:28Z", "author": {"login": "findepi"}, "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -233,6 +240,32 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n         return true;\n     }\n \n+    @Override\n+    protected String createTableSql(RemoteTableName remoteTableName, List<String> columns, ConnectorTableMetadata tableMetadata)\n+    {\n+        return format(\"CREATE TABLE %s (%s) WITH (DATA_COMPRESSION = %s)\", quoted(remoteTableName), join(\", \", columns), getDataCompression(tableMetadata.getProperties()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a430d9bb73177f942294f8bbce7adfeedb0978c9"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE4MjkzOQ==", "bodyText": "This is not safe. Should SQL Server add new compression mode (say, \"BLOCK\"), we don't want to fail the method here. I'd rather return no property.\nalso, is there a test ensuring SHOW CREATE TABLE doesn't return unnecessary data_compression property for all tables now?", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524182939", "createdAt": "2020-11-16T11:54:32Z", "author": {"login": "findepi"}, "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -233,6 +240,32 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n         return true;\n     }\n \n+    @Override\n+    protected String createTableSql(RemoteTableName remoteTableName, List<String> columns, ConnectorTableMetadata tableMetadata)\n+    {\n+        return format(\"CREATE TABLE %s (%s) WITH (DATA_COMPRESSION = %s)\", quoted(remoteTableName), join(\", \", columns), getDataCompression(tableMetadata.getProperties()));\n+    }\n+\n+    @Override\n+    public Map<String, Object> getTableProperties(JdbcIdentity identity, JdbcTableHandle tableHandle)\n+    {\n+        ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();\n+\n+        try (Connection connection = connectionFactory.openConnection(identity);\n+                PreparedStatement statement = connection.prepareStatement(\"SELECT data_compression_desc FROM sys.partitions p INNER JOIN sys.tables t ON p.object_id = t.object_id WHERE p.partition_number = 1 AND t.name = ?\")) {\n+            statement.setString(1, tableHandle.getRemoteTableName().getTableName());\n+            try (ResultSet resultSet = statement.executeQuery()) {\n+                if (resultSet.next()) {\n+                    builder.put(DATA_COMPRESSION, DataCompression.valueOf(resultSet.getString(1)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a430d9bb73177f942294f8bbce7adfeedb0978c9"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE4MzkwOA==", "bodyText": "what if we get two rows? validate & fail in such a case, this means our query is wrong\nverify(!resultSet.next(), \"Unexpected second result row\");", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524183908", "createdAt": "2020-11-16T11:55:26Z", "author": {"login": "findepi"}, "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -233,6 +240,32 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n         return true;\n     }\n \n+    @Override\n+    protected String createTableSql(RemoteTableName remoteTableName, List<String> columns, ConnectorTableMetadata tableMetadata)\n+    {\n+        return format(\"CREATE TABLE %s (%s) WITH (DATA_COMPRESSION = %s)\", quoted(remoteTableName), join(\", \", columns), getDataCompression(tableMetadata.getProperties()));\n+    }\n+\n+    @Override\n+    public Map<String, Object> getTableProperties(JdbcIdentity identity, JdbcTableHandle tableHandle)\n+    {\n+        ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();\n+\n+        try (Connection connection = connectionFactory.openConnection(identity);\n+                PreparedStatement statement = connection.prepareStatement(\"SELECT data_compression_desc FROM sys.partitions p INNER JOIN sys.tables t ON p.object_id = t.object_id WHERE p.partition_number = 1 AND t.name = ?\")) {\n+            statement.setString(1, tableHandle.getRemoteTableName().getTableName());\n+            try (ResultSet resultSet = statement.executeQuery()) {\n+                if (resultSet.next()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a430d9bb73177f942294f8bbce7adfeedb0978c9"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE4NTI1Nw==", "bodyText": "As you explained to me offline, the SQL Server treats table with single partition as an unpartitioned table.\nIs there a guarantee that the only partition will have partition_number=1?\nAlso, in case of a partitioned table, we should not return compression info from the first partition.", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524185257", "createdAt": "2020-11-16T11:56:42Z", "author": {"login": "findepi"}, "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -233,6 +240,32 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n         return true;\n     }\n \n+    @Override\n+    protected String createTableSql(RemoteTableName remoteTableName, List<String> columns, ConnectorTableMetadata tableMetadata)\n+    {\n+        return format(\"CREATE TABLE %s (%s) WITH (DATA_COMPRESSION = %s)\", quoted(remoteTableName), join(\", \", columns), getDataCompression(tableMetadata.getProperties()));\n+    }\n+\n+    @Override\n+    public Map<String, Object> getTableProperties(JdbcIdentity identity, JdbcTableHandle tableHandle)\n+    {\n+        ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();\n+\n+        try (Connection connection = connectionFactory.openConnection(identity);\n+                PreparedStatement statement = connection.prepareStatement(\"SELECT data_compression_desc FROM sys.partitions p INNER JOIN sys.tables t ON p.object_id = t.object_id WHERE p.partition_number = 1 AND t.name = ?\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a430d9bb73177f942294f8bbce7adfeedb0978c9"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE4NjU5OQ==", "bodyText": "Wonder why we need to specify the default twice -- above and here.", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524186599", "createdAt": "2020-11-16T11:57:56Z", "author": {"login": "findepi"}, "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerTableProperties.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.sqlserver;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.plugin.jdbc.TablePropertiesProvider;\n+import io.prestosql.spi.session.PropertyMetadata;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static io.prestosql.plugin.sqlserver.DataCompression.NONE;\n+import static io.prestosql.spi.session.PropertyMetadata.enumProperty;\n+\n+public class SqlServerTableProperties\n+        implements TablePropertiesProvider\n+{\n+    public static final String DATA_COMPRESSION = \"data_compression\";\n+\n+    private final List<PropertyMetadata<?>> tableProperties = ImmutableList.of(\n+            enumProperty(\n+                    DATA_COMPRESSION,\n+                    \"DataCompression type for table\",\n+                    DataCompression.class,\n+                    NONE,\n+                    false));\n+\n+    @Override\n+    public List<PropertyMetadata<?>> getTableProperties()\n+    {\n+        return tableProperties;\n+    }\n+\n+    public static DataCompression getDataCompression(Map<String, Object> tableProperties)\n+    {\n+        return (DataCompression) tableProperties.getOrDefault(DATA_COMPRESSION, NONE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a430d9bb73177f942294f8bbce7adfeedb0978c9"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE4NzM4MQ==", "bodyText": "nit: i'd put this below the test method, but up to you", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524187381", "createdAt": "2020-11-16T11:58:43Z", "author": {"login": "findepi"}, "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -317,6 +323,36 @@ public void testNativeMultipleInClauses()\n         sqlServer.execute(\"SELECT count(*) FROM dbo.orders WHERE \" + longInClauses);\n     }\n \n+    @DataProvider\n+    public Object[][] dataCompression()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a430d9bb73177f942294f8bbce7adfeedb0978c9"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMjc3MzQ2", "url": "https://github.com/trinodb/trino/pull/5856#pullrequestreview-531277346", "createdAt": "2020-11-16T12:31:49Z", "commit": {"oid": "a430d9bb73177f942294f8bbce7adfeedb0978c9"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjozMTo1MFrOHz7_Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjozODo1OVrOHz8cyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIyMjI0Mw==", "bodyText": "you might want to replace multiple subsequent white characters in to a single space, then value of createQuery would be easier to maintain.", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524222243", "createdAt": "2020-11-16T12:31:50Z", "author": {"login": "kokosing"}, "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -317,6 +323,36 @@ public void testNativeMultipleInClauses()\n         sqlServer.execute(\"SELECT count(*) FROM dbo.orders WHERE \" + longInClauses);\n     }\n \n+    @DataProvider\n+    public Object[][] dataCompression()\n+    {\n+        return new Object[][] {\n+                {NONE},\n+                {ROW},\n+                {PAGE}\n+        };\n+    }\n+\n+    @Test(dataProvider = \"dataCompression\")\n+    public void testCreateWithDataCompression(DataCompression dataCompression)\n+    {\n+        String tableName = \"test_create_with_compression_\" + randomTableSuffix();\n+        String createQuery = format(\"CREATE TABLE sqlserver.dbo.%s (\\n\" +\n+                        \"   a bigint,\\n\" +\n+                        \"   b bigint\\n\" +\n+                        \")\\n\" +\n+                        \"WITH (\\n\" +\n+                        \"   data_compression = '%s'\\n\" +\n+                        \")\",\n+                tableName,\n+                dataCompression);\n+        assertUpdate(createQuery);\n+\n+        assertEquals(getQueryRunner().execute(\"SHOW CREATE TABLE \" + tableName).getOnlyValue(), createQuery);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a430d9bb73177f942294f8bbce7adfeedb0978c9"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIyNTg2NA==", "bodyText": "jdbi3?", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524225864", "createdAt": "2020-11-16T12:35:16Z", "author": {"login": "kokosing"}, "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -233,6 +240,32 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n         return true;\n     }\n \n+    @Override\n+    protected String createTableSql(RemoteTableName remoteTableName, List<String> columns, ConnectorTableMetadata tableMetadata)\n+    {\n+        return format(\"CREATE TABLE %s (%s) WITH (DATA_COMPRESSION = %s)\", quoted(remoteTableName), join(\", \", columns), getDataCompression(tableMetadata.getProperties()));\n+    }\n+\n+    @Override\n+    public Map<String, Object> getTableProperties(JdbcIdentity identity, JdbcTableHandle tableHandle)\n+    {\n+        ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();\n+\n+        try (Connection connection = connectionFactory.openConnection(identity);\n+                PreparedStatement statement = connection.prepareStatement(\"SELECT data_compression_desc FROM sys.partitions p INNER JOIN sys.tables t ON p.object_id = t.object_id WHERE p.partition_number = 1 AND t.name = ?\")) {\n+            statement.setString(1, tableHandle.getRemoteTableName().getTableName());\n+            try (ResultSet resultSet = statement.executeQuery()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a430d9bb73177f942294f8bbce7adfeedb0978c9"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIyNjkxNw==", "bodyText": "is there a test ensuring SHOW CREATE TABLE doesn't return unnecessary data_compression property for all tables now\n\nThat property will now be added. I think we should skip it when it is value is unknown (null), when it differs among paritions.", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524226917", "createdAt": "2020-11-16T12:36:12Z", "author": {"login": "kokosing"}, "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -233,6 +240,32 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n         return true;\n     }\n \n+    @Override\n+    protected String createTableSql(RemoteTableName remoteTableName, List<String> columns, ConnectorTableMetadata tableMetadata)\n+    {\n+        return format(\"CREATE TABLE %s (%s) WITH (DATA_COMPRESSION = %s)\", quoted(remoteTableName), join(\", \", columns), getDataCompression(tableMetadata.getProperties()));\n+    }\n+\n+    @Override\n+    public Map<String, Object> getTableProperties(JdbcIdentity identity, JdbcTableHandle tableHandle)\n+    {\n+        ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();\n+\n+        try (Connection connection = connectionFactory.openConnection(identity);\n+                PreparedStatement statement = connection.prepareStatement(\"SELECT data_compression_desc FROM sys.partitions p INNER JOIN sys.tables t ON p.object_id = t.object_id WHERE p.partition_number = 1 AND t.name = ?\")) {\n+            statement.setString(1, tableHandle.getRemoteTableName().getTableName());\n+            try (ResultSet resultSet = statement.executeQuery()) {\n+                if (resultSet.next()) {\n+                    builder.put(DATA_COMPRESSION, DataCompression.valueOf(resultSet.getString(1)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE4MjkzOQ=="}, "originalCommit": {"oid": "a430d9bb73177f942294f8bbce7adfeedb0978c9"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIyOTgzMg==", "bodyText": "Correct me if I am wrong, NONE means no compression.\n\nLet's replace NONE with UNSET (or DEFAULT). Then do not add WITH (DATA_COMPRESSION clause when compression is the UNSET.\n\nLet's implement UNSET by not setting property value, so let's make it nullable and when it is null we should just use sql server system default behaviour.", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r524229832", "createdAt": "2020-11-16T12:38:59Z", "author": {"login": "kokosing"}, "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -233,6 +240,32 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n         return true;\n     }\n \n+    @Override\n+    protected String createTableSql(RemoteTableName remoteTableName, List<String> columns, ConnectorTableMetadata tableMetadata)\n+    {\n+        return format(\"CREATE TABLE %s (%s) WITH (DATA_COMPRESSION = %s)\", quoted(remoteTableName), join(\", \", columns), getDataCompression(tableMetadata.getProperties()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE3OTU4NQ=="}, "originalCommit": {"oid": "a430d9bb73177f942294f8bbce7adfeedb0978c9"}, "originalPosition": 53}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a430d9bb73177f942294f8bbce7adfeedb0978c9", "author": {"user": {"login": "Praveen2112", "name": "Praveen Krishna"}}, "url": "https://github.com/trinodb/trino/commit/a430d9bb73177f942294f8bbce7adfeedb0978c9", "committedDate": "2020-11-16T08:39:32Z", "message": "!fixup Add data compression property to SQL Server tables"}, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDg3NjI3", "url": "https://github.com/trinodb/trino/pull/5856#pullrequestreview-553487627", "createdAt": "2020-12-16T09:13:38Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwOToxMzozOVrOIG7Nsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwOToyNDowMFrOIG7ouA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEzMjUzMQ==", "bodyText": "this is not needed. It is only needed you would place ; at the end.", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r544132531", "createdAt": "2020-12-16T09:13:39Z", "author": {"login": "kokosing"}, "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/DataCompression.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.sqlserver;\n+\n+public enum DataCompression\n+{\n+    NONE,\n+    ROW,\n+    PAGE,\n+    /**/", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEzNDAyOQ==", "bodyText": "I would love to see a test where data_compression = null. Where table is created remotely (outside of Presto) and its partitions have different compressions. Is that doable?", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r544134029", "createdAt": "2020-12-16T09:16:00Z", "author": {"login": "kokosing"}, "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -340,6 +346,57 @@ public void testNativeMultipleInClauses()\n         sqlServer.execute(\"SELECT count(*) FROM dbo.orders WHERE \" + longInClauses);\n     }\n \n+    @Test\n+    @Override\n+    public void testShowCreateTable()\n+    {\n+        assertThat((String) computeActual(\"SHOW CREATE TABLE orders\").getOnlyValue())\n+                .matches(\"CREATE TABLE \\\\w+\\\\.\\\\w+\\\\.orders \\\\Q(\\n\" +\n+                        \"   orderkey bigint,\\n\" +\n+                        \"   custkey bigint,\\n\" +\n+                        \"   orderstatus varchar(1),\\n\" +\n+                        \"   totalprice double,\\n\" +\n+                        \"   orderdate date,\\n\" +\n+                        \"   orderpriority varchar(15),\\n\" +\n+                        \"   clerk varchar(15),\\n\" +\n+                        \"   shippriority integer,\\n\" +\n+                        \"   comment varchar(79)\\n\" +\n+                        \")\\n\" +\n+                        \"WITH (\\n\" +\n+                        \"   data_compression = 'NONE'\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEzNzM1OQ==", "bodyText": "what about other partitions? What they have different data_compression_desc? I would do SELECT DISTINCT data_compression_desc and in case there is 0 or more than 1 row I would return Optional.empty()", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r544137359", "createdAt": "2020-12-16T09:20:58Z", "author": {"login": "kokosing"}, "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -387,4 +420,27 @@ public void setNull(PreparedStatement statement, int index)\n             }\n         };\n     }\n+\n+    private static class DataCompressionDao\n+    {\n+        private final Handle handle;\n+\n+        private DataCompressionDao(Handle handle)\n+        {\n+            this.handle = requireNonNull(handle, \"handle is null\");\n+        }\n+\n+        Optional<DataCompression> getDataCompression(JdbcTableHandle table)\n+        {\n+            return handle.createQuery(\"\" +\n+                    \"SELECT data_compression_desc FROM sys.partitions p INNER JOIN sys.tables t ON p.object_id = t.object_id \" +\n+                    \"WHERE SCHEMA_NAME(t.schema_id) = :schema AND t.name = :table_name \" +\n+                    \"AND p.partition_number = 1\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEzOTAxMg==", "bodyText": "does getIfPresent supports - replacement with _ or does it compare it case insensitively?  No change request.", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r544139012", "createdAt": "2020-12-16T09:23:23Z", "author": {"login": "kokosing"}, "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -387,4 +420,27 @@ public void setNull(PreparedStatement statement, int index)\n             }\n         };\n     }\n+\n+    private static class DataCompressionDao\n+    {\n+        private final Handle handle;\n+\n+        private DataCompressionDao(Handle handle)\n+        {\n+            this.handle = requireNonNull(handle, \"handle is null\");\n+        }\n+\n+        Optional<DataCompression> getDataCompression(JdbcTableHandle table)\n+        {\n+            return handle.createQuery(\"\" +\n+                    \"SELECT data_compression_desc FROM sys.partitions p INNER JOIN sys.tables t ON p.object_id = t.object_id \" +\n+                    \"WHERE SCHEMA_NAME(t.schema_id) = :schema AND t.name = :table_name \" +\n+                    \"AND p.partition_number = 1\")\n+                    .bind(\"schema\", table.getSchemaName())\n+                    .bind(\"table_name\", table.getTableName())\n+                    .mapTo(String.class)\n+                    .findOne()\n+                    .flatMap(dataCompression -> Enums.getIfPresent(DataCompression.class, dataCompression).toJavaUtil());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEzOTQ0OA==", "bodyText": "Shouldn't you return Optional here?", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r544139448", "createdAt": "2020-12-16T09:24:00Z", "author": {"login": "kokosing"}, "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerTableProperties.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.sqlserver;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.plugin.jdbc.TablePropertiesProvider;\n+import io.prestosql.spi.session.PropertyMetadata;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static io.prestosql.plugin.sqlserver.DataCompression.NONE;\n+import static io.prestosql.spi.session.PropertyMetadata.enumProperty;\n+\n+public class SqlServerTableProperties\n+        implements TablePropertiesProvider\n+{\n+    public static final String DATA_COMPRESSION = \"data_compression\";\n+\n+    private final List<PropertyMetadata<?>> tableProperties = ImmutableList.of(\n+            enumProperty(\n+                    DATA_COMPRESSION,\n+                    \"DataCompression type for table\",\n+                    DataCompression.class,\n+                    NONE,\n+                    false));\n+\n+    @Override\n+    public List<PropertyMetadata<?>> getTableProperties()\n+    {\n+        return tableProperties;\n+    }\n+\n+    public static DataCompression getDataCompression(Map<String, Object> tableProperties)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MTgzNTU1", "url": "https://github.com/trinodb/trino/pull/5856#pullrequestreview-554183555", "createdAt": "2020-12-17T00:06:21Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMDowNjoyMVrOIHenQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMDozMDo0OFrOIHfL0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxMjUxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        dataCompressionDao.getDataCompression(tableHandle)\n          \n          \n            \n                 return dataCompressionDao.getDataCompression(tableHandle)\n          \n          \n            \n                 .<Map<String, Object>>map(dataCompression -> ImmutableMap.of(DATA_COMPRESSION, dataCompression))\n          \n          \n            \n                .orElseGet(ImmutableMap::of);", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r544712512", "createdAt": "2020-12-17T00:06:21Z", "author": {"login": "ssheikin"}, "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -349,6 +359,35 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n         return true;\n     }\n \n+    @Override\n+    protected String createTableSql(RemoteTableName remoteTableName, List<String> columns, ConnectorTableMetadata tableMetadata)\n+    {\n+        return format(\n+                \"CREATE TABLE %s (%s) %s\",\n+                quoted(remoteTableName),\n+                join(\", \", columns),\n+                getDataCompression(tableMetadata.getProperties())\n+                        .map(dataCompression -> format(\"WITH (DATA_COMPRESSION = %s)\", dataCompression))\n+                        .orElse(\"\"));\n+    }\n+\n+    @Override\n+    public Map<String, Object> getTableProperties(ConnectorSession session, JdbcTableHandle tableHandle)\n+    {\n+        ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();\n+\n+        try (Connection connection = connectionFactory.openConnection(session);\n+                Handle handle = Jdbi.open(connection)) {\n+            DataCompressionDao dataCompressionDao = new DataCompressionDao(handle);\n+            dataCompressionDao.getDataCompression(tableHandle)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxNDI5NQ==", "bodyText": "Could you please consider different name for this method?\n\nusually get is a lightweight one.\ncurrently it repeats the class name.\n\nMaybe take or takeFor?", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r544714295", "createdAt": "2020-12-17T00:10:52Z", "author": {"login": "ssheikin"}, "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -387,4 +426,28 @@ public void setNull(PreparedStatement statement, int index)\n             }\n         };\n     }\n+\n+    private static class DataCompressionDao\n+    {\n+        private final Handle handle;\n+\n+        private DataCompressionDao(Handle handle)\n+        {\n+            this.handle = requireNonNull(handle, \"handle is null\");\n+        }\n+\n+        Optional<DataCompression> getDataCompression(JdbcTableHandle table)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxNjMzMA==", "bodyText": "Could you please make this query more vertical than horizontal or share your thoughts why is it so onliner?\nMaybe FROM and INNER JOIN from new line?", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r544716330", "createdAt": "2020-12-17T00:16:20Z", "author": {"login": "ssheikin"}, "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -387,4 +426,28 @@ public void setNull(PreparedStatement statement, int index)\n             }\n         };\n     }\n+\n+    private static class DataCompressionDao\n+    {\n+        private final Handle handle;\n+\n+        private DataCompressionDao(Handle handle)\n+        {\n+            this.handle = requireNonNull(handle, \"handle is null\");\n+        }\n+\n+        Optional<DataCompression> getDataCompression(JdbcTableHandle table)\n+        {\n+            return handle.createQuery(\"\" +\n+                    \"SELECT data_compression_desc FROM sys.partitions p INNER JOIN sys.tables t ON p.object_id = t.object_id \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcyMTg3Mg==", "bodyText": "separate commit?", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r544721872", "createdAt": "2020-12-17T00:30:48Z", "author": {"login": "ssheikin"}, "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -340,6 +346,77 @@ public void testNativeMultipleInClauses()\n         sqlServer.execute(\"SELECT count(*) FROM dbo.orders WHERE \" + longInClauses);\n     }\n \n+    @Test\n+    @Override\n+    public void testShowCreateTable()\n+    {\n+        assertThat((String) computeActual(\"SHOW CREATE TABLE orders\").getOnlyValue())\n+                .matches(\"CREATE TABLE \\\\w+\\\\.\\\\w+\\\\.orders \\\\Q(\\n\" +\n+                        \"   orderkey bigint,\\n\" +\n+                        \"   custkey bigint,\\n\" +\n+                        \"   orderstatus varchar(1),\\n\" +\n+                        \"   totalprice double,\\n\" +\n+                        \"   orderdate date,\\n\" +\n+                        \"   orderpriority varchar(15),\\n\" +\n+                        \"   clerk varchar(15),\\n\" +\n+                        \"   shippriority integer,\\n\" +\n+                        \"   comment varchar(79)\\n\" +\n+                        \")\\n\" +\n+                        \"WITH (\\n\" +\n+                        \"   data_compression = 'NONE'\\n\" +\n+                        \")\");\n+    }\n+\n+    @Test(dataProvider = \"dataCompression\")\n+    public void testCreateWithDataCompression(DataCompression dataCompression)\n+    {\n+        String tableName = \"test_create_with_compression_\" + randomTableSuffix();\n+        String createQuery = format(\"CREATE TABLE sqlserver.dbo.%s (\\n\" +\n+                        \"   a bigint,\\n\" +\n+                        \"   b bigint\\n\" +\n+                        \")\\n\" +\n+                        \"WITH (\\n\" +\n+                        \"   data_compression = '%s'\\n\" +\n+                        \")\",\n+                tableName,\n+                dataCompression);\n+        assertUpdate(createQuery);\n+\n+        assertEquals(getQueryRunner().execute(\"SHOW CREATE TABLE \" + tableName).getOnlyValue(), createQuery);\n+\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @DataProvider\n+    public Object[][] dataCompression()\n+    {\n+        return new Object[][] {\n+                {NONE},\n+                {ROW},\n+                {PAGE}\n+        };\n+    }\n+\n+    @Test\n+    public void testShowCreateForPartitionedTables()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fb63209c8797965c35cd3ca27a7ef5e60fcf4ae", "author": {"user": {"login": "Praveen2112", "name": "Praveen Krishna"}}, "url": "https://github.com/trinodb/trino/commit/0fb63209c8797965c35cd3ca27a7ef5e60fcf4ae", "committedDate": "2020-12-17T09:22:43Z", "message": "Allow JDBC connector to set table property"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0NDI5NjM2", "url": "https://github.com/trinodb/trino/pull/5856#pullrequestreview-554429636", "createdAt": "2020-12-17T09:39:46Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwOTozOTo0N1rOIHs2rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwOTo0MDoyOFrOIHs4dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk0NTgzOA==", "bodyText": "What if query returns more than one record, is it going to throw?", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r544945838", "createdAt": "2020-12-17T09:39:47Z", "author": {"login": "kokosing"}, "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -387,4 +424,29 @@ public void setNull(PreparedStatement statement, int index)\n             }\n         };\n     }\n+\n+    private static class DataCompressionDao\n+    {\n+        private final Handle handle;\n+\n+        private DataCompressionDao(Handle handle)\n+        {\n+            this.handle = requireNonNull(handle, \"handle is null\");\n+        }\n+\n+        Optional<DataCompression> getDataCompression(JdbcTableHandle table)\n+        {\n+            return handle.createQuery(\"\" +\n+                    \"SELECT data_compression_desc FROM sys.partitions p \" +\n+                    \"INNER JOIN sys.tables t ON p.object_id = t.object_id \" +\n+                    \"INNER JOIN sys.indexes i ON t.object_id = i.object_id \" +\n+                    \"WHERE SCHEMA_NAME(t.schema_id) = :schema AND t.name = :table_name AND i.type IN (0,1) \" +\n+                    \"AND i.data_space_id NOT IN (SELECT data_space_id FROM sys.partition_schemes)\")\n+                    .bind(\"schema\", table.getSchemaName())\n+                    .bind(\"table_name\", table.getTableName())\n+                    .mapTo(String.class)\n+                    .findOne()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk0NjI5NQ==", "bodyText": "Actually I think DataCompressionDao class is not needed, all you need is getDataCompression method.", "url": "https://github.com/trinodb/trino/pull/5856#discussion_r544946295", "createdAt": "2020-12-17T09:40:28Z", "author": {"login": "kokosing"}, "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -387,4 +426,28 @@ public void setNull(PreparedStatement statement, int index)\n             }\n         };\n     }\n+\n+    private static class DataCompressionDao\n+    {\n+        private final Handle handle;\n+\n+        private DataCompressionDao(Handle handle)\n+        {\n+            this.handle = requireNonNull(handle, \"handle is null\");\n+        }\n+\n+        Optional<DataCompression> getDataCompression(JdbcTableHandle table)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxNDI5NQ=="}, "originalCommit": null, "originalPosition": 104}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ac9eabbfac47a061afc6716f864ce912fe6130f", "author": {"user": {"login": "Praveen2112", "name": "Praveen Krishna"}}, "url": "https://github.com/trinodb/trino/commit/3ac9eabbfac47a061afc6716f864ce912fe6130f", "committedDate": "2020-12-17T09:52:52Z", "message": "Add data compression property to SQL Server tables"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "3ac9eabbfac47a061afc6716f864ce912fe6130f", "author": {"user": {"login": "Praveen2112", "name": "Praveen Krishna"}}, "url": "https://github.com/trinodb/trino/commit/3ac9eabbfac47a061afc6716f864ce912fe6130f", "committedDate": "2020-12-17T09:52:52Z", "message": "Add data compression property to SQL Server tables"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0NTAxOTk5", "url": "https://github.com/trinodb/trino/pull/5856#pullrequestreview-554501999", "createdAt": "2020-12-17T11:09:54Z", "commit": {"oid": "3ac9eabbfac47a061afc6716f864ce912fe6130f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2886, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}