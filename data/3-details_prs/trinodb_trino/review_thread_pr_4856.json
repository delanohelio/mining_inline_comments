{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4NTU4OTQ3", "number": 4856, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMzowNDozN1rOEZCWfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjoxNTo0MlrOEaDKHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Njg4MzgwOnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMzowNDozN1rOHBn4Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDowNjozNlrOHCWQuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ2Mzk3OQ==", "bodyText": "dropTable calls should be called always at the end of the tests. Currently if assertion fails the DROP will not be executed and test for another file format which uses same table name will fail on CREATE TABLE", "url": "https://github.com/trinodb/trino/pull/4856#discussion_r471463979", "createdAt": "2020-08-17T13:04:37Z", "author": {"login": "losipiuk"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -387,177 +387,203 @@ private void testCreatePartitionedTableAs(Session session, FileFormat fileFormat\n \n //        assertEquals(partitions.size(), 3);\n \n-        assertQuery(session, \"SELECT * from test_create_partitioned_table_as\", \"SELECT orderkey, shippriority, orderstatus FROM orders\");\n+        assertQuery(\"SELECT * from test_create_partitioned_table_as\", \"SELECT orderkey, shippriority, orderstatus FROM orders\");\n \n-        dropTable(session, \"test_create_partitioned_table_as\");\n+        dropTable(\"test_create_partitioned_table_as\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 325}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUyNDI2OA==", "bodyText": "Thanks for taking a look, @losipiuk!  AFAIK dropTable is always called, except as you point out in the case of an exception.  That was also true before these changes?\nAre you suggesting that all tests should be wrapped in try/finally with dropTable called in the finally block?", "url": "https://github.com/trinodb/trino/pull/4856#discussion_r471524268", "createdAt": "2020-08-17T14:38:06Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -387,177 +387,203 @@ private void testCreatePartitionedTableAs(Session session, FileFormat fileFormat\n \n //        assertEquals(partitions.size(), 3);\n \n-        assertQuery(session, \"SELECT * from test_create_partitioned_table_as\", \"SELECT orderkey, shippriority, orderstatus FROM orders\");\n+        assertQuery(\"SELECT * from test_create_partitioned_table_as\", \"SELECT orderkey, shippriority, orderstatus FROM orders\");\n \n-        dropTable(session, \"test_create_partitioned_table_as\");\n+        dropTable(\"test_create_partitioned_table_as\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ2Mzk3OQ=="}, "originalCommit": null, "originalPosition": 325}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0NTkzNA==", "bodyText": "Before changes single table was only used for single test run, right? Then not having drop is not painful. We just end up with garbage.\nNow that we have same test executed multiple times (for different file formats), failure for test in format A will result in failure at the very beginning of test for format B.\nI think try/finally is fine approach. Though extra indentation makes code a bit less readable.\nOr you can use temporary table mechanism which @kokosing  intruduces in #4849, as soon as that one gets merged.", "url": "https://github.com/trinodb/trino/pull/4856#discussion_r472045934", "createdAt": "2020-08-18T09:31:40Z", "author": {"login": "losipiuk"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -387,177 +387,203 @@ private void testCreatePartitionedTableAs(Session session, FileFormat fileFormat\n \n //        assertEquals(partitions.size(), 3);\n \n-        assertQuery(session, \"SELECT * from test_create_partitioned_table_as\", \"SELECT orderkey, shippriority, orderstatus FROM orders\");\n+        assertQuery(\"SELECT * from test_create_partitioned_table_as\", \"SELECT orderkey, shippriority, orderstatus FROM orders\");\n \n-        dropTable(session, \"test_create_partitioned_table_as\");\n+        dropTable(\"test_create_partitioned_table_as\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ2Mzk3OQ=="}, "originalCommit": null, "originalPosition": 325}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIyMzkzMQ==", "bodyText": "I'll think about it, and consult with @electrum.  If we need to try/finally, I can hide it in a helper method that takes a runnable, e.g., withCreatedTable(tableName, runnable).", "url": "https://github.com/trinodb/trino/pull/4856#discussion_r472223931", "createdAt": "2020-08-18T14:06:36Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -387,177 +387,203 @@ private void testCreatePartitionedTableAs(Session session, FileFormat fileFormat\n \n //        assertEquals(partitions.size(), 3);\n \n-        assertQuery(session, \"SELECT * from test_create_partitioned_table_as\", \"SELECT orderkey, shippriority, orderstatus FROM orders\");\n+        assertQuery(\"SELECT * from test_create_partitioned_table_as\", \"SELECT orderkey, shippriority, orderstatus FROM orders\");\n \n-        dropTable(session, \"test_create_partitioned_table_as\");\n+        dropTable(\"test_create_partitioned_table_as\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ2Mzk3OQ=="}, "originalCommit": null, "originalPosition": 325}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Njg5MjA1OnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMzowNjo1MVrOHBn9GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNDo0MzowM1rOHBrw9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ2NTI0MQ==", "bodyText": "instead doing loop manually you can use @DataProvider\nExample: https://github.com/prestosql/presto/blob/93faf7ad9a6b95a2436d4eaa9bf567756b759c3f/presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveStorageFormats.java#L63", "url": "https://github.com/trinodb/trino/pull/4856#discussion_r471465241", "createdAt": "2020-08-17T13:06:51Z", "author": {"login": "losipiuk"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -248,30 +247,31 @@ private void testCreatePartitionedTable(Session session, FileFormat fileFormat)\n                 \", CAST('2017-05-01 10:12:34' AS TIMESTAMP) _timestamp\" +\n                 \", CAST('2017-05-01' AS DATE) _date\";\n \n-        assertUpdate(session, \"INSERT INTO test_partitioned_table \" + select, 1);\n-        assertQuery(session, \"SELECT * from test_partitioned_table\", select);\n-        assertQuery(session, \"\" +\n-                        \"SELECT * FROM test_partitioned_table WHERE\" +\n-                        \" 'foo' = _string\" +\n-                        \" AND 456 = _integer\" +\n-                        \" AND CAST(123 AS BIGINT) = _bigint\" +\n-                        \" AND true = _boolean\" +\n-                        \" AND CAST('3.14' AS DECIMAL(3,2)) = _decimal_short\" +\n-                        \" AND CAST('12345678901234567890.0123456789' AS DECIMAL(30,10)) = _decimal_long\" +\n-                        \" AND CAST('2017-05-01 10:12:34' AS TIMESTAMP) = _timestamp\" +\n-                        \" AND CAST('2017-05-01' AS DATE) = _date\",\n-                select);\n+        assertUpdate(format(\"INSERT INTO test_partitioned_table %s\", select), 1);\n+        assertQuery(\"SELECT * FROM test_partitioned_table\", select);\n \n-        dropTable(session, \"test_partitioned_table\");\n+        String selectAgain = \"\" +\n+                \"SELECT * FROM test_partitioned_table WHERE\" +\n+                \" 'foo' = _string\" +\n+                \" AND 456 = _integer\" +\n+                \" AND CAST(123 AS BIGINT) = _bigint\" +\n+                \" AND true = _boolean\" +\n+                \" AND CAST('3.14' AS DECIMAL(3,2)) = _decimal_short\" +\n+                \" AND CAST('12345678901234567890.0123456789' AS DECIMAL(30,10)) = _decimal_long\" +\n+                \" AND CAST('2017-05-01 10:12:34' AS TIMESTAMP) = _timestamp\" +\n+                \" AND CAST('2017-05-01' AS DATE) = _date\";\n+        assertQuery(selectAgain, select);\n+\n+        dropTable(\"test_partitioned_table\");\n     }\n \n     @Test\n     public void testCreatePartitionedTableWithNestedTypes()\n     {\n-        testWithAllFileFormats(this::testCreatePartitionedTableWithNestedTypes);\n+        testWithAllFileFormats(this::testCreatePartitionedTableWithNestedTypesForFormat);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 239}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUyNzY3MA==", "bodyText": "Thanks for the tip; I'll take a look.  Today, the Iceberg connector supports ORC and Parquet, and there is a PR to support AVRO.\nI now understand @DataProvider is a generic capability of TestNG, and you were pointing me at an example.  Indeed, it's the right thing, because it shows each format as a different test result.  I made the change to use @DataProvider, which eliminated a helper method per test.  A very nice cleanup!", "url": "https://github.com/trinodb/trino/pull/4856#discussion_r471527670", "createdAt": "2020-08-17T14:43:03Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -248,30 +247,31 @@ private void testCreatePartitionedTable(Session session, FileFormat fileFormat)\n                 \", CAST('2017-05-01 10:12:34' AS TIMESTAMP) _timestamp\" +\n                 \", CAST('2017-05-01' AS DATE) _date\";\n \n-        assertUpdate(session, \"INSERT INTO test_partitioned_table \" + select, 1);\n-        assertQuery(session, \"SELECT * from test_partitioned_table\", select);\n-        assertQuery(session, \"\" +\n-                        \"SELECT * FROM test_partitioned_table WHERE\" +\n-                        \" 'foo' = _string\" +\n-                        \" AND 456 = _integer\" +\n-                        \" AND CAST(123 AS BIGINT) = _bigint\" +\n-                        \" AND true = _boolean\" +\n-                        \" AND CAST('3.14' AS DECIMAL(3,2)) = _decimal_short\" +\n-                        \" AND CAST('12345678901234567890.0123456789' AS DECIMAL(30,10)) = _decimal_long\" +\n-                        \" AND CAST('2017-05-01 10:12:34' AS TIMESTAMP) = _timestamp\" +\n-                        \" AND CAST('2017-05-01' AS DATE) = _date\",\n-                select);\n+        assertUpdate(format(\"INSERT INTO test_partitioned_table %s\", select), 1);\n+        assertQuery(\"SELECT * FROM test_partitioned_table\", select);\n \n-        dropTable(session, \"test_partitioned_table\");\n+        String selectAgain = \"\" +\n+                \"SELECT * FROM test_partitioned_table WHERE\" +\n+                \" 'foo' = _string\" +\n+                \" AND 456 = _integer\" +\n+                \" AND CAST(123 AS BIGINT) = _bigint\" +\n+                \" AND true = _boolean\" +\n+                \" AND CAST('3.14' AS DECIMAL(3,2)) = _decimal_short\" +\n+                \" AND CAST('12345678901234567890.0123456789' AS DECIMAL(30,10)) = _decimal_long\" +\n+                \" AND CAST('2017-05-01 10:12:34' AS TIMESTAMP) = _timestamp\" +\n+                \" AND CAST('2017-05-01' AS DATE) = _date\";\n+        assertQuery(selectAgain, select);\n+\n+        dropTable(\"test_partitioned_table\");\n     }\n \n     @Test\n     public void testCreatePartitionedTableWithNestedTypes()\n     {\n-        testWithAllFileFormats(this::testCreatePartitionedTableWithNestedTypes);\n+        testWithAllFileFormats(this::testCreatePartitionedTableWithNestedTypesForFormat);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ2NTI0MQ=="}, "originalCommit": null, "originalPosition": 239}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDU4NjQ2OnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOToyMTowOVrOHCLBKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTo1NDoxN1rOHDN34A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzOTcyMA==", "bodyText": "nit: I think name = \"allFormats\" is not needed if it matches method name.", "url": "https://github.com/trinodb/trino/pull/4856#discussion_r472039720", "createdAt": "2020-08-18T09:21:09Z", "author": {"login": "losipiuk"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -73,8 +75,17 @@ protected QueryRunner createQueryRunner()\n         return createIcebergQueryRunner(ImmutableMap.of());\n     }\n \n-    @Test\n-    public void testShowCreateSchema()\n+    @DataProvider(name = \"allFormats\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIyNDA2Mw==", "bodyText": "Removed.", "url": "https://github.com/trinodb/trino/pull/4856#discussion_r472224063", "createdAt": "2020-08-18T14:06:46Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -73,8 +75,17 @@ protected QueryRunner createQueryRunner()\n         return createIcebergQueryRunner(ImmutableMap.of());\n     }\n \n-    @Test\n-    public void testShowCreateSchema()\n+    @DataProvider(name = \"allFormats\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzOTcyMA=="}, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEzNTA3Mg==", "bodyText": "Nice, I didn't' know about that. Makes it cleaner.", "url": "https://github.com/trinodb/trino/pull/4856#discussion_r473135072", "createdAt": "2020-08-19T15:54:17Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -73,8 +75,17 @@ protected QueryRunner createQueryRunner()\n         return createIcebergQueryRunner(ImmutableMap.of());\n     }\n \n-    @Test\n-    public void testShowCreateSchema()\n+    @DataProvider(name = \"allFormats\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzOTcyMA=="}, "originalCommit": null, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDU5NjgxOnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOToyNDowNFrOHCLHvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDo0Nzo0MFrOHCYJJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0MTQwNg==", "bodyText": "It seems this one should be renamed testShowCreateTable and method above should be dropped.", "url": "https://github.com/trinodb/trino/pull/4856#discussion_r472041406", "createdAt": "2020-08-18T09:24:04Z", "author": {"login": "losipiuk"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -105,6 +121,12 @@ public void testDescribeTable()\n \n     @Override\n     public void testShowCreateTable()\n+    {\n+        testCreateTableForFormat(ORC);\n+    }\n+\n+    @Test(dataProvider = \"allFormats\")\n+    public void testCreateTableForFormat(FileFormat format)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIyNDEzOQ==", "bodyText": "Unfortunately, as mentioned in the commit comments, the method above is required by TestIcebergSmoke's base class AbstractTestIntegrationSmokeTest.  AbstractTestIntegrationSmokeTest is in module presto-testing, and is connector-independent.\nAbstractTestIntegrationSmokeTest doesn't actually create any tables.  Instead, it uses the tpch tables pre-created by the IcebergQueryRunner.  We need to figure out a way to run the AbstractTestIntegrationSmokeTest methods having pre-created for both ORC and Parquet.  I'll figure out some way to do it.", "url": "https://github.com/trinodb/trino/pull/4856#discussion_r472224139", "createdAt": "2020-08-18T14:06:53Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -105,6 +121,12 @@ public void testDescribeTable()\n \n     @Override\n     public void testShowCreateTable()\n+    {\n+        testCreateTableForFormat(ORC);\n+    }\n+\n+    @Test(dataProvider = \"allFormats\")\n+    public void testCreateTableForFormat(FileFormat format)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0MTQwNg=="}, "originalCommit": null, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIzNDgyMQ==", "bodyText": "Unfortunately, as mentioned in the commit comments, the method above is required by TestIcebergSmoke's base class AbstractTestIntegrationSmokeTest. AbstractTestIntegrationSmokeTest is in module presto-testing, and is connector-independent.\n\nThanks for the clarification.\nSo if I understand it correctly now we are running test for SHOW CREATE TABLE once for Parquet (via testCreateTableForFormat) and twice for ORC (via testCreateTableForFormat and testShowCreateTable).\nWould code structure like this work:\n    @Override\n    @Test(enabled = false) \n    public void testShowCreateTable(){\n        // superseded with #testShowCreateTable(FileFormat)\n    }\n\n    @Test(dataProvider = \"allFormats\")\n    public void testShowCreateTable(FileFormat format) {\n       ACTUAL TEST\n    }", "url": "https://github.com/trinodb/trino/pull/4856#discussion_r472234821", "createdAt": "2020-08-18T14:21:32Z", "author": {"login": "losipiuk"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -105,6 +121,12 @@ public void testDescribeTable()\n \n     @Override\n     public void testShowCreateTable()\n+    {\n+        testCreateTableForFormat(ORC);\n+    }\n+\n+    @Test(dataProvider = \"allFormats\")\n+    public void testCreateTableForFormat(FileFormat format)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0MTQwNg=="}, "originalCommit": null, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1NDc1OA==", "bodyText": "That's a great idea!  Done.", "url": "https://github.com/trinodb/trino/pull/4856#discussion_r472254758", "createdAt": "2020-08-18T14:47:40Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -105,6 +121,12 @@ public void testDescribeTable()\n \n     @Override\n     public void testShowCreateTable()\n+    {\n+        testCreateTableForFormat(ORC);\n+    }\n+\n+    @Test(dataProvider = \"allFormats\")\n+    public void testCreateTableForFormat(FileFormat format)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0MTQwNg=="}, "originalCommit": null, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDU5Nzg3OnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOToyNDoyMVrOHCLIYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDowNzozMlrOHCWTgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0MTU3MA==", "bodyText": "rename to testDescribeTable and drop method above?", "url": "https://github.com/trinodb/trino/pull/4856#discussion_r472041570", "createdAt": "2020-08-18T09:24:21Z", "author": {"login": "losipiuk"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -84,9 +95,14 @@ public void testShowCreateSchema()\n                         \"\\\\)\");\n     }\n \n-    @Test\n     @Override\n     public void testDescribeTable()\n+    {\n+        testDescribeTableForFormat(ORC);\n+    }\n+\n+    @Test(dataProvider = \"allFormats\")\n+    public void testDescribeTableForFormat(FileFormat format)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIyNDY0Mg==", "bodyText": "Both methods are needed because of AbstractTestIntegrationSmokeTest, as in the previous comment.", "url": "https://github.com/trinodb/trino/pull/4856#discussion_r472224642", "createdAt": "2020-08-18T14:07:32Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -84,9 +95,14 @@ public void testShowCreateSchema()\n                         \"\\\\)\");\n     }\n \n-    @Test\n     @Override\n     public void testDescribeTable()\n+    {\n+        testDescribeTableForFormat(ORC);\n+    }\n+\n+    @Test(dataProvider = \"allFormats\")\n+    public void testDescribeTableForFormat(FileFormat format)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0MTU3MA=="}, "originalCommit": null, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzQ3NzY2OnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/AbstractTestIcebergSmoke.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjowOToyMVrOHDOeEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTowMzo0OFrOHDY_8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE0NDg0OA==", "bodyText": "Check for null", "url": "https://github.com/trinodb/trino/pull/4856#discussion_r473144848", "createdAt": "2020-08-19T16:09:21Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/AbstractTestIcebergSmoke.java", "diffHunk": "@@ -57,20 +56,29 @@\n import static java.util.Locale.ENGLISH;\n import static java.util.stream.Collectors.joining;\n import static java.util.stream.IntStream.range;\n+import static org.apache.iceberg.FileFormat.ORC;\n+import static org.apache.iceberg.FileFormat.PARQUET;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.testng.Assert.assertFalse;\n import static org.testng.Assert.assertNotNull;\n \n-public class TestIcebergSmoke\n+public abstract class AbstractTestIcebergSmoke\n         extends AbstractTestIntegrationSmokeTest\n {\n     private static final Pattern WITH_CLAUSE_EXTRACTER = Pattern.compile(\".*(WITH\\\\s*\\\\([^)]*\\\\))\\\\s*$\", Pattern.DOTALL);\n \n+    private final FileFormat format;\n+\n+    public AbstractTestIcebergSmoke(FileFormat format)\n+    {\n+        this.format = format;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxNzM2MQ==", "bodyText": "Added.", "url": "https://github.com/trinodb/trino/pull/4856#discussion_r473317361", "createdAt": "2020-08-19T21:03:48Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/AbstractTestIcebergSmoke.java", "diffHunk": "@@ -57,20 +56,29 @@\n import static java.util.Locale.ENGLISH;\n import static java.util.stream.Collectors.joining;\n import static java.util.stream.IntStream.range;\n+import static org.apache.iceberg.FileFormat.ORC;\n+import static org.apache.iceberg.FileFormat.PARQUET;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.testng.Assert.assertFalse;\n import static org.testng.Assert.assertNotNull;\n \n-public class TestIcebergSmoke\n+public abstract class AbstractTestIcebergSmoke\n         extends AbstractTestIntegrationSmokeTest\n {\n     private static final Pattern WITH_CLAUSE_EXTRACTER = Pattern.compile(\".*(WITH\\\\s*\\\\([^)]*\\\\))\\\\s*$\", Pattern.DOTALL);\n \n+    private final FileFormat format;\n+\n+    public AbstractTestIcebergSmoke(FileFormat format)\n+    {\n+        this.format = format;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE0NDg0OA=="}, "originalCommit": null, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzQ4MjYzOnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/AbstractTestIcebergSmoke.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjoxMDozOVrOHDOhQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTowMzo0MlrOHDY_wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE0NTY2NQ==", "bodyText": "Remove", "url": "https://github.com/trinodb/trino/pull/4856#discussion_r473145665", "createdAt": "2020-08-19T16:10:39Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/AbstractTestIcebergSmoke.java", "diffHunk": "@@ -405,56 +363,56 @@ private void testCreatePartitionedTableAs(Session session, FileFormat fileFormat\n                         \"   order_status varchar\\n\" +\n                         \")\\n\" +\n                         \"WITH (\\n\" +\n-                        \"   format = '\" + fileFormat + \"',\\n\" +\n+                        \"   format = '%s',\\n\" +\n                         \"   partitioning = ARRAY['order_status','ship_priority','bucket(order_key, 9)']\\n\" +\n                         \")\",\n                 getSession().getCatalog().get(),\n                 getSession().getSchema().get(),\n-                \"test_create_partitioned_table_as\");\n+                \"test_create_partitioned_table_as\",\n+                format);\n \n         MaterializedResult actualResult = computeActual(\"SHOW CREATE TABLE test_create_partitioned_table_as\");\n         assertEquals(getOnlyElement(actualResult.getOnlyColumnAsSet()), createTableSql);\n \n //        assertEquals(partitions.size(), 3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 363}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxNzMxMw==", "bodyText": "Removed.", "url": "https://github.com/trinodb/trino/pull/4856#discussion_r473317313", "createdAt": "2020-08-19T21:03:42Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/AbstractTestIcebergSmoke.java", "diffHunk": "@@ -405,56 +363,56 @@ private void testCreatePartitionedTableAs(Session session, FileFormat fileFormat\n                         \"   order_status varchar\\n\" +\n                         \")\\n\" +\n                         \"WITH (\\n\" +\n-                        \"   format = '\" + fileFormat + \"',\\n\" +\n+                        \"   format = '%s',\\n\" +\n                         \"   partitioning = ARRAY['order_status','ship_priority','bucket(order_key, 9)']\\n\" +\n                         \")\",\n                 getSession().getCatalog().get(),\n                 getSession().getSchema().get(),\n-                \"test_create_partitioned_table_as\");\n+                \"test_create_partitioned_table_as\",\n+                format);\n \n         MaterializedResult actualResult = computeActual(\"SHOW CREATE TABLE test_create_partitioned_table_as\");\n         assertEquals(getOnlyElement(actualResult.getOnlyColumnAsSet()), createTableSql);\n \n //        assertEquals(partitions.size(), 3);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE0NTY2NQ=="}, "originalCommit": null, "originalPosition": 363}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzUwMTc0OnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/IcebergQueryRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjoxNTo0MlrOHDOtmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTowMzo1NFrOHDZAdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE0ODgyNA==", "bodyText": "We could make this\nFileFormat defaultFormat = new IcebergConfig().getFileFormat();\nreturn createIcebergQueryRunner(extraProperties, defaultFormat, true);", "url": "https://github.com/trinodb/trino/pull/4856#discussion_r473148824", "createdAt": "2020-08-19T16:15:42Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/IcebergQueryRunner.java", "diffHunk": "@@ -39,10 +41,16 @@ private IcebergQueryRunner() {}\n     public static DistributedQueryRunner createIcebergQueryRunner(Map<String, String> extraProperties)\n             throws Exception\n     {\n-        return createIcebergQueryRunner(extraProperties, true);\n+        return createIcebergQueryRunner(extraProperties, ORC, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxNzQ5NA==", "bodyText": "Much nicer; changed.", "url": "https://github.com/trinodb/trino/pull/4856#discussion_r473317494", "createdAt": "2020-08-19T21:03:54Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/IcebergQueryRunner.java", "diffHunk": "@@ -39,10 +41,16 @@ private IcebergQueryRunner() {}\n     public static DistributedQueryRunner createIcebergQueryRunner(Map<String, String> extraProperties)\n             throws Exception\n     {\n-        return createIcebergQueryRunner(extraProperties, true);\n+        return createIcebergQueryRunner(extraProperties, ORC, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE0ODgyNA=="}, "originalCommit": null, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3483, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}