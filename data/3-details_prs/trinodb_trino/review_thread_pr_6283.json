{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1ODA3OTYw", "number": 6283, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDo0Mzo0N1rOFDg0Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMzo0NjozOVrOFGM0fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjI3NjcxOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/block/EncoderUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDo0Mzo0OFrOIDMquw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDo0Mzo0OFrOIDMquw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIyNDE4Nw==", "bodyText": "this should be above retrieveNullBits", "url": "https://github.com/trinodb/trino/pull/6283#discussion_r540224187", "createdAt": "2020-12-10T14:43:48Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/block/EncoderUtil.java", "diffHunk": "@@ -74,17 +76,31 @@ public static void encodeNullsAsBits(SliceOutput sliceOutput, Block block)\n      */\n     public static Optional<boolean[]> decodeNullBits(SliceInput sliceInput, int positionCount)\n     {\n-        if (!sliceInput.readBoolean()) {\n+        @Nullable\n+        byte[] packedIsNull = retrieveNullBits(sliceInput, positionCount);\n+        if (packedIsNull == null) {\n             return Optional.empty();\n         }\n-        byte[] packedIsNull;\n+\n+        return decodeNullBits(packedIsNull, positionCount);\n+    }\n+\n+    @Nullable\n+    public static byte[] retrieveNullBits(SliceInput sliceInput, int positionCount)\n+    {\n+        if (!sliceInput.readBoolean()) {\n+            return null;\n+        }\n         try {\n-            packedIsNull = sliceInput.readNBytes(((positionCount & ~0b111) + 1) / 8);\n+            return sliceInput.readNBytes((positionCount + 7) / 8);\n         }\n         catch (IOException e) {\n             throw new UncheckedIOException(e);\n         }\n+    }\n \n+    public static Optional<boolean[]> decodeNullBits(byte[] packedIsNull, int positionCount)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjI5NTc4OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/block/LongArrayBlockEncoding.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDo0NzoyMFrOIDM2Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDo0NzoyMFrOIDM2Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIyNzA3NA==", "bodyText": "remove redundant else", "url": "https://github.com/trinodb/trino/pull/6283#discussion_r540227074", "createdAt": "2020-12-10T14:47:20Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/block/LongArrayBlockEncoding.java", "diffHunk": "@@ -63,25 +64,47 @@ public Block readBlock(BlockEncodingSerde blockEncodingSerde, SliceInput sliceIn\n     {\n         int positionCount = sliceInput.readInt();\n \n-        boolean[] valueIsNull = decodeNullBits(sliceInput, positionCount).orElse(null);\n-\n+        byte[] valueIsNullPacked = retrieveNullBits(sliceInput, positionCount);\n         long[] values = new long[positionCount];\n-        if (valueIsNull == null) {\n+\n+        if (valueIsNullPacked == null) {\n             sliceInput.readBytes(Slices.wrappedLongArray(values));\n+            return new LongArrayBlock(0, positionCount, null, values);\n         }\n         else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjMwMDA0OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/block/EncoderUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDo0ODowOVrOIDM4qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDo0ODowOVrOIDM4qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIyNzc1Mg==", "bodyText": "this should not return optional", "url": "https://github.com/trinodb/trino/pull/6283#discussion_r540227752", "createdAt": "2020-12-10T14:48:09Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/block/EncoderUtil.java", "diffHunk": "@@ -74,17 +76,31 @@ public static void encodeNullsAsBits(SliceOutput sliceOutput, Block block)\n      */\n     public static Optional<boolean[]> decodeNullBits(SliceInput sliceInput, int positionCount)\n     {\n-        if (!sliceInput.readBoolean()) {\n+        @Nullable\n+        byte[] packedIsNull = retrieveNullBits(sliceInput, positionCount);\n+        if (packedIsNull == null) {\n             return Optional.empty();\n         }\n-        byte[] packedIsNull;\n+\n+        return decodeNullBits(packedIsNull, positionCount);\n+    }\n+\n+    @Nullable\n+    public static byte[] retrieveNullBits(SliceInput sliceInput, int positionCount)\n+    {\n+        if (!sliceInput.readBoolean()) {\n+            return null;\n+        }\n         try {\n-            packedIsNull = sliceInput.readNBytes(((positionCount & ~0b111) + 1) / 8);\n+            return sliceInput.readNBytes((positionCount + 7) / 8);\n         }\n         catch (IOException e) {\n             throw new UncheckedIOException(e);\n         }\n+    }\n \n+    public static Optional<boolean[]> decodeNullBits(byte[] packedIsNull, int positionCount)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjMxMjY4OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/block/LongArrayBlockEncoding.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDo1MDozM1rOIDNAgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDo1MDozM1rOIDNAgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIyOTc2MA==", "bodyText": "use similar (positionCount & ~0b111) - 8 as in loop above", "url": "https://github.com/trinodb/trino/pull/6283#discussion_r540229760", "createdAt": "2020-12-10T14:50:33Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/block/LongArrayBlockEncoding.java", "diffHunk": "@@ -63,25 +64,47 @@ public Block readBlock(BlockEncodingSerde blockEncodingSerde, SliceInput sliceIn\n     {\n         int positionCount = sliceInput.readInt();\n \n-        boolean[] valueIsNull = decodeNullBits(sliceInput, positionCount).orElse(null);\n-\n+        byte[] valueIsNullPacked = retrieveNullBits(sliceInput, positionCount);\n         long[] values = new long[positionCount];\n-        if (valueIsNull == null) {\n+\n+        if (valueIsNullPacked == null) {\n             sliceInput.readBytes(Slices.wrappedLongArray(values));\n+            return new LongArrayBlock(0, positionCount, null, values);\n         }\n         else {\n+            boolean[] valueIsNull = decodeNullBits(valueIsNullPacked, positionCount).orElseThrow();\n+\n             int nonNullPositionCount = sliceInput.readInt();\n             sliceInput.readBytes(Slices.wrappedLongArray(values, 0, nonNullPositionCount));\n             int position = nonNullPositionCount - 1;\n-            for (int i = positionCount - 1; i >= 0 && position >= 0; i--) {\n+\n+            // Handle Last (positionCount % 8) values\n+            for (int i = positionCount - 1; i >= (positionCount & ~0b111) && position >= 0; i--) {\n                 values[i] = values[position];\n                 if (!valueIsNull[i]) {\n                     position--;\n                 }\n             }\n-        }\n \n-        return new LongArrayBlock(0, positionCount, valueIsNull, values);\n+            // Handle the remaining positions.\n+            for (int i = (positionCount >>> 3) - 1; i >= 0 && position >= 0; i--) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjMxNjEzOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/block/LongArrayBlockEncoding.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDo1MToxM1rOIDNCig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDo1MToxM1rOIDNCig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIzMDI4Mg==", "bodyText": "static import arraycopy", "url": "https://github.com/trinodb/trino/pull/6283#discussion_r540230282", "createdAt": "2020-12-10T14:51:13Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/block/LongArrayBlockEncoding.java", "diffHunk": "@@ -63,25 +64,47 @@ public Block readBlock(BlockEncodingSerde blockEncodingSerde, SliceInput sliceIn\n     {\n         int positionCount = sliceInput.readInt();\n \n-        boolean[] valueIsNull = decodeNullBits(sliceInput, positionCount).orElse(null);\n-\n+        byte[] valueIsNullPacked = retrieveNullBits(sliceInput, positionCount);\n         long[] values = new long[positionCount];\n-        if (valueIsNull == null) {\n+\n+        if (valueIsNullPacked == null) {\n             sliceInput.readBytes(Slices.wrappedLongArray(values));\n+            return new LongArrayBlock(0, positionCount, null, values);\n         }\n         else {\n+            boolean[] valueIsNull = decodeNullBits(valueIsNullPacked, positionCount).orElseThrow();\n+\n             int nonNullPositionCount = sliceInput.readInt();\n             sliceInput.readBytes(Slices.wrappedLongArray(values, 0, nonNullPositionCount));\n             int position = nonNullPositionCount - 1;\n-            for (int i = positionCount - 1; i >= 0 && position >= 0; i--) {\n+\n+            // Handle Last (positionCount % 8) values\n+            for (int i = positionCount - 1; i >= (positionCount & ~0b111) && position >= 0; i--) {\n                 values[i] = values[position];\n                 if (!valueIsNull[i]) {\n                     position--;\n                 }\n             }\n-        }\n \n-        return new LongArrayBlock(0, positionCount, valueIsNull, values);\n+            // Handle the remaining positions.\n+            for (int i = (positionCount >>> 3) - 1; i >= 0 && position >= 0; i--) {\n+                byte packed = valueIsNullPacked[i];\n+                if (packed == 0) { // Only values\n+                    System.arraycopy(values, position - 7, values, i * 8, 8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjMyMzM3OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/test/java/io/prestosql/spi/block/BaseBlockEncodingTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDo1MjozMlrOIDNHAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwOToxOTo1NFrOIDv-yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIzMTQyNg==", "bodyText": "static import these", "url": "https://github.com/trinodb/trino/pull/6283#discussion_r540231426", "createdAt": "2020-12-10T14:52:32Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/test/java/io/prestosql/spi/block/BaseBlockEncodingTest.java", "diffHunk": "@@ -61,10 +62,38 @@ public void testNullAtTheBeginningAndEnd()\n         roundTrip(null, null, randomValue(random), null, randomValue(random), null, null);\n     }\n \n+    @Test\n+    public void testBlocksOf8()\n+    {\n+        Random random = getRandom();\n+\n+        Object[] values = Stream.of(\n+                BlockFill.MIXED,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgwMjc2Mg==", "bodyText": "For some reason it is not possible. Static imports don't work within the same class.", "url": "https://github.com/trinodb/trino/pull/6283#discussion_r540802762", "createdAt": "2020-12-11T09:19:54Z", "author": {"login": "skrzypo987"}, "path": "presto-spi/src/test/java/io/prestosql/spi/block/BaseBlockEncodingTest.java", "diffHunk": "@@ -61,10 +62,38 @@ public void testNullAtTheBeginningAndEnd()\n         roundTrip(null, null, randomValue(random), null, randomValue(random), null, null);\n     }\n \n+    @Test\n+    public void testBlocksOf8()\n+    {\n+        Random random = getRandom();\n+\n+        Object[] values = Stream.of(\n+                BlockFill.MIXED,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIzMTQyNg=="}, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjM0MTYyOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/block/LongArrayBlockEncoding.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDo1NTo1MlrOIDNSIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDo1NTo1MlrOIDNSIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIzNDI3NQ==", "bodyText": "use i-=8", "url": "https://github.com/trinodb/trino/pull/6283#discussion_r540234275", "createdAt": "2020-12-10T14:55:52Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/block/LongArrayBlockEncoding.java", "diffHunk": "@@ -63,25 +64,47 @@ public Block readBlock(BlockEncodingSerde blockEncodingSerde, SliceInput sliceIn\n     {\n         int positionCount = sliceInput.readInt();\n \n-        boolean[] valueIsNull = decodeNullBits(sliceInput, positionCount).orElse(null);\n-\n+        byte[] valueIsNullPacked = retrieveNullBits(sliceInput, positionCount);\n         long[] values = new long[positionCount];\n-        if (valueIsNull == null) {\n+\n+        if (valueIsNullPacked == null) {\n             sliceInput.readBytes(Slices.wrappedLongArray(values));\n+            return new LongArrayBlock(0, positionCount, null, values);\n         }\n         else {\n+            boolean[] valueIsNull = decodeNullBits(valueIsNullPacked, positionCount).orElseThrow();\n+\n             int nonNullPositionCount = sliceInput.readInt();\n             sliceInput.readBytes(Slices.wrappedLongArray(values, 0, nonNullPositionCount));\n             int position = nonNullPositionCount - 1;\n-            for (int i = positionCount - 1; i >= 0 && position >= 0; i--) {\n+\n+            // Handle Last (positionCount % 8) values\n+            for (int i = positionCount - 1; i >= (positionCount & ~0b111) && position >= 0; i--) {\n                 values[i] = values[position];\n                 if (!valueIsNull[i]) {\n                     position--;\n                 }\n             }\n-        }\n \n-        return new LongArrayBlock(0, positionCount, valueIsNull, values);\n+            // Handle the remaining positions.\n+            for (int i = (positionCount >>> 3) - 1; i >= 0 && position >= 0; i--) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjk1OTc4OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/block/EncoderUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMDozMTo0NVrOIFJ9gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMDozMTo0NVrOIFJ9gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI3Njk5Mg==", "bodyText": "use\nreturn Optional.ofNullable(retrieveNullBits(sliceInput, positionCount))\n  .map(packedIsNull -> decodeNullBits(packedIsNull, positionCount))", "url": "https://github.com/trinodb/trino/pull/6283#discussion_r542276992", "createdAt": "2020-12-14T10:31:45Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/block/EncoderUtil.java", "diffHunk": "@@ -74,17 +76,17 @@ public static void encodeNullsAsBits(SliceOutput sliceOutput, Block block)\n      */\n     public static Optional<boolean[]> decodeNullBits(SliceInput sliceInput, int positionCount)\n     {\n-        if (!sliceInput.readBoolean()) {\n+        @Nullable\n+        byte[] packedIsNull = retrieveNullBits(sliceInput, positionCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjk2MzQ5OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/test/java/io/prestosql/spi/block/BaseBlockEncodingTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMDozMjozNlrOIFJ_mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMDozMjozNlrOIFJ_mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI3NzUzMA==", "bodyText": "inline values", "url": "https://github.com/trinodb/trino/pull/6283#discussion_r542277530", "createdAt": "2020-12-14T10:32:36Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/test/java/io/prestosql/spi/block/BaseBlockEncodingTest.java", "diffHunk": "@@ -61,10 +62,38 @@ public void testNullAtTheBeginningAndEnd()\n         roundTrip(null, null, randomValue(random), null, randomValue(random), null, null);\n     }\n \n+    @Test\n+    public void testBlocksOf8()\n+    {\n+        Random random = getRandom();\n+\n+        Object[] values = Stream.of(\n+                BlockFill.MIXED,\n+                BlockFill.ONLY_NULLS,\n+                BlockFill.MIXED,\n+                BlockFill.ONLY_VALUES,\n+                BlockFill.MIXED,\n+                BlockFill.ONLY_NULLS,\n+                BlockFill.ONLY_VALUES,\n+                BlockFill.MIXED)\n+                .map(fill -> getObjects(8, fill, random))\n+                .flatMap(Arrays::stream)\n+                .toArray();\n+\n+        roundTrip(values);\n+    }\n+\n     @Test(dataProvider = \"testRandomDataDataProvider\")\n     public void testRandomData(int size, BlockFill fill)\n     {\n         Random random = getRandom();\n+        Object[] values = getObjects(size, fill, random);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNzAyMTMzOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/block/LongArrayBlockEncoding.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMDo0NjowMFrOIFKhKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOTo1Mjo1MlrOIGCQjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI4NjEyMQ==", "bodyText": "rewind position -= 8 so that both i and position always point at start of block", "url": "https://github.com/trinodb/trino/pull/6283#discussion_r542286121", "createdAt": "2020-12-14T10:46:00Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/block/LongArrayBlockEncoding.java", "diffHunk": "@@ -63,24 +65,44 @@ public Block readBlock(BlockEncodingSerde blockEncodingSerde, SliceInput sliceIn\n     {\n         int positionCount = sliceInput.readInt();\n \n-        boolean[] valueIsNull = decodeNullBits(sliceInput, positionCount).orElse(null);\n-\n+        byte[] valueIsNullPacked = retrieveNullBits(sliceInput, positionCount);\n         long[] values = new long[positionCount];\n-        if (valueIsNull == null) {\n+\n+        if (valueIsNullPacked == null) {\n             sliceInput.readBytes(Slices.wrappedLongArray(values));\n+            return new LongArrayBlock(0, positionCount, null, values);\n         }\n-        else {\n-            int nonNullPositionCount = sliceInput.readInt();\n-            sliceInput.readBytes(Slices.wrappedLongArray(values, 0, nonNullPositionCount));\n-            int position = nonNullPositionCount - 1;\n-            for (int i = positionCount - 1; i >= 0 && position >= 0; i--) {\n-                values[i] = values[position];\n-                if (!valueIsNull[i]) {\n-                    position--;\n-                }\n+        boolean[] valueIsNull = decodeNullBits(valueIsNullPacked, positionCount);\n+\n+        int nonNullPositionCount = sliceInput.readInt();\n+        sliceInput.readBytes(Slices.wrappedLongArray(values, 0, nonNullPositionCount));\n+        int position = nonNullPositionCount - 1;\n+\n+        // Handle Last (positionCount % 8) values\n+        for (int i = positionCount - 1; i >= (positionCount & ~0b111) && position >= 0; i--) {\n+            values[i] = values[position];\n+            if (!valueIsNull[i]) {\n+                position--;\n             }\n         }\n \n+        // Handle the remaining positions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE5OTM3NA==", "bodyText": "I don't think this is such a good idea. While i is always decremented by 8, position always points to the exact index and is being decremented either by 8 or by 1.", "url": "https://github.com/trinodb/trino/pull/6283#discussion_r543199374", "createdAt": "2020-12-15T09:52:52Z", "author": {"login": "skrzypo987"}, "path": "presto-spi/src/main/java/io/prestosql/spi/block/LongArrayBlockEncoding.java", "diffHunk": "@@ -63,24 +65,44 @@ public Block readBlock(BlockEncodingSerde blockEncodingSerde, SliceInput sliceIn\n     {\n         int positionCount = sliceInput.readInt();\n \n-        boolean[] valueIsNull = decodeNullBits(sliceInput, positionCount).orElse(null);\n-\n+        byte[] valueIsNullPacked = retrieveNullBits(sliceInput, positionCount);\n         long[] values = new long[positionCount];\n-        if (valueIsNull == null) {\n+\n+        if (valueIsNullPacked == null) {\n             sliceInput.readBytes(Slices.wrappedLongArray(values));\n+            return new LongArrayBlock(0, positionCount, null, values);\n         }\n-        else {\n-            int nonNullPositionCount = sliceInput.readInt();\n-            sliceInput.readBytes(Slices.wrappedLongArray(values, 0, nonNullPositionCount));\n-            int position = nonNullPositionCount - 1;\n-            for (int i = positionCount - 1; i >= 0 && position >= 0; i--) {\n-                values[i] = values[position];\n-                if (!valueIsNull[i]) {\n-                    position--;\n-                }\n+        boolean[] valueIsNull = decodeNullBits(valueIsNullPacked, positionCount);\n+\n+        int nonNullPositionCount = sliceInput.readInt();\n+        sliceInput.readBytes(Slices.wrappedLongArray(values, 0, nonNullPositionCount));\n+        int position = nonNullPositionCount - 1;\n+\n+        // Handle Last (positionCount % 8) values\n+        for (int i = positionCount - 1; i >= (positionCount & ~0b111) && position >= 0; i--) {\n+            values[i] = values[position];\n+            if (!valueIsNull[i]) {\n+                position--;\n             }\n         }\n \n+        // Handle the remaining positions.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI4NjEyMQ=="}, "originalCommit": null, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNzAzMTg3OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/block/ByteArrayBlockEncoding.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMDo0ODoxNVrOIFKm4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMzo0MjoxOVrOIHF3RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI4NzU4Ng==", "bodyText": "Maybe it's possible to extract this logic for single array code, e.g:\n<T> void unpackValues(boolean[] valueIsNull, T values)\n\nso that we don't have to copy this tricky code for every block", "url": "https://github.com/trinodb/trino/pull/6283#discussion_r542287586", "createdAt": "2020-12-14T10:48:15Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/block/ByteArrayBlockEncoding.java", "diffHunk": "@@ -50,15 +65,56 @@ public Block readBlock(BlockEncodingSerde blockEncodingSerde, SliceInput sliceIn\n     {\n         int positionCount = sliceInput.readInt();\n \n-        boolean[] valueIsNull = decodeNullBits(sliceInput, positionCount).orElse(null);\n-\n+        byte[] valueIsNullPacked = retrieveNullBits(sliceInput, positionCount);\n         byte[] values = new byte[positionCount];\n-        for (int position = 0; position < positionCount; position++) {\n-            if (valueIsNull == null || !valueIsNull[position]) {\n-                values[position] = sliceInput.readByte();\n+\n+        if (valueIsNullPacked == null) {\n+            sliceInput.readBytes(Slices.wrappedBuffer(values));\n+            return new ByteArrayBlock(0, positionCount, null, values);\n+        }\n+        boolean[] valueIsNull = decodeNullBits(valueIsNullPacked, positionCount);\n+\n+        int nonNullPositionCount = sliceInput.readInt();\n+        sliceInput.readBytes(Slices.wrappedBuffer(values, 0, nonNullPositionCount));\n+        int position = nonNullPositionCount - 1;\n+\n+        // Handle Last (positionCount % 8) values\n+        for (int i = positionCount - 1; i >= (positionCount & ~0b111) && position >= 0; i--) {\n+            values[i] = values[position];\n+            if (!valueIsNull[i]) {\n+                position--;\n             }\n         }\n \n+        // Handle the remaining positions.\n+        for (int i = (positionCount & ~0b111) - 8; i >= 0 && position >= 0; i -= 8) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE5OTM1OQ==", "bodyText": "It is not. Either we work with T[] which is an array of objects, not primitives, or with T and provide setters and getters lambdas which are based on objects as well. Both are performance suicides.\nI can move this code to a single class with 5 almost identical methods and write Javadoc about it. WDYT?", "url": "https://github.com/trinodb/trino/pull/6283#discussion_r543199359", "createdAt": "2020-12-15T09:52:51Z", "author": {"login": "skrzypo987"}, "path": "presto-spi/src/main/java/io/prestosql/spi/block/ByteArrayBlockEncoding.java", "diffHunk": "@@ -50,15 +65,56 @@ public Block readBlock(BlockEncodingSerde blockEncodingSerde, SliceInput sliceIn\n     {\n         int positionCount = sliceInput.readInt();\n \n-        boolean[] valueIsNull = decodeNullBits(sliceInput, positionCount).orElse(null);\n-\n+        byte[] valueIsNullPacked = retrieveNullBits(sliceInput, positionCount);\n         byte[] values = new byte[positionCount];\n-        for (int position = 0; position < positionCount; position++) {\n-            if (valueIsNull == null || !valueIsNull[position]) {\n-                values[position] = sliceInput.readByte();\n+\n+        if (valueIsNullPacked == null) {\n+            sliceInput.readBytes(Slices.wrappedBuffer(values));\n+            return new ByteArrayBlock(0, positionCount, null, values);\n+        }\n+        boolean[] valueIsNull = decodeNullBits(valueIsNullPacked, positionCount);\n+\n+        int nonNullPositionCount = sliceInput.readInt();\n+        sliceInput.readBytes(Slices.wrappedBuffer(values, 0, nonNullPositionCount));\n+        int position = nonNullPositionCount - 1;\n+\n+        // Handle Last (positionCount % 8) values\n+        for (int i = positionCount - 1; i >= (positionCount & ~0b111) && position >= 0; i--) {\n+            values[i] = values[position];\n+            if (!valueIsNull[i]) {\n+                position--;\n             }\n         }\n \n+        // Handle the remaining positions.\n+        for (int i = (positionCount & ~0b111) - 8; i >= 0 && position >= 0; i -= 8) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI4NzU4Ng=="}, "originalCommit": null, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMwNzAxMw==", "bodyText": "I can move this code to a single class with 5 almost identical methods and write Javadoc about it. WDYT?\n\nI don't think it matters much. You could do that as as follow-up", "url": "https://github.com/trinodb/trino/pull/6283#discussion_r544307013", "createdAt": "2020-12-16T13:42:19Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/block/ByteArrayBlockEncoding.java", "diffHunk": "@@ -50,15 +65,56 @@ public Block readBlock(BlockEncodingSerde blockEncodingSerde, SliceInput sliceIn\n     {\n         int positionCount = sliceInput.readInt();\n \n-        boolean[] valueIsNull = decodeNullBits(sliceInput, positionCount).orElse(null);\n-\n+        byte[] valueIsNullPacked = retrieveNullBits(sliceInput, positionCount);\n         byte[] values = new byte[positionCount];\n-        for (int position = 0; position < positionCount; position++) {\n-            if (valueIsNull == null || !valueIsNull[position]) {\n-                values[position] = sliceInput.readByte();\n+\n+        if (valueIsNullPacked == null) {\n+            sliceInput.readBytes(Slices.wrappedBuffer(values));\n+            return new ByteArrayBlock(0, positionCount, null, values);\n+        }\n+        boolean[] valueIsNull = decodeNullBits(valueIsNullPacked, positionCount);\n+\n+        int nonNullPositionCount = sliceInput.readInt();\n+        sliceInput.readBytes(Slices.wrappedBuffer(values, 0, nonNullPositionCount));\n+        int position = nonNullPositionCount - 1;\n+\n+        // Handle Last (positionCount % 8) values\n+        for (int i = positionCount - 1; i >= (positionCount & ~0b111) && position >= 0; i--) {\n+            values[i] = values[position];\n+            if (!valueIsNull[i]) {\n+                position--;\n             }\n         }\n \n+        // Handle the remaining positions.\n+        for (int i = (positionCount & ~0b111) - 8; i >= 0 && position >= 0; i -= 8) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI4NzU4Ng=="}, "originalCommit": null, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDQ1ODIzOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/block/Int128ArrayBlockEncoding.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMzo0NjozOVrOIHGDng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMzo1ODoyMFrOIHGkdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMxMDE3NA==", "bodyText": "Why not use similar 8-bits null check as in in other serdes?", "url": "https://github.com/trinodb/trino/pull/6283#discussion_r544310174", "createdAt": "2020-12-16T13:46:39Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/block/Int128ArrayBlockEncoding.java", "diffHunk": "@@ -54,13 +67,33 @@ public Block readBlock(BlockEncodingSerde blockEncodingSerde, SliceInput sliceIn\n         boolean[] valueIsNull = decodeNullBits(sliceInput, positionCount).orElse(null);\n \n         long[] values = new long[positionCount * 2];\n-        for (int position = 0; position < positionCount; position++) {\n-            if (valueIsNull == null || !valueIsNull[position]) {\n-                values[position * 2] = sliceInput.readLong();\n-                values[(position * 2) + 1] = sliceInput.readLong();\n+        if (valueIsNull == null) {\n+            sliceInput.readBytes(Slices.wrappedLongArray(values));\n+        }\n+        else {\n+            int nonNullPositionCount = sliceInput.readInt();\n+            sliceInput.readBytes(Slices.wrappedLongArray(values, 0, nonNullPositionCount * 2));\n+            int position = 2 * (nonNullPositionCount - 1);\n+            for (int i = positionCount - 1; i >= 0 && position >= 0; i--) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76805ea47f22745f5bf7125d359da68eb9610c05"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMxODU4MQ==", "bodyText": "It turns out to be slower. I guess more data means less time spent on null checking and more on actual memory copying.", "url": "https://github.com/trinodb/trino/pull/6283#discussion_r544318581", "createdAt": "2020-12-16T13:58:20Z", "author": {"login": "skrzypo987"}, "path": "presto-spi/src/main/java/io/prestosql/spi/block/Int128ArrayBlockEncoding.java", "diffHunk": "@@ -54,13 +67,33 @@ public Block readBlock(BlockEncodingSerde blockEncodingSerde, SliceInput sliceIn\n         boolean[] valueIsNull = decodeNullBits(sliceInput, positionCount).orElse(null);\n \n         long[] values = new long[positionCount * 2];\n-        for (int position = 0; position < positionCount; position++) {\n-            if (valueIsNull == null || !valueIsNull[position]) {\n-                values[position * 2] = sliceInput.readLong();\n-                values[(position * 2) + 1] = sliceInput.readLong();\n+        if (valueIsNull == null) {\n+            sliceInput.readBytes(Slices.wrappedLongArray(values));\n+        }\n+        else {\n+            int nonNullPositionCount = sliceInput.readInt();\n+            sliceInput.readBytes(Slices.wrappedLongArray(values, 0, nonNullPositionCount * 2));\n+            int position = 2 * (nonNullPositionCount - 1);\n+            for (int i = positionCount - 1; i >= 0 && position >= 0; i--) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMxMDE3NA=="}, "originalCommit": {"oid": "76805ea47f22745f5bf7125d359da68eb9610c05"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4546, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}