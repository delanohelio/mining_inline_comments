{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM3MDcyOTg4", "number": 6310, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjo0MzozMlrOFEEgzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMTowMzowMFrOFEjs8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODEyNTU4OnYy", "diffSide": "RIGHT", "path": "presto-tests/src/test/java/io/prestosql/tests/AbstractTestEngineOnlyQueries.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjo0MzozMlrOIEA5jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMToyNzowMFrOIEO5kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA3OTk1MQ==", "bodyText": "what does it mean that \"X\" matches \"X\" ?", "url": "https://github.com/trinodb/trino/pull/6310#discussion_r541079951", "createdAt": "2020-12-11T16:43:32Z", "author": {"login": "losipiuk"}, "path": "presto-tests/src/test/java/io/prestosql/tests/AbstractTestEngineOnlyQueries.java", "diffHunk": "@@ -109,6 +109,11 @@ public void testTimeLiterals()\n         // TODO https://github.com/prestosql/presto/issues/37\n         // TODO assertQuery(chicago, \"SELECT TIME '3:04:05'\");\n         // TODO assertQuery(kathmandu, \"SELECT TIME '3:04:05'\");\n+\n+        assertThat(query(\"SELECT TIME '01:23:45.123'\")).matches(\"SELECT TIME '01:23:45.123'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA5MTU3NQ==", "bodyText": "it means that the values was succesfully processed by the query runner (which wasn't the cxase before the fix)\nmaybe i should another add a test when the values differ and verify the message", "url": "https://github.com/trinodb/trino/pull/6310#discussion_r541091575", "createdAt": "2020-12-11T17:00:39Z", "author": {"login": "findepi"}, "path": "presto-tests/src/test/java/io/prestosql/tests/AbstractTestEngineOnlyQueries.java", "diffHunk": "@@ -109,6 +109,11 @@ public void testTimeLiterals()\n         // TODO https://github.com/prestosql/presto/issues/37\n         // TODO assertQuery(chicago, \"SELECT TIME '3:04:05'\");\n         // TODO assertQuery(kathmandu, \"SELECT TIME '3:04:05'\");\n+\n+        assertThat(query(\"SELECT TIME '01:23:45.123'\")).matches(\"SELECT TIME '01:23:45.123'\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA3OTk1MQ=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMwOTMzMA==", "bodyText": "added more apparent sense to the code, ptal", "url": "https://github.com/trinodb/trino/pull/6310#discussion_r541309330", "createdAt": "2020-12-11T21:27:00Z", "author": {"login": "findepi"}, "path": "presto-tests/src/test/java/io/prestosql/tests/AbstractTestEngineOnlyQueries.java", "diffHunk": "@@ -109,6 +109,11 @@ public void testTimeLiterals()\n         // TODO https://github.com/prestosql/presto/issues/37\n         // TODO assertQuery(chicago, \"SELECT TIME '3:04:05'\");\n         // TODO assertQuery(kathmandu, \"SELECT TIME '3:04:05'\");\n+\n+        assertThat(query(\"SELECT TIME '01:23:45.123'\")).matches(\"SELECT TIME '01:23:45.123'\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA3OTk1MQ=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTU4MjI3OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/type/SqlTimeWithTimeZone.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMToyNzoyNlrOIEO7AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMTo1NjozN1rOIEQjzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMwOTY5Nw==", "bodyText": "cc @martint", "url": "https://github.com/trinodb/trino/pull/6310#discussion_r541309697", "createdAt": "2020-12-11T21:27:26Z", "author": {"login": "findepi"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/SqlTimeWithTimeZone.java", "diffHunk": "@@ -67,7 +67,7 @@ public boolean equals(Object o)\n         }\n \n         SqlTimeWithTimeZone other = (SqlTimeWithTimeZone) o;\n-        return precision == other.precision && normalizePicos(picos, offsetMinutes) == normalizePicos(other.picos, offsetMinutes);\n+        return precision == other.precision && normalizePicos(picos, offsetMinutes) == normalizePicos(other.picos, other.offsetMinutes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyNDkwNw==", "bodyText": "Good catch!", "url": "https://github.com/trinodb/trino/pull/6310#discussion_r541324907", "createdAt": "2020-12-11T21:43:36Z", "author": {"login": "martint"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/SqlTimeWithTimeZone.java", "diffHunk": "@@ -67,7 +67,7 @@ public boolean equals(Object o)\n         }\n \n         SqlTimeWithTimeZone other = (SqlTimeWithTimeZone) o;\n-        return precision == other.precision && normalizePicos(picos, offsetMinutes) == normalizePicos(other.picos, offsetMinutes);\n+        return precision == other.precision && normalizePicos(picos, offsetMinutes) == normalizePicos(other.picos, other.offsetMinutes);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMwOTY5Nw=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMzNjUyNg==", "bodyText": "Actually i think we should remove the normalize from here and compare both: picos, offsetMinutes by value.\nI think we don't have to carry SQL semantics over to this class.\nAlso, we don't do this in io.prestosql.spi.type.SqlTimestampWithTimeZone#equals either", "url": "https://github.com/trinodb/trino/pull/6310#discussion_r541336526", "createdAt": "2020-12-11T21:56:37Z", "author": {"login": "findepi"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/SqlTimeWithTimeZone.java", "diffHunk": "@@ -67,7 +67,7 @@ public boolean equals(Object o)\n         }\n \n         SqlTimeWithTimeZone other = (SqlTimeWithTimeZone) o;\n-        return precision == other.precision && normalizePicos(picos, offsetMinutes) == normalizePicos(other.picos, offsetMinutes);\n+        return precision == other.precision && normalizePicos(picos, offsetMinutes) == normalizePicos(other.picos, other.offsetMinutes);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMwOTY5Nw=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTcwMDI2OnYy", "diffSide": "RIGHT", "path": "presto-tests/src/test/java/io/prestosql/tests/AbstractTestEngineOnlyQueries.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMTo0ODozMVrOIEQGlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMjo1Nzo1N1rOIETigg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyOTA0NQ==", "bodyText": "Why is this outside the lambda below and as a separate variable?", "url": "https://github.com/trinodb/trino/pull/6310#discussion_r541329045", "createdAt": "2020-12-11T21:48:31Z", "author": {"login": "martint"}, "path": "presto-tests/src/test/java/io/prestosql/tests/AbstractTestEngineOnlyQueries.java", "diffHunk": "@@ -111,6 +113,25 @@ public void testTimeLiterals()\n         // TODO assertQuery(kathmandu, \"SELECT TIME '3:04:05'\");\n     }\n \n+    /**\n+     * Tests query runner with results of vaious precisions, and query assert.\n+     */\n+    @Test\n+    public void testTimeQueryResult()\n+    {\n+        assertThat(query(\"SELECT TIME '01:23:45.123'\")).matches(\"SELECT TIME '01:23:45.123'\");\n+        assertThat(query(\"SELECT TIME '01:23:45.123456'\")).matches(\"SELECT TIME '01:23:45.123456'\");\n+        assertThat(query(\"SELECT TIME '01:23:45.123456789'\")).matches(\"SELECT TIME '01:23:45.123456789'\");\n+        assertThat(query(\"SELECT TIME '01:23:45.123456789012'\")).matches(\"SELECT TIME '01:23:45.123456789012'\");\n+\n+        QueryAssert queryAssert = assertThat(query(\"SELECT TIME '01:23:45.123456789012'\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM4NTM0Ng==", "bodyText": "So that assertThatThrowBy closure is as small as possible.", "url": "https://github.com/trinodb/trino/pull/6310#discussion_r541385346", "createdAt": "2020-12-11T22:57:57Z", "author": {"login": "findepi"}, "path": "presto-tests/src/test/java/io/prestosql/tests/AbstractTestEngineOnlyQueries.java", "diffHunk": "@@ -111,6 +113,25 @@ public void testTimeLiterals()\n         // TODO assertQuery(kathmandu, \"SELECT TIME '3:04:05'\");\n     }\n \n+    /**\n+     * Tests query runner with results of vaious precisions, and query assert.\n+     */\n+    @Test\n+    public void testTimeQueryResult()\n+    {\n+        assertThat(query(\"SELECT TIME '01:23:45.123'\")).matches(\"SELECT TIME '01:23:45.123'\");\n+        assertThat(query(\"SELECT TIME '01:23:45.123456'\")).matches(\"SELECT TIME '01:23:45.123456'\");\n+        assertThat(query(\"SELECT TIME '01:23:45.123456789'\")).matches(\"SELECT TIME '01:23:45.123456789'\");\n+        assertThat(query(\"SELECT TIME '01:23:45.123456789012'\")).matches(\"SELECT TIME '01:23:45.123456789012'\");\n+\n+        QueryAssert queryAssert = assertThat(query(\"SELECT TIME '01:23:45.123456789012'\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyOTA0NQ=="}, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzIzNTcwOnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/TestingPrestoClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMTowMzowMFrOIEtvEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMToyMTo0MlrOIE5j0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgxNDU0Ng==", "bodyText": "Typo in commit message: :\"picoseond\"", "url": "https://github.com/trinodb/trino/pull/6310#discussion_r541814546", "createdAt": "2020-12-13T01:03:00Z", "author": {"login": "martint"}, "path": "presto-testing/src/main/java/io/prestosql/testing/TestingPrestoClient.java", "diffHunk": "@@ -79,7 +79,13 @@\n public class TestingPrestoClient", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwODI3Mg==", "bodyText": "thanks, fixed", "url": "https://github.com/trinodb/trino/pull/6310#discussion_r542008272", "createdAt": "2020-12-13T21:21:42Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/TestingPrestoClient.java", "diffHunk": "@@ -79,7 +79,13 @@\n public class TestingPrestoClient", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgxNDU0Ng=="}, "originalCommit": null, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4577, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}