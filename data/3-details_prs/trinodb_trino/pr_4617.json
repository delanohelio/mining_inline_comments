{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MTk1Mjcz", "number": 4617, "title": "Add data_block_encoding parameter to Phoenix connector.", "bodyText": "DATA_BLOCK_ENCODING is a common parameter that Phoenix users might want to set (along with Compression), so we should add this.\n(There are in fact a bunch of more HBase column family level options that Phoenix also supports, but most of them are not common, and should be probably set directly within Phoenix)", "createdAt": "2020-07-29T05:04:10Z", "url": "https://github.com/trinodb/trino/pull/4617", "merged": true, "mergeCommit": {"oid": "41b796ac3976da23781e20ce21bb887125a259f1"}, "closed": true, "closedAt": "2020-08-07T09:57:08Z", "author": {"login": "lhofhansl"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5lJqAAFqTQ1NzIyNzc5MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7ZucPAH2gAyNDU4MTk1MjczOjE1NWIwMmY5OTk3Y2JhZTEyNzA0YTM3N2NkZTJkMmE1ODU0MzFjZmM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MjI3Nzkx", "url": "https://github.com/trinodb/trino/pull/4617#pullrequestreview-457227791", "createdAt": "2020-07-29T06:27:44Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNjoyNzo0NVrOG4qUww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNjozNTozMVrOG4qgrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2Njg4Mw==", "bodyText": "Can we use Optional.ofNullable", "url": "https://github.com/trinodb/trino/pull/4617#discussion_r462066883", "createdAt": "2020-07-29T06:27:45Z", "author": {"login": "Praveen2112"}, "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixTableProperties.java", "diffHunk": "@@ -232,6 +238,17 @@ public PhoenixTableProperties()\n         return Optional.of(value);\n     }\n \n+    public static Optional<String> getDataBlockEncoding(Map<String, Object> tableProperties)\n+    {\n+        requireNonNull(tableProperties);\n+\n+        String value = (String) tableProperties.get(DATA_BLOCK_ENCODING);\n+        if (value == null) {\n+            return Optional.empty();\n+        }\n+        return Optional.of(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2OTkzNA==", "bodyText": "Can we have a enum property for this like we define STORAGE_FORMAT_PROPERTY for HiveTableProperties", "url": "https://github.com/trinodb/trino/pull/4617#discussion_r462069934", "createdAt": "2020-07-29T06:35:31Z", "author": {"login": "Praveen2112"}, "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixTableProperties.java", "diffHunk": "@@ -109,6 +110,11 @@ public PhoenixTableProperties()\n                         TTL,\n                         \"Number of seconds for cell TTL.  HBase will automatically delete rows once the expiration time is reached.\",\n                         null,\n+                        false),\n+                stringProperty(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NzczMDA0", "url": "https://github.com/trinodb/trino/pull/4617#pullrequestreview-458773004", "createdAt": "2020-07-30T21:35:16Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMTozNToxNlrOG50qKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMTozNToxNlrOG50qKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI4NDc3Ng==", "bodyText": "Can we capture them in a separate commit ?", "url": "https://github.com/trinodb/trino/pull/4617#discussion_r463284776", "createdAt": "2020-07-30T21:35:16Z", "author": {"login": "Praveen2112"}, "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixTableProperties.java", "diffHunk": "@@ -160,86 +158,70 @@ public PhoenixTableProperties()\n         requireNonNull(tableProperties);\n \n         Boolean value = (Boolean) tableProperties.get(DISABLE_WAL);\n-        if (value == null) {\n-            return Optional.empty();\n-        }\n-        return Optional.of(value);\n+        return Optional.ofNullable(value);\n     }\n \n     public static Optional<Boolean> getImmutableRows(Map<String, Object> tableProperties)\n     {\n         requireNonNull(tableProperties);\n \n         Boolean value = (Boolean) tableProperties.get(IMMUTABLE_ROWS);\n-        if (value == null) {\n-            return Optional.empty();\n-        }\n-        return Optional.of(value);\n+        return Optional.ofNullable(value);\n     }\n \n     public static Optional<String> getDefaultColumnFamily(Map<String, Object> tableProperties)\n     {\n         requireNonNull(tableProperties);\n \n         String value = (String) tableProperties.get(DEFAULT_COLUMN_FAMILY);\n-        if (value == null) {\n-            return Optional.empty();\n-        }\n-        return Optional.of(value);\n+        return Optional.ofNullable(value);\n     }\n \n     public static Optional<String> getBloomfilter(Map<String, Object> tableProperties)\n     {\n         requireNonNull(tableProperties);\n \n         String value = (String) tableProperties.get(BLOOMFILTER);\n-        if (value == null) {\n-            return Optional.empty();\n-        }\n-        return Optional.of(value);\n+        return Optional.ofNullable(value);\n     }\n \n     public static Optional<Integer> getVersions(Map<String, Object> tableProperties)\n     {\n         requireNonNull(tableProperties);\n \n         Integer value = (Integer) tableProperties.get(VERSIONS);\n-        if (value == null) {\n-            return Optional.empty();\n-        }\n-        return Optional.of(value);\n+        return Optional.ofNullable(value);\n     }\n \n     public static Optional<Integer> getMinVersions(Map<String, Object> tableProperties)\n     {\n         requireNonNull(tableProperties);\n \n         Integer value = (Integer) tableProperties.get(MIN_VERSIONS);\n-        if (value == null) {\n-            return Optional.empty();\n-        }\n-        return Optional.of(value);\n+        return Optional.ofNullable(value);\n     }\n \n     public static Optional<String> getCompression(Map<String, Object> tableProperties)\n     {\n         requireNonNull(tableProperties);\n \n         String value = (String) tableProperties.get(COMPRESSION);\n-        if (value == null) {\n-            return Optional.empty();\n-        }\n-        return Optional.of(value);\n+        return Optional.ofNullable(value);\n+    }\n+\n+    public static Optional<String> getDataBlockEncoding(Map<String, Object> tableProperties)\n+    {\n+        requireNonNull(tableProperties);\n+\n+        String value = (String) tableProperties.get(DATA_BLOCK_ENCODING);\n+        return Optional.ofNullable(value);\n     }\n \n     public static Optional<Integer> getTimeToLive(Map<String, Object> tableProperties)\n     {\n         requireNonNull(tableProperties);\n \n         Integer value = (Integer) tableProperties.get(TTL);\n-        if (value == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 142}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5OTIyODM4", "url": "https://github.com/trinodb/trino/pull/4617#pullrequestreview-459922838", "createdAt": "2020-08-03T10:34:50Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDozNDo1MFrOG60kAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDozNjozNVrOG60nBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzMTc3OQ==", "bodyText": "Did we miss None and PREFIX_TREE encoding technique ?", "url": "https://github.com/trinodb/trino/pull/4617#discussion_r464331779", "createdAt": "2020-08-03T10:34:50Z", "author": {"login": "Praveen2112"}, "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixTableProperties.java", "diffHunk": "@@ -109,6 +110,11 @@ public PhoenixTableProperties()\n                         TTL,\n                         \"Number of seconds for cell TTL.  HBase will automatically delete rows once the expiration time is reached.\",\n                         null,\n+                        false),\n+                stringProperty(\n+                        DATA_BLOCK_ENCODING,\n+                        \"The block encoding algorithm to use for Cells in HBase blocks. Options are: PREFIX, DIFF, FAST_DIFF, ROW_INDEX_V1, and others.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzMjU0OA==", "bodyText": "Can we add the same in the doc too", "url": "https://github.com/trinodb/trino/pull/4617#discussion_r464332548", "createdAt": "2020-08-03T10:36:35Z", "author": {"login": "Praveen2112"}, "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixTableProperties.java", "diffHunk": "@@ -109,6 +110,11 @@ public PhoenixTableProperties()\n                         TTL,\n                         \"Number of seconds for cell TTL.  HBase will automatically delete rows once the expiration time is reached.\",\n                         null,\n+                        false),\n+                stringProperty(\n+                        DATA_BLOCK_ENCODING,\n+                        \"The block encoding algorithm to use for Cells in HBase blocks. Options are: PREFIX, DIFF, FAST_DIFF, ROW_INDEX_V1, and others.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzMTc3OQ=="}, "originalCommit": null, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "155b02f9997cbae12704a377cde2d2a585431cfc", "author": {"user": {"login": "lhofhansl", "name": null}}, "url": "https://github.com/trinodb/trino/commit/155b02f9997cbae12704a377cde2d2a585431cfc", "committedDate": "2020-08-03T22:25:58Z", "message": "Add data_block_encoding parameter to Phoenix connector."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4514, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}