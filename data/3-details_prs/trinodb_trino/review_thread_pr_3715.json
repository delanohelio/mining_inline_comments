{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MjIxMDU4", "number": 3715, "reviewThreads": {"totalCount": 94, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTozNjoyMlrOEDy1jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMVQxMzozMToxNFrOFf2Asg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDE0MDkyOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduTableHandle.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTozNjoyMlrOGhBQjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTozNjoyMlrOGhBQjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI3NjgxNQ==", "bodyText": "Can we make it as OptionalInt so tables which doesn't have bucketing can pass it as empty ?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r437276815", "createdAt": "2020-06-09T09:36:22Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduTableHandle.java", "diffHunk": "@@ -35,29 +35,33 @@\n     private final TupleDomain<ColumnHandle> constraint;\n     private final Optional<List<ColumnHandle>> desiredColumns;\n     private final boolean isDeleteHandle;\n+    private final int bucketCount;\n \n     @JsonCreator\n     public KuduTableHandle(\n             @JsonProperty(\"schemaTableName\") SchemaTableName schemaTableName,\n             @JsonProperty(\"constraint\") TupleDomain<ColumnHandle> constraint,\n             @JsonProperty(\"desiredColumns\") Optional<List<ColumnHandle>> desiredColumns,\n-            @JsonProperty(\"isDeleteHandle\") boolean isDeleteHandle)\n+            @JsonProperty(\"isDeleteHandle\") boolean isDeleteHandle,\n+            @JsonProperty(\"bucketCount\") int bucketCount)\n     {\n-        this(schemaTableName, null, constraint, desiredColumns, isDeleteHandle);\n+        this(schemaTableName, null, constraint, desiredColumns, isDeleteHandle, bucketCount);\n     }\n \n     public KuduTableHandle(\n             SchemaTableName schemaTableName,\n             KuduTable table,\n             TupleDomain<ColumnHandle> constraint,\n             Optional<List<ColumnHandle>> desiredColumns,\n-            boolean isDeleteHandle)\n+            boolean isDeleteHandle,\n+            int bucketCount)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDE0MzczOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduTableHandle.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTozNzowMFrOGhBSKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTozNzowMFrOGhBSKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI3NzIyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.bucketCount = bucketCount;\n          \n          \n            \n                    this.bucketCount = requireNonNull(bucketCount, \"bucketCount is empty\");", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r437277226", "createdAt": "2020-06-09T09:37:00Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduTableHandle.java", "diffHunk": "@@ -35,29 +35,33 @@\n     private final TupleDomain<ColumnHandle> constraint;\n     private final Optional<List<ColumnHandle>> desiredColumns;\n     private final boolean isDeleteHandle;\n+    private final int bucketCount;\n \n     @JsonCreator\n     public KuduTableHandle(\n             @JsonProperty(\"schemaTableName\") SchemaTableName schemaTableName,\n             @JsonProperty(\"constraint\") TupleDomain<ColumnHandle> constraint,\n             @JsonProperty(\"desiredColumns\") Optional<List<ColumnHandle>> desiredColumns,\n-            @JsonProperty(\"isDeleteHandle\") boolean isDeleteHandle)\n+            @JsonProperty(\"isDeleteHandle\") boolean isDeleteHandle,\n+            @JsonProperty(\"bucketCount\") int bucketCount)\n     {\n-        this(schemaTableName, null, constraint, desiredColumns, isDeleteHandle);\n+        this(schemaTableName, null, constraint, desiredColumns, isDeleteHandle, bucketCount);\n     }\n \n     public KuduTableHandle(\n             SchemaTableName schemaTableName,\n             KuduTable table,\n             TupleDomain<ColumnHandle> constraint,\n             Optional<List<ColumnHandle>> desiredColumns,\n-            boolean isDeleteHandle)\n+            boolean isDeleteHandle,\n+            int bucketCount)\n     {\n         this.schemaTableName = requireNonNull(schemaTableName, \"schemaTableName is null\");\n         this.table = table;\n         this.constraint = requireNonNull(constraint, \"constraint is null\");\n         this.desiredColumns = requireNonNull(desiredColumns, \"desiredColumns is null\");\n         this.isDeleteHandle = isDeleteHandle;\n+        this.bucketCount = bucketCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDI1MzI4OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduSplitSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDowNzoxNFrOGhCX3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDowNzoxNFrOGhCX3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5NTA2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.splitMap = new ConcurrentHashMap<>();\n          \n          \n            \n                    splits.forEach(split ->\n          \n          \n            \n                            splitMap.put(split.getBucketNumber(), split));\n          \n          \n            \n                    this.splitMap = requireNonNull(splits, \"splits are null\").stream()\n          \n          \n            \n                            .collect(toImmutableMap(KuduSplit::getBucketNumber, identity()));", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r437295068", "createdAt": "2020-06-09T10:07:14Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduSplitSource.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ConnectorPartitionHandle;\n+import io.prestosql.spi.connector.ConnectorSplitSource;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+\n+public class KuduSplitSource\n+        implements ConnectorSplitSource\n+{\n+    private final Map<Integer, KuduSplit> splitMap;\n+\n+    KuduSplitSource(List<KuduSplit> splits)\n+    {\n+        this.splitMap = new ConcurrentHashMap<>();\n+        splits.forEach(split ->\n+                splitMap.put(split.getBucketNumber(), split));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDI1NzAyOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduSplitSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDowODoxOVrOGhCaZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMzo0NTo0MlrOGhj1ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5NTcxNw==", "bodyText": "Instead of removing the bucket, can we have a counter which gets incremented so that it would be helpful in isFInished ?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r437295717", "createdAt": "2020-06-09T10:08:19Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduSplitSource.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ConnectorPartitionHandle;\n+import io.prestosql.spi.connector.ConnectorSplitSource;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+\n+public class KuduSplitSource\n+        implements ConnectorSplitSource\n+{\n+    private final Map<Integer, KuduSplit> splitMap;\n+\n+    KuduSplitSource(List<KuduSplit> splits)\n+    {\n+        this.splitMap = new ConcurrentHashMap<>();\n+        splits.forEach(split ->\n+                splitMap.put(split.getBucketNumber(), split));\n+    }\n+\n+    @Override\n+    public CompletableFuture<ConnectorSplitBatch> getNextBatch(ConnectorPartitionHandle partitionHandle, int maxSize)\n+    {\n+        KuduPartitionHandle kuduPartitionHandle = (KuduPartitionHandle) partitionHandle;\n+        KuduSplit kuduSplit = splitMap.remove(kuduPartitionHandle.getBucket());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg0MzMwMQ==", "bodyText": "Yes, I agree with you!  :)", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r437843301", "createdAt": "2020-06-10T03:45:42Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduSplitSource.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ConnectorPartitionHandle;\n+import io.prestosql.spi.connector.ConnectorSplitSource;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+\n+public class KuduSplitSource\n+        implements ConnectorSplitSource\n+{\n+    private final Map<Integer, KuduSplit> splitMap;\n+\n+    KuduSplitSource(List<KuduSplit> splits)\n+    {\n+        this.splitMap = new ConcurrentHashMap<>();\n+        splits.forEach(split ->\n+                splitMap.put(split.getBucketNumber(), split));\n+    }\n+\n+    @Override\n+    public CompletableFuture<ConnectorSplitBatch> getNextBatch(ConnectorPartitionHandle partitionHandle, int maxSize)\n+    {\n+        KuduPartitionHandle kuduPartitionHandle = (KuduPartitionHandle) partitionHandle;\n+        KuduSplit kuduSplit = splitMap.remove(kuduPartitionHandle.getBucket());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5NTcxNw=="}, "originalCommit": null, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDI4MTEzOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduSplit.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDoxNTozOVrOGhCp9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDoxNTozOVrOGhCp9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5OTcwMA==", "bodyText": "Can you please correct the indentation ?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r437299700", "createdAt": "2020-06-09T10:15:39Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduSplit.java", "diffHunk": "@@ -29,15 +29,18 @@\n     private final KuduTableHandle tableHandle;\n     private final int primaryKeyColumnCount;\n     private final byte[] serializedScanToken;\n+    private final int bucketNumber;\n \n     @JsonCreator\n     public KuduSplit(@JsonProperty(\"tableHandle\") KuduTableHandle tableHandle,\n             @JsonProperty(\"primaryKeyColumnCount\") int primaryKeyColumnCount,\n-            @JsonProperty(\"serializedScanToken\") byte[] serializedScanToken)\n+            @JsonProperty(\"serializedScanToken\") byte[] serializedScanToken,\n+                     @JsonProperty(\"bucketNumber\") int bucketNumber)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDI4MjY0OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduSplit.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDoxNjowM1rOGhCq9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMzo0MTowOVrOGhjxXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5OTk1Ng==", "bodyText": "check if the number is not negative ?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r437299956", "createdAt": "2020-06-09T10:16:03Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduSplit.java", "diffHunk": "@@ -29,15 +29,18 @@\n     private final KuduTableHandle tableHandle;\n     private final int primaryKeyColumnCount;\n     private final byte[] serializedScanToken;\n+    private final int bucketNumber;\n \n     @JsonCreator\n     public KuduSplit(@JsonProperty(\"tableHandle\") KuduTableHandle tableHandle,\n             @JsonProperty(\"primaryKeyColumnCount\") int primaryKeyColumnCount,\n-            @JsonProperty(\"serializedScanToken\") byte[] serializedScanToken)\n+            @JsonProperty(\"serializedScanToken\") byte[] serializedScanToken,\n+                     @JsonProperty(\"bucketNumber\") int bucketNumber)\n     {\n         this.tableHandle = requireNonNull(tableHandle, \"tableHandle is null\");\n         this.primaryKeyColumnCount = primaryKeyColumnCount;\n         this.serializedScanToken = requireNonNull(serializedScanToken, \"serializedScanToken is null\");\n+        this.bucketNumber = bucketNumber;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg0MjI3MQ==", "bodyText": "I agree with you! The bucketNumber is created in a fori loop, so It will not be negative right now, but if some day people create a KuduSplit using this constructor, it will be necessary to do the check!", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r437842271", "createdAt": "2020-06-10T03:41:09Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduSplit.java", "diffHunk": "@@ -29,15 +29,18 @@\n     private final KuduTableHandle tableHandle;\n     private final int primaryKeyColumnCount;\n     private final byte[] serializedScanToken;\n+    private final int bucketNumber;\n \n     @JsonCreator\n     public KuduSplit(@JsonProperty(\"tableHandle\") KuduTableHandle tableHandle,\n             @JsonProperty(\"primaryKeyColumnCount\") int primaryKeyColumnCount,\n-            @JsonProperty(\"serializedScanToken\") byte[] serializedScanToken)\n+            @JsonProperty(\"serializedScanToken\") byte[] serializedScanToken,\n+                     @JsonProperty(\"bucketNumber\") int bucketNumber)\n     {\n         this.tableHandle = requireNonNull(tableHandle, \"tableHandle is null\");\n         this.primaryKeyColumnCount = primaryKeyColumnCount;\n         this.serializedScanToken = requireNonNull(serializedScanToken, \"serializedScanToken is null\");\n+        this.bucketNumber = bucketNumber;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5OTk1Ng=="}, "originalCommit": null, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDI4Mzk5OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduSessionProperties.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDoxNjoyNlrOGhCryw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDoxNjoyNlrOGhCryw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMwMDE3MQ==", "bodyText": "Inline this line", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r437300171", "createdAt": "2020-06-09T10:16:26Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduSessionProperties.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.session.PropertyMetadata;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+\n+import static io.prestosql.spi.session.PropertyMetadata.booleanProperty;\n+\n+public final class KuduSessionProperties\n+{\n+    private static final String KUDU_GROUPED_EXECUTION_ENABLED = \"grouped_execution\";\n+\n+    private final List<PropertyMetadata<?>> sessionProperties;\n+\n+    @Inject\n+    public KuduSessionProperties(\n+            KuduClientConfig kuduConfig)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDI4Nzg5OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduPartitioningHandle.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDoxNzo0NVrOGhCuWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDoxNzo0NVrOGhCuWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMwMDgyNg==", "bodyText": "rnn checks for the the fields", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r437300826", "createdAt": "2020-06-09T10:17:45Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduPartitioningHandle.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.airlift.log.Logger;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.connector.ConnectorPartitioningHandle;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static java.lang.String.format;\n+\n+public class KuduPartitioningHandle\n+        implements ConnectorPartitioningHandle\n+{\n+    private static final Logger log = Logger.get(KuduPartitioningHandle.class);\n+\n+    private final String table;\n+    private final int bucketCount;\n+    private final String schema;\n+    private final List<ColumnHandle> bucketColumnIds;\n+\n+    @JsonCreator\n+    public KuduPartitioningHandle(\n+            @JsonProperty(\"schema\") String schema,\n+            @JsonProperty(\"table\") String table,\n+            @JsonProperty(\"bucketCount\") int bucketCount,\n+            @JsonProperty(\"bucketColumnIds\") List<ColumnHandle> bucketColumnIds)\n+    {\n+        this.schema = schema;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDI5MTIxOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduPartitioningHandle.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDoxODo0NlrOGhCwjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDoxODo0NlrOGhCwjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMwMTM4OQ==", "bodyText": "Why not bucketIds?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r437301389", "createdAt": "2020-06-09T10:18:46Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduPartitioningHandle.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.airlift.log.Logger;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.connector.ConnectorPartitioningHandle;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static java.lang.String.format;\n+\n+public class KuduPartitioningHandle\n+        implements ConnectorPartitioningHandle\n+{\n+    private static final Logger log = Logger.get(KuduPartitioningHandle.class);\n+\n+    private final String table;\n+    private final int bucketCount;\n+    private final String schema;\n+    private final List<ColumnHandle> bucketColumnIds;\n+\n+    @JsonCreator\n+    public KuduPartitioningHandle(\n+            @JsonProperty(\"schema\") String schema,\n+            @JsonProperty(\"table\") String table,\n+            @JsonProperty(\"bucketCount\") int bucketCount,\n+            @JsonProperty(\"bucketColumnIds\") List<ColumnHandle> bucketColumnIds)\n+    {\n+        this.schema = schema;\n+        this.table = table;\n+        this.bucketCount = bucketCount;\n+        this.bucketColumnIds = bucketColumnIds;\n+    }\n+\n+    @JsonProperty\n+    public String getSchema()\n+    {\n+        return schema;\n+    }\n+\n+    @JsonProperty\n+    public String getTable()\n+    {\n+        return table;\n+    }\n+\n+    @JsonProperty\n+    public int getBucketCount()\n+    {\n+        return bucketCount;\n+    }\n+\n+    @JsonProperty\n+    public List<ColumnHandle> getBucketColumnIds()\n+    {\n+        return bucketColumnIds;\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return format(\"schema=%s, table=%s, buckets=%d\", schema, table, bucketCount);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o)\n+    {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        KuduPartitioningHandle that = (KuduPartitioningHandle) o;\n+        return bucketCount == that.bucketCount;\n+    }\n+\n+    @Override\n+    public int hashCode()\n+    {\n+        return Objects.hash(bucketCount, schema, table /*, hiveTypes*/);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDI5MjI0OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduPartitioningHandle.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDoxOTowOVrOGhCxQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMzo1MDozNFrOGhj5gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMwMTU3MA==", "bodyText": "We can check the schemaName and tableName right ?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r437301570", "createdAt": "2020-06-09T10:19:09Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduPartitioningHandle.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.airlift.log.Logger;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.connector.ConnectorPartitioningHandle;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static java.lang.String.format;\n+\n+public class KuduPartitioningHandle\n+        implements ConnectorPartitioningHandle\n+{\n+    private static final Logger log = Logger.get(KuduPartitioningHandle.class);\n+\n+    private final String table;\n+    private final int bucketCount;\n+    private final String schema;\n+    private final List<ColumnHandle> bucketColumnIds;\n+\n+    @JsonCreator\n+    public KuduPartitioningHandle(\n+            @JsonProperty(\"schema\") String schema,\n+            @JsonProperty(\"table\") String table,\n+            @JsonProperty(\"bucketCount\") int bucketCount,\n+            @JsonProperty(\"bucketColumnIds\") List<ColumnHandle> bucketColumnIds)\n+    {\n+        this.schema = schema;\n+        this.table = table;\n+        this.bucketCount = bucketCount;\n+        this.bucketColumnIds = bucketColumnIds;\n+    }\n+\n+    @JsonProperty\n+    public String getSchema()\n+    {\n+        return schema;\n+    }\n+\n+    @JsonProperty\n+    public String getTable()\n+    {\n+        return table;\n+    }\n+\n+    @JsonProperty\n+    public int getBucketCount()\n+    {\n+        return bucketCount;\n+    }\n+\n+    @JsonProperty\n+    public List<ColumnHandle> getBucketColumnIds()\n+    {\n+        return bucketColumnIds;\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return format(\"schema=%s, table=%s, buckets=%d\", schema, table, bucketCount);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o)\n+    {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        KuduPartitioningHandle that = (KuduPartitioningHandle) o;\n+        return bucketCount == that.bucketCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg0NDM1NQ==", "bodyText": "Sorry we cannot check schemaName or tableName, because in join operation, presto will call this KuduPartitioningHandle#equals method to check if these two tables can do join, so if we add name check here, join query will not be able to execute in GROUPED_EXECUTION mode.  :(", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r437844355", "createdAt": "2020-06-10T03:50:34Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduPartitioningHandle.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.airlift.log.Logger;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.connector.ConnectorPartitioningHandle;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static java.lang.String.format;\n+\n+public class KuduPartitioningHandle\n+        implements ConnectorPartitioningHandle\n+{\n+    private static final Logger log = Logger.get(KuduPartitioningHandle.class);\n+\n+    private final String table;\n+    private final int bucketCount;\n+    private final String schema;\n+    private final List<ColumnHandle> bucketColumnIds;\n+\n+    @JsonCreator\n+    public KuduPartitioningHandle(\n+            @JsonProperty(\"schema\") String schema,\n+            @JsonProperty(\"table\") String table,\n+            @JsonProperty(\"bucketCount\") int bucketCount,\n+            @JsonProperty(\"bucketColumnIds\") List<ColumnHandle> bucketColumnIds)\n+    {\n+        this.schema = schema;\n+        this.table = table;\n+        this.bucketCount = bucketCount;\n+        this.bucketColumnIds = bucketColumnIds;\n+    }\n+\n+    @JsonProperty\n+    public String getSchema()\n+    {\n+        return schema;\n+    }\n+\n+    @JsonProperty\n+    public String getTable()\n+    {\n+        return table;\n+    }\n+\n+    @JsonProperty\n+    public int getBucketCount()\n+    {\n+        return bucketCount;\n+    }\n+\n+    @JsonProperty\n+    public List<ColumnHandle> getBucketColumnIds()\n+    {\n+        return bucketColumnIds;\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return format(\"schema=%s, table=%s, buckets=%d\", schema, table, bucketCount);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o)\n+    {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        KuduPartitioningHandle that = (KuduPartitioningHandle) o;\n+        return bucketCount == that.bucketCount;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMwMTU3MA=="}, "originalCommit": null, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDMwNzQxOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduModule.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDoyMzo0N1rOGhC68w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDoyMzo0N1rOGhC68w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMwNDA1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    bind(ConnectorNodePartitioningProvider.class).to(KuduNodePartitioningProvider.class).in(Scopes.SINGLETON);\n          \n          \n            \n                    bind(ConnectorNodePartitioningProvider.class).annotatedWith(ForClassLoaderSafe.class).to(KuduNodePartitioningProvider.class).in(Scopes.SINGLETON);\n          \n          \n            \n                    bind(ConnectorNodePartitioningProvider.class).to(ClassLoaderSafeNodePartitioningProvider.class).in(Scopes.SINGLETON);\n          \n      \n    \n    \n  \n\nThis ensures that we can directly Inject KuduConnector", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r437304051", "createdAt": "2020-06-09T10:23:47Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduModule.java", "diffHunk": "@@ -50,14 +51,16 @@ protected void configure()\n     {\n         bind(TypeManager.class).toInstance(typeManager);\n \n-        bind(KuduConnector.class).in(Scopes.SINGLETON);\n+        bind(KuduSessionProperties.class).in(Scopes.SINGLETON);\n+\n         bind(KuduMetadata.class).in(Scopes.SINGLETON);\n         bind(KuduTableProperties.class).in(Scopes.SINGLETON);\n         bind(ConnectorSplitManager.class).to(KuduSplitManager.class).in(Scopes.SINGLETON);\n         bind(ConnectorPageSourceProvider.class).to(KuduPageSourceProvider.class)\n                 .in(Scopes.SINGLETON);\n         bind(ConnectorPageSinkProvider.class).to(KuduPageSinkProvider.class).in(Scopes.SINGLETON);\n         bind(KuduHandleResolver.class).in(Scopes.SINGLETON);\n+        bind(ConnectorNodePartitioningProvider.class).to(KuduNodePartitioningProvider.class).in(Scopes.SINGLETON);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDMxMjk4OnYy", "diffSide": "LEFT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduConnectorFactory.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDoyNToyOVrOGhC-nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNzo1OTo0OFrOGhpXDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMwNDk5MQ==", "bodyText": "we can inject ClassLoaderSafeNodePartitioningProvider directly so we can directly get Connector instance usiing injector.getInstance", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r437304991", "createdAt": "2020-06-09T10:25:29Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduConnectorFactory.java", "diffHunk": "@@ -59,6 +70,25 @@ public Connector create(String catalogName, Map<String, String> config, Connecto\n                 .setRequiredConfigurationProperties(config)\n                 .initialize();\n \n-        return injector.getInstance(KuduConnector.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3ODA5Nw==", "bodyText": "After I modified as your suggestion it shows errors like the picture, can you help me with that? @Praveen2112  I have checked the code in hive and iceberg, they just new a Connector in ConnectorFactory#create()", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r437878097", "createdAt": "2020-06-10T06:01:35Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduConnectorFactory.java", "diffHunk": "@@ -59,6 +70,25 @@ public Connector create(String catalogName, Map<String, String> config, Connecto\n                 .setRequiredConfigurationProperties(config)\n                 .initialize();\n \n-        return injector.getInstance(KuduConnector.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMwNDk5MQ=="}, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3ODQ4OQ==", "bodyText": "Explicit bindings are required and java.lang.ClassLoader is not explicitly bound.\nwhile locating java.lang.ClassLoader\nfor the 2nd parameter of io.prestosql.plugin.base.classloader.ClassLoaderSafeNodePartitioningProvider.(ClassLoaderSafeNodePartitioningProvider.java:42)\nat io.prestosql.plugin.kudu.KuduModule.configure(KuduModule.java:67)\n\n\nExplicit bindings are required and java.util.List<io.prestosql.spi.session.PropertyMetadata> is not explicitly bound.\n  while locating java.util.List>\nfor the 9th parameter of io.prestosql.plugin.kudu.KuduConnector.(KuduConnector.java:64)\nat io.prestosql.plugin.kudu.KuduModule.configure(KuduModule.java:58)", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r437878489", "createdAt": "2020-06-10T06:02:51Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduConnectorFactory.java", "diffHunk": "@@ -59,6 +70,25 @@ public Connector create(String catalogName, Map<String, String> config, Connecto\n                 .setRequiredConfigurationProperties(config)\n                 .initialize();\n \n-        return injector.getInstance(KuduConnector.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMwNDk5MQ=="}, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4NTUwNQ==", "bodyText": "For injecting the classloader we can use this snippet\n                binder -> {\n                    binder.bind(ClassLoader.class).toInstance(KafkaConnectorFactory.class.getClassLoader());\n                    binder.bind(TypeManager.class).toInstance(context.getTypeManager());\n                    binder.bind(NodeManager.class).toInstance(context.getNodeManager());\n                });\n\nand adding this module in the bootstrap Ref : We can check KafkaConnectorFactory\nAnd instead of passing List<PropertyMetdata> we can inject KuduSessionProperties and use KuduSessionProperties#getSessionProperties inside the KuduConnector", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r437885505", "createdAt": "2020-06-10T06:23:23Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduConnectorFactory.java", "diffHunk": "@@ -59,6 +70,25 @@ public Connector create(String catalogName, Map<String, String> config, Connecto\n                 .setRequiredConfigurationProperties(config)\n                 .initialize();\n \n-        return injector.getInstance(KuduConnector.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMwNDk5MQ=="}, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkwOTM5Mw==", "bodyText": "@Praveen2112 the first problem was fixed, thank you!\nthe second problem, I have removed the KuduConnector#getSessionProperties method, and keep the inject in KuduModule#configure(), after that presto can started successfully, but when I use the session property kudu.grouped_execution, it show error below:\nNo session properties found for catalog: kudu", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r437909393", "createdAt": "2020-06-10T07:19:19Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduConnectorFactory.java", "diffHunk": "@@ -59,6 +70,25 @@ public Connector create(String catalogName, Map<String, String> config, Connecto\n                 .setRequiredConfigurationProperties(config)\n                 .initialize();\n \n-        return injector.getInstance(KuduConnector.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMwNDk5MQ=="}, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkzMzgzOA==", "bodyText": "I think I have understood your suggestion about the 2nd problem, KuduConnector.sessionProperties should be type of KuduSessionProperties, not a List< PropertyMetdata >. Then the second problem is resolved!\nThank you! @Praveen2112   :)", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r437933838", "createdAt": "2020-06-10T07:59:48Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduConnectorFactory.java", "diffHunk": "@@ -59,6 +70,25 @@ public Connector create(String catalogName, Map<String, String> config, Connecto\n                 .setRequiredConfigurationProperties(config)\n                 .initialize();\n \n-        return injector.getInstance(KuduConnector.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMwNDk5MQ=="}, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTM3NDg1OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduConnector.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMDo1MzoxMVrOGjW_HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzoxMjowM1rOGjlu8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyOTk0OA==", "bodyText": "Instead of maintaining KuduSessionProperties can we maintain List<PropertyMetadata<?>> sessionProperties", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r439729948", "createdAt": "2020-06-13T10:53:11Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduConnector.java", "diffHunk": "@@ -45,6 +46,8 @@\n     private final KuduTableProperties tableProperties;\n     private final ConnectorPageSinkProvider pageSinkProvider;\n     private final Set<Procedure> procedures;\n+    private final ConnectorNodePartitioningProvider nodePartitioningProvider;\n+    private final KuduSessionProperties sessionProperties;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkxODE0NQ==", "bodyText": "Agree with you, I have changed my code according to CassandraConnector.  :)", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r439918145", "createdAt": "2020-06-15T03:53:42Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduConnector.java", "diffHunk": "@@ -45,6 +46,8 @@\n     private final KuduTableProperties tableProperties;\n     private final ConnectorPageSinkProvider pageSinkProvider;\n     private final Set<Procedure> procedures;\n+    private final ConnectorNodePartitioningProvider nodePartitioningProvider;\n+    private final KuduSessionProperties sessionProperties;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyOTk0OA=="}, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3MTU3MQ==", "bodyText": "A few minor changes. How do we handle for multi level hash based partitioning ? If we partition tables on based on two hash partition, how can we handle them ?\n\nI think we can check KuduBucketFunction#getBucket, in this method we judge which bucket one record belongs to by all its bucket columns(see param bucketChannelTypes of method getBucketId). So I think it won't be a problem when we handling multi level hash based partitioning.   :)", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r439971571", "createdAt": "2020-06-15T07:12:03Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduConnector.java", "diffHunk": "@@ -45,6 +46,8 @@\n     private final KuduTableProperties tableProperties;\n     private final ConnectorPageSinkProvider pageSinkProvider;\n     private final Set<Procedure> procedures;\n+    private final ConnectorNodePartitioningProvider nodePartitioningProvider;\n+    private final KuduSessionProperties sessionProperties;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyOTk0OA=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTM3NTYwOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduNodePartitioningProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMDo1NToxNVrOGjW_fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMDo1NToxNVrOGjW_fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczMDA0Nw==", "bodyText": "Can we move this to a new line ?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r439730047", "createdAt": "2020-06-13T10:55:15Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduNodePartitioningProvider.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.connector.ConnectorBucketNodeMap;\n+import io.prestosql.spi.connector.ConnectorNodePartitioningProvider;\n+import io.prestosql.spi.connector.ConnectorPartitionHandle;\n+import io.prestosql.spi.connector.ConnectorPartitioningHandle;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorSplit;\n+import io.prestosql.spi.connector.ConnectorTransactionHandle;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import io.prestosql.spi.type.Type;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.function.ToIntFunction;\n+import java.util.stream.IntStream;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.connector.ConnectorBucketNodeMap.createBucketNodeMap;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduNodePartitioningProvider\n+        implements ConnectorNodePartitioningProvider\n+{\n+    private final KuduClientSession clientSession;\n+\n+    @Inject\n+    public KuduNodePartitioningProvider(KuduClientSession clientSession)\n+    {\n+        this.clientSession = requireNonNull(clientSession, \"clientSession is null\");\n+    }\n+\n+    @Override\n+    public List<ConnectorPartitionHandle> listPartitionHandles(ConnectorTransactionHandle transactionHandle,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTM5NTIzOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/org/apache/kudu/client/KeyEncoderAccessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMTo0MDo0MFrOGjXJcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMTo0MDo0MFrOGjXJcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczMjU5NQ==", "bodyText": "Can we import PartitionSchema.HashBucketSchema directly", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r439732595", "createdAt": "2020-06-13T11:40:40Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/org/apache/kudu/client/KeyEncoderAccessor.java", "diffHunk": "@@ -41,4 +41,17 @@ public static PartialRow decodeRangePartitionKey(Schema schema, PartitionSchema\n     {\n         return KeyEncoder.decodeRangePartitionKey(schema, partitionSchema, key);\n     }\n+\n+    /**\n+     * Returns the bucket of the row for the given hash bucket schema. All columns\n+     * in the hash bucket schema must be set in the row.\n+     *\n+     * @param row the row containing hash schema columns\n+     * @param hashSchema the hash schema\n+     * @return the hash bucket of the row\n+     */\n+    public static int getHashBucket(PartialRow row, PartitionSchema.HashBucketSchema hashSchema)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTM5NzMyOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMTo0NTo0MFrOGjXKiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMTo0NTo0MFrOGjXKiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczMjg3Mw==", "bodyText": "Do we need this KuduTable variable ? In all its usages it is passed as null", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r439732873", "createdAt": "2020-06-13T11:45:40Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -193,13 +203,26 @@ public KuduTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n     {\n         try {\n             KuduTable table = clientSession.openTable(schemaTableName);\n-            return new KuduTableHandle(schemaTableName, table, TupleDomain.all(), Optional.empty(), false);\n+            OptionalInt bucketCount = getTableBucketCount(schemaTableName, null);\n+            return new KuduTableHandle(schemaTableName, table, TupleDomain.all(), Optional.empty(), false, bucketCount);\n         }\n         catch (NotFoundException e) {\n             return null;\n         }\n     }\n \n+    private OptionalInt getTableBucketCount(SchemaTableName schemaTableName, KuduTable table)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTQwOTAzOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMjowOTo0OVrOGjXQdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMjowOTo0OVrOGjXQdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczNDM5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private ImmutableList<ColumnHandle> getSpecifyColumns(Schema schema, List<Integer> targetColumns, Map<String, ColumnHandle> columnMap)\n          \n          \n            \n                private List<ColumnHandle> getSpecifyColumns(Schema schema, List<Integer> targetColumns, Map<String, ColumnHandle> columnMap)", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r439734390", "createdAt": "2020-06-13T12:09:49Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -347,6 +370,21 @@ public ConnectorOutputTableHandle beginCreateTable(\n         return Optional.empty();\n     }\n \n+    private boolean isTableSupportGroupedExecution(KuduTable kuduTable)\n+    {\n+        return !kuduTable.getPartitionSchema().getHashBucketSchemas().isEmpty();\n+    }\n+\n+    private ImmutableList<ColumnHandle> getSpecifyColumns(Schema schema, List<Integer> targetColumns, Map<String, ColumnHandle> columnMap)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTQwOTQ0OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMjoxMDoxOVrOGjXQpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMjoxMDoxOVrOGjXQpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczNDQzNw==", "bodyText": "Can we write each arguments in a new line ?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r439734437", "createdAt": "2020-06-13T12:10:19Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -357,7 +395,8 @@ public ColumnHandle getUpdateRowIdColumnHandle(ConnectorSession session, Connect\n     public ConnectorTableHandle beginDelete(ConnectorSession session, ConnectorTableHandle table)\n     {\n         KuduTableHandle handle = (KuduTableHandle) table;\n-        return new KuduTableHandle(handle.getSchemaTableName(), handle.getConstraint(), handle.getDesiredColumns(), true);\n+        return new KuduTableHandle(handle.getSchemaTableName(), handle.getConstraint(), handle.getDesiredColumns(), true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTQxMDI0OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMjoxMjowMlrOGjXRDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMjoxMjowMlrOGjXRDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczNDU0MA==", "bodyText": "Import PartitionSchema.HashBucketSchema", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r439734540", "createdAt": "2020-06-13T12:12:02Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final int bucketCount;\n+    private final List<Type> bucketChannelTypes;\n+\n+    private final KuduTable kuduTable;\n+\n+    private final PartitionSchema.HashBucketSchema hashBucketSchema;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTQyNjI2OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMjo0NTo1MVrOGjXZOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMjo0NTo1MVrOGjXZOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczNjYzNQ==", "bodyText": "Maybe Iterables.getFirst", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r439736635", "createdAt": "2020-06-13T12:45:51Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final int bucketCount;\n+    private final List<Type> bucketChannelTypes;\n+\n+    private final KuduTable kuduTable;\n+\n+    private final PartitionSchema.HashBucketSchema hashBucketSchema;\n+    private final Schema schema;\n+\n+    KuduBucketFunction(int bucketCount, List<Type> bucketChannelTypes, KuduTable kuduTable)\n+    {\n+        this.bucketCount = bucketCount;\n+        this.bucketChannelTypes = bucketChannelTypes;\n+\n+        this.kuduTable = kuduTable;\n+\n+        PartitionSchema partitionSchema = this.kuduTable.getPartitionSchema();\n+        List<PartitionSchema.HashBucketSchema> hashBucketSchemas = partitionSchema.getHashBucketSchemas();\n+        this.hashBucketSchema = hashBucketSchemas.get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTQzMzg2OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduClientSession.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMzowMDozM1rOGjXdDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMzowMDozM1rOGjXdDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczNzYxMw==", "bodyText": "Can we move it to a new line ?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r439737613", "createdAt": "2020-06-13T13:00:33Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduClientSession.java", "diffHunk": "@@ -596,11 +598,11 @@ private KuduPredicate createComparisonPredicate(ColumnSchema columnSchema, KuduP\n     }\n \n     private KuduSplit toKuduSplit(KuduTableHandle tableHandle, KuduScanToken token,\n-            int primaryKeyColumnCount)\n+            int primaryKeyColumnCount, int bucketNumber)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTQzNTUzOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMzowMzo1M1rOGjXd3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMzowMzo1M1rOGjXd3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczNzgyMA==", "bodyText": "Can we inline bucketCount ?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r439737820", "createdAt": "2020-06-13T13:03:53Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -193,13 +203,26 @@ public KuduTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n     {\n         try {\n             KuduTable table = clientSession.openTable(schemaTableName);\n-            return new KuduTableHandle(schemaTableName, table, TupleDomain.all(), Optional.empty(), false);\n+            OptionalInt bucketCount = getTableBucketCount(schemaTableName, null);\n+            return new KuduTableHandle(schemaTableName, table, TupleDomain.all(), Optional.empty(), false, bucketCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTQzODIyOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMzowNzo0MlrOGjXfKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMzowNzo0MlrOGjXfKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczODE1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ImmutableList.Builder<ColumnHandle> bucketColumns = ImmutableList.builder();\n          \n          \n            \n                    if (!targetColumns.isEmpty()) {\n          \n          \n            \n                        targetColumns.forEach(bucketColumnIndex ->\n          \n          \n            \n                                bucketColumns.add(columnMap.get(schema.getColumnByIndex(bucketColumnIndex).getName())));\n          \n          \n            \n                    }\n          \n          \n            \n                    return bucketColumns.build();\n          \n          \n            \n                    return targetColumns.stream()\n          \n          \n            \n                            .map(columnIndex -> columnMap.get(schema.getColumnByIndex(columnIndex).getName()))\n          \n          \n            \n                            .collect(toImmutableList());", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r439738154", "createdAt": "2020-06-13T13:07:42Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -347,6 +370,21 @@ public ConnectorOutputTableHandle beginCreateTable(\n         return Optional.empty();\n     }\n \n+    private boolean isTableSupportGroupedExecution(KuduTable kuduTable)\n+    {\n+        return !kuduTable.getPartitionSchema().getHashBucketSchemas().isEmpty();\n+    }\n+\n+    private ImmutableList<ColumnHandle> getSpecifyColumns(Schema schema, List<Integer> targetColumns, Map<String, ColumnHandle> columnMap)\n+    {\n+        ImmutableList.Builder<ColumnHandle> bucketColumns = ImmutableList.builder();\n+        if (!targetColumns.isEmpty()) {\n+            targetColumns.forEach(bucketColumnIndex ->\n+                    bucketColumns.add(columnMap.get(schema.getColumnByIndex(bucketColumnIndex).getName())));\n+        }\n+        return bucketColumns.build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTQzODg3OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMzowODo1NlrOGjXfew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMzowODo1NlrOGjXfew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczODIzNQ==", "bodyText": "ImmutableSet.copyOf", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r439738235", "createdAt": "2020-06-13T13:08:56Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -375,7 +414,41 @@ public boolean usesLegacyTableLayouts()\n     public ConnectorTableProperties getTableProperties(ConnectorSession session, ConnectorTableHandle table)\n     {\n         KuduTableHandle handle = (KuduTableHandle) table;\n-        return new ConnectorTableProperties(handle.getConstraint(), Optional.empty(), Optional.empty(), Optional.empty(), ImmutableList.of());\n+        KuduTable kuduTable = handle.getTable(clientSession);\n+\n+        Optional<ConnectorTablePartitioning> tablePartitioning = Optional.empty();\n+        Optional<Set<ColumnHandle>> partitioningColumns = Optional.empty();\n+        List<LocalProperty<ColumnHandle>> localProperties = ImmutableList.of();\n+\n+        if (isKuduGroupedExecutionEnabled(session)\n+                && isTableSupportGroupedExecution(kuduTable)\n+                && handle.getBucketCount().isPresent()) {\n+            Map<String, ColumnHandle> columnMap = getColumnHandles(session, handle);\n+            List<PartitionSchema.HashBucketSchema> hashBucketSchemas = kuduTable.getPartitionSchema().getHashBucketSchemas();\n+            List<Integer> bucketColumnIds = hashBucketSchemas.get(0).getColumnIds();\n+            List<ColumnHandle> bucketColumns = getSpecifyColumns(kuduTable.getSchema(), bucketColumnIds, columnMap);\n+            tablePartitioning = Optional.of(new ConnectorTablePartitioning(\n+                new KuduPartitioningHandle(\n+                    handle.getSchemaTableName().getSchemaName(),\n+                    handle.getSchemaTableName().getTableName(),\n+                    handle.getBucketCount().getAsInt(),\n+                    bucketColumns.stream().map(KuduColumnHandle.class::cast).map(KuduColumnHandle::getType).collect(Collectors.toList())),\n+                bucketColumns));\n+            partitioningColumns = Optional.of(new HashSet<>(bucketColumns));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTQ0MTA0OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMzoxMzoyN1rOGjXghw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMzoxMzoyN1rOGjXghw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczODUwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        ).collect(Collectors.toList());\n          \n          \n            \n                        ).collect(toImmutableList());", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r439738503", "createdAt": "2020-06-13T13:13:27Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -375,7 +414,41 @@ public boolean usesLegacyTableLayouts()\n     public ConnectorTableProperties getTableProperties(ConnectorSession session, ConnectorTableHandle table)\n     {\n         KuduTableHandle handle = (KuduTableHandle) table;\n-        return new ConnectorTableProperties(handle.getConstraint(), Optional.empty(), Optional.empty(), Optional.empty(), ImmutableList.of());\n+        KuduTable kuduTable = handle.getTable(clientSession);\n+\n+        Optional<ConnectorTablePartitioning> tablePartitioning = Optional.empty();\n+        Optional<Set<ColumnHandle>> partitioningColumns = Optional.empty();\n+        List<LocalProperty<ColumnHandle>> localProperties = ImmutableList.of();\n+\n+        if (isKuduGroupedExecutionEnabled(session)\n+                && isTableSupportGroupedExecution(kuduTable)\n+                && handle.getBucketCount().isPresent()) {\n+            Map<String, ColumnHandle> columnMap = getColumnHandles(session, handle);\n+            List<PartitionSchema.HashBucketSchema> hashBucketSchemas = kuduTable.getPartitionSchema().getHashBucketSchemas();\n+            List<Integer> bucketColumnIds = hashBucketSchemas.get(0).getColumnIds();\n+            List<ColumnHandle> bucketColumns = getSpecifyColumns(kuduTable.getSchema(), bucketColumnIds, columnMap);\n+            tablePartitioning = Optional.of(new ConnectorTablePartitioning(\n+                new KuduPartitioningHandle(\n+                    handle.getSchemaTableName().getSchemaName(),\n+                    handle.getSchemaTableName().getTableName(),\n+                    handle.getBucketCount().getAsInt(),\n+                    bucketColumns.stream().map(KuduColumnHandle.class::cast).map(KuduColumnHandle::getType).collect(Collectors.toList())),\n+                bucketColumns));\n+            partitioningColumns = Optional.of(new HashSet<>(bucketColumns));\n+\n+            List<Integer> rangeColumnIds = kuduTable.getPartitionSchema().getRangeSchema().getColumnIds();\n+            List<ColumnHandle> rangeColumns = getSpecifyColumns(kuduTable.getSchema(), rangeColumnIds, columnMap);\n+            localProperties = rangeColumns.stream().map(columnHandle ->\n+                new SortingProperty<>(columnHandle, SortOrder.ASC_NULLS_LAST)\n+            ).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzI2Nzg0OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduConnector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxMDoyNzoxN1rOGp8Qzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMjozMjoxMFrOGqpZkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYzMjE0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    requireNonNull(sessionProperties, \"KuduSessionProperties is null\");\n          \n          \n            \n                    this.sessionProperties = requireNonNull(sessionProperties.getSessionProperties(), \"sessionProperties is null\");\n          \n          \n            \n                    this.sessionProperties = requireNonNull(sessionProperties, \"KuduSessionProperties is null\").getSessionProperties();", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r446632142", "createdAt": "2020-06-28T10:27:17Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduConnector.java", "diffHunk": "@@ -63,6 +68,9 @@ public KuduConnector(\n         this.tableProperties = requireNonNull(tableProperties, \"tableProperties is null\");\n         this.pageSinkProvider = requireNonNull(pageSinkProvider, \"pageSinkProvider is null\");\n         this.procedures = ImmutableSet.copyOf(requireNonNull(procedures, \"procedures is null\"));\n+        this.nodePartitioningProvider = requireNonNull(nodePartitioningProvider, \"nodePartitioningProvider is null\");\n+        requireNonNull(sessionProperties, \"KuduSessionProperties is null\");\n+        this.sessionProperties = requireNonNull(sessionProperties.getSessionProperties(), \"sessionProperties is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM3MTY2Nw==", "bodyText": "I will do as your suggest, but I wander will it show an NullPointerExeption if we remove requireNonNull of sessionProperties ?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r447371667", "createdAt": "2020-06-30T02:32:10Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduConnector.java", "diffHunk": "@@ -63,6 +68,9 @@ public KuduConnector(\n         this.tableProperties = requireNonNull(tableProperties, \"tableProperties is null\");\n         this.pageSinkProvider = requireNonNull(pageSinkProvider, \"pageSinkProvider is null\");\n         this.procedures = ImmutableSet.copyOf(requireNonNull(procedures, \"procedures is null\"));\n+        this.nodePartitioningProvider = requireNonNull(nodePartitioningProvider, \"nodePartitioningProvider is null\");\n+        requireNonNull(sessionProperties, \"KuduSessionProperties is null\");\n+        this.sessionProperties = requireNonNull(sessionProperties.getSessionProperties(), \"sessionProperties is null\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYzMjE0Mg=="}, "originalCommit": null, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjEwOTc3OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduSplitSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTowOToyNFrOGqVc5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMjozMzo1NlrOGqpbQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0NDgzNw==", "bodyText": "How about using a AtomicCounter ?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r447044837", "createdAt": "2020-06-29T15:09:24Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduSplitSource.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ConnectorPartitionHandle;\n+import io.prestosql.spi.connector.ConnectorSplitSource;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static java.util.function.Function.identity;\n+\n+public class KuduSplitSource\n+        implements ConnectorSplitSource\n+{\n+    private final Map<Integer, KuduSplit> splitMap;\n+    private int fetchedBucketCount;\n+\n+    KuduSplitSource(List<KuduSplit> splits)\n+    {\n+        this.splitMap = requireNonNull(splits, \"splits are null\").stream()\n+                .collect(toImmutableMap(KuduSplit::getBucketNumber, identity()));\n+    }\n+\n+    @Override\n+    public CompletableFuture<ConnectorSplitBatch> getNextBatch(ConnectorPartitionHandle partitionHandle, int maxSize)\n+    {\n+        KuduPartitionHandle kuduPartitionHandle = (KuduPartitionHandle) partitionHandle;\n+        KuduSplit kuduSplit = splitMap.get(kuduPartitionHandle.getBucket());\n+        fetchedBucketCount += 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM3MjA5OA==", "bodyText": "Could I use AtomicInteger here?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r447372098", "createdAt": "2020-06-30T02:33:56Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduSplitSource.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ConnectorPartitionHandle;\n+import io.prestosql.spi.connector.ConnectorSplitSource;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static java.util.function.Function.identity;\n+\n+public class KuduSplitSource\n+        implements ConnectorSplitSource\n+{\n+    private final Map<Integer, KuduSplit> splitMap;\n+    private int fetchedBucketCount;\n+\n+    KuduSplitSource(List<KuduSplit> splits)\n+    {\n+        this.splitMap = requireNonNull(splits, \"splits are null\").stream()\n+                .collect(toImmutableMap(KuduSplit::getBucketNumber, identity()));\n+    }\n+\n+    @Override\n+    public CompletableFuture<ConnectorSplitBatch> getNextBatch(ConnectorPartitionHandle partitionHandle, int maxSize)\n+    {\n+        KuduPartitionHandle kuduPartitionHandle = (KuduPartitionHandle) partitionHandle;\n+        KuduSplit kuduSplit = splitMap.get(kuduPartitionHandle.getBucket());\n+        fetchedBucketCount += 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0NDgzNw=="}, "originalCommit": null, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjExOTIxOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduSplitSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToxMToyN1rOGqVijw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToxMToyN1rOGqVijw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0NjI4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return this.fetchedBucketCount >= splitMap.size();\n          \n          \n            \n                    return this.fetchedBucketCount == splitMap.size();", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r447046287", "createdAt": "2020-06-29T15:11:27Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduSplitSource.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ConnectorPartitionHandle;\n+import io.prestosql.spi.connector.ConnectorSplitSource;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static java.util.function.Function.identity;\n+\n+public class KuduSplitSource\n+        implements ConnectorSplitSource\n+{\n+    private final Map<Integer, KuduSplit> splitMap;\n+    private int fetchedBucketCount;\n+\n+    KuduSplitSource(List<KuduSplit> splits)\n+    {\n+        this.splitMap = requireNonNull(splits, \"splits are null\").stream()\n+                .collect(toImmutableMap(KuduSplit::getBucketNumber, identity()));\n+    }\n+\n+    @Override\n+    public CompletableFuture<ConnectorSplitBatch> getNextBatch(ConnectorPartitionHandle partitionHandle, int maxSize)\n+    {\n+        KuduPartitionHandle kuduPartitionHandle = (KuduPartitionHandle) partitionHandle;\n+        KuduSplit kuduSplit = splitMap.get(kuduPartitionHandle.getBucket());\n+        fetchedBucketCount += 1;\n+        return completedFuture(new ConnectorSplitBatch(kuduSplit == null ? ImmutableList.of() : ImmutableList.of(kuduSplit), true));\n+    }\n+\n+    @Override\n+    public void close()\n+    {\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return this.fetchedBucketCount >= splitMap.size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjEzNjE5OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduPartitioningHandle.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToxNToxMVrOGqVs9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToxNToxMVrOGqVs9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0ODk1MQ==", "bodyText": "Can we rearrange in the same was as that of constructor ?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r447048951", "createdAt": "2020-06-29T15:15:11Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduPartitioningHandle.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.prestosql.spi.connector.ConnectorPartitioningHandle;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduPartitioningHandle\n+        implements ConnectorPartitioningHandle\n+{\n+    private final String table;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjIyMzMxOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduClientSession.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTozNDoyNlrOGqWjTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTozNDoyNlrOGqWjTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2Mjg2MA==", "bodyText": "can we move it to previous line ?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r447062860", "createdAt": "2020-06-29T15:34:26Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduClientSession.java", "diffHunk": "@@ -595,12 +597,12 @@ private KuduPredicate createComparisonPredicate(ColumnSchema columnSchema, KuduP\n                 + columnSchema.getName() + \": \" + javaValue + \"(\" + javaValue.getClass() + \")\");\n     }\n \n-    private KuduSplit toKuduSplit(KuduTableHandle tableHandle, KuduScanToken token,\n-            int primaryKeyColumnCount)\n+    private KuduSplit toKuduSplit(KuduTableHandle tableHandle, KuduScanToken token, int primaryKeyColumnCount,\n+            int bucketNumber)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjMwMjY4OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTo1MjoxNlrOGqXUXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMjo0ODozMVrOGqpqpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA3NTQyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        int bucketCount = -1;\n          \n          \n            \n                        // if bucketSchemas.size > 1, it means this table is a multiLevel-partitioning table.\n          \n          \n            \n                        for (HashBucketSchema hashBucketSchema : bucketSchemas) {\n          \n          \n            \n                            bucketCount = bucketCount <= 0 ? hashBucketSchema.getNumBuckets() : bucketCount * hashBucketSchema.getNumBuckets();\n          \n          \n            \n                        }\n          \n          \n            \n                        return OptionalInt.of(bucketCount);\n          \n          \n            \n                        return OptionalInt.of(bucketSchemas.stream()\n          \n          \n            \n                                .mapToInt(HashBucketSchema::getNumBuckets)\n          \n          \n            \n                                .reduce(1, Math::multiplyExact));", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r447075423", "createdAt": "2020-06-29T15:52:16Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -193,13 +203,29 @@ public KuduTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n     {\n         try {\n             KuduTable table = clientSession.openTable(schemaTableName);\n-            return new KuduTableHandle(schemaTableName, table, TupleDomain.all(), Optional.empty(), false);\n+            return new KuduTableHandle(schemaTableName, table, TupleDomain.all(), Optional.empty(), false,\n+                    getTableBucketCount(schemaTableName));\n         }\n         catch (NotFoundException e) {\n             return null;\n         }\n     }\n \n+    private OptionalInt getTableBucketCount(SchemaTableName schemaTableName)\n+    {\n+        KuduTable table = clientSession.openTable(schemaTableName);\n+        List<HashBucketSchema> bucketSchemas = table.getPartitionSchema().getHashBucketSchemas();\n+        if (bucketSchemas != null && !bucketSchemas.isEmpty()) {\n+            int bucketCount = -1;\n+            // if bucketSchemas.size > 1, it means this table is a multiLevel-partitioning table.\n+            for (HashBucketSchema hashBucketSchema : bucketSchemas) {\n+                bucketCount = bucketCount <= 0 ? hashBucketSchema.getNumBuckets() : bucketCount * hashBucketSchema.getNumBuckets();\n+            }\n+            return OptionalInt.of(bucketCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM3NjAzOQ==", "bodyText": "Learned!  :)", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r447376039", "createdAt": "2020-06-30T02:48:31Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -193,13 +203,29 @@ public KuduTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n     {\n         try {\n             KuduTable table = clientSession.openTable(schemaTableName);\n-            return new KuduTableHandle(schemaTableName, table, TupleDomain.all(), Optional.empty(), false);\n+            return new KuduTableHandle(schemaTableName, table, TupleDomain.all(), Optional.empty(), false,\n+                    getTableBucketCount(schemaTableName));\n         }\n         catch (NotFoundException e) {\n             return null;\n         }\n     }\n \n+    private OptionalInt getTableBucketCount(SchemaTableName schemaTableName)\n+    {\n+        KuduTable table = clientSession.openTable(schemaTableName);\n+        List<HashBucketSchema> bucketSchemas = table.getPartitionSchema().getHashBucketSchemas();\n+        if (bucketSchemas != null && !bucketSchemas.isEmpty()) {\n+            int bucketCount = -1;\n+            // if bucketSchemas.size > 1, it means this table is a multiLevel-partitioning table.\n+            for (HashBucketSchema hashBucketSchema : bucketSchemas) {\n+                bucketCount = bucketCount <= 0 ? hashBucketSchema.getNumBuckets() : bucketCount * hashBucketSchema.getNumBuckets();\n+            }\n+            return OptionalInt.of(bucketCount);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA3NTQyMw=="}, "originalCommit": null, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjMxNjM2OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTo1NToyNlrOGqXcug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTo1NToyNlrOGqXcug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA3NzU2Mg==", "bodyText": "This might be a bit clear right ?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return targetColumns.stream()\n          \n          \n            \n                        .map(columnIndex -> columnMap.get(schema.getColumnByIndex(columnIndex).getName()))\n          \n          \n            \n                        .collect(toImmutableList());\n          \n          \n            \n                    return targetColumns.stream()\n          \n          \n            \n                            .map(schema::getColumnByIndex)\n          \n          \n            \n                            .map(ColumnSchema::getName)\n          \n          \n            \n                            .map(columnMap::get)\n          \n          \n            \n                        .collect(toImmutableList());", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r447077562", "createdAt": "2020-06-29T15:55:26Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -347,6 +373,18 @@ public ConnectorOutputTableHandle beginCreateTable(\n         return Optional.empty();\n     }\n \n+    private boolean isTableSupportGroupedExecution(KuduTable kuduTable)\n+    {\n+        return !kuduTable.getPartitionSchema().getHashBucketSchemas().isEmpty();\n+    }\n+\n+    private List<ColumnHandle> getSpecifyColumns(Schema schema, List<Integer> targetColumns, Map<String, ColumnHandle> columnMap)\n+    {\n+        return targetColumns.stream()\n+            .map(columnIndex -> columnMap.get(schema.getColumnByIndex(columnIndex).getName()))\n+            .collect(toImmutableList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjMyMDIxOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTo1NjoxNFrOGqXfAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTo1NjoxNFrOGqXfAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA3ODE0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            getTableBucketCount(handle.getSchemaTableName()));\n          \n          \n            \n                            handle.getBucketCount());", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r447078147", "createdAt": "2020-06-29T15:56:14Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -357,7 +395,12 @@ public ColumnHandle getUpdateRowIdColumnHandle(ConnectorSession session, Connect\n     public ConnectorTableHandle beginDelete(ConnectorSession session, ConnectorTableHandle table)\n     {\n         KuduTableHandle handle = (KuduTableHandle) table;\n-        return new KuduTableHandle(handle.getSchemaTableName(), handle.getConstraint(), handle.getDesiredColumns(), true);\n+        return new KuduTableHandle(\n+                handle.getSchemaTableName(),\n+                handle.getConstraint(),\n+                handle.getDesiredColumns(),\n+                true,\n+                getTableBucketCount(handle.getSchemaTableName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjQxMzUwOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNjoxODoxMlrOGqYYHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNjoxODoxMlrOGqYYHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA5Mjc2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            getTableBucketCount(handle.getSchemaTableName()));\n          \n          \n            \n                            handle.getBucketCount();", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r447092767", "createdAt": "2020-06-29T16:18:12Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -394,7 +478,8 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n                 handle.getTable(clientSession),\n                 newDomain,\n                 handle.getDesiredColumns(),\n-                handle.isDeleteHandle());\n+                handle.isDeleteHandle(),\n+                getTableBucketCount(handle.getSchemaTableName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjQxNDQ5OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNjoxODoyNFrOGqYYqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNjoxODoyNFrOGqYYqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA5MjkwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            getTableBucketCount(handle.getSchemaTableName()));\n          \n          \n            \n                            handle.getBucketCount());", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r447092906", "createdAt": "2020-06-29T16:18:24Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -450,7 +535,8 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n                 handle.getTable(clientSession),\n                 handle.getConstraint(),\n                 Optional.of(desiredColumns.build()),\n-                handle.isDeleteHandle());\n+                handle.isDeleteHandle(),\n+                getTableBucketCount(handle.getSchemaTableName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjQyNTg2OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduNodePartitioningProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNjoyMDo1MFrOGqYfRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMjo1NToxM1rOGqpx3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA5NDU5OA==", "bodyText": "Can we move each argument to a new line ?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r447094598", "createdAt": "2020-06-29T16:20:50Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduNodePartitioningProvider.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.connector.ConnectorBucketNodeMap;\n+import io.prestosql.spi.connector.ConnectorNodePartitioningProvider;\n+import io.prestosql.spi.connector.ConnectorPartitionHandle;\n+import io.prestosql.spi.connector.ConnectorPartitioningHandle;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorSplit;\n+import io.prestosql.spi.connector.ConnectorTransactionHandle;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import io.prestosql.spi.type.Type;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.function.ToIntFunction;\n+import java.util.stream.IntStream;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.connector.ConnectorBucketNodeMap.createBucketNodeMap;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduNodePartitioningProvider\n+        implements ConnectorNodePartitioningProvider\n+{\n+    private final KuduClientSession clientSession;\n+\n+    @Inject\n+    public KuduNodePartitioningProvider(KuduClientSession clientSession)\n+    {\n+        this.clientSession = requireNonNull(clientSession, \"clientSession is null\");\n+    }\n+\n+    @Override\n+    public List<ConnectorPartitionHandle> listPartitionHandles(\n+            ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorPartitioningHandle partitioningHandle)\n+    {\n+        KuduPartitioningHandle handle = (KuduPartitioningHandle) partitioningHandle;\n+        int bucketCount = handle.getBucketCount();\n+        return IntStream.range(0, bucketCount).mapToObj(KuduPartitionHandle::new).collect(toImmutableList());\n+    }\n+\n+    @Override\n+    public ConnectorBucketNodeMap getBucketNodeMap(ConnectorTransactionHandle transactionHandle,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM3Nzg4NA==", "bodyText": "Ok, will do!", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r447377884", "createdAt": "2020-06-30T02:55:13Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduNodePartitioningProvider.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.connector.ConnectorBucketNodeMap;\n+import io.prestosql.spi.connector.ConnectorNodePartitioningProvider;\n+import io.prestosql.spi.connector.ConnectorPartitionHandle;\n+import io.prestosql.spi.connector.ConnectorPartitioningHandle;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorSplit;\n+import io.prestosql.spi.connector.ConnectorTransactionHandle;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import io.prestosql.spi.type.Type;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.function.ToIntFunction;\n+import java.util.stream.IntStream;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.connector.ConnectorBucketNodeMap.createBucketNodeMap;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduNodePartitioningProvider\n+        implements ConnectorNodePartitioningProvider\n+{\n+    private final KuduClientSession clientSession;\n+\n+    @Inject\n+    public KuduNodePartitioningProvider(KuduClientSession clientSession)\n+    {\n+        this.clientSession = requireNonNull(clientSession, \"clientSession is null\");\n+    }\n+\n+    @Override\n+    public List<ConnectorPartitionHandle> listPartitionHandles(\n+            ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorPartitioningHandle partitioningHandle)\n+    {\n+        KuduPartitioningHandle handle = (KuduPartitioningHandle) partitioningHandle;\n+        int bucketCount = handle.getBucketCount();\n+        return IntStream.range(0, bucketCount).mapToObj(KuduPartitionHandle::new).collect(toImmutableList());\n+    }\n+\n+    @Override\n+    public ConnectorBucketNodeMap getBucketNodeMap(ConnectorTransactionHandle transactionHandle,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA5NDU5OA=="}, "originalCommit": null, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjQyNzAwOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduNodePartitioningProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNjoyMTowNVrOGqYf9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNjoyMTowNVrOGqYf9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA5NDc3Mg==", "bodyText": "ditto", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r447094772", "createdAt": "2020-06-29T16:21:05Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduNodePartitioningProvider.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.connector.ConnectorBucketNodeMap;\n+import io.prestosql.spi.connector.ConnectorNodePartitioningProvider;\n+import io.prestosql.spi.connector.ConnectorPartitionHandle;\n+import io.prestosql.spi.connector.ConnectorPartitioningHandle;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorSplit;\n+import io.prestosql.spi.connector.ConnectorTransactionHandle;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import io.prestosql.spi.type.Type;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.function.ToIntFunction;\n+import java.util.stream.IntStream;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.connector.ConnectorBucketNodeMap.createBucketNodeMap;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduNodePartitioningProvider\n+        implements ConnectorNodePartitioningProvider\n+{\n+    private final KuduClientSession clientSession;\n+\n+    @Inject\n+    public KuduNodePartitioningProvider(KuduClientSession clientSession)\n+    {\n+        this.clientSession = requireNonNull(clientSession, \"clientSession is null\");\n+    }\n+\n+    @Override\n+    public List<ConnectorPartitionHandle> listPartitionHandles(\n+            ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorPartitioningHandle partitioningHandle)\n+    {\n+        KuduPartitioningHandle handle = (KuduPartitioningHandle) partitioningHandle;\n+        int bucketCount = handle.getBucketCount();\n+        return IntStream.range(0, bucketCount).mapToObj(KuduPartitionHandle::new).collect(toImmutableList());\n+    }\n+\n+    @Override\n+    public ConnectorBucketNodeMap getBucketNodeMap(ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorPartitioningHandle partitioningHandle)\n+    {\n+        KuduPartitioningHandle handle = (KuduPartitioningHandle) partitioningHandle;\n+        return createBucketNodeMap(handle.getBucketCount());\n+    }\n+\n+    @Override\n+    public ToIntFunction<ConnectorSplit> getSplitBucketFunction(ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorPartitioningHandle partitioningHandle)\n+    {\n+        return value -> ((KuduSplit) value).getBucketNumber();\n+    }\n+\n+    @Override\n+    public BucketFunction getBucketFunction(ConnectorTransactionHandle transactionHandle,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjQyNzAxOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduNodePartitioningProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNjoyMTowNVrOGqYf9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMjo1NTo0OVrOGqpygw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA5NDc3Mw==", "bodyText": "ditto", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r447094773", "createdAt": "2020-06-29T16:21:05Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduNodePartitioningProvider.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.connector.ConnectorBucketNodeMap;\n+import io.prestosql.spi.connector.ConnectorNodePartitioningProvider;\n+import io.prestosql.spi.connector.ConnectorPartitionHandle;\n+import io.prestosql.spi.connector.ConnectorPartitioningHandle;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorSplit;\n+import io.prestosql.spi.connector.ConnectorTransactionHandle;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import io.prestosql.spi.type.Type;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.function.ToIntFunction;\n+import java.util.stream.IntStream;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.connector.ConnectorBucketNodeMap.createBucketNodeMap;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduNodePartitioningProvider\n+        implements ConnectorNodePartitioningProvider\n+{\n+    private final KuduClientSession clientSession;\n+\n+    @Inject\n+    public KuduNodePartitioningProvider(KuduClientSession clientSession)\n+    {\n+        this.clientSession = requireNonNull(clientSession, \"clientSession is null\");\n+    }\n+\n+    @Override\n+    public List<ConnectorPartitionHandle> listPartitionHandles(\n+            ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorPartitioningHandle partitioningHandle)\n+    {\n+        KuduPartitioningHandle handle = (KuduPartitioningHandle) partitioningHandle;\n+        int bucketCount = handle.getBucketCount();\n+        return IntStream.range(0, bucketCount).mapToObj(KuduPartitionHandle::new).collect(toImmutableList());\n+    }\n+\n+    @Override\n+    public ConnectorBucketNodeMap getBucketNodeMap(ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorPartitioningHandle partitioningHandle)\n+    {\n+        KuduPartitioningHandle handle = (KuduPartitioningHandle) partitioningHandle;\n+        return createBucketNodeMap(handle.getBucketCount());\n+    }\n+\n+    @Override\n+    public ToIntFunction<ConnectorSplit> getSplitBucketFunction(ConnectorTransactionHandle transactionHandle,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM3ODA1MQ==", "bodyText": "Got it!", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r447378051", "createdAt": "2020-06-30T02:55:49Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduNodePartitioningProvider.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.connector.ConnectorBucketNodeMap;\n+import io.prestosql.spi.connector.ConnectorNodePartitioningProvider;\n+import io.prestosql.spi.connector.ConnectorPartitionHandle;\n+import io.prestosql.spi.connector.ConnectorPartitioningHandle;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorSplit;\n+import io.prestosql.spi.connector.ConnectorTransactionHandle;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import io.prestosql.spi.type.Type;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.function.ToIntFunction;\n+import java.util.stream.IntStream;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.connector.ConnectorBucketNodeMap.createBucketNodeMap;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduNodePartitioningProvider\n+        implements ConnectorNodePartitioningProvider\n+{\n+    private final KuduClientSession clientSession;\n+\n+    @Inject\n+    public KuduNodePartitioningProvider(KuduClientSession clientSession)\n+    {\n+        this.clientSession = requireNonNull(clientSession, \"clientSession is null\");\n+    }\n+\n+    @Override\n+    public List<ConnectorPartitionHandle> listPartitionHandles(\n+            ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorPartitioningHandle partitioningHandle)\n+    {\n+        KuduPartitioningHandle handle = (KuduPartitioningHandle) partitioningHandle;\n+        int bucketCount = handle.getBucketCount();\n+        return IntStream.range(0, bucketCount).mapToObj(KuduPartitionHandle::new).collect(toImmutableList());\n+    }\n+\n+    @Override\n+    public ConnectorBucketNodeMap getBucketNodeMap(ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorPartitioningHandle partitioningHandle)\n+    {\n+        KuduPartitioningHandle handle = (KuduPartitioningHandle) partitioningHandle;\n+        return createBucketNodeMap(handle.getBucketCount());\n+    }\n+\n+    @Override\n+    public ToIntFunction<ConnectorSplit> getSplitBucketFunction(ConnectorTransactionHandle transactionHandle,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA5NDc3Mw=="}, "originalCommit": null, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjQ1ODQ0OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNjoyODozOFrOGqYy1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNjoyODozOFrOGqYy1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA5OTYwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.bucketColumnIdIndexes = bucketColumnIdIndexes;\n          \n          \n            \n                    this.bucketColumnIdIndexes = ImmutableList.copyOf(requireNonNull(bucketColumnIdIndexes));", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r447099604", "createdAt": "2020-06-29T16:28:38Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+import org.apache.kudu.client.PartitionSchema.HashBucketSchema;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final int bucketCount;\n+    private final List<Integer> bucketColumnIdIndexes;\n+    private final List<Type> bucketChannelTypes;\n+\n+    private final List<HashBucketSchema> hashBucketSchemas;\n+    private final Schema schema;\n+\n+    KuduBucketFunction(int bucketCount, List<Integer> bucketColumnIdIndexes, List<Type> bucketChannelTypes, KuduTable kuduTable)\n+    {\n+        this.bucketCount = bucketCount;\n+        this.bucketColumnIdIndexes = bucketColumnIdIndexes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjQ2MDc5OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNjoyOToyMVrOGqY0cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNjoyOToyMVrOGqY0cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEwMDAxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.bucketChannelTypes = bucketChannelTypes;\n          \n          \n            \n                    this.bucketChannelTypes = ImmutableList.copyOf(requireNonNull(bucketChannelTypes));", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r447100019", "createdAt": "2020-06-29T16:29:21Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+import org.apache.kudu.client.PartitionSchema.HashBucketSchema;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final int bucketCount;\n+    private final List<Integer> bucketColumnIdIndexes;\n+    private final List<Type> bucketChannelTypes;\n+\n+    private final List<HashBucketSchema> hashBucketSchemas;\n+    private final Schema schema;\n+\n+    KuduBucketFunction(int bucketCount, List<Integer> bucketColumnIdIndexes, List<Type> bucketChannelTypes, KuduTable kuduTable)\n+    {\n+        this.bucketCount = bucketCount;\n+        this.bucketColumnIdIndexes = bucketColumnIdIndexes;\n+        this.bucketChannelTypes = bucketChannelTypes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjQ2ODA4OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNjozMDo1M1rOGqY4hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMzoxNDoxNFrOGqqEsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEwMTA2MA==", "bodyText": "Do we need this check on groupedExecution here ?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r447101060", "createdAt": "2020-06-29T16:30:53Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -375,7 +418,48 @@ public boolean usesLegacyTableLayouts()\n     public ConnectorTableProperties getTableProperties(ConnectorSession session, ConnectorTableHandle table)\n     {\n         KuduTableHandle handle = (KuduTableHandle) table;\n-        return new ConnectorTableProperties(handle.getConstraint(), Optional.empty(), Optional.empty(), Optional.empty(), ImmutableList.of());\n+        KuduTable kuduTable = handle.getTable(clientSession);\n+\n+        Optional<ConnectorTablePartitioning> tablePartitioning = Optional.empty();\n+        Optional<Set<ColumnHandle>> partitioningColumns = Optional.empty();\n+        List<LocalProperty<ColumnHandle>> localProperties = ImmutableList.of();\n+\n+        if (isKuduGroupedExecutionEnabled(session)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM4MjcwNQ==", "bodyText": "If we remove the check it will use grouped_execution strategy always once one/two table satisfied the condition of grouped_execution. So I suggest we keep this parameter as a switch.   :)", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r447382705", "createdAt": "2020-06-30T03:14:14Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -375,7 +418,48 @@ public boolean usesLegacyTableLayouts()\n     public ConnectorTableProperties getTableProperties(ConnectorSession session, ConnectorTableHandle table)\n     {\n         KuduTableHandle handle = (KuduTableHandle) table;\n-        return new ConnectorTableProperties(handle.getConstraint(), Optional.empty(), Optional.empty(), Optional.empty(), ImmutableList.of());\n+        KuduTable kuduTable = handle.getTable(clientSession);\n+\n+        Optional<ConnectorTablePartitioning> tablePartitioning = Optional.empty();\n+        Optional<Set<ColumnHandle>> partitioningColumns = Optional.empty();\n+        List<LocalProperty<ColumnHandle>> localProperties = ImmutableList.of();\n+\n+        if (isKuduGroupedExecutionEnabled(session)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEwMTA2MA=="}, "originalCommit": null, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjQ3MTI0OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNjozMTo0N1rOGqY6eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMzoxNzozNlrOGqqIUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEwMTU2MA==", "bodyText": "Isn't it redundant ?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r447101560", "createdAt": "2020-06-29T16:31:47Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -375,7 +418,48 @@ public boolean usesLegacyTableLayouts()\n     public ConnectorTableProperties getTableProperties(ConnectorSession session, ConnectorTableHandle table)\n     {\n         KuduTableHandle handle = (KuduTableHandle) table;\n-        return new ConnectorTableProperties(handle.getConstraint(), Optional.empty(), Optional.empty(), Optional.empty(), ImmutableList.of());\n+        KuduTable kuduTable = handle.getTable(clientSession);\n+\n+        Optional<ConnectorTablePartitioning> tablePartitioning = Optional.empty();\n+        Optional<Set<ColumnHandle>> partitioningColumns = Optional.empty();\n+        List<LocalProperty<ColumnHandle>> localProperties = ImmutableList.of();\n+\n+        if (isKuduGroupedExecutionEnabled(session)\n+                && isTableSupportGroupedExecution(kuduTable)\n+                && handle.getBucketCount().isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM4MzYzNQ==", "bodyText": "You are right, bucketCount will not be empty once PartitionSchema.getHashBucketSchemas is present.", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r447383635", "createdAt": "2020-06-30T03:17:36Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -375,7 +418,48 @@ public boolean usesLegacyTableLayouts()\n     public ConnectorTableProperties getTableProperties(ConnectorSession session, ConnectorTableHandle table)\n     {\n         KuduTableHandle handle = (KuduTableHandle) table;\n-        return new ConnectorTableProperties(handle.getConstraint(), Optional.empty(), Optional.empty(), Optional.empty(), ImmutableList.of());\n+        KuduTable kuduTable = handle.getTable(clientSession);\n+\n+        Optional<ConnectorTablePartitioning> tablePartitioning = Optional.empty();\n+        Optional<Set<ColumnHandle>> partitioningColumns = Optional.empty();\n+        List<LocalProperty<ColumnHandle>> localProperties = ImmutableList.of();\n+\n+        if (isKuduGroupedExecutionEnabled(session)\n+                && isTableSupportGroupedExecution(kuduTable)\n+                && handle.getBucketCount().isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEwMTU2MA=="}, "originalCommit": null, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjQ3NzU4OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNjozMzoyNFrOGqY-dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNjozMzoyNFrOGqY-dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEwMjU4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                bucketColumns.stream().map(KuduColumnHandle.class::cast).map(KuduColumnHandle::getType).collect(Collectors.toList())),\n          \n          \n            \n                                bucketColumns.stream()\n          \n          \n            \n                                        .map(KuduColumnHandle.class::cast)\n          \n          \n            \n                                        .map(KuduColumnHandle::getType)\n          \n          \n            \n                                        .collect(toImmutableList()))", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r447102580", "createdAt": "2020-06-29T16:33:24Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -375,7 +418,48 @@ public boolean usesLegacyTableLayouts()\n     public ConnectorTableProperties getTableProperties(ConnectorSession session, ConnectorTableHandle table)\n     {\n         KuduTableHandle handle = (KuduTableHandle) table;\n-        return new ConnectorTableProperties(handle.getConstraint(), Optional.empty(), Optional.empty(), Optional.empty(), ImmutableList.of());\n+        KuduTable kuduTable = handle.getTable(clientSession);\n+\n+        Optional<ConnectorTablePartitioning> tablePartitioning = Optional.empty();\n+        Optional<Set<ColumnHandle>> partitioningColumns = Optional.empty();\n+        List<LocalProperty<ColumnHandle>> localProperties = ImmutableList.of();\n+\n+        if (isKuduGroupedExecutionEnabled(session)\n+                && isTableSupportGroupedExecution(kuduTable)\n+                && handle.getBucketCount().isPresent()) {\n+            Map<String, ColumnHandle> columnMap = getColumnHandles(session, handle);\n+            List<Integer> bucketColumnIds = getBucketColumnIds(kuduTable);\n+            List<ColumnHandle> bucketColumns = getSpecifyColumns(kuduTable.getSchema(), bucketColumnIds, columnMap);\n+            tablePartitioning = Optional.of(new ConnectorTablePartitioning(\n+                new KuduPartitioningHandle(\n+                    handle.getSchemaTableName().getSchemaName(),\n+                    handle.getSchemaTableName().getTableName(),\n+                    handle.getBucketCount().getAsInt(),\n+                    bucketColumnIds,\n+                    bucketColumns.stream().map(KuduColumnHandle.class::cast).map(KuduColumnHandle::getType).collect(Collectors.toList())),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjQ4MDY3OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNjozNDoxNVrOGqZATg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNjozNDoxNVrOGqZATg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEwMzA1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        localProperties = rangeColumns.stream().map(columnHandle ->\n          \n          \n            \n                            new SortingProperty<>(columnHandle, SortOrder.ASC_NULLS_LAST)\n          \n          \n            \n                        ).collect(toImmutableList());\n          \n          \n            \n                        localProperties = rangeColumns.stream()\n          \n          \n            \n                                .map(columnHandle -> new SortingProperty<>(columnHandle, SortOrder.ASC_NULLS_LAST))\n          \n          \n            \n                                .collect(toImmutableList());", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r447103054", "createdAt": "2020-06-29T16:34:15Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -375,7 +418,48 @@ public boolean usesLegacyTableLayouts()\n     public ConnectorTableProperties getTableProperties(ConnectorSession session, ConnectorTableHandle table)\n     {\n         KuduTableHandle handle = (KuduTableHandle) table;\n-        return new ConnectorTableProperties(handle.getConstraint(), Optional.empty(), Optional.empty(), Optional.empty(), ImmutableList.of());\n+        KuduTable kuduTable = handle.getTable(clientSession);\n+\n+        Optional<ConnectorTablePartitioning> tablePartitioning = Optional.empty();\n+        Optional<Set<ColumnHandle>> partitioningColumns = Optional.empty();\n+        List<LocalProperty<ColumnHandle>> localProperties = ImmutableList.of();\n+\n+        if (isKuduGroupedExecutionEnabled(session)\n+                && isTableSupportGroupedExecution(kuduTable)\n+                && handle.getBucketCount().isPresent()) {\n+            Map<String, ColumnHandle> columnMap = getColumnHandles(session, handle);\n+            List<Integer> bucketColumnIds = getBucketColumnIds(kuduTable);\n+            List<ColumnHandle> bucketColumns = getSpecifyColumns(kuduTable.getSchema(), bucketColumnIds, columnMap);\n+            tablePartitioning = Optional.of(new ConnectorTablePartitioning(\n+                new KuduPartitioningHandle(\n+                    handle.getSchemaTableName().getSchemaName(),\n+                    handle.getSchemaTableName().getTableName(),\n+                    handle.getBucketCount().getAsInt(),\n+                    bucketColumnIds,\n+                    bucketColumns.stream().map(KuduColumnHandle.class::cast).map(KuduColumnHandle::getType).collect(Collectors.toList())),\n+                bucketColumns));\n+            partitioningColumns = Optional.of(ImmutableSet.copyOf(bucketColumns));\n+\n+            List<Integer> rangeColumnIds = kuduTable.getPartitionSchema().getRangeSchema().getColumnIds();\n+            List<ColumnHandle> rangeColumns = getSpecifyColumns(kuduTable.getSchema(), rangeColumnIds, columnMap);\n+            localProperties = rangeColumns.stream().map(columnHandle ->\n+                new SortingProperty<>(columnHandle, SortOrder.ASC_NULLS_LAST)\n+            ).collect(toImmutableList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjU0MDA0OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNjo0OToyNlrOGqZkhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNjo0OToyNlrOGqZkhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzExMjMyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return hashBucketSchemas.stream().map(HashBucketSchema::getColumnIds)\n          \n          \n            \n                            .flatMap(List<Integer>::stream).collect(toImmutableList());\n          \n          \n            \n                    return hashBucketSchemas.stream()\n          \n          \n            \n                            .map(HashBucketSchema::getColumnIds)\n          \n          \n            \n                            .flatMap(List<Integer>::stream)\n          \n          \n            \n                            .collect(toImmutableList());", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r447112327", "createdAt": "2020-06-29T16:49:26Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -375,7 +418,48 @@ public boolean usesLegacyTableLayouts()\n     public ConnectorTableProperties getTableProperties(ConnectorSession session, ConnectorTableHandle table)\n     {\n         KuduTableHandle handle = (KuduTableHandle) table;\n-        return new ConnectorTableProperties(handle.getConstraint(), Optional.empty(), Optional.empty(), Optional.empty(), ImmutableList.of());\n+        KuduTable kuduTable = handle.getTable(clientSession);\n+\n+        Optional<ConnectorTablePartitioning> tablePartitioning = Optional.empty();\n+        Optional<Set<ColumnHandle>> partitioningColumns = Optional.empty();\n+        List<LocalProperty<ColumnHandle>> localProperties = ImmutableList.of();\n+\n+        if (isKuduGroupedExecutionEnabled(session)\n+                && isTableSupportGroupedExecution(kuduTable)\n+                && handle.getBucketCount().isPresent()) {\n+            Map<String, ColumnHandle> columnMap = getColumnHandles(session, handle);\n+            List<Integer> bucketColumnIds = getBucketColumnIds(kuduTable);\n+            List<ColumnHandle> bucketColumns = getSpecifyColumns(kuduTable.getSchema(), bucketColumnIds, columnMap);\n+            tablePartitioning = Optional.of(new ConnectorTablePartitioning(\n+                new KuduPartitioningHandle(\n+                    handle.getSchemaTableName().getSchemaName(),\n+                    handle.getSchemaTableName().getTableName(),\n+                    handle.getBucketCount().getAsInt(),\n+                    bucketColumnIds,\n+                    bucketColumns.stream().map(KuduColumnHandle.class::cast).map(KuduColumnHandle::getType).collect(Collectors.toList())),\n+                bucketColumns));\n+            partitioningColumns = Optional.of(ImmutableSet.copyOf(bucketColumns));\n+\n+            List<Integer> rangeColumnIds = kuduTable.getPartitionSchema().getRangeSchema().getColumnIds();\n+            List<ColumnHandle> rangeColumns = getSpecifyColumns(kuduTable.getSchema(), rangeColumnIds, columnMap);\n+            localProperties = rangeColumns.stream().map(columnHandle ->\n+                new SortingProperty<>(columnHandle, SortOrder.ASC_NULLS_LAST)\n+            ).collect(toImmutableList());\n+        }\n+\n+        return new ConnectorTableProperties(\n+                handle.getConstraint(),\n+                tablePartitioning,\n+                partitioningColumns,\n+                Optional.empty(),\n+                localProperties);\n+    }\n+\n+    private List<Integer> getBucketColumnIds(KuduTable kuduTable)\n+    {\n+        List<HashBucketSchema> hashBucketSchemas = kuduTable.getPartitionSchema().getHashBucketSchemas();\n+        return hashBucketSchemas.stream().map(HashBucketSchema::getColumnIds)\n+                .flatMap(List<Integer>::stream).collect(toImmutableList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjU0OTU1OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNjo1MTo1MlrOGqZqeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMzo0MTozOVrOGqqgPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzExMzg0OQ==", "bodyText": "We need to populate only the row for bucketed columns right ?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r447113849", "createdAt": "2020-06-29T16:51:52Z", "author": {"login": "Praveen2112"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+import org.apache.kudu.client.PartitionSchema.HashBucketSchema;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final int bucketCount;\n+    private final List<Integer> bucketColumnIdIndexes;\n+    private final List<Type> bucketChannelTypes;\n+\n+    private final List<HashBucketSchema> hashBucketSchemas;\n+    private final Schema schema;\n+\n+    KuduBucketFunction(int bucketCount, List<Integer> bucketColumnIdIndexes, List<Type> bucketChannelTypes, KuduTable kuduTable)\n+    {\n+        this.bucketCount = bucketCount;\n+        this.bucketColumnIdIndexes = bucketColumnIdIndexes;\n+        this.bucketChannelTypes = bucketChannelTypes;\n+\n+        PartitionSchema partitionSchema = kuduTable.getPartitionSchema();\n+        this.hashBucketSchemas = partitionSchema.getHashBucketSchemas();\n+        this.schema = kuduTable.getSchema();\n+    }\n+\n+    @Override\n+    public int getBucket(Page page, int position)\n+    {\n+        return getBucketId(bucketChannelTypes, page, position);\n+    }\n+\n+    private int getBucketId(List<Type> types, Page page, int position)\n+    {\n+        PartialRow partialRow = new PartialRow(schema);\n+        List<Integer> bucketIds = this.hashBucketSchemas.stream().map(hashBucketSchema -> {\n+            for (int i = 0; i < page.getChannelCount(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM4ODkwMQ==", "bodyText": "Here page is generated by presto contains only bucketed columns. As you can see in the pic, table has 5 columns, and page only have 3 partition channels.", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r447388901", "createdAt": "2020-06-30T03:38:10Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+import org.apache.kudu.client.PartitionSchema.HashBucketSchema;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final int bucketCount;\n+    private final List<Integer> bucketColumnIdIndexes;\n+    private final List<Type> bucketChannelTypes;\n+\n+    private final List<HashBucketSchema> hashBucketSchemas;\n+    private final Schema schema;\n+\n+    KuduBucketFunction(int bucketCount, List<Integer> bucketColumnIdIndexes, List<Type> bucketChannelTypes, KuduTable kuduTable)\n+    {\n+        this.bucketCount = bucketCount;\n+        this.bucketColumnIdIndexes = bucketColumnIdIndexes;\n+        this.bucketChannelTypes = bucketChannelTypes;\n+\n+        PartitionSchema partitionSchema = kuduTable.getPartitionSchema();\n+        this.hashBucketSchemas = partitionSchema.getHashBucketSchemas();\n+        this.schema = kuduTable.getSchema();\n+    }\n+\n+    @Override\n+    public int getBucket(Page page, int position)\n+    {\n+        return getBucketId(bucketChannelTypes, page, position);\n+    }\n+\n+    private int getBucketId(List<Type> types, Page page, int position)\n+    {\n+        PartialRow partialRow = new PartialRow(schema);\n+        List<Integer> bucketIds = this.hashBucketSchemas.stream().map(hashBucketSchema -> {\n+            for (int i = 0; i < page.getChannelCount(); i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzExMzg0OQ=="}, "originalCommit": null, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM4OTc1Nw==", "bodyText": "", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r447389757", "createdAt": "2020-06-30T03:41:39Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+import org.apache.kudu.client.PartitionSchema.HashBucketSchema;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final int bucketCount;\n+    private final List<Integer> bucketColumnIdIndexes;\n+    private final List<Type> bucketChannelTypes;\n+\n+    private final List<HashBucketSchema> hashBucketSchemas;\n+    private final Schema schema;\n+\n+    KuduBucketFunction(int bucketCount, List<Integer> bucketColumnIdIndexes, List<Type> bucketChannelTypes, KuduTable kuduTable)\n+    {\n+        this.bucketCount = bucketCount;\n+        this.bucketColumnIdIndexes = bucketColumnIdIndexes;\n+        this.bucketChannelTypes = bucketChannelTypes;\n+\n+        PartitionSchema partitionSchema = kuduTable.getPartitionSchema();\n+        this.hashBucketSchemas = partitionSchema.getHashBucketSchemas();\n+        this.schema = kuduTable.getSchema();\n+    }\n+\n+    @Override\n+    public int getBucket(Page page, int position)\n+    {\n+        return getBucketId(bucketChannelTypes, page, position);\n+    }\n+\n+    private int getBucketId(List<Type> types, Page page, int position)\n+    {\n+        PartialRow partialRow = new PartialRow(schema);\n+        List<Integer> bucketIds = this.hashBucketSchemas.stream().map(hashBucketSchema -> {\n+            for (int i = 0; i < page.getChannelCount(); i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzExMzg0OQ=="}, "originalCommit": null, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTcxNTY1OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzoyMzo0NFrOGtyK1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOToxMTozNlrOGt12nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY2MTA3OA==", "bodyText": "checkArgument(bucketColumnIdIndexes.size() == bucketChannelTypes.size()) ?\ncheckArgument(bucketCount == bucketColumnIdIndexes.size())? If so do you need bucketCount at all?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450661078", "createdAt": "2020-07-07T07:23:44Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+import org.apache.kudu.client.PartitionSchema.HashBucketSchema;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final int bucketCount;\n+    private final List<Integer> bucketColumnIdIndexes;\n+    private final List<Type> bucketChannelTypes;\n+\n+    private final List<HashBucketSchema> hashBucketSchemas;\n+    private final Schema schema;\n+\n+    KuduBucketFunction(int bucketCount, List<Integer> bucketColumnIdIndexes, List<Type> bucketChannelTypes, KuduTable kuduTable)\n+    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcyMTQzNg==", "bodyText": "Yes, I will remove useless argument bucketCount.  :)", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450721436", "createdAt": "2020-07-07T09:11:36Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+import org.apache.kudu.client.PartitionSchema.HashBucketSchema;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final int bucketCount;\n+    private final List<Integer> bucketColumnIdIndexes;\n+    private final List<Type> bucketChannelTypes;\n+\n+    private final List<HashBucketSchema> hashBucketSchemas;\n+    private final Schema schema;\n+\n+    KuduBucketFunction(int bucketCount, List<Integer> bucketColumnIdIndexes, List<Type> bucketChannelTypes, KuduTable kuduTable)\n+    {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY2MTA3OA=="}, "originalCommit": null, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTcxNjk5OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzoyNDowN1rOGtyLpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOToxMzowOVrOGt156Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY2MTI4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final List<Integer> bucketColumnIdIndexes;\n          \n          \n            \n                private final List<Integer> bucketChannels;\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450661286", "createdAt": "2020-07-07T07:24:07Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+import org.apache.kudu.client.PartitionSchema.HashBucketSchema;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final int bucketCount;\n+    private final List<Integer> bucketColumnIdIndexes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcyMjI4MQ==", "bodyText": "Yes, sure!", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450722281", "createdAt": "2020-07-07T09:13:09Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+import org.apache.kudu.client.PartitionSchema.HashBucketSchema;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final int bucketCount;\n+    private final List<Integer> bucketColumnIdIndexes;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY2MTI4Ng=="}, "originalCommit": null, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTcyNDQzOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzoyNjo0NlrOGtyQew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOToxNDoyNlrOGt18nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY2MjUyMw==", "bodyText": "why do you pass field bucketChannelTypes to a method? This field is already accessible there.", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450662523", "createdAt": "2020-07-07T07:26:46Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+import org.apache.kudu.client.PartitionSchema.HashBucketSchema;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final int bucketCount;\n+    private final List<Integer> bucketColumnIdIndexes;\n+    private final List<Type> bucketChannelTypes;\n+\n+    private final List<HashBucketSchema> hashBucketSchemas;\n+    private final Schema schema;\n+\n+    KuduBucketFunction(int bucketCount, List<Integer> bucketColumnIdIndexes, List<Type> bucketChannelTypes, KuduTable kuduTable)\n+    {\n+        this.bucketCount = bucketCount;\n+        this.bucketColumnIdIndexes = ImmutableList.copyOf(requireNonNull(bucketColumnIdIndexes));\n+        this.bucketChannelTypes = ImmutableList.copyOf(requireNonNull(bucketChannelTypes));\n+\n+        PartitionSchema partitionSchema = kuduTable.getPartitionSchema();\n+        this.hashBucketSchemas = partitionSchema.getHashBucketSchemas();\n+        this.schema = kuduTable.getSchema();\n+    }\n+\n+    @Override\n+    public int getBucket(Page page, int position)\n+    {\n+        return getBucketId(bucketChannelTypes, page, position);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcyMjk3Mg==", "bodyText": "Yes, I will follow!", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450722972", "createdAt": "2020-07-07T09:14:26Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+import org.apache.kudu.client.PartitionSchema.HashBucketSchema;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final int bucketCount;\n+    private final List<Integer> bucketColumnIdIndexes;\n+    private final List<Type> bucketChannelTypes;\n+\n+    private final List<HashBucketSchema> hashBucketSchemas;\n+    private final Schema schema;\n+\n+    KuduBucketFunction(int bucketCount, List<Integer> bucketColumnIdIndexes, List<Type> bucketChannelTypes, KuduTable kuduTable)\n+    {\n+        this.bucketCount = bucketCount;\n+        this.bucketColumnIdIndexes = ImmutableList.copyOf(requireNonNull(bucketColumnIdIndexes));\n+        this.bucketChannelTypes = ImmutableList.copyOf(requireNonNull(bucketChannelTypes));\n+\n+        PartitionSchema partitionSchema = kuduTable.getPartitionSchema();\n+        this.hashBucketSchemas = partitionSchema.getHashBucketSchemas();\n+        this.schema = kuduTable.getSchema();\n+    }\n+\n+    @Override\n+    public int getBucket(Page page, int position)\n+    {\n+        return getBucketId(bucketChannelTypes, page, position);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY2MjUyMw=="}, "originalCommit": null, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTcyODY2OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzoyODoxMFrOGtyTMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOToxNTozMVrOGt1_GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY2MzIxNw==", "bodyText": "checkArgument(types.size() == page. getChannelCount())", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450663217", "createdAt": "2020-07-07T07:28:10Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+import org.apache.kudu.client.PartitionSchema.HashBucketSchema;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final int bucketCount;\n+    private final List<Integer> bucketColumnIdIndexes;\n+    private final List<Type> bucketChannelTypes;\n+\n+    private final List<HashBucketSchema> hashBucketSchemas;\n+    private final Schema schema;\n+\n+    KuduBucketFunction(int bucketCount, List<Integer> bucketColumnIdIndexes, List<Type> bucketChannelTypes, KuduTable kuduTable)\n+    {\n+        this.bucketCount = bucketCount;\n+        this.bucketColumnIdIndexes = ImmutableList.copyOf(requireNonNull(bucketColumnIdIndexes));\n+        this.bucketChannelTypes = ImmutableList.copyOf(requireNonNull(bucketChannelTypes));\n+\n+        PartitionSchema partitionSchema = kuduTable.getPartitionSchema();\n+        this.hashBucketSchemas = partitionSchema.getHashBucketSchemas();\n+        this.schema = kuduTable.getSchema();\n+    }\n+\n+    @Override\n+    public int getBucket(Page page, int position)\n+    {\n+        return getBucketId(bucketChannelTypes, page, position);\n+    }\n+\n+    private int getBucketId(List<Type> types, Page page, int position)\n+    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcyMzYwOA==", "bodyText": "Sure!", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450723608", "createdAt": "2020-07-07T09:15:31Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+import org.apache.kudu.client.PartitionSchema.HashBucketSchema;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final int bucketCount;\n+    private final List<Integer> bucketColumnIdIndexes;\n+    private final List<Type> bucketChannelTypes;\n+\n+    private final List<HashBucketSchema> hashBucketSchemas;\n+    private final Schema schema;\n+\n+    KuduBucketFunction(int bucketCount, List<Integer> bucketColumnIdIndexes, List<Type> bucketChannelTypes, KuduTable kuduTable)\n+    {\n+        this.bucketCount = bucketCount;\n+        this.bucketColumnIdIndexes = ImmutableList.copyOf(requireNonNull(bucketColumnIdIndexes));\n+        this.bucketChannelTypes = ImmutableList.copyOf(requireNonNull(bucketChannelTypes));\n+\n+        PartitionSchema partitionSchema = kuduTable.getPartitionSchema();\n+        this.hashBucketSchemas = partitionSchema.getHashBucketSchemas();\n+        this.schema = kuduTable.getSchema();\n+    }\n+\n+    @Override\n+    public int getBucket(Page page, int position)\n+    {\n+        return getBucketId(bucketChannelTypes, page, position);\n+    }\n+\n+    private int getBucketId(List<Type> types, Page page, int position)\n+    {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY2MzIxNw=="}, "originalCommit": null, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTczMjI5OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzoyOToyMFrOGtyVjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMjoyOToyOVrOGuV5cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY2MzgyMA==", "bodyText": "Please extract this loop to separate method then:\n        List<Integer> bucketIds = this.hashBucketSchemas.stream()\n                      .map(this::yourNewFancyMethod)\n                      .collect(...);\n\nRename i to channel", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450663820", "createdAt": "2020-07-07T07:29:20Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+import org.apache.kudu.client.PartitionSchema.HashBucketSchema;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final int bucketCount;\n+    private final List<Integer> bucketColumnIdIndexes;\n+    private final List<Type> bucketChannelTypes;\n+\n+    private final List<HashBucketSchema> hashBucketSchemas;\n+    private final Schema schema;\n+\n+    KuduBucketFunction(int bucketCount, List<Integer> bucketColumnIdIndexes, List<Type> bucketChannelTypes, KuduTable kuduTable)\n+    {\n+        this.bucketCount = bucketCount;\n+        this.bucketColumnIdIndexes = ImmutableList.copyOf(requireNonNull(bucketColumnIdIndexes));\n+        this.bucketChannelTypes = ImmutableList.copyOf(requireNonNull(bucketChannelTypes));\n+\n+        PartitionSchema partitionSchema = kuduTable.getPartitionSchema();\n+        this.hashBucketSchemas = partitionSchema.getHashBucketSchemas();\n+        this.schema = kuduTable.getSchema();\n+    }\n+\n+    @Override\n+    public int getBucket(Page page, int position)\n+    {\n+        return getBucketId(bucketChannelTypes, page, position);\n+    }\n+\n+    private int getBucketId(List<Type> types, Page page, int position)\n+    {\n+        PartialRow partialRow = new PartialRow(schema);\n+        List<Integer> bucketIds = this.hashBucketSchemas.stream().map(hashBucketSchema -> {\n+            for (int i = 0; i < page.getChannelCount(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0NjQ0OA==", "bodyText": "Agree!", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r451246448", "createdAt": "2020-07-08T02:29:29Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+import org.apache.kudu.client.PartitionSchema.HashBucketSchema;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final int bucketCount;\n+    private final List<Integer> bucketColumnIdIndexes;\n+    private final List<Type> bucketChannelTypes;\n+\n+    private final List<HashBucketSchema> hashBucketSchemas;\n+    private final Schema schema;\n+\n+    KuduBucketFunction(int bucketCount, List<Integer> bucketColumnIdIndexes, List<Type> bucketChannelTypes, KuduTable kuduTable)\n+    {\n+        this.bucketCount = bucketCount;\n+        this.bucketColumnIdIndexes = ImmutableList.copyOf(requireNonNull(bucketColumnIdIndexes));\n+        this.bucketChannelTypes = ImmutableList.copyOf(requireNonNull(bucketChannelTypes));\n+\n+        PartitionSchema partitionSchema = kuduTable.getPartitionSchema();\n+        this.hashBucketSchemas = partitionSchema.getHashBucketSchemas();\n+        this.schema = kuduTable.getSchema();\n+    }\n+\n+    @Override\n+    public int getBucket(Page page, int position)\n+    {\n+        return getBucketId(bucketChannelTypes, page, position);\n+    }\n+\n+    private int getBucketId(List<Type> types, Page page, int position)\n+    {\n+        PartialRow partialRow = new PartialRow(schema);\n+        List<Integer> bucketIds = this.hashBucketSchemas.stream().map(hashBucketSchema -> {\n+            for (int i = 0; i < page.getChannelCount(); i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY2MzgyMA=="}, "originalCommit": null, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTc0MzM3OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzozMjo1N1rOGtycaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzozMjo1N1rOGtycaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY2NTU3OQ==", "bodyText": "How about TINYINT and SMALLINT?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450665579", "createdAt": "2020-07-07T07:32:57Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+import org.apache.kudu.client.PartitionSchema.HashBucketSchema;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final int bucketCount;\n+    private final List<Integer> bucketColumnIdIndexes;\n+    private final List<Type> bucketChannelTypes;\n+\n+    private final List<HashBucketSchema> hashBucketSchemas;\n+    private final Schema schema;\n+\n+    KuduBucketFunction(int bucketCount, List<Integer> bucketColumnIdIndexes, List<Type> bucketChannelTypes, KuduTable kuduTable)\n+    {\n+        this.bucketCount = bucketCount;\n+        this.bucketColumnIdIndexes = ImmutableList.copyOf(requireNonNull(bucketColumnIdIndexes));\n+        this.bucketChannelTypes = ImmutableList.copyOf(requireNonNull(bucketChannelTypes));\n+\n+        PartitionSchema partitionSchema = kuduTable.getPartitionSchema();\n+        this.hashBucketSchemas = partitionSchema.getHashBucketSchemas();\n+        this.schema = kuduTable.getSchema();\n+    }\n+\n+    @Override\n+    public int getBucket(Page page, int position)\n+    {\n+        return getBucketId(bucketChannelTypes, page, position);\n+    }\n+\n+    private int getBucketId(List<Type> types, Page page, int position)\n+    {\n+        PartialRow partialRow = new PartialRow(schema);\n+        List<Integer> bucketIds = this.hashBucketSchemas.stream().map(hashBucketSchema -> {\n+            for (int i = 0; i < page.getChannelCount(); i++) {\n+                Block block = page.getBlock(i);\n+                Type type = types.get(i);\n+                if (type.equals(BOOLEAN)) {\n+                    partialRow.addBoolean(this.bucketColumnIdIndexes.get(i), BOOLEAN.getBoolean(block, position));\n+                }\n+                else if (type.equals(BIGINT) || type.equals(INTEGER)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTc0OTQ0OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzozNDo1M1rOGtygbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzozNDo1M1rOGtygbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY2NjYwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                throw new UnsupportedOperationException(\"Computation of Kudu bucket hashCode is not supported for type: \" + type);\n          \n          \n            \n                                throw new UnsupportedOperationException(\"Grouped execution is not supported for type: \" + type);", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450666604", "createdAt": "2020-07-07T07:34:53Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+import org.apache.kudu.client.PartitionSchema.HashBucketSchema;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final int bucketCount;\n+    private final List<Integer> bucketColumnIdIndexes;\n+    private final List<Type> bucketChannelTypes;\n+\n+    private final List<HashBucketSchema> hashBucketSchemas;\n+    private final Schema schema;\n+\n+    KuduBucketFunction(int bucketCount, List<Integer> bucketColumnIdIndexes, List<Type> bucketChannelTypes, KuduTable kuduTable)\n+    {\n+        this.bucketCount = bucketCount;\n+        this.bucketColumnIdIndexes = ImmutableList.copyOf(requireNonNull(bucketColumnIdIndexes));\n+        this.bucketChannelTypes = ImmutableList.copyOf(requireNonNull(bucketChannelTypes));\n+\n+        PartitionSchema partitionSchema = kuduTable.getPartitionSchema();\n+        this.hashBucketSchemas = partitionSchema.getHashBucketSchemas();\n+        this.schema = kuduTable.getSchema();\n+    }\n+\n+    @Override\n+    public int getBucket(Page page, int position)\n+    {\n+        return getBucketId(bucketChannelTypes, page, position);\n+    }\n+\n+    private int getBucketId(List<Type> types, Page page, int position)\n+    {\n+        PartialRow partialRow = new PartialRow(schema);\n+        List<Integer> bucketIds = this.hashBucketSchemas.stream().map(hashBucketSchema -> {\n+            for (int i = 0; i < page.getChannelCount(); i++) {\n+                Block block = page.getBlock(i);\n+                Type type = types.get(i);\n+                if (type.equals(BOOLEAN)) {\n+                    partialRow.addBoolean(this.bucketColumnIdIndexes.get(i), BOOLEAN.getBoolean(block, position));\n+                }\n+                else if (type.equals(BIGINT) || type.equals(INTEGER)) {\n+                    partialRow.addLong(this.bucketColumnIdIndexes.get(i), type.getLong(block, position));\n+                }\n+                else if (type.equals(DOUBLE)) {\n+                    partialRow.addDouble(this.bucketColumnIdIndexes.get(i), type.getDouble(block, position));\n+                }\n+                else if (type.equals(VARCHAR)) {\n+                    partialRow.addString(this.bucketColumnIdIndexes.get(i), type.getSlice(block, position).toStringUtf8());\n+                }\n+                else {\n+                    throw new UnsupportedOperationException(\"Computation of Kudu bucket hashCode is not supported for type: \" + type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTc1ODE2OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzozNzozMlrOGtyl4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMDoxNTo1M1rOGuhcXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY2ODAwMw==", "bodyText": "Extract variable for this.bucketColumnIdIndexes.get(i)", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450668003", "createdAt": "2020-07-07T07:37:32Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+import org.apache.kudu.client.PartitionSchema.HashBucketSchema;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final int bucketCount;\n+    private final List<Integer> bucketColumnIdIndexes;\n+    private final List<Type> bucketChannelTypes;\n+\n+    private final List<HashBucketSchema> hashBucketSchemas;\n+    private final Schema schema;\n+\n+    KuduBucketFunction(int bucketCount, List<Integer> bucketColumnIdIndexes, List<Type> bucketChannelTypes, KuduTable kuduTable)\n+    {\n+        this.bucketCount = bucketCount;\n+        this.bucketColumnIdIndexes = ImmutableList.copyOf(requireNonNull(bucketColumnIdIndexes));\n+        this.bucketChannelTypes = ImmutableList.copyOf(requireNonNull(bucketChannelTypes));\n+\n+        PartitionSchema partitionSchema = kuduTable.getPartitionSchema();\n+        this.hashBucketSchemas = partitionSchema.getHashBucketSchemas();\n+        this.schema = kuduTable.getSchema();\n+    }\n+\n+    @Override\n+    public int getBucket(Page page, int position)\n+    {\n+        return getBucketId(bucketChannelTypes, page, position);\n+    }\n+\n+    private int getBucketId(List<Type> types, Page page, int position)\n+    {\n+        PartialRow partialRow = new PartialRow(schema);\n+        List<Integer> bucketIds = this.hashBucketSchemas.stream().map(hashBucketSchema -> {\n+            for (int i = 0; i < page.getChannelCount(); i++) {\n+                Block block = page.getBlock(i);\n+                Type type = types.get(i);\n+                if (type.equals(BOOLEAN)) {\n+                    partialRow.addBoolean(this.bucketColumnIdIndexes.get(i), BOOLEAN.getBoolean(block, position));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQzNTYxMw==", "bodyText": "agree", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r451435613", "createdAt": "2020-07-08T10:15:53Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+import org.apache.kudu.client.PartitionSchema.HashBucketSchema;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final int bucketCount;\n+    private final List<Integer> bucketColumnIdIndexes;\n+    private final List<Type> bucketChannelTypes;\n+\n+    private final List<HashBucketSchema> hashBucketSchemas;\n+    private final Schema schema;\n+\n+    KuduBucketFunction(int bucketCount, List<Integer> bucketColumnIdIndexes, List<Type> bucketChannelTypes, KuduTable kuduTable)\n+    {\n+        this.bucketCount = bucketCount;\n+        this.bucketColumnIdIndexes = ImmutableList.copyOf(requireNonNull(bucketColumnIdIndexes));\n+        this.bucketChannelTypes = ImmutableList.copyOf(requireNonNull(bucketChannelTypes));\n+\n+        PartitionSchema partitionSchema = kuduTable.getPartitionSchema();\n+        this.hashBucketSchemas = partitionSchema.getHashBucketSchemas();\n+        this.schema = kuduTable.getSchema();\n+    }\n+\n+    @Override\n+    public int getBucket(Page page, int position)\n+    {\n+        return getBucketId(bucketChannelTypes, page, position);\n+    }\n+\n+    private int getBucketId(List<Type> types, Page page, int position)\n+    {\n+        PartialRow partialRow = new PartialRow(schema);\n+        List<Integer> bucketIds = this.hashBucketSchemas.stream().map(hashBucketSchema -> {\n+            for (int i = 0; i < page.getChannelCount(); i++) {\n+                Block block = page.getBlock(i);\n+                Type type = types.get(i);\n+                if (type.equals(BOOLEAN)) {\n+                    partialRow.addBoolean(this.bucketColumnIdIndexes.get(i), BOOLEAN.getBoolean(block, position));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY2ODAwMw=="}, "originalCommit": null, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTc3MDM2OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo0MTozM1rOGtyt9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOTo0MzowNFrOGt2_xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3MDA3MQ==", "bodyText": "Why not to use java.util.Arrays#hashCode(java.lang.Object[]) instead of calculating hash on your own?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450670071", "createdAt": "2020-07-07T07:41:33Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+import org.apache.kudu.client.PartitionSchema.HashBucketSchema;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final int bucketCount;\n+    private final List<Integer> bucketColumnIdIndexes;\n+    private final List<Type> bucketChannelTypes;\n+\n+    private final List<HashBucketSchema> hashBucketSchemas;\n+    private final Schema schema;\n+\n+    KuduBucketFunction(int bucketCount, List<Integer> bucketColumnIdIndexes, List<Type> bucketChannelTypes, KuduTable kuduTable)\n+    {\n+        this.bucketCount = bucketCount;\n+        this.bucketColumnIdIndexes = ImmutableList.copyOf(requireNonNull(bucketColumnIdIndexes));\n+        this.bucketChannelTypes = ImmutableList.copyOf(requireNonNull(bucketChannelTypes));\n+\n+        PartitionSchema partitionSchema = kuduTable.getPartitionSchema();\n+        this.hashBucketSchemas = partitionSchema.getHashBucketSchemas();\n+        this.schema = kuduTable.getSchema();\n+    }\n+\n+    @Override\n+    public int getBucket(Page page, int position)\n+    {\n+        return getBucketId(bucketChannelTypes, page, position);\n+    }\n+\n+    private int getBucketId(List<Type> types, Page page, int position)\n+    {\n+        PartialRow partialRow = new PartialRow(schema);\n+        List<Integer> bucketIds = this.hashBucketSchemas.stream().map(hashBucketSchema -> {\n+            for (int i = 0; i < page.getChannelCount(); i++) {\n+                Block block = page.getBlock(i);\n+                Type type = types.get(i);\n+                if (type.equals(BOOLEAN)) {\n+                    partialRow.addBoolean(this.bucketColumnIdIndexes.get(i), BOOLEAN.getBoolean(block, position));\n+                }\n+                else if (type.equals(BIGINT) || type.equals(INTEGER)) {\n+                    partialRow.addLong(this.bucketColumnIdIndexes.get(i), type.getLong(block, position));\n+                }\n+                else if (type.equals(DOUBLE)) {\n+                    partialRow.addDouble(this.bucketColumnIdIndexes.get(i), type.getDouble(block, position));\n+                }\n+                else if (type.equals(VARCHAR)) {\n+                    partialRow.addString(this.bucketColumnIdIndexes.get(i), type.getSlice(block, position).toStringUtf8());\n+                }\n+                else {\n+                    throw new UnsupportedOperationException(\"Computation of Kudu bucket hashCode is not supported for type: \" + type);\n+                }\n+            }\n+            return KeyEncoderAccessor.getHashBucket(partialRow, hashBucketSchema);\n+        }).collect(toImmutableList());\n+\n+        int bucketId = 0;\n+        for (int i = 0; i < bucketIds.size(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDczNzU5MQ==", "bodyText": "Sorry, I have to explain this, I am not calculating hash code here, these codes are calculating the index of bucket number(bucketId) in multilevel-partitioning (or singlelevel-partitioning).", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450737591", "createdAt": "2020-07-07T09:38:49Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+import org.apache.kudu.client.PartitionSchema.HashBucketSchema;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final int bucketCount;\n+    private final List<Integer> bucketColumnIdIndexes;\n+    private final List<Type> bucketChannelTypes;\n+\n+    private final List<HashBucketSchema> hashBucketSchemas;\n+    private final Schema schema;\n+\n+    KuduBucketFunction(int bucketCount, List<Integer> bucketColumnIdIndexes, List<Type> bucketChannelTypes, KuduTable kuduTable)\n+    {\n+        this.bucketCount = bucketCount;\n+        this.bucketColumnIdIndexes = ImmutableList.copyOf(requireNonNull(bucketColumnIdIndexes));\n+        this.bucketChannelTypes = ImmutableList.copyOf(requireNonNull(bucketChannelTypes));\n+\n+        PartitionSchema partitionSchema = kuduTable.getPartitionSchema();\n+        this.hashBucketSchemas = partitionSchema.getHashBucketSchemas();\n+        this.schema = kuduTable.getSchema();\n+    }\n+\n+    @Override\n+    public int getBucket(Page page, int position)\n+    {\n+        return getBucketId(bucketChannelTypes, page, position);\n+    }\n+\n+    private int getBucketId(List<Type> types, Page page, int position)\n+    {\n+        PartialRow partialRow = new PartialRow(schema);\n+        List<Integer> bucketIds = this.hashBucketSchemas.stream().map(hashBucketSchema -> {\n+            for (int i = 0; i < page.getChannelCount(); i++) {\n+                Block block = page.getBlock(i);\n+                Type type = types.get(i);\n+                if (type.equals(BOOLEAN)) {\n+                    partialRow.addBoolean(this.bucketColumnIdIndexes.get(i), BOOLEAN.getBoolean(block, position));\n+                }\n+                else if (type.equals(BIGINT) || type.equals(INTEGER)) {\n+                    partialRow.addLong(this.bucketColumnIdIndexes.get(i), type.getLong(block, position));\n+                }\n+                else if (type.equals(DOUBLE)) {\n+                    partialRow.addDouble(this.bucketColumnIdIndexes.get(i), type.getDouble(block, position));\n+                }\n+                else if (type.equals(VARCHAR)) {\n+                    partialRow.addString(this.bucketColumnIdIndexes.get(i), type.getSlice(block, position).toStringUtf8());\n+                }\n+                else {\n+                    throw new UnsupportedOperationException(\"Computation of Kudu bucket hashCode is not supported for type: \" + type);\n+                }\n+            }\n+            return KeyEncoderAccessor.getHashBucket(partialRow, hashBucketSchema);\n+        }).collect(toImmutableList());\n+\n+        int bucketId = 0;\n+        for (int i = 0; i < bucketIds.size(); i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3MDA3MQ=="}, "originalCommit": null, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc0MDE2NQ==", "bodyText": "", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450740165", "createdAt": "2020-07-07T09:43:04Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+import org.apache.kudu.client.PartitionSchema.HashBucketSchema;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final int bucketCount;\n+    private final List<Integer> bucketColumnIdIndexes;\n+    private final List<Type> bucketChannelTypes;\n+\n+    private final List<HashBucketSchema> hashBucketSchemas;\n+    private final Schema schema;\n+\n+    KuduBucketFunction(int bucketCount, List<Integer> bucketColumnIdIndexes, List<Type> bucketChannelTypes, KuduTable kuduTable)\n+    {\n+        this.bucketCount = bucketCount;\n+        this.bucketColumnIdIndexes = ImmutableList.copyOf(requireNonNull(bucketColumnIdIndexes));\n+        this.bucketChannelTypes = ImmutableList.copyOf(requireNonNull(bucketChannelTypes));\n+\n+        PartitionSchema partitionSchema = kuduTable.getPartitionSchema();\n+        this.hashBucketSchemas = partitionSchema.getHashBucketSchemas();\n+        this.schema = kuduTable.getSchema();\n+    }\n+\n+    @Override\n+    public int getBucket(Page page, int position)\n+    {\n+        return getBucketId(bucketChannelTypes, page, position);\n+    }\n+\n+    private int getBucketId(List<Type> types, Page page, int position)\n+    {\n+        PartialRow partialRow = new PartialRow(schema);\n+        List<Integer> bucketIds = this.hashBucketSchemas.stream().map(hashBucketSchema -> {\n+            for (int i = 0; i < page.getChannelCount(); i++) {\n+                Block block = page.getBlock(i);\n+                Type type = types.get(i);\n+                if (type.equals(BOOLEAN)) {\n+                    partialRow.addBoolean(this.bucketColumnIdIndexes.get(i), BOOLEAN.getBoolean(block, position));\n+                }\n+                else if (type.equals(BIGINT) || type.equals(INTEGER)) {\n+                    partialRow.addLong(this.bucketColumnIdIndexes.get(i), type.getLong(block, position));\n+                }\n+                else if (type.equals(DOUBLE)) {\n+                    partialRow.addDouble(this.bucketColumnIdIndexes.get(i), type.getDouble(block, position));\n+                }\n+                else if (type.equals(VARCHAR)) {\n+                    partialRow.addString(this.bucketColumnIdIndexes.get(i), type.getSlice(block, position).toStringUtf8());\n+                }\n+                else {\n+                    throw new UnsupportedOperationException(\"Computation of Kudu bucket hashCode is not supported for type: \" + type);\n+                }\n+            }\n+            return KeyEncoderAccessor.getHashBucket(partialRow, hashBucketSchema);\n+        }).collect(toImmutableList());\n+\n+        int bucketId = 0;\n+        for (int i = 0; i < bucketIds.size(); i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3MDA3MQ=="}, "originalCommit": null, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTc3Mzg2OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduClientConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo0Mjo0M1rOGtywXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOTo0NzoxMFrOGt3JnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3MDY4NQ==", "bodyText": "kudu.grouped-execution.enabled?\nLet's have it disabled by default, instead of naming this experimental.", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450670685", "createdAt": "2020-07-07T07:42:43Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduClientConfig.java", "diffHunk": "@@ -138,4 +139,15 @@ public KuduClientConfig setSchemaEmulationEnabled(boolean enabled)\n         this.schemaEmulationEnabled = enabled;\n         return this;\n     }\n+\n+    @Config(\"experimental.grouped_execution\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc0MjY4NA==", "bodyText": "Yes, it's disabled by default!  :)", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450742684", "createdAt": "2020-07-07T09:47:10Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduClientConfig.java", "diffHunk": "@@ -138,4 +139,15 @@ public KuduClientConfig setSchemaEmulationEnabled(boolean enabled)\n         this.schemaEmulationEnabled = enabled;\n         return this;\n     }\n+\n+    @Config(\"experimental.grouped_execution\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3MDY4NQ=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTc3NDY3OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduClientConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo0Mjo1OVrOGtyw5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOTo1MDoxNFrOGt3Q1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3MDgyMA==", "bodyText": "you have missing return this;", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450670820", "createdAt": "2020-07-07T07:42:59Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduClientConfig.java", "diffHunk": "@@ -138,4 +139,15 @@ public KuduClientConfig setSchemaEmulationEnabled(boolean enabled)\n         this.schemaEmulationEnabled = enabled;\n         return this;\n     }\n+\n+    @Config(\"experimental.grouped_execution\")\n+    public void setGroupedExecutionEnabled(boolean groupedExecutionEnabled)\n+    {\n+        this.groupedExecutionEnabled = groupedExecutionEnabled;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc0NDUzNA==", "bodyText": "Sure I will add return this;   :)\nJust curious why we have to do this, a coding rule or something Presto needed?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450744534", "createdAt": "2020-07-07T09:50:14Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduClientConfig.java", "diffHunk": "@@ -138,4 +139,15 @@ public KuduClientConfig setSchemaEmulationEnabled(boolean enabled)\n         this.schemaEmulationEnabled = enabled;\n         return this;\n     }\n+\n+    @Config(\"experimental.grouped_execution\")\n+    public void setGroupedExecutionEnabled(boolean groupedExecutionEnabled)\n+    {\n+        this.groupedExecutionEnabled = groupedExecutionEnabled;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3MDgyMA=="}, "originalCommit": null, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTc4MTI3OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduClientSession.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo0NTowN1rOGty0-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOTo1NzowM1rOGt3gbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3MTg2NQ==", "bodyText": "why do we have bucket numbers in generic split? Shouldn't this be only available when grouped execution is enabled?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450671865", "createdAt": "2020-07-07T07:45:07Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduClientSession.java", "diffHunk": "@@ -203,9 +203,11 @@ public Schema getTableSchema(KuduTableHandle tableHandle)\n         builder.setProjectedColumnIndexes(columnIndexes);\n \n         List<KuduScanToken> tokens = builder.build();\n-        return tokens.stream()\n-                .map(token -> toKuduSplit(tableHandle, token, primaryKeyColumnCount))\n-                .collect(toImmutableList());\n+        ImmutableList.Builder<KuduSplit> tokenBuilder = ImmutableList.builder();\n+        for (int bucketNumber = 0; bucketNumber < tokens.size(); bucketNumber++) {\n+            tokenBuilder.add(toKuduSplit(tableHandle, tokens.get(bucketNumber), primaryKeyColumnCount, bucketNumber));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc0ODUyNQ==", "bodyText": "Sorry, this is a naming error, I will change it to tokenId. When grouped_execution is disabled, tokens will be created according to the constraint of SQL. TabletIds usually.", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450748525", "createdAt": "2020-07-07T09:57:03Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduClientSession.java", "diffHunk": "@@ -203,9 +203,11 @@ public Schema getTableSchema(KuduTableHandle tableHandle)\n         builder.setProjectedColumnIndexes(columnIndexes);\n \n         List<KuduScanToken> tokens = builder.build();\n-        return tokens.stream()\n-                .map(token -> toKuduSplit(tableHandle, token, primaryKeyColumnCount))\n-                .collect(toImmutableList());\n+        ImmutableList.Builder<KuduSplit> tokenBuilder = ImmutableList.builder();\n+        for (int bucketNumber = 0; bucketNumber < tokens.size(); bucketNumber++) {\n+            tokenBuilder.add(toKuduSplit(tableHandle, tokens.get(bucketNumber), primaryKeyColumnCount, bucketNumber));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3MTg2NQ=="}, "originalCommit": null, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTc4MzU2OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo0NTo1MVrOGty2Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOTo1OToyMVrOGt3lRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3MjIyNg==", "bodyText": "either all arguments are in separate line or none.", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450672226", "createdAt": "2020-07-07T07:45:51Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -193,13 +207,45 @@ public KuduTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n     {\n         try {\n             KuduTable table = clientSession.openTable(schemaTableName);\n-            return new KuduTableHandle(schemaTableName, table, TupleDomain.all(), Optional.empty(), false);\n+            return new KuduTableHandle(schemaTableName, table, TupleDomain.all(), Optional.empty(), false,\n+                    getTableBucketCount(schemaTableName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc0OTc2Nw==", "bodyText": "Yes, I agree!", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450749767", "createdAt": "2020-07-07T09:59:21Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -193,13 +207,45 @@ public KuduTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n     {\n         try {\n             KuduTable table = clientSession.openTable(schemaTableName);\n-            return new KuduTableHandle(schemaTableName, table, TupleDomain.all(), Optional.empty(), false);\n+            return new KuduTableHandle(schemaTableName, table, TupleDomain.all(), Optional.empty(), false,\n+                    getTableBucketCount(schemaTableName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3MjIyNg=="}, "originalCommit": null, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTc5MjQ0OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo0ODozOVrOGty72g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDowNzo1NVrOGt33qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3MzYyNg==", "bodyText": "Please narrow the exception type that catch?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450673626", "createdAt": "2020-07-07T07:48:39Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -193,13 +207,45 @@ public KuduTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n     {\n         try {\n             KuduTable table = clientSession.openTable(schemaTableName);\n-            return new KuduTableHandle(schemaTableName, table, TupleDomain.all(), Optional.empty(), false);\n+            return new KuduTableHandle(schemaTableName, table, TupleDomain.all(), Optional.empty(), false,\n+                    getTableBucketCount(schemaTableName));\n         }\n         catch (NotFoundException e) {\n             return null;\n         }\n     }\n \n+    private OptionalInt getTableBucketCount(SchemaTableName schemaTableName)\n+    {\n+        KuduTable table = clientSession.openTable(schemaTableName);\n+        return OptionalInt.of(getHashPartitionCount(table) * getRangePartitionCount(table));\n+    }\n+\n+    private int getHashPartitionCount(KuduTable table)\n+    {\n+        int hashBucketCount = 1;\n+        List<HashBucketSchema> bucketSchemas = table.getPartitionSchema().getHashBucketSchemas();\n+        if (bucketSchemas != null && !bucketSchemas.isEmpty()) {\n+            hashBucketCount = bucketSchemas.stream()\n+                    .mapToInt(HashBucketSchema::getNumBuckets)\n+                    .reduce(1, Math::multiplyExact);\n+        }\n+        return hashBucketCount;\n+    }\n+\n+    private int getRangePartitionCount(KuduTable table)\n+    {\n+        int rangePartitionCount = 1;\n+        try {\n+            List<Partition> rangePartitions = table.getRangePartitions(999);\n+            rangePartitionCount = rangePartitions.size() > 0 ? rangePartitions.size() : 1;\n+        }\n+        catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc1NDQ3NQ==", "bodyText": "I have checked the api, table.getRangePartitions(999); will throw an Exception in method KuduScanToken#build().", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450754475", "createdAt": "2020-07-07T10:07:55Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -193,13 +207,45 @@ public KuduTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n     {\n         try {\n             KuduTable table = clientSession.openTable(schemaTableName);\n-            return new KuduTableHandle(schemaTableName, table, TupleDomain.all(), Optional.empty(), false);\n+            return new KuduTableHandle(schemaTableName, table, TupleDomain.all(), Optional.empty(), false,\n+                    getTableBucketCount(schemaTableName));\n         }\n         catch (NotFoundException e) {\n             return null;\n         }\n     }\n \n+    private OptionalInt getTableBucketCount(SchemaTableName schemaTableName)\n+    {\n+        KuduTable table = clientSession.openTable(schemaTableName);\n+        return OptionalInt.of(getHashPartitionCount(table) * getRangePartitionCount(table));\n+    }\n+\n+    private int getHashPartitionCount(KuduTable table)\n+    {\n+        int hashBucketCount = 1;\n+        List<HashBucketSchema> bucketSchemas = table.getPartitionSchema().getHashBucketSchemas();\n+        if (bucketSchemas != null && !bucketSchemas.isEmpty()) {\n+            hashBucketCount = bucketSchemas.stream()\n+                    .mapToInt(HashBucketSchema::getNumBuckets)\n+                    .reduce(1, Math::multiplyExact);\n+        }\n+        return hashBucketCount;\n+    }\n+\n+    private int getRangePartitionCount(KuduTable table)\n+    {\n+        int rangePartitionCount = 1;\n+        try {\n+            List<Partition> rangePartitions = table.getRangePartitions(999);\n+            rangePartitionCount = rangePartitions.size() > 0 ? rangePartitions.size() : 1;\n+        }\n+        catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3MzYyNg=="}, "originalCommit": null, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTc5MzAzOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo0ODo1MVrOGty8Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDoxMDo1N1rOGt398g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3MzcxNA==", "bodyText": "Shouldn't we fail instead?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450673714", "createdAt": "2020-07-07T07:48:51Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -193,13 +207,45 @@ public KuduTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n     {\n         try {\n             KuduTable table = clientSession.openTable(schemaTableName);\n-            return new KuduTableHandle(schemaTableName, table, TupleDomain.all(), Optional.empty(), false);\n+            return new KuduTableHandle(schemaTableName, table, TupleDomain.all(), Optional.empty(), false,\n+                    getTableBucketCount(schemaTableName));\n         }\n         catch (NotFoundException e) {\n             return null;\n         }\n     }\n \n+    private OptionalInt getTableBucketCount(SchemaTableName schemaTableName)\n+    {\n+        KuduTable table = clientSession.openTable(schemaTableName);\n+        return OptionalInt.of(getHashPartitionCount(table) * getRangePartitionCount(table));\n+    }\n+\n+    private int getHashPartitionCount(KuduTable table)\n+    {\n+        int hashBucketCount = 1;\n+        List<HashBucketSchema> bucketSchemas = table.getPartitionSchema().getHashBucketSchemas();\n+        if (bucketSchemas != null && !bucketSchemas.isEmpty()) {\n+            hashBucketCount = bucketSchemas.stream()\n+                    .mapToInt(HashBucketSchema::getNumBuckets)\n+                    .reduce(1, Math::multiplyExact);\n+        }\n+        return hashBucketCount;\n+    }\n+\n+    private int getRangePartitionCount(KuduTable table)\n+    {\n+        int rangePartitionCount = 1;\n+        try {\n+            List<Partition> rangePartitions = table.getRangePartitions(999);\n+            rangePartitionCount = rangePartitions.size() > 0 ? rangePartitions.size() : 1;\n+        }\n+        catch (Exception e) {\n+            log.error(e, e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc1NjA4Mg==", "bodyText": "Well, what should I do to fail a job here?  :)", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450756082", "createdAt": "2020-07-07T10:10:57Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -193,13 +207,45 @@ public KuduTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n     {\n         try {\n             KuduTable table = clientSession.openTable(schemaTableName);\n-            return new KuduTableHandle(schemaTableName, table, TupleDomain.all(), Optional.empty(), false);\n+            return new KuduTableHandle(schemaTableName, table, TupleDomain.all(), Optional.empty(), false,\n+                    getTableBucketCount(schemaTableName));\n         }\n         catch (NotFoundException e) {\n             return null;\n         }\n     }\n \n+    private OptionalInt getTableBucketCount(SchemaTableName schemaTableName)\n+    {\n+        KuduTable table = clientSession.openTable(schemaTableName);\n+        return OptionalInt.of(getHashPartitionCount(table) * getRangePartitionCount(table));\n+    }\n+\n+    private int getHashPartitionCount(KuduTable table)\n+    {\n+        int hashBucketCount = 1;\n+        List<HashBucketSchema> bucketSchemas = table.getPartitionSchema().getHashBucketSchemas();\n+        if (bucketSchemas != null && !bucketSchemas.isEmpty()) {\n+            hashBucketCount = bucketSchemas.stream()\n+                    .mapToInt(HashBucketSchema::getNumBuckets)\n+                    .reduce(1, Math::multiplyExact);\n+        }\n+        return hashBucketCount;\n+    }\n+\n+    private int getRangePartitionCount(KuduTable table)\n+    {\n+        int rangePartitionCount = 1;\n+        try {\n+            List<Partition> rangePartitions = table.getRangePartitions(999);\n+            rangePartitionCount = rangePartitions.size() > 0 ? rangePartitions.size() : 1;\n+        }\n+        catch (Exception e) {\n+            log.error(e, e.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3MzcxNA=="}, "originalCommit": null, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTc5Nzk5OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo1MDoxOVrOGty_PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzo1NzoxMlrOGvF7bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3NDQ5Mw==", "bodyText": "Please move this method to KuduTable, so you can kuduTable.supportGroupedExecution()", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450674493", "createdAt": "2020-07-07T07:50:19Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -347,6 +393,20 @@ public ConnectorOutputTableHandle beginCreateTable(\n         return Optional.empty();\n     }\n \n+    private boolean isTableSupportGroupedExecution(KuduTable kuduTable)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc1ODg0Mw==", "bodyText": "Well, KuduTable is a class in third dependency kudu-client.jar, I don't know how to do this. May I just keep it?   :)", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450758843", "createdAt": "2020-07-07T10:16:15Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -347,6 +393,20 @@ public ConnectorOutputTableHandle beginCreateTable(\n         return Optional.empty();\n     }\n \n+    private boolean isTableSupportGroupedExecution(KuduTable kuduTable)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3NDQ5Mw=="}, "originalCommit": null, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAzMzM4OQ==", "bodyText": "sounds good. Then make it just static", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r452033389", "createdAt": "2020-07-09T07:57:12Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -347,6 +393,20 @@ public ConnectorOutputTableHandle beginCreateTable(\n         return Optional.empty();\n     }\n \n+    private boolean isTableSupportGroupedExecution(KuduTable kuduTable)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3NDQ5Mw=="}, "originalCommit": null, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTgwMTc2OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo1MToyOFrOGtzBrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDoxNzoyNVrOGt4LSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3NTExNg==", "bodyText": "please move this method under the usage", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450675116", "createdAt": "2020-07-07T07:51:28Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -347,6 +393,20 @@ public ConnectorOutputTableHandle beginCreateTable(\n         return Optional.empty();\n     }\n \n+    private boolean isTableSupportGroupedExecution(KuduTable kuduTable)\n+    {\n+        return !kuduTable.getPartitionSchema().getHashBucketSchemas().isEmpty();\n+    }\n+\n+    private List<ColumnHandle> getSpecifyColumns(Schema schema, List<Integer> targetColumns, Map<String, ColumnHandle> columnMap)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc1OTQ5OQ==", "bodyText": "Sure!", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450759499", "createdAt": "2020-07-07T10:17:25Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -347,6 +393,20 @@ public ConnectorOutputTableHandle beginCreateTable(\n         return Optional.empty();\n     }\n \n+    private boolean isTableSupportGroupedExecution(KuduTable kuduTable)\n+    {\n+        return !kuduTable.getPartitionSchema().getHashBucketSchemas().isEmpty();\n+    }\n+\n+    private List<ColumnHandle> getSpecifyColumns(Schema schema, List<Integer> targetColumns, Map<String, ColumnHandle> columnMap)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3NTExNg=="}, "originalCommit": null, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTgxNTY3OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduNodePartitioningProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo1NjowMVrOGtzK9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDoyMDoyMFrOGt4Rbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3NzQ5NQ==", "bodyText": "why not to simply pass handle to KuduBucketFunction constructor?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450677495", "createdAt": "2020-07-07T07:56:01Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduNodePartitioningProvider.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.connector.ConnectorBucketNodeMap;\n+import io.prestosql.spi.connector.ConnectorNodePartitioningProvider;\n+import io.prestosql.spi.connector.ConnectorPartitionHandle;\n+import io.prestosql.spi.connector.ConnectorPartitioningHandle;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorSplit;\n+import io.prestosql.spi.connector.ConnectorTransactionHandle;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import io.prestosql.spi.type.Type;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.function.ToIntFunction;\n+import java.util.stream.IntStream;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.connector.ConnectorBucketNodeMap.createBucketNodeMap;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduNodePartitioningProvider\n+        implements ConnectorNodePartitioningProvider\n+{\n+    private final KuduClientSession clientSession;\n+\n+    @Inject\n+    public KuduNodePartitioningProvider(KuduClientSession clientSession)\n+    {\n+        this.clientSession = requireNonNull(clientSession, \"clientSession is null\");\n+    }\n+\n+    @Override\n+    public List<ConnectorPartitionHandle> listPartitionHandles(\n+            ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorPartitioningHandle partitioningHandle)\n+    {\n+        KuduPartitioningHandle handle = (KuduPartitioningHandle) partitioningHandle;\n+        int bucketCount = handle.getBucketCount();\n+        return IntStream.range(0, bucketCount).mapToObj(KuduPartitionHandle::new).collect(toImmutableList());\n+    }\n+\n+    @Override\n+    public ConnectorBucketNodeMap getBucketNodeMap(\n+            ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorPartitioningHandle partitioningHandle)\n+    {\n+        KuduPartitioningHandle handle = (KuduPartitioningHandle) partitioningHandle;\n+        return createBucketNodeMap(handle.getBucketCount());\n+    }\n+\n+    @Override\n+    public ToIntFunction<ConnectorSplit> getSplitBucketFunction(\n+            ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorPartitioningHandle partitioningHandle)\n+    {\n+        return value -> ((KuduSplit) value).getBucketNumber();\n+    }\n+\n+    @Override\n+    public BucketFunction getBucketFunction(\n+            ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorPartitioningHandle partitioningHandle,\n+            List<Type> partitionChannelTypes,\n+            int bucketCount)\n+    {\n+        KuduPartitioningHandle handle = (KuduPartitioningHandle) partitioningHandle;\n+        return new KuduBucketFunction(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc2MTA3MA==", "bodyText": "KuduPartitioningHandle has some heavy attributes which are not used in KuduBucketFunction, so I didn't pass the whole handle to KuduBucketFunction. Of course I will do it If you insist.   :)", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450761070", "createdAt": "2020-07-07T10:20:20Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduNodePartitioningProvider.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.connector.ConnectorBucketNodeMap;\n+import io.prestosql.spi.connector.ConnectorNodePartitioningProvider;\n+import io.prestosql.spi.connector.ConnectorPartitionHandle;\n+import io.prestosql.spi.connector.ConnectorPartitioningHandle;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorSplit;\n+import io.prestosql.spi.connector.ConnectorTransactionHandle;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import io.prestosql.spi.type.Type;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.function.ToIntFunction;\n+import java.util.stream.IntStream;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.connector.ConnectorBucketNodeMap.createBucketNodeMap;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduNodePartitioningProvider\n+        implements ConnectorNodePartitioningProvider\n+{\n+    private final KuduClientSession clientSession;\n+\n+    @Inject\n+    public KuduNodePartitioningProvider(KuduClientSession clientSession)\n+    {\n+        this.clientSession = requireNonNull(clientSession, \"clientSession is null\");\n+    }\n+\n+    @Override\n+    public List<ConnectorPartitionHandle> listPartitionHandles(\n+            ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorPartitioningHandle partitioningHandle)\n+    {\n+        KuduPartitioningHandle handle = (KuduPartitioningHandle) partitioningHandle;\n+        int bucketCount = handle.getBucketCount();\n+        return IntStream.range(0, bucketCount).mapToObj(KuduPartitionHandle::new).collect(toImmutableList());\n+    }\n+\n+    @Override\n+    public ConnectorBucketNodeMap getBucketNodeMap(\n+            ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorPartitioningHandle partitioningHandle)\n+    {\n+        KuduPartitioningHandle handle = (KuduPartitioningHandle) partitioningHandle;\n+        return createBucketNodeMap(handle.getBucketCount());\n+    }\n+\n+    @Override\n+    public ToIntFunction<ConnectorSplit> getSplitBucketFunction(\n+            ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorPartitioningHandle partitioningHandle)\n+    {\n+        return value -> ((KuduSplit) value).getBucketNumber();\n+    }\n+\n+    @Override\n+    public BucketFunction getBucketFunction(\n+            ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorPartitioningHandle partitioningHandle,\n+            List<Type> partitionChannelTypes,\n+            int bucketCount)\n+    {\n+        KuduPartitioningHandle handle = (KuduPartitioningHandle) partitioningHandle;\n+        return new KuduBucketFunction(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3NzQ5NQ=="}, "originalCommit": null, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTgxNzQyOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduPartitioningHandle.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo1NjozNlrOGtzMKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDozMDoxMFrOGt4lZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3NzgwMA==", "bodyText": "why not toStringHelper?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450677800", "createdAt": "2020-07-07T07:56:36Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduPartitioningHandle.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.prestosql.spi.connector.ConnectorPartitioningHandle;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduPartitioningHandle\n+        implements ConnectorPartitioningHandle\n+{\n+    private final String schema;\n+    private final String table;\n+    private final int bucketCount;\n+    private final List<Integer> bucketColumnIndexes;\n+    private final List<Type> bucketColumnTypes;\n+\n+    @JsonCreator\n+    public KuduPartitioningHandle(\n+            @JsonProperty(\"schema\") String schema,\n+            @JsonProperty(\"table\") String table,\n+            @JsonProperty(\"bucketCount\") int bucketCount,\n+            @JsonProperty(\"bucketColumnIndexes\") List<Integer> bucketColumnIndexes,\n+            @JsonProperty(\"bucketColumnTypes\") List<Type> bucketColumnTypes)\n+    {\n+        this.schema = requireNonNull(schema, \"schema is null\");\n+        this.table = table;\n+        this.bucketCount = bucketCount;\n+        this.bucketColumnIndexes = bucketColumnIndexes;\n+        this.bucketColumnTypes = requireNonNull(bucketColumnTypes, \"bucketColumnTypes is null\");\n+    }\n+\n+    @JsonProperty\n+    public String getSchema()\n+    {\n+        return schema;\n+    }\n+\n+    @JsonProperty\n+    public String getTable()\n+    {\n+        return table;\n+    }\n+\n+    @JsonProperty\n+    public int getBucketCount()\n+    {\n+        return bucketCount;\n+    }\n+\n+    @JsonProperty\n+    public List<Type> getBucketColumnTypes()\n+    {\n+        return bucketColumnTypes;\n+    }\n+\n+    @JsonProperty\n+    public List<Integer> getBucketColumnIndexes()\n+    {\n+        return bucketColumnIndexes;\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return format(\"schema=%s, table=%s, buckets=%d\", schema, table, bucketCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc2NjE4MA==", "bodyText": "will do!", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450766180", "createdAt": "2020-07-07T10:30:10Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduPartitioningHandle.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.prestosql.spi.connector.ConnectorPartitioningHandle;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduPartitioningHandle\n+        implements ConnectorPartitioningHandle\n+{\n+    private final String schema;\n+    private final String table;\n+    private final int bucketCount;\n+    private final List<Integer> bucketColumnIndexes;\n+    private final List<Type> bucketColumnTypes;\n+\n+    @JsonCreator\n+    public KuduPartitioningHandle(\n+            @JsonProperty(\"schema\") String schema,\n+            @JsonProperty(\"table\") String table,\n+            @JsonProperty(\"bucketCount\") int bucketCount,\n+            @JsonProperty(\"bucketColumnIndexes\") List<Integer> bucketColumnIndexes,\n+            @JsonProperty(\"bucketColumnTypes\") List<Type> bucketColumnTypes)\n+    {\n+        this.schema = requireNonNull(schema, \"schema is null\");\n+        this.table = table;\n+        this.bucketCount = bucketCount;\n+        this.bucketColumnIndexes = bucketColumnIndexes;\n+        this.bucketColumnTypes = requireNonNull(bucketColumnTypes, \"bucketColumnTypes is null\");\n+    }\n+\n+    @JsonProperty\n+    public String getSchema()\n+    {\n+        return schema;\n+    }\n+\n+    @JsonProperty\n+    public String getTable()\n+    {\n+        return table;\n+    }\n+\n+    @JsonProperty\n+    public int getBucketCount()\n+    {\n+        return bucketCount;\n+    }\n+\n+    @JsonProperty\n+    public List<Type> getBucketColumnTypes()\n+    {\n+        return bucketColumnTypes;\n+    }\n+\n+    @JsonProperty\n+    public List<Integer> getBucketColumnIndexes()\n+    {\n+        return bucketColumnIndexes;\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return format(\"schema=%s, table=%s, buckets=%d\", schema, table, bucketCount);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3NzgwMA=="}, "originalCommit": null, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTgxODAwOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduPartitioningHandle.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo1Njo0OVrOGtzMkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDoyOTo1NlrOGt4k4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3NzkwNA==", "bodyText": "do you need to equals and hashCode at all here?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450677904", "createdAt": "2020-07-07T07:56:49Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduPartitioningHandle.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.prestosql.spi.connector.ConnectorPartitioningHandle;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduPartitioningHandle\n+        implements ConnectorPartitioningHandle\n+{\n+    private final String schema;\n+    private final String table;\n+    private final int bucketCount;\n+    private final List<Integer> bucketColumnIndexes;\n+    private final List<Type> bucketColumnTypes;\n+\n+    @JsonCreator\n+    public KuduPartitioningHandle(\n+            @JsonProperty(\"schema\") String schema,\n+            @JsonProperty(\"table\") String table,\n+            @JsonProperty(\"bucketCount\") int bucketCount,\n+            @JsonProperty(\"bucketColumnIndexes\") List<Integer> bucketColumnIndexes,\n+            @JsonProperty(\"bucketColumnTypes\") List<Type> bucketColumnTypes)\n+    {\n+        this.schema = requireNonNull(schema, \"schema is null\");\n+        this.table = table;\n+        this.bucketCount = bucketCount;\n+        this.bucketColumnIndexes = bucketColumnIndexes;\n+        this.bucketColumnTypes = requireNonNull(bucketColumnTypes, \"bucketColumnTypes is null\");\n+    }\n+\n+    @JsonProperty\n+    public String getSchema()\n+    {\n+        return schema;\n+    }\n+\n+    @JsonProperty\n+    public String getTable()\n+    {\n+        return table;\n+    }\n+\n+    @JsonProperty\n+    public int getBucketCount()\n+    {\n+        return bucketCount;\n+    }\n+\n+    @JsonProperty\n+    public List<Type> getBucketColumnTypes()\n+    {\n+        return bucketColumnTypes;\n+    }\n+\n+    @JsonProperty\n+    public List<Integer> getBucketColumnIndexes()\n+    {\n+        return bucketColumnIndexes;\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return format(\"schema=%s, table=%s, buckets=%d\", schema, table, bucketCount);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc2NjA1MA==", "bodyText": "I'm not sure about this, I checked HivePartitioningHandle it do has equals and hashCode. So I suggest we keep these, hahaha", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450766050", "createdAt": "2020-07-07T10:29:56Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduPartitioningHandle.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.prestosql.spi.connector.ConnectorPartitioningHandle;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduPartitioningHandle\n+        implements ConnectorPartitioningHandle\n+{\n+    private final String schema;\n+    private final String table;\n+    private final int bucketCount;\n+    private final List<Integer> bucketColumnIndexes;\n+    private final List<Type> bucketColumnTypes;\n+\n+    @JsonCreator\n+    public KuduPartitioningHandle(\n+            @JsonProperty(\"schema\") String schema,\n+            @JsonProperty(\"table\") String table,\n+            @JsonProperty(\"bucketCount\") int bucketCount,\n+            @JsonProperty(\"bucketColumnIndexes\") List<Integer> bucketColumnIndexes,\n+            @JsonProperty(\"bucketColumnTypes\") List<Type> bucketColumnTypes)\n+    {\n+        this.schema = requireNonNull(schema, \"schema is null\");\n+        this.table = table;\n+        this.bucketCount = bucketCount;\n+        this.bucketColumnIndexes = bucketColumnIndexes;\n+        this.bucketColumnTypes = requireNonNull(bucketColumnTypes, \"bucketColumnTypes is null\");\n+    }\n+\n+    @JsonProperty\n+    public String getSchema()\n+    {\n+        return schema;\n+    }\n+\n+    @JsonProperty\n+    public String getTable()\n+    {\n+        return table;\n+    }\n+\n+    @JsonProperty\n+    public int getBucketCount()\n+    {\n+        return bucketCount;\n+    }\n+\n+    @JsonProperty\n+    public List<Type> getBucketColumnTypes()\n+    {\n+        return bucketColumnTypes;\n+    }\n+\n+    @JsonProperty\n+    public List<Integer> getBucketColumnIndexes()\n+    {\n+        return bucketColumnIndexes;\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return format(\"schema=%s, table=%s, buckets=%d\", schema, table, bucketCount);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3NzkwNA=="}, "originalCommit": null, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTgyMjAzOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduSessionProperties.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo1Nzo1NVrOGtzPLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMjo1NjowMVrOGuWUAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3ODU3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            \"Experimental: Kudu: Enable kudu connector grouped_execution.\",\n          \n          \n            \n                            \"Enable grouped execution\",", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450678574", "createdAt": "2020-07-07T07:57:55Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduSessionProperties.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.session.PropertyMetadata;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+\n+import static io.prestosql.spi.session.PropertyMetadata.booleanProperty;\n+\n+public final class KuduSessionProperties\n+{\n+    private static final String KUDU_GROUPED_EXECUTION_ENABLED = \"grouped_execution\";\n+\n+    private final List<PropertyMetadata<?>> sessionProperties;\n+\n+    @Inject\n+    public KuduSessionProperties(KuduClientConfig kuduConfig)\n+    {\n+        sessionProperties = ImmutableList.<PropertyMetadata<?>>builder()\n+            .add(booleanProperty(\n+                KUDU_GROUPED_EXECUTION_ENABLED,\n+                \"Experimental: Kudu: Enable kudu connector grouped_execution.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1MzI1MQ==", "bodyText": "ok!", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r451253251", "createdAt": "2020-07-08T02:56:01Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduSessionProperties.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.session.PropertyMetadata;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+\n+import static io.prestosql.spi.session.PropertyMetadata.booleanProperty;\n+\n+public final class KuduSessionProperties\n+{\n+    private static final String KUDU_GROUPED_EXECUTION_ENABLED = \"grouped_execution\";\n+\n+    private final List<PropertyMetadata<?>> sessionProperties;\n+\n+    @Inject\n+    public KuduSessionProperties(KuduClientConfig kuduConfig)\n+    {\n+        sessionProperties = ImmutableList.<PropertyMetadata<?>>builder()\n+            .add(booleanProperty(\n+                KUDU_GROUPED_EXECUTION_ENABLED,\n+                \"Experimental: Kudu: Enable kudu connector grouped_execution.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3ODU3NA=="}, "originalCommit": null, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTgyNDExOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduSplitSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo1ODozNVrOGtzQlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo1ODozNVrOGtzQlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3ODkzMw==", "bodyText": "final", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450678933", "createdAt": "2020-07-07T07:58:35Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduSplitSource.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ConnectorPartitionHandle;\n+import io.prestosql.spi.connector.ConnectorSplitSource;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static java.util.function.Function.identity;\n+\n+public class KuduSplitSource\n+        implements ConnectorSplitSource\n+{\n+    private final Map<Integer, KuduSplit> splitMap;\n+    private AtomicInteger fetchedBucketCount = new AtomicInteger();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTgyNzY3OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduSplitSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo1OTo1MFrOGtzTCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDozMjoxMVrOGt4pMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3OTU2Mg==", "bodyText": "splitMap -> groupedSplits", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450679562", "createdAt": "2020-07-07T07:59:50Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduSplitSource.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ConnectorPartitionHandle;\n+import io.prestosql.spi.connector.ConnectorSplitSource;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static java.util.function.Function.identity;\n+\n+public class KuduSplitSource\n+        implements ConnectorSplitSource\n+{\n+    private final Map<Integer, KuduSplit> splitMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc2NzE1NQ==", "bodyText": "Will do!", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450767155", "createdAt": "2020-07-07T10:32:11Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduSplitSource.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ConnectorPartitionHandle;\n+import io.prestosql.spi.connector.ConnectorSplitSource;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static java.util.function.Function.identity;\n+\n+public class KuduSplitSource\n+        implements ConnectorSplitSource\n+{\n+    private final Map<Integer, KuduSplit> splitMap;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3OTU2Mg=="}, "originalCommit": null, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTgyODY3OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduSplitSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODowMDoxMFrOGtzTvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDozNDo1OFrOGt4usQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3OTc0Mw==", "bodyText": "KuduBucketedSplitSource?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450679743", "createdAt": "2020-07-07T08:00:10Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduSplitSource.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ConnectorPartitionHandle;\n+import io.prestosql.spi.connector.ConnectorSplitSource;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static java.util.function.Function.identity;\n+\n+public class KuduSplitSource", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc2ODU2MQ==", "bodyText": "Will do!", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450768561", "createdAt": "2020-07-07T10:34:58Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduSplitSource.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ConnectorPartitionHandle;\n+import io.prestosql.spi.connector.ConnectorSplitSource;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static java.util.function.Function.identity;\n+\n+public class KuduSplitSource", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3OTc0Mw=="}, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTgzNTU3OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduSplitSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODowMjoxNlrOGtzYKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDozNzoxN1rOGt4zRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY4MDg3NA==", "bodyText": "why kuduSplit can be null?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450680874", "createdAt": "2020-07-07T08:02:16Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduSplitSource.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ConnectorPartitionHandle;\n+import io.prestosql.spi.connector.ConnectorSplitSource;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static java.util.function.Function.identity;\n+\n+public class KuduSplitSource\n+        implements ConnectorSplitSource\n+{\n+    private final Map<Integer, KuduSplit> splitMap;\n+    private AtomicInteger fetchedBucketCount = new AtomicInteger();\n+\n+    KuduSplitSource(List<KuduSplit> splits)\n+    {\n+        this.splitMap = requireNonNull(splits, \"splits are null\").stream()\n+                .collect(toImmutableMap(KuduSplit::getBucketNumber, identity()));\n+    }\n+\n+    @Override\n+    public CompletableFuture<ConnectorSplitBatch> getNextBatch(ConnectorPartitionHandle partitionHandle, int maxSize)\n+    {\n+        KuduPartitionHandle kuduPartitionHandle = (KuduPartitionHandle) partitionHandle;\n+        KuduSplit kuduSplit = splitMap.get(kuduPartitionHandle.getBucket());\n+        fetchedBucketCount.incrementAndGet();\n+        return completedFuture(new ConnectorSplitBatch(kuduSplit == null ? ImmutableList.of() : ImmutableList.of(kuduSplit), true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc2OTczNQ==", "bodyText": "It will not be null, just in case it is null.", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450769735", "createdAt": "2020-07-07T10:37:17Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduSplitSource.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ConnectorPartitionHandle;\n+import io.prestosql.spi.connector.ConnectorSplitSource;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static java.util.function.Function.identity;\n+\n+public class KuduSplitSource\n+        implements ConnectorSplitSource\n+{\n+    private final Map<Integer, KuduSplit> splitMap;\n+    private AtomicInteger fetchedBucketCount = new AtomicInteger();\n+\n+    KuduSplitSource(List<KuduSplit> splits)\n+    {\n+        this.splitMap = requireNonNull(splits, \"splits are null\").stream()\n+                .collect(toImmutableMap(KuduSplit::getBucketNumber, identity()));\n+    }\n+\n+    @Override\n+    public CompletableFuture<ConnectorSplitBatch> getNextBatch(ConnectorPartitionHandle partitionHandle, int maxSize)\n+    {\n+        KuduPartitionHandle kuduPartitionHandle = (KuduPartitionHandle) partitionHandle;\n+        KuduSplit kuduSplit = splitMap.get(kuduPartitionHandle.getBucket());\n+        fetchedBucketCount.incrementAndGet();\n+        return completedFuture(new ConnectorSplitBatch(kuduSplit == null ? ImmutableList.of() : ImmutableList.of(kuduSplit), true));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY4MDg3NA=="}, "originalCommit": null, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTgzODAzOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduSplitSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODowMzowNlrOGtzZ1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDozODoxOVrOGt41Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY4MTMwMQ==", "bodyText": "the best would be to remove entries from splitMap. Notice that this code is vulnerable, in case you are asked for the bucket you might return same split twice and say in isFinished that you finished even if not all splits were procesed.", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450681301", "createdAt": "2020-07-07T08:03:06Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduSplitSource.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ConnectorPartitionHandle;\n+import io.prestosql.spi.connector.ConnectorSplitSource;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static java.util.function.Function.identity;\n+\n+public class KuduSplitSource\n+        implements ConnectorSplitSource\n+{\n+    private final Map<Integer, KuduSplit> splitMap;\n+    private AtomicInteger fetchedBucketCount = new AtomicInteger();\n+\n+    KuduSplitSource(List<KuduSplit> splits)\n+    {\n+        this.splitMap = requireNonNull(splits, \"splits are null\").stream()\n+                .collect(toImmutableMap(KuduSplit::getBucketNumber, identity()));\n+    }\n+\n+    @Override\n+    public CompletableFuture<ConnectorSplitBatch> getNextBatch(ConnectorPartitionHandle partitionHandle, int maxSize)\n+    {\n+        KuduPartitionHandle kuduPartitionHandle = (KuduPartitionHandle) partitionHandle;\n+        KuduSplit kuduSplit = splitMap.get(kuduPartitionHandle.getBucket());\n+        fetchedBucketCount.incrementAndGet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc3MDIzOQ==", "bodyText": "Ok, I will do the change!", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450770239", "createdAt": "2020-07-07T10:38:19Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduSplitSource.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ConnectorPartitionHandle;\n+import io.prestosql.spi.connector.ConnectorSplitSource;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static java.util.function.Function.identity;\n+\n+public class KuduSplitSource\n+        implements ConnectorSplitSource\n+{\n+    private final Map<Integer, KuduSplit> splitMap;\n+    private AtomicInteger fetchedBucketCount = new AtomicInteger();\n+\n+    KuduSplitSource(List<KuduSplit> splits)\n+    {\n+        this.splitMap = requireNonNull(splits, \"splits are null\").stream()\n+                .collect(toImmutableMap(KuduSplit::getBucketNumber, identity()));\n+    }\n+\n+    @Override\n+    public CompletableFuture<ConnectorSplitBatch> getNextBatch(ConnectorPartitionHandle partitionHandle, int maxSize)\n+    {\n+        KuduPartitionHandle kuduPartitionHandle = (KuduPartitionHandle) partitionHandle;\n+        KuduSplit kuduSplit = splitMap.get(kuduPartitionHandle.getBucket());\n+        fetchedBucketCount.incrementAndGet();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY4MTMwMQ=="}, "originalCommit": null, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTg0Mjc2OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationGroupedExecution.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODowNDozOVrOGtzc0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOTowMDowOFrOGueyyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY4MjA2NA==", "bodyText": "It is not system property, but catalog property", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450682064", "createdAt": "2020-07-07T08:04:39Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationGroupedExecution.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.Session;\n+import io.prestosql.cost.StatsAndCosts;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.sql.planner.Plan;\n+import io.prestosql.sql.planner.plan.ExchangeNode;\n+import io.prestosql.testing.AbstractTestQueryFramework;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import io.prestosql.testing.QueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.function.Consumer;\n+\n+import static io.prestosql.SystemSessionProperties.COLOCATED_JOIN;\n+import static io.prestosql.SystemSessionProperties.CONCURRENT_LIFESPANS_PER_NODE;\n+import static io.prestosql.SystemSessionProperties.DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION;\n+import static io.prestosql.SystemSessionProperties.ENABLE_DYNAMIC_FILTERING;\n+import static io.prestosql.SystemSessionProperties.GROUPED_EXECUTION;\n+import static io.prestosql.plugin.kudu.KuduQueryRunnerFactory.createKuduQueryRunner;\n+import static io.prestosql.sql.planner.optimizations.PlanNodeSearcher.searchFrom;\n+import static io.prestosql.sql.planner.planprinter.PlanPrinter.textLogicalPlan;\n+import static java.lang.String.format;\n+\n+public class TestKuduIntegrationGroupedExecution\n+        extends AbstractTestQueryFramework\n+{\n+    public static final String KUDU_GROUPED_EXECUTION = \"kudu.grouped_execution\";\n+    private TestingKuduServer kuduServer;\n+\n+    @Override\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        kuduServer = new TestingKuduServer();\n+        return createKuduQueryRunner(kuduServer, \"test_grouped_execution\");\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public final void destroy()\n+    {\n+        kuduServer.close();\n+    }\n+\n+    @Test\n+    public void testGroupedExecutionJoin()\n+    {\n+        Session groupedExecutionSessionProperties = Session.builder(getSession())\n+                .setSystemProperty(COLOCATED_JOIN, \"true\")\n+                .setSystemProperty(GROUPED_EXECUTION, \"true\")\n+                .setSystemProperty(CONCURRENT_LIFESPANS_PER_NODE, \"1\")\n+                .setSystemProperty(DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION, \"false\")\n+                .setSystemProperty(ENABLE_DYNAMIC_FILTERING, \"false\")\n+                .setSystemProperty(KUDU_GROUPED_EXECUTION, \"true\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMyNzI2MQ==", "bodyText": "Session.builder(getSession()).setCatalogSessionProperty(SCHEMA_KUDU, KUDU_GROUPED_EXECUTION, \"true\")\nsomething like this, right?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r451327261", "createdAt": "2020-07-08T07:07:09Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationGroupedExecution.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.Session;\n+import io.prestosql.cost.StatsAndCosts;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.sql.planner.Plan;\n+import io.prestosql.sql.planner.plan.ExchangeNode;\n+import io.prestosql.testing.AbstractTestQueryFramework;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import io.prestosql.testing.QueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.function.Consumer;\n+\n+import static io.prestosql.SystemSessionProperties.COLOCATED_JOIN;\n+import static io.prestosql.SystemSessionProperties.CONCURRENT_LIFESPANS_PER_NODE;\n+import static io.prestosql.SystemSessionProperties.DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION;\n+import static io.prestosql.SystemSessionProperties.ENABLE_DYNAMIC_FILTERING;\n+import static io.prestosql.SystemSessionProperties.GROUPED_EXECUTION;\n+import static io.prestosql.plugin.kudu.KuduQueryRunnerFactory.createKuduQueryRunner;\n+import static io.prestosql.sql.planner.optimizations.PlanNodeSearcher.searchFrom;\n+import static io.prestosql.sql.planner.planprinter.PlanPrinter.textLogicalPlan;\n+import static java.lang.String.format;\n+\n+public class TestKuduIntegrationGroupedExecution\n+        extends AbstractTestQueryFramework\n+{\n+    public static final String KUDU_GROUPED_EXECUTION = \"kudu.grouped_execution\";\n+    private TestingKuduServer kuduServer;\n+\n+    @Override\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        kuduServer = new TestingKuduServer();\n+        return createKuduQueryRunner(kuduServer, \"test_grouped_execution\");\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public final void destroy()\n+    {\n+        kuduServer.close();\n+    }\n+\n+    @Test\n+    public void testGroupedExecutionJoin()\n+    {\n+        Session groupedExecutionSessionProperties = Session.builder(getSession())\n+                .setSystemProperty(COLOCATED_JOIN, \"true\")\n+                .setSystemProperty(GROUPED_EXECUTION, \"true\")\n+                .setSystemProperty(CONCURRENT_LIFESPANS_PER_NODE, \"1\")\n+                .setSystemProperty(DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION, \"false\")\n+                .setSystemProperty(ENABLE_DYNAMIC_FILTERING, \"false\")\n+                .setSystemProperty(KUDU_GROUPED_EXECUTION, \"true\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY4MjA2NA=="}, "originalCommit": null, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5MjIwMA==", "bodyText": "Did it!", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r451392200", "createdAt": "2020-07-08T09:00:08Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationGroupedExecution.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.Session;\n+import io.prestosql.cost.StatsAndCosts;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.sql.planner.Plan;\n+import io.prestosql.sql.planner.plan.ExchangeNode;\n+import io.prestosql.testing.AbstractTestQueryFramework;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import io.prestosql.testing.QueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.function.Consumer;\n+\n+import static io.prestosql.SystemSessionProperties.COLOCATED_JOIN;\n+import static io.prestosql.SystemSessionProperties.CONCURRENT_LIFESPANS_PER_NODE;\n+import static io.prestosql.SystemSessionProperties.DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION;\n+import static io.prestosql.SystemSessionProperties.ENABLE_DYNAMIC_FILTERING;\n+import static io.prestosql.SystemSessionProperties.GROUPED_EXECUTION;\n+import static io.prestosql.plugin.kudu.KuduQueryRunnerFactory.createKuduQueryRunner;\n+import static io.prestosql.sql.planner.optimizations.PlanNodeSearcher.searchFrom;\n+import static io.prestosql.sql.planner.planprinter.PlanPrinter.textLogicalPlan;\n+import static java.lang.String.format;\n+\n+public class TestKuduIntegrationGroupedExecution\n+        extends AbstractTestQueryFramework\n+{\n+    public static final String KUDU_GROUPED_EXECUTION = \"kudu.grouped_execution\";\n+    private TestingKuduServer kuduServer;\n+\n+    @Override\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        kuduServer = new TestingKuduServer();\n+        return createKuduQueryRunner(kuduServer, \"test_grouped_execution\");\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public final void destroy()\n+    {\n+        kuduServer.close();\n+    }\n+\n+    @Test\n+    public void testGroupedExecutionJoin()\n+    {\n+        Session groupedExecutionSessionProperties = Session.builder(getSession())\n+                .setSystemProperty(COLOCATED_JOIN, \"true\")\n+                .setSystemProperty(GROUPED_EXECUTION, \"true\")\n+                .setSystemProperty(CONCURRENT_LIFESPANS_PER_NODE, \"1\")\n+                .setSystemProperty(DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION, \"false\")\n+                .setSystemProperty(ENABLE_DYNAMIC_FILTERING, \"false\")\n+                .setSystemProperty(KUDU_GROUPED_EXECUTION, \"true\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY4MjA2NA=="}, "originalCommit": null, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTg1MDg3OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationGroupedExecution.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODowNzoxMFrOGtzh_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwODo1OTo0OFrOGuex9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY4MzM5MQ==", "bodyText": "It would be the best to make it a default session in kudu query runner you are using here. I mean it would be best to pass this session to createKuduQueryRunner", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450683391", "createdAt": "2020-07-07T08:07:10Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationGroupedExecution.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.Session;\n+import io.prestosql.cost.StatsAndCosts;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.sql.planner.Plan;\n+import io.prestosql.sql.planner.plan.ExchangeNode;\n+import io.prestosql.testing.AbstractTestQueryFramework;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import io.prestosql.testing.QueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.function.Consumer;\n+\n+import static io.prestosql.SystemSessionProperties.COLOCATED_JOIN;\n+import static io.prestosql.SystemSessionProperties.CONCURRENT_LIFESPANS_PER_NODE;\n+import static io.prestosql.SystemSessionProperties.DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION;\n+import static io.prestosql.SystemSessionProperties.ENABLE_DYNAMIC_FILTERING;\n+import static io.prestosql.SystemSessionProperties.GROUPED_EXECUTION;\n+import static io.prestosql.plugin.kudu.KuduQueryRunnerFactory.createKuduQueryRunner;\n+import static io.prestosql.sql.planner.optimizations.PlanNodeSearcher.searchFrom;\n+import static io.prestosql.sql.planner.planprinter.PlanPrinter.textLogicalPlan;\n+import static java.lang.String.format;\n+\n+public class TestKuduIntegrationGroupedExecution\n+        extends AbstractTestQueryFramework\n+{\n+    public static final String KUDU_GROUPED_EXECUTION = \"kudu.grouped_execution\";\n+    private TestingKuduServer kuduServer;\n+\n+    @Override\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        kuduServer = new TestingKuduServer();\n+        return createKuduQueryRunner(kuduServer, \"test_grouped_execution\");\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public final void destroy()\n+    {\n+        kuduServer.close();\n+    }\n+\n+    @Test\n+    public void testGroupedExecutionJoin()\n+    {\n+        Session groupedExecutionSessionProperties = Session.builder(getSession())", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM0MDMzMQ==", "bodyText": "Agree!", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r451340331", "createdAt": "2020-07-08T07:32:34Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationGroupedExecution.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.Session;\n+import io.prestosql.cost.StatsAndCosts;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.sql.planner.Plan;\n+import io.prestosql.sql.planner.plan.ExchangeNode;\n+import io.prestosql.testing.AbstractTestQueryFramework;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import io.prestosql.testing.QueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.function.Consumer;\n+\n+import static io.prestosql.SystemSessionProperties.COLOCATED_JOIN;\n+import static io.prestosql.SystemSessionProperties.CONCURRENT_LIFESPANS_PER_NODE;\n+import static io.prestosql.SystemSessionProperties.DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION;\n+import static io.prestosql.SystemSessionProperties.ENABLE_DYNAMIC_FILTERING;\n+import static io.prestosql.SystemSessionProperties.GROUPED_EXECUTION;\n+import static io.prestosql.plugin.kudu.KuduQueryRunnerFactory.createKuduQueryRunner;\n+import static io.prestosql.sql.planner.optimizations.PlanNodeSearcher.searchFrom;\n+import static io.prestosql.sql.planner.planprinter.PlanPrinter.textLogicalPlan;\n+import static java.lang.String.format;\n+\n+public class TestKuduIntegrationGroupedExecution\n+        extends AbstractTestQueryFramework\n+{\n+    public static final String KUDU_GROUPED_EXECUTION = \"kudu.grouped_execution\";\n+    private TestingKuduServer kuduServer;\n+\n+    @Override\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        kuduServer = new TestingKuduServer();\n+        return createKuduQueryRunner(kuduServer, \"test_grouped_execution\");\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public final void destroy()\n+    {\n+        kuduServer.close();\n+    }\n+\n+    @Test\n+    public void testGroupedExecutionJoin()\n+    {\n+        Session groupedExecutionSessionProperties = Session.builder(getSession())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY4MzM5MQ=="}, "originalCommit": null, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5MTk5MQ==", "bodyText": "agree!", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r451391991", "createdAt": "2020-07-08T08:59:48Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationGroupedExecution.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.Session;\n+import io.prestosql.cost.StatsAndCosts;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.sql.planner.Plan;\n+import io.prestosql.sql.planner.plan.ExchangeNode;\n+import io.prestosql.testing.AbstractTestQueryFramework;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import io.prestosql.testing.QueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.function.Consumer;\n+\n+import static io.prestosql.SystemSessionProperties.COLOCATED_JOIN;\n+import static io.prestosql.SystemSessionProperties.CONCURRENT_LIFESPANS_PER_NODE;\n+import static io.prestosql.SystemSessionProperties.DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION;\n+import static io.prestosql.SystemSessionProperties.ENABLE_DYNAMIC_FILTERING;\n+import static io.prestosql.SystemSessionProperties.GROUPED_EXECUTION;\n+import static io.prestosql.plugin.kudu.KuduQueryRunnerFactory.createKuduQueryRunner;\n+import static io.prestosql.sql.planner.optimizations.PlanNodeSearcher.searchFrom;\n+import static io.prestosql.sql.planner.planprinter.PlanPrinter.textLogicalPlan;\n+import static java.lang.String.format;\n+\n+public class TestKuduIntegrationGroupedExecution\n+        extends AbstractTestQueryFramework\n+{\n+    public static final String KUDU_GROUPED_EXECUTION = \"kudu.grouped_execution\";\n+    private TestingKuduServer kuduServer;\n+\n+    @Override\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        kuduServer = new TestingKuduServer();\n+        return createKuduQueryRunner(kuduServer, \"test_grouped_execution\");\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public final void destroy()\n+    {\n+        kuduServer.close();\n+    }\n+\n+    @Test\n+    public void testGroupedExecutionJoin()\n+    {\n+        Session groupedExecutionSessionProperties = Session.builder(getSession())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY4MzM5MQ=="}, "originalCommit": null, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTg1MzM4OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationGroupedExecution.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODowNzo1NlrOGtzjow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDo0OTo1MlrOGt5LSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY4MzgxMQ==", "bodyText": "How did you verify grouped execution actually worked? This assertion will pass disregarding if it is enabled or not.", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450683811", "createdAt": "2020-07-07T08:07:56Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationGroupedExecution.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.Session;\n+import io.prestosql.cost.StatsAndCosts;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.sql.planner.Plan;\n+import io.prestosql.sql.planner.plan.ExchangeNode;\n+import io.prestosql.testing.AbstractTestQueryFramework;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import io.prestosql.testing.QueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.function.Consumer;\n+\n+import static io.prestosql.SystemSessionProperties.COLOCATED_JOIN;\n+import static io.prestosql.SystemSessionProperties.CONCURRENT_LIFESPANS_PER_NODE;\n+import static io.prestosql.SystemSessionProperties.DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION;\n+import static io.prestosql.SystemSessionProperties.ENABLE_DYNAMIC_FILTERING;\n+import static io.prestosql.SystemSessionProperties.GROUPED_EXECUTION;\n+import static io.prestosql.plugin.kudu.KuduQueryRunnerFactory.createKuduQueryRunner;\n+import static io.prestosql.sql.planner.optimizations.PlanNodeSearcher.searchFrom;\n+import static io.prestosql.sql.planner.planprinter.PlanPrinter.textLogicalPlan;\n+import static java.lang.String.format;\n+\n+public class TestKuduIntegrationGroupedExecution\n+        extends AbstractTestQueryFramework\n+{\n+    public static final String KUDU_GROUPED_EXECUTION = \"kudu.grouped_execution\";\n+    private TestingKuduServer kuduServer;\n+\n+    @Override\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        kuduServer = new TestingKuduServer();\n+        return createKuduQueryRunner(kuduServer, \"test_grouped_execution\");\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public final void destroy()\n+    {\n+        kuduServer.close();\n+    }\n+\n+    @Test\n+    public void testGroupedExecutionJoin()\n+    {\n+        Session groupedExecutionSessionProperties = Session.builder(getSession())\n+                .setSystemProperty(COLOCATED_JOIN, \"true\")\n+                .setSystemProperty(GROUPED_EXECUTION, \"true\")\n+                .setSystemProperty(CONCURRENT_LIFESPANS_PER_NODE, \"1\")\n+                .setSystemProperty(DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION, \"false\")\n+                .setSystemProperty(ENABLE_DYNAMIC_FILTERING, \"false\")\n+                .setSystemProperty(KUDU_GROUPED_EXECUTION, \"true\")\n+                .build();\n+\n+        assertUpdate(\"CREATE TABLE IF NOT EXISTS test_grouped_execution_t1 (\" +\n+                \"key1 INT WITH (primary_key=true), \" +\n+                \"key2 INT WITH (primary_key=true), \" +\n+                \"attr1 INT\" +\n+                \") WITH (\" +\n+                \" partition_by_hash_columns = ARRAY['key1'], \" +\n+                \" partition_by_hash_buckets = 2\" +\n+                \")\");\n+\n+        assertUpdate(\"CREATE TABLE IF NOT EXISTS test_grouped_execution_t2 (\" +\n+                \"key1 INT WITH (primary_key=true), \" +\n+                \"key2 INT WITH (primary_key=true), \" +\n+                \"attr2 decimal(10, 6)\" +\n+                \") WITH (\" +\n+                \" partition_by_hash_columns = ARRAY['key1'], \" +\n+                \" partition_by_hash_buckets = 2\" +\n+                \")\");\n+\n+        assertUpdate(\"INSERT INTO test_grouped_execution_t1 VALUES (0, 0, 0), (0, 1, 0), (1, 1, 1)\", 3);\n+        assertUpdate(\"INSERT INTO test_grouped_execution_t2 VALUES (0, 0, 0), (1, 1, 1), (1, 2, 1)\", 3);\n+        assertQuery(groupedExecutionSessionProperties, \"SELECT t1.* FROM test_grouped_execution_t1 t1 join test_grouped_execution_t2 t2 on t1.key1=t2.key1 WHERE t1.attr1=0\", \"SELECT * FROM (VALUES (0, 0, 0), (0, 1, 0))\", assertRemoteExchangesCount(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc3NTg4MQ==", "bodyText": "Well, if grouped execution worked, assertRemoteExchangesCount will assert 1, or it will be > 1. This is verified.   :)", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450775881", "createdAt": "2020-07-07T10:49:52Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationGroupedExecution.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.Session;\n+import io.prestosql.cost.StatsAndCosts;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.sql.planner.Plan;\n+import io.prestosql.sql.planner.plan.ExchangeNode;\n+import io.prestosql.testing.AbstractTestQueryFramework;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import io.prestosql.testing.QueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.function.Consumer;\n+\n+import static io.prestosql.SystemSessionProperties.COLOCATED_JOIN;\n+import static io.prestosql.SystemSessionProperties.CONCURRENT_LIFESPANS_PER_NODE;\n+import static io.prestosql.SystemSessionProperties.DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION;\n+import static io.prestosql.SystemSessionProperties.ENABLE_DYNAMIC_FILTERING;\n+import static io.prestosql.SystemSessionProperties.GROUPED_EXECUTION;\n+import static io.prestosql.plugin.kudu.KuduQueryRunnerFactory.createKuduQueryRunner;\n+import static io.prestosql.sql.planner.optimizations.PlanNodeSearcher.searchFrom;\n+import static io.prestosql.sql.planner.planprinter.PlanPrinter.textLogicalPlan;\n+import static java.lang.String.format;\n+\n+public class TestKuduIntegrationGroupedExecution\n+        extends AbstractTestQueryFramework\n+{\n+    public static final String KUDU_GROUPED_EXECUTION = \"kudu.grouped_execution\";\n+    private TestingKuduServer kuduServer;\n+\n+    @Override\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        kuduServer = new TestingKuduServer();\n+        return createKuduQueryRunner(kuduServer, \"test_grouped_execution\");\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public final void destroy()\n+    {\n+        kuduServer.close();\n+    }\n+\n+    @Test\n+    public void testGroupedExecutionJoin()\n+    {\n+        Session groupedExecutionSessionProperties = Session.builder(getSession())\n+                .setSystemProperty(COLOCATED_JOIN, \"true\")\n+                .setSystemProperty(GROUPED_EXECUTION, \"true\")\n+                .setSystemProperty(CONCURRENT_LIFESPANS_PER_NODE, \"1\")\n+                .setSystemProperty(DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION, \"false\")\n+                .setSystemProperty(ENABLE_DYNAMIC_FILTERING, \"false\")\n+                .setSystemProperty(KUDU_GROUPED_EXECUTION, \"true\")\n+                .build();\n+\n+        assertUpdate(\"CREATE TABLE IF NOT EXISTS test_grouped_execution_t1 (\" +\n+                \"key1 INT WITH (primary_key=true), \" +\n+                \"key2 INT WITH (primary_key=true), \" +\n+                \"attr1 INT\" +\n+                \") WITH (\" +\n+                \" partition_by_hash_columns = ARRAY['key1'], \" +\n+                \" partition_by_hash_buckets = 2\" +\n+                \")\");\n+\n+        assertUpdate(\"CREATE TABLE IF NOT EXISTS test_grouped_execution_t2 (\" +\n+                \"key1 INT WITH (primary_key=true), \" +\n+                \"key2 INT WITH (primary_key=true), \" +\n+                \"attr2 decimal(10, 6)\" +\n+                \") WITH (\" +\n+                \" partition_by_hash_columns = ARRAY['key1'], \" +\n+                \" partition_by_hash_buckets = 2\" +\n+                \")\");\n+\n+        assertUpdate(\"INSERT INTO test_grouped_execution_t1 VALUES (0, 0, 0), (0, 1, 0), (1, 1, 1)\", 3);\n+        assertUpdate(\"INSERT INTO test_grouped_execution_t2 VALUES (0, 0, 0), (1, 1, 1), (1, 2, 1)\", 3);\n+        assertQuery(groupedExecutionSessionProperties, \"SELECT t1.* FROM test_grouped_execution_t1 t1 join test_grouped_execution_t2 t2 on t1.key1=t2.key1 WHERE t1.attr1=0\", \"SELECT * FROM (VALUES (0, 0, 0), (0, 1, 0))\", assertRemoteExchangesCount(1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY4MzgxMQ=="}, "originalCommit": null, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTg1Njk1OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationGroupedExecution.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODowOTowNlrOGtzl7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDo1MToyNVrOGt5Omw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY4NDM5Nw==", "bodyText": "What this assertion proves? Why you expect certain number of exchange stages?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450684397", "createdAt": "2020-07-07T08:09:06Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationGroupedExecution.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.Session;\n+import io.prestosql.cost.StatsAndCosts;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.sql.planner.Plan;\n+import io.prestosql.sql.planner.plan.ExchangeNode;\n+import io.prestosql.testing.AbstractTestQueryFramework;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import io.prestosql.testing.QueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.function.Consumer;\n+\n+import static io.prestosql.SystemSessionProperties.COLOCATED_JOIN;\n+import static io.prestosql.SystemSessionProperties.CONCURRENT_LIFESPANS_PER_NODE;\n+import static io.prestosql.SystemSessionProperties.DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION;\n+import static io.prestosql.SystemSessionProperties.ENABLE_DYNAMIC_FILTERING;\n+import static io.prestosql.SystemSessionProperties.GROUPED_EXECUTION;\n+import static io.prestosql.plugin.kudu.KuduQueryRunnerFactory.createKuduQueryRunner;\n+import static io.prestosql.sql.planner.optimizations.PlanNodeSearcher.searchFrom;\n+import static io.prestosql.sql.planner.planprinter.PlanPrinter.textLogicalPlan;\n+import static java.lang.String.format;\n+\n+public class TestKuduIntegrationGroupedExecution\n+        extends AbstractTestQueryFramework\n+{\n+    public static final String KUDU_GROUPED_EXECUTION = \"kudu.grouped_execution\";\n+    private TestingKuduServer kuduServer;\n+\n+    @Override\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        kuduServer = new TestingKuduServer();\n+        return createKuduQueryRunner(kuduServer, \"test_grouped_execution\");\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public final void destroy()\n+    {\n+        kuduServer.close();\n+    }\n+\n+    @Test\n+    public void testGroupedExecutionJoin()\n+    {\n+        Session groupedExecutionSessionProperties = Session.builder(getSession())\n+                .setSystemProperty(COLOCATED_JOIN, \"true\")\n+                .setSystemProperty(GROUPED_EXECUTION, \"true\")\n+                .setSystemProperty(CONCURRENT_LIFESPANS_PER_NODE, \"1\")\n+                .setSystemProperty(DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION, \"false\")\n+                .setSystemProperty(ENABLE_DYNAMIC_FILTERING, \"false\")\n+                .setSystemProperty(KUDU_GROUPED_EXECUTION, \"true\")\n+                .build();\n+\n+        assertUpdate(\"CREATE TABLE IF NOT EXISTS test_grouped_execution_t1 (\" +\n+                \"key1 INT WITH (primary_key=true), \" +\n+                \"key2 INT WITH (primary_key=true), \" +\n+                \"attr1 INT\" +\n+                \") WITH (\" +\n+                \" partition_by_hash_columns = ARRAY['key1'], \" +\n+                \" partition_by_hash_buckets = 2\" +\n+                \")\");\n+\n+        assertUpdate(\"CREATE TABLE IF NOT EXISTS test_grouped_execution_t2 (\" +\n+                \"key1 INT WITH (primary_key=true), \" +\n+                \"key2 INT WITH (primary_key=true), \" +\n+                \"attr2 decimal(10, 6)\" +\n+                \") WITH (\" +\n+                \" partition_by_hash_columns = ARRAY['key1'], \" +\n+                \" partition_by_hash_buckets = 2\" +\n+                \")\");\n+\n+        assertUpdate(\"INSERT INTO test_grouped_execution_t1 VALUES (0, 0, 0), (0, 1, 0), (1, 1, 1)\", 3);\n+        assertUpdate(\"INSERT INTO test_grouped_execution_t2 VALUES (0, 0, 0), (1, 1, 1), (1, 2, 1)\", 3);\n+        assertQuery(groupedExecutionSessionProperties, \"SELECT t1.* FROM test_grouped_execution_t1 t1 join test_grouped_execution_t2 t2 on t1.key1=t2.key1 WHERE t1.attr1=0\", \"SELECT * FROM (VALUES (0, 0, 0), (0, 1, 0))\", assertRemoteExchangesCount(1));\n+\n+        assertUpdate(\"DROP TABLE test_grouped_execution_t1\");\n+        assertUpdate(\"DROP TABLE test_grouped_execution_t2\");\n+    }\n+\n+    @Test\n+    public void testGroupedExecutionGroupBy()\n+    {\n+        Session groupedExecutionSessionProperties = Session.builder(getSession())\n+                .setSystemProperty(COLOCATED_JOIN, \"true\")\n+                .setSystemProperty(GROUPED_EXECUTION, \"true\")\n+                .setSystemProperty(CONCURRENT_LIFESPANS_PER_NODE, \"1\")\n+                .setSystemProperty(DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION, \"false\")\n+                .setSystemProperty(ENABLE_DYNAMIC_FILTERING, \"false\")\n+                .setSystemProperty(KUDU_GROUPED_EXECUTION, \"true\")\n+                .build();\n+\n+        assertUpdate(\"CREATE TABLE IF NOT EXISTS test_grouped_execution (\" +\n+                \"key1 INT WITH (primary_key=true), \" +\n+                \"key2 INT WITH (primary_key=true), \" +\n+                \"attr INT\" +\n+                \") WITH (\" +\n+                \" partition_by_hash_columns = ARRAY['key1'], \" +\n+                \" partition_by_hash_buckets = 2\" +\n+                \")\");\n+\n+        assertUpdate(\"INSERT INTO test_grouped_execution VALUES (0, 0, 0), (0, 1, 1), (1, 0, 1)\", 3);\n+        assertQuery(groupedExecutionSessionProperties, \"SELECT key1, COUNT(1) FROM test_grouped_execution GROUP BY key1\", \"SELECT * FROM (VALUES (0, 2), (1, 1))\", assertRemoteExchangesCount(1));\n+\n+        assertUpdate(\"DROP TABLE test_grouped_execution\");\n+    }\n+\n+    @Test\n+    public void testGroupedExecutionMultiLevelPartitioning()\n+    {\n+        Session groupedExecutionSessionProperties = Session.builder(getSession())\n+                .setSystemProperty(COLOCATED_JOIN, \"true\")\n+                .setSystemProperty(GROUPED_EXECUTION, \"true\")\n+                .setSystemProperty(CONCURRENT_LIFESPANS_PER_NODE, \"1\")\n+                .setSystemProperty(DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION, \"false\")\n+                .setSystemProperty(ENABLE_DYNAMIC_FILTERING, \"false\")\n+                .setSystemProperty(KUDU_GROUPED_EXECUTION, \"true\")\n+                .build();\n+\n+        assertUpdate(\"CREATE TABLE IF NOT EXISTS test_grouped_execution_mtlvl (\" +\n+                \"key1 BIGINT WITH (primary_key=true),\" +\n+                \"key2 BIGINT WITH (primary_key=true),\" +\n+                \"key3 BIGINT WITH (primary_key=true),\" +\n+                \"key4 BIGINT WITH (primary_key=true),\" +\n+                \"attr1 BIGINT\" +\n+                \") WITH (\" +\n+                \" partition_by_hash_columns = ARRAY['key1', 'key2'],\" +\n+                \" partition_by_hash_buckets = 2,\" +\n+                \" partition_by_second_hash_columns = ARRAY['key3'],\" +\n+                \" partition_by_second_hash_buckets = 2\" +\n+                \")\");\n+\n+        assertUpdate(\"INSERT INTO test_grouped_execution_mtlvl VALUES (0, 0, 0, 0, 0), (0, 0, 0, 1, 1), (1, 1, 1, 0, 0), (1, 1, 1, 1, 1)\", 4);\n+        assertQuery(groupedExecutionSessionProperties, \"SELECT key1, key2, key3, COUNT(1) FROM test_grouped_execution_mtlvl GROUP BY key1, key2, key3\", \"SELECT * FROM (VALUES (0, 0, 0, 2), (1, 1, 1, 2))\", assertRemoteExchangesCount(1));\n+\n+        assertUpdate(\"DROP TABLE test_grouped_execution_mtlvl\");\n+    }\n+\n+    @Test\n+    public void testGroupedExecutionMultiLevelCombinedPartitioning()\n+    {\n+        Session groupedExecutionSessionProperties = Session.builder(getSession())\n+                .setSystemProperty(COLOCATED_JOIN, \"true\")\n+                .setSystemProperty(GROUPED_EXECUTION, \"true\")\n+                .setSystemProperty(CONCURRENT_LIFESPANS_PER_NODE, \"1\")\n+                .setSystemProperty(DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION, \"false\")\n+                .setSystemProperty(ENABLE_DYNAMIC_FILTERING, \"false\")\n+                .setSystemProperty(KUDU_GROUPED_EXECUTION, \"true\")\n+                .build();\n+\n+        assertUpdate(\"CREATE TABLE test_grouped_execution_hash_range (\" +\n+                \"key1 BIGINT WITH (primary_key=true),\" +\n+                \"key2 BIGINT WITH (primary_key=true),\" +\n+                \"key3 BIGINT WITH (primary_key=true),\" +\n+                \"key4 BIGINT WITH (primary_key=true),\" +\n+                \"attr1 BIGINT\" +\n+                \") WITH (\" +\n+                \"  partition_by_hash_columns = ARRAY['key1'],\" +\n+                \"  partition_by_hash_buckets = 2,\" +\n+                \"  partition_by_second_hash_columns = ARRAY['key2'],\" +\n+                \"  partition_by_second_hash_buckets = 3,\" +\n+                \"  partition_by_range_columns = ARRAY['key3'],\" +\n+                \"  range_partitions = '[{\\\"lower\\\": null, \\\"upper\\\": \\\"4\\\"}, {\\\"lower\\\": \\\"4\\\", \\\"upper\\\": \\\"9\\\"}, {\\\"lower\\\": \\\"9\\\", \\\"upper\\\": null}]'\" +\n+                \")\");\n+\n+        assertUpdate(\"INSERT INTO test_grouped_execution_hash_range VALUES (0, 0, 0, 0, 0), (0, 0, 9, 0, 9), (0, 0, 9, 1, 0), (1, 1, 0, 0, 1), (1, 1, 9, 0, 2)\", 5);\n+        assertQuery(groupedExecutionSessionProperties, \"SELECT key1, key2, key3, COUNT(1) FROM test_grouped_execution_hash_range GROUP BY key1, key2, key3\", \"SELECT * FROM (VALUES (0, 0, 0, 1), (0, 0, 9, 2), (1, 1, 0, 1), (1, 1, 9, 1))\", assertRemoteExchangesCount(1));\n+\n+        assertUpdate(\"DROP TABLE test_grouped_execution_hash_range\");\n+    }\n+\n+    private Consumer<Plan> assertRemoteExchangesCount(int expectedRemoteExchangesCount)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc3NjczMQ==", "bodyText": "If grouped_execution worked, there will be only one remoteExchange in group by and join operation, or there will be bigger than 1.  :)", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450776731", "createdAt": "2020-07-07T10:51:25Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationGroupedExecution.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.Session;\n+import io.prestosql.cost.StatsAndCosts;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.sql.planner.Plan;\n+import io.prestosql.sql.planner.plan.ExchangeNode;\n+import io.prestosql.testing.AbstractTestQueryFramework;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import io.prestosql.testing.QueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.function.Consumer;\n+\n+import static io.prestosql.SystemSessionProperties.COLOCATED_JOIN;\n+import static io.prestosql.SystemSessionProperties.CONCURRENT_LIFESPANS_PER_NODE;\n+import static io.prestosql.SystemSessionProperties.DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION;\n+import static io.prestosql.SystemSessionProperties.ENABLE_DYNAMIC_FILTERING;\n+import static io.prestosql.SystemSessionProperties.GROUPED_EXECUTION;\n+import static io.prestosql.plugin.kudu.KuduQueryRunnerFactory.createKuduQueryRunner;\n+import static io.prestosql.sql.planner.optimizations.PlanNodeSearcher.searchFrom;\n+import static io.prestosql.sql.planner.planprinter.PlanPrinter.textLogicalPlan;\n+import static java.lang.String.format;\n+\n+public class TestKuduIntegrationGroupedExecution\n+        extends AbstractTestQueryFramework\n+{\n+    public static final String KUDU_GROUPED_EXECUTION = \"kudu.grouped_execution\";\n+    private TestingKuduServer kuduServer;\n+\n+    @Override\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        kuduServer = new TestingKuduServer();\n+        return createKuduQueryRunner(kuduServer, \"test_grouped_execution\");\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public final void destroy()\n+    {\n+        kuduServer.close();\n+    }\n+\n+    @Test\n+    public void testGroupedExecutionJoin()\n+    {\n+        Session groupedExecutionSessionProperties = Session.builder(getSession())\n+                .setSystemProperty(COLOCATED_JOIN, \"true\")\n+                .setSystemProperty(GROUPED_EXECUTION, \"true\")\n+                .setSystemProperty(CONCURRENT_LIFESPANS_PER_NODE, \"1\")\n+                .setSystemProperty(DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION, \"false\")\n+                .setSystemProperty(ENABLE_DYNAMIC_FILTERING, \"false\")\n+                .setSystemProperty(KUDU_GROUPED_EXECUTION, \"true\")\n+                .build();\n+\n+        assertUpdate(\"CREATE TABLE IF NOT EXISTS test_grouped_execution_t1 (\" +\n+                \"key1 INT WITH (primary_key=true), \" +\n+                \"key2 INT WITH (primary_key=true), \" +\n+                \"attr1 INT\" +\n+                \") WITH (\" +\n+                \" partition_by_hash_columns = ARRAY['key1'], \" +\n+                \" partition_by_hash_buckets = 2\" +\n+                \")\");\n+\n+        assertUpdate(\"CREATE TABLE IF NOT EXISTS test_grouped_execution_t2 (\" +\n+                \"key1 INT WITH (primary_key=true), \" +\n+                \"key2 INT WITH (primary_key=true), \" +\n+                \"attr2 decimal(10, 6)\" +\n+                \") WITH (\" +\n+                \" partition_by_hash_columns = ARRAY['key1'], \" +\n+                \" partition_by_hash_buckets = 2\" +\n+                \")\");\n+\n+        assertUpdate(\"INSERT INTO test_grouped_execution_t1 VALUES (0, 0, 0), (0, 1, 0), (1, 1, 1)\", 3);\n+        assertUpdate(\"INSERT INTO test_grouped_execution_t2 VALUES (0, 0, 0), (1, 1, 1), (1, 2, 1)\", 3);\n+        assertQuery(groupedExecutionSessionProperties, \"SELECT t1.* FROM test_grouped_execution_t1 t1 join test_grouped_execution_t2 t2 on t1.key1=t2.key1 WHERE t1.attr1=0\", \"SELECT * FROM (VALUES (0, 0, 0), (0, 1, 0))\", assertRemoteExchangesCount(1));\n+\n+        assertUpdate(\"DROP TABLE test_grouped_execution_t1\");\n+        assertUpdate(\"DROP TABLE test_grouped_execution_t2\");\n+    }\n+\n+    @Test\n+    public void testGroupedExecutionGroupBy()\n+    {\n+        Session groupedExecutionSessionProperties = Session.builder(getSession())\n+                .setSystemProperty(COLOCATED_JOIN, \"true\")\n+                .setSystemProperty(GROUPED_EXECUTION, \"true\")\n+                .setSystemProperty(CONCURRENT_LIFESPANS_PER_NODE, \"1\")\n+                .setSystemProperty(DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION, \"false\")\n+                .setSystemProperty(ENABLE_DYNAMIC_FILTERING, \"false\")\n+                .setSystemProperty(KUDU_GROUPED_EXECUTION, \"true\")\n+                .build();\n+\n+        assertUpdate(\"CREATE TABLE IF NOT EXISTS test_grouped_execution (\" +\n+                \"key1 INT WITH (primary_key=true), \" +\n+                \"key2 INT WITH (primary_key=true), \" +\n+                \"attr INT\" +\n+                \") WITH (\" +\n+                \" partition_by_hash_columns = ARRAY['key1'], \" +\n+                \" partition_by_hash_buckets = 2\" +\n+                \")\");\n+\n+        assertUpdate(\"INSERT INTO test_grouped_execution VALUES (0, 0, 0), (0, 1, 1), (1, 0, 1)\", 3);\n+        assertQuery(groupedExecutionSessionProperties, \"SELECT key1, COUNT(1) FROM test_grouped_execution GROUP BY key1\", \"SELECT * FROM (VALUES (0, 2), (1, 1))\", assertRemoteExchangesCount(1));\n+\n+        assertUpdate(\"DROP TABLE test_grouped_execution\");\n+    }\n+\n+    @Test\n+    public void testGroupedExecutionMultiLevelPartitioning()\n+    {\n+        Session groupedExecutionSessionProperties = Session.builder(getSession())\n+                .setSystemProperty(COLOCATED_JOIN, \"true\")\n+                .setSystemProperty(GROUPED_EXECUTION, \"true\")\n+                .setSystemProperty(CONCURRENT_LIFESPANS_PER_NODE, \"1\")\n+                .setSystemProperty(DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION, \"false\")\n+                .setSystemProperty(ENABLE_DYNAMIC_FILTERING, \"false\")\n+                .setSystemProperty(KUDU_GROUPED_EXECUTION, \"true\")\n+                .build();\n+\n+        assertUpdate(\"CREATE TABLE IF NOT EXISTS test_grouped_execution_mtlvl (\" +\n+                \"key1 BIGINT WITH (primary_key=true),\" +\n+                \"key2 BIGINT WITH (primary_key=true),\" +\n+                \"key3 BIGINT WITH (primary_key=true),\" +\n+                \"key4 BIGINT WITH (primary_key=true),\" +\n+                \"attr1 BIGINT\" +\n+                \") WITH (\" +\n+                \" partition_by_hash_columns = ARRAY['key1', 'key2'],\" +\n+                \" partition_by_hash_buckets = 2,\" +\n+                \" partition_by_second_hash_columns = ARRAY['key3'],\" +\n+                \" partition_by_second_hash_buckets = 2\" +\n+                \")\");\n+\n+        assertUpdate(\"INSERT INTO test_grouped_execution_mtlvl VALUES (0, 0, 0, 0, 0), (0, 0, 0, 1, 1), (1, 1, 1, 0, 0), (1, 1, 1, 1, 1)\", 4);\n+        assertQuery(groupedExecutionSessionProperties, \"SELECT key1, key2, key3, COUNT(1) FROM test_grouped_execution_mtlvl GROUP BY key1, key2, key3\", \"SELECT * FROM (VALUES (0, 0, 0, 2), (1, 1, 1, 2))\", assertRemoteExchangesCount(1));\n+\n+        assertUpdate(\"DROP TABLE test_grouped_execution_mtlvl\");\n+    }\n+\n+    @Test\n+    public void testGroupedExecutionMultiLevelCombinedPartitioning()\n+    {\n+        Session groupedExecutionSessionProperties = Session.builder(getSession())\n+                .setSystemProperty(COLOCATED_JOIN, \"true\")\n+                .setSystemProperty(GROUPED_EXECUTION, \"true\")\n+                .setSystemProperty(CONCURRENT_LIFESPANS_PER_NODE, \"1\")\n+                .setSystemProperty(DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION, \"false\")\n+                .setSystemProperty(ENABLE_DYNAMIC_FILTERING, \"false\")\n+                .setSystemProperty(KUDU_GROUPED_EXECUTION, \"true\")\n+                .build();\n+\n+        assertUpdate(\"CREATE TABLE test_grouped_execution_hash_range (\" +\n+                \"key1 BIGINT WITH (primary_key=true),\" +\n+                \"key2 BIGINT WITH (primary_key=true),\" +\n+                \"key3 BIGINT WITH (primary_key=true),\" +\n+                \"key4 BIGINT WITH (primary_key=true),\" +\n+                \"attr1 BIGINT\" +\n+                \") WITH (\" +\n+                \"  partition_by_hash_columns = ARRAY['key1'],\" +\n+                \"  partition_by_hash_buckets = 2,\" +\n+                \"  partition_by_second_hash_columns = ARRAY['key2'],\" +\n+                \"  partition_by_second_hash_buckets = 3,\" +\n+                \"  partition_by_range_columns = ARRAY['key3'],\" +\n+                \"  range_partitions = '[{\\\"lower\\\": null, \\\"upper\\\": \\\"4\\\"}, {\\\"lower\\\": \\\"4\\\", \\\"upper\\\": \\\"9\\\"}, {\\\"lower\\\": \\\"9\\\", \\\"upper\\\": null}]'\" +\n+                \")\");\n+\n+        assertUpdate(\"INSERT INTO test_grouped_execution_hash_range VALUES (0, 0, 0, 0, 0), (0, 0, 9, 0, 9), (0, 0, 9, 1, 0), (1, 1, 0, 0, 1), (1, 1, 9, 0, 2)\", 5);\n+        assertQuery(groupedExecutionSessionProperties, \"SELECT key1, key2, key3, COUNT(1) FROM test_grouped_execution_hash_range GROUP BY key1, key2, key3\", \"SELECT * FROM (VALUES (0, 0, 0, 1), (0, 0, 9, 2), (1, 1, 0, 1), (1, 1, 9, 1))\", assertRemoteExchangesCount(1));\n+\n+        assertUpdate(\"DROP TABLE test_grouped_execution_hash_range\");\n+    }\n+\n+    private Consumer<Plan> assertRemoteExchangesCount(int expectedRemoteExchangesCount)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY4NDM5Nw=="}, "originalCommit": null, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTg2MDk4OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationGroupedExecution.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODoxMDoyMFrOGtzofg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMDo1NDoxOFrOGt5UaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY4NTA1NA==", "bodyText": "can we reuse io.prestosql.plugin.kudu.AbstractKuduIntegrationSmokeTest?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450685054", "createdAt": "2020-07-07T08:10:20Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationGroupedExecution.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.Session;\n+import io.prestosql.cost.StatsAndCosts;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.sql.planner.Plan;\n+import io.prestosql.sql.planner.plan.ExchangeNode;\n+import io.prestosql.testing.AbstractTestQueryFramework;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import io.prestosql.testing.QueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.function.Consumer;\n+\n+import static io.prestosql.SystemSessionProperties.COLOCATED_JOIN;\n+import static io.prestosql.SystemSessionProperties.CONCURRENT_LIFESPANS_PER_NODE;\n+import static io.prestosql.SystemSessionProperties.DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION;\n+import static io.prestosql.SystemSessionProperties.ENABLE_DYNAMIC_FILTERING;\n+import static io.prestosql.SystemSessionProperties.GROUPED_EXECUTION;\n+import static io.prestosql.plugin.kudu.KuduQueryRunnerFactory.createKuduQueryRunner;\n+import static io.prestosql.sql.planner.optimizations.PlanNodeSearcher.searchFrom;\n+import static io.prestosql.sql.planner.planprinter.PlanPrinter.textLogicalPlan;\n+import static java.lang.String.format;\n+\n+public class TestKuduIntegrationGroupedExecution\n+        extends AbstractTestQueryFramework", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc3ODIxNw==", "bodyText": "In my opinion, grouped_execution is different than other functions, it's special, so I just create a new one, may I keep this change?  :)", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r450778217", "createdAt": "2020-07-07T10:54:18Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationGroupedExecution.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.Session;\n+import io.prestosql.cost.StatsAndCosts;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.sql.planner.Plan;\n+import io.prestosql.sql.planner.plan.ExchangeNode;\n+import io.prestosql.testing.AbstractTestQueryFramework;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import io.prestosql.testing.QueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.function.Consumer;\n+\n+import static io.prestosql.SystemSessionProperties.COLOCATED_JOIN;\n+import static io.prestosql.SystemSessionProperties.CONCURRENT_LIFESPANS_PER_NODE;\n+import static io.prestosql.SystemSessionProperties.DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION;\n+import static io.prestosql.SystemSessionProperties.ENABLE_DYNAMIC_FILTERING;\n+import static io.prestosql.SystemSessionProperties.GROUPED_EXECUTION;\n+import static io.prestosql.plugin.kudu.KuduQueryRunnerFactory.createKuduQueryRunner;\n+import static io.prestosql.sql.planner.optimizations.PlanNodeSearcher.searchFrom;\n+import static io.prestosql.sql.planner.planprinter.PlanPrinter.textLogicalPlan;\n+import static java.lang.String.format;\n+\n+public class TestKuduIntegrationGroupedExecution\n+        extends AbstractTestQueryFramework", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY4NTA1NA=="}, "originalCommit": null, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODMyNDA5OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzozMzoyNVrOGvFJKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODozOTowNlrOGvHY2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAyMDUyMw==", "bodyText": "inline partitionSchema", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r452020523", "createdAt": "2020-07-09T07:33:25Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.primitives.Shorts;\n+import com.google.common.primitives.SignedBytes;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+import org.apache.kudu.client.PartitionSchema.HashBucketSchema;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.lang.Math.toIntExact;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final List<Integer> bucketChannels;\n+    private final List<Type> bucketChannelTypes;\n+\n+    private final List<HashBucketSchema> hashBucketSchemas;\n+    private final Schema schema;\n+\n+    KuduBucketFunction(List<Integer> bucketChannels, List<Type> bucketChannelTypes, KuduTable kuduTable)\n+    {\n+        this.bucketChannels = ImmutableList.copyOf(requireNonNull(bucketChannels));\n+        this.bucketChannelTypes = ImmutableList.copyOf(requireNonNull(bucketChannelTypes));\n+        checkArgument(bucketChannels.size() == bucketChannelTypes.size());\n+\n+        PartitionSchema partitionSchema = kuduTable.getPartitionSchema();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA1NzMwNw==", "bodyText": "Sure!", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r452057307", "createdAt": "2020-07-09T08:39:06Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.primitives.Shorts;\n+import com.google.common.primitives.SignedBytes;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+import org.apache.kudu.client.PartitionSchema.HashBucketSchema;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.lang.Math.toIntExact;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final List<Integer> bucketChannels;\n+    private final List<Type> bucketChannelTypes;\n+\n+    private final List<HashBucketSchema> hashBucketSchemas;\n+    private final Schema schema;\n+\n+    KuduBucketFunction(List<Integer> bucketChannels, List<Type> bucketChannelTypes, KuduTable kuduTable)\n+    {\n+        this.bucketChannels = ImmutableList.copyOf(requireNonNull(bucketChannels));\n+        this.bucketChannelTypes = ImmutableList.copyOf(requireNonNull(bucketChannelTypes));\n+        checkArgument(bucketChannels.size() == bucketChannelTypes.size());\n+\n+        PartitionSchema partitionSchema = kuduTable.getPartitionSchema();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAyMDUyMw=="}, "originalCommit": null, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODMyNjI1OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzozNDoxMVrOGvFKmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODozODo1MVrOGvHYUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAyMDg5MA==", "bodyText": "please inline this method", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r452020890", "createdAt": "2020-07-09T07:34:11Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.primitives.Shorts;\n+import com.google.common.primitives.SignedBytes;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+import org.apache.kudu.client.PartitionSchema.HashBucketSchema;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.lang.Math.toIntExact;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final List<Integer> bucketChannels;\n+    private final List<Type> bucketChannelTypes;\n+\n+    private final List<HashBucketSchema> hashBucketSchemas;\n+    private final Schema schema;\n+\n+    KuduBucketFunction(List<Integer> bucketChannels, List<Type> bucketChannelTypes, KuduTable kuduTable)\n+    {\n+        this.bucketChannels = ImmutableList.copyOf(requireNonNull(bucketChannels));\n+        this.bucketChannelTypes = ImmutableList.copyOf(requireNonNull(bucketChannelTypes));\n+        checkArgument(bucketChannels.size() == bucketChannelTypes.size());\n+\n+        PartitionSchema partitionSchema = kuduTable.getPartitionSchema();\n+        this.hashBucketSchemas = partitionSchema.getHashBucketSchemas();\n+        this.schema = kuduTable.getSchema();\n+    }\n+\n+    @Override\n+    public int getBucket(Page page, int position)\n+    {\n+        return getBucketId(page, position);\n+    }\n+\n+    private int getBucketId(Page page, int position)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA1NzE2OQ==", "bodyText": "Agree!", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r452057169", "createdAt": "2020-07-09T08:38:51Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.primitives.Shorts;\n+import com.google.common.primitives.SignedBytes;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+import org.apache.kudu.client.PartitionSchema.HashBucketSchema;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.lang.Math.toIntExact;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final List<Integer> bucketChannels;\n+    private final List<Type> bucketChannelTypes;\n+\n+    private final List<HashBucketSchema> hashBucketSchemas;\n+    private final Schema schema;\n+\n+    KuduBucketFunction(List<Integer> bucketChannels, List<Type> bucketChannelTypes, KuduTable kuduTable)\n+    {\n+        this.bucketChannels = ImmutableList.copyOf(requireNonNull(bucketChannels));\n+        this.bucketChannelTypes = ImmutableList.copyOf(requireNonNull(bucketChannelTypes));\n+        checkArgument(bucketChannels.size() == bucketChannelTypes.size());\n+\n+        PartitionSchema partitionSchema = kuduTable.getPartitionSchema();\n+        this.hashBucketSchemas = partitionSchema.getHashBucketSchemas();\n+        this.schema = kuduTable.getSchema();\n+    }\n+\n+    @Override\n+    public int getBucket(Page page, int position)\n+    {\n+        return getBucketId(page, position);\n+    }\n+\n+    private int getBucketId(Page page, int position)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAyMDg5MA=="}, "originalCommit": null, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODMzNjM3OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzozNzowMVrOGvFQvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODozOToxM1rOGvHZDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAyMjQ2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        bucketId = bucketId + dimensionBucket;\n          \n          \n            \n                        bucketId += dimensionBucket;", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r452022460", "createdAt": "2020-07-09T07:37:01Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.primitives.Shorts;\n+import com.google.common.primitives.SignedBytes;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+import org.apache.kudu.client.PartitionSchema.HashBucketSchema;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.lang.Math.toIntExact;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final List<Integer> bucketChannels;\n+    private final List<Type> bucketChannelTypes;\n+\n+    private final List<HashBucketSchema> hashBucketSchemas;\n+    private final Schema schema;\n+\n+    KuduBucketFunction(List<Integer> bucketChannels, List<Type> bucketChannelTypes, KuduTable kuduTable)\n+    {\n+        this.bucketChannels = ImmutableList.copyOf(requireNonNull(bucketChannels));\n+        this.bucketChannelTypes = ImmutableList.copyOf(requireNonNull(bucketChannelTypes));\n+        checkArgument(bucketChannels.size() == bucketChannelTypes.size());\n+\n+        PartitionSchema partitionSchema = kuduTable.getPartitionSchema();\n+        this.hashBucketSchemas = partitionSchema.getHashBucketSchemas();\n+        this.schema = kuduTable.getSchema();\n+    }\n+\n+    @Override\n+    public int getBucket(Page page, int position)\n+    {\n+        return getBucketId(page, position);\n+    }\n+\n+    private int getBucketId(Page page, int position)\n+    {\n+        checkArgument(this.bucketChannelTypes.size() == page.getChannelCount());\n+        PartialRow partialRow = new PartialRow(this.schema);\n+        List<Integer> bucketIds = this.hashBucketSchemas.stream()\n+                .map(hashBucketSchema -> this.calculateSchemaLevelBucketId(page, partialRow, hashBucketSchema, position))\n+                .collect(toImmutableList());\n+\n+        int bucketId = 0;\n+        for (int i = 0; i < bucketIds.size(); i++) {\n+            int dimensionBucket = 1;\n+            for (int j = 0; j < i; j++) {\n+                dimensionBucket = dimensionBucket * this.hashBucketSchemas.get(j).getNumBuckets();\n+            }\n+            dimensionBucket = dimensionBucket * bucketIds.get(i);\n+            bucketId = bucketId + dimensionBucket;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA1NzM1Nw==", "bodyText": "Sure!", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r452057357", "createdAt": "2020-07-09T08:39:13Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.primitives.Shorts;\n+import com.google.common.primitives.SignedBytes;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+import org.apache.kudu.client.PartitionSchema.HashBucketSchema;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.lang.Math.toIntExact;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final List<Integer> bucketChannels;\n+    private final List<Type> bucketChannelTypes;\n+\n+    private final List<HashBucketSchema> hashBucketSchemas;\n+    private final Schema schema;\n+\n+    KuduBucketFunction(List<Integer> bucketChannels, List<Type> bucketChannelTypes, KuduTable kuduTable)\n+    {\n+        this.bucketChannels = ImmutableList.copyOf(requireNonNull(bucketChannels));\n+        this.bucketChannelTypes = ImmutableList.copyOf(requireNonNull(bucketChannelTypes));\n+        checkArgument(bucketChannels.size() == bucketChannelTypes.size());\n+\n+        PartitionSchema partitionSchema = kuduTable.getPartitionSchema();\n+        this.hashBucketSchemas = partitionSchema.getHashBucketSchemas();\n+        this.schema = kuduTable.getSchema();\n+    }\n+\n+    @Override\n+    public int getBucket(Page page, int position)\n+    {\n+        return getBucketId(page, position);\n+    }\n+\n+    private int getBucketId(Page page, int position)\n+    {\n+        checkArgument(this.bucketChannelTypes.size() == page.getChannelCount());\n+        PartialRow partialRow = new PartialRow(this.schema);\n+        List<Integer> bucketIds = this.hashBucketSchemas.stream()\n+                .map(hashBucketSchema -> this.calculateSchemaLevelBucketId(page, partialRow, hashBucketSchema, position))\n+                .collect(toImmutableList());\n+\n+        int bucketId = 0;\n+        for (int i = 0; i < bucketIds.size(); i++) {\n+            int dimensionBucket = 1;\n+            for (int j = 0; j < i; j++) {\n+                dimensionBucket = dimensionBucket * this.hashBucketSchemas.get(j).getNumBuckets();\n+            }\n+            dimensionBucket = dimensionBucket * bucketIds.get(i);\n+            bucketId = bucketId + dimensionBucket;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAyMjQ2MA=="}, "originalCommit": null, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODMzNzE5OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzozNzoxNFrOGvFROQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODozOToyMFrOGvHZag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAyMjU4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        dimensionBucket = dimensionBucket * bucketIds.get(i);\n          \n          \n            \n                        dimensionBucket *= bucketIds.get(i);", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r452022585", "createdAt": "2020-07-09T07:37:14Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.primitives.Shorts;\n+import com.google.common.primitives.SignedBytes;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+import org.apache.kudu.client.PartitionSchema.HashBucketSchema;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.lang.Math.toIntExact;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final List<Integer> bucketChannels;\n+    private final List<Type> bucketChannelTypes;\n+\n+    private final List<HashBucketSchema> hashBucketSchemas;\n+    private final Schema schema;\n+\n+    KuduBucketFunction(List<Integer> bucketChannels, List<Type> bucketChannelTypes, KuduTable kuduTable)\n+    {\n+        this.bucketChannels = ImmutableList.copyOf(requireNonNull(bucketChannels));\n+        this.bucketChannelTypes = ImmutableList.copyOf(requireNonNull(bucketChannelTypes));\n+        checkArgument(bucketChannels.size() == bucketChannelTypes.size());\n+\n+        PartitionSchema partitionSchema = kuduTable.getPartitionSchema();\n+        this.hashBucketSchemas = partitionSchema.getHashBucketSchemas();\n+        this.schema = kuduTable.getSchema();\n+    }\n+\n+    @Override\n+    public int getBucket(Page page, int position)\n+    {\n+        return getBucketId(page, position);\n+    }\n+\n+    private int getBucketId(Page page, int position)\n+    {\n+        checkArgument(this.bucketChannelTypes.size() == page.getChannelCount());\n+        PartialRow partialRow = new PartialRow(this.schema);\n+        List<Integer> bucketIds = this.hashBucketSchemas.stream()\n+                .map(hashBucketSchema -> this.calculateSchemaLevelBucketId(page, partialRow, hashBucketSchema, position))\n+                .collect(toImmutableList());\n+\n+        int bucketId = 0;\n+        for (int i = 0; i < bucketIds.size(); i++) {\n+            int dimensionBucket = 1;\n+            for (int j = 0; j < i; j++) {\n+                dimensionBucket = dimensionBucket * this.hashBucketSchemas.get(j).getNumBuckets();\n+            }\n+            dimensionBucket = dimensionBucket * bucketIds.get(i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA1NzQ1MA==", "bodyText": "Sure!", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r452057450", "createdAt": "2020-07-09T08:39:20Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.primitives.Shorts;\n+import com.google.common.primitives.SignedBytes;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+import org.apache.kudu.client.PartitionSchema.HashBucketSchema;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.lang.Math.toIntExact;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final List<Integer> bucketChannels;\n+    private final List<Type> bucketChannelTypes;\n+\n+    private final List<HashBucketSchema> hashBucketSchemas;\n+    private final Schema schema;\n+\n+    KuduBucketFunction(List<Integer> bucketChannels, List<Type> bucketChannelTypes, KuduTable kuduTable)\n+    {\n+        this.bucketChannels = ImmutableList.copyOf(requireNonNull(bucketChannels));\n+        this.bucketChannelTypes = ImmutableList.copyOf(requireNonNull(bucketChannelTypes));\n+        checkArgument(bucketChannels.size() == bucketChannelTypes.size());\n+\n+        PartitionSchema partitionSchema = kuduTable.getPartitionSchema();\n+        this.hashBucketSchemas = partitionSchema.getHashBucketSchemas();\n+        this.schema = kuduTable.getSchema();\n+    }\n+\n+    @Override\n+    public int getBucket(Page page, int position)\n+    {\n+        return getBucketId(page, position);\n+    }\n+\n+    private int getBucketId(Page page, int position)\n+    {\n+        checkArgument(this.bucketChannelTypes.size() == page.getChannelCount());\n+        PartialRow partialRow = new PartialRow(this.schema);\n+        List<Integer> bucketIds = this.hashBucketSchemas.stream()\n+                .map(hashBucketSchema -> this.calculateSchemaLevelBucketId(page, partialRow, hashBucketSchema, position))\n+                .collect(toImmutableList());\n+\n+        int bucketId = 0;\n+        for (int i = 0; i < bucketIds.size(); i++) {\n+            int dimensionBucket = 1;\n+            for (int j = 0; j < i; j++) {\n+                dimensionBucket = dimensionBucket * this.hashBucketSchemas.get(j).getNumBuckets();\n+            }\n+            dimensionBucket = dimensionBucket * bucketIds.get(i);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAyMjU4NQ=="}, "originalCommit": null, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODMzODM5OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzozNzozNFrOGvFR7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODo0MDo0NVrOGvHcqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAyMjc2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            dimensionBucket = dimensionBucket * this.hashBucketSchemas.get(j).getNumBuckets();\n          \n          \n            \n                            dimensionBucket *=  hashBucketSchemas.get(j).getNumBuckets();", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r452022767", "createdAt": "2020-07-09T07:37:34Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.primitives.Shorts;\n+import com.google.common.primitives.SignedBytes;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+import org.apache.kudu.client.PartitionSchema.HashBucketSchema;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.lang.Math.toIntExact;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final List<Integer> bucketChannels;\n+    private final List<Type> bucketChannelTypes;\n+\n+    private final List<HashBucketSchema> hashBucketSchemas;\n+    private final Schema schema;\n+\n+    KuduBucketFunction(List<Integer> bucketChannels, List<Type> bucketChannelTypes, KuduTable kuduTable)\n+    {\n+        this.bucketChannels = ImmutableList.copyOf(requireNonNull(bucketChannels));\n+        this.bucketChannelTypes = ImmutableList.copyOf(requireNonNull(bucketChannelTypes));\n+        checkArgument(bucketChannels.size() == bucketChannelTypes.size());\n+\n+        PartitionSchema partitionSchema = kuduTable.getPartitionSchema();\n+        this.hashBucketSchemas = partitionSchema.getHashBucketSchemas();\n+        this.schema = kuduTable.getSchema();\n+    }\n+\n+    @Override\n+    public int getBucket(Page page, int position)\n+    {\n+        return getBucketId(page, position);\n+    }\n+\n+    private int getBucketId(Page page, int position)\n+    {\n+        checkArgument(this.bucketChannelTypes.size() == page.getChannelCount());\n+        PartialRow partialRow = new PartialRow(this.schema);\n+        List<Integer> bucketIds = this.hashBucketSchemas.stream()\n+                .map(hashBucketSchema -> this.calculateSchemaLevelBucketId(page, partialRow, hashBucketSchema, position))\n+                .collect(toImmutableList());\n+\n+        int bucketId = 0;\n+        for (int i = 0; i < bucketIds.size(); i++) {\n+            int dimensionBucket = 1;\n+            for (int j = 0; j < i; j++) {\n+                dimensionBucket = dimensionBucket * this.hashBucketSchemas.get(j).getNumBuckets();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA1ODI4MQ==", "bodyText": "Sure!", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r452058281", "createdAt": "2020-07-09T08:40:45Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.primitives.Shorts;\n+import com.google.common.primitives.SignedBytes;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+import org.apache.kudu.client.PartitionSchema.HashBucketSchema;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.lang.Math.toIntExact;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final List<Integer> bucketChannels;\n+    private final List<Type> bucketChannelTypes;\n+\n+    private final List<HashBucketSchema> hashBucketSchemas;\n+    private final Schema schema;\n+\n+    KuduBucketFunction(List<Integer> bucketChannels, List<Type> bucketChannelTypes, KuduTable kuduTable)\n+    {\n+        this.bucketChannels = ImmutableList.copyOf(requireNonNull(bucketChannels));\n+        this.bucketChannelTypes = ImmutableList.copyOf(requireNonNull(bucketChannelTypes));\n+        checkArgument(bucketChannels.size() == bucketChannelTypes.size());\n+\n+        PartitionSchema partitionSchema = kuduTable.getPartitionSchema();\n+        this.hashBucketSchemas = partitionSchema.getHashBucketSchemas();\n+        this.schema = kuduTable.getSchema();\n+    }\n+\n+    @Override\n+    public int getBucket(Page page, int position)\n+    {\n+        return getBucketId(page, position);\n+    }\n+\n+    private int getBucketId(Page page, int position)\n+    {\n+        checkArgument(this.bucketChannelTypes.size() == page.getChannelCount());\n+        PartialRow partialRow = new PartialRow(this.schema);\n+        List<Integer> bucketIds = this.hashBucketSchemas.stream()\n+                .map(hashBucketSchema -> this.calculateSchemaLevelBucketId(page, partialRow, hashBucketSchema, position))\n+                .collect(toImmutableList());\n+\n+        int bucketId = 0;\n+        for (int i = 0; i < bucketIds.size(); i++) {\n+            int dimensionBucket = 1;\n+            for (int j = 0; j < i; j++) {\n+                dimensionBucket = dimensionBucket * this.hashBucketSchemas.get(j).getNumBuckets();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAyMjc2Nw=="}, "originalCommit": null, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODM3NTk1OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzo0ODozNlrOGvFo3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODo0MTo1NVrOGvHfSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAyODYzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .add(\"bucketChannels\", Arrays.toString(bucketChannels.toArray()))\n          \n          \n            \n                            .add(\"bucketChannels\", bucketChannels)", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r452028637", "createdAt": "2020-07-09T07:48:36Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.primitives.Shorts;\n+import com.google.common.primitives.SignedBytes;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+import org.apache.kudu.client.PartitionSchema.HashBucketSchema;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.lang.Math.toIntExact;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final List<Integer> bucketChannels;\n+    private final List<Type> bucketChannelTypes;\n+\n+    private final List<HashBucketSchema> hashBucketSchemas;\n+    private final Schema schema;\n+\n+    KuduBucketFunction(List<Integer> bucketChannels, List<Type> bucketChannelTypes, KuduTable kuduTable)\n+    {\n+        this.bucketChannels = ImmutableList.copyOf(requireNonNull(bucketChannels));\n+        this.bucketChannelTypes = ImmutableList.copyOf(requireNonNull(bucketChannelTypes));\n+        checkArgument(bucketChannels.size() == bucketChannelTypes.size());\n+\n+        PartitionSchema partitionSchema = kuduTable.getPartitionSchema();\n+        this.hashBucketSchemas = partitionSchema.getHashBucketSchemas();\n+        this.schema = kuduTable.getSchema();\n+    }\n+\n+    @Override\n+    public int getBucket(Page page, int position)\n+    {\n+        return getBucketId(page, position);\n+    }\n+\n+    private int getBucketId(Page page, int position)\n+    {\n+        checkArgument(this.bucketChannelTypes.size() == page.getChannelCount());\n+        PartialRow partialRow = new PartialRow(this.schema);\n+        List<Integer> bucketIds = this.hashBucketSchemas.stream()\n+                .map(hashBucketSchema -> this.calculateSchemaLevelBucketId(page, partialRow, hashBucketSchema, position))\n+                .collect(toImmutableList());\n+\n+        int bucketId = 0;\n+        for (int i = 0; i < bucketIds.size(); i++) {\n+            int dimensionBucket = 1;\n+            for (int j = 0; j < i; j++) {\n+                dimensionBucket = dimensionBucket * this.hashBucketSchemas.get(j).getNumBuckets();\n+            }\n+            dimensionBucket = dimensionBucket * bucketIds.get(i);\n+            bucketId = bucketId + dimensionBucket;\n+        }\n+        return bucketId;\n+    }\n+\n+    private int calculateSchemaLevelBucketId(Page page, PartialRow partialRow, HashBucketSchema hashBucketSchema, int position)\n+    {\n+        for (int channel = 0; channel < page.getChannelCount(); channel++) {\n+            Block block = page.getBlock(channel);\n+            Type type = this.bucketChannelTypes.get(channel);\n+            Integer bucketChannel = this.bucketChannels.get(channel);\n+            if (BOOLEAN.equals(type)) {\n+                partialRow.addBoolean(bucketChannel, BOOLEAN.getBoolean(block, position));\n+            }\n+            else if (BIGINT.equals(type)) {\n+                partialRow.addLong(bucketChannel, type.getLong(block, position));\n+            }\n+            else if (INTEGER.equals(type)) {\n+                partialRow.addInt(bucketChannel, toIntExact(type.getLong(block, position)));\n+            }\n+            else if (SMALLINT.equals(type)) {\n+                partialRow.addShort(bucketChannel, Shorts.checkedCast(type.getLong(block, position)));\n+            }\n+            else if (TINYINT.equals(type)) {\n+                partialRow.addByte(bucketChannel, SignedBytes.checkedCast(type.getLong(block, position)));\n+            }\n+            else if (DOUBLE.equals(type)) {\n+                partialRow.addDouble(bucketChannel, type.getDouble(block, position));\n+            }\n+            else if (VARCHAR.equals(type)) {\n+                partialRow.addString(bucketChannel, type.getSlice(block, position).toStringUtf8());\n+            }\n+            else {\n+                throw new UnsupportedOperationException(\"Grouped execution is not supported for type: \" + type);\n+            }\n+        }\n+        return KeyEncoderAccessor.getHashBucket(partialRow, hashBucketSchema);\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return toStringHelper(this)\n+                .add(\"bucketChannels\", Arrays.toString(bucketChannels.toArray()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA1ODk1NQ==", "bodyText": "Sure!", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r452058955", "createdAt": "2020-07-09T08:41:55Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduBucketFunction.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.primitives.Shorts;\n+import com.google.common.primitives.SignedBytes;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.type.Type;\n+import org.apache.kudu.Schema;\n+import org.apache.kudu.client.KeyEncoderAccessor;\n+import org.apache.kudu.client.KuduTable;\n+import org.apache.kudu.client.PartialRow;\n+import org.apache.kudu.client.PartitionSchema;\n+import org.apache.kudu.client.PartitionSchema.HashBucketSchema;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+import static io.prestosql.spi.type.TinyintType.TINYINT;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.lang.Math.toIntExact;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduBucketFunction\n+        implements BucketFunction\n+{\n+    private final List<Integer> bucketChannels;\n+    private final List<Type> bucketChannelTypes;\n+\n+    private final List<HashBucketSchema> hashBucketSchemas;\n+    private final Schema schema;\n+\n+    KuduBucketFunction(List<Integer> bucketChannels, List<Type> bucketChannelTypes, KuduTable kuduTable)\n+    {\n+        this.bucketChannels = ImmutableList.copyOf(requireNonNull(bucketChannels));\n+        this.bucketChannelTypes = ImmutableList.copyOf(requireNonNull(bucketChannelTypes));\n+        checkArgument(bucketChannels.size() == bucketChannelTypes.size());\n+\n+        PartitionSchema partitionSchema = kuduTable.getPartitionSchema();\n+        this.hashBucketSchemas = partitionSchema.getHashBucketSchemas();\n+        this.schema = kuduTable.getSchema();\n+    }\n+\n+    @Override\n+    public int getBucket(Page page, int position)\n+    {\n+        return getBucketId(page, position);\n+    }\n+\n+    private int getBucketId(Page page, int position)\n+    {\n+        checkArgument(this.bucketChannelTypes.size() == page.getChannelCount());\n+        PartialRow partialRow = new PartialRow(this.schema);\n+        List<Integer> bucketIds = this.hashBucketSchemas.stream()\n+                .map(hashBucketSchema -> this.calculateSchemaLevelBucketId(page, partialRow, hashBucketSchema, position))\n+                .collect(toImmutableList());\n+\n+        int bucketId = 0;\n+        for (int i = 0; i < bucketIds.size(); i++) {\n+            int dimensionBucket = 1;\n+            for (int j = 0; j < i; j++) {\n+                dimensionBucket = dimensionBucket * this.hashBucketSchemas.get(j).getNumBuckets();\n+            }\n+            dimensionBucket = dimensionBucket * bucketIds.get(i);\n+            bucketId = bucketId + dimensionBucket;\n+        }\n+        return bucketId;\n+    }\n+\n+    private int calculateSchemaLevelBucketId(Page page, PartialRow partialRow, HashBucketSchema hashBucketSchema, int position)\n+    {\n+        for (int channel = 0; channel < page.getChannelCount(); channel++) {\n+            Block block = page.getBlock(channel);\n+            Type type = this.bucketChannelTypes.get(channel);\n+            Integer bucketChannel = this.bucketChannels.get(channel);\n+            if (BOOLEAN.equals(type)) {\n+                partialRow.addBoolean(bucketChannel, BOOLEAN.getBoolean(block, position));\n+            }\n+            else if (BIGINT.equals(type)) {\n+                partialRow.addLong(bucketChannel, type.getLong(block, position));\n+            }\n+            else if (INTEGER.equals(type)) {\n+                partialRow.addInt(bucketChannel, toIntExact(type.getLong(block, position)));\n+            }\n+            else if (SMALLINT.equals(type)) {\n+                partialRow.addShort(bucketChannel, Shorts.checkedCast(type.getLong(block, position)));\n+            }\n+            else if (TINYINT.equals(type)) {\n+                partialRow.addByte(bucketChannel, SignedBytes.checkedCast(type.getLong(block, position)));\n+            }\n+            else if (DOUBLE.equals(type)) {\n+                partialRow.addDouble(bucketChannel, type.getDouble(block, position));\n+            }\n+            else if (VARCHAR.equals(type)) {\n+                partialRow.addString(bucketChannel, type.getSlice(block, position).toStringUtf8());\n+            }\n+            else {\n+                throw new UnsupportedOperationException(\"Grouped execution is not supported for type: \" + type);\n+            }\n+        }\n+        return KeyEncoderAccessor.getHashBucket(partialRow, hashBucketSchema);\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return toStringHelper(this)\n+                .add(\"bucketChannels\", Arrays.toString(bucketChannels.toArray()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAyODYzNw=="}, "originalCommit": null, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODM4MTg1OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduClientSession.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzo1MDoyNlrOGvFsmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODo1NDoxN1rOGvH8nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAyOTU5Mg==", "bodyText": "why tokenId becomes a bucket number?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r452029592", "createdAt": "2020-07-09T07:50:26Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduClientSession.java", "diffHunk": "@@ -203,9 +203,11 @@ public Schema getTableSchema(KuduTableHandle tableHandle)\n         builder.setProjectedColumnIndexes(columnIndexes);\n \n         List<KuduScanToken> tokens = builder.build();\n-        return tokens.stream()\n-                .map(token -> toKuduSplit(tableHandle, token, primaryKeyColumnCount))\n-                .collect(toImmutableList());\n+        ImmutableList.Builder<KuduSplit> tokenBuilder = ImmutableList.builder();\n+        for (int tokenId = 0; tokenId < tokens.size(); tokenId++) {\n+            tokenBuilder.add(toKuduSplit(tableHandle, tokens.get(tokenId), primaryKeyColumnCount, tokenId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2NjQ2MQ==", "bodyText": "Let me explain, in both grouped_execution and ungrouped_execution mode, tokens are all the same, it is created according to sql constraint and are tablets basically, just in grouped_execution tokens has another meaning as bucketId(bucket number).   :)", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r452066461", "createdAt": "2020-07-09T08:54:17Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduClientSession.java", "diffHunk": "@@ -203,9 +203,11 @@ public Schema getTableSchema(KuduTableHandle tableHandle)\n         builder.setProjectedColumnIndexes(columnIndexes);\n \n         List<KuduScanToken> tokens = builder.build();\n-        return tokens.stream()\n-                .map(token -> toKuduSplit(tableHandle, token, primaryKeyColumnCount))\n-                .collect(toImmutableList());\n+        ImmutableList.Builder<KuduSplit> tokenBuilder = ImmutableList.builder();\n+        for (int tokenId = 0; tokenId < tokens.size(); tokenId++) {\n+            tokenBuilder.add(toKuduSplit(tableHandle, tokens.get(tokenId), primaryKeyColumnCount, tokenId));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAyOTU5Mg=="}, "originalCommit": null, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODM4Mzk0OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduConnectorFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzo1MDo1OVrOGvFtzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODo0MzoyMVrOGvHipg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAyOTkwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            binder ->\n          \n          \n            \n                                binder.bind(ClassLoader.class).toInstance(KuduConnectorFactory.class.getClassLoader()));\n          \n          \n            \n                            binder -> binder.bind(ClassLoader.class).toInstance(KuduConnectorFactory.class.getClassLoader()));", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r452029900", "createdAt": "2020-07-09T07:50:59Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduConnectorFactory.java", "diffHunk": "@@ -51,7 +51,9 @@ public Connector create(String catalogName, Map<String, String> config, Connecto\n \n         Bootstrap app = new Bootstrap(\n                 new JsonModule(),\n-                new KuduModule(context.getTypeManager()));\n+                new KuduModule(context.getTypeManager()),\n+                binder ->\n+                    binder.bind(ClassLoader.class).toInstance(KuduConnectorFactory.class.getClassLoader()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA1OTgxNA==", "bodyText": "Sure!", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r452059814", "createdAt": "2020-07-09T08:43:21Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduConnectorFactory.java", "diffHunk": "@@ -51,7 +51,9 @@ public Connector create(String catalogName, Map<String, String> config, Connecto\n \n         Bootstrap app = new Bootstrap(\n                 new JsonModule(),\n-                new KuduModule(context.getTypeManager()));\n+                new KuduModule(context.getTypeManager()),\n+                binder ->\n+                    binder.bind(ClassLoader.class).toInstance(KuduConnectorFactory.class.getClassLoader()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAyOTkwMA=="}, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODM5ODE0OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzo1NTowOVrOGvF26w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODo0NjowNFrOGvHpHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAzMjIzNQ==", "bodyText": "I think you should not call that method to frequently as it might do communication round-trip with Kudu service. Why not to pass KuduTable as argument instead of SchemaTableName", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r452032235", "createdAt": "2020-07-09T07:55:09Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -193,13 +204,44 @@ public KuduTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n     {\n         try {\n             KuduTable table = clientSession.openTable(schemaTableName);\n-            return new KuduTableHandle(schemaTableName, table, TupleDomain.all(), Optional.empty(), false);\n+            return new KuduTableHandle(schemaTableName, table, TupleDomain.all(), Optional.empty(), false, getTableBucketCount(schemaTableName));\n         }\n         catch (NotFoundException e) {\n             return null;\n         }\n     }\n \n+    private OptionalInt getTableBucketCount(SchemaTableName schemaTableName)\n+    {\n+        KuduTable table = clientSession.openTable(schemaTableName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2MTQ2OQ==", "bodyText": "Absolutely right!", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r452061469", "createdAt": "2020-07-09T08:46:04Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -193,13 +204,44 @@ public KuduTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n     {\n         try {\n             KuduTable table = clientSession.openTable(schemaTableName);\n-            return new KuduTableHandle(schemaTableName, table, TupleDomain.all(), Optional.empty(), false);\n+            return new KuduTableHandle(schemaTableName, table, TupleDomain.all(), Optional.empty(), false, getTableBucketCount(schemaTableName));\n         }\n         catch (NotFoundException e) {\n             return null;\n         }\n     }\n \n+    private OptionalInt getTableBucketCount(SchemaTableName schemaTableName)\n+    {\n+        KuduTable table = clientSession.openTable(schemaTableName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAzMjIzNQ=="}, "originalCommit": null, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODQwMjY0OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzo1NjozMFrOGvF52A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMDoyMzoxOFrOGxNmFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAzMjk4NA==", "bodyText": "what is this magic number 999?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r452032984", "createdAt": "2020-07-09T07:56:30Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -193,13 +204,44 @@ public KuduTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n     {\n         try {\n             KuduTable table = clientSession.openTable(schemaTableName);\n-            return new KuduTableHandle(schemaTableName, table, TupleDomain.all(), Optional.empty(), false);\n+            return new KuduTableHandle(schemaTableName, table, TupleDomain.all(), Optional.empty(), false, getTableBucketCount(schemaTableName));\n         }\n         catch (NotFoundException e) {\n             return null;\n         }\n     }\n \n+    private OptionalInt getTableBucketCount(SchemaTableName schemaTableName)\n+    {\n+        KuduTable table = clientSession.openTable(schemaTableName);\n+        return OptionalInt.of(getHashPartitionCount(table) * getRangePartitionCount(table));\n+    }\n+\n+    private int getHashPartitionCount(KuduTable table)\n+    {\n+        int hashBucketCount = 1;\n+        List<HashBucketSchema> bucketSchemas = table.getPartitionSchema().getHashBucketSchemas();\n+        if (bucketSchemas != null && !bucketSchemas.isEmpty()) {\n+            hashBucketCount = bucketSchemas.stream()\n+                    .mapToInt(HashBucketSchema::getNumBuckets)\n+                    .reduce(1, Math::multiplyExact);\n+        }\n+        return hashBucketCount;\n+    }\n+\n+    private int getRangePartitionCount(KuduTable table)\n+    {\n+        int rangePartitionCount;\n+        try {\n+            List<Partition> rangePartitions = table.getRangePartitions(999);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2NzMyNg==", "bodyText": "I think 1 second is enough to wait, so should I create a constant in class KuduMetadata?  :)", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r452067326", "createdAt": "2020-07-09T08:55:33Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -193,13 +204,44 @@ public KuduTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n     {\n         try {\n             KuduTable table = clientSession.openTable(schemaTableName);\n-            return new KuduTableHandle(schemaTableName, table, TupleDomain.all(), Optional.empty(), false);\n+            return new KuduTableHandle(schemaTableName, table, TupleDomain.all(), Optional.empty(), false, getTableBucketCount(schemaTableName));\n         }\n         catch (NotFoundException e) {\n             return null;\n         }\n     }\n \n+    private OptionalInt getTableBucketCount(SchemaTableName schemaTableName)\n+    {\n+        KuduTable table = clientSession.openTable(schemaTableName);\n+        return OptionalInt.of(getHashPartitionCount(table) * getRangePartitionCount(table));\n+    }\n+\n+    private int getHashPartitionCount(KuduTable table)\n+    {\n+        int hashBucketCount = 1;\n+        List<HashBucketSchema> bucketSchemas = table.getPartitionSchema().getHashBucketSchemas();\n+        if (bucketSchemas != null && !bucketSchemas.isEmpty()) {\n+            hashBucketCount = bucketSchemas.stream()\n+                    .mapToInt(HashBucketSchema::getNumBuckets)\n+                    .reduce(1, Math::multiplyExact);\n+        }\n+        return hashBucketCount;\n+    }\n+\n+    private int getRangePartitionCount(KuduTable table)\n+    {\n+        int rangePartitionCount;\n+        try {\n+            List<Partition> rangePartitions = table.getRangePartitions(999);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAzMjk4NA=="}, "originalCommit": null, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI1NjE0OA==", "bodyText": "What happens if it is not enough to wait?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r454256148", "createdAt": "2020-07-14T10:23:18Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduMetadata.java", "diffHunk": "@@ -193,13 +204,44 @@ public KuduTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n     {\n         try {\n             KuduTable table = clientSession.openTable(schemaTableName);\n-            return new KuduTableHandle(schemaTableName, table, TupleDomain.all(), Optional.empty(), false);\n+            return new KuduTableHandle(schemaTableName, table, TupleDomain.all(), Optional.empty(), false, getTableBucketCount(schemaTableName));\n         }\n         catch (NotFoundException e) {\n             return null;\n         }\n     }\n \n+    private OptionalInt getTableBucketCount(SchemaTableName schemaTableName)\n+    {\n+        KuduTable table = clientSession.openTable(schemaTableName);\n+        return OptionalInt.of(getHashPartitionCount(table) * getRangePartitionCount(table));\n+    }\n+\n+    private int getHashPartitionCount(KuduTable table)\n+    {\n+        int hashBucketCount = 1;\n+        List<HashBucketSchema> bucketSchemas = table.getPartitionSchema().getHashBucketSchemas();\n+        if (bucketSchemas != null && !bucketSchemas.isEmpty()) {\n+            hashBucketCount = bucketSchemas.stream()\n+                    .mapToInt(HashBucketSchema::getNumBuckets)\n+                    .reduce(1, Math::multiplyExact);\n+        }\n+        return hashBucketCount;\n+    }\n+\n+    private int getRangePartitionCount(KuduTable table)\n+    {\n+        int rangePartitionCount;\n+        try {\n+            List<Partition> rangePartitions = table.getRangePartitions(999);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAzMjk4NA=="}, "originalCommit": null, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODQwNzkyOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduNodePartitioningProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzo1Nzo1NVrOGvF9FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODo1ODoxOVrOGvIGgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAzMzgxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return IntStream.range(0, bucketCount).mapToObj(KuduPartitionHandle::new).collect(toImmutableList());\n          \n          \n            \n                    return IntStream.range(0, bucketCount)\n          \n          \n            \n                            .mapToObj(KuduPartitionHandle::new)\n          \n          \n            \n                            .collect(toImmutableList());", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r452033813", "createdAt": "2020-07-09T07:57:55Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduNodePartitioningProvider.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.connector.ConnectorBucketNodeMap;\n+import io.prestosql.spi.connector.ConnectorNodePartitioningProvider;\n+import io.prestosql.spi.connector.ConnectorPartitionHandle;\n+import io.prestosql.spi.connector.ConnectorPartitioningHandle;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorSplit;\n+import io.prestosql.spi.connector.ConnectorTransactionHandle;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import io.prestosql.spi.type.Type;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.function.ToIntFunction;\n+import java.util.stream.IntStream;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.connector.ConnectorBucketNodeMap.createBucketNodeMap;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduNodePartitioningProvider\n+        implements ConnectorNodePartitioningProvider\n+{\n+    private final KuduClientSession clientSession;\n+\n+    @Inject\n+    public KuduNodePartitioningProvider(KuduClientSession clientSession)\n+    {\n+        this.clientSession = requireNonNull(clientSession, \"clientSession is null\");\n+    }\n+\n+    @Override\n+    public List<ConnectorPartitionHandle> listPartitionHandles(\n+            ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorPartitioningHandle partitioningHandle)\n+    {\n+        KuduPartitioningHandle handle = (KuduPartitioningHandle) partitioningHandle;\n+        int bucketCount = handle.getBucketCount();\n+        return IntStream.range(0, bucketCount).mapToObj(KuduPartitionHandle::new).collect(toImmutableList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2ODk5Mw==", "bodyText": "Sure!", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r452068993", "createdAt": "2020-07-09T08:58:19Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduNodePartitioningProvider.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.connector.ConnectorBucketNodeMap;\n+import io.prestosql.spi.connector.ConnectorNodePartitioningProvider;\n+import io.prestosql.spi.connector.ConnectorPartitionHandle;\n+import io.prestosql.spi.connector.ConnectorPartitioningHandle;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorSplit;\n+import io.prestosql.spi.connector.ConnectorTransactionHandle;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import io.prestosql.spi.type.Type;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.function.ToIntFunction;\n+import java.util.stream.IntStream;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.connector.ConnectorBucketNodeMap.createBucketNodeMap;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduNodePartitioningProvider\n+        implements ConnectorNodePartitioningProvider\n+{\n+    private final KuduClientSession clientSession;\n+\n+    @Inject\n+    public KuduNodePartitioningProvider(KuduClientSession clientSession)\n+    {\n+        this.clientSession = requireNonNull(clientSession, \"clientSession is null\");\n+    }\n+\n+    @Override\n+    public List<ConnectorPartitionHandle> listPartitionHandles(\n+            ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorPartitioningHandle partitioningHandle)\n+    {\n+        KuduPartitioningHandle handle = (KuduPartitioningHandle) partitioningHandle;\n+        int bucketCount = handle.getBucketCount();\n+        return IntStream.range(0, bucketCount).mapToObj(KuduPartitionHandle::new).collect(toImmutableList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAzMzgxMw=="}, "originalCommit": null, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODQwODkzOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduNodePartitioningProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzo1ODoxMlrOGvF9tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODo1ODoyNlrOGvIGxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAzMzk3NA==", "bodyText": "inline bucketCount", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r452033974", "createdAt": "2020-07-09T07:58:12Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduNodePartitioningProvider.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.connector.ConnectorBucketNodeMap;\n+import io.prestosql.spi.connector.ConnectorNodePartitioningProvider;\n+import io.prestosql.spi.connector.ConnectorPartitionHandle;\n+import io.prestosql.spi.connector.ConnectorPartitioningHandle;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorSplit;\n+import io.prestosql.spi.connector.ConnectorTransactionHandle;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import io.prestosql.spi.type.Type;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.function.ToIntFunction;\n+import java.util.stream.IntStream;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.connector.ConnectorBucketNodeMap.createBucketNodeMap;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduNodePartitioningProvider\n+        implements ConnectorNodePartitioningProvider\n+{\n+    private final KuduClientSession clientSession;\n+\n+    @Inject\n+    public KuduNodePartitioningProvider(KuduClientSession clientSession)\n+    {\n+        this.clientSession = requireNonNull(clientSession, \"clientSession is null\");\n+    }\n+\n+    @Override\n+    public List<ConnectorPartitionHandle> listPartitionHandles(\n+            ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorPartitioningHandle partitioningHandle)\n+    {\n+        KuduPartitioningHandle handle = (KuduPartitioningHandle) partitioningHandle;\n+        int bucketCount = handle.getBucketCount();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2OTA2MQ==", "bodyText": "OK!", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r452069061", "createdAt": "2020-07-09T08:58:26Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduNodePartitioningProvider.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.connector.ConnectorBucketNodeMap;\n+import io.prestosql.spi.connector.ConnectorNodePartitioningProvider;\n+import io.prestosql.spi.connector.ConnectorPartitionHandle;\n+import io.prestosql.spi.connector.ConnectorPartitioningHandle;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorSplit;\n+import io.prestosql.spi.connector.ConnectorTransactionHandle;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import io.prestosql.spi.type.Type;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.function.ToIntFunction;\n+import java.util.stream.IntStream;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.connector.ConnectorBucketNodeMap.createBucketNodeMap;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduNodePartitioningProvider\n+        implements ConnectorNodePartitioningProvider\n+{\n+    private final KuduClientSession clientSession;\n+\n+    @Inject\n+    public KuduNodePartitioningProvider(KuduClientSession clientSession)\n+    {\n+        this.clientSession = requireNonNull(clientSession, \"clientSession is null\");\n+    }\n+\n+    @Override\n+    public List<ConnectorPartitionHandle> listPartitionHandles(\n+            ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorPartitioningHandle partitioningHandle)\n+    {\n+        KuduPartitioningHandle handle = (KuduPartitioningHandle) partitioningHandle;\n+        int bucketCount = handle.getBucketCount();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAzMzk3NA=="}, "originalCommit": null, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODQ1NDQwOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduPartitionHandle.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODoxMToxOVrOGvGaBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODo1OTowOFrOGvIIjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0MTIyMQ==", "bodyText": "display bucket", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r452041221", "createdAt": "2020-07-09T08:11:19Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduPartitionHandle.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.spi.connector.ConnectorPartitionHandle;\n+\n+import java.util.Objects;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+\n+public class KuduPartitionHandle\n+        extends ConnectorPartitionHandle\n+{\n+    private final int bucket;\n+\n+    public KuduPartitionHandle(int bucket)\n+    {\n+        this.bucket = bucket;\n+    }\n+\n+    public int getBucket()\n+    {\n+        return bucket;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o)\n+    {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        KuduPartitionHandle that = (KuduPartitionHandle) o;\n+        return bucket == that.bucket;\n+    }\n+\n+    @Override\n+    public int hashCode()\n+    {\n+        return Objects.hash(bucket);\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return toStringHelper(this)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2OTUxNw==", "bodyText": "Sure!", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r452069517", "createdAt": "2020-07-09T08:59:08Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduPartitionHandle.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.spi.connector.ConnectorPartitionHandle;\n+\n+import java.util.Objects;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+\n+public class KuduPartitionHandle\n+        extends ConnectorPartitionHandle\n+{\n+    private final int bucket;\n+\n+    public KuduPartitionHandle(int bucket)\n+    {\n+        this.bucket = bucket;\n+    }\n+\n+    public int getBucket()\n+    {\n+        return bucket;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o)\n+    {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        KuduPartitionHandle that = (KuduPartitionHandle) o;\n+        return bucket == that.bucket;\n+    }\n+\n+    @Override\n+    public int hashCode()\n+    {\n+        return Objects.hash(bucket);\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return toStringHelper(this)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0MTIyMQ=="}, "originalCommit": null, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODQ2MzEwOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationGroupedExecution.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODoxMzo0NlrOGvGfmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwOTowMzo1NFrOGvITMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0MjY0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertQuery(getSession(), \"SELECT key1, key2, key3, COUNT(1) FROM test_grouped_execution_hash_range GROUP BY key1, key2, key3\", \"SELECT * FROM (VALUES (0, 0, 0, 1), (0, 0, 9, 2), (1, 1, 0, 1), (1, 1, 9, 1))\", assertRemoteExchangesCount(1));\n          \n          \n            \n                    assertQuery(\n          \n          \n            \n                        getSession(), \n          \n          \n            \n                        \"SELECT key1, key2, key3, COUNT(1) FROM test_grouped_execution_hash_range GROUP BY key1, key2, key3\", \n          \n          \n            \n                        \"VALUES (0, 0, 0, 1), (0, 0, 9, 2), (1, 1, 0, 1), (1, 1, 9, 1)\", \n          \n          \n            \n                        assertRemoteExchangesCount(1));\n          \n      \n    \n    \n  \n\nApply same comment to all other tests", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r452042648", "createdAt": "2020-07-09T08:13:46Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationGroupedExecution.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.Session;\n+import io.prestosql.cost.StatsAndCosts;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.sql.planner.Plan;\n+import io.prestosql.sql.planner.plan.ExchangeNode;\n+import io.prestosql.testing.AbstractTestQueryFramework;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import io.prestosql.testing.QueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.function.Consumer;\n+\n+import static io.prestosql.SystemSessionProperties.COLOCATED_JOIN;\n+import static io.prestosql.SystemSessionProperties.CONCURRENT_LIFESPANS_PER_NODE;\n+import static io.prestosql.SystemSessionProperties.DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION;\n+import static io.prestosql.SystemSessionProperties.ENABLE_DYNAMIC_FILTERING;\n+import static io.prestosql.SystemSessionProperties.GROUPED_EXECUTION;\n+import static io.prestosql.plugin.kudu.KuduQueryRunnerFactory.createKuduQueryRunner;\n+import static io.prestosql.plugin.kudu.KuduQueryRunnerFactory.createSession;\n+import static io.prestosql.sql.planner.optimizations.PlanNodeSearcher.searchFrom;\n+import static io.prestosql.sql.planner.planprinter.PlanPrinter.textLogicalPlan;\n+import static java.lang.String.format;\n+\n+public class TestKuduIntegrationGroupedExecution\n+        extends AbstractTestQueryFramework\n+{\n+    private static final String SCHEMA_KUDU = \"kudu\";\n+    private static final String KUDU_GROUPED_EXECUTION = \"grouped_execution\";\n+    private TestingKuduServer kuduServer;\n+\n+    @Override\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        kuduServer = new TestingKuduServer();\n+        Session groupedExecutionSessionProperties = Session.builder(createSession(\"test_grouped_execution\"))\n+                .setSystemProperty(COLOCATED_JOIN, \"true\")\n+                .setSystemProperty(GROUPED_EXECUTION, \"true\")\n+                .setSystemProperty(CONCURRENT_LIFESPANS_PER_NODE, \"1\")\n+                .setSystemProperty(DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION, \"false\")\n+                .setSystemProperty(ENABLE_DYNAMIC_FILTERING, \"false\")\n+                .setCatalogSessionProperty(SCHEMA_KUDU, KUDU_GROUPED_EXECUTION, \"true\")\n+                .build();\n+        return createKuduQueryRunner(kuduServer, groupedExecutionSessionProperties);\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public final void destroy()\n+    {\n+        kuduServer.close();\n+    }\n+\n+    @Test\n+    public void testGroupedExecutionJoin()\n+    {\n+        assertUpdate(\"CREATE TABLE IF NOT EXISTS test_grouped_execution_t1 (\" +\n+                \"key1 INT WITH (primary_key=true), \" +\n+                \"key2 INT WITH (primary_key=true), \" +\n+                \"attr1 INT\" +\n+                \") WITH (\" +\n+                \" partition_by_hash_columns = ARRAY['key1'], \" +\n+                \" partition_by_hash_buckets = 2\" +\n+                \")\");\n+\n+        assertUpdate(\"CREATE TABLE IF NOT EXISTS test_grouped_execution_t2 (\" +\n+                \"key1 INT WITH (primary_key=true), \" +\n+                \"key2 INT WITH (primary_key=true), \" +\n+                \"attr2 decimal(10, 6)\" +\n+                \") WITH (\" +\n+                \" partition_by_hash_columns = ARRAY['key1'], \" +\n+                \" partition_by_hash_buckets = 2\" +\n+                \")\");\n+\n+        assertUpdate(\"INSERT INTO test_grouped_execution_t1 VALUES (0, 0, 0), (0, 1, 0), (1, 1, 1)\", 3);\n+        assertUpdate(\"INSERT INTO test_grouped_execution_t2 VALUES (0, 0, 0), (1, 1, 1), (1, 2, 1)\", 3);\n+        assertQuery(getSession(), \"SELECT t1.* FROM test_grouped_execution_t1 t1 join test_grouped_execution_t2 t2 on t1.key1=t2.key1 WHERE t1.attr1=0\", \"SELECT * FROM (VALUES (0, 0, 0), (0, 1, 0))\", assertRemoteExchangesCount(1));\n+\n+        assertUpdate(\"DROP TABLE test_grouped_execution_t1\");\n+        assertUpdate(\"DROP TABLE test_grouped_execution_t2\");\n+    }\n+\n+    @Test\n+    public void testGroupedExecutionGroupBy()\n+    {\n+        assertUpdate(\"CREATE TABLE IF NOT EXISTS test_grouped_execution (\" +\n+                \"key1 INT WITH (primary_key=true), \" +\n+                \"key2 INT WITH (primary_key=true), \" +\n+                \"attr INT\" +\n+                \") WITH (\" +\n+                \" partition_by_hash_columns = ARRAY['key1'], \" +\n+                \" partition_by_hash_buckets = 2\" +\n+                \")\");\n+\n+        assertUpdate(\"INSERT INTO test_grouped_execution VALUES (0, 0, 0), (0, 1, 1), (1, 0, 1)\", 3);\n+        assertQuery(getSession(), \"SELECT key1, COUNT(1) FROM test_grouped_execution GROUP BY key1\", \"SELECT * FROM (VALUES (0, 2), (1, 1))\", assertRemoteExchangesCount(1));\n+\n+        assertUpdate(\"DROP TABLE test_grouped_execution\");\n+    }\n+\n+    @Test\n+    public void testGroupedExecutionMultiLevelPartitioning()\n+    {\n+        assertUpdate(\"CREATE TABLE IF NOT EXISTS test_grouped_execution_mtlvl (\" +\n+                \"key1 BIGINT WITH (primary_key=true),\" +\n+                \"key2 BIGINT WITH (primary_key=true),\" +\n+                \"key3 BIGINT WITH (primary_key=true),\" +\n+                \"key4 BIGINT WITH (primary_key=true),\" +\n+                \"attr1 BIGINT\" +\n+                \") WITH (\" +\n+                \" partition_by_hash_columns = ARRAY['key1', 'key2'],\" +\n+                \" partition_by_hash_buckets = 2,\" +\n+                \" partition_by_second_hash_columns = ARRAY['key3'],\" +\n+                \" partition_by_second_hash_buckets = 2\" +\n+                \")\");\n+\n+        assertUpdate(\"INSERT INTO test_grouped_execution_mtlvl VALUES (0, 0, 0, 0, 0), (0, 0, 0, 1, 1), (1, 1, 1, 0, 0), (1, 1, 1, 1, 1)\", 4);\n+        assertQuery(getSession(), \"SELECT key1, key2, key3, COUNT(1) FROM test_grouped_execution_mtlvl GROUP BY key1, key2, key3\", \"SELECT * FROM (VALUES (0, 0, 0, 2), (1, 1, 1, 2))\", assertRemoteExchangesCount(1));\n+\n+        assertUpdate(\"DROP TABLE test_grouped_execution_mtlvl\");\n+    }\n+\n+    @Test\n+    public void testGroupedExecutionMultiLevelCombinedPartitioning()\n+    {\n+        assertUpdate(\"CREATE TABLE test_grouped_execution_hash_range (\" +\n+                \"key1 BIGINT WITH (primary_key=true),\" +\n+                \"key2 BIGINT WITH (primary_key=true),\" +\n+                \"key3 BIGINT WITH (primary_key=true),\" +\n+                \"key4 BIGINT WITH (primary_key=true),\" +\n+                \"attr1 BIGINT\" +\n+                \") WITH (\" +\n+                \"  partition_by_hash_columns = ARRAY['key1'],\" +\n+                \"  partition_by_hash_buckets = 2,\" +\n+                \"  partition_by_second_hash_columns = ARRAY['key2'],\" +\n+                \"  partition_by_second_hash_buckets = 3,\" +\n+                \"  partition_by_range_columns = ARRAY['key3'],\" +\n+                \"  range_partitions = '[{\\\"lower\\\": null, \\\"upper\\\": \\\"4\\\"}, {\\\"lower\\\": \\\"4\\\", \\\"upper\\\": \\\"9\\\"}, {\\\"lower\\\": \\\"9\\\", \\\"upper\\\": null}]'\" +\n+                \")\");\n+\n+        assertUpdate(\"INSERT INTO test_grouped_execution_hash_range VALUES (0, 0, 0, 0, 0), (0, 0, 9, 0, 9), (0, 0, 9, 1, 0), (1, 1, 0, 0, 1), (1, 1, 9, 0, 2)\", 5);\n+        assertQuery(getSession(), \"SELECT key1, key2, key3, COUNT(1) FROM test_grouped_execution_hash_range GROUP BY key1, key2, key3\", \"SELECT * FROM (VALUES (0, 0, 0, 1), (0, 0, 9, 2), (1, 1, 0, 1), (1, 1, 9, 1))\", assertRemoteExchangesCount(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA3MjI0Mg==", "bodyText": "Did it!", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r452072242", "createdAt": "2020-07-09T09:03:54Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationGroupedExecution.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.Session;\n+import io.prestosql.cost.StatsAndCosts;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.sql.planner.Plan;\n+import io.prestosql.sql.planner.plan.ExchangeNode;\n+import io.prestosql.testing.AbstractTestQueryFramework;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import io.prestosql.testing.QueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.function.Consumer;\n+\n+import static io.prestosql.SystemSessionProperties.COLOCATED_JOIN;\n+import static io.prestosql.SystemSessionProperties.CONCURRENT_LIFESPANS_PER_NODE;\n+import static io.prestosql.SystemSessionProperties.DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION;\n+import static io.prestosql.SystemSessionProperties.ENABLE_DYNAMIC_FILTERING;\n+import static io.prestosql.SystemSessionProperties.GROUPED_EXECUTION;\n+import static io.prestosql.plugin.kudu.KuduQueryRunnerFactory.createKuduQueryRunner;\n+import static io.prestosql.plugin.kudu.KuduQueryRunnerFactory.createSession;\n+import static io.prestosql.sql.planner.optimizations.PlanNodeSearcher.searchFrom;\n+import static io.prestosql.sql.planner.planprinter.PlanPrinter.textLogicalPlan;\n+import static java.lang.String.format;\n+\n+public class TestKuduIntegrationGroupedExecution\n+        extends AbstractTestQueryFramework\n+{\n+    private static final String SCHEMA_KUDU = \"kudu\";\n+    private static final String KUDU_GROUPED_EXECUTION = \"grouped_execution\";\n+    private TestingKuduServer kuduServer;\n+\n+    @Override\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        kuduServer = new TestingKuduServer();\n+        Session groupedExecutionSessionProperties = Session.builder(createSession(\"test_grouped_execution\"))\n+                .setSystemProperty(COLOCATED_JOIN, \"true\")\n+                .setSystemProperty(GROUPED_EXECUTION, \"true\")\n+                .setSystemProperty(CONCURRENT_LIFESPANS_PER_NODE, \"1\")\n+                .setSystemProperty(DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION, \"false\")\n+                .setSystemProperty(ENABLE_DYNAMIC_FILTERING, \"false\")\n+                .setCatalogSessionProperty(SCHEMA_KUDU, KUDU_GROUPED_EXECUTION, \"true\")\n+                .build();\n+        return createKuduQueryRunner(kuduServer, groupedExecutionSessionProperties);\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public final void destroy()\n+    {\n+        kuduServer.close();\n+    }\n+\n+    @Test\n+    public void testGroupedExecutionJoin()\n+    {\n+        assertUpdate(\"CREATE TABLE IF NOT EXISTS test_grouped_execution_t1 (\" +\n+                \"key1 INT WITH (primary_key=true), \" +\n+                \"key2 INT WITH (primary_key=true), \" +\n+                \"attr1 INT\" +\n+                \") WITH (\" +\n+                \" partition_by_hash_columns = ARRAY['key1'], \" +\n+                \" partition_by_hash_buckets = 2\" +\n+                \")\");\n+\n+        assertUpdate(\"CREATE TABLE IF NOT EXISTS test_grouped_execution_t2 (\" +\n+                \"key1 INT WITH (primary_key=true), \" +\n+                \"key2 INT WITH (primary_key=true), \" +\n+                \"attr2 decimal(10, 6)\" +\n+                \") WITH (\" +\n+                \" partition_by_hash_columns = ARRAY['key1'], \" +\n+                \" partition_by_hash_buckets = 2\" +\n+                \")\");\n+\n+        assertUpdate(\"INSERT INTO test_grouped_execution_t1 VALUES (0, 0, 0), (0, 1, 0), (1, 1, 1)\", 3);\n+        assertUpdate(\"INSERT INTO test_grouped_execution_t2 VALUES (0, 0, 0), (1, 1, 1), (1, 2, 1)\", 3);\n+        assertQuery(getSession(), \"SELECT t1.* FROM test_grouped_execution_t1 t1 join test_grouped_execution_t2 t2 on t1.key1=t2.key1 WHERE t1.attr1=0\", \"SELECT * FROM (VALUES (0, 0, 0), (0, 1, 0))\", assertRemoteExchangesCount(1));\n+\n+        assertUpdate(\"DROP TABLE test_grouped_execution_t1\");\n+        assertUpdate(\"DROP TABLE test_grouped_execution_t2\");\n+    }\n+\n+    @Test\n+    public void testGroupedExecutionGroupBy()\n+    {\n+        assertUpdate(\"CREATE TABLE IF NOT EXISTS test_grouped_execution (\" +\n+                \"key1 INT WITH (primary_key=true), \" +\n+                \"key2 INT WITH (primary_key=true), \" +\n+                \"attr INT\" +\n+                \") WITH (\" +\n+                \" partition_by_hash_columns = ARRAY['key1'], \" +\n+                \" partition_by_hash_buckets = 2\" +\n+                \")\");\n+\n+        assertUpdate(\"INSERT INTO test_grouped_execution VALUES (0, 0, 0), (0, 1, 1), (1, 0, 1)\", 3);\n+        assertQuery(getSession(), \"SELECT key1, COUNT(1) FROM test_grouped_execution GROUP BY key1\", \"SELECT * FROM (VALUES (0, 2), (1, 1))\", assertRemoteExchangesCount(1));\n+\n+        assertUpdate(\"DROP TABLE test_grouped_execution\");\n+    }\n+\n+    @Test\n+    public void testGroupedExecutionMultiLevelPartitioning()\n+    {\n+        assertUpdate(\"CREATE TABLE IF NOT EXISTS test_grouped_execution_mtlvl (\" +\n+                \"key1 BIGINT WITH (primary_key=true),\" +\n+                \"key2 BIGINT WITH (primary_key=true),\" +\n+                \"key3 BIGINT WITH (primary_key=true),\" +\n+                \"key4 BIGINT WITH (primary_key=true),\" +\n+                \"attr1 BIGINT\" +\n+                \") WITH (\" +\n+                \" partition_by_hash_columns = ARRAY['key1', 'key2'],\" +\n+                \" partition_by_hash_buckets = 2,\" +\n+                \" partition_by_second_hash_columns = ARRAY['key3'],\" +\n+                \" partition_by_second_hash_buckets = 2\" +\n+                \")\");\n+\n+        assertUpdate(\"INSERT INTO test_grouped_execution_mtlvl VALUES (0, 0, 0, 0, 0), (0, 0, 0, 1, 1), (1, 1, 1, 0, 0), (1, 1, 1, 1, 1)\", 4);\n+        assertQuery(getSession(), \"SELECT key1, key2, key3, COUNT(1) FROM test_grouped_execution_mtlvl GROUP BY key1, key2, key3\", \"SELECT * FROM (VALUES (0, 0, 0, 2), (1, 1, 1, 2))\", assertRemoteExchangesCount(1));\n+\n+        assertUpdate(\"DROP TABLE test_grouped_execution_mtlvl\");\n+    }\n+\n+    @Test\n+    public void testGroupedExecutionMultiLevelCombinedPartitioning()\n+    {\n+        assertUpdate(\"CREATE TABLE test_grouped_execution_hash_range (\" +\n+                \"key1 BIGINT WITH (primary_key=true),\" +\n+                \"key2 BIGINT WITH (primary_key=true),\" +\n+                \"key3 BIGINT WITH (primary_key=true),\" +\n+                \"key4 BIGINT WITH (primary_key=true),\" +\n+                \"attr1 BIGINT\" +\n+                \") WITH (\" +\n+                \"  partition_by_hash_columns = ARRAY['key1'],\" +\n+                \"  partition_by_hash_buckets = 2,\" +\n+                \"  partition_by_second_hash_columns = ARRAY['key2'],\" +\n+                \"  partition_by_second_hash_buckets = 3,\" +\n+                \"  partition_by_range_columns = ARRAY['key3'],\" +\n+                \"  range_partitions = '[{\\\"lower\\\": null, \\\"upper\\\": \\\"4\\\"}, {\\\"lower\\\": \\\"4\\\", \\\"upper\\\": \\\"9\\\"}, {\\\"lower\\\": \\\"9\\\", \\\"upper\\\": null}]'\" +\n+                \")\");\n+\n+        assertUpdate(\"INSERT INTO test_grouped_execution_hash_range VALUES (0, 0, 0, 0, 0), (0, 0, 9, 0, 9), (0, 0, 9, 1, 0), (1, 1, 0, 0, 1), (1, 1, 9, 0, 2)\", 5);\n+        assertQuery(getSession(), \"SELECT key1, key2, key3, COUNT(1) FROM test_grouped_execution_hash_range GROUP BY key1, key2, key3\", \"SELECT * FROM (VALUES (0, 0, 0, 1), (0, 0, 9, 2), (1, 1, 0, 1), (1, 1, 9, 1))\", assertRemoteExchangesCount(1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0MjY0OA=="}, "originalCommit": null, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODQ3MTMzOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationGroupedExecution.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODoxNjoxMVrOGvGk9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwOToyMTo0OFrOGvI81w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0NDAyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    \"Expected [\\n%s\\n] remote exchanges but found [\\n%s\\n] remote exchanges. Actual plan is [\\n\\n%s\\n]\",\n          \n          \n            \n                                    \"Expected %s remote exchanges but found %s. Actual plan is:\\n%s]\",", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r452044021", "createdAt": "2020-07-09T08:16:11Z", "author": {"login": "kokosing"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationGroupedExecution.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.Session;\n+import io.prestosql.cost.StatsAndCosts;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.sql.planner.Plan;\n+import io.prestosql.sql.planner.plan.ExchangeNode;\n+import io.prestosql.testing.AbstractTestQueryFramework;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import io.prestosql.testing.QueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.function.Consumer;\n+\n+import static io.prestosql.SystemSessionProperties.COLOCATED_JOIN;\n+import static io.prestosql.SystemSessionProperties.CONCURRENT_LIFESPANS_PER_NODE;\n+import static io.prestosql.SystemSessionProperties.DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION;\n+import static io.prestosql.SystemSessionProperties.ENABLE_DYNAMIC_FILTERING;\n+import static io.prestosql.SystemSessionProperties.GROUPED_EXECUTION;\n+import static io.prestosql.plugin.kudu.KuduQueryRunnerFactory.createKuduQueryRunner;\n+import static io.prestosql.plugin.kudu.KuduQueryRunnerFactory.createSession;\n+import static io.prestosql.sql.planner.optimizations.PlanNodeSearcher.searchFrom;\n+import static io.prestosql.sql.planner.planprinter.PlanPrinter.textLogicalPlan;\n+import static java.lang.String.format;\n+\n+public class TestKuduIntegrationGroupedExecution\n+        extends AbstractTestQueryFramework\n+{\n+    private static final String SCHEMA_KUDU = \"kudu\";\n+    private static final String KUDU_GROUPED_EXECUTION = \"grouped_execution\";\n+    private TestingKuduServer kuduServer;\n+\n+    @Override\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        kuduServer = new TestingKuduServer();\n+        Session groupedExecutionSessionProperties = Session.builder(createSession(\"test_grouped_execution\"))\n+                .setSystemProperty(COLOCATED_JOIN, \"true\")\n+                .setSystemProperty(GROUPED_EXECUTION, \"true\")\n+                .setSystemProperty(CONCURRENT_LIFESPANS_PER_NODE, \"1\")\n+                .setSystemProperty(DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION, \"false\")\n+                .setSystemProperty(ENABLE_DYNAMIC_FILTERING, \"false\")\n+                .setCatalogSessionProperty(SCHEMA_KUDU, KUDU_GROUPED_EXECUTION, \"true\")\n+                .build();\n+        return createKuduQueryRunner(kuduServer, groupedExecutionSessionProperties);\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public final void destroy()\n+    {\n+        kuduServer.close();\n+    }\n+\n+    @Test\n+    public void testGroupedExecutionJoin()\n+    {\n+        assertUpdate(\"CREATE TABLE IF NOT EXISTS test_grouped_execution_t1 (\" +\n+                \"key1 INT WITH (primary_key=true), \" +\n+                \"key2 INT WITH (primary_key=true), \" +\n+                \"attr1 INT\" +\n+                \") WITH (\" +\n+                \" partition_by_hash_columns = ARRAY['key1'], \" +\n+                \" partition_by_hash_buckets = 2\" +\n+                \")\");\n+\n+        assertUpdate(\"CREATE TABLE IF NOT EXISTS test_grouped_execution_t2 (\" +\n+                \"key1 INT WITH (primary_key=true), \" +\n+                \"key2 INT WITH (primary_key=true), \" +\n+                \"attr2 decimal(10, 6)\" +\n+                \") WITH (\" +\n+                \" partition_by_hash_columns = ARRAY['key1'], \" +\n+                \" partition_by_hash_buckets = 2\" +\n+                \")\");\n+\n+        assertUpdate(\"INSERT INTO test_grouped_execution_t1 VALUES (0, 0, 0), (0, 1, 0), (1, 1, 1)\", 3);\n+        assertUpdate(\"INSERT INTO test_grouped_execution_t2 VALUES (0, 0, 0), (1, 1, 1), (1, 2, 1)\", 3);\n+        assertQuery(getSession(), \"SELECT t1.* FROM test_grouped_execution_t1 t1 join test_grouped_execution_t2 t2 on t1.key1=t2.key1 WHERE t1.attr1=0\", \"SELECT * FROM (VALUES (0, 0, 0), (0, 1, 0))\", assertRemoteExchangesCount(1));\n+\n+        assertUpdate(\"DROP TABLE test_grouped_execution_t1\");\n+        assertUpdate(\"DROP TABLE test_grouped_execution_t2\");\n+    }\n+\n+    @Test\n+    public void testGroupedExecutionGroupBy()\n+    {\n+        assertUpdate(\"CREATE TABLE IF NOT EXISTS test_grouped_execution (\" +\n+                \"key1 INT WITH (primary_key=true), \" +\n+                \"key2 INT WITH (primary_key=true), \" +\n+                \"attr INT\" +\n+                \") WITH (\" +\n+                \" partition_by_hash_columns = ARRAY['key1'], \" +\n+                \" partition_by_hash_buckets = 2\" +\n+                \")\");\n+\n+        assertUpdate(\"INSERT INTO test_grouped_execution VALUES (0, 0, 0), (0, 1, 1), (1, 0, 1)\", 3);\n+        assertQuery(getSession(), \"SELECT key1, COUNT(1) FROM test_grouped_execution GROUP BY key1\", \"SELECT * FROM (VALUES (0, 2), (1, 1))\", assertRemoteExchangesCount(1));\n+\n+        assertUpdate(\"DROP TABLE test_grouped_execution\");\n+    }\n+\n+    @Test\n+    public void testGroupedExecutionMultiLevelPartitioning()\n+    {\n+        assertUpdate(\"CREATE TABLE IF NOT EXISTS test_grouped_execution_mtlvl (\" +\n+                \"key1 BIGINT WITH (primary_key=true),\" +\n+                \"key2 BIGINT WITH (primary_key=true),\" +\n+                \"key3 BIGINT WITH (primary_key=true),\" +\n+                \"key4 BIGINT WITH (primary_key=true),\" +\n+                \"attr1 BIGINT\" +\n+                \") WITH (\" +\n+                \" partition_by_hash_columns = ARRAY['key1', 'key2'],\" +\n+                \" partition_by_hash_buckets = 2,\" +\n+                \" partition_by_second_hash_columns = ARRAY['key3'],\" +\n+                \" partition_by_second_hash_buckets = 2\" +\n+                \")\");\n+\n+        assertUpdate(\"INSERT INTO test_grouped_execution_mtlvl VALUES (0, 0, 0, 0, 0), (0, 0, 0, 1, 1), (1, 1, 1, 0, 0), (1, 1, 1, 1, 1)\", 4);\n+        assertQuery(getSession(), \"SELECT key1, key2, key3, COUNT(1) FROM test_grouped_execution_mtlvl GROUP BY key1, key2, key3\", \"SELECT * FROM (VALUES (0, 0, 0, 2), (1, 1, 1, 2))\", assertRemoteExchangesCount(1));\n+\n+        assertUpdate(\"DROP TABLE test_grouped_execution_mtlvl\");\n+    }\n+\n+    @Test\n+    public void testGroupedExecutionMultiLevelCombinedPartitioning()\n+    {\n+        assertUpdate(\"CREATE TABLE test_grouped_execution_hash_range (\" +\n+                \"key1 BIGINT WITH (primary_key=true),\" +\n+                \"key2 BIGINT WITH (primary_key=true),\" +\n+                \"key3 BIGINT WITH (primary_key=true),\" +\n+                \"key4 BIGINT WITH (primary_key=true),\" +\n+                \"attr1 BIGINT\" +\n+                \") WITH (\" +\n+                \"  partition_by_hash_columns = ARRAY['key1'],\" +\n+                \"  partition_by_hash_buckets = 2,\" +\n+                \"  partition_by_second_hash_columns = ARRAY['key2'],\" +\n+                \"  partition_by_second_hash_buckets = 3,\" +\n+                \"  partition_by_range_columns = ARRAY['key3'],\" +\n+                \"  range_partitions = '[{\\\"lower\\\": null, \\\"upper\\\": \\\"4\\\"}, {\\\"lower\\\": \\\"4\\\", \\\"upper\\\": \\\"9\\\"}, {\\\"lower\\\": \\\"9\\\", \\\"upper\\\": null}]'\" +\n+                \")\");\n+\n+        assertUpdate(\"INSERT INTO test_grouped_execution_hash_range VALUES (0, 0, 0, 0, 0), (0, 0, 9, 0, 9), (0, 0, 9, 1, 0), (1, 1, 0, 0, 1), (1, 1, 9, 0, 2)\", 5);\n+        assertQuery(getSession(), \"SELECT key1, key2, key3, COUNT(1) FROM test_grouped_execution_hash_range GROUP BY key1, key2, key3\", \"SELECT * FROM (VALUES (0, 0, 0, 1), (0, 0, 9, 2), (1, 1, 0, 1), (1, 1, 9, 1))\", assertRemoteExchangesCount(1));\n+\n+        assertUpdate(\"DROP TABLE test_grouped_execution_hash_range\");\n+    }\n+\n+    private Consumer<Plan> assertRemoteExchangesCount(int expectedRemoteExchangesCount)\n+    {\n+        return plan -> {\n+            int actualRemoteExchangesCount = searchFrom(plan.getRoot())\n+                    .where(node -> node instanceof ExchangeNode && ((ExchangeNode) node).getScope() == ExchangeNode.Scope.REMOTE)\n+                    .findAll()\n+                    .size();\n+            if (actualRemoteExchangesCount != expectedRemoteExchangesCount) {\n+                Session session = getSession();\n+                Metadata metadata = ((DistributedQueryRunner) getQueryRunner()).getCoordinator().getMetadata();\n+                String formattedPlan = textLogicalPlan(plan.getRoot(), plan.getTypes(), metadata, StatsAndCosts.empty(), session, 0, false);\n+                throw new AssertionError(format(\n+                        \"Expected [\\n%s\\n] remote exchanges but found [\\n%s\\n] remote exchanges. Actual plan is [\\n\\n%s\\n]\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA4MjkwMw==", "bodyText": "Sure!", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r452082903", "createdAt": "2020-07-09T09:21:48Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduIntegrationGroupedExecution.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.Session;\n+import io.prestosql.cost.StatsAndCosts;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.sql.planner.Plan;\n+import io.prestosql.sql.planner.plan.ExchangeNode;\n+import io.prestosql.testing.AbstractTestQueryFramework;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import io.prestosql.testing.QueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.function.Consumer;\n+\n+import static io.prestosql.SystemSessionProperties.COLOCATED_JOIN;\n+import static io.prestosql.SystemSessionProperties.CONCURRENT_LIFESPANS_PER_NODE;\n+import static io.prestosql.SystemSessionProperties.DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION;\n+import static io.prestosql.SystemSessionProperties.ENABLE_DYNAMIC_FILTERING;\n+import static io.prestosql.SystemSessionProperties.GROUPED_EXECUTION;\n+import static io.prestosql.plugin.kudu.KuduQueryRunnerFactory.createKuduQueryRunner;\n+import static io.prestosql.plugin.kudu.KuduQueryRunnerFactory.createSession;\n+import static io.prestosql.sql.planner.optimizations.PlanNodeSearcher.searchFrom;\n+import static io.prestosql.sql.planner.planprinter.PlanPrinter.textLogicalPlan;\n+import static java.lang.String.format;\n+\n+public class TestKuduIntegrationGroupedExecution\n+        extends AbstractTestQueryFramework\n+{\n+    private static final String SCHEMA_KUDU = \"kudu\";\n+    private static final String KUDU_GROUPED_EXECUTION = \"grouped_execution\";\n+    private TestingKuduServer kuduServer;\n+\n+    @Override\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        kuduServer = new TestingKuduServer();\n+        Session groupedExecutionSessionProperties = Session.builder(createSession(\"test_grouped_execution\"))\n+                .setSystemProperty(COLOCATED_JOIN, \"true\")\n+                .setSystemProperty(GROUPED_EXECUTION, \"true\")\n+                .setSystemProperty(CONCURRENT_LIFESPANS_PER_NODE, \"1\")\n+                .setSystemProperty(DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION, \"false\")\n+                .setSystemProperty(ENABLE_DYNAMIC_FILTERING, \"false\")\n+                .setCatalogSessionProperty(SCHEMA_KUDU, KUDU_GROUPED_EXECUTION, \"true\")\n+                .build();\n+        return createKuduQueryRunner(kuduServer, groupedExecutionSessionProperties);\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public final void destroy()\n+    {\n+        kuduServer.close();\n+    }\n+\n+    @Test\n+    public void testGroupedExecutionJoin()\n+    {\n+        assertUpdate(\"CREATE TABLE IF NOT EXISTS test_grouped_execution_t1 (\" +\n+                \"key1 INT WITH (primary_key=true), \" +\n+                \"key2 INT WITH (primary_key=true), \" +\n+                \"attr1 INT\" +\n+                \") WITH (\" +\n+                \" partition_by_hash_columns = ARRAY['key1'], \" +\n+                \" partition_by_hash_buckets = 2\" +\n+                \")\");\n+\n+        assertUpdate(\"CREATE TABLE IF NOT EXISTS test_grouped_execution_t2 (\" +\n+                \"key1 INT WITH (primary_key=true), \" +\n+                \"key2 INT WITH (primary_key=true), \" +\n+                \"attr2 decimal(10, 6)\" +\n+                \") WITH (\" +\n+                \" partition_by_hash_columns = ARRAY['key1'], \" +\n+                \" partition_by_hash_buckets = 2\" +\n+                \")\");\n+\n+        assertUpdate(\"INSERT INTO test_grouped_execution_t1 VALUES (0, 0, 0), (0, 1, 0), (1, 1, 1)\", 3);\n+        assertUpdate(\"INSERT INTO test_grouped_execution_t2 VALUES (0, 0, 0), (1, 1, 1), (1, 2, 1)\", 3);\n+        assertQuery(getSession(), \"SELECT t1.* FROM test_grouped_execution_t1 t1 join test_grouped_execution_t2 t2 on t1.key1=t2.key1 WHERE t1.attr1=0\", \"SELECT * FROM (VALUES (0, 0, 0), (0, 1, 0))\", assertRemoteExchangesCount(1));\n+\n+        assertUpdate(\"DROP TABLE test_grouped_execution_t1\");\n+        assertUpdate(\"DROP TABLE test_grouped_execution_t2\");\n+    }\n+\n+    @Test\n+    public void testGroupedExecutionGroupBy()\n+    {\n+        assertUpdate(\"CREATE TABLE IF NOT EXISTS test_grouped_execution (\" +\n+                \"key1 INT WITH (primary_key=true), \" +\n+                \"key2 INT WITH (primary_key=true), \" +\n+                \"attr INT\" +\n+                \") WITH (\" +\n+                \" partition_by_hash_columns = ARRAY['key1'], \" +\n+                \" partition_by_hash_buckets = 2\" +\n+                \")\");\n+\n+        assertUpdate(\"INSERT INTO test_grouped_execution VALUES (0, 0, 0), (0, 1, 1), (1, 0, 1)\", 3);\n+        assertQuery(getSession(), \"SELECT key1, COUNT(1) FROM test_grouped_execution GROUP BY key1\", \"SELECT * FROM (VALUES (0, 2), (1, 1))\", assertRemoteExchangesCount(1));\n+\n+        assertUpdate(\"DROP TABLE test_grouped_execution\");\n+    }\n+\n+    @Test\n+    public void testGroupedExecutionMultiLevelPartitioning()\n+    {\n+        assertUpdate(\"CREATE TABLE IF NOT EXISTS test_grouped_execution_mtlvl (\" +\n+                \"key1 BIGINT WITH (primary_key=true),\" +\n+                \"key2 BIGINT WITH (primary_key=true),\" +\n+                \"key3 BIGINT WITH (primary_key=true),\" +\n+                \"key4 BIGINT WITH (primary_key=true),\" +\n+                \"attr1 BIGINT\" +\n+                \") WITH (\" +\n+                \" partition_by_hash_columns = ARRAY['key1', 'key2'],\" +\n+                \" partition_by_hash_buckets = 2,\" +\n+                \" partition_by_second_hash_columns = ARRAY['key3'],\" +\n+                \" partition_by_second_hash_buckets = 2\" +\n+                \")\");\n+\n+        assertUpdate(\"INSERT INTO test_grouped_execution_mtlvl VALUES (0, 0, 0, 0, 0), (0, 0, 0, 1, 1), (1, 1, 1, 0, 0), (1, 1, 1, 1, 1)\", 4);\n+        assertQuery(getSession(), \"SELECT key1, key2, key3, COUNT(1) FROM test_grouped_execution_mtlvl GROUP BY key1, key2, key3\", \"SELECT * FROM (VALUES (0, 0, 0, 2), (1, 1, 1, 2))\", assertRemoteExchangesCount(1));\n+\n+        assertUpdate(\"DROP TABLE test_grouped_execution_mtlvl\");\n+    }\n+\n+    @Test\n+    public void testGroupedExecutionMultiLevelCombinedPartitioning()\n+    {\n+        assertUpdate(\"CREATE TABLE test_grouped_execution_hash_range (\" +\n+                \"key1 BIGINT WITH (primary_key=true),\" +\n+                \"key2 BIGINT WITH (primary_key=true),\" +\n+                \"key3 BIGINT WITH (primary_key=true),\" +\n+                \"key4 BIGINT WITH (primary_key=true),\" +\n+                \"attr1 BIGINT\" +\n+                \") WITH (\" +\n+                \"  partition_by_hash_columns = ARRAY['key1'],\" +\n+                \"  partition_by_hash_buckets = 2,\" +\n+                \"  partition_by_second_hash_columns = ARRAY['key2'],\" +\n+                \"  partition_by_second_hash_buckets = 3,\" +\n+                \"  partition_by_range_columns = ARRAY['key3'],\" +\n+                \"  range_partitions = '[{\\\"lower\\\": null, \\\"upper\\\": \\\"4\\\"}, {\\\"lower\\\": \\\"4\\\", \\\"upper\\\": \\\"9\\\"}, {\\\"lower\\\": \\\"9\\\", \\\"upper\\\": null}]'\" +\n+                \")\");\n+\n+        assertUpdate(\"INSERT INTO test_grouped_execution_hash_range VALUES (0, 0, 0, 0, 0), (0, 0, 9, 0, 9), (0, 0, 9, 1, 0), (1, 1, 0, 0, 1), (1, 1, 9, 0, 2)\", 5);\n+        assertQuery(getSession(), \"SELECT key1, key2, key3, COUNT(1) FROM test_grouped_execution_hash_range GROUP BY key1, key2, key3\", \"SELECT * FROM (VALUES (0, 0, 0, 1), (0, 0, 9, 2), (1, 1, 0, 1), (1, 1, 9, 1))\", assertRemoteExchangesCount(1));\n+\n+        assertUpdate(\"DROP TABLE test_grouped_execution_hash_range\");\n+    }\n+\n+    private Consumer<Plan> assertRemoteExchangesCount(int expectedRemoteExchangesCount)\n+    {\n+        return plan -> {\n+            int actualRemoteExchangesCount = searchFrom(plan.getRoot())\n+                    .where(node -> node instanceof ExchangeNode && ((ExchangeNode) node).getScope() == ExchangeNode.Scope.REMOTE)\n+                    .findAll()\n+                    .size();\n+            if (actualRemoteExchangesCount != expectedRemoteExchangesCount) {\n+                Session session = getSession();\n+                Metadata metadata = ((DistributedQueryRunner) getQueryRunner()).getCoordinator().getMetadata();\n+                String formattedPlan = textLogicalPlan(plan.getRoot(), plan.getTypes(), metadata, StatsAndCosts.empty(), session, 0, false);\n+                throw new AssertionError(format(\n+                        \"Expected [\\n%s\\n] remote exchanges but found [\\n%s\\n] remote exchanges. Actual plan is [\\n\\n%s\\n]\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0NDAyMQ=="}, "originalCommit": null, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTA0MjA2OnYy", "diffSide": "RIGHT", "path": "presto-kudu/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMjozNzo0NFrOGwmpiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMjozNzo0NFrOGwmpiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYxODA1OQ==", "bodyText": "Please change commit message:\nAdd grouped_execution to kudu connector\n\n<Here please add more details>", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r453618059", "createdAt": "2020-07-13T12:37:44Z", "author": {"login": "kokosing"}, "path": "presto-kudu/pom.xml", "diffHunk": "@@ -17,6 +17,11 @@\n     </properties>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY4OTM1MDkwOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduNodePartitioningProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMVQxMzozMToxNFrOItoALw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNFQxMDoxMTozM1rOIwIDAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDcxMjIzOQ==", "bodyText": "Any reason bucketCount gets ignored here?", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r584712239", "createdAt": "2021-03-01T13:31:14Z", "author": {"login": "findepi"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduNodePartitioningProvider.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.connector.ConnectorBucketNodeMap;\n+import io.prestosql.spi.connector.ConnectorNodePartitioningProvider;\n+import io.prestosql.spi.connector.ConnectorPartitionHandle;\n+import io.prestosql.spi.connector.ConnectorPartitioningHandle;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorSplit;\n+import io.prestosql.spi.connector.ConnectorTransactionHandle;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import io.prestosql.spi.type.Type;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.function.ToIntFunction;\n+import java.util.stream.IntStream;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.connector.ConnectorBucketNodeMap.createBucketNodeMap;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduNodePartitioningProvider\n+        implements ConnectorNodePartitioningProvider\n+{\n+    private final KuduClientSession clientSession;\n+\n+    @Inject\n+    public KuduNodePartitioningProvider(KuduClientSession clientSession)\n+    {\n+        this.clientSession = requireNonNull(clientSession, \"clientSession is null\");\n+    }\n+\n+    @Override\n+    public List<ConnectorPartitionHandle> listPartitionHandles(\n+            ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorPartitioningHandle partitioningHandle)\n+    {\n+        KuduPartitioningHandle handle = (KuduPartitioningHandle) partitioningHandle;\n+        return IntStream.range(0, handle.getBucketCount())\n+                .mapToObj(KuduPartitionHandle::new)\n+                .collect(toImmutableList());\n+    }\n+\n+    @Override\n+    public ConnectorBucketNodeMap getBucketNodeMap(\n+            ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorPartitioningHandle partitioningHandle)\n+    {\n+        KuduPartitioningHandle handle = (KuduPartitioningHandle) partitioningHandle;\n+        return createBucketNodeMap(handle.getBucketCount());\n+    }\n+\n+    @Override\n+    public ToIntFunction<ConnectorSplit> getSplitBucketFunction(\n+            ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorPartitioningHandle partitioningHandle)\n+    {\n+        return value -> ((KuduSplit) value).getBucketNumber();\n+    }\n+\n+    @Override\n+    public BucketFunction getBucketFunction(\n+            ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorPartitioningHandle partitioningHandle,\n+            List<Type> partitionChannelTypes,\n+            int bucketCount)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ddbec5dde4346310c6d233413634fe0269e0b2c"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzMzNDQwMQ==", "bodyText": "Well, bucketCount means the total count of bucket, and I can get more informations about bucket schema in attribute KuduBucketFunction#hashBucketSchemas, so I didn't use this param.   :)", "url": "https://github.com/trinodb/trino/pull/3715#discussion_r587334401", "createdAt": "2021-03-04T10:11:33Z", "author": {"login": "Crossoverrr"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/KuduNodePartitioningProvider.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.kudu;\n+\n+import io.prestosql.spi.connector.BucketFunction;\n+import io.prestosql.spi.connector.ConnectorBucketNodeMap;\n+import io.prestosql.spi.connector.ConnectorNodePartitioningProvider;\n+import io.prestosql.spi.connector.ConnectorPartitionHandle;\n+import io.prestosql.spi.connector.ConnectorPartitioningHandle;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorSplit;\n+import io.prestosql.spi.connector.ConnectorTransactionHandle;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import io.prestosql.spi.type.Type;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.function.ToIntFunction;\n+import java.util.stream.IntStream;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.spi.connector.ConnectorBucketNodeMap.createBucketNodeMap;\n+import static java.util.Objects.requireNonNull;\n+\n+public class KuduNodePartitioningProvider\n+        implements ConnectorNodePartitioningProvider\n+{\n+    private final KuduClientSession clientSession;\n+\n+    @Inject\n+    public KuduNodePartitioningProvider(KuduClientSession clientSession)\n+    {\n+        this.clientSession = requireNonNull(clientSession, \"clientSession is null\");\n+    }\n+\n+    @Override\n+    public List<ConnectorPartitionHandle> listPartitionHandles(\n+            ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorPartitioningHandle partitioningHandle)\n+    {\n+        KuduPartitioningHandle handle = (KuduPartitioningHandle) partitioningHandle;\n+        return IntStream.range(0, handle.getBucketCount())\n+                .mapToObj(KuduPartitionHandle::new)\n+                .collect(toImmutableList());\n+    }\n+\n+    @Override\n+    public ConnectorBucketNodeMap getBucketNodeMap(\n+            ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorPartitioningHandle partitioningHandle)\n+    {\n+        KuduPartitioningHandle handle = (KuduPartitioningHandle) partitioningHandle;\n+        return createBucketNodeMap(handle.getBucketCount());\n+    }\n+\n+    @Override\n+    public ToIntFunction<ConnectorSplit> getSplitBucketFunction(\n+            ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorPartitioningHandle partitioningHandle)\n+    {\n+        return value -> ((KuduSplit) value).getBucketNumber();\n+    }\n+\n+    @Override\n+    public BucketFunction getBucketFunction(\n+            ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorPartitioningHandle partitioningHandle,\n+            List<Type> partitionChannelTypes,\n+            int bucketCount)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDcxMjIzOQ=="}, "originalCommit": {"oid": "0ddbec5dde4346310c6d233413634fe0269e0b2c"}, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4800, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}