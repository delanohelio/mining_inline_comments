{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1ODU0NTU4", "number": 6444, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxMTozNjowM1rOFJgXGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjowMTozOVrOFK3hZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NTExNzA0OnYy", "diffSide": "LEFT", "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/TestKafkaIntegrationPushDown.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxMTozNjowM1rOIL3mhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxMTozNjowM1rOIL3mhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTMxNjIyOA==", "bodyText": "nit: remove one of the only words in the second sentence of commit message", "url": "https://github.com/trinodb/trino/pull/6444#discussion_r549316228", "createdAt": "2020-12-28T11:36:03Z", "author": {"login": "skrzypo987"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/TestKafkaIntegrationPushDown.java", "diffHunk": "@@ -13,7 +13,6 @@\n  */\n package io.prestosql.plugin.kafka;\n \n-import com.google.common.collect.ImmutableList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NTEzNTcyOnYy", "diffSide": "RIGHT", "path": "presto-testing-kafka/src/main/java/io/prestosql/testing/kafka/TestingKafka.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxMTo0NToxMlrOIL3wbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxMTo0NToxMlrOIL3wbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTMxODc2Ng==", "bodyText": "\"Optional\" arguments should be at the end of arg list.", "url": "https://github.com/trinodb/trino/pull/6444#discussion_r549318766", "createdAt": "2020-12-28T11:45:12Z", "author": {"login": "skrzypo987"}, "path": "presto-testing-kafka/src/main/java/io/prestosql/testing/kafka/TestingKafka.java", "diffHunk": "@@ -30,6 +33,13 @@\n \n     void createTopicWithConfig(int partitions, int replication, String topic, boolean enableLogAppendTime);\n \n+    default <K, V> RecordMetadata sendMessages(Stream<ProducerRecord<K, V>> recordStream)\n+    {\n+        return sendMessages(ImmutableMap.of(), recordStream);\n+    }\n+\n+    <K, V> RecordMetadata sendMessages(Map<String, String> extraProducerProperties, Stream<ProducerRecord<K, V>> recordStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2ODk3NTg4OnYy", "diffSide": "RIGHT", "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/schema/confluent/TestKafkaWithConfluentSchemaRegistryMinimalFunctionality.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwOTo1NDoxMlrOINrc7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwOTo1NDoxMlrOINrc7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIxNDMxNg==", "bodyText": "The URL is common across all the test methods.. Can we move it to TestingKafkaWithSchemaRegistry#createProducer", "url": "https://github.com/trinodb/trino/pull/6444#discussion_r551214316", "createdAt": "2021-01-04T09:54:12Z", "author": {"login": "Praveen2112"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/schema/confluent/TestKafkaWithConfluentSchemaRegistryMinimalFunctionality.java", "diffHunk": "@@ -93,7 +97,11 @@ public void testBasicTopic()\n                 format(\"SELECT col_1, col_2 FROM %s\", toDoubleQuoted(topic)),\n                 format(\"SELECT col_1, col_2, col_3 FROM %s\", toDoubleQuoted(topic)),\n                 false,\n-                () -> testingKafkaWithSchemaRegistry.createProducer());\n+                ImmutableMap.<String, String>builder()\n+                        .put(SCHEMA_REGISTRY_URL_CONFIG, testingKafkaWithSchemaRegistry.getSchemaRegistryConnectString())", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTM5NzQ5OnYy", "diffSide": "RIGHT", "path": "plugin/trino-kafka/src/test/java/io/trino/plugin/kafka/schema/confluent/TestKafkaWithConfluentSchemaRegistryMinimalFunctionality.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjowMTozOVrOINvPjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMjowMTozOVrOINvPjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3NjQyOQ==", "bodyText": "Can we extract the common properties ?", "url": "https://github.com/trinodb/trino/pull/6444#discussion_r551276429", "createdAt": "2021-01-04T12:01:39Z", "author": {"login": "Praveen2112"}, "path": "plugin/trino-kafka/src/test/java/io/trino/plugin/kafka/schema/confluent/TestKafkaWithConfluentSchemaRegistryMinimalFunctionality.java", "diffHunk": "@@ -88,60 +89,84 @@ protected QueryRunner createQueryRunner()\n     public void testBasicTopic()\n     {\n         String topic = \"topic-basic-MixedCase\";\n-        assertTopic(topic,\n+        assertTopic(\n+                topic,\n                 format(\"SELECT col_1, col_2 FROM %s\", toDoubleQuoted(topic)),\n                 format(\"SELECT col_1, col_2, col_3 FROM %s\", toDoubleQuoted(topic)),\n                 false,\n-                () -> testingKafkaWithSchemaRegistry.createProducer());\n+                ImmutableMap.<String, String>builder()\n+                        .put(SCHEMA_REGISTRY_URL_CONFIG, testingKafka.getSchemaRegistryConnectString())\n+                        .put(KEY_SERIALIZER_CLASS_CONFIG, LongSerializer.class.getName())\n+                        .put(VALUE_SERIALIZER_CLASS_CONFIG, KafkaAvroSerializer.class.getName())\n+                        .build());\n     }\n \n     @Test\n     public void testTopicWithKeySubject()\n     {\n         String topic = \"topic-Key-Subject\";\n-        assertTopic(topic,\n+        assertTopic(\n+                topic,\n                 format(\"SELECT \\\"%s-key\\\", col_1, col_2 FROM %s\", topic, toDoubleQuoted(topic)),\n                 format(\"SELECT \\\"%s-key\\\", col_1, col_2, col_3 FROM %s\", topic, toDoubleQuoted(topic)),\n                 true,\n-                () -> testingKafkaWithSchemaRegistry.createConfluentProducer());\n+                ImmutableMap.<String, String>builder()\n+                        .put(SCHEMA_REGISTRY_URL_CONFIG, testingKafka.getSchemaRegistryConnectString())", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 93}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4431, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}