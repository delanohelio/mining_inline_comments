{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwMTM2MTQy", "number": 4473, "title": "Ensure to pushdown the aggregation for count(const)", "bodyText": "Purpose\nAggregate pushdown should be enabled even with count(const) query. Since SimplifyCountOverConstant is applied after PushAggregationIntoTableScan, the aggregation pushdown does not treat count(*) and count(const) uniformally.\nThe logical plan of the following query with PostgreSQL connector is fixed.\ncreate table test_table (c1 integer, c2 varchar);\nBefore\n> explain (type logical) select c2, count(1) from test_table group by 1;\n                                                            Query Plan\n-----------------------------------------------------------------------------------------------------------------------------------\n Output[c2, _col1]\n \u2502   Layout: [c2:varchar, count:bigint]\n \u2502   Estimates: {rows: ? (?), cpu: ?, memory: ?, network: ?}\n \u2502   _col1 := count\n \u2514\u2500 RemoteExchange[GATHER]\n    \u2502   Layout: [c2:varchar, count:bigint]\n    \u2502   Estimates: {rows: ? (?), cpu: ?, memory: ?, network: ?}\n    \u2514\u2500 Project[]\n       \u2502   Layout: [c2:varchar, count:bigint]\n       \u2502   Estimates: {rows: ? (?), cpu: ?, memory: ?, network: ?}\n       \u2514\u2500 Aggregate(FINAL)[c2][$hashvalue]\n          \u2502   Layout: [c2:varchar, $hashvalue:bigint, count:bigint]\n          \u2502   Estimates: {rows: ? (?), cpu: ?, memory: ?, network: ?}\n          \u2502   count := count(\"count_0\")\n          \u2514\u2500 LocalExchange[HASH][$hashvalue] (\"c2\")\n             \u2502   Layout: [c2:varchar, count_0:bigint, $hashvalue:bigint]\n             \u2502   Estimates: {rows: ? (?), cpu: ?, memory: ?, network: ?}\n             \u2514\u2500 RemoteExchange[REPARTITION][$hashvalue_1]\n                \u2502   Layout: [c2:varchar, count_0:bigint, $hashvalue_1:bigint]\n                \u2502   Estimates: {rows: ? (?), cpu: ?, memory: ?, network: ?}\n                \u2514\u2500 Aggregate(PARTIAL)[c2][$hashvalue_2]\n                   \u2502   Layout: [c2:varchar, $hashvalue_2:bigint, count_0:bigint]\n                   \u2502   count_0 := count(*)\n                   \u2514\u2500 ScanProject[table = postgresql:public.test_table public.test_table columns=[c2:varchar:varchar]]\n                          Layout: [c2:varchar, $hashvalue_2:bigint]\n                          Estimates: {rows: ? (?), cpu: ?, memory: 0B, network: 0B}/{rows: ? (?), cpu: ?, memory: 0B, network: 0B}\n                          $hashvalue_2 := combine_hash(bigint '0', COALESCE(\"$operator$hash_code\"(\"c2\"), 0))\n                          c2 := c2:varchar:varchar\n\nAfter\nThe fix eliminates the aggregation node from the Presto side properly.\n> explain (type logical) select c2, count(1) from test_table group by 1;\n                                                                                  Query Plan\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n Output[c2, _col1]\n \u2502   Layout: [c2_0:varchar, _presto_generated_1:bigint]\n \u2502   Estimates: {rows: ? (?), cpu: ?, memory: 0B, network: ?}\n \u2502   c2 := c2_0\n \u2502   _col1 := _presto_generated_1\n \u2514\u2500 RemoteExchange[GATHER]\n    \u2502   Layout: [c2_0:varchar, _presto_generated_1:bigint]\n    \u2502   Estimates: {rows: ? (?), cpu: ?, memory: 0B, network: ?}\n    \u2514\u2500 TableScan[postgresql:public.test_table public.test_table columns=[c2:varchar:varchar, count(*):_presto_generated_1:bigint:bigint] groupingSets=[[c2:varchar:varchar]]]\n           Layout: [c2_0:varchar, _presto_generated_1:bigint]\n           Estimates: {rows: ? (?), cpu: ?, memory: 0B, network: 0B}\n           _presto_generated_1 := count(*):_presto_generated_1:bigint:bigint\n           c2_0 := c2:varchar:varchar\n\nIt fixes #4362", "createdAt": "2020-07-16T11:54:20Z", "url": "https://github.com/trinodb/trino/pull/4473", "merged": true, "mergeCommit": {"oid": "84d3b06c56f0c7083fbb6a8de0724c4ea832fd77"}, "closed": true, "closedAt": "2020-07-23T11:21:23Z", "author": {"login": "Lewuathe"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1gmKjgFqTQ0OTkzODA3MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3cye8AFqTQ1MzQ0NjkyMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5OTM4MDcw", "url": "https://github.com/trinodb/trino/pull/4473#pullrequestreview-449938070", "createdAt": "2020-07-16T15:02:42Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTowMjo0M1rOGyvObg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTowMjo0M1rOGyvObg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg1NTcyNg==", "bodyText": "Can you add one with an empty count too, count()?", "url": "https://github.com/trinodb/trino/pull/4473#discussion_r455855726", "createdAt": "2020-07-16T15:02:43Z", "author": {"login": "alexjo2144"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlIntegrationSmokeTest.java", "diffHunk": "@@ -296,6 +296,7 @@ public void testAggregationPushdown()\n         // TODO support aggregation over expressions\n \n         assertPushedDown(\"SELECT count(*) FROM nation\");\n+        assertPushedDown(\"SELECT count(1) FROM nation\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNTIyMTk4", "url": "https://github.com/trinodb/trino/pull/4473#pullrequestreview-450522198", "createdAt": "2020-07-17T09:45:56Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOTo0NTo1NlrOGzMsLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOTo0NTo1NlrOGzMsLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMzODQ3OA==", "bodyText": "Instead of adding new IterativeOptimizer, maybe you could add this rule to existing one. Maybe here: https://github.com/prestosql/presto/pull/4473/files#diff-ac936e954fdd13abb49900e706ea17fcL391?", "url": "https://github.com/trinodb/trino/pull/4473#discussion_r456338478", "createdAt": "2020-07-17T09:45:56Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/PlanOptimizers.java", "diffHunk": "@@ -460,6 +466,7 @@ public PlanOptimizers(\n                                 new ImplementIntersectAsUnion(metadata),\n                                 new ImplementExceptAsUnion(metadata))),\n                 new LimitPushDown(), // Run the LimitPushDown after flattening set operators to make it easier to do the set flattening\n+                simplifyCountOverConstantOptimizer, // Run SimplifyCountOverConstant before column pruning to ensure the aggregation pushdown to connectors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "d95dbe2973db24e8e2216bf1cf435061cb6cd7e4", "author": {"user": {"login": "Lewuathe", "name": "Kai Sasaki"}}, "url": "https://github.com/trinodb/trino/commit/d95dbe2973db24e8e2216bf1cf435061cb6cd7e4", "committedDate": "2020-07-22T11:13:37Z", "message": "Ensure to pushdown the aggregation for count(const)\n\nAggregate pushdown should be enabled even with count(const) query. Since\nSimplifyCountOverConstant is applied after PushAggregationIntoTableScan,\nthe aggregation pushdown does not treat count(*) and count(const)\nuniformally."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "d95dbe2973db24e8e2216bf1cf435061cb6cd7e4", "author": {"user": {"login": "Lewuathe", "name": "Kai Sasaki"}}, "url": "https://github.com/trinodb/trino/commit/d95dbe2973db24e8e2216bf1cf435061cb6cd7e4", "committedDate": "2020-07-22T11:13:37Z", "message": "Ensure to pushdown the aggregation for count(const)\n\nAggregate pushdown should be enabled even with count(const) query. Since\nSimplifyCountOverConstant is applied after PushAggregationIntoTableScan,\nthe aggregation pushdown does not treat count(*) and count(const)\nuniformally."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNDQ2OTIy", "url": "https://github.com/trinodb/trino/pull/4473#pullrequestreview-453446922", "createdAt": "2020-07-22T15:44:24Z", "commit": {"oid": "d95dbe2973db24e8e2216bf1cf435061cb6cd7e4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4731, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}