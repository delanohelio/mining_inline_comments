{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxMTcwOTk0", "number": 5086, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOTowMTozNlrOEg2arw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwOTo1ODo1NVrOEoAhzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODgxNDU1OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/security/AccessDeniedException.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOTowMTozNlrOHN28FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMjoyNToyMlrOHR_PAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI5MzY1Mw==", "bodyText": "this seems generic and not specific to columns only. Are column names available (accessible) to query user?", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r484293653", "createdAt": "2020-09-07T09:01:36Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/security/AccessDeniedException.java", "diffHunk": "@@ -321,6 +326,11 @@ public static void denyCreateViewWithSelect(String sourceName, ConnectorIdentity\n         throw new AccessDeniedException(format(\"View owner '%s' cannot create view that selects from %s%s\", identity.getUser(), sourceName, formatExtraInfo(extraInfo)));\n     }\n \n+    public static void denySelectFromColumns(AccessDeniedException e)\n+    {\n+        throw new AccessDeniedException(\"View owner does not have sufficient privileges\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2NjQ1OA==", "bodyText": "Thank you, renamed.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r484566458", "createdAt": "2020-09-07T21:03:40Z", "author": {"login": "ssheikin"}, "path": "presto-spi/src/main/java/io/prestosql/spi/security/AccessDeniedException.java", "diffHunk": "@@ -321,6 +326,11 @@ public static void denyCreateViewWithSelect(String sourceName, ConnectorIdentity\n         throw new AccessDeniedException(format(\"View owner '%s' cannot create view that selects from %s%s\", identity.getUser(), sourceName, formatExtraInfo(extraInfo)));\n     }\n \n+    public static void denySelectFromColumns(AccessDeniedException e)\n+    {\n+        throw new AccessDeniedException(\"View owner does not have sufficient privileges\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI5MzY1Mw=="}, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYyMzg3Mg==", "bodyText": "I'm not sure about column names. Visibility of column names are out of scope of this pr.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r488623872", "createdAt": "2020-09-15T12:25:22Z", "author": {"login": "ssheikin"}, "path": "presto-spi/src/main/java/io/prestosql/spi/security/AccessDeniedException.java", "diffHunk": "@@ -321,6 +326,11 @@ public static void denyCreateViewWithSelect(String sourceName, ConnectorIdentity\n         throw new AccessDeniedException(format(\"View owner '%s' cannot create view that selects from %s%s\", identity.getUser(), sourceName, formatExtraInfo(extraInfo)));\n     }\n \n+    public static void denySelectFromColumns(AccessDeniedException e)\n+    {\n+        throw new AccessDeniedException(\"View owner does not have sufficient privileges\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI5MzY1Mw=="}, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMDQ2MTUwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxODo0MDo1OVrOHOGK_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QyMToxMzozN1rOHOHrfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU0MzIyOQ==", "bodyText": "Improve view Access Denied messages, can you please describe what was improved?", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r484543229", "createdAt": "2020-09-07T18:40:59Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -14,13 +14,15 @@\n package io.prestosql.security;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2NzkzNA==", "bodyText": "done", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r484567934", "createdAt": "2020-09-07T21:13:37Z", "author": {"login": "ssheikin"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -14,13 +14,15 @@\n package io.prestosql.security;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU0MzIyOQ=="}, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMDQ2MjU1OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/security/AccessDeniedException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxODo0MTo0M1rOHOGLgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QyMToxMzo0NFrOHOHrhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU0MzM2Mg==", "bodyText": "This commit is very simple, and this constructor so far is not used (the usage above does not count), so I would squash these two commits.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r484543362", "createdAt": "2020-09-07T18:41:43Z", "author": {"login": "kokosing"}, "path": "presto-spi/src/main/java/io/prestosql/spi/security/AccessDeniedException.java", "diffHunk": "@@ -28,7 +28,12 @@\n {\n     public AccessDeniedException(String message)\n     {\n-        super(PERMISSION_DENIED, \"Access Denied: \" + message);\n+        this(message, null);\n+    }\n+\n+    public AccessDeniedException(String message, Throwable throwable)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2Nzk0MQ==", "bodyText": "done", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r484567941", "createdAt": "2020-09-07T21:13:44Z", "author": {"login": "ssheikin"}, "path": "presto-spi/src/main/java/io/prestosql/spi/security/AccessDeniedException.java", "diffHunk": "@@ -28,7 +28,12 @@\n {\n     public AccessDeniedException(String message)\n     {\n-        super(PERMISSION_DENIED, \"Access Denied: \" + message);\n+        this(message, null);\n+    }\n+\n+    public AccessDeniedException(String message, Throwable throwable)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU0MzM2Mg=="}, "originalCommit": null, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTMzNzE3OnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNTo1NDoxMFrOHONqVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTo0MDoyMlrOHOVFgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY2NTk0Mg==", "bodyText": "Use AssertJ instead of something custom", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r484665942", "createdAt": "2020-09-08T05:54:10Z", "author": {"login": "electrum"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -295,6 +312,9 @@ protected void assertAccessDenied(\n             }\n             catch (RuntimeException e) {\n                 assertExceptionMessage(sql, e, \".*Access Denied: \" + exceptionsMessageRegExp);\n+                if (exceptionsCauseMessageRegExp != null) {\n+                    assertCauseExceptionMessage(sql, e, \".*Access Denied: \" + exceptionsCauseMessageRegExp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4NzU4Ng==", "bodyText": "Sure! I thought it is not used in this class for some reason.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r484787586", "createdAt": "2020-09-08T09:40:22Z", "author": {"login": "ssheikin"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -295,6 +312,9 @@ protected void assertAccessDenied(\n             }\n             catch (RuntimeException e) {\n                 assertExceptionMessage(sql, e, \".*Access Denied: \" + exceptionsMessageRegExp);\n+                if (exceptionsCauseMessageRegExp != null) {\n+                    assertCauseExceptionMessage(sql, e, \".*Access Denied: \" + exceptionsCauseMessageRegExp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY2NTk0Mg=="}, "originalCommit": null, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTMzOTQ4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNTo1NTowMVrOHONrkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNzo0MTo1OFrOHRHmbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY2NjI1Nw==", "bodyText": "We should fix the callers instead of catching and rethrowing here", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r484666257", "createdAt": "2020-09-08T05:55:01Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -42,7 +44,12 @@ public void checkCanSelectFromColumns(SecurityContext context, QualifiedObjectNa\n         // In SQL, views are special in that they execute with permissions of the owner.\n         // This means that the owner of the view is effectively granting permissions to the user running the query,\n         // and thus must have the equivalent of the SQL standard \"GRANT ... WITH GRANT OPTION\".\n-        delegate.checkCanCreateViewWithSelectFromColumns(context, tableName, columnNames);\n+        try {\n+            delegate.checkCanCreateViewWithSelectFromColumns(context, tableName, columnNames);\n+        }\n+        catch (AccessDeniedException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg0MzI0Ng==", "bodyText": "@electrum In this case we clearly state that it's OWNER(delegate) who lacks privileges and it's possible to find why he lacks these privileges (as stacktrace is preserved).\nOtherwise functionality of AccessControlManager#checkCanCreateViewWithSelectFromColumns has to be duplicated (at least partially, e.g. AccessControlManager#checkCanAccessCatalog) to state that it is not current user, but view owner lacks privileges (at least to access catalog). Such duplication will produce a lot of code which does absolutely the same stuff.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r484843246", "createdAt": "2020-09-08T11:24:40Z", "author": {"login": "ssheikin"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -42,7 +44,12 @@ public void checkCanSelectFromColumns(SecurityContext context, QualifiedObjectNa\n         // In SQL, views are special in that they execute with permissions of the owner.\n         // This means that the owner of the view is effectively granting permissions to the user running the query,\n         // and thus must have the equivalent of the SQL standard \"GRANT ... WITH GRANT OPTION\".\n-        delegate.checkCanCreateViewWithSelectFromColumns(context, tableName, columnNames);\n+        try {\n+            delegate.checkCanCreateViewWithSelectFromColumns(context, tableName, columnNames);\n+        }\n+        catch (AccessDeniedException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY2NjI1Nw=="}, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzOTc3Mg==", "bodyText": "Maybe I'm not understanding the goal of this PR. Can you update the description to explain what \"improve\" means?", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r486639772", "createdAt": "2020-09-10T21:19:37Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -42,7 +44,12 @@ public void checkCanSelectFromColumns(SecurityContext context, QualifiedObjectNa\n         // In SQL, views are special in that they execute with permissions of the owner.\n         // This means that the owner of the view is effectively granting permissions to the user running the query,\n         // and thus must have the equivalent of the SQL standard \"GRANT ... WITH GRANT OPTION\".\n-        delegate.checkCanCreateViewWithSelectFromColumns(context, tableName, columnNames);\n+        try {\n+            delegate.checkCanCreateViewWithSelectFromColumns(context, tableName, columnNames);\n+        }\n+        catch (AccessDeniedException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY2NjI1Nw=="}, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcxMjM2NQ==", "bodyText": "done.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r487712365", "createdAt": "2020-09-14T07:41:58Z", "author": {"login": "ssheikin"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -42,7 +44,12 @@ public void checkCanSelectFromColumns(SecurityContext context, QualifiedObjectNa\n         // In SQL, views are special in that they execute with permissions of the owner.\n         // This means that the owner of the view is effectively granting permissions to the user running the query,\n         // and thus must have the equivalent of the SQL standard \"GRANT ... WITH GRANT OPTION\".\n-        delegate.checkCanCreateViewWithSelectFromColumns(context, tableName, columnNames);\n+        try {\n+            delegate.checkCanCreateViewWithSelectFromColumns(context, tableName, columnNames);\n+        }\n+        catch (AccessDeniedException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY2NjI1Nw=="}, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDE3NTg0OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/security/AccessDeniedException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjozNDowMlrOHQIApQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMDo1MjoxOVrOHR8DTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3MDUwMQ==", "bodyText": "I don't think this public method makes sense here, as it's only usage is inside ViewAccessControl. The other methods are intended for use by any access control implementation. Instead, we can do this inline in ViewAccessControl.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r486670501", "createdAt": "2020-09-10T22:34:02Z", "author": {"login": "electrum"}, "path": "presto-spi/src/main/java/io/prestosql/spi/security/AccessDeniedException.java", "diffHunk": "@@ -321,6 +326,11 @@ public static void denyCreateViewWithSelect(String sourceName, ConnectorIdentity\n         throw new AccessDeniedException(format(\"View owner '%s' cannot create view that selects from %s%s\", identity.getUser(), sourceName, formatExtraInfo(extraInfo)));\n     }\n \n+    public static void denyAccessToViewBecauseOwnerLacksPrivileges(AccessDeniedException e)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3MTcyNA==", "bodyText": "done.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r488571724", "createdAt": "2020-09-15T10:52:19Z", "author": {"login": "ssheikin"}, "path": "presto-spi/src/main/java/io/prestosql/spi/security/AccessDeniedException.java", "diffHunk": "@@ -321,6 +326,11 @@ public static void denyCreateViewWithSelect(String sourceName, ConnectorIdentity\n         throw new AccessDeniedException(format(\"View owner '%s' cannot create view that selects from %s%s\", identity.getUser(), sourceName, formatExtraInfo(extraInfo)));\n     }\n \n+    public static void denyAccessToViewBecauseOwnerLacksPrivileges(AccessDeniedException e)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3MDUwMQ=="}, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTMyODE2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODo0MDoxMlrOHSmaaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMjoxNDoxOFrOHTGB0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI2NTc3MQ==", "bodyText": "This:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new PrestoException(PERMISSION_DENIED, \"Access Denied: View owner does not have sufficient privileges\", e);\n          \n          \n            \n                        throw new PrestoException(PERMISSION_DENIED, \"Access Denied: View owner does not have sufficient privileges: \" + e.getMessage(), e);\n          \n      \n    \n    \n  \n\nwould be more useful & more actionable.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r489265771", "createdAt": "2020-09-16T08:40:12Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -74,4 +78,14 @@ public void checkCanGrantExecuteFunctionPrivilege(SecurityContext context, Strin\n     {\n         return delegate.getColumnMasks(context, tableName, columnName, type);\n     }\n+\n+    private void executeAsViewOwner(Consumer<AccessControl> consumer)\n+    {\n+        try {\n+            consumer.accept(delegate);\n+        }\n+        catch (AccessDeniedException e) {\n+            throw new PrestoException(PERMISSION_DENIED, \"Access Denied: View owner does not have sufficient privileges\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM5NTU4MA==", "bodyText": "@findepi Could you please note in what case it will be more useful and what additional value it brings?\nI think it is not and as the same information is stored in the rethrown exception e and stores in stacktrace.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r489395580", "createdAt": "2020-09-16T12:25:42Z", "author": {"login": "ssheikin"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -74,4 +78,14 @@ public void checkCanGrantExecuteFunctionPrivilege(SecurityContext context, Strin\n     {\n         return delegate.getColumnMasks(context, tableName, columnName, type);\n     }\n+\n+    private void executeAsViewOwner(Consumer<AccessControl> consumer)\n+    {\n+        try {\n+            consumer.accept(delegate);\n+        }\n+        catch (AccessDeniedException e) {\n+            throw new PrestoException(PERMISSION_DENIED, \"Access Denied: View owner does not have sufficient privileges\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI2NTc3MQ=="}, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4Mzc2Mg==", "bodyText": "updated.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r489783762", "createdAt": "2020-09-16T22:14:18Z", "author": {"login": "ssheikin"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -74,4 +78,14 @@ public void checkCanGrantExecuteFunctionPrivilege(SecurityContext context, Strin\n     {\n         return delegate.getColumnMasks(context, tableName, columnName, type);\n     }\n+\n+    private void executeAsViewOwner(Consumer<AccessControl> consumer)\n+    {\n+        try {\n+            consumer.accept(delegate);\n+        }\n+        catch (AccessDeniedException e) {\n+            throw new PrestoException(PERMISSION_DENIED, \"Access Denied: View owner does not have sufficient privileges\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI2NTc3MQ=="}, "originalCommit": null, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDU3MjA2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMjoyMjoxMlrOHTGM-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNzo1MTozNFrOHTVzBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NjYxOA==", "bodyText": "This could take Runnable since the caller already has the delegate. Then this method can be static.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r489786618", "createdAt": "2020-09-16T22:22:12Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -74,4 +78,14 @@ public void checkCanGrantExecuteFunctionPrivilege(SecurityContext context, Strin\n     {\n         return delegate.getColumnMasks(context, tableName, columnName, type);\n     }\n+\n+    private void executeAsViewOwner(Consumer<AccessControl> consumer)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAwMDEyNg==", "bodyText": "I considered Runnable as well, however I did not find good method name.\nexecuteAsViewOwner(() -> delegate.checkCanCreateViewWithSelectFromColumns(context, tableName, columnNames));\ndoes not sound good, because it does not execute something as owner it just wraps it to owner error.\nwrapWithOwnerException(() -> delegate.checkCanCreateViewWithSelectFromColumns(context, tableName, columnNames)); is not good because you can write whatever you want within runnable and it will be just wraped with exception. No relation between delegate(view owner) and exception at all.\nexecuteAsViewOwner(owner -> owner.checkCanCreateViewWithSelectFromColumns(context, tableName, columnNames)); I feel that this code somehow obliges me to utilize owner parameter. Once I use it - I have an exception related to this parameter.\nDespite this version is a little bit longer I prefer it, unless you have better suggestion.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490000126", "createdAt": "2020-09-17T06:28:32Z", "author": {"login": "ssheikin"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -74,4 +78,14 @@ public void checkCanGrantExecuteFunctionPrivilege(SecurityContext context, Strin\n     {\n         return delegate.getColumnMasks(context, tableName, columnName, type);\n     }\n+\n+    private void executeAsViewOwner(Consumer<AccessControl> consumer)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NjYxOA=="}, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAyNDIwMA==", "bodyText": "I considered Runnable as well, however I did not find good method name.\n\nLet's call it wrapAccessDeniedException", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490024200", "createdAt": "2020-09-17T07:19:43Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -74,4 +78,14 @@ public void checkCanGrantExecuteFunctionPrivilege(SecurityContext context, Strin\n     {\n         return delegate.getColumnMasks(context, tableName, columnName, type);\n     }\n+\n+    private void executeAsViewOwner(Consumer<AccessControl> consumer)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NjYxOA=="}, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAzNDQxOQ==", "bodyText": "I still don't like it, but 2:1. Renamed.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490034419", "createdAt": "2020-09-17T07:38:15Z", "author": {"login": "ssheikin"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -74,4 +78,14 @@ public void checkCanGrantExecuteFunctionPrivilege(SecurityContext context, Strin\n     {\n         return delegate.getColumnMasks(context, tableName, columnName, type);\n     }\n+\n+    private void executeAsViewOwner(Consumer<AccessControl> consumer)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NjYxOA=="}, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAzOTM4NQ==", "bodyText": "@electrum why do you prefer static over non static methods?", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490039385", "createdAt": "2020-09-17T07:46:55Z", "author": {"login": "ssheikin"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -74,4 +78,14 @@ public void checkCanGrantExecuteFunctionPrivilege(SecurityContext context, Strin\n     {\n         return delegate.getColumnMasks(context, tableName, columnName, type);\n     }\n+\n+    private void executeAsViewOwner(Consumer<AccessControl> consumer)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NjYxOA=="}, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0MjExOA==", "bodyText": "static method is just a function while method is a method ;)\n\nFunction does not requires polymorphism and it is much easier for compiler and runtime.\nIt is much easier to maintain that, one can easily extract this function out of this class and reuse it somewhere.\nIt is more readable, reader knows that this function won't modify or even access the object state.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490042118", "createdAt": "2020-09-17T07:51:34Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -74,4 +78,14 @@ public void checkCanGrantExecuteFunctionPrivilege(SecurityContext context, Strin\n     {\n         return delegate.getColumnMasks(context, tableName, columnName, type);\n     }\n+\n+    private void executeAsViewOwner(Consumer<AccessControl> consumer)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NjYxOA=="}, "originalCommit": null, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDU3Mzc1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMjoyMjo1MlrOHTGN6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOTowNDoyMFrOHTYmEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4Njg1Nw==", "bodyText": "This will result in a repeated \"Access Denied\" in the message:\n\nAccess Denied: View owner does not have sufficient privileges: Access Denied: View owner 'xxx' cannot create view that selects from yyy\n\nWe should strip that off, since we know the original message always has it.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r489786857", "createdAt": "2020-09-16T22:22:52Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -74,4 +78,14 @@ public void checkCanGrantExecuteFunctionPrivilege(SecurityContext context, Strin\n     {\n         return delegate.getColumnMasks(context, tableName, columnName, type);\n     }\n+\n+    private void executeAsViewOwner(Consumer<AccessControl> consumer)\n+    {\n+        try {\n+            consumer.accept(delegate);\n+        }\n+        catch (AccessDeniedException e) {\n+            throw new PrestoException(PERMISSION_DENIED, \"Access Denied: View owner does not have sufficient privileges: \" + e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAxOTIzMQ==", "bodyText": "Done", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490019231", "createdAt": "2020-09-17T07:10:25Z", "author": {"login": "ssheikin"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -74,4 +78,14 @@ public void checkCanGrantExecuteFunctionPrivilege(SecurityContext context, Strin\n     {\n         return delegate.getColumnMasks(context, tableName, columnName, type);\n     }\n+\n+    private void executeAsViewOwner(Consumer<AccessControl> consumer)\n+    {\n+        try {\n+            consumer.accept(delegate);\n+        }\n+        catch (AccessDeniedException e) {\n+            throw new PrestoException(PERMISSION_DENIED, \"Access Denied: View owner does not have sufficient privileges: \" + e.getMessage(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4Njg1Nw=="}, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0OTI0Mw==", "bodyText": "does the exception message contain \"Access Denied\" i once now?", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490049243", "createdAt": "2020-09-17T08:03:33Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -74,4 +78,14 @@ public void checkCanGrantExecuteFunctionPrivilege(SecurityContext context, Strin\n     {\n         return delegate.getColumnMasks(context, tableName, columnName, type);\n     }\n+\n+    private void executeAsViewOwner(Consumer<AccessControl> consumer)\n+    {\n+        try {\n+            consumer.accept(delegate);\n+        }\n+        catch (AccessDeniedException e) {\n+            throw new PrestoException(PERMISSION_DENIED, \"Access Denied: View owner does not have sufficient privileges: \" + e.getMessage(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4Njg1Nw=="}, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA4Nzk1Mg==", "bodyText": "Yes.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490087952", "createdAt": "2020-09-17T09:04:20Z", "author": {"login": "ssheikin"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -74,4 +78,14 @@ public void checkCanGrantExecuteFunctionPrivilege(SecurityContext context, Strin\n     {\n         return delegate.getColumnMasks(context, tableName, columnName, type);\n     }\n+\n+    private void executeAsViewOwner(Consumer<AccessControl> consumer)\n+    {\n+        try {\n+            consumer.accept(delegate);\n+        }\n+        catch (AccessDeniedException e) {\n+            throw new PrestoException(PERMISSION_DENIED, \"Access Denied: View owner does not have sufficient privileges: \" + e.getMessage(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4Njg1Nw=="}, "originalCommit": null, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDU3NjM1OnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMjoyNDowM1rOHTGPfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNjozMzo1MFrOHTTXiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NzI2MA==", "bodyText": "Either wrap all arguments or none", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r489787260", "createdAt": "2020-09-16T22:24:03Z", "author": {"login": "electrum"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -293,10 +293,26 @@ protected void assertAccessDenied(@Language(\"SQL\") String sql, @Language(\"RegExp\n         assertAccessDenied(getSession(), sql, exceptionsMessageRegExp, deniedPrivileges);\n     }\n \n+    protected void assertAccessDenied(@Language(\"SQL\") String sql, @Language(\"RegExp\") String exceptionsMessageRegExp, @Language(\"RegExp\") String exceptionsCauseMessageRegExp,\n+            TestingPrivilege... deniedPrivileges)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAwMjMxNQ==", "bodyText": "done", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490002315", "createdAt": "2020-09-17T06:33:50Z", "author": {"login": "ssheikin"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -293,10 +293,26 @@ protected void assertAccessDenied(@Language(\"SQL\") String sql, @Language(\"RegExp\n         assertAccessDenied(getSession(), sql, exceptionsMessageRegExp, deniedPrivileges);\n     }\n \n+    protected void assertAccessDenied(@Language(\"SQL\") String sql, @Language(\"RegExp\") String exceptionsMessageRegExp, @Language(\"RegExp\") String exceptionsCauseMessageRegExp,\n+            TestingPrivilege... deniedPrivileges)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NzI2MA=="}, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDU4Mzk2OnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMjoyNzowMVrOHTGT0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNzoxMTozN1rOHTUcIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4ODM2OQ==", "bodyText": "No need to use string format for simple concatenation\nString query = \"Query: \" + sql;", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r489788369", "createdAt": "2020-09-16T22:27:01Z", "author": {"login": "electrum"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -306,7 +322,11 @@ protected void assertAccessDenied(\n                 fail(\"Expected \" + AccessDeniedException.class.getSimpleName());\n             }\n             catch (RuntimeException e) {\n-                assertExceptionMessage(sql, e, \".*Access Denied: \" + exceptionsMessageRegExp);\n+                String query = format(\"Query: %s\", sql);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAxOTg3NA==", "bodyText": "done", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490019874", "createdAt": "2020-09-17T07:11:37Z", "author": {"login": "ssheikin"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -306,7 +322,11 @@ protected void assertAccessDenied(\n                 fail(\"Expected \" + AccessDeniedException.class.getSimpleName());\n             }\n             catch (RuntimeException e) {\n-                assertExceptionMessage(sql, e, \".*Access Denied: \" + exceptionsMessageRegExp);\n+                String query = format(\"Query: %s\", sql);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4ODM2OQ=="}, "originalCommit": null, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjAzODA4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNzoxOTozNFrOHTUsuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNzozODoyMFrOHTVVGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAyNDEyMA==", "bodyText": "Please throw io.prestosql.spi.security.AccessDeniedException", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490024120", "createdAt": "2020-09-17T07:19:34Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -74,4 +78,14 @@ public void checkCanGrantExecuteFunctionPrivilege(SecurityContext context, Strin\n     {\n         return delegate.getColumnMasks(context, tableName, columnName, type);\n     }\n+\n+    private void executeAsViewOwner(Consumer<AccessControl> consumer)\n+    {\n+        try {\n+            consumer.accept(delegate);\n+        }\n+        catch (AccessDeniedException e) {\n+            throw new PrestoException(PERMISSION_DENIED, \"View owner does not have sufficient privileges: \" + e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAzMDgxMA==", "bodyText": "I think that AccessDeniedException\nwill be inconsistent with this conversation: #5086 (comment)\nand relates a little bit to #5086 (comment)", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490030810", "createdAt": "2020-09-17T07:31:54Z", "author": {"login": "ssheikin"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -74,4 +78,14 @@ public void checkCanGrantExecuteFunctionPrivilege(SecurityContext context, Strin\n     {\n         return delegate.getColumnMasks(context, tableName, columnName, type);\n     }\n+\n+    private void executeAsViewOwner(Consumer<AccessControl> consumer)\n+    {\n+        try {\n+            consumer.accept(delegate);\n+        }\n+        catch (AccessDeniedException e) {\n+            throw new PrestoException(PERMISSION_DENIED, \"View owner does not have sufficient privileges: \" + e.getMessage(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAyNDEyMA=="}, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAzNDQ1Nw==", "bodyText": "Thanks", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490034457", "createdAt": "2020-09-17T07:38:20Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -74,4 +78,14 @@ public void checkCanGrantExecuteFunctionPrivilege(SecurityContext context, Strin\n     {\n         return delegate.getColumnMasks(context, tableName, columnName, type);\n     }\n+\n+    private void executeAsViewOwner(Consumer<AccessControl> consumer)\n+    {\n+        try {\n+            consumer.accept(delegate);\n+        }\n+        catch (AccessDeniedException e) {\n+            throw new PrestoException(PERMISSION_DENIED, \"View owner does not have sufficient privileges: \" + e.getMessage(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAyNDEyMA=="}, "originalCommit": null, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjEzMjI3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNzo0NTozN1rOHTVlhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNzo1MDozN1rOHTVw1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAzODY2Mg==", "bodyText": "static", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490038662", "createdAt": "2020-09-17T07:45:37Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -74,4 +78,14 @@ public void checkCanGrantExecuteFunctionPrivilege(SecurityContext context, Strin\n     {\n         return delegate.getColumnMasks(context, tableName, columnName, type);\n     }\n+\n+    private void wrapAccessDeniedException(Runnable runnable)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0MTU1Nw==", "bodyText": "done", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490041557", "createdAt": "2020-09-17T07:50:37Z", "author": {"login": "ssheikin"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -74,4 +78,14 @@ public void checkCanGrantExecuteFunctionPrivilege(SecurityContext context, Strin\n     {\n         return delegate.getColumnMasks(context, tableName, columnName, type);\n     }\n+\n+    private void wrapAccessDeniedException(Runnable runnable)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAzODY2Mg=="}, "originalCommit": null, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjE3NDA3OnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNzo1NjozOVrOHTV-yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDoyMDo0OVrOHTksCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0NTEyOQ==", "bodyText": "i'd suggest decoupling running query with verifying the exception using\norg.assertj.core.api.Assertions#assertThatThrownBy(org.assertj.core.api.ThrowableAssert.ThrowingCallable)\na helper like io.prestosql.testing.assertions.PrestoExceptionAssert#assertPrestoExceptionThrownBy can be useful", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490045129", "createdAt": "2020-09-17T07:56:39Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -294,9 +293,28 @@ protected void assertAccessDenied(@Language(\"SQL\") String sql, @Language(\"RegExp\n     }\n \n     protected void assertAccessDenied(\n+            @Language(\"SQL\") String sql,\n+            @Language(\"RegExp\") String exceptionsMessageRegExp,\n+            @Language(\"RegExp\") String exceptionsCauseMessageRegExp,\n+            TestingPrivilege... deniedPrivileges)\n+    {\n+        assertAccessDenied(getSession(), sql, \".*\" + exceptionsMessageRegExp + \": Access Denied: \" + exceptionsCauseMessageRegExp, \".*Access Denied: \" + exceptionsCauseMessageRegExp, deniedPrivileges);\n+    }\n+\n+    protected void assertAccessDenied(\n+            Session session,\n+            @Language(\"SQL\") String sql,\n+            @Language(\"RegExp\") String exceptionsMessageRegExp,\n+            TestingPrivilege... deniedPrivileges)\n+    {\n+        assertAccessDenied(getSession(), sql, \".*Access Denied: \" + exceptionsMessageRegExp, null, deniedPrivileges);\n+    }\n+\n+    private void assertAccessDenied(\n             Session session,\n             @Language(\"SQL\") String sql,\n             @Language(\"RegExp\") String exceptionsMessageRegExp,\n+            @Language(\"RegExp\") String exceptionsCauseMessageRegExp,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4NjA4OA==", "bodyText": "done", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490286088", "createdAt": "2020-09-17T14:20:49Z", "author": {"login": "ssheikin"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -294,9 +293,28 @@ protected void assertAccessDenied(@Language(\"SQL\") String sql, @Language(\"RegExp\n     }\n \n     protected void assertAccessDenied(\n+            @Language(\"SQL\") String sql,\n+            @Language(\"RegExp\") String exceptionsMessageRegExp,\n+            @Language(\"RegExp\") String exceptionsCauseMessageRegExp,\n+            TestingPrivilege... deniedPrivileges)\n+    {\n+        assertAccessDenied(getSession(), sql, \".*\" + exceptionsMessageRegExp + \": Access Denied: \" + exceptionsCauseMessageRegExp, \".*Access Denied: \" + exceptionsCauseMessageRegExp, deniedPrivileges);\n+    }\n+\n+    protected void assertAccessDenied(\n+            Session session,\n+            @Language(\"SQL\") String sql,\n+            @Language(\"RegExp\") String exceptionsMessageRegExp,\n+            TestingPrivilege... deniedPrivileges)\n+    {\n+        assertAccessDenied(getSession(), sql, \".*Access Denied: \" + exceptionsMessageRegExp, null, deniedPrivileges);\n+    }\n+\n+    private void assertAccessDenied(\n             Session session,\n             @Language(\"SQL\") String sql,\n             @Language(\"RegExp\") String exceptionsMessageRegExp,\n+            @Language(\"RegExp\") String exceptionsCauseMessageRegExp,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0NTEyOQ=="}, "originalCommit": null, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjE3NTc3OnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNzo1NzowMlrOHTV_0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzo1NDoyNlrOHTjZKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0NTM5NA==", "bodyText": "can we match the full exception message here, not just a aubstring?\n(the actual message has : ... after \"privileges\")\nthis would also make sure @electrum is happy about \"Access Denied\" being or not being repeated within the message", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490045394", "createdAt": "2020-09-17T07:57:02Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -1062,6 +1062,7 @@ public void testViewColumnAccessControl()\n         // verify selecting from a view over a table requires the view owner to have special view creation privileges for the table\n         assertAccessDenied(\n                 \"SELECT * FROM \" + columnAccessViewName,\n+                \"View owner does not have sufficient privileges\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA1Mjk0MQ==", "bodyText": "actually I already had such version d2e7d1a\nit requires adding : Access Denied:  somewhere within the error message which is not intuitive and error prone.\nIf you prefer this way I'll remove Access Denied text concatenation from internals of assertAccessDenied methods and add it to every text message during invocation of these methods. At least it will not be misleading.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490052941", "createdAt": "2020-09-17T08:09:45Z", "author": {"login": "ssheikin"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -1062,6 +1062,7 @@ public void testViewColumnAccessControl()\n         // verify selecting from a view over a table requires the view owner to have special view creation privileges for the table\n         assertAccessDenied(\n                 \"SELECT * FROM \" + columnAccessViewName,\n+                \"View owner does not have sufficient privileges\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0NTM5NA=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI2NDg3Mg==", "bodyText": "done", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490264872", "createdAt": "2020-09-17T13:54:26Z", "author": {"login": "ssheikin"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -1062,6 +1062,7 @@ public void testViewColumnAccessControl()\n         // verify selecting from a view over a table requires the view owner to have special view creation privileges for the table\n         assertAccessDenied(\n                 \"SELECT * FROM \" + columnAccessViewName,\n+                \"View owner does not have sufficient privileges\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0NTM5NA=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjE5NzI5OnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwODowMjo0OVrOHTWNSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzo1NDowOFrOHTjYUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0ODg0MQ==", "bodyText": "Please do not use .* at the begin and end of error message regexp. We need be sure if there is nothing extra here.\nSee:\n           throw new PrestoException(PERMISSION_DENIED, \"View owner does not have sufficient privileges: \" + e.getMessage(), e);\n\nThere is a suffix added that you didn't verify. Please fix this.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490048841", "createdAt": "2020-09-17T08:02:49Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -294,9 +293,28 @@ protected void assertAccessDenied(@Language(\"SQL\") String sql, @Language(\"RegExp\n     }\n \n     protected void assertAccessDenied(\n+            @Language(\"SQL\") String sql,\n+            @Language(\"RegExp\") String exceptionsMessageRegExp,\n+            @Language(\"RegExp\") String exceptionsCauseMessageRegExp,\n+            TestingPrivilege... deniedPrivileges)\n+    {\n+        assertAccessDenied(getSession(), sql, \".*\" + exceptionsMessageRegExp + \": Access Denied: \" + exceptionsCauseMessageRegExp, \".*Access Denied: \" + exceptionsCauseMessageRegExp, deniedPrivileges);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA1MDMwOQ==", "bodyText": "I shouldn't be that strict. Maybe .* at the beginning might be needed, but not at the end.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490050309", "createdAt": "2020-09-17T08:05:19Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -294,9 +293,28 @@ protected void assertAccessDenied(@Language(\"SQL\") String sql, @Language(\"RegExp\n     }\n \n     protected void assertAccessDenied(\n+            @Language(\"SQL\") String sql,\n+            @Language(\"RegExp\") String exceptionsMessageRegExp,\n+            @Language(\"RegExp\") String exceptionsCauseMessageRegExp,\n+            TestingPrivilege... deniedPrivileges)\n+    {\n+        assertAccessDenied(getSession(), sql, \".*\" + exceptionsMessageRegExp + \": Access Denied: \" + exceptionsCauseMessageRegExp, \".*Access Denied: \" + exceptionsCauseMessageRegExp, deniedPrivileges);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0ODg0MQ=="}, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA1MTEwMQ==", "bodyText": "It's better not to use .* at all. If there is a spercific part that's variable and cannot be matched (eg table name), using \\w+ is better.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490051101", "createdAt": "2020-09-17T08:06:39Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -294,9 +293,28 @@ protected void assertAccessDenied(@Language(\"SQL\") String sql, @Language(\"RegExp\n     }\n \n     protected void assertAccessDenied(\n+            @Language(\"SQL\") String sql,\n+            @Language(\"RegExp\") String exceptionsMessageRegExp,\n+            @Language(\"RegExp\") String exceptionsCauseMessageRegExp,\n+            TestingPrivilege... deniedPrivileges)\n+    {\n+        assertAccessDenied(getSession(), sql, \".*\" + exceptionsMessageRegExp + \": Access Denied: \" + exceptionsCauseMessageRegExp, \".*Access Denied: \" + exceptionsCauseMessageRegExp, deniedPrivileges);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0ODg0MQ=="}, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI2NDY1OQ==", "bodyText": "done.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490264659", "createdAt": "2020-09-17T13:54:08Z", "author": {"login": "ssheikin"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -294,9 +293,28 @@ protected void assertAccessDenied(@Language(\"SQL\") String sql, @Language(\"RegExp\n     }\n \n     protected void assertAccessDenied(\n+            @Language(\"SQL\") String sql,\n+            @Language(\"RegExp\") String exceptionsMessageRegExp,\n+            @Language(\"RegExp\") String exceptionsCauseMessageRegExp,\n+            TestingPrivilege... deniedPrivileges)\n+    {\n+        assertAccessDenied(getSession(), sql, \".*\" + exceptionsMessageRegExp + \": Access Denied: \" + exceptionsCauseMessageRegExp, \".*Access Denied: \" + exceptionsCauseMessageRegExp, deniedPrivileges);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0ODg0MQ=="}, "originalCommit": null, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjIwMzgzOnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwODowNDozMlrOHTWRKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzo1NToxMVrOHTjbdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0OTgzMw==", "bodyText": "Actually we do not care about the cause, as this is not printed to the user. Please undo these changes.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490049833", "createdAt": "2020-09-17T08:04:32Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -306,7 +324,11 @@ protected void assertAccessDenied(\n                 fail(\"Expected \" + AccessDeniedException.class.getSimpleName());\n             }\n             catch (RuntimeException e) {\n-                assertExceptionMessage(sql, e, \".*Access Denied: \" + exceptionsMessageRegExp);\n+                String query = \"Query: \" + sql;\n+                assertThat(e).as(query).hasMessageMatching(exceptionsMessageRegExp);\n+                if (exceptionsCauseMessageRegExp != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI2NTQ2Mg==", "bodyText": "done", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490265462", "createdAt": "2020-09-17T13:55:11Z", "author": {"login": "ssheikin"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -306,7 +324,11 @@ protected void assertAccessDenied(\n                 fail(\"Expected \" + AccessDeniedException.class.getSimpleName());\n             }\n             catch (RuntimeException e) {\n-                assertExceptionMessage(sql, e, \".*Access Denied: \" + exceptionsMessageRegExp);\n+                String query = \"Query: \" + sql;\n+                assertThat(e).as(query).hasMessageMatching(exceptionsMessageRegExp);\n+                if (exceptionsCauseMessageRegExp != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0OTgzMw=="}, "originalCommit": null, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTU1NzIwOnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMToxODo0OFrOHUI2Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjoxMDowMVrOHXXZOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3ODQ5NQ==", "bodyText": "The full error message is:\nAccess Denied: View owner does not have sufficient privileges: Access Denied: View owner 'test_view_access_owner' cannot create view that selects from \\\\w+.\\\\w+.orders\\\n\nThere are two issues here.\n\nAccess Denied:  is unnecessarly doubled\nerror message is long and detailed (but on the hand it could be useful to understand why just happened). How about raising only Access Denied: View owner does not have sufficient privileges without the second part? @electrum @findepi thoughts?", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490878495", "createdAt": "2020-09-18T11:18:48Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -1060,9 +1060,9 @@ public void testViewColumnAccessControl()\n                 privilege(\"orders\", CREATE_VIEW_WITH_SELECT_COLUMNS));\n \n         // verify selecting from a view over a table requires the view owner to have special view creation privileges for the table\n-        assertAccessDenied(\n+        assertWrappedAccessDenied(\n                 \"SELECT * FROM \" + columnAccessViewName,\n-                \"View owner 'test_view_access_owner' cannot create view that selects from .*.orders.*\",\n+                \"View owner does not have sufficient privileges: Access Denied: View owner 'test_view_access_owner' cannot create view that selects from \\\\w+.\\\\w+.orders\\\\w*\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkxMzUzNQ==", "bodyText": "assertWrappedAccessDenied checks the full message (\"View owner does not have sufficient privileges: Access Denied: View owner 'test_view_access_owner' cannot create view that selects from \\w+.\\w+.orders\\w*\")\n\nalready resolved here #5086 (comment)", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490913535", "createdAt": "2020-09-18T12:26:20Z", "author": {"login": "ssheikin"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -1060,9 +1060,9 @@ public void testViewColumnAccessControl()\n                 privilege(\"orders\", CREATE_VIEW_WITH_SELECT_COLUMNS));\n \n         // verify selecting from a view over a table requires the view owner to have special view creation privileges for the table\n-        assertAccessDenied(\n+        assertWrappedAccessDenied(\n                 \"SELECT * FROM \" + columnAccessViewName,\n-                \"View owner 'test_view_access_owner' cannot create view that selects from .*.orders.*\",\n+                \"View owner does not have sufficient privileges: Access Denied: View owner 'test_view_access_owner' cannot create view that selects from \\\\w+.\\\\w+.orders\\\\w*\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3ODQ5NQ=="}, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE4MzA3NA==", "bodyText": "Oh... I get it now.\n\nI am not sure if it is nice looking error message:\nView owner does not have sufficient privileges: Access Denied: View owner 'test_view_access_owner' cannot create view \nvs\n Access Denied: View owner does not have sufficient privileges: View owner 'test_view_access_owner' cannot create view\nvs\nAccess Denied: View owner does not have sufficient privileges\nI vote for the last one. If one wants more details then in CLI can use --debug in web ui can see the stack trace in web ui.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r491183074", "createdAt": "2020-09-18T20:47:10Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -1060,9 +1060,9 @@ public void testViewColumnAccessControl()\n                 privilege(\"orders\", CREATE_VIEW_WITH_SELECT_COLUMNS));\n \n         // verify selecting from a view over a table requires the view owner to have special view creation privileges for the table\n-        assertAccessDenied(\n+        assertWrappedAccessDenied(\n                 \"SELECT * FROM \" + columnAccessViewName,\n-                \"View owner 'test_view_access_owner' cannot create view that selects from .*.orders.*\",\n+                \"View owner does not have sufficient privileges: Access Denied: View owner 'test_view_access_owner' cannot create view that selects from \\\\w+.\\\\w+.orders\\\\w*\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3ODQ5NQ=="}, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ2MjI5MQ==", "bodyText": "The example is... well, an example, right?\nThe second part can be many different things, so it may be less or more \"boring\".\nMy point is -- I don't want to be faced with \"Access Denied: View owner does not have sufficient privileges\" (period) error message and be asked by the user \"ok, so what do i need to change?\". It user's query is a big one, it may take a while until you learn which view, which view owner, and what permission they are missing.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r491462291", "createdAt": "2020-09-19T14:51:36Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -1060,9 +1060,9 @@ public void testViewColumnAccessControl()\n                 privilege(\"orders\", CREATE_VIEW_WITH_SELECT_COLUMNS));\n \n         // verify selecting from a view over a table requires the view owner to have special view creation privileges for the table\n-        assertAccessDenied(\n+        assertWrappedAccessDenied(\n                 \"SELECT * FROM \" + columnAccessViewName,\n-                \"View owner 'test_view_access_owner' cannot create view that selects from .*.orders.*\",\n+                \"View owner does not have sufficient privileges: Access Denied: View owner 'test_view_access_owner' cannot create view that selects from \\\\w+.\\\\w+.orders\\\\w*\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3ODQ5NQ=="}, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI2MzU2MQ==", "bodyText": "Ok, let it be Access Denied: View owner does not have sufficient privileges: View owner 'test_view_access_owner' cannot create view.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r493263561", "createdAt": "2020-09-23T07:39:33Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -1060,9 +1060,9 @@ public void testViewColumnAccessControl()\n                 privilege(\"orders\", CREATE_VIEW_WITH_SELECT_COLUMNS));\n \n         // verify selecting from a view over a table requires the view owner to have special view creation privileges for the table\n-        assertAccessDenied(\n+        assertWrappedAccessDenied(\n                 \"SELECT * FROM \" + columnAccessViewName,\n-                \"View owner 'test_view_access_owner' cannot create view that selects from .*.orders.*\",\n+                \"View owner does not have sufficient privileges: Access Denied: View owner 'test_view_access_owner' cannot create view that selects from \\\\w+.\\\\w+.orders\\\\w*\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3ODQ5NQ=="}, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2MjU4Nw==", "bodyText": "done.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r494262587", "createdAt": "2020-09-24T12:10:01Z", "author": {"login": "ssheikin"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -1060,9 +1060,9 @@ public void testViewColumnAccessControl()\n                 privilege(\"orders\", CREATE_VIEW_WITH_SELECT_COLUMNS));\n \n         // verify selecting from a view over a table requires the view owner to have special view creation privileges for the table\n-        assertAccessDenied(\n+        assertWrappedAccessDenied(\n                 \"SELECT * FROM \" + columnAccessViewName,\n-                \"View owner 'test_view_access_owner' cannot create view that selects from .*.orders.*\",\n+                \"View owner does not have sufficient privileges: Access Denied: View owner 'test_view_access_owner' cannot create view that selects from \\\\w+.\\\\w+.orders\\\\w*\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3ODQ5NQ=="}, "originalCommit": null, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTU2MTIzOnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMToyMDowOFrOHUI4ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjowOTo0MlrOHXXYiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3OTA4Mg==", "bodyText": "Why assertAccessDenied is not enough? Why do you care it is wrapped? To me it is implementation detail on which test should not rely on.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490879082", "createdAt": "2020-09-18T11:20:08Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -1060,9 +1060,9 @@ public void testViewColumnAccessControl()\n                 privilege(\"orders\", CREATE_VIEW_WITH_SELECT_COLUMNS));\n \n         // verify selecting from a view over a table requires the view owner to have special view creation privileges for the table\n-        assertAccessDenied(\n+        assertWrappedAccessDenied(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkxNDk5Nw==", "bodyText": "assertWrappedAccessDenied checks the full message.\nassertAccessDenied cannot be reused because it adds \".*Access Denied: \" at the beginning", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490914997", "createdAt": "2020-09-18T12:29:17Z", "author": {"login": "ssheikin"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -1060,9 +1060,9 @@ public void testViewColumnAccessControl()\n                 privilege(\"orders\", CREATE_VIEW_WITH_SELECT_COLUMNS));\n \n         // verify selecting from a view over a table requires the view owner to have special view creation privileges for the table\n-        assertAccessDenied(\n+        assertWrappedAccessDenied(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3OTA4Mg=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI2NDY5Nw==", "bodyText": "assertAccessDenied cannot be reused because it adds \".*Access Denied: \" at the beginning\n\nAnd that is the point. Access Denied:  should be placed at the beginning", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r493264697", "createdAt": "2020-09-23T07:41:15Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -1060,9 +1060,9 @@ public void testViewColumnAccessControl()\n                 privilege(\"orders\", CREATE_VIEW_WITH_SELECT_COLUMNS));\n \n         // verify selecting from a view over a table requires the view owner to have special view creation privileges for the table\n-        assertAccessDenied(\n+        assertWrappedAccessDenied(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3OTA4Mg=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2MjQwOA==", "bodyText": "done.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r494262408", "createdAt": "2020-09-24T12:09:42Z", "author": {"login": "ssheikin"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -1060,9 +1060,9 @@ public void testViewColumnAccessControl()\n                 privilege(\"orders\", CREATE_VIEW_WITH_SELECT_COLUMNS));\n \n         // verify selecting from a view over a table requires the view owner to have special view creation privileges for the table\n-        assertAccessDenied(\n+        assertWrappedAccessDenied(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3OTA4Mg=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTU2NTY5OnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMToyMTozNVrOHUI7KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzo0NDowNlrOHUNvwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3OTc4NQ==", "bodyText": "This refactor is nice, but it has nothing to do with the commit. Please extract it to separate commit.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490879785", "createdAt": "2020-09-18T11:21:35Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -299,19 +301,19 @@ protected void assertAccessDenied(\n             @Language(\"RegExp\") String exceptionsMessageRegExp,\n             TestingPrivilege... deniedPrivileges)\n     {\n-        executeExclusively(() -> {\n-            try {\n-                queryRunner.getAccessControl().deny(deniedPrivileges);\n-                queryRunner.execute(session, sql);\n-                fail(\"Expected \" + AccessDeniedException.class.getSimpleName());\n-            }\n-            catch (RuntimeException e) {\n-                assertExceptionMessage(sql, e, \".*Access Denied: \" + exceptionsMessageRegExp);\n-            }\n-            finally {\n-                queryRunner.getAccessControl().reset();\n-            }\n-        });\n+        assertException(session, sql, \".*Access Denied: \" + exceptionsMessageRegExp, deniedPrivileges);\n+    }\n+\n+    protected void assertWrappedAccessDenied(@Language(\"SQL\") String sql, @Language(\"RegExp\") String exceptionsMessageRegExp, TestingPrivilege... deniedPrivileges)\n+    {\n+        assertException(getSession(), sql, exceptionsMessageRegExp, deniedPrivileges);\n+    }\n+\n+    private void assertException(Session session, @Language(\"SQL\") String sql, @Language(\"RegExp\") String exceptionsMessageRegExp, TestingPrivilege[] deniedPrivileges)\n+    {\n+        assertThatThrownBy(() -> executeExclusively(session, sql, deniedPrivileges))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk1ODc4NQ==", "bodyText": "done", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r490958785", "createdAt": "2020-09-18T13:44:06Z", "author": {"login": "ssheikin"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -299,19 +301,19 @@ protected void assertAccessDenied(\n             @Language(\"RegExp\") String exceptionsMessageRegExp,\n             TestingPrivilege... deniedPrivileges)\n     {\n-        executeExclusively(() -> {\n-            try {\n-                queryRunner.getAccessControl().deny(deniedPrivileges);\n-                queryRunner.execute(session, sql);\n-                fail(\"Expected \" + AccessDeniedException.class.getSimpleName());\n-            }\n-            catch (RuntimeException e) {\n-                assertExceptionMessage(sql, e, \".*Access Denied: \" + exceptionsMessageRegExp);\n-            }\n-            finally {\n-                queryRunner.getAccessControl().reset();\n-            }\n-        });\n+        assertException(session, sql, \".*Access Denied: \" + exceptionsMessageRegExp, deniedPrivileges);\n+    }\n+\n+    protected void assertWrappedAccessDenied(@Language(\"SQL\") String sql, @Language(\"RegExp\") String exceptionsMessageRegExp, TestingPrivilege... deniedPrivileges)\n+    {\n+        assertException(getSession(), sql, exceptionsMessageRegExp, deniedPrivileges);\n+    }\n+\n+    private void assertException(Session session, @Language(\"SQL\") String sql, @Language(\"RegExp\") String exceptionsMessageRegExp, TestingPrivilege[] deniedPrivileges)\n+    {\n+        assertThatThrownBy(() -> executeExclusively(session, sql, deniedPrivileges))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3OTc4NQ=="}, "originalCommit": null, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzg3MDU4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwOTo1ODo0MFrOHY2ucw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMDoyNToxNVrOHY3lnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgyNDQ5OQ==", "bodyText": "Please also add verify(e.getMessage().startsWith(prefix))", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r495824499", "createdAt": "2020-09-28T09:58:40Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -74,4 +77,16 @@ public void checkCanGrantExecuteFunctionPrivilege(SecurityContext context, Strin\n     {\n         return delegate.getColumnMasks(context, tableName, columnName, type);\n     }\n+\n+    private static void wrapAccessDeniedException(Runnable runnable)\n+    {\n+        try {\n+            runnable.run();\n+        }\n+        catch (AccessDeniedException e) {\n+            String prefix = AccessDeniedException.PREFIX;\n+            String msg = e.getMessage().substring(prefix.length());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgzODYyMA==", "bodyText": "done", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r495838620", "createdAt": "2020-09-28T10:25:15Z", "author": {"login": "ssheikin"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -74,4 +77,16 @@ public void checkCanGrantExecuteFunctionPrivilege(SecurityContext context, Strin\n     {\n         return delegate.getColumnMasks(context, tableName, columnName, type);\n     }\n+\n+    private static void wrapAccessDeniedException(Runnable runnable)\n+    {\n+        try {\n+            runnable.run();\n+        }\n+        catch (AccessDeniedException e) {\n+            String prefix = AccessDeniedException.PREFIX;\n+            String msg = e.getMessage().substring(prefix.length());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgyNDQ5OQ=="}, "originalCommit": null, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzg3MTUwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwOTo1ODo1NlrOHY2vCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMDoxNjoxMFrOHY3Tdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgyNDY1MQ==", "bodyText": "nit: I would inline it (up to you, no change request)", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r495824651", "createdAt": "2020-09-28T09:58:56Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -74,4 +77,16 @@ public void checkCanGrantExecuteFunctionPrivilege(SecurityContext context, Strin\n     {\n         return delegate.getColumnMasks(context, tableName, columnName, type);\n     }\n+\n+    private static void wrapAccessDeniedException(Runnable runnable)\n+    {\n+        try {\n+            runnable.run();\n+        }\n+        catch (AccessDeniedException e) {\n+            String prefix = AccessDeniedException.PREFIX;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgzMzk3NA==", "bodyText": "I've considered this as well, but I see two points against it:\n\nit will be used in several places, so no 'link' between these usages.\nAccessDeniedException.PREFIX is too long. Once static imported - it's not explicit what does PREFIX mean.\n\nWill left it as is.", "url": "https://github.com/trinodb/trino/pull/5086#discussion_r495833974", "createdAt": "2020-09-28T10:16:10Z", "author": {"login": "ssheikin"}, "path": "presto-main/src/main/java/io/prestosql/security/ViewAccessControl.java", "diffHunk": "@@ -74,4 +77,16 @@ public void checkCanGrantExecuteFunctionPrivilege(SecurityContext context, Strin\n     {\n         return delegate.getColumnMasks(context, tableName, columnName, type);\n     }\n+\n+    private static void wrapAccessDeniedException(Runnable runnable)\n+    {\n+        try {\n+            runnable.run();\n+        }\n+        catch (AccessDeniedException e) {\n+            String prefix = AccessDeniedException.PREFIX;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgyNDY1MQ=="}, "originalCommit": null, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3155, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}