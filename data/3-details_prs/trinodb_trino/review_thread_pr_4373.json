{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1MTIyNTc5", "number": 4373, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNToxMjoyNlrOEL7Wog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNToxMzo1MVrOEL7Xfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTQyMjQyOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/type/LongTimestamp.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNToxMjoyNlrOGtvVnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzoyMzoyOVrOGtyKZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxNDY4NQ==", "bodyText": "no need for unsignedm sine they are in \"signed\" range", "url": "https://github.com/trinodb/trino/pull/4373#discussion_r450614685", "createdAt": "2020-07-07T05:12:26Z", "author": {"login": "findepi"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/LongTimestamp.java", "diffHunk": "@@ -63,4 +64,14 @@ public int hashCode()\n     {\n         return Objects.hash(epochMicros, picosOfMicro);\n     }\n+\n+    @Override\n+    public int compareTo(LongTimestamp other)\n+    {\n+        int value = Long.compare(epochMicros, other.epochMicros);\n+        if (value != 0) {\n+            return value;\n+        }\n+        return Integer.compareUnsigned(picosOfMicro, other.picosOfMicro);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY2MDk2NQ==", "bodyText": "This matches the compare implementation in the Type class.", "url": "https://github.com/trinodb/trino/pull/4373#discussion_r450660965", "createdAt": "2020-07-07T07:23:29Z", "author": {"login": "dain"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/LongTimestamp.java", "diffHunk": "@@ -63,4 +64,14 @@ public int hashCode()\n     {\n         return Objects.hash(epochMicros, picosOfMicro);\n     }\n+\n+    @Override\n+    public int compareTo(LongTimestamp other)\n+    {\n+        int value = Long.compare(epochMicros, other.epochMicros);\n+        if (value != 0) {\n+            return value;\n+        }\n+        return Integer.compareUnsigned(picosOfMicro, other.picosOfMicro);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxNDY4NQ=="}, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTQyMzc5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/optimizations/ExpressionEquivalence.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNToxMzoxNlrOGtvWew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNToxMzoxNlrOGtvWew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxNDkwNw==", "bodyText": "techncally this cast is wrong, leftValue is not Comparable<Object>\ni'd rather cast to a raw type Comparable (and add rawtypes to noinspection as well)", "url": "https://github.com/trinodb/trino/pull/4373#discussion_r450614907", "createdAt": "2020-07-07T05:13:16Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/optimizations/ExpressionEquivalence.java", "diffHunk": "@@ -285,8 +284,13 @@ public int compare(RowExpression left, RowExpression right)\n                 if (javaType == float.class || javaType == double.class) {\n                     return Double.compare(((Number) leftValue).doubleValue(), ((Number) rightValue).doubleValue());\n                 }\n-                if (javaType == Slice.class) {\n-                    return ((Slice) leftValue).compareTo((Slice) rightValue);\n+                if (leftValue instanceof Comparable) {\n+                    try {\n+                        //noinspection unchecked\n+                        return ((Comparable<Object>) leftValue).compareTo(rightValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTQyNDYyOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/type/LongTimestampWithTimeZone.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNToxMzo1MVrOGtvXBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzoyMzozNVrOGtyKnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxNTA0NA==", "bodyText": "Integer.compare", "url": "https://github.com/trinodb/trino/pull/4373#discussion_r450615044", "createdAt": "2020-07-07T05:13:51Z", "author": {"login": "findepi"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/LongTimestampWithTimeZone.java", "diffHunk": "@@ -66,4 +69,34 @@ public short getTimeZoneKey()\n     {\n         return timeZoneKey;\n     }\n+\n+    @Override\n+    public boolean equals(Object o)\n+    {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        LongTimestampWithTimeZone that = (LongTimestampWithTimeZone) o;\n+        return epochMillis == that.epochMillis &&\n+                picosOfMilli == that.picosOfMilli;\n+    }\n+\n+    @Override\n+    public int hashCode()\n+    {\n+        return Objects.hash(epochMillis, picosOfMilli);\n+    }\n+\n+    @Override\n+    public int compareTo(LongTimestampWithTimeZone other)\n+    {\n+        int value = Long.compare(epochMillis, other.epochMillis);\n+        if (value != 0) {\n+            return value;\n+        }\n+        return Integer.compareUnsigned(picosOfMilli, other.picosOfMilli);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY2MTAyMQ==", "bodyText": "This matches the compare implementation in the Type class.", "url": "https://github.com/trinodb/trino/pull/4373#discussion_r450661021", "createdAt": "2020-07-07T07:23:35Z", "author": {"login": "dain"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/LongTimestampWithTimeZone.java", "diffHunk": "@@ -66,4 +69,34 @@ public short getTimeZoneKey()\n     {\n         return timeZoneKey;\n     }\n+\n+    @Override\n+    public boolean equals(Object o)\n+    {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        LongTimestampWithTimeZone that = (LongTimestampWithTimeZone) o;\n+        return epochMillis == that.epochMillis &&\n+                picosOfMilli == that.picosOfMilli;\n+    }\n+\n+    @Override\n+    public int hashCode()\n+    {\n+        return Objects.hash(epochMillis, picosOfMilli);\n+    }\n+\n+    @Override\n+    public int compareTo(LongTimestampWithTimeZone other)\n+    {\n+        int value = Long.compare(epochMillis, other.epochMillis);\n+        if (value != 0) {\n+            return value;\n+        }\n+        return Integer.compareUnsigned(picosOfMilli, other.picosOfMilli);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxNTA0NA=="}, "originalCommit": null, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3829, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}