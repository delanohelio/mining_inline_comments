{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNTY0NjUy", "number": 2761, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMzowNTo0OVrODjUXXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMzowNTo0OVrODjUXXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzYwNDEyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/parquet/HdfsParquetDataSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMzowNTo0OVrOFvD2rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzo1MjoxOVrOF457sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5MDU0Mg==", "bodyText": "Wouldn't it be better to check for the problem condition instead of catching the exception afterwards?\nSomething like this:\n            if (Math.max(last.getEnd(), current.getEnd() - Math.min(last.getOffset(), current.getOffset())) <= Integer.MAX_VALUE) {\n                DiskRange merged = last.span(current);\n                if (merged.getLength() <= maxReadSizeBytes && last.getEnd() + maxMergeDistanceBytes >= current.getOffset()) {\n                    last = merged;\n                }\n            }", "url": "https://github.com/trinodb/trino/pull/2761#discussion_r384890542", "createdAt": "2020-02-27T03:05:49Z", "author": {"login": "lhofhansl"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/parquet/HdfsParquetDataSource.java", "diffHunk": "@@ -241,8 +241,15 @@ public static HdfsParquetDataSource buildHdfsParquetDataSource(\n         DiskRange last = ranges.get(0);\n         for (int i = 1; i < ranges.size(); i++) {\n             DiskRange current = ranges.get(i);\n-            DiskRange merged = last.span(current);\n-            if (merged.getLength() <= maxReadSizeBytes && last.getEnd() + maxMergeDistanceBytes >= current.getOffset()) {\n+            DiskRange merged = null;\n+            boolean blockTooLong = false;\n+            try {\n+                merged = last.span(current);\n+            }\n+            catch (ArithmeticException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c619f60ed7dc8ab242f447522d35cc5d35f51938"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxMzc0Ng==", "bodyText": "The issue is that it duplicates the logic of DiskRange, so it's not much better. Alternatively, we could add a method to check it that would result in a valid span, but the current approach is good enough.", "url": "https://github.com/trinodb/trino/pull/2761#discussion_r395213746", "createdAt": "2020-03-19T17:52:19Z", "author": {"login": "martint"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/parquet/HdfsParquetDataSource.java", "diffHunk": "@@ -241,8 +241,15 @@ public static HdfsParquetDataSource buildHdfsParquetDataSource(\n         DiskRange last = ranges.get(0);\n         for (int i = 1; i < ranges.size(); i++) {\n             DiskRange current = ranges.get(i);\n-            DiskRange merged = last.span(current);\n-            if (merged.getLength() <= maxReadSizeBytes && last.getEnd() + maxMergeDistanceBytes >= current.getOffset()) {\n+            DiskRange merged = null;\n+            boolean blockTooLong = false;\n+            try {\n+                merged = last.span(current);\n+            }\n+            catch (ArithmeticException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5MDU0Mg=="}, "originalCommit": {"oid": "c619f60ed7dc8ab242f447522d35cc5d35f51938"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 886, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}