{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4NjI0NTM4", "number": 5905, "title": "Improve serde performance for Long blocks", "bodyText": "AFTER (no null)\n\nBenchmark                                    Mode  Cnt  Score   Error  Units\nBenchmarkBlockSerde.deserializeLongNoNull    avgt   60  1,125 \u00b1 0,011  ns/op\n\nBEFORE (no null)\n\nBenchmark                                    Mode  Cnt  Score   Error  Units\nBenchmarkBlockSerde.deserializeLongNoNull    avgt   60  2,548 \u00b1 0,023  ns/op\n\nAFTER (no null)\n\nBenchmark                                    Mode  Cnt  Score   Error  Units\nBenchmarkBlockSerde.deserializeLineitem      avgt   60  1,212 \u00b1 0,015  ns/op\nBenchmarkBlockSerde.deserializeLongWithNull  avgt   60  2,500 \u00b1 0,038  ns/op\nBenchmarkBlockSerde.serializeLineitem        avgt   60  3,645 \u00b1 0,039  ns/op\nBenchmarkBlockSerde.serializeLongWithNull    avgt   60  3,351 \u00b1 0,016  ns/op\n\nBEFORE (no null)\n\nBenchmark                                    Mode  Cnt  Score   Error  Units\nBenchmarkBlockSerde.deserializeLineitem      avgt   60  1,219 \u00b1 0,016  ns/op\nBenchmarkBlockSerde.deserializeLongWithNull  avgt   60  5,524 \u00b1 0,062  ns/op\nBenchmarkBlockSerde.serializeLineitem        avgt   60  3,671 \u00b1 0,041  ns/op\nBenchmarkBlockSerde.serializeLongWithNull    avgt   60  8,844 \u00b1 0,086  ns/op", "createdAt": "2020-11-10T16:49:46Z", "url": "https://github.com/trinodb/trino/pull/5905", "merged": true, "mergeCommit": {"oid": "48d115fe0cc98fb6f428873f951a5d00026a3fb4"}, "closed": true, "closedAt": "2020-11-13T09:28:11Z", "author": {"login": "sopel39"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbMSYsABqjM5Nzk5MzcwNTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdcDZ5bgFqTUyOTg4ODkzMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3ODgwOTYw", "url": "https://github.com/trinodb/trino/pull/5905#pullrequestreview-527880960", "createdAt": "2020-11-11T05:55:57Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNTo1NTo1N1rOHw_MNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNjowMzoyNFrOHw_U3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEyOTAxNA==", "bodyText": "Can we implement the same for other native array block ?", "url": "https://github.com/trinodb/trino/pull/5905#discussion_r521129014", "createdAt": "2020-11-11T05:55:57Z", "author": {"login": "Praveen2112"}, "path": "presto-spi/src/main/java/io/prestosql/spi/block/LongArrayBlockEncoding.java", "diffHunk": "@@ -53,9 +54,14 @@ public Block readBlock(BlockEncodingSerde blockEncodingSerde, SliceInput sliceIn\n         boolean[] valueIsNull = decodeNullBits(sliceInput, positionCount).orElse(null);\n \n         long[] values = new long[positionCount];\n-        for (int position = 0; position < positionCount; position++) {\n-            if (valueIsNull == null || !valueIsNull[position]) {\n-                values[position] = sliceInput.readLong();\n+        if (valueIsNull == null) {\n+            sliceInput.readBytes(Slices.wrappedLongArray(values), 0, Long.BYTES * positionCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEyOTEwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        sliceInput.readBytes(Slices.wrappedLongArray(values), 0, Long.BYTES * positionCount);\n          \n          \n            \n                        sliceInput.readBytes(Slices.wrappedLongArray(values), Long.BYTES * positionCount);", "url": "https://github.com/trinodb/trino/pull/5905#discussion_r521129100", "createdAt": "2020-11-11T05:56:15Z", "author": {"login": "Praveen2112"}, "path": "presto-spi/src/main/java/io/prestosql/spi/block/LongArrayBlockEncoding.java", "diffHunk": "@@ -53,9 +54,14 @@ public Block readBlock(BlockEncodingSerde blockEncodingSerde, SliceInput sliceIn\n         boolean[] valueIsNull = decodeNullBits(sliceInput, positionCount).orElse(null);\n \n         long[] values = new long[positionCount];\n-        for (int position = 0; position < positionCount; position++) {\n-            if (valueIsNull == null || !valueIsNull[position]) {\n-                values[position] = sliceInput.readLong();\n+        if (valueIsNull == null) {\n+            sliceInput.readBytes(Slices.wrappedLongArray(values), 0, Long.BYTES * positionCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEzMTIyOA==", "bodyText": "Can we use RecordPageSource ? But we might need to add it to pom I guess", "url": "https://github.com/trinodb/trino/pull/5905#discussion_r521131228", "createdAt": "2020-11-11T06:03:24Z", "author": {"login": "Praveen2112"}, "path": "presto-tpch/src/main/java/io/prestosql/plugin/tpch/TpchTables.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.tpch;\n+\n+import com.google.common.collect.AbstractIterator;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.connector.ConnectorPageSource;\n+import io.prestosql.spi.predicate.TupleDomain;\n+import io.prestosql.spi.type.Type;\n+import io.prestosql.tpch.TpchTable;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.plugin.tpch.TpchRecordSet.createTpchRecordSet;\n+\n+public final class TpchTables\n+{\n+    private TpchTables()\n+    {\n+    }\n+\n+    public static List<Type> getTableColumns(String tableName)\n+    {\n+        TpchTable<?> table = TpchTable.getTable(tableName);\n+        return table.getColumns().stream()\n+                .map(TpchMetadata::getPrestoType)\n+                .collect(toImmutableList());\n+    }\n+\n+    public static Iterator<Page> getTablePages(\n+            String tableName,\n+            double scaleFactor,\n+            int maxRowsPerPage)\n+    {\n+        TpchTable table = TpchTable.getTable(tableName);\n+        ConnectorPageSource pageSource = new LazyRecordPageSource(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3OTc2NTA4", "url": "https://github.com/trinodb/trino/pull/5905#pullrequestreview-527976508", "createdAt": "2020-11-11T08:54:16Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwODo1NDoxNlrOHxD8VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwOTowOTo0NlrOHxEedg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIwNjg2OQ==", "bodyText": "nit: static import", "url": "https://github.com/trinodb/trino/pull/5905#discussion_r521206869", "createdAt": "2020-11-11T08:54:16Z", "author": {"login": "skrzypo987"}, "path": "presto-orc/src/test/java/io/prestosql/orc/BenchmarkColumnReaders.java", "diffHunk": "@@ -1066,6 +1060,20 @@ public void setup()\n         }\n     }\n \n+    @State(Scope.Thread)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 440}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIwNzY4Ng==", "bodyText": "while(pages.hasNext()){", "url": "https://github.com/trinodb/trino/pull/5905#discussion_r521207686", "createdAt": "2020-11-11T08:55:43Z", "author": {"login": "skrzypo987"}, "path": "presto-orc/src/test/java/io/prestosql/orc/OrcTester.java", "diffHunk": "@@ -602,6 +604,34 @@ static OrcRecordReader createCustomOrcRecordReader(TempFile tempFile, OrcPredica\n                 RuntimeException::new);\n     }\n \n+    public static void writeOrcPages(File outputFile, CompressionKind compression, List<Type> types, Iterator<Page> pages, OrcWriterStats stats)\n+            throws Exception\n+    {\n+        List<String> columnNames = IntStream.range(0, types.size())\n+                .mapToObj(i -> \"test\" + i)\n+                .collect(toImmutableList());\n+\n+        OrcWriter writer = new OrcWriter(\n+                new OutputStreamOrcDataSink(new FileOutputStream(outputFile)),\n+                columnNames,\n+                types,\n+                OrcType.createRootOrcType(columnNames, types),\n+                compression,\n+                new OrcWriterOptions(),\n+                false,\n+                ImmutableMap.of(),\n+                true,\n+                BOTH,\n+                stats);\n+\n+        for (; pages.hasNext(); ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIxNTYwNg==", "bodyText": "What is the difference between this one and BigintWithNullBenchmarkDataNonOptimized?\nThey look the same", "url": "https://github.com/trinodb/trino/pull/5905#discussion_r521215606", "createdAt": "2020-11-11T09:09:46Z", "author": {"login": "skrzypo987"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/BenchmarkBlockSerde.java", "diffHunk": "@@ -0,0 +1,448 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution.buffer;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.BasicSliceInput;\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.airlift.slice.OutputStreamSliceOutput;\n+import io.airlift.slice.Slice;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.PageBuilder;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.block.TestingBlockEncodingSerde;\n+import io.prestosql.spi.type.DecimalType;\n+import io.prestosql.spi.type.Decimals;\n+import io.prestosql.spi.type.SqlDecimal;\n+import io.prestosql.spi.type.Type;\n+import io.prestosql.spi.type.VarcharType;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OperationsPerInvocation;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+import org.openjdk.jmh.runner.options.VerboseMode;\n+import org.testng.annotations.Test;\n+\n+import java.math.BigInteger;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+\n+import static io.airlift.slice.Slices.utf8Slice;\n+import static io.prestosql.execution.buffer.PagesSerdeUtil.readPages;\n+import static io.prestosql.execution.buffer.PagesSerdeUtil.writePages;\n+import static io.prestosql.plugin.tpch.TpchTables.getTablePages;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.DecimalType.createDecimalType;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static io.prestosql.spi.type.Varchars.truncateToLength;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+@State(Scope.Thread)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Fork(3)\n+@Warmup(iterations = 30, time = 500, timeUnit = MILLISECONDS)\n+@Measurement(iterations = 20, time = 500, timeUnit = MILLISECONDS)\n+@BenchmarkMode(Mode.AverageTime)\n+@OperationsPerInvocation(BenchmarkBlockSerde.ROWS)\n+public class BenchmarkBlockSerde\n+{\n+    private static final DecimalType LONG_DECIMAL_TYPE = createDecimalType(30, 5);\n+\n+    public static final int ROWS = 10_000_000;\n+    private static final int MAX_STRING = 19;\n+\n+    @Benchmark\n+    public Object deserializeLongDecimalNoNull(LongDecimalNoNullBenchmarkData data)\n+    {\n+        return ImmutableList.copyOf(readPages(data.getPagesSerde(), new BasicSliceInput(data.getDataSource())));\n+    }\n+\n+    @Benchmark\n+    public Object deserializeLongDecimalWithNull(LongDecimalWithNullBenchmarkData data)\n+    {\n+        return ImmutableList.copyOf(readPages(data.getPagesSerde(), new BasicSliceInput(data.getDataSource())));\n+    }\n+\n+    @Benchmark\n+    public Object deserializeLongNonRandomNoNull(BigintNonRandomNoNullNullBenchmarkData data)\n+    {\n+        return ImmutableList.copyOf(readPages(data.getPagesSerde(), new BasicSliceInput(data.getDataSource())));\n+    }\n+\n+    @Benchmark\n+    public Object deserializeLongNoNull(BigintNoNullBenchmarkData data)\n+    {\n+        return ImmutableList.copyOf(readPages(data.getPagesSerde(), new BasicSliceInput(data.getDataSource())));\n+    }\n+\n+    @Benchmark\n+    public Object deserializeLongWithNull(BigintWithNullBenchmarkData data)\n+    {\n+        return ImmutableList.copyOf(readPages(data.getPagesSerde(), new BasicSliceInput(data.getDataSource())));\n+    }\n+\n+    @Benchmark\n+    public Object deserializeSliceDirectNoNull(VarcharDirectNoNullBenchmarkData data)\n+    {\n+        return ImmutableList.copyOf(readPages(data.getPagesSerde(), new BasicSliceInput(data.getDataSource())));\n+    }\n+\n+    @Benchmark\n+    public Object deserializeSliceDirectWithNull(VarcharDirectWithNullBenchmarkData data)\n+    {\n+        return ImmutableList.copyOf(readPages(data.getPagesSerde(), new BasicSliceInput(data.getDataSource())));\n+    }\n+\n+    @Benchmark\n+    public Object deserializeLineitem(LineitemBenchmarkData data)\n+    {\n+        return ImmutableList.copyOf(readPages(data.getPagesSerde(), new BasicSliceInput(data.getDataSource())));\n+    }\n+\n+    public abstract static class BenchmarkData\n+    {\n+        protected final Random random = new Random(0);\n+        private Slice dataSource;\n+        private PagesSerde pagesSerde;\n+\n+        public void setup(Iterator<Page> pages)\n+                throws Exception\n+        {\n+            pagesSerde = new TestingPagesSerdeFactory(new TestingBlockEncodingSerde(), false).createPagesSerde();\n+\n+            DynamicSliceOutput sliceOutput = new DynamicSliceOutput(0);\n+            writePages(pagesSerde, new OutputStreamSliceOutput(sliceOutput), pages);\n+            dataSource = sliceOutput.slice();\n+        }\n+\n+        public void setup(Type type, Iterator<?> values)\n+                throws Exception\n+        {\n+            pagesSerde = new TestingPagesSerdeFactory(new TestingBlockEncodingSerde(), false).createPagesSerde();\n+            PageBuilder pageBuilder = new PageBuilder(ImmutableList.of(type));\n+            BlockBuilder blockBuilder = pageBuilder.getBlockBuilder(0);\n+            ImmutableList.Builder<Page> pages = ImmutableList.builder();\n+            while (values.hasNext()) {\n+                Object value = values.next();\n+                if (value == null) {\n+                    blockBuilder.appendNull();\n+                }\n+                else if (BIGINT.equals(type)) {\n+                    BIGINT.writeLong(blockBuilder, ((Number) value).longValue());\n+                }\n+                else if (Decimals.isLongDecimal(type)) {\n+                    type.writeSlice(blockBuilder, Decimals.encodeUnscaledValue(((SqlDecimal) value).toBigDecimal().unscaledValue()));\n+                }\n+                else if (type instanceof VarcharType) {\n+                    Slice slice = truncateToLength(utf8Slice((String) value), type);\n+                    type.writeSlice(blockBuilder, slice);\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Unsupported type \" + type);\n+                }\n+                pageBuilder.declarePosition();\n+                if (pageBuilder.isFull()) {\n+                    pages.add(pageBuilder.build());\n+                    pageBuilder.reset();\n+                    blockBuilder = pageBuilder.getBlockBuilder(0);\n+                }\n+            }\n+            if (pageBuilder.getPositionCount() > 0) {\n+                pages.add(pageBuilder.build());\n+            }\n+\n+            DynamicSliceOutput sliceOutput = new DynamicSliceOutput(0);\n+            writePages(pagesSerde, new OutputStreamSliceOutput(sliceOutput), pages.build().iterator());\n+            dataSource = sliceOutput.slice();\n+        }\n+\n+        public PagesSerde getPagesSerde()\n+        {\n+            return pagesSerde;\n+        }\n+\n+        public Slice getDataSource()\n+        {\n+            return dataSource;\n+        }\n+    }\n+\n+    @State(Scope.Thread)\n+    public static class LongDecimalNoNullBenchmarkData\n+            extends BenchmarkData\n+    {\n+        @Setup\n+        public void setup()\n+                throws Exception\n+        {\n+            setup(LONG_DECIMAL_TYPE, createValues());\n+        }\n+\n+        private Iterator<?> createValues()\n+        {\n+            List<SqlDecimal> values = new ArrayList<>();\n+            for (int i = 0; i < ROWS; ++i) {\n+                values.add(new SqlDecimal(new BigInteger(96, random), 30, 5));\n+            }\n+            return values.iterator();\n+        }\n+    }\n+\n+    @State(Scope.Thread)\n+    public static class LongDecimalWithNullBenchmarkData\n+            extends BenchmarkData\n+    {\n+        @Setup\n+        public void setup()\n+                throws Exception\n+        {\n+            setup(LONG_DECIMAL_TYPE, createValues());\n+        }\n+\n+        private Iterator<?> createValues()\n+        {\n+            List<SqlDecimal> values = new ArrayList<>();\n+            for (int i = 0; i < ROWS; ++i) {\n+                if (random.nextBoolean()) {\n+                    values.add(new SqlDecimal(new BigInteger(96, random), 30, 5));\n+                }\n+                else {\n+                    values.add(null);\n+                }\n+            }\n+            return values.iterator();\n+        }\n+    }\n+\n+    @State(Scope.Thread)\n+    public static class BigintNonRandomNoNullNullBenchmarkData\n+            extends BenchmarkData\n+    {\n+        @Setup\n+        public void setup()\n+                throws Exception\n+        {\n+            setup(BIGINT, createValues());\n+        }\n+\n+        private Iterator<?> createValues()\n+        {\n+            List<Long> values = new ArrayList<>();\n+            for (int i = 0; i < ROWS; ++i) {\n+                values.add((long) i);\n+            }\n+            return values.iterator();\n+        }\n+    }\n+\n+    @State(Scope.Thread)\n+    public static class BigintNoNullBenchmarkData\n+            extends BenchmarkData\n+    {\n+        @Setup\n+        public void setup()\n+                throws Exception\n+        {\n+            setup(BIGINT, createValues());\n+        }\n+\n+        private Iterator<?> createValues()\n+        {\n+            List<Long> values = new ArrayList<>();\n+            for (int i = 0; i < ROWS; ++i) {\n+                values.add(random.nextLong());\n+            }\n+            return values.iterator();\n+        }\n+    }\n+\n+    @State(Scope.Thread)\n+    public static class BigintWithNullBenchmarkData\n+            extends BenchmarkData\n+    {\n+        @Setup\n+        public void setup()\n+                throws Exception\n+        {\n+            setup(BIGINT, createValues());\n+        }\n+\n+        private Iterator<?> createValues()\n+        {\n+            List<Long> values = new ArrayList<>();\n+            for (int i = 0; i < ROWS; ++i) {\n+                if (random.nextBoolean()) {\n+                    values.add(random.nextLong());\n+                }\n+                else {\n+                    values.add(null);\n+                }\n+            }\n+            return values.iterator();\n+        }\n+    }\n+\n+    @State(Scope.Thread)\n+    public static class BigintWithNullBenchmarkDataNonOptimized\n+            extends BenchmarkData\n+    {\n+        @Setup\n+        public void setup()\n+                throws Exception\n+        {\n+            setup(BIGINT, createValues());\n+        }\n+\n+        private Iterator<?> createValues()\n+        {\n+            List<Long> values = new ArrayList<>();\n+            for (int i = 0; i < ROWS; ++i) {\n+                if (random.nextBoolean()) {\n+                    values.add(random.nextLong());\n+                }\n+                else {\n+                    values.add(null);\n+                }\n+            }\n+            return values.iterator();\n+        }\n+    }\n+\n+    @State(Scope.Thread)\n+    public static class BigintWithNullBenchmarkDataFixedWidthBlock", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 336}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MjUzNzg5", "url": "https://github.com/trinodb/trino/pull/5905#pullrequestreview-528253789", "createdAt": "2020-11-11T15:05:09Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNTowNTowOVrOHxRBsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNTowNTowOVrOHxRBsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQyMTIzNA==", "bodyText": "You might need to handle the case when (positionCount * Long.BYTES) > Integer.MAX_VALUE", "url": "https://github.com/trinodb/trino/pull/5905#discussion_r521421234", "createdAt": "2020-11-11T15:05:09Z", "author": {"login": "pettyjamesm"}, "path": "presto-spi/src/main/java/io/prestosql/spi/block/LongArrayBlockEncoding.java", "diffHunk": "@@ -53,9 +54,14 @@ public Block readBlock(BlockEncodingSerde blockEncodingSerde, SliceInput sliceIn\n         boolean[] valueIsNull = decodeNullBits(sliceInput, positionCount).orElse(null);\n \n         long[] values = new long[positionCount];\n-        for (int position = 0; position < positionCount; position++) {\n-            if (valueIsNull == null || !valueIsNull[position]) {\n-                values[position] = sliceInput.readLong();\n+        if (valueIsNull == null) {\n+            sliceInput.readBytes(Slices.wrappedLongArray(values), 0, Long.BYTES * positionCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "925aea6144241b7189d2edc79716e65ad96b0496", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/925aea6144241b7189d2edc79716e65ad96b0496", "committedDate": "2020-11-12T15:59:47Z", "message": "Benchmark lineitem data in BenchmarkColumnReaders"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2423b976cded17022739f861868e4977eac9bdb5", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/2423b976cded17022739f861868e4977eac9bdb5", "committedDate": "2020-11-12T15:59:47Z", "message": "Benchmark different compression methods in BenchmarkColumnReaders"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9525af68fe57d105388751e42ac1b980ddb34a7", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/c9525af68fe57d105388751e42ac1b980ddb34a7", "committedDate": "2020-11-12T15:59:47Z", "message": "Remove unused map"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NTE2MzI4", "url": "https://github.com/trinodb/trino/pull/5905#pullrequestreview-529516328", "createdAt": "2020-11-12T21:36:38Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMTozNjozOFrOHyPSSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMTozNjozOFrOHyPSSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ0MTI5MQ==", "bodyText": "This extra allocation is going to be a bit of a bummer if you only have a few nulls since it effectively doubles the allocations involved with decoding.", "url": "https://github.com/trinodb/trino/pull/5905#discussion_r522441291", "createdAt": "2020-11-12T21:36:38Z", "author": {"login": "pettyjamesm"}, "path": "presto-spi/src/main/java/io/prestosql/spi/block/LongArrayBlockEncoding.java", "diffHunk": "@@ -53,9 +65,20 @@ public Block readBlock(BlockEncodingSerde blockEncodingSerde, SliceInput sliceIn\n         boolean[] valueIsNull = decodeNullBits(sliceInput, positionCount).orElse(null);\n \n         long[] values = new long[positionCount];\n-        for (int position = 0; position < positionCount; position++) {\n-            if (valueIsNull == null || !valueIsNull[position]) {\n-                values[position] = sliceInput.readLong();\n+        if (valueIsNull == null) {\n+            sliceInput.readBytes(Slices.wrappedLongArray(values));\n+        }\n+        else {\n+            int nonNullPositionCount = sliceInput.readInt();\n+            long[] valuesWithoutNull = new long[nonNullPositionCount + 1];", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25a8e964b0d3ef8a2febcd60dd060ed4077f1143", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/25a8e964b0d3ef8a2febcd60dd060ed4077f1143", "committedDate": "2020-11-12T22:07:37Z", "message": "Add BenchmarkBlockSerde\n\nAdd BenchmarkBlockSerde which is similar to BenchmarkColumnReaders\nso it's possible to compare both methods of data deserialization."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c206e18f82a90ec568a7ddc3313afec648ee266", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/2c206e18f82a90ec568a7ddc3313afec648ee266", "committedDate": "2020-11-13T07:47:13Z", "message": "Add TestLongArrayBlockEncoding"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c138859054285d8557785a059a988dc5e4600a2b", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/c138859054285d8557785a059a988dc5e4600a2b", "committedDate": "2020-11-13T07:47:13Z", "message": "Improve serde performance for Long blocks with no nulls\n\nAFTER\nBenchmark                                  Mode  Cnt  Score   Error  Units\nBenchmarkBlockSerde.deserializeLineitem    avgt   60  1,202 \u00b1 0,020  ns/op\nBenchmarkBlockSerde.deserializeLongNoNull  avgt   60  1,115 \u00b1 0,008  ns/op\nBenchmarkBlockSerde.serializeLineitem      avgt   60  3,663 \u00b1 0,026  ns/op\nBenchmarkBlockSerde.serializeLongNoNull    avgt   60  1,515 \u00b1 0,015  ns/op\n\nBEFORE\nBenchmark                                  Mode  Cnt  Score   Error  Units\nBenchmarkBlockSerde.deserializeLineitem    avgt   60  1,869 \u00b1 0,015  ns/op\nBenchmarkBlockSerde.deserializeLongNoNull  avgt   60  2,533 \u00b1 0,015  ns/op\nBenchmarkBlockSerde.serializeLineitem      avgt   60  4,709 \u00b1 0,086  ns/op\nBenchmarkBlockSerde.serializeLongNoNull    avgt   60  5,250 \u00b1 0,074  ns/op"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f0ce5d1205493abad7d698fd4599e64ec19ad4b", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/3f0ce5d1205493abad7d698fd4599e64ec19ad4b", "committedDate": "2020-11-13T07:47:13Z", "message": "Improve serde performance for Long blocks with nulls\n\nAFTER\n\nBenchmark                                    Mode  Cnt  Score   Error  Units\nBenchmarkBlockSerde.deserializeLineitem      avgt   60  1,212 \u00b1 0,015  ns/op\nBenchmarkBlockSerde.deserializeLongWithNull  avgt   60  2,500 \u00b1 0,038  ns/op\nBenchmarkBlockSerde.serializeLineitem        avgt   60  3,645 \u00b1 0,039  ns/op\nBenchmarkBlockSerde.serializeLongWithNull    avgt   60  3,351 \u00b1 0,016  ns/op\n\nBEFORE\n\nBenchmark                                    Mode  Cnt  Score   Error  Units\nBenchmarkBlockSerde.deserializeLineitem      avgt   60  1,219 \u00b1 0,016  ns/op\nBenchmarkBlockSerde.deserializeLongWithNull  avgt   60  5,524 \u00b1 0,062  ns/op\nBenchmarkBlockSerde.serializeLineitem        avgt   60  3,671 \u00b1 0,041  ns/op\nBenchmarkBlockSerde.serializeLongWithNull    avgt   60  8,844 \u00b1 0,086  ns/op"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dd5c94b5db8889c62487436d9fd1ec8bcde3aa5", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/0dd5c94b5db8889c62487436d9fd1ec8bcde3aa5", "committedDate": "2020-11-13T07:47:13Z", "message": "Extract BlockTestUtils#assertBlockEquals"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92ded01377e69470694b568a333f69809d6d8c1c", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/92ded01377e69470694b568a333f69809d6d8c1c", "committedDate": "2020-11-13T07:47:13Z", "message": "Static import Scope.Thread"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "92ded01377e69470694b568a333f69809d6d8c1c", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/92ded01377e69470694b568a333f69809d6d8c1c", "committedDate": "2020-11-13T07:47:13Z", "message": "Static import Scope.Thread"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5ODQ4NDM1", "url": "https://github.com/trinodb/trino/pull/5905#pullrequestreview-529848435", "createdAt": "2020-11-13T08:04:32Z", "commit": {"oid": "92ded01377e69470694b568a333f69809d6d8c1c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5ODg4OTMz", "url": "https://github.com/trinodb/trino/pull/5905#pullrequestreview-529888933", "createdAt": "2020-11-13T09:05:07Z", "commit": {"oid": "92ded01377e69470694b568a333f69809d6d8c1c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2482, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}