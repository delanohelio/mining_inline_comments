{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNDg2NDAy", "number": 3214, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODowNDoxNVrODqrfcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODowNDoxNVrODqrfcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDc5MzQ1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestPredicatePushdown.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODowNDoxNVrOF6krDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjoxNzowN1rOF6tjvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2MjU3NA==", "bodyText": "s/\"    /\"/", "url": "https://github.com/trinodb/trino/pull/3214#discussion_r396962574", "createdAt": "2020-03-24T08:04:15Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestPredicatePushdown.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.metadata.Metadata;\n+import org.testng.annotations.Test;\n+\n+import java.util.Optional;\n+\n+import static io.prestosql.SystemSessionProperties.ENABLE_DYNAMIC_FILTERING;\n+import static io.prestosql.metadata.MetadataManager.createTestMetadataManager;\n+import static io.prestosql.sql.planner.assertions.PlanMatchPattern.anyTree;\n+import static io.prestosql.sql.planner.assertions.PlanMatchPattern.equiJoinClause;\n+import static io.prestosql.sql.planner.assertions.PlanMatchPattern.filter;\n+import static io.prestosql.sql.planner.assertions.PlanMatchPattern.join;\n+import static io.prestosql.sql.planner.assertions.PlanMatchPattern.project;\n+import static io.prestosql.sql.planner.assertions.PlanMatchPattern.tableScan;\n+import static io.prestosql.sql.planner.plan.JoinNode.Type.INNER;\n+\n+public class TestPredicatePushdown\n+        extends AbstractPredicatePushdownTest\n+{\n+    private final Metadata metadata = createTestMetadataManager();\n+\n+    public TestPredicatePushdown()\n+    {\n+        super(ImmutableMap.of(ENABLE_DYNAMIC_FILTERING, \"true\"));\n+    }\n+\n+    @Test\n+    @Override\n+    public void testCoercions()\n+    {\n+        // Ensure constant equality predicate is pushed to the other side of the join\n+        // when type coercions are involved\n+\n+        // values have the same type (varchar(4)) in both tables\n+        assertPlan(\n+                \"WITH \" +\n+                        \"    t(k, v) AS (SELECT nationkey, CAST(name AS varchar(4)) FROM nation),\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b21fa491a531c60f88ac6fea2188288f246347e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEwODE1Nw==", "bodyText": "it's verbatim copy of this test method being moved\ni will leave this as is", "url": "https://github.com/trinodb/trino/pull/3214#discussion_r397108157", "createdAt": "2020-03-24T12:17:07Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestPredicatePushdown.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.metadata.Metadata;\n+import org.testng.annotations.Test;\n+\n+import java.util.Optional;\n+\n+import static io.prestosql.SystemSessionProperties.ENABLE_DYNAMIC_FILTERING;\n+import static io.prestosql.metadata.MetadataManager.createTestMetadataManager;\n+import static io.prestosql.sql.planner.assertions.PlanMatchPattern.anyTree;\n+import static io.prestosql.sql.planner.assertions.PlanMatchPattern.equiJoinClause;\n+import static io.prestosql.sql.planner.assertions.PlanMatchPattern.filter;\n+import static io.prestosql.sql.planner.assertions.PlanMatchPattern.join;\n+import static io.prestosql.sql.planner.assertions.PlanMatchPattern.project;\n+import static io.prestosql.sql.planner.assertions.PlanMatchPattern.tableScan;\n+import static io.prestosql.sql.planner.plan.JoinNode.Type.INNER;\n+\n+public class TestPredicatePushdown\n+        extends AbstractPredicatePushdownTest\n+{\n+    private final Metadata metadata = createTestMetadataManager();\n+\n+    public TestPredicatePushdown()\n+    {\n+        super(ImmutableMap.of(ENABLE_DYNAMIC_FILTERING, \"true\"));\n+    }\n+\n+    @Test\n+    @Override\n+    public void testCoercions()\n+    {\n+        // Ensure constant equality predicate is pushed to the other side of the join\n+        // when type coercions are involved\n+\n+        // values have the same type (varchar(4)) in both tables\n+        assertPlan(\n+                \"WITH \" +\n+                        \"    t(k, v) AS (SELECT nationkey, CAST(name AS varchar(4)) FROM nation),\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2MjU3NA=="}, "originalCommit": {"oid": "1b21fa491a531c60f88ac6fea2188288f246347e"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 473, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}