{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1MzcxMDAx", "number": 5008, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjozMjozNVrOEdtj3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDowNjoxMFrOEdwyuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NTkwNjIwOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/SuiteList.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjozMjozNVrOHJCSog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjozNDoyMVrOHJCazw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIzNjc3MA==", "bodyText": "why so?\nI guess the modules can add both new suites and new environments. Right?", "url": "https://github.com/trinodb/trino/pull/5008#discussion_r479236770", "createdAt": "2020-08-28T12:32:35Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/SuiteList.java", "diffHunk": "@@ -37,11 +38,11 @@\n public final class SuiteList\n         implements Runnable\n {\n-    private final Module additionalSuites;\n+    private final Module additionalEnvironments;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIzODg2Mw==", "bodyText": "I've corrected this in a subsequent commit. I'll squash those.", "url": "https://github.com/trinodb/trino/pull/5008#discussion_r479238863", "createdAt": "2020-08-28T12:34:21Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/SuiteList.java", "diffHunk": "@@ -37,11 +38,11 @@\n public final class SuiteList\n         implements Runnable\n {\n-    private final Module additionalSuites;\n+    private final Module additionalEnvironments;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIzNjc3MA=="}, "originalCommit": null, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NTkzMTc2OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentConfigFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjozNjowNlrOHJCjHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjozNzoxNVrOHJCofQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI0MDk4OQ==", "bodyText": "these are not providers. These are just configs.", "url": "https://github.com/trinodb/trino/pull/5008#discussion_r479240989", "createdAt": "2020-08-28T12:36:06Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentConfigFactory.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env;\n+\n+import com.google.common.collect.Ordering;\n+import com.google.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+public class EnvironmentConfigFactory\n+{\n+    private final Map<String, EnvironmentConfig> configProviders;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI0MjM2NQ==", "bodyText": "I'll rename that", "url": "https://github.com/trinodb/trino/pull/5008#discussion_r479242365", "createdAt": "2020-08-28T12:37:15Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentConfigFactory.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env;\n+\n+import com.google.common.collect.Ordering;\n+import com.google.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+public class EnvironmentConfigFactory\n+{\n+    private final Map<String, EnvironmentConfig> configProviders;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI0MDk4OQ=="}, "originalCommit": null, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NTk2ODk3OnYy", "diffSide": "LEFT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentOptions.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjo0MToyN1rOHJC8Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjo1MDoxNFrOHJDaYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI0NzQyNg==", "bodyText": "This limits the expressiveness of env up. Are you sure people did not depend on possibility to build test environment bit by bit?", "url": "https://github.com/trinodb/trino/pull/5008#discussion_r479247426", "createdAt": "2020-08-28T12:41:27Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentOptions.java", "diffHunk": "@@ -25,17 +23,8 @@\n \n public final class EnvironmentOptions\n {\n-    @Option(name = \"--hadoop-base-image\", title = \"image\", description = \"Hadoop base image\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI0OTUxOA==", "bodyText": "That's why I've created config-env-based that allows passing those values using ENV. There is also a possibility to create EnvironmentConfig with desired values and use it with env up.", "url": "https://github.com/trinodb/trino/pull/5008#discussion_r479249518", "createdAt": "2020-08-28T12:43:38Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentOptions.java", "diffHunk": "@@ -25,17 +23,8 @@\n \n public final class EnvironmentOptions\n {\n-    @Option(name = \"--hadoop-base-image\", title = \"image\", description = \"Hadoop base image\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI0NzQyNg=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI1MDI3MQ==", "bodyText": "So actually it makes extending configuration properties for environments easier than before. No need to pass it along with the command-line.", "url": "https://github.com/trinodb/trino/pull/5008#discussion_r479250271", "createdAt": "2020-08-28T12:44:31Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentOptions.java", "diffHunk": "@@ -25,17 +23,8 @@\n \n public final class EnvironmentOptions\n {\n-    @Option(name = \"--hadoop-base-image\", title = \"image\", description = \"Hadoop base image\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI0NzQyNg=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI1MjgwOA==", "bodyText": "Yeah - I have just got to that commit. I think it is fine.\nWould you mind to document it a bit in README.md?", "url": "https://github.com/trinodb/trino/pull/5008#discussion_r479252808", "createdAt": "2020-08-28T12:47:30Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentOptions.java", "diffHunk": "@@ -25,17 +23,8 @@\n \n public final class EnvironmentOptions\n {\n-    @Option(name = \"--hadoop-base-image\", title = \"image\", description = \"Hadoop base image\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI0NzQyNg=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI1NTEzOQ==", "bodyText": "Sure thing.", "url": "https://github.com/trinodb/trino/pull/5008#discussion_r479255139", "createdAt": "2020-08-28T12:50:14Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentOptions.java", "diffHunk": "@@ -25,17 +23,8 @@\n \n public final class EnvironmentOptions\n {\n-    @Option(name = \"--hadoop-base-image\", title = \"image\", description = \"Hadoop base image\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI0NzQyNg=="}, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NTk5MDIxOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/Standard.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjo0NToxMlrOHJDJrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjo0NToxMlrOHJDJrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI1MDg2Mg==", "bodyText": "move above enablePrestoJavaDebugger(DockerContainer container, int debugPort)", "url": "https://github.com/trinodb/trino/pull/5008#discussion_r479250862", "createdAt": "2020-08-28T12:45:12Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/Standard.java", "diffHunk": "@@ -153,4 +145,20 @@ public static void enablePrestoJavaDebugger(DockerContainer container, int debug\n             throw new UncheckedIOException(e);\n         }\n     }\n+\n+    public static void enablePrestoJavaDebugger(String containerName, DockerContainer dockerContainer)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NjM5MTQyOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentConfigFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMzo1ODowNlrOHJHMUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMzo1ODowNlrOHJHMUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMxNzA3Mg==", "bodyText": "defensive copy", "url": "https://github.com/trinodb/trino/pull/5008#discussion_r479317072", "createdAt": "2020-08-28T13:58:06Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentConfigFactory.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env;\n+\n+import com.google.common.collect.Ordering;\n+import com.google.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+public class EnvironmentConfigFactory\n+{\n+    private final Map<String, EnvironmentConfig> configurations;\n+\n+    @Inject\n+    public EnvironmentConfigFactory(Map<String, EnvironmentConfig> configurations)\n+    {\n+        this.configurations = requireNonNull(configurations, \"configurations is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NjQyODQ5OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentModule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDowNDo0OVrOHJHlQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDowNDo0OVrOHJHlQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMyMzQ1Nw==", "bodyText": "call it baseEnvironmentOptions and instead of mutating it create new instance based on it in provideEnvironmentOptions", "url": "https://github.com/trinodb/trino/pull/5008#discussion_r479323457", "createdAt": "2020-08-28T14:04:49Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentModule.java", "diffHunk": "@@ -14,26 +14,36 @@\n package io.prestosql.tests.product.launcher.env;\n \n import com.google.inject.Binder;\n+import com.google.inject.Inject;\n import com.google.inject.Module;\n+import com.google.inject.Provides;\n+import com.google.inject.Singleton;\n import com.google.inject.multibindings.MapBinder;\n+import io.prestosql.tests.product.launcher.PathResolver;\n import io.prestosql.tests.product.launcher.env.common.Hadoop;\n import io.prestosql.tests.product.launcher.env.common.Kafka;\n import io.prestosql.tests.product.launcher.env.common.Kerberos;\n import io.prestosql.tests.product.launcher.env.common.KerberosKms;\n import io.prestosql.tests.product.launcher.env.common.Standard;\n import io.prestosql.tests.product.launcher.testcontainers.PortBinder;\n \n+import java.io.File;\n+\n import static com.google.inject.multibindings.MapBinder.newMapBinder;\n+import static io.prestosql.tests.product.launcher.env.Environments.nameForConfigClass;\n import static java.util.Objects.requireNonNull;\n \n public final class EnvironmentModule\n         implements Module\n {\n     public static final String BASE_PACKAGE = \"io.prestosql.tests.product.launcher.env.environment\";\n+    public static final String BASE_CONFIG_PACKAGE = \"io.prestosql.tests.product.launcher.env.configs\";\n+    private final EnvironmentOptions environmentOptions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NjQzNDg0OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/configs/ConfigEnvBased.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDowNTo1OFrOHJHpXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDowNTo1OFrOHJHpXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMyNDUxMA==", "bodyText": "call out to super.getExcludedGroups", "url": "https://github.com/trinodb/trino/pull/5008#discussion_r479324510", "createdAt": "2020-08-28T14:05:58Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/configs/ConfigEnvBased.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.configs;\n+\n+import com.google.common.base.Splitter;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static java.lang.System.getenv;\n+\n+public class ConfigEnvBased\n+        extends ConfigDefault\n+{\n+    @Override\n+    public String getHadoopBaseImage()\n+    {\n+        return getEnvOrDefault(\"HADOOP_BASE_IMAGE\", super.getHadoopBaseImage());\n+    }\n+\n+    @Override\n+    public String getImagesVersion()\n+    {\n+        return getEnvOrDefault(\"DOCKER_IMAGES_VERSION\", super.getImagesVersion());\n+    }\n+\n+    @Override\n+    public String getHadoopImagesVersion()\n+    {\n+        return getEnvOrDefault(\"HADOOP_IMAGES_VERSION\", super.getHadoopImagesVersion());\n+    }\n+\n+    @Override\n+    public String getTemptoEnvironmentConfigFile()\n+    {\n+        return getEnvOrDefault(\"TEMPTO_ENVIRONMENT_CONFIG_FILE\", super.getTemptoEnvironmentConfigFile());\n+    }\n+\n+    @Override\n+    public List<String> getExcludedGroups()\n+    {\n+        return Splitter.on(',')\n+                .omitEmptyStrings()\n+                .trimResults()\n+                .splitToList(getEnvOrDefault(\"DISTRO_SKIP_GROUP\", \"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NjQzNTc3OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/configs/ConfigEnvBased.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDowNjoxMFrOHJHqBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDowNjoxMFrOHJHqBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMyNDY3Nw==", "bodyText": "call out to super.getExcludedTests", "url": "https://github.com/trinodb/trino/pull/5008#discussion_r479324677", "createdAt": "2020-08-28T14:06:10Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/configs/ConfigEnvBased.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.configs;\n+\n+import com.google.common.base.Splitter;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static java.lang.System.getenv;\n+\n+public class ConfigEnvBased\n+        extends ConfigDefault\n+{\n+    @Override\n+    public String getHadoopBaseImage()\n+    {\n+        return getEnvOrDefault(\"HADOOP_BASE_IMAGE\", super.getHadoopBaseImage());\n+    }\n+\n+    @Override\n+    public String getImagesVersion()\n+    {\n+        return getEnvOrDefault(\"DOCKER_IMAGES_VERSION\", super.getImagesVersion());\n+    }\n+\n+    @Override\n+    public String getHadoopImagesVersion()\n+    {\n+        return getEnvOrDefault(\"HADOOP_IMAGES_VERSION\", super.getHadoopImagesVersion());\n+    }\n+\n+    @Override\n+    public String getTemptoEnvironmentConfigFile()\n+    {\n+        return getEnvOrDefault(\"TEMPTO_ENVIRONMENT_CONFIG_FILE\", super.getTemptoEnvironmentConfigFile());\n+    }\n+\n+    @Override\n+    public List<String> getExcludedGroups()\n+    {\n+        return Splitter.on(',')\n+                .omitEmptyStrings()\n+                .trimResults()\n+                .splitToList(getEnvOrDefault(\"DISTRO_SKIP_GROUP\", \"\"));\n+    }\n+\n+    @Override\n+    public List<String> getExcludedTests()\n+    {\n+        return Splitter.on(',')\n+                .omitEmptyStrings()\n+                .trimResults()\n+                .splitToList(getEnvOrDefault(\"DISTRO_SKIP_TEST\", \"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3367, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}