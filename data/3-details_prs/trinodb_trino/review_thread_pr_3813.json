{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxNjgzODAy", "number": 3813, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOToxNTozM1rOD-4kng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDoyMjoxM1rOD-5t8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjY1MTgyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/sql/planner/optimizations/TestAddExchangesPlans.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOToxNTozM1rOGZQWlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDo1Mjo1NFrOGZaE9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEzNTUwOA==", "bodyText": "What we repartition on? is it round robin in disguise?", "url": "https://github.com/trinodb/trino/pull/3813#discussion_r429135508", "createdAt": "2020-05-22T09:15:33Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/optimizations/TestAddExchangesPlans.java", "diffHunk": "@@ -428,6 +428,17 @@ public void testExchangesAroundTrivialProjection()\n                 anyTree(\n                         project(\n                                 values(\"a\"))));\n+\n+        assertPlan(\n+                \"SELECT 1 UNION ALL SELECT 1\",\n+                anyTree(\n+                        exchange(\n+                                LOCAL,\n+                                REPARTITION,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI3NTI4OA==", "bodyText": "Yes :(", "url": "https://github.com/trinodb/trino/pull/3813#discussion_r429275288", "createdAt": "2020-05-22T14:20:09Z", "author": {"login": "martint"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/optimizations/TestAddExchangesPlans.java", "diffHunk": "@@ -428,6 +428,17 @@ public void testExchangesAroundTrivialProjection()\n                 anyTree(\n                         project(\n                                 values(\"a\"))));\n+\n+        assertPlan(\n+                \"SELECT 1 UNION ALL SELECT 1\",\n+                anyTree(\n+                        exchange(\n+                                LOCAL,\n+                                REPARTITION,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEzNTUwOA=="}, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI5NDgzOQ==", "bodyText": "uh. maybe worth adding a comment for people coming here for the first (second, third, ...) time, or somehow reflect that in exchange matcher instantiation", "url": "https://github.com/trinodb/trino/pull/3813#discussion_r429294839", "createdAt": "2020-05-22T14:52:54Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/optimizations/TestAddExchangesPlans.java", "diffHunk": "@@ -428,6 +428,17 @@ public void testExchangesAroundTrivialProjection()\n                 anyTree(\n                         project(\n                                 values(\"a\"))));\n+\n+        assertPlan(\n+                \"SELECT 1 UNION ALL SELECT 1\",\n+                anyTree(\n+                        exchange(\n+                                LOCAL,\n+                                REPARTITION,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEzNTUwOA=="}, "originalCommit": null, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjgzOTU1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/sql/query/TestSubqueries.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDoyMjoxM1rOGZSNpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDoyMjoxM1rOGZSNpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2NTk4OQ==", "bodyText": "When refactoring this, you could replace all node(ValuesNode.class)) with values(\"x\"), values(\"y\") etc, accordingly to the actual names used in queries. It would make it easier to follow how the plan has transformed.", "url": "https://github.com/trinodb/trino/pull/3813#discussion_r429165989", "createdAt": "2020-05-22T10:22:13Z", "author": {"login": "kasiafi"}, "path": "presto-main/src/test/java/io/prestosql/sql/query/TestSubqueries.java", "diffHunk": "@@ -64,14 +53,37 @@ public void teardown()\n     @Test\n     public void testCorrelatedExistsSubqueriesWithOrPredicateAndNull()\n     {\n-        assertExistsRewrittenToAggregationAboveJoin(\n+        assertions.assertQueryAndPlan(\n                 \"SELECT EXISTS(SELECT 1 FROM (VALUES null, 10) t(x) WHERE y > x OR y + 10 > x) FROM (values 11 + if(rand() >= 0, 0)) t2(y)\",\n                 \"VALUES true\",\n-                false);\n-        assertExistsRewrittenToAggregationAboveJoin(\n+                anyTree(\n+                        aggregation(\n+                                ImmutableMap.of(\"COUNT\", functionCall(\"count\", ImmutableList.of(\"NON_NULL\"))),\n+                                aggregation -> aggregation.isStreamable() && aggregation.getStep() == SINGLE,\n+                                node(JoinNode.class,\n+                                        anyTree(\n+                                                node(ValuesNode.class)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4906, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}