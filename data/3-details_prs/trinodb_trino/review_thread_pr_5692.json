{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwMDY0MTk4", "number": 5692, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTozMTo0MVrOEx9SVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODowMjoxN1rOE069gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODE5Nzk3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/LiteralEncoder.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTozMTo0MVrOHoVPPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNjoxMzozN1rOHsLQqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1MzA1Mw==", "bodyText": "A comment will be helpful for why this check is needed. From what I understood this is to make sure we provide a TimestampLiteral only for cases where roundtrip is possible.", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r512053053", "createdAt": "2020-10-26T15:31:41Z", "author": {"login": "hashhar"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LiteralEncoder.java", "diffHunk": "@@ -210,6 +218,32 @@ public Expression toExpression(Object object, Type type)\n             return new GenericLiteral(\"DATE\", new SqlDate(toIntExact((Long) object)).toString());\n         }\n \n+        if (type instanceof TimestampType) {\n+            TimestampType timestampType = (TimestampType) type;\n+            String representation;\n+            if (timestampType.isShort()) {\n+                representation = TimestampToVarcharCast.cast(timestampType.getPrecision(), (Long) object).toStringUtf8();\n+            }\n+            else {\n+                representation = TimestampToVarcharCast.cast(timestampType.getPrecision(), (LongTimestamp) object).toStringUtf8();\n+            }\n+            return new TimestampLiteral(representation);\n+        }\n+\n+        if (type instanceof TimestampWithTimeZoneType) {\n+            TimestampWithTimeZoneType timestampWithTimeZoneType = (TimestampWithTimeZoneType) type;\n+            String representation;\n+            if (timestampWithTimeZoneType.isShort()) {\n+                representation = TimestampWithTimeZoneToVarcharCast.cast(timestampWithTimeZoneType.getPrecision(), (long) object).toStringUtf8();\n+            }\n+            else {\n+                representation = TimestampWithTimeZoneToVarcharCast.cast(timestampWithTimeZoneType.getPrecision(), (LongTimestampWithTimeZone) object).toStringUtf8();\n+            }\n+            if (object.equals(parseTimestampWithTimeZone(timestampWithTimeZoneType.getPrecision(), representation))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEzMjQ1Ng==", "bodyText": "This is weird check. Can't we determine if representation of given value as literal is possible just by looking at value itself. Not reverse-probing generated literal value?", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r512132456", "createdAt": "2020-10-26T17:15:07Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LiteralEncoder.java", "diffHunk": "@@ -210,6 +218,32 @@ public Expression toExpression(Object object, Type type)\n             return new GenericLiteral(\"DATE\", new SqlDate(toIntExact((Long) object)).toString());\n         }\n \n+        if (type instanceof TimestampType) {\n+            TimestampType timestampType = (TimestampType) type;\n+            String representation;\n+            if (timestampType.isShort()) {\n+                representation = TimestampToVarcharCast.cast(timestampType.getPrecision(), (Long) object).toStringUtf8();\n+            }\n+            else {\n+                representation = TimestampToVarcharCast.cast(timestampType.getPrecision(), (LongTimestamp) object).toStringUtf8();\n+            }\n+            return new TimestampLiteral(representation);\n+        }\n+\n+        if (type instanceof TimestampWithTimeZoneType) {\n+            TimestampWithTimeZoneType timestampWithTimeZoneType = (TimestampWithTimeZoneType) type;\n+            String representation;\n+            if (timestampWithTimeZoneType.isShort()) {\n+                representation = TimestampWithTimeZoneToVarcharCast.cast(timestampWithTimeZoneType.getPrecision(), (long) object).toStringUtf8();\n+            }\n+            else {\n+                representation = TimestampWithTimeZoneToVarcharCast.cast(timestampWithTimeZoneType.getPrecision(), (LongTimestampWithTimeZone) object).toStringUtf8();\n+            }\n+            if (object.equals(parseTimestampWithTimeZone(timestampWithTimeZoneType.getPrecision(), representation))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1MzA1Mw=="}, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwNjg1OA==", "bodyText": "Agreed. The \"as varchar\" representation for a timestamp w/ tz is unambiguous, so this check is unnecessary.", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r512206858", "createdAt": "2020-10-26T19:14:32Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LiteralEncoder.java", "diffHunk": "@@ -210,6 +218,32 @@ public Expression toExpression(Object object, Type type)\n             return new GenericLiteral(\"DATE\", new SqlDate(toIntExact((Long) object)).toString());\n         }\n \n+        if (type instanceof TimestampType) {\n+            TimestampType timestampType = (TimestampType) type;\n+            String representation;\n+            if (timestampType.isShort()) {\n+                representation = TimestampToVarcharCast.cast(timestampType.getPrecision(), (Long) object).toStringUtf8();\n+            }\n+            else {\n+                representation = TimestampToVarcharCast.cast(timestampType.getPrecision(), (LongTimestamp) object).toStringUtf8();\n+            }\n+            return new TimestampLiteral(representation);\n+        }\n+\n+        if (type instanceof TimestampWithTimeZoneType) {\n+            TimestampWithTimeZoneType timestampWithTimeZoneType = (TimestampWithTimeZoneType) type;\n+            String representation;\n+            if (timestampWithTimeZoneType.isShort()) {\n+                representation = TimestampWithTimeZoneToVarcharCast.cast(timestampWithTimeZoneType.getPrecision(), (long) object).toStringUtf8();\n+            }\n+            else {\n+                representation = TimestampWithTimeZoneToVarcharCast.cast(timestampWithTimeZoneType.getPrecision(), (LongTimestampWithTimeZone) object).toStringUtf8();\n+            }\n+            if (object.equals(parseTimestampWithTimeZone(timestampWithTimeZoneType.getPrecision(), representation))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1MzA1Mw=="}, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUwMzM4OA==", "bodyText": "The check is necessary & is test covered by these cases in TLE\n// DST change backward - no direct representation\nassertRoundTrip(packDateTimeWithZone(1603589478_000L, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(0), Long::equals);\nassertRoundTrip(packDateTimeWithZone(1603589478_123L, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(3), Long::equals);\nassertRoundTrip(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603589478_123L, 123000000, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(6), LongTimestampWithTimeZone::equals);\nassertRoundTrip(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603589478_123L, 123456000, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(9), LongTimestampWithTimeZone::equals);\nassertRoundTrip(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603589478_123L, 123456789, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(12), LongTimestampWithTimeZone::equals);", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r512503388", "createdAt": "2020-10-27T08:39:47Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LiteralEncoder.java", "diffHunk": "@@ -210,6 +218,32 @@ public Expression toExpression(Object object, Type type)\n             return new GenericLiteral(\"DATE\", new SqlDate(toIntExact((Long) object)).toString());\n         }\n \n+        if (type instanceof TimestampType) {\n+            TimestampType timestampType = (TimestampType) type;\n+            String representation;\n+            if (timestampType.isShort()) {\n+                representation = TimestampToVarcharCast.cast(timestampType.getPrecision(), (Long) object).toStringUtf8();\n+            }\n+            else {\n+                representation = TimestampToVarcharCast.cast(timestampType.getPrecision(), (LongTimestamp) object).toStringUtf8();\n+            }\n+            return new TimestampLiteral(representation);\n+        }\n+\n+        if (type instanceof TimestampWithTimeZoneType) {\n+            TimestampWithTimeZoneType timestampWithTimeZoneType = (TimestampWithTimeZoneType) type;\n+            String representation;\n+            if (timestampWithTimeZoneType.isShort()) {\n+                representation = TimestampWithTimeZoneToVarcharCast.cast(timestampWithTimeZoneType.getPrecision(), (long) object).toStringUtf8();\n+            }\n+            else {\n+                representation = TimestampWithTimeZoneToVarcharCast.cast(timestampWithTimeZoneType.getPrecision(), (LongTimestampWithTimeZone) object).toStringUtf8();\n+            }\n+            if (object.equals(parseTimestampWithTimeZone(timestampWithTimeZoneType.getPrecision(), representation))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1MzA1Mw=="}, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMxNDExNg==", "bodyText": "The question is how do we ever end up with a timestamp w/ tz that falls in the gap or that has dual representation.\nPlease, add a comment and TODO to evaluate that behavior. We may want to disallow that in general.", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r515314116", "createdAt": "2020-10-30T18:57:12Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LiteralEncoder.java", "diffHunk": "@@ -210,6 +218,32 @@ public Expression toExpression(Object object, Type type)\n             return new GenericLiteral(\"DATE\", new SqlDate(toIntExact((Long) object)).toString());\n         }\n \n+        if (type instanceof TimestampType) {\n+            TimestampType timestampType = (TimestampType) type;\n+            String representation;\n+            if (timestampType.isShort()) {\n+                representation = TimestampToVarcharCast.cast(timestampType.getPrecision(), (Long) object).toStringUtf8();\n+            }\n+            else {\n+                representation = TimestampToVarcharCast.cast(timestampType.getPrecision(), (LongTimestamp) object).toStringUtf8();\n+            }\n+            return new TimestampLiteral(representation);\n+        }\n+\n+        if (type instanceof TimestampWithTimeZoneType) {\n+            TimestampWithTimeZoneType timestampWithTimeZoneType = (TimestampWithTimeZoneType) type;\n+            String representation;\n+            if (timestampWithTimeZoneType.isShort()) {\n+                representation = TimestampWithTimeZoneToVarcharCast.cast(timestampWithTimeZoneType.getPrecision(), (long) object).toStringUtf8();\n+            }\n+            else {\n+                representation = TimestampWithTimeZoneToVarcharCast.cast(timestampWithTimeZoneType.getPrecision(), (LongTimestampWithTimeZone) object).toStringUtf8();\n+            }\n+            if (object.equals(parseTimestampWithTimeZone(timestampWithTimeZoneType.getPrecision(), representation))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1MzA1Mw=="}, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUxODQzMA==", "bodyText": "We may want to disallow that in general.\n\nplease file an issue for this, i'll be ref it from the TODO comment", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r515518430", "createdAt": "2020-10-31T17:18:29Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LiteralEncoder.java", "diffHunk": "@@ -210,6 +218,32 @@ public Expression toExpression(Object object, Type type)\n             return new GenericLiteral(\"DATE\", new SqlDate(toIntExact((Long) object)).toString());\n         }\n \n+        if (type instanceof TimestampType) {\n+            TimestampType timestampType = (TimestampType) type;\n+            String representation;\n+            if (timestampType.isShort()) {\n+                representation = TimestampToVarcharCast.cast(timestampType.getPrecision(), (Long) object).toStringUtf8();\n+            }\n+            else {\n+                representation = TimestampToVarcharCast.cast(timestampType.getPrecision(), (LongTimestamp) object).toStringUtf8();\n+            }\n+            return new TimestampLiteral(representation);\n+        }\n+\n+        if (type instanceof TimestampWithTimeZoneType) {\n+            TimestampWithTimeZoneType timestampWithTimeZoneType = (TimestampWithTimeZoneType) type;\n+            String representation;\n+            if (timestampWithTimeZoneType.isShort()) {\n+                representation = TimestampWithTimeZoneToVarcharCast.cast(timestampWithTimeZoneType.getPrecision(), (long) object).toStringUtf8();\n+            }\n+            else {\n+                representation = TimestampWithTimeZoneToVarcharCast.cast(timestampWithTimeZoneType.getPrecision(), (LongTimestampWithTimeZone) object).toStringUtf8();\n+            }\n+            if (object.equals(parseTimestampWithTimeZone(timestampWithTimeZoneType.getPrecision(), representation))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1MzA1Mw=="}, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA4Mzg4Mw==", "bodyText": "The question is how do we ever end up with a timestamp w/ tz that falls in the gap or that has dual representation.\n\nFWIW the Java Time solves this by encoding \"point in time\", zone and offset within a value\nInstant instant = Instant.parse(\"2020-10-25T01:01:00Z\");\nZoneId zone = ZoneId.of(\"Europe/Warsaw\");\nZonedDateTime zonedDateTime = instant.atZone(zone);\nSystem.out.printf(\"%s %s\\n\", zonedDateTime, zonedDateTime.toEpochSecond()); // 2020-10-25T02:01+01:00[Europe/Warsaw] 1603587660\nzonedDateTime = zonedDateTime.toLocalDateTime().atZone(zone);\nSystem.out.printf(\"%s %s\\n\", zonedDateTime, zonedDateTime.toEpochSecond()); // 2020-10-25T02:01+02:00[Europe/Warsaw] 1603584060\nthus it can distinguish otherwise ambiguous values within DST backwards change.", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r516083883", "createdAt": "2020-11-02T16:13:37Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LiteralEncoder.java", "diffHunk": "@@ -210,6 +218,32 @@ public Expression toExpression(Object object, Type type)\n             return new GenericLiteral(\"DATE\", new SqlDate(toIntExact((Long) object)).toString());\n         }\n \n+        if (type instanceof TimestampType) {\n+            TimestampType timestampType = (TimestampType) type;\n+            String representation;\n+            if (timestampType.isShort()) {\n+                representation = TimestampToVarcharCast.cast(timestampType.getPrecision(), (Long) object).toStringUtf8();\n+            }\n+            else {\n+                representation = TimestampToVarcharCast.cast(timestampType.getPrecision(), (LongTimestamp) object).toStringUtf8();\n+            }\n+            return new TimestampLiteral(representation);\n+        }\n+\n+        if (type instanceof TimestampWithTimeZoneType) {\n+            TimestampWithTimeZoneType timestampWithTimeZoneType = (TimestampWithTimeZoneType) type;\n+            String representation;\n+            if (timestampWithTimeZoneType.isShort()) {\n+                representation = TimestampWithTimeZoneToVarcharCast.cast(timestampWithTimeZoneType.getPrecision(), (long) object).toStringUtf8();\n+            }\n+            else {\n+                representation = TimestampWithTimeZoneToVarcharCast.cast(timestampWithTimeZoneType.getPrecision(), (LongTimestampWithTimeZone) object).toStringUtf8();\n+            }\n+            if (object.equals(parseTimestampWithTimeZone(timestampWithTimeZoneType.getPrecision(), representation))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1MzA1Mw=="}, "originalCommit": null, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODIyNTM3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/UnwrapCastInComparison.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTozNzoxNlrOHoVgag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwODo0MzozOFrOHow3rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1NzQ1MA==", "bodyText": "If this is something the SQL spec says then I would like if the comment ended with must be considered equal.\nFrom what I can see the spec says equality is when the UTC Instants are same (regardless of offset used).", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r512057450", "createdAt": "2020-10-26T15:37:16Z", "author": {"login": "hashhar"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/UnwrapCastInComparison.java", "diffHunk": "@@ -196,6 +210,11 @@ private Expression unwrapCast(ComparisonExpression expression)\n             Type sourceType = typeAnalyzer.getType(session, types, cast.getExpression());\n             Type targetType = typeAnalyzer.getType(session, types, expression.getRight());\n \n+            if (targetType instanceof TimestampWithTimeZoneType) {\n+                // Note: two TIMESTAMP WITH TIME ZONE values differing in zone only are considered equal.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxMzQwMQ==", "bodyText": "Indeed, that comment is incorrect. They are considered equal if their instant in the same.\nThis deserves a better comment, too. The reason we reinterpret the value in the session timezone is so that the conversion roundtrips properly when going from timestamp w/ tz -> timestamp -> timestamp w/ tz.", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r512213401", "createdAt": "2020-10-26T19:26:19Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/UnwrapCastInComparison.java", "diffHunk": "@@ -196,6 +210,11 @@ private Expression unwrapCast(ComparisonExpression expression)\n             Type sourceType = typeAnalyzer.getType(session, types, cast.getExpression());\n             Type targetType = typeAnalyzer.getType(session, types, expression.getRight());\n \n+            if (targetType instanceof TimestampWithTimeZoneType) {\n+                // Note: two TIMESTAMP WITH TIME ZONE values differing in zone only are considered equal.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1NzQ1MA=="}, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUwNTc3NQ==", "bodyText": "Indeed, that comment is incorrect. They are considered equal if their instant in the same.\n\nThis is what i meant, i added \"same instant\"  to make the comment clearer\n// Note: two TIMESTAMP WITH TIME ZONE values differing in zone only (same instant) are considered equal.\n\n\nThis deserves a better comment, too. The reason we reinterpret the value in the session timezone is so that the conversion roundtrips properly when going from timestamp w/ tz -> timestamp -> timestamp w/ tz.\n\nYes, this is the point. I put the check & explanation in io.prestosql.sql.planner.iterative.rule.UnwrapCastInComparison.Visitor#hasInjectiveImplicitCoercion method.", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r512505775", "createdAt": "2020-10-27T08:43:38Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/UnwrapCastInComparison.java", "diffHunk": "@@ -196,6 +210,11 @@ private Expression unwrapCast(ComparisonExpression expression)\n             Type sourceType = typeAnalyzer.getType(session, types, cast.getExpression());\n             Type targetType = typeAnalyzer.getType(session, types, expression.getRight());\n \n+            if (targetType instanceof TimestampWithTimeZoneType) {\n+                // Note: two TIMESTAMP WITH TIME ZONE values differing in zone only are considered equal.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1NzQ1MA=="}, "originalCommit": null, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODIzODYyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestLiteralEncoder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTozOTo1M1rOHoVoqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwODo0NDo1OFrOHow7Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1OTU2MA==", "bodyText": "nit: I'd like the null timestamp and timestamptz changes to also go here. Or move the BIGINT case into testEncodeBigint.", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r512059560", "createdAt": "2020-10-26T15:39:53Z", "author": {"login": "hashhar"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestLiteralEncoder.java", "diffHunk": "@@ -90,28 +98,154 @@\n             ImmutableSet.of());\n \n     @Test\n-    public void testEncode()\n+    public void testEncodeNull()\n     {\n-        assertEncodeCaseInsensitively(utf8Slice(\"hello\"), VARBINARY, literalVarbinary(\"hello\".getBytes(UTF_8)));\n         assertEncode(null, UNKNOWN, \"null\");\n         assertEncode(null, BIGINT, \"CAST(null AS bigint)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUwNjY3NQ==", "bodyText": "rearranged as requested", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r512506675", "createdAt": "2020-10-27T08:44:58Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestLiteralEncoder.java", "diffHunk": "@@ -90,28 +98,154 @@\n             ImmutableSet.of());\n \n     @Test\n-    public void testEncode()\n+    public void testEncodeNull()\n     {\n-        assertEncodeCaseInsensitively(utf8Slice(\"hello\"), VARBINARY, literalVarbinary(\"hello\".getBytes(UTF_8)));\n         assertEncode(null, UNKNOWN, \"null\");\n         assertEncode(null, BIGINT, \"CAST(null AS bigint)\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1OTU2MA=="}, "originalCommit": null, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODY2Nzc1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/LiteralEncoder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzowODo1NFrOHoZ0wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzowODo1NFrOHoZ0wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEyODE5NA==", "bodyText": "typo in Rpresent TIMESTAMP constants readably in EXPLAIN commit message", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r512128194", "createdAt": "2020-10-26T17:08:54Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LiteralEncoder.java", "diffHunk": "@@ -23,11 +23,14 @@\n import io.prestosql.metadata.Metadata;\n import io.prestosql.metadata.ResolvedFunction;\n import io.prestosql.operator.scalar.VarbinaryFunctions;\n+import io.prestosql.operator.scalar.timestamp.TimestampToVarcharCast;\n import io.prestosql.spi.block.Block;\n import io.prestosql.spi.type.CharType;\n import io.prestosql.spi.type.DecimalType;\n import io.prestosql.spi.type.Decimals;\n+import io.prestosql.spi.type.LongTimestamp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODY4MDI5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/LiteralEncoder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzoxMTo0NFrOHoZ8aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzoxMTo0NFrOHoZ8aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEzMDE1Mw==", "bodyText": "typo in Rpresent TIMESTAMP WITH TIME ZONE constants readably in EXPLAIN commit message", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r512130153", "createdAt": "2020-10-26T17:11:44Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LiteralEncoder.java", "diffHunk": "@@ -24,13 +24,16 @@\n import io.prestosql.metadata.ResolvedFunction;\n import io.prestosql.operator.scalar.VarbinaryFunctions;\n import io.prestosql.operator.scalar.timestamp.TimestampToVarcharCast;\n+import io.prestosql.operator.scalar.timestamptz.TimestampWithTimeZoneToVarcharCast;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODcxMTgzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestLiteralEncoder.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzoxOToxMFrOHoaQhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNTozNjowOFrOHqh1Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEzNTMwMA==", "bodyText": "should assertEncode also call assertRoundTrip internally?", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r512135300", "createdAt": "2020-10-26T17:19:10Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestLiteralEncoder.java", "diffHunk": "@@ -168,6 +173,62 @@ public void testEncodeTimestamp()\n         assertEncode(new LongTimestamp(1603710138_000000L, 0), createTimestampType(12), \"TIMESTAMP '2020-10-26 11:02:18.000000000000'\");\n     }\n \n+    @Test\n+    public void testEncodeTimestampWithTimeZone()\n+    {\n+        for (int precision = 0; precision <= 12; precision++) {\n+            assertEncode(null, createTimestampWithTimeZoneType(precision), format(\"CAST(null AS timestamp(%s) with time zone)\", precision));\n+        }\n+\n+        assertEncode(packDateTimeWithZone(1603710138_000L, UTC_KEY), createTimestampWithTimeZoneType(0), \"TIMESTAMP '2020-10-26 11:02:18 UTC'\");\n+        assertEncode(packDateTimeWithZone(1603710138_100L, UTC_KEY), createTimestampWithTimeZoneType(1), \"TIMESTAMP '2020-10-26 11:02:18.1 UTC'\");\n+        assertEncode(packDateTimeWithZone(1603710138_120L, UTC_KEY), createTimestampWithTimeZoneType(2), \"TIMESTAMP '2020-10-26 11:02:18.12 UTC'\");\n+        assertEncode(packDateTimeWithZone(1603710138_123L, UTC_KEY), createTimestampWithTimeZoneType(3), \"TIMESTAMP '2020-10-26 11:02:18.123 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 100000000, UTC_KEY), createTimestampWithTimeZoneType(4), \"TIMESTAMP '2020-10-26 11:02:18.1231 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 120000000, UTC_KEY), createTimestampWithTimeZoneType(5), \"TIMESTAMP '2020-10-26 11:02:18.12312 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123000000, UTC_KEY), createTimestampWithTimeZoneType(6), \"TIMESTAMP '2020-10-26 11:02:18.123123 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123400000, UTC_KEY), createTimestampWithTimeZoneType(7), \"TIMESTAMP '2020-10-26 11:02:18.1231234 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123450000, UTC_KEY), createTimestampWithTimeZoneType(8), \"TIMESTAMP '2020-10-26 11:02:18.12312345 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123456000, UTC_KEY), createTimestampWithTimeZoneType(9), \"TIMESTAMP '2020-10-26 11:02:18.123123456 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123456700, UTC_KEY), createTimestampWithTimeZoneType(10), \"TIMESTAMP '2020-10-26 11:02:18.1231234567 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123456780, UTC_KEY), createTimestampWithTimeZoneType(11), \"TIMESTAMP '2020-10-26 11:02:18.12312345678 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123456789, UTC_KEY), createTimestampWithTimeZoneType(12), \"TIMESTAMP '2020-10-26 11:02:18.123123456789 UTC'\");\n+\n+        assertEncode(packDateTimeWithZone(1603710138_000L, UTC_KEY), createTimestampWithTimeZoneType(1), \"TIMESTAMP '2020-10-26 11:02:18.0 UTC'\");\n+        assertEncode(packDateTimeWithZone(1603710138_000L, UTC_KEY), createTimestampWithTimeZoneType(2), \"TIMESTAMP '2020-10-26 11:02:18.00 UTC'\");\n+        assertEncode(packDateTimeWithZone(1603710138_000L, UTC_KEY), createTimestampWithTimeZoneType(3), \"TIMESTAMP '2020-10-26 11:02:18.000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(4), \"TIMESTAMP '2020-10-26 11:02:18.0000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(5), \"TIMESTAMP '2020-10-26 11:02:18.00000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(6), \"TIMESTAMP '2020-10-26 11:02:18.000000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(7), \"TIMESTAMP '2020-10-26 11:02:18.0000000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(8), \"TIMESTAMP '2020-10-26 11:02:18.00000000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(9), \"TIMESTAMP '2020-10-26 11:02:18.000000000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(10), \"TIMESTAMP '2020-10-26 11:02:18.0000000000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(11), \"TIMESTAMP '2020-10-26 11:02:18.00000000000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(12), \"TIMESTAMP '2020-10-26 11:02:18.000000000000 UTC'\");\n+\n+        // with zone\n+        assertEncode(packDateTimeWithZone(1603710138_000L, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(0), \"TIMESTAMP '2020-10-26 12:02:18 Europe/Warsaw'\");\n+        assertEncode(packDateTimeWithZone(1603710138_123L, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(3), \"TIMESTAMP '2020-10-26 12:02:18.123 Europe/Warsaw'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123000000, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(6), \"TIMESTAMP '2020-10-26 12:02:18.123123 Europe/Warsaw'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123456000, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(9), \"TIMESTAMP '2020-10-26 12:02:18.123123456 Europe/Warsaw'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123456789, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(12), \"TIMESTAMP '2020-10-26 12:02:18.123123456789 Europe/Warsaw'\");\n+\n+        // DST change forward\n+        assertEncode(packDateTimeWithZone(1585445478_000L, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(0), \"TIMESTAMP '2020-03-29 03:31:18 Europe/Warsaw'\");\n+        assertEncode(packDateTimeWithZone(1585445478_123L, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(3), \"TIMESTAMP '2020-03-29 03:31:18.123 Europe/Warsaw'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1585445478_123L, 123000000, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(6), \"TIMESTAMP '2020-03-29 03:31:18.123123 Europe/Warsaw'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1585445478_123L, 123456000, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(9), \"TIMESTAMP '2020-03-29 03:31:18.123123456 Europe/Warsaw'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1585445478_123L, 123456789, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(12), \"TIMESTAMP '2020-03-29 03:31:18.123123456789 Europe/Warsaw'\");\n+\n+        // DST change backward - no direct representation\n+        assertRoundTrip(packDateTimeWithZone(1603589478_000L, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(0), Long::equals);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxMTMxNw==", "bodyText": "This is probably something we should address separately. It shouldn't be possible to construct a timestamp w/ tz from a value that falls in a DST gap. The cast from varchar -> timestamp w/ tz already prevents it, but it's possible other places are not as strict.", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r512211317", "createdAt": "2020-10-26T19:22:42Z", "author": {"login": "martint"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestLiteralEncoder.java", "diffHunk": "@@ -168,6 +173,62 @@ public void testEncodeTimestamp()\n         assertEncode(new LongTimestamp(1603710138_000000L, 0), createTimestampType(12), \"TIMESTAMP '2020-10-26 11:02:18.000000000000'\");\n     }\n \n+    @Test\n+    public void testEncodeTimestampWithTimeZone()\n+    {\n+        for (int precision = 0; precision <= 12; precision++) {\n+            assertEncode(null, createTimestampWithTimeZoneType(precision), format(\"CAST(null AS timestamp(%s) with time zone)\", precision));\n+        }\n+\n+        assertEncode(packDateTimeWithZone(1603710138_000L, UTC_KEY), createTimestampWithTimeZoneType(0), \"TIMESTAMP '2020-10-26 11:02:18 UTC'\");\n+        assertEncode(packDateTimeWithZone(1603710138_100L, UTC_KEY), createTimestampWithTimeZoneType(1), \"TIMESTAMP '2020-10-26 11:02:18.1 UTC'\");\n+        assertEncode(packDateTimeWithZone(1603710138_120L, UTC_KEY), createTimestampWithTimeZoneType(2), \"TIMESTAMP '2020-10-26 11:02:18.12 UTC'\");\n+        assertEncode(packDateTimeWithZone(1603710138_123L, UTC_KEY), createTimestampWithTimeZoneType(3), \"TIMESTAMP '2020-10-26 11:02:18.123 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 100000000, UTC_KEY), createTimestampWithTimeZoneType(4), \"TIMESTAMP '2020-10-26 11:02:18.1231 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 120000000, UTC_KEY), createTimestampWithTimeZoneType(5), \"TIMESTAMP '2020-10-26 11:02:18.12312 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123000000, UTC_KEY), createTimestampWithTimeZoneType(6), \"TIMESTAMP '2020-10-26 11:02:18.123123 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123400000, UTC_KEY), createTimestampWithTimeZoneType(7), \"TIMESTAMP '2020-10-26 11:02:18.1231234 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123450000, UTC_KEY), createTimestampWithTimeZoneType(8), \"TIMESTAMP '2020-10-26 11:02:18.12312345 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123456000, UTC_KEY), createTimestampWithTimeZoneType(9), \"TIMESTAMP '2020-10-26 11:02:18.123123456 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123456700, UTC_KEY), createTimestampWithTimeZoneType(10), \"TIMESTAMP '2020-10-26 11:02:18.1231234567 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123456780, UTC_KEY), createTimestampWithTimeZoneType(11), \"TIMESTAMP '2020-10-26 11:02:18.12312345678 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123456789, UTC_KEY), createTimestampWithTimeZoneType(12), \"TIMESTAMP '2020-10-26 11:02:18.123123456789 UTC'\");\n+\n+        assertEncode(packDateTimeWithZone(1603710138_000L, UTC_KEY), createTimestampWithTimeZoneType(1), \"TIMESTAMP '2020-10-26 11:02:18.0 UTC'\");\n+        assertEncode(packDateTimeWithZone(1603710138_000L, UTC_KEY), createTimestampWithTimeZoneType(2), \"TIMESTAMP '2020-10-26 11:02:18.00 UTC'\");\n+        assertEncode(packDateTimeWithZone(1603710138_000L, UTC_KEY), createTimestampWithTimeZoneType(3), \"TIMESTAMP '2020-10-26 11:02:18.000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(4), \"TIMESTAMP '2020-10-26 11:02:18.0000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(5), \"TIMESTAMP '2020-10-26 11:02:18.00000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(6), \"TIMESTAMP '2020-10-26 11:02:18.000000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(7), \"TIMESTAMP '2020-10-26 11:02:18.0000000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(8), \"TIMESTAMP '2020-10-26 11:02:18.00000000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(9), \"TIMESTAMP '2020-10-26 11:02:18.000000000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(10), \"TIMESTAMP '2020-10-26 11:02:18.0000000000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(11), \"TIMESTAMP '2020-10-26 11:02:18.00000000000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(12), \"TIMESTAMP '2020-10-26 11:02:18.000000000000 UTC'\");\n+\n+        // with zone\n+        assertEncode(packDateTimeWithZone(1603710138_000L, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(0), \"TIMESTAMP '2020-10-26 12:02:18 Europe/Warsaw'\");\n+        assertEncode(packDateTimeWithZone(1603710138_123L, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(3), \"TIMESTAMP '2020-10-26 12:02:18.123 Europe/Warsaw'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123000000, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(6), \"TIMESTAMP '2020-10-26 12:02:18.123123 Europe/Warsaw'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123456000, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(9), \"TIMESTAMP '2020-10-26 12:02:18.123123456 Europe/Warsaw'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123456789, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(12), \"TIMESTAMP '2020-10-26 12:02:18.123123456789 Europe/Warsaw'\");\n+\n+        // DST change forward\n+        assertEncode(packDateTimeWithZone(1585445478_000L, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(0), \"TIMESTAMP '2020-03-29 03:31:18 Europe/Warsaw'\");\n+        assertEncode(packDateTimeWithZone(1585445478_123L, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(3), \"TIMESTAMP '2020-03-29 03:31:18.123 Europe/Warsaw'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1585445478_123L, 123000000, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(6), \"TIMESTAMP '2020-03-29 03:31:18.123123 Europe/Warsaw'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1585445478_123L, 123456000, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(9), \"TIMESTAMP '2020-03-29 03:31:18.123123456 Europe/Warsaw'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1585445478_123L, 123456789, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(12), \"TIMESTAMP '2020-03-29 03:31:18.123123456789 Europe/Warsaw'\");\n+\n+        // DST change backward - no direct representation\n+        assertRoundTrip(packDateTimeWithZone(1603589478_000L, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(0), Long::equals);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEzNTMwMA=="}, "originalCommit": null, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUxMDM2Nw==", "bodyText": "should assertEncode also call assertRoundTrip internally?\n\n@losipiuk  let's keep it out of scope of this PR, maybe?\n\nThis is probably something we should address separately. It shouldn't be possible to construct a timestamp w/ tz from a value that falls in a DST gap.\n\n@martint maybe. This is a bigger change about semantics of the timestamp with time zone -- is it a pair of (instant, zone) or not. please file an issue.\nNote however that the case here is not about DST Gap (change forward), but about change backward -- local time being doubled, and so some instants being not \"addressable\".", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r512510367", "createdAt": "2020-10-27T08:50:40Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestLiteralEncoder.java", "diffHunk": "@@ -168,6 +173,62 @@ public void testEncodeTimestamp()\n         assertEncode(new LongTimestamp(1603710138_000000L, 0), createTimestampType(12), \"TIMESTAMP '2020-10-26 11:02:18.000000000000'\");\n     }\n \n+    @Test\n+    public void testEncodeTimestampWithTimeZone()\n+    {\n+        for (int precision = 0; precision <= 12; precision++) {\n+            assertEncode(null, createTimestampWithTimeZoneType(precision), format(\"CAST(null AS timestamp(%s) with time zone)\", precision));\n+        }\n+\n+        assertEncode(packDateTimeWithZone(1603710138_000L, UTC_KEY), createTimestampWithTimeZoneType(0), \"TIMESTAMP '2020-10-26 11:02:18 UTC'\");\n+        assertEncode(packDateTimeWithZone(1603710138_100L, UTC_KEY), createTimestampWithTimeZoneType(1), \"TIMESTAMP '2020-10-26 11:02:18.1 UTC'\");\n+        assertEncode(packDateTimeWithZone(1603710138_120L, UTC_KEY), createTimestampWithTimeZoneType(2), \"TIMESTAMP '2020-10-26 11:02:18.12 UTC'\");\n+        assertEncode(packDateTimeWithZone(1603710138_123L, UTC_KEY), createTimestampWithTimeZoneType(3), \"TIMESTAMP '2020-10-26 11:02:18.123 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 100000000, UTC_KEY), createTimestampWithTimeZoneType(4), \"TIMESTAMP '2020-10-26 11:02:18.1231 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 120000000, UTC_KEY), createTimestampWithTimeZoneType(5), \"TIMESTAMP '2020-10-26 11:02:18.12312 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123000000, UTC_KEY), createTimestampWithTimeZoneType(6), \"TIMESTAMP '2020-10-26 11:02:18.123123 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123400000, UTC_KEY), createTimestampWithTimeZoneType(7), \"TIMESTAMP '2020-10-26 11:02:18.1231234 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123450000, UTC_KEY), createTimestampWithTimeZoneType(8), \"TIMESTAMP '2020-10-26 11:02:18.12312345 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123456000, UTC_KEY), createTimestampWithTimeZoneType(9), \"TIMESTAMP '2020-10-26 11:02:18.123123456 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123456700, UTC_KEY), createTimestampWithTimeZoneType(10), \"TIMESTAMP '2020-10-26 11:02:18.1231234567 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123456780, UTC_KEY), createTimestampWithTimeZoneType(11), \"TIMESTAMP '2020-10-26 11:02:18.12312345678 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123456789, UTC_KEY), createTimestampWithTimeZoneType(12), \"TIMESTAMP '2020-10-26 11:02:18.123123456789 UTC'\");\n+\n+        assertEncode(packDateTimeWithZone(1603710138_000L, UTC_KEY), createTimestampWithTimeZoneType(1), \"TIMESTAMP '2020-10-26 11:02:18.0 UTC'\");\n+        assertEncode(packDateTimeWithZone(1603710138_000L, UTC_KEY), createTimestampWithTimeZoneType(2), \"TIMESTAMP '2020-10-26 11:02:18.00 UTC'\");\n+        assertEncode(packDateTimeWithZone(1603710138_000L, UTC_KEY), createTimestampWithTimeZoneType(3), \"TIMESTAMP '2020-10-26 11:02:18.000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(4), \"TIMESTAMP '2020-10-26 11:02:18.0000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(5), \"TIMESTAMP '2020-10-26 11:02:18.00000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(6), \"TIMESTAMP '2020-10-26 11:02:18.000000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(7), \"TIMESTAMP '2020-10-26 11:02:18.0000000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(8), \"TIMESTAMP '2020-10-26 11:02:18.00000000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(9), \"TIMESTAMP '2020-10-26 11:02:18.000000000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(10), \"TIMESTAMP '2020-10-26 11:02:18.0000000000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(11), \"TIMESTAMP '2020-10-26 11:02:18.00000000000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(12), \"TIMESTAMP '2020-10-26 11:02:18.000000000000 UTC'\");\n+\n+        // with zone\n+        assertEncode(packDateTimeWithZone(1603710138_000L, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(0), \"TIMESTAMP '2020-10-26 12:02:18 Europe/Warsaw'\");\n+        assertEncode(packDateTimeWithZone(1603710138_123L, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(3), \"TIMESTAMP '2020-10-26 12:02:18.123 Europe/Warsaw'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123000000, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(6), \"TIMESTAMP '2020-10-26 12:02:18.123123 Europe/Warsaw'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123456000, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(9), \"TIMESTAMP '2020-10-26 12:02:18.123123456 Europe/Warsaw'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123456789, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(12), \"TIMESTAMP '2020-10-26 12:02:18.123123456789 Europe/Warsaw'\");\n+\n+        // DST change forward\n+        assertEncode(packDateTimeWithZone(1585445478_000L, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(0), \"TIMESTAMP '2020-03-29 03:31:18 Europe/Warsaw'\");\n+        assertEncode(packDateTimeWithZone(1585445478_123L, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(3), \"TIMESTAMP '2020-03-29 03:31:18.123 Europe/Warsaw'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1585445478_123L, 123000000, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(6), \"TIMESTAMP '2020-03-29 03:31:18.123123 Europe/Warsaw'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1585445478_123L, 123456000, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(9), \"TIMESTAMP '2020-03-29 03:31:18.123123456 Europe/Warsaw'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1585445478_123L, 123456789, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(12), \"TIMESTAMP '2020-03-29 03:31:18.123123456789 Europe/Warsaw'\");\n+\n+        // DST change backward - no direct representation\n+        assertRoundTrip(packDateTimeWithZone(1603589478_000L, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(0), Long::equals);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEzNTMwMA=="}, "originalCommit": null, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc1ODk5Mw==", "bodyText": "is it a pair of (instant, zone) or not.\n\nFrom a SQL standard perspective, it's a collection of fields: year, month, day, hour, minute, second, timezone hour and timezone minute. Although, in multiple places in the spec there are references to the \"UTC component\", which is the value normalized to UTC + a time zone displacement:\nA datetime value, of data type TIME WITHOUT TIME ZONE or TIMESTAMP WITHOUT TIME ZONE, \nmay represent a local time, whereas a datetime value of data type TIME WITH TIME ZONE or \nTIMESTAMP WITH TIME ZONE represents UTC.", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r513758993", "createdAt": "2020-10-28T21:04:05Z", "author": {"login": "martint"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestLiteralEncoder.java", "diffHunk": "@@ -168,6 +173,62 @@ public void testEncodeTimestamp()\n         assertEncode(new LongTimestamp(1603710138_000000L, 0), createTimestampType(12), \"TIMESTAMP '2020-10-26 11:02:18.000000000000'\");\n     }\n \n+    @Test\n+    public void testEncodeTimestampWithTimeZone()\n+    {\n+        for (int precision = 0; precision <= 12; precision++) {\n+            assertEncode(null, createTimestampWithTimeZoneType(precision), format(\"CAST(null AS timestamp(%s) with time zone)\", precision));\n+        }\n+\n+        assertEncode(packDateTimeWithZone(1603710138_000L, UTC_KEY), createTimestampWithTimeZoneType(0), \"TIMESTAMP '2020-10-26 11:02:18 UTC'\");\n+        assertEncode(packDateTimeWithZone(1603710138_100L, UTC_KEY), createTimestampWithTimeZoneType(1), \"TIMESTAMP '2020-10-26 11:02:18.1 UTC'\");\n+        assertEncode(packDateTimeWithZone(1603710138_120L, UTC_KEY), createTimestampWithTimeZoneType(2), \"TIMESTAMP '2020-10-26 11:02:18.12 UTC'\");\n+        assertEncode(packDateTimeWithZone(1603710138_123L, UTC_KEY), createTimestampWithTimeZoneType(3), \"TIMESTAMP '2020-10-26 11:02:18.123 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 100000000, UTC_KEY), createTimestampWithTimeZoneType(4), \"TIMESTAMP '2020-10-26 11:02:18.1231 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 120000000, UTC_KEY), createTimestampWithTimeZoneType(5), \"TIMESTAMP '2020-10-26 11:02:18.12312 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123000000, UTC_KEY), createTimestampWithTimeZoneType(6), \"TIMESTAMP '2020-10-26 11:02:18.123123 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123400000, UTC_KEY), createTimestampWithTimeZoneType(7), \"TIMESTAMP '2020-10-26 11:02:18.1231234 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123450000, UTC_KEY), createTimestampWithTimeZoneType(8), \"TIMESTAMP '2020-10-26 11:02:18.12312345 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123456000, UTC_KEY), createTimestampWithTimeZoneType(9), \"TIMESTAMP '2020-10-26 11:02:18.123123456 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123456700, UTC_KEY), createTimestampWithTimeZoneType(10), \"TIMESTAMP '2020-10-26 11:02:18.1231234567 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123456780, UTC_KEY), createTimestampWithTimeZoneType(11), \"TIMESTAMP '2020-10-26 11:02:18.12312345678 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123456789, UTC_KEY), createTimestampWithTimeZoneType(12), \"TIMESTAMP '2020-10-26 11:02:18.123123456789 UTC'\");\n+\n+        assertEncode(packDateTimeWithZone(1603710138_000L, UTC_KEY), createTimestampWithTimeZoneType(1), \"TIMESTAMP '2020-10-26 11:02:18.0 UTC'\");\n+        assertEncode(packDateTimeWithZone(1603710138_000L, UTC_KEY), createTimestampWithTimeZoneType(2), \"TIMESTAMP '2020-10-26 11:02:18.00 UTC'\");\n+        assertEncode(packDateTimeWithZone(1603710138_000L, UTC_KEY), createTimestampWithTimeZoneType(3), \"TIMESTAMP '2020-10-26 11:02:18.000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(4), \"TIMESTAMP '2020-10-26 11:02:18.0000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(5), \"TIMESTAMP '2020-10-26 11:02:18.00000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(6), \"TIMESTAMP '2020-10-26 11:02:18.000000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(7), \"TIMESTAMP '2020-10-26 11:02:18.0000000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(8), \"TIMESTAMP '2020-10-26 11:02:18.00000000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(9), \"TIMESTAMP '2020-10-26 11:02:18.000000000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(10), \"TIMESTAMP '2020-10-26 11:02:18.0000000000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(11), \"TIMESTAMP '2020-10-26 11:02:18.00000000000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(12), \"TIMESTAMP '2020-10-26 11:02:18.000000000000 UTC'\");\n+\n+        // with zone\n+        assertEncode(packDateTimeWithZone(1603710138_000L, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(0), \"TIMESTAMP '2020-10-26 12:02:18 Europe/Warsaw'\");\n+        assertEncode(packDateTimeWithZone(1603710138_123L, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(3), \"TIMESTAMP '2020-10-26 12:02:18.123 Europe/Warsaw'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123000000, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(6), \"TIMESTAMP '2020-10-26 12:02:18.123123 Europe/Warsaw'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123456000, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(9), \"TIMESTAMP '2020-10-26 12:02:18.123123456 Europe/Warsaw'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123456789, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(12), \"TIMESTAMP '2020-10-26 12:02:18.123123456789 Europe/Warsaw'\");\n+\n+        // DST change forward\n+        assertEncode(packDateTimeWithZone(1585445478_000L, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(0), \"TIMESTAMP '2020-03-29 03:31:18 Europe/Warsaw'\");\n+        assertEncode(packDateTimeWithZone(1585445478_123L, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(3), \"TIMESTAMP '2020-03-29 03:31:18.123 Europe/Warsaw'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1585445478_123L, 123000000, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(6), \"TIMESTAMP '2020-03-29 03:31:18.123123 Europe/Warsaw'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1585445478_123L, 123456000, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(9), \"TIMESTAMP '2020-03-29 03:31:18.123123456 Europe/Warsaw'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1585445478_123L, 123456789, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(12), \"TIMESTAMP '2020-03-29 03:31:18.123123456789 Europe/Warsaw'\");\n+\n+        // DST change backward - no direct representation\n+        assertRoundTrip(packDateTimeWithZone(1603589478_000L, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(0), Long::equals);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEzNTMwMA=="}, "originalCommit": null, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM1NjU3OA==", "bodyText": "last time i checked, the spec conveniently did no go into details about political (named) zones. without them everything is simple.", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r514356578", "createdAt": "2020-10-29T15:36:08Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestLiteralEncoder.java", "diffHunk": "@@ -168,6 +173,62 @@ public void testEncodeTimestamp()\n         assertEncode(new LongTimestamp(1603710138_000000L, 0), createTimestampType(12), \"TIMESTAMP '2020-10-26 11:02:18.000000000000'\");\n     }\n \n+    @Test\n+    public void testEncodeTimestampWithTimeZone()\n+    {\n+        for (int precision = 0; precision <= 12; precision++) {\n+            assertEncode(null, createTimestampWithTimeZoneType(precision), format(\"CAST(null AS timestamp(%s) with time zone)\", precision));\n+        }\n+\n+        assertEncode(packDateTimeWithZone(1603710138_000L, UTC_KEY), createTimestampWithTimeZoneType(0), \"TIMESTAMP '2020-10-26 11:02:18 UTC'\");\n+        assertEncode(packDateTimeWithZone(1603710138_100L, UTC_KEY), createTimestampWithTimeZoneType(1), \"TIMESTAMP '2020-10-26 11:02:18.1 UTC'\");\n+        assertEncode(packDateTimeWithZone(1603710138_120L, UTC_KEY), createTimestampWithTimeZoneType(2), \"TIMESTAMP '2020-10-26 11:02:18.12 UTC'\");\n+        assertEncode(packDateTimeWithZone(1603710138_123L, UTC_KEY), createTimestampWithTimeZoneType(3), \"TIMESTAMP '2020-10-26 11:02:18.123 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 100000000, UTC_KEY), createTimestampWithTimeZoneType(4), \"TIMESTAMP '2020-10-26 11:02:18.1231 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 120000000, UTC_KEY), createTimestampWithTimeZoneType(5), \"TIMESTAMP '2020-10-26 11:02:18.12312 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123000000, UTC_KEY), createTimestampWithTimeZoneType(6), \"TIMESTAMP '2020-10-26 11:02:18.123123 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123400000, UTC_KEY), createTimestampWithTimeZoneType(7), \"TIMESTAMP '2020-10-26 11:02:18.1231234 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123450000, UTC_KEY), createTimestampWithTimeZoneType(8), \"TIMESTAMP '2020-10-26 11:02:18.12312345 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123456000, UTC_KEY), createTimestampWithTimeZoneType(9), \"TIMESTAMP '2020-10-26 11:02:18.123123456 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123456700, UTC_KEY), createTimestampWithTimeZoneType(10), \"TIMESTAMP '2020-10-26 11:02:18.1231234567 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123456780, UTC_KEY), createTimestampWithTimeZoneType(11), \"TIMESTAMP '2020-10-26 11:02:18.12312345678 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123456789, UTC_KEY), createTimestampWithTimeZoneType(12), \"TIMESTAMP '2020-10-26 11:02:18.123123456789 UTC'\");\n+\n+        assertEncode(packDateTimeWithZone(1603710138_000L, UTC_KEY), createTimestampWithTimeZoneType(1), \"TIMESTAMP '2020-10-26 11:02:18.0 UTC'\");\n+        assertEncode(packDateTimeWithZone(1603710138_000L, UTC_KEY), createTimestampWithTimeZoneType(2), \"TIMESTAMP '2020-10-26 11:02:18.00 UTC'\");\n+        assertEncode(packDateTimeWithZone(1603710138_000L, UTC_KEY), createTimestampWithTimeZoneType(3), \"TIMESTAMP '2020-10-26 11:02:18.000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(4), \"TIMESTAMP '2020-10-26 11:02:18.0000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(5), \"TIMESTAMP '2020-10-26 11:02:18.00000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(6), \"TIMESTAMP '2020-10-26 11:02:18.000000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(7), \"TIMESTAMP '2020-10-26 11:02:18.0000000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(8), \"TIMESTAMP '2020-10-26 11:02:18.00000000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(9), \"TIMESTAMP '2020-10-26 11:02:18.000000000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(10), \"TIMESTAMP '2020-10-26 11:02:18.0000000000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(11), \"TIMESTAMP '2020-10-26 11:02:18.00000000000 UTC'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_000L, 0, UTC_KEY), createTimestampWithTimeZoneType(12), \"TIMESTAMP '2020-10-26 11:02:18.000000000000 UTC'\");\n+\n+        // with zone\n+        assertEncode(packDateTimeWithZone(1603710138_000L, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(0), \"TIMESTAMP '2020-10-26 12:02:18 Europe/Warsaw'\");\n+        assertEncode(packDateTimeWithZone(1603710138_123L, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(3), \"TIMESTAMP '2020-10-26 12:02:18.123 Europe/Warsaw'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123000000, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(6), \"TIMESTAMP '2020-10-26 12:02:18.123123 Europe/Warsaw'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123456000, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(9), \"TIMESTAMP '2020-10-26 12:02:18.123123456 Europe/Warsaw'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1603710138_123L, 123456789, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(12), \"TIMESTAMP '2020-10-26 12:02:18.123123456789 Europe/Warsaw'\");\n+\n+        // DST change forward\n+        assertEncode(packDateTimeWithZone(1585445478_000L, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(0), \"TIMESTAMP '2020-03-29 03:31:18 Europe/Warsaw'\");\n+        assertEncode(packDateTimeWithZone(1585445478_123L, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(3), \"TIMESTAMP '2020-03-29 03:31:18.123 Europe/Warsaw'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1585445478_123L, 123000000, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(6), \"TIMESTAMP '2020-03-29 03:31:18.123123 Europe/Warsaw'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1585445478_123L, 123456000, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(9), \"TIMESTAMP '2020-03-29 03:31:18.123123456 Europe/Warsaw'\");\n+        assertEncode(LongTimestampWithTimeZone.fromEpochMillisAndFraction(1585445478_123L, 123456789, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(12), \"TIMESTAMP '2020-03-29 03:31:18.123123456789 Europe/Warsaw'\");\n+\n+        // DST change backward - no direct representation\n+        assertRoundTrip(packDateTimeWithZone(1603589478_000L, TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\")), createTimestampWithTimeZoneType(0), Long::equals);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEzNTMwMA=="}, "originalCommit": null, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTIxMTEyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/UnwrapCastInComparison.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyNzozNlrOHofEng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTozMTo1NVrOHoyxSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxNDE3NA==", "bodyText": "The commit message needs an explanation of why it's broken.", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r512214174", "createdAt": "2020-10-26T19:27:36Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/UnwrapCastInComparison.java", "diffHunk": "@@ -13,6 +13,7 @@\n  */\n package io.prestosql.sql.planner.iterative.rule;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUzNjkwNA==", "bodyText": "added", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r512536904", "createdAt": "2020-10-27T09:31:55Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/UnwrapCastInComparison.java", "diffHunk": "@@ -13,6 +13,7 @@\n  */\n package io.prestosql.sql.planner.iterative.rule;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxNDE3NA=="}, "originalCommit": null, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTM0MjUxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/UnwrapCastInComparison.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDowNDoxOVrOHogT_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTozMjo0MlrOHoyzAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIzNDQ5NA==", "bodyText": "What does \"instant truncation\" refer to here?", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r512234494", "createdAt": "2020-10-26T20:04:19Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/UnwrapCastInComparison.java", "diffHunk": "@@ -462,6 +506,48 @@ private int compare(Type type, Object first, Object second)\n         }\n     }\n \n+    /**\n+     * Replace time zone component of a {@link TimestampWithTimeZoneType} value with a given one.\n+     */\n+    private static Object withTimeZone(TimestampWithTimeZoneType type, Object value, TimeZoneKey newZone)\n+    {\n+        if (type.isShort()) {\n+            return packDateTimeWithZone(unpackMillisUtc((long) value), newZone);\n+        }\n+        LongTimestampWithTimeZone longTimestampWithTimeZone = (LongTimestampWithTimeZone) value;\n+        return LongTimestampWithTimeZone.fromEpochMillisAndFraction(longTimestampWithTimeZone.getEpochMillis(), longTimestampWithTimeZone.getPicosOfMilli(), newZone);\n+    }\n+\n+    private static TimeZoneKey getTimeZone(TimestampWithTimeZoneType type, Object value)\n+    {\n+        if (type.isShort()) {\n+            return unpackZoneKey(((long) value));\n+        }\n+        return TimeZoneKey.getTimeZoneKey(((LongTimestampWithTimeZone) value).getTimeZoneKey());\n+    }\n+\n+    @VisibleForTesting\n+    static boolean isTimestampToTimestampWithTimeZoneInjectiveAt(ZoneId zone, Instant instant)\n+    {\n+        ZoneOffsetTransition transition = zone.getRules().previousTransition(instant);\n+        if (transition != null && !transition.getDuration().isNegative() &&\n+                transition.getDateTimeAfter().minusNanos(1).atZone(zone).toInstant().isAfter(instant)) {\n+            // DST change forward and the instant is ambiguous, being within the 'gap' area non-monotoic remapping\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    private static Instant getInstantTruncation(TimestampWithTimeZoneType type, Object value)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUzNzM0Nw==", "bodyText": "sorry, this is a typo. Changed to getInstantWithTruncation\n(the point is -- there is no rounding involved when going from picos to nanos)", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r512537347", "createdAt": "2020-10-27T09:32:42Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/UnwrapCastInComparison.java", "diffHunk": "@@ -462,6 +506,48 @@ private int compare(Type type, Object first, Object second)\n         }\n     }\n \n+    /**\n+     * Replace time zone component of a {@link TimestampWithTimeZoneType} value with a given one.\n+     */\n+    private static Object withTimeZone(TimestampWithTimeZoneType type, Object value, TimeZoneKey newZone)\n+    {\n+        if (type.isShort()) {\n+            return packDateTimeWithZone(unpackMillisUtc((long) value), newZone);\n+        }\n+        LongTimestampWithTimeZone longTimestampWithTimeZone = (LongTimestampWithTimeZone) value;\n+        return LongTimestampWithTimeZone.fromEpochMillisAndFraction(longTimestampWithTimeZone.getEpochMillis(), longTimestampWithTimeZone.getPicosOfMilli(), newZone);\n+    }\n+\n+    private static TimeZoneKey getTimeZone(TimestampWithTimeZoneType type, Object value)\n+    {\n+        if (type.isShort()) {\n+            return unpackZoneKey(((long) value));\n+        }\n+        return TimeZoneKey.getTimeZoneKey(((LongTimestampWithTimeZone) value).getTimeZoneKey());\n+    }\n+\n+    @VisibleForTesting\n+    static boolean isTimestampToTimestampWithTimeZoneInjectiveAt(ZoneId zone, Instant instant)\n+    {\n+        ZoneOffsetTransition transition = zone.getRules().previousTransition(instant);\n+        if (transition != null && !transition.getDuration().isNegative() &&\n+                transition.getDateTimeAfter().minusNanos(1).atZone(zone).toInstant().isAfter(instant)) {\n+            // DST change forward and the instant is ambiguous, being within the 'gap' area non-monotoic remapping\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    private static Instant getInstantTruncation(TimestampWithTimeZoneType type, Object value)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIzNDQ5NA=="}, "originalCommit": null, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTM0NDU0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/UnwrapCastInComparison.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDowNDo1MVrOHogVOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDowNDo1MVrOHogVOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIzNDgwOA==", "bodyText": "return ...", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r512234808", "createdAt": "2020-10-26T20:04:51Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/UnwrapCastInComparison.java", "diffHunk": "@@ -462,6 +506,48 @@ private int compare(Type type, Object first, Object second)\n         }\n     }\n \n+    /**\n+     * Replace time zone component of a {@link TimestampWithTimeZoneType} value with a given one.\n+     */\n+    private static Object withTimeZone(TimestampWithTimeZoneType type, Object value, TimeZoneKey newZone)\n+    {\n+        if (type.isShort()) {\n+            return packDateTimeWithZone(unpackMillisUtc((long) value), newZone);\n+        }\n+        LongTimestampWithTimeZone longTimestampWithTimeZone = (LongTimestampWithTimeZone) value;\n+        return LongTimestampWithTimeZone.fromEpochMillisAndFraction(longTimestampWithTimeZone.getEpochMillis(), longTimestampWithTimeZone.getPicosOfMilli(), newZone);\n+    }\n+\n+    private static TimeZoneKey getTimeZone(TimestampWithTimeZoneType type, Object value)\n+    {\n+        if (type.isShort()) {\n+            return unpackZoneKey(((long) value));\n+        }\n+        return TimeZoneKey.getTimeZoneKey(((LongTimestampWithTimeZone) value).getTimeZoneKey());\n+    }\n+\n+    @VisibleForTesting\n+    static boolean isTimestampToTimestampWithTimeZoneInjectiveAt(ZoneId zone, Instant instant)\n+    {\n+        ZoneOffsetTransition transition = zone.getRules().previousTransition(instant);\n+        if (transition != null && !transition.getDuration().isNegative() &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODc0MjQ5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestUnwrapCastInComparison.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODo0MToxMVrOHrbzXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNjoxNDozMVrOHsLTLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMwNjMzMg==", "bodyText": "I don't think this abstraction buys us much. I would just inline this in the few places where it's used.", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r515306332", "createdAt": "2020-10-30T18:41:11Z", "author": {"login": "martint"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestUnwrapCastInComparison.java", "diffHunk": "@@ -977,4 +1053,29 @@ public void testNoEffect()\n                         filter(\"CAST(A AS INTEGER) = 1\",\n                                 values(\"A\"))));\n     }\n+\n+    private void testNoUnwrap(Session session, String inputType, String inputPredicate, String expectedCastType)\n+    {\n+        assertPlan(format(\"SELECT * FROM (VALUES CAST(NULL AS %s)) t(a) WHERE a %s\", inputType, inputPredicate),\n+                session,\n+                anyTree(\n+                        filter(format(\"CAST(A AS %s) %s\", expectedCastType, inputPredicate),\n+                                values(\"A\"))));\n+    }\n+\n+    private void testUnwrap(Session session, String inputType, String inputPredicate, String expectedPredicate)\n+    {\n+        assertPlan(format(\"SELECT * FROM (VALUES CAST(NULL AS %s)) t(a) WHERE a %s\", inputType, inputPredicate),\n+                session,\n+                anyTree(\n+                        filter(\"A \" + expectedPredicate,\n+                                values(\"A\"))));\n+    }\n+\n+    private static Session withZone(Session session, TimeZoneKey timeZoneKey)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA4NDUyNA==", "bodyText": "It's used in three places, so i don't think strongly about it, but i think it increases readability of the test code.", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r516084524", "createdAt": "2020-11-02T16:14:31Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestUnwrapCastInComparison.java", "diffHunk": "@@ -977,4 +1053,29 @@ public void testNoEffect()\n                         filter(\"CAST(A AS INTEGER) = 1\",\n                                 values(\"A\"))));\n     }\n+\n+    private void testNoUnwrap(Session session, String inputType, String inputPredicate, String expectedCastType)\n+    {\n+        assertPlan(format(\"SELECT * FROM (VALUES CAST(NULL AS %s)) t(a) WHERE a %s\", inputType, inputPredicate),\n+                session,\n+                anyTree(\n+                        filter(format(\"CAST(A AS %s) %s\", expectedCastType, inputPredicate),\n+                                values(\"A\"))));\n+    }\n+\n+    private void testUnwrap(Session session, String inputType, String inputPredicate, String expectedPredicate)\n+    {\n+        assertPlan(format(\"SELECT * FROM (VALUES CAST(NULL AS %s)) t(a) WHERE a %s\", inputType, inputPredicate),\n+                session,\n+                anyTree(\n+                        filter(\"A \" + expectedPredicate,\n+                                values(\"A\"))));\n+    }\n+\n+    private static Session withZone(Session session, TimeZoneKey timeZoneKey)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMwNjMzMg=="}, "originalCommit": null, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODc1NzI5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestUnwrapCastInComparison.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODo0NjowNlrOHrb8rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzo1NDowNlrOHs6NyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMwODcxNg==", "bodyText": "Maybe it's just me, but I find this less readable than having the explicit query in each of the cases, as in the other tests in this class. I keep having to reverse engineer what each of inputType, inputPredicate and expectedCastType mean in the context of a query that would benefit from this optimization. Yes, there is some repetition, but the test cases are self-evident, easier to understand at first glance, and easier to copy/paste when testing with a live server.", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r515308716", "createdAt": "2020-10-30T18:46:06Z", "author": {"login": "martint"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestUnwrapCastInComparison.java", "diffHunk": "@@ -977,4 +1053,29 @@ public void testNoEffect()\n                         filter(\"CAST(A AS INTEGER) = 1\",\n                                 values(\"A\"))));\n     }\n+\n+    private void testNoUnwrap(Session session, String inputType, String inputPredicate, String expectedCastType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA4NzY3OQ==", "bodyText": "I started with explicit tests, following other code in this class. Change the approach because:\n\nhaving 5 lines for each test case felt overly verbose in a test method when i plan to cover many individual test cases (eg timestamps case)\n\nwith that many cases it's important to be able to compare between them to see what's tested, what's not, so verbosity matters here\n\n\nafter extracting the method the test code provides what is important -- the symbol type, the constant compared against and the expected state -- without providing irrelevant pieces like VALUES\n\none day we will add constant folding for Filter on top of VALUES ...\nor we will just add additional  assertion where the VALUES are replaced with a temporary test table in eg memory connector\n\n\n\n\nbut the test cases are self-evident, easier to understand at first glance, and easier to copy/paste when testing with a live server.\n\ni agree with this", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r516087679", "createdAt": "2020-11-02T16:19:11Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestUnwrapCastInComparison.java", "diffHunk": "@@ -977,4 +1053,29 @@ public void testNoEffect()\n                         filter(\"CAST(A AS INTEGER) = 1\",\n                                 values(\"A\"))));\n     }\n+\n+    private void testNoUnwrap(Session session, String inputType, String inputPredicate, String expectedCastType)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMwODcxNg=="}, "originalCommit": null, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg1MzE5Mg==", "bodyText": "one day we will add constant folding for Filter on top of VALUES ...\nor we will just add additional assertion where the VALUES are replaced with a temporary test table in eg memory connector\n\n... and we'll adjust the code to match, then. But ok, leave it.", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r516853192", "createdAt": "2020-11-03T17:54:06Z", "author": {"login": "martint"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestUnwrapCastInComparison.java", "diffHunk": "@@ -977,4 +1053,29 @@ public void testNoEffect()\n                         filter(\"CAST(A AS INTEGER) = 1\",\n                                 values(\"A\"))));\n     }\n+\n+    private void testNoUnwrap(Session session, String inputType, String inputPredicate, String expectedCastType)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMwODcxNg=="}, "originalCommit": null, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODc2ODQ4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/UnwrapCastInComparison.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODo0OTo0NlrOHrcDoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNjowNzozMVrOHsK_iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMxMDQ5Ng==", "bodyText": "Is this still pending?", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r515310496", "createdAt": "2020-10-30T18:49:46Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/UnwrapCastInComparison.java", "diffHunk": "@@ -433,6 +452,31 @@ private boolean hasInjectiveImplicitCoercion(Type source, Type target, Object va\n                 }\n             }\n \n+            if (target instanceof TimestampWithTimeZoneType) {\n+                TimestampWithTimeZoneType timestampWithTimeZoneType = (TimestampWithTimeZoneType) target;\n+                if (source instanceof TimestampType) {\n+                    // Cast from TIMESTAMP WITH TIME ZONE to TIMESTAMP and back to TIMESTAMP WITH TIME ZONE does not round trip, unless the value's zone is equal to sesion zone\n+                    if (!getTimeZone(timestampWithTimeZoneType, value).equals(session.getTimeZoneKey())) {\n+                        return false;\n+                    }\n+\n+                    // Cast from TIMESTAMP to TIMESTAMP WITH TIME ZONE is not monotonic when there is a forward DST change in the session zone\n+                    if (!isTimestampToTimestampWithTimeZoneInjectiveAt(session.getTimeZoneKey().getZoneId(), getInstantWithTruncation(timestampWithTimeZoneType, value))) {\n+                        return false;\n+                    }\n+\n+                    return true;\n+                }\n+                // CAST from TIMESTAMP WITH TIME ZONE to d and back to TIMESTAMP WITH TIME ZONE does not round trip for most types d\n+                // TODO add test coverage", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA3OTQ5Nw==", "bodyText": "Yes, this is about other types than TIMESTAMP -> TIMESTAMP WITH TIME ZONE.\nI conveniently block them, which is correct, but not ambitious.  Hence the TODO", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r516079497", "createdAt": "2020-11-02T16:07:31Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/UnwrapCastInComparison.java", "diffHunk": "@@ -433,6 +452,31 @@ private boolean hasInjectiveImplicitCoercion(Type source, Type target, Object va\n                 }\n             }\n \n+            if (target instanceof TimestampWithTimeZoneType) {\n+                TimestampWithTimeZoneType timestampWithTimeZoneType = (TimestampWithTimeZoneType) target;\n+                if (source instanceof TimestampType) {\n+                    // Cast from TIMESTAMP WITH TIME ZONE to TIMESTAMP and back to TIMESTAMP WITH TIME ZONE does not round trip, unless the value's zone is equal to sesion zone\n+                    if (!getTimeZone(timestampWithTimeZoneType, value).equals(session.getTimeZoneKey())) {\n+                        return false;\n+                    }\n+\n+                    // Cast from TIMESTAMP to TIMESTAMP WITH TIME ZONE is not monotonic when there is a forward DST change in the session zone\n+                    if (!isTimestampToTimestampWithTimeZoneInjectiveAt(session.getTimeZoneKey().getZoneId(), getInstantWithTruncation(timestampWithTimeZoneType, value))) {\n+                        return false;\n+                    }\n+\n+                    return true;\n+                }\n+                // CAST from TIMESTAMP WITH TIME ZONE to d and back to TIMESTAMP WITH TIME ZONE does not round trip for most types d\n+                // TODO add test coverage", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMxMDQ5Ng=="}, "originalCommit": null, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODgxNDc4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/UnwrapCastInComparison.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOTowNToyNlrOHrcgzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTowODo0MlrOHs8wRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMxNzk2Nw==", "bodyText": "This is being used in the call to isTimestampToTimestampWithTimeZoneInjectiveAt. What is the implication of truncation in determining if there is a transition if the instant is at the edge? What if the actual value is right outside of the transition by a few picoseconds? What does previousTransition return if the instant in nanoseconds is exactly at upper edge of a transition?", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r515317967", "createdAt": "2020-10-30T19:05:26Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/UnwrapCastInComparison.java", "diffHunk": "@@ -462,6 +506,48 @@ private int compare(Type type, Object first, Object second)\n         }\n     }\n \n+    /**\n+     * Replace time zone component of a {@link TimestampWithTimeZoneType} value with a given one, preserving point in time\n+     * (equivalent to {@link java.time.ZonedDateTime#withZoneSameInstant}.\n+     */\n+    private static Object withTimeZone(TimestampWithTimeZoneType type, Object value, TimeZoneKey newZone)\n+    {\n+        if (type.isShort()) {\n+            return packDateTimeWithZone(unpackMillisUtc((long) value), newZone);\n+        }\n+        LongTimestampWithTimeZone longTimestampWithTimeZone = (LongTimestampWithTimeZone) value;\n+        return LongTimestampWithTimeZone.fromEpochMillisAndFraction(longTimestampWithTimeZone.getEpochMillis(), longTimestampWithTimeZone.getPicosOfMilli(), newZone);\n+    }\n+\n+    private static TimeZoneKey getTimeZone(TimestampWithTimeZoneType type, Object value)\n+    {\n+        if (type.isShort()) {\n+            return unpackZoneKey(((long) value));\n+        }\n+        return TimeZoneKey.getTimeZoneKey(((LongTimestampWithTimeZone) value).getTimeZoneKey());\n+    }\n+\n+    @VisibleForTesting\n+    static boolean isTimestampToTimestampWithTimeZoneInjectiveAt(ZoneId zone, Instant instant)\n+    {\n+        ZoneOffsetTransition transition = zone.getRules().previousTransition(instant);\n+        if (transition == null) {\n+            return true;\n+        }\n+        // DST change forward and the instant is ambiguous, being within the 'gap' area non-monotonic remapping\n+        return transition.getDuration().isNegative() || !transition.getDateTimeAfter().minusNanos(1).atZone(zone).toInstant().isAfter(instant);\n+    }\n+\n+    private static Instant getInstantWithTruncation(TimestampWithTimeZoneType type, Object value)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg4NDEwNw==", "bodyText": "Truncation is correct, because transitions are defined with nanosecond precision (in fact, most likely with second precision only). This is why i truncate here -- all i want is not to round up to the next nanosecond, with could move me out of the ambiguity area.", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r516884107", "createdAt": "2020-11-03T18:49:27Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/UnwrapCastInComparison.java", "diffHunk": "@@ -462,6 +506,48 @@ private int compare(Type type, Object first, Object second)\n         }\n     }\n \n+    /**\n+     * Replace time zone component of a {@link TimestampWithTimeZoneType} value with a given one, preserving point in time\n+     * (equivalent to {@link java.time.ZonedDateTime#withZoneSameInstant}.\n+     */\n+    private static Object withTimeZone(TimestampWithTimeZoneType type, Object value, TimeZoneKey newZone)\n+    {\n+        if (type.isShort()) {\n+            return packDateTimeWithZone(unpackMillisUtc((long) value), newZone);\n+        }\n+        LongTimestampWithTimeZone longTimestampWithTimeZone = (LongTimestampWithTimeZone) value;\n+        return LongTimestampWithTimeZone.fromEpochMillisAndFraction(longTimestampWithTimeZone.getEpochMillis(), longTimestampWithTimeZone.getPicosOfMilli(), newZone);\n+    }\n+\n+    private static TimeZoneKey getTimeZone(TimestampWithTimeZoneType type, Object value)\n+    {\n+        if (type.isShort()) {\n+            return unpackZoneKey(((long) value));\n+        }\n+        return TimeZoneKey.getTimeZoneKey(((LongTimestampWithTimeZone) value).getTimeZoneKey());\n+    }\n+\n+    @VisibleForTesting\n+    static boolean isTimestampToTimestampWithTimeZoneInjectiveAt(ZoneId zone, Instant instant)\n+    {\n+        ZoneOffsetTransition transition = zone.getRules().previousTransition(instant);\n+        if (transition == null) {\n+            return true;\n+        }\n+        // DST change forward and the instant is ambiguous, being within the 'gap' area non-monotonic remapping\n+        return transition.getDuration().isNegative() || !transition.getDateTimeAfter().minusNanos(1).atZone(zone).toInstant().isAfter(instant);\n+    }\n+\n+    private static Instant getInstantWithTruncation(TimestampWithTimeZoneType type, Object value)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMxNzk2Nw=="}, "originalCommit": null, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5NDc4OQ==", "bodyText": "See also \"last within\" test cases.", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r516894789", "createdAt": "2020-11-03T19:08:42Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/UnwrapCastInComparison.java", "diffHunk": "@@ -462,6 +506,48 @@ private int compare(Type type, Object first, Object second)\n         }\n     }\n \n+    /**\n+     * Replace time zone component of a {@link TimestampWithTimeZoneType} value with a given one, preserving point in time\n+     * (equivalent to {@link java.time.ZonedDateTime#withZoneSameInstant}.\n+     */\n+    private static Object withTimeZone(TimestampWithTimeZoneType type, Object value, TimeZoneKey newZone)\n+    {\n+        if (type.isShort()) {\n+            return packDateTimeWithZone(unpackMillisUtc((long) value), newZone);\n+        }\n+        LongTimestampWithTimeZone longTimestampWithTimeZone = (LongTimestampWithTimeZone) value;\n+        return LongTimestampWithTimeZone.fromEpochMillisAndFraction(longTimestampWithTimeZone.getEpochMillis(), longTimestampWithTimeZone.getPicosOfMilli(), newZone);\n+    }\n+\n+    private static TimeZoneKey getTimeZone(TimestampWithTimeZoneType type, Object value)\n+    {\n+        if (type.isShort()) {\n+            return unpackZoneKey(((long) value));\n+        }\n+        return TimeZoneKey.getTimeZoneKey(((LongTimestampWithTimeZone) value).getTimeZoneKey());\n+    }\n+\n+    @VisibleForTesting\n+    static boolean isTimestampToTimestampWithTimeZoneInjectiveAt(ZoneId zone, Instant instant)\n+    {\n+        ZoneOffsetTransition transition = zone.getRules().previousTransition(instant);\n+        if (transition == null) {\n+            return true;\n+        }\n+        // DST change forward and the instant is ambiguous, being within the 'gap' area non-monotonic remapping\n+        return transition.getDuration().isNegative() || !transition.getDateTimeAfter().minusNanos(1).atZone(zone).toInstant().isAfter(instant);\n+    }\n+\n+    private static Instant getInstantWithTruncation(TimestampWithTimeZoneType type, Object value)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMxNzk2Nw=="}, "originalCommit": null, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODUyNDUyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/UnwrapCastInComparison.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNTowODozMVrOHszKlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNTowODozMVrOHszKlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjczNzY4NA==", "bodyText": "#5798", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r516737684", "createdAt": "2020-11-03T15:08:31Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/UnwrapCastInComparison.java", "diffHunk": "@@ -433,6 +452,34 @@ private boolean hasInjectiveImplicitCoercion(Type source, Type target, Object va\n                 }\n             }\n \n+            if (target instanceof TimestampWithTimeZoneType) {\n+                TimestampWithTimeZoneType timestampWithTimeZoneType = (TimestampWithTimeZoneType) target;\n+                if (source instanceof TimestampType) {\n+                    // Cast from TIMESTAMP WITH TIME ZONE to TIMESTAMP and back to TIMESTAMP WITH TIME ZONE does not round trip, unless the value's zone is equal to sesion zone\n+                    if (!getTimeZone(timestampWithTimeZoneType, value).equals(session.getTimeZoneKey())) {\n+                        return false;\n+                    }\n+\n+                    // Cast from TIMESTAMP to TIMESTAMP WITH TIME ZONE is not monotonic when there is a forward DST change in the session zone\n+                    if (!isTimestampToTimestampWithTimeZoneInjectiveAt(session.getTimeZoneKey().getZoneId(), getInstantWithTruncation(timestampWithTimeZoneType, value))) {\n+                        return false;\n+                    }\n+\n+                    return true;\n+                }\n+                // CAST from TIMESTAMP WITH TIME ZONE to d and back to TIMESTAMP WITH TIME ZONE does not round trip for most types d\n+                // TODO add test coverage\n+                // TODO (https://github.com/prestosql/presto/issues/5798) handle DATE -> TIMESTAMP WITH TIME ZONE", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTAyMzEwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/timestamptz/TestTimestampWithTimeZone.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNjo1ODoxOFrOHs4FFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOToxMTo0OVrOHs83hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgxODE5OA==", "bodyText": "Mention in the commit message that these were in a separate class to be able to test legacy timestamp semantics", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r516818198", "createdAt": "2020-11-03T16:58:18Z", "author": {"login": "martint"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/timestamptz/TestTimestampWithTimeZone.java", "diffHunk": "@@ -1310,6 +1310,298 @@ public void testCastToTimeWithTimeZone()\n         assertThat(assertions.expression(\"CAST(TIMESTAMP '2020-03-08 01:23:45.123456789123 -00:35' AS TIME(12) WITH TIME ZONE)\")).matches(\"TIME '01:23:45.123456789123-00:35'\");\n     }\n \n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5NjY0NA==", "bodyText": "Added", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r516896644", "createdAt": "2020-11-03T19:11:49Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/timestamptz/TestTimestampWithTimeZone.java", "diffHunk": "@@ -1310,6 +1310,298 @@ public void testCastToTimeWithTimeZone()\n         assertThat(assertions.expression(\"CAST(TIMESTAMP '2020-03-08 01:23:45.123456789123 -00:35' AS TIME(12) WITH TIME ZONE)\")).matches(\"TIME '01:23:45.123456789123-00:35'\");\n     }\n \n+    @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgxODE5OA=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTAzMzY4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/timestamp/TestTimestamp.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzowMDo1MlrOHs4L5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOToxMTo1N1rOHs83yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgxOTk0Mg==", "bodyText": "These should already be covered in testRoundDown and testRoundUp", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r516819942", "createdAt": "2020-11-03T17:00:52Z", "author": {"login": "martint"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/timestamp/TestTimestamp.java", "diffHunk": "@@ -1165,6 +1165,298 @@ public void testCastToTimeWithTimeZone()\n         assertThat(assertions.expression(\"CAST(TIMESTAMP '2020-05-01 23:59:59.999999999999' AS TIME(11) WITH TIME ZONE)\", session)).matches(\"TIME '00:00:00.00000000000+08:35'\");\n     }\n \n+    @Test\n+    public void testCastToTimestamp()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5NjcxMw==", "bodyText": "Commit dropped.", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r516896713", "createdAt": "2020-11-03T19:11:57Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/timestamp/TestTimestamp.java", "diffHunk": "@@ -1165,6 +1165,298 @@ public void testCastToTimeWithTimeZone()\n         assertThat(assertions.expression(\"CAST(TIMESTAMP '2020-05-01 23:59:59.999999999999' AS TIME(11) WITH TIME ZONE)\", session)).matches(\"TIME '00:00:00.00000000000+08:35'\");\n     }\n \n+    @Test\n+    public void testCastToTimestamp()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgxOTk0Mg=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTE2NjM1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/timestamp/TestTimestamp.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzozMzo1NlrOHs5ePQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOToxMjoyMlrOHs84tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg0MTAyMQ==", "bodyText": "Unrelated to this commit.", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r516841021", "createdAt": "2020-11-03T17:33:56Z", "author": {"login": "martint"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/timestamp/TestTimestamp.java", "diffHunk": "@@ -1183,6 +1183,19 @@ public void testCastToTimestamp()\n         assertThat(assertions.expression(\"CAST(TIMESTAMP '2020-05-01 12:34:56.12345678912' AS TIMESTAMP(11))\")).matches(\"TIMESTAMP '2020-05-01 12:34:56.12345678912'\");\n         assertThat(assertions.expression(\"CAST(TIMESTAMP '2020-05-01 12:34:56.123456789123' AS TIMESTAMP(12))\")).matches(\"TIMESTAMP '2020-05-01 12:34:56.123456789123'\");\n \n+        assertThat(assertions.expression(\"CAST(TIMESTAMP '2020-05-01 12:34:56.9' AS TIMESTAMP(1))\")).matches(\"TIMESTAMP '2020-05-01 12:34:56.9'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5Njk1MQ==", "bodyText": "Dropped", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r516896951", "createdAt": "2020-11-03T19:12:22Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/timestamp/TestTimestamp.java", "diffHunk": "@@ -1183,6 +1183,19 @@ public void testCastToTimestamp()\n         assertThat(assertions.expression(\"CAST(TIMESTAMP '2020-05-01 12:34:56.12345678912' AS TIMESTAMP(11))\")).matches(\"TIMESTAMP '2020-05-01 12:34:56.12345678912'\");\n         assertThat(assertions.expression(\"CAST(TIMESTAMP '2020-05-01 12:34:56.123456789123' AS TIMESTAMP(12))\")).matches(\"TIMESTAMP '2020-05-01 12:34:56.123456789123'\");\n \n+        assertThat(assertions.expression(\"CAST(TIMESTAMP '2020-05-01 12:34:56.9' AS TIMESTAMP(1))\")).matches(\"TIMESTAMP '2020-05-01 12:34:56.9'\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg0MTAyMQ=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTI2NzYwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/LiteralEncoder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODowMDoyM1rOHs6dGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOToxMzo0MFrOHs87OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg1NzExNA==", "bodyText": "Link to #5781", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r516857114", "createdAt": "2020-11-03T18:00:23Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LiteralEncoder.java", "diffHunk": "@@ -226,6 +230,25 @@ public Expression toExpression(Object object, Type type)\n             return new TimestampLiteral(representation);\n         }\n \n+        if (type instanceof TimestampWithTimeZoneType) {\n+            TimestampWithTimeZoneType timestampWithTimeZoneType = (TimestampWithTimeZoneType) type;\n+            String representation;\n+            if (timestampWithTimeZoneType.isShort()) {\n+                representation = TimestampWithTimeZoneToVarcharCast.cast(timestampWithTimeZoneType.getPrecision(), (long) object).toStringUtf8();\n+            }\n+            else {\n+                representation = TimestampWithTimeZoneToVarcharCast.cast(timestampWithTimeZoneType.getPrecision(), (LongTimestampWithTimeZone) object).toStringUtf8();\n+            }\n+            if (!object.equals(parseTimestampWithTimeZone(timestampWithTimeZoneType.getPrecision(), representation))) {\n+                // Certain (point in time, time zone) pairs cannot be represented as a TIMESTAMP literal, as the literal uses local date/time in given time zone.\n+                // Thus, during DST backwards change by e.g. 1 hour, the local time is \"repeated\" twice and thus one local date/time logically corresponds to two\n+                // points in time, leaving one of them non-referencable.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5NzU5Mw==", "bodyText": "right, link added", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r516897593", "createdAt": "2020-11-03T19:13:40Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LiteralEncoder.java", "diffHunk": "@@ -226,6 +230,25 @@ public Expression toExpression(Object object, Type type)\n             return new TimestampLiteral(representation);\n         }\n \n+        if (type instanceof TimestampWithTimeZoneType) {\n+            TimestampWithTimeZoneType timestampWithTimeZoneType = (TimestampWithTimeZoneType) type;\n+            String representation;\n+            if (timestampWithTimeZoneType.isShort()) {\n+                representation = TimestampWithTimeZoneToVarcharCast.cast(timestampWithTimeZoneType.getPrecision(), (long) object).toStringUtf8();\n+            }\n+            else {\n+                representation = TimestampWithTimeZoneToVarcharCast.cast(timestampWithTimeZoneType.getPrecision(), (LongTimestampWithTimeZone) object).toStringUtf8();\n+            }\n+            if (!object.equals(parseTimestampWithTimeZone(timestampWithTimeZoneType.getPrecision(), representation))) {\n+                // Certain (point in time, time zone) pairs cannot be represented as a TIMESTAMP literal, as the literal uses local date/time in given time zone.\n+                // Thus, during DST backwards change by e.g. 1 hour, the local time is \"repeated\" twice and thus one local date/time logically corresponds to two\n+                // points in time, leaving one of them non-referencable.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg1NzExNA=="}, "originalCommit": null, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTI3NDI3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/sql/query/TestUnwrapCastInComparison.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODowMjoxN1rOHs6hTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOToxNDozOFrOHs89ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg1ODE4OQ==", "bodyText": "Why not build a session with that time zone instead? Then, the test won't depend on external factors and will be self-contained.", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r516858189", "createdAt": "2020-11-03T18:02:17Z", "author": {"login": "martint"}, "path": "presto-main/src/test/java/io/prestosql/sql/query/TestUnwrapCastInComparison.java", "diffHunk": "@@ -214,6 +218,107 @@ public void testVarchar()\n         }\n     }\n \n+    @Test\n+    public void testCastTimestampToTimestampWithTimeZone()\n+    {\n+        ZoneId sessionZone = assertions.getDefaultSession().getTimeZoneKey().getZoneId();\n+        verify(sessionZone.getId().equals(\"Pacific/Apia\"), \"The values in this test assume Pacific/Apia is the session zone\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5ODE0OQ==", "bodyText": "I didn't want to overload validate, but OK, will do.", "url": "https://github.com/trinodb/trino/pull/5692#discussion_r516898149", "createdAt": "2020-11-03T19:14:38Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/sql/query/TestUnwrapCastInComparison.java", "diffHunk": "@@ -214,6 +218,107 @@ public void testVarchar()\n         }\n     }\n \n+    @Test\n+    public void testCastTimestampToTimestampWithTimeZone()\n+    {\n+        ZoneId sessionZone = assertions.getDefaultSession().getTimeZoneKey().getZoneId();\n+        verify(sessionZone.getId().equals(\"Pacific/Apia\"), \"The values in this test assume Pacific/Apia is the session zone\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg1ODE4OQ=="}, "originalCommit": null, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4528, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}