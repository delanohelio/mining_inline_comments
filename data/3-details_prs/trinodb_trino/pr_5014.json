{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1NjI4NjMy", "number": 5014, "title": "Update Oracle connector documentation", "bodyText": "Update Oracle connector documentation", "createdAt": "2020-08-28T20:31:54Z", "url": "https://github.com/trinodb/trino/pull/5014", "merged": true, "mergeCommit": {"oid": "9f0202a3252b16d35eb782e1787e54dc28f1a932"}, "closed": true, "closedAt": "2020-10-01T18:23:49Z", "author": {"login": "rosewms"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdDq2OdgFqTQ3ODEzMzI4Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOn4e5AFqTUwMTI0NDQzNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MTMzMjg3", "url": "https://github.com/trinodb/trino/pull/5014#pullrequestreview-478133287", "createdAt": "2020-08-29T14:54:15Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxNDo1NDoxNVrOHJb81A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxNDo1NDoxNVrOHJb81A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1NzE3Mg==", "bodyText": "12c is not the only version, 11g works, maybe others too", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r479657172", "createdAt": "2020-08-29T14:54:15Z", "author": {"login": "tooptoop4"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -23,47 +22,363 @@ connection properties as appropriate for your setup:\n     connection-user=root\n     connection-password=secret\n \n-Multiple Oracle Servers\n+Include catalog files on all of your nodes, this requires you to restart.\n+\n+By default, the Oracle connector uses connection pooling for performance\n+improvement.\n+\n+The below configuration shows the typical default values. To update them, change\n+the properties in the catalog configuration file:\n+\n+.. code-block:: properties\n+\n+    oracle.connection-pool.max-size=30\n+    oracle.connection-pool.min-size=1\n+    oracle.connection-pool.inactive-timeout=20m\n+\n+To disable connection pooling, update properties to include:\n+\n+.. code-block:: none\n+\n+    oracle.connection-pool.enabled=false\n+\n+Multiple Oracle servers\n ^^^^^^^^^^^^^^^^^^^^^^^\n \n-You can have as many catalogs as you need, so if you have additional\n-Oracle servers, simply add another properties file to ``etc/catalog``\n-with a different name (making sure it ends in ``.properties``). For\n-example, if you name the property file ``sales.properties``, Presto\n-will create a catalog named ``sales`` using the configured connector.\n+If you want to connect to multiple Oracle servers, configure another instance of\n+the Oracle plugin as a separate catalog.\n+\n+To add another Oracle catalog, create a new properties file. For example, if\n+you name the property file ``sales.properties``, Presto creates a catalog named\n+sales.\n \n Querying Oracle\n ---------------\n \n-The Oracle connector provides a schema for every Oracle *database*.\n-You can see the available Oracle databases by running ``SHOW SCHEMAS``::\n+The Oracle connector provides a schema for every Oracle server. Use the below\n+queries to test your setup.\n+\n+If you used a different name for your catalog properties file, use that catalog\n+name instead of ``oracle``.\n+\n+.. note::\n+    The user configuration, in the connection properties file, determines your\n+    privileges in these schemas. If the user doesn't have access to these\n+    tables, you can't access them either.\n+\n+\n+Run ``SHOW SCHEMAS`` to see the available Oracle databases::\n \n     SHOW SCHEMAS FROM oracle;\n \n-If you have a Oracle database named ``web``, you can view the tables\n-in this database by running ``SHOW TABLES``::\n+If you have an Oracle database named ``web``, run ``SHOW TABLES`` to see the\n+tables it owns::\n \n     SHOW TABLES FROM oracle.web;\n \n-You can see a list of the columns in the ``clicks`` table in the ``web`` database\n-using either of the following::\n+To see a list of the columns in the ``clicks`` table in the ``web``\n+database run either of the following::\n \n     DESCRIBE oracle.web.clicks;\n     SHOW COLUMNS FROM oracle.web.clicks;\n \n-Finally, you can access the ``clicks`` table in the ``web`` database::\n+To access the ``clicks`` table in the ``web`` database run::\n \n     SELECT * FROM oracle.web.clicks;\n \n-If you used a different name for your catalog properties file, use\n-that catalog name instead of ``oracle`` in the above examples.\n+Mapping data types between Presto and Oracle\n+--------------------------------------------\n+\n+Oracle and Presto support types that the other doesn't, the following tables\n+show their type mapping:\n+\n+.. list-table:: Type mapping properties\n+  :widths: 20, 20, 50, 10\n+  :header-rows: 1\n+\n+  * - Configuration property name\n+    - Session property name\n+    - Description\n+    - Default\n+  * - ``unsupported-type.handling-strategy``\n+    - ``unsupported_type_handling_strategy``\n+    - Configures how unsupported column data types are handled:\n+\n+      - ``IGNORE`` - column is not accessible.\n+      - ``CONVERT_TO_VARCHAR`` - column is converted to unbounded ``VARCHAR``.\n+\n+    - ``IGNORE``\n+  * - ``oracle.number.default-scale``\n+    - ``number_default_scale``               \n+    - Default Presto ``DECIMAL`` scale for Oracle ``NUMBER`` (without precision \n+      and scale) date type. When not set then such column is treated as not \n+      supported.\n+    - not set\n+  * - ``oracle.number.rounding-mode``\n+    - ``number_rounding_mode``               \n+    - Rounding mode for the Oracle ``NUMBER`` data type. This is useful when \n+      Oracle ``NUMBER`` data type specifies higher scale than is supported in \n+      Presto. Possible values are:\n+\n+      - ``UNNECESSARY`` - Rounding mode to assert that the \n+        requested operation has an exact result, \n+        hence no rounding is necessary.\n+      - ``CEILING`` - Rounding mode to round towards\n+        positive infinity.\n+      - ``FLOOR`` - Rounding mode to round towards negative\n+        infinity.\n+      - ``HALF_DOWN`` - Rounding mode to round towards\n+        ``nearest neighbor`` unless both neighbors are\n+        equidistant, in which case rounding down is used.\n+      - ``HALF_EVEN`` - Rounding mode to round towards the\n+        ``nearest neighbor`` unless both neighbors are\n+        in which case rounding towards the nearest neighbor is\n+        performed.\n+      - ``HALF_UP`` - Rounding mode to round towards\n+        ``nearest neighbor`` unless both neighbors are\n+        equidistant, in which case rounding up is used\n+      - ``UP`` - Rounding mode to round towards zero.\n+      - ``DOWN`` - Rounding mode to round towards zero.\n+\n+    - ``UNNECESSARY``\n+\n+Oracle to Presto type mapping\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto supports selecting Oracle database types. This table shows the Oracle to\n+Presto data type mapping:\n+\n+\n+.. list-table:: Oracle to Presto type mapping\n+  :widths: 20, 20, 60\n+  :header-rows: 1\n+\n+  * - Oracle database type\n+    - Presto type\n+    - Notes\n+  * - ``NUMBER(p, s)``\n+    - ``DECIMAL(p, s)``\n+    -  See :ref:`number mapping`\n+  * - ``NUMBER(p)``\n+    - ``DECIMAL(p, 0)``\n+    - See :ref:`number mapping`\n+  * - ``FLOAT[(p)]``\n+    - ``DOUBLE``\n+    -\n+  * - ``BINARY_FLOAT``\n+    - ``REAL``\n+    -\n+  * - ``BINARY_DOUBLE``\n+    - ``DOUBLE``\n+    -\n+  * - ``VARCHAR2(n CHAR)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``VARCHAR2(n BYTE)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``NVARCHAR2(n)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``CHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``NCHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``CLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``NCLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``RAW(n)``\n+    - ``VARBINARY``\n+    -\n+  * - ``BLOB``\n+    - ``VARBINARY``\n+    -\n+  * - ``DATE``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p)``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p) WITH TIME ZONE``\n+    - ``TIMESTAMP WITH TIME ZONE``\n+    - See :ref:`datetime mapping`\n+\n+If an Oracle table contains a type that's not listed in the above table, an\n+error shows:\n+\n+ - An ``unsupported-type.handling-strategy`` equals ``FAIL``\n+   (default configuration), any queries on the table fail.\n+ - An ``unsupported-type.handling-strategy`` equals ``IGNORE``\n+   (default configuration), Presto no longer accesses the column.\n+ - An ``unsupported-type.handling-strategy`` equals ``CONVERT_TO_VARCHAR``\n+   (default configuration), a column value converts to an unbounded ``VARCHAR``.\n+\n+Presto to Oracle type mapping\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto supports creating tables with the following types in an Oracle database.\n+The table shows the mappings from Presto to Oracle data types:\n+\n+.. note::\n+   Oracle connectors can't write Presto types that aren't listed in the table.\n+\n+.. list-table:: Presto to Oracle Type Mapping\n+  :widths: 20, 20, 60\n+  :header-rows: 1\n+\n+  * - Presto type\n+    - Oracle database type\n+    - Notes\n+  * - ``TINYINT``\n+    - ``NUMBER(3)``\n+    -\n+  * - ``SMALLINT``\n+    - ``NUMBER(5)``\n+    -\n+  * - ``INTEGER``\n+    - ``NUMBER(10)``\n+    -\n+  * - ``BIGINT``\n+    - ``NUMBER(19)``\n+    -\n+  * - ``DECIMAL(p, s)``\n+    - ``NUMBER(p, s)``\n+    -\n+  * - ``REAL``\n+    - ``BINARY_FLOAT``\n+    -\n+  * - ``DOUBLE``\n+    - ``BINARY_DOUBLE``\n+    -\n+  * - ``VARCHAR``\n+    - ``NCLOB``\n+    -\n+  * - ``VARCHAR(n)``\n+    - ``VARCHAR2(n CHAR)`` or ``NCLOB``\n+    - See :ref:`character mapping`\n+  * - ``CHAR(n)``\n+    - ``CHAR(n CHAR)`` or ``NCLOB``\n+    - See :ref:`character mapping`\n+  * - ``VARBINARY``\n+    - ``BLOB``\n+    -\n+  * - ``DATE``\n+    - ``DATE``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP``\n+    - ``TIMESTAMP(3)``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP WITH TIME ZONE``\n+    - ``TIMESTAMP(3) WITH TIME ZONE``\n+    - See :ref:`datetime mapping`\n+\n+.. _number mapping:\n+\n+Mapping numeric types\n+^^^^^^^^^^^^^^^^^^^^^\n+\n+An Oracle ``NUMBER(p, s)`` maps to Presto's ``DECIMAL(p, s)`` except in these\n+conditions:\n+\n+ - No precision is specified for the column (example: ``NUMBER`` or\n+   ``NUMBER(*)``), unless ``oracle.number.default-scale`` is set. \n+ - Scale (``s`` ) is greater than precision. \n+ - Precision (``p`` ) is greater than 38. \n+ - Scale is negative and the difference between ``p`` and ``s`` is greater than\n+   38, unless ``oracle.number.rounding-mode`` is set to a different value than\n+   ``UNNECESSARY``. \n+\n+If a column meets any of these conditions, it shows an error:\n+\n+ - An ``unsupported-type.handling-strategy`` equals ``FAIL``\n+   (default configuration) any queries on the table fail.\n+ - An ``unsupported-type.handling-strategy`` equals ``IGNORE``\n+   (default configuration), Presto no longer accesses the column.\n+ - An ``unsupported-type.handling-strategy`` equals ``CONVERT_TO_VARCHAR``\n+   (default configuration), a column value converts to an unbounded ``VARCHAR``.\n+\n+If ``s`` is negative, ``NUMBER(p, s)`` maps to ``DECIMAL(p + s, 0)``.\n+\n+For Oracle ``NUMBER`` (without precision and scale), you can change\n+``oracle.number.default-scale=s`` and map the column to ``DECIMAL(38, s)``.\n+\n+.. _datetime mapping:\n+\n+Mapping datetime types\n+^^^^^^^^^^^^^^^^^^^^^^\n+\n+Selecting a timestamp with fractional second precision (``p``) greater than 3\n+truncates the fractional seconds to three digits instead of rounding it.\n+\n+Oracle ``DATE`` values may store hours, minutes, and seconds, mapped\n+to Presto ``TIMESTAMP``.\n+\n+.. warning::\n+\n+  Due to date and time differences in the libraries used by Presto and the\n+  Oracle JDBC driver, attempting to insert or select a datetime value earlier\n+  than ``1582-10-15`` results in an incorrect date inserted.\n+\n+.. _character mapping:\n+\n+Mapping character types\n+^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto's ``VARCHAR(n)`` maps to ``VARCHAR2(n CHAR)`` if ``n`` is no greater than\n+4000. A larger or unbounded ``VARCHAR`` maps to ``NCLOB``.\n+\n+Presto's ``CHAR(n)`` maps to ``CHAR(n CHAR)`` if ``n`` is no greater than 2000.\n+A larger ``CHAR`` maps to ``NCLOB``.\n+\n+Using ``CREATE TABLE AS`` to create an ``NCLOB`` column from a ``CHAR`` value\n+removes the trailing spaces from the initial values for the column. Inserting\n+``CHAR`` values into existing ``NCLOB`` columns keeps the trailing spaces. For\n+example::\n+\n+    presto> CREATE TABLE vals AS SELECT CAST('A' as CHAR(2001)) col;\n+    presto> INSERT INTO vals (col) VALUES (CAST('BB' as CHAR(2001)));\n+    presto> SELECT LENGTH(col) FROM vals;\n+    2001\n+    1\n+\n+Attempting to write a ``CHAR`` that doesn't fit in the column's actual size\n+fails. This is also true for the equivalent ``VARCHAR`` types.\n+\n+.. note:: \n+\n+    This behaviors above may change in a future version.\n+\n+\n+Synonyms\n+--------\n+\n+Based on performance reasons, Presto disables support for Oracle ``SYNONYM``. To\n+include ``SYNONYM``, add the following: \n+\n+.. code-block:: none\n+\n+    oracle.synonyms.enabled=true\n+\n+Pushdown\n+--------\n+\n+The connector supports :doc:`pushdown </optimizer/pushdown>` for optimized query\n+processing.\n \n Limitations\n -----------\n \n-The following SQL statements are not yet supported:\n+Presto supports connecting to Oracle Database 12c. The following SQL statements", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 399}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MzY4NzQ5", "url": "https://github.com/trinodb/trino/pull/5014#pullrequestreview-478368749", "createdAt": "2020-08-31T07:07:42Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNzowNzo0MlrOHJtDfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODozNjozNFrOHJvtaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkzNzQwNQ==", "bodyText": "\"It can join\" is less accurate than \"This can be used to join\". The joining is not done by connector itself, but is a general Presto feature (data provided by various connectors can be joined by engine).", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r479937405", "createdAt": "2020-08-31T07:07:42Z", "author": {"login": "losipiuk"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -2,19 +2,18 @@\n Oracle Connector\n ================\n \n-The Oracle connector allows querying and creating tables in an\n-external Oracle database. This can be used to join data between\n-different systems like Oracle and Hive, or between two different\n-Oracle instances.\n+The Oracle connector allows querying and creating tables in an external Oracle\n+database. It can join data between different systems, like Oracle and Hive, or", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkzODExNw==", "bodyText": "File does not have to be named oracle.properties. Not sure if we need to stress that.\nedit: I see this is well explained below.", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r479938117", "createdAt": "2020-08-31T07:09:21Z", "author": {"login": "losipiuk"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -2,19 +2,18 @@\n Oracle Connector\n ================\n \n-The Oracle connector allows querying and creating tables in an\n-external Oracle database. This can be used to join data between\n-different systems like Oracle and Hive, or between two different\n-Oracle instances.\n+The Oracle connector allows querying and creating tables in an external Oracle\n+database. It can join data between different systems, like Oracle and Hive, or\n+between different Oracle database instances.\n \n Configuration\n -------------\n \n-To configure the Oracle connector, create a catalog properties file\n-in ``etc/catalog`` named, for example, ``oracle.properties``, to\n-mount the Oracle connector as the ``oracle`` catalog.\n-Create the file with the following contents, replacing the\n-connection properties as appropriate for your setup:\n+To configure the Oracle connector, create a catalog properties file in\n+``etc/catalog`` named ``oracle.properties``. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk0MDc4NA==", "bodyText": "Actually the name of the catalog comes from the filename, not from the contents of the file. I this sentence would be more accurate if written as:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To configure the Oracle connector, create a catalog properties file in\n          \n          \n            \n            ``etc/catalog`` named ``oracle.properties``. \n          \n          \n            \n            \n          \n          \n            \n            To mount the Oracle connector as the ``oracle`` catalog, create a file with the\n          \n          \n            \n            following connection properties:\n          \n          \n            \n            To configure the Oracle connector as the ``oracle`` catalog, create a file named ``oracle.properties`` \n          \n          \n            \n            in ``etc/catalog``. Put following configuration properties in the file:", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r479940784", "createdAt": "2020-08-31T07:15:29Z", "author": {"login": "losipiuk"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -2,19 +2,18 @@\n Oracle Connector\n ================\n \n-The Oracle connector allows querying and creating tables in an\n-external Oracle database. This can be used to join data between\n-different systems like Oracle and Hive, or between two different\n-Oracle instances.\n+The Oracle connector allows querying and creating tables in an external Oracle\n+database. It can join data between different systems, like Oracle and Hive, or\n+between different Oracle database instances.\n \n Configuration\n -------------\n \n-To configure the Oracle connector, create a catalog properties file\n-in ``etc/catalog`` named, for example, ``oracle.properties``, to\n-mount the Oracle connector as the ``oracle`` catalog.\n-Create the file with the following contents, replacing the\n-connection properties as appropriate for your setup:\n+To configure the Oracle connector, create a catalog properties file in\n+``etc/catalog`` named ``oracle.properties``. \n+\n+To mount the Oracle connector as the ``oracle`` catalog, create a file with the\n+following connection properties:", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk0MjgzMw==", "bodyText": "use Oracle connector instead of Oracle plugin", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r479942833", "createdAt": "2020-08-31T07:20:12Z", "author": {"login": "losipiuk"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -23,47 +22,363 @@ connection properties as appropriate for your setup:\n     connection-user=root\n     connection-password=secret\n \n-Multiple Oracle Servers\n+Include catalog files on all of your nodes, this requires you to restart.\n+\n+By default, the Oracle connector uses connection pooling for performance\n+improvement.\n+\n+The below configuration shows the typical default values. To update them, change\n+the properties in the catalog configuration file:\n+\n+.. code-block:: properties\n+\n+    oracle.connection-pool.max-size=30\n+    oracle.connection-pool.min-size=1\n+    oracle.connection-pool.inactive-timeout=20m\n+\n+To disable connection pooling, update properties to include:\n+\n+.. code-block:: none\n+\n+    oracle.connection-pool.enabled=false\n+\n+Multiple Oracle servers\n ^^^^^^^^^^^^^^^^^^^^^^^\n \n-You can have as many catalogs as you need, so if you have additional\n-Oracle servers, simply add another properties file to ``etc/catalog``\n-with a different name (making sure it ends in ``.properties``). For\n-example, if you name the property file ``sales.properties``, Presto\n-will create a catalog named ``sales`` using the configured connector.\n+If you want to connect to multiple Oracle servers, configure another instance of\n+the Oracle plugin as a separate catalog.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk0MzU5MA==", "bodyText": "Use database - not server. Database comes from Oracle nomenclature, and it is about logical data structure in Oracle. It has nothing to do with physical Oracle servers.", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r479943590", "createdAt": "2020-08-31T07:21:54Z", "author": {"login": "losipiuk"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -23,47 +22,363 @@ connection properties as appropriate for your setup:\n     connection-user=root\n     connection-password=secret\n \n-Multiple Oracle Servers\n+Include catalog files on all of your nodes, this requires you to restart.\n+\n+By default, the Oracle connector uses connection pooling for performance\n+improvement.\n+\n+The below configuration shows the typical default values. To update them, change\n+the properties in the catalog configuration file:\n+\n+.. code-block:: properties\n+\n+    oracle.connection-pool.max-size=30\n+    oracle.connection-pool.min-size=1\n+    oracle.connection-pool.inactive-timeout=20m\n+\n+To disable connection pooling, update properties to include:\n+\n+.. code-block:: none\n+\n+    oracle.connection-pool.enabled=false\n+\n+Multiple Oracle servers\n ^^^^^^^^^^^^^^^^^^^^^^^\n \n-You can have as many catalogs as you need, so if you have additional\n-Oracle servers, simply add another properties file to ``etc/catalog``\n-with a different name (making sure it ends in ``.properties``). For\n-example, if you name the property file ``sales.properties``, Presto\n-will create a catalog named ``sales`` using the configured connector.\n+If you want to connect to multiple Oracle servers, configure another instance of\n+the Oracle plugin as a separate catalog.\n+\n+To add another Oracle catalog, create a new properties file. For example, if\n+you name the property file ``sales.properties``, Presto creates a catalog named\n+sales.\n \n Querying Oracle\n ---------------\n \n-The Oracle connector provides a schema for every Oracle *database*.\n-You can see the available Oracle databases by running ``SHOW SCHEMAS``::\n+The Oracle connector provides a schema for every Oracle server. Use the below", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk0NDcyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            .. note::\n          \n          \n            \n                The user configuration, in the connection properties file, determines your\n          \n          \n            \n                privileges in these schemas. If the user doesn't have access to these\n          \n          \n            \n                tables, you can't access them either.\n          \n          \n            \n            .. note::\n          \n          \n            \n                The user configuration, in the connection properties file, determines your\n          \n          \n            \n                privileges in these schemas. If the Oracle user doesn't have access to a\n          \n          \n            \n                table, you can't access it through Presto either.", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r479944728", "createdAt": "2020-08-31T07:24:32Z", "author": {"login": "losipiuk"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -23,47 +22,363 @@ connection properties as appropriate for your setup:\n     connection-user=root\n     connection-password=secret\n \n-Multiple Oracle Servers\n+Include catalog files on all of your nodes, this requires you to restart.\n+\n+By default, the Oracle connector uses connection pooling for performance\n+improvement.\n+\n+The below configuration shows the typical default values. To update them, change\n+the properties in the catalog configuration file:\n+\n+.. code-block:: properties\n+\n+    oracle.connection-pool.max-size=30\n+    oracle.connection-pool.min-size=1\n+    oracle.connection-pool.inactive-timeout=20m\n+\n+To disable connection pooling, update properties to include:\n+\n+.. code-block:: none\n+\n+    oracle.connection-pool.enabled=false\n+\n+Multiple Oracle servers\n ^^^^^^^^^^^^^^^^^^^^^^^\n \n-You can have as many catalogs as you need, so if you have additional\n-Oracle servers, simply add another properties file to ``etc/catalog``\n-with a different name (making sure it ends in ``.properties``). For\n-example, if you name the property file ``sales.properties``, Presto\n-will create a catalog named ``sales`` using the configured connector.\n+If you want to connect to multiple Oracle servers, configure another instance of\n+the Oracle plugin as a separate catalog.\n+\n+To add another Oracle catalog, create a new properties file. For example, if\n+you name the property file ``sales.properties``, Presto creates a catalog named\n+sales.\n \n Querying Oracle\n ---------------\n \n-The Oracle connector provides a schema for every Oracle *database*.\n-You can see the available Oracle databases by running ``SHOW SCHEMAS``::\n+The Oracle connector provides a schema for every Oracle server. Use the below\n+queries to test your setup.\n+\n+If you used a different name for your catalog properties file, use that catalog\n+name instead of ``oracle``.\n+\n+.. note::\n+    The user configuration, in the connection properties file, determines your\n+    privileges in these schemas. If the user doesn't have access to these\n+    tables, you can't access them either.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk0NTIzMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If you have an Oracle database named ``web``, run ``SHOW TABLES`` to see the\n          \n          \n            \n            tables it owns::\n          \n          \n            \n            If you have an Oracle database named ``web``, run ``SHOW TABLES`` to see the\n          \n          \n            \n            tables it contains::", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r479945233", "createdAt": "2020-08-31T07:25:32Z", "author": {"login": "losipiuk"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -23,47 +22,363 @@ connection properties as appropriate for your setup:\n     connection-user=root\n     connection-password=secret\n \n-Multiple Oracle Servers\n+Include catalog files on all of your nodes, this requires you to restart.\n+\n+By default, the Oracle connector uses connection pooling for performance\n+improvement.\n+\n+The below configuration shows the typical default values. To update them, change\n+the properties in the catalog configuration file:\n+\n+.. code-block:: properties\n+\n+    oracle.connection-pool.max-size=30\n+    oracle.connection-pool.min-size=1\n+    oracle.connection-pool.inactive-timeout=20m\n+\n+To disable connection pooling, update properties to include:\n+\n+.. code-block:: none\n+\n+    oracle.connection-pool.enabled=false\n+\n+Multiple Oracle servers\n ^^^^^^^^^^^^^^^^^^^^^^^\n \n-You can have as many catalogs as you need, so if you have additional\n-Oracle servers, simply add another properties file to ``etc/catalog``\n-with a different name (making sure it ends in ``.properties``). For\n-example, if you name the property file ``sales.properties``, Presto\n-will create a catalog named ``sales`` using the configured connector.\n+If you want to connect to multiple Oracle servers, configure another instance of\n+the Oracle plugin as a separate catalog.\n+\n+To add another Oracle catalog, create a new properties file. For example, if\n+you name the property file ``sales.properties``, Presto creates a catalog named\n+sales.\n \n Querying Oracle\n ---------------\n \n-The Oracle connector provides a schema for every Oracle *database*.\n-You can see the available Oracle databases by running ``SHOW SCHEMAS``::\n+The Oracle connector provides a schema for every Oracle server. Use the below\n+queries to test your setup.\n+\n+If you used a different name for your catalog properties file, use that catalog\n+name instead of ``oracle``.\n+\n+.. note::\n+    The user configuration, in the connection properties file, determines your\n+    privileges in these schemas. If the user doesn't have access to these\n+    tables, you can't access them either.\n+\n+\n+Run ``SHOW SCHEMAS`` to see the available Oracle databases::\n \n     SHOW SCHEMAS FROM oracle;\n \n-If you have a Oracle database named ``web``, you can view the tables\n-in this database by running ``SHOW TABLES``::\n+If you have an Oracle database named ``web``, run ``SHOW TABLES`` to see the\n+tables it owns::", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2MjA5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  - ``HALF_EVEN`` - Rounding mode to round towards the\n          \n          \n            \n                    ``nearest neighbor`` unless both neighbors are\n          \n          \n            \n                    in which case rounding towards the nearest neighbor is\n          \n          \n            \n                    performed.\n          \n          \n            \n                  - ``HALF_EVEN`` - Rounding mode to round towards the\n          \n          \n            \n                    ``nearest neighbor`` unless both neighbors are\n          \n          \n            \n                    equidistant, in which case rounding towards the even neighbor is\n          \n          \n            \n                    performed.", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r479962094", "createdAt": "2020-08-31T07:59:23Z", "author": {"login": "losipiuk"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -23,47 +22,363 @@ connection properties as appropriate for your setup:\n     connection-user=root\n     connection-password=secret\n \n-Multiple Oracle Servers\n+Include catalog files on all of your nodes, this requires you to restart.\n+\n+By default, the Oracle connector uses connection pooling for performance\n+improvement.\n+\n+The below configuration shows the typical default values. To update them, change\n+the properties in the catalog configuration file:\n+\n+.. code-block:: properties\n+\n+    oracle.connection-pool.max-size=30\n+    oracle.connection-pool.min-size=1\n+    oracle.connection-pool.inactive-timeout=20m\n+\n+To disable connection pooling, update properties to include:\n+\n+.. code-block:: none\n+\n+    oracle.connection-pool.enabled=false\n+\n+Multiple Oracle servers\n ^^^^^^^^^^^^^^^^^^^^^^^\n \n-You can have as many catalogs as you need, so if you have additional\n-Oracle servers, simply add another properties file to ``etc/catalog``\n-with a different name (making sure it ends in ``.properties``). For\n-example, if you name the property file ``sales.properties``, Presto\n-will create a catalog named ``sales`` using the configured connector.\n+If you want to connect to multiple Oracle servers, configure another instance of\n+the Oracle plugin as a separate catalog.\n+\n+To add another Oracle catalog, create a new properties file. For example, if\n+you name the property file ``sales.properties``, Presto creates a catalog named\n+sales.\n \n Querying Oracle\n ---------------\n \n-The Oracle connector provides a schema for every Oracle *database*.\n-You can see the available Oracle databases by running ``SHOW SCHEMAS``::\n+The Oracle connector provides a schema for every Oracle server. Use the below\n+queries to test your setup.\n+\n+If you used a different name for your catalog properties file, use that catalog\n+name instead of ``oracle``.\n+\n+.. note::\n+    The user configuration, in the connection properties file, determines your\n+    privileges in these schemas. If the user doesn't have access to these\n+    tables, you can't access them either.\n+\n+\n+Run ``SHOW SCHEMAS`` to see the available Oracle databases::\n \n     SHOW SCHEMAS FROM oracle;\n \n-If you have a Oracle database named ``web``, you can view the tables\n-in this database by running ``SHOW TABLES``::\n+If you have an Oracle database named ``web``, run ``SHOW TABLES`` to see the\n+tables it owns::\n \n     SHOW TABLES FROM oracle.web;\n \n-You can see a list of the columns in the ``clicks`` table in the ``web`` database\n-using either of the following::\n+To see a list of the columns in the ``clicks`` table in the ``web``\n+database run either of the following::\n \n     DESCRIBE oracle.web.clicks;\n     SHOW COLUMNS FROM oracle.web.clicks;\n \n-Finally, you can access the ``clicks`` table in the ``web`` database::\n+To access the ``clicks`` table in the ``web`` database run::\n \n     SELECT * FROM oracle.web.clicks;\n \n-If you used a different name for your catalog properties file, use\n-that catalog name instead of ``oracle`` in the above examples.\n+Mapping data types between Presto and Oracle\n+--------------------------------------------\n+\n+Oracle and Presto support types that the other doesn't, the following tables\n+show their type mapping:\n+\n+.. list-table:: Type mapping properties\n+  :widths: 20, 20, 50, 10\n+  :header-rows: 1\n+\n+  * - Configuration property name\n+    - Session property name\n+    - Description\n+    - Default\n+  * - ``unsupported-type.handling-strategy``\n+    - ``unsupported_type_handling_strategy``\n+    - Configures how unsupported column data types are handled:\n+\n+      - ``IGNORE`` - column is not accessible.\n+      - ``CONVERT_TO_VARCHAR`` - column is converted to unbounded ``VARCHAR``.\n+\n+    - ``IGNORE``\n+  * - ``oracle.number.default-scale``\n+    - ``number_default_scale``               \n+    - Default Presto ``DECIMAL`` scale for Oracle ``NUMBER`` (without precision \n+      and scale) date type. When not set then such column is treated as not \n+      supported.\n+    - not set\n+  * - ``oracle.number.rounding-mode``\n+    - ``number_rounding_mode``               \n+    - Rounding mode for the Oracle ``NUMBER`` data type. This is useful when \n+      Oracle ``NUMBER`` data type specifies higher scale than is supported in \n+      Presto. Possible values are:\n+\n+      - ``UNNECESSARY`` - Rounding mode to assert that the \n+        requested operation has an exact result, \n+        hence no rounding is necessary.\n+      - ``CEILING`` - Rounding mode to round towards\n+        positive infinity.\n+      - ``FLOOR`` - Rounding mode to round towards negative\n+        infinity.\n+      - ``HALF_DOWN`` - Rounding mode to round towards\n+        ``nearest neighbor`` unless both neighbors are\n+        equidistant, in which case rounding down is used.\n+      - ``HALF_EVEN`` - Rounding mode to round towards the\n+        ``nearest neighbor`` unless both neighbors are\n+        in which case rounding towards the nearest neighbor is\n+        performed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2MzUyMQ==", "bodyText": "Maybe create a specific section for this table:\nType mapping configuration properties\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAlso it feels to me that it would make sense to make it the last section.\nAfter Oracle to Presto type mapping and Presto to Oracle type mapping", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r479963521", "createdAt": "2020-08-31T08:02:08Z", "author": {"login": "losipiuk"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -23,47 +22,363 @@ connection properties as appropriate for your setup:\n     connection-user=root\n     connection-password=secret\n \n-Multiple Oracle Servers\n+Include catalog files on all of your nodes, this requires you to restart.\n+\n+By default, the Oracle connector uses connection pooling for performance\n+improvement.\n+\n+The below configuration shows the typical default values. To update them, change\n+the properties in the catalog configuration file:\n+\n+.. code-block:: properties\n+\n+    oracle.connection-pool.max-size=30\n+    oracle.connection-pool.min-size=1\n+    oracle.connection-pool.inactive-timeout=20m\n+\n+To disable connection pooling, update properties to include:\n+\n+.. code-block:: none\n+\n+    oracle.connection-pool.enabled=false\n+\n+Multiple Oracle servers\n ^^^^^^^^^^^^^^^^^^^^^^^\n \n-You can have as many catalogs as you need, so if you have additional\n-Oracle servers, simply add another properties file to ``etc/catalog``\n-with a different name (making sure it ends in ``.properties``). For\n-example, if you name the property file ``sales.properties``, Presto\n-will create a catalog named ``sales`` using the configured connector.\n+If you want to connect to multiple Oracle servers, configure another instance of\n+the Oracle plugin as a separate catalog.\n+\n+To add another Oracle catalog, create a new properties file. For example, if\n+you name the property file ``sales.properties``, Presto creates a catalog named\n+sales.\n \n Querying Oracle\n ---------------\n \n-The Oracle connector provides a schema for every Oracle *database*.\n-You can see the available Oracle databases by running ``SHOW SCHEMAS``::\n+The Oracle connector provides a schema for every Oracle server. Use the below\n+queries to test your setup.\n+\n+If you used a different name for your catalog properties file, use that catalog\n+name instead of ``oracle``.\n+\n+.. note::\n+    The user configuration, in the connection properties file, determines your\n+    privileges in these schemas. If the user doesn't have access to these\n+    tables, you can't access them either.\n+\n+\n+Run ``SHOW SCHEMAS`` to see the available Oracle databases::\n \n     SHOW SCHEMAS FROM oracle;\n \n-If you have a Oracle database named ``web``, you can view the tables\n-in this database by running ``SHOW TABLES``::\n+If you have an Oracle database named ``web``, run ``SHOW TABLES`` to see the\n+tables it owns::\n \n     SHOW TABLES FROM oracle.web;\n \n-You can see a list of the columns in the ``clicks`` table in the ``web`` database\n-using either of the following::\n+To see a list of the columns in the ``clicks`` table in the ``web``\n+database run either of the following::\n \n     DESCRIBE oracle.web.clicks;\n     SHOW COLUMNS FROM oracle.web.clicks;\n \n-Finally, you can access the ``clicks`` table in the ``web`` database::\n+To access the ``clicks`` table in the ``web`` database run::\n \n     SELECT * FROM oracle.web.clicks;\n \n-If you used a different name for your catalog properties file, use\n-that catalog name instead of ``oracle`` in the above examples.\n+Mapping data types between Presto and Oracle\n+--------------------------------------------\n+\n+Oracle and Presto support types that the other doesn't, the following tables\n+show their type mapping:\n+\n+.. list-table:: Type mapping properties", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2NDY5Mw==", "bodyText": "This one is rendered weirdly with extra indentatinon. Not sure how to fix that.", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r479964693", "createdAt": "2020-08-31T08:04:42Z", "author": {"login": "losipiuk"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -23,47 +22,363 @@ connection properties as appropriate for your setup:\n     connection-user=root\n     connection-password=secret\n \n-Multiple Oracle Servers\n+Include catalog files on all of your nodes, this requires you to restart.\n+\n+By default, the Oracle connector uses connection pooling for performance\n+improvement.\n+\n+The below configuration shows the typical default values. To update them, change\n+the properties in the catalog configuration file:\n+\n+.. code-block:: properties\n+\n+    oracle.connection-pool.max-size=30\n+    oracle.connection-pool.min-size=1\n+    oracle.connection-pool.inactive-timeout=20m\n+\n+To disable connection pooling, update properties to include:\n+\n+.. code-block:: none\n+\n+    oracle.connection-pool.enabled=false\n+\n+Multiple Oracle servers\n ^^^^^^^^^^^^^^^^^^^^^^^\n \n-You can have as many catalogs as you need, so if you have additional\n-Oracle servers, simply add another properties file to ``etc/catalog``\n-with a different name (making sure it ends in ``.properties``). For\n-example, if you name the property file ``sales.properties``, Presto\n-will create a catalog named ``sales`` using the configured connector.\n+If you want to connect to multiple Oracle servers, configure another instance of\n+the Oracle plugin as a separate catalog.\n+\n+To add another Oracle catalog, create a new properties file. For example, if\n+you name the property file ``sales.properties``, Presto creates a catalog named\n+sales.\n \n Querying Oracle\n ---------------\n \n-The Oracle connector provides a schema for every Oracle *database*.\n-You can see the available Oracle databases by running ``SHOW SCHEMAS``::\n+The Oracle connector provides a schema for every Oracle server. Use the below\n+queries to test your setup.\n+\n+If you used a different name for your catalog properties file, use that catalog\n+name instead of ``oracle``.\n+\n+.. note::\n+    The user configuration, in the connection properties file, determines your\n+    privileges in these schemas. If the user doesn't have access to these\n+    tables, you can't access them either.\n+\n+\n+Run ``SHOW SCHEMAS`` to see the available Oracle databases::\n \n     SHOW SCHEMAS FROM oracle;\n \n-If you have a Oracle database named ``web``, you can view the tables\n-in this database by running ``SHOW TABLES``::\n+If you have an Oracle database named ``web``, run ``SHOW TABLES`` to see the\n+tables it owns::\n \n     SHOW TABLES FROM oracle.web;\n \n-You can see a list of the columns in the ``clicks`` table in the ``web`` database\n-using either of the following::\n+To see a list of the columns in the ``clicks`` table in the ``web``\n+database run either of the following::\n \n     DESCRIBE oracle.web.clicks;\n     SHOW COLUMNS FROM oracle.web.clicks;\n \n-Finally, you can access the ``clicks`` table in the ``web`` database::\n+To access the ``clicks`` table in the ``web`` database run::\n \n     SELECT * FROM oracle.web.clicks;\n \n-If you used a different name for your catalog properties file, use\n-that catalog name instead of ``oracle`` in the above examples.\n+Mapping data types between Presto and Oracle\n+--------------------------------------------\n+\n+Oracle and Presto support types that the other doesn't, the following tables\n+show their type mapping:\n+\n+.. list-table:: Type mapping properties\n+  :widths: 20, 20, 50, 10\n+  :header-rows: 1\n+\n+  * - Configuration property name\n+    - Session property name\n+    - Description\n+    - Default\n+  * - ``unsupported-type.handling-strategy``\n+    - ``unsupported_type_handling_strategy``\n+    - Configures how unsupported column data types are handled:\n+\n+      - ``IGNORE`` - column is not accessible.\n+      - ``CONVERT_TO_VARCHAR`` - column is converted to unbounded ``VARCHAR``.\n+\n+    - ``IGNORE``\n+  * - ``oracle.number.default-scale``\n+    - ``number_default_scale``               \n+    - Default Presto ``DECIMAL`` scale for Oracle ``NUMBER`` (without precision \n+      and scale) date type. When not set then such column is treated as not \n+      supported.\n+    - not set\n+  * - ``oracle.number.rounding-mode``\n+    - ``number_rounding_mode``               \n+    - Rounding mode for the Oracle ``NUMBER`` data type. This is useful when \n+      Oracle ``NUMBER`` data type specifies higher scale than is supported in \n+      Presto. Possible values are:\n+\n+      - ``UNNECESSARY`` - Rounding mode to assert that the \n+        requested operation has an exact result, \n+        hence no rounding is necessary.\n+      - ``CEILING`` - Rounding mode to round towards\n+        positive infinity.\n+      - ``FLOOR`` - Rounding mode to round towards negative\n+        infinity.\n+      - ``HALF_DOWN`` - Rounding mode to round towards\n+        ``nearest neighbor`` unless both neighbors are\n+        equidistant, in which case rounding down is used.\n+      - ``HALF_EVEN`` - Rounding mode to round towards the\n+        ``nearest neighbor`` unless both neighbors are\n+        in which case rounding towards the nearest neighbor is\n+        performed.\n+      - ``HALF_UP`` - Rounding mode to round towards\n+        ``nearest neighbor`` unless both neighbors are\n+        equidistant, in which case rounding up is used\n+      - ``UP`` - Rounding mode to round towards zero.\n+      - ``DOWN`` - Rounding mode to round towards zero.\n+\n+    - ``UNNECESSARY``\n+\n+Oracle to Presto type mapping\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto supports selecting Oracle database types. This table shows the Oracle to\n+Presto data type mapping:\n+\n+\n+.. list-table:: Oracle to Presto type mapping\n+  :widths: 20, 20, 60\n+  :header-rows: 1\n+\n+  * - Oracle database type\n+    - Presto type\n+    - Notes\n+  * - ``NUMBER(p, s)``\n+    - ``DECIMAL(p, s)``\n+    -  See :ref:`number mapping`\n+  * - ``NUMBER(p)``\n+    - ``DECIMAL(p, 0)``\n+    - See :ref:`number mapping`\n+  * - ``FLOAT[(p)]``\n+    - ``DOUBLE``\n+    -\n+  * - ``BINARY_FLOAT``\n+    - ``REAL``\n+    -\n+  * - ``BINARY_DOUBLE``\n+    - ``DOUBLE``\n+    -\n+  * - ``VARCHAR2(n CHAR)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``VARCHAR2(n BYTE)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``NVARCHAR2(n)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``CHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``NCHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``CLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``NCLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``RAW(n)``\n+    - ``VARBINARY``\n+    -\n+  * - ``BLOB``\n+    - ``VARBINARY``\n+    -\n+  * - ``DATE``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p)``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p) WITH TIME ZONE``\n+    - ``TIMESTAMP WITH TIME ZONE``\n+    - See :ref:`datetime mapping`\n+\n+If an Oracle table contains a type that's not listed in the above table, an", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2NTQ3MA==", "bodyText": "This section requires major rephrasing", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r479965470", "createdAt": "2020-08-31T08:06:13Z", "author": {"login": "losipiuk"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -23,47 +22,363 @@ connection properties as appropriate for your setup:\n     connection-user=root\n     connection-password=secret\n \n-Multiple Oracle Servers\n+Include catalog files on all of your nodes, this requires you to restart.\n+\n+By default, the Oracle connector uses connection pooling for performance\n+improvement.\n+\n+The below configuration shows the typical default values. To update them, change\n+the properties in the catalog configuration file:\n+\n+.. code-block:: properties\n+\n+    oracle.connection-pool.max-size=30\n+    oracle.connection-pool.min-size=1\n+    oracle.connection-pool.inactive-timeout=20m\n+\n+To disable connection pooling, update properties to include:\n+\n+.. code-block:: none\n+\n+    oracle.connection-pool.enabled=false\n+\n+Multiple Oracle servers\n ^^^^^^^^^^^^^^^^^^^^^^^\n \n-You can have as many catalogs as you need, so if you have additional\n-Oracle servers, simply add another properties file to ``etc/catalog``\n-with a different name (making sure it ends in ``.properties``). For\n-example, if you name the property file ``sales.properties``, Presto\n-will create a catalog named ``sales`` using the configured connector.\n+If you want to connect to multiple Oracle servers, configure another instance of\n+the Oracle plugin as a separate catalog.\n+\n+To add another Oracle catalog, create a new properties file. For example, if\n+you name the property file ``sales.properties``, Presto creates a catalog named\n+sales.\n \n Querying Oracle\n ---------------\n \n-The Oracle connector provides a schema for every Oracle *database*.\n-You can see the available Oracle databases by running ``SHOW SCHEMAS``::\n+The Oracle connector provides a schema for every Oracle server. Use the below\n+queries to test your setup.\n+\n+If you used a different name for your catalog properties file, use that catalog\n+name instead of ``oracle``.\n+\n+.. note::\n+    The user configuration, in the connection properties file, determines your\n+    privileges in these schemas. If the user doesn't have access to these\n+    tables, you can't access them either.\n+\n+\n+Run ``SHOW SCHEMAS`` to see the available Oracle databases::\n \n     SHOW SCHEMAS FROM oracle;\n \n-If you have a Oracle database named ``web``, you can view the tables\n-in this database by running ``SHOW TABLES``::\n+If you have an Oracle database named ``web``, run ``SHOW TABLES`` to see the\n+tables it owns::\n \n     SHOW TABLES FROM oracle.web;\n \n-You can see a list of the columns in the ``clicks`` table in the ``web`` database\n-using either of the following::\n+To see a list of the columns in the ``clicks`` table in the ``web``\n+database run either of the following::\n \n     DESCRIBE oracle.web.clicks;\n     SHOW COLUMNS FROM oracle.web.clicks;\n \n-Finally, you can access the ``clicks`` table in the ``web`` database::\n+To access the ``clicks`` table in the ``web`` database run::\n \n     SELECT * FROM oracle.web.clicks;\n \n-If you used a different name for your catalog properties file, use\n-that catalog name instead of ``oracle`` in the above examples.\n+Mapping data types between Presto and Oracle\n+--------------------------------------------\n+\n+Oracle and Presto support types that the other doesn't, the following tables\n+show their type mapping:\n+\n+.. list-table:: Type mapping properties\n+  :widths: 20, 20, 50, 10\n+  :header-rows: 1\n+\n+  * - Configuration property name\n+    - Session property name\n+    - Description\n+    - Default\n+  * - ``unsupported-type.handling-strategy``\n+    - ``unsupported_type_handling_strategy``\n+    - Configures how unsupported column data types are handled:\n+\n+      - ``IGNORE`` - column is not accessible.\n+      - ``CONVERT_TO_VARCHAR`` - column is converted to unbounded ``VARCHAR``.\n+\n+    - ``IGNORE``\n+  * - ``oracle.number.default-scale``\n+    - ``number_default_scale``               \n+    - Default Presto ``DECIMAL`` scale for Oracle ``NUMBER`` (without precision \n+      and scale) date type. When not set then such column is treated as not \n+      supported.\n+    - not set\n+  * - ``oracle.number.rounding-mode``\n+    - ``number_rounding_mode``               \n+    - Rounding mode for the Oracle ``NUMBER`` data type. This is useful when \n+      Oracle ``NUMBER`` data type specifies higher scale than is supported in \n+      Presto. Possible values are:\n+\n+      - ``UNNECESSARY`` - Rounding mode to assert that the \n+        requested operation has an exact result, \n+        hence no rounding is necessary.\n+      - ``CEILING`` - Rounding mode to round towards\n+        positive infinity.\n+      - ``FLOOR`` - Rounding mode to round towards negative\n+        infinity.\n+      - ``HALF_DOWN`` - Rounding mode to round towards\n+        ``nearest neighbor`` unless both neighbors are\n+        equidistant, in which case rounding down is used.\n+      - ``HALF_EVEN`` - Rounding mode to round towards the\n+        ``nearest neighbor`` unless both neighbors are\n+        in which case rounding towards the nearest neighbor is\n+        performed.\n+      - ``HALF_UP`` - Rounding mode to round towards\n+        ``nearest neighbor`` unless both neighbors are\n+        equidistant, in which case rounding up is used\n+      - ``UP`` - Rounding mode to round towards zero.\n+      - ``DOWN`` - Rounding mode to round towards zero.\n+\n+    - ``UNNECESSARY``\n+\n+Oracle to Presto type mapping\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto supports selecting Oracle database types. This table shows the Oracle to\n+Presto data type mapping:\n+\n+\n+.. list-table:: Oracle to Presto type mapping\n+  :widths: 20, 20, 60\n+  :header-rows: 1\n+\n+  * - Oracle database type\n+    - Presto type\n+    - Notes\n+  * - ``NUMBER(p, s)``\n+    - ``DECIMAL(p, s)``\n+    -  See :ref:`number mapping`\n+  * - ``NUMBER(p)``\n+    - ``DECIMAL(p, 0)``\n+    - See :ref:`number mapping`\n+  * - ``FLOAT[(p)]``\n+    - ``DOUBLE``\n+    -\n+  * - ``BINARY_FLOAT``\n+    - ``REAL``\n+    -\n+  * - ``BINARY_DOUBLE``\n+    - ``DOUBLE``\n+    -\n+  * - ``VARCHAR2(n CHAR)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``VARCHAR2(n BYTE)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``NVARCHAR2(n)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``CHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``NCHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``CLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``NCLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``RAW(n)``\n+    - ``VARBINARY``\n+    -\n+  * - ``BLOB``\n+    - ``VARBINARY``\n+    -\n+  * - ``DATE``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p)``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p) WITH TIME ZONE``\n+    - ``TIMESTAMP WITH TIME ZONE``\n+    - See :ref:`datetime mapping`\n+\n+If an Oracle table contains a type that's not listed in the above table, an", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk3MDY5MQ==", "bodyText": "I think it should say that for types not listed below Presto cannot perform CREATE TABLE ... AS SELECT .. operation. Inserting into alerady existing table uses Oracle to Presto type mapping.\ncc: @findepi are there any quirks here?", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r479970691", "createdAt": "2020-08-31T08:16:38Z", "author": {"login": "losipiuk"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -23,47 +22,363 @@ connection properties as appropriate for your setup:\n     connection-user=root\n     connection-password=secret\n \n-Multiple Oracle Servers\n+Include catalog files on all of your nodes, this requires you to restart.\n+\n+By default, the Oracle connector uses connection pooling for performance\n+improvement.\n+\n+The below configuration shows the typical default values. To update them, change\n+the properties in the catalog configuration file:\n+\n+.. code-block:: properties\n+\n+    oracle.connection-pool.max-size=30\n+    oracle.connection-pool.min-size=1\n+    oracle.connection-pool.inactive-timeout=20m\n+\n+To disable connection pooling, update properties to include:\n+\n+.. code-block:: none\n+\n+    oracle.connection-pool.enabled=false\n+\n+Multiple Oracle servers\n ^^^^^^^^^^^^^^^^^^^^^^^\n \n-You can have as many catalogs as you need, so if you have additional\n-Oracle servers, simply add another properties file to ``etc/catalog``\n-with a different name (making sure it ends in ``.properties``). For\n-example, if you name the property file ``sales.properties``, Presto\n-will create a catalog named ``sales`` using the configured connector.\n+If you want to connect to multiple Oracle servers, configure another instance of\n+the Oracle plugin as a separate catalog.\n+\n+To add another Oracle catalog, create a new properties file. For example, if\n+you name the property file ``sales.properties``, Presto creates a catalog named\n+sales.\n \n Querying Oracle\n ---------------\n \n-The Oracle connector provides a schema for every Oracle *database*.\n-You can see the available Oracle databases by running ``SHOW SCHEMAS``::\n+The Oracle connector provides a schema for every Oracle server. Use the below\n+queries to test your setup.\n+\n+If you used a different name for your catalog properties file, use that catalog\n+name instead of ``oracle``.\n+\n+.. note::\n+    The user configuration, in the connection properties file, determines your\n+    privileges in these schemas. If the user doesn't have access to these\n+    tables, you can't access them either.\n+\n+\n+Run ``SHOW SCHEMAS`` to see the available Oracle databases::\n \n     SHOW SCHEMAS FROM oracle;\n \n-If you have a Oracle database named ``web``, you can view the tables\n-in this database by running ``SHOW TABLES``::\n+If you have an Oracle database named ``web``, run ``SHOW TABLES`` to see the\n+tables it owns::\n \n     SHOW TABLES FROM oracle.web;\n \n-You can see a list of the columns in the ``clicks`` table in the ``web`` database\n-using either of the following::\n+To see a list of the columns in the ``clicks`` table in the ``web``\n+database run either of the following::\n \n     DESCRIBE oracle.web.clicks;\n     SHOW COLUMNS FROM oracle.web.clicks;\n \n-Finally, you can access the ``clicks`` table in the ``web`` database::\n+To access the ``clicks`` table in the ``web`` database run::\n \n     SELECT * FROM oracle.web.clicks;\n \n-If you used a different name for your catalog properties file, use\n-that catalog name instead of ``oracle`` in the above examples.\n+Mapping data types between Presto and Oracle\n+--------------------------------------------\n+\n+Oracle and Presto support types that the other doesn't, the following tables\n+show their type mapping:\n+\n+.. list-table:: Type mapping properties\n+  :widths: 20, 20, 50, 10\n+  :header-rows: 1\n+\n+  * - Configuration property name\n+    - Session property name\n+    - Description\n+    - Default\n+  * - ``unsupported-type.handling-strategy``\n+    - ``unsupported_type_handling_strategy``\n+    - Configures how unsupported column data types are handled:\n+\n+      - ``IGNORE`` - column is not accessible.\n+      - ``CONVERT_TO_VARCHAR`` - column is converted to unbounded ``VARCHAR``.\n+\n+    - ``IGNORE``\n+  * - ``oracle.number.default-scale``\n+    - ``number_default_scale``               \n+    - Default Presto ``DECIMAL`` scale for Oracle ``NUMBER`` (without precision \n+      and scale) date type. When not set then such column is treated as not \n+      supported.\n+    - not set\n+  * - ``oracle.number.rounding-mode``\n+    - ``number_rounding_mode``               \n+    - Rounding mode for the Oracle ``NUMBER`` data type. This is useful when \n+      Oracle ``NUMBER`` data type specifies higher scale than is supported in \n+      Presto. Possible values are:\n+\n+      - ``UNNECESSARY`` - Rounding mode to assert that the \n+        requested operation has an exact result, \n+        hence no rounding is necessary.\n+      - ``CEILING`` - Rounding mode to round towards\n+        positive infinity.\n+      - ``FLOOR`` - Rounding mode to round towards negative\n+        infinity.\n+      - ``HALF_DOWN`` - Rounding mode to round towards\n+        ``nearest neighbor`` unless both neighbors are\n+        equidistant, in which case rounding down is used.\n+      - ``HALF_EVEN`` - Rounding mode to round towards the\n+        ``nearest neighbor`` unless both neighbors are\n+        in which case rounding towards the nearest neighbor is\n+        performed.\n+      - ``HALF_UP`` - Rounding mode to round towards\n+        ``nearest neighbor`` unless both neighbors are\n+        equidistant, in which case rounding up is used\n+      - ``UP`` - Rounding mode to round towards zero.\n+      - ``DOWN`` - Rounding mode to round towards zero.\n+\n+    - ``UNNECESSARY``\n+\n+Oracle to Presto type mapping\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto supports selecting Oracle database types. This table shows the Oracle to\n+Presto data type mapping:\n+\n+\n+.. list-table:: Oracle to Presto type mapping\n+  :widths: 20, 20, 60\n+  :header-rows: 1\n+\n+  * - Oracle database type\n+    - Presto type\n+    - Notes\n+  * - ``NUMBER(p, s)``\n+    - ``DECIMAL(p, s)``\n+    -  See :ref:`number mapping`\n+  * - ``NUMBER(p)``\n+    - ``DECIMAL(p, 0)``\n+    - See :ref:`number mapping`\n+  * - ``FLOAT[(p)]``\n+    - ``DOUBLE``\n+    -\n+  * - ``BINARY_FLOAT``\n+    - ``REAL``\n+    -\n+  * - ``BINARY_DOUBLE``\n+    - ``DOUBLE``\n+    -\n+  * - ``VARCHAR2(n CHAR)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``VARCHAR2(n BYTE)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``NVARCHAR2(n)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``CHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``NCHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``CLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``NCLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``RAW(n)``\n+    - ``VARBINARY``\n+    -\n+  * - ``BLOB``\n+    - ``VARBINARY``\n+    -\n+  * - ``DATE``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p)``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p) WITH TIME ZONE``\n+    - ``TIMESTAMP WITH TIME ZONE``\n+    - See :ref:`datetime mapping`\n+\n+If an Oracle table contains a type that's not listed in the above table, an\n+error shows:\n+\n+ - An ``unsupported-type.handling-strategy`` equals ``FAIL``\n+   (default configuration), any queries on the table fail.\n+ - An ``unsupported-type.handling-strategy`` equals ``IGNORE``\n+   (default configuration), Presto no longer accesses the column.\n+ - An ``unsupported-type.handling-strategy`` equals ``CONVERT_TO_VARCHAR``\n+   (default configuration), a column value converts to an unbounded ``VARCHAR``.\n+\n+Presto to Oracle type mapping\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto supports creating tables with the following types in an Oracle database.\n+The table shows the mappings from Presto to Oracle data types:\n+\n+.. note::\n+   Oracle connectors can't write Presto types that aren't listed in the table.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 250}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk3MTYwMQ==", "bodyText": "again. I have hard time understanding this one.", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r479971601", "createdAt": "2020-08-31T08:18:26Z", "author": {"login": "losipiuk"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -23,47 +22,363 @@ connection properties as appropriate for your setup:\n     connection-user=root\n     connection-password=secret\n \n-Multiple Oracle Servers\n+Include catalog files on all of your nodes, this requires you to restart.\n+\n+By default, the Oracle connector uses connection pooling for performance\n+improvement.\n+\n+The below configuration shows the typical default values. To update them, change\n+the properties in the catalog configuration file:\n+\n+.. code-block:: properties\n+\n+    oracle.connection-pool.max-size=30\n+    oracle.connection-pool.min-size=1\n+    oracle.connection-pool.inactive-timeout=20m\n+\n+To disable connection pooling, update properties to include:\n+\n+.. code-block:: none\n+\n+    oracle.connection-pool.enabled=false\n+\n+Multiple Oracle servers\n ^^^^^^^^^^^^^^^^^^^^^^^\n \n-You can have as many catalogs as you need, so if you have additional\n-Oracle servers, simply add another properties file to ``etc/catalog``\n-with a different name (making sure it ends in ``.properties``). For\n-example, if you name the property file ``sales.properties``, Presto\n-will create a catalog named ``sales`` using the configured connector.\n+If you want to connect to multiple Oracle servers, configure another instance of\n+the Oracle plugin as a separate catalog.\n+\n+To add another Oracle catalog, create a new properties file. For example, if\n+you name the property file ``sales.properties``, Presto creates a catalog named\n+sales.\n \n Querying Oracle\n ---------------\n \n-The Oracle connector provides a schema for every Oracle *database*.\n-You can see the available Oracle databases by running ``SHOW SCHEMAS``::\n+The Oracle connector provides a schema for every Oracle server. Use the below\n+queries to test your setup.\n+\n+If you used a different name for your catalog properties file, use that catalog\n+name instead of ``oracle``.\n+\n+.. note::\n+    The user configuration, in the connection properties file, determines your\n+    privileges in these schemas. If the user doesn't have access to these\n+    tables, you can't access them either.\n+\n+\n+Run ``SHOW SCHEMAS`` to see the available Oracle databases::\n \n     SHOW SCHEMAS FROM oracle;\n \n-If you have a Oracle database named ``web``, you can view the tables\n-in this database by running ``SHOW TABLES``::\n+If you have an Oracle database named ``web``, run ``SHOW TABLES`` to see the\n+tables it owns::\n \n     SHOW TABLES FROM oracle.web;\n \n-You can see a list of the columns in the ``clicks`` table in the ``web`` database\n-using either of the following::\n+To see a list of the columns in the ``clicks`` table in the ``web``\n+database run either of the following::\n \n     DESCRIBE oracle.web.clicks;\n     SHOW COLUMNS FROM oracle.web.clicks;\n \n-Finally, you can access the ``clicks`` table in the ``web`` database::\n+To access the ``clicks`` table in the ``web`` database run::\n \n     SELECT * FROM oracle.web.clicks;\n \n-If you used a different name for your catalog properties file, use\n-that catalog name instead of ``oracle`` in the above examples.\n+Mapping data types between Presto and Oracle\n+--------------------------------------------\n+\n+Oracle and Presto support types that the other doesn't, the following tables\n+show their type mapping:\n+\n+.. list-table:: Type mapping properties\n+  :widths: 20, 20, 50, 10\n+  :header-rows: 1\n+\n+  * - Configuration property name\n+    - Session property name\n+    - Description\n+    - Default\n+  * - ``unsupported-type.handling-strategy``\n+    - ``unsupported_type_handling_strategy``\n+    - Configures how unsupported column data types are handled:\n+\n+      - ``IGNORE`` - column is not accessible.\n+      - ``CONVERT_TO_VARCHAR`` - column is converted to unbounded ``VARCHAR``.\n+\n+    - ``IGNORE``\n+  * - ``oracle.number.default-scale``\n+    - ``number_default_scale``               \n+    - Default Presto ``DECIMAL`` scale for Oracle ``NUMBER`` (without precision \n+      and scale) date type. When not set then such column is treated as not \n+      supported.\n+    - not set\n+  * - ``oracle.number.rounding-mode``\n+    - ``number_rounding_mode``               \n+    - Rounding mode for the Oracle ``NUMBER`` data type. This is useful when \n+      Oracle ``NUMBER`` data type specifies higher scale than is supported in \n+      Presto. Possible values are:\n+\n+      - ``UNNECESSARY`` - Rounding mode to assert that the \n+        requested operation has an exact result, \n+        hence no rounding is necessary.\n+      - ``CEILING`` - Rounding mode to round towards\n+        positive infinity.\n+      - ``FLOOR`` - Rounding mode to round towards negative\n+        infinity.\n+      - ``HALF_DOWN`` - Rounding mode to round towards\n+        ``nearest neighbor`` unless both neighbors are\n+        equidistant, in which case rounding down is used.\n+      - ``HALF_EVEN`` - Rounding mode to round towards the\n+        ``nearest neighbor`` unless both neighbors are\n+        in which case rounding towards the nearest neighbor is\n+        performed.\n+      - ``HALF_UP`` - Rounding mode to round towards\n+        ``nearest neighbor`` unless both neighbors are\n+        equidistant, in which case rounding up is used\n+      - ``UP`` - Rounding mode to round towards zero.\n+      - ``DOWN`` - Rounding mode to round towards zero.\n+\n+    - ``UNNECESSARY``\n+\n+Oracle to Presto type mapping\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto supports selecting Oracle database types. This table shows the Oracle to\n+Presto data type mapping:\n+\n+\n+.. list-table:: Oracle to Presto type mapping\n+  :widths: 20, 20, 60\n+  :header-rows: 1\n+\n+  * - Oracle database type\n+    - Presto type\n+    - Notes\n+  * - ``NUMBER(p, s)``\n+    - ``DECIMAL(p, s)``\n+    -  See :ref:`number mapping`\n+  * - ``NUMBER(p)``\n+    - ``DECIMAL(p, 0)``\n+    - See :ref:`number mapping`\n+  * - ``FLOAT[(p)]``\n+    - ``DOUBLE``\n+    -\n+  * - ``BINARY_FLOAT``\n+    - ``REAL``\n+    -\n+  * - ``BINARY_DOUBLE``\n+    - ``DOUBLE``\n+    -\n+  * - ``VARCHAR2(n CHAR)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``VARCHAR2(n BYTE)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``NVARCHAR2(n)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``CHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``NCHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``CLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``NCLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``RAW(n)``\n+    - ``VARBINARY``\n+    -\n+  * - ``BLOB``\n+    - ``VARBINARY``\n+    -\n+  * - ``DATE``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p)``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p) WITH TIME ZONE``\n+    - ``TIMESTAMP WITH TIME ZONE``\n+    - See :ref:`datetime mapping`\n+\n+If an Oracle table contains a type that's not listed in the above table, an\n+error shows:\n+\n+ - An ``unsupported-type.handling-strategy`` equals ``FAIL``\n+   (default configuration), any queries on the table fail.\n+ - An ``unsupported-type.handling-strategy`` equals ``IGNORE``\n+   (default configuration), Presto no longer accesses the column.\n+ - An ``unsupported-type.handling-strategy`` equals ``CONVERT_TO_VARCHAR``\n+   (default configuration), a column value converts to an unbounded ``VARCHAR``.\n+\n+Presto to Oracle type mapping\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto supports creating tables with the following types in an Oracle database.\n+The table shows the mappings from Presto to Oracle data types:\n+\n+.. note::\n+   Oracle connectors can't write Presto types that aren't listed in the table.\n+\n+.. list-table:: Presto to Oracle Type Mapping\n+  :widths: 20, 20, 60\n+  :header-rows: 1\n+\n+  * - Presto type\n+    - Oracle database type\n+    - Notes\n+  * - ``TINYINT``\n+    - ``NUMBER(3)``\n+    -\n+  * - ``SMALLINT``\n+    - ``NUMBER(5)``\n+    -\n+  * - ``INTEGER``\n+    - ``NUMBER(10)``\n+    -\n+  * - ``BIGINT``\n+    - ``NUMBER(19)``\n+    -\n+  * - ``DECIMAL(p, s)``\n+    - ``NUMBER(p, s)``\n+    -\n+  * - ``REAL``\n+    - ``BINARY_FLOAT``\n+    -\n+  * - ``DOUBLE``\n+    - ``BINARY_DOUBLE``\n+    -\n+  * - ``VARCHAR``\n+    - ``NCLOB``\n+    -\n+  * - ``VARCHAR(n)``\n+    - ``VARCHAR2(n CHAR)`` or ``NCLOB``\n+    - See :ref:`character mapping`\n+  * - ``CHAR(n)``\n+    - ``CHAR(n CHAR)`` or ``NCLOB``\n+    - See :ref:`character mapping`\n+  * - ``VARBINARY``\n+    - ``BLOB``\n+    -\n+  * - ``DATE``\n+    - ``DATE``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP``\n+    - ``TIMESTAMP(3)``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP WITH TIME ZONE``\n+    - ``TIMESTAMP(3) WITH TIME ZONE``\n+    - See :ref:`datetime mapping`\n+\n+.. _number mapping:\n+\n+Mapping numeric types\n+^^^^^^^^^^^^^^^^^^^^^\n+\n+An Oracle ``NUMBER(p, s)`` maps to Presto's ``DECIMAL(p, s)`` except in these\n+conditions:\n+\n+ - No precision is specified for the column (example: ``NUMBER`` or\n+   ``NUMBER(*)``), unless ``oracle.number.default-scale`` is set. \n+ - Scale (``s`` ) is greater than precision. \n+ - Precision (``p`` ) is greater than 38. \n+ - Scale is negative and the difference between ``p`` and ``s`` is greater than\n+   38, unless ``oracle.number.rounding-mode`` is set to a different value than\n+   ``UNNECESSARY``. \n+\n+If a column meets any of these conditions, it shows an error:", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 318}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk4MDM5NQ==", "bodyText": "I would drop instead of rounding it.", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r479980395", "createdAt": "2020-08-31T08:35:33Z", "author": {"login": "losipiuk"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -23,47 +22,363 @@ connection properties as appropriate for your setup:\n     connection-user=root\n     connection-password=secret\n \n-Multiple Oracle Servers\n+Include catalog files on all of your nodes, this requires you to restart.\n+\n+By default, the Oracle connector uses connection pooling for performance\n+improvement.\n+\n+The below configuration shows the typical default values. To update them, change\n+the properties in the catalog configuration file:\n+\n+.. code-block:: properties\n+\n+    oracle.connection-pool.max-size=30\n+    oracle.connection-pool.min-size=1\n+    oracle.connection-pool.inactive-timeout=20m\n+\n+To disable connection pooling, update properties to include:\n+\n+.. code-block:: none\n+\n+    oracle.connection-pool.enabled=false\n+\n+Multiple Oracle servers\n ^^^^^^^^^^^^^^^^^^^^^^^\n \n-You can have as many catalogs as you need, so if you have additional\n-Oracle servers, simply add another properties file to ``etc/catalog``\n-with a different name (making sure it ends in ``.properties``). For\n-example, if you name the property file ``sales.properties``, Presto\n-will create a catalog named ``sales`` using the configured connector.\n+If you want to connect to multiple Oracle servers, configure another instance of\n+the Oracle plugin as a separate catalog.\n+\n+To add another Oracle catalog, create a new properties file. For example, if\n+you name the property file ``sales.properties``, Presto creates a catalog named\n+sales.\n \n Querying Oracle\n ---------------\n \n-The Oracle connector provides a schema for every Oracle *database*.\n-You can see the available Oracle databases by running ``SHOW SCHEMAS``::\n+The Oracle connector provides a schema for every Oracle server. Use the below\n+queries to test your setup.\n+\n+If you used a different name for your catalog properties file, use that catalog\n+name instead of ``oracle``.\n+\n+.. note::\n+    The user configuration, in the connection properties file, determines your\n+    privileges in these schemas. If the user doesn't have access to these\n+    tables, you can't access them either.\n+\n+\n+Run ``SHOW SCHEMAS`` to see the available Oracle databases::\n \n     SHOW SCHEMAS FROM oracle;\n \n-If you have a Oracle database named ``web``, you can view the tables\n-in this database by running ``SHOW TABLES``::\n+If you have an Oracle database named ``web``, run ``SHOW TABLES`` to see the\n+tables it owns::\n \n     SHOW TABLES FROM oracle.web;\n \n-You can see a list of the columns in the ``clicks`` table in the ``web`` database\n-using either of the following::\n+To see a list of the columns in the ``clicks`` table in the ``web``\n+database run either of the following::\n \n     DESCRIBE oracle.web.clicks;\n     SHOW COLUMNS FROM oracle.web.clicks;\n \n-Finally, you can access the ``clicks`` table in the ``web`` database::\n+To access the ``clicks`` table in the ``web`` database run::\n \n     SELECT * FROM oracle.web.clicks;\n \n-If you used a different name for your catalog properties file, use\n-that catalog name instead of ``oracle`` in the above examples.\n+Mapping data types between Presto and Oracle\n+--------------------------------------------\n+\n+Oracle and Presto support types that the other doesn't, the following tables\n+show their type mapping:\n+\n+.. list-table:: Type mapping properties\n+  :widths: 20, 20, 50, 10\n+  :header-rows: 1\n+\n+  * - Configuration property name\n+    - Session property name\n+    - Description\n+    - Default\n+  * - ``unsupported-type.handling-strategy``\n+    - ``unsupported_type_handling_strategy``\n+    - Configures how unsupported column data types are handled:\n+\n+      - ``IGNORE`` - column is not accessible.\n+      - ``CONVERT_TO_VARCHAR`` - column is converted to unbounded ``VARCHAR``.\n+\n+    - ``IGNORE``\n+  * - ``oracle.number.default-scale``\n+    - ``number_default_scale``               \n+    - Default Presto ``DECIMAL`` scale for Oracle ``NUMBER`` (without precision \n+      and scale) date type. When not set then such column is treated as not \n+      supported.\n+    - not set\n+  * - ``oracle.number.rounding-mode``\n+    - ``number_rounding_mode``               \n+    - Rounding mode for the Oracle ``NUMBER`` data type. This is useful when \n+      Oracle ``NUMBER`` data type specifies higher scale than is supported in \n+      Presto. Possible values are:\n+\n+      - ``UNNECESSARY`` - Rounding mode to assert that the \n+        requested operation has an exact result, \n+        hence no rounding is necessary.\n+      - ``CEILING`` - Rounding mode to round towards\n+        positive infinity.\n+      - ``FLOOR`` - Rounding mode to round towards negative\n+        infinity.\n+      - ``HALF_DOWN`` - Rounding mode to round towards\n+        ``nearest neighbor`` unless both neighbors are\n+        equidistant, in which case rounding down is used.\n+      - ``HALF_EVEN`` - Rounding mode to round towards the\n+        ``nearest neighbor`` unless both neighbors are\n+        in which case rounding towards the nearest neighbor is\n+        performed.\n+      - ``HALF_UP`` - Rounding mode to round towards\n+        ``nearest neighbor`` unless both neighbors are\n+        equidistant, in which case rounding up is used\n+      - ``UP`` - Rounding mode to round towards zero.\n+      - ``DOWN`` - Rounding mode to round towards zero.\n+\n+    - ``UNNECESSARY``\n+\n+Oracle to Presto type mapping\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto supports selecting Oracle database types. This table shows the Oracle to\n+Presto data type mapping:\n+\n+\n+.. list-table:: Oracle to Presto type mapping\n+  :widths: 20, 20, 60\n+  :header-rows: 1\n+\n+  * - Oracle database type\n+    - Presto type\n+    - Notes\n+  * - ``NUMBER(p, s)``\n+    - ``DECIMAL(p, s)``\n+    -  See :ref:`number mapping`\n+  * - ``NUMBER(p)``\n+    - ``DECIMAL(p, 0)``\n+    - See :ref:`number mapping`\n+  * - ``FLOAT[(p)]``\n+    - ``DOUBLE``\n+    -\n+  * - ``BINARY_FLOAT``\n+    - ``REAL``\n+    -\n+  * - ``BINARY_DOUBLE``\n+    - ``DOUBLE``\n+    -\n+  * - ``VARCHAR2(n CHAR)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``VARCHAR2(n BYTE)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``NVARCHAR2(n)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``CHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``NCHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``CLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``NCLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``RAW(n)``\n+    - ``VARBINARY``\n+    -\n+  * - ``BLOB``\n+    - ``VARBINARY``\n+    -\n+  * - ``DATE``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p)``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p) WITH TIME ZONE``\n+    - ``TIMESTAMP WITH TIME ZONE``\n+    - See :ref:`datetime mapping`\n+\n+If an Oracle table contains a type that's not listed in the above table, an\n+error shows:\n+\n+ - An ``unsupported-type.handling-strategy`` equals ``FAIL``\n+   (default configuration), any queries on the table fail.\n+ - An ``unsupported-type.handling-strategy`` equals ``IGNORE``\n+   (default configuration), Presto no longer accesses the column.\n+ - An ``unsupported-type.handling-strategy`` equals ``CONVERT_TO_VARCHAR``\n+   (default configuration), a column value converts to an unbounded ``VARCHAR``.\n+\n+Presto to Oracle type mapping\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto supports creating tables with the following types in an Oracle database.\n+The table shows the mappings from Presto to Oracle data types:\n+\n+.. note::\n+   Oracle connectors can't write Presto types that aren't listed in the table.\n+\n+.. list-table:: Presto to Oracle Type Mapping\n+  :widths: 20, 20, 60\n+  :header-rows: 1\n+\n+  * - Presto type\n+    - Oracle database type\n+    - Notes\n+  * - ``TINYINT``\n+    - ``NUMBER(3)``\n+    -\n+  * - ``SMALLINT``\n+    - ``NUMBER(5)``\n+    -\n+  * - ``INTEGER``\n+    - ``NUMBER(10)``\n+    -\n+  * - ``BIGINT``\n+    - ``NUMBER(19)``\n+    -\n+  * - ``DECIMAL(p, s)``\n+    - ``NUMBER(p, s)``\n+    -\n+  * - ``REAL``\n+    - ``BINARY_FLOAT``\n+    -\n+  * - ``DOUBLE``\n+    - ``BINARY_DOUBLE``\n+    -\n+  * - ``VARCHAR``\n+    - ``NCLOB``\n+    -\n+  * - ``VARCHAR(n)``\n+    - ``VARCHAR2(n CHAR)`` or ``NCLOB``\n+    - See :ref:`character mapping`\n+  * - ``CHAR(n)``\n+    - ``CHAR(n CHAR)`` or ``NCLOB``\n+    - See :ref:`character mapping`\n+  * - ``VARBINARY``\n+    - ``BLOB``\n+    -\n+  * - ``DATE``\n+    - ``DATE``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP``\n+    - ``TIMESTAMP(3)``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP WITH TIME ZONE``\n+    - ``TIMESTAMP(3) WITH TIME ZONE``\n+    - See :ref:`datetime mapping`\n+\n+.. _number mapping:\n+\n+Mapping numeric types\n+^^^^^^^^^^^^^^^^^^^^^\n+\n+An Oracle ``NUMBER(p, s)`` maps to Presto's ``DECIMAL(p, s)`` except in these\n+conditions:\n+\n+ - No precision is specified for the column (example: ``NUMBER`` or\n+   ``NUMBER(*)``), unless ``oracle.number.default-scale`` is set. \n+ - Scale (``s`` ) is greater than precision. \n+ - Precision (``p`` ) is greater than 38. \n+ - Scale is negative and the difference between ``p`` and ``s`` is greater than\n+   38, unless ``oracle.number.rounding-mode`` is set to a different value than\n+   ``UNNECESSARY``. \n+\n+If a column meets any of these conditions, it shows an error:\n+\n+ - An ``unsupported-type.handling-strategy`` equals ``FAIL``\n+   (default configuration) any queries on the table fail.\n+ - An ``unsupported-type.handling-strategy`` equals ``IGNORE``\n+   (default configuration), Presto no longer accesses the column.\n+ - An ``unsupported-type.handling-strategy`` equals ``CONVERT_TO_VARCHAR``\n+   (default configuration), a column value converts to an unbounded ``VARCHAR``.\n+\n+If ``s`` is negative, ``NUMBER(p, s)`` maps to ``DECIMAL(p + s, 0)``.\n+\n+For Oracle ``NUMBER`` (without precision and scale), you can change\n+``oracle.number.default-scale=s`` and map the column to ``DECIMAL(38, s)``.\n+\n+.. _datetime mapping:\n+\n+Mapping datetime types\n+^^^^^^^^^^^^^^^^^^^^^^\n+\n+Selecting a timestamp with fractional second precision (``p``) greater than 3\n+truncates the fractional seconds to three digits instead of rounding it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 338}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk4MDkwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Oracle ``DATE`` values may store hours, minutes, and seconds, mapped\n          \n          \n            \n            to Presto ``TIMESTAMP``.\n          \n          \n            \n            Oracle ``DATE`` type may store hours, minutes, and seconds, so it is mapped\n          \n          \n            \n            to Presto ``TIMESTAMP``.", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r479980905", "createdAt": "2020-08-31T08:36:34Z", "author": {"login": "losipiuk"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -23,47 +22,363 @@ connection properties as appropriate for your setup:\n     connection-user=root\n     connection-password=secret\n \n-Multiple Oracle Servers\n+Include catalog files on all of your nodes, this requires you to restart.\n+\n+By default, the Oracle connector uses connection pooling for performance\n+improvement.\n+\n+The below configuration shows the typical default values. To update them, change\n+the properties in the catalog configuration file:\n+\n+.. code-block:: properties\n+\n+    oracle.connection-pool.max-size=30\n+    oracle.connection-pool.min-size=1\n+    oracle.connection-pool.inactive-timeout=20m\n+\n+To disable connection pooling, update properties to include:\n+\n+.. code-block:: none\n+\n+    oracle.connection-pool.enabled=false\n+\n+Multiple Oracle servers\n ^^^^^^^^^^^^^^^^^^^^^^^\n \n-You can have as many catalogs as you need, so if you have additional\n-Oracle servers, simply add another properties file to ``etc/catalog``\n-with a different name (making sure it ends in ``.properties``). For\n-example, if you name the property file ``sales.properties``, Presto\n-will create a catalog named ``sales`` using the configured connector.\n+If you want to connect to multiple Oracle servers, configure another instance of\n+the Oracle plugin as a separate catalog.\n+\n+To add another Oracle catalog, create a new properties file. For example, if\n+you name the property file ``sales.properties``, Presto creates a catalog named\n+sales.\n \n Querying Oracle\n ---------------\n \n-The Oracle connector provides a schema for every Oracle *database*.\n-You can see the available Oracle databases by running ``SHOW SCHEMAS``::\n+The Oracle connector provides a schema for every Oracle server. Use the below\n+queries to test your setup.\n+\n+If you used a different name for your catalog properties file, use that catalog\n+name instead of ``oracle``.\n+\n+.. note::\n+    The user configuration, in the connection properties file, determines your\n+    privileges in these schemas. If the user doesn't have access to these\n+    tables, you can't access them either.\n+\n+\n+Run ``SHOW SCHEMAS`` to see the available Oracle databases::\n \n     SHOW SCHEMAS FROM oracle;\n \n-If you have a Oracle database named ``web``, you can view the tables\n-in this database by running ``SHOW TABLES``::\n+If you have an Oracle database named ``web``, run ``SHOW TABLES`` to see the\n+tables it owns::\n \n     SHOW TABLES FROM oracle.web;\n \n-You can see a list of the columns in the ``clicks`` table in the ``web`` database\n-using either of the following::\n+To see a list of the columns in the ``clicks`` table in the ``web``\n+database run either of the following::\n \n     DESCRIBE oracle.web.clicks;\n     SHOW COLUMNS FROM oracle.web.clicks;\n \n-Finally, you can access the ``clicks`` table in the ``web`` database::\n+To access the ``clicks`` table in the ``web`` database run::\n \n     SELECT * FROM oracle.web.clicks;\n \n-If you used a different name for your catalog properties file, use\n-that catalog name instead of ``oracle`` in the above examples.\n+Mapping data types between Presto and Oracle\n+--------------------------------------------\n+\n+Oracle and Presto support types that the other doesn't, the following tables\n+show their type mapping:\n+\n+.. list-table:: Type mapping properties\n+  :widths: 20, 20, 50, 10\n+  :header-rows: 1\n+\n+  * - Configuration property name\n+    - Session property name\n+    - Description\n+    - Default\n+  * - ``unsupported-type.handling-strategy``\n+    - ``unsupported_type_handling_strategy``\n+    - Configures how unsupported column data types are handled:\n+\n+      - ``IGNORE`` - column is not accessible.\n+      - ``CONVERT_TO_VARCHAR`` - column is converted to unbounded ``VARCHAR``.\n+\n+    - ``IGNORE``\n+  * - ``oracle.number.default-scale``\n+    - ``number_default_scale``               \n+    - Default Presto ``DECIMAL`` scale for Oracle ``NUMBER`` (without precision \n+      and scale) date type. When not set then such column is treated as not \n+      supported.\n+    - not set\n+  * - ``oracle.number.rounding-mode``\n+    - ``number_rounding_mode``               \n+    - Rounding mode for the Oracle ``NUMBER`` data type. This is useful when \n+      Oracle ``NUMBER`` data type specifies higher scale than is supported in \n+      Presto. Possible values are:\n+\n+      - ``UNNECESSARY`` - Rounding mode to assert that the \n+        requested operation has an exact result, \n+        hence no rounding is necessary.\n+      - ``CEILING`` - Rounding mode to round towards\n+        positive infinity.\n+      - ``FLOOR`` - Rounding mode to round towards negative\n+        infinity.\n+      - ``HALF_DOWN`` - Rounding mode to round towards\n+        ``nearest neighbor`` unless both neighbors are\n+        equidistant, in which case rounding down is used.\n+      - ``HALF_EVEN`` - Rounding mode to round towards the\n+        ``nearest neighbor`` unless both neighbors are\n+        in which case rounding towards the nearest neighbor is\n+        performed.\n+      - ``HALF_UP`` - Rounding mode to round towards\n+        ``nearest neighbor`` unless both neighbors are\n+        equidistant, in which case rounding up is used\n+      - ``UP`` - Rounding mode to round towards zero.\n+      - ``DOWN`` - Rounding mode to round towards zero.\n+\n+    - ``UNNECESSARY``\n+\n+Oracle to Presto type mapping\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto supports selecting Oracle database types. This table shows the Oracle to\n+Presto data type mapping:\n+\n+\n+.. list-table:: Oracle to Presto type mapping\n+  :widths: 20, 20, 60\n+  :header-rows: 1\n+\n+  * - Oracle database type\n+    - Presto type\n+    - Notes\n+  * - ``NUMBER(p, s)``\n+    - ``DECIMAL(p, s)``\n+    -  See :ref:`number mapping`\n+  * - ``NUMBER(p)``\n+    - ``DECIMAL(p, 0)``\n+    - See :ref:`number mapping`\n+  * - ``FLOAT[(p)]``\n+    - ``DOUBLE``\n+    -\n+  * - ``BINARY_FLOAT``\n+    - ``REAL``\n+    -\n+  * - ``BINARY_DOUBLE``\n+    - ``DOUBLE``\n+    -\n+  * - ``VARCHAR2(n CHAR)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``VARCHAR2(n BYTE)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``NVARCHAR2(n)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``CHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``NCHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``CLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``NCLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``RAW(n)``\n+    - ``VARBINARY``\n+    -\n+  * - ``BLOB``\n+    - ``VARBINARY``\n+    -\n+  * - ``DATE``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p)``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p) WITH TIME ZONE``\n+    - ``TIMESTAMP WITH TIME ZONE``\n+    - See :ref:`datetime mapping`\n+\n+If an Oracle table contains a type that's not listed in the above table, an\n+error shows:\n+\n+ - An ``unsupported-type.handling-strategy`` equals ``FAIL``\n+   (default configuration), any queries on the table fail.\n+ - An ``unsupported-type.handling-strategy`` equals ``IGNORE``\n+   (default configuration), Presto no longer accesses the column.\n+ - An ``unsupported-type.handling-strategy`` equals ``CONVERT_TO_VARCHAR``\n+   (default configuration), a column value converts to an unbounded ``VARCHAR``.\n+\n+Presto to Oracle type mapping\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto supports creating tables with the following types in an Oracle database.\n+The table shows the mappings from Presto to Oracle data types:\n+\n+.. note::\n+   Oracle connectors can't write Presto types that aren't listed in the table.\n+\n+.. list-table:: Presto to Oracle Type Mapping\n+  :widths: 20, 20, 60\n+  :header-rows: 1\n+\n+  * - Presto type\n+    - Oracle database type\n+    - Notes\n+  * - ``TINYINT``\n+    - ``NUMBER(3)``\n+    -\n+  * - ``SMALLINT``\n+    - ``NUMBER(5)``\n+    -\n+  * - ``INTEGER``\n+    - ``NUMBER(10)``\n+    -\n+  * - ``BIGINT``\n+    - ``NUMBER(19)``\n+    -\n+  * - ``DECIMAL(p, s)``\n+    - ``NUMBER(p, s)``\n+    -\n+  * - ``REAL``\n+    - ``BINARY_FLOAT``\n+    -\n+  * - ``DOUBLE``\n+    - ``BINARY_DOUBLE``\n+    -\n+  * - ``VARCHAR``\n+    - ``NCLOB``\n+    -\n+  * - ``VARCHAR(n)``\n+    - ``VARCHAR2(n CHAR)`` or ``NCLOB``\n+    - See :ref:`character mapping`\n+  * - ``CHAR(n)``\n+    - ``CHAR(n CHAR)`` or ``NCLOB``\n+    - See :ref:`character mapping`\n+  * - ``VARBINARY``\n+    - ``BLOB``\n+    -\n+  * - ``DATE``\n+    - ``DATE``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP``\n+    - ``TIMESTAMP(3)``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP WITH TIME ZONE``\n+    - ``TIMESTAMP(3) WITH TIME ZONE``\n+    - See :ref:`datetime mapping`\n+\n+.. _number mapping:\n+\n+Mapping numeric types\n+^^^^^^^^^^^^^^^^^^^^^\n+\n+An Oracle ``NUMBER(p, s)`` maps to Presto's ``DECIMAL(p, s)`` except in these\n+conditions:\n+\n+ - No precision is specified for the column (example: ``NUMBER`` or\n+   ``NUMBER(*)``), unless ``oracle.number.default-scale`` is set. \n+ - Scale (``s`` ) is greater than precision. \n+ - Precision (``p`` ) is greater than 38. \n+ - Scale is negative and the difference between ``p`` and ``s`` is greater than\n+   38, unless ``oracle.number.rounding-mode`` is set to a different value than\n+   ``UNNECESSARY``. \n+\n+If a column meets any of these conditions, it shows an error:\n+\n+ - An ``unsupported-type.handling-strategy`` equals ``FAIL``\n+   (default configuration) any queries on the table fail.\n+ - An ``unsupported-type.handling-strategy`` equals ``IGNORE``\n+   (default configuration), Presto no longer accesses the column.\n+ - An ``unsupported-type.handling-strategy`` equals ``CONVERT_TO_VARCHAR``\n+   (default configuration), a column value converts to an unbounded ``VARCHAR``.\n+\n+If ``s`` is negative, ``NUMBER(p, s)`` maps to ``DECIMAL(p + s, 0)``.\n+\n+For Oracle ``NUMBER`` (without precision and scale), you can change\n+``oracle.number.default-scale=s`` and map the column to ``DECIMAL(38, s)``.\n+\n+.. _datetime mapping:\n+\n+Mapping datetime types\n+^^^^^^^^^^^^^^^^^^^^^^\n+\n+Selecting a timestamp with fractional second precision (``p``) greater than 3\n+truncates the fractional seconds to three digits instead of rounding it.\n+\n+Oracle ``DATE`` values may store hours, minutes, and seconds, mapped\n+to Presto ``TIMESTAMP``.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 341}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMTAxMjY2", "url": "https://github.com/trinodb/trino/pull/5014#pullrequestreview-480101266", "createdAt": "2020-09-01T20:44:22Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDo0NDoyM1rOHLHicg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMToxNzoxMVrOHLIk2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQxOTg5MA==", "bodyText": "\"Connectors let Presto join data provided by different databases,\nlike Oracle and Hive, or different Oracle database instances.\" is accurate though I am not sure if needed at all.\nTechnically one can put such sentence in the intro for any connector documentation.\nWith that said I do not consider myself proficient documentation writer so I leave the call to you.", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r481419890", "createdAt": "2020-09-01T20:44:23Z", "author": {"login": "losipiuk"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -2,19 +2,16 @@\n Oracle Connector\n ================\n \n-The Oracle connector allows querying and creating tables in an\n-external Oracle database. This can be used to join data between\n-different systems like Oracle and Hive, or between two different\n-Oracle instances.\n+The Oracle connector allows querying and creating tables in an external Oracle\n+database. Connectors let Presto join data provided by different databases,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQyMzY4Nw==", "bodyText": "I think the section here should be reversed. First introduce pooling concept. Then talk about configuration details of it.\nWhat about restructuring it like this:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The below configuration shows the typical default values. To update them, change\n          \n          \n            \n            the properties in the catalog configuration file:\n          \n          \n            \n            \n          \n          \n            \n            .. code-block:: properties\n          \n          \n            \n            \n          \n          \n            \n                oracle.connection-pool.max-size=30\n          \n          \n            \n                oracle.connection-pool.min-size=1\n          \n          \n            \n                oracle.connection-pool.inactive-timeout=20m\n          \n          \n            \n            \n          \n          \n            \n            By default, the Oracle connector uses connection pooling for performance\n          \n          \n            \n            improvement. To disable connection pooling, update properties to include:\n          \n          \n            \n            \n          \n          \n            \n            .. code-block:: none\n          \n          \n            \n            \n          \n          \n            \n                oracle.connection-pool.enabled=false\n          \n          \n            \n            By default, the Oracle connector uses connection pooling for performance\n          \n          \n            \n            improvement. The below configuration shows the typical default values. To update them, change\n          \n          \n            \n            the properties in the catalog configuration file:\n          \n          \n            \n            \n          \n          \n            \n            .. code-block:: properties\n          \n          \n            \n            \n          \n          \n            \n                oracle.connection-pool.max-size=30\n          \n          \n            \n                oracle.connection-pool.min-size=1\n          \n          \n            \n                oracle.connection-pool.inactive-timeout=20m\n          \n          \n            \n            \n          \n          \n            \n            To disable connection pooling, update properties to include:\n          \n          \n            \n            \n          \n          \n            \n            .. code-block:: none\n          \n          \n            \n            \n          \n          \n            \n                oracle.connection-pool.enabled=false", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r481423687", "createdAt": "2020-09-01T20:51:33Z", "author": {"login": "losipiuk"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -23,47 +20,362 @@ connection properties as appropriate for your setup:\n     connection-user=root\n     connection-password=secret\n \n-Multiple Oracle Servers\n+The below configuration shows the typical default values. To update them, change\n+the properties in the catalog configuration file:\n+\n+.. code-block:: properties\n+\n+    oracle.connection-pool.max-size=30\n+    oracle.connection-pool.min-size=1\n+    oracle.connection-pool.inactive-timeout=20m\n+\n+By default, the Oracle connector uses connection pooling for performance\n+improvement. To disable connection pooling, update properties to include:\n+\n+.. code-block:: none\n+\n+    oracle.connection-pool.enabled=false", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQyODk3Mw==", "bodyText": "The problem that it is hard to follow (at least to me) that it says about different possible outcomes, depending on value of configuration property unsupported-type.handling-strategy.\nAlso I have just noticed that each option is marked with \"(default configuration)\" :).\nAlso it should be unsupported-type.handling (without -strategy); The version with -strategy would work too, but it is legacy and will be removed eventually.\nI would expect something like:\nYou can specify Presto behaviour for situation when type not listed above is used in Oracle table by setting `unsupported-type.handling-strategy` configuration property.\n\nIf ``unsupported-type.handling`` is set to ``FAIL``  querying table with unsupported table will fail.\n\nIf ``unsupported-type.handling`` is set to ``IGNORE`` (default configuration) columns with unsupported types will not be exposed in Presto.\n\nIf ``unsupported-type.handling`` is set to ``CONVERT_TO_VARCHAR`` column will be exposed as unbounded VARCHAR\n\nOf course please make it more English :)", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r481428973", "createdAt": "2020-09-01T21:01:37Z", "author": {"login": "losipiuk"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -23,47 +22,363 @@ connection properties as appropriate for your setup:\n     connection-user=root\n     connection-password=secret\n \n-Multiple Oracle Servers\n+Include catalog files on all of your nodes, this requires you to restart.\n+\n+By default, the Oracle connector uses connection pooling for performance\n+improvement.\n+\n+The below configuration shows the typical default values. To update them, change\n+the properties in the catalog configuration file:\n+\n+.. code-block:: properties\n+\n+    oracle.connection-pool.max-size=30\n+    oracle.connection-pool.min-size=1\n+    oracle.connection-pool.inactive-timeout=20m\n+\n+To disable connection pooling, update properties to include:\n+\n+.. code-block:: none\n+\n+    oracle.connection-pool.enabled=false\n+\n+Multiple Oracle servers\n ^^^^^^^^^^^^^^^^^^^^^^^\n \n-You can have as many catalogs as you need, so if you have additional\n-Oracle servers, simply add another properties file to ``etc/catalog``\n-with a different name (making sure it ends in ``.properties``). For\n-example, if you name the property file ``sales.properties``, Presto\n-will create a catalog named ``sales`` using the configured connector.\n+If you want to connect to multiple Oracle servers, configure another instance of\n+the Oracle plugin as a separate catalog.\n+\n+To add another Oracle catalog, create a new properties file. For example, if\n+you name the property file ``sales.properties``, Presto creates a catalog named\n+sales.\n \n Querying Oracle\n ---------------\n \n-The Oracle connector provides a schema for every Oracle *database*.\n-You can see the available Oracle databases by running ``SHOW SCHEMAS``::\n+The Oracle connector provides a schema for every Oracle server. Use the below\n+queries to test your setup.\n+\n+If you used a different name for your catalog properties file, use that catalog\n+name instead of ``oracle``.\n+\n+.. note::\n+    The user configuration, in the connection properties file, determines your\n+    privileges in these schemas. If the user doesn't have access to these\n+    tables, you can't access them either.\n+\n+\n+Run ``SHOW SCHEMAS`` to see the available Oracle databases::\n \n     SHOW SCHEMAS FROM oracle;\n \n-If you have a Oracle database named ``web``, you can view the tables\n-in this database by running ``SHOW TABLES``::\n+If you have an Oracle database named ``web``, run ``SHOW TABLES`` to see the\n+tables it owns::\n \n     SHOW TABLES FROM oracle.web;\n \n-You can see a list of the columns in the ``clicks`` table in the ``web`` database\n-using either of the following::\n+To see a list of the columns in the ``clicks`` table in the ``web``\n+database run either of the following::\n \n     DESCRIBE oracle.web.clicks;\n     SHOW COLUMNS FROM oracle.web.clicks;\n \n-Finally, you can access the ``clicks`` table in the ``web`` database::\n+To access the ``clicks`` table in the ``web`` database run::\n \n     SELECT * FROM oracle.web.clicks;\n \n-If you used a different name for your catalog properties file, use\n-that catalog name instead of ``oracle`` in the above examples.\n+Mapping data types between Presto and Oracle\n+--------------------------------------------\n+\n+Oracle and Presto support types that the other doesn't, the following tables\n+show their type mapping:\n+\n+.. list-table:: Type mapping properties\n+  :widths: 20, 20, 50, 10\n+  :header-rows: 1\n+\n+  * - Configuration property name\n+    - Session property name\n+    - Description\n+    - Default\n+  * - ``unsupported-type.handling-strategy``\n+    - ``unsupported_type_handling_strategy``\n+    - Configures how unsupported column data types are handled:\n+\n+      - ``IGNORE`` - column is not accessible.\n+      - ``CONVERT_TO_VARCHAR`` - column is converted to unbounded ``VARCHAR``.\n+\n+    - ``IGNORE``\n+  * - ``oracle.number.default-scale``\n+    - ``number_default_scale``               \n+    - Default Presto ``DECIMAL`` scale for Oracle ``NUMBER`` (without precision \n+      and scale) date type. When not set then such column is treated as not \n+      supported.\n+    - not set\n+  * - ``oracle.number.rounding-mode``\n+    - ``number_rounding_mode``               \n+    - Rounding mode for the Oracle ``NUMBER`` data type. This is useful when \n+      Oracle ``NUMBER`` data type specifies higher scale than is supported in \n+      Presto. Possible values are:\n+\n+      - ``UNNECESSARY`` - Rounding mode to assert that the \n+        requested operation has an exact result, \n+        hence no rounding is necessary.\n+      - ``CEILING`` - Rounding mode to round towards\n+        positive infinity.\n+      - ``FLOOR`` - Rounding mode to round towards negative\n+        infinity.\n+      - ``HALF_DOWN`` - Rounding mode to round towards\n+        ``nearest neighbor`` unless both neighbors are\n+        equidistant, in which case rounding down is used.\n+      - ``HALF_EVEN`` - Rounding mode to round towards the\n+        ``nearest neighbor`` unless both neighbors are\n+        in which case rounding towards the nearest neighbor is\n+        performed.\n+      - ``HALF_UP`` - Rounding mode to round towards\n+        ``nearest neighbor`` unless both neighbors are\n+        equidistant, in which case rounding up is used\n+      - ``UP`` - Rounding mode to round towards zero.\n+      - ``DOWN`` - Rounding mode to round towards zero.\n+\n+    - ``UNNECESSARY``\n+\n+Oracle to Presto type mapping\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto supports selecting Oracle database types. This table shows the Oracle to\n+Presto data type mapping:\n+\n+\n+.. list-table:: Oracle to Presto type mapping\n+  :widths: 20, 20, 60\n+  :header-rows: 1\n+\n+  * - Oracle database type\n+    - Presto type\n+    - Notes\n+  * - ``NUMBER(p, s)``\n+    - ``DECIMAL(p, s)``\n+    -  See :ref:`number mapping`\n+  * - ``NUMBER(p)``\n+    - ``DECIMAL(p, 0)``\n+    - See :ref:`number mapping`\n+  * - ``FLOAT[(p)]``\n+    - ``DOUBLE``\n+    -\n+  * - ``BINARY_FLOAT``\n+    - ``REAL``\n+    -\n+  * - ``BINARY_DOUBLE``\n+    - ``DOUBLE``\n+    -\n+  * - ``VARCHAR2(n CHAR)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``VARCHAR2(n BYTE)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``NVARCHAR2(n)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``CHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``NCHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``CLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``NCLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``RAW(n)``\n+    - ``VARBINARY``\n+    -\n+  * - ``BLOB``\n+    - ``VARBINARY``\n+    -\n+  * - ``DATE``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p)``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p) WITH TIME ZONE``\n+    - ``TIMESTAMP WITH TIME ZONE``\n+    - See :ref:`datetime mapping`\n+\n+If an Oracle table contains a type that's not listed in the above table, an", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2NDY5Mw=="}, "originalCommit": null, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQyOTQ1Mg==", "bodyText": "this is single operation CREATE TABLE <some_table> AS SELECT ....\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               For types not listed in the table below, Presto can't perform the ``CREATE\n          \n          \n            \n               TABLE`` and ``AS SELECT``operations to insert info into existing\n          \n          \n            \n               tables that use ``Oracle to Presto`` type mapping.\n          \n          \n            \n               For types not listed in the table below, Presto can't perform the ``CREATE\n          \n          \n            \n               TABLE <table> AS SELECT`` operations. \n          \n          \n            \n               When data is inserted into existing tables ``Oracle to Presto`` type mapping is used.", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r481429452", "createdAt": "2020-09-01T21:02:33Z", "author": {"login": "losipiuk"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -23,47 +20,362 @@ connection properties as appropriate for your setup:\n     connection-user=root\n     connection-password=secret\n \n-Multiple Oracle Servers\n+The below configuration shows the typical default values. To update them, change\n+the properties in the catalog configuration file:\n+\n+.. code-block:: properties\n+\n+    oracle.connection-pool.max-size=30\n+    oracle.connection-pool.min-size=1\n+    oracle.connection-pool.inactive-timeout=20m\n+\n+By default, the Oracle connector uses connection pooling for performance\n+improvement. To disable connection pooling, update properties to include:\n+\n+.. code-block:: none\n+\n+    oracle.connection-pool.enabled=false\n+\n+.. note::\n+\n+    Include catalog files on all of your nodes, this requires you to restart.\n+\n+Multiple Oracle servers\n ^^^^^^^^^^^^^^^^^^^^^^^\n \n-You can have as many catalogs as you need, so if you have additional\n-Oracle servers, simply add another properties file to ``etc/catalog``\n-with a different name (making sure it ends in ``.properties``). For\n-example, if you name the property file ``sales.properties``, Presto\n-will create a catalog named ``sales`` using the configured connector.\n+If you want to connect to multiple Oracle servers, configure another instance of\n+the Oracle connector as a separate catalog.\n+\n+To add another Oracle catalog, create a new properties file. For example, if\n+you name the property file ``sales.properties``, Presto creates a catalog named\n+sales.\n \n Querying Oracle\n ---------------\n \n-The Oracle connector provides a schema for every Oracle *database*.\n-You can see the available Oracle databases by running ``SHOW SCHEMAS``::\n+The Oracle connector provides a schema for every Oracle database. Use the below\n+queries to test your setup.\n+\n+If you used a different name for your catalog properties file, use that catalog\n+name instead of ``oracle``.\n+\n+.. note::\n+    The user configuration, in the connection properties file, determines your\n+    privileges in these schemas. If the Oracle user doesn't have access to a\n+    table, you can't access it through Presto either.\n+\n+Run ``SHOW SCHEMAS`` to see the available Oracle databases::\n \n     SHOW SCHEMAS FROM oracle;\n \n-If you have a Oracle database named ``web``, you can view the tables\n-in this database by running ``SHOW TABLES``::\n+If you have an Oracle database named ``web``, run ``SHOW TABLES`` to see the\n+tables it contains::\n \n     SHOW TABLES FROM oracle.web;\n \n-You can see a list of the columns in the ``clicks`` table in the ``web`` database\n-using either of the following::\n+To see a list of the columns in the ``clicks`` table in the ``web``\n+database run either of the following::\n \n     DESCRIBE oracle.web.clicks;\n     SHOW COLUMNS FROM oracle.web.clicks;\n \n-Finally, you can access the ``clicks`` table in the ``web`` database::\n+To access the ``clicks`` table in the ``web`` database run::\n \n     SELECT * FROM oracle.web.clicks;\n \n-If you used a different name for your catalog properties file, use\n-that catalog name instead of ``oracle`` in the above examples.\n+Mapping data types between Presto and Oracle\n+--------------------------------------------\n+\n+Oracle supports types that Presto doesn't and Presto supports types that Oracle\n+doesn't. The following sections explain their type mapping.\n+\n+Oracle to Presto type mapping\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto supports selecting Oracle database types. This table shows the Oracle to\n+Presto data type mapping:\n+\n+\n+.. list-table:: Oracle to Presto type mapping\n+  :widths: 20, 20, 60\n+  :header-rows: 1\n+\n+  * - Oracle database type\n+    - Presto type\n+    - Notes\n+  * - ``NUMBER(p, s)``\n+    - ``DECIMAL(p, s)``\n+    -  See :ref:`number mapping`\n+  * - ``NUMBER(p)``\n+    - ``DECIMAL(p, 0)``\n+    - See :ref:`number mapping`\n+  * - ``FLOAT[(p)]``\n+    - ``DOUBLE``\n+    -\n+  * - ``BINARY_FLOAT``\n+    - ``REAL``\n+    -\n+  * - ``BINARY_DOUBLE``\n+    - ``DOUBLE``\n+    -\n+  * - ``VARCHAR2(n CHAR)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``VARCHAR2(n BYTE)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``NVARCHAR2(n)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``CHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``NCHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``CLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``NCLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``RAW(n)``\n+    - ``VARBINARY``\n+    -\n+  * - ``BLOB``\n+    - ``VARBINARY``\n+    -\n+  * - ``DATE``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p)``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p) WITH TIME ZONE``\n+    - ``TIMESTAMP WITH TIME ZONE``\n+    - See :ref:`datetime mapping`\n+\n+If an Oracle table contains a type that's not listed in the above table, an\n+error shows:\n+\n+ - An ``unsupported-type.handling-strategy`` equals ``FAIL``\n+   (default configuration), any queries on the table fail.\n+ - An ``unsupported-type.handling-strategy`` equals ``IGNORE``\n+   (default configuration), Presto no longer accesses the column.\n+ - An ``unsupported-type.handling-strategy`` equals ``CONVERT_TO_VARCHAR``\n+   (default configuration), a column value converts to an unbounded ``VARCHAR``.\n+\n+Presto to Oracle type mapping\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto supports creating tables with the following types in an Oracle database.\n+The table shows the mappings from Presto to Oracle data types:\n+\n+.. note::\n+   For types not listed in the table below, Presto can't perform the ``CREATE\n+   TABLE`` and ``AS SELECT``operations to insert info into existing\n+   tables that use ``Oracle to Presto`` type mapping.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzNDI2MA==", "bodyText": "Please remove this one.\nIt is not related for Presto to Oracle Type Mapping. I think someone copy pasted this initially incidentally.", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r481434260", "createdAt": "2020-09-01T21:12:00Z", "author": {"login": "losipiuk"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -23,47 +20,362 @@ connection properties as appropriate for your setup:\n     connection-user=root\n     connection-password=secret\n \n-Multiple Oracle Servers\n+The below configuration shows the typical default values. To update them, change\n+the properties in the catalog configuration file:\n+\n+.. code-block:: properties\n+\n+    oracle.connection-pool.max-size=30\n+    oracle.connection-pool.min-size=1\n+    oracle.connection-pool.inactive-timeout=20m\n+\n+By default, the Oracle connector uses connection pooling for performance\n+improvement. To disable connection pooling, update properties to include:\n+\n+.. code-block:: none\n+\n+    oracle.connection-pool.enabled=false\n+\n+.. note::\n+\n+    Include catalog files on all of your nodes, this requires you to restart.\n+\n+Multiple Oracle servers\n ^^^^^^^^^^^^^^^^^^^^^^^\n \n-You can have as many catalogs as you need, so if you have additional\n-Oracle servers, simply add another properties file to ``etc/catalog``\n-with a different name (making sure it ends in ``.properties``). For\n-example, if you name the property file ``sales.properties``, Presto\n-will create a catalog named ``sales`` using the configured connector.\n+If you want to connect to multiple Oracle servers, configure another instance of\n+the Oracle connector as a separate catalog.\n+\n+To add another Oracle catalog, create a new properties file. For example, if\n+you name the property file ``sales.properties``, Presto creates a catalog named\n+sales.\n \n Querying Oracle\n ---------------\n \n-The Oracle connector provides a schema for every Oracle *database*.\n-You can see the available Oracle databases by running ``SHOW SCHEMAS``::\n+The Oracle connector provides a schema for every Oracle database. Use the below\n+queries to test your setup.\n+\n+If you used a different name for your catalog properties file, use that catalog\n+name instead of ``oracle``.\n+\n+.. note::\n+    The user configuration, in the connection properties file, determines your\n+    privileges in these schemas. If the Oracle user doesn't have access to a\n+    table, you can't access it through Presto either.\n+\n+Run ``SHOW SCHEMAS`` to see the available Oracle databases::\n \n     SHOW SCHEMAS FROM oracle;\n \n-If you have a Oracle database named ``web``, you can view the tables\n-in this database by running ``SHOW TABLES``::\n+If you have an Oracle database named ``web``, run ``SHOW TABLES`` to see the\n+tables it contains::\n \n     SHOW TABLES FROM oracle.web;\n \n-You can see a list of the columns in the ``clicks`` table in the ``web`` database\n-using either of the following::\n+To see a list of the columns in the ``clicks`` table in the ``web``\n+database run either of the following::\n \n     DESCRIBE oracle.web.clicks;\n     SHOW COLUMNS FROM oracle.web.clicks;\n \n-Finally, you can access the ``clicks`` table in the ``web`` database::\n+To access the ``clicks`` table in the ``web`` database run::\n \n     SELECT * FROM oracle.web.clicks;\n \n-If you used a different name for your catalog properties file, use\n-that catalog name instead of ``oracle`` in the above examples.\n+Mapping data types between Presto and Oracle\n+--------------------------------------------\n+\n+Oracle supports types that Presto doesn't and Presto supports types that Oracle\n+doesn't. The following sections explain their type mapping.\n+\n+Oracle to Presto type mapping\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto supports selecting Oracle database types. This table shows the Oracle to\n+Presto data type mapping:\n+\n+\n+.. list-table:: Oracle to Presto type mapping\n+  :widths: 20, 20, 60\n+  :header-rows: 1\n+\n+  * - Oracle database type\n+    - Presto type\n+    - Notes\n+  * - ``NUMBER(p, s)``\n+    - ``DECIMAL(p, s)``\n+    -  See :ref:`number mapping`\n+  * - ``NUMBER(p)``\n+    - ``DECIMAL(p, 0)``\n+    - See :ref:`number mapping`\n+  * - ``FLOAT[(p)]``\n+    - ``DOUBLE``\n+    -\n+  * - ``BINARY_FLOAT``\n+    - ``REAL``\n+    -\n+  * - ``BINARY_DOUBLE``\n+    - ``DOUBLE``\n+    -\n+  * - ``VARCHAR2(n CHAR)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``VARCHAR2(n BYTE)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``NVARCHAR2(n)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``CHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``NCHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``CLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``NCLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``RAW(n)``\n+    - ``VARBINARY``\n+    -\n+  * - ``BLOB``\n+    - ``VARBINARY``\n+    -\n+  * - ``DATE``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p)``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p) WITH TIME ZONE``\n+    - ``TIMESTAMP WITH TIME ZONE``\n+    - See :ref:`datetime mapping`\n+\n+If an Oracle table contains a type that's not listed in the above table, an\n+error shows:\n+\n+ - An ``unsupported-type.handling-strategy`` equals ``FAIL``\n+   (default configuration), any queries on the table fail.\n+ - An ``unsupported-type.handling-strategy`` equals ``IGNORE``\n+   (default configuration), Presto no longer accesses the column.\n+ - An ``unsupported-type.handling-strategy`` equals ``CONVERT_TO_VARCHAR``\n+   (default configuration), a column value converts to an unbounded ``VARCHAR``.\n+\n+Presto to Oracle type mapping\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto supports creating tables with the following types in an Oracle database.\n+The table shows the mappings from Presto to Oracle data types:\n+\n+.. note::\n+   For types not listed in the table below, Presto can't perform the ``CREATE\n+   TABLE`` and ``AS SELECT``operations to insert info into existing\n+   tables that use ``Oracle to Presto`` type mapping.\n+\n+.. list-table:: Presto to Oracle Type Mapping\n+  :widths: 20, 20, 60\n+  :header-rows: 1\n+\n+  * - Presto type\n+    - Oracle database type\n+    - Notes\n+  * - ``TINYINT``\n+    - ``NUMBER(3)``\n+    -\n+  * - ``SMALLINT``\n+    - ``NUMBER(5)``\n+    -\n+  * - ``INTEGER``\n+    - ``NUMBER(10)``\n+    -\n+  * - ``BIGINT``\n+    - ``NUMBER(19)``\n+    -\n+  * - ``DECIMAL(p, s)``\n+    - ``NUMBER(p, s)``\n+    -\n+  * - ``REAL``\n+    - ``BINARY_FLOAT``\n+    -\n+  * - ``DOUBLE``\n+    - ``BINARY_DOUBLE``\n+    -\n+  * - ``VARCHAR``\n+    - ``NCLOB``\n+    -\n+  * - ``VARCHAR(n)``\n+    - ``VARCHAR2(n CHAR)`` or ``NCLOB``\n+    - See :ref:`character mapping`\n+  * - ``CHAR(n)``\n+    - ``CHAR(n CHAR)`` or ``NCLOB``\n+    - See :ref:`character mapping`\n+  * - ``VARBINARY``\n+    - ``BLOB``\n+    -\n+  * - ``DATE``\n+    - ``DATE``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP``\n+    - ``TIMESTAMP(3)``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP WITH TIME ZONE``\n+    - ``TIMESTAMP(3) WITH TIME ZONE``\n+    - See :ref:`datetime mapping`\n+\n+.. _number mapping:\n+\n+Mapping numeric types\n+^^^^^^^^^^^^^^^^^^^^^\n+\n+An Oracle ``NUMBER(p, s)`` maps to Presto's ``DECIMAL(p, s)`` except in these\n+conditions:\n+\n+ - No precision is specified for the column (example: ``NUMBER`` or\n+   ``NUMBER(*)``), unless ``oracle.number.default-scale`` is set. \n+ - Scale (``s`` ) is greater than precision. \n+ - Precision (``p`` ) is greater than 38. \n+ - Scale is negative and the difference between ``p`` and ``s`` is greater than\n+   38, unless ``oracle.number.rounding-mode`` is set to a different value than\n+   ``UNNECESSARY``. \n+\n+If a column meets any of the conditions:\n+\n+ - An ``unsupported-type.handling-strategy`` equals ``FAIL``\n+   (default configuration) any queries on the table fail.\n+ - An ``unsupported-type.handling-strategy`` equals ``IGNORE``\n+   (default configuration), Presto no longer accesses the column.\n+ - An ``unsupported-type.handling-strategy`` equals ``CONVERT_TO_VARCHAR``\n+   (default configuration), a column value converts to an unbounded ``VARCHAR``.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 274}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzNjg5MQ==", "bodyText": "I made suggestion fix here before. The rounding here is done differently.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  - ``HALF_EVEN`` - Rounding mode to round towards the\n          \n          \n            \n                    ``nearest neighbor`` unless both neighbors are\n          \n          \n            \n                    in which case rounding towards the nearest neighbor is\n          \n          \n            \n                    performed.\n          \n          \n            \n                  - ``HALF_EVEN`` - Rounding mode to round towards the\n          \n          \n            \n                    ``nearest neighbor`` unless both neighbors are\n          \n          \n            \n                    equidistant, in which case rounding towards the even neighbor is\n          \n          \n            \n                    performed.", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r481436891", "createdAt": "2020-09-01T21:17:11Z", "author": {"login": "losipiuk"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -23,47 +20,362 @@ connection properties as appropriate for your setup:\n     connection-user=root\n     connection-password=secret\n \n-Multiple Oracle Servers\n+The below configuration shows the typical default values. To update them, change\n+the properties in the catalog configuration file:\n+\n+.. code-block:: properties\n+\n+    oracle.connection-pool.max-size=30\n+    oracle.connection-pool.min-size=1\n+    oracle.connection-pool.inactive-timeout=20m\n+\n+By default, the Oracle connector uses connection pooling for performance\n+improvement. To disable connection pooling, update properties to include:\n+\n+.. code-block:: none\n+\n+    oracle.connection-pool.enabled=false\n+\n+.. note::\n+\n+    Include catalog files on all of your nodes, this requires you to restart.\n+\n+Multiple Oracle servers\n ^^^^^^^^^^^^^^^^^^^^^^^\n \n-You can have as many catalogs as you need, so if you have additional\n-Oracle servers, simply add another properties file to ``etc/catalog``\n-with a different name (making sure it ends in ``.properties``). For\n-example, if you name the property file ``sales.properties``, Presto\n-will create a catalog named ``sales`` using the configured connector.\n+If you want to connect to multiple Oracle servers, configure another instance of\n+the Oracle connector as a separate catalog.\n+\n+To add another Oracle catalog, create a new properties file. For example, if\n+you name the property file ``sales.properties``, Presto creates a catalog named\n+sales.\n \n Querying Oracle\n ---------------\n \n-The Oracle connector provides a schema for every Oracle *database*.\n-You can see the available Oracle databases by running ``SHOW SCHEMAS``::\n+The Oracle connector provides a schema for every Oracle database. Use the below\n+queries to test your setup.\n+\n+If you used a different name for your catalog properties file, use that catalog\n+name instead of ``oracle``.\n+\n+.. note::\n+    The user configuration, in the connection properties file, determines your\n+    privileges in these schemas. If the Oracle user doesn't have access to a\n+    table, you can't access it through Presto either.\n+\n+Run ``SHOW SCHEMAS`` to see the available Oracle databases::\n \n     SHOW SCHEMAS FROM oracle;\n \n-If you have a Oracle database named ``web``, you can view the tables\n-in this database by running ``SHOW TABLES``::\n+If you have an Oracle database named ``web``, run ``SHOW TABLES`` to see the\n+tables it contains::\n \n     SHOW TABLES FROM oracle.web;\n \n-You can see a list of the columns in the ``clicks`` table in the ``web`` database\n-using either of the following::\n+To see a list of the columns in the ``clicks`` table in the ``web``\n+database run either of the following::\n \n     DESCRIBE oracle.web.clicks;\n     SHOW COLUMNS FROM oracle.web.clicks;\n \n-Finally, you can access the ``clicks`` table in the ``web`` database::\n+To access the ``clicks`` table in the ``web`` database run::\n \n     SELECT * FROM oracle.web.clicks;\n \n-If you used a different name for your catalog properties file, use\n-that catalog name instead of ``oracle`` in the above examples.\n+Mapping data types between Presto and Oracle\n+--------------------------------------------\n+\n+Oracle supports types that Presto doesn't and Presto supports types that Oracle\n+doesn't. The following sections explain their type mapping.\n+\n+Oracle to Presto type mapping\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto supports selecting Oracle database types. This table shows the Oracle to\n+Presto data type mapping:\n+\n+\n+.. list-table:: Oracle to Presto type mapping\n+  :widths: 20, 20, 60\n+  :header-rows: 1\n+\n+  * - Oracle database type\n+    - Presto type\n+    - Notes\n+  * - ``NUMBER(p, s)``\n+    - ``DECIMAL(p, s)``\n+    -  See :ref:`number mapping`\n+  * - ``NUMBER(p)``\n+    - ``DECIMAL(p, 0)``\n+    - See :ref:`number mapping`\n+  * - ``FLOAT[(p)]``\n+    - ``DOUBLE``\n+    -\n+  * - ``BINARY_FLOAT``\n+    - ``REAL``\n+    -\n+  * - ``BINARY_DOUBLE``\n+    - ``DOUBLE``\n+    -\n+  * - ``VARCHAR2(n CHAR)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``VARCHAR2(n BYTE)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``NVARCHAR2(n)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``CHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``NCHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``CLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``NCLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``RAW(n)``\n+    - ``VARBINARY``\n+    -\n+  * - ``BLOB``\n+    - ``VARBINARY``\n+    -\n+  * - ``DATE``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p)``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p) WITH TIME ZONE``\n+    - ``TIMESTAMP WITH TIME ZONE``\n+    - See :ref:`datetime mapping`\n+\n+If an Oracle table contains a type that's not listed in the above table, an\n+error shows:\n+\n+ - An ``unsupported-type.handling-strategy`` equals ``FAIL``\n+   (default configuration), any queries on the table fail.\n+ - An ``unsupported-type.handling-strategy`` equals ``IGNORE``\n+   (default configuration), Presto no longer accesses the column.\n+ - An ``unsupported-type.handling-strategy`` equals ``CONVERT_TO_VARCHAR``\n+   (default configuration), a column value converts to an unbounded ``VARCHAR``.\n+\n+Presto to Oracle type mapping\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto supports creating tables with the following types in an Oracle database.\n+The table shows the mappings from Presto to Oracle data types:\n+\n+.. note::\n+   For types not listed in the table below, Presto can't perform the ``CREATE\n+   TABLE`` and ``AS SELECT``operations to insert info into existing\n+   tables that use ``Oracle to Presto`` type mapping.\n+\n+.. list-table:: Presto to Oracle Type Mapping\n+  :widths: 20, 20, 60\n+  :header-rows: 1\n+\n+  * - Presto type\n+    - Oracle database type\n+    - Notes\n+  * - ``TINYINT``\n+    - ``NUMBER(3)``\n+    -\n+  * - ``SMALLINT``\n+    - ``NUMBER(5)``\n+    -\n+  * - ``INTEGER``\n+    - ``NUMBER(10)``\n+    -\n+  * - ``BIGINT``\n+    - ``NUMBER(19)``\n+    -\n+  * - ``DECIMAL(p, s)``\n+    - ``NUMBER(p, s)``\n+    -\n+  * - ``REAL``\n+    - ``BINARY_FLOAT``\n+    -\n+  * - ``DOUBLE``\n+    - ``BINARY_DOUBLE``\n+    -\n+  * - ``VARCHAR``\n+    - ``NCLOB``\n+    -\n+  * - ``VARCHAR(n)``\n+    - ``VARCHAR2(n CHAR)`` or ``NCLOB``\n+    - See :ref:`character mapping`\n+  * - ``CHAR(n)``\n+    - ``CHAR(n CHAR)`` or ``NCLOB``\n+    - See :ref:`character mapping`\n+  * - ``VARBINARY``\n+    - ``BLOB``\n+    -\n+  * - ``DATE``\n+    - ``DATE``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP``\n+    - ``TIMESTAMP(3)``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP WITH TIME ZONE``\n+    - ``TIMESTAMP(3) WITH TIME ZONE``\n+    - See :ref:`datetime mapping`\n+\n+.. _number mapping:\n+\n+Mapping numeric types\n+^^^^^^^^^^^^^^^^^^^^^\n+\n+An Oracle ``NUMBER(p, s)`` maps to Presto's ``DECIMAL(p, s)`` except in these\n+conditions:\n+\n+ - No precision is specified for the column (example: ``NUMBER`` or\n+   ``NUMBER(*)``), unless ``oracle.number.default-scale`` is set. \n+ - Scale (``s`` ) is greater than precision. \n+ - Precision (``p`` ) is greater than 38. \n+ - Scale is negative and the difference between ``p`` and ``s`` is greater than\n+   38, unless ``oracle.number.rounding-mode`` is set to a different value than\n+   ``UNNECESSARY``. \n+\n+If a column meets any of the conditions:\n+\n+ - An ``unsupported-type.handling-strategy`` equals ``FAIL``\n+   (default configuration) any queries on the table fail.\n+ - An ``unsupported-type.handling-strategy`` equals ``IGNORE``\n+   (default configuration), Presto no longer accesses the column.\n+ - An ``unsupported-type.handling-strategy`` equals ``CONVERT_TO_VARCHAR``\n+   (default configuration), a column value converts to an unbounded ``VARCHAR``.\n+\n+If ``s`` is negative, ``NUMBER(p, s)`` maps to ``DECIMAL(p + s, 0)``.\n+\n+For Oracle ``NUMBER`` (without precision and scale), you can change\n+``oracle.number.default-scale=s`` and map the column to ``DECIMAL(38, s)``.\n+\n+.. _datetime mapping:\n+\n+Mapping datetime types\n+^^^^^^^^^^^^^^^^^^^^^^\n+\n+Selecting a timestamp with fractional second precision (``p``) greater than 3\n+truncates the fractional seconds to three digits instead of rounding it.\n+\n+Oracle ``DATE`` type may store hours, minutes, and seconds, so it is mapped\n+to Presto ``TIMESTAMP``.\n+\n+.. warning::\n+\n+  Due to date and time differences in the libraries used by Presto and the\n+  Oracle JDBC driver, attempting to insert or select a datetime value earlier\n+  than ``1582-10-15`` results in an incorrect date inserted.\n+\n+.. _character mapping:\n+\n+Mapping character types\n+^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto's ``VARCHAR(n)`` maps to ``VARCHAR2(n CHAR)`` if ``n`` is no greater than\n+4000. A larger or unbounded ``VARCHAR`` maps to ``NCLOB``.\n+\n+Presto's ``CHAR(n)`` maps to ``CHAR(n CHAR)`` if ``n`` is no greater than 2000.\n+A larger ``CHAR`` maps to ``NCLOB``.\n+\n+Using ``CREATE TABLE AS`` to create an ``NCLOB`` column from a ``CHAR`` value\n+removes the trailing spaces from the initial values for the column. Inserting\n+``CHAR`` values into existing ``NCLOB`` columns keeps the trailing spaces. For\n+example::\n+\n+    presto> CREATE TABLE vals AS SELECT CAST('A' as CHAR(2001)) col;\n+    presto> INSERT INTO vals (col) VALUES (CAST('BB' as CHAR(2001)));\n+    presto> SELECT LENGTH(col) FROM vals;\n+    2001\n+    1\n+\n+Attempting to write a ``CHAR`` that doesn't fit in the column's actual size\n+fails. This is also true for the equivalent ``VARCHAR`` types.\n+\n+\n+Type mapping configuration properties\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+.. list-table:: Type Mapping Properties\n+  :widths: 20, 20, 50, 10\n+  :header-rows: 1\n+\n+  * - Configuration property name\n+    - Session property name\n+    - Description\n+    - Default\n+  * - ``unsupported-type.handling-strategy``\n+    - ``unsupported_type_handling_strategy``\n+    - Configures how unsupported column data types are handled:\n+\n+      - ``IGNORE`` - column is not accessible.\n+      - ``CONVERT_TO_VARCHAR`` - column is converted to unbounded ``VARCHAR``.\n+\n+    - ``IGNORE``\n+  * - ``oracle.number.default-scale``\n+    - ``number_default_scale``               \n+    - Default Presto ``DECIMAL`` scale for Oracle ``NUMBER`` (without precision \n+      and scale) date type. When not set then such column is treated as not \n+      supported.\n+    - not set\n+  * - ``oracle.number.rounding-mode``\n+    - ``number_rounding_mode``\n+    - Rounding mode for the Oracle ``NUMBER`` data type. This is useful when \n+      Oracle ``NUMBER`` data type specifies higher scale than is supported in \n+      Presto. Possible values are:\n+\n+      - ``UNNECESSARY`` - Rounding mode to assert that the \n+        requested operation has an exact result, \n+        hence no rounding is necessary.\n+      - ``CEILING`` - Rounding mode to round towards\n+        positive infinity.\n+      - ``FLOOR`` - Rounding mode to round towards negative\n+        infinity.\n+      - ``HALF_DOWN`` - Rounding mode to round towards\n+        ``nearest neighbor`` unless both neighbors are\n+        equidistant, in which case rounding down is used.\n+      - ``HALF_EVEN`` - Rounding mode to round towards the\n+        ``nearest neighbor`` unless both neighbors are\n+        in which case rounding towards the nearest neighbor is\n+        performed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 368}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMjQzMTI1", "url": "https://github.com/trinodb/trino/pull/5014#pullrequestreview-481243125", "createdAt": "2020-09-02T19:41:22Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOTo0MToyMlrOHMArCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOTo0MToyMlrOHMArCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM1NTk3OQ==", "bodyText": "This section renders incorrectly:", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r482355979", "createdAt": "2020-09-02T19:41:22Z", "author": {"login": "losipiuk"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -23,47 +20,353 @@ connection properties as appropriate for your setup:\n     connection-user=root\n     connection-password=secret\n \n-Multiple Oracle Servers\n+By default, the Oracle connector uses connection pooling for performance\n+improvement. The below configuration shows the typical default values. To update\n+them, change the properties in the catalog configuration file:\n+\n+.. code-block:: properties\n+\n+    oracle.connection-pool.max-size=30\n+    oracle.connection-pool.min-size=1\n+    oracle.connection-pool.inactive-timeout=20m\n+\n+To disable connection pooling, update properties to include:\n+\n+.. code-block:: none\n+\n+    oracle.connection-pool.enabled=false\n+\n+.. note::\n+\n+    Include catalog files on all of your nodes, this requires you to restart.\n+\n+Multiple Oracle servers\n ^^^^^^^^^^^^^^^^^^^^^^^\n \n-You can have as many catalogs as you need, so if you have additional\n-Oracle servers, simply add another properties file to ``etc/catalog``\n-with a different name (making sure it ends in ``.properties``). For\n-example, if you name the property file ``sales.properties``, Presto\n-will create a catalog named ``sales`` using the configured connector.\n+If you want to connect to multiple Oracle servers, configure another instance of\n+the Oracle connector as a separate catalog.\n+\n+To add another Oracle catalog, create a new properties file. For example, if\n+you name the property file ``sales.properties``, Presto creates a catalog named\n+sales.\n \n Querying Oracle\n ---------------\n \n-The Oracle connector provides a schema for every Oracle *database*.\n-You can see the available Oracle databases by running ``SHOW SCHEMAS``::\n+The Oracle connector provides a schema for every Oracle database. Use the below\n+queries to test your setup.\n+\n+If you used a different name for your catalog properties file, use that catalog\n+name instead of ``oracle``.\n+\n+.. note::\n+    The user configuration, in the connection properties file, determines your\n+    privileges in these schemas. If the Oracle user doesn't have access to a\n+    table, you can't access it through Presto either.\n+\n+Run ``SHOW SCHEMAS`` to see the available Oracle databases::\n \n     SHOW SCHEMAS FROM oracle;\n \n-If you have a Oracle database named ``web``, you can view the tables\n-in this database by running ``SHOW TABLES``::\n+If you have an Oracle database named ``web``, run ``SHOW TABLES`` to see the\n+tables it contains::\n \n     SHOW TABLES FROM oracle.web;\n \n-You can see a list of the columns in the ``clicks`` table in the ``web`` database\n-using either of the following::\n+To see a list of the columns in the ``clicks`` table in the ``web``\n+database run either of the following::\n \n     DESCRIBE oracle.web.clicks;\n     SHOW COLUMNS FROM oracle.web.clicks;\n \n-Finally, you can access the ``clicks`` table in the ``web`` database::\n+To access the ``clicks`` table in the ``web`` database run::\n \n     SELECT * FROM oracle.web.clicks;\n \n-If you used a different name for your catalog properties file, use\n-that catalog name instead of ``oracle`` in the above examples.\n+Mapping data types between Presto and Oracle\n+--------------------------------------------\n+\n+Oracle supports types that Presto doesn't and Presto supports types that Oracle\n+doesn't. The following sections explain their type mapping.\n+\n+Oracle to Presto type mapping\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto supports selecting Oracle database types. This table shows the Oracle to\n+Presto data type mapping:\n+\n+\n+.. list-table:: Oracle to Presto type mapping\n+  :widths: 20, 20, 60\n+  :header-rows: 1\n+\n+  * - Oracle database type\n+    - Presto type\n+    - Notes\n+  * - ``NUMBER(p, s)``\n+    - ``DECIMAL(p, s)``\n+    -  See :ref:`number mapping`\n+  * - ``NUMBER(p)``\n+    - ``DECIMAL(p, 0)``\n+    - See :ref:`number mapping`\n+  * - ``FLOAT[(p)]``\n+    - ``DOUBLE``\n+    -\n+  * - ``BINARY_FLOAT``\n+    - ``REAL``\n+    -\n+  * - ``BINARY_DOUBLE``\n+    - ``DOUBLE``\n+    -\n+  * - ``VARCHAR2(n CHAR)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``VARCHAR2(n BYTE)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``NVARCHAR2(n)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``CHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``NCHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``CLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``NCLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``RAW(n)``\n+    - ``VARBINARY``\n+    -\n+  * - ``BLOB``\n+    - ``VARBINARY``\n+    -\n+  * - ``DATE``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p)``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p) WITH TIME ZONE``\n+    - ``TIMESTAMP WITH TIME ZONE``\n+    - See :ref:`datetime mapping`\n+\n+If an Oracle table contains a type that's not listed in the above table, an\n+error shows:\n+\n+ - An ``unsupported-type.handling-strategy`` equals ``FAIL``\n+   (default configuration), any queries on the table fail.\n+ - An ``unsupported-type.handling-strategy`` equals ``IGNORE``\n+   (default configuration), Presto no longer accesses the column.\n+ - An ``unsupported-type.handling-strategy`` equals ``CONVERT_TO_VARCHAR``\n+   (default configuration), a column value converts to an unbounded ``VARCHAR``.\n+\n+Presto to Oracle type mapping\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto supports creating tables with the following types in an Oracle database.\n+The table shows the mappings from Presto to Oracle data types:\n+\n+.. note::\n+   For types not listed in the table below, Presto can't perform the ``CREATE\n+   TABLE <table> AS SELECT`` operations. When data is inserted into existing\n+   tables ``Oracle to Presto`` type mapping is used.\n+\n+.. list-table:: Presto to Oracle Type Mapping\n+  :widths: 20, 20, 60\n+  :header-rows: 1\n+\n+  * - Presto type\n+    - Oracle database type\n+    - Notes\n+  * - ``TINYINT``\n+    - ``NUMBER(3)``\n+    -\n+  * - ``SMALLINT``\n+    - ``NUMBER(5)``\n+    -\n+  * - ``INTEGER``\n+    - ``NUMBER(10)``\n+    -\n+  * - ``BIGINT``\n+    - ``NUMBER(19)``\n+    -\n+  * - ``DECIMAL(p, s)``\n+    - ``NUMBER(p, s)``\n+    -\n+  * - ``REAL``\n+    - ``BINARY_FLOAT``\n+    -\n+  * - ``DOUBLE``\n+    - ``BINARY_DOUBLE``\n+    -\n+  * - ``VARCHAR``\n+    - ``NCLOB``\n+    -\n+  * - ``VARCHAR(n)``\n+    - ``VARCHAR2(n CHAR)`` or ``NCLOB``\n+    - See :ref:`character mapping`\n+  * - ``CHAR(n)``\n+    - ``CHAR(n CHAR)`` or ``NCLOB``\n+    - See :ref:`character mapping`\n+  * - ``VARBINARY``\n+    - ``BLOB``\n+    -\n+  * - ``DATE``\n+    - ``DATE``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP``\n+    - ``TIMESTAMP(3)``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP WITH TIME ZONE``\n+    - ``TIMESTAMP(3) WITH TIME ZONE``\n+    - See :ref:`datetime mapping`\n+\n+.. _number mapping:\n+\n+Mapping numeric types\n+^^^^^^^^^^^^^^^^^^^^^\n+\n+An Oracle ``NUMBER(p, s)`` maps to Presto's ``DECIMAL(p, s)`` except in these", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 256}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NDk5NTQ4", "url": "https://github.com/trinodb/trino/pull/5014#pullrequestreview-484499548", "createdAt": "2020-09-08T21:17:51Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NTI0NTYy", "url": "https://github.com/trinodb/trino/pull/5014#pullrequestreview-484524562", "createdAt": "2020-09-08T22:07:40Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMjowNzo0MFrOHOvoRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMjowNzo0MFrOHOvoRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIyMjQ2OQ==", "bodyText": "Using a contraction here looks weird, since this is a formal statement. Contractions are fine in prose, but for a short single statement like this, I don't see a benefit to using it.", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r485222469", "createdAt": "2020-09-08T22:07:40Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -23,47 +20,354 @@ connection properties as appropriate for your setup:\n     connection-user=root\n     connection-password=secret\n \n-Multiple Oracle Servers\n+By default, the Oracle connector uses connection pooling for performance\n+improvement. The below configuration shows the typical default values. To update\n+them, change the properties in the catalog configuration file:\n+\n+.. code-block:: properties\n+\n+    oracle.connection-pool.max-size=30\n+    oracle.connection-pool.min-size=1\n+    oracle.connection-pool.inactive-timeout=20m\n+\n+To disable connection pooling, update properties to include:\n+\n+.. code-block:: none\n+\n+    oracle.connection-pool.enabled=false\n+\n+.. note::\n+\n+    Include catalog files on all of your nodes, this requires you to restart.\n+\n+Multiple Oracle servers\n ^^^^^^^^^^^^^^^^^^^^^^^\n \n-You can have as many catalogs as you need, so if you have additional\n-Oracle servers, simply add another properties file to ``etc/catalog``\n-with a different name (making sure it ends in ``.properties``). For\n-example, if you name the property file ``sales.properties``, Presto\n-will create a catalog named ``sales`` using the configured connector.\n+If you want to connect to multiple Oracle servers, configure another instance of\n+the Oracle connector as a separate catalog.\n+\n+To add another Oracle catalog, create a new properties file. For example, if\n+you name the property file ``sales.properties``, Presto creates a catalog named\n+sales.\n \n Querying Oracle\n ---------------\n \n-The Oracle connector provides a schema for every Oracle *database*.\n-You can see the available Oracle databases by running ``SHOW SCHEMAS``::\n+The Oracle connector provides a schema for every Oracle database. Use the below\n+queries to test your setup.\n+\n+If you used a different name for your catalog properties file, use that catalog\n+name instead of ``oracle``.\n+\n+.. note::\n+    The user configuration, in the connection properties file, determines your\n+    privileges in these schemas. If the Oracle user doesn't have access to a\n+    table, you can't access it through Presto either.\n+\n+Run ``SHOW SCHEMAS`` to see the available Oracle databases::\n \n     SHOW SCHEMAS FROM oracle;\n \n-If you have a Oracle database named ``web``, you can view the tables\n-in this database by running ``SHOW TABLES``::\n+If you have an Oracle database named ``web``, run ``SHOW TABLES`` to see the\n+tables it contains::\n \n     SHOW TABLES FROM oracle.web;\n \n-You can see a list of the columns in the ``clicks`` table in the ``web`` database\n-using either of the following::\n+To see a list of the columns in the ``clicks`` table in the ``web``\n+database run either of the following::\n \n     DESCRIBE oracle.web.clicks;\n     SHOW COLUMNS FROM oracle.web.clicks;\n \n-Finally, you can access the ``clicks`` table in the ``web`` database::\n+To access the ``clicks`` table in the ``web`` database run::\n \n     SELECT * FROM oracle.web.clicks;\n \n-If you used a different name for your catalog properties file, use\n-that catalog name instead of ``oracle`` in the above examples.\n+Mapping data types between Presto and Oracle\n+--------------------------------------------\n+\n+Oracle supports types that Presto doesn't and Presto supports types that Oracle\n+doesn't. The following sections explain their type mapping.\n+\n+Oracle to Presto type mapping\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto supports selecting Oracle database types. This table shows the Oracle to\n+Presto data type mapping:\n+\n+\n+.. list-table:: Oracle to Presto type mapping\n+  :widths: 20, 20, 60\n+  :header-rows: 1\n+\n+  * - Oracle database type\n+    - Presto type\n+    - Notes\n+  * - ``NUMBER(p, s)``\n+    - ``DECIMAL(p, s)``\n+    -  See :ref:`number mapping`\n+  * - ``NUMBER(p)``\n+    - ``DECIMAL(p, 0)``\n+    - See :ref:`number mapping`\n+  * - ``FLOAT[(p)]``\n+    - ``DOUBLE``\n+    -\n+  * - ``BINARY_FLOAT``\n+    - ``REAL``\n+    -\n+  * - ``BINARY_DOUBLE``\n+    - ``DOUBLE``\n+    -\n+  * - ``VARCHAR2(n CHAR)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``VARCHAR2(n BYTE)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``NVARCHAR2(n)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``CHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``NCHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``CLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``NCLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``RAW(n)``\n+    - ``VARBINARY``\n+    -\n+  * - ``BLOB``\n+    - ``VARBINARY``\n+    -\n+  * - ``DATE``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p)``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p) WITH TIME ZONE``\n+    - ``TIMESTAMP WITH TIME ZONE``\n+    - See :ref:`datetime mapping`\n+\n+Use the default configureation property, ``unsupported-type.handling``, to specify\n+Presto behavior if an Oracle table uses a type not listed in the above table.\n+For example:\n+\n+- If ``unsupported-type.handling`` is set to ``FAIL``, then the\n+  querying of unsupported tables fail.\n+- If ``unsupported-type.handling`` is set to ``IGNORE``, \n+  then you can't see the unsupported types in Presto.\n+- If ``unsupported-type.handling`` is set to ``CONVERT_TO_VARCHAR`` \n+  column is exposed as unbounded ``VARCHAR``.\n+\n+Presto to Oracle type mapping\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto supports creating tables with the following types in an Oracle database.\n+The table shows the mappings from Presto to Oracle data types:\n+\n+.. note::\n+   For types not listed in the table below, Presto can't perform the ``CREATE\n+   TABLE <table> AS SELECT`` operations. When data is inserted into existing\n+   tables ``Oracle to Presto`` type mapping is used.\n+\n+.. list-table:: Presto to Oracle Type Mapping\n+  :widths: 20, 20, 60\n+  :header-rows: 1\n+\n+  * - Presto type\n+    - Oracle database type\n+    - Notes\n+  * - ``TINYINT``\n+    - ``NUMBER(3)``\n+    -\n+  * - ``SMALLINT``\n+    - ``NUMBER(5)``\n+    -\n+  * - ``INTEGER``\n+    - ``NUMBER(10)``\n+    -\n+  * - ``BIGINT``\n+    - ``NUMBER(19)``\n+    -\n+  * - ``DECIMAL(p, s)``\n+    - ``NUMBER(p, s)``\n+    -\n+  * - ``REAL``\n+    - ``BINARY_FLOAT``\n+    -\n+  * - ``DOUBLE``\n+    - ``BINARY_DOUBLE``\n+    -\n+  * - ``VARCHAR``\n+    - ``NCLOB``\n+    -\n+  * - ``VARCHAR(n)``\n+    - ``VARCHAR2(n CHAR)`` or ``NCLOB``\n+    - See :ref:`character mapping`\n+  * - ``CHAR(n)``\n+    - ``CHAR(n CHAR)`` or ``NCLOB``\n+    - See :ref:`character mapping`\n+  * - ``VARBINARY``\n+    - ``BLOB``\n+    -\n+  * - ``DATE``\n+    - ``DATE``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP``\n+    - ``TIMESTAMP(3)``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP WITH TIME ZONE``\n+    - ``TIMESTAMP(3) WITH TIME ZONE``\n+    - See :ref:`datetime mapping`\n+\n+.. _number mapping:\n+\n+Mapping numeric types\n+^^^^^^^^^^^^^^^^^^^^^\n+\n+An Oracle ``NUMBER(p, s)`` maps to Presto's ``DECIMAL(p, s)`` except in these\n+conditions:\n+\n+- No precision is specified for the column (example: ``NUMBER`` or\n+  ``NUMBER(*)``), unless ``oracle.number.default-scale`` is set. \n+- Scale (``s`` ) is greater than precision. \n+- Precision (``p`` ) is greater than 38. \n+- Scale is negative and the difference between ``p`` and ``s`` is greater than\n+  38, unless ``oracle.number.rounding-mode`` is set to a different value than\n+  ``UNNECESSARY``. \n+   \n+If ``s`` is negative, ``NUMBER(p, s)`` maps to ``DECIMAL(p + s, 0)``.\n+\n+For Oracle ``NUMBER`` (without precision and scale), you can change\n+``oracle.number.default-scale=s`` and map the column to ``DECIMAL(38, s)``.\n+\n+.. _datetime mapping:\n+\n+Mapping datetime types\n+^^^^^^^^^^^^^^^^^^^^^^\n+\n+Selecting a timestamp with fractional second precision (``p``) greater than 3\n+truncates the fractional seconds to three digits instead of rounding it.\n+\n+Oracle ``DATE`` type may store hours, minutes, and seconds, so it is mapped\n+to Presto ``TIMESTAMP``.\n+\n+.. warning::\n+\n+  Due to date and time differences in the libraries used by Presto and the\n+  Oracle JDBC driver, attempting to insert or select a datetime value earlier\n+  than ``1582-10-15`` results in an incorrect date inserted.\n+\n+.. _character mapping:\n+\n+Mapping character types\n+^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto's ``VARCHAR(n)`` maps to ``VARCHAR2(n CHAR)`` if ``n`` is no greater than\n+4000. A larger or unbounded ``VARCHAR`` maps to ``NCLOB``.\n+\n+Presto's ``CHAR(n)`` maps to ``CHAR(n CHAR)`` if ``n`` is no greater than 2000.\n+A larger ``CHAR`` maps to ``NCLOB``.\n+\n+Using ``CREATE TABLE AS`` to create an ``NCLOB`` column from a ``CHAR`` value\n+removes the trailing spaces from the initial values for the column. Inserting\n+``CHAR`` values into existing ``NCLOB`` columns keeps the trailing spaces. For\n+example::\n+\n+    presto> CREATE TABLE vals AS SELECT CAST('A' as CHAR(2001)) col;\n+    presto> INSERT INTO vals (col) VALUES (CAST('BB' as CHAR(2001)));\n+    presto> SELECT LENGTH(col) FROM vals;\n+    2001\n+    1\n+\n+Attempting to write a ``CHAR`` that doesn't fit in the column's actual size\n+fails. This is also true for the equivalent ``VARCHAR`` types.\n+\n+\n+Type mapping configuration properties\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+.. list-table:: Type Mapping Properties\n+  :widths: 20, 20, 50, 10\n+  :header-rows: 1\n+\n+  * - Configuration property name\n+    - Session property name\n+    - Description\n+    - Default\n+  * - ``unsupported-type.handling-strategy``\n+    - ``unsupported_type_handling_strategy``\n+    - Configures how unsupported column data types are handled:\n+\n+      - ``IGNORE`` - column is not accessible.\n+      - ``CONVERT_TO_VARCHAR`` - column is converted to unbounded ``VARCHAR``.\n+\n+    - ``IGNORE``\n+  * - ``oracle.number.default-scale``\n+    - ``number_default_scale``               \n+    - Default Presto ``DECIMAL`` scale for Oracle ``NUMBER`` (without precision \n+      and scale) date type. When not set then such column is treated as not \n+      supported.\n+    - not set\n+  * - ``oracle.number.rounding-mode``\n+    - ``number_rounding_mode``\n+    - Rounding mode for the Oracle ``NUMBER`` data type. This is useful when \n+      Oracle ``NUMBER`` data type specifies higher scale than is supported in \n+      Presto. Possible values are:\n+\n+      - ``UNNECESSARY`` - Rounding mode to assert that the \n+        requested operation has an exact result, \n+        hence no rounding is necessary.\n+      - ``CEILING`` - Rounding mode to round towards\n+        positive infinity.\n+      - ``FLOOR`` - Rounding mode to round towards negative\n+        infinity.\n+      - ``HALF_DOWN`` - Rounding mode to round towards\n+        ``nearest neighbor`` unless both neighbors are\n+        equidistant, in which case rounding down is used.\n+      - ``HALF_EVEN`` - Rounding mode to round towards the\n+        ``nearest neighbor`` unless both neighbors are equidistant,\n+        in which case rounding towards the even neighbor is\n+        performed.\n+      - ``HALF_UP`` - Rounding mode to round towards\n+        ``nearest neighbor`` unless both neighbors are\n+        equidistant, in which case rounding up is used\n+      - ``UP`` - Rounding mode to round towards zero.\n+      - ``DOWN`` - Rounding mode to round towards zero.\n+\n+    - ``UNNECESSARY``\n+\n+Synonyms\n+--------\n+\n+Based on performance reasons, Presto disables support for Oracle ``SYNONYM``. To\n+include ``SYNONYM``, add the following: \n+\n+.. code-block:: none\n+\n+    oracle.synonyms.enabled=true\n+\n+Pushdown\n+--------\n+\n+The connector supports :doc:`pushdown </optimizer/pushdown>` for optimized query\n+processing.\n \n Limitations\n -----------\n \n-The following SQL statements are not yet supported:\n+The following SQL statements aren't supported:", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 389}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NTI0OTk5", "url": "https://github.com/trinodb/trino/pull/5014#pullrequestreview-484524999", "createdAt": "2020-09-08T22:08:41Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMjowODo0MVrOHOvprw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMjoxNjozNlrOHOv0og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIyMjgzMQ==", "bodyText": "Don't wrap a single word as it looks funny and makes it harder to read. There is no strict line length limit.", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r485222831", "createdAt": "2020-09-08T22:08:41Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -23,47 +20,354 @@ connection properties as appropriate for your setup:\n     connection-user=root\n     connection-password=secret\n \n-Multiple Oracle Servers\n+By default, the Oracle connector uses connection pooling for performance\n+improvement. The below configuration shows the typical default values. To update\n+them, change the properties in the catalog configuration file:\n+\n+.. code-block:: properties\n+\n+    oracle.connection-pool.max-size=30\n+    oracle.connection-pool.min-size=1\n+    oracle.connection-pool.inactive-timeout=20m\n+\n+To disable connection pooling, update properties to include:\n+\n+.. code-block:: none\n+\n+    oracle.connection-pool.enabled=false\n+\n+.. note::\n+\n+    Include catalog files on all of your nodes, this requires you to restart.\n+\n+Multiple Oracle servers\n ^^^^^^^^^^^^^^^^^^^^^^^\n \n-You can have as many catalogs as you need, so if you have additional\n-Oracle servers, simply add another properties file to ``etc/catalog``\n-with a different name (making sure it ends in ``.properties``). For\n-example, if you name the property file ``sales.properties``, Presto\n-will create a catalog named ``sales`` using the configured connector.\n+If you want to connect to multiple Oracle servers, configure another instance of\n+the Oracle connector as a separate catalog.\n+\n+To add another Oracle catalog, create a new properties file. For example, if\n+you name the property file ``sales.properties``, Presto creates a catalog named\n+sales.\n \n Querying Oracle\n ---------------\n \n-The Oracle connector provides a schema for every Oracle *database*.\n-You can see the available Oracle databases by running ``SHOW SCHEMAS``::\n+The Oracle connector provides a schema for every Oracle database. Use the below\n+queries to test your setup.\n+\n+If you used a different name for your catalog properties file, use that catalog\n+name instead of ``oracle``.\n+\n+.. note::\n+    The user configuration, in the connection properties file, determines your\n+    privileges in these schemas. If the Oracle user doesn't have access to a\n+    table, you can't access it through Presto either.\n+\n+Run ``SHOW SCHEMAS`` to see the available Oracle databases::\n \n     SHOW SCHEMAS FROM oracle;\n \n-If you have a Oracle database named ``web``, you can view the tables\n-in this database by running ``SHOW TABLES``::\n+If you have an Oracle database named ``web``, run ``SHOW TABLES`` to see the\n+tables it contains::\n \n     SHOW TABLES FROM oracle.web;\n \n-You can see a list of the columns in the ``clicks`` table in the ``web`` database\n-using either of the following::\n+To see a list of the columns in the ``clicks`` table in the ``web``\n+database run either of the following::\n \n     DESCRIBE oracle.web.clicks;\n     SHOW COLUMNS FROM oracle.web.clicks;\n \n-Finally, you can access the ``clicks`` table in the ``web`` database::\n+To access the ``clicks`` table in the ``web`` database run::\n \n     SELECT * FROM oracle.web.clicks;\n \n-If you used a different name for your catalog properties file, use\n-that catalog name instead of ``oracle`` in the above examples.\n+Mapping data types between Presto and Oracle\n+--------------------------------------------\n+\n+Oracle supports types that Presto doesn't and Presto supports types that Oracle\n+doesn't. The following sections explain their type mapping.\n+\n+Oracle to Presto type mapping\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto supports selecting Oracle database types. This table shows the Oracle to\n+Presto data type mapping:\n+\n+\n+.. list-table:: Oracle to Presto type mapping\n+  :widths: 20, 20, 60\n+  :header-rows: 1\n+\n+  * - Oracle database type\n+    - Presto type\n+    - Notes\n+  * - ``NUMBER(p, s)``\n+    - ``DECIMAL(p, s)``\n+    -  See :ref:`number mapping`\n+  * - ``NUMBER(p)``\n+    - ``DECIMAL(p, 0)``\n+    - See :ref:`number mapping`\n+  * - ``FLOAT[(p)]``\n+    - ``DOUBLE``\n+    -\n+  * - ``BINARY_FLOAT``\n+    - ``REAL``\n+    -\n+  * - ``BINARY_DOUBLE``\n+    - ``DOUBLE``\n+    -\n+  * - ``VARCHAR2(n CHAR)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``VARCHAR2(n BYTE)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``NVARCHAR2(n)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``CHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``NCHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``CLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``NCLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``RAW(n)``\n+    - ``VARBINARY``\n+    -\n+  * - ``BLOB``\n+    - ``VARBINARY``\n+    -\n+  * - ``DATE``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p)``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p) WITH TIME ZONE``\n+    - ``TIMESTAMP WITH TIME ZONE``\n+    - See :ref:`datetime mapping`\n+\n+Use the default configureation property, ``unsupported-type.handling``, to specify\n+Presto behavior if an Oracle table uses a type not listed in the above table.\n+For example:\n+\n+- If ``unsupported-type.handling`` is set to ``FAIL``, then the\n+  querying of unsupported tables fail.\n+- If ``unsupported-type.handling`` is set to ``IGNORE``, \n+  then you can't see the unsupported types in Presto.\n+- If ``unsupported-type.handling`` is set to ``CONVERT_TO_VARCHAR`` \n+  column is exposed as unbounded ``VARCHAR``.\n+\n+Presto to Oracle type mapping\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto supports creating tables with the following types in an Oracle database.\n+The table shows the mappings from Presto to Oracle data types:\n+\n+.. note::\n+   For types not listed in the table below, Presto can't perform the ``CREATE\n+   TABLE <table> AS SELECT`` operations. When data is inserted into existing\n+   tables ``Oracle to Presto`` type mapping is used.\n+\n+.. list-table:: Presto to Oracle Type Mapping\n+  :widths: 20, 20, 60\n+  :header-rows: 1\n+\n+  * - Presto type\n+    - Oracle database type\n+    - Notes\n+  * - ``TINYINT``\n+    - ``NUMBER(3)``\n+    -\n+  * - ``SMALLINT``\n+    - ``NUMBER(5)``\n+    -\n+  * - ``INTEGER``\n+    - ``NUMBER(10)``\n+    -\n+  * - ``BIGINT``\n+    - ``NUMBER(19)``\n+    -\n+  * - ``DECIMAL(p, s)``\n+    - ``NUMBER(p, s)``\n+    -\n+  * - ``REAL``\n+    - ``BINARY_FLOAT``\n+    -\n+  * - ``DOUBLE``\n+    - ``BINARY_DOUBLE``\n+    -\n+  * - ``VARCHAR``\n+    - ``NCLOB``\n+    -\n+  * - ``VARCHAR(n)``\n+    - ``VARCHAR2(n CHAR)`` or ``NCLOB``\n+    - See :ref:`character mapping`\n+  * - ``CHAR(n)``\n+    - ``CHAR(n CHAR)`` or ``NCLOB``\n+    - See :ref:`character mapping`\n+  * - ``VARBINARY``\n+    - ``BLOB``\n+    -\n+  * - ``DATE``\n+    - ``DATE``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP``\n+    - ``TIMESTAMP(3)``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP WITH TIME ZONE``\n+    - ``TIMESTAMP(3) WITH TIME ZONE``\n+    - See :ref:`datetime mapping`\n+\n+.. _number mapping:\n+\n+Mapping numeric types\n+^^^^^^^^^^^^^^^^^^^^^\n+\n+An Oracle ``NUMBER(p, s)`` maps to Presto's ``DECIMAL(p, s)`` except in these\n+conditions:\n+\n+- No precision is specified for the column (example: ``NUMBER`` or\n+  ``NUMBER(*)``), unless ``oracle.number.default-scale`` is set. \n+- Scale (``s`` ) is greater than precision. \n+- Precision (``p`` ) is greater than 38. \n+- Scale is negative and the difference between ``p`` and ``s`` is greater than\n+  38, unless ``oracle.number.rounding-mode`` is set to a different value than\n+  ``UNNECESSARY``. \n+   \n+If ``s`` is negative, ``NUMBER(p, s)`` maps to ``DECIMAL(p + s, 0)``.\n+\n+For Oracle ``NUMBER`` (without precision and scale), you can change\n+``oracle.number.default-scale=s`` and map the column to ``DECIMAL(38, s)``.\n+\n+.. _datetime mapping:\n+\n+Mapping datetime types\n+^^^^^^^^^^^^^^^^^^^^^^\n+\n+Selecting a timestamp with fractional second precision (``p``) greater than 3\n+truncates the fractional seconds to three digits instead of rounding it.\n+\n+Oracle ``DATE`` type may store hours, minutes, and seconds, so it is mapped\n+to Presto ``TIMESTAMP``.\n+\n+.. warning::\n+\n+  Due to date and time differences in the libraries used by Presto and the\n+  Oracle JDBC driver, attempting to insert or select a datetime value earlier\n+  than ``1582-10-15`` results in an incorrect date inserted.\n+\n+.. _character mapping:\n+\n+Mapping character types\n+^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto's ``VARCHAR(n)`` maps to ``VARCHAR2(n CHAR)`` if ``n`` is no greater than\n+4000. A larger or unbounded ``VARCHAR`` maps to ``NCLOB``.\n+\n+Presto's ``CHAR(n)`` maps to ``CHAR(n CHAR)`` if ``n`` is no greater than 2000.\n+A larger ``CHAR`` maps to ``NCLOB``.\n+\n+Using ``CREATE TABLE AS`` to create an ``NCLOB`` column from a ``CHAR`` value\n+removes the trailing spaces from the initial values for the column. Inserting\n+``CHAR`` values into existing ``NCLOB`` columns keeps the trailing spaces. For\n+example::\n+\n+    presto> CREATE TABLE vals AS SELECT CAST('A' as CHAR(2001)) col;\n+    presto> INSERT INTO vals (col) VALUES (CAST('BB' as CHAR(2001)));\n+    presto> SELECT LENGTH(col) FROM vals;\n+    2001\n+    1\n+\n+Attempting to write a ``CHAR`` that doesn't fit in the column's actual size\n+fails. This is also true for the equivalent ``VARCHAR`` types.\n+\n+\n+Type mapping configuration properties\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+.. list-table:: Type Mapping Properties\n+  :widths: 20, 20, 50, 10\n+  :header-rows: 1\n+\n+  * - Configuration property name\n+    - Session property name\n+    - Description\n+    - Default\n+  * - ``unsupported-type.handling-strategy``\n+    - ``unsupported_type_handling_strategy``\n+    - Configures how unsupported column data types are handled:\n+\n+      - ``IGNORE`` - column is not accessible.\n+      - ``CONVERT_TO_VARCHAR`` - column is converted to unbounded ``VARCHAR``.\n+\n+    - ``IGNORE``\n+  * - ``oracle.number.default-scale``\n+    - ``number_default_scale``               \n+    - Default Presto ``DECIMAL`` scale for Oracle ``NUMBER`` (without precision \n+      and scale) date type. When not set then such column is treated as not \n+      supported.\n+    - not set\n+  * - ``oracle.number.rounding-mode``\n+    - ``number_rounding_mode``\n+    - Rounding mode for the Oracle ``NUMBER`` data type. This is useful when \n+      Oracle ``NUMBER`` data type specifies higher scale than is supported in \n+      Presto. Possible values are:\n+\n+      - ``UNNECESSARY`` - Rounding mode to assert that the \n+        requested operation has an exact result, \n+        hence no rounding is necessary.\n+      - ``CEILING`` - Rounding mode to round towards\n+        positive infinity.\n+      - ``FLOOR`` - Rounding mode to round towards negative\n+        infinity.\n+      - ``HALF_DOWN`` - Rounding mode to round towards\n+        ``nearest neighbor`` unless both neighbors are\n+        equidistant, in which case rounding down is used.\n+      - ``HALF_EVEN`` - Rounding mode to round towards the\n+        ``nearest neighbor`` unless both neighbors are equidistant,\n+        in which case rounding towards the even neighbor is\n+        performed.\n+      - ``HALF_UP`` - Rounding mode to round towards\n+        ``nearest neighbor`` unless both neighbors are\n+        equidistant, in which case rounding up is used\n+      - ``UP`` - Rounding mode to round towards zero.\n+      - ``DOWN`` - Rounding mode to round towards zero.\n+\n+    - ``UNNECESSARY``\n+\n+Synonyms\n+--------\n+\n+Based on performance reasons, Presto disables support for Oracle ``SYNONYM``. To\n+include ``SYNONYM``, add the following: \n+\n+.. code-block:: none\n+\n+    oracle.synonyms.enabled=true\n+\n+Pushdown\n+--------\n+\n+The connector supports :doc:`pushdown </optimizer/pushdown>` for optimized query\n+processing.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 383}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIyMjg0OQ==", "bodyText": "\"add the following configuration property\"", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r485222849", "createdAt": "2020-09-08T22:08:44Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -23,47 +20,354 @@ connection properties as appropriate for your setup:\n     connection-user=root\n     connection-password=secret\n \n-Multiple Oracle Servers\n+By default, the Oracle connector uses connection pooling for performance\n+improvement. The below configuration shows the typical default values. To update\n+them, change the properties in the catalog configuration file:\n+\n+.. code-block:: properties\n+\n+    oracle.connection-pool.max-size=30\n+    oracle.connection-pool.min-size=1\n+    oracle.connection-pool.inactive-timeout=20m\n+\n+To disable connection pooling, update properties to include:\n+\n+.. code-block:: none\n+\n+    oracle.connection-pool.enabled=false\n+\n+.. note::\n+\n+    Include catalog files on all of your nodes, this requires you to restart.\n+\n+Multiple Oracle servers\n ^^^^^^^^^^^^^^^^^^^^^^^\n \n-You can have as many catalogs as you need, so if you have additional\n-Oracle servers, simply add another properties file to ``etc/catalog``\n-with a different name (making sure it ends in ``.properties``). For\n-example, if you name the property file ``sales.properties``, Presto\n-will create a catalog named ``sales`` using the configured connector.\n+If you want to connect to multiple Oracle servers, configure another instance of\n+the Oracle connector as a separate catalog.\n+\n+To add another Oracle catalog, create a new properties file. For example, if\n+you name the property file ``sales.properties``, Presto creates a catalog named\n+sales.\n \n Querying Oracle\n ---------------\n \n-The Oracle connector provides a schema for every Oracle *database*.\n-You can see the available Oracle databases by running ``SHOW SCHEMAS``::\n+The Oracle connector provides a schema for every Oracle database. Use the below\n+queries to test your setup.\n+\n+If you used a different name for your catalog properties file, use that catalog\n+name instead of ``oracle``.\n+\n+.. note::\n+    The user configuration, in the connection properties file, determines your\n+    privileges in these schemas. If the Oracle user doesn't have access to a\n+    table, you can't access it through Presto either.\n+\n+Run ``SHOW SCHEMAS`` to see the available Oracle databases::\n \n     SHOW SCHEMAS FROM oracle;\n \n-If you have a Oracle database named ``web``, you can view the tables\n-in this database by running ``SHOW TABLES``::\n+If you have an Oracle database named ``web``, run ``SHOW TABLES`` to see the\n+tables it contains::\n \n     SHOW TABLES FROM oracle.web;\n \n-You can see a list of the columns in the ``clicks`` table in the ``web`` database\n-using either of the following::\n+To see a list of the columns in the ``clicks`` table in the ``web``\n+database run either of the following::\n \n     DESCRIBE oracle.web.clicks;\n     SHOW COLUMNS FROM oracle.web.clicks;\n \n-Finally, you can access the ``clicks`` table in the ``web`` database::\n+To access the ``clicks`` table in the ``web`` database run::\n \n     SELECT * FROM oracle.web.clicks;\n \n-If you used a different name for your catalog properties file, use\n-that catalog name instead of ``oracle`` in the above examples.\n+Mapping data types between Presto and Oracle\n+--------------------------------------------\n+\n+Oracle supports types that Presto doesn't and Presto supports types that Oracle\n+doesn't. The following sections explain their type mapping.\n+\n+Oracle to Presto type mapping\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto supports selecting Oracle database types. This table shows the Oracle to\n+Presto data type mapping:\n+\n+\n+.. list-table:: Oracle to Presto type mapping\n+  :widths: 20, 20, 60\n+  :header-rows: 1\n+\n+  * - Oracle database type\n+    - Presto type\n+    - Notes\n+  * - ``NUMBER(p, s)``\n+    - ``DECIMAL(p, s)``\n+    -  See :ref:`number mapping`\n+  * - ``NUMBER(p)``\n+    - ``DECIMAL(p, 0)``\n+    - See :ref:`number mapping`\n+  * - ``FLOAT[(p)]``\n+    - ``DOUBLE``\n+    -\n+  * - ``BINARY_FLOAT``\n+    - ``REAL``\n+    -\n+  * - ``BINARY_DOUBLE``\n+    - ``DOUBLE``\n+    -\n+  * - ``VARCHAR2(n CHAR)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``VARCHAR2(n BYTE)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``NVARCHAR2(n)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``CHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``NCHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``CLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``NCLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``RAW(n)``\n+    - ``VARBINARY``\n+    -\n+  * - ``BLOB``\n+    - ``VARBINARY``\n+    -\n+  * - ``DATE``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p)``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p) WITH TIME ZONE``\n+    - ``TIMESTAMP WITH TIME ZONE``\n+    - See :ref:`datetime mapping`\n+\n+Use the default configureation property, ``unsupported-type.handling``, to specify\n+Presto behavior if an Oracle table uses a type not listed in the above table.\n+For example:\n+\n+- If ``unsupported-type.handling`` is set to ``FAIL``, then the\n+  querying of unsupported tables fail.\n+- If ``unsupported-type.handling`` is set to ``IGNORE``, \n+  then you can't see the unsupported types in Presto.\n+- If ``unsupported-type.handling`` is set to ``CONVERT_TO_VARCHAR`` \n+  column is exposed as unbounded ``VARCHAR``.\n+\n+Presto to Oracle type mapping\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto supports creating tables with the following types in an Oracle database.\n+The table shows the mappings from Presto to Oracle data types:\n+\n+.. note::\n+   For types not listed in the table below, Presto can't perform the ``CREATE\n+   TABLE <table> AS SELECT`` operations. When data is inserted into existing\n+   tables ``Oracle to Presto`` type mapping is used.\n+\n+.. list-table:: Presto to Oracle Type Mapping\n+  :widths: 20, 20, 60\n+  :header-rows: 1\n+\n+  * - Presto type\n+    - Oracle database type\n+    - Notes\n+  * - ``TINYINT``\n+    - ``NUMBER(3)``\n+    -\n+  * - ``SMALLINT``\n+    - ``NUMBER(5)``\n+    -\n+  * - ``INTEGER``\n+    - ``NUMBER(10)``\n+    -\n+  * - ``BIGINT``\n+    - ``NUMBER(19)``\n+    -\n+  * - ``DECIMAL(p, s)``\n+    - ``NUMBER(p, s)``\n+    -\n+  * - ``REAL``\n+    - ``BINARY_FLOAT``\n+    -\n+  * - ``DOUBLE``\n+    - ``BINARY_DOUBLE``\n+    -\n+  * - ``VARCHAR``\n+    - ``NCLOB``\n+    -\n+  * - ``VARCHAR(n)``\n+    - ``VARCHAR2(n CHAR)`` or ``NCLOB``\n+    - See :ref:`character mapping`\n+  * - ``CHAR(n)``\n+    - ``CHAR(n CHAR)`` or ``NCLOB``\n+    - See :ref:`character mapping`\n+  * - ``VARBINARY``\n+    - ``BLOB``\n+    -\n+  * - ``DATE``\n+    - ``DATE``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP``\n+    - ``TIMESTAMP(3)``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP WITH TIME ZONE``\n+    - ``TIMESTAMP(3) WITH TIME ZONE``\n+    - See :ref:`datetime mapping`\n+\n+.. _number mapping:\n+\n+Mapping numeric types\n+^^^^^^^^^^^^^^^^^^^^^\n+\n+An Oracle ``NUMBER(p, s)`` maps to Presto's ``DECIMAL(p, s)`` except in these\n+conditions:\n+\n+- No precision is specified for the column (example: ``NUMBER`` or\n+  ``NUMBER(*)``), unless ``oracle.number.default-scale`` is set. \n+- Scale (``s`` ) is greater than precision. \n+- Precision (``p`` ) is greater than 38. \n+- Scale is negative and the difference between ``p`` and ``s`` is greater than\n+  38, unless ``oracle.number.rounding-mode`` is set to a different value than\n+  ``UNNECESSARY``. \n+   \n+If ``s`` is negative, ``NUMBER(p, s)`` maps to ``DECIMAL(p + s, 0)``.\n+\n+For Oracle ``NUMBER`` (without precision and scale), you can change\n+``oracle.number.default-scale=s`` and map the column to ``DECIMAL(38, s)``.\n+\n+.. _datetime mapping:\n+\n+Mapping datetime types\n+^^^^^^^^^^^^^^^^^^^^^^\n+\n+Selecting a timestamp with fractional second precision (``p``) greater than 3\n+truncates the fractional seconds to three digits instead of rounding it.\n+\n+Oracle ``DATE`` type may store hours, minutes, and seconds, so it is mapped\n+to Presto ``TIMESTAMP``.\n+\n+.. warning::\n+\n+  Due to date and time differences in the libraries used by Presto and the\n+  Oracle JDBC driver, attempting to insert or select a datetime value earlier\n+  than ``1582-10-15`` results in an incorrect date inserted.\n+\n+.. _character mapping:\n+\n+Mapping character types\n+^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto's ``VARCHAR(n)`` maps to ``VARCHAR2(n CHAR)`` if ``n`` is no greater than\n+4000. A larger or unbounded ``VARCHAR`` maps to ``NCLOB``.\n+\n+Presto's ``CHAR(n)`` maps to ``CHAR(n CHAR)`` if ``n`` is no greater than 2000.\n+A larger ``CHAR`` maps to ``NCLOB``.\n+\n+Using ``CREATE TABLE AS`` to create an ``NCLOB`` column from a ``CHAR`` value\n+removes the trailing spaces from the initial values for the column. Inserting\n+``CHAR`` values into existing ``NCLOB`` columns keeps the trailing spaces. For\n+example::\n+\n+    presto> CREATE TABLE vals AS SELECT CAST('A' as CHAR(2001)) col;\n+    presto> INSERT INTO vals (col) VALUES (CAST('BB' as CHAR(2001)));\n+    presto> SELECT LENGTH(col) FROM vals;\n+    2001\n+    1\n+\n+Attempting to write a ``CHAR`` that doesn't fit in the column's actual size\n+fails. This is also true for the equivalent ``VARCHAR`` types.\n+\n+\n+Type mapping configuration properties\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+.. list-table:: Type Mapping Properties\n+  :widths: 20, 20, 50, 10\n+  :header-rows: 1\n+\n+  * - Configuration property name\n+    - Session property name\n+    - Description\n+    - Default\n+  * - ``unsupported-type.handling-strategy``\n+    - ``unsupported_type_handling_strategy``\n+    - Configures how unsupported column data types are handled:\n+\n+      - ``IGNORE`` - column is not accessible.\n+      - ``CONVERT_TO_VARCHAR`` - column is converted to unbounded ``VARCHAR``.\n+\n+    - ``IGNORE``\n+  * - ``oracle.number.default-scale``\n+    - ``number_default_scale``               \n+    - Default Presto ``DECIMAL`` scale for Oracle ``NUMBER`` (without precision \n+      and scale) date type. When not set then such column is treated as not \n+      supported.\n+    - not set\n+  * - ``oracle.number.rounding-mode``\n+    - ``number_rounding_mode``\n+    - Rounding mode for the Oracle ``NUMBER`` data type. This is useful when \n+      Oracle ``NUMBER`` data type specifies higher scale than is supported in \n+      Presto. Possible values are:\n+\n+      - ``UNNECESSARY`` - Rounding mode to assert that the \n+        requested operation has an exact result, \n+        hence no rounding is necessary.\n+      - ``CEILING`` - Rounding mode to round towards\n+        positive infinity.\n+      - ``FLOOR`` - Rounding mode to round towards negative\n+        infinity.\n+      - ``HALF_DOWN`` - Rounding mode to round towards\n+        ``nearest neighbor`` unless both neighbors are\n+        equidistant, in which case rounding down is used.\n+      - ``HALF_EVEN`` - Rounding mode to round towards the\n+        ``nearest neighbor`` unless both neighbors are equidistant,\n+        in which case rounding towards the even neighbor is\n+        performed.\n+      - ``HALF_UP`` - Rounding mode to round towards\n+        ``nearest neighbor`` unless both neighbors are\n+        equidistant, in which case rounding up is used\n+      - ``UP`` - Rounding mode to round towards zero.\n+      - ``DOWN`` - Rounding mode to round towards zero.\n+\n+    - ``UNNECESSARY``\n+\n+Synonyms\n+--------\n+\n+Based on performance reasons, Presto disables support for Oracle ``SYNONYM``. To\n+include ``SYNONYM``, add the following: ", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 373}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIyMzg0NA==", "bodyText": "How about\n\nBoth Oracle and Presto have types that are not supported by the Oracle connector.", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r485223844", "createdAt": "2020-09-08T22:11:34Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -23,47 +20,354 @@ connection properties as appropriate for your setup:\n     connection-user=root\n     connection-password=secret\n \n-Multiple Oracle Servers\n+By default, the Oracle connector uses connection pooling for performance\n+improvement. The below configuration shows the typical default values. To update\n+them, change the properties in the catalog configuration file:\n+\n+.. code-block:: properties\n+\n+    oracle.connection-pool.max-size=30\n+    oracle.connection-pool.min-size=1\n+    oracle.connection-pool.inactive-timeout=20m\n+\n+To disable connection pooling, update properties to include:\n+\n+.. code-block:: none\n+\n+    oracle.connection-pool.enabled=false\n+\n+.. note::\n+\n+    Include catalog files on all of your nodes, this requires you to restart.\n+\n+Multiple Oracle servers\n ^^^^^^^^^^^^^^^^^^^^^^^\n \n-You can have as many catalogs as you need, so if you have additional\n-Oracle servers, simply add another properties file to ``etc/catalog``\n-with a different name (making sure it ends in ``.properties``). For\n-example, if you name the property file ``sales.properties``, Presto\n-will create a catalog named ``sales`` using the configured connector.\n+If you want to connect to multiple Oracle servers, configure another instance of\n+the Oracle connector as a separate catalog.\n+\n+To add another Oracle catalog, create a new properties file. For example, if\n+you name the property file ``sales.properties``, Presto creates a catalog named\n+sales.\n \n Querying Oracle\n ---------------\n \n-The Oracle connector provides a schema for every Oracle *database*.\n-You can see the available Oracle databases by running ``SHOW SCHEMAS``::\n+The Oracle connector provides a schema for every Oracle database. Use the below\n+queries to test your setup.\n+\n+If you used a different name for your catalog properties file, use that catalog\n+name instead of ``oracle``.\n+\n+.. note::\n+    The user configuration, in the connection properties file, determines your\n+    privileges in these schemas. If the Oracle user doesn't have access to a\n+    table, you can't access it through Presto either.\n+\n+Run ``SHOW SCHEMAS`` to see the available Oracle databases::\n \n     SHOW SCHEMAS FROM oracle;\n \n-If you have a Oracle database named ``web``, you can view the tables\n-in this database by running ``SHOW TABLES``::\n+If you have an Oracle database named ``web``, run ``SHOW TABLES`` to see the\n+tables it contains::\n \n     SHOW TABLES FROM oracle.web;\n \n-You can see a list of the columns in the ``clicks`` table in the ``web`` database\n-using either of the following::\n+To see a list of the columns in the ``clicks`` table in the ``web``\n+database run either of the following::\n \n     DESCRIBE oracle.web.clicks;\n     SHOW COLUMNS FROM oracle.web.clicks;\n \n-Finally, you can access the ``clicks`` table in the ``web`` database::\n+To access the ``clicks`` table in the ``web`` database run::\n \n     SELECT * FROM oracle.web.clicks;\n \n-If you used a different name for your catalog properties file, use\n-that catalog name instead of ``oracle`` in the above examples.\n+Mapping data types between Presto and Oracle\n+--------------------------------------------\n+\n+Oracle supports types that Presto doesn't and Presto supports types that Oracle", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIyNDYyMQ==", "bodyText": "The original structure seems better. It looks strange to have \"run\" at the end of the sentence, since it's missing a comma and seems to be missing something. The correct way to write a sentence like this would be\n\nTo access the clicks table in the web database, run the following:", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r485224621", "createdAt": "2020-09-08T22:13:44Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -23,47 +20,354 @@ connection properties as appropriate for your setup:\n     connection-user=root\n     connection-password=secret\n \n-Multiple Oracle Servers\n+By default, the Oracle connector uses connection pooling for performance\n+improvement. The below configuration shows the typical default values. To update\n+them, change the properties in the catalog configuration file:\n+\n+.. code-block:: properties\n+\n+    oracle.connection-pool.max-size=30\n+    oracle.connection-pool.min-size=1\n+    oracle.connection-pool.inactive-timeout=20m\n+\n+To disable connection pooling, update properties to include:\n+\n+.. code-block:: none\n+\n+    oracle.connection-pool.enabled=false\n+\n+.. note::\n+\n+    Include catalog files on all of your nodes, this requires you to restart.\n+\n+Multiple Oracle servers\n ^^^^^^^^^^^^^^^^^^^^^^^\n \n-You can have as many catalogs as you need, so if you have additional\n-Oracle servers, simply add another properties file to ``etc/catalog``\n-with a different name (making sure it ends in ``.properties``). For\n-example, if you name the property file ``sales.properties``, Presto\n-will create a catalog named ``sales`` using the configured connector.\n+If you want to connect to multiple Oracle servers, configure another instance of\n+the Oracle connector as a separate catalog.\n+\n+To add another Oracle catalog, create a new properties file. For example, if\n+you name the property file ``sales.properties``, Presto creates a catalog named\n+sales.\n \n Querying Oracle\n ---------------\n \n-The Oracle connector provides a schema for every Oracle *database*.\n-You can see the available Oracle databases by running ``SHOW SCHEMAS``::\n+The Oracle connector provides a schema for every Oracle database. Use the below\n+queries to test your setup.\n+\n+If you used a different name for your catalog properties file, use that catalog\n+name instead of ``oracle``.\n+\n+.. note::\n+    The user configuration, in the connection properties file, determines your\n+    privileges in these schemas. If the Oracle user doesn't have access to a\n+    table, you can't access it through Presto either.\n+\n+Run ``SHOW SCHEMAS`` to see the available Oracle databases::\n \n     SHOW SCHEMAS FROM oracle;\n \n-If you have a Oracle database named ``web``, you can view the tables\n-in this database by running ``SHOW TABLES``::\n+If you have an Oracle database named ``web``, run ``SHOW TABLES`` to see the\n+tables it contains::\n \n     SHOW TABLES FROM oracle.web;\n \n-You can see a list of the columns in the ``clicks`` table in the ``web`` database\n-using either of the following::\n+To see a list of the columns in the ``clicks`` table in the ``web``\n+database run either of the following::\n \n     DESCRIBE oracle.web.clicks;\n     SHOW COLUMNS FROM oracle.web.clicks;\n \n-Finally, you can access the ``clicks`` table in the ``web`` database::\n+To access the ``clicks`` table in the ``web`` database run::", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIyNDgwMQ==", "bodyText": "Missing comma", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r485224801", "createdAt": "2020-09-08T22:14:15Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -23,47 +20,354 @@ connection properties as appropriate for your setup:\n     connection-user=root\n     connection-password=secret\n \n-Multiple Oracle Servers\n+By default, the Oracle connector uses connection pooling for performance\n+improvement. The below configuration shows the typical default values. To update\n+them, change the properties in the catalog configuration file:\n+\n+.. code-block:: properties\n+\n+    oracle.connection-pool.max-size=30\n+    oracle.connection-pool.min-size=1\n+    oracle.connection-pool.inactive-timeout=20m\n+\n+To disable connection pooling, update properties to include:\n+\n+.. code-block:: none\n+\n+    oracle.connection-pool.enabled=false\n+\n+.. note::\n+\n+    Include catalog files on all of your nodes, this requires you to restart.\n+\n+Multiple Oracle servers\n ^^^^^^^^^^^^^^^^^^^^^^^\n \n-You can have as many catalogs as you need, so if you have additional\n-Oracle servers, simply add another properties file to ``etc/catalog``\n-with a different name (making sure it ends in ``.properties``). For\n-example, if you name the property file ``sales.properties``, Presto\n-will create a catalog named ``sales`` using the configured connector.\n+If you want to connect to multiple Oracle servers, configure another instance of\n+the Oracle connector as a separate catalog.\n+\n+To add another Oracle catalog, create a new properties file. For example, if\n+you name the property file ``sales.properties``, Presto creates a catalog named\n+sales.\n \n Querying Oracle\n ---------------\n \n-The Oracle connector provides a schema for every Oracle *database*.\n-You can see the available Oracle databases by running ``SHOW SCHEMAS``::\n+The Oracle connector provides a schema for every Oracle database. Use the below\n+queries to test your setup.\n+\n+If you used a different name for your catalog properties file, use that catalog\n+name instead of ``oracle``.\n+\n+.. note::\n+    The user configuration, in the connection properties file, determines your\n+    privileges in these schemas. If the Oracle user doesn't have access to a\n+    table, you can't access it through Presto either.\n+\n+Run ``SHOW SCHEMAS`` to see the available Oracle databases::\n \n     SHOW SCHEMAS FROM oracle;\n \n-If you have a Oracle database named ``web``, you can view the tables\n-in this database by running ``SHOW TABLES``::\n+If you have an Oracle database named ``web``, run ``SHOW TABLES`` to see the\n+tables it contains::\n \n     SHOW TABLES FROM oracle.web;\n \n-You can see a list of the columns in the ``clicks`` table in the ``web`` database\n-using either of the following::\n+To see a list of the columns in the ``clicks`` table in the ``web``\n+database run either of the following::", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIyNTIzOA==", "bodyText": "The sentence seems clearer if we reverse it\n\nThe Oracle user must have access to the table in order to access it from Presto.", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r485225238", "createdAt": "2020-09-08T22:15:28Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -23,47 +20,354 @@ connection properties as appropriate for your setup:\n     connection-user=root\n     connection-password=secret\n \n-Multiple Oracle Servers\n+By default, the Oracle connector uses connection pooling for performance\n+improvement. The below configuration shows the typical default values. To update\n+them, change the properties in the catalog configuration file:\n+\n+.. code-block:: properties\n+\n+    oracle.connection-pool.max-size=30\n+    oracle.connection-pool.min-size=1\n+    oracle.connection-pool.inactive-timeout=20m\n+\n+To disable connection pooling, update properties to include:\n+\n+.. code-block:: none\n+\n+    oracle.connection-pool.enabled=false\n+\n+.. note::\n+\n+    Include catalog files on all of your nodes, this requires you to restart.\n+\n+Multiple Oracle servers\n ^^^^^^^^^^^^^^^^^^^^^^^\n \n-You can have as many catalogs as you need, so if you have additional\n-Oracle servers, simply add another properties file to ``etc/catalog``\n-with a different name (making sure it ends in ``.properties``). For\n-example, if you name the property file ``sales.properties``, Presto\n-will create a catalog named ``sales`` using the configured connector.\n+If you want to connect to multiple Oracle servers, configure another instance of\n+the Oracle connector as a separate catalog.\n+\n+To add another Oracle catalog, create a new properties file. For example, if\n+you name the property file ``sales.properties``, Presto creates a catalog named\n+sales.\n \n Querying Oracle\n ---------------\n \n-The Oracle connector provides a schema for every Oracle *database*.\n-You can see the available Oracle databases by running ``SHOW SCHEMAS``::\n+The Oracle connector provides a schema for every Oracle database. Use the below\n+queries to test your setup.\n+\n+If you used a different name for your catalog properties file, use that catalog\n+name instead of ``oracle``.\n+\n+.. note::\n+    The user configuration, in the connection properties file, determines your\n+    privileges in these schemas. If the Oracle user doesn't have access to a", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIyNTQ4Ng==", "bodyText": "\"to include the following\"", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r485225486", "createdAt": "2020-09-08T22:16:10Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -23,47 +20,354 @@ connection properties as appropriate for your setup:\n     connection-user=root\n     connection-password=secret\n \n-Multiple Oracle Servers\n+By default, the Oracle connector uses connection pooling for performance\n+improvement. The below configuration shows the typical default values. To update\n+them, change the properties in the catalog configuration file:\n+\n+.. code-block:: properties\n+\n+    oracle.connection-pool.max-size=30\n+    oracle.connection-pool.min-size=1\n+    oracle.connection-pool.inactive-timeout=20m\n+\n+To disable connection pooling, update properties to include:", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIyNTYzNA==", "bodyText": "This is two sentences separated with a comma", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r485225634", "createdAt": "2020-09-08T22:16:36Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -23,47 +20,354 @@ connection properties as appropriate for your setup:\n     connection-user=root\n     connection-password=secret\n \n-Multiple Oracle Servers\n+By default, the Oracle connector uses connection pooling for performance\n+improvement. The below configuration shows the typical default values. To update\n+them, change the properties in the catalog configuration file:\n+\n+.. code-block:: properties\n+\n+    oracle.connection-pool.max-size=30\n+    oracle.connection-pool.min-size=1\n+    oracle.connection-pool.inactive-timeout=20m\n+\n+To disable connection pooling, update properties to include:\n+\n+.. code-block:: none\n+\n+    oracle.connection-pool.enabled=false\n+\n+.. note::\n+\n+    Include catalog files on all of your nodes, this requires you to restart.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NTMxMTU1", "url": "https://github.com/trinodb/trino/pull/5014#pullrequestreview-484531155", "createdAt": "2020-09-08T22:23:29Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMjoyMzozMFrOHOv9nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMjoyMzozMFrOHOv9nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIyNzkzMw==", "bodyText": "This last sentence is misleading, since it's not clear what \"below queries\" refers to. SHOW SCHEMAS will always work. The rest are examples, not something you could directly use.", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r485227933", "createdAt": "2020-09-08T22:23:30Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -23,47 +20,354 @@ connection properties as appropriate for your setup:\n     connection-user=root\n     connection-password=secret\n \n-Multiple Oracle Servers\n+By default, the Oracle connector uses connection pooling for performance\n+improvement. The below configuration shows the typical default values. To update\n+them, change the properties in the catalog configuration file:\n+\n+.. code-block:: properties\n+\n+    oracle.connection-pool.max-size=30\n+    oracle.connection-pool.min-size=1\n+    oracle.connection-pool.inactive-timeout=20m\n+\n+To disable connection pooling, update properties to include:\n+\n+.. code-block:: none\n+\n+    oracle.connection-pool.enabled=false\n+\n+.. note::\n+\n+    Include catalog files on all of your nodes, this requires you to restart.\n+\n+Multiple Oracle servers\n ^^^^^^^^^^^^^^^^^^^^^^^\n \n-You can have as many catalogs as you need, so if you have additional\n-Oracle servers, simply add another properties file to ``etc/catalog``\n-with a different name (making sure it ends in ``.properties``). For\n-example, if you name the property file ``sales.properties``, Presto\n-will create a catalog named ``sales`` using the configured connector.\n+If you want to connect to multiple Oracle servers, configure another instance of\n+the Oracle connector as a separate catalog.\n+\n+To add another Oracle catalog, create a new properties file. For example, if\n+you name the property file ``sales.properties``, Presto creates a catalog named\n+sales.\n \n Querying Oracle\n ---------------\n \n-The Oracle connector provides a schema for every Oracle *database*.\n-You can see the available Oracle databases by running ``SHOW SCHEMAS``::\n+The Oracle connector provides a schema for every Oracle database. Use the below", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0ODIxNTEz", "url": "https://github.com/trinodb/trino/pull/5014#pullrequestreview-484821513", "createdAt": "2020-09-09T09:21:02Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwOToyMTowMlrOHO-llg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwOToyMTowMlrOHO-llg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ2NzU0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Use the default configureation property, ``unsupported-type.handling``, to specify\n          \n          \n            \n            Use the ``unsupported-type.handling`` configuration property, to specify", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r485467542", "createdAt": "2020-09-09T09:21:02Z", "author": {"login": "losipiuk"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -23,47 +20,354 @@ connection properties as appropriate for your setup:\n     connection-user=root\n     connection-password=secret\n \n-Multiple Oracle Servers\n+By default, the Oracle connector uses connection pooling for performance\n+improvement. The below configuration shows the typical default values. To update\n+them, change the properties in the catalog configuration file:\n+\n+.. code-block:: properties\n+\n+    oracle.connection-pool.max-size=30\n+    oracle.connection-pool.min-size=1\n+    oracle.connection-pool.inactive-timeout=20m\n+\n+To disable connection pooling, update properties to include:\n+\n+.. code-block:: none\n+\n+    oracle.connection-pool.enabled=false\n+\n+.. note::\n+\n+    Include catalog files on all of your nodes, this requires you to restart.\n+\n+Multiple Oracle servers\n ^^^^^^^^^^^^^^^^^^^^^^^\n \n-You can have as many catalogs as you need, so if you have additional\n-Oracle servers, simply add another properties file to ``etc/catalog``\n-with a different name (making sure it ends in ``.properties``). For\n-example, if you name the property file ``sales.properties``, Presto\n-will create a catalog named ``sales`` using the configured connector.\n+If you want to connect to multiple Oracle servers, configure another instance of\n+the Oracle connector as a separate catalog.\n+\n+To add another Oracle catalog, create a new properties file. For example, if\n+you name the property file ``sales.properties``, Presto creates a catalog named\n+sales.\n \n Querying Oracle\n ---------------\n \n-The Oracle connector provides a schema for every Oracle *database*.\n-You can see the available Oracle databases by running ``SHOW SCHEMAS``::\n+The Oracle connector provides a schema for every Oracle database. Use the below\n+queries to test your setup.\n+\n+If you used a different name for your catalog properties file, use that catalog\n+name instead of ``oracle``.\n+\n+.. note::\n+    The user configuration, in the connection properties file, determines your\n+    privileges in these schemas. If the Oracle user doesn't have access to a\n+    table, you can't access it through Presto either.\n+\n+Run ``SHOW SCHEMAS`` to see the available Oracle databases::\n \n     SHOW SCHEMAS FROM oracle;\n \n-If you have a Oracle database named ``web``, you can view the tables\n-in this database by running ``SHOW TABLES``::\n+If you have an Oracle database named ``web``, run ``SHOW TABLES`` to see the\n+tables it contains::\n \n     SHOW TABLES FROM oracle.web;\n \n-You can see a list of the columns in the ``clicks`` table in the ``web`` database\n-using either of the following::\n+To see a list of the columns in the ``clicks`` table in the ``web``\n+database run either of the following::\n \n     DESCRIBE oracle.web.clicks;\n     SHOW COLUMNS FROM oracle.web.clicks;\n \n-Finally, you can access the ``clicks`` table in the ``web`` database::\n+To access the ``clicks`` table in the ``web`` database run::\n \n     SELECT * FROM oracle.web.clicks;\n \n-If you used a different name for your catalog properties file, use\n-that catalog name instead of ``oracle`` in the above examples.\n+Mapping data types between Presto and Oracle\n+--------------------------------------------\n+\n+Oracle supports types that Presto doesn't and Presto supports types that Oracle\n+doesn't. The following sections explain their type mapping.\n+\n+Oracle to Presto type mapping\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto supports selecting Oracle database types. This table shows the Oracle to\n+Presto data type mapping:\n+\n+\n+.. list-table:: Oracle to Presto type mapping\n+  :widths: 20, 20, 60\n+  :header-rows: 1\n+\n+  * - Oracle database type\n+    - Presto type\n+    - Notes\n+  * - ``NUMBER(p, s)``\n+    - ``DECIMAL(p, s)``\n+    -  See :ref:`number mapping`\n+  * - ``NUMBER(p)``\n+    - ``DECIMAL(p, 0)``\n+    - See :ref:`number mapping`\n+  * - ``FLOAT[(p)]``\n+    - ``DOUBLE``\n+    -\n+  * - ``BINARY_FLOAT``\n+    - ``REAL``\n+    -\n+  * - ``BINARY_DOUBLE``\n+    - ``DOUBLE``\n+    -\n+  * - ``VARCHAR2(n CHAR)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``VARCHAR2(n BYTE)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``NVARCHAR2(n)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``CHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``NCHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``CLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``NCLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``RAW(n)``\n+    - ``VARBINARY``\n+    -\n+  * - ``BLOB``\n+    - ``VARBINARY``\n+    -\n+  * - ``DATE``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p)``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p) WITH TIME ZONE``\n+    - ``TIMESTAMP WITH TIME ZONE``\n+    - See :ref:`datetime mapping`\n+\n+Use the default configureation property, ``unsupported-type.handling``, to specify", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 180}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0ODIzNzI0", "url": "https://github.com/trinodb/trino/pull/5014#pullrequestreview-484823724", "createdAt": "2020-09-09T09:23:46Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4ODUxODIz", "url": "https://github.com/trinodb/trino/pull/5014#pullrequestreview-488851823", "createdAt": "2020-09-15T16:18:31Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNjoxODozMVrOHSJtNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNjoxODozMVrOHSJtNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc5NTQ0NA==", "bodyText": "This sentence was suggested by @losipiuk .. however I am not sure this actually true. At least all other connector docs suggest that the Presto to Oracle mapping is used for ALL write operations .. and not just for CTAS ...\nCan you clarify if the Oracle connector is just different or if all other docs are wrong or whatever is technically correct @losipiuk @findepi and @electrum", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r488795444", "createdAt": "2020-09-15T16:18:31Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -23,47 +20,355 @@ connection properties as appropriate for your setup:\n     connection-user=root\n     connection-password=secret\n \n-Multiple Oracle Servers\n+By default, the Oracle connector uses connection pooling for performance\n+improvement. The below configuration shows the typical default values. To update\n+them, change the properties in the catalog configuration file:\n+\n+.. code-block:: properties\n+\n+    oracle.connection-pool.max-size=30\n+    oracle.connection-pool.min-size=1\n+    oracle.connection-pool.inactive-timeout=20m\n+\n+To disable connection pooling, update properties to include the following:\n+\n+.. code-block:: none\n+\n+    oracle.connection-pool.enabled=false\n+\n+.. note::\n+\n+    Include catalog files on all of your nodes. This requires you to restart.\n+\n+Multiple Oracle servers\n ^^^^^^^^^^^^^^^^^^^^^^^\n \n-You can have as many catalogs as you need, so if you have additional\n-Oracle servers, simply add another properties file to ``etc/catalog``\n-with a different name (making sure it ends in ``.properties``). For\n-example, if you name the property file ``sales.properties``, Presto\n-will create a catalog named ``sales`` using the configured connector.\n+If you want to connect to multiple Oracle servers, configure another instance of\n+the Oracle connector as a separate catalog.\n+\n+To add another Oracle catalog, create a new properties file. For example, if\n+you name the property file ``sales.properties``, Presto creates a catalog named\n+sales.\n \n Querying Oracle\n ---------------\n \n-The Oracle connector provides a schema for every Oracle *database*.\n-You can see the available Oracle databases by running ``SHOW SCHEMAS``::\n+The Oracle connector provides a schema for every Oracle database. \n+\n+Run ``SHOW SCHEMAS`` to see the available Oracle databases::\n \n     SHOW SCHEMAS FROM oracle;\n \n-If you have a Oracle database named ``web``, you can view the tables\n-in this database by running ``SHOW TABLES``::\n+If you used a different name for your catalog properties file, use that catalog\n+name instead of ``oracle``.\n+\n+.. note::\n+    The Oracle user must have access to the table in order to access it from Presto.\n+    The user configuration, in the connection properties file, determines your\n+    privileges in these schemas.\n+\n+Examples\n+^^^^^^^^\n+\n+If you have an Oracle database named ``web``, run ``SHOW TABLES`` to see the\n+tables it contains::\n \n     SHOW TABLES FROM oracle.web;\n \n-You can see a list of the columns in the ``clicks`` table in the ``web`` database\n-using either of the following::\n+To see a list of the columns in the ``clicks`` table in the ``web``\n+database, run either of the following::\n \n     DESCRIBE oracle.web.clicks;\n     SHOW COLUMNS FROM oracle.web.clicks;\n \n-Finally, you can access the ``clicks`` table in the ``web`` database::\n+To access the clicks table in the web database, run the following::\n \n     SELECT * FROM oracle.web.clicks;\n \n-If you used a different name for your catalog properties file, use\n-that catalog name instead of ``oracle`` in the above examples.\n+Mapping data types between Presto and Oracle\n+--------------------------------------------\n+\n+Both Oracle and Presto have types that are not supported by the Oracle\n+connector. The following sections explain their type mapping.\n+\n+Oracle to Presto type mapping\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto supports selecting Oracle database types. This table shows the Oracle to\n+Presto data type mapping:\n+\n+\n+.. list-table:: Oracle to Presto type mapping\n+  :widths: 20, 20, 60\n+  :header-rows: 1\n+\n+  * - Oracle database type\n+    - Presto type\n+    - Notes\n+  * - ``NUMBER(p, s)``\n+    - ``DECIMAL(p, s)``\n+    -  See :ref:`number mapping`\n+  * - ``NUMBER(p)``\n+    - ``DECIMAL(p, 0)``\n+    - See :ref:`number mapping`\n+  * - ``FLOAT[(p)]``\n+    - ``DOUBLE``\n+    -\n+  * - ``BINARY_FLOAT``\n+    - ``REAL``\n+    -\n+  * - ``BINARY_DOUBLE``\n+    - ``DOUBLE``\n+    -\n+  * - ``VARCHAR2(n CHAR)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``VARCHAR2(n BYTE)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``NVARCHAR2(n)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``CHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``NCHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``CLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``NCLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``RAW(n)``\n+    - ``VARBINARY``\n+    -\n+  * - ``BLOB``\n+    - ``VARBINARY``\n+    -\n+  * - ``DATE``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p)``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p) WITH TIME ZONE``\n+    - ``TIMESTAMP WITH TIME ZONE``\n+    - See :ref:`datetime mapping`\n+\n+If an Oracle table uses a type not listed in the above table, then you can use the\n+``unsupported-type.handling`` configuration property to specify Presto behavior.\n+For example:\n+\n+- If ``unsupported-type.handling`` is set to ``FAIL``, then the\n+  querying of an unsupported table fails.\n+- If ``unsupported-type.handling`` is set to ``IGNORE``, \n+  then you can't see the unsupported types in Presto.\n+- If ``unsupported-type.handling`` is set to ``CONVERT_TO_VARCHAR``, \n+  then the column is exposed as unbounded ``VARCHAR``.\n+\n+Presto to Oracle type mapping\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto supports creating tables with the following types in an Oracle database.\n+The table shows the mappings from Presto to Oracle data types:\n+\n+.. note::\n+   For types not listed in the table below, Presto can't perform the ``CREATE\n+   TABLE <table> AS SELECT`` operations. When data is inserted into existing", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 201}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4ODU0OTg1", "url": "https://github.com/trinodb/trino/pull/5014#pullrequestreview-488854985", "createdAt": "2020-09-15T16:22:07Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNjAxMTkw", "url": "https://github.com/trinodb/trino/pull/5014#pullrequestreview-500601190", "createdAt": "2020-10-01T18:13:01Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "991288cc1bc3d91b3913d0b39459ab6419edeea2", "author": {"user": {"login": "rosewms", "name": null}}, "url": "https://github.com/trinodb/trino/commit/991288cc1bc3d91b3913d0b39459ab6419edeea2", "committedDate": "2020-10-01T18:20:57Z", "message": "Update oracle.rst\n\nReview for clarity\n\nEdit:\n- Intro\n- Configuration\n- Multiple Oracle servers\n- Limitations\n\nCreate sections for:\n- Mapping data types between Presto and Oracle plus subsections\n- Synonyms\n- Pushdown"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMjQ0NDM1", "url": "https://github.com/trinodb/trino/pull/5014#pullrequestreview-501244435", "createdAt": "2020-10-02T15:40:10Z", "commit": {"oid": "991288cc1bc3d91b3913d0b39459ab6419edeea2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTo0MDoxMFrOHbybLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTo0MDoxMFrOHbybLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg5OTc1Ng==", "bodyText": "@losipiuk can you confirm that Create table isn't supported and that create tables as is supported? David asked me to double check. Thanks!", "url": "https://github.com/trinodb/trino/pull/5014#discussion_r498899756", "createdAt": "2020-10-02T15:40:10Z", "author": {"login": "rosewms"}, "path": "presto-docs/src/main/sphinx/connector/oracle.rst", "diffHunk": "@@ -23,47 +20,350 @@ connection properties as appropriate for your setup:\n     connection-user=root\n     connection-password=secret\n \n-Multiple Oracle Servers\n+By default, the Oracle connector uses connection pooling for performance\n+improvement. The below configuration shows the typical default values. To update\n+them, change the properties in the catalog configuration file:\n+\n+.. code-block:: properties\n+\n+    oracle.connection-pool.max-size=30\n+    oracle.connection-pool.min-size=1\n+    oracle.connection-pool.inactive-timeout=20m\n+\n+To disable connection pooling, update properties to include the following:\n+\n+.. code-block:: none\n+\n+    oracle.connection-pool.enabled=false\n+\n+Multiple Oracle servers\n ^^^^^^^^^^^^^^^^^^^^^^^\n \n-You can have as many catalogs as you need, so if you have additional\n-Oracle servers, simply add another properties file to ``etc/catalog``\n-with a different name (making sure it ends in ``.properties``). For\n-example, if you name the property file ``sales.properties``, Presto\n-will create a catalog named ``sales`` using the configured connector.\n+If you want to connect to multiple Oracle servers, configure another instance of\n+the Oracle connector as a separate catalog.\n+\n+To add another Oracle catalog, create a new properties file. For example, if\n+you name the property file ``sales.properties``, Presto creates a catalog named\n+sales.\n \n Querying Oracle\n ---------------\n \n-The Oracle connector provides a schema for every Oracle *database*.\n-You can see the available Oracle databases by running ``SHOW SCHEMAS``::\n+The Oracle connector provides a schema for every Oracle database. \n+\n+Run ``SHOW SCHEMAS`` to see the available Oracle databases::\n \n     SHOW SCHEMAS FROM oracle;\n \n-If you have a Oracle database named ``web``, you can view the tables\n-in this database by running ``SHOW TABLES``::\n+If you used a different name for your catalog properties file, use that catalog\n+name instead of ``oracle``.\n+\n+.. note::\n+    The Oracle user must have access to the table in order to access it from Presto.\n+    The user configuration, in the connection properties file, determines your\n+    privileges in these schemas.\n+\n+Examples\n+^^^^^^^^\n+\n+If you have an Oracle database named ``web``, run ``SHOW TABLES`` to see the\n+tables it contains::\n \n     SHOW TABLES FROM oracle.web;\n \n-You can see a list of the columns in the ``clicks`` table in the ``web`` database\n-using either of the following::\n+To see a list of the columns in the ``clicks`` table in the ``web``\n+database, run either of the following::\n \n     DESCRIBE oracle.web.clicks;\n     SHOW COLUMNS FROM oracle.web.clicks;\n \n-Finally, you can access the ``clicks`` table in the ``web`` database::\n+To access the clicks table in the web database, run the following::\n \n     SELECT * FROM oracle.web.clicks;\n \n-If you used a different name for your catalog properties file, use\n-that catalog name instead of ``oracle`` in the above examples.\n+Mapping data types between Presto and Oracle\n+--------------------------------------------\n+\n+Both Oracle and Presto have types that are not supported by the Oracle\n+connector. The following sections explain their type mapping.\n+\n+Oracle to Presto type mapping\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto supports selecting Oracle database types. This table shows the Oracle to\n+Presto data type mapping:\n+\n+\n+.. list-table:: Oracle to Presto type mapping\n+  :widths: 20, 20, 60\n+  :header-rows: 1\n+\n+  * - Oracle database type\n+    - Presto type\n+    - Notes\n+  * - ``NUMBER(p, s)``\n+    - ``DECIMAL(p, s)``\n+    -  See :ref:`number mapping`\n+  * - ``NUMBER(p)``\n+    - ``DECIMAL(p, 0)``\n+    - See :ref:`number mapping`\n+  * - ``FLOAT[(p)]``\n+    - ``DOUBLE``\n+    -\n+  * - ``BINARY_FLOAT``\n+    - ``REAL``\n+    -\n+  * - ``BINARY_DOUBLE``\n+    - ``DOUBLE``\n+    -\n+  * - ``VARCHAR2(n CHAR)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``VARCHAR2(n BYTE)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``NVARCHAR2(n)``\n+    - ``VARCHAR(n)``\n+    -\n+  * - ``CHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``NCHAR(n)``\n+    - ``CHAR(n)``\n+    -\n+  * - ``CLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``NCLOB``\n+    - ``VARCHAR``\n+    -\n+  * - ``RAW(n)``\n+    - ``VARBINARY``\n+    -\n+  * - ``BLOB``\n+    - ``VARBINARY``\n+    -\n+  * - ``DATE``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p)``\n+    - ``TIMESTAMP``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP(p) WITH TIME ZONE``\n+    - ``TIMESTAMP WITH TIME ZONE``\n+    - See :ref:`datetime mapping`\n+\n+If an Oracle table uses a type not listed in the above table, then you can use the\n+``unsupported-type.handling`` configuration property to specify Presto behavior.\n+For example:\n+\n+- If ``unsupported-type.handling`` is set to ``FAIL``, then the\n+  querying of an unsupported table fails.\n+- If ``unsupported-type.handling`` is set to ``IGNORE``, \n+  then you can't see the unsupported types in Presto.\n+- If ``unsupported-type.handling`` is set to ``CONVERT_TO_VARCHAR``, \n+  then the column is exposed as unbounded ``VARCHAR``.\n+\n+Presto to Oracle type mapping\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto supports creating tables with the following types in an Oracle database.\n+The table shows the mappings from Presto to Oracle data types:\n+\n+.. note::\n+   For types not listed in the table below, Presto can't perform the ``CREATE\n+   TABLE <table> AS SELECT`` operations. When data is inserted into existing\n+   tables ``Oracle to Presto`` type mapping is used.\n+\n+.. list-table:: Presto to Oracle Type Mapping\n+  :widths: 20, 20, 60\n+  :header-rows: 1\n+\n+  * - Presto type\n+    - Oracle database type\n+    - Notes\n+  * - ``TINYINT``\n+    - ``NUMBER(3)``\n+    -\n+  * - ``SMALLINT``\n+    - ``NUMBER(5)``\n+    -\n+  * - ``INTEGER``\n+    - ``NUMBER(10)``\n+    -\n+  * - ``BIGINT``\n+    - ``NUMBER(19)``\n+    -\n+  * - ``DECIMAL(p, s)``\n+    - ``NUMBER(p, s)``\n+    -\n+  * - ``REAL``\n+    - ``BINARY_FLOAT``\n+    -\n+  * - ``DOUBLE``\n+    - ``BINARY_DOUBLE``\n+    -\n+  * - ``VARCHAR``\n+    - ``NCLOB``\n+    -\n+  * - ``VARCHAR(n)``\n+    - ``VARCHAR2(n CHAR)`` or ``NCLOB``\n+    - See :ref:`character mapping`\n+  * - ``CHAR(n)``\n+    - ``CHAR(n CHAR)`` or ``NCLOB``\n+    - See :ref:`character mapping`\n+  * - ``VARBINARY``\n+    - ``BLOB``\n+    -\n+  * - ``DATE``\n+    - ``DATE``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP``\n+    - ``TIMESTAMP(3)``\n+    - See :ref:`datetime mapping`\n+  * - ``TIMESTAMP WITH TIME ZONE``\n+    - ``TIMESTAMP(3) WITH TIME ZONE``\n+    - See :ref:`datetime mapping`\n+\n+.. _number mapping:\n+\n+Mapping numeric types\n+^^^^^^^^^^^^^^^^^^^^^\n+\n+An Oracle ``NUMBER(p, s)`` maps to Presto's ``DECIMAL(p, s)`` except in these\n+conditions:\n+\n+- No precision is specified for the column (example: ``NUMBER`` or\n+  ``NUMBER(*)``), unless ``oracle.number.default-scale`` is set. \n+- Scale (``s`` ) is greater than precision. \n+- Precision (``p`` ) is greater than 38. \n+- Scale is negative and the difference between ``p`` and ``s`` is greater than\n+  38, unless ``oracle.number.rounding-mode`` is set to a different value than\n+  ``UNNECESSARY``. \n+   \n+If ``s`` is negative, ``NUMBER(p, s)`` maps to ``DECIMAL(p + s, 0)``.\n+\n+For Oracle ``NUMBER`` (without precision and scale), you can change\n+``oracle.number.default-scale=s`` and map the column to ``DECIMAL(38, s)``.\n+\n+.. _datetime mapping:\n+\n+Mapping datetime types\n+^^^^^^^^^^^^^^^^^^^^^^\n+\n+Selecting a timestamp with fractional second precision (``p``) greater than 3\n+truncates the fractional seconds to three digits instead of rounding it.\n+\n+Oracle ``DATE`` type may store hours, minutes, and seconds, so it is mapped\n+to Presto ``TIMESTAMP``.\n+\n+.. warning::\n+\n+  Due to date and time differences in the libraries used by Presto and the\n+  Oracle JDBC driver, attempting to insert or select a datetime value earlier\n+  than ``1582-10-15`` results in an incorrect date inserted.\n+\n+.. _character mapping:\n+\n+Mapping character types\n+^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Presto's ``VARCHAR(n)`` maps to ``VARCHAR2(n CHAR)`` if ``n`` is no greater than\n+4000. A larger or unbounded ``VARCHAR`` maps to ``NCLOB``.\n+\n+Presto's ``CHAR(n)`` maps to ``CHAR(n CHAR)`` if ``n`` is no greater than 2000.\n+A larger ``CHAR`` maps to ``NCLOB``.\n+\n+Using ``CREATE TABLE AS`` to create an ``NCLOB`` column from a ``CHAR`` value\n+removes the trailing spaces from the initial values for the column. Inserting\n+``CHAR`` values into existing ``NCLOB`` columns keeps the trailing spaces. For\n+example::\n+\n+    presto> CREATE TABLE vals AS SELECT CAST('A' as CHAR(2001)) col;\n+    presto> INSERT INTO vals (col) VALUES (CAST('BB' as CHAR(2001)));\n+    presto> SELECT LENGTH(col) FROM vals;\n+    2001\n+    1\n+\n+Attempting to write a ``CHAR`` that doesn't fit in the column's actual size\n+fails. This is also true for the equivalent ``VARCHAR`` types.\n+\n+Type mapping configuration properties\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+.. list-table:: Type Mapping Properties\n+  :widths: 20, 20, 50, 10\n+  :header-rows: 1\n+\n+  * - Configuration property name\n+    - Session property name\n+    - Description\n+    - Default\n+  * - ``unsupported-type.handling-strategy``\n+    - ``unsupported_type_handling_strategy``\n+    - Configures how unsupported column data types are handled:\n+\n+      - ``IGNORE`` - column is not accessible.\n+      - ``CONVERT_TO_VARCHAR`` - column is converted to unbounded ``VARCHAR``.\n+\n+    - ``IGNORE``\n+  * - ``oracle.number.default-scale``\n+    - ``number_default_scale``               \n+    - Default Presto ``DECIMAL`` scale for Oracle ``NUMBER`` (without precision \n+      and scale) date type. When not set then such column is treated as not \n+      supported.\n+    - not set\n+  * - ``oracle.number.rounding-mode``\n+    - ``number_rounding_mode``\n+    - Rounding mode for the Oracle ``NUMBER`` data type. This is useful when \n+      Oracle ``NUMBER`` data type specifies higher scale than is supported in \n+      Presto. Possible values are:\n+\n+      - ``UNNECESSARY`` - Rounding mode to assert that the \n+        requested operation has an exact result, \n+        hence no rounding is necessary.\n+      - ``CEILING`` - Rounding mode to round towards\n+        positive infinity.\n+      - ``FLOOR`` - Rounding mode to round towards negative\n+        infinity.\n+      - ``HALF_DOWN`` - Rounding mode to round towards\n+        ``nearest neighbor`` unless both neighbors are\n+        equidistant, in which case rounding down is used.\n+      - ``HALF_EVEN`` - Rounding mode to round towards the\n+        ``nearest neighbor`` unless both neighbors are equidistant,\n+        in which case rounding towards the even neighbor is\n+        performed.\n+      - ``HALF_UP`` - Rounding mode to round towards\n+        ``nearest neighbor`` unless both neighbors are\n+        equidistant, in which case rounding up is used\n+      - ``UP`` - Rounding mode to round towards zero.\n+      - ``DOWN`` - Rounding mode to round towards zero.\n+\n+    - ``UNNECESSARY``\n+\n+Synonyms\n+--------\n+\n+Based on performance reasons, Presto disables support for Oracle ``SYNONYM``. To\n+include ``SYNONYM``, add the following configuration property: \n+\n+.. code-block:: none\n+\n+    oracle.synonyms.enabled=true\n+\n+Pushdown\n+--------\n+\n+The connector supports :doc:`pushdown </optimizer/pushdown>` for optimized query processing.\n \n Limitations\n -----------\n \n-The following SQL statements are not yet supported:\n+The following SQL statements are not supported:\n \n * :doc:`/sql/delete`\n+* :doc:`/sql/alter-table`\n+* :doc:`/sql/create-table` (:doc:`/sql/create-table-as` is supported)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "991288cc1bc3d91b3913d0b39459ab6419edeea2"}, "originalPosition": 389}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4256, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}