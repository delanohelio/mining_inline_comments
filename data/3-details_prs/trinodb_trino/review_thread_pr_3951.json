{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMwMjM0MzU1", "number": 3951, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwOTo1Njo0MlrOEEOfbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwOTo1Njo0MlrOEEOfbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODY3MTgwOnYy", "diffSide": "RIGHT", "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedSystemAccessControl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwOTo1Njo0MlrOGhtu9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwNjo1MDo1OVrOGjWG0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAwNTQ5NQ==", "bodyText": "I don't think anyone should be allowed to modify INFORMATION_SCHEMA_NAME tables. But I see it is how it is implemented in FileBasedAccessControl.", "url": "https://github.com/trinodb/trino/pull/3951#discussion_r438005495", "createdAt": "2020-06-10T09:56:42Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedSystemAccessControl.java", "diffHunk": "@@ -617,4 +683,34 @@ private boolean isSchemaOwner(SystemSecurityContext context, String schemaName)\n         }\n         return false;\n     }\n+\n+    private boolean checkAnyTablePermission(SystemSecurityContext context, SchemaTableName tableName)\n+    {\n+        return checkTablePermission(context, tableName, privileges -> !privileges.isEmpty());\n+    }\n+\n+    private boolean checkTablePermission(SystemSecurityContext context, SchemaTableName tableName, TableAccessControlRule.TablePrivilege... requiredPrivileges)\n+    {\n+        return checkTablePermission(context, tableName, privileges -> privileges.containsAll(ImmutableSet.copyOf(requiredPrivileges)));\n+    }\n+\n+    private boolean checkTablePermission(SystemSecurityContext context, SchemaTableName tableName, Predicate<Set<TableAccessControlRule.TablePrivilege>> checkPrivileges)\n+    {\n+        if (tableRules.isEmpty()) {\n+            return true;\n+        }\n+\n+        if (INFORMATION_SCHEMA_NAME.equals(tableName.getSchemaName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7a2d7c441d1ed6565c6902425bfbd1a56b74c40"}, "originalPosition": 242}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1MDgxMw==", "bodyText": "Plugin's AC should not be called for information_schema tables at all, since they are provided by Presto.\nIf this is the case, can you please add a bullet to #1559 ?", "url": "https://github.com/trinodb/trino/pull/3951#discussion_r438450813", "createdAt": "2020-06-10T22:54:20Z", "author": {"login": "findepi"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedSystemAccessControl.java", "diffHunk": "@@ -617,4 +683,34 @@ private boolean isSchemaOwner(SystemSecurityContext context, String schemaName)\n         }\n         return false;\n     }\n+\n+    private boolean checkAnyTablePermission(SystemSecurityContext context, SchemaTableName tableName)\n+    {\n+        return checkTablePermission(context, tableName, privileges -> !privileges.isEmpty());\n+    }\n+\n+    private boolean checkTablePermission(SystemSecurityContext context, SchemaTableName tableName, TableAccessControlRule.TablePrivilege... requiredPrivileges)\n+    {\n+        return checkTablePermission(context, tableName, privileges -> privileges.containsAll(ImmutableSet.copyOf(requiredPrivileges)));\n+    }\n+\n+    private boolean checkTablePermission(SystemSecurityContext context, SchemaTableName tableName, Predicate<Set<TableAccessControlRule.TablePrivilege>> checkPrivileges)\n+    {\n+        if (tableRules.isEmpty()) {\n+            return true;\n+        }\n+\n+        if (INFORMATION_SCHEMA_NAME.equals(tableName.getSchemaName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAwNTQ5NQ=="}, "originalCommit": {"oid": "a7a2d7c441d1ed6565c6902425bfbd1a56b74c40"}, "originalPosition": 242}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxNTUzNw==", "bodyText": "@findepi added to #1559", "url": "https://github.com/trinodb/trino/pull/3951#discussion_r439715537", "createdAt": "2020-06-13T06:50:59Z", "author": {"login": "haldes"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedSystemAccessControl.java", "diffHunk": "@@ -617,4 +683,34 @@ private boolean isSchemaOwner(SystemSecurityContext context, String schemaName)\n         }\n         return false;\n     }\n+\n+    private boolean checkAnyTablePermission(SystemSecurityContext context, SchemaTableName tableName)\n+    {\n+        return checkTablePermission(context, tableName, privileges -> !privileges.isEmpty());\n+    }\n+\n+    private boolean checkTablePermission(SystemSecurityContext context, SchemaTableName tableName, TableAccessControlRule.TablePrivilege... requiredPrivileges)\n+    {\n+        return checkTablePermission(context, tableName, privileges -> privileges.containsAll(ImmutableSet.copyOf(requiredPrivileges)));\n+    }\n+\n+    private boolean checkTablePermission(SystemSecurityContext context, SchemaTableName tableName, Predicate<Set<TableAccessControlRule.TablePrivilege>> checkPrivileges)\n+    {\n+        if (tableRules.isEmpty()) {\n+            return true;\n+        }\n+\n+        if (INFORMATION_SCHEMA_NAME.equals(tableName.getSchemaName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAwNTQ5NQ=="}, "originalCommit": {"oid": "a7a2d7c441d1ed6565c6902425bfbd1a56b74c40"}, "originalPosition": 242}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4257, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}