{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2NzM3NjI0", "number": 5158, "title": "Add T-digest type and functions", "bodyText": "Also, use T-digest as internal structure for approx_percentile() functions\nfixes #4975", "createdAt": "2020-09-14T16:25:43Z", "url": "https://github.com/trinodb/trino/pull/5158", "merged": true, "mergeCommit": {"oid": "68ec923dfb096c16fa5282849cdf6d4e5da5d60a"}, "closed": true, "closedAt": "2020-10-04T18:03:08Z", "author": {"login": "kasiafi"}, "timelineItems": {"totalCount": 47, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdI4sMVgBqjM3NjUwODQ5NjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdPK0z5ABqjM4MzczMzU5NzE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyODgzNDM0", "url": "https://github.com/trinodb/trino/pull/5158#pullrequestreview-492883434", "createdAt": "2020-09-21T18:40:33Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODo0MDozNFrOHVdv3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODo1MjoyNFrOHVeJIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2OTUzMw==", "bodyText": "This should throw a proper Presto exception with INVALID_FUNCTION_ARGUMENT", "url": "https://github.com/trinodb/trino/pull/5158#discussion_r492269533", "createdAt": "2020-09-21T18:40:34Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/aggregation/ApproximateLongPercentileAggregations.java", "diffHunk": "@@ -35,49 +38,52 @@\n     private ApproximateLongPercentileAggregations() {}\n \n     @InputFunction\n-    public static void input(@AggregationState DigestAndPercentileState state, @SqlType(StandardTypes.BIGINT) long value, @SqlType(StandardTypes.DOUBLE) double percentile)\n+    public static void input(@AggregationState TDigestAndPercentileState state, @SqlType(StandardTypes.BIGINT) long value, @SqlType(StandardTypes.DOUBLE) double percentile)\n     {\n-        QuantileDigest digest = state.getDigest();\n-\n-        if (digest == null) {\n-            digest = new QuantileDigest(0.01);\n-            state.setDigest(digest);\n-            state.addMemoryUsage(digest.estimatedInMemorySizeInBytes());\n-        }\n-\n-        state.addMemoryUsage(-digest.estimatedInMemorySizeInBytes());\n-        digest.add(value);\n-        state.addMemoryUsage(digest.estimatedInMemorySizeInBytes());\n-\n-        // use last percentile\n-        state.setPercentile(percentile);\n+        ApproximateDoublePercentileAggregations.input(state, toDoubleExact(value), percentile);\n     }\n \n     @InputFunction\n-    public static void weightedInput(@AggregationState DigestAndPercentileState state, @SqlType(StandardTypes.BIGINT) long value, @SqlType(StandardTypes.DOUBLE) double weight, @SqlType(StandardTypes.DOUBLE) double percentile)\n+    public static void weightedInput(@AggregationState TDigestAndPercentileState state, @SqlType(StandardTypes.BIGINT) long value, @SqlType(StandardTypes.DOUBLE) double weight, @SqlType(StandardTypes.DOUBLE) double percentile)\n     {\n-        checkWeight(weight);\n+        ApproximateDoublePercentileAggregations.weightedInput(state, toDoubleExact(value), weight, percentile);\n+    }\n \n-        QuantileDigest digest = state.getDigest();\n+    @CombineFunction\n+    public static void combine(@AggregationState TDigestAndPercentileState state, TDigestAndPercentileState otherState)\n+    {\n+        ApproximateDoublePercentileAggregations.combine(state, otherState);\n+    }\n \n-        if (digest == null) {\n-            digest = new QuantileDigest(0.01);\n-            state.setDigest(digest);\n-            state.addMemoryUsage(digest.estimatedInMemorySizeInBytes());\n+    @OutputFunction(StandardTypes.BIGINT)\n+    public static void output(@AggregationState TDigestAndPercentileState state, BlockBuilder out)\n+    {\n+        TDigest digest = state.getDigest();\n+        double percentile = state.getPercentile();\n+        if (digest == null || digest.getCount() == 0.0) {\n+            out.appendNull();\n         }\n+        else {\n+            checkState(percentile != -1.0, \"Percentile is missing\");\n+            checkCondition(0 <= percentile && percentile <= 1, INVALID_FUNCTION_ARGUMENT, \"Percentile must be between 0 and 1\");\n+            BIGINT.writeLong(out, Math.round(digest.valueAt(percentile)));\n+        }\n+    }\n \n-        state.addMemoryUsage(-digest.estimatedInMemorySizeInBytes());\n-        digest.add(value, weight);\n-        state.addMemoryUsage(digest.estimatedInMemorySizeInBytes());\n-\n-        // use last percentile\n-        state.setPercentile(percentile);\n+    private static double toDoubleExact(long value)\n+    {\n+        double doubleValue = (double) value;\n+        checkState((long) doubleValue == value, \"no exact double representation for long: %s\", value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3MjgyNQ==", "bodyText": "Throw proper Presto exception", "url": "https://github.com/trinodb/trino/pull/5158#discussion_r492272825", "createdAt": "2020-09-21T18:46:33Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/aggregation/ApproximateLongPercentileArrayAggregations.java", "diffHunk": "@@ -96,35 +68,16 @@ public static void output(@AggregationState DigestAndPercentileArrayState state,\n \n         for (int i = 0; i < percentiles.size(); i++) {\n             Double percentile = percentiles.get(i);\n-            BIGINT.writeLong(blockBuilder, digest.getQuantile(percentile));\n+            BIGINT.writeLong(blockBuilder, Math.round(digest.valueAt(percentile)));\n         }\n \n         out.closeEntry();\n     }\n \n-    private static void initializePercentilesArray(@AggregationState DigestAndPercentileArrayState state, Block percentilesArrayBlock)\n+    private static double toDoubleExact(long value)\n     {\n-        if (state.getPercentiles() == null) {\n-            ImmutableList.Builder<Double> percentilesListBuilder = ImmutableList.builder();\n-\n-            for (int i = 0; i < percentilesArrayBlock.getPositionCount(); i++) {\n-                checkCondition(!percentilesArrayBlock.isNull(i), INVALID_FUNCTION_ARGUMENT, \"Percentile cannot be null\");\n-                double percentile = DOUBLE.getDouble(percentilesArrayBlock, i);\n-                checkCondition(0 <= percentile && percentile <= 1, INVALID_FUNCTION_ARGUMENT, \"Percentile must be between 0 and 1\");\n-                percentilesListBuilder.add(percentile);\n-            }\n-\n-            state.setPercentiles(percentilesListBuilder.build());\n-        }\n-    }\n-\n-    private static void initializeDigest(@AggregationState DigestAndPercentileArrayState state)\n-    {\n-        QuantileDigest digest = state.getDigest();\n-        if (digest == null) {\n-            digest = new QuantileDigest(0.01);\n-            state.setDigest(digest);\n-            state.addMemoryUsage(digest.estimatedInMemorySizeInBytes());\n-        }\n+        double doubleValue = (double) value;\n+        checkState((long) doubleValue == value, \"no exact double representation for long: %s\", value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3NjAwMA==", "bodyText": "We can use TDigest as the native type instead of serializing and deserializing. See, for instance, LongTimestampType", "url": "https://github.com/trinodb/trino/pull/5158#discussion_r492276000", "createdAt": "2020-09-21T18:52:24Z", "author": {"login": "martint"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/TDigestType.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.type;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import io.airlift.slice.Slice;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.connector.ConnectorSession;\n+\n+public class TDigestType\n+        extends AbstractVariableWidthType\n+{\n+    public static final TDigestType TDIGEST = new TDigestType();\n+\n+    @JsonCreator\n+    public TDigestType()\n+    {\n+        super(new TypeSignature(StandardTypes.TDIGEST), Slice.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3Nzk2Njcz", "url": "https://github.com/trinodb/trino/pull/5158#pullrequestreview-497796673", "createdAt": "2020-09-28T18:37:05Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODozNzowNVrOHZK62Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODozNzowNVrOHZK62Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE1NTM1Mw==", "bodyText": "This may be more efficient with fastutil's indirect sorting (you should give it a try). Something like:\nint[] indexes = new int[percentiles.size()];\ndouble[] sortedPercentiles = new double[percentiles.size()];\nfor (int i = 0; i < indexes.length; i++) {\n    indexes[i] = i;\n    sortedPercentiles[i] = percentiles.get(i);\n}\n\nit.unimi.dsi.fastutil.Arrays.quickSort(0, percentiles.size(), (a, b) -> Doubles.compare(sortedPercentiles[a], sortedPercentiles[b]), (a, b) -> {\n    double tempPercentile = sortedPercentiles[a];\n    sortedPercentiles[a] = sortedPercentiles[b];\n    sortedPercentiles[b] = tempPercentile;\n\n    int tempIndex = indexes[a];\n    indexes[a] = indexes[b];\n    indexes[b] = tempIndex;\n});\n\nList<Double> valuesAtPercentiles = digest.valuesAt(Doubles.asList(sortedPercentiles));\nList<Double> result = new ArrayList<>(valuesAtPercentiles.size());\nfor (int i = 0; i < valuesAtPercentiles.size(); i++) {\n    result.add(valuesAtPercentiles.get(indexes[i]));\n}\n\nreturn result;", "url": "https://github.com/trinodb/trino/pull/5158#discussion_r496155353", "createdAt": "2020-09-28T18:37:05Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/aggregation/ApproximateDoublePercentileArrayAggregations.java", "diffHunk": "@@ -96,14 +100,33 @@ public static void output(@AggregationState TDigestAndPercentileArrayState state\n \n         BlockBuilder blockBuilder = out.beginBlockEntry();\n \n-        for (int i = 0; i < percentiles.size(); i++) {\n-            Double percentile = percentiles.get(i);\n-            DOUBLE.writeDouble(blockBuilder, digest.valueAt(percentile));\n+        List<Double> valuesAtPercentiles = valuesAtPercentiles(digest, percentiles);\n+        for (double value : valuesAtPercentiles) {\n+            DOUBLE.writeDouble(blockBuilder, value);\n         }\n \n         out.closeEntry();\n     }\n \n+    public static List<Double> valuesAtPercentiles(TDigest digest, List<Double> percentiles)\n+    {\n+        if (Ordering.natural().isOrdered(percentiles)) {\n+            return digest.valuesAt(percentiles);\n+        }\n+        else {\n+            // TDigest requires that percentiles list be ordered. Sort the percentiles list and rearrange the output according to original percentile order.\n+            List<Double> sortedPercentiles = Ordering.natural().sortedCopy(percentiles);\n+            List<Double> valuesAtPercentiles = digest.valuesAt(sortedPercentiles);\n+            Map<Double, Double> percentilesToValues = new HashMap<>();\n+            for (int i = 0; i < sortedPercentiles.size(); i++) {\n+                percentilesToValues.put(sortedPercentiles.get(i), valuesAtPercentiles.get(i));\n+            }\n+            return percentiles.stream()\n+                    .map(percentilesToValues::get)\n+                    .collect(toImmutableList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4OTgyODgz", "url": "https://github.com/trinodb/trino/pull/5158#pullrequestreview-498982883", "createdAt": "2020-09-29T22:59:48Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMjo1OTo0OVrOHaFm1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMzoxMjozNFrOHaGLPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzExNjg4NA==", "bodyText": "Does WHERE false not work?", "url": "https://github.com/trinodb/trino/pull/5158#discussion_r497116884", "createdAt": "2020-09-29T22:59:49Z", "author": {"login": "martint"}, "path": "presto-main/src/test/java/io/prestosql/sql/query/TestTDigestFunctions.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.query;\n+\n+import io.prestosql.testing.MaterializedResult;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+\n+import static java.lang.Math.round;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestTDigestFunctions\n+{\n+    private QueryAssertions assertions;\n+\n+    @BeforeClass\n+    public void init()\n+    {\n+        assertions = new QueryAssertions();\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void teardown()\n+    {\n+        assertions.close();\n+        assertions = null;\n+    }\n+\n+    @Test\n+    public void testValueAtQuantile()\n+    {\n+        assertThat(assertions.query(\n+                \"SELECT value_at_quantile(tdigest_agg(d), 0.75e0) \" +\n+                        \"FROM (VALUES 0.1e0, 0.2e0, 0.3e0, 0.4e0) T(d)\"))\n+                .matches(\"VALUES 0.4e0\");\n+\n+        assertThat(assertions.query(\n+                \"SELECT value_at_quantile(tdigest_agg(d), 0.75e0) \" +\n+                        \"FROM (VALUES -0.1e0, -0.2e0, -0.3e0, -0.4e0) T(d)\"))\n+                .matches(\"VALUES -0.1e0\");\n+\n+        assertThat(assertions.query(\n+                \"SELECT value_at_quantile(tdigest_agg(d), 0.9e0) \" +\n+                        \"FROM (VALUES 0.1e0, 0.1e0, 0.1e0, 0.1e0, 10e0) T(d)\"))\n+                .matches(\"VALUES 10e0\");\n+    }\n+\n+    @Test\n+    public void testValuesAtQuantiles()\n+    {\n+        assertThat(assertions.query(\n+                \"SELECT values_at_quantiles(tdigest_agg(d), ARRAY[0.0001e0, 0.75e0, 0.85e0]) \" +\n+                        \"FROM (VALUES 0.1e0, 0.2e0, 0.3e0, 0.4e0) T(d)\"))\n+                .matches(\"VALUES ARRAY[0.1e0, 0.4e0, 0.4e0]\");\n+\n+        assertThat(assertions.query(\n+                \"SELECT values_at_quantiles(tdigest_agg(d), ARRAY[0.0001e0, 0.75e0, 0.85e0]) \" +\n+                        \"FROM (VALUES -0.1e0, -0.2e0, -0.3e0, -0.4e0) T(d)\"))\n+                .matches(\"VALUES ARRAY[-0.4e0, -0.1e0, -0.10]\");\n+\n+        assertThat(assertions.query(\n+                \"SELECT values_at_quantiles(tdigest_agg(d), ARRAY[0.0001e0, 0.75e0, 0.85e0]) \" +\n+                        \"FROM (VALUES 0.1e0, 0.1e0, 0.1e0, 0.1e0, 10e0) T(d)\"))\n+                .matches(\"VALUES ARRAY[0.1e0, 0.1e0, 10.0e0]\");\n+    }\n+\n+    @Test\n+    public void testEmptyArrayOfQuantiles()\n+    {\n+        assertThat(assertions.query(\n+                \"SELECT values_at_quantiles(tdigest_agg(d), ARRAY[]) \" +\n+                        \"FROM (VALUES 0.1e0, 0.2e0, 0.3e0, 0.4e0) T(d)\"))\n+                .matches(\"VALUES CAST(ARRAY[] AS array(double))\");\n+    }\n+\n+    @Test\n+    public void testEmptyTDigestInput()\n+    {\n+        assertThat(assertions.query(\n+                \"SELECT tdigest_agg(d) FROM (SELECT 1e0 WHERE 1 = 0) T(d)\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzExODY5OA==", "bodyText": "Why noindex?", "url": "https://github.com/trinodb/trino/pull/5158#discussion_r497118698", "createdAt": "2020-09-29T23:02:16Z", "author": {"login": "martint"}, "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -320,6 +309,11 @@ Approximate Aggregate Functions\n \n     See :doc:`qdigest`.\n \n+.. function:: merge(tdigest) -> tdigest\n+    :noindex:", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzExOTU5OQ==", "bodyText": "Capitalize Presto", "url": "https://github.com/trinodb/trino/pull/5158#discussion_r497119599", "createdAt": "2020-09-29T23:03:33Z", "author": {"login": "martint"}, "path": "presto-docs/src/main/sphinx/functions/tdigest.rst", "diffHunk": "@@ -0,0 +1,45 @@\n+=========================\n+T-Digest Functions\n+=========================\n+\n+Data Structures\n+---------------\n+\n+A T-digest is a data sketch which stores approximate percentile\n+information.  The presto type for this data structure is called ``tdigest``.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzEyMDQxMw==", "bodyText": "without losing precision -> that's not accurate. Every time an element is added to a t-digest, precision is sacrificed somewhere.", "url": "https://github.com/trinodb/trino/pull/5158#discussion_r497120413", "createdAt": "2020-09-29T23:04:39Z", "author": {"login": "martint"}, "path": "presto-docs/src/main/sphinx/functions/tdigest.rst", "diffHunk": "@@ -0,0 +1,45 @@\n+=========================\n+T-Digest Functions\n+=========================\n+\n+Data Structures\n+---------------\n+\n+A T-digest is a data sketch which stores approximate percentile\n+information.  The presto type for this data structure is called ``tdigest``.\n+T-digests may be merged without losing precision, and for storage", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzEyMTA4NA==", "bodyText": "Why :noindex: for all of these?", "url": "https://github.com/trinodb/trino/pull/5158#discussion_r497121084", "createdAt": "2020-09-29T23:05:34Z", "author": {"login": "martint"}, "path": "presto-docs/src/main/sphinx/functions/tdigest.rst", "diffHunk": "@@ -0,0 +1,45 @@\n+=========================\n+T-Digest Functions\n+=========================\n+\n+Data Structures\n+---------------\n+\n+A T-digest is a data sketch which stores approximate percentile\n+information.  The presto type for this data structure is called ``tdigest``.\n+T-digests may be merged without losing precision, and for storage\n+and retrieval they may be cast to/from ``VARBINARY``.\n+\n+Functions\n+---------\n+\n+.. function:: merge(tdigest) -> tdigest\n+    :noindex:", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzEyMTUxNw==", "bodyText": "We may want to clarify that this is an aggregation function.", "url": "https://github.com/trinodb/trino/pull/5158#discussion_r497121517", "createdAt": "2020-09-29T23:06:08Z", "author": {"login": "martint"}, "path": "presto-docs/src/main/sphinx/functions/tdigest.rst", "diffHunk": "@@ -0,0 +1,45 @@\n+=========================\n+T-Digest Functions\n+=========================\n+\n+Data Structures\n+---------------\n+\n+A T-digest is a data sketch which stores approximate percentile\n+information.  The presto type for this data structure is called ``tdigest``.\n+T-digests may be merged without losing precision, and for storage\n+and retrieval they may be cast to/from ``VARBINARY``.\n+\n+Functions\n+---------\n+\n+.. function:: merge(tdigest) -> tdigest\n+    :noindex:\n+\n+    Merges all input ``tdigest``\\ s into a single ``tdigest``.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzEyMzMwNg==", "bodyText": "T-digest", "url": "https://github.com/trinodb/trino/pull/5158#discussion_r497123306", "createdAt": "2020-09-29T23:08:36Z", "author": {"login": "martint"}, "path": "presto-docs/src/main/sphinx/language/types.rst", "diffHunk": "@@ -361,3 +361,20 @@ can be reused.  For example, one may be interested in a daily reading of the 99t\n percentile values that are read over the course of a week.  Instead of calculating\n the past week of data with ``approx_percentile``, ``qdigest``\\ s could be stored\n daily, and quickly merged to retrieve the 99th percentile value.\n+\n+T-Digest\n+---------------\n+\n+.. _tdigest_type:\n+\n+``TDigest``\n+^^^^^^^^^^^\n+\n+A t-digest (tdigest) is a summary structure which, similarly to qdigest, captures the", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzEyMzk0NA==", "bodyText": "Also performance and memory utilization. T-digest is more efficient to operate on that qdigest.", "url": "https://github.com/trinodb/trino/pull/5158#discussion_r497123944", "createdAt": "2020-09-29T23:09:34Z", "author": {"login": "martint"}, "path": "presto-docs/src/main/sphinx/language/types.rst", "diffHunk": "@@ -361,3 +361,20 @@ can be reused.  For example, one may be interested in a daily reading of the 99t\n percentile values that are read over the course of a week.  Instead of calculating\n the past week of data with ``approx_percentile``, ``qdigest``\\ s could be stored\n daily, and quickly merged to retrieve the 99th percentile value.\n+\n+T-Digest\n+---------------\n+\n+.. _tdigest_type:\n+\n+``TDigest``\n+^^^^^^^^^^^\n+\n+A t-digest (tdigest) is a summary structure which, similarly to qdigest, captures the\n+approximate distribution of data for a given input set, and can be queried to retrieve\n+approximate quantile values from the distribution.  The main advantage of tdigest over", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzEyNDY2Mg==", "bodyText": "This is an implementation detail. We should omit it.", "url": "https://github.com/trinodb/trino/pull/5158#discussion_r497124662", "createdAt": "2020-09-29T23:10:28Z", "author": {"login": "martint"}, "path": "presto-docs/src/main/sphinx/language/types.rst", "diffHunk": "@@ -361,3 +361,20 @@ can be reused.  For example, one may be interested in a daily reading of the 99t\n percentile values that are read over the course of a week.  Instead of calculating\n the past week of data with ``approx_percentile``, ``qdigest``\\ s could be stored\n daily, and quickly merged to retrieve the 99th percentile value.\n+\n+T-Digest\n+---------------\n+\n+.. _tdigest_type:\n+\n+``TDigest``\n+^^^^^^^^^^^\n+\n+A t-digest (tdigest) is a summary structure which, similarly to qdigest, captures the\n+approximate distribution of data for a given input set, and can be queried to retrieve\n+approximate quantile values from the distribution.  The main advantage of tdigest over\n+qdigest is its higher accuracy at high and low percentiles.\n+\n+T-digests are additive, meaning they can be merged together without losing precision.\n+\n+The :func:`approx_percentile` functions use t-digest as an underlying structure.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzEyNDcxMw==", "bodyText": "This is an implementation detail. We should omit it.", "url": "https://github.com/trinodb/trino/pull/5158#discussion_r497124713", "createdAt": "2020-09-29T23:10:32Z", "author": {"login": "martint"}, "path": "presto-docs/src/main/sphinx/functions/tdigest.rst", "diffHunk": "@@ -0,0 +1,45 @@\n+=========================\n+T-Digest Functions\n+=========================\n+\n+Data Structures\n+---------------\n+\n+A T-digest is a data sketch which stores approximate percentile\n+information.  The presto type for this data structure is called ``tdigest``.\n+T-digests may be merged without losing precision, and for storage\n+and retrieval they may be cast to/from ``VARBINARY``.\n+\n+Functions\n+---------\n+\n+.. function:: merge(tdigest) -> tdigest\n+    :noindex:\n+\n+    Merges all input ``tdigest``\\ s into a single ``tdigest``.\n+\n+.. function:: value_at_quantile(tdigest, quantile) -> double\n+    :noindex:\n+\n+    Returns the approximate percentile value from the T-digest given\n+    the number ``quantile`` between 0 and 1.\n+\n+.. function:: values_at_quantiles(tdigest, quantiles) -> array<double>\n+    :noindex:\n+\n+    Returns the approximate percentile values as an array given the input\n+    T-digest and array of values between 0 and 1 which\n+    represent the quantiles to return.\n+\n+.. function:: tdigest_agg(x) -> tdigest\n+\n+    Returns the ``tdigest`` which is composed of  all input values of ``x``.\n+\n+.. function:: tdigest_agg(x, w) -> tdigest\n+    :noindex:\n+\n+    Returns the ``tdigest`` which is composed of  all input values of ``x`` using\n+    the per-item weight ``w``.\n+\n+Presto implements the ``approx_percentile`` function with the T-digest", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzEyNjIwNQ==", "bodyText": "The canonical form for array and other structural types uses parenthesis instead of <>: array(T)", "url": "https://github.com/trinodb/trino/pull/5158#discussion_r497126205", "createdAt": "2020-09-29T23:12:34Z", "author": {"login": "martint"}, "path": "presto-docs/src/main/sphinx/functions/qdigest.rst", "diffHunk": "@@ -22,10 +22,10 @@ Functions\n \n .. function:: value_at_quantile(qdigest(T), quantile) -> T\n \n-    Returns the approximate percentile values from the quantile digest given\n+    Returns the approximate percentile value from the quantile digest given\n     the number ``quantile`` between 0 and 1.\n \n-.. function:: values_at_quantiles(qdigest(T), quantiles) -> T\n+.. function:: values_at_quantiles(qdigest(T), quantiles) -> array<T>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNjUyMDg5", "url": "https://github.com/trinodb/trino/pull/5158#pullrequestreview-500652089", "createdAt": "2020-10-01T19:25:31Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOToyNTozMVrOHbX_WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOToyNTozMVrOHbX_WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ2NjY0OQ==", "bodyText": "Add a introductory sentence", "url": "https://github.com/trinodb/trino/pull/5158#discussion_r498466649", "createdAt": "2020-10-01T19:25:31Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/tdigest.rst", "diffHunk": "@@ -0,0 +1,41 @@\n+=========================\n+T-Digest Functions\n+=========================\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNjUzMTMw", "url": "https://github.com/trinodb/trino/pull/5158#pullrequestreview-500653130", "createdAt": "2020-10-01T19:27:05Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOToyNzowNVrOHbYCHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOToyNzowNVrOHbYCHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ2NzM1OA==", "bodyText": "can instead of may ?", "url": "https://github.com/trinodb/trino/pull/5158#discussion_r498467358", "createdAt": "2020-10-01T19:27:05Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/tdigest.rst", "diffHunk": "@@ -0,0 +1,41 @@\n+=========================\n+T-Digest Functions\n+=========================\n+\n+Data Structures\n+---------------\n+\n+A T-digest is a data sketch which stores approximate percentile\n+information.  The Presto type for this data structure is called ``tdigest``.\n+T-digests may be merged, and for storage and retrieval they may be cast", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNjUzMjY1", "url": "https://github.com/trinodb/trino/pull/5158#pullrequestreview-500653265", "createdAt": "2020-10-01T19:27:17Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOToyNzoxN1rOHbYCdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOToyNzoxN1rOHbYCdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ2NzQ0NA==", "bodyText": "to and from", "url": "https://github.com/trinodb/trino/pull/5158#discussion_r498467444", "createdAt": "2020-10-01T19:27:17Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/tdigest.rst", "diffHunk": "@@ -0,0 +1,41 @@\n+=========================\n+T-Digest Functions\n+=========================\n+\n+Data Structures\n+---------------\n+\n+A T-digest is a data sketch which stores approximate percentile\n+information.  The Presto type for this data structure is called ``tdigest``.\n+T-digests may be merged, and for storage and retrieval they may be cast\n+to/from ``VARBINARY``.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNjU0MzE5", "url": "https://github.com/trinodb/trino/pull/5158#pullrequestreview-500654319", "createdAt": "2020-10-01T19:28:49Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOToyODo0OVrOHbYFaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOToyODo0OVrOHbYFaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ2ODIwMQ==", "bodyText": "I think you can just say\nAggregates all inputs into a single ``tdigest``.", "url": "https://github.com/trinodb/trino/pull/5158#discussion_r498468201", "createdAt": "2020-10-01T19:28:49Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/tdigest.rst", "diffHunk": "@@ -0,0 +1,41 @@\n+=========================\n+T-Digest Functions\n+=========================\n+\n+Data Structures\n+---------------\n+\n+A T-digest is a data sketch which stores approximate percentile\n+information.  The Presto type for this data structure is called ``tdigest``.\n+T-digests may be merged, and for storage and retrieval they may be cast\n+to/from ``VARBINARY``.\n+\n+Functions\n+---------\n+\n+.. function:: merge(tdigest) -> tdigest\n+    :noindex:\n+\n+    Aggregation function. Merges all input ``tdigest``\\ s into a single ``tdigest``.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNjU0NzMx", "url": "https://github.com/trinodb/trino/pull/5158#pullrequestreview-500654731", "createdAt": "2020-10-01T19:29:22Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOToyOToyMlrOHbYGcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOToyOToyMlrOHbYGcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ2ODQ2Ng==", "bodyText": "T-digest, given", "url": "https://github.com/trinodb/trino/pull/5158#discussion_r498468466", "createdAt": "2020-10-01T19:29:22Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/tdigest.rst", "diffHunk": "@@ -0,0 +1,41 @@\n+=========================\n+T-Digest Functions\n+=========================\n+\n+Data Structures\n+---------------\n+\n+A T-digest is a data sketch which stores approximate percentile\n+information.  The Presto type for this data structure is called ``tdigest``.\n+T-digests may be merged, and for storage and retrieval they may be cast\n+to/from ``VARBINARY``.\n+\n+Functions\n+---------\n+\n+.. function:: merge(tdigest) -> tdigest\n+    :noindex:\n+\n+    Aggregation function. Merges all input ``tdigest``\\ s into a single ``tdigest``.\n+\n+.. function:: value_at_quantile(tdigest, quantile) -> double\n+    :noindex:\n+\n+    Returns the approximate percentile value from the T-digest given", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNjU0OTUz", "url": "https://github.com/trinodb/trino/pull/5158#pullrequestreview-500654953", "createdAt": "2020-10-01T19:29:42Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOToyOTo0MlrOHbYHEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOToyOTo0MlrOHbYHEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ2ODYyNQ==", "bodyText": "array, given", "url": "https://github.com/trinodb/trino/pull/5158#discussion_r498468625", "createdAt": "2020-10-01T19:29:42Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/tdigest.rst", "diffHunk": "@@ -0,0 +1,41 @@\n+=========================\n+T-Digest Functions\n+=========================\n+\n+Data Structures\n+---------------\n+\n+A T-digest is a data sketch which stores approximate percentile\n+information.  The Presto type for this data structure is called ``tdigest``.\n+T-digests may be merged, and for storage and retrieval they may be cast\n+to/from ``VARBINARY``.\n+\n+Functions\n+---------\n+\n+.. function:: merge(tdigest) -> tdigest\n+    :noindex:\n+\n+    Aggregation function. Merges all input ``tdigest``\\ s into a single ``tdigest``.\n+\n+.. function:: value_at_quantile(tdigest, quantile) -> double\n+    :noindex:\n+\n+    Returns the approximate percentile value from the T-digest given\n+    the number ``quantile`` between 0 and 1.\n+\n+.. function:: values_at_quantiles(tdigest, quantiles) -> array<double>\n+    :noindex:\n+\n+    Returns the approximate percentile values as an array given the input", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNjU1NjI5", "url": "https://github.com/trinodb/trino/pull/5158#pullrequestreview-500655629", "createdAt": "2020-10-01T19:30:39Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOTozMDozOVrOHbYI4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOTozMDozOVrOHbYI4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ2OTA5MQ==", "bodyText": "and an array of values between 0 and 1, which represent the quantiles to return.", "url": "https://github.com/trinodb/trino/pull/5158#discussion_r498469091", "createdAt": "2020-10-01T19:30:39Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/tdigest.rst", "diffHunk": "@@ -0,0 +1,41 @@\n+=========================\n+T-Digest Functions\n+=========================\n+\n+Data Structures\n+---------------\n+\n+A T-digest is a data sketch which stores approximate percentile\n+information.  The Presto type for this data structure is called ``tdigest``.\n+T-digests may be merged, and for storage and retrieval they may be cast\n+to/from ``VARBINARY``.\n+\n+Functions\n+---------\n+\n+.. function:: merge(tdigest) -> tdigest\n+    :noindex:\n+\n+    Aggregation function. Merges all input ``tdigest``\\ s into a single ``tdigest``.\n+\n+.. function:: value_at_quantile(tdigest, quantile) -> double\n+    :noindex:\n+\n+    Returns the approximate percentile value from the T-digest given\n+    the number ``quantile`` between 0 and 1.\n+\n+.. function:: values_at_quantiles(tdigest, quantiles) -> array<double>\n+    :noindex:\n+\n+    Returns the approximate percentile values as an array given the input\n+    T-digest and array of values between 0 and 1 which", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNjU2MzI0", "url": "https://github.com/trinodb/trino/pull/5158#pullrequestreview-500656324", "createdAt": "2020-10-01T19:31:40Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOTozMTo0MVrOHbYKpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOTozMTo0MVrOHbYKpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ2OTU0Mg==", "bodyText": "Composes all input values of x into a T-digest.\nAnd need to add what x is...", "url": "https://github.com/trinodb/trino/pull/5158#discussion_r498469542", "createdAt": "2020-10-01T19:31:41Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/tdigest.rst", "diffHunk": "@@ -0,0 +1,41 @@\n+=========================\n+T-Digest Functions\n+=========================\n+\n+Data Structures\n+---------------\n+\n+A T-digest is a data sketch which stores approximate percentile\n+information.  The Presto type for this data structure is called ``tdigest``.\n+T-digests may be merged, and for storage and retrieval they may be cast\n+to/from ``VARBINARY``.\n+\n+Functions\n+---------\n+\n+.. function:: merge(tdigest) -> tdigest\n+    :noindex:\n+\n+    Aggregation function. Merges all input ``tdigest``\\ s into a single ``tdigest``.\n+\n+.. function:: value_at_quantile(tdigest, quantile) -> double\n+    :noindex:\n+\n+    Returns the approximate percentile value from the T-digest given\n+    the number ``quantile`` between 0 and 1.\n+\n+.. function:: values_at_quantiles(tdigest, quantiles) -> array<double>\n+    :noindex:\n+\n+    Returns the approximate percentile values as an array given the input\n+    T-digest and array of values between 0 and 1 which\n+    represent the quantiles to return.\n+\n+.. function:: tdigest_agg(x) -> tdigest\n+\n+    Returns the ``tdigest`` which is composed of  all input values of ``x``.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNjU2NjMw", "url": "https://github.com/trinodb/trino/pull/5158#pullrequestreview-500656630", "createdAt": "2020-10-01T19:32:09Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOTozMjowOVrOHbYLbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOTozMjowOVrOHbYLbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ2OTc0MA==", "bodyText": "Similar to above and explain x and w", "url": "https://github.com/trinodb/trino/pull/5158#discussion_r498469740", "createdAt": "2020-10-01T19:32:09Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/functions/tdigest.rst", "diffHunk": "@@ -0,0 +1,41 @@\n+=========================\n+T-Digest Functions\n+=========================\n+\n+Data Structures\n+---------------\n+\n+A T-digest is a data sketch which stores approximate percentile\n+information.  The Presto type for this data structure is called ``tdigest``.\n+T-digests may be merged, and for storage and retrieval they may be cast\n+to/from ``VARBINARY``.\n+\n+Functions\n+---------\n+\n+.. function:: merge(tdigest) -> tdigest\n+    :noindex:\n+\n+    Aggregation function. Merges all input ``tdigest``\\ s into a single ``tdigest``.\n+\n+.. function:: value_at_quantile(tdigest, quantile) -> double\n+    :noindex:\n+\n+    Returns the approximate percentile value from the T-digest given\n+    the number ``quantile`` between 0 and 1.\n+\n+.. function:: values_at_quantiles(tdigest, quantiles) -> array<double>\n+    :noindex:\n+\n+    Returns the approximate percentile values as an array given the input\n+    T-digest and array of values between 0 and 1 which\n+    represent the quantiles to return.\n+\n+.. function:: tdigest_agg(x) -> tdigest\n+\n+    Returns the ``tdigest`` which is composed of  all input values of ``x``.\n+\n+.. function:: tdigest_agg(x, w) -> tdigest\n+\n+    Returns the ``tdigest`` which is composed of  all input values of ``x`` using", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNjU3MDI0", "url": "https://github.com/trinodb/trino/pull/5158#pullrequestreview-500657024", "createdAt": "2020-10-01T19:32:41Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOTozMjo0MVrOHbYMbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOTozMjo0MVrOHbYMbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ2OTk5OA==", "bodyText": "input set. It can be queried", "url": "https://github.com/trinodb/trino/pull/5158#discussion_r498469998", "createdAt": "2020-10-01T19:32:41Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/language/types.rst", "diffHunk": "@@ -361,3 +361,19 @@ can be reused.  For example, one may be interested in a daily reading of the 99t\n percentile values that are read over the course of a week.  Instead of calculating\n the past week of data with ``approx_percentile``, ``qdigest``\\ s could be stored\n daily, and quickly merged to retrieve the 99th percentile value.\n+\n+T-Digest\n+---------------\n+\n+.. _tdigest_type:\n+\n+``TDigest``\n+^^^^^^^^^^^\n+\n+A T-digest (tdigest) is a summary structure which, similarly to qdigest, captures the\n+approximate distribution of data for a given input set, and can be queried to retrieve", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNjU4NTkx", "url": "https://github.com/trinodb/trino/pull/5158#pullrequestreview-500658591", "createdAt": "2020-10-01T19:34:59Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOTozNDo1OVrOHbYQqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOTozNDo1OVrOHbYQqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ3MTA4MA==", "bodyText": "TDigest has the following advantages compared to QDigest:\n\n* higher performance\n* lower memory usage\n* higher accuracy and high and low percentiles", "url": "https://github.com/trinodb/trino/pull/5158#discussion_r498471080", "createdAt": "2020-10-01T19:34:59Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/language/types.rst", "diffHunk": "@@ -361,3 +361,19 @@ can be reused.  For example, one may be interested in a daily reading of the 99t\n percentile values that are read over the course of a week.  Instead of calculating\n the past week of data with ``approx_percentile``, ``qdigest``\\ s could be stored\n daily, and quickly merged to retrieve the 99th percentile value.\n+\n+T-Digest\n+---------------\n+\n+.. _tdigest_type:\n+\n+``TDigest``\n+^^^^^^^^^^^\n+\n+A T-digest (tdigest) is a summary structure which, similarly to qdigest, captures the\n+approximate distribution of data for a given input set, and can be queried to retrieve\n+approximate quantile values from the distribution.  The advantages of tdigest over", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNDI4ODYz", "url": "https://github.com/trinodb/trino/pull/5158#pullrequestreview-501428863", "createdAt": "2020-10-02T20:30:16Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "432e11f94e73770cb94de2c0243e25d2d740f026", "author": {"user": {"login": "kasiafi", "name": null}}, "url": "https://github.com/trinodb/trino/commit/432e11f94e73770cb94de2c0243e25d2d740f026", "committedDate": "2020-10-03T20:49:14Z", "message": "Use T-digest in approx_percentile aggregations\n\nUse T-digest instead of QuantileDigest in the implementation of\n- `approx_percentile(x, percentage)`,\n- `approx_percentile(x, weight, percentage)`.\nThis change doesn't apply to\napprox_percentile(x, weight, percentage, accuracy)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8244702723f90faa377f8aaafb744fc2d175a0fa", "author": {"user": {"login": "kasiafi", "name": null}}, "url": "https://github.com/trinodb/trino/commit/8244702723f90faa377f8aaafb744fc2d175a0fa", "committedDate": "2020-10-03T20:49:14Z", "message": "Use T-digest in approx_percentile array aggregations\n\nUse T-digest instead of QuantileDigest in the implementation of\n- `approx_percentile(x, percentages)`,\n- `approx_percentile(x, weight, percentages)`."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "661c0b01221226cfa638f7b84691b27a7227cd11", "author": {"user": {"login": "kasiafi", "name": null}}, "url": "https://github.com/trinodb/trino/commit/661c0b01221226cfa638f7b84691b27a7227cd11", "committedDate": "2020-10-03T20:49:14Z", "message": "Add tdigest type and merge(tdigest) function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce3f47769bd877df436b4019f9233530d704c2bc", "author": {"user": {"login": "kasiafi", "name": null}}, "url": "https://github.com/trinodb/trino/commit/ce3f47769bd877df436b4019f9233530d704c2bc", "committedDate": "2020-10-03T20:49:14Z", "message": "Add operators for casting tdigest to / from varbinary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd7aa82c5cec2b300012ea777714dcda88c9e74a", "author": {"user": {"login": "kasiafi", "name": null}}, "url": "https://github.com/trinodb/trino/commit/cd7aa82c5cec2b300012ea777714dcda88c9e74a", "committedDate": "2020-10-03T20:49:15Z", "message": "Add value_at_quantile and values_at_quantiles functions for tdigest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd6018fbb348f8aa06f6171d9c5e962e0491325a", "author": {"user": {"login": "kasiafi", "name": null}}, "url": "https://github.com/trinodb/trino/commit/bd6018fbb348f8aa06f6171d9c5e962e0491325a", "committedDate": "2020-10-03T20:49:15Z", "message": "Add tdigest_agg function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29569c2f7ef145636743c7e25ade0031410aa5e1", "author": {"user": {"login": "kasiafi", "name": null}}, "url": "https://github.com/trinodb/trino/commit/29569c2f7ef145636743c7e25ade0031410aa5e1", "committedDate": "2020-10-03T20:49:15Z", "message": "Add test for tdigest functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67129d0604069fa0ab2f73697f15efbdd9401ce0", "author": {"user": {"login": "kasiafi", "name": null}}, "url": "https://github.com/trinodb/trino/commit/67129d0604069fa0ab2f73697f15efbdd9401ce0", "committedDate": "2020-10-03T20:49:15Z", "message": "Fix parameter names in docs for approx_percentile functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e432c30fb5576dffe566e8fa89f13ff17ddcd56", "author": {"user": {"login": "kasiafi", "name": null}}, "url": "https://github.com/trinodb/trino/commit/0e432c30fb5576dffe566e8fa89f13ff17ddcd56", "committedDate": "2020-10-03T20:49:15Z", "message": "Add documentation for T-digest type and functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5213495378d37fc3870ad9beb1697ae3c4e52724", "author": {"user": {"login": "kasiafi", "name": null}}, "url": "https://github.com/trinodb/trino/commit/5213495378d37fc3870ad9beb1697ae3c4e52724", "committedDate": "2020-10-03T20:49:15Z", "message": "Fix return type in qdigest function documentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "53bbcb60775b631e3c5309385c23853b306264a0", "author": {"user": {"login": "kasiafi", "name": null}}, "url": "https://github.com/trinodb/trino/commit/53bbcb60775b631e3c5309385c23853b306264a0", "committedDate": "2020-10-04T08:22:36Z", "message": "Use helper method"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "53bbcb60775b631e3c5309385c23853b306264a0", "author": {"user": {"login": "kasiafi", "name": null}}, "url": "https://github.com/trinodb/trino/commit/53bbcb60775b631e3c5309385c23853b306264a0", "committedDate": "2020-10-04T08:22:36Z", "message": "Use helper method"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3992, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}