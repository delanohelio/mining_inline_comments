{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNTg5MjQ4", "number": 2743, "title": "Include filtered columns in EXPLAIN (TYPE IO)", "bodyText": "See issue here: #1120. This PR adds the columns that are filtered on taking the same approach as PlanPrinter.java. We use this information to track which columns are most frequently filtered to drive which columns should be clustered on. Who would be the right person to review, @martint?", "createdAt": "2020-02-05T21:17:07Z", "url": "https://github.com/trinodb/trino/pull/2743", "merged": true, "mergeCommit": {"oid": "0962e3a9d5461204ea716d3e73b09a091322d58f"}, "closed": true, "closedAt": "2020-03-23T21:25:15Z", "author": {"login": "JamesRTaylor"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBucEhABqjMwMTQ4NTgyMjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQlIyCgFqTM3OTgzNDEwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxODY4ODU5", "url": "https://github.com/trinodb/trino/pull/2743#pullrequestreview-361868859", "createdAt": "2020-02-20T12:40:49Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjo0MDo1MFrOFsR1-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjo1MjowOFrOFsSKPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk3NDAwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                    Sets.newLinkedHashSet(\n          \n          \n            \n                                                    ImmutableSet.of(", "url": "https://github.com/trinodb/trino/pull/2743#discussion_r381974008", "createdAt": "2020-02-20T12:40:50Z", "author": {"login": "Praveen2112"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -249,13 +262,155 @@ public void testIoExplain()\n                                                                         new FormattedRange(\n                                                                                 new FormattedMarker(Optional.of(\"1\"), EXACTLY),\n                                                                                 new FormattedMarker(Optional.of(\"199\"), EXACTLY)))))),\n+                                    ImmutableSet.of(\n+                                        new ColumnConstraint(\n+                                            \"custkey\",\n+                                            BIGINT,\n+                                            new FormattedDomain(\n+                                                false,\n+                                                ImmutableSet.of(\n+                                                    new FormattedRange(\n+                                                        new FormattedMarker(Optional.empty(), ABOVE),\n+                                                        new FormattedMarker(Optional.of(\"10\"), EXACTLY)))))),\n                                         estimate)),\n                         Optional.of(new CatalogSchemaTableName(catalog, \"tpch\", \"test_orders\")),\n                         estimate));\n \n         assertUpdate(\"DROP TABLE test_orders\");\n     }\n \n+    @Test\n+    public void testIoExplainColumnFilters()\n+    {\n+        // Test IO explain with small number of discrete components.\n+        computeActual(\"CREATE TABLE test_orders WITH (partitioned_by = ARRAY['orderkey']) AS SELECT custkey, orderstatus, orderkey FROM orders WHERE orderkey < 3\");\n+\n+        EstimatedStatsAndCost estimate = new EstimatedStatsAndCost(2.0, 48.0, 48.0, 0.0, 0.0);\n+        EstimatedStatsAndCost finalEstimate = new EstimatedStatsAndCost(0.0, 0.0, 96.0, 0.0, 0.0);\n+        MaterializedResult result = computeActual(\"EXPLAIN (TYPE IO, FORMAT JSON) SELECT custkey, orderkey, orderstatus FROM test_orders WHERE custkey <= 10 and orderstatus='P'\");\n+        assertEquals(\n+                getIoPlanCodec().fromJson((String) getOnlyElement(result.getOnlyColumnAsSet())),\n+                new IoPlan(\n+                        ImmutableSet.of(\n+                                new TableColumnInfo(\n+                                        new CatalogSchemaTableName(catalog, \"tpch\", \"test_orders\"),\n+                                        ImmutableSet.of(\n+                                                new ColumnConstraint(\n+                                                        \"orderkey\",\n+                                                        BIGINT,\n+                                                        new FormattedDomain(\n+                                                                false,\n+                                                                ImmutableSet.of(\n+                                                                        new FormattedRange(\n+                                                                                new FormattedMarker(Optional.of(\"1\"), EXACTLY),\n+                                                                                new FormattedMarker(Optional.of(\"1\"), EXACTLY)),\n+                                                                        new FormattedRange(\n+                                                                                new FormattedMarker(Optional.of(\"2\"), EXACTLY),\n+                                                                                new FormattedMarker(Optional.of(\"2\"), EXACTLY)))))),\n+                                        Sets.newLinkedHashSet(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk3NjU3Mw==", "bodyText": "Can we directly visit the filterNode instead of going via project node ?", "url": "https://github.com/trinodb/trino/pull/2743#discussion_r381976573", "createdAt": "2020-02-20T12:46:40Z", "author": {"login": "Praveen2112"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/planprinter/IoPlanPrinter.java", "diffHunk": "@@ -600,19 +616,90 @@ protected Void visitPlan(PlanNode node, IoPlanBuilder context)\n         }\n \n         @Override\n-        public Void visitTableScan(TableScanNode node, IoPlanBuilder context)\n+        public Void visitFilter(FilterNode node, IoPlanBuilder context)\n+        {\n+            return visitScanFilterAndProjectInfo(node, Optional.of(node), Optional.empty(), context);\n+        }\n+\n+        @Override\n+        public Void visitProject(ProjectNode node, IoPlanBuilder context)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk3OTE5Ng==", "bodyText": "Instead of passing the FilterNode here can we pass the  filter Expression ? So when we visit a normal TableScan we compute the column details like\naddConstraintsFromFilter(TRUE_LITERAL, tableScanNode, context)\n\nWhen visiting a FilterNode we can check for its source and compute i/o based on its source", "url": "https://github.com/trinodb/trino/pull/2743#discussion_r381979196", "createdAt": "2020-02-20T12:52:08Z", "author": {"login": "Praveen2112"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/planprinter/IoPlanPrinter.java", "diffHunk": "@@ -600,19 +616,90 @@ protected Void visitPlan(PlanNode node, IoPlanBuilder context)\n         }\n \n         @Override\n-        public Void visitTableScan(TableScanNode node, IoPlanBuilder context)\n+        public Void visitFilter(FilterNode node, IoPlanBuilder context)\n+        {\n+            return visitScanFilterAndProjectInfo(node, Optional.of(node), Optional.empty(), context);\n+        }\n+\n+        @Override\n+        public Void visitProject(ProjectNode node, IoPlanBuilder context)\n+        {\n+            if (node.getSource() instanceof FilterNode) {\n+                return visitScanFilterAndProjectInfo(node, Optional.of((FilterNode) node.getSource()), Optional.of(node), context);\n+            }\n+\n+            return visitScanFilterAndProjectInfo(node, Optional.empty(), Optional.of(node), context);\n+        }\n+\n+        private Void visitScanFilterAndProjectInfo(\n+                PlanNode node,\n+                Optional<FilterNode> filterNode,\n+                Optional<ProjectNode> projectNode,\n+                IoPlanBuilder context)\n+        {\n+            checkState(projectNode.isPresent() || filterNode.isPresent());\n+\n+            PlanNode sourceNode;\n+            if (filterNode.isPresent()) {\n+                sourceNode = filterNode.get().getSource();\n+            }\n+            else {\n+                sourceNode = projectNode.get().getSource();\n+            }\n+\n+            Optional<TableScanNode> scanNode;\n+            if (sourceNode instanceof TableScanNode) {\n+                scanNode = Optional.of((TableScanNode) sourceNode);\n+            }\n+            else {\n+                scanNode = Optional.empty();\n+            }\n+\n+            if (scanNode.isPresent() && filterNode.isPresent()) {\n+                addConstraintsFromFilter(filterNode.get(), scanNode.get(), context);\n+                return null;\n+            }\n+\n+            sourceNode.accept(this, context);\n+            return null;\n+        }\n+\n+        private void addConstraintsFromFilter(FilterNode filterNode, TableScanNode tableScanNode, IoPlanBuilder context)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 139}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0ODA1Mjky", "url": "https://github.com/trinodb/trino/pull/2743#pullrequestreview-364805292", "createdAt": "2020-02-26T10:59:08Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDo1OTowOFrOFunJpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDo1OTowOFrOFunJpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyMDI2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                    Sets.newLinkedHashSet(\n          \n          \n            \n                                                    ImmutableSet.of", "url": "https://github.com/trinodb/trino/pull/2743#discussion_r384420260", "createdAt": "2020-02-26T10:59:08Z", "author": {"login": "Praveen2112"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -249,13 +262,289 @@ public void testIoExplain()\n                                                                         new FormattedRange(\n                                                                                 new FormattedMarker(Optional.of(\"1\"), EXACTLY),\n                                                                                 new FormattedMarker(Optional.of(\"199\"), EXACTLY)))))),\n+                                        ImmutableSet.of(\n+                                                new ColumnConstraint(\n+                                                        \"custkey\",\n+                                                        BIGINT,\n+                                                        new FormattedDomain(\n+                                                                false,\n+                                                                ImmutableSet.of(\n+                                                                        new FormattedRange(\n+                                                                                new FormattedMarker(Optional.empty(), ABOVE),\n+                                                                                new FormattedMarker(Optional.of(\"10\"), EXACTLY)))))),\n                                         estimate)),\n                         Optional.of(new CatalogSchemaTableName(catalog, \"tpch\", \"test_orders\")),\n                         estimate));\n \n+        EstimatedStatsAndCost finalEstimate = new EstimatedStatsAndCost(Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN);\n+        estimate = new EstimatedStatsAndCost(1.0, 18.0, 18, 0.0, 0.0);\n+        result = computeActual(\"EXPLAIN (TYPE IO, FORMAT JSON) INSERT INTO test_orders SELECT custkey, orderkey FROM test_orders WHERE orderkey = 100\");\n+        assertEquals(\n+                getIoPlanCodec().fromJson((String) getOnlyElement(result.getOnlyColumnAsSet())),\n+                new IoPlan(\n+                        ImmutableSet.of(\n+                                new TableColumnInfo(\n+                                        new CatalogSchemaTableName(catalog, \"tpch\", \"test_orders\"),\n+                                        ImmutableSet.of(\n+                                                new ColumnConstraint(\n+                                                        \"orderkey\",\n+                                                        BIGINT,\n+                                                        new FormattedDomain(\n+                                                                 false,\n+                                                                ImmutableSet.of(\n+                                                                         new FormattedRange(\n+                                                                                 new FormattedMarker(Optional.of(\"100\"), EXACTLY),\n+                                                                                 new FormattedMarker(Optional.of(\"100\"), EXACTLY)))))),\n+                                        ImmutableSet.of(\n+                                                new ColumnConstraint(\n+                                                        \"orderkey\",\n+                                                        BIGINT,\n+                                                        new FormattedDomain(\n+                                                                false,\n+                                                                 ImmutableSet.of(\n+                                                                        new FormattedRange(\n+                                                                                new FormattedMarker(Optional.of(\"100\"), EXACTLY),\n+                                                                                new FormattedMarker(Optional.of(\"100\"), EXACTLY)))))),\n+                                estimate)),\n+                        Optional.of(new CatalogSchemaTableName(catalog, \"tpch\", \"test_orders\")),\n+                        finalEstimate));\n+\n         assertUpdate(\"DROP TABLE test_orders\");\n     }\n \n+    @Test\n+    public void testIoExplainColumnFilters()\n+    {\n+        // Test IO explain with small number of discrete components.\n+        computeActual(\"CREATE TABLE test_orders WITH (partitioned_by = ARRAY['orderkey']) AS SELECT custkey, orderstatus, orderkey FROM orders WHERE orderkey < 3\");\n+\n+        EstimatedStatsAndCost estimate = new EstimatedStatsAndCost(2.0, 48.0, 48.0, 0.0, 0.0);\n+        EstimatedStatsAndCost finalEstimate = new EstimatedStatsAndCost(0.0, 0.0, 96.0, 0.0, 0.0);\n+        MaterializedResult result = computeActual(\"EXPLAIN (TYPE IO, FORMAT JSON) SELECT custkey, orderkey, orderstatus FROM test_orders WHERE custkey <= 10 and orderstatus='P'\");\n+        assertEquals(\n+                getIoPlanCodec().fromJson((String) getOnlyElement(result.getOnlyColumnAsSet())),\n+                new IoPlan(\n+                        ImmutableSet.of(\n+                                new TableColumnInfo(\n+                                        new CatalogSchemaTableName(catalog, \"tpch\", \"test_orders\"),\n+                                        ImmutableSet.of(\n+                                                new ColumnConstraint(\n+                                                        \"orderkey\",\n+                                                        BIGINT,\n+                                                        new FormattedDomain(\n+                                                                false,\n+                                                                ImmutableSet.of(\n+                                                                        new FormattedRange(\n+                                                                                new FormattedMarker(Optional.of(\"1\"), EXACTLY),\n+                                                                                new FormattedMarker(Optional.of(\"1\"), EXACTLY)),\n+                                                                        new FormattedRange(\n+                                                                                new FormattedMarker(Optional.of(\"2\"), EXACTLY),\n+                                                                                new FormattedMarker(Optional.of(\"2\"), EXACTLY)))))),\n+                                        ImmutableSet.of(\n+                                                new ColumnConstraint(\n+                                                        \"custkey\",\n+                                                        BIGINT,\n+                                                        new FormattedDomain(\n+                                                                false,\n+                                                                ImmutableSet.of(\n+                                                                        new FormattedRange(\n+                                                                                new FormattedMarker(Optional.empty(), ABOVE),\n+                                                                                new FormattedMarker(Optional.of(\"10\"), EXACTLY))))),\n+                                                new ColumnConstraint(\n+                                                        \"orderstatus\",\n+                                                        VarcharType.createVarcharType(1),\n+                                                        new FormattedDomain(\n+                                                                false,\n+                                                                ImmutableSet.of(\n+                                                                        new FormattedRange(\n+                                                                                new FormattedMarker(Optional.of(\"P\"), EXACTLY),\n+                                                                                new FormattedMarker(Optional.of(\"P\"), EXACTLY)))))),\n+                                        estimate)),\n+                        Optional.empty(),\n+                        finalEstimate));\n+        result = computeActual(\"EXPLAIN (TYPE IO, FORMAT JSON) SELECT custkey, orderkey, orderstatus FROM test_orders WHERE custkey <= 10 and (orderstatus='P' or orderstatus='S')\");\n+        assertEquals(\n+                getIoPlanCodec().fromJson((String) getOnlyElement(result.getOnlyColumnAsSet())),\n+                new IoPlan(\n+                        ImmutableSet.of(\n+                                new TableColumnInfo(\n+                                        new CatalogSchemaTableName(catalog, \"tpch\", \"test_orders\"),\n+                                        ImmutableSet.of(\n+                                                new ColumnConstraint(\n+                                                        \"orderkey\",\n+                                                        BIGINT,\n+                                                        new FormattedDomain(\n+                                                                false,\n+                                                                ImmutableSet.of(\n+                                                                        new FormattedRange(\n+                                                                                new FormattedMarker(Optional.of(\"1\"), EXACTLY),\n+                                                                                new FormattedMarker(Optional.of(\"1\"), EXACTLY)),\n+                                                                        new FormattedRange(\n+                                                                                new FormattedMarker(Optional.of(\"2\"), EXACTLY),\n+                                                                                new FormattedMarker(Optional.of(\"2\"), EXACTLY)))))),\n+                                        Sets.newLinkedHashSet(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 165}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0ODA3ODU2", "url": "https://github.com/trinodb/trino/pull/2743#pullrequestreview-364807856", "createdAt": "2020-02-26T11:03:05Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMTowMzowNlrOFunRgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMTowMzowNlrOFunRgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyMjI3NA==", "bodyText": "Can we move this method below the overridden methods ?", "url": "https://github.com/trinodb/trino/pull/2743#discussion_r384422274", "createdAt": "2020-02-26T11:03:06Z", "author": {"login": "Praveen2112"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/planprinter/IoPlanPrinter.java", "diffHunk": "@@ -600,19 +615,46 @@ protected Void visitPlan(PlanNode node, IoPlanBuilder context)\n         }\n \n         @Override\n-        public Void visitTableScan(TableScanNode node, IoPlanBuilder context)\n+        public Void visitFilter(FilterNode node, IoPlanBuilder context)\n         {\n-            TableMetadata tableMetadata = metadata.getTableMetadata(session, node.getTable());\n-            TupleDomain<ColumnHandle> predicate = metadata.getTableProperties(session, node.getTable()).getPredicate();\n-            EstimatedStatsAndCost estimatedStatsAndCost = getEstimatedStatsAndCost(node);\n+            PlanNode source = node.getSource();\n+            if (source instanceof TableScanNode) {\n+                addInputTableConstraints(node.getPredicate(), (TableScanNode) source, context);\n+                return null;\n+            }\n+\n+            return processChildren(node, context);\n+        }\n+\n+        private void addInputTableConstraints(Expression filterExpression, TableScanNode tableScanNode, IoPlanBuilder context)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NDQzMTEx", "url": "https://github.com/trinodb/trino/pull/2743#pullrequestreview-365443111", "createdAt": "2020-02-27T06:39:58Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjozOTo1OVrOFvGuIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjozOTo1OVrOFvGuIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNzUwNA==", "bodyText": "I guess we can change this to ImmutableSet.of", "url": "https://github.com/trinodb/trino/pull/2743#discussion_r384937504", "createdAt": "2020-02-27T06:39:59Z", "author": {"login": "Praveen2112"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -249,13 +262,289 @@ public void testIoExplain()\n                                                                         new FormattedRange(\n                                                                                 new FormattedMarker(Optional.of(\"1\"), EXACTLY),\n                                                                                 new FormattedMarker(Optional.of(\"199\"), EXACTLY)))))),\n+                                        ImmutableSet.of(\n+                                                new ColumnConstraint(\n+                                                        \"custkey\",\n+                                                        BIGINT,\n+                                                        new FormattedDomain(\n+                                                                false,\n+                                                                ImmutableSet.of(\n+                                                                        new FormattedRange(\n+                                                                                new FormattedMarker(Optional.empty(), ABOVE),\n+                                                                                new FormattedMarker(Optional.of(\"10\"), EXACTLY)))))),\n                                         estimate)),\n                         Optional.of(new CatalogSchemaTableName(catalog, \"tpch\", \"test_orders\")),\n                         estimate));\n \n+        EstimatedStatsAndCost finalEstimate = new EstimatedStatsAndCost(Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN);\n+        estimate = new EstimatedStatsAndCost(1.0, 18.0, 18, 0.0, 0.0);\n+        result = computeActual(\"EXPLAIN (TYPE IO, FORMAT JSON) INSERT INTO test_orders SELECT custkey, orderkey FROM test_orders WHERE orderkey = 100\");\n+        assertEquals(\n+                getIoPlanCodec().fromJson((String) getOnlyElement(result.getOnlyColumnAsSet())),\n+                new IoPlan(\n+                        ImmutableSet.of(\n+                                new TableColumnInfo(\n+                                        new CatalogSchemaTableName(catalog, \"tpch\", \"test_orders\"),\n+                                        ImmutableSet.of(\n+                                                new ColumnConstraint(\n+                                                        \"orderkey\",\n+                                                        BIGINT,\n+                                                        new FormattedDomain(\n+                                                                 false,\n+                                                                ImmutableSet.of(\n+                                                                         new FormattedRange(\n+                                                                                 new FormattedMarker(Optional.of(\"100\"), EXACTLY),\n+                                                                                 new FormattedMarker(Optional.of(\"100\"), EXACTLY)))))),\n+                                        ImmutableSet.of(\n+                                                new ColumnConstraint(\n+                                                        \"orderkey\",\n+                                                        BIGINT,\n+                                                        new FormattedDomain(\n+                                                                false,\n+                                                                 ImmutableSet.of(\n+                                                                        new FormattedRange(\n+                                                                                new FormattedMarker(Optional.of(\"100\"), EXACTLY),\n+                                                                                new FormattedMarker(Optional.of(\"100\"), EXACTLY)))))),\n+                                estimate)),\n+                        Optional.of(new CatalogSchemaTableName(catalog, \"tpch\", \"test_orders\")),\n+                        finalEstimate));\n+\n         assertUpdate(\"DROP TABLE test_orders\");\n     }\n \n+    @Test\n+    public void testIoExplainColumnFilters()\n+    {\n+        // Test IO explain with small number of discrete components.\n+        computeActual(\"CREATE TABLE test_orders WITH (partitioned_by = ARRAY['orderkey']) AS SELECT custkey, orderstatus, orderkey FROM orders WHERE orderkey < 3\");\n+\n+        EstimatedStatsAndCost estimate = new EstimatedStatsAndCost(2.0, 48.0, 48.0, 0.0, 0.0);\n+        EstimatedStatsAndCost finalEstimate = new EstimatedStatsAndCost(0.0, 0.0, 96.0, 0.0, 0.0);\n+        MaterializedResult result = computeActual(\"EXPLAIN (TYPE IO, FORMAT JSON) SELECT custkey, orderkey, orderstatus FROM test_orders WHERE custkey <= 10 and orderstatus='P'\");\n+        assertEquals(\n+                getIoPlanCodec().fromJson((String) getOnlyElement(result.getOnlyColumnAsSet())),\n+                new IoPlan(\n+                        ImmutableSet.of(\n+                                new TableColumnInfo(\n+                                        new CatalogSchemaTableName(catalog, \"tpch\", \"test_orders\"),\n+                                        ImmutableSet.of(\n+                                                new ColumnConstraint(\n+                                                        \"orderkey\",\n+                                                        BIGINT,\n+                                                        new FormattedDomain(\n+                                                                false,\n+                                                                ImmutableSet.of(\n+                                                                        new FormattedRange(\n+                                                                                new FormattedMarker(Optional.of(\"1\"), EXACTLY),\n+                                                                                new FormattedMarker(Optional.of(\"1\"), EXACTLY)),\n+                                                                        new FormattedRange(\n+                                                                                new FormattedMarker(Optional.of(\"2\"), EXACTLY),\n+                                                                                new FormattedMarker(Optional.of(\"2\"), EXACTLY)))))),\n+                                        ImmutableSet.of(\n+                                                new ColumnConstraint(\n+                                                        \"custkey\",\n+                                                        BIGINT,\n+                                                        new FormattedDomain(\n+                                                                false,\n+                                                                ImmutableSet.of(\n+                                                                        new FormattedRange(\n+                                                                                new FormattedMarker(Optional.empty(), ABOVE),\n+                                                                                new FormattedMarker(Optional.of(\"10\"), EXACTLY))))),\n+                                                new ColumnConstraint(\n+                                                        \"orderstatus\",\n+                                                        VarcharType.createVarcharType(1),\n+                                                        new FormattedDomain(\n+                                                                false,\n+                                                                ImmutableSet.of(\n+                                                                        new FormattedRange(\n+                                                                                new FormattedMarker(Optional.of(\"P\"), EXACTLY),\n+                                                                                new FormattedMarker(Optional.of(\"P\"), EXACTLY)))))),\n+                                        estimate)),\n+                        Optional.empty(),\n+                        finalEstimate));\n+        result = computeActual(\"EXPLAIN (TYPE IO, FORMAT JSON) SELECT custkey, orderkey, orderstatus FROM test_orders WHERE custkey <= 10 and (orderstatus='P' or orderstatus='S')\");\n+        assertEquals(\n+                getIoPlanCodec().fromJson((String) getOnlyElement(result.getOnlyColumnAsSet())),\n+                new IoPlan(\n+                        ImmutableSet.of(\n+                                new TableColumnInfo(\n+                                        new CatalogSchemaTableName(catalog, \"tpch\", \"test_orders\"),\n+                                        ImmutableSet.of(\n+                                                new ColumnConstraint(\n+                                                        \"orderkey\",\n+                                                        BIGINT,\n+                                                        new FormattedDomain(\n+                                                                false,\n+                                                                ImmutableSet.of(\n+                                                                        new FormattedRange(\n+                                                                                new FormattedMarker(Optional.of(\"1\"), EXACTLY),\n+                                                                                new FormattedMarker(Optional.of(\"1\"), EXACTLY)),\n+                                                                        new FormattedRange(\n+                                                                                new FormattedMarker(Optional.of(\"2\"), EXACTLY),\n+                                                                                new FormattedMarker(Optional.of(\"2\"), EXACTLY)))))),\n+                                        Sets.newLinkedHashSet(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyMDI2MA=="}, "originalCommit": null, "originalPosition": 165}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNjAxNTgx", "url": "https://github.com/trinodb/trino/pull/2743#pullrequestreview-370601581", "createdAt": "2020-03-06T20:19:36Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDoxOTozN1rOFzGP-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDoyNDozMVrOFzGYaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyNDA5MA==", "bodyText": "I don't see a good reason for changing the name of this class, so I'd keep it as it was before. At a minimum, if we're changing it to make usage or meaning clearer, it should be done in a separate commit.", "url": "https://github.com/trinodb/trino/pull/2743#discussion_r389124090", "createdAt": "2020-03-06T20:19:37Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/planprinter/IoPlanPrinter.java", "diffHunk": "@@ -244,36 +247,36 @@ public boolean equals(Object obj)\n                 }\n                 TableColumnInfo o = (TableColumnInfo) obj;\n                 return Objects.equals(table, o.table) &&\n-                        Objects.equals(columnConstraints, o.columnConstraints) &&\n+                        Objects.equals(columns, o.columns) &&\n                         Objects.equals(estimate, o.estimate);\n             }\n \n             @Override\n             public int hashCode()\n             {\n-                return Objects.hash(table, columnConstraints, estimate);\n+                return Objects.hash(table, columns, estimate);\n             }\n \n             @Override\n             public String toString()\n             {\n                 return toStringHelper(this)\n                         .add(\"table\", table)\n-                        .add(\"columnConstraints\", columnConstraints)\n+                        .add(\"columns\", columns)\n                         .add(\"estimate\", estimate)\n                         .toString();\n             }\n         }\n     }\n \n-    public static class ColumnConstraint\n+    public static class Column", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyNDg2MA==", "bodyText": "Rename tableScanNode to just tableScan", "url": "https://github.com/trinodb/trino/pull/2743#discussion_r389124860", "createdAt": "2020-03-06T20:21:19Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/planprinter/IoPlanPrinter.java", "diffHunk": "@@ -650,6 +663,22 @@ else if (writerTarget instanceof CreateReference || writerTarget instanceof Inse\n             return processChildren(node, context);\n         }\n \n+        private void addInputTableConstraints(TupleDomain<ColumnHandle> filterDomain, TableScanNode tableScanNode, IoPlanBuilder context)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyNjI1MQ==", "bodyText": "What if there's an overlap between the table properties and the filter? (e.g., a filter limits a column to some range and table properties limit the same column to another range)? If I read this correctly, you'll end up with two entries for that column. This code should do an intersection of the corresponding domains.", "url": "https://github.com/trinodb/trino/pull/2743#discussion_r389126251", "createdAt": "2020-03-06T20:24:31Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/planprinter/IoPlanPrinter.java", "diffHunk": "@@ -650,6 +663,22 @@ else if (writerTarget instanceof CreateReference || writerTarget instanceof Inse\n             return processChildren(node, context);\n         }\n \n+        private void addInputTableConstraints(TupleDomain<ColumnHandle> filterDomain, TableScanNode tableScanNode, IoPlanBuilder context)\n+        {\n+            TableHandle table = tableScanNode.getTable();\n+            TableMetadata tableMetadata = metadata.getTableMetadata(session, table);\n+            TupleDomain<ColumnHandle> predicate = metadata.getTableProperties(session, table).getPredicate();\n+            EstimatedStatsAndCost estimatedStatsAndCost = getEstimatedStatsAndCost(tableScanNode);\n+            context.addInputTableColumnInfo(\n+                    new IoPlan.TableColumnInfo(\n+                            new CatalogSchemaTableName(\n+                                    tableMetadata.getCatalogName().getCatalogName(),\n+                                    tableMetadata.getTable().getSchemaName(),\n+                                    tableMetadata.getTable().getTableName()),\n+                            Sets.union(parseConstraints(table, predicate), parseConstraints(table, filterDomain)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 160}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MTQ5OTk2", "url": "https://github.com/trinodb/trino/pull/2743#pullrequestreview-377149996", "createdAt": "2020-03-18T18:56:23Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxODo1NjoyM1rOF4SwoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxODo1NjoyM1rOF4SwoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU3MTkzNg==", "bodyText": "Why is columnConstraints being renamed to columns? In particular, changing this in the JSON representation will break backward compatibility.", "url": "https://github.com/trinodb/trino/pull/2743#discussion_r394571936", "createdAt": "2020-03-18T18:56:23Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/planprinter/IoPlanPrinter.java", "diffHunk": "@@ -201,17 +203,17 @@ private EstimatedStatsAndCost getEstimatedStatsAndCost()\n         public static class TableColumnInfo\n         {\n             private final CatalogSchemaTableName table;\n-            private final Set<ColumnConstraint> columnConstraints;\n+            private final Set<ColumnConstraint> columns;\n             private final EstimatedStatsAndCost estimate;\n \n             @JsonCreator\n             public TableColumnInfo(\n                     @JsonProperty(\"table\") CatalogSchemaTableName table,\n-                    @JsonProperty(\"columnConstraints\") Set<ColumnConstraint> columnConstraints,\n+                    @JsonProperty(\"columns\") Set<ColumnConstraint> columns,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea09bc201b6ba2637df9aab75c7cc290ee1882e3", "author": {"user": {"login": "JamesRTaylor", "name": "James Taylor"}}, "url": "https://github.com/trinodb/trino/commit/ea09bc201b6ba2637df9aab75c7cc290ee1882e3", "committedDate": "2020-03-18T22:39:08Z", "message": "Include filtered columns in EXPLAIN (TYPE IO)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "ea09bc201b6ba2637df9aab75c7cc290ee1882e3", "author": {"user": {"login": "JamesRTaylor", "name": "James Taylor"}}, "url": "https://github.com/trinodb/trino/commit/ea09bc201b6ba2637df9aab75c7cc290ee1882e3", "committedDate": "2020-03-18T22:39:08Z", "message": "Include filtered columns in EXPLAIN (TYPE IO)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5ODM0MTA2", "url": "https://github.com/trinodb/trino/pull/2743#pullrequestreview-379834106", "createdAt": "2020-03-23T21:24:57Z", "commit": {"oid": "ea09bc201b6ba2637df9aab75c7cc290ee1882e3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1643, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}