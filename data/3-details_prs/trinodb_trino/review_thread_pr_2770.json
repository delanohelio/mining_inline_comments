{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNzgxMTQ3", "number": 2770, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMTowOTozM1rODeTB3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMDoxMzoyNlrODgO2uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDk1NjQ2OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMTowOTozM1rOFnW_8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQwMDozNzo1M1rOFqRLlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxNTYwMg==", "bodyText": "use try-with-resources to ensure ResultSet (and temporary Statement if needed) are closed -- the returned PrestoResultSetMetaData does not hold on to the ResultSet being obtained here\n\n\nIt's unclear from the javadoc whether getMetaData() can be called after execute was called.\n\n\nIf it cannot, then you can simply do this here:\ntry (ResultSet resultSet = super.executeQuery(\"DESCRIBE OUTPUT \" + statementName)) {\n    return new PrestoResultSetMetaData(getDescribeOutputColumnInfoList(resultSet));\n}\n\nIf it can, we need a separate, temporary statement object:\ntry (Statement statement = connection().createStatement();\n        ResultSet resultSet = statement.executeQuery(\"DESCRIBE OUTPUT \" + statementName)) {\n    return new PrestoResultSetMetaData(getDescribeOutputColumnInfoList(resultSet));\n}\n\n@electrum do you know?", "url": "https://github.com/trinodb/trino/pull/2770#discussion_r376815602", "createdAt": "2020-02-09T21:09:33Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -479,7 +495,9 @@ public void setArray(int parameterIndex, Array x)\n     public ResultSetMetaData getMetaData()\n             throws SQLException\n     {\n-        throw new SQLFeatureNotSupportedException(\"getMetaData\");\n+        DatabaseMetaData databaseMetaData = super.getConnection().getMetaData();\n+        ResultSet resultSet = ((PrestoDatabaseMetaData) databaseMetaData).getDescribeOutput(statementName);\n+        return new PrestoResultSetMetaData(getDescribeOutputColumnInfoList(resultSet));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTc1Nzg1Mg==", "bodyText": "I'm not sure either, but it should be fine either way since this is our code.", "url": "https://github.com/trinodb/trino/pull/2770#discussion_r379757852", "createdAt": "2020-02-15T06:12:03Z", "author": {"login": "electrum"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -479,7 +495,9 @@ public void setArray(int parameterIndex, Array x)\n     public ResultSetMetaData getMetaData()\n             throws SQLException\n     {\n-        throw new SQLFeatureNotSupportedException(\"getMetaData\");\n+        DatabaseMetaData databaseMetaData = super.getConnection().getMetaData();\n+        ResultSet resultSet = ((PrestoDatabaseMetaData) databaseMetaData).getDescribeOutput(statementName);\n+        return new PrestoResultSetMetaData(getDescribeOutputColumnInfoList(resultSet));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxNTYwMg=="}, "originalCommit": null, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2NjAwNA==", "bodyText": "Given https://github.com/prestosql/presto/blob/master/presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java#L657, the first one won't be able to run. I will just use the second approach.", "url": "https://github.com/trinodb/trino/pull/2770#discussion_r379866004", "createdAt": "2020-02-16T00:37:53Z", "author": {"login": "puchengy"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -479,7 +495,9 @@ public void setArray(int parameterIndex, Array x)\n     public ResultSetMetaData getMetaData()\n             throws SQLException\n     {\n-        throw new SQLFeatureNotSupportedException(\"getMetaData\");\n+        DatabaseMetaData databaseMetaData = super.getConnection().getMetaData();\n+        ResultSet resultSet = ((PrestoDatabaseMetaData) databaseMetaData).getDescribeOutput(statementName);\n+        return new PrestoResultSetMetaData(getDescribeOutputColumnInfoList(resultSet));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxNTYwMg=="}, "originalCommit": null, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDk1NjU5OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoDatabaseMetaData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMToxMDowMlrOFnXABg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMToxMDowMlrOFnXABg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxNTYyMg==", "bodyText": "There is no need for PrestoPreparedStatement to use PrestoDatabaseMetaData, so you can remove this method.", "url": "https://github.com/trinodb/trino/pull/2770#discussion_r376815622", "createdAt": "2020-02-09T21:10:02Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoDatabaseMetaData.java", "diffHunk": "@@ -1410,6 +1410,12 @@ public boolean isWrapperFor(Class<?> iface)\n         return iface.isInstance(this);\n     }\n \n+    ResultSet getDescribeOutput(String statementName)\n+            throws SQLException\n+    {\n+        return select(\"DESCRIBE OUTPUT \" + statementName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0OTg1MTgwOnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwNjoxMzozNlrOFqKnZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwNjoxMzozNlrOFqKnZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTc1ODQzOA==", "bodyText": "checkArgument takes a template that supports %s, so use that instead of string concatenation", "url": "https://github.com/trinodb/trino/pull/2770#discussion_r379758438", "createdAt": "2020-02-15T06:13:36Z", "author": {"login": "electrum"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -858,4 +876,69 @@ private static String typedNull(String prestoType)\n     {\n         return format(\"CAST(NULL AS %s)\", prestoType);\n     }\n+\n+    private static List<ColumnInfo> getDescribeOutputColumnInfoList(ResultSet resultSet)\n+            throws SQLException\n+    {\n+        ImmutableList.Builder<ColumnInfo> list = ImmutableList.builder();\n+        while (resultSet.next()) {\n+            String columnName = resultSet.getString(\"Column Name\");\n+            String catalog = resultSet.getString(\"Catalog\");\n+            String schema = resultSet.getString(\"Schema\");\n+            String table = resultSet.getString(\"Table\");\n+            ClientTypeSignature clientTypeSignature = getClientTypeSignatureFromTypeString(resultSet.getString(\"Type\"));\n+            ColumnInfo.Builder builder = new ColumnInfo.Builder()\n+                    .setColumnName(columnName)\n+                    .setColumnLabel(columnName)\n+                    .setCatalogName(catalog)\n+                    .setSchemaName(schema)\n+                    .setTableName(table)\n+                    .setColumnTypeSignature(clientTypeSignature)\n+                    .setNullable(ColumnInfo.Nullable.UNKNOWN);\n+            setTypeInfo(builder, clientTypeSignature);\n+            list.add(builder.build());\n+        }\n+        return list.build();\n+    }\n+\n+    @VisibleForTesting\n+    static ClientTypeSignature getClientTypeSignatureFromTypeString(String type)\n+    {\n+        String topLevelType;\n+        List<ClientTypeSignatureParameter> arguments = new ArrayList<>();\n+        Matcher topLevelMatcher = TOP_LEVEL_TYPE_PATTERN.matcher(type);\n+        if (topLevelMatcher.matches()) {\n+            topLevelType = topLevelMatcher.group(1);\n+            String typeParameters = topLevelMatcher.group(2);\n+            if (topLevelType.equals(\"decimal\")) {\n+                List<String> precisionAndScale = Splitter.on(',').splitToList(typeParameters);\n+                checkArgument(precisionAndScale.size() == 2, \"Invalid decimal parameters: \" + typeParameters);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0OTg2MzM0OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcPreparedStatement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwNjoxNjo1MVrOFqKsCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwNjoxNjo1MVrOFqKsCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTc1OTYyNg==", "bodyText": "I think this should return row (without parenthesis) to be consistent with array and map. This will need to be fixed in ClientTypeSignature to skip parenthesis if the arguments list is empty.", "url": "https://github.com/trinodb/trino/pull/2770#discussion_r379759626", "createdAt": "2020-02-15T06:16:51Z", "author": {"login": "electrum"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcPreparedStatement.java", "diffHunk": "@@ -103,6 +108,106 @@ public void testExecuteQuery()\n         }\n     }\n \n+    @Test\n+    public void testGetMetadata()\n+            throws Exception\n+    {\n+        try (Connection connection = createConnection(\"blackhole\", \"blackhole\")) {\n+            try (Statement statement = connection.createStatement()) {\n+                statement.execute(\"CREATE TABLE test_get_metadata (\" +\n+                        \"c_boolean boolean, \" +\n+                        \"c_decimal decimal, \" +\n+                        \"c_decimal_2 decimal(10,3),\" +\n+                        \"c_varchar varchar, \" +\n+                        \"c_varchar_2 varchar(10), \" +\n+                        \"c_row row(x integer, y array(integer)), \" +\n+                        \"c_array array(integer), \" +\n+                        \"c_map map(integer, integer))\");\n+            }\n+\n+            try (PreparedStatement statement = connection.prepareStatement(\n+                    \"SELECT * FROM test_get_metadata\")) {\n+                ResultSetMetaData metadata = statement.getMetaData();\n+                assertEquals(metadata.getColumnCount(), 8);\n+                for (int i = 1; i <= metadata.getColumnCount(); i++) {\n+                    assertEquals(metadata.getCatalogName(i), \"blackhole\");\n+                    assertEquals(metadata.getSchemaName(i), \"blackhole\");\n+                    assertEquals(metadata.getTableName(i), \"test_get_metadata\");\n+                }\n+\n+                assertEquals(metadata.getColumnName(1), \"c_boolean\");\n+                assertEquals(metadata.getColumnTypeName(1), \"boolean\");\n+\n+                assertEquals(metadata.getColumnName(2), \"c_decimal\");\n+                assertEquals(metadata.getColumnTypeName(2), \"decimal(38,0)\");\n+\n+                assertEquals(metadata.getColumnName(3), \"c_decimal_2\");\n+                assertEquals(metadata.getColumnTypeName(3), \"decimal(10,3)\");\n+\n+                assertEquals(metadata.getColumnName(4), \"c_varchar\");\n+                assertEquals(metadata.getColumnTypeName(4), \"varchar(2147483646)\");\n+\n+                assertEquals(metadata.getColumnName(5), \"c_varchar_2\");\n+                assertEquals(metadata.getColumnTypeName(5), \"varchar(10)\");\n+\n+                assertEquals(metadata.getColumnName(6), \"c_row\");\n+                assertEquals(metadata.getColumnTypeName(6), \"row()\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0OTg2NzY5OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwNjoxODozMFrOFqKt8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQwMDo1MToyN1rOFqRNpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTc2MDExMg==", "bodyText": "We should simply return varchar for the type rather than one with the max length, since that's consistent with how the types work in SQL in the engine. There are actually two varchar types, bounded and unbounded. This would be an unbounded type.", "url": "https://github.com/trinodb/trino/pull/2770#discussion_r379760112", "createdAt": "2020-02-15T06:18:30Z", "author": {"login": "electrum"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -858,4 +876,69 @@ private static String typedNull(String prestoType)\n     {\n         return format(\"CAST(NULL AS %s)\", prestoType);\n     }\n+\n+    private static List<ColumnInfo> getDescribeOutputColumnInfoList(ResultSet resultSet)\n+            throws SQLException\n+    {\n+        ImmutableList.Builder<ColumnInfo> list = ImmutableList.builder();\n+        while (resultSet.next()) {\n+            String columnName = resultSet.getString(\"Column Name\");\n+            String catalog = resultSet.getString(\"Catalog\");\n+            String schema = resultSet.getString(\"Schema\");\n+            String table = resultSet.getString(\"Table\");\n+            ClientTypeSignature clientTypeSignature = getClientTypeSignatureFromTypeString(resultSet.getString(\"Type\"));\n+            ColumnInfo.Builder builder = new ColumnInfo.Builder()\n+                    .setColumnName(columnName)\n+                    .setColumnLabel(columnName)\n+                    .setCatalogName(catalog)\n+                    .setSchemaName(schema)\n+                    .setTableName(table)\n+                    .setColumnTypeSignature(clientTypeSignature)\n+                    .setNullable(ColumnInfo.Nullable.UNKNOWN);\n+            setTypeInfo(builder, clientTypeSignature);\n+            list.add(builder.build());\n+        }\n+        return list.build();\n+    }\n+\n+    @VisibleForTesting\n+    static ClientTypeSignature getClientTypeSignatureFromTypeString(String type)\n+    {\n+        String topLevelType;\n+        List<ClientTypeSignatureParameter> arguments = new ArrayList<>();\n+        Matcher topLevelMatcher = TOP_LEVEL_TYPE_PATTERN.matcher(type);\n+        if (topLevelMatcher.matches()) {\n+            topLevelType = topLevelMatcher.group(1);\n+            String typeParameters = topLevelMatcher.group(2);\n+            if (topLevelType.equals(\"decimal\")) {\n+                List<String> precisionAndScale = Splitter.on(',').splitToList(typeParameters);\n+                checkArgument(precisionAndScale.size() == 2, \"Invalid decimal parameters: \" + typeParameters);\n+                arguments.add(ClientTypeSignatureParameter.ofLong(parseLong(precisionAndScale.get(0))));\n+                arguments.add(ClientTypeSignatureParameter.ofLong(parseLong(precisionAndScale.get(1))));\n+            }\n+            else if (topLevelType.equals(\"char\") || topLevelType.equals(\"varchar\")) {\n+                long precision = parseLong(typeParameters);\n+                arguments.add(ClientTypeSignatureParameter.ofLong(precision));\n+            }\n+        }\n+        else {\n+            Matcher timestampMatcher = TIMESTAMP_WITH_TIME_ZONE_PRECISION_PATTERN.matcher(type);\n+            Matcher timeMatcher = TIME_WITH_TIME_ZONE_PRECISION_PATTERN.matcher(type);\n+            if (timestampMatcher.matches()) {\n+                topLevelType = \"timestamp with time zone\";\n+                arguments.add(ClientTypeSignatureParameter.ofLong(parseLong(timestampMatcher.group(1))));\n+            }\n+            else if (timeMatcher.matches()) {\n+                topLevelType = \"time with time zone\";\n+                arguments.add(ClientTypeSignatureParameter.ofLong(parseLong(timeMatcher.group(1))));\n+            }\n+            else {\n+                topLevelType = type;\n+                if (topLevelType.equals(\"varchar\")) {\n+                    arguments.add(ClientTypeSignatureParameter.ofLong(VARCHAR_MAX_LENGTH));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2NjUzMw==", "bodyText": "@electrum To honor the current logic of constructing the column info (always assuming varchar has a parameter in the list) https://github.com/prestosql/presto/blob/master/presto-jdbc/src/main/java/io/prestosql/jdbc/ColumnInfo.java#L144\nI will change the client output behavior in ClientTypeSignature", "url": "https://github.com/trinodb/trino/pull/2770#discussion_r379866533", "createdAt": "2020-02-16T00:51:27Z", "author": {"login": "puchengy"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -858,4 +876,69 @@ private static String typedNull(String prestoType)\n     {\n         return format(\"CAST(NULL AS %s)\", prestoType);\n     }\n+\n+    private static List<ColumnInfo> getDescribeOutputColumnInfoList(ResultSet resultSet)\n+            throws SQLException\n+    {\n+        ImmutableList.Builder<ColumnInfo> list = ImmutableList.builder();\n+        while (resultSet.next()) {\n+            String columnName = resultSet.getString(\"Column Name\");\n+            String catalog = resultSet.getString(\"Catalog\");\n+            String schema = resultSet.getString(\"Schema\");\n+            String table = resultSet.getString(\"Table\");\n+            ClientTypeSignature clientTypeSignature = getClientTypeSignatureFromTypeString(resultSet.getString(\"Type\"));\n+            ColumnInfo.Builder builder = new ColumnInfo.Builder()\n+                    .setColumnName(columnName)\n+                    .setColumnLabel(columnName)\n+                    .setCatalogName(catalog)\n+                    .setSchemaName(schema)\n+                    .setTableName(table)\n+                    .setColumnTypeSignature(clientTypeSignature)\n+                    .setNullable(ColumnInfo.Nullable.UNKNOWN);\n+            setTypeInfo(builder, clientTypeSignature);\n+            list.add(builder.build());\n+        }\n+        return list.build();\n+    }\n+\n+    @VisibleForTesting\n+    static ClientTypeSignature getClientTypeSignatureFromTypeString(String type)\n+    {\n+        String topLevelType;\n+        List<ClientTypeSignatureParameter> arguments = new ArrayList<>();\n+        Matcher topLevelMatcher = TOP_LEVEL_TYPE_PATTERN.matcher(type);\n+        if (topLevelMatcher.matches()) {\n+            topLevelType = topLevelMatcher.group(1);\n+            String typeParameters = topLevelMatcher.group(2);\n+            if (topLevelType.equals(\"decimal\")) {\n+                List<String> precisionAndScale = Splitter.on(',').splitToList(typeParameters);\n+                checkArgument(precisionAndScale.size() == 2, \"Invalid decimal parameters: \" + typeParameters);\n+                arguments.add(ClientTypeSignatureParameter.ofLong(parseLong(precisionAndScale.get(0))));\n+                arguments.add(ClientTypeSignatureParameter.ofLong(parseLong(precisionAndScale.get(1))));\n+            }\n+            else if (topLevelType.equals(\"char\") || topLevelType.equals(\"varchar\")) {\n+                long precision = parseLong(typeParameters);\n+                arguments.add(ClientTypeSignatureParameter.ofLong(precision));\n+            }\n+        }\n+        else {\n+            Matcher timestampMatcher = TIMESTAMP_WITH_TIME_ZONE_PRECISION_PATTERN.matcher(type);\n+            Matcher timeMatcher = TIME_WITH_TIME_ZONE_PRECISION_PATTERN.matcher(type);\n+            if (timestampMatcher.matches()) {\n+                topLevelType = \"timestamp with time zone\";\n+                arguments.add(ClientTypeSignatureParameter.ofLong(parseLong(timestampMatcher.group(1))));\n+            }\n+            else if (timeMatcher.matches()) {\n+                topLevelType = \"time with time zone\";\n+                arguments.add(ClientTypeSignatureParameter.ofLong(parseLong(timeMatcher.group(1))));\n+            }\n+            else {\n+                topLevelType = type;\n+                if (topLevelType.equals(\"varchar\")) {\n+                    arguments.add(ClientTypeSignatureParameter.ofLong(VARCHAR_MAX_LENGTH));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTc2MDExMg=="}, "originalCommit": null, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDk4NTE0OnYy", "diffSide": "RIGHT", "path": "presto-client/src/main/java/io/prestosql/client/ClientTypeSignature.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQxMToyOTo1N1rOFqS_vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQxODowNjo1MlrOFqUlkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5NTc0MQ==", "bodyText": "Shouldn't the condition be arguments.get(0).getLongLiteral() == Integer.MAX_VALUE  (UNBOUNDED_LENGTH) rather than ... = Integer.MAX_VALUE - 1 (MAX_LENGTH) ?\nhttps://github.com/prestosql/presto/blob/d3a1d8ca12b84524cd2d6f88fceb9a9c53df9700/presto-spi/src/main/java/io/prestosql/spi/type/VarcharType.java#L32-L34", "url": "https://github.com/trinodb/trino/pull/2770#discussion_r379895741", "createdAt": "2020-02-16T11:29:57Z", "author": {"login": "findepi"}, "path": "presto-client/src/main/java/io/prestosql/client/ClientTypeSignature.java", "diffHunk": "@@ -87,6 +90,10 @@ public String toString()\n             return rowToString();\n         }\n \n+        if (rawType.equals(VARCHAR) && arguments.get(0).getKind() == ParameterKind.LONG && arguments.get(0).getLongLiteral() == VARCHAR_MAX_LENGTH) {\n+            return \"varchar\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyMTgwOA==", "bodyText": "You are right, thanks!", "url": "https://github.com/trinodb/trino/pull/2770#discussion_r379921808", "createdAt": "2020-02-16T18:06:52Z", "author": {"login": "puchengy"}, "path": "presto-client/src/main/java/io/prestosql/client/ClientTypeSignature.java", "diffHunk": "@@ -87,6 +90,10 @@ public String toString()\n             return rowToString();\n         }\n \n+        if (rawType.equals(VARCHAR) && arguments.get(0).getKind() == ParameterKind.LONG && arguments.get(0).getLongLiteral() == VARCHAR_MAX_LENGTH) {\n+            return \"varchar\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5NTc0MQ=="}, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDk4NTI1OnYy", "diffSide": "RIGHT", "path": "presto-client/src/main/java/io/prestosql/client/ClientTypeSignature.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQxMTozMDoxNVrOFqS_yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQxMTozMDoxNVrOFqS_yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5NTc1NA==", "bodyText": "the else is redundant, since \"then\" block always returns", "url": "https://github.com/trinodb/trino/pull/2770#discussion_r379895754", "createdAt": "2020-02-16T11:30:15Z", "author": {"login": "findepi"}, "path": "presto-client/src/main/java/io/prestosql/client/ClientTypeSignature.java", "diffHunk": "@@ -108,7 +115,12 @@ private String rowToString()\n                 })\n                 .collect(joining(\",\"));\n \n-        return format(\"row(%s)\", fields);\n+        if (isNullOrEmpty(fields)) {\n+            return \"row\";\n+        }\n+        else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTIzOTkxOnYy", "diffSide": "RIGHT", "path": "presto-client/src/main/java/io/prestosql/client/ClientTypeSignature.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMDowNDo1OVrOFqVC1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMDowNDo1OVrOFqVC1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyOTMwMQ==", "bodyText": "fields cannot be null, so just:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (isNullOrEmpty(fields)) {\n          \n          \n            \n                    if (fields.isEmpty()) {", "url": "https://github.com/trinodb/trino/pull/2770#discussion_r379929301", "createdAt": "2020-02-16T20:04:59Z", "author": {"login": "findepi"}, "path": "presto-client/src/main/java/io/prestosql/client/ClientTypeSignature.java", "diffHunk": "@@ -108,6 +115,9 @@ private String rowToString()\n                 })\n                 .collect(joining(\",\"));\n \n+        if (isNullOrEmpty(fields)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTI0MDM4OnYy", "diffSide": "RIGHT", "path": "presto-client/src/main/java/io/prestosql/client/ClientTypeSignature.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMDowNTo1N1rOFqVDJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMDowNjo0N1rOFqVDbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyOTM4MA==", "bodyText": "\"unbounded length\" doesn't say what this is referring to, so:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final int UNBOUNDED_LENGTH = Integer.MAX_VALUE;\n          \n          \n            \n                public static final int VARCHAR_UNBOUNDED_LENGTH = Integer.MAX_VALUE;", "url": "https://github.com/trinodb/trino/pull/2770#discussion_r379929380", "createdAt": "2020-02-16T20:05:57Z", "author": {"login": "findepi"}, "path": "presto-client/src/main/java/io/prestosql/client/ClientTypeSignature.java", "diffHunk": "@@ -41,6 +43,7 @@\n     private static final Pattern PATTERN = Pattern.compile(\".*[<>,].*\");\n     private final String rawType;\n     private final List<ClientTypeSignatureParameter> arguments;\n+    public static final int UNBOUNDED_LENGTH = Integer.MAX_VALUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyOTQ1NQ==", "bodyText": "This still wouldn't be great (unbounded varchar doesn't have length), but i don't currently have a better name, so can be \"VARCHAR_UNBOUNDED_LENGTH\".", "url": "https://github.com/trinodb/trino/pull/2770#discussion_r379929455", "createdAt": "2020-02-16T20:06:47Z", "author": {"login": "findepi"}, "path": "presto-client/src/main/java/io/prestosql/client/ClientTypeSignature.java", "diffHunk": "@@ -41,6 +43,7 @@\n     private static final Pattern PATTERN = Pattern.compile(\".*[<>,].*\");\n     private final String rawType;\n     private final List<ClientTypeSignatureParameter> arguments;\n+    public static final int UNBOUNDED_LENGTH = Integer.MAX_VALUE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyOTM4MA=="}, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTI0MzQ2OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMDoxMjoyMlrOFqVEvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMjoyNjoyOFrOFqw1sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyOTc5MQ==", "bodyText": "there should be a comment explaining why we discard type parameters for array, map, row", "url": "https://github.com/trinodb/trino/pull/2770#discussion_r379929791", "createdAt": "2020-02-16T20:12:22Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -858,4 +876,69 @@ private static String typedNull(String prestoType)\n     {\n         return format(\"CAST(NULL AS %s)\", prestoType);\n     }\n+\n+    private static List<ColumnInfo> getDescribeOutputColumnInfoList(ResultSet resultSet)\n+            throws SQLException\n+    {\n+        ImmutableList.Builder<ColumnInfo> list = ImmutableList.builder();\n+        while (resultSet.next()) {\n+            String columnName = resultSet.getString(\"Column Name\");\n+            String catalog = resultSet.getString(\"Catalog\");\n+            String schema = resultSet.getString(\"Schema\");\n+            String table = resultSet.getString(\"Table\");\n+            ClientTypeSignature clientTypeSignature = getClientTypeSignatureFromTypeString(resultSet.getString(\"Type\"));\n+            ColumnInfo.Builder builder = new ColumnInfo.Builder()\n+                    .setColumnName(columnName)\n+                    .setColumnLabel(columnName)\n+                    .setCatalogName(catalog)\n+                    .setSchemaName(schema)\n+                    .setTableName(table)\n+                    .setColumnTypeSignature(clientTypeSignature)\n+                    .setNullable(ColumnInfo.Nullable.UNKNOWN);\n+            setTypeInfo(builder, clientTypeSignature);\n+            list.add(builder.build());\n+        }\n+        return list.build();\n+    }\n+\n+    @VisibleForTesting\n+    static ClientTypeSignature getClientTypeSignatureFromTypeString(String type)\n+    {\n+        String topLevelType;\n+        List<ClientTypeSignatureParameter> arguments = new ArrayList<>();\n+        Matcher topLevelMatcher = TOP_LEVEL_TYPE_PATTERN.matcher(type);\n+        if (topLevelMatcher.matches()) {\n+            topLevelType = topLevelMatcher.group(1);\n+            String typeParameters = topLevelMatcher.group(2);\n+            if (topLevelType.equals(\"decimal\")) {\n+                List<String> precisionAndScale = Splitter.on(',').splitToList(typeParameters);\n+                checkArgument(precisionAndScale.size() == 2, \"Invalid decimal parameters: %s\", typeParameters);\n+                arguments.add(ClientTypeSignatureParameter.ofLong(parseLong(precisionAndScale.get(0))));\n+                arguments.add(ClientTypeSignatureParameter.ofLong(parseLong(precisionAndScale.get(1))));\n+            }\n+            else if (topLevelType.equals(\"char\") || topLevelType.equals(\"varchar\")) {\n+                long precision = parseLong(typeParameters);\n+                arguments.add(ClientTypeSignatureParameter.ofLong(precision));\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM4NDY5MA==", "bodyText": "@findepi Thanks! I added a TODO as a comment below base on the discussion we had before (which led us to a point that we only need top-level type currently): https://prestosql.slack.com/archives/CP1MUNEUX/p1570293305067000?thread_ts=1570147672.028700&cid=CP1MUNEUX", "url": "https://github.com/trinodb/trino/pull/2770#discussion_r380384690", "createdAt": "2020-02-17T22:26:28Z", "author": {"login": "puchengy"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -858,4 +876,69 @@ private static String typedNull(String prestoType)\n     {\n         return format(\"CAST(NULL AS %s)\", prestoType);\n     }\n+\n+    private static List<ColumnInfo> getDescribeOutputColumnInfoList(ResultSet resultSet)\n+            throws SQLException\n+    {\n+        ImmutableList.Builder<ColumnInfo> list = ImmutableList.builder();\n+        while (resultSet.next()) {\n+            String columnName = resultSet.getString(\"Column Name\");\n+            String catalog = resultSet.getString(\"Catalog\");\n+            String schema = resultSet.getString(\"Schema\");\n+            String table = resultSet.getString(\"Table\");\n+            ClientTypeSignature clientTypeSignature = getClientTypeSignatureFromTypeString(resultSet.getString(\"Type\"));\n+            ColumnInfo.Builder builder = new ColumnInfo.Builder()\n+                    .setColumnName(columnName)\n+                    .setColumnLabel(columnName)\n+                    .setCatalogName(catalog)\n+                    .setSchemaName(schema)\n+                    .setTableName(table)\n+                    .setColumnTypeSignature(clientTypeSignature)\n+                    .setNullable(ColumnInfo.Nullable.UNKNOWN);\n+            setTypeInfo(builder, clientTypeSignature);\n+            list.add(builder.build());\n+        }\n+        return list.build();\n+    }\n+\n+    @VisibleForTesting\n+    static ClientTypeSignature getClientTypeSignatureFromTypeString(String type)\n+    {\n+        String topLevelType;\n+        List<ClientTypeSignatureParameter> arguments = new ArrayList<>();\n+        Matcher topLevelMatcher = TOP_LEVEL_TYPE_PATTERN.matcher(type);\n+        if (topLevelMatcher.matches()) {\n+            topLevelType = topLevelMatcher.group(1);\n+            String typeParameters = topLevelMatcher.group(2);\n+            if (topLevelType.equals(\"decimal\")) {\n+                List<String> precisionAndScale = Splitter.on(',').splitToList(typeParameters);\n+                checkArgument(precisionAndScale.size() == 2, \"Invalid decimal parameters: %s\", typeParameters);\n+                arguments.add(ClientTypeSignatureParameter.ofLong(parseLong(precisionAndScale.get(0))));\n+                arguments.add(ClientTypeSignatureParameter.ofLong(parseLong(precisionAndScale.get(1))));\n+            }\n+            else if (topLevelType.equals(\"char\") || topLevelType.equals(\"varchar\")) {\n+                long precision = parseLong(typeParameters);\n+                arguments.add(ClientTypeSignatureParameter.ofLong(precision));\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyOTc5MQ=="}, "originalCommit": null, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTI0NDA5OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMDoxMzoyNlrOFqVFDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwNzo1NDoyMlrOFwINTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyOTg3MQ==", "bodyText": "@electrum should we have\nverify(!type.contains('('), \"Unhandled parameterized type: %s\", type);\n\nhere?", "url": "https://github.com/trinodb/trino/pull/2770#discussion_r379929871", "createdAt": "2020-02-16T20:13:26Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -858,4 +876,69 @@ private static String typedNull(String prestoType)\n     {\n         return format(\"CAST(NULL AS %s)\", prestoType);\n     }\n+\n+    private static List<ColumnInfo> getDescribeOutputColumnInfoList(ResultSet resultSet)\n+            throws SQLException\n+    {\n+        ImmutableList.Builder<ColumnInfo> list = ImmutableList.builder();\n+        while (resultSet.next()) {\n+            String columnName = resultSet.getString(\"Column Name\");\n+            String catalog = resultSet.getString(\"Catalog\");\n+            String schema = resultSet.getString(\"Schema\");\n+            String table = resultSet.getString(\"Table\");\n+            ClientTypeSignature clientTypeSignature = getClientTypeSignatureFromTypeString(resultSet.getString(\"Type\"));\n+            ColumnInfo.Builder builder = new ColumnInfo.Builder()\n+                    .setColumnName(columnName)\n+                    .setColumnLabel(columnName)\n+                    .setCatalogName(catalog)\n+                    .setSchemaName(schema)\n+                    .setTableName(table)\n+                    .setColumnTypeSignature(clientTypeSignature)\n+                    .setNullable(ColumnInfo.Nullable.UNKNOWN);\n+            setTypeInfo(builder, clientTypeSignature);\n+            list.add(builder.build());\n+        }\n+        return list.build();\n+    }\n+\n+    @VisibleForTesting\n+    static ClientTypeSignature getClientTypeSignatureFromTypeString(String type)\n+    {\n+        String topLevelType;\n+        List<ClientTypeSignatureParameter> arguments = new ArrayList<>();\n+        Matcher topLevelMatcher = TOP_LEVEL_TYPE_PATTERN.matcher(type);\n+        if (topLevelMatcher.matches()) {\n+            topLevelType = topLevelMatcher.group(1);\n+            String typeParameters = topLevelMatcher.group(2);\n+            if (topLevelType.equals(\"decimal\")) {\n+                List<String> precisionAndScale = Splitter.on(',').splitToList(typeParameters);\n+                checkArgument(precisionAndScale.size() == 2, \"Invalid decimal parameters: %s\", typeParameters);\n+                arguments.add(ClientTypeSignatureParameter.ofLong(parseLong(precisionAndScale.get(0))));\n+                arguments.add(ClientTypeSignatureParameter.ofLong(parseLong(precisionAndScale.get(1))));\n+            }\n+            else if (topLevelType.equals(\"char\") || topLevelType.equals(\"varchar\")) {\n+                long precision = parseLong(typeParameters);\n+                arguments.add(ClientTypeSignatureParameter.ofLong(precision));\n+            }\n+        }\n+        else {\n+            Matcher timestampMatcher = TIMESTAMP_WITH_TIME_ZONE_PRECISION_PATTERN.matcher(type);\n+            Matcher timeMatcher = TIME_WITH_TIME_ZONE_PRECISION_PATTERN.matcher(type);\n+            if (timestampMatcher.matches()) {\n+                topLevelType = \"timestamp with time zone\";\n+                arguments.add(ClientTypeSignatureParameter.ofLong(parseLong(timestampMatcher.group(1))));\n+            }\n+            else if (timeMatcher.matches()) {\n+                topLevelType = \"time with time zone\";\n+                arguments.add(ClientTypeSignatureParameter.ofLong(parseLong(timeMatcher.group(1))));\n+            }\n+            else {\n+                topLevelType = type;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxMDQ0NQ==", "bodyText": "This code is only used for metadata display purposes, so I don't think we want to fail here. Seems fine to ignore anything that is not supported.", "url": "https://github.com/trinodb/trino/pull/2770#discussion_r386010445", "createdAt": "2020-02-29T07:54:22Z", "author": {"login": "electrum"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -858,4 +876,69 @@ private static String typedNull(String prestoType)\n     {\n         return format(\"CAST(NULL AS %s)\", prestoType);\n     }\n+\n+    private static List<ColumnInfo> getDescribeOutputColumnInfoList(ResultSet resultSet)\n+            throws SQLException\n+    {\n+        ImmutableList.Builder<ColumnInfo> list = ImmutableList.builder();\n+        while (resultSet.next()) {\n+            String columnName = resultSet.getString(\"Column Name\");\n+            String catalog = resultSet.getString(\"Catalog\");\n+            String schema = resultSet.getString(\"Schema\");\n+            String table = resultSet.getString(\"Table\");\n+            ClientTypeSignature clientTypeSignature = getClientTypeSignatureFromTypeString(resultSet.getString(\"Type\"));\n+            ColumnInfo.Builder builder = new ColumnInfo.Builder()\n+                    .setColumnName(columnName)\n+                    .setColumnLabel(columnName)\n+                    .setCatalogName(catalog)\n+                    .setSchemaName(schema)\n+                    .setTableName(table)\n+                    .setColumnTypeSignature(clientTypeSignature)\n+                    .setNullable(ColumnInfo.Nullable.UNKNOWN);\n+            setTypeInfo(builder, clientTypeSignature);\n+            list.add(builder.build());\n+        }\n+        return list.build();\n+    }\n+\n+    @VisibleForTesting\n+    static ClientTypeSignature getClientTypeSignatureFromTypeString(String type)\n+    {\n+        String topLevelType;\n+        List<ClientTypeSignatureParameter> arguments = new ArrayList<>();\n+        Matcher topLevelMatcher = TOP_LEVEL_TYPE_PATTERN.matcher(type);\n+        if (topLevelMatcher.matches()) {\n+            topLevelType = topLevelMatcher.group(1);\n+            String typeParameters = topLevelMatcher.group(2);\n+            if (topLevelType.equals(\"decimal\")) {\n+                List<String> precisionAndScale = Splitter.on(',').splitToList(typeParameters);\n+                checkArgument(precisionAndScale.size() == 2, \"Invalid decimal parameters: %s\", typeParameters);\n+                arguments.add(ClientTypeSignatureParameter.ofLong(parseLong(precisionAndScale.get(0))));\n+                arguments.add(ClientTypeSignatureParameter.ofLong(parseLong(precisionAndScale.get(1))));\n+            }\n+            else if (topLevelType.equals(\"char\") || topLevelType.equals(\"varchar\")) {\n+                long precision = parseLong(typeParameters);\n+                arguments.add(ClientTypeSignatureParameter.ofLong(precision));\n+            }\n+        }\n+        else {\n+            Matcher timestampMatcher = TIMESTAMP_WITH_TIME_ZONE_PRECISION_PATTERN.matcher(type);\n+            Matcher timeMatcher = TIME_WITH_TIME_ZONE_PRECISION_PATTERN.matcher(type);\n+            if (timestampMatcher.matches()) {\n+                topLevelType = \"timestamp with time zone\";\n+                arguments.add(ClientTypeSignatureParameter.ofLong(parseLong(timestampMatcher.group(1))));\n+            }\n+            else if (timeMatcher.matches()) {\n+                topLevelType = \"time with time zone\";\n+                arguments.add(ClientTypeSignatureParameter.ofLong(parseLong(timeMatcher.group(1))));\n+            }\n+            else {\n+                topLevelType = type;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyOTg3MQ=="}, "originalCommit": null, "originalPosition": 127}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 893, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}