{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwMzU2MDE3", "number": 6349, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzoyMTowOFrOFFtfxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwODowMzo1MFrOFHssbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTMyNjEzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzoyMTowOFrOIGW0Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzo1Njo0M1rOIGYa4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUzNjE5NA==", "bodyText": "It's unclear to me if it's intentional (or desirable) that a task update would previously cause these values to change once a query was promoted to the reserved pool. If so, it's easy enough to modify this PR to handle that as well- just need to know the intended behavior in that situation.", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r543536194", "createdAt": "2020-12-15T17:21:08Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -110,13 +112,25 @@ public QueryContext(\n                 newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateSystemMemory, this::tryReserveMemoryNotSupported), 0L));\n     }\n \n+    public boolean needsMemoryLimitsInitialized()\n+    {\n+        return needsMemoryLimitsInitialized;\n+    }\n+\n+    public synchronized void setMemoryLimitsInitialized()\n+    {\n+        needsMemoryLimitsInitialized = false;\n+    }\n+\n     // TODO: This method should be removed, and the correct limit set in the constructor. However, due to the way QueryContext is constructed the memory limit is not known in advance\n     public synchronized void setResourceOvercommit()\n     {\n         // Allow the query to use the entire pool. This way the worker will kill the query, if it uses the entire local general pool.\n         // The coordinator will kill the query if the cluster runs out of memory.\n         maxUserMemory = memoryPool.getMaxBytes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU2MjQ2Ng==", "bodyText": "Since it's unclear what the intended or correct interaction between resource over-commit and the reserved pool should be in this scenario, I've opted to preserve the current effective behavior by modifying the memory limits for resource over-commit queries as part of their memory pool change.", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r543562466", "createdAt": "2020-12-15T17:56:43Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -110,13 +112,25 @@ public QueryContext(\n                 newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateSystemMemory, this::tryReserveMemoryNotSupported), 0L));\n     }\n \n+    public boolean needsMemoryLimitsInitialized()\n+    {\n+        return needsMemoryLimitsInitialized;\n+    }\n+\n+    public synchronized void setMemoryLimitsInitialized()\n+    {\n+        needsMemoryLimitsInitialized = false;\n+    }\n+\n     // TODO: This method should be removed, and the correct limit set in the constructor. However, due to the way QueryContext is constructed the memory limit is not known in advance\n     public synchronized void setResourceOvercommit()\n     {\n         // Allow the query to use the entire pool. This way the worker will kill the query, if it uses the entire local general pool.\n         // The coordinator will kill the query if the cluster runs out of memory.\n         maxUserMemory = memoryPool.getMaxBytes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUzNjE5NA=="}, "originalCommit": null, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTgzOTY4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOTowOTowMVrOIGbjYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMTo1Njo0NlrOIGhwUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYxMzc5Mg==", "bodyText": "nit: I'd rename this to memoryLimitsInitialized and default it to false. I think it'll help with readability of the setter.", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r543613792", "createdAt": "2020-12-15T19:09:01Z", "author": {"login": "phd3"}, "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -70,6 +70,10 @@\n     private final SpillSpaceTracker spillSpaceTracker;\n     private final Map<TaskId, TaskContext> taskContexts = new ConcurrentHashMap<>();\n \n+    @GuardedBy(\"this\")\n+    private boolean isResourceOverCommit;\n+    private boolean needsMemoryLimitsInitialized = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcxNTQxMA==", "bodyText": "Sure, changed.", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r543715410", "createdAt": "2020-12-15T21:56:46Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -70,6 +70,10 @@\n     private final SpillSpaceTracker spillSpaceTracker;\n     private final Map<TaskId, TaskContext> taskContexts = new ConcurrentHashMap<>();\n \n+    @GuardedBy(\"this\")\n+    private boolean isResourceOverCommit;\n+    private boolean needsMemoryLimitsInitialized = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYxMzc5Mg=="}, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjAyMTE3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOTo1MDo0MVrOIGdNLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDo1NDozM1rOIHJTag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY0MDg3Ng==", "bodyText": "If we decide to stick with changing the limits based on the pool type, can you please add another commit to fix local general pool --> local memory pool in comment?", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r543640876", "createdAt": "2020-12-15T19:50:41Z", "author": {"login": "phd3"}, "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -110,13 +114,26 @@ public QueryContext(\n                 newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateSystemMemory, this::tryReserveMemoryNotSupported), 0L));\n     }\n \n+    public boolean needsMemoryLimitsInitialized()\n+    {\n+        return needsMemoryLimitsInitialized;\n+    }\n+\n+    public synchronized void setMemoryLimitsInitialized()\n+    {\n+        needsMemoryLimitsInitialized = false;\n+    }\n+\n     // TODO: This method should be removed, and the correct limit set in the constructor. However, due to the way QueryContext is constructed the memory limit is not known in advance\n     public synchronized void setResourceOvercommit()\n     {\n+        isResourceOverCommit = true;\n         // Allow the query to use the entire pool. This way the worker will kill the query, if it uses the entire local general pool.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcxMjU2MA==", "bodyText": "Before this change it wasn't necessarily broken, since the subsequent task update would trigger the memory limit reset based on the current pool max size. This change is required in order to preserve that behavior (although it performs it earlier) so I'm not sure it's really something that should be split into its own commit.", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r543712560", "createdAt": "2020-12-15T21:51:50Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -110,13 +114,26 @@ public QueryContext(\n                 newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateSystemMemory, this::tryReserveMemoryNotSupported), 0L));\n     }\n \n+    public boolean needsMemoryLimitsInitialized()\n+    {\n+        return needsMemoryLimitsInitialized;\n+    }\n+\n+    public synchronized void setMemoryLimitsInitialized()\n+    {\n+        needsMemoryLimitsInitialized = false;\n+    }\n+\n     // TODO: This method should be removed, and the correct limit set in the constructor. However, due to the way QueryContext is constructed the memory limit is not known in advance\n     public synchronized void setResourceOvercommit()\n     {\n+        isResourceOverCommit = true;\n         // Allow the query to use the entire pool. This way the worker will kill the query, if it uses the entire local general pool.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY0MDg3Ng=="}, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcyNTAwMw==", "bodyText": "@pettyjamesm yes the behavior wasn't broken, I just meant to update the comment on line 131 to reflect the behavior correctly. The worker kills the query if the corresponding pool limit is reached, as opposed to the \"general\" pool as mentioned in the comment. (It's an independent thing, but doesn't matter much if you'd like to do it in the same commit.)", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r543725003", "createdAt": "2020-12-15T22:13:06Z", "author": {"login": "phd3"}, "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -110,13 +114,26 @@ public QueryContext(\n                 newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateSystemMemory, this::tryReserveMemoryNotSupported), 0L));\n     }\n \n+    public boolean needsMemoryLimitsInitialized()\n+    {\n+        return needsMemoryLimitsInitialized;\n+    }\n+\n+    public synchronized void setMemoryLimitsInitialized()\n+    {\n+        needsMemoryLimitsInitialized = false;\n+    }\n+\n     // TODO: This method should be removed, and the correct limit set in the constructor. However, due to the way QueryContext is constructed the memory limit is not known in advance\n     public synchronized void setResourceOvercommit()\n     {\n+        isResourceOverCommit = true;\n         // Allow the query to use the entire pool. This way the worker will kill the query, if it uses the entire local general pool.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY0MDg3Ng=="}, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM2MzM3MA==", "bodyText": "Ah, ok- I misunderstood. Added a new commit to clear up that comment and fix one other javadoc reference.", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r544363370", "createdAt": "2020-12-16T14:54:33Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -110,13 +114,26 @@ public QueryContext(\n                 newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateSystemMemory, this::tryReserveMemoryNotSupported), 0L));\n     }\n \n+    public boolean needsMemoryLimitsInitialized()\n+    {\n+        return needsMemoryLimitsInitialized;\n+    }\n+\n+    public synchronized void setMemoryLimitsInitialized()\n+    {\n+        needsMemoryLimitsInitialized = false;\n+    }\n+\n     // TODO: This method should be removed, and the correct limit set in the constructor. However, due to the way QueryContext is constructed the memory limit is not known in advance\n     public synchronized void setResourceOvercommit()\n     {\n+        isResourceOverCommit = true;\n         // Allow the query to use the entire pool. This way the worker will kill the query, if it uses the entire local general pool.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY0MDg3Ng=="}, "originalCommit": null, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTUxMDIxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMDowODozMFrOIG9jJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDo0NTo0M1rOIHIz9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE3MDc4OQ==", "bodyText": "rename to isMemoryLimitInitialized", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r544170789", "createdAt": "2020-12-16T10:08:30Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -110,13 +114,26 @@ public QueryContext(\n                 newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateSystemMemory, this::tryReserveMemoryNotSupported), 0L));\n     }\n \n+    public boolean needsMemoryLimitsInitialized()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM1NTMxOQ==", "bodyText": "isMemoryLimitsInitialized() instead.", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r544355319", "createdAt": "2020-12-16T14:45:43Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -110,13 +114,26 @@ public QueryContext(\n                 newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateSystemMemory, this::tryReserveMemoryNotSupported), 0L));\n     }\n \n+    public boolean needsMemoryLimitsInitialized()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE3MDc4OQ=="}, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTUxMjQ3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMDowODo1OFrOIG9kdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDo0NToyNVrOIHIzDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE3MTEyNA==", "bodyText": "rename to memoryLimitInitialized", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r544171124", "createdAt": "2020-12-16T10:08:58Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -70,6 +70,10 @@\n     private final SpillSpaceTracker spillSpaceTracker;\n     private final Map<TaskId, TaskContext> taskContexts = new ConcurrentHashMap<>();\n \n+    @GuardedBy(\"this\")\n+    private boolean isResourceOverCommit;\n+    private boolean memoryLimitsInitialized;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM1NTA4Nw==", "bodyText": "There are multiple limits involved (maxUserMemory / maxTotalMemory).", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r544355087", "createdAt": "2020-12-16T14:45:25Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -70,6 +70,10 @@\n     private final SpillSpaceTracker spillSpaceTracker;\n     private final Map<TaskId, TaskContext> taskContexts = new ConcurrentHashMap<>();\n \n+    @GuardedBy(\"this\")\n+    private boolean isResourceOverCommit;\n+    private boolean memoryLimitsInitialized;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE3MTEyNA=="}, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTUxMzM3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMDowOToxNFrOIG9lEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDo0Njo1NlrOIHI4EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE3MTI4MA==", "bodyText": "this should be volatile", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r544171280", "createdAt": "2020-12-16T10:09:14Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -70,6 +70,10 @@\n     private final SpillSpaceTracker spillSpaceTracker;\n     private final Map<TaskId, TaskContext> taskContexts = new ConcurrentHashMap<>();\n \n+    @GuardedBy(\"this\")\n+    private boolean isResourceOverCommit;\n+    private boolean memoryLimitsInitialized;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM1NjM2OQ==", "bodyText": "Made volatile (even though it's safe enough to do a redundant initialization and maybe slight cheaper as a non-volatile)", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r544356369", "createdAt": "2020-12-16T14:46:56Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -70,6 +70,10 @@\n     private final SpillSpaceTracker spillSpaceTracker;\n     private final Map<TaskId, TaskContext> taskContexts = new ConcurrentHashMap<>();\n \n+    @GuardedBy(\"this\")\n+    private boolean isResourceOverCommit;\n+    private boolean memoryLimitsInitialized;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE3MTI4MA=="}, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTUxNDg1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMDowOTozMlrOIG9l8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMDowOTozMlrOIG9l8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE3MTUwNQ==", "bodyText": "no synchronization is needed", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r544171505", "createdAt": "2020-12-16T10:09:32Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -110,13 +114,26 @@ public QueryContext(\n                 newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateSystemMemory, this::tryReserveMemoryNotSupported), 0L));\n     }\n \n+    public boolean needsMemoryLimitsInitialized()\n+    {\n+        return !memoryLimitsInitialized;\n+    }\n+\n+    public synchronized void setMemoryLimitsInitialized()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTYwMjM1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMDoyODozN1rOIG-YfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDo0NzowN1rOIHI4mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE4NDQ0NA==", "bodyText": "call it resourceOverCommit", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r544184444", "createdAt": "2020-12-16T10:28:37Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -70,6 +70,10 @@\n     private final SpillSpaceTracker spillSpaceTracker;\n     private final Map<TaskId, TaskContext> taskContexts = new ConcurrentHashMap<>();\n \n+    @GuardedBy(\"this\")\n+    private boolean isResourceOverCommit;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM1NjUwNw==", "bodyText": "Done", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r544356507", "createdAt": "2020-12-16T14:47:07Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -70,6 +70,10 @@\n     private final SpillSpaceTracker spillSpaceTracker;\n     private final Map<TaskId, TaskContext> taskContexts = new ConcurrentHashMap<>();\n \n+    @GuardedBy(\"this\")\n+    private boolean isResourceOverCommit;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE4NDQ0NA=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDgyNTI5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDo1NzoxOVrOIHJctw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTowMDoxMlrOIHJlzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM2NTc1MQ==", "bodyText": "this is redundant. We already call queryContext.setMemoryLimitsInitialized(); in updateTask", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r544365751", "createdAt": "2020-12-16T14:57:19Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -110,13 +114,26 @@ public QueryContext(\n                 newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateSystemMemory, this::tryReserveMemoryNotSupported), 0L));\n     }\n \n+    public boolean isMemoryLimitsInitialized()\n+    {\n+        return memoryLimitsInitialized;\n+    }\n+\n+    public void setMemoryLimitsInitialized()\n+    {\n+        memoryLimitsInitialized = true;\n+    }\n+\n     // TODO: This method should be removed, and the correct limit set in the constructor. However, due to the way QueryContext is constructed the memory limit is not known in advance\n     public synchronized void setResourceOvercommit()\n     {\n+        resourceOverCommit = true;\n         // Allow the query to use the entire pool. This way the worker will kill the query, if it uses the entire local general pool.\n         // The coordinator will kill the query if the cluster runs out of memory.\n         maxUserMemory = memoryPool.getMaxBytes();\n         maxTotalMemory = memoryPool.getMaxBytes();\n+        //  Mark future memory limit updates as unnecessary\n+        setMemoryLimitsInitialized();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM2ODA3Ng==", "bodyText": "Sure.", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r544368076", "createdAt": "2020-12-16T15:00:12Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -110,13 +114,26 @@ public QueryContext(\n                 newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateSystemMemory, this::tryReserveMemoryNotSupported), 0L));\n     }\n \n+    public boolean isMemoryLimitsInitialized()\n+    {\n+        return memoryLimitsInitialized;\n+    }\n+\n+    public void setMemoryLimitsInitialized()\n+    {\n+        memoryLimitsInitialized = true;\n+    }\n+\n     // TODO: This method should be removed, and the correct limit set in the constructor. However, due to the way QueryContext is constructed the memory limit is not known in advance\n     public synchronized void setResourceOvercommit()\n     {\n+        resourceOverCommit = true;\n         // Allow the query to use the entire pool. This way the worker will kill the query, if it uses the entire local general pool.\n         // The coordinator will kill the query if the cluster runs out of memory.\n         maxUserMemory = memoryPool.getMaxBytes();\n         maxTotalMemory = memoryPool.getMaxBytes();\n+        //  Mark future memory limit updates as unnecessary\n+        setMemoryLimitsInitialized();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM2NTc1MQ=="}, "originalCommit": null, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODk3NjIyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNDoyMjozNlrOIISmXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNToyMzo0M1rOIIncvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU2NDI1NA==", "bodyText": "may be just rename the commit to Fix comments in QueryContext or have two separate commits?", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r545564254", "createdAt": "2020-12-18T04:22:36Z", "author": {"login": "phd3"}, "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -126,7 +126,7 @@ public synchronized void initializeMemoryLimits(boolean resourceOverCommit, long\n         checkArgument(maxTotalMemory > 0, \"maxTotalMemory must be > 0, found: %s\", maxTotalMemory);\n         this.resourceOverCommit = resourceOverCommit;\n         if (resourceOverCommit) {\n-            // Allow the query to use the entire pool. This way the worker will kill the query, if it uses the entire local general pool.\n+            // Allow the query to use the entire pool. This way the worker will kill the query, if it uses the entire local memory pool.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkwNTg1Mw==", "bodyText": "Reworded commit.", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r545905853", "createdAt": "2020-12-18T15:23:43Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -126,7 +126,7 @@ public synchronized void initializeMemoryLimits(boolean resourceOverCommit, long\n         checkArgument(maxTotalMemory > 0, \"maxTotalMemory must be > 0, found: %s\", maxTotalMemory);\n         this.resourceOverCommit = resourceOverCommit;\n         if (resourceOverCommit) {\n-            // Allow the query to use the entire pool. This way the worker will kill the query, if it uses the entire local general pool.\n+            // Allow the query to use the entire pool. This way the worker will kill the query, if it uses the entire local memory pool.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU2NDI1NA=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyOTQxNTg3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo0NToyNFrOIIWWrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNToyMzo1NFrOIIndQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyNTc3NA==", "bodyText": "nit: I'd keep this as >=0, since we don't disallow 0 on the session property.", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r545625774", "createdAt": "2020-12-18T07:45:24Z", "author": {"login": "phd3"}, "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -110,13 +114,28 @@ public QueryContext(\n                 newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateSystemMemory, this::tryReserveMemoryNotSupported), 0L));\n     }\n \n+    public boolean isMemoryLimitsInitialized()\n+    {\n+        return memoryLimitsInitialized;\n+    }\n+\n     // TODO: This method should be removed, and the correct limit set in the constructor. However, due to the way QueryContext is constructed the memory limit is not known in advance\n-    public synchronized void setResourceOvercommit()\n+    public synchronized void initializeMemoryLimits(boolean resourceOverCommit, long maxUserMemory, long maxTotalMemory)\n     {\n-        // Allow the query to use the entire pool. This way the worker will kill the query, if it uses the entire local general pool.\n-        // The coordinator will kill the query if the cluster runs out of memory.\n-        maxUserMemory = memoryPool.getMaxBytes();\n-        maxTotalMemory = memoryPool.getMaxBytes();\n+        checkArgument(maxUserMemory > 0, \"maxUserMemory must be > 0, found: %s\", maxUserMemory);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkwNTk4Ng==", "bodyText": "Changed to >=.", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r545905986", "createdAt": "2020-12-18T15:23:54Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -110,13 +114,28 @@ public QueryContext(\n                 newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateSystemMemory, this::tryReserveMemoryNotSupported), 0L));\n     }\n \n+    public boolean isMemoryLimitsInitialized()\n+    {\n+        return memoryLimitsInitialized;\n+    }\n+\n     // TODO: This method should be removed, and the correct limit set in the constructor. However, due to the way QueryContext is constructed the memory limit is not known in advance\n-    public synchronized void setResourceOvercommit()\n+    public synchronized void initializeMemoryLimits(boolean resourceOverCommit, long maxUserMemory, long maxTotalMemory)\n     {\n-        // Allow the query to use the entire pool. This way the worker will kill the query, if it uses the entire local general pool.\n-        // The coordinator will kill the query if the cluster runs out of memory.\n-        maxUserMemory = memoryPool.getMaxBytes();\n-        maxTotalMemory = memoryPool.getMaxBytes();\n+        checkArgument(maxUserMemory > 0, \"maxUserMemory must be > 0, found: %s\", maxUserMemory);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyNTc3NA=="}, "originalCommit": null, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyOTQ0MTE4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/SqlTaskManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzo1NDozMVrOIIWlCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNToyNDowN1rOIIneFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyOTQ1MA==", "bodyText": "nit: may be remove the comment or mention query_max_total_memory_per_node too?", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r545629450", "createdAt": "2020-12-18T07:54:31Z", "author": {"login": "phd3"}, "path": "presto-main/src/main/java/io/prestosql/execution/SqlTaskManager.java", "diffHunk": "@@ -372,24 +373,18 @@ public TaskInfo updateTask(Session session, TaskId taskId, Optional<PlanFragment\n         requireNonNull(sources, \"sources is null\");\n         requireNonNull(outputBuffers, \"outputBuffers is null\");\n \n-        if (resourceOvercommit(session)) {\n-            // TODO: This should have been done when the QueryContext was created. However, the session isn't available at that point.\n-            queryContexts.getUnchecked(taskId.getQueryId()).setResourceOvercommit();\n-        }\n-        else {\n+        SqlTask sqlTask = tasks.getUnchecked(taskId);\n+        QueryContext queryContext = sqlTask.getQueryContext();\n+        if (!queryContext.isMemoryLimitsInitialized()) {\n             long sessionQueryMaxMemoryPerNode = getQueryMaxMemoryPerNode(session).toBytes();\n             long sessionQueryTotalMaxMemoryPerNode = getQueryMaxTotalMemoryPerNode(session).toBytes();\n             // Session property query_max_memory_per_node is used to only decrease memory limit", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkwNjE5OA==", "bodyText": "Made the comment more general", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r545906198", "createdAt": "2020-12-18T15:24:07Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/execution/SqlTaskManager.java", "diffHunk": "@@ -372,24 +373,18 @@ public TaskInfo updateTask(Session session, TaskId taskId, Optional<PlanFragment\n         requireNonNull(sources, \"sources is null\");\n         requireNonNull(outputBuffers, \"outputBuffers is null\");\n \n-        if (resourceOvercommit(session)) {\n-            // TODO: This should have been done when the QueryContext was created. However, the session isn't available at that point.\n-            queryContexts.getUnchecked(taskId.getQueryId()).setResourceOvercommit();\n-        }\n-        else {\n+        SqlTask sqlTask = tasks.getUnchecked(taskId);\n+        QueryContext queryContext = sqlTask.getQueryContext();\n+        if (!queryContext.isMemoryLimitsInitialized()) {\n             long sessionQueryMaxMemoryPerNode = getQueryMaxMemoryPerNode(session).toBytes();\n             long sessionQueryTotalMaxMemoryPerNode = getQueryMaxTotalMemoryPerNode(session).toBytes();\n             // Session property query_max_memory_per_node is used to only decrease memory limit", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyOTQ1MA=="}, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyOTQ5MjE2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/SqlTaskManager.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwODoxMDoxMlrOIIXCPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTozOTo0MlrOIJ_dRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYzNjkyNQ==", "bodyText": "looks like a bug, good catch!", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r545636925", "createdAt": "2020-12-18T08:10:12Z", "author": {"login": "phd3"}, "path": "presto-main/src/main/java/io/prestosql/execution/SqlTaskManager.java", "diffHunk": "@@ -145,16 +146,15 @@ public SqlTaskManager(\n         SqlTaskExecutionFactory sqlTaskExecutionFactory = new SqlTaskExecutionFactory(taskNotificationExecutor, taskExecutor, planner, splitMonitor, config);\n \n         this.localMemoryManager = requireNonNull(localMemoryManager, \"localMemoryManager is null\");\n-        DataSize maxQueryUserMemoryPerNode = nodeMemoryConfig.getMaxQueryMemoryPerNode();\n+        DataSize maxQueryMemoryPerNode = nodeMemoryConfig.getMaxQueryMemoryPerNode();\n         DataSize maxQueryTotalMemoryPerNode = nodeMemoryConfig.getMaxQueryTotalMemoryPerNode();\n         DataSize maxQuerySpillPerNode = nodeSpillConfig.getQueryMaxSpillPerNode();\n \n-        DataSize maxQueryMemoryPerNode = nodeMemoryConfig.getMaxQueryMemoryPerNode();\n         queryMaxMemoryPerNode = maxQueryMemoryPerNode.toBytes();\n-        queryMaxTotalMemoryPerNode = maxQueryMemoryPerNode.toBytes();\n+        queryMaxTotalMemoryPerNode = maxQueryTotalMemoryPerNode.toBytes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU2NzA0OQ==", "bodyText": "@sopel39 not sure if there's an easy way to write test for this bugfix, since it'll require asserting failure for a manufactured query that reliably uses low user memory but high total memory - per node. any ideas? (the change looks straightforward though.)", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r546567049", "createdAt": "2020-12-21T08:19:15Z", "author": {"login": "phd3"}, "path": "presto-main/src/main/java/io/prestosql/execution/SqlTaskManager.java", "diffHunk": "@@ -145,16 +146,15 @@ public SqlTaskManager(\n         SqlTaskExecutionFactory sqlTaskExecutionFactory = new SqlTaskExecutionFactory(taskNotificationExecutor, taskExecutor, planner, splitMonitor, config);\n \n         this.localMemoryManager = requireNonNull(localMemoryManager, \"localMemoryManager is null\");\n-        DataSize maxQueryUserMemoryPerNode = nodeMemoryConfig.getMaxQueryMemoryPerNode();\n+        DataSize maxQueryMemoryPerNode = nodeMemoryConfig.getMaxQueryMemoryPerNode();\n         DataSize maxQueryTotalMemoryPerNode = nodeMemoryConfig.getMaxQueryTotalMemoryPerNode();\n         DataSize maxQuerySpillPerNode = nodeSpillConfig.getQueryMaxSpillPerNode();\n \n-        DataSize maxQueryMemoryPerNode = nodeMemoryConfig.getMaxQueryMemoryPerNode();\n         queryMaxMemoryPerNode = maxQueryMemoryPerNode.toBytes();\n-        queryMaxTotalMemoryPerNode = maxQueryMemoryPerNode.toBytes();\n+        queryMaxTotalMemoryPerNode = maxQueryTotalMemoryPerNode.toBytes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYzNjkyNQ=="}, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgwMTQ2MQ==", "bodyText": "It should be possible to use io.prestosql.execution.SqlTaskManager#getQueryContext (which is visible for testing) and then update memory via io.prestosql.memory.QueryContext#updateUserMemory or io.prestosql.memory.QueryContext#updateSystemMemory to see that they fail.\n@pettyjamesm could you add such test?", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r546801461", "createdAt": "2020-12-21T16:25:27Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/execution/SqlTaskManager.java", "diffHunk": "@@ -145,16 +146,15 @@ public SqlTaskManager(\n         SqlTaskExecutionFactory sqlTaskExecutionFactory = new SqlTaskExecutionFactory(taskNotificationExecutor, taskExecutor, planner, splitMonitor, config);\n \n         this.localMemoryManager = requireNonNull(localMemoryManager, \"localMemoryManager is null\");\n-        DataSize maxQueryUserMemoryPerNode = nodeMemoryConfig.getMaxQueryMemoryPerNode();\n+        DataSize maxQueryMemoryPerNode = nodeMemoryConfig.getMaxQueryMemoryPerNode();\n         DataSize maxQueryTotalMemoryPerNode = nodeMemoryConfig.getMaxQueryTotalMemoryPerNode();\n         DataSize maxQuerySpillPerNode = nodeSpillConfig.getQueryMaxSpillPerNode();\n \n-        DataSize maxQueryMemoryPerNode = nodeMemoryConfig.getMaxQueryMemoryPerNode();\n         queryMaxMemoryPerNode = maxQueryMemoryPerNode.toBytes();\n-        queryMaxTotalMemoryPerNode = maxQueryMemoryPerNode.toBytes();\n+        queryMaxTotalMemoryPerNode = maxQueryTotalMemoryPerNode.toBytes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYzNjkyNQ=="}, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI5OTI1Nw==", "bodyText": "I don't think it's worthwhile to add that test, given that an existing memory pool test started failing after this refactor and that we'd have to either either add @VisibleForTesting getters to the memory limit fields or probe at their values (one fake query at a time) by triggering failures through their already @VisibleForTesting MemoryTrackingContext. At the end of the day, the behavior here is relatively simple and the bug was only introduced looked like a copy-pasta error, not a behavioral subtlety.\nJust my opinion though, if the above test is needed to get this merged I'll add it.", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r547299257", "createdAt": "2020-12-22T14:12:10Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/execution/SqlTaskManager.java", "diffHunk": "@@ -145,16 +146,15 @@ public SqlTaskManager(\n         SqlTaskExecutionFactory sqlTaskExecutionFactory = new SqlTaskExecutionFactory(taskNotificationExecutor, taskExecutor, planner, splitMonitor, config);\n \n         this.localMemoryManager = requireNonNull(localMemoryManager, \"localMemoryManager is null\");\n-        DataSize maxQueryUserMemoryPerNode = nodeMemoryConfig.getMaxQueryMemoryPerNode();\n+        DataSize maxQueryMemoryPerNode = nodeMemoryConfig.getMaxQueryMemoryPerNode();\n         DataSize maxQueryTotalMemoryPerNode = nodeMemoryConfig.getMaxQueryTotalMemoryPerNode();\n         DataSize maxQuerySpillPerNode = nodeSpillConfig.getQueryMaxSpillPerNode();\n \n-        DataSize maxQueryMemoryPerNode = nodeMemoryConfig.getMaxQueryMemoryPerNode();\n         queryMaxMemoryPerNode = maxQueryMemoryPerNode.toBytes();\n-        queryMaxTotalMemoryPerNode = maxQueryMemoryPerNode.toBytes();\n+        queryMaxTotalMemoryPerNode = maxQueryTotalMemoryPerNode.toBytes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYzNjkyNQ=="}, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMwODI1Nw==", "bodyText": "I think such test is important as these memory limits are vital to Presto. In fact, I wonder why nobody spotted it already", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r547308257", "createdAt": "2020-12-22T14:28:52Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/execution/SqlTaskManager.java", "diffHunk": "@@ -145,16 +146,15 @@ public SqlTaskManager(\n         SqlTaskExecutionFactory sqlTaskExecutionFactory = new SqlTaskExecutionFactory(taskNotificationExecutor, taskExecutor, planner, splitMonitor, config);\n \n         this.localMemoryManager = requireNonNull(localMemoryManager, \"localMemoryManager is null\");\n-        DataSize maxQueryUserMemoryPerNode = nodeMemoryConfig.getMaxQueryMemoryPerNode();\n+        DataSize maxQueryMemoryPerNode = nodeMemoryConfig.getMaxQueryMemoryPerNode();\n         DataSize maxQueryTotalMemoryPerNode = nodeMemoryConfig.getMaxQueryTotalMemoryPerNode();\n         DataSize maxQuerySpillPerNode = nodeSpillConfig.getQueryMaxSpillPerNode();\n \n-        DataSize maxQueryMemoryPerNode = nodeMemoryConfig.getMaxQueryMemoryPerNode();\n         queryMaxMemoryPerNode = maxQueryMemoryPerNode.toBytes();\n-        queryMaxTotalMemoryPerNode = maxQueryMemoryPerNode.toBytes();\n+        queryMaxTotalMemoryPerNode = maxQueryTotalMemoryPerNode.toBytes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYzNjkyNQ=="}, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM0Nzc4MA==", "bodyText": "Test added.", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r547347780", "createdAt": "2020-12-22T15:39:42Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/execution/SqlTaskManager.java", "diffHunk": "@@ -145,16 +146,15 @@ public SqlTaskManager(\n         SqlTaskExecutionFactory sqlTaskExecutionFactory = new SqlTaskExecutionFactory(taskNotificationExecutor, taskExecutor, planner, splitMonitor, config);\n \n         this.localMemoryManager = requireNonNull(localMemoryManager, \"localMemoryManager is null\");\n-        DataSize maxQueryUserMemoryPerNode = nodeMemoryConfig.getMaxQueryMemoryPerNode();\n+        DataSize maxQueryMemoryPerNode = nodeMemoryConfig.getMaxQueryMemoryPerNode();\n         DataSize maxQueryTotalMemoryPerNode = nodeMemoryConfig.getMaxQueryTotalMemoryPerNode();\n         DataSize maxQuerySpillPerNode = nodeSpillConfig.getQueryMaxSpillPerNode();\n \n-        DataSize maxQueryMemoryPerNode = nodeMemoryConfig.getMaxQueryMemoryPerNode();\n         queryMaxMemoryPerNode = maxQueryMemoryPerNode.toBytes();\n-        queryMaxTotalMemoryPerNode = maxQueryMemoryPerNode.toBytes();\n+        queryMaxTotalMemoryPerNode = maxQueryTotalMemoryPerNode.toBytes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYzNjkyNQ=="}, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjE2NjIwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/SqlTaskManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwODowMzo1MFrOIJPbhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMTo1MTowOFrOIJnBZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU2MDkwMA==", "bodyText": "nit: redundant only", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r546560900", "createdAt": "2020-12-21T08:03:50Z", "author": {"login": "phd3"}, "path": "presto-main/src/main/java/io/prestosql/execution/SqlTaskManager.java", "diffHunk": "@@ -373,24 +373,18 @@ public TaskInfo updateTask(Session session, TaskId taskId, Optional<PlanFragment\n         requireNonNull(sources, \"sources is null\");\n         requireNonNull(outputBuffers, \"outputBuffers is null\");\n \n-        if (resourceOvercommit(session)) {\n-            // TODO: This should have been done when the QueryContext was created. However, the session isn't available at that point.\n-            queryContexts.getUnchecked(taskId.getQueryId()).setResourceOvercommit();\n-        }\n-        else {\n+        SqlTask sqlTask = tasks.getUnchecked(taskId);\n+        QueryContext queryContext = sqlTask.getQueryContext();\n+        if (!queryContext.isMemoryLimitsInitialized()) {\n             long sessionQueryMaxMemoryPerNode = getQueryMaxMemoryPerNode(session).toBytes();\n             long sessionQueryTotalMaxMemoryPerNode = getQueryMaxTotalMemoryPerNode(session).toBytes();\n-            // Session property query_max_memory_per_node is used to only decrease memory limit\n-            if (sessionQueryMaxMemoryPerNode <= queryMaxMemoryPerNode) {\n-                queryContexts.getUnchecked(taskId.getQueryId()).setMaxUserMemory(sessionQueryMaxMemoryPerNode);\n-            }\n-\n-            if (sessionQueryTotalMaxMemoryPerNode <= queryMaxTotalMemoryPerNode) {\n-                queryContexts.getUnchecked(taskId.getQueryId()).setMaxTotalMemory(sessionQueryTotalMaxMemoryPerNode);\n-            }\n+            // Session properties are only allowed to only decrease memory limits, not increase them", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk0NzQzMA==", "bodyText": "Woops, fixed.", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r546947430", "createdAt": "2020-12-21T21:51:08Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/execution/SqlTaskManager.java", "diffHunk": "@@ -373,24 +373,18 @@ public TaskInfo updateTask(Session session, TaskId taskId, Optional<PlanFragment\n         requireNonNull(sources, \"sources is null\");\n         requireNonNull(outputBuffers, \"outputBuffers is null\");\n \n-        if (resourceOvercommit(session)) {\n-            // TODO: This should have been done when the QueryContext was created. However, the session isn't available at that point.\n-            queryContexts.getUnchecked(taskId.getQueryId()).setResourceOvercommit();\n-        }\n-        else {\n+        SqlTask sqlTask = tasks.getUnchecked(taskId);\n+        QueryContext queryContext = sqlTask.getQueryContext();\n+        if (!queryContext.isMemoryLimitsInitialized()) {\n             long sessionQueryMaxMemoryPerNode = getQueryMaxMemoryPerNode(session).toBytes();\n             long sessionQueryTotalMaxMemoryPerNode = getQueryMaxTotalMemoryPerNode(session).toBytes();\n-            // Session property query_max_memory_per_node is used to only decrease memory limit\n-            if (sessionQueryMaxMemoryPerNode <= queryMaxMemoryPerNode) {\n-                queryContexts.getUnchecked(taskId.getQueryId()).setMaxUserMemory(sessionQueryMaxMemoryPerNode);\n-            }\n-\n-            if (sessionQueryTotalMaxMemoryPerNode <= queryMaxTotalMemoryPerNode) {\n-                queryContexts.getUnchecked(taskId.getQueryId()).setMaxTotalMemory(sessionQueryTotalMaxMemoryPerNode);\n-            }\n+            // Session properties are only allowed to only decrease memory limits, not increase them", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU2MDkwMA=="}, "originalCommit": null, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4355, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}