{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3NTkyOTQw", "number": 4823, "title": "Use separate page for file based system access control", "bodyText": "", "createdAt": "2020-08-13T19:34:03Z", "url": "https://github.com/trinodb/trino/pull/4823", "merged": true, "mergeCommit": {"oid": "ce995bf0f1d2ee4801456059df9bb9b161879bae"}, "closed": true, "closedAt": "2020-08-24T19:01:48Z", "author": {"login": "electrum"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-lPfwAH2gAyNDY3NTkyOTQwOjY2NTk3MjJhOGNkMGYxMDJkMTI3YTY5M2UzNDE4MjNkNzVmMDRmMzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdA06VegFqTQ3MTg5NTkzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6659722a8cd0f102d127a693e341823d75f04f34", "author": {"user": {"login": "electrum", "name": "David Phillips"}}, "url": "https://github.com/trinodb/trino/commit/6659722a8cd0f102d127a693e341823d75f04f34", "committedDate": "2020-08-13T19:32:48Z", "message": "Use separate page for file based system access control"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MDgxODEx", "url": "https://github.com/trinodb/trino/pull/4823#pullrequestreview-467081811", "createdAt": "2020-08-13T19:50:56Z", "commit": {"oid": "6659722a8cd0f102d127a693e341823d75f04f34"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTo1MDo1NlrOHAbOzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTo1MDo1NlrOHAbOzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwODIwNg==", "bodyText": "fyi @rosewms .. table rules are covered already. .. you might not have to do any more doc", "url": "https://github.com/trinodb/trino/pull/4823#discussion_r470208206", "createdAt": "2020-08-13T19:50:56Z", "author": {"login": "mosabua"}, "path": "presto-docs/src/main/sphinx/security/file-system-access-control.rst", "diffHunk": "@@ -0,0 +1,368 @@\n+================================\n+File Based System Access Control\n+================================\n+\n+This access control plugin allows you to specify authorization rules in a JSON file.\n+\n+Configuration\n+-------------\n+\n+To use this plugin, add an ``etc/access-control.properties`` file containing two\n+required properties: ``access-control.name``, which must be equal to ``file``, and\n+``security.config-file``, which must be equal to the location of the config file.\n+For example, if a config file named ``rules.json``\n+resides in ``etc``, add an ``etc/access-control.properties`` with the following\n+contents:\n+\n+.. code-block:: none\n+\n+   access-control.name=file\n+   security.config-file=etc/rules.json\n+\n+The config file is specified in JSON format. It contains rules that define\n+which users have access to which resources. The rules are read from top to bottom\n+and the first matching rule is applied. If no rule matches, access is denied.\n+\n+Refresh\n+--------\n+\n+By default, when a change is made to the JSON rules file, Presto must be restarted\n+to load the changes. There is an optional property to refresh the properties without requiring a\n+Presto restart. The refresh period is specified in the ``etc/access-control.properties``:\n+\n+.. code-block:: none\n+\n+   security.refresh-period=1s\n+\n+Catalog Rules\n+-------------\n+\n+These rules govern the catalogs particular users can access. The user is\n+granted access to a catalog, based on the first matching rule read from top to\n+bottom. If no rule matches, access is denied. Each rule is composed of the\n+following fields:\n+\n+* ``user`` (optional): regex to match against user name. Defaults to ``.*``.\n+* ``group`` (optional): regex to match against group names. Defaults to ``.*``.\n+* ``catalog`` (optional): regex to match against catalog name. Defaults to ``.*``.\n+* ``allow`` (required): string indicating whether a user has access to the catalog.\n+  This value can be ``all``, ``read-only`` or ``none``, and defaults to ``none``.\n+  Setting this value to ``read-only`` has the same behavior as the ``read-only``\n+  system access control plugin.\n+\n+In order for a rule to apply the user name must match the regular expression\n+specified in ``user`` attribute.\n+\n+For group names, a rule can be applied if at least one group name of this user\n+matches the ``group`` regular expression.\n+\n+.. note::\n+\n+    By default, all users have access to the ``system`` catalog. You can\n+    override this behavior by adding a rule.\n+\n+    Boolean ``true`` and ``false`` are also supported as legacy values for ``allow``,\n+    to support backwards compatibility.  ``true`` maps to ``all``, and ``false`` maps to ``none``.\n+\n+For example, if you want to allow only the user ``admin`` to access the\n+``mysql`` and the ``system`` catalog, allow users from the ``finance``\n+and ``admin`` groups access to ``postgres`` catalog, allow all users to\n+access the ``hive`` catalog, and deny all other access, you can use the\n+following rules:\n+\n+.. code-block:: json\n+\n+    {\n+      \"catalogs\": [\n+        {\n+          \"user\": \"admin\",\n+          \"catalog\": \"(mysql|system)\",\n+          \"allow\": \"all\"\n+        },\n+        {\n+          \"group\": \"finance|human_resources\",\n+          \"catalog\": \"postgres\",\n+          \"allow\": true\n+        },\n+        {\n+          \"catalog\": \"hive\",\n+          \"allow\": \"all\"\n+        },\n+        {\n+          \"user\": \"alice\",\n+          \"catalog\": \"postgresql\",\n+          \"allow\": \"read-only\"\n+        },\n+        {\n+          \"catalog\": \"system\",\n+          \"allow\": \"none\"\n+        }\n+      ]\n+    }\n+\n+For group-based rules to match, users need to be assigned to groups by a\n+:doc:`/develop/group-provider`.\n+\n+Schema Rules\n+------------\n+\n+These rules allow you to grant ownership of a schema. Having ownership of an\n+schema allows users to execute ``DROP SCHEMA``, ``ALTER SCHEMA`` (both renaming\n+and setting authorization) and ``SHOW CREATE SCHEMA``. The user is granted\n+ownership of a schema, based on the first matching rule read from top to\n+bottom. If no rule matches, ownership is not granted. Each rule is composed of\n+the following fields:\n+\n+* ``user`` (optional): regex to match against user name. Defaults to ``.*``.\n+* ``group`` (optional): regex to match against group names. Defaults to ``.*``.\n+* ``schema`` (optional): regex to match against schema name. Defaults to ``.*``.\n+* ``owner`` (required): boolean indicating whether the user is to be considered\n+  an owner of the schema. Defaults to ``false``.\n+\n+For example, to provide ownership of all schemas to user ``admin``, treat all\n+users as owners of ``default`` schema and prevent user ``guest`` from ownership\n+of any schema, you can use the following rules:\n+\n+.. code-block:: json\n+\n+    {\n+      \"catalogs\": [\n+        {\n+          \"allow\": true\n+        }\n+      ],\n+      \"schemas\": [\n+        {\n+          \"user\": \"admin\",\n+          \"schema\": \".*\",\n+          \"owner\": true\n+        },\n+        {\n+          \"user\": \"guest\",\n+          \"owner\": false\n+        },\n+        {\n+          \"schema\": \"default\",\n+          \"owner\": true\n+        }\n+      ]\n+    }\n+\n+Table Rules", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6659722a8cd0f102d127a693e341823d75f04f34"}, "originalPosition": 151}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxODk1OTMy", "url": "https://github.com/trinodb/trino/pull/4823#pullrequestreview-471895932", "createdAt": "2020-08-20T18:56:01Z", "commit": {"oid": "6659722a8cd0f102d127a693e341823d75f04f34"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4361, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}