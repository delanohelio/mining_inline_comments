{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2NjA2NDc2", "number": 5852, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOTowODo0NlrOE2AKig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjowMjo1OVrOE5cbLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDYxMjU4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/sql/query/QueryAssertions.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOTowODo0NlrOHultyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNDo0NjoyNFrOHuw3SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYxNDQ3Mw==", "bodyText": "Here comes the cost of this. There is a format method defined in StandardRepresentation", "url": "https://github.com/trinodb/trino/pull/5852#discussion_r518614473", "createdAt": "2020-11-06T09:08:46Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/sql/query/QueryAssertions.java", "diffHunk": "@@ -368,7 +368,7 @@ public String toStringOf(Object object)\n             {\n                 if (object instanceof SqlTimestamp) {\n                     SqlTimestamp timestamp = (SqlTimestamp) object;\n-                    return String.format(\n+                    return String./*suppress code style*/format(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc0NDU3MA==", "bodyText": "\ud83d\ude14", "url": "https://github.com/trinodb/trino/pull/5852#discussion_r518744570", "createdAt": "2020-11-06T13:17:43Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/sql/query/QueryAssertions.java", "diffHunk": "@@ -368,7 +368,7 @@ public String toStringOf(Object object)\n             {\n                 if (object instanceof SqlTimestamp) {\n                     SqlTimestamp timestamp = (SqlTimestamp) object;\n-                    return String.format(\n+                    return String./*suppress code style*/format(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYxNDQ3Mw=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc1MjQ5MA==", "bodyText": "maybe it's worth/possible to configure some hints (airlift or just IDE) instead of hard restriction in airlift/airbase#247 ?", "url": "https://github.com/trinodb/trino/pull/5852#discussion_r518752490", "createdAt": "2020-11-06T13:32:06Z", "author": {"login": "ssheikin"}, "path": "presto-main/src/test/java/io/prestosql/sql/query/QueryAssertions.java", "diffHunk": "@@ -368,7 +368,7 @@ public String toStringOf(Object object)\n             {\n                 if (object instanceof SqlTimestamp) {\n                     SqlTimestamp timestamp = (SqlTimestamp) object;\n-                    return String.format(\n+                    return String./*suppress code style*/format(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYxNDQ3Mw=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc5NzEyOQ==", "bodyText": "That\u2019s why I don\u2019t like the blanket ban on String.format. There are places where you just want to use that name and delegate to String.format for convenience, and this prevents it.\nI don\u2019t see anything wrong with having qualified calls to String.format.", "url": "https://github.com/trinodb/trino/pull/5852#discussion_r518797129", "createdAt": "2020-11-06T14:46:24Z", "author": {"login": "martint"}, "path": "presto-main/src/test/java/io/prestosql/sql/query/QueryAssertions.java", "diffHunk": "@@ -368,7 +368,7 @@ public String toStringOf(Object object)\n             {\n                 if (object instanceof SqlTimestamp) {\n                     SqlTimestamp timestamp = (SqlTimestamp) object;\n-                    return String.format(\n+                    return String./*suppress code style*/format(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYxNDQ3Mw=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDYxNTM3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamptz/ToIso8601.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOTowOToyOVrOHulvZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOTowOToyOVrOHulvZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYxNDg4NA==", "bodyText": "This belongs to a new commit", "url": "https://github.com/trinodb/trino/pull/5852#discussion_r518614884", "createdAt": "2020-11-06T09:09:29Z", "author": {"login": "skrzypo987"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamptz/ToIso8601.java", "diffHunk": "@@ -60,25 +60,25 @@ public static Slice toIso8601(@LiteralParameter(\"p\") long precision, @SqlType(\"t\n         long epochMillis = unpackMillisUtc(packedEpochMillis);\n         ZoneId zoneId = unpackZoneKey(packedEpochMillis).getZoneId();\n \n-        return utf8Slice(format((int) precision, epochMillis, 0, zoneId));\n+        return utf8Slice(toIso8621((int) precision, epochMillis, 0, zoneId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDYxODA1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timetz/TimeWithTimeZoneToVarcharCast.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOToxMDoxMVrOHulw-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOToxMDoxMVrOHulw-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYxNTI5MA==", "bodyText": "as well as this.\nPlease make a commit with only String.format -> format and then other(s) with the rest", "url": "https://github.com/trinodb/trino/pull/5852#discussion_r518615290", "createdAt": "2020-11-06T09:10:11Z", "author": {"login": "skrzypo987"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timetz/TimeWithTimeZoneToVarcharCast.java", "diffHunk": "@@ -48,18 +48,17 @@ public static Slice cast(@LiteralParameter(\"p\") long precision, @SqlType(\"time(p\n         long nanos = unpackTimeNanos(packedTime);\n         int offsetMinutes = unpackOffsetMinutes(packedTime);\n \n-        return formatAsString((int) precision, nanos * PICOSECONDS_PER_NANOSECOND, offsetMinutes);\n+        return toVarchar((int) precision, nanos * PICOSECONDS_PER_NANOSECOND, offsetMinutes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDYyMTEyOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/OptionsPrinter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOToxMToxMVrOHuly_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOToxMToxMVrOHuly_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYxNTgwNQ==", "bodyText": "same here", "url": "https://github.com/trinodb/trino/pull/5852#discussion_r518615805", "createdAt": "2020-11-06T09:11:11Z", "author": {"login": "skrzypo987"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/OptionsPrinter.java", "diffHunk": "@@ -34,7 +35,7 @@\n \n     private OptionsPrinter() {}\n \n-    public static String format(Object... objects)\n+    public static String formatOptions(Object... objects)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjQ4Mjk0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timetz/TimeWithTimeZoneToVarcharCast.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzo0ODo1OVrOHu3rww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzo0ODo1OVrOHu3rww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkwODg2Nw==", "bodyText": "I intentionally didn't name it toVarchar when I wrote this because I wanted to convey the notion that this is about formatting the value in a string-like format. The fact that it's a varchar is a concern for the caller. See my comment below -- I think the fact that we have to work around naming (and this is not the only case) just to satisfy some convention around imports shows why this \"rule\" shouldn't be applied globally.", "url": "https://github.com/trinodb/trino/pull/5852#discussion_r518908867", "createdAt": "2020-11-06T17:48:59Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timetz/TimeWithTimeZoneToVarcharCast.java", "diffHunk": "@@ -48,18 +48,17 @@ public static Slice cast(@LiteralParameter(\"p\") long precision, @SqlType(\"time(p\n         long nanos = unpackTimeNanos(packedTime);\n         int offsetMinutes = unpackOffsetMinutes(packedTime);\n \n-        return formatAsString((int) precision, nanos * PICOSECONDS_PER_NANOSECOND, offsetMinutes);\n+        return toVarchar((int) precision, nanos * PICOSECONDS_PER_NANOSECOND, offsetMinutes);\n     }\n \n     @LiteralParameters({\"x\", \"p\"})\n     @SqlType(\"varchar(x)\")\n     public static Slice cast(@LiteralParameter(\"p\") long precision, @SqlType(\"time(p) with time zone\") LongTimeWithTimeZone time)\n     {\n-        return formatAsString((int) precision, time.getPicoSeconds(), time.getOffsetMinutes());\n+        return toVarchar((int) precision, time.getPicoSeconds(), time.getOffsetMinutes());\n     }\n \n-    // Can't name this format() because we can't have a qualified reference to String.format() below\n-    private static Slice formatAsString(int precision, long picos, int offsetMinutes)\n+    private static Slice toVarchar(int precision, long picos, int offsetMinutes)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NjMyMjgyOnYy", "diffSide": "RIGHT", "path": "presto-parquet/src/main/java/io/prestosql/parquet/writer/ParquetCompressor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxOTo1NTo1OFrOHvZ6Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxOTo1NTo1OFrOHvZ6Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ2OTY1MA==", "bodyText": "code -> codec", "url": "https://github.com/trinodb/trino/pull/5852#discussion_r519469650", "createdAt": "2020-11-08T19:55:58Z", "author": {"login": "ssheikin"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/writer/ParquetCompressor.java", "diffHunk": "@@ -47,7 +47,7 @@ static ParquetCompressor getCompressor(CompressionCodecName codec)\n             case UNCOMPRESSED:\n                 return null;\n         }\n-        throw new RuntimeException(String.format(\"%s codec is not supported\", codec));\n+        throw new RuntimeException(\"Not supported code: \" + codec);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTE1NDU3OnYy", "diffSide": "LEFT", "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/TestKafkaIntegrationPushDown.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwNzoyNzo1N1rOHzquWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwNzo1MDo1MVrOHzrS3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzkzOTQxOQ==", "bodyText": "Is it possible to enforce this kind of formatting somewhere? (airlift?)\nNo change request.", "url": "https://github.com/trinodb/trino/pull/5852#discussion_r523939419", "createdAt": "2020-11-16T07:27:57Z", "author": {"login": "skrzypo987"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/TestKafkaIntegrationPushDown.java", "diffHunk": "@@ -108,8 +108,7 @@ public void stopKafka()\n     public void testPartitionPushDown() throws ExecutionException, InterruptedException\n     {\n         createMessages(topicNamePartition);\n-        String sql = format(\"SELECT count(*) FROM default.%s WHERE _partition_id=1\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk0ODc2Nw==", "bodyText": "I am not aware of how it could be done.", "url": "https://github.com/trinodb/trino/pull/5852#discussion_r523948767", "createdAt": "2020-11-16T07:50:51Z", "author": {"login": "kokosing"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/TestKafkaIntegrationPushDown.java", "diffHunk": "@@ -108,8 +108,7 @@ public void stopKafka()\n     public void testPartitionPushDown() throws ExecutionException, InterruptedException\n     {\n         createMessages(topicNamePartition);\n-        String sql = format(\"SELECT count(*) FROM default.%s WHERE _partition_id=1\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzkzOTQxOQ=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NjY5NTU5OnYy", "diffSide": "RIGHT", "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/TestKafkaIntegrationPushDown.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjowMjoxM1rOHz6FOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMDo1ODoyM1rOH2B4Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE5MTAzNQ==", "bodyText": "nit: it would be better to inline the expression rather than to reuse the sql variable", "url": "https://github.com/trinodb/trino/pull/5852#discussion_r524191035", "createdAt": "2020-11-16T12:02:13Z", "author": {"login": "findepi"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/TestKafkaIntegrationPushDown.java", "diffHunk": "@@ -120,20 +119,17 @@ public void testOffsetPushDown() throws ExecutionException, InterruptedException\n     {\n         createMessages(topicNameOffset);\n         DistributedQueryRunner queryRunner = getDistributedQueryRunner();\n-        String sql = format(\"SELECT count(*) FROM default.%s WHERE _partition_offset between 2 and 10\",\n-                topicNameOffset);\n+        String sql = format(\"SELECT count(*) FROM default.%s WHERE _partition_offset between 2 and 10\", topicNameOffset);\n \n         ResultWithQueryId<MaterializedResult> queryResult = queryRunner.executeWithQueryId(getSession(), sql);\n         assertEquals(getQueryInfo(queryRunner, queryResult).getQueryStats().getProcessedInputPositions(), 18);\n \n-        sql = format(\"SELECT count(*) FROM default.%s WHERE _partition_offset > 2 and _partition_offset < 10\",\n-                topicNameOffset);\n+        sql = format(\"SELECT count(*) FROM default.%s WHERE _partition_offset > 2 and _partition_offset < 10\", topicNameOffset);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQxNTk3NA==", "bodyText": "Then I would need to also inline queryResult and then test becomes unreadable", "url": "https://github.com/trinodb/trino/pull/5852#discussion_r526415974", "createdAt": "2020-11-18T20:58:23Z", "author": {"login": "kokosing"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/TestKafkaIntegrationPushDown.java", "diffHunk": "@@ -120,20 +119,17 @@ public void testOffsetPushDown() throws ExecutionException, InterruptedException\n     {\n         createMessages(topicNameOffset);\n         DistributedQueryRunner queryRunner = getDistributedQueryRunner();\n-        String sql = format(\"SELECT count(*) FROM default.%s WHERE _partition_offset between 2 and 10\",\n-                topicNameOffset);\n+        String sql = format(\"SELECT count(*) FROM default.%s WHERE _partition_offset between 2 and 10\", topicNameOffset);\n \n         ResultWithQueryId<MaterializedResult> queryResult = queryRunner.executeWithQueryId(getSession(), sql);\n         assertEquals(getQueryInfo(queryRunner, queryResult).getQueryStats().getProcessedInputPositions(), 18);\n \n-        sql = format(\"SELECT count(*) FROM default.%s WHERE _partition_offset > 2 and _partition_offset < 10\",\n-                topicNameOffset);\n+        sql = format(\"SELECT count(*) FROM default.%s WHERE _partition_offset > 2 and _partition_offset < 10\", topicNameOffset);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE5MTAzNQ=="}, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NjY5OTk2OnYy", "diffSide": "RIGHT", "path": "presto-parquet/src/main/java/io/prestosql/parquet/writer/ParquetCompressor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjowMjo1OVrOHz6IUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjowMjo1OVrOHz6IUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE5MTgyNQ==", "bodyText": "Not supported -> Unsupported", "url": "https://github.com/trinodb/trino/pull/5852#discussion_r524191825", "createdAt": "2020-11-16T12:02:59Z", "author": {"login": "findepi"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/writer/ParquetCompressor.java", "diffHunk": "@@ -47,7 +47,7 @@ static ParquetCompressor getCompressor(CompressionCodecName codec)\n             case UNCOMPRESSED:\n                 return null;\n         }\n-        throw new RuntimeException(String.format(\"%s codec is not supported\", codec));\n+        throw new RuntimeException(\"Not supported codec: \" + codec);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4968, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}