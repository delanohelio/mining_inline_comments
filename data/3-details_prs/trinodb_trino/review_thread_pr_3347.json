{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5MjA3MDYy", "number": 3347, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQyMDowODozMVrODu6bTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODoyMTo0N1rODvr4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTE4MzQ5OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/connector/elasticsearch.rst", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQyMDowODozMVrOGBC-zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQyMjoxMToyMVrOGBDyUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MDYwNQ==", "bodyText": "see https://prestosql.io/docs/current/language/types.html#ipaddress", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r403750605", "createdAt": "2020-04-05T20:08:31Z", "author": {"login": "findepi"}, "path": "presto-docs/src/main/sphinx/connector/elasticsearch.rst", "diffHunk": "@@ -182,6 +182,7 @@ Elasticsearch Presto\n ``keyword``   ``VARCHAR``\n ``text``      ``VARCHAR``\n ``date``      ``TIMESTAMP``\n+``ip``        ``VARCHAR``", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1NzQ1MA==", "bodyText": "Agreed, it would be better to map this to ipaddress", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r403757450", "createdAt": "2020-04-05T21:11:25Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/connector/elasticsearch.rst", "diffHunk": "@@ -182,6 +182,7 @@ Elasticsearch Presto\n ``keyword``   ``VARCHAR``\n ``text``      ``VARCHAR``\n ``date``      ``TIMESTAMP``\n+``ip``        ``VARCHAR``", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MDYwNQ=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc2Mzc5Mg==", "bodyText": "I change it.. but I'm unable to make this work..\nthe code to read the value is on IpAddressDecoder\ncan someone guide me?", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r403763792", "createdAt": "2020-04-05T22:11:21Z", "author": {"login": "eskabetxe"}, "path": "presto-docs/src/main/sphinx/connector/elasticsearch.rst", "diffHunk": "@@ -182,6 +182,7 @@ Elasticsearch Presto\n ``keyword``   ``VARCHAR``\n ``text``      ``VARCHAR``\n ``date``      ``TIMESTAMP``\n+``ip``        ``VARCHAR``", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MDYwNQ=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTgyOTMyOnYy", "diffSide": "RIGHT", "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/decoders/IpAddressDecoder.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNTozODozOFrOGBIb8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODowMjozNFrOGB3qRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzOTk4Nw==", "bodyText": "You may want to follow io.prestosql.type.IpAddressOperators#castFromVarcharToIpAddress logic.\n@electrum should we copy the method here? or is there a way to reuse?", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r403839987", "createdAt": "2020-04-06T05:38:38Z", "author": {"login": "findepi"}, "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/decoders/IpAddressDecoder.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.elasticsearch.decoders;\n+\n+import com.google.common.net.InetAddresses;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.block.BlockBuilderStatus;\n+import io.prestosql.spi.block.PageBuilderStatus;\n+import org.elasticsearch.search.SearchHit;\n+\n+import java.net.Inet6Address;\n+import java.util.function.Supplier;\n+\n+import static io.prestosql.spi.StandardErrorCode.TYPE_MISMATCH;\n+import static io.prestosql.type.IpAddressType.IPADDRESS;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class IpAddressDecoder\n+        implements Decoder\n+{\n+    private final String path;\n+\n+    public IpAddressDecoder(String path)\n+    {\n+        this.path = requireNonNull(path, \"path is null\");\n+    }\n+\n+    @Override\n+    public void decode(SearchHit hit, Supplier<Object> getter, BlockBuilder output)\n+    {\n+        Object value = getter.get();\n+        if (value == null) {\n+            output.appendNull();\n+        }\n+        else if (value instanceof String) {\n+            String address = (String) value;\n+            if (address.contains(\".\")) {\n+                address = \"::\" + address;\n+            }\n+            BlockBuilder blockBuilder = IPADDRESS.createFixedSizeBlockBuilder(1);\n+            Slice slice = Slices.wrappedBuffer(InetAddresses.forString(address).getAddress());\n+            IPADDRESS.writeSlice(blockBuilder, slice);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg3OTgzNQ==", "bodyText": "I still have the same error\nCaused by: java.lang.IllegalArgumentException: position is not valid at io.prestosql.spi.block.RunLengthEncodedBlock.checkReadablePosition(RunLengthEncodedBlock.java:311) at io.prestosql.spi.block.RunLengthEncodedBlock.isNull(RunLengthEncodedBlock.java:277) at io.prestosql.type.IpAddressType.getObjectValue(IpAddressType.java:121)", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r403879835", "createdAt": "2020-04-06T07:26:22Z", "author": {"login": "eskabetxe"}, "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/decoders/IpAddressDecoder.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.elasticsearch.decoders;\n+\n+import com.google.common.net.InetAddresses;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.block.BlockBuilderStatus;\n+import io.prestosql.spi.block.PageBuilderStatus;\n+import org.elasticsearch.search.SearchHit;\n+\n+import java.net.Inet6Address;\n+import java.util.function.Supplier;\n+\n+import static io.prestosql.spi.StandardErrorCode.TYPE_MISMATCH;\n+import static io.prestosql.type.IpAddressType.IPADDRESS;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class IpAddressDecoder\n+        implements Decoder\n+{\n+    private final String path;\n+\n+    public IpAddressDecoder(String path)\n+    {\n+        this.path = requireNonNull(path, \"path is null\");\n+    }\n+\n+    @Override\n+    public void decode(SearchHit hit, Supplier<Object> getter, BlockBuilder output)\n+    {\n+        Object value = getter.get();\n+        if (value == null) {\n+            output.appendNull();\n+        }\n+        else if (value instanceof String) {\n+            String address = (String) value;\n+            if (address.contains(\".\")) {\n+                address = \"::\" + address;\n+            }\n+            BlockBuilder blockBuilder = IPADDRESS.createFixedSizeBlockBuilder(1);\n+            Slice slice = Slices.wrappedBuffer(InetAddresses.forString(address).getAddress());\n+            IPADDRESS.writeSlice(blockBuilder, slice);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzOTk4Nw=="}, "originalCommit": null, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg4ODQyNg==", "bodyText": "in current code, you're not writing to output\nIPADDRESS.writeSlice(blockBuilder, slice); -> IPADDRESS.writeSlice(output, slice);\nyou don't need intermediate block build, see\nhttps://github.com/prestosql/presto/blob/677df2ced0306609d870c75b75da347c4a688e62/presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/decoders/VarbinaryDecoder.java#L37-L39", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r403888426", "createdAt": "2020-04-06T07:43:16Z", "author": {"login": "findepi"}, "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/decoders/IpAddressDecoder.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.elasticsearch.decoders;\n+\n+import com.google.common.net.InetAddresses;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.block.BlockBuilderStatus;\n+import io.prestosql.spi.block.PageBuilderStatus;\n+import org.elasticsearch.search.SearchHit;\n+\n+import java.net.Inet6Address;\n+import java.util.function.Supplier;\n+\n+import static io.prestosql.spi.StandardErrorCode.TYPE_MISMATCH;\n+import static io.prestosql.type.IpAddressType.IPADDRESS;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class IpAddressDecoder\n+        implements Decoder\n+{\n+    private final String path;\n+\n+    public IpAddressDecoder(String path)\n+    {\n+        this.path = requireNonNull(path, \"path is null\");\n+    }\n+\n+    @Override\n+    public void decode(SearchHit hit, Supplier<Object> getter, BlockBuilder output)\n+    {\n+        Object value = getter.get();\n+        if (value == null) {\n+            output.appendNull();\n+        }\n+        else if (value instanceof String) {\n+            String address = (String) value;\n+            if (address.contains(\".\")) {\n+                address = \"::\" + address;\n+            }\n+            BlockBuilder blockBuilder = IPADDRESS.createFixedSizeBlockBuilder(1);\n+            Slice slice = Slices.wrappedBuffer(InetAddresses.forString(address).getAddress());\n+            IPADDRESS.writeSlice(blockBuilder, slice);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzOTk4Nw=="}, "originalCommit": null, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkxODgyNg==", "bodyText": "yes its that..\nbut I have to touch TestingPrestoClient to add IPADDRESS on convertToRowValue", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r403918826", "createdAt": "2020-04-06T08:36:31Z", "author": {"login": "eskabetxe"}, "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/decoders/IpAddressDecoder.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.elasticsearch.decoders;\n+\n+import com.google.common.net.InetAddresses;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.block.BlockBuilderStatus;\n+import io.prestosql.spi.block.PageBuilderStatus;\n+import org.elasticsearch.search.SearchHit;\n+\n+import java.net.Inet6Address;\n+import java.util.function.Supplier;\n+\n+import static io.prestosql.spi.StandardErrorCode.TYPE_MISMATCH;\n+import static io.prestosql.type.IpAddressType.IPADDRESS;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class IpAddressDecoder\n+        implements Decoder\n+{\n+    private final String path;\n+\n+    public IpAddressDecoder(String path)\n+    {\n+        this.path = requireNonNull(path, \"path is null\");\n+    }\n+\n+    @Override\n+    public void decode(SearchHit hit, Supplier<Object> getter, BlockBuilder output)\n+    {\n+        Object value = getter.get();\n+        if (value == null) {\n+            output.appendNull();\n+        }\n+        else if (value instanceof String) {\n+            String address = (String) value;\n+            if (address.contains(\".\")) {\n+                address = \"::\" + address;\n+            }\n+            BlockBuilder blockBuilder = IPADDRESS.createFixedSizeBlockBuilder(1);\n+            Slice slice = Slices.wrappedBuffer(InetAddresses.forString(address).getAddress());\n+            IPADDRESS.writeSlice(blockBuilder, slice);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzOTk4Nw=="}, "originalCommit": null, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYwMDAyOQ==", "bodyText": "We should copy that logic for now. Ideally, we would lookup the cast operator in TypeManager, but I don\u2019t think that is supported yet and @dain has reservations about adding it due to conflicting with the function work.", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r404600029", "createdAt": "2020-04-07T07:39:16Z", "author": {"login": "electrum"}, "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/decoders/IpAddressDecoder.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.elasticsearch.decoders;\n+\n+import com.google.common.net.InetAddresses;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.block.BlockBuilderStatus;\n+import io.prestosql.spi.block.PageBuilderStatus;\n+import org.elasticsearch.search.SearchHit;\n+\n+import java.net.Inet6Address;\n+import java.util.function.Supplier;\n+\n+import static io.prestosql.spi.StandardErrorCode.TYPE_MISMATCH;\n+import static io.prestosql.type.IpAddressType.IPADDRESS;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class IpAddressDecoder\n+        implements Decoder\n+{\n+    private final String path;\n+\n+    public IpAddressDecoder(String path)\n+    {\n+        this.path = requireNonNull(path, \"path is null\");\n+    }\n+\n+    @Override\n+    public void decode(SearchHit hit, Supplier<Object> getter, BlockBuilder output)\n+    {\n+        Object value = getter.get();\n+        if (value == null) {\n+            output.appendNull();\n+        }\n+        else if (value instanceof String) {\n+            String address = (String) value;\n+            if (address.contains(\".\")) {\n+                address = \"::\" + address;\n+            }\n+            BlockBuilder blockBuilder = IPADDRESS.createFixedSizeBlockBuilder(1);\n+            Slice slice = Slices.wrappedBuffer(InetAddresses.forString(address).getAddress());\n+            IPADDRESS.writeSlice(blockBuilder, slice);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzOTk4Nw=="}, "originalCommit": null, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYxMzcwMA==", "bodyText": "done", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r404613700", "createdAt": "2020-04-07T08:02:34Z", "author": {"login": "eskabetxe"}, "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/decoders/IpAddressDecoder.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.elasticsearch.decoders;\n+\n+import com.google.common.net.InetAddresses;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.block.BlockBuilderStatus;\n+import io.prestosql.spi.block.PageBuilderStatus;\n+import org.elasticsearch.search.SearchHit;\n+\n+import java.net.Inet6Address;\n+import java.util.function.Supplier;\n+\n+import static io.prestosql.spi.StandardErrorCode.TYPE_MISMATCH;\n+import static io.prestosql.type.IpAddressType.IPADDRESS;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class IpAddressDecoder\n+        implements Decoder\n+{\n+    private final String path;\n+\n+    public IpAddressDecoder(String path)\n+    {\n+        this.path = requireNonNull(path, \"path is null\");\n+    }\n+\n+    @Override\n+    public void decode(SearchHit hit, Supplier<Object> getter, BlockBuilder output)\n+    {\n+        Object value = getter.get();\n+        if (value == null) {\n+            output.appendNull();\n+        }\n+        else if (value instanceof String) {\n+            String address = (String) value;\n+            if (address.contains(\".\")) {\n+                address = \"::\" + address;\n+            }\n+            BlockBuilder blockBuilder = IPADDRESS.createFixedSizeBlockBuilder(1);\n+            Slice slice = Slices.wrappedBuffer(InetAddresses.forString(address).getAddress());\n+            IPADDRESS.writeSlice(blockBuilder, slice);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzOTk4Nw=="}, "originalCommit": null, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNjE1NTEzOnYy", "diffSide": "LEFT", "path": "presto-elasticsearch/pom.xml", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNzo0NDozMlrOGBLb3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODowMjo0OFrOGB3qsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg4OTExOQ==", "bodyText": "I understand this is just temporary change.\nThis will need to be reverted, but let's focus on this once you get things working.\n(#3347 (comment))", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r403889119", "createdAt": "2020-04-06T07:44:32Z", "author": {"login": "findepi"}, "path": "presto-elasticsearch/pom.xml", "diffHunk": "@@ -303,20 +303,18 @@\n         <dependency>\n             <groupId>org.testcontainers</groupId>\n             <artifactId>elasticsearch</artifactId>\n-            <version>1.12.3</version>\n             <scope>test</scope>\n         </dependency>\n \n         <dependency>\n             <groupId>io.prestosql</groupId>\n             <artifactId>presto-client</artifactId>\n-            <scope>test</scope>\n         </dependency>\n \n+\n         <dependency>\n             <groupId>io.prestosql</groupId>\n             <artifactId>presto-main</artifactId>\n-            <scope>test</scope>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg5MzYzMg==", "bodyText": "I have to do this to get IpAddressType", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r403893632", "createdAt": "2020-04-06T07:52:38Z", "author": {"login": "eskabetxe"}, "path": "presto-elasticsearch/pom.xml", "diffHunk": "@@ -303,20 +303,18 @@\n         <dependency>\n             <groupId>org.testcontainers</groupId>\n             <artifactId>elasticsearch</artifactId>\n-            <version>1.12.3</version>\n             <scope>test</scope>\n         </dependency>\n \n         <dependency>\n             <groupId>io.prestosql</groupId>\n             <artifactId>presto-client</artifactId>\n-            <scope>test</scope>\n         </dependency>\n \n+\n         <dependency>\n             <groupId>io.prestosql</groupId>\n             <artifactId>presto-main</artifactId>\n-            <scope>test</scope>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg4OTExOQ=="}, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM5NTk4Mw==", "bodyText": "i added a fixup for this -- 701d2f5", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r404395983", "createdAt": "2020-04-06T21:21:37Z", "author": {"login": "findepi"}, "path": "presto-elasticsearch/pom.xml", "diffHunk": "@@ -303,20 +303,18 @@\n         <dependency>\n             <groupId>org.testcontainers</groupId>\n             <artifactId>elasticsearch</artifactId>\n-            <version>1.12.3</version>\n             <scope>test</scope>\n         </dependency>\n \n         <dependency>\n             <groupId>io.prestosql</groupId>\n             <artifactId>presto-client</artifactId>\n-            <scope>test</scope>\n         </dependency>\n \n+\n         <dependency>\n             <groupId>io.prestosql</groupId>\n             <artifactId>presto-main</artifactId>\n-            <scope>test</scope>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg4OTExOQ=="}, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU5NDUwNA==", "bodyText": "@findepi  there are problems with that change\nIpAddressDecoder.java:[20,25] package io.prestosql.type does not exist\nElasticsearchPageSource.java:[73,32] package io.prestosql.type does not exist\nthe problematic imports are\nio.prestosql.type.IpAddressOperators\nio.prestosql.type.IpAddressType\nthe change you add to ElasticSearchMetadata should be replicated in this two class?", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r404594504", "createdAt": "2020-04-07T07:30:00Z", "author": {"login": "eskabetxe"}, "path": "presto-elasticsearch/pom.xml", "diffHunk": "@@ -303,20 +303,18 @@\n         <dependency>\n             <groupId>org.testcontainers</groupId>\n             <artifactId>elasticsearch</artifactId>\n-            <version>1.12.3</version>\n             <scope>test</scope>\n         </dependency>\n \n         <dependency>\n             <groupId>io.prestosql</groupId>\n             <artifactId>presto-client</artifactId>\n-            <scope>test</scope>\n         </dependency>\n \n+\n         <dependency>\n             <groupId>io.prestosql</groupId>\n             <artifactId>presto-main</artifactId>\n-            <scope>test</scope>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg4OTExOQ=="}, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYxMzgxMQ==", "bodyText": "fixed", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r404613811", "createdAt": "2020-04-07T08:02:48Z", "author": {"login": "eskabetxe"}, "path": "presto-elasticsearch/pom.xml", "diffHunk": "@@ -303,20 +303,18 @@\n         <dependency>\n             <groupId>org.testcontainers</groupId>\n             <artifactId>elasticsearch</artifactId>\n-            <version>1.12.3</version>\n             <scope>test</scope>\n         </dependency>\n \n         <dependency>\n             <groupId>io.prestosql</groupId>\n             <artifactId>presto-client</artifactId>\n-            <scope>test</scope>\n         </dependency>\n \n+\n         <dependency>\n             <groupId>io.prestosql</groupId>\n             <artifactId>presto-main</artifactId>\n-            <scope>test</scope>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg4OTExOQ=="}, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzI4Mjk2OnYy", "diffSide": "RIGHT", "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/decoders/IpAddressDecoder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODoyMTowNlrOGCQZHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODo0MjowNFrOGCRK_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxODkwOA==", "bodyText": "Nit: use a regular comment, not javadoc:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /**\n          \n          \n            \n                  *this is a copy of IpAddressOperators.castFromVarcharToIpAddress method\n          \n          \n            \n                  */\n          \n          \n            \n                // This is a copy of IpAddressOperators.castFromVarcharToIpAddress method", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r405018908", "createdAt": "2020-04-07T18:21:06Z", "author": {"login": "martint"}, "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/decoders/IpAddressDecoder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.elasticsearch.decoders;\n+\n+import com.google.common.net.InetAddresses;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.type.Type;\n+import org.elasticsearch.search.SearchHit;\n+\n+import java.util.function.Supplier;\n+\n+import static io.airlift.slice.Slices.wrappedBuffer;\n+import static io.prestosql.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n+import static io.prestosql.spi.StandardErrorCode.INVALID_CAST_ARGUMENT;\n+import static io.prestosql.spi.StandardErrorCode.TYPE_MISMATCH;\n+import static java.lang.String.format;\n+import static java.lang.System.arraycopy;\n+import static java.util.Objects.requireNonNull;\n+\n+public class IpAddressDecoder\n+        implements Decoder\n+{\n+    private final String path;\n+    private final Type ipAddressType;\n+\n+    public IpAddressDecoder(String path, Type type)\n+    {\n+        this.path = requireNonNull(path, \"path is null\");\n+        this.ipAddressType = requireNonNull(type, \"type is null\");\n+    }\n+\n+    @Override\n+    public void decode(SearchHit hit, Supplier<Object> getter, BlockBuilder output)\n+    {\n+        Object value = getter.get();\n+        if (value == null) {\n+            output.appendNull();\n+        }\n+        else if (value instanceof String) {\n+            String address = (String) value;\n+            Slice slice = castToIpAddress(Slices.utf8Slice(address));\n+            ipAddressType.writeSlice(output, slice);\n+        }\n+        else {\n+            throw new PrestoException(TYPE_MISMATCH, format(\"Expected a string value for field '%s' of type IP: %s [%s]\", path, value, value.getClass().getSimpleName()));\n+        }\n+    }\n+\n+    /**\n+      *this is a copy of IpAddressOperators.castFromVarcharToIpAddress method\n+      */", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAzMTY3Nw==", "bodyText": "done", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r405031677", "createdAt": "2020-04-07T18:42:04Z", "author": {"login": "eskabetxe"}, "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/decoders/IpAddressDecoder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.elasticsearch.decoders;\n+\n+import com.google.common.net.InetAddresses;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.type.Type;\n+import org.elasticsearch.search.SearchHit;\n+\n+import java.util.function.Supplier;\n+\n+import static io.airlift.slice.Slices.wrappedBuffer;\n+import static io.prestosql.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n+import static io.prestosql.spi.StandardErrorCode.INVALID_CAST_ARGUMENT;\n+import static io.prestosql.spi.StandardErrorCode.TYPE_MISMATCH;\n+import static java.lang.String.format;\n+import static java.lang.System.arraycopy;\n+import static java.util.Objects.requireNonNull;\n+\n+public class IpAddressDecoder\n+        implements Decoder\n+{\n+    private final String path;\n+    private final Type ipAddressType;\n+\n+    public IpAddressDecoder(String path, Type type)\n+    {\n+        this.path = requireNonNull(path, \"path is null\");\n+        this.ipAddressType = requireNonNull(type, \"type is null\");\n+    }\n+\n+    @Override\n+    public void decode(SearchHit hit, Supplier<Object> getter, BlockBuilder output)\n+    {\n+        Object value = getter.get();\n+        if (value == null) {\n+            output.appendNull();\n+        }\n+        else if (value instanceof String) {\n+            String address = (String) value;\n+            Slice slice = castToIpAddress(Slices.utf8Slice(address));\n+            ipAddressType.writeSlice(output, slice);\n+        }\n+        else {\n+            throw new PrestoException(TYPE_MISMATCH, format(\"Expected a string value for field '%s' of type IP: %s [%s]\", path, value, value.getClass().getSimpleName()));\n+        }\n+    }\n+\n+    /**\n+      *this is a copy of IpAddressOperators.castFromVarcharToIpAddress method\n+      */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxODkwOA=="}, "originalCommit": null, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzI4NDA3OnYy", "diffSide": "LEFT", "path": "presto-elasticsearch/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODoyMToyNFrOGCQZzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODo0MjoxM1rOGCRLSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxOTA4NQ==", "bodyText": "Unrelated changes?", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r405019085", "createdAt": "2020-04-07T18:21:24Z", "author": {"login": "martint"}, "path": "presto-elasticsearch/pom.xml", "diffHunk": "@@ -331,18 +330,6 @@\n             <scope>test</scope>\n         </dependency>\n \n-        <dependency>\n-            <groupId>io.airlift</groupId>\n-            <artifactId>http-server</artifactId>\n-            <scope>test</scope>\n-        </dependency>\n-\n-        <dependency>\n-            <groupId>io.airlift</groupId>\n-            <artifactId>node</artifactId>\n-            <scope>test</scope>\n-        </dependency>\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAzMTc1NA==", "bodyText": "reverted", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r405031754", "createdAt": "2020-04-07T18:42:13Z", "author": {"login": "eskabetxe"}, "path": "presto-elasticsearch/pom.xml", "diffHunk": "@@ -331,18 +330,6 @@\n             <scope>test</scope>\n         </dependency>\n \n-        <dependency>\n-            <groupId>io.airlift</groupId>\n-            <artifactId>http-server</artifactId>\n-            <scope>test</scope>\n-        </dependency>\n-\n-        <dependency>\n-            <groupId>io.airlift</groupId>\n-            <artifactId>node</artifactId>\n-            <scope>test</scope>\n-        </dependency>\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxOTA4NQ=="}, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzI4NDcxOnYy", "diffSide": "LEFT", "path": "presto-elasticsearch/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODoyMTozNFrOGCQaKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODo0MjoxOFrOGCRLew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxOTE3OQ==", "bodyText": "Unrelated change?", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r405019179", "createdAt": "2020-04-07T18:21:34Z", "author": {"login": "martint"}, "path": "presto-elasticsearch/pom.xml", "diffHunk": "@@ -355,12 +342,6 @@\n             <scope>test</scope>\n         </dependency>\n \n-        <dependency>\n-            <groupId>javax.servlet</groupId>\n-            <artifactId>javax.servlet-api</artifactId>\n-            <scope>test</scope>\n-        </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAzMTgwMw==", "bodyText": "reverted", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r405031803", "createdAt": "2020-04-07T18:42:18Z", "author": {"login": "eskabetxe"}, "path": "presto-elasticsearch/pom.xml", "diffHunk": "@@ -355,12 +342,6 @@\n             <scope>test</scope>\n         </dependency>\n \n-        <dependency>\n-            <groupId>javax.servlet</groupId>\n-            <artifactId>javax.servlet-api</artifactId>\n-            <scope>test</scope>\n-        </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxOTE3OQ=="}, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzI4NTY2OnYy", "diffSide": "LEFT", "path": "presto-elasticsearch/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODoyMTo0N1rOGCQaxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODo0MjoyMlrOGCRLmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxOTMzMg==", "bodyText": "Unrelated change?", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r405019332", "createdAt": "2020-04-07T18:21:47Z", "author": {"login": "martint"}, "path": "presto-elasticsearch/pom.xml", "diffHunk": "@@ -303,7 +303,6 @@\n         <dependency>\n             <groupId>org.testcontainers</groupId>\n             <artifactId>elasticsearch</artifactId>\n-            <version>1.12.3</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAzMTgzMw==", "bodyText": "reverted", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r405031833", "createdAt": "2020-04-07T18:42:22Z", "author": {"login": "eskabetxe"}, "path": "presto-elasticsearch/pom.xml", "diffHunk": "@@ -303,7 +303,6 @@\n         <dependency>\n             <groupId>org.testcontainers</groupId>\n             <artifactId>elasticsearch</artifactId>\n-            <version>1.12.3</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxOTMzMg=="}, "originalCommit": null, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 327, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}