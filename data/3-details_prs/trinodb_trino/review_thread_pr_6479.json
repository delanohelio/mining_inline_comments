{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ3MDc4MjE1", "number": 6479, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QwMDoyNDoxMFrOFSGufQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xOFQwODozMzozM1rOFnZUJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NTI4ODkzOnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/HiveStorageFormat.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QwMDoyNDoxMFrOIY50RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QwMTo1MToxMVrOIY6xTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk4NDAwNA==", "bodyText": "Tables can have arbitrary formats, so if the mapping fails, we should assume they are index based.\nSince this is for reading, I think we can ignore output format here (just use input format and serde).", "url": "https://github.com/trinodb/trino/pull/6479#discussion_r562984004", "createdAt": "2021-01-23T00:24:10Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/HiveStorageFormat.java", "diffHunk": "@@ -160,6 +165,14 @@ else if (type.getCategory() == Category.PRIMITIVE) {\n         }\n     }\n \n+    private static final Map<StorageFormat, HiveStorageFormat> HIVE_STORAGE_FORMAT_FROM_STORAGE_FORMAT = Arrays.stream(HiveStorageFormat.values())\n+            .collect(toImmutableMap(format -> StorageFormat.create(format.getSerDe(), format.getInputFormat(), format.getOutputFormat()), identity()));\n+\n+    public static HiveStorageFormat getHiveStorageFormat(StorageFormat storageFormat)\n+    {\n+        return requireNonNull(HIVE_STORAGE_FORMAT_FROM_STORAGE_FORMAT.get(storageFormat), \"Could not find format for \" + storageFormat);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk5OTYyOA==", "bodyText": "I changed the method return to be Optional, and changed the map key to be a class with just the serDe and inputFormat.", "url": "https://github.com/trinodb/trino/pull/6479#discussion_r562999628", "createdAt": "2021-01-23T01:51:11Z", "author": {"login": "djsstarburst"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/HiveStorageFormat.java", "diffHunk": "@@ -160,6 +165,14 @@ else if (type.getCategory() == Category.PRIMITIVE) {\n         }\n     }\n \n+    private static final Map<StorageFormat, HiveStorageFormat> HIVE_STORAGE_FORMAT_FROM_STORAGE_FORMAT = Arrays.stream(HiveStorageFormat.values())\n+            .collect(toImmutableMap(format -> StorageFormat.create(format.getSerDe(), format.getInputFormat(), format.getOutputFormat()), identity()));\n+\n+    public static HiveStorageFormat getHiveStorageFormat(StorageFormat storageFormat)\n+    {\n+        return requireNonNull(HIVE_STORAGE_FORMAT_FROM_STORAGE_FORMAT.get(storageFormat), \"Could not find format for \" + storageFormat);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk4NDAwNA=="}, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NTI5NTcxOnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/orc/OrcPageSourceFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QwMDoyODowMVrOIY539g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QwMTo1MToxNFrOIY6xWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk4NDk1MA==", "bodyText": "Maybe simplify to\nif (handle != null && !orcColumn.getColumnName().equals(handle.getName())) {\n    orcColumn = new OrcColumn(...);\n}\nbuilder.add(orcColumn);", "url": "https://github.com/trinodb/trino/pull/6479#discussion_r562984950", "createdAt": "2021-01-23T00:28:01Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/orc/OrcPageSourceFactory.java", "diffHunk": "@@ -426,6 +428,41 @@ else if (column.getBaseHiveColumnIndex() < fileColumns.size()) {\n         }\n     }\n \n+    /**\n+     * Recreate the list of fileColumns, updating the names of any whose names have changed in the\n+     * corresponding elements of the desiredColumns list.  NOTE: this renaming is only applied to\n+     * top-level columns, not nested columns.\n+     * @param fileColumns All OrcColumns nested in the root column of the table.\n+     * @param desiredColumns HiveColumnHandles for the metastore's table columns.\n+     * @return Return the fileColumns list with any OrcColumn corresponding to a desiredColumn renamed if\n+     * the names differ from those specified in the desiredColumns.\n+     */\n+    private static List<OrcColumn> ensureColumnNameConsistency(List<OrcColumn> fileColumns, List<HiveColumnHandle> desiredColumns)\n+    {\n+        int columnCount = fileColumns.size();\n+        ImmutableList.Builder<OrcColumn> builder = ImmutableList.builderWithExpectedSize(columnCount);\n+\n+        Map<Integer, HiveColumnHandle> desiredColumnsByNumber = desiredColumns.stream()\n+                .collect(toImmutableMap(HiveColumnHandle::getBaseHiveColumnIndex, identity()));\n+\n+        for (int index = 0; index < columnCount; index++) {\n+            OrcColumn orcColumn = fileColumns.get(index);\n+            HiveColumnHandle handle = desiredColumnsByNumber.get(index);\n+            if (handle != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk5OTY0Mw==", "bodyText": "Simplified.", "url": "https://github.com/trinodb/trino/pull/6479#discussion_r562999643", "createdAt": "2021-01-23T01:51:14Z", "author": {"login": "djsstarburst"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/orc/OrcPageSourceFactory.java", "diffHunk": "@@ -426,6 +428,41 @@ else if (column.getBaseHiveColumnIndex() < fileColumns.size()) {\n         }\n     }\n \n+    /**\n+     * Recreate the list of fileColumns, updating the names of any whose names have changed in the\n+     * corresponding elements of the desiredColumns list.  NOTE: this renaming is only applied to\n+     * top-level columns, not nested columns.\n+     * @param fileColumns All OrcColumns nested in the root column of the table.\n+     * @param desiredColumns HiveColumnHandles for the metastore's table columns.\n+     * @return Return the fileColumns list with any OrcColumn corresponding to a desiredColumn renamed if\n+     * the names differ from those specified in the desiredColumns.\n+     */\n+    private static List<OrcColumn> ensureColumnNameConsistency(List<OrcColumn> fileColumns, List<HiveColumnHandle> desiredColumns)\n+    {\n+        int columnCount = fileColumns.size();\n+        ImmutableList.Builder<OrcColumn> builder = ImmutableList.builderWithExpectedSize(columnCount);\n+\n+        Map<Integer, HiveColumnHandle> desiredColumnsByNumber = desiredColumns.stream()\n+                .collect(toImmutableMap(HiveColumnHandle::getBaseHiveColumnIndex, identity()));\n+\n+        for (int index = 0; index < columnCount; index++) {\n+            OrcColumn orcColumn = fileColumns.get(index);\n+            HiveColumnHandle handle = desiredColumnsByNumber.get(index);\n+            if (handle != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk4NDk1MA=="}, "originalCommit": null, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NTI5Njg2OnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/orc/OrcPageSourceFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QwMDoyODo1MFrOIY54oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QwMTo1MToxN1rOIY6xXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk4NTEyMQ==", "bodyText": "Could shorten the code a bit by naming this column", "url": "https://github.com/trinodb/trino/pull/6479#discussion_r562985121", "createdAt": "2021-01-23T00:28:50Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/orc/OrcPageSourceFactory.java", "diffHunk": "@@ -426,6 +428,41 @@ else if (column.getBaseHiveColumnIndex() < fileColumns.size()) {\n         }\n     }\n \n+    /**\n+     * Recreate the list of fileColumns, updating the names of any whose names have changed in the\n+     * corresponding elements of the desiredColumns list.  NOTE: this renaming is only applied to\n+     * top-level columns, not nested columns.\n+     * @param fileColumns All OrcColumns nested in the root column of the table.\n+     * @param desiredColumns HiveColumnHandles for the metastore's table columns.\n+     * @return Return the fileColumns list with any OrcColumn corresponding to a desiredColumn renamed if\n+     * the names differ from those specified in the desiredColumns.\n+     */\n+    private static List<OrcColumn> ensureColumnNameConsistency(List<OrcColumn> fileColumns, List<HiveColumnHandle> desiredColumns)\n+    {\n+        int columnCount = fileColumns.size();\n+        ImmutableList.Builder<OrcColumn> builder = ImmutableList.builderWithExpectedSize(columnCount);\n+\n+        Map<Integer, HiveColumnHandle> desiredColumnsByNumber = desiredColumns.stream()\n+                .collect(toImmutableMap(HiveColumnHandle::getBaseHiveColumnIndex, identity()));\n+\n+        for (int index = 0; index < columnCount; index++) {\n+            OrcColumn orcColumn = fileColumns.get(index);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk5OTY0Ng==", "bodyText": "Shortened.", "url": "https://github.com/trinodb/trino/pull/6479#discussion_r562999646", "createdAt": "2021-01-23T01:51:17Z", "author": {"login": "djsstarburst"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/orc/OrcPageSourceFactory.java", "diffHunk": "@@ -426,6 +428,41 @@ else if (column.getBaseHiveColumnIndex() < fileColumns.size()) {\n         }\n     }\n \n+    /**\n+     * Recreate the list of fileColumns, updating the names of any whose names have changed in the\n+     * corresponding elements of the desiredColumns list.  NOTE: this renaming is only applied to\n+     * top-level columns, not nested columns.\n+     * @param fileColumns All OrcColumns nested in the root column of the table.\n+     * @param desiredColumns HiveColumnHandles for the metastore's table columns.\n+     * @return Return the fileColumns list with any OrcColumn corresponding to a desiredColumn renamed if\n+     * the names differ from those specified in the desiredColumns.\n+     */\n+    private static List<OrcColumn> ensureColumnNameConsistency(List<OrcColumn> fileColumns, List<HiveColumnHandle> desiredColumns)\n+    {\n+        int columnCount = fileColumns.size();\n+        ImmutableList.Builder<OrcColumn> builder = ImmutableList.builderWithExpectedSize(columnCount);\n+\n+        Map<Integer, HiveColumnHandle> desiredColumnsByNumber = desiredColumns.stream()\n+                .collect(toImmutableMap(HiveColumnHandle::getBaseHiveColumnIndex, identity()));\n+\n+        for (int index = 0; index < columnCount; index++) {\n+            OrcColumn orcColumn = fileColumns.get(index);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk4NTEyMQ=="}, "originalCommit": null, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NTMwNTI3OnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/test/java/io/trino/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QwMDozNDo1OVrOIY59iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QwMTo1MToxOVrOIY6xYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk4NjM3Ng==", "bodyText": "I don't think this setIdentity() call is needed. (it seems redundant in all the other tests)", "url": "https://github.com/trinodb/trino/pull/6479#discussion_r562986376", "createdAt": "2021-01-23T00:34:59Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/test/java/io/trino/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -7616,6 +7617,59 @@ public void testSelectFromPrestoViewReferencingHiveTableWithTimestamps()\n         assertThat(query(nanosSessions, \"SELECT ts FROM hive_timestamp_nanos.tpch.\" + prestoViewNameNanos)).matches(\"VALUES TIMESTAMP '1990-01-02 12:13:14.123000000'\");\n     }\n \n+    @Test(dataProvider = \"legalUseColumnNamesProvider\")\n+    public void testUseColumnNames(HiveStorageFormat format, boolean formatUseColumnNames)\n+    {\n+        String lcFormat = format.name().toLowerCase(Locale.ROOT);\n+        Session.SessionBuilder builder = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk5OTY1MQ==", "bodyText": "Removed.", "url": "https://github.com/trinodb/trino/pull/6479#discussion_r562999651", "createdAt": "2021-01-23T01:51:19Z", "author": {"login": "djsstarburst"}, "path": "plugin/trino-hive/src/test/java/io/trino/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -7616,6 +7617,59 @@ public void testSelectFromPrestoViewReferencingHiveTableWithTimestamps()\n         assertThat(query(nanosSessions, \"SELECT ts FROM hive_timestamp_nanos.tpch.\" + prestoViewNameNanos)).matches(\"VALUES TIMESTAMP '1990-01-02 12:13:14.123000000'\");\n     }\n \n+    @Test(dataProvider = \"legalUseColumnNamesProvider\")\n+    public void testUseColumnNames(HiveStorageFormat format, boolean formatUseColumnNames)\n+    {\n+        String lcFormat = format.name().toLowerCase(Locale.ROOT);\n+        Session.SessionBuilder builder = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk4NjM3Ng=="}, "originalCommit": null, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NTMwNjU0OnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/test/java/io/trino/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QwMDozNTozOVrOIY5-Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QwMTo1MToyMVrOIY6xaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk4NjU0Mw==", "bodyText": "It seems clearer to invert this, since a boolean with \"not\" creates a double negative: canSeeOldData", "url": "https://github.com/trinodb/trino/pull/6479#discussion_r562986543", "createdAt": "2021-01-23T00:35:39Z", "author": {"login": "electrum"}, "path": "plugin/trino-hive/src/test/java/io/trino/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -7616,6 +7617,59 @@ public void testSelectFromPrestoViewReferencingHiveTableWithTimestamps()\n         assertThat(query(nanosSessions, \"SELECT ts FROM hive_timestamp_nanos.tpch.\" + prestoViewNameNanos)).matches(\"VALUES TIMESTAMP '1990-01-02 12:13:14.123000000'\");\n     }\n \n+    @Test(dataProvider = \"legalUseColumnNamesProvider\")\n+    public void testUseColumnNames(HiveStorageFormat format, boolean formatUseColumnNames)\n+    {\n+        String lcFormat = format.name().toLowerCase(Locale.ROOT);\n+        Session.SessionBuilder builder = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build());\n+        if (format == HiveStorageFormat.ORC || format == HiveStorageFormat.PARQUET) {\n+            builder.setCatalogSessionProperty(catalog, lcFormat + \"_use_column_names\", String.valueOf(formatUseColumnNames));\n+        }\n+        Session admin = builder.build();\n+        String tableName = format(\"test_renames_%s_%s_%s\", lcFormat, formatUseColumnNames, randomTableSuffix());\n+        assertUpdate(admin, format(\"CREATE TABLE %s (id BIGINT, old_name VARCHAR, age INT, state VARCHAR) WITH (format = '%s', partitioned_by = ARRAY['state'])\", tableName, format));\n+        assertUpdate(admin, format(\"INSERT INTO %s VALUES(111, 'Katy', 57, 'CA')\", tableName), 1);\n+        assertQuery(admin, \"SELECT * FROM \" + tableName, \"VALUES(111, 'Katy', 57, 'CA')\");\n+\n+        assertUpdate(admin, format(\"ALTER TABLE %s RENAME COLUMN old_name TO new_name\", tableName));\n+\n+        boolean doesntSeeOldData = formatUseColumnNames || NAMED_COLUMN_ONLY_FORMATS.contains(format);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk5OTY1Nw==", "bodyText": "Inverted.", "url": "https://github.com/trinodb/trino/pull/6479#discussion_r562999657", "createdAt": "2021-01-23T01:51:21Z", "author": {"login": "djsstarburst"}, "path": "plugin/trino-hive/src/test/java/io/trino/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -7616,6 +7617,59 @@ public void testSelectFromPrestoViewReferencingHiveTableWithTimestamps()\n         assertThat(query(nanosSessions, \"SELECT ts FROM hive_timestamp_nanos.tpch.\" + prestoViewNameNanos)).matches(\"VALUES TIMESTAMP '1990-01-02 12:13:14.123000000'\");\n     }\n \n+    @Test(dataProvider = \"legalUseColumnNamesProvider\")\n+    public void testUseColumnNames(HiveStorageFormat format, boolean formatUseColumnNames)\n+    {\n+        String lcFormat = format.name().toLowerCase(Locale.ROOT);\n+        Session.SessionBuilder builder = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build());\n+        if (format == HiveStorageFormat.ORC || format == HiveStorageFormat.PARQUET) {\n+            builder.setCatalogSessionProperty(catalog, lcFormat + \"_use_column_names\", String.valueOf(formatUseColumnNames));\n+        }\n+        Session admin = builder.build();\n+        String tableName = format(\"test_renames_%s_%s_%s\", lcFormat, formatUseColumnNames, randomTableSuffix());\n+        assertUpdate(admin, format(\"CREATE TABLE %s (id BIGINT, old_name VARCHAR, age INT, state VARCHAR) WITH (format = '%s', partitioned_by = ARRAY['state'])\", tableName, format));\n+        assertUpdate(admin, format(\"INSERT INTO %s VALUES(111, 'Katy', 57, 'CA')\", tableName), 1);\n+        assertQuery(admin, \"SELECT * FROM \" + tableName, \"VALUES(111, 'Katy', 57, 'CA')\");\n+\n+        assertUpdate(admin, format(\"ALTER TABLE %s RENAME COLUMN old_name TO new_name\", tableName));\n+\n+        boolean doesntSeeOldData = formatUseColumnNames || NAMED_COLUMN_ONLY_FORMATS.contains(format);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk4NjU0Mw=="}, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NjcxODAzOnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/test/java/io/trino/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxNjozOTo0NFrOIcAiqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxNzo1MTozMlrOIcDrYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIzOTkxNA==", "bodyText": "Avoid abbreviations in variable names", "url": "https://github.com/trinodb/trino/pull/6479#discussion_r566239914", "createdAt": "2021-01-28T16:39:44Z", "author": {"login": "martint"}, "path": "plugin/trino-hive/src/test/java/io/trino/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -7616,6 +7617,56 @@ public void testSelectFromPrestoViewReferencingHiveTableWithTimestamps()\n         assertThat(query(nanosSessions, \"SELECT ts FROM hive_timestamp_nanos.tpch.\" + prestoViewNameNanos)).matches(\"VALUES TIMESTAMP '1990-01-02 12:13:14.123000000'\");\n     }\n \n+    @Test(dataProvider = \"legalUseColumnNamesProvider\")\n+    public void testUseColumnNames(HiveStorageFormat format, boolean formatUseColumnNames)\n+    {\n+        String lcFormat = format.name().toLowerCase(Locale.ROOT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjI5MTI5Nw==", "bodyText": "Changed to lowerCaseFormat.", "url": "https://github.com/trinodb/trino/pull/6479#discussion_r566291297", "createdAt": "2021-01-28T17:51:32Z", "author": {"login": "djsstarburst"}, "path": "plugin/trino-hive/src/test/java/io/trino/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -7616,6 +7617,56 @@ public void testSelectFromPrestoViewReferencingHiveTableWithTimestamps()\n         assertThat(query(nanosSessions, \"SELECT ts FROM hive_timestamp_nanos.tpch.\" + prestoViewNameNanos)).matches(\"VALUES TIMESTAMP '1990-01-02 12:13:14.123000000'\");\n     }\n \n+    @Test(dataProvider = \"legalUseColumnNamesProvider\")\n+    public void testUseColumnNames(HiveStorageFormat format, boolean formatUseColumnNames)\n+    {\n+        String lcFormat = format.name().toLowerCase(Locale.ROOT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIzOTkxNA=="}, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc2ODUzNTQwOnYy", "diffSide": "RIGHT", "path": "testing/trino-product-tests/src/main/java/io/trino/tests/hive/TestHiveTransactionalTable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xOFQwODozMzozM1rOI5AYGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xOFQwODozMzozM1rOI5AYGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjY0NTkxMg==", "bodyText": "These tests have nothing to do with transactional tables, so please move them out from TestHiveTransactionalTable", "url": "https://github.com/trinodb/trino/pull/6479#discussion_r596645912", "createdAt": "2021-03-18T08:33:33Z", "author": {"login": "findepi"}, "path": "testing/trino-product-tests/src/main/java/io/trino/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -779,6 +779,169 @@ public void testInsertOnlyMultipleWriters(boolean bucketed, HiveOrPresto inserte\n         });\n     }\n \n+    @Test(groups = HIVE_TRANSACTIONAL, dataProvider = \"transactionModeProvider\")\n+    public void testColumnRenamesOrcPartitioned(boolean transactional)\n+    {\n+        withTemporaryTable(\"test_column_renames_partitioned\", transactional, false, NONE, tableName -> {\n+            onPresto().executeQuery(format(\"CREATE TABLE %s (id BIGINT, old_name VARCHAR, age INT, old_state VARCHAR)\" +\n+                    \" WITH (format = 'ORC', transactional = %s, partitioned_by = ARRAY['old_state'])\", tableName, transactional));\n+            testOrcColumnRenames(tableName);\n+\n+            log.info(\"About to rename partition column old_state to new_state\");\n+            assertThat(() -> onPresto().executeQuery(format(\"ALTER TABLE %s RENAME COLUMN old_state TO new_state\", tableName)))\n+                    .failsWithMessage(\"Renaming partition columns is not supported\");\n+        });\n+    }\n+\n+    @Test(groups = HIVE_TRANSACTIONAL, dataProvider = \"transactionModeProvider\")\n+    public void testColumnRenamesOrcNotPartitioned(boolean transactional)\n+    {\n+        ensureSchemaEvolutionSupported();\n+        withTemporaryTable(\"test_orc_column_renames_not_partitioned\", transactional, false, NONE, tableName -> {\n+            onPresto().executeQuery(format(\"CREATE TABLE %s (id BIGINT, old_name VARCHAR, age INT, old_state VARCHAR)\" +\n+                    \" WITH (format = 'ORC', transactional = %s)\", tableName, transactional));\n+            testOrcColumnRenames(tableName);\n+        });\n+    }\n+\n+    private void testOrcColumnRenames(String tableName)\n+    {\n+        onPresto().executeQuery(format(\"INSERT INTO %s VALUES (111, 'Katy', 57, 'CA'), (222, 'Joe', 72, 'WA')\", tableName));\n+        verifySelectForPrestoAndHive(\"SELECT * FROM \" + tableName, \"true\", row(111, \"Katy\", 57, \"CA\"), row(222, \"Joe\", 72, \"WA\"));\n+\n+        onPresto().executeQuery(format(\"ALTER TABLE %s RENAME COLUMN old_name TO new_name\", tableName));\n+        log.info(\"This shows that Presto and Hive can still query old data after a single rename\");\n+        verifySelectForPrestoAndHive(\"SELECT age FROM \" + tableName, \"new_name = 'Katy'\", row(57));\n+\n+        onPresto().executeQuery(format(\"INSERT INTO %s VALUES(333, 'Joan', 23, 'OR')\", tableName));\n+        verifySelectForPrestoAndHive(\"SELECT age FROM \" + tableName, \"new_name != 'Joe'\", row(57), row(23));\n+\n+        onPresto().executeQuery(format(\"ALTER TABLE %s RENAME COLUMN new_name TO newer_name\", tableName));\n+        log.info(\"This shows that Presto and Hive can still query old data after a double rename\");\n+        verifySelectForPrestoAndHive(\"SELECT age FROM \" + tableName, \"newer_name = 'Katy'\", row(57));\n+\n+        onPresto().executeQuery(format(\"ALTER TABLE %s RENAME COLUMN newer_name TO old_name\", tableName));\n+        log.info(\"This shows that Presto and Hive can still query old data after a rename back to the original name\");\n+        verifySelectForPrestoAndHive(\"SELECT age FROM \" + tableName, \"old_name = 'Katy'\", row(57));\n+        verifySelectForPrestoAndHive(\"SELECT * FROM \" + tableName, \"true\", row(111, \"Katy\", 57, \"CA\"), row(222, \"Joe\", 72, \"WA\"), row(333, \"Joan\", 23, \"OR\"));\n+    }\n+\n+    @Test(groups = HIVE_TRANSACTIONAL, dataProvider = \"transactionModeProvider\")\n+    public void testOrcColumnSwap(boolean transactional)\n+    {\n+        withTemporaryTable(\"test_orc_column_renames\", transactional, false, NONE, tableName -> {\n+            onPresto().executeQuery(format(\"CREATE TABLE %s (name VARCHAR, state VARCHAR) WITH (format = 'ORC', transactional = %s)\", tableName, transactional));\n+            onPresto().executeQuery(format(\"INSERT INTO %s VALUES ('Katy', 'CA'), ('Joe', 'WA')\", tableName));\n+            verifySelectForPrestoAndHive(\"SELECT * FROM \" + tableName, \"true\", row(\"Katy\", \"CA\"), row(\"Joe\", \"WA\"));\n+\n+            onPresto().executeQuery(format(\"ALTER TABLE %s RENAME COLUMN name TO new_name\", tableName));\n+            onPresto().executeQuery(format(\"ALTER TABLE %s RENAME COLUMN state TO name\", tableName));\n+            onPresto().executeQuery(format(\"ALTER TABLE %s RENAME COLUMN new_name TO state\", tableName));\n+            log.info(\"This shows that Presto and Hive can still query old data, but because of the renames, columns are swapped!\");\n+            verifySelectForPrestoAndHive(\"SELECT state, name FROM \" + tableName, \"TRUE\", row(\"Katy\", \"CA\"), row(\"Joe\", \"WA\"));\n+        });\n+    }\n+\n+    @Test(groups = HIVE_TRANSACTIONAL)\n+    public void testBehaviorOnParquetColumnRenames()\n+    {\n+        ensureSchemaEvolutionSupported();\n+        withTemporaryTable(\"test_parquet_column_renames\", false, false, NONE, tableName -> {\n+            onPresto().executeQuery(format(\"CREATE TABLE %s (id BIGINT, old_name VARCHAR, age INT, old_state VARCHAR) WITH (format = 'PARQUET', transactional = false)\", tableName));\n+            onPresto().executeQuery(format(\"INSERT INTO %s VALUES (111, 'Katy', 57, 'CA'), (222, 'Joe', 72, 'WA')\", tableName));\n+            verifySelectForPrestoAndHive(\"SELECT * FROM \" + tableName, \"true\", row(111, \"Katy\", 57, \"CA\"), row(222, \"Joe\", 72, \"WA\"));\n+\n+            onPresto().executeQuery(format(\"ALTER TABLE %s RENAME COLUMN old_name TO new_name\", tableName));\n+\n+            onPresto().executeQuery(format(\"INSERT INTO %s VALUES (333, 'Fineas', 31, 'OR')\", tableName));\n+\n+            log.info(\"This shows that Hive and Trino do not see old data after a rename\");\n+            verifySelectForPrestoAndHive(\"SELECT * FROM \" + tableName, \"TRUE\", row(111, null, 57, \"CA\"), row(222, null, 72, \"WA\"), row(333, \"Fineas\", 31, \"OR\"));\n+\n+            onPresto().executeQuery(format(\"ALTER TABLE %s RENAME COLUMN new_name TO old_name\", tableName));\n+            onPresto().executeQuery(format(\"INSERT INTO %s VALUES (444, 'Gladys', 47, 'WA')\", tableName));\n+            log.info(\"This shows that Presto and Hive both see data in old data files after renaming back to the original column name\");\n+            verifySelectForPrestoAndHive(\"SELECT * FROM \" + tableName, \"TRUE\", row(111, \"Katy\", 57, \"CA\"), row(222, \"Joe\", 72, \"WA\"), row(333, null, 31, \"OR\"), row(444, \"Gladys\", 47, \"WA\"));\n+        });\n+    }\n+\n+    @Test(groups = HIVE_TRANSACTIONAL, dataProvider = \"transactionModeProvider\")\n+    public void testOrcColumnDropAdd(boolean transactional)\n+    {\n+        ensureSchemaEvolutionSupported();\n+        withTemporaryTable(\"test_orc_add_drop\", transactional, false, NONE, tableName -> {\n+            onPresto().executeQuery(format(\"CREATE TABLE %s (id BIGINT, old_name VARCHAR, age INT, old_state VARCHAR) WITH (transactional = %s)\", tableName, transactional));\n+            onPresto().executeQuery(format(\"INSERT INTO %s VALUES (111, 'Katy', 57, 'CA'), (222, 'Joe', 72, 'WA')\", tableName));\n+            verifySelectForPrestoAndHive(\"SELECT * FROM \" + tableName, \"true\", row(111, \"Katy\", 57, \"CA\"), row(222, \"Joe\", 72, \"WA\"));\n+\n+            onPresto().executeQuery(format(\"ALTER TABLE %s DROP COLUMN old_state\", tableName));\n+            log.info(\"This shows that neither Presto nor Hive see the old data after a column is dropped\");\n+            verifySelectForPrestoAndHive(\"SELECT * FROM \" + tableName, \"true\", row(111, \"Katy\", 57), row(222, \"Joe\", 72));\n+\n+            onPresto().executeQuery(format(\"INSERT INTO %s VALUES (333, 'Kelly', 45)\", tableName));\n+            verifySelectForPrestoAndHive(\"SELECT * FROM \" + tableName, \"true\", row(111, \"Katy\", 57), row(222, \"Joe\", 72), row(333, \"Kelly\", 45));\n+\n+            onPresto().executeQuery(format(\"ALTER TABLE %s ADD COLUMN new_state VARCHAR\", tableName));\n+            log.info(\"This shows that for ORC, Presto and Hive both see data inserted into a dropped column when a column of the same type but different name is added\");\n+            verifySelectForPrestoAndHive(\"SELECT * FROM \" + tableName, \"true\", row(111, \"Katy\", 57, \"CA\"), row(222, \"Joe\", 72, \"WA\"), row(333, \"Kelly\", 45, null));\n+        });\n+    }\n+\n+    @Test(groups = HIVE_TRANSACTIONAL, dataProvider = \"transactionModeProvider\")\n+    public void testOrcColumnTypeChange(boolean transactional)\n+    {\n+        ensureSchemaEvolutionSupported();\n+        withTemporaryTable(\"test_orc_column_type_change\", transactional, false, NONE, tableName -> {\n+            onPresto().executeQuery(format(\"CREATE TABLE %s (id INT, old_name VARCHAR, age TINYINT, old_state VARCHAR) WITH (transactional = %s)\", tableName, transactional));\n+            onPresto().executeQuery(format(\"INSERT INTO %s VALUES (111, 'Katy', 57, 'CA'), (222, 'Joe', 72, 'WA')\", tableName));\n+            verifySelectForPrestoAndHive(\"SELECT * FROM \" + tableName, \"true\", row(111, \"Katy\", 57, \"CA\"), row(222, \"Joe\", 72, \"WA\"));\n+\n+            onHive().executeQuery(format(\"ALTER TABLE %s CHANGE COLUMN age age INT\", tableName));\n+            log.info(\"This shows that Hive see the old data after a column is widened\");\n+            assertThat(onHive().executeQuery(\"SELECT * FROM \" + tableName))\n+                    .containsOnly(row(111, \"Katy\", 57, \"CA\"), row(222, \"Joe\", 72, \"WA\"));\n+            log.info(\"This shows that Trino gets an exception trying to widen the type\");\n+            assertThat(() -> onPresto().executeQuery(\"SELECT * FROM \" + tableName))\n+                    .failsWithMessageMatching(\".*Malformed ORC file. Cannot read SQL type 'integer' from ORC stream '.*.age' of type BYTE with attributes.*\");\n+        });\n+    }\n+\n+    @Test(groups = HIVE_TRANSACTIONAL)\n+    public void testParquetColumnDropAdd()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fda8f28e44504fd0713f805ee893be4b56a0df5"}, "originalPosition": 132}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4317, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}