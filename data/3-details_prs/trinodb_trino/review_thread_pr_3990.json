{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNTY0MDY2", "number": 3990, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMjo0NDo1MVrOEFwxBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjowMjowMlrOEGAbKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDc3MzE2OnYy", "diffSide": "LEFT", "path": "presto-main/src/test/java/io/prestosql/execution/resourcegroups/TestResourceGroups.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMjo0NDo1MVrOGkJTrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMjo0NDo1MVrOGkJTrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU1NDQxNQ==", "bodyText": "Note that these are not needed. query1a.complete() will automatically trigger finding and running the next query.", "url": "https://github.com/trinodb/trino/pull/3990#discussion_r440554415", "createdAt": "2020-06-16T02:44:51Z", "author": {"login": "lhofhansl"}, "path": "presto-main/src/test/java/io/prestosql/execution/resourcegroups/TestResourceGroups.java", "diffHunk": "@@ -113,29 +112,26 @@ public void testFairEligibility()\n         assertEquals(query3a.getState(), QUEUED);\n \n         query1a.complete();\n-        root.updateGroupsAndProcessQueuedQueries();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDc3NDg0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/resourcegroups/TestResourceGroups.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMjo0NTo0MlrOGkJUxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo1ODo1MlrOGkiWjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU1NDY5NA==", "bodyText": "No op to allow the test fine-grained control when to trigger the next query.", "url": "https://github.com/trinodb/trino/pull/3990#discussion_r440554694", "createdAt": "2020-06-16T02:45:42Z", "author": {"login": "lhofhansl"}, "path": "presto-main/src/test/java/io/prestosql/execution/resourcegroups/TestResourceGroups.java", "diffHunk": "@@ -618,7 +609,13 @@ public void testRecursiveCpuUsageUpdate()\n     @Test(timeOut = 10_000)\n     public void testMemoryUpdateRecursively()\n     {\n-        RootInternalResourceGroup root = new RootInternalResourceGroup(\"root\", (group, export) -> {}, directExecutor());\n+        InternalResourceGroup root = new InternalResourceGroup(\"root\", (group, export) -> {}, directExecutor()) {\n+            @Override\n+            protected void triggerProcessQueuedQueries()\n+            {\n+                // NO OP", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2NDc1MA==", "bodyText": "This should be in a comment in the code, not just in the PR.", "url": "https://github.com/trinodb/trino/pull/3990#discussion_r440964750", "createdAt": "2020-06-16T15:58:52Z", "author": {"login": "raghavsethi"}, "path": "presto-main/src/test/java/io/prestosql/execution/resourcegroups/TestResourceGroups.java", "diffHunk": "@@ -618,7 +609,13 @@ public void testRecursiveCpuUsageUpdate()\n     @Test(timeOut = 10_000)\n     public void testMemoryUpdateRecursively()\n     {\n-        RootInternalResourceGroup root = new RootInternalResourceGroup(\"root\", (group, export) -> {}, directExecutor());\n+        InternalResourceGroup root = new InternalResourceGroup(\"root\", (group, export) -> {}, directExecutor()) {\n+            @Override\n+            protected void triggerProcessQueuedQueries()\n+            {\n+                // NO OP", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU1NDY5NA=="}, "originalCommit": null, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzMyMDc2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/resourcegroups/InternalResourceGroupManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo1Nzo1MlrOGkiTxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo1Nzo1MlrOGkiTxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2NDAzNw==", "bodyText": "I think initial time here could still be small (1 seems fine). Might improve server time-to-first-query and has no cost.", "url": "https://github.com/trinodb/trino/pull/3990#discussion_r440964037", "createdAt": "2020-06-16T15:57:52Z", "author": {"login": "raghavsethi"}, "path": "presto-main/src/main/java/io/prestosql/execution/resourcegroups/InternalResourceGroupManager.java", "diffHunk": "@@ -183,7 +182,7 @@ public void destroy()\n     public void start()\n     {\n         if (started.compareAndSet(false, true)) {\n-            refreshExecutor.scheduleWithFixedDelay(this::refreshAndStartQueries, 1, 1, TimeUnit.MILLISECONDS);\n+            refreshExecutor.scheduleWithFixedDelay(this::refreshAndStartQueries, 100, 100, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzMyNTY1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/resourcegroups/TestResourceGroups.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo1OTowNFrOGkiXCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo1OTowNFrOGkiXCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2NDg3NQ==", "bodyText": "Same for the others.", "url": "https://github.com/trinodb/trino/pull/3990#discussion_r440964875", "createdAt": "2020-06-16T15:59:04Z", "author": {"login": "raghavsethi"}, "path": "presto-main/src/test/java/io/prestosql/execution/resourcegroups/TestResourceGroups.java", "diffHunk": "@@ -756,7 +753,13 @@ public void testPriorityScheduling()\n     @Test(timeOut = 10_000)\n     public void testWeightedScheduling()\n     {\n-        RootInternalResourceGroup root = new RootInternalResourceGroup(\"root\", (group, export) -> {}, directExecutor());\n+        InternalResourceGroup root = new InternalResourceGroup(\"root\", (group, export) -> {}, directExecutor()) {\n+            @Override\n+            protected void triggerProcessQueuedQueries()\n+            {\n+                // NO OP", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 220}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzMzMjgzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/resourcegroups/InternalResourceGroup.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjowMDozOFrOGkibrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjowMDozOFrOGkibrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2NjA2Mg==", "bodyText": "Is this only for testing? If so, consider making this public, marking @VisibleForTesting, and removing this comment.", "url": "https://github.com/trinodb/trino/pull/3990#discussion_r440966062", "createdAt": "2020-06-16T16:00:38Z", "author": {"login": "raghavsethi"}, "path": "presto-main/src/main/java/io/prestosql/execution/resourcegroups/InternalResourceGroup.java", "diffHunk": "@@ -669,6 +674,32 @@ private void startInBackground(ManagedQueryExecution query)\n         }\n     }\n \n+    public void updateGroupsAndProcessQueuedQueries()\n+    {\n+        synchronized (root) {\n+            updateResourceUsageAndGetDelta();\n+\n+            while (internalStartNext()) {\n+                // start all the queries we can\n+            }\n+        }\n+    }\n+\n+    public void generateCpuQuota(long elapsedSeconds)\n+    {\n+        synchronized (root) {\n+            if (elapsedSeconds > 0) {\n+                internalGenerateCpuQuota(elapsedSeconds);\n+            }\n+        }\n+    }\n+\n+    // indirection for testing\n+    protected void triggerProcessQueuedQueries()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzMzODY2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/resourcegroups/InternalResourceGroup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjowMjowMlrOGkifXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxOTozMzo1MlrOGkqQCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2NzAwNA==", "bodyText": "Minor nit:\n// start as many queries as possible\nwhile (internalStartNext());", "url": "https://github.com/trinodb/trino/pull/3990#discussion_r440967004", "createdAt": "2020-06-16T16:02:02Z", "author": {"login": "raghavsethi"}, "path": "presto-main/src/main/java/io/prestosql/execution/resourcegroups/InternalResourceGroup.java", "diffHunk": "@@ -669,6 +674,32 @@ private void startInBackground(ManagedQueryExecution query)\n         }\n     }\n \n+    public void updateGroupsAndProcessQueuedQueries()\n+    {\n+        synchronized (root) {\n+            updateResourceUsageAndGetDelta();\n+\n+            while (internalStartNext()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA5NDE1Mg==", "bodyText": "Agreed. But checkStyle won't let me. :)\nI also copied it that way from RootInternalResourceGroup.", "url": "https://github.com/trinodb/trino/pull/3990#discussion_r441094152", "createdAt": "2020-06-16T19:33:52Z", "author": {"login": "lhofhansl"}, "path": "presto-main/src/main/java/io/prestosql/execution/resourcegroups/InternalResourceGroup.java", "diffHunk": "@@ -669,6 +674,32 @@ private void startInBackground(ManagedQueryExecution query)\n         }\n     }\n \n+    public void updateGroupsAndProcessQueuedQueries()\n+    {\n+        synchronized (root) {\n+            updateResourceUsageAndGetDelta();\n+\n+            while (internalStartNext()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2NzAwNA=="}, "originalCommit": null, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4281, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}