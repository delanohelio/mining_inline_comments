{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1MTg4MjQ5", "number": 6040, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQyMDo1OTo1NFrOE75M0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMDoyNTo1OFrOE_y67g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMjM4NjExOnYy", "diffSide": "LEFT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/MapElementAtFunction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQyMDo1OTo1NFrOH3xWSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQyMTowNToyN1rOH3xYWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI0MjI0OQ==", "bodyText": "At first sight, it looks not related to the commit?", "url": "https://github.com/trinodb/trino/pull/6040#discussion_r528242249", "createdAt": "2020-11-21T20:59:54Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/MapElementAtFunction.java", "diffHunk": "@@ -132,7 +129,7 @@ public static Object elementAt(MethodHandle keyEqualsMethod, Type keyType, Type\n     }\n \n     @UsedByGeneratedCode\n-    public static Object elementAt(MethodHandle keyEqualsMethod, Type keyType, Type valueType, Block map, double key)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI0Mjc3Ng==", "bodyText": "Doesn't look like it... I'll hoist this to another commit", "url": "https://github.com/trinodb/trino/pull/6040#discussion_r528242776", "createdAt": "2020-11-21T21:05:27Z", "author": {"login": "dain"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/MapElementAtFunction.java", "diffHunk": "@@ -132,7 +129,7 @@ public static Object elementAt(MethodHandle keyEqualsMethod, Type keyType, Type\n     }\n \n     @UsedByGeneratedCode\n-    public static Object elementAt(MethodHandle keyEqualsMethod, Type keyType, Type valueType, Block map, double key)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI0MjI0OQ=="}, "originalCommit": null, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMjM4Njk3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/TryCastFunction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQyMTowMDo0MVrOH3xWpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQyMTowMzo0NFrOH3xXqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI0MjM0Mw==", "bodyText": "why no longer nullable?", "url": "https://github.com/trinodb/trino/pull/6040#discussion_r528242343", "createdAt": "2020-11-21T21:00:41Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/TryCastFunction.java", "diffHunk": "@@ -76,20 +75,20 @@ public ScalarFunctionImplementation specialize(FunctionBinding functionBinding,\n         Type fromType = functionBinding.getTypeVariable(\"F\");\n         Type toType = functionBinding.getTypeVariable(\"T\");\n \n-        Class<?> returnType = Primitives.wrap(toType.getJavaType());\n+        Class<?> returnType = wrap(toType.getJavaType());\n \n         // the resulting method needs to return a boxed type\n-        MethodHandle coercion = functionDependencies.getCastInvoker(fromType, toType, Optional.empty()).getMethodHandle();\n+        InvocationConvention invocationConvention = new InvocationConvention(ImmutableList.of(NEVER_NULL), NULLABLE_RETURN, true, false);\n+        MethodHandle coercion = functionDependencies.getCastInvoker(fromType, toType, invocationConvention).getMethodHandle();\n         coercion = coercion.asType(methodType(returnType, coercion.type()));\n \n         MethodHandle exceptionHandler = dropArguments(constant(returnType, null), 0, RuntimeException.class);\n         MethodHandle tryCastHandle = catchException(coercion, RuntimeException.class, exceptionHandler);\n \n-        boolean nullableArgument = functionDependencies.getCastMetadata(fromType, toType).getArgumentDefinitions().get(0).isNullable();\n         return new ChoicesScalarFunctionImplementation(\n                 functionBinding,\n                 NULLABLE_RETURN,\n-                ImmutableList.of(nullableArgument ? BOXED_NULLABLE : NEVER_NULL),\n+                ImmutableList.of(NEVER_NULL),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI0MjYwMg==", "bodyText": "It doesn't need to be nullable.  If the argument is null, the engine will automatically return null for you.", "url": "https://github.com/trinodb/trino/pull/6040#discussion_r528242602", "createdAt": "2020-11-21T21:03:44Z", "author": {"login": "dain"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/TryCastFunction.java", "diffHunk": "@@ -76,20 +75,20 @@ public ScalarFunctionImplementation specialize(FunctionBinding functionBinding,\n         Type fromType = functionBinding.getTypeVariable(\"F\");\n         Type toType = functionBinding.getTypeVariable(\"T\");\n \n-        Class<?> returnType = Primitives.wrap(toType.getJavaType());\n+        Class<?> returnType = wrap(toType.getJavaType());\n \n         // the resulting method needs to return a boxed type\n-        MethodHandle coercion = functionDependencies.getCastInvoker(fromType, toType, Optional.empty()).getMethodHandle();\n+        InvocationConvention invocationConvention = new InvocationConvention(ImmutableList.of(NEVER_NULL), NULLABLE_RETURN, true, false);\n+        MethodHandle coercion = functionDependencies.getCastInvoker(fromType, toType, invocationConvention).getMethodHandle();\n         coercion = coercion.asType(methodType(returnType, coercion.type()));\n \n         MethodHandle exceptionHandler = dropArguments(constant(returnType, null), 0, RuntimeException.class);\n         MethodHandle tryCastHandle = catchException(coercion, RuntimeException.class, exceptionHandler);\n \n-        boolean nullableArgument = functionDependencies.getCastMetadata(fromType, toType).getArgumentDefinitions().get(0).isNullable();\n         return new ChoicesScalarFunctionImplementation(\n                 functionBinding,\n                 NULLABLE_RETURN,\n-                ImmutableList.of(nullableArgument ? BOXED_NULLABLE : NEVER_NULL),\n+                ImmutableList.of(NEVER_NULL),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI0MjM0Mw=="}, "originalCommit": null, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MzMwMDMwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/ExpressionInterpreter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMDoyNTo1OFrOH9syDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMjozMjo0M1rOH9w6hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ1ODg5NA==", "bodyText": "Why are we getting an EQUALs operator that allows nullable return? That doesn't seem expected for equals as an operator?", "url": "https://github.com/trinodb/trino/pull/6040#discussion_r534458894", "createdAt": "2020-12-02T20:25:58Z", "author": {"login": "erichwang"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/ExpressionInterpreter.java", "diffHunk": "@@ -581,8 +586,8 @@ protected Object visitInPredicate(InPredicate node, Object context)\n                     set = FastutilSetHelper.toFastutilHashSet(\n                             objectSet,\n                             type,\n-                            metadata.getScalarFunctionInvoker(metadata.resolveOperator(HASH_CODE, ImmutableList.of(type)), Optional.empty()).getMethodHandle(),\n-                            metadata.getScalarFunctionInvoker(metadata.resolveOperator(EQUAL, ImmutableList.of(type, type)), Optional.empty()).getMethodHandle());\n+                            metadata.getScalarFunctionInvoker(metadata.resolveOperator(HASH_CODE, ImmutableList.of(type)), simpleConvention(FAIL_ON_NULL, NEVER_NULL)).getMethodHandle(),\n+                            metadata.getScalarFunctionInvoker(metadata.resolveOperator(EQUAL, ImmutableList.of(type, type)), simpleConvention(NULLABLE_RETURN, NEVER_NULL, NEVER_NULL)).getMethodHandle());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b00e6309f89f2499a4c45ab035a8f3b302c70f6e"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ5MzQzNg==", "bodyText": "i guess ARRAY[NULL] = ARRAY[1] should return NULL", "url": "https://github.com/trinodb/trino/pull/6040#discussion_r534493436", "createdAt": "2020-12-02T21:29:18Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/ExpressionInterpreter.java", "diffHunk": "@@ -581,8 +586,8 @@ protected Object visitInPredicate(InPredicate node, Object context)\n                     set = FastutilSetHelper.toFastutilHashSet(\n                             objectSet,\n                             type,\n-                            metadata.getScalarFunctionInvoker(metadata.resolveOperator(HASH_CODE, ImmutableList.of(type)), Optional.empty()).getMethodHandle(),\n-                            metadata.getScalarFunctionInvoker(metadata.resolveOperator(EQUAL, ImmutableList.of(type, type)), Optional.empty()).getMethodHandle());\n+                            metadata.getScalarFunctionInvoker(metadata.resolveOperator(HASH_CODE, ImmutableList.of(type)), simpleConvention(FAIL_ON_NULL, NEVER_NULL)).getMethodHandle(),\n+                            metadata.getScalarFunctionInvoker(metadata.resolveOperator(EQUAL, ImmutableList.of(type, type)), simpleConvention(NULLABLE_RETURN, NEVER_NULL, NEVER_NULL)).getMethodHandle());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ1ODg5NA=="}, "originalCommit": {"oid": "b00e6309f89f2499a4c45ab035a8f3b302c70f6e"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUyNjU5OQ==", "bodyText": "Yep that is why", "url": "https://github.com/trinodb/trino/pull/6040#discussion_r534526599", "createdAt": "2020-12-02T22:32:43Z", "author": {"login": "dain"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/ExpressionInterpreter.java", "diffHunk": "@@ -581,8 +586,8 @@ protected Object visitInPredicate(InPredicate node, Object context)\n                     set = FastutilSetHelper.toFastutilHashSet(\n                             objectSet,\n                             type,\n-                            metadata.getScalarFunctionInvoker(metadata.resolveOperator(HASH_CODE, ImmutableList.of(type)), Optional.empty()).getMethodHandle(),\n-                            metadata.getScalarFunctionInvoker(metadata.resolveOperator(EQUAL, ImmutableList.of(type, type)), Optional.empty()).getMethodHandle());\n+                            metadata.getScalarFunctionInvoker(metadata.resolveOperator(HASH_CODE, ImmutableList.of(type)), simpleConvention(FAIL_ON_NULL, NEVER_NULL)).getMethodHandle(),\n+                            metadata.getScalarFunctionInvoker(metadata.resolveOperator(EQUAL, ImmutableList.of(type, type)), simpleConvention(NULLABLE_RETURN, NEVER_NULL, NEVER_NULL)).getMethodHandle());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ1ODg5NA=="}, "originalCommit": {"oid": "b00e6309f89f2499a4c45ab035a8f3b302c70f6e"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4588, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}