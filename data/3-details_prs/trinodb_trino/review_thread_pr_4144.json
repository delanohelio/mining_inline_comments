{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3OTY5Njcw", "number": 4144, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMTo0NDowNVrOEHvXNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwNDoyMDozMFrOEJUFeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTUxNDc2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/LogicalPlanner.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMTo0NDowNVrOGnSDNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTowMzo0N1rOGofRcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg0MzM4MQ==", "bodyText": "plan.getFieldMappings() is guaranteed to match the order of columns in plan.getScope().getRelationType() (i.e., the output \"shape\" of the query).\nThe planner is not the right place to match ColumnMetadata to fields, as there is no correspondence between those fields and the order in which the fields appear in the plan.\nFor instance, given a table t (a BIGINT, b BIGINT), the following query will see the fields in a different order: INSERT INTO t(b, a) VALUES (1, 10)\nThis should be handled during analysis. The analyzer should record which fields ordinals are supposed to be not null. Take a look at Analysis.JoinUsingAnalysis and callers for an example of how you might record that.", "url": "https://github.com/trinodb/trino/pull/4144#discussion_r443843381", "createdAt": "2020-06-22T21:44:05Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LogicalPlanner.java", "diffHunk": "@@ -448,6 +453,18 @@ else if (isUsePreferredWritePartitioning(session)) {\n             }\n         }\n \n+        // TODO: Is this too fragile?  Other places we depend on the correspondence between order\n+        //  of non-hidden columns and order of symbols, but it feels a little grotty.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg3NDQ4Nw==", "bodyText": "Ok, I'll look there.", "url": "https://github.com/trinodb/trino/pull/4144#discussion_r443874487", "createdAt": "2020-06-22T23:13:51Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LogicalPlanner.java", "diffHunk": "@@ -448,6 +453,18 @@ else if (isUsePreferredWritePartitioning(session)) {\n             }\n         }\n \n+        // TODO: Is this too fragile?  Other places we depend on the correspondence between order\n+        //  of non-hidden columns and order of symbols, but it feels a little grotty.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg0MzM4MQ=="}, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk1NTIyMQ==", "bodyText": "@martint The two callers of this method in this class fetch the columns names from table metadata. Are they wrong as well?", "url": "https://github.com/trinodb/trino/pull/4144#discussion_r443955221", "createdAt": "2020-06-23T04:32:26Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LogicalPlanner.java", "diffHunk": "@@ -448,6 +453,18 @@ else if (isUsePreferredWritePartitioning(session)) {\n             }\n         }\n \n+        // TODO: Is this too fragile?  Other places we depend on the correspondence between order\n+        //  of non-hidden columns and order of symbols, but it feels a little grotty.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg0MzM4MQ=="}, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk3MzA5MA==", "bodyText": "For CREATE TABLE AS ... it kind of works out because the metadata is derived from the CREATE TABLE statement. For INSERT INTO, it works because it creates a projection to match the layout of the table metadata. Unfortunately, it relies on projectNode.getOutputSymbols(), which is not guaranteed to come out in the desired order -- it just happens to work today.", "url": "https://github.com/trinodb/trino/pull/4144#discussion_r443973090", "createdAt": "2020-06-23T05:38:09Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LogicalPlanner.java", "diffHunk": "@@ -448,6 +453,18 @@ else if (isUsePreferredWritePartitioning(session)) {\n             }\n         }\n \n+        // TODO: Is this too fragile?  Other places we depend on the correspondence between order\n+        //  of non-hidden columns and order of symbols, but it feels a little grotty.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg0MzM4MQ=="}, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEwODU5NA==", "bodyText": "@martint, I believe I've addressed your concern in the latest force push of the commit.  The code no longer expects channel order to match column order, and I added a unit test that exercises your INSERT INTO t(b, a) example", "url": "https://github.com/trinodb/trino/pull/4144#discussion_r445108594", "createdAt": "2020-06-24T19:03:47Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LogicalPlanner.java", "diffHunk": "@@ -448,6 +453,18 @@ else if (isUsePreferredWritePartitioning(session)) {\n             }\n         }\n \n+        // TODO: Is this too fragile?  Other places we depend on the correspondence between order\n+        //  of non-hidden columns and order of symbols, but it feels a little grotty.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg0MzM4MQ=="}, "originalCommit": null, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjE5NDc4OnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNDowNzoxOFrOGnYhgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTowNDowM1rOGofR_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0OTQ0Mw==", "bodyText": "For SQL formatting, add spaces before opening parenthesis: VALUES (2)", "url": "https://github.com/trinodb/trino/pull/4144#discussion_r443949443", "createdAt": "2020-06-23T04:07:18Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -324,6 +324,16 @@ public void testSchemaEvolution()\n         testWithAllFileFormats(this::testSchemaEvolution);\n     }\n \n+    @Test\n+    public void testInsertIntoNotNullColumn()\n+    {\n+        assertUpdate(\"CREATE TABLE test_not_null_table (c1 INTEGER, c2 INTEGER NOT NULL)\");\n+        assertUpdate(\"INSERT INTO test_not_null_table (c2) VALUES(2)\", 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEwODczNQ==", "bodyText": "Done in the latest force push.", "url": "https://github.com/trinodb/trino/pull/4144#discussion_r445108735", "createdAt": "2020-06-24T19:04:03Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -324,6 +324,16 @@ public void testSchemaEvolution()\n         testWithAllFileFormats(this::testSchemaEvolution);\n     }\n \n+    @Test\n+    public void testInsertIntoNotNullColumn()\n+    {\n+        assertUpdate(\"CREATE TABLE test_not_null_table (c1 INTEGER, c2 INTEGER NOT NULL)\");\n+        assertUpdate(\"INSERT INTO test_not_null_table (c2) VALUES(2)\", 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk0OTQ0Mw=="}, "originalCommit": null, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjIwNDM1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/TableWriterOperator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNDoxMzoyM1rOGnYnBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTowNDoxNVrOGofSYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk1MDg1NA==", "bodyText": "We should do this inside the check for not-null channels, since this is logically an optimization of checking the block for nulls. For nullable channels, we don't need to look at this.", "url": "https://github.com/trinodb/trino/pull/4144#discussion_r443950854", "createdAt": "2020-06-23T04:13:23Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/operator/TableWriterOperator.java", "diffHunk": "@@ -227,7 +236,14 @@ public void addInput(Page page)\n \n         Block[] blocks = new Block[columnChannels.size()];\n         for (int outputChannel = 0; outputChannel < columnChannels.size(); outputChannel++) {\n-            blocks[outputChannel] = page.getBlock(columnChannels.get(outputChannel));\n+            Block block = page.getBlock(columnChannels.get(outputChannel));\n+            if (block.mayHaveNull()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEwODgzMg==", "bodyText": "Done in the latest force push.", "url": "https://github.com/trinodb/trino/pull/4144#discussion_r445108832", "createdAt": "2020-06-24T19:04:15Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/operator/TableWriterOperator.java", "diffHunk": "@@ -227,7 +236,14 @@ public void addInput(Page page)\n \n         Block[] blocks = new Block[columnChannels.size()];\n         for (int outputChannel = 0; outputChannel < columnChannels.size(); outputChannel++) {\n-            blocks[outputChannel] = page.getBlock(columnChannels.get(outputChannel));\n+            Block block = page.getBlock(columnChannels.get(outputChannel));\n+            if (block.mayHaveNull()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk1MDg1NA=="}, "originalCommit": null, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjIwNDQ0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/TableWriterOperator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNDoxMzoyOFrOGnYnEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTowNzo0MVrOGofZOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk1MDg2Nw==", "bodyText": "Doing a map lookup for every channel could have a non-trivial cost, especially since we have to box the channel integer key. I think it would be better to use a List<String> with null values for the nullable columns, making the lookup basically free.", "url": "https://github.com/trinodb/trino/pull/4144#discussion_r443950867", "createdAt": "2020-06-23T04:13:28Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/operator/TableWriterOperator.java", "diffHunk": "@@ -227,7 +236,14 @@ public void addInput(Page page)\n \n         Block[] blocks = new Block[columnChannels.size()];\n         for (int outputChannel = 0; outputChannel < columnChannels.size(); outputChannel++) {\n-            blocks[outputChannel] = page.getBlock(columnChannels.get(outputChannel));\n+            Block block = page.getBlock(columnChannels.get(outputChannel));\n+            if (block.mayHaveNull()) {\n+                String columnName = notNullChannelColumnNames.get(outputChannel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTExMDU4NQ==", "bodyText": "Done in the latest force push.  However, nulls are illegal in ImmutableLists, so in TestTableWriterOperation I had to create an ArrayList.\nI thought of creating Optionals, but the main cost of Map lookup is cacheline bounces, and adding Optionals will also result in cacheline bounces.", "url": "https://github.com/trinodb/trino/pull/4144#discussion_r445110585", "createdAt": "2020-06-24T19:07:41Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/operator/TableWriterOperator.java", "diffHunk": "@@ -227,7 +236,14 @@ public void addInput(Page page)\n \n         Block[] blocks = new Block[columnChannels.size()];\n         for (int outputChannel = 0; outputChannel < columnChannels.size(); outputChannel++) {\n-            blocks[outputChannel] = page.getBlock(columnChannels.get(outputChannel));\n+            Block block = page.getBlock(columnChannels.get(outputChannel));\n+            if (block.mayHaveNull()) {\n+                String columnName = notNullChannelColumnNames.get(outputChannel);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk1MDg2Nw=="}, "originalCommit": null, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjIwOTk0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/TableWriterOperator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNDoxNjo1MFrOGnYqQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTowNzozMVrOGofY4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk1MTY4Mw==", "bodyText": "The block check logically fits better here\nif (!block.mayHaveNull()) {\n    return;\n}", "url": "https://github.com/trinodb/trino/pull/4144#discussion_r443951683", "createdAt": "2020-06-23T04:16:50Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/operator/TableWriterOperator.java", "diffHunk": "@@ -243,6 +259,15 @@ public void addInput(Page page)\n         updateWrittenBytes();\n     }\n \n+    private void verifyBlockHasNoNulls(Block block, String columnName)\n+    {\n+        for (int position = 0; position < block.getPositionCount(); position++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTExMDQ5Ng==", "bodyText": "Done in the latest force push.", "url": "https://github.com/trinodb/trino/pull/4144#discussion_r445110496", "createdAt": "2020-06-24T19:07:31Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/operator/TableWriterOperator.java", "diffHunk": "@@ -243,6 +259,15 @@ public void addInput(Page page)\n         updateWrittenBytes();\n     }\n \n+    private void verifyBlockHasNoNulls(Block block, String columnName)\n+    {\n+        for (int position = 0; position < block.getPositionCount(); position++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk1MTY4Mw=="}, "originalCommit": null, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjIxMzczOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/LocalExecutionPlanner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNDoyNToxMFrOGnYxhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTowODozMlrOGofbGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk1MzU0Mg==", "bodyText": "You can use toImmutableMap() from ImmutableMap. Also, I think this could simplify with a map call:\nMap<Integer, String> notNullChannelColumnNames = node.getColumns().stream()\n        .filter(symbol -> node.getNotNullColumnSymbols().contains(symbol))\n        .map(source::symbolToChannel)\n        .collect(toImmutableMap(identity(), node.getColumnNames()::get));", "url": "https://github.com/trinodb/trino/pull/4144#discussion_r443953542", "createdAt": "2020-06-23T04:25:10Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LocalExecutionPlanner.java", "diffHunk": "@@ -2334,12 +2334,17 @@ public PhysicalOperation visitTableWriter(TableWriterNode node, LocalExecutionPl\n                     .map(source::symbolToChannel)\n                     .collect(toImmutableList());\n \n+            Map<Integer, String> notNullChannelColumnNames = node.getColumns().stream()\n+                    .filter(symbol -> node.getNotNullColumnSymbols().contains(symbol))\n+                    .collect(Collectors.toMap(source::symbolToChannel, s -> node.getColumnNames().get(source.symbolToChannel(s))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTExMTA2Nw==", "bodyText": "The ImmutableMap is no more, but I'll remember the tip.", "url": "https://github.com/trinodb/trino/pull/4144#discussion_r445111067", "createdAt": "2020-06-24T19:08:32Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LocalExecutionPlanner.java", "diffHunk": "@@ -2334,12 +2334,17 @@ public PhysicalOperation visitTableWriter(TableWriterNode node, LocalExecutionPl\n                     .map(source::symbolToChannel)\n                     .collect(toImmutableList());\n \n+            Map<Integer, String> notNullChannelColumnNames = node.getColumns().stream()\n+                    .filter(symbol -> node.getNotNullColumnSymbols().contains(symbol))\n+                    .collect(Collectors.toMap(source::symbolToChannel, s -> node.getColumnNames().get(source.symbolToChannel(s))));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk1MzU0Mg=="}, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzIyNjUwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/plan/TableWriterNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNzozMTowOFrOGpExNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNzozMTowOFrOGpExNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcyMjkzNA==", "bodyText": "Why use symbols here? Seems like it would be easier to have this be the column names", "url": "https://github.com/trinodb/trino/pull/4144#discussion_r445722934", "createdAt": "2020-06-25T17:31:08Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/plan/TableWriterNode.java", "diffHunk": "@@ -61,6 +64,7 @@ public TableWriterNode(\n             @JsonProperty(\"fragmentSymbol\") Symbol fragmentSymbol,\n             @JsonProperty(\"columns\") List<Symbol> columns,\n             @JsonProperty(\"columnNames\") List<String> columnNames,\n+            @JsonProperty(\"notNullColumnSymbols\") Set<Symbol> notNullColumnSymbols,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MjAxNzIwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/LogicalPlanner.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwNDoyMDozMFrOGpzIRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxNDoyMDoyNVrOGp2HVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4MjUwMg==", "bodyText": "I'd just do this:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .map(column -> requireNonNull(columnToSymbolMap.get(column.getName()), \"columnToSymbolMap is missing column \" + column.getName()))\n          \n          \n            \n                            .collect(Collectors.toSet());\n          \n          \n            \n                            .map(columnToSymbolMap::get)\n          \n          \n            \n                            .collect(toImmutableSet());\n          \n      \n    \n    \n  \n\nIt's more concise, and the immutable set will catch any nulls that might result from the lookup (which is a bug somewhere in the implementation, anyway)", "url": "https://github.com/trinodb/trino/pull/4144#discussion_r446482502", "createdAt": "2020-06-27T04:20:30Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LogicalPlanner.java", "diffHunk": "@@ -448,11 +453,16 @@ else if (isUsePreferredWritePartitioning(session)) {\n             }\n         }\n \n-        if (!statisticsMetadata.isEmpty()) {\n-            verify(columnNames.size() == symbols.size(), \"columnNames.size() != symbols.size(): %s and %s\", columnNames, symbols);\n-            Map<String, Symbol> columnToSymbolMap = zip(columnNames.stream(), symbols.stream(), SimpleImmutableEntry::new)\n-                    .collect(toImmutableMap(Entry::getKey, Entry::getValue));\n+        verify(columnNames.size() == symbols.size(), \"columnNames.size() != symbols.size(): %s and %s\", columnNames, symbols);\n+        Map<String, Symbol> columnToSymbolMap = zip(columnNames.stream(), symbols.stream(), SimpleImmutableEntry::new)\n+                .collect(toImmutableMap(Entry::getKey, Entry::getValue));\n+\n+        Set<Symbol> notNullColumnSymbols = columnMetadataList.stream()\n+                .filter(column -> !column.isNullable())\n+                .map(column -> requireNonNull(columnToSymbolMap.get(column.getName()), \"columnToSymbolMap is missing column \" + column.getName()))\n+                .collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4MzkzMg==", "bodyText": "Indeed, that's much nicer; changed as you suggested by a forced comment.  Thanks very much for looking!", "url": "https://github.com/trinodb/trino/pull/4144#discussion_r446483932", "createdAt": "2020-06-27T04:37:59Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LogicalPlanner.java", "diffHunk": "@@ -448,11 +453,16 @@ else if (isUsePreferredWritePartitioning(session)) {\n             }\n         }\n \n-        if (!statisticsMetadata.isEmpty()) {\n-            verify(columnNames.size() == symbols.size(), \"columnNames.size() != symbols.size(): %s and %s\", columnNames, symbols);\n-            Map<String, Symbol> columnToSymbolMap = zip(columnNames.stream(), symbols.stream(), SimpleImmutableEntry::new)\n-                    .collect(toImmutableMap(Entry::getKey, Entry::getValue));\n+        verify(columnNames.size() == symbols.size(), \"columnNames.size() != symbols.size(): %s and %s\", columnNames, symbols);\n+        Map<String, Symbol> columnToSymbolMap = zip(columnNames.stream(), symbols.stream(), SimpleImmutableEntry::new)\n+                .collect(toImmutableMap(Entry::getKey, Entry::getValue));\n+\n+        Set<Symbol> notNullColumnSymbols = columnMetadataList.stream()\n+                .filter(column -> !column.isNullable())\n+                .map(column -> requireNonNull(columnToSymbolMap.get(column.getName()), \"columnToSymbolMap is missing column \" + column.getName()))\n+                .collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4MjUwMg=="}, "originalCommit": null, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4OTQzMQ==", "bodyText": "It looks like this caused some tests to start failing with NullPointerException", "url": "https://github.com/trinodb/trino/pull/4144#discussion_r446489431", "createdAt": "2020-06-27T05:54:08Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LogicalPlanner.java", "diffHunk": "@@ -448,11 +453,16 @@ else if (isUsePreferredWritePartitioning(session)) {\n             }\n         }\n \n-        if (!statisticsMetadata.isEmpty()) {\n-            verify(columnNames.size() == symbols.size(), \"columnNames.size() != symbols.size(): %s and %s\", columnNames, symbols);\n-            Map<String, Symbol> columnToSymbolMap = zip(columnNames.stream(), symbols.stream(), SimpleImmutableEntry::new)\n-                    .collect(toImmutableMap(Entry::getKey, Entry::getValue));\n+        verify(columnNames.size() == symbols.size(), \"columnNames.size() != symbols.size(): %s and %s\", columnNames, symbols);\n+        Map<String, Symbol> columnToSymbolMap = zip(columnNames.stream(), symbols.stream(), SimpleImmutableEntry::new)\n+                .collect(toImmutableMap(Entry::getKey, Entry::getValue));\n+\n+        Set<Symbol> notNullColumnSymbols = columnMetadataList.stream()\n+                .filter(column -> !column.isNullable())\n+                .map(column -> requireNonNull(columnToSymbolMap.get(column.getName()), \"columnToSymbolMap is missing column \" + column.getName()))\n+                .collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4MjUwMg=="}, "originalCommit": null, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4OTc2NA==", "bodyText": "Oh, yeah, sorry, I missed the following in my suggestion above:\n.map(ColumnMetadata::getName)", "url": "https://github.com/trinodb/trino/pull/4144#discussion_r446489764", "createdAt": "2020-06-27T05:58:58Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LogicalPlanner.java", "diffHunk": "@@ -448,11 +453,16 @@ else if (isUsePreferredWritePartitioning(session)) {\n             }\n         }\n \n-        if (!statisticsMetadata.isEmpty()) {\n-            verify(columnNames.size() == symbols.size(), \"columnNames.size() != symbols.size(): %s and %s\", columnNames, symbols);\n-            Map<String, Symbol> columnToSymbolMap = zip(columnNames.stream(), symbols.stream(), SimpleImmutableEntry::new)\n-                    .collect(toImmutableMap(Entry::getKey, Entry::getValue));\n+        verify(columnNames.size() == symbols.size(), \"columnNames.size() != symbols.size(): %s and %s\", columnNames, symbols);\n+        Map<String, Symbol> columnToSymbolMap = zip(columnNames.stream(), symbols.stream(), SimpleImmutableEntry::new)\n+                .collect(toImmutableMap(Entry::getKey, Entry::getValue));\n+\n+        Set<Symbol> notNullColumnSymbols = columnMetadataList.stream()\n+                .filter(column -> !column.isNullable())\n+                .map(column -> requireNonNull(columnToSymbolMap.get(column.getName()), \"columnToSymbolMap is missing column \" + column.getName()))\n+                .collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4MjUwMg=="}, "originalCommit": null, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUzMTQxMg==", "bodyText": "Doh, I should have looked more closely rather than blindly applying change.  I need to be more careful pushing changes at an hour when I'm no longer sentient ;)\nIt's fixed now in the latest forced push.", "url": "https://github.com/trinodb/trino/pull/4144#discussion_r446531412", "createdAt": "2020-06-27T14:20:25Z", "author": {"login": "djsstarburst"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/LogicalPlanner.java", "diffHunk": "@@ -448,11 +453,16 @@ else if (isUsePreferredWritePartitioning(session)) {\n             }\n         }\n \n-        if (!statisticsMetadata.isEmpty()) {\n-            verify(columnNames.size() == symbols.size(), \"columnNames.size() != symbols.size(): %s and %s\", columnNames, symbols);\n-            Map<String, Symbol> columnToSymbolMap = zip(columnNames.stream(), symbols.stream(), SimpleImmutableEntry::new)\n-                    .collect(toImmutableMap(Entry::getKey, Entry::getValue));\n+        verify(columnNames.size() == symbols.size(), \"columnNames.size() != symbols.size(): %s and %s\", columnNames, symbols);\n+        Map<String, Symbol> columnToSymbolMap = zip(columnNames.stream(), symbols.stream(), SimpleImmutableEntry::new)\n+                .collect(toImmutableMap(Entry::getKey, Entry::getValue));\n+\n+        Set<Symbol> notNullColumnSymbols = columnMetadataList.stream()\n+                .filter(column -> !column.isNullable())\n+                .map(column -> requireNonNull(columnToSymbolMap.get(column.getName()), \"columnToSymbolMap is missing column \" + column.getName()))\n+                .collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4MjUwMg=="}, "originalCommit": null, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4166, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}