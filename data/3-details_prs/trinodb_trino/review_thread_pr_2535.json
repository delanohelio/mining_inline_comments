{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzOTgzNjMy", "number": 2535, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNTo0MzozNVrODY23vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNTo0MzozNVrODY23vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MzkxNDIxOnYy", "diffSide": "RIGHT", "path": "presto-geospatial/src/main/java/io/prestosql/plugin/geospatial/GeoFunctions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNTo0MzozNVrOFe9ASA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwNTozNDoxNlrOFfJoOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwMTA5Ng==", "bodyText": "We generally place arguments either all on the same line or all in separate lines. In this case, I'd put all the enum values on the same line.\nAlso, let's make it a private static final constant to avoid creating the enum set in every call.", "url": "https://github.com/trinodb/trino/pull/2535#discussion_r368001096", "createdAt": "2020-01-17T15:43:35Z", "author": {"login": "martint"}, "path": "presto-geospatial/src/main/java/io/prestosql/plugin/geospatial/GeoFunctions.java", "diffHunk": "@@ -1044,24 +1048,47 @@ public static Slice stEndPoint(@SqlType(GEOMETRY_TYPE_NAME) Slice input)\n     }\n \n     @SqlNullable\n-    @Description(\"Returns an array of points in a linestring\")\n+    @Description(\"Returns an array of points in a geometry\")\n     @ScalarFunction(\"ST_Points\")\n     @SqlType(\"array(\" + GEOMETRY_TYPE_NAME + \")\")\n     public static Block stPoints(@SqlType(GEOMETRY_TYPE_NAME) Slice input)\n     {\n-        OGCGeometry geometry = deserialize(input);\n-        validateType(\"ST_Points\", geometry, EnumSet.of(LINE_STRING));\n+        Geometry geometry = JtsGeometrySerde.deserialize(input);\n+        validateType(\"ST_Points\", geometry, EnumSet.of(LINE_STRING, POLYGON, POINT, MULTI_POINT,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwNzkzMQ==", "bodyText": "Thanks @martint for your review. I have made the changes based on your comments.", "url": "https://github.com/trinodb/trino/pull/2535#discussion_r368207931", "createdAt": "2020-01-18T05:34:16Z", "author": {"login": "uprush"}, "path": "presto-geospatial/src/main/java/io/prestosql/plugin/geospatial/GeoFunctions.java", "diffHunk": "@@ -1044,24 +1048,47 @@ public static Slice stEndPoint(@SqlType(GEOMETRY_TYPE_NAME) Slice input)\n     }\n \n     @SqlNullable\n-    @Description(\"Returns an array of points in a linestring\")\n+    @Description(\"Returns an array of points in a geometry\")\n     @ScalarFunction(\"ST_Points\")\n     @SqlType(\"array(\" + GEOMETRY_TYPE_NAME + \")\")\n     public static Block stPoints(@SqlType(GEOMETRY_TYPE_NAME) Slice input)\n     {\n-        OGCGeometry geometry = deserialize(input);\n-        validateType(\"ST_Points\", geometry, EnumSet.of(LINE_STRING));\n+        Geometry geometry = JtsGeometrySerde.deserialize(input);\n+        validateType(\"ST_Points\", geometry, EnumSet.of(LINE_STRING, POLYGON, POINT, MULTI_POINT,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwMTA5Ng=="}, "originalCommit": null, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1035, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}