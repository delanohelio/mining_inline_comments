{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5Njg0Njgx", "number": 3358, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODozODoyMlrODvQaFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzoyNjowNVrODvqkzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODc4NDg3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/InternalHiveConnectorFactory.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODozODoyMlrOGBk64g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODoyMjo1OFrOGB4bow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwNjY1OA==", "bodyText": "Why not to toImmutableSet()?", "url": "https://github.com/trinodb/trino/pull/3358#discussion_r404306658", "createdAt": "2020-04-06T18:38:22Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/InternalHiveConnectorFactory.java", "diffHunk": "@@ -133,6 +139,10 @@ public static Connector createConnector(String catalogName, Map<String, String>\n                     classLoader);\n             Set<Procedure> procedures = injector.getInstance(Key.get(new TypeLiteral<Set<Procedure>>() {}));\n             Set<SystemTable> systemTables = injector.getInstance(Key.get(new TypeLiteral<Set<SystemTable>>() {}));\n+            List<EventListener> eventListeners = injector.getInstance(Key.get(new TypeLiteral<Set<EventListener>>() {}))\n+                    .stream()\n+                    .map(listener -> new ClassLoaderSafeEventListener(listener, classLoader))\n+                    .collect(toImmutableList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM4NTI5Ng==", "bodyText": "there is not point to even attempt any deduplication", "url": "https://github.com/trinodb/trino/pull/3358#discussion_r404385296", "createdAt": "2020-04-06T21:00:47Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/InternalHiveConnectorFactory.java", "diffHunk": "@@ -133,6 +139,10 @@ public static Connector createConnector(String catalogName, Map<String, String>\n                     classLoader);\n             Set<Procedure> procedures = injector.getInstance(Key.get(new TypeLiteral<Set<Procedure>>() {}));\n             Set<SystemTable> systemTables = injector.getInstance(Key.get(new TypeLiteral<Set<SystemTable>>() {}));\n+            List<EventListener> eventListeners = injector.getInstance(Key.get(new TypeLiteral<Set<EventListener>>() {}))\n+                    .stream()\n+                    .map(listener -> new ClassLoaderSafeEventListener(listener, classLoader))\n+                    .collect(toImmutableList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwNjY1OA=="}, "originalCommit": null, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyMTA2Mg==", "bodyText": "I had two points, none of them serious:\n\ninjector.getInstance(Key.get(new TypeLiteral<Set<EventListener>>() {})) returns a set, so why do we change this?\nUsing list here could make a false impression that this could contain duplicates (set still can, but it is less obvious). I don't see a reason why one would need even thing about it.\n\nAny way, I will it leave up to author.", "url": "https://github.com/trinodb/trino/pull/3358#discussion_r404621062", "createdAt": "2020-04-07T08:14:40Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/InternalHiveConnectorFactory.java", "diffHunk": "@@ -133,6 +139,10 @@ public static Connector createConnector(String catalogName, Map<String, String>\n                     classLoader);\n             Set<Procedure> procedures = injector.getInstance(Key.get(new TypeLiteral<Set<Procedure>>() {}));\n             Set<SystemTable> systemTables = injector.getInstance(Key.get(new TypeLiteral<Set<SystemTable>>() {}));\n+            List<EventListener> eventListeners = injector.getInstance(Key.get(new TypeLiteral<Set<EventListener>>() {}))\n+                    .stream()\n+                    .map(listener -> new ClassLoaderSafeEventListener(listener, classLoader))\n+                    .collect(toImmutableList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwNjY1OA=="}, "originalCommit": null, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyNjMzOQ==", "bodyText": "Since ClassLoaderSafeEventListener doesn't (and shouldn't) implement equals, using set is pointless.", "url": "https://github.com/trinodb/trino/pull/3358#discussion_r404626339", "createdAt": "2020-04-07T08:22:58Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/InternalHiveConnectorFactory.java", "diffHunk": "@@ -133,6 +139,10 @@ public static Connector createConnector(String catalogName, Map<String, String>\n                     classLoader);\n             Set<Procedure> procedures = injector.getInstance(Key.get(new TypeLiteral<Set<Procedure>>() {}));\n             Set<SystemTable> systemTables = injector.getInstance(Key.get(new TypeLiteral<Set<SystemTable>>() {}));\n+            List<EventListener> eventListeners = injector.getInstance(Key.get(new TypeLiteral<Set<EventListener>>() {}))\n+                    .stream()\n+                    .map(listener -> new ClassLoaderSafeEventListener(listener, classLoader))\n+                    .collect(toImmutableList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwNjY1OA=="}, "originalCommit": null, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODc5MDQxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/InternalHiveConnectorFactory.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODozOTo0NlrOGBk-IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo1NTowNVrOGCt3SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwNzQ4OQ==", "bodyText": "Just add newSetBinder(binder, EventListener.class); here. I don't see a need for defaultEventListenerModule() method.", "url": "https://github.com/trinodb/trino/pull/3358#discussion_r404307489", "createdAt": "2020-04-06T18:39:46Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/InternalHiveConnectorFactory.java", "diffHunk": "@@ -104,6 +109,7 @@ public static Connector createConnector(String catalogName, Map<String, String>\n                         binder.bind(PageSorter.class).toInstance(context.getPageSorter());\n                         binder.bind(CatalogName.class).toInstance(new CatalogName(catalogName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY3ODUzNg==", "bodyText": "better reading experience along with expressing the intention of it, so that the reader doesn't have to guess that it's a necessary default Event Listener.", "url": "https://github.com/trinodb/trino/pull/3358#discussion_r404678536", "createdAt": "2020-04-07T09:45:33Z", "author": {"login": "s2lomon"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/InternalHiveConnectorFactory.java", "diffHunk": "@@ -104,6 +109,7 @@ public static Connector createConnector(String catalogName, Map<String, String>\n                         binder.bind(PageSorter.class).toInstance(context.getPageSorter());\n                         binder.bind(CatalogName.class).toInstance(new CatalogName(catalogName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwNzQ4OQ=="}, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDcwNjI0Nw==", "bodyText": "It is a matter of taste. I would prefer not to over-optimize reading experience, but rather follow the current layout.", "url": "https://github.com/trinodb/trino/pull/3358#discussion_r404706247", "createdAt": "2020-04-07T10:32:33Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/InternalHiveConnectorFactory.java", "diffHunk": "@@ -104,6 +109,7 @@ public static Connector createConnector(String catalogName, Map<String, String>\n                         binder.bind(PageSorter.class).toInstance(context.getPageSorter());\n                         binder.bind(CatalogName.class).toInstance(new CatalogName(catalogName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwNzQ4OQ=="}, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk4MzAzMQ==", "bodyText": "Agreed, we should just bind an empty set here.", "url": "https://github.com/trinodb/trino/pull/3358#discussion_r404983031", "createdAt": "2020-04-07T17:23:40Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/InternalHiveConnectorFactory.java", "diffHunk": "@@ -104,6 +109,7 @@ public static Connector createConnector(String catalogName, Map<String, String>\n                         binder.bind(PageSorter.class).toInstance(context.getPageSorter());\n                         binder.bind(CatalogName.class).toInstance(new CatalogName(catalogName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwNzQ4OQ=="}, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwMTc2OQ==", "bodyText": "ok", "url": "https://github.com/trinodb/trino/pull/3358#discussion_r405501769", "createdAt": "2020-04-08T12:55:05Z", "author": {"login": "s2lomon"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/InternalHiveConnectorFactory.java", "diffHunk": "@@ -104,6 +109,7 @@ public static Connector createConnector(String catalogName, Map<String, String>\n                         binder.bind(PageSorter.class).toInstance(context.getPageSorter());\n                         binder.bind(CatalogName.class).toInstance(new CatalogName(catalogName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwNzQ4OQ=="}, "originalCommit": null, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODc5NDUwOnYy", "diffSide": "RIGHT", "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/classloader/ClassLoaderSafeEventListener.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODo0MTowMVrOGBlA3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMjowNDo0M1rOGCATBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwODE4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public ClassLoaderSafeEventListener(EventListener delegate, ClassLoader classLoader)\n          \n          \n            \n                public ClassLoaderSafeEventListener(@ForClassLoaderSafe  EventListener delegate, ClassLoader classLoader)", "url": "https://github.com/trinodb/trino/pull/3358#discussion_r404308189", "createdAt": "2020-04-06T18:41:01Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/classloader/ClassLoaderSafeEventListener.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.base.classloader;\n+\n+import io.prestosql.spi.classloader.ThreadContextClassLoader;\n+import io.prestosql.spi.eventlistener.EventListener;\n+import io.prestosql.spi.eventlistener.QueryCompletedEvent;\n+import io.prestosql.spi.eventlistener.QueryCreatedEvent;\n+import io.prestosql.spi.eventlistener.SplitCompletedEvent;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class ClassLoaderSafeEventListener\n+        implements EventListener\n+{\n+    private final EventListener delegate;\n+    private final ClassLoader classLoader;\n+\n+    public ClassLoaderSafeEventListener(EventListener delegate, ClassLoader classLoader)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY3NzgzOQ==", "bodyText": "What would that annotation do? This class is used as a decorator inside a stream/for-loop operation. Nothing will be injected into it through guice, as there are potentially many EventListeners etc. For me adding it there would be misleading, but maybe I don't get the full purpose.", "url": "https://github.com/trinodb/trino/pull/3358#discussion_r404677839", "createdAt": "2020-04-07T09:44:20Z", "author": {"login": "s2lomon"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/classloader/ClassLoaderSafeEventListener.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.base.classloader;\n+\n+import io.prestosql.spi.classloader.ThreadContextClassLoader;\n+import io.prestosql.spi.eventlistener.EventListener;\n+import io.prestosql.spi.eventlistener.QueryCompletedEvent;\n+import io.prestosql.spi.eventlistener.QueryCreatedEvent;\n+import io.prestosql.spi.eventlistener.SplitCompletedEvent;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class ClassLoaderSafeEventListener\n+        implements EventListener\n+{\n+    private final EventListener delegate;\n+    private final ClassLoader classLoader;\n+\n+    public ClassLoaderSafeEventListener(EventListener delegate, ClassLoader classLoader)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwODE4OQ=="}, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDcwNTgwMg==", "bodyText": "ClassLoaderSafe* classes are also designed to be used with guice. I wanted to add this annotation to make sure it follows the convention and behaves like any other ClassLoaderSafe* class.", "url": "https://github.com/trinodb/trino/pull/3358#discussion_r404705802", "createdAt": "2020-04-07T10:31:43Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/classloader/ClassLoaderSafeEventListener.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.base.classloader;\n+\n+import io.prestosql.spi.classloader.ThreadContextClassLoader;\n+import io.prestosql.spi.eventlistener.EventListener;\n+import io.prestosql.spi.eventlistener.QueryCompletedEvent;\n+import io.prestosql.spi.eventlistener.QueryCreatedEvent;\n+import io.prestosql.spi.eventlistener.SplitCompletedEvent;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class ClassLoaderSafeEventListener\n+        implements EventListener\n+{\n+    private final EventListener delegate;\n+    private final ClassLoader classLoader;\n+\n+    public ClassLoaderSafeEventListener(EventListener delegate, ClassLoader classLoader)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwODE4OQ=="}, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDcwNzI5Nw==", "bodyText": "Please don't get me wrong. I don't want you to use it ;)", "url": "https://github.com/trinodb/trino/pull/3358#discussion_r404707297", "createdAt": "2020-04-07T10:34:34Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/classloader/ClassLoaderSafeEventListener.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.base.classloader;\n+\n+import io.prestosql.spi.classloader.ThreadContextClassLoader;\n+import io.prestosql.spi.eventlistener.EventListener;\n+import io.prestosql.spi.eventlistener.QueryCompletedEvent;\n+import io.prestosql.spi.eventlistener.QueryCreatedEvent;\n+import io.prestosql.spi.eventlistener.SplitCompletedEvent;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class ClassLoaderSafeEventListener\n+        implements EventListener\n+{\n+    private final EventListener delegate;\n+    private final ClassLoader classLoader;\n+\n+    public ClassLoaderSafeEventListener(EventListener delegate, ClassLoader classLoader)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwODE4OQ=="}, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc1NTIwNw==", "bodyText": "ok I get it :)", "url": "https://github.com/trinodb/trino/pull/3358#discussion_r404755207", "createdAt": "2020-04-07T12:04:43Z", "author": {"login": "s2lomon"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/classloader/ClassLoaderSafeEventListener.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.base.classloader;\n+\n+import io.prestosql.spi.classloader.ThreadContextClassLoader;\n+import io.prestosql.spi.eventlistener.EventListener;\n+import io.prestosql.spi.eventlistener.QueryCompletedEvent;\n+import io.prestosql.spi.eventlistener.QueryCreatedEvent;\n+import io.prestosql.spi.eventlistener.SplitCompletedEvent;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class ClassLoaderSafeEventListener\n+        implements EventListener\n+{\n+    private final EventListener delegate;\n+    private final ClassLoader classLoader;\n+\n+    public ClassLoaderSafeEventListener(EventListener delegate, ClassLoader classLoader)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwODE4OQ=="}, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODc5NjI3OnYy", "diffSide": "RIGHT", "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/classloader/ClassLoaderSafeEventListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODo0MTozMFrOGBlB_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOTo0MDo0NFrOGB7bzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwODQ3Nw==", "bodyText": "I would add it in separate commit.\nAdd a test for this class to io.prestosql.plugin.base.classloader.TestClassLoaderSafeWrappers", "url": "https://github.com/trinodb/trino/pull/3358#discussion_r404308477", "createdAt": "2020-04-06T18:41:30Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/classloader/ClassLoaderSafeEventListener.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.base.classloader;\n+\n+import io.prestosql.spi.classloader.ThreadContextClassLoader;\n+import io.prestosql.spi.eventlistener.EventListener;\n+import io.prestosql.spi.eventlistener.QueryCompletedEvent;\n+import io.prestosql.spi.eventlistener.QueryCreatedEvent;\n+import io.prestosql.spi.eventlistener.SplitCompletedEvent;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class ClassLoaderSafeEventListener", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY3NTUzNA==", "bodyText": "ok i can add it in a separate commit with a test.", "url": "https://github.com/trinodb/trino/pull/3358#discussion_r404675534", "createdAt": "2020-04-07T09:40:44Z", "author": {"login": "s2lomon"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/classloader/ClassLoaderSafeEventListener.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.base.classloader;\n+\n+import io.prestosql.spi.classloader.ThreadContextClassLoader;\n+import io.prestosql.spi.eventlistener.EventListener;\n+import io.prestosql.spi.eventlistener.QueryCompletedEvent;\n+import io.prestosql.spi.eventlistener.QueryCreatedEvent;\n+import io.prestosql.spi.eventlistener.SplitCompletedEvent;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class ClassLoaderSafeEventListener", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwODQ3Nw=="}, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODgwMTgyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODo0MzoxMVrOGBlFyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOTo0MDozOVrOGB7bpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwOTQ0OA==", "bodyText": "I would simply write Allow HiveConnector to return EventListener for commit message.\nTerms like external event listeners or hive plugin ecosystem are a bit misleading. Maybe this just a matter of taste.", "url": "https://github.com/trinodb/trino/pull/3358#discussion_r404309448", "createdAt": "2020-04-06T18:43:11Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveConnector.java", "diffHunk": "@@ -28,6 +28,7 @@\n import io.prestosql.spi.connector.ConnectorSplitManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY3NTQ5NQ==", "bodyText": "sure", "url": "https://github.com/trinodb/trino/pull/3358#discussion_r404675495", "createdAt": "2020-04-07T09:40:39Z", "author": {"login": "s2lomon"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveConnector.java", "diffHunk": "@@ -28,6 +28,7 @@\n import io.prestosql.spi.connector.ConnectorSplitManager;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwOTQ0OA=="}, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTU3ODIyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/InternalHiveConnectorFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMTo0NDowNVrOGB_pdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMTo0NDowNVrOGB_pdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc0NDU2NA==", "bodyText": "static import", "url": "https://github.com/trinodb/trino/pull/3358#discussion_r404744564", "createdAt": "2020-04-07T11:44:05Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/InternalHiveConnectorFactory.java", "diffHunk": "@@ -152,4 +162,12 @@ public static Connector createConnector(String catalogName, Map<String, String>\n                     classLoader);\n         }\n     }\n+\n+    private static Module defaultEventListenerModule()\n+    {\n+        return binder -> {\n+            Multibinder.newSetBinder(binder, EventListener.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzA3MjEyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/InternalHiveConnectorFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzoyNjowNVrOGCOStw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo1NDo1N1rOGCt2-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk4NDUwMw==", "bodyText": "There's no need to create a no-op listener. The default implementation of Connector.getEventListeners() returns an empty set, so empty iterable is legal. We just need to create the set binder.", "url": "https://github.com/trinodb/trino/pull/3358#discussion_r404984503", "createdAt": "2020-04-07T17:26:05Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/InternalHiveConnectorFactory.java", "diffHunk": "@@ -152,4 +162,12 @@ public static Connector createConnector(String catalogName, Map<String, String>\n                     classLoader);\n         }\n     }\n+\n+    private static Module defaultEventListenerModule()\n+    {\n+        return binder -> {\n+            newSetBinder(binder, EventListener.class)\n+                    .addBinding().toInstance(new EventListener() {});", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwMTY5MA==", "bodyText": "fair point", "url": "https://github.com/trinodb/trino/pull/3358#discussion_r405501690", "createdAt": "2020-04-08T12:54:57Z", "author": {"login": "s2lomon"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/InternalHiveConnectorFactory.java", "diffHunk": "@@ -152,4 +162,12 @@ public static Connector createConnector(String catalogName, Map<String, String>\n                     classLoader);\n         }\n     }\n+\n+    private static Module defaultEventListenerModule()\n+    {\n+        return binder -> {\n+            newSetBinder(binder, EventListener.class)\n+                    .addBinding().toInstance(new EventListener() {});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk4NDUwMw=="}, "originalCommit": null, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 343, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}