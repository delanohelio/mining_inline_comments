{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2Njg5OTc5", "number": 4396, "reviewThreads": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODoyMzoyMFrOEMyvQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToxNzowOVrOEzv0GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODQ5NjY2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/GrantTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODoyMzoyMFrOGvG0_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODoyMzoyMFrOGvG0_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0ODEyNg==", "bodyText": "io.prestosql.metadata.Metadata#schemaExists?", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r452048126", "createdAt": "2020-07-09T08:23:20Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/execution/GrantTask.java", "diffHunk": "@@ -49,13 +54,50 @@ public String getName()\n     @Override\n     public ListenableFuture<?> execute(Grant statement, TransactionManager transactionManager, Metadata metadata, AccessControl accessControl, QueryStateMachine stateMachine, List<Expression> parameters)\n     {\n-        Session session = stateMachine.getSession();\n-        QualifiedObjectName tableName = createQualifiedObjectName(session, statement, statement.getTableName());\n+        if (statement.getType().filter(GrantOnType.SCHEMA::equals).isPresent()) {\n+            executeGrantOnSchema(stateMachine.getSession(), statement, metadata, accessControl);\n+        }\n+        else {\n+            executeGrantOnTable(stateMachine.getSession(), statement, metadata, accessControl);\n+        }\n+        return immediateFuture(null);\n+    }\n+\n+    private void executeGrantOnSchema(Session session, Grant statement, Metadata metadata, AccessControl accessControl)\n+    {\n+        CatalogSchemaName schemaName = createCatalogSchemaName(session, statement, Optional.of(statement.getName()));\n+        Optional<CatalogName> catalogHandle = metadata.getCatalogHandle(session, schemaName.getCatalogName());\n+        if (catalogHandle.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODQ5OTE5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/RevokeTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODoyMzo1OVrOGvG2lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODoxNzozM1rOGzJ28w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0ODUzMw==", "bodyText": "io.prestosql.metadata.Metadata#schemaExists?", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r452048533", "createdAt": "2020-07-09T08:23:59Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/execution/RevokeTask.java", "diffHunk": "@@ -49,13 +54,49 @@ public String getName()\n     @Override\n     public ListenableFuture<?> execute(Revoke statement, TransactionManager transactionManager, Metadata metadata, AccessControl accessControl, QueryStateMachine stateMachine, List<Expression> parameters)\n     {\n-        Session session = stateMachine.getSession();\n-        QualifiedObjectName tableName = createQualifiedObjectName(session, statement, statement.getTableName());\n+        if (statement.getType().filter(GrantOnType.SCHEMA::equals).isPresent()) {\n+            executeRevokeOnSchema(stateMachine.getSession(), statement, metadata, accessControl);\n+        }\n+        else {\n+            executeRevokeOnTable(stateMachine.getSession(), statement, metadata, accessControl);\n+        }\n+        return immediateFuture(null);\n+    }\n+\n+    private void executeRevokeOnSchema(Session session, Revoke statement, Metadata metadata, AccessControl accessControl)\n+    {\n+        CatalogSchemaName schemaName = createCatalogSchemaName(session, statement, Optional.of(statement.getName()));\n+        Optional<CatalogName> catalogHandle = metadata.getCatalogHandle(session, schemaName.getCatalogName());\n+        if (catalogHandle.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5MjA4Mw==", "bodyText": "ping", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r456292083", "createdAt": "2020-07-17T08:17:33Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/execution/RevokeTask.java", "diffHunk": "@@ -49,13 +54,49 @@ public String getName()\n     @Override\n     public ListenableFuture<?> execute(Revoke statement, TransactionManager transactionManager, Metadata metadata, AccessControl accessControl, QueryStateMachine stateMachine, List<Expression> parameters)\n     {\n-        Session session = stateMachine.getSession();\n-        QualifiedObjectName tableName = createQualifiedObjectName(session, statement, statement.getTableName());\n+        if (statement.getType().filter(GrantOnType.SCHEMA::equals).isPresent()) {\n+            executeRevokeOnSchema(stateMachine.getSession(), statement, metadata, accessControl);\n+        }\n+        else {\n+            executeRevokeOnTable(stateMachine.getSession(), statement, metadata, accessControl);\n+        }\n+        return immediateFuture(null);\n+    }\n+\n+    private void executeRevokeOnSchema(Session session, Revoke statement, Metadata metadata, AccessControl accessControl)\n+    {\n+        CatalogSchemaName schemaName = createCatalogSchemaName(session, statement, Optional.of(statement.getName()));\n+        Optional<CatalogName> catalogHandle = metadata.getCatalogHandle(session, schemaName.getCatalogName());\n+        if (catalogHandle.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0ODUzMw=="}, "originalCommit": null, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODUwNjI1OnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODoyNTo0OFrOGvG69A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODoyNTo0OFrOGvG69A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0OTY1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ON (SCHEMA | TABLE)? qualifiedName TO grantee=principal\n          \n          \n            \n                    ON (SCHEMA | TABLE)? qualifiedName \n          \n          \n            \n                    TO grantee=principal", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r452049652", "createdAt": "2020-07-09T08:25:48Z", "author": {"login": "kokosing"}, "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "diffHunk": "@@ -87,12 +87,12 @@ statement\n     | SET ROLE (ALL | NONE | role=identifier)                          #setRole\n     | GRANT\n         (privilege (',' privilege)* | ALL PRIVILEGES)\n-        ON TABLE? qualifiedName TO grantee=principal\n+        ON (SCHEMA | TABLE)? qualifiedName TO grantee=principal", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODUwNjk2OnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODoyNTo1OVrOGvG7Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODoyNTo1OVrOGvG7Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0OTc1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ON (SCHEMA | TABLE)? qualifiedName FROM grantee=principal      #revoke\n          \n          \n            \n                    ON (SCHEMA | TABLE)? qualifiedName \n          \n          \n            \n                    FROM grantee=principal      #revoke", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r452049754", "createdAt": "2020-07-09T08:25:59Z", "author": {"login": "kokosing"}, "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "diffHunk": "@@ -87,12 +87,12 @@ statement\n     | SET ROLE (ALL | NONE | role=identifier)                          #setRole\n     | GRANT\n         (privilege (',' privilege)* | ALL PRIVILEGES)\n-        ON TABLE? qualifiedName TO grantee=principal\n+        ON (SCHEMA | TABLE)? qualifiedName TO grantee=principal\n         (WITH GRANT OPTION)?                                           #grant\n     | REVOKE\n         (GRANT OPTION FOR)?\n         (privilege (',' privilege)* | ALL PRIVILEGES)\n-        ON TABLE? qualifiedName FROM grantee=principal                 #revoke\n+        ON (SCHEMA | TABLE)? qualifiedName FROM grantee=principal      #revoke", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODUxMDM1OnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/java/io/prestosql/sql/tree/GrantOnType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODoyNjo1OFrOGvG9nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODoyNjo1OFrOGvG9nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA1MDMzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                SCHEMA,\n          \n          \n            \n                TABLE\n          \n          \n            \n                SCHEMA,\n          \n          \n            \n                TABLE,\n          \n          \n            \n                /**/;", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r452050332", "createdAt": "2020-07-09T08:26:58Z", "author": {"login": "kokosing"}, "path": "presto-parser/src/main/java/io/prestosql/sql/tree/GrantOnType.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.tree;\n+\n+public enum GrantOnType\n+{\n+    SCHEMA,\n+    TABLE", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODUxNzcxOnYy", "diffSide": "RIGHT", "path": "presto-parser/src/test/java/io/prestosql/sql/parser/TestSqlParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODoyODo1NFrOGvHCNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMDozNzo0MFrOGvLiNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA1MTUwOQ==", "bodyText": "separate commit, you are changing not related test. As I understand this test case with present TABLE keyword in GRANT statement was missing, right?", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r452051509", "createdAt": "2020-07-09T08:28:54Z", "author": {"login": "kokosing"}, "path": "presto-parser/src/test/java/io/prestosql/sql/parser/TestSqlParser.java", "diffHunk": "@@ -1623,30 +1624,38 @@ public void testGrant()\n         assertStatement(\"GRANT INSERT, DELETE ON t TO u\",\n                 new Grant(\n                         Optional.of(ImmutableList.of(\"INSERT\", \"DELETE\")),\n-                        false,\n+                        Optional.empty(),\n                         QualifiedName.of(\"t\"),\n                         new PrincipalSpecification(PrincipalSpecification.Type.UNSPECIFIED, new Identifier(\"u\")),\n                         false));\n         assertStatement(\"GRANT SELECT ON t TO ROLE PUBLIC WITH GRANT OPTION\",\n                 new Grant(\n                         Optional.of(ImmutableList.of(\"SELECT\")),\n-                        false, QualifiedName.of(\"t\"),\n+                        Optional.empty(),\n+                        QualifiedName.of(\"t\"),\n                         new PrincipalSpecification(PrincipalSpecification.Type.ROLE, new Identifier(\"PUBLIC\")),\n                         true));\n-        assertStatement(\"GRANT ALL PRIVILEGES ON t TO USER u\",\n+        assertStatement(\"GRANT ALL PRIVILEGES ON TABLE t TO USER u\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEyNTIzOA==", "bodyText": "Correct", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r452125238", "createdAt": "2020-07-09T10:37:40Z", "author": {"login": "lukasz-walkiewicz"}, "path": "presto-parser/src/test/java/io/prestosql/sql/parser/TestSqlParser.java", "diffHunk": "@@ -1623,30 +1624,38 @@ public void testGrant()\n         assertStatement(\"GRANT INSERT, DELETE ON t TO u\",\n                 new Grant(\n                         Optional.of(ImmutableList.of(\"INSERT\", \"DELETE\")),\n-                        false,\n+                        Optional.empty(),\n                         QualifiedName.of(\"t\"),\n                         new PrincipalSpecification(PrincipalSpecification.Type.UNSPECIFIED, new Identifier(\"u\")),\n                         false));\n         assertStatement(\"GRANT SELECT ON t TO ROLE PUBLIC WITH GRANT OPTION\",\n                 new Grant(\n                         Optional.of(ImmutableList.of(\"SELECT\")),\n-                        false, QualifiedName.of(\"t\"),\n+                        Optional.empty(),\n+                        QualifiedName.of(\"t\"),\n                         new PrincipalSpecification(PrincipalSpecification.Type.ROLE, new Identifier(\"PUBLIC\")),\n                         true));\n-        assertStatement(\"GRANT ALL PRIVILEGES ON t TO USER u\",\n+        assertStatement(\"GRANT ALL PRIVILEGES ON TABLE t TO USER u\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA1MTUwOQ=="}, "originalCommit": null, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTg4NTU0OnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/java/io/prestosql/sql/SqlFormatter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODoyMDo0OVrOGygO1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODoyMDo0OVrOGygO1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYxMDA2OA==", "bodyText": "don't append   when node.getType().isEmpty(), same for grant", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r455610068", "createdAt": "2020-07-16T08:20:49Z", "author": {"login": "kokosing"}, "path": "presto-parser/src/main/java/io/prestosql/sql/SqlFormatter.java", "diffHunk": "@@ -1366,10 +1367,11 @@ public Void visitRevoke(Revoke node, Integer indent)\n             }\n \n             builder.append(\" ON \");\n-            if (node.isTable()) {\n-                builder.append(\"TABLE \");\n+            if (node.getType().isPresent()) {\n+                builder.append(node.getType().get().toString());\n             }\n-            builder.append(node.getTableName())\n+            builder.append(\" \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjI4MDI5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/LegacyAccessControl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODoxOTowMVrOGzJ54A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODoxOTowMVrOGzJ54A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5MjgzMg==", "bodyText": "I think this should accept a Set<Privilege> like Metadata::grant*. No change request, just for consideration for follow up because we would need to change check for tables as well.", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r456292832", "createdAt": "2020-07-17T08:19:01Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/LegacyAccessControl.java", "diffHunk": "@@ -247,6 +247,16 @@ public void checkCanSetCatalogSessionProperty(ConnectorSecurityContext context,\n     {\n     }\n \n+    @Override\n+    public void checkCanGrantSchemaPrivilege(ConnectorSecurityContext context, Privilege privilege, String schemaName, PrestoPrincipal grantee, boolean grantOption)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjI4NjYyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/connector/MockConnectorSchemaAccessControl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODoyMDo1NFrOGzJ9oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODoyMDo1NFrOGzJ9oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5Mzc5Mg==", "bodyText": "MockConnectorAccessControl? So it could be generic for other use cases?", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r456293792", "createdAt": "2020-07-17T08:20:54Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/connector/MockConnectorSchemaAccessControl.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.connector;\n+\n+import io.prestosql.plugin.base.security.AllowAllAccessControl;\n+import io.prestosql.spi.connector.ConnectorSecurityContext;\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.spi.security.Privilege;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static io.prestosql.spi.security.AccessDeniedException.denyGrantSchemaPrivilege;\n+import static io.prestosql.spi.security.AccessDeniedException.denyRevokeSchemaPrivilege;\n+import static java.util.Objects.requireNonNull;\n+\n+class MockConnectorSchemaAccessControl", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjI4NzcwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/connector/MockConnectorSchemaAccessControl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODoyMToxMVrOGzJ-SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODoyMToxMVrOGzJ-SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5Mzk2MA==", "bodyText": "Make it optional. If it is empty let it work as allow all.", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r456293960", "createdAt": "2020-07-17T08:21:11Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/connector/MockConnectorSchemaAccessControl.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.connector;\n+\n+import io.prestosql.plugin.base.security.AllowAllAccessControl;\n+import io.prestosql.spi.connector.ConnectorSecurityContext;\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.spi.security.Privilege;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static io.prestosql.spi.security.AccessDeniedException.denyGrantSchemaPrivilege;\n+import static io.prestosql.spi.security.AccessDeniedException.denyRevokeSchemaPrivilege;\n+import static java.util.Objects.requireNonNull;\n+\n+class MockConnectorSchemaAccessControl\n+        extends AllowAllAccessControl\n+{\n+    private static final String INFORMATION_SCHEMA = \"information_schema\";\n+\n+    private final SchemaGrants schemaGrants;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjI4OTU3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/connector/SchemaGrants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODoyMTozOVrOGzJ_Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODoyMTozOVrOGzJ_Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5NDIzOA==", "bodyText": "public?", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r456294238", "createdAt": "2020-07-17T08:21:39Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/connector/SchemaGrants.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.connector;\n+\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.spi.security.Privilege;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static io.prestosql.spi.security.PrincipalType.USER;\n+import static java.util.Objects.requireNonNull;\n+\n+class SchemaGrants", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjI4OTk2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/connector/SchemaGrants.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODoyMTo0NlrOGzJ_nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQyMDo1NjoxOVrOGzyTNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5NDMwMw==", "bodyText": "just use Set. What am I missing?", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r456294303", "createdAt": "2020-07-17T08:21:46Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/connector/SchemaGrants.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.connector;\n+\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.spi.security.Privilege;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static io.prestosql.spi.security.PrincipalType.USER;\n+import static java.util.Objects.requireNonNull;\n+\n+class SchemaGrants\n+{\n+    private final Map<SchemaGrant, SchemaGrant> grants = new HashMap<>(); // Using map to be able to manipulate an element on insert", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgyMTMzMA==", "bodyText": "Set doesn't have a method to get an existing entry. I've left a comment.", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r456821330", "createdAt": "2020-07-18T19:41:26Z", "author": {"login": "lukasz-walkiewicz"}, "path": "presto-main/src/test/java/io/prestosql/connector/SchemaGrants.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.connector;\n+\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.spi.security.Privilege;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static io.prestosql.spi.security.PrincipalType.USER;\n+import static java.util.Objects.requireNonNull;\n+\n+class SchemaGrants\n+{\n+    private final Map<SchemaGrant, SchemaGrant> grants = new HashMap<>(); // Using map to be able to manipulate an element on insert", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5NDMwMw=="}, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NDY3OA==", "bodyText": "This is very misleading then. And also it looks like you had to hack hashCode/equals methods.\nHow about having a real map? Map<String /* schema */, Grant> or Map<UserAndSchema, Grant>?", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r456954678", "createdAt": "2020-07-19T20:56:19Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/connector/SchemaGrants.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.connector;\n+\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.spi.security.Privilege;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static io.prestosql.spi.security.PrincipalType.USER;\n+import static java.util.Objects.requireNonNull;\n+\n+class SchemaGrants\n+{\n+    private final Map<SchemaGrant, SchemaGrant> grants = new HashMap<>(); // Using map to be able to manipulate an element on insert", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5NDMwMw=="}, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjI5ODc2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/connector/SchemaGrants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODoyNDoxNlrOGzKE8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODoyNDoxNlrOGzKE8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5NTY2NA==", "bodyText": "isGrantable or canGrant", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r456295664", "createdAt": "2020-07-17T08:24:16Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/connector/SchemaGrants.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.connector;\n+\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.spi.security.Privilege;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static io.prestosql.spi.security.PrincipalType.USER;\n+import static java.util.Objects.requireNonNull;\n+\n+class SchemaGrants\n+{\n+    private final Map<SchemaGrant, SchemaGrant> grants = new HashMap<>(); // Using map to be able to manipulate an element on insert\n+\n+    void grant(PrestoPrincipal principal, String schemaName, Set<Privilege> privileges, boolean grantOption)\n+    {\n+        privileges.forEach(privilege -> {\n+            SchemaGrant grant = new SchemaGrant(principal, schemaName, privilege, grantOption);\n+            // OR on grant options if grant already exists\n+            if (grants.containsKey(grant)) {\n+                grant = new SchemaGrant(principal, schemaName, privilege, grantOption || grants.get(grant).grantOption);\n+            }\n+            grants.put(grant, grant);\n+        });\n+    }\n+\n+    void revoke(PrestoPrincipal principal, String schemaName, Set<Privilege> privileges, boolean grantOption)\n+    {\n+        privileges.forEach(privilege -> grants.remove(new SchemaGrant(principal, schemaName, privilege, grantOption)));\n+    }\n+\n+    boolean isAllowed(String user, String schemaName, Privilege privilege)\n+    {\n+        if (grants.isEmpty()) {\n+            return true;\n+        }\n+        return grants.containsKey(new SchemaGrant(new PrestoPrincipal(USER, user), schemaName, privilege));\n+    }\n+\n+    boolean isAllowedWithGrant(String user, String schemaName, Privilege privilege)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjMxMDQ1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/connector/MockConnector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODoyNzoxNFrOGzKLxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODoyNzoxNFrOGzKLxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5NzQxNA==", "bodyText": "Can you please add on top of this few tests for GRANT/REVOKE table privileges?", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r456297414", "createdAt": "2020-07-17T08:27:14Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/connector/MockConnector.java", "diffHunk": "@@ -0,0 +1,264 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjMxOTQ4OnYy", "diffSide": "RIGHT", "path": "presto-tests/src/test/java/io/prestosql/execution/TestGrant.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODoyOTo1MlrOGzKRdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODoyOTo1MlrOGzKRdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5ODg3MQ==", "bodyText": "\u2764\ufe0f It looks very nice!", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r456298871", "createdAt": "2020-07-17T08:29:52Z", "author": {"login": "kokosing"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestGrant.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.prestosql.Session;\n+import io.prestosql.connector.MockConnectorFactory;\n+import io.prestosql.connector.MockConnectorPlugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.Privilege;\n+import io.prestosql.sql.query.QueryAssertions;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.EnumSet;\n+\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestGrant", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjMyMTQ4OnYy", "diffSide": "RIGHT", "path": "presto-tests/src/test/java/io/prestosql/execution/TestGrant.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODozMDoxOVrOGzKSnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODozMDoxOVrOGzKSnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5OTE2NA==", "bodyText": "you don't init method to setup admin and other sessions", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r456299164", "createdAt": "2020-07-17T08:30:19Z", "author": {"login": "kokosing"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestGrant.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.prestosql.Session;\n+import io.prestosql.connector.MockConnectorFactory;\n+import io.prestosql.connector.MockConnectorPlugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.Privilege;\n+import io.prestosql.sql.query.QueryAssertions;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.EnumSet;\n+\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestGrant\n+{\n+    private Session admin;\n+    private Session alice;\n+    private Session bob;\n+    private DistributedQueryRunner queryRunner;\n+    private QueryAssertions assertions;\n+\n+    @BeforeClass\n+    public void init()\n+            throws Exception\n+    {\n+        admin = testSessionBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjMyMzA2OnYy", "diffSide": "RIGHT", "path": "presto-tests/src/test/java/io/prestosql/execution/TestGrant.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODozMDo1M1rOGzKTsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODozMDo1M1rOGzKTsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5OTQ0MQ==", "bodyText": "assertThat assertThat?", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r456299441", "createdAt": "2020-07-17T08:30:53Z", "author": {"login": "kokosing"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestGrant.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.prestosql.Session;\n+import io.prestosql.connector.MockConnectorFactory;\n+import io.prestosql.connector.MockConnectorPlugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.Privilege;\n+import io.prestosql.sql.query.QueryAssertions;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.EnumSet;\n+\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestGrant\n+{\n+    private Session admin;\n+    private Session alice;\n+    private Session bob;\n+    private DistributedQueryRunner queryRunner;\n+    private QueryAssertions assertions;\n+\n+    @BeforeClass\n+    public void init()\n+            throws Exception\n+    {\n+        admin = testSessionBuilder()\n+                .setIdentity(Identity.ofUser(\"admin\"))\n+                .setCatalog(\"local\")\n+                .setSchema(\"default\")\n+                .build();\n+\n+        alice = testSessionBuilder()\n+                .setIdentity(Identity.ofUser(\"alice\"))\n+                .setCatalog(\"local\")\n+                .setSchema(\"default\")\n+                .build();\n+\n+        bob = testSessionBuilder()\n+                .setIdentity(Identity.ofUser(\"bob\"))\n+                .setCatalog(\"local\")\n+                .setSchema(\"default\")\n+                .build();\n+\n+        queryRunner = DistributedQueryRunner.builder(admin).build();\n+\n+        MockConnectorFactory connectorFactory = MockConnectorFactory.builder()\n+                .withListSchemaNames(session -> ImmutableList.of(\"information_schema\", \"default\"))\n+                .withSchemaGrants(\"admin\", \"default\", EnumSet.allOf(Privilege.class), true)\n+                .withSchemaGrants(\"alice\", \"default\", ImmutableSet.of(Privilege.SELECT), true)\n+                .build();\n+\n+        queryRunner.installPlugin(new MockConnectorPlugin(connectorFactory));\n+\n+        queryRunner.createCatalog(\"local\", \"mock\");\n+\n+        assertions = new QueryAssertions(queryRunner);\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void teardown()\n+    {\n+        assertions.close();\n+        assertions = null;\n+    }\n+\n+    @Test\n+    public void testDefaultGrants()\n+    {\n+        assertThat(assertions.query(\"SHOW SCHEMAS FROM local\", admin).assertThat().matches(\"VALUES (VARCHAR 'information_schema'), (VARCHAR 'default')\"));\n+        assertThat(assertions.query(\"SHOW SCHEMAS FROM local\", alice).assertThat().matches(\"VALUES (VARCHAR 'information_schema'), (VARCHAR 'default')\"));\n+        assertThat(assertions.query(\"SHOW SCHEMAS FROM local\", bob).assertThat().matches(\"VALUES (VARCHAR 'information_schema')\"));\n+    }\n+\n+    @Test\n+    public void testGrantOnSchema()\n+    {\n+        queryRunner.execute(admin, \"GRANT SELECT ON SCHEMA default TO bob\");\n+\n+        assertThat(assertions.query(\"SHOW SCHEMAS FROM local\", bob).assertThat().matches(\"VALUES (VARCHAR 'information_schema'), (VARCHAR 'default')\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjMyMzcxOnYy", "diffSide": "RIGHT", "path": "presto-tests/src/test/java/io/prestosql/execution/TestGrant.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODozMTowM1rOGzKUGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODozMTowM1rOGzKUGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5OTU0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(assertions.query(\"SHOW SCHEMAS FROM local\", bob).assertThat().matches(\"VALUES (VARCHAR 'information_schema'), (VARCHAR 'default')\"));\n          \n          \n            \n                    assertThat(assertions.query(\"SHOW SCHEMAS FROM local\", bob).assertThat()\n          \n          \n            \n                         .matches(\"VALUES (VARCHAR 'information_schema'), (VARCHAR 'default')\"));", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r456299545", "createdAt": "2020-07-17T08:31:03Z", "author": {"login": "kokosing"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestGrant.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.prestosql.Session;\n+import io.prestosql.connector.MockConnectorFactory;\n+import io.prestosql.connector.MockConnectorPlugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.Privilege;\n+import io.prestosql.sql.query.QueryAssertions;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.EnumSet;\n+\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestGrant\n+{\n+    private Session admin;\n+    private Session alice;\n+    private Session bob;\n+    private DistributedQueryRunner queryRunner;\n+    private QueryAssertions assertions;\n+\n+    @BeforeClass\n+    public void init()\n+            throws Exception\n+    {\n+        admin = testSessionBuilder()\n+                .setIdentity(Identity.ofUser(\"admin\"))\n+                .setCatalog(\"local\")\n+                .setSchema(\"default\")\n+                .build();\n+\n+        alice = testSessionBuilder()\n+                .setIdentity(Identity.ofUser(\"alice\"))\n+                .setCatalog(\"local\")\n+                .setSchema(\"default\")\n+                .build();\n+\n+        bob = testSessionBuilder()\n+                .setIdentity(Identity.ofUser(\"bob\"))\n+                .setCatalog(\"local\")\n+                .setSchema(\"default\")\n+                .build();\n+\n+        queryRunner = DistributedQueryRunner.builder(admin).build();\n+\n+        MockConnectorFactory connectorFactory = MockConnectorFactory.builder()\n+                .withListSchemaNames(session -> ImmutableList.of(\"information_schema\", \"default\"))\n+                .withSchemaGrants(\"admin\", \"default\", EnumSet.allOf(Privilege.class), true)\n+                .withSchemaGrants(\"alice\", \"default\", ImmutableSet.of(Privilege.SELECT), true)\n+                .build();\n+\n+        queryRunner.installPlugin(new MockConnectorPlugin(connectorFactory));\n+\n+        queryRunner.createCatalog(\"local\", \"mock\");\n+\n+        assertions = new QueryAssertions(queryRunner);\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void teardown()\n+    {\n+        assertions.close();\n+        assertions = null;\n+    }\n+\n+    @Test\n+    public void testDefaultGrants()\n+    {\n+        assertThat(assertions.query(\"SHOW SCHEMAS FROM local\", admin).assertThat().matches(\"VALUES (VARCHAR 'information_schema'), (VARCHAR 'default')\"));\n+        assertThat(assertions.query(\"SHOW SCHEMAS FROM local\", alice).assertThat().matches(\"VALUES (VARCHAR 'information_schema'), (VARCHAR 'default')\"));\n+        assertThat(assertions.query(\"SHOW SCHEMAS FROM local\", bob).assertThat().matches(\"VALUES (VARCHAR 'information_schema')\"));\n+    }\n+\n+    @Test\n+    public void testGrantOnSchema()\n+    {\n+        queryRunner.execute(admin, \"GRANT SELECT ON SCHEMA default TO bob\");\n+\n+        assertThat(assertions.query(\"SHOW SCHEMAS FROM local\", bob).assertThat().matches(\"VALUES (VARCHAR 'information_schema'), (VARCHAR 'default')\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjMyNTA5OnYy", "diffSide": "RIGHT", "path": "presto-tests/src/test/java/io/prestosql/execution/TestGrant.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODozMToyNFrOGzKU6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODozMToyNFrOGzKU6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5OTc1NA==", "bodyText": "Add tests for:\nGRANT/REVOKE ALL\nGRANT/REVOKE GRANT OPTION", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r456299754", "createdAt": "2020-07-17T08:31:24Z", "author": {"login": "kokosing"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestGrant.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.prestosql.Session;\n+import io.prestosql.connector.MockConnectorFactory;\n+import io.prestosql.connector.MockConnectorPlugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.Privilege;\n+import io.prestosql.sql.query.QueryAssertions;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.EnumSet;\n+\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestGrant\n+{\n+    private Session admin;\n+    private Session alice;\n+    private Session bob;\n+    private DistributedQueryRunner queryRunner;\n+    private QueryAssertions assertions;\n+\n+    @BeforeClass\n+    public void init()\n+            throws Exception\n+    {\n+        admin = testSessionBuilder()\n+                .setIdentity(Identity.ofUser(\"admin\"))\n+                .setCatalog(\"local\")\n+                .setSchema(\"default\")\n+                .build();\n+\n+        alice = testSessionBuilder()\n+                .setIdentity(Identity.ofUser(\"alice\"))\n+                .setCatalog(\"local\")\n+                .setSchema(\"default\")\n+                .build();\n+\n+        bob = testSessionBuilder()\n+                .setIdentity(Identity.ofUser(\"bob\"))\n+                .setCatalog(\"local\")\n+                .setSchema(\"default\")\n+                .build();\n+\n+        queryRunner = DistributedQueryRunner.builder(admin).build();\n+\n+        MockConnectorFactory connectorFactory = MockConnectorFactory.builder()\n+                .withListSchemaNames(session -> ImmutableList.of(\"information_schema\", \"default\"))\n+                .withSchemaGrants(\"admin\", \"default\", EnumSet.allOf(Privilege.class), true)\n+                .withSchemaGrants(\"alice\", \"default\", ImmutableSet.of(Privilege.SELECT), true)\n+                .build();\n+\n+        queryRunner.installPlugin(new MockConnectorPlugin(connectorFactory));\n+\n+        queryRunner.createCatalog(\"local\", \"mock\");\n+\n+        assertions = new QueryAssertions(queryRunner);\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void teardown()\n+    {\n+        assertions.close();\n+        assertions = null;\n+    }\n+\n+    @Test\n+    public void testDefaultGrants()\n+    {\n+        assertThat(assertions.query(\"SHOW SCHEMAS FROM local\", admin).assertThat().matches(\"VALUES (VARCHAR 'information_schema'), (VARCHAR 'default')\"));\n+        assertThat(assertions.query(\"SHOW SCHEMAS FROM local\", alice).assertThat().matches(\"VALUES (VARCHAR 'information_schema'), (VARCHAR 'default')\"));\n+        assertThat(assertions.query(\"SHOW SCHEMAS FROM local\", bob).assertThat().matches(\"VALUES (VARCHAR 'information_schema')\"));\n+    }\n+\n+    @Test\n+    public void testGrantOnSchema()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzQyMDEwOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/sql/grant.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOTowMzoyNVrOHKs_6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOTowMzoyNVrOHKs_6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4NTA2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                ON ( table_name | TABLE table_name | SCHEMA schema_name) TO ( user | USER user | ROLE role )\n          \n          \n            \n                ON ( table_name | TABLE table_name | SCHEMA schema_name) \n          \n          \n            \n                TO ( user | USER user | ROLE role )", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r480985066", "createdAt": "2020-09-01T09:03:25Z", "author": {"login": "kokosing"}, "path": "presto-docs/src/main/sphinx/sql/grant.rst", "diffHunk": "@@ -8,7 +8,7 @@ Synopsis\n .. code-block:: none\n \n     GRANT ( privilege [, ...] | ( ALL PRIVILEGES ) )\n-    ON [ TABLE ] table_name TO ( user | USER user | ROLE role )\n+    ON ( table_name | TABLE table_name | SCHEMA schema_name) TO ( user | USER user | ROLE role )", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzQyNDczOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/sql/revoke.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOTowNDoyOVrOHKtChw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOTowNDoyOVrOHKtChw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4NTczNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                ON ( table_name | TABLE table_name | SCHEMA schema_name ) FROM ( user | USER user | ROLE role )\n          \n          \n            \n                ON ( table_name | TABLE table_name | SCHEMA schema_name ) \n          \n          \n            \n                FROM ( user | USER user | ROLE role )", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r480985735", "createdAt": "2020-09-01T09:04:29Z", "author": {"login": "kokosing"}, "path": "presto-docs/src/main/sphinx/sql/revoke.rst", "diffHunk": "@@ -9,7 +9,7 @@ Synopsis\n \n     REVOKE [ GRANT OPTION FOR ]\n     ( privilege [, ...] | ALL PRIVILEGES )\n-    ON [ TABLE ] table_name FROM ( user | USER user | ROLE role )\n+    ON ( table_name | TABLE table_name | SCHEMA schema_name ) FROM ( user | USER user | ROLE role )", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzQyNzE5OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/sql/grant.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOTowNTowNVrOHKtEAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOTowNTowNVrOHKtEAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4NjExNQ==", "bodyText": "Mention the semantic of grant privileges to table (in separate commit) and then for schema", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r480986115", "createdAt": "2020-09-01T09:05:05Z", "author": {"login": "kokosing"}, "path": "presto-docs/src/main/sphinx/sql/grant.rst", "diffHunk": "@@ -8,7 +8,7 @@ Synopsis\n .. code-block:: none\n \n     GRANT ( privilege [, ...] | ( ALL PRIVILEGES ) )\n-    ON [ TABLE ] table_name TO ( user | USER user | ROLE role )\n+    ON ( table_name | TABLE table_name | SCHEMA schema_name) TO ( user | USER user | ROLE role )\n     [ WITH GRANT OPTION ]\n \n Description", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzQyNzY0OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/sql/revoke.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOTowNToxM1rOHKtERA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOTowNToxM1rOHKtERA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4NjE4MA==", "bodyText": "Mention the semantic of revoke privileges to table (in separate commit) and then for schema", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r480986180", "createdAt": "2020-09-01T09:05:13Z", "author": {"login": "kokosing"}, "path": "presto-docs/src/main/sphinx/sql/revoke.rst", "diffHunk": "@@ -9,7 +9,7 @@ Synopsis\n \n     REVOKE [ GRANT OPTION FOR ]\n     ( privilege [, ...] | ALL PRIVILEGES )\n-    ON [ TABLE ] table_name FROM ( user | USER user | ROLE role )\n+    ON ( table_name | TABLE table_name | SCHEMA schema_name ) FROM ( user | USER user | ROLE role )\n \n Description", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzQzNDI3OnYy", "diffSide": "RIGHT", "path": "presto-tests/src/test/java/io/prestosql/common/Randoms.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOTowNzoxMFrOHKtIVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOTowNzoxMFrOHKtIVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4NzIyMw==", "bodyText": "io.prestosql.testing.sql.TestTable#randomTableSuffix?", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r480987223", "createdAt": "2020-09-01T09:07:10Z", "author": {"login": "kokosing"}, "path": "presto-tests/src/test/java/io/prestosql/common/Randoms.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.common;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+public final class Randoms\n+{\n+    private Randoms() {}\n+\n+    public static String randomUsername()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzQ1NTEyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/RevokeTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOToxMjo0M1rOHKtUwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOToxMjo0M1rOHKtUwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5MDQwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!metadata.catalogExists(session, schemaName.getCatalogName())) {\n          \n          \n            \n                        throw semanticException(CATALOG_NOT_FOUND, statement, \"Catalog '%s' does not exist\", schemaName.getCatalogName());\n          \n          \n            \n                    }\n          \n      \n    \n    \n  \n\nI think this is not needed, the below check is good enough.", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r480990400", "createdAt": "2020-09-01T09:12:43Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/execution/RevokeTask.java", "diffHunk": "@@ -49,13 +54,52 @@ public String getName()\n     @Override\n     public ListenableFuture<?> execute(Revoke statement, TransactionManager transactionManager, Metadata metadata, AccessControl accessControl, QueryStateMachine stateMachine, List<Expression> parameters)\n     {\n-        Session session = stateMachine.getSession();\n-        QualifiedObjectName tableName = createQualifiedObjectName(session, statement, statement.getTableName());\n+        if (statement.getType().filter(GrantOnType.SCHEMA::equals).isPresent()) {\n+            executeRevokeOnSchema(stateMachine.getSession(), statement, metadata, accessControl);\n+        }\n+        else {\n+            executeRevokeOnTable(stateMachine.getSession(), statement, metadata, accessControl);\n+        }\n+        return immediateFuture(null);\n+    }\n+\n+    private void executeRevokeOnSchema(Session session, Revoke statement, Metadata metadata, AccessControl accessControl)\n+    {\n+        CatalogSchemaName schemaName = createCatalogSchemaName(session, statement, Optional.of(statement.getName()));\n+\n+        if (!metadata.catalogExists(session, schemaName.getCatalogName())) {\n+            throw semanticException(CATALOG_NOT_FOUND, statement, \"Catalog '%s' does not exist\", schemaName.getCatalogName());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzQ1NzA5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/GrantTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOToxMzoxMVrOHKtV5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOToxMzoxMVrOHKtV5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5MDY5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!metadata.catalogExists(session, schemaName.getCatalogName())) {\n          \n          \n            \n                        throw semanticException(CATALOG_NOT_FOUND, statement, \"Catalog '%s' does not exist\", schemaName.getCatalogName());\n          \n          \n            \n                    }\n          \n      \n    \n    \n  \n\nI think this is not needed, the below check is good enough.", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r480990694", "createdAt": "2020-09-01T09:13:11Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/execution/GrantTask.java", "diffHunk": "@@ -49,13 +54,53 @@ public String getName()\n     @Override\n     public ListenableFuture<?> execute(Grant statement, TransactionManager transactionManager, Metadata metadata, AccessControl accessControl, QueryStateMachine stateMachine, List<Expression> parameters)\n     {\n-        Session session = stateMachine.getSession();\n-        QualifiedObjectName tableName = createQualifiedObjectName(session, statement, statement.getTableName());\n+        if (statement.getType().filter(GrantOnType.SCHEMA::equals).isPresent()) {\n+            executeGrantOnSchema(stateMachine.getSession(), statement, metadata, accessControl);\n+        }\n+        else {\n+            executeGrantOnTable(stateMachine.getSession(), statement, metadata, accessControl);\n+        }\n+        return immediateFuture(null);\n+    }\n+\n+    private void executeGrantOnSchema(Session session, Grant statement, Metadata metadata, AccessControl accessControl)\n+    {\n+        CatalogSchemaName schemaName = createCatalogSchemaName(session, statement, Optional.of(statement.getName()));\n+\n+        if (!metadata.catalogExists(session, schemaName.getCatalogName())) {\n+            throw semanticException(CATALOG_NOT_FOUND, statement, \"Catalog '%s' does not exist\", schemaName.getCatalogName());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzQ2OTY4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/connector/MockConnectorAccessControl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOToxNjo0N1rOHKtdhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOToxNjo0N1rOHKtdhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5MjY0Nw==", "bodyText": "toImmutableSet", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r480992647", "createdAt": "2020-09-01T09:16:47Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/connector/MockConnectorAccessControl.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.connector;\n+\n+import io.prestosql.plugin.base.security.AllowAllAccessControl;\n+import io.prestosql.spi.connector.ConnectorSecurityContext;\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.spi.security.Privilege;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static io.prestosql.spi.security.AccessDeniedException.denyGrantSchemaPrivilege;\n+import static io.prestosql.spi.security.AccessDeniedException.denyRevokeSchemaPrivilege;\n+import static java.util.Objects.requireNonNull;\n+\n+class MockConnectorAccessControl\n+        extends AllowAllAccessControl\n+{\n+    private static final String INFORMATION_SCHEMA = \"information_schema\";\n+\n+    private final SchemaGrants schemaGrants;\n+\n+    MockConnectorAccessControl(SchemaGrants schemaGrants)\n+    {\n+        this.schemaGrants = requireNonNull(schemaGrants, \"schemaGrants is null\");\n+    }\n+\n+    @Override\n+    public Set<String> filterSchemas(ConnectorSecurityContext context, Set<String> schemaNames)\n+    {\n+        return schemaNames.stream()\n+                .filter(schema ->\n+                        schema.equalsIgnoreCase(INFORMATION_SCHEMA) ||\n+                                Arrays.stream(Privilege.values())\n+                                        .anyMatch(privilege -> schemaGrants.isAllowed(context.getIdentity().getUser(), schema, privilege)))\n+                .collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzQ3MTkyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/connector/MockConnectorAccessControl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOToxNzoyMlrOHKte6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOToxNzoyMlrOHKte6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5MzAwMg==", "bodyText": "you might want to extract this condition as method", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r480993002", "createdAt": "2020-09-01T09:17:22Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/connector/MockConnectorAccessControl.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.connector;\n+\n+import io.prestosql.plugin.base.security.AllowAllAccessControl;\n+import io.prestosql.spi.connector.ConnectorSecurityContext;\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.spi.security.Privilege;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static io.prestosql.spi.security.AccessDeniedException.denyGrantSchemaPrivilege;\n+import static io.prestosql.spi.security.AccessDeniedException.denyRevokeSchemaPrivilege;\n+import static java.util.Objects.requireNonNull;\n+\n+class MockConnectorAccessControl\n+        extends AllowAllAccessControl\n+{\n+    private static final String INFORMATION_SCHEMA = \"information_schema\";\n+\n+    private final SchemaGrants schemaGrants;\n+\n+    MockConnectorAccessControl(SchemaGrants schemaGrants)\n+    {\n+        this.schemaGrants = requireNonNull(schemaGrants, \"schemaGrants is null\");\n+    }\n+\n+    @Override\n+    public Set<String> filterSchemas(ConnectorSecurityContext context, Set<String> schemaNames)\n+    {\n+        return schemaNames.stream()\n+                .filter(schema ->\n+                        schema.equalsIgnoreCase(INFORMATION_SCHEMA) ||\n+                                Arrays.stream(Privilege.values())\n+                                        .anyMatch(privilege -> schemaGrants.isAllowed(context.getIdentity().getUser(), schema, privilege)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzQ3NzMzOnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOToxODo1M1rOHKtiQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOToxODo1M1rOHKtiQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5Mzg1OQ==", "bodyText": "In docs  you mentioned that SHOW GRANTS ON SCHEMA is supported, please undo the change in docs", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r480993859", "createdAt": "2020-09-01T09:18:53Z", "author": {"login": "kokosing"}, "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "diffHunk": "@@ -87,12 +87,14 @@ statement\n     | SET ROLE (ALL | NONE | role=identifier)                          #setRole\n     | GRANT\n         (privilege (',' privilege)* | ALL PRIVILEGES)\n-        ON TABLE? qualifiedName TO grantee=principal\n+        ON (SCHEMA | TABLE)? qualifiedName\n+        TO grantee=principal\n         (WITH GRANT OPTION)?                                           #grant\n     | REVOKE\n         (GRANT OPTION FOR)?\n         (privilege (',' privilege)* | ALL PRIVILEGES)\n-        ON TABLE? qualifiedName FROM grantee=principal                 #revoke\n+        ON (SCHEMA | TABLE)? qualifiedName\n+        FROM grantee=principal                                         #revoke\n     | SHOW GRANTS\n         (ON TABLE? qualifiedName)?                                     #showGrants", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzQ4MzQyOnYy", "diffSide": "RIGHT", "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedAccessControl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOToyMDozNVrOHKtl_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOToyMDozNVrOHKtl_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5NDgxNA==", "bodyText": "Please add tests for that", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r480994814", "createdAt": "2020-09-01T09:20:35Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedAccessControl.java", "diffHunk": "@@ -306,6 +308,22 @@ public void checkCanSetCatalogSessionProperty(ConnectorSecurityContext context,\n         }\n     }\n \n+    @Override\n+    public void checkCanGrantSchemaPrivilege(ConnectorSecurityContext context, Privilege privilege, String schemaName, PrestoPrincipal grantee, boolean grantOption)\n+    {\n+        if (!isSchemaOwner(context, schemaName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzQ4Mzg1OnYy", "diffSide": "RIGHT", "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedSystemAccessControl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOToyMDo0MlrOHKtmQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOToyMDo0MlrOHKtmQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5NDg4MA==", "bodyText": "Please add tests for that", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r480994880", "createdAt": "2020-09-01T09:20:42Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedSystemAccessControl.java", "diffHunk": "@@ -660,6 +662,28 @@ public void checkCanSetCatalogSessionProperty(SystemSecurityContext context, Str\n     {\n     }\n \n+    @Override\n+    public void checkCanGrantSchemaPrivilege(SystemSecurityContext context, Privilege privilege, CatalogSchemaName schema, PrestoPrincipal grantee, boolean grantOption)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzQ5MTI5OnYy", "diffSide": "RIGHT", "path": "presto-tests/src/test/java/io/prestosql/execution/TestGrant.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOToyMjo0M1rOHKtq9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOToyMjo0M1rOHKtq9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5NjA4Ng==", "bodyText": "While you are it, can you please also add few tests for GRANT/REVOKE ON TABLE?", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r480996086", "createdAt": "2020-09-01T09:22:43Z", "author": {"login": "kokosing"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestGrant.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.MockConnectorFactory;\n+import io.prestosql.connector.MockConnectorPlugin;\n+import io.prestosql.connector.MutableSchemaGrants;\n+import io.prestosql.connector.SchemaGrants;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.spi.security.Privilege;\n+import io.prestosql.sql.query.QueryAssertions;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.EnumSet;\n+\n+import static io.prestosql.common.Randoms.randomUsername;\n+import static io.prestosql.spi.security.PrincipalType.USER;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static java.lang.String.format;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+public class TestGrant\n+{\n+    private final Session admin = testSessionBuilder()\n+            .setIdentity(Identity.ofUser(\"admin\"))\n+            .setCatalog(\"local\")\n+            .setSchema(\"default\")\n+            .build();\n+\n+    private DistributedQueryRunner queryRunner;\n+    private QueryAssertions assertions;\n+\n+    private String username;\n+    private Session user;\n+\n+    @BeforeClass\n+    public void initClass()\n+            throws Exception\n+    {\n+        queryRunner = DistributedQueryRunner.builder(admin).build();\n+\n+        SchemaGrants schemaGrants = new MutableSchemaGrants();\n+        schemaGrants.grant(new PrestoPrincipal(USER, admin.getUser()), \"default\", EnumSet.allOf(Privilege.class), true);\n+\n+        MockConnectorFactory connectorFactory = MockConnectorFactory.builder()\n+                .withListSchemaNames(session -> ImmutableList.of(\"information_schema\", \"default\"))\n+                .withSchemaGrants(schemaGrants)\n+                .build();\n+\n+        queryRunner.installPlugin(new MockConnectorPlugin(connectorFactory));\n+\n+        queryRunner.createCatalog(\"local\", \"mock\");\n+\n+        assertions = new QueryAssertions(queryRunner);\n+    }\n+\n+    @BeforeTest\n+    public void initTest()\n+    {\n+        username = randomUsername();\n+        user = testSessionBuilder()\n+                .setIdentity(Identity.ofUser(username))\n+                .setCatalog(\"local\")\n+                .setSchema(\"default\")\n+                .build();\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void teardown()\n+    {\n+        assertions.close();\n+        assertions = null;\n+    }\n+\n+    @Test\n+    public void testDefaultGrants()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzQ5NDQ0OnYy", "diffSide": "RIGHT", "path": "presto-tests/src/test/java/io/prestosql/execution/TestGrant.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOToyMzozNFrOHKts-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOToyMzozNFrOHKts-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5NjYwMA==", "bodyText": "Please also add tests for SHOW GRANTS and information_schema.table_privileges while using GRANT/REVOKE ON SCHEMA", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r480996600", "createdAt": "2020-09-01T09:23:34Z", "author": {"login": "kokosing"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestGrant.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.MockConnectorFactory;\n+import io.prestosql.connector.MockConnectorPlugin;\n+import io.prestosql.connector.MutableSchemaGrants;\n+import io.prestosql.connector.SchemaGrants;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.spi.security.Privilege;\n+import io.prestosql.sql.query.QueryAssertions;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.EnumSet;\n+\n+import static io.prestosql.common.Randoms.randomUsername;\n+import static io.prestosql.spi.security.PrincipalType.USER;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static java.lang.String.format;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+public class TestGrant", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzQ5Njg0OnYy", "diffSide": "RIGHT", "path": "presto-tests/src/test/java/io/prestosql/execution/TestRevoke.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOToyNDoxNFrOHKtufw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOToyNDoxNFrOHKtufw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5Njk5MQ==", "bodyText": "I would merge TestGrant with TestRevoke.  :)", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r480996991", "createdAt": "2020-09-01T09:24:14Z", "author": {"login": "kokosing"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestRevoke.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.prestosql.Session;\n+import io.prestosql.connector.MockConnectorFactory;\n+import io.prestosql.connector.MockConnectorPlugin;\n+import io.prestosql.connector.MutableSchemaGrants;\n+import io.prestosql.connector.SchemaGrants;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.spi.security.Privilege;\n+import io.prestosql.sql.query.QueryAssertions;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.EnumSet;\n+\n+import static io.prestosql.common.Randoms.randomUsername;\n+import static io.prestosql.spi.security.PrincipalType.USER;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static java.lang.String.format;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+public class TestRevoke", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjk1Njc0OnYy", "diffSide": "RIGHT", "path": "presto-tests/src/test/java/io/prestosql/execution/TestGrantOnSchema.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToxNTo0MlrOHrKnAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToxNTo0MlrOHrKnAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAyNDY0Mg==", "bodyText": "just session?", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r515024642", "createdAt": "2020-10-30T11:15:42Z", "author": {"login": "kokosing"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestGrantOnSchema.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.Grants;\n+import io.prestosql.connector.MockConnectorFactory;\n+import io.prestosql.connector.MockConnectorPlugin;\n+import io.prestosql.connector.MutableGrants;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.spi.security.Privilege;\n+import io.prestosql.sql.query.QueryAssertions;\n+import io.prestosql.testing.DataProviders;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.EnumSet;\n+\n+import static io.prestosql.common.Randoms.randomUsername;\n+import static io.prestosql.spi.security.PrincipalType.USER;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static java.lang.String.format;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+public class TestGrantOnSchema\n+{\n+    private final Session admin = sessionOf(\"admin\");\n+    private final Grants<String> schemaGrants = new MutableGrants<>();\n+    private DistributedQueryRunner queryRunner;\n+    private QueryAssertions assertions;\n+\n+    @BeforeClass\n+    public void initClass()\n+            throws Exception\n+    {\n+        queryRunner = DistributedQueryRunner.builder(admin).build();\n+        MockConnectorFactory connectorFactory = MockConnectorFactory.builder()\n+                .withListSchemaNames(session -> ImmutableList.of(\"information_schema\", \"default\"))\n+                .withListTables((session, schema) ->\n+                        \"default\".equalsIgnoreCase(schema) ? ImmutableList.of(new SchemaTableName(schema, \"table_one\")) : ImmutableList.of())\n+                .withSchemaGrants(schemaGrants)\n+                .build();\n+        queryRunner.installPlugin(new MockConnectorPlugin(connectorFactory));\n+        queryRunner.createCatalog(\"local\", \"mock\");\n+        assertions = new QueryAssertions(queryRunner);\n+        schemaGrants.grant(new PrestoPrincipal(USER, admin.getUser()), \"default\", EnumSet.allOf(Privilege.class), true);\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void teardown()\n+    {\n+        assertions.close();\n+        assertions = null;\n+    }\n+\n+    @Test(dataProviderClass = DataProviders.class, dataProvider = \"trueFalse\")\n+    public void testExistingGrants(boolean grantOption)\n+    {\n+        String username = randomUsername();\n+        Session user = sessionOf(username);\n+        schemaGrants.grant(new PrestoPrincipal(USER, user.getUser()), \"default\", EnumSet.allOf(Privilege.class), grantOption);\n+\n+        assertThat(assertions.query(admin, \"SHOW SCHEMAS FROM local\")).matches(\"VALUES (VARCHAR 'information_schema'), (VARCHAR 'default')\");\n+        assertThat(assertions.query(user, \"SHOW SCHEMAS FROM local\")).matches(\"VALUES (VARCHAR 'information_schema'), (VARCHAR 'default')\");\n+        assertThat(assertions.query(admin, \"SHOW TABLES FROM default\")).matches(\"VALUES (VARCHAR 'table_one')\");\n+        assertThat(assertions.query(user, \"SHOW TABLES FROM default\")).matches(\"VALUES (VARCHAR 'table_one')\");\n+    }\n+\n+    @Test(dataProvider = \"privileges\")\n+    public void testValidGrant(String privilege)\n+    {\n+        String username = randomUsername();\n+        Session user = sessionOf(username);\n+\n+        queryRunner.execute(admin, format(\"GRANT %s ON SCHEMA default TO %s\", privilege, username));\n+\n+        assertThat(assertions.query(user, \"SHOW SCHEMAS FROM local\")).matches(\"VALUES (VARCHAR 'information_schema'), (VARCHAR 'default')\");\n+        assertThat(assertions.query(admin, \"SHOW TABLES FROM default\")).matches(\"VALUES (VARCHAR 'table_one')\");\n+        assertThat(assertions.query(user, \"SHOW TABLES FROM default\")).matches(\"VALUES (VARCHAR 'table_one')\");\n+    }\n+\n+    @Test(dataProvider = \"privileges\")\n+    public void testValidGrantWithGrantOption(String privilege)\n+    {\n+        String username = randomUsername();\n+        Session user = sessionOf(username);\n+\n+        queryRunner.execute(admin, format(\"GRANT %s ON SCHEMA default TO %s WITH GRANT OPTION\", privilege, username));\n+\n+        assertThat(assertions.query(user, \"SHOW SCHEMAS FROM local\")).matches(\"VALUES (VARCHAR 'information_schema'), (VARCHAR 'default')\");\n+        assertThat(assertions.query(user, format(\"GRANT %s ON SCHEMA default TO %s\", privilege, randomUsername()))).matches(\"VALUES (BOOLEAN 'TRUE')\");\n+        assertThat(assertions.query(user, format(\"GRANT %s ON SCHEMA default TO %s WITH GRANT OPTION\", privilege, randomUsername()))).matches(\"VALUES (BOOLEAN 'TRUE')\");\n+    }\n+\n+    @Test(dataProvider = \"privileges\")\n+    public void testGrantOnNonExistingCatalog(String privilege)\n+    {\n+        assertThatThrownBy(() -> queryRunner.execute(admin, format(\"GRANT %s ON SCHEMA missing_catalog.missing_schema TO %s\", privilege, randomUsername())))\n+                .hasMessageContaining(\"Schema 'missing_catalog.missing_schema' does not exist\");\n+    }\n+\n+    @Test(dataProvider = \"privileges\")\n+    public void testGrantOnNonExistingSchema(String privilege)\n+    {\n+        assertThatThrownBy(() -> queryRunner.execute(admin, format(\"GRANT %s ON SCHEMA missing_schema TO %s\", privilege, randomUsername())))\n+                .hasMessageContaining(\"Schema 'local.missing_schema' does not exist\");\n+    }\n+\n+    @Test(dataProvider = \"privileges\")\n+    public void testAccessDenied(String privilege)\n+    {\n+        assertThatThrownBy(() -> queryRunner.execute(sessionOf(randomUsername()), format(\"GRANT %s ON SCHEMA default TO %s\", privilege, randomUsername())))\n+                .hasMessageContaining(\"Access Denied: Cannot grant privilege SELECT on schema default\");\n+    }\n+\n+    @DataProvider(name = \"privileges\")\n+    public static Object[][] privileges()\n+    {\n+        return new Object[][] {\n+                {\"SELECT\"},\n+                {\"ALL PRIVILEGES\"}\n+        };\n+    }\n+\n+    private static Session sessionOf(String username)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48bddee257359bbd36605ea29880a84e0a3c4fee"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjk2MjE2OnYy", "diffSide": "RIGHT", "path": "presto-tests/src/test/java/io/prestosql/execution/TestRevokeOnSchema.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToxNzowOVrOHrKqDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMToxNzowOVrOHrKqDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAyNTQyMw==", "bodyText": "session?", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r515025423", "createdAt": "2020-10-30T11:17:09Z", "author": {"login": "kokosing"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestRevokeOnSchema.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.prestosql.Session;\n+import io.prestosql.connector.Grants;\n+import io.prestosql.connector.MockConnectorFactory;\n+import io.prestosql.connector.MockConnectorPlugin;\n+import io.prestosql.connector.MutableGrants;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.spi.security.Privilege;\n+import io.prestosql.sql.query.QueryAssertions;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.EnumSet;\n+\n+import static io.prestosql.common.Randoms.randomUsername;\n+import static io.prestosql.spi.security.PrincipalType.USER;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static java.lang.String.format;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+public class TestRevokeOnSchema\n+{\n+    private static final Session admin = sessionOf(\"admin\");\n+    private static final Session userWithAllPrivileges = sessionOf(randomUsername());\n+    private static final Session userWithSelect = sessionOf(randomUsername());\n+    private DistributedQueryRunner queryRunner;\n+    private QueryAssertions assertions;\n+\n+    @BeforeClass\n+    public void initClass()\n+            throws Exception\n+    {\n+        queryRunner = DistributedQueryRunner.builder(userWithAllPrivileges).build();\n+        Grants<String> schemaGrants = new MutableGrants<>();\n+        schemaGrants.grant(new PrestoPrincipal(USER, admin.getUser()), \"default\", EnumSet.allOf(Privilege.class), true);\n+        schemaGrants.grant(new PrestoPrincipal(USER, userWithAllPrivileges.getUser()), \"default\", EnumSet.allOf(Privilege.class), true);\n+        schemaGrants.grant(new PrestoPrincipal(USER, userWithSelect.getUser()), \"default\", ImmutableSet.of(Privilege.SELECT), true);\n+        MockConnectorFactory connectorFactory = MockConnectorFactory.builder()\n+                .withListSchemaNames(session -> ImmutableList.of(\"information_schema\", \"default\"))\n+                .withSchemaGrants(schemaGrants)\n+                .build();\n+        queryRunner.installPlugin(new MockConnectorPlugin(connectorFactory));\n+        queryRunner.createCatalog(\"local\", \"mock\");\n+        assertions = new QueryAssertions(queryRunner);\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void teardown()\n+    {\n+        assertions.close();\n+        assertions = null;\n+    }\n+\n+    @Test(dataProvider = \"privilegesAndUsers\")\n+    public void testRevokeOnSchema(String privilege, Session user)\n+    {\n+        assertThat(assertions.query(user, \"SHOW SCHEMAS FROM local\")).matches(\"VALUES (VARCHAR 'information_schema'), (VARCHAR 'default')\");\n+\n+        queryRunner.execute(admin, format(\"REVOKE %s ON SCHEMA default FROM %s\", privilege, user.getUser()));\n+\n+        assertThat(assertions.query(user, \"SHOW SCHEMAS FROM local\")).matches(\"VALUES (VARCHAR 'information_schema')\");\n+    }\n+\n+    @Test(dataProvider = \"privilegesAndUsers\")\n+    public void testRevokeOnNonExistingCatalog(String privilege, Session user)\n+    {\n+        assertThatThrownBy(() -> queryRunner.execute(admin, format(\"REVOKE %s ON SCHEMA missing_catalog.missing_schema FROM %s\", privilege, user.getUser())))\n+                .hasMessageContaining(\"Schema 'missing_catalog.missing_schema' does not exist\");\n+    }\n+\n+    @Test(dataProvider = \"privilegesAndUsers\")\n+    public void testRevokeOnNonExistingSchema(String privilege, Session user)\n+    {\n+        assertThatThrownBy(() -> queryRunner.execute(admin, format(\"REVOKE %s ON SCHEMA missing_schema FROM %s\", privilege, user.getUser())))\n+                .hasMessageContaining(\"Schema 'local.missing_schema' does not exist\");\n+    }\n+\n+    @Test(dataProvider = \"privileges\")\n+    public void testAccessDenied(String privilege)\n+    {\n+        assertThatThrownBy(() -> queryRunner.execute(sessionOf(randomUsername()), format(\"REVOKE %s ON SCHEMA default FROM %s\", privilege, randomUsername())))\n+                .hasMessageContaining(\"Access Denied: Cannot revoke privilege SELECT on schema default\");\n+    }\n+\n+    @DataProvider(name = \"privilegesAndUsers\")\n+    public static Object[][] privilegesAndUsers()\n+    {\n+        return new Object[][] {\n+                {\"SELECT\", userWithSelect},\n+                {\"ALL PRIVILEGES\", userWithAllPrivileges}\n+        };\n+    }\n+\n+    @DataProvider(name = \"privileges\")\n+    public static Object[][] privileges()\n+    {\n+        return new Object[][] {\n+                {\"SELECT\"},\n+                {\"ALL PRIVILEGES\"}\n+        };\n+    }\n+\n+    private static Session sessionOf(String username)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48bddee257359bbd36605ea29880a84e0a3c4fee"}, "originalPosition": 124}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3855, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}