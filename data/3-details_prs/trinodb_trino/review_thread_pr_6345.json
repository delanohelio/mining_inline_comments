{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwMjE0MTgx", "number": 6345, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzo0MDo1MVrOFFl96g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo1MjozMlrOFGS02w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDA5MjU4OnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/CreateAsSelectDataSetup.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzo0MDo1MVrOIGLZng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjoyMDozN1rOIGil1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM0OTE1MA==", "bodyText": "The previous method name was more clear about what it's doing. This one is more generic and also conflicts with String.format.\nIf you do want to rename I'd prefer something like formatAsLiteral.", "url": "https://github.com/trinodb/trino/pull/6345#discussion_r543349150", "createdAt": "2020-12-15T13:40:51Z", "author": {"login": "hashhar"}, "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/CreateAsSelectDataSetup.java", "diffHunk": "@@ -40,17 +39,20 @@ public CreateAsSelectDataSetup(SqlExecutor sqlExecutor, String tableNamePrefix)\n     public TestTable setupTestTable(List<ColumnSetup> inputs)\n     {\n         List<String> columnValues = inputs.stream()\n-                .map(this::literalInExplicitCast)\n+                .map(this::format)\n                 .collect(toList());\n         Stream<String> columnValuesWithNames = range(0, columnValues.size())\n-                .mapToObj(i -> format(\"%s col_%d\", columnValues.get(i), i));\n+                .mapToObj(i -> String.format(\"%s col_%d\", columnValues.get(i), i));\n         String selectBody = Joiner.on(\",\\n\").join(columnValuesWithNames.iterator());\n         return new TestTable(sqlExecutor, tableNamePrefix, \"AS SELECT \" + selectBody);\n     }\n \n-    private String literalInExplicitCast(ColumnSetup input)\n+    private String format(ColumnSetup input)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcyOTEwOQ==", "bodyText": "I renamed because the old name is no longer applicable after the method became more flexible.", "url": "https://github.com/trinodb/trino/pull/6345#discussion_r543729109", "createdAt": "2020-12-15T22:20:37Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/CreateAsSelectDataSetup.java", "diffHunk": "@@ -40,17 +39,20 @@ public CreateAsSelectDataSetup(SqlExecutor sqlExecutor, String tableNamePrefix)\n     public TestTable setupTestTable(List<ColumnSetup> inputs)\n     {\n         List<String> columnValues = inputs.stream()\n-                .map(this::literalInExplicitCast)\n+                .map(this::format)\n                 .collect(toList());\n         Stream<String> columnValuesWithNames = range(0, columnValues.size())\n-                .mapToObj(i -> format(\"%s col_%d\", columnValues.get(i), i));\n+                .mapToObj(i -> String.format(\"%s col_%d\", columnValues.get(i), i));\n         String selectBody = Joiner.on(\",\\n\").join(columnValuesWithNames.iterator());\n         return new TestTable(sqlExecutor, tableNamePrefix, \"AS SELECT \" + selectBody);\n     }\n \n-    private String literalInExplicitCast(ColumnSetup input)\n+    private String format(ColumnSetup input)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM0OTE1MA=="}, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDExMjA0OnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/CreateAndInsertDataSetup.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzo0NDo0MlrOIGLkqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjoyMTozNVrOIGin_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1MTk3Ng==", "bodyText": "Non-standard inequality for creating empty tables but I like how literal it is.", "url": "https://github.com/trinodb/trino/pull/6345#discussion_r543351976", "createdAt": "2020-12-15T13:44:42Z", "author": {"login": "hashhar"}, "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/CreateAndInsertDataSetup.java", "diffHunk": "@@ -71,16 +71,26 @@ private void insertRows(TestTable testTable, List<ColumnSetup> inputs)\n \n     private TestTable createTestTable(List<ColumnSetup> inputs)\n     {\n-        return new TestTable(sqlExecutor, tableNamePrefix, \"(\" + columnDefinitions(inputs) + \")\");\n+        return new TestTable(sqlExecutor, tableNamePrefix, tableDefinition(inputs));\n     }\n \n-    private String columnDefinitions(List<ColumnSetup> inputs)\n+    private String tableDefinition(List<ColumnSetup> inputs)\n     {\n-        List<String> columnTypeDefinitions = inputs.stream()\n-                .map(input -> input.getDeclaredType().orElseThrow(() -> new IllegalArgumentException(\"declared type not set\")))\n-                .collect(toList());\n-        Stream<String> columnDefinitions = range(0, columnTypeDefinitions.size())\n-                .mapToObj(i -> format(\"col_%d %s\", i, columnTypeDefinitions.get(i)));\n-        return Joiner.on(\",\\n\").join(columnDefinitions.iterator());\n+        if (inputs.stream().allMatch(input -> input.getDeclaredType().isPresent())) {\n+            return IntStream.range(0, inputs.size())\n+                    .mapToObj(column -> format(\"col_%d %s\", column, inputs.get(column).getDeclaredType().orElseThrow()))\n+                    .collect(joining(\",\\n\", \"(\\n\", \")\"));\n+        }\n+\n+        return IntStream.range(0, inputs.size())\n+                .mapToObj(column -> {\n+                    ColumnSetup input = inputs.get(column);\n+                    if (input.getDeclaredType().isEmpty()) {\n+                        return format(\"%s AS col_%d\", input.getInputLiteral(), column);\n+                    }\n+\n+                    return format(\"CAST(%s AS %s) AS col_%d\", input.getInputLiteral(), input.getDeclaredType().get(), column);\n+                })\n+                .collect(joining(\",\\n\", \"AS\\nSELECT\\n\", \"\\nWHERE 'with no' = 'data'\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcyOTY2Mw==", "bodyText": "Alas! I used 1=0 too many times. Worn off.\nAlso, using something more unique allows to trace the source of the condition easily.", "url": "https://github.com/trinodb/trino/pull/6345#discussion_r543729663", "createdAt": "2020-12-15T22:21:35Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/CreateAndInsertDataSetup.java", "diffHunk": "@@ -71,16 +71,26 @@ private void insertRows(TestTable testTable, List<ColumnSetup> inputs)\n \n     private TestTable createTestTable(List<ColumnSetup> inputs)\n     {\n-        return new TestTable(sqlExecutor, tableNamePrefix, \"(\" + columnDefinitions(inputs) + \")\");\n+        return new TestTable(sqlExecutor, tableNamePrefix, tableDefinition(inputs));\n     }\n \n-    private String columnDefinitions(List<ColumnSetup> inputs)\n+    private String tableDefinition(List<ColumnSetup> inputs)\n     {\n-        List<String> columnTypeDefinitions = inputs.stream()\n-                .map(input -> input.getDeclaredType().orElseThrow(() -> new IllegalArgumentException(\"declared type not set\")))\n-                .collect(toList());\n-        Stream<String> columnDefinitions = range(0, columnTypeDefinitions.size())\n-                .mapToObj(i -> format(\"col_%d %s\", i, columnTypeDefinitions.get(i)));\n-        return Joiner.on(\",\\n\").join(columnDefinitions.iterator());\n+        if (inputs.stream().allMatch(input -> input.getDeclaredType().isPresent())) {\n+            return IntStream.range(0, inputs.size())\n+                    .mapToObj(column -> format(\"col_%d %s\", column, inputs.get(column).getDeclaredType().orElseThrow()))\n+                    .collect(joining(\",\\n\", \"(\\n\", \")\"));\n+        }\n+\n+        return IntStream.range(0, inputs.size())\n+                .mapToObj(column -> {\n+                    ColumnSetup input = inputs.get(column);\n+                    if (input.getDeclaredType().isEmpty()) {\n+                        return format(\"%s AS col_%d\", input.getInputLiteral(), column);\n+                    }\n+\n+                    return format(\"CAST(%s AS %s) AS col_%d\", input.getInputLiteral(), input.getDeclaredType().get(), column);\n+                })\n+                .collect(joining(\",\\n\", \"AS\\nSELECT\\n\", \"\\nWHERE 'with no' = 'data'\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1MTk3Ng=="}, "originalCommit": null, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTQxOTk2OnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/CreateAsSelectDataSetup.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo0ODoxN1rOIHO-Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo0ODoxN1rOIHO-Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1NjIzMQ==", "bodyText": "orElseThrow no longer needed below.", "url": "https://github.com/trinodb/trino/pull/6345#discussion_r544456231", "createdAt": "2020-12-16T16:48:17Z", "author": {"login": "losipiuk"}, "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/CreateAsSelectDataSetup.java", "diffHunk": "@@ -40,17 +39,20 @@ public CreateAsSelectDataSetup(SqlExecutor sqlExecutor, String tableNamePrefix)\n     public TestTable setupTestTable(List<ColumnSetup> inputs)\n     {\n         List<String> columnValues = inputs.stream()\n-                .map(this::literalInExplicitCast)\n+                .map(this::format)\n                 .collect(toList());\n         Stream<String> columnValuesWithNames = range(0, columnValues.size())\n-                .mapToObj(i -> format(\"%s col_%d\", columnValues.get(i), i));\n+                .mapToObj(i -> String.format(\"%s col_%d\", columnValues.get(i), i));\n         String selectBody = Joiner.on(\",\\n\").join(columnValuesWithNames.iterator());\n         return new TestTable(sqlExecutor, tableNamePrefix, \"AS SELECT \" + selectBody);\n     }\n \n-    private String literalInExplicitCast(ColumnSetup input)\n+    private String format(ColumnSetup input)\n     {\n-        return format(\n+        if (input.getDeclaredType().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTQ0MjE5OnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/CreateAndInsertDataSetup.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo1MjozMlrOIHPLVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo1MjozMlrOIHPLVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1OTYwNg==", "bodyText": "Why not just leave this one?", "url": "https://github.com/trinodb/trino/pull/6345#discussion_r544459606", "createdAt": "2020-12-16T16:52:32Z", "author": {"login": "losipiuk"}, "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/CreateAndInsertDataSetup.java", "diffHunk": "@@ -71,16 +71,26 @@ private void insertRows(TestTable testTable, List<ColumnSetup> inputs)\n \n     private TestTable createTestTable(List<ColumnSetup> inputs)\n     {\n-        return new TestTable(sqlExecutor, tableNamePrefix, \"(\" + columnDefinitions(inputs) + \")\");\n+        return new TestTable(sqlExecutor, tableNamePrefix, tableDefinition(inputs));\n     }\n \n-    private String columnDefinitions(List<ColumnSetup> inputs)\n+    private String tableDefinition(List<ColumnSetup> inputs)\n     {\n-        List<String> columnTypeDefinitions = inputs.stream()\n-                .map(input -> input.getDeclaredType().orElseThrow(() -> new IllegalArgumentException(\"declared type not set\")))\n-                .collect(toList());\n-        Stream<String> columnDefinitions = range(0, columnTypeDefinitions.size())\n-                .mapToObj(i -> format(\"col_%d %s\", i, columnTypeDefinitions.get(i)));\n-        return Joiner.on(\",\\n\").join(columnDefinitions.iterator());\n+        if (inputs.stream().allMatch(input -> input.getDeclaredType().isPresent())) {\n+            return IntStream.range(0, inputs.size())\n+                    .mapToObj(column -> format(\"col_%d %s\", column, inputs.get(column).getDeclaredType().orElseThrow()))\n+                    .collect(joining(\",\\n\", \"(\\n\", \")\"));\n+        }\n+\n+        return IntStream.range(0, inputs.size())", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4350, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}