{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxNjgzODAy", "number": 3813, "title": "Avoid trivial exchanges for constant projections", "bodyText": "A query like\nSELECT 10, a FROM (VALUES 1) t(a)\n\nis planned as:\nOutput[_col0, a]\n\u2502   Layout: [expr_2:integer, field:integer]\n\u2502   Estimates: {rows: 1 (10B), cpu: 15, memory: 0B, network: 0B}\n\u2502   _col0 := expr_2\n\u2502   a := field\n\u2514\u2500 Project[]\n   \u2502   Layout: [expr_2:integer, field:integer]\n   \u2502   Estimates: {rows: 1 (10B), cpu: 15, memory: 0B, network: 0B}\n   \u2502   expr_2 := 10\n   \u2514\u2500 LocalExchange[ROUND_ROBIN] ()\n      \u2502   Layout: [field:integer]\n      \u2502   Estimates: {rows: 1 (5B), cpu: 5, memory: 0B, network: 0B}\n      \u2514\u2500 Values\n             Layout: [field:integer]\n             Estimates: {rows: 1 (5B), cpu: 0, memory: 0B, network: 0B}\n             (1)\n\nThe local round-robin exchange is unnecessary in that case.", "createdAt": "2020-05-22T02:44:28Z", "url": "https://github.com/trinodb/trino/pull/3813", "merged": true, "mergeCommit": {"oid": "49ffc20780090e480d593aeabf9bdfeb576dd22e"}, "closed": true, "closedAt": "2020-05-24T00:17:15Z", "author": {"login": "martint"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjpaLcAFqTQxNjYyMDYwNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABckOp0LABqjMzNjc0NzQ4Njc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NjIwNjA3", "url": "https://github.com/trinodb/trino/pull/3813#pullrequestreview-416620607", "createdAt": "2020-05-22T03:08:08Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NzY2MDkw", "url": "https://github.com/trinodb/trino/pull/3813#pullrequestreview-416766090", "createdAt": "2020-05-22T09:15:33Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOToxNTozM1rOGZQWlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOToxNTozM1rOGZQWlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEzNTUwOA==", "bodyText": "What we repartition on? is it round robin in disguise?", "url": "https://github.com/trinodb/trino/pull/3813#discussion_r429135508", "createdAt": "2020-05-22T09:15:33Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/optimizations/TestAddExchangesPlans.java", "diffHunk": "@@ -428,6 +428,17 @@ public void testExchangesAroundTrivialProjection()\n                 anyTree(\n                         project(\n                                 values(\"a\"))));\n+\n+        assertPlan(\n+                \"SELECT 1 UNION ALL SELECT 1\",\n+                anyTree(\n+                        exchange(\n+                                LOCAL,\n+                                REPARTITION,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2ODA1NDgw", "url": "https://github.com/trinodb/trino/pull/3813#pullrequestreview-416805480", "createdAt": "2020-05-22T10:22:13Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDoyMjoxM1rOGZSNpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDoyMjoxM1rOGZSNpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2NTk4OQ==", "bodyText": "When refactoring this, you could replace all node(ValuesNode.class)) with values(\"x\"), values(\"y\") etc, accordingly to the actual names used in queries. It would make it easier to follow how the plan has transformed.", "url": "https://github.com/trinodb/trino/pull/3813#discussion_r429165989", "createdAt": "2020-05-22T10:22:13Z", "author": {"login": "kasiafi"}, "path": "presto-main/src/test/java/io/prestosql/sql/query/TestSubqueries.java", "diffHunk": "@@ -64,14 +53,37 @@ public void teardown()\n     @Test\n     public void testCorrelatedExistsSubqueriesWithOrPredicateAndNull()\n     {\n-        assertExistsRewrittenToAggregationAboveJoin(\n+        assertions.assertQueryAndPlan(\n                 \"SELECT EXISTS(SELECT 1 FROM (VALUES null, 10) t(x) WHERE y > x OR y + 10 > x) FROM (values 11 + if(rand() >= 0, 0)) t2(y)\",\n                 \"VALUES true\",\n-                false);\n-        assertExistsRewrittenToAggregationAboveJoin(\n+                anyTree(\n+                        aggregation(\n+                                ImmutableMap.of(\"COUNT\", functionCall(\"count\", ImmutableList.of(\"NON_NULL\"))),\n+                                aggregation -> aggregation.isStreamable() && aggregation.getStep() == SINGLE,\n+                                node(JoinNode.class,\n+                                        anyTree(\n+                                                node(ValuesNode.class)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "46c3c6aeb0e3e7ab62787efc512723e081cfbd94", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/46c3c6aeb0e3e7ab62787efc512723e081cfbd94", "committedDate": "2020-05-23T22:31:31Z", "message": "Remove unnecessary abstraction in plan tests\n\nThis form of parameterization makes it harder to understand\nwhat a given test case is trying to verify."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23472089ff8ea2c301309ec37b821fdcfd09cec7", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/23472089ff8ea2c301309ec37b821fdcfd09cec7", "committedDate": "2020-05-23T22:31:31Z", "message": "Avoid trivial exchanges for constant projections\n\nA query like\n\n    SELECT 10, a FROM (VALUES 1) t(a)\n\nis planned as:\n\n    Output[_col0, a]\n    \u2502   Layout: [expr_2:integer, field:integer]\n    \u2502   Estimates: {rows: 1 (10B), cpu: 15, memory: 0B, network: 0B}\n    \u2502   _col0 := expr_2\n    \u2502   a := field\n    \u2514\u2500 Project[]\n       \u2502   Layout: [expr_2:integer, field:integer]\n       \u2502   Estimates: {rows: 1 (10B), cpu: 15, memory: 0B, network: 0B}\n       \u2502   expr_2 := 10\n       \u2514\u2500 LocalExchange[ROUND_ROBIN] ()\n          \u2502   Layout: [field:integer]\n          \u2502   Estimates: {rows: 1 (5B), cpu: 5, memory: 0B, network: 0B}\n          \u2514\u2500 Values\n                 Layout: [field:integer]\n                 Estimates: {rows: 1 (5B), cpu: 0, memory: 0B, network: 0B}\n                 (1)\n\nThe local round-robin exchange is unnecessary in that case."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9c7f1f748fa8064a8c374d35e972174696d9302", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/c9c7f1f748fa8064a8c374d35e972174696d9302", "committedDate": "2020-05-23T22:31:31Z", "message": "Do not force unnecessary parallelism for union inputs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "c9c7f1f748fa8064a8c374d35e972174696d9302", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/c9c7f1f748fa8064a8c374d35e972174696d9302", "committedDate": "2020-05-23T22:31:31Z", "message": "Do not force unnecessary parallelism for union inputs"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1221, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}