{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3MjA4NTA4", "number": 2632, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQxODoxOTo0NVrODau-ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNTowOToxMFrODcQ98w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzU5MjEwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowQueriesRewrite.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQxODoxOTo0NVrOFh1O4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwMjo1MzozOVrOFh3OvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxOTQ5MQ==", "bodyText": "We could simply filter out the empty row (since catalog names cannot be empty).", "url": "https://github.com/trinodb/trino/pull/2632#discussion_r371019491", "createdAt": "2020-01-26T18:19:45Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowQueriesRewrite.java", "diffHunk": "@@ -341,24 +341,29 @@ protected Node visitShowSchemas(ShowSchemas node, Void context)\n         @Override\n         protected Node visitShowCatalogs(ShowCatalogs node, Void context)\n         {\n-            List<Expression> rows = listCatalogs(session, metadata, accessControl).keySet().stream()\n-                    .map(name -> row(new StringLiteral(name)))\n-                    .collect(toList());\n+            ImmutableList.Builder<Expression> rows = ImmutableList.builder();\n \n-            Optional<Expression> predicate = Optional.empty();\n+            listCatalogs(session, metadata, accessControl).keySet().stream()\n+                    .map(name -> row(new StringLiteral(name), TRUE_LITERAL))\n+                    .forEach(rows::add);\n+\n+            // add bogus row so we can support empty catalogs\n+            rows.add(row(new StringLiteral(\"\"), FALSE_LITERAL));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0NTEzMg==", "bodyText": "If nothing is installed, there is a system catalog. However, AccessControl may legitimately filter it out. So it might result in a empty values", "url": "https://github.com/trinodb/trino/pull/2632#discussion_r371045132", "createdAt": "2020-01-27T01:38:30Z", "author": {"login": "Praveen2112"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowQueriesRewrite.java", "diffHunk": "@@ -341,24 +341,29 @@ protected Node visitShowSchemas(ShowSchemas node, Void context)\n         @Override\n         protected Node visitShowCatalogs(ShowCatalogs node, Void context)\n         {\n-            List<Expression> rows = listCatalogs(session, metadata, accessControl).keySet().stream()\n-                    .map(name -> row(new StringLiteral(name)))\n-                    .collect(toList());\n+            ImmutableList.Builder<Expression> rows = ImmutableList.builder();\n \n-            Optional<Expression> predicate = Optional.empty();\n+            listCatalogs(session, metadata, accessControl).keySet().stream()\n+                    .map(name -> row(new StringLiteral(name), TRUE_LITERAL))\n+                    .forEach(rows::add);\n+\n+            // add bogus row so we can support empty catalogs\n+            rows.add(row(new StringLiteral(\"\"), FALSE_LITERAL));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxOTQ5MQ=="}, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA0ODcyOQ==", "bodyText": "I mean that the bogus row shouldn\u2019t need a boolean column.", "url": "https://github.com/trinodb/trino/pull/2632#discussion_r371048729", "createdAt": "2020-01-27T02:18:10Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowQueriesRewrite.java", "diffHunk": "@@ -341,24 +341,29 @@ protected Node visitShowSchemas(ShowSchemas node, Void context)\n         @Override\n         protected Node visitShowCatalogs(ShowCatalogs node, Void context)\n         {\n-            List<Expression> rows = listCatalogs(session, metadata, accessControl).keySet().stream()\n-                    .map(name -> row(new StringLiteral(name)))\n-                    .collect(toList());\n+            ImmutableList.Builder<Expression> rows = ImmutableList.builder();\n \n-            Optional<Expression> predicate = Optional.empty();\n+            listCatalogs(session, metadata, accessControl).keySet().stream()\n+                    .map(name -> row(new StringLiteral(name), TRUE_LITERAL))\n+                    .forEach(rows::add);\n+\n+            // add bogus row so we can support empty catalogs\n+            rows.add(row(new StringLiteral(\"\"), FALSE_LITERAL));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxOTQ5MQ=="}, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA1MjIyMQ==", "bodyText": "Oh okay !!", "url": "https://github.com/trinodb/trino/pull/2632#discussion_r371052221", "createdAt": "2020-01-27T02:53:39Z", "author": {"login": "Praveen2112"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowQueriesRewrite.java", "diffHunk": "@@ -341,24 +341,29 @@ protected Node visitShowSchemas(ShowSchemas node, Void context)\n         @Override\n         protected Node visitShowCatalogs(ShowCatalogs node, Void context)\n         {\n-            List<Expression> rows = listCatalogs(session, metadata, accessControl).keySet().stream()\n-                    .map(name -> row(new StringLiteral(name)))\n-                    .collect(toList());\n+            ImmutableList.Builder<Expression> rows = ImmutableList.builder();\n \n-            Optional<Expression> predicate = Optional.empty();\n+            listCatalogs(session, metadata, accessControl).keySet().stream()\n+                    .map(name -> row(new StringLiteral(name), TRUE_LITERAL))\n+                    .forEach(rows::add);\n+\n+            // add bogus row so we can support empty catalogs\n+            rows.add(row(new StringLiteral(\"\"), FALSE_LITERAL));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxOTQ5MQ=="}, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTY0NzIzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowQueriesRewrite.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNTowOToxMFrOFkOUqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNTowOToxMFrOFkOUqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUyNzcyMQ==", "bodyText": "This can be structure as follows. It's simpler and clearer what's going on:\nList<Expression> rows = listCatalogs(session, metadata, accessControl).keySet().stream();\n\nOptional<Expression> predicate = Optional.empty();\nif (rows.isEmpty()) {\n    rows = ImmutableList.of(\"\");\n    predicate = Optional.of(BooleanLiteral.FALSE_LITERAL);\n}\nelse if (node.getLikePattern().isPresent()) {\n    predicate = Optional.of(new LikePredicate(...));\n}\n\nreturn simpleQuery(...)", "url": "https://github.com/trinodb/trino/pull/2632#discussion_r373527721", "createdAt": "2020-01-31T15:09:10Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowQueriesRewrite.java", "diffHunk": "@@ -341,24 +342,29 @@ protected Node visitShowSchemas(ShowSchemas node, Void context)\n         @Override\n         protected Node visitShowCatalogs(ShowCatalogs node, Void context)\n         {\n-            List<Expression> rows = listCatalogs(session, metadata, accessControl).keySet().stream()\n+            ImmutableList.Builder<Expression> rows = ImmutableList.builder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2366ba797f335045de1fa6d5df2221ae0fc1a2d1"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 950, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}