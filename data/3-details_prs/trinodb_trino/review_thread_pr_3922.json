{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3OTI1OTQ3", "number": 3922, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjo1NDowM1rOECpixg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzoxOToxNVrOECqF_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjEzMjU0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/scheduler/UniformNodeSelector.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjo1NDowM1rOGfPFtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMjowMjo1MFrOGfruGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwNjI2Mg==", "bodyText": "Add a comment on what this does and why 5 is important.", "url": "https://github.com/trinodb/trino/pull/3922#discussion_r435406262", "createdAt": "2020-06-04T16:54:03Z", "author": {"login": "dain"}, "path": "presto-main/src/main/java/io/prestosql/execution/scheduler/UniformNodeSelector.java", "diffHunk": "@@ -262,7 +262,7 @@ private void equateDistribution(Multimap<InternalNode, Split> assignment, NodeAs\n             InternalNode maxNode = maxNodes.poll();\n             InternalNode minNode = minNodes.poll();\n \n-            if (assignmentStats.getTotalSplitCount(maxNode) - assignmentStats.getTotalSplitCount(minNode) <= 1) {\n+            if (assignmentStats.getTotalSplitCount(maxNode) - assignmentStats.getTotalSplitCount(minNode) <= 5) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyMTQ0NQ==", "bodyText": "+1 . 5 looks very much like a magic number. Why not 7?", "url": "https://github.com/trinodb/trino/pull/3922#discussion_r435421445", "createdAt": "2020-06-04T17:19:32Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/execution/scheduler/UniformNodeSelector.java", "diffHunk": "@@ -262,7 +262,7 @@ private void equateDistribution(Multimap<InternalNode, Split> assignment, NodeAs\n             InternalNode maxNode = maxNodes.poll();\n             InternalNode minNode = minNodes.poll();\n \n-            if (assignmentStats.getTotalSplitCount(maxNode) - assignmentStats.getTotalSplitCount(minNode) <= 1) {\n+            if (assignmentStats.getTotalSplitCount(maxNode) - assignmentStats.getTotalSplitCount(minNode) <= 5) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwNjI2Mg=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg3NTM1Mg==", "bodyText": "I've added explanation in commit message plus comment in code.", "url": "https://github.com/trinodb/trino/pull/3922#discussion_r435875352", "createdAt": "2020-06-05T12:02:50Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/execution/scheduler/UniformNodeSelector.java", "diffHunk": "@@ -262,7 +262,7 @@ private void equateDistribution(Multimap<InternalNode, Split> assignment, NodeAs\n             InternalNode maxNode = maxNodes.poll();\n             InternalNode minNode = minNodes.poll();\n \n-            if (assignmentStats.getTotalSplitCount(maxNode) - assignmentStats.getTotalSplitCount(minNode) <= 1) {\n+            if (assignmentStats.getTotalSplitCount(maxNode) - assignmentStats.getTotalSplitCount(minNode) <= 5) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwNjI2Mg=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjIwNzA4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/TestNodeScheduler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzoxNDo0MlrOGfP2GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzoxNDo0MlrOGfP2GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxODY0OQ==", "bodyText": "noop statement drop.", "url": "https://github.com/trinodb/trino/pull/3922#discussion_r435418649", "createdAt": "2020-06-04T17:14:42Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestNodeScheduler.java", "diffHunk": "@@ -601,10 +607,69 @@ public void testEquateDistribution()\n         Multimap<InternalNode, Split> assignment = nodeSelector.computeAssignments(splits, ImmutableList.copyOf(taskMap.values())).getAssignments();\n         assertEquals(assignment.size(), 20);\n         assertEquals(assignment.keySet().size(), 4);\n-        assertEquals(assignment.get(node1).size(), 5);\n-        assertEquals(assignment.get(node2).size(), 5);\n-        assertEquals(assignment.get(node3).size(), 5);\n-        assertEquals(assignment.get(node4).size(), 5);\n+        assertEquals(assignment.get(node1).size(), 8);\n+        assertEquals(assignment.get(node2).size(), 4);\n+        assertEquals(assignment.get(node3).size(), 4);\n+        assertEquals(assignment.get(node4).size(), 4);\n+    }\n+\n+    @DataProvider\n+    public static Object[][] equateDistributionTestParameters()\n+    {\n+        return new Object[][] {\n+                {5, 10, 0.00},\n+                {5, 20, 0.05},\n+                {10, 50, 0.00},\n+                {10, 100, 0.04},\n+                {10, 200, 0.085},\n+                {50, 550, 0.040},\n+                {50, 600, 0.042},\n+                {50, 700, 0.040},\n+                {100, 550, 0.031},\n+                {100, 600, 0.049},\n+                {100, 1000, 0.034},\n+                {100, 1500, 0.04}};\n+    }\n+\n+    @Test(dataProvider = \"equateDistributionTestParameters\")\n+    public void testEquateDistributionConsistentHashing(int numberOfNodes, int numberOfSplits, double misassignedSplitsRatio)\n+    {\n+        ImmutableList.Builder<InternalNode> nodesBuilder = ImmutableList.builder();\n+        for (int i = 0; i < numberOfNodes; ++i) {\n+            InternalNode node = new InternalNode(\"node\" + i, URI.create(\"http://10.0.0.1:\" + (i + 10)), NodeVersion.UNKNOWN, false);\n+            nodesBuilder.add(node);\n+            nodeManager.addNode(CONNECTOR_ID, node);\n+        }\n+        List<InternalNode> nodes = nodesBuilder.build();\n+\n+        Set<Split> splits = new LinkedHashSet<>();\n+        Random random = new Random(0);\n+        ImmutableSetMultimap.Builder<InternalNode, Split> originalAssignmentBuilder = ImmutableSetMultimap.builder();\n+        // assign splits randomly according to consistent hashing\n+        for (int i = 0; i < numberOfSplits; i++) {\n+            InternalNode node = nodes.get(Hashing.consistentHash(random.nextInt(), nodes.size()));\n+            Split split = new Split(CONNECTOR_ID, new TestSplitLocal(node.getHostAndPort()), Lifespan.taskWide());\n+            splits.add(split);\n+            originalAssignmentBuilder.put(node, split);\n+        }\n+\n+        Multimap<InternalNode, Split> assignment = nodeSelector.computeAssignments(splits, ImmutableList.copyOf(taskMap.values())).getAssignments();\n+\n+        Multimap<Split, InternalNode> originalNodeAssignment = originalAssignmentBuilder.build().inverse();\n+        Multimap<Split, InternalNode> nodeAssignment = ImmutableSetMultimap.copyOf(assignment).inverse();\n+\n+        int miassignedSplits = 0;\n+        for (Split split : splits) {\n+            if (nodeAssignment.get(split).isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjIxNTEwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/TestNodeScheduler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzoxNzowNlrOGfP7YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzoxNzowNlrOGfP7YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyMDAwMA==", "bodyText": "move this line just above\n Multimap<Split, InternalNode> nodeAssignment = ImmutableSetMultimap.copyOf(assignment).inverse();", "url": "https://github.com/trinodb/trino/pull/3922#discussion_r435420000", "createdAt": "2020-06-04T17:17:06Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestNodeScheduler.java", "diffHunk": "@@ -601,10 +607,69 @@ public void testEquateDistribution()\n         Multimap<InternalNode, Split> assignment = nodeSelector.computeAssignments(splits, ImmutableList.copyOf(taskMap.values())).getAssignments();\n         assertEquals(assignment.size(), 20);\n         assertEquals(assignment.keySet().size(), 4);\n-        assertEquals(assignment.get(node1).size(), 5);\n-        assertEquals(assignment.get(node2).size(), 5);\n-        assertEquals(assignment.get(node3).size(), 5);\n-        assertEquals(assignment.get(node4).size(), 5);\n+        assertEquals(assignment.get(node1).size(), 8);\n+        assertEquals(assignment.get(node2).size(), 4);\n+        assertEquals(assignment.get(node3).size(), 4);\n+        assertEquals(assignment.get(node4).size(), 4);\n+    }\n+\n+    @DataProvider\n+    public static Object[][] equateDistributionTestParameters()\n+    {\n+        return new Object[][] {\n+                {5, 10, 0.00},\n+                {5, 20, 0.05},\n+                {10, 50, 0.00},\n+                {10, 100, 0.04},\n+                {10, 200, 0.085},\n+                {50, 550, 0.040},\n+                {50, 600, 0.042},\n+                {50, 700, 0.040},\n+                {100, 550, 0.031},\n+                {100, 600, 0.049},\n+                {100, 1000, 0.034},\n+                {100, 1500, 0.04}};\n+    }\n+\n+    @Test(dataProvider = \"equateDistributionTestParameters\")\n+    public void testEquateDistributionConsistentHashing(int numberOfNodes, int numberOfSplits, double misassignedSplitsRatio)\n+    {\n+        ImmutableList.Builder<InternalNode> nodesBuilder = ImmutableList.builder();\n+        for (int i = 0; i < numberOfNodes; ++i) {\n+            InternalNode node = new InternalNode(\"node\" + i, URI.create(\"http://10.0.0.1:\" + (i + 10)), NodeVersion.UNKNOWN, false);\n+            nodesBuilder.add(node);\n+            nodeManager.addNode(CONNECTOR_ID, node);\n+        }\n+        List<InternalNode> nodes = nodesBuilder.build();\n+\n+        Set<Split> splits = new LinkedHashSet<>();\n+        Random random = new Random(0);\n+        ImmutableSetMultimap.Builder<InternalNode, Split> originalAssignmentBuilder = ImmutableSetMultimap.builder();\n+        // assign splits randomly according to consistent hashing\n+        for (int i = 0; i < numberOfSplits; i++) {\n+            InternalNode node = nodes.get(Hashing.consistentHash(random.nextInt(), nodes.size()));\n+            Split split = new Split(CONNECTOR_ID, new TestSplitLocal(node.getHostAndPort()), Lifespan.taskWide());\n+            splits.add(split);\n+            originalAssignmentBuilder.put(node, split);\n+        }\n+\n+        Multimap<InternalNode, Split> assignment = nodeSelector.computeAssignments(splits, ImmutableList.copyOf(taskMap.values())).getAssignments();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjIxNzMxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/TestNodeScheduler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzoxNzo0M1rOGfP8yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzoxNzo0M1rOGfP8yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyMDM2Mw==", "bodyText": "typo misassignedSplits", "url": "https://github.com/trinodb/trino/pull/3922#discussion_r435420363", "createdAt": "2020-06-04T17:17:43Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestNodeScheduler.java", "diffHunk": "@@ -601,10 +607,69 @@ public void testEquateDistribution()\n         Multimap<InternalNode, Split> assignment = nodeSelector.computeAssignments(splits, ImmutableList.copyOf(taskMap.values())).getAssignments();\n         assertEquals(assignment.size(), 20);\n         assertEquals(assignment.keySet().size(), 4);\n-        assertEquals(assignment.get(node1).size(), 5);\n-        assertEquals(assignment.get(node2).size(), 5);\n-        assertEquals(assignment.get(node3).size(), 5);\n-        assertEquals(assignment.get(node4).size(), 5);\n+        assertEquals(assignment.get(node1).size(), 8);\n+        assertEquals(assignment.get(node2).size(), 4);\n+        assertEquals(assignment.get(node3).size(), 4);\n+        assertEquals(assignment.get(node4).size(), 4);\n+    }\n+\n+    @DataProvider\n+    public static Object[][] equateDistributionTestParameters()\n+    {\n+        return new Object[][] {\n+                {5, 10, 0.00},\n+                {5, 20, 0.05},\n+                {10, 50, 0.00},\n+                {10, 100, 0.04},\n+                {10, 200, 0.085},\n+                {50, 550, 0.040},\n+                {50, 600, 0.042},\n+                {50, 700, 0.040},\n+                {100, 550, 0.031},\n+                {100, 600, 0.049},\n+                {100, 1000, 0.034},\n+                {100, 1500, 0.04}};\n+    }\n+\n+    @Test(dataProvider = \"equateDistributionTestParameters\")\n+    public void testEquateDistributionConsistentHashing(int numberOfNodes, int numberOfSplits, double misassignedSplitsRatio)\n+    {\n+        ImmutableList.Builder<InternalNode> nodesBuilder = ImmutableList.builder();\n+        for (int i = 0; i < numberOfNodes; ++i) {\n+            InternalNode node = new InternalNode(\"node\" + i, URI.create(\"http://10.0.0.1:\" + (i + 10)), NodeVersion.UNKNOWN, false);\n+            nodesBuilder.add(node);\n+            nodeManager.addNode(CONNECTOR_ID, node);\n+        }\n+        List<InternalNode> nodes = nodesBuilder.build();\n+\n+        Set<Split> splits = new LinkedHashSet<>();\n+        Random random = new Random(0);\n+        ImmutableSetMultimap.Builder<InternalNode, Split> originalAssignmentBuilder = ImmutableSetMultimap.builder();\n+        // assign splits randomly according to consistent hashing\n+        for (int i = 0; i < numberOfSplits; i++) {\n+            InternalNode node = nodes.get(Hashing.consistentHash(random.nextInt(), nodes.size()));\n+            Split split = new Split(CONNECTOR_ID, new TestSplitLocal(node.getHostAndPort()), Lifespan.taskWide());\n+            splits.add(split);\n+            originalAssignmentBuilder.put(node, split);\n+        }\n+\n+        Multimap<InternalNode, Split> assignment = nodeSelector.computeAssignments(splits, ImmutableList.copyOf(taskMap.values())).getAssignments();\n+\n+        Multimap<Split, InternalNode> originalNodeAssignment = originalAssignmentBuilder.build().inverse();\n+        Multimap<Split, InternalNode> nodeAssignment = ImmutableSetMultimap.copyOf(assignment).inverse();\n+\n+        int miassignedSplits = 0;\n+        for (Split split : splits) {\n+            if (nodeAssignment.get(split).isEmpty()) {\n+                int l = 0;\n+            }\n+\n+            if (!getOnlyElement(originalNodeAssignment.get(split)).equals(getOnlyElement(nodeAssignment.get(split)))) {\n+                miassignedSplits++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjIyMjcwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/TestNodeScheduler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzoxOToxNVrOGfQAYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzoxOToxNVrOGfQAYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyMTI4Mw==", "bodyText": "how did you come up with the numbers?", "url": "https://github.com/trinodb/trino/pull/3922#discussion_r435421283", "createdAt": "2020-06-04T17:19:15Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestNodeScheduler.java", "diffHunk": "@@ -601,10 +607,69 @@ public void testEquateDistribution()\n         Multimap<InternalNode, Split> assignment = nodeSelector.computeAssignments(splits, ImmutableList.copyOf(taskMap.values())).getAssignments();\n         assertEquals(assignment.size(), 20);\n         assertEquals(assignment.keySet().size(), 4);\n-        assertEquals(assignment.get(node1).size(), 5);\n-        assertEquals(assignment.get(node2).size(), 5);\n-        assertEquals(assignment.get(node3).size(), 5);\n-        assertEquals(assignment.get(node4).size(), 5);\n+        assertEquals(assignment.get(node1).size(), 8);\n+        assertEquals(assignment.get(node2).size(), 4);\n+        assertEquals(assignment.get(node3).size(), 4);\n+        assertEquals(assignment.get(node4).size(), 4);\n+    }\n+\n+    @DataProvider\n+    public static Object[][] equateDistributionTestParameters()\n+    {\n+        return new Object[][] {\n+                {5, 10, 0.00},", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4226, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}