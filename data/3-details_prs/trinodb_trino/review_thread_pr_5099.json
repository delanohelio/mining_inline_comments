{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxODkyMTE4", "number": 5099, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOToyOTozOFrOEhKUpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTozNDoxMlrOEhKbqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjA3NTg4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/server/TestDynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOToyOTozOFrOHOUrcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzo1Njo0MlrOHOeclw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4MDkxNA==", "bodyText": "remove, we don't need to assert these in every test", "url": "https://github.com/trinodb/trino/pull/5099#discussion_r484780914", "createdAt": "2020-09-08T09:29:38Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/server/TestDynamicFilterService.java", "diffHunk": "@@ -434,6 +435,75 @@ public void testReplicatedDynamicFilter()\n         assertEquals(dynamicFiltersStageSupplier.getRequestCount(), 1);\n     }\n \n+    @Test\n+    public void testDynamicFilterCancellation()\n+    {\n+        DynamicFilterService dynamicFilterService = new DynamicFilterService(new FeaturesConfig());\n+        DynamicFilterId filterId = new DynamicFilterId(\"df\");\n+        Expression df1 = expression(\"DF_SYMBOL1\");\n+        QueryId queryId = new QueryId(\"query\");\n+        StageId stageId = new StageId(queryId, 0);\n+        List<TaskId> taskIds = ImmutableList.of(new TaskId(stageId, 0), new TaskId(stageId, 1));\n+\n+        TestDynamicFiltersStageSupplier dynamicFiltersStageSupplier = new TestDynamicFiltersStageSupplier(RUNNING);\n+        dynamicFiltersStageSupplier.addTasks(taskIds);\n+        dynamicFilterService.registerQuery(queryId, dynamicFiltersStageSupplier, ImmutableSet.of(filterId), ImmutableSet.of(filterId), ImmutableSet.of());\n+        ColumnHandle column = new TestingColumnHandle(\"probeColumnA\");\n+        DynamicFilter dynamicFilter = dynamicFilterService.createDynamicFilter(\n+                queryId,\n+                ImmutableList.of(new DynamicFilters.Descriptor(filterId, df1)),\n+                ImmutableMap.of(\n+                        Symbol.from(df1), column));\n+        assertFalse(dynamicFilter.isBlocked().isDone());\n+        assertFalse(dynamicFilter.isComplete());\n+        assertEquals(dynamicFilter.getCurrentPredicate(), TupleDomain.all());\n+\n+        // assert initial dynamic filtering stats", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk0MDk1MQ==", "bodyText": "removed", "url": "https://github.com/trinodb/trino/pull/5099#discussion_r484940951", "createdAt": "2020-09-08T13:56:42Z", "author": {"login": "raunaqmorarka"}, "path": "presto-main/src/test/java/io/prestosql/server/TestDynamicFilterService.java", "diffHunk": "@@ -434,6 +435,75 @@ public void testReplicatedDynamicFilter()\n         assertEquals(dynamicFiltersStageSupplier.getRequestCount(), 1);\n     }\n \n+    @Test\n+    public void testDynamicFilterCancellation()\n+    {\n+        DynamicFilterService dynamicFilterService = new DynamicFilterService(new FeaturesConfig());\n+        DynamicFilterId filterId = new DynamicFilterId(\"df\");\n+        Expression df1 = expression(\"DF_SYMBOL1\");\n+        QueryId queryId = new QueryId(\"query\");\n+        StageId stageId = new StageId(queryId, 0);\n+        List<TaskId> taskIds = ImmutableList.of(new TaskId(stageId, 0), new TaskId(stageId, 1));\n+\n+        TestDynamicFiltersStageSupplier dynamicFiltersStageSupplier = new TestDynamicFiltersStageSupplier(RUNNING);\n+        dynamicFiltersStageSupplier.addTasks(taskIds);\n+        dynamicFilterService.registerQuery(queryId, dynamicFiltersStageSupplier, ImmutableSet.of(filterId), ImmutableSet.of(filterId), ImmutableSet.of());\n+        ColumnHandle column = new TestingColumnHandle(\"probeColumnA\");\n+        DynamicFilter dynamicFilter = dynamicFilterService.createDynamicFilter(\n+                queryId,\n+                ImmutableList.of(new DynamicFilters.Descriptor(filterId, df1)),\n+                ImmutableMap.of(\n+                        Symbol.from(df1), column));\n+        assertFalse(dynamicFilter.isBlocked().isDone());\n+        assertFalse(dynamicFilter.isComplete());\n+        assertEquals(dynamicFilter.getCurrentPredicate(), TupleDomain.all());\n+\n+        // assert initial dynamic filtering stats", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4MDkxNA=="}, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjA3OTYyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/server/TestDynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTozMDozM1rOHOUttw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTozMDozM1rOHOUttw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4MTQ5NQ==", "bodyText": "remove, we don't need to test these in every test case", "url": "https://github.com/trinodb/trino/pull/5099#discussion_r484781495", "createdAt": "2020-09-08T09:30:33Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/server/TestDynamicFilterService.java", "diffHunk": "@@ -434,6 +435,75 @@ public void testReplicatedDynamicFilter()\n         assertEquals(dynamicFiltersStageSupplier.getRequestCount(), 1);\n     }\n \n+    @Test\n+    public void testDynamicFilterCancellation()\n+    {\n+        DynamicFilterService dynamicFilterService = new DynamicFilterService(new FeaturesConfig());\n+        DynamicFilterId filterId = new DynamicFilterId(\"df\");\n+        Expression df1 = expression(\"DF_SYMBOL1\");\n+        QueryId queryId = new QueryId(\"query\");\n+        StageId stageId = new StageId(queryId, 0);\n+        List<TaskId> taskIds = ImmutableList.of(new TaskId(stageId, 0), new TaskId(stageId, 1));\n+\n+        TestDynamicFiltersStageSupplier dynamicFiltersStageSupplier = new TestDynamicFiltersStageSupplier(RUNNING);\n+        dynamicFiltersStageSupplier.addTasks(taskIds);\n+        dynamicFilterService.registerQuery(queryId, dynamicFiltersStageSupplier, ImmutableSet.of(filterId), ImmutableSet.of(filterId), ImmutableSet.of());\n+        ColumnHandle column = new TestingColumnHandle(\"probeColumnA\");\n+        DynamicFilter dynamicFilter = dynamicFilterService.createDynamicFilter(\n+                queryId,\n+                ImmutableList.of(new DynamicFilters.Descriptor(filterId, df1)),\n+                ImmutableMap.of(\n+                        Symbol.from(df1), column));\n+        assertFalse(dynamicFilter.isBlocked().isDone());\n+        assertFalse(dynamicFilter.isComplete());\n+        assertEquals(dynamicFilter.getCurrentPredicate(), TupleDomain.all());\n+\n+        // assert initial dynamic filtering stats\n+        DynamicFiltersStats stats = dynamicFilterService.getDynamicFilteringStats(queryId, session);\n+        assertEquals(stats.getTotalDynamicFilters(), 1);\n+        assertEquals(stats.getDynamicFiltersCompleted(), 0);\n+        assertEquals(stats.getLazyDynamicFilters(), 1);\n+        assertEquals(stats.getReplicatedDynamicFilters(), 0);\n+\n+        dynamicFiltersStageSupplier.storeSummary(\n+                filterId,\n+                new TaskId(stageId, 0),\n+                singleValue(INTEGER, 1L));\n+        dynamicFilterService.collectDynamicFilters();\n+        assertEquals(dynamicFilter.getCurrentPredicate(), TupleDomain.all());\n+\n+        stats = dynamicFilterService.getDynamicFilteringStats(queryId, session);\n+        assertEquals(stats.getDynamicFiltersCompleted(), 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjA4MTY0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/server/TestDynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTozMTowMFrOHOUu7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTozMTowMFrOHOUu7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4MTgwNQ==", "bodyText": "remove, we don't need to test these in every test case", "url": "https://github.com/trinodb/trino/pull/5099#discussion_r484781805", "createdAt": "2020-09-08T09:31:00Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/server/TestDynamicFilterService.java", "diffHunk": "@@ -434,6 +435,75 @@ public void testReplicatedDynamicFilter()\n         assertEquals(dynamicFiltersStageSupplier.getRequestCount(), 1);\n     }\n \n+    @Test\n+    public void testDynamicFilterCancellation()\n+    {\n+        DynamicFilterService dynamicFilterService = new DynamicFilterService(new FeaturesConfig());\n+        DynamicFilterId filterId = new DynamicFilterId(\"df\");\n+        Expression df1 = expression(\"DF_SYMBOL1\");\n+        QueryId queryId = new QueryId(\"query\");\n+        StageId stageId = new StageId(queryId, 0);\n+        List<TaskId> taskIds = ImmutableList.of(new TaskId(stageId, 0), new TaskId(stageId, 1));\n+\n+        TestDynamicFiltersStageSupplier dynamicFiltersStageSupplier = new TestDynamicFiltersStageSupplier(RUNNING);\n+        dynamicFiltersStageSupplier.addTasks(taskIds);\n+        dynamicFilterService.registerQuery(queryId, dynamicFiltersStageSupplier, ImmutableSet.of(filterId), ImmutableSet.of(filterId), ImmutableSet.of());\n+        ColumnHandle column = new TestingColumnHandle(\"probeColumnA\");\n+        DynamicFilter dynamicFilter = dynamicFilterService.createDynamicFilter(\n+                queryId,\n+                ImmutableList.of(new DynamicFilters.Descriptor(filterId, df1)),\n+                ImmutableMap.of(\n+                        Symbol.from(df1), column));\n+        assertFalse(dynamicFilter.isBlocked().isDone());\n+        assertFalse(dynamicFilter.isComplete());\n+        assertEquals(dynamicFilter.getCurrentPredicate(), TupleDomain.all());\n+\n+        // assert initial dynamic filtering stats\n+        DynamicFiltersStats stats = dynamicFilterService.getDynamicFilteringStats(queryId, session);\n+        assertEquals(stats.getTotalDynamicFilters(), 1);\n+        assertEquals(stats.getDynamicFiltersCompleted(), 0);\n+        assertEquals(stats.getLazyDynamicFilters(), 1);\n+        assertEquals(stats.getReplicatedDynamicFilters(), 0);\n+\n+        dynamicFiltersStageSupplier.storeSummary(\n+                filterId,\n+                new TaskId(stageId, 0),\n+                singleValue(INTEGER, 1L));\n+        dynamicFilterService.collectDynamicFilters();\n+        assertEquals(dynamicFilter.getCurrentPredicate(), TupleDomain.all());\n+\n+        stats = dynamicFilterService.getDynamicFilteringStats(queryId, session);\n+        assertEquals(stats.getDynamicFiltersCompleted(), 0);\n+\n+        // DynamicFilter future cancellation should not affect DynamicFilterService\n+        CompletableFuture<?> isBlocked = dynamicFilter.isBlocked();\n+        assertFalse(isBlocked.isDone());\n+        assertFalse(isBlocked.cancel(false));\n+        assertFalse(dynamicFilter.isBlocked().isDone());\n+        assertFalse(dynamicFilter.isComplete());\n+        stats = dynamicFilterService.getDynamicFilteringStats(queryId, session);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjA4Njc2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/server/TestDynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTozMjoyNVrOHOUyJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzo1NzoyMFrOHOeefA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4MjYzMQ==", "bodyText": "use cancelled isBlocked instead of new future", "url": "https://github.com/trinodb/trino/pull/5099#discussion_r484782631", "createdAt": "2020-09-08T09:32:25Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/server/TestDynamicFilterService.java", "diffHunk": "@@ -434,6 +435,75 @@ public void testReplicatedDynamicFilter()\n         assertEquals(dynamicFiltersStageSupplier.getRequestCount(), 1);\n     }\n \n+    @Test\n+    public void testDynamicFilterCancellation()\n+    {\n+        DynamicFilterService dynamicFilterService = new DynamicFilterService(new FeaturesConfig());\n+        DynamicFilterId filterId = new DynamicFilterId(\"df\");\n+        Expression df1 = expression(\"DF_SYMBOL1\");\n+        QueryId queryId = new QueryId(\"query\");\n+        StageId stageId = new StageId(queryId, 0);\n+        List<TaskId> taskIds = ImmutableList.of(new TaskId(stageId, 0), new TaskId(stageId, 1));\n+\n+        TestDynamicFiltersStageSupplier dynamicFiltersStageSupplier = new TestDynamicFiltersStageSupplier(RUNNING);\n+        dynamicFiltersStageSupplier.addTasks(taskIds);\n+        dynamicFilterService.registerQuery(queryId, dynamicFiltersStageSupplier, ImmutableSet.of(filterId), ImmutableSet.of(filterId), ImmutableSet.of());\n+        ColumnHandle column = new TestingColumnHandle(\"probeColumnA\");\n+        DynamicFilter dynamicFilter = dynamicFilterService.createDynamicFilter(\n+                queryId,\n+                ImmutableList.of(new DynamicFilters.Descriptor(filterId, df1)),\n+                ImmutableMap.of(\n+                        Symbol.from(df1), column));\n+        assertFalse(dynamicFilter.isBlocked().isDone());\n+        assertFalse(dynamicFilter.isComplete());\n+        assertEquals(dynamicFilter.getCurrentPredicate(), TupleDomain.all());\n+\n+        // assert initial dynamic filtering stats\n+        DynamicFiltersStats stats = dynamicFilterService.getDynamicFilteringStats(queryId, session);\n+        assertEquals(stats.getTotalDynamicFilters(), 1);\n+        assertEquals(stats.getDynamicFiltersCompleted(), 0);\n+        assertEquals(stats.getLazyDynamicFilters(), 1);\n+        assertEquals(stats.getReplicatedDynamicFilters(), 0);\n+\n+        dynamicFiltersStageSupplier.storeSummary(\n+                filterId,\n+                new TaskId(stageId, 0),\n+                singleValue(INTEGER, 1L));\n+        dynamicFilterService.collectDynamicFilters();\n+        assertEquals(dynamicFilter.getCurrentPredicate(), TupleDomain.all());\n+\n+        stats = dynamicFilterService.getDynamicFilteringStats(queryId, session);\n+        assertEquals(stats.getDynamicFiltersCompleted(), 0);\n+\n+        // DynamicFilter future cancellation should not affect DynamicFilterService\n+        CompletableFuture<?> isBlocked = dynamicFilter.isBlocked();\n+        assertFalse(isBlocked.isDone());\n+        assertFalse(isBlocked.cancel(false));\n+        assertFalse(dynamicFilter.isBlocked().isDone());\n+        assertFalse(dynamicFilter.isComplete());\n+        stats = dynamicFilterService.getDynamicFilteringStats(queryId, session);\n+        assertEquals(stats.getDynamicFiltersCompleted(), 0);\n+\n+        dynamicFiltersStageSupplier.storeSummary(\n+                filterId,\n+                new TaskId(stageId, 1),\n+                singleValue(INTEGER, 2L));\n+        dynamicFilterService.collectDynamicFilters();\n+        assertTrue(dynamicFilter.isBlocked().isDone());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk0MTQzNg==", "bodyText": "done", "url": "https://github.com/trinodb/trino/pull/5099#discussion_r484941436", "createdAt": "2020-09-08T13:57:20Z", "author": {"login": "raunaqmorarka"}, "path": "presto-main/src/test/java/io/prestosql/server/TestDynamicFilterService.java", "diffHunk": "@@ -434,6 +435,75 @@ public void testReplicatedDynamicFilter()\n         assertEquals(dynamicFiltersStageSupplier.getRequestCount(), 1);\n     }\n \n+    @Test\n+    public void testDynamicFilterCancellation()\n+    {\n+        DynamicFilterService dynamicFilterService = new DynamicFilterService(new FeaturesConfig());\n+        DynamicFilterId filterId = new DynamicFilterId(\"df\");\n+        Expression df1 = expression(\"DF_SYMBOL1\");\n+        QueryId queryId = new QueryId(\"query\");\n+        StageId stageId = new StageId(queryId, 0);\n+        List<TaskId> taskIds = ImmutableList.of(new TaskId(stageId, 0), new TaskId(stageId, 1));\n+\n+        TestDynamicFiltersStageSupplier dynamicFiltersStageSupplier = new TestDynamicFiltersStageSupplier(RUNNING);\n+        dynamicFiltersStageSupplier.addTasks(taskIds);\n+        dynamicFilterService.registerQuery(queryId, dynamicFiltersStageSupplier, ImmutableSet.of(filterId), ImmutableSet.of(filterId), ImmutableSet.of());\n+        ColumnHandle column = new TestingColumnHandle(\"probeColumnA\");\n+        DynamicFilter dynamicFilter = dynamicFilterService.createDynamicFilter(\n+                queryId,\n+                ImmutableList.of(new DynamicFilters.Descriptor(filterId, df1)),\n+                ImmutableMap.of(\n+                        Symbol.from(df1), column));\n+        assertFalse(dynamicFilter.isBlocked().isDone());\n+        assertFalse(dynamicFilter.isComplete());\n+        assertEquals(dynamicFilter.getCurrentPredicate(), TupleDomain.all());\n+\n+        // assert initial dynamic filtering stats\n+        DynamicFiltersStats stats = dynamicFilterService.getDynamicFilteringStats(queryId, session);\n+        assertEquals(stats.getTotalDynamicFilters(), 1);\n+        assertEquals(stats.getDynamicFiltersCompleted(), 0);\n+        assertEquals(stats.getLazyDynamicFilters(), 1);\n+        assertEquals(stats.getReplicatedDynamicFilters(), 0);\n+\n+        dynamicFiltersStageSupplier.storeSummary(\n+                filterId,\n+                new TaskId(stageId, 0),\n+                singleValue(INTEGER, 1L));\n+        dynamicFilterService.collectDynamicFilters();\n+        assertEquals(dynamicFilter.getCurrentPredicate(), TupleDomain.all());\n+\n+        stats = dynamicFilterService.getDynamicFilteringStats(queryId, session);\n+        assertEquals(stats.getDynamicFiltersCompleted(), 0);\n+\n+        // DynamicFilter future cancellation should not affect DynamicFilterService\n+        CompletableFuture<?> isBlocked = dynamicFilter.isBlocked();\n+        assertFalse(isBlocked.isDone());\n+        assertFalse(isBlocked.cancel(false));\n+        assertFalse(dynamicFilter.isBlocked().isDone());\n+        assertFalse(dynamicFilter.isComplete());\n+        stats = dynamicFilterService.getDynamicFilteringStats(queryId, session);\n+        assertEquals(stats.getDynamicFiltersCompleted(), 0);\n+\n+        dynamicFiltersStageSupplier.storeSummary(\n+                filterId,\n+                new TaskId(stageId, 1),\n+                singleValue(INTEGER, 2L));\n+        dynamicFilterService.collectDynamicFilters();\n+        assertTrue(dynamicFilter.isBlocked().isDone());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4MjYzMQ=="}, "originalCommit": null, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjA4ODY0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/server/TestDynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTozMjo1MlrOHOUzQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTozMjo1MlrOHOUzQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4MjkxMg==", "bodyText": "remove, we don't need to test these in every test case", "url": "https://github.com/trinodb/trino/pull/5099#discussion_r484782912", "createdAt": "2020-09-08T09:32:52Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/server/TestDynamicFilterService.java", "diffHunk": "@@ -434,6 +435,75 @@ public void testReplicatedDynamicFilter()\n         assertEquals(dynamicFiltersStageSupplier.getRequestCount(), 1);\n     }\n \n+    @Test\n+    public void testDynamicFilterCancellation()\n+    {\n+        DynamicFilterService dynamicFilterService = new DynamicFilterService(new FeaturesConfig());\n+        DynamicFilterId filterId = new DynamicFilterId(\"df\");\n+        Expression df1 = expression(\"DF_SYMBOL1\");\n+        QueryId queryId = new QueryId(\"query\");\n+        StageId stageId = new StageId(queryId, 0);\n+        List<TaskId> taskIds = ImmutableList.of(new TaskId(stageId, 0), new TaskId(stageId, 1));\n+\n+        TestDynamicFiltersStageSupplier dynamicFiltersStageSupplier = new TestDynamicFiltersStageSupplier(RUNNING);\n+        dynamicFiltersStageSupplier.addTasks(taskIds);\n+        dynamicFilterService.registerQuery(queryId, dynamicFiltersStageSupplier, ImmutableSet.of(filterId), ImmutableSet.of(filterId), ImmutableSet.of());\n+        ColumnHandle column = new TestingColumnHandle(\"probeColumnA\");\n+        DynamicFilter dynamicFilter = dynamicFilterService.createDynamicFilter(\n+                queryId,\n+                ImmutableList.of(new DynamicFilters.Descriptor(filterId, df1)),\n+                ImmutableMap.of(\n+                        Symbol.from(df1), column));\n+        assertFalse(dynamicFilter.isBlocked().isDone());\n+        assertFalse(dynamicFilter.isComplete());\n+        assertEquals(dynamicFilter.getCurrentPredicate(), TupleDomain.all());\n+\n+        // assert initial dynamic filtering stats\n+        DynamicFiltersStats stats = dynamicFilterService.getDynamicFilteringStats(queryId, session);\n+        assertEquals(stats.getTotalDynamicFilters(), 1);\n+        assertEquals(stats.getDynamicFiltersCompleted(), 0);\n+        assertEquals(stats.getLazyDynamicFilters(), 1);\n+        assertEquals(stats.getReplicatedDynamicFilters(), 0);\n+\n+        dynamicFiltersStageSupplier.storeSummary(\n+                filterId,\n+                new TaskId(stageId, 0),\n+                singleValue(INTEGER, 1L));\n+        dynamicFilterService.collectDynamicFilters();\n+        assertEquals(dynamicFilter.getCurrentPredicate(), TupleDomain.all());\n+\n+        stats = dynamicFilterService.getDynamicFilteringStats(queryId, session);\n+        assertEquals(stats.getDynamicFiltersCompleted(), 0);\n+\n+        // DynamicFilter future cancellation should not affect DynamicFilterService\n+        CompletableFuture<?> isBlocked = dynamicFilter.isBlocked();\n+        assertFalse(isBlocked.isDone());\n+        assertFalse(isBlocked.cancel(false));\n+        assertFalse(dynamicFilter.isBlocked().isDone());\n+        assertFalse(dynamicFilter.isComplete());\n+        stats = dynamicFilterService.getDynamicFilteringStats(queryId, session);\n+        assertEquals(stats.getDynamicFiltersCompleted(), 0);\n+\n+        dynamicFiltersStageSupplier.storeSummary(\n+                filterId,\n+                new TaskId(stageId, 1),\n+                singleValue(INTEGER, 2L));\n+        dynamicFilterService.collectDynamicFilters();\n+        assertTrue(dynamicFilter.isBlocked().isDone());\n+        assertTrue(dynamicFilter.isComplete());\n+        assertEquals(dynamicFilter.getCurrentPredicate(), TupleDomain.withColumnDomains(\n+                ImmutableMap.of(column, multipleValues(INTEGER, ImmutableList.of(1L, 2L)))));\n+\n+        stats = dynamicFilterService.getDynamicFilteringStats(queryId, session);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjA5Mzg3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestLocalDynamicFiltersCollector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTozNDoxMlrOHOU2oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzo1NjoyMVrOHOebbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4Mzc3Ng==", "bodyText": "use cancelled isBlocked future for assertion instead of new future", "url": "https://github.com/trinodb/trino/pull/5099#discussion_r484783776", "createdAt": "2020-09-08T09:34:12Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestLocalDynamicFiltersCollector.java", "diffHunk": "@@ -63,6 +63,38 @@ public void testSingle()\n         assertEquals(filter.getCurrentPredicate(), TupleDomain.withColumnDomains(ImmutableMap.of(column, domain)));\n     }\n \n+    @Test\n+    public void testDynamicFilterCancellation()\n+    {\n+        LocalDynamicFiltersCollector collector = new LocalDynamicFiltersCollector();\n+        DynamicFilterId filterId = new DynamicFilterId(\"filter\");\n+        collector.register(ImmutableSet.of(filterId));\n+\n+        Symbol symbol = new Symbol(\"symbol\");\n+        ColumnHandle column = new TestingColumnHandle(\"column\");\n+        DynamicFilter filter = collector.createDynamicFilter(\n+                ImmutableList.of(new DynamicFilters.Descriptor(filterId, symbol.toSymbolReference())),\n+                ImmutableMap.of(symbol, column));\n+\n+        // Filter is blocked and not completed.\n+        CompletableFuture<?> isBlocked = filter.isBlocked();\n+        assertFalse(filter.isComplete());\n+        assertFalse(isBlocked.isDone());\n+        assertEquals(filter.getCurrentPredicate(), TupleDomain.all());\n+        // DynamicFilter future cancellation should not affect LocalDynamicFiltersCollector\n+        assertFalse(isBlocked.cancel(false));\n+        assertFalse(filter.isBlocked().isDone());\n+        assertFalse(filter.isComplete());\n+\n+        Domain domain = Domain.singleValue(BIGINT, 7L);\n+        collector.collectDynamicFilterDomains(ImmutableMap.of(filterId, domain));\n+\n+        // Unblocked and completed.\n+        assertTrue(filter.isComplete());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk0MDY1NA==", "bodyText": "done", "url": "https://github.com/trinodb/trino/pull/5099#discussion_r484940654", "createdAt": "2020-09-08T13:56:21Z", "author": {"login": "raunaqmorarka"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestLocalDynamicFiltersCollector.java", "diffHunk": "@@ -63,6 +63,38 @@ public void testSingle()\n         assertEquals(filter.getCurrentPredicate(), TupleDomain.withColumnDomains(ImmutableMap.of(column, domain)));\n     }\n \n+    @Test\n+    public void testDynamicFilterCancellation()\n+    {\n+        LocalDynamicFiltersCollector collector = new LocalDynamicFiltersCollector();\n+        DynamicFilterId filterId = new DynamicFilterId(\"filter\");\n+        collector.register(ImmutableSet.of(filterId));\n+\n+        Symbol symbol = new Symbol(\"symbol\");\n+        ColumnHandle column = new TestingColumnHandle(\"column\");\n+        DynamicFilter filter = collector.createDynamicFilter(\n+                ImmutableList.of(new DynamicFilters.Descriptor(filterId, symbol.toSymbolReference())),\n+                ImmutableMap.of(symbol, column));\n+\n+        // Filter is blocked and not completed.\n+        CompletableFuture<?> isBlocked = filter.isBlocked();\n+        assertFalse(filter.isComplete());\n+        assertFalse(isBlocked.isDone());\n+        assertEquals(filter.getCurrentPredicate(), TupleDomain.all());\n+        // DynamicFilter future cancellation should not affect LocalDynamicFiltersCollector\n+        assertFalse(isBlocked.cancel(false));\n+        assertFalse(filter.isBlocked().isDone());\n+        assertFalse(filter.isComplete());\n+\n+        Domain domain = Domain.singleValue(BIGINT, 7L);\n+        collector.collectDynamicFilterDomains(ImmutableMap.of(filterId, domain));\n+\n+        // Unblocked and completed.\n+        assertTrue(filter.isComplete());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4Mzc3Ng=="}, "originalCommit": null, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3165, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}