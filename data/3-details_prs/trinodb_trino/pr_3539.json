{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4NjIxODcx", "number": 3539, "title": "Fix mask/filters behavior when mixed with views", "bodyText": "", "createdAt": "2020-04-24T15:35:10Z", "url": "https://github.com/trinodb/trino/pull/3539", "merged": true, "mergeCommit": {"oid": "6721cfad45d47a663c805c496eb40e648a8a1710"}, "closed": true, "closedAt": "2020-04-24T23:31:57Z", "author": {"login": "martint"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcazXQAABqjMyNjk5Njc4MzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABca6IfigBqjMyNzEzMzA0Mjc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMTI3MDc4", "url": "https://github.com/trinodb/trino/pull/3539#pullrequestreview-400127078", "createdAt": "2020-04-24T17:12:13Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMTk5MjE0", "url": "https://github.com/trinodb/trino/pull/3539#pullrequestreview-400199214", "createdAt": "2020-04-24T19:01:16Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTowMToxNlrOGLlOsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTowNzowMVrOGLlbEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc5NzQ5MQ==", "bodyText": "Why exactly?\nThis is just short-circuiting for speed?\nI am concerned this may reduce robustness of the code below (eg should initializePlanBuilder(plan) have possibility of failing, it would not fail, because masks are rare).\nif this stays, this should be likewise applied in the addRowFilters", "url": "https://github.com/trinodb/trino/pull/3539#discussion_r414797491", "createdAt": "2020-04-24T19:01:16Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/RelationPlanner.java", "diffHunk": "@@ -196,11 +201,15 @@ private RelationPlan addRowFilters(Table node, RelationPlan plan)\n \n     private RelationPlan addColumnMasks(Table table, RelationPlan plan)\n     {\n+        Map<String, List<Expression>> columnMasks = analysis.getColumnMasks(table);\n+\n+        if (columnMasks.isEmpty()) {\n+            return plan;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc5OTAzOA==", "bodyText": "This block is for Views and CTEs.\nWe shouldn't try to apply masks/filters on CTEs.\nThis works probably because we do columnMasks.getOrDefault in io.prestosql.sql.analyzer.Analysis#getColumnMasks, but this can also mask (no pun intended) bugs.", "url": "https://github.com/trinodb/trino/pull/3539#discussion_r414799038", "createdAt": "2020-04-24T19:04:05Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/RelationPlanner.java", "diffHunk": "@@ -148,34 +148,39 @@ protected RelationPlan visitTable(Table node, Void context)\n         Query namedQuery = analysis.getNamedQuery(node);\n         Scope scope = analysis.getScope(node);\n \n+        RelationPlan plan;\n         if (namedQuery != null) {\n             RelationPlan subPlan = process(namedQuery, null);\n \n             // Add implicit coercions if view query produces types that don't match the declared output types\n             // of the view (e.g., if the underlying tables referenced by the view changed)\n             Type[] types = scope.getRelationType().getAllFields().stream().map(Field::getType).toArray(Type[]::new);\n             RelationPlan withCoercions = addCoercions(subPlan, types);\n-            return new RelationPlan(withCoercions.getRoot(), scope, withCoercions.getFieldMappings());\n+\n+            plan = new RelationPlan(withCoercions.getRoot(), scope, withCoercions.getFieldMappings());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgwMDY1OQ==", "bodyText": ":)", "url": "https://github.com/trinodb/trino/pull/3539#discussion_r414800659", "createdAt": "2020-04-24T19:07:01Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/sql/query/TestRowFilter.java", "diffHunk": "@@ -189,6 +189,16 @@ public void testView()\n \n             assertions.assertQuery(session, \"SELECT count(*) FROM mock.default.nation_view\", \"VALUES BIGINT '25'\");\n         });\n+\n+        // filter on the view\n+        assertions.executeExclusively(() -> {\n+            accessControl.reset();\n+            accessControl.rowFilter(\n+                    new QualifiedObjectName(MOCK_CATALOG, \"default\", \"nation_view\"),\n+                    USER,\n+                    new ViewExpression(USER, Optional.of(CATALOG), Optional.of(\"tiny\"), \"nationkey = 1\"));\n+            assertions.assertQuery(\"SELECT name FROM mock.default.nation_view\", \"VALUES CAST('ARGENTINA' AS VARCHAR(25))\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84429d84d8fd75d686aa63d0223885c793089395", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/84429d84d8fd75d686aa63d0223885c793089395", "committedDate": "2020-04-24T23:31:47Z", "message": "Apply filters and masks for tables referenced by views"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6721cfad45d47a663c805c496eb40e648a8a1710", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/6721cfad45d47a663c805c496eb40e648a8a1710", "committedDate": "2020-04-24T23:31:47Z", "message": "Apply filters and masks for view object\n\nThe planner for Table node was bailing out early if the table reference\ncorresponded to a view or named query without attaching any masks or\nfilters that may have been resolved."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "6721cfad45d47a663c805c496eb40e648a8a1710", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/6721cfad45d47a663c805c496eb40e648a8a1710", "committedDate": "2020-04-24T23:31:47Z", "message": "Apply filters and masks for view object\n\nThe planner for Table node was bailing out early if the table reference\ncorresponded to a view or named query without attaching any masks or\nfilters that may have been resolved."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1651, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}