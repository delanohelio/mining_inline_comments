{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NzY0NDM4", "number": 2844, "title": "Use LogicalTypeAnnotation in some places", "bodyText": "OriginalType is deprecated.", "createdAt": "2020-02-15T22:35:22Z", "url": "https://github.com/trinodb/trino/pull/2844", "merged": true, "mergeCommit": {"oid": "03b48eeb1231c2b1cdfc2a9ca5b193dacb7ac82d"}, "closed": true, "closedAt": "2020-08-21T16:15:28Z", "author": {"login": "findepi"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcEtoJ5AFqTM1OTM3MzEyMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdBGI3AABqjM2Nzk5ODc0MDg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MzczMTIy", "url": "https://github.com/trinodb/trino/pull/2844#pullrequestreview-359373122", "createdAt": "2020-02-16T00:22:38Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQwMDoyMjozOFrOFqRIiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQwMDoyODo1OFrOFqRKQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2NTIyNw==", "bodyText": "I think this can be\nreturn type.getLogicalTypeAnnotation().getType() == STRING;", "url": "https://github.com/trinodb/trino/pull/2844#discussion_r379865227", "createdAt": "2020-02-16T00:22:38Z", "author": {"login": "electrum"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/reader/MetadataReader.java", "diffHunk": "@@ -220,6 +223,24 @@ private static void readTypeSchema(Types.GroupBuilder<?> builder, Iterator<Schem\n         return columnStatistics;\n     }\n \n+    private static boolean isStringType(PrimitiveType type)\n+    {\n+        if (type.getLogicalTypeAnnotation() == null) {\n+            return false;\n+        }\n+\n+        return type.getLogicalTypeAnnotation()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2NTUyMQ==", "bodyText": "Use the getters", "url": "https://github.com/trinodb/trino/pull/2844#discussion_r379865521", "createdAt": "2020-02-16T00:25:54Z", "author": {"login": "electrum"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/reader/MetadataReader.java", "diffHunk": "@@ -314,55 +313,58 @@ private static PrimitiveTypeName getTypeName(Type type)\n         }\n     }\n \n-    private static OriginalType getOriginalType(ConvertedType type)\n+    // Copied from org.apache.parquet.format.converter.ParquetMetadataConverter#getLogicalTypeAnnotation(org.apache.parquet.format.ConvertedType, org.apache.parquet.format.SchemaElement)\n+    private static LogicalTypeAnnotation getLogicalTypeAnnotation(ConvertedType type, SchemaElement schemaElement)\n     {\n         switch (type) {\n             case UTF8:\n-                return OriginalType.UTF8;\n+                return LogicalTypeAnnotation.stringType();\n             case MAP:\n-                return OriginalType.MAP;\n+                return LogicalTypeAnnotation.mapType();\n             case MAP_KEY_VALUE:\n-                return OriginalType.MAP_KEY_VALUE;\n+                return LogicalTypeAnnotation.MapKeyValueTypeAnnotation.getInstance();\n             case LIST:\n-                return OriginalType.LIST;\n+                return LogicalTypeAnnotation.listType();\n             case ENUM:\n-                return OriginalType.ENUM;\n+                return LogicalTypeAnnotation.enumType();\n             case DECIMAL:\n-                return OriginalType.DECIMAL;\n+                int scale = (schemaElement == null ? 0 : schemaElement.scale);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2NTY2Nw==", "bodyText": "The original error message seems good. IAE is correct since this is a bad argument.", "url": "https://github.com/trinodb/trino/pull/2844#discussion_r379865667", "createdAt": "2020-02-16T00:28:58Z", "author": {"login": "electrum"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/reader/MetadataReader.java", "diffHunk": "@@ -314,55 +313,58 @@ private static PrimitiveTypeName getTypeName(Type type)\n         }\n     }\n \n-    private static OriginalType getOriginalType(ConvertedType type)\n+    // Copied from org.apache.parquet.format.converter.ParquetMetadataConverter#getLogicalTypeAnnotation(org.apache.parquet.format.ConvertedType, org.apache.parquet.format.SchemaElement)\n+    private static LogicalTypeAnnotation getLogicalTypeAnnotation(ConvertedType type, SchemaElement schemaElement)\n     {\n         switch (type) {\n             case UTF8:\n-                return OriginalType.UTF8;\n+                return LogicalTypeAnnotation.stringType();\n             case MAP:\n-                return OriginalType.MAP;\n+                return LogicalTypeAnnotation.mapType();\n             case MAP_KEY_VALUE:\n-                return OriginalType.MAP_KEY_VALUE;\n+                return LogicalTypeAnnotation.MapKeyValueTypeAnnotation.getInstance();\n             case LIST:\n-                return OriginalType.LIST;\n+                return LogicalTypeAnnotation.listType();\n             case ENUM:\n-                return OriginalType.ENUM;\n+                return LogicalTypeAnnotation.enumType();\n             case DECIMAL:\n-                return OriginalType.DECIMAL;\n+                int scale = (schemaElement == null ? 0 : schemaElement.scale);\n+                int precision = (schemaElement == null ? 0 : schemaElement.precision);\n+                return LogicalTypeAnnotation.decimalType(scale, precision);\n             case DATE:\n-                return OriginalType.DATE;\n+                return LogicalTypeAnnotation.dateType();\n             case TIME_MILLIS:\n-                return OriginalType.TIME_MILLIS;\n+                return LogicalTypeAnnotation.timeType(true, LogicalTypeAnnotation.TimeUnit.MILLIS);\n+            case TIME_MICROS:\n+                return LogicalTypeAnnotation.timeType(true, LogicalTypeAnnotation.TimeUnit.MICROS);\n             case TIMESTAMP_MILLIS:\n-                return OriginalType.TIMESTAMP_MILLIS;\n+                return LogicalTypeAnnotation.timestampType(true, LogicalTypeAnnotation.TimeUnit.MILLIS);\n+            case TIMESTAMP_MICROS:\n+                return LogicalTypeAnnotation.timestampType(true, LogicalTypeAnnotation.TimeUnit.MICROS);\n             case INTERVAL:\n-                return OriginalType.INTERVAL;\n+                return LogicalTypeAnnotation.IntervalLogicalTypeAnnotation.getInstance();\n             case INT_8:\n-                return OriginalType.INT_8;\n+                return LogicalTypeAnnotation.intType(8, true);\n             case INT_16:\n-                return OriginalType.INT_16;\n+                return LogicalTypeAnnotation.intType(16, true);\n             case INT_32:\n-                return OriginalType.INT_32;\n+                return LogicalTypeAnnotation.intType(32, true);\n             case INT_64:\n-                return OriginalType.INT_64;\n+                return LogicalTypeAnnotation.intType(64, true);\n             case UINT_8:\n-                return OriginalType.UINT_8;\n+                return LogicalTypeAnnotation.intType(8, false);\n             case UINT_16:\n-                return OriginalType.UINT_16;\n+                return LogicalTypeAnnotation.intType(16, false);\n             case UINT_32:\n-                return OriginalType.UINT_32;\n+                return LogicalTypeAnnotation.intType(32, false);\n             case UINT_64:\n-                return OriginalType.UINT_64;\n+                return LogicalTypeAnnotation.intType(64, false);\n             case JSON:\n-                return OriginalType.JSON;\n+                return LogicalTypeAnnotation.jsonType();\n             case BSON:\n-                return OriginalType.BSON;\n-            case TIMESTAMP_MICROS:\n-                return OriginalType.TIMESTAMP_MICROS;\n-            case TIME_MICROS:\n-                return OriginalType.TIME_MICROS;\n+                return LogicalTypeAnnotation.bsonType();\n             default:\n-                throw new IllegalArgumentException(\"Unknown converted type \" + type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MzczNTc4", "url": "https://github.com/trinodb/trino/pull/2844#pullrequestreview-359373578", "createdAt": "2020-02-16T00:38:24Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQwMDozODoyNFrOFqRLsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQwMDozODoyNFrOFqRLsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2NjAzNA==", "bodyText": "We could add a shim to call this in the shaded Hive build, like this: https://github.com/prestosql/presto-hive-apache/blob/master/src/main/java/org/apache/parquet/io/ColumnIOUtil.java", "url": "https://github.com/trinodb/trino/pull/2844#discussion_r379866034", "createdAt": "2020-02-16T00:38:24Z", "author": {"login": "electrum"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/reader/MetadataReader.java", "diffHunk": "@@ -293,55 +313,58 @@ private static PrimitiveTypeName getTypeName(Type type)\n         }\n     }\n \n-    private static OriginalType getOriginalType(ConvertedType type)\n+    // Copied from org.apache.parquet.format.converter.ParquetMetadataConverter#getLogicalTypeAnnotation(org.apache.parquet.format.ConvertedType, org.apache.parquet.format.SchemaElement)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 67}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyODk1Njgz", "url": "https://github.com/trinodb/trino/pull/2844#pullrequestreview-362895683", "createdAt": "2020-02-21T20:25:22Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMDoyNToyMlrOFtDmlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMDoyNToyMlrOFtDmlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc4OTI3MQ==", "bodyText": "don't forget to update this", "url": "https://github.com/trinodb/trino/pull/2844#discussion_r382789271", "createdAt": "2020-02-21T20:25:22Z", "author": {"login": "findepi"}, "path": "pom.xml", "diffHunk": "@@ -444,7 +444,7 @@\n             <dependency>\n                 <groupId>io.prestosql.hive</groupId>\n                 <artifactId>hive-apache</artifactId>\n-                <version>3.0.0-4</version>\n+                <version>3.0.0-5-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa82b8b4957d4f866c70a7843dd0e4d16880fd36", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/aa82b8b4957d4f866c70a7843dd0e4d16880fd36", "committedDate": "2020-08-21T14:58:23Z", "message": "Inspect LogicalTypeAnnotation\n\n`OriginalType` is deprecated, inspect `LogicalTypeAnnotation` directly\ninstead."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38f03477ea8ab38569e6c7738c8bd6f2f2b4d9dc", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/38f03477ea8ab38569e6c7738c8bd6f2f2b4d9dc", "committedDate": "2020-08-21T14:59:17Z", "message": "Retain decimal attributes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "38f03477ea8ab38569e6c7738c8bd6f2f2b4d9dc", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/38f03477ea8ab38569e6c7738c8bd6f2f2b4d9dc", "committedDate": "2020-08-21T14:59:17Z", "message": "Retain decimal attributes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1689, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}