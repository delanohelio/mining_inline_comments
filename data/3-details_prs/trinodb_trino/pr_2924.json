{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4OTYyNTM5", "number": 2924, "title": "Procedure system access control", "bodyText": "", "createdAt": "2020-02-24T12:24:27Z", "url": "https://github.com/trinodb/trino/pull/2924", "merged": true, "mergeCommit": {"oid": "f46d08fcb56110d13dd4b3ce83ea003336110122"}, "closed": true, "closedAt": "2020-03-06T11:40:38Z", "author": {"login": "skrzypo987"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHc7UQgBqjMwNjUyMTQ4NDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcK6cn6gBqjMxMDQxODg3NjM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNDE1MjEy", "url": "https://github.com/trinodb/trino/pull/2924#pullrequestreview-363415212", "createdAt": "2020-02-24T14:11:58Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoxMTo1OVrOFth6sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoyMDowM1rOFtiMcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI4NTkzOA==", "bodyText": "@AfterClass(alwaysRun = true)", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r383285938", "createdAt": "2020-02-24T14:11:59Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.CatalogManager;\n+import io.prestosql.metadata.MetadataManager;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.security.AllowAllAccessControl;\n+import io.prestosql.spi.procedure.Procedure;\n+import io.prestosql.spi.resourcegroups.ResourceGroupId;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.sql.analyzer.FeaturesConfig;\n+import io.prestosql.sql.tree.Call;\n+import io.prestosql.sql.tree.CallArgument;\n+import io.prestosql.sql.tree.LongLiteral;\n+import io.prestosql.sql.tree.QualifiedName;\n+import io.prestosql.transaction.TransactionManager;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.net.URI;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+\n+import static io.airlift.concurrent.Threads.daemonThreadsNamed;\n+import static io.prestosql.metadata.MetadataManager.createTestMetadataManager;\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.testing.TestingSession.createBogusTestingCatalog;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static io.prestosql.transaction.InMemoryTransactionManager.createTestTransactionManager;\n+import static java.util.concurrent.Executors.newCachedThreadPool;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestCallTask\n+{\n+    private final ExecutorService executor = newCachedThreadPool(daemonThreadsNamed(\"call-task-test-%s\"));\n+\n+    private static Set<Long> invocations = new HashSet<>();\n+\n+    @AfterClass", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI4NjM3MQ==", "bodyText": "long", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r383286371", "createdAt": "2020-02-24T14:12:43Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.CatalogManager;\n+import io.prestosql.metadata.MetadataManager;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.security.AllowAllAccessControl;\n+import io.prestosql.spi.procedure.Procedure;\n+import io.prestosql.spi.resourcegroups.ResourceGroupId;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.sql.analyzer.FeaturesConfig;\n+import io.prestosql.sql.tree.Call;\n+import io.prestosql.sql.tree.CallArgument;\n+import io.prestosql.sql.tree.LongLiteral;\n+import io.prestosql.sql.tree.QualifiedName;\n+import io.prestosql.transaction.TransactionManager;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.net.URI;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+\n+import static io.airlift.concurrent.Threads.daemonThreadsNamed;\n+import static io.prestosql.metadata.MetadataManager.createTestMetadataManager;\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.testing.TestingSession.createBogusTestingCatalog;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static io.prestosql.transaction.InMemoryTransactionManager.createTestTransactionManager;\n+import static java.util.concurrent.Executors.newCachedThreadPool;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestCallTask\n+{\n+    private final ExecutorService executor = newCachedThreadPool(daemonThreadsNamed(\"call-task-test-%s\"));\n+\n+    private static Set<Long> invocations = new HashSet<>();\n+\n+    @AfterClass\n+    public void close()\n+    {\n+        executor.shutdown();\n+    }\n+\n+    @Test\n+    public void testExecute()\n+    {\n+        TransactionManager transactionManager = createTransactionManager();\n+        MetadataManager metadata = createMetadataManager(transactionManager);\n+\n+        AccessControl accessControl = new AllowAllAccessControl();\n+        QueryStateMachine stateMachine = stateMachine(transactionManager, metadata, accessControl);\n+\n+        Call procedure = getProcedureInvocation(1);\n+\n+        new CallTask().execute(procedure, transactionManager, metadata, accessControl, stateMachine, ImmutableList.of());\n+\n+        assertThat(invocations).contains(1L);\n+    }\n+\n+    private Call getProcedureInvocation(int id)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI4NzUwNQ==", "bodyText": "s/foo/procedure\nI would inline getTestProcedure()", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r383287505", "createdAt": "2020-02-24T14:14:47Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.CatalogManager;\n+import io.prestosql.metadata.MetadataManager;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.security.AllowAllAccessControl;\n+import io.prestosql.spi.procedure.Procedure;\n+import io.prestosql.spi.resourcegroups.ResourceGroupId;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.sql.analyzer.FeaturesConfig;\n+import io.prestosql.sql.tree.Call;\n+import io.prestosql.sql.tree.CallArgument;\n+import io.prestosql.sql.tree.LongLiteral;\n+import io.prestosql.sql.tree.QualifiedName;\n+import io.prestosql.transaction.TransactionManager;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.net.URI;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+\n+import static io.airlift.concurrent.Threads.daemonThreadsNamed;\n+import static io.prestosql.metadata.MetadataManager.createTestMetadataManager;\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.testing.TestingSession.createBogusTestingCatalog;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static io.prestosql.transaction.InMemoryTransactionManager.createTestTransactionManager;\n+import static java.util.concurrent.Executors.newCachedThreadPool;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestCallTask\n+{\n+    private final ExecutorService executor = newCachedThreadPool(daemonThreadsNamed(\"call-task-test-%s\"));\n+\n+    private static Set<Long> invocations = new HashSet<>();\n+\n+    @AfterClass\n+    public void close()\n+    {\n+        executor.shutdown();\n+    }\n+\n+    @Test\n+    public void testExecute()\n+    {\n+        TransactionManager transactionManager = createTransactionManager();\n+        MetadataManager metadata = createMetadataManager(transactionManager);\n+\n+        AccessControl accessControl = new AllowAllAccessControl();\n+        QueryStateMachine stateMachine = stateMachine(transactionManager, metadata, accessControl);\n+\n+        Call procedure = getProcedureInvocation(1);\n+\n+        new CallTask().execute(procedure, transactionManager, metadata, accessControl, stateMachine, ImmutableList.of());\n+\n+        assertThat(invocations).contains(1L);\n+    }\n+\n+    private Call getProcedureInvocation(int id)\n+    {\n+        return new Call(QualifiedName.of(\"foo\"), ImmutableList.of(new CallArgument(new LongLiteral(Integer.toString(id)))));\n+    }\n+\n+    private MetadataManager createMetadataManager(TransactionManager transactionManager)\n+    {\n+        MetadataManager metadata = createTestMetadataManager(transactionManager, new FeaturesConfig());\n+        Procedure foo = getTestProcedure();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI4NzYxOA==", "bodyText": "no need for this empty line", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r383287618", "createdAt": "2020-02-24T14:15:00Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.CatalogManager;\n+import io.prestosql.metadata.MetadataManager;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.security.AllowAllAccessControl;\n+import io.prestosql.spi.procedure.Procedure;\n+import io.prestosql.spi.resourcegroups.ResourceGroupId;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.sql.analyzer.FeaturesConfig;\n+import io.prestosql.sql.tree.Call;\n+import io.prestosql.sql.tree.CallArgument;\n+import io.prestosql.sql.tree.LongLiteral;\n+import io.prestosql.sql.tree.QualifiedName;\n+import io.prestosql.transaction.TransactionManager;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.net.URI;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+\n+import static io.airlift.concurrent.Threads.daemonThreadsNamed;\n+import static io.prestosql.metadata.MetadataManager.createTestMetadataManager;\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.testing.TestingSession.createBogusTestingCatalog;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static io.prestosql.transaction.InMemoryTransactionManager.createTestTransactionManager;\n+import static java.util.concurrent.Executors.newCachedThreadPool;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestCallTask\n+{\n+    private final ExecutorService executor = newCachedThreadPool(daemonThreadsNamed(\"call-task-test-%s\"));\n+\n+    private static Set<Long> invocations = new HashSet<>();\n+\n+    @AfterClass\n+    public void close()\n+    {\n+        executor.shutdown();\n+    }\n+\n+    @Test\n+    public void testExecute()\n+    {\n+        TransactionManager transactionManager = createTransactionManager();\n+        MetadataManager metadata = createMetadataManager(transactionManager);\n+\n+        AccessControl accessControl = new AllowAllAccessControl();\n+        QueryStateMachine stateMachine = stateMachine(transactionManager, metadata, accessControl);\n+\n+        Call procedure = getProcedureInvocation(1);\n+\n+        new CallTask().execute(procedure, transactionManager, metadata, accessControl, stateMachine, ImmutableList.of());\n+\n+        assertThat(invocations).contains(1L);\n+    }\n+\n+    private Call getProcedureInvocation(int id)\n+    {\n+        return new Call(QualifiedName.of(\"foo\"), ImmutableList.of(new CallArgument(new LongLiteral(Integer.toString(id)))));\n+    }\n+\n+    private MetadataManager createMetadataManager(TransactionManager transactionManager)\n+    {\n+        MetadataManager metadata = createTestMetadataManager(transactionManager, new FeaturesConfig());\n+        Procedure foo = getTestProcedure();\n+        metadata.getProcedureRegistry().addProcedures(new CatalogName(\"test\"), ImmutableList.of(foo));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI4ODEzNQ==", "bodyText": "s/foo/testing_procedure", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r383288135", "createdAt": "2020-02-24T14:15:51Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.CatalogManager;\n+import io.prestosql.metadata.MetadataManager;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.security.AllowAllAccessControl;\n+import io.prestosql.spi.procedure.Procedure;\n+import io.prestosql.spi.resourcegroups.ResourceGroupId;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.sql.analyzer.FeaturesConfig;\n+import io.prestosql.sql.tree.Call;\n+import io.prestosql.sql.tree.CallArgument;\n+import io.prestosql.sql.tree.LongLiteral;\n+import io.prestosql.sql.tree.QualifiedName;\n+import io.prestosql.transaction.TransactionManager;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.net.URI;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+\n+import static io.airlift.concurrent.Threads.daemonThreadsNamed;\n+import static io.prestosql.metadata.MetadataManager.createTestMetadataManager;\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.testing.TestingSession.createBogusTestingCatalog;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static io.prestosql.transaction.InMemoryTransactionManager.createTestTransactionManager;\n+import static java.util.concurrent.Executors.newCachedThreadPool;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestCallTask\n+{\n+    private final ExecutorService executor = newCachedThreadPool(daemonThreadsNamed(\"call-task-test-%s\"));\n+\n+    private static Set<Long> invocations = new HashSet<>();\n+\n+    @AfterClass\n+    public void close()\n+    {\n+        executor.shutdown();\n+    }\n+\n+    @Test\n+    public void testExecute()\n+    {\n+        TransactionManager transactionManager = createTransactionManager();\n+        MetadataManager metadata = createMetadataManager(transactionManager);\n+\n+        AccessControl accessControl = new AllowAllAccessControl();\n+        QueryStateMachine stateMachine = stateMachine(transactionManager, metadata, accessControl);\n+\n+        Call procedure = getProcedureInvocation(1);\n+\n+        new CallTask().execute(procedure, transactionManager, metadata, accessControl, stateMachine, ImmutableList.of());\n+\n+        assertThat(invocations).contains(1L);\n+    }\n+\n+    private Call getProcedureInvocation(int id)\n+    {\n+        return new Call(QualifiedName.of(\"foo\"), ImmutableList.of(new CallArgument(new LongLiteral(Integer.toString(id)))));\n+    }\n+\n+    private MetadataManager createMetadataManager(TransactionManager transactionManager)\n+    {\n+        MetadataManager metadata = createTestMetadataManager(transactionManager, new FeaturesConfig());\n+        Procedure foo = getTestProcedure();\n+        metadata.getProcedureRegistry().addProcedures(new CatalogName(\"test\"), ImmutableList.of(foo));\n+\n+        return metadata;\n+    }\n+\n+    private TransactionManager createTransactionManager()\n+    {\n+        CatalogManager catalogManager = new CatalogManager();\n+        catalogManager.registerCatalog(createBogusTestingCatalog(\"test\"));\n+        return createTestTransactionManager(catalogManager);\n+    }\n+\n+    private Procedure getTestProcedure()\n+    {\n+        return new Procedure(\n+                \"test\",\n+                \"foo\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI5MDM3Nw==", "bodyText": "no need for empty line here", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r383290377", "createdAt": "2020-02-24T14:19:50Z", "author": {"login": "kokosing"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/CatalogSchemaProcedureName.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.connector;\n+\n+import java.util.Objects;\n+\n+import static java.util.Locale.ENGLISH;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CatalogSchemaProcedureName\n+{\n+    private final String catalogName;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI5MDQxOA==", "bodyText": "final", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r383290418", "createdAt": "2020-02-24T14:19:54Z", "author": {"login": "kokosing"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/CatalogSchemaProcedureName.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.connector;\n+\n+import java.util.Objects;\n+\n+import static java.util.Locale.ENGLISH;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CatalogSchemaProcedureName", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI5MDQ4Mw==", "bodyText": "final", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r383290483", "createdAt": "2020-02-24T14:20:03Z", "author": {"login": "kokosing"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/SchemaProcedureName.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.connector;\n+\n+import java.util.Objects;\n+\n+import static java.util.Locale.ENGLISH;\n+import static java.util.Objects.requireNonNull;\n+\n+public class SchemaProcedureName", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzODkyNzk1", "url": "https://github.com/trinodb/trino/pull/2924#pullrequestreview-363892795", "createdAt": "2020-02-25T06:18:10Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0Njg0NzQz", "url": "https://github.com/trinodb/trino/pull/2924#pullrequestreview-364684743", "createdAt": "2020-02-26T08:02:30Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODowMjozMFrOFuhUNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODoxNToyNFrOFuhoaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyNDY2Mw==", "bodyText": "bump", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384324663", "createdAt": "2020-02-26T08:02:30Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.CatalogManager;\n+import io.prestosql.metadata.MetadataManager;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.security.AllowAllAccessControl;\n+import io.prestosql.spi.procedure.Procedure;\n+import io.prestosql.spi.resourcegroups.ResourceGroupId;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.sql.analyzer.FeaturesConfig;\n+import io.prestosql.sql.tree.Call;\n+import io.prestosql.sql.tree.CallArgument;\n+import io.prestosql.sql.tree.LongLiteral;\n+import io.prestosql.sql.tree.QualifiedName;\n+import io.prestosql.transaction.TransactionManager;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.net.URI;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+\n+import static io.airlift.concurrent.Threads.daemonThreadsNamed;\n+import static io.prestosql.metadata.MetadataManager.createTestMetadataManager;\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.testing.TestingSession.createBogusTestingCatalog;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static io.prestosql.transaction.InMemoryTransactionManager.createTestTransactionManager;\n+import static java.util.concurrent.Executors.newCachedThreadPool;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestCallTask\n+{\n+    private final ExecutorService executor = newCachedThreadPool(daemonThreadsNamed(\"call-task-test-%s\"));\n+\n+    private static Set<Long> invocations = new HashSet<>();\n+\n+    @AfterClass", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI4NTkzOA=="}, "originalCommit": null, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyNDgwNQ==", "bodyText": "shutdownNow", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384324805", "createdAt": "2020-02-26T08:02:52Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.CatalogManager;\n+import io.prestosql.metadata.MetadataManager;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.security.AllowAllAccessControl;\n+import io.prestosql.spi.procedure.Procedure;\n+import io.prestosql.spi.resourcegroups.ResourceGroupId;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.sql.analyzer.FeaturesConfig;\n+import io.prestosql.sql.tree.Call;\n+import io.prestosql.sql.tree.CallArgument;\n+import io.prestosql.sql.tree.LongLiteral;\n+import io.prestosql.sql.tree.QualifiedName;\n+import io.prestosql.transaction.TransactionManager;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.net.URI;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+\n+import static io.airlift.concurrent.Threads.daemonThreadsNamed;\n+import static io.prestosql.metadata.MetadataManager.createTestMetadataManager;\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.testing.TestingSession.createBogusTestingCatalog;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static io.prestosql.transaction.InMemoryTransactionManager.createTestTransactionManager;\n+import static java.util.concurrent.Executors.newCachedThreadPool;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestCallTask\n+{\n+    private final ExecutorService executor = newCachedThreadPool(daemonThreadsNamed(\"call-task-test-%s\"));\n+\n+    private static Set<Long> invocations = new HashSet<>();\n+\n+    @AfterClass\n+    public void close()\n+    {\n+        executor.shutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyNTEzMg==", "bodyText": "should be static. but even better, should be created in @BeforeClass", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384325132", "createdAt": "2020-02-26T08:03:39Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.CatalogManager;\n+import io.prestosql.metadata.MetadataManager;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.security.AllowAllAccessControl;\n+import io.prestosql.spi.procedure.Procedure;\n+import io.prestosql.spi.resourcegroups.ResourceGroupId;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.sql.analyzer.FeaturesConfig;\n+import io.prestosql.sql.tree.Call;\n+import io.prestosql.sql.tree.CallArgument;\n+import io.prestosql.sql.tree.LongLiteral;\n+import io.prestosql.sql.tree.QualifiedName;\n+import io.prestosql.transaction.TransactionManager;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.net.URI;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+\n+import static io.airlift.concurrent.Threads.daemonThreadsNamed;\n+import static io.prestosql.metadata.MetadataManager.createTestMetadataManager;\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.testing.TestingSession.createBogusTestingCatalog;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static io.prestosql.transaction.InMemoryTransactionManager.createTestTransactionManager;\n+import static java.util.concurrent.Executors.newCachedThreadPool;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestCallTask\n+{\n+    private final ExecutorService executor = newCachedThreadPool(daemonThreadsNamed(\"call-task-test-%s\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyNTM4NQ==", "bodyText": "mark the test class as @Test(singleThreaded = true). Today you have 1 test method, but the approach taken won't allow concurrent test executions in the future", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384325385", "createdAt": "2020-02-26T08:04:16Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.CatalogManager;\n+import io.prestosql.metadata.MetadataManager;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.security.AllowAllAccessControl;\n+import io.prestosql.spi.procedure.Procedure;\n+import io.prestosql.spi.resourcegroups.ResourceGroupId;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.sql.analyzer.FeaturesConfig;\n+import io.prestosql.sql.tree.Call;\n+import io.prestosql.sql.tree.CallArgument;\n+import io.prestosql.sql.tree.LongLiteral;\n+import io.prestosql.sql.tree.QualifiedName;\n+import io.prestosql.transaction.TransactionManager;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.net.URI;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+\n+import static io.airlift.concurrent.Threads.daemonThreadsNamed;\n+import static io.prestosql.metadata.MetadataManager.createTestMetadataManager;\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.testing.TestingSession.createBogusTestingCatalog;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static io.prestosql.transaction.InMemoryTransactionManager.createTestTransactionManager;\n+import static java.util.concurrent.Executors.newCachedThreadPool;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestCallTask\n+{\n+    private final ExecutorService executor = newCachedThreadPool(daemonThreadsNamed(\"call-task-test-%s\"));\n+\n+    private static Set<Long> invocations = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyNjE5OA==", "bodyText": "Maybe test with more meaningful (aka \"more random\") number. 1 is more likely to come from a different place than eg 2382344352.", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384326198", "createdAt": "2020-02-26T08:06:20Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.CatalogManager;\n+import io.prestosql.metadata.MetadataManager;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.security.AllowAllAccessControl;\n+import io.prestosql.spi.procedure.Procedure;\n+import io.prestosql.spi.resourcegroups.ResourceGroupId;\n+import io.prestosql.spi.type.BigintType;\n+import io.prestosql.sql.analyzer.FeaturesConfig;\n+import io.prestosql.sql.tree.Call;\n+import io.prestosql.sql.tree.CallArgument;\n+import io.prestosql.sql.tree.LongLiteral;\n+import io.prestosql.sql.tree.QualifiedName;\n+import io.prestosql.transaction.TransactionManager;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.net.URI;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+\n+import static io.airlift.concurrent.Threads.daemonThreadsNamed;\n+import static io.prestosql.metadata.MetadataManager.createTestMetadataManager;\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.testing.TestingSession.createBogusTestingCatalog;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static io.prestosql.transaction.InMemoryTransactionManager.createTestTransactionManager;\n+import static java.util.concurrent.Executors.newCachedThreadPool;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestCallTask\n+{\n+    private final ExecutorService executor = newCachedThreadPool(daemonThreadsNamed(\"call-task-test-%s\"));\n+\n+    private static Set<Long> invocations = new HashSet<>();\n+\n+    @AfterClass\n+    public void close()\n+    {\n+        executor.shutdown();\n+    }\n+\n+    @Test\n+    public void testExecute()\n+    {\n+        TransactionManager transactionManager = createTransactionManager();\n+        MetadataManager metadata = createMetadataManager(transactionManager);\n+\n+        AccessControl accessControl = new AllowAllAccessControl();\n+        QueryStateMachine stateMachine = stateMachine(transactionManager, metadata, accessControl);\n+\n+        Call procedure = getProcedureInvocation(1);\n+\n+        new CallTask().execute(procedure, transactionManager, metadata, accessControl, stateMachine, ImmutableList.of());\n+\n+        assertThat(invocations).contains(1L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyNzc4Nw==", "bodyText": "if you make the tests singlethreaded, you can clear invocations in @BeforeMethod and here assert it's empty", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384327787", "createdAt": "2020-02-26T08:10:26Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -76,17 +81,38 @@ public void testExecute()\n         assertThat(invocations).contains(1L);\n     }\n \n-    private Call getProcedureInvocation(int id)\n+    @Test\n+    public void testExecuteNoPermission()\n+    {\n+        TransactionManager transactionManager = createTransactionManager();\n+        MetadataManager metadata = createMetadataManager(transactionManager);\n+\n+        AccessControl accessControl = new DenyProcedureAccessControl();\n+        QueryStateMachine stateMachine = stateMachine(transactionManager, metadata, accessControl);\n+\n+        Call procedure = getProcedureInvocation(2);\n+\n+        assertThatThrownBy(\n+                () -> new CallTask().execute(procedure, transactionManager, metadata, accessControl, stateMachine, ImmutableList.of()))\n+                .isInstanceOf(AccessDeniedException.class);\n+\n+        assertThat(invocations).doesNotContain(2L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyODA0MA==", "bodyText": "Belongs to previous commit", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384328040", "createdAt": "2020-02-26T08:11:02Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -97,19 +123,10 @@ private TransactionManager createTransactionManager()\n         return createTestTransactionManager(catalogManager);\n     }\n \n-    private Procedure getTestProcedure()\n-    {\n-        return new Procedure(\n-                \"test\",\n-                \"foo\",\n-                ImmutableList.of(new Procedure.Argument(\"id\", BigintType.BIGINT)),\n-                methodHandle(TestCallTask.class, \"testingMethod\", Long.class));\n-    }\n-\n     private QueryStateMachine stateMachine(TransactionManager transactionManager, MetadataManager metadata, AccessControl accessControl)\n     {\n         return QueryStateMachine.begin(\n-                \"CALL foo()\",\n+                \"CALL testing_procedure()\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyODE1OQ==", "bodyText": "Belongs to previous commit", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384328159", "createdAt": "2020-02-26T08:11:20Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -76,17 +81,38 @@ public void testExecute()\n         assertThat(invocations).contains(1L);\n     }\n \n-    private Call getProcedureInvocation(int id)\n+    @Test\n+    public void testExecuteNoPermission()\n+    {\n+        TransactionManager transactionManager = createTransactionManager();\n+        MetadataManager metadata = createMetadataManager(transactionManager);\n+\n+        AccessControl accessControl = new DenyProcedureAccessControl();\n+        QueryStateMachine stateMachine = stateMachine(transactionManager, metadata, accessControl);\n+\n+        Call procedure = getProcedureInvocation(2);\n+\n+        assertThatThrownBy(\n+                () -> new CallTask().execute(procedure, transactionManager, metadata, accessControl, stateMachine, ImmutableList.of()))\n+                .isInstanceOf(AccessDeniedException.class);\n+\n+        assertThat(invocations).doesNotContain(2L);\n+    }\n+\n+    private Call getProcedureInvocation(long id)\n     {\n-        return new Call(QualifiedName.of(\"foo\"), ImmutableList.of(new CallArgument(new LongLiteral(Integer.toString(id)))));\n+        return new Call(QualifiedName.of(\"testing_procedure\"), ImmutableList.of(new CallArgument(new LongLiteral(Long.toString(id)))));\n     }\n \n     private MetadataManager createMetadataManager(TransactionManager transactionManager)\n     {\n         MetadataManager metadata = createTestMetadataManager(transactionManager, new FeaturesConfig());\n-        Procedure foo = getTestProcedure();\n-        metadata.getProcedureRegistry().addProcedures(new CatalogName(\"test\"), ImmutableList.of(foo));\n-\n+        Procedure procedure = new Procedure(\n+                \"test\",\n+                \"testing_procedure\",\n+                ImmutableList.of(new Procedure.Argument(\"id\", BigintType.BIGINT)),\n+                methodHandle(TestCallTask.class, \"testingMethod\", Long.class));\n+        metadata.getProcedureRegistry().addProcedures(new CatalogName(\"test\"), ImmutableList.of(procedure));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyODIwMw==", "bodyText": "Belongs to previous commit", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384328203", "createdAt": "2020-02-26T08:11:26Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -76,17 +81,38 @@ public void testExecute()\n         assertThat(invocations).contains(1L);\n     }\n \n-    private Call getProcedureInvocation(int id)\n+    @Test\n+    public void testExecuteNoPermission()\n+    {\n+        TransactionManager transactionManager = createTransactionManager();\n+        MetadataManager metadata = createMetadataManager(transactionManager);\n+\n+        AccessControl accessControl = new DenyProcedureAccessControl();\n+        QueryStateMachine stateMachine = stateMachine(transactionManager, metadata, accessControl);\n+\n+        Call procedure = getProcedureInvocation(2);\n+\n+        assertThatThrownBy(\n+                () -> new CallTask().execute(procedure, transactionManager, metadata, accessControl, stateMachine, ImmutableList.of()))\n+                .isInstanceOf(AccessDeniedException.class);\n+\n+        assertThat(invocations).doesNotContain(2L);\n+    }\n+\n+    private Call getProcedureInvocation(long id)\n     {\n-        return new Call(QualifiedName.of(\"foo\"), ImmutableList.of(new CallArgument(new LongLiteral(Integer.toString(id)))));\n+        return new Call(QualifiedName.of(\"testing_procedure\"), ImmutableList.of(new CallArgument(new LongLiteral(Long.toString(id)))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyODQxMw==", "bodyText": "You can use generic DenyAll since you're going to verify the exception message anyway", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384328413", "createdAt": "2020-02-26T08:11:55Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -135,4 +152,14 @@ public static void testingMethod(Long id)\n     {\n         invocations.add(id);\n     }\n+\n+    private static class DenyProcedureAccessControl", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyODUwNQ==", "bodyText": "verify message (with equality rather than pattern matching)", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384328505", "createdAt": "2020-02-26T08:12:13Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -76,17 +81,38 @@ public void testExecute()\n         assertThat(invocations).contains(1L);\n     }\n \n-    private Call getProcedureInvocation(int id)\n+    @Test\n+    public void testExecuteNoPermission()\n+    {\n+        TransactionManager transactionManager = createTransactionManager();\n+        MetadataManager metadata = createMetadataManager(transactionManager);\n+\n+        AccessControl accessControl = new DenyProcedureAccessControl();\n+        QueryStateMachine stateMachine = stateMachine(transactionManager, metadata, accessControl);\n+\n+        Call procedure = getProcedureInvocation(2);\n+\n+        assertThatThrownBy(\n+                () -> new CallTask().execute(procedure, transactionManager, metadata, accessControl, stateMachine, ImmutableList.of()))\n+                .isInstanceOf(AccessDeniedException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyOTE1NA==", "bodyText": "// TODO implement and let's do this as a followup", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384329154", "createdAt": "2020-02-26T08:13:38Z", "author": {"login": "findepi"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedAccessControl.java", "diffHunk": "@@ -317,6 +318,11 @@ public void checkCanShowRoleGrants(ConnectorSecurityContext context, String cata\n     {\n     }\n \n+    @Override\n+    public void checkCanExecuteProcedure(ConnectorSecurityContext context, SchemaProcedureName procedure)\n+    {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyOTMyMg==", "bodyText": "// TODO implement", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384329322", "createdAt": "2020-02-26T08:14:06Z", "author": {"login": "findepi"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedSystemAccessControl.java", "diffHunk": "@@ -520,4 +521,9 @@ public void checkCanRevokeTablePrivilege(SystemSecurityContext context, Privileg\n     public void checkCanShowRoles(SystemSecurityContext context, String catalogName)\n     {\n     }\n+\n+    @Override\n+    public void checkCanExecuteProcedure(SystemSecurityContext systemSecurityContext, CatalogSchemaProcedureName procedure)\n+    {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyOTU5OQ==", "bodyText": "it should deny", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384329599", "createdAt": "2020-02-26T08:14:50Z", "author": {"login": "findepi"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/ReadOnlyAccessControl.java", "diffHunk": "@@ -194,4 +195,10 @@ public void checkCanShowRoleGrants(ConnectorSecurityContext context, String cata\n     {\n         // allow\n     }\n+\n+    @Override\n+    public void checkCanExecuteProcedure(ConnectorSecurityContext context, SchemaProcedureName procedure)\n+    {\n+        // allow", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyOTgzNQ==", "bodyText": "it should deny; procedures are purely side-effect invocations, so arguably none is read-only operation", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384329835", "createdAt": "2020-02-26T08:15:24Z", "author": {"login": "findepi"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/ReadOnlySystemAccessControl.java", "diffHunk": "@@ -143,4 +144,9 @@ public void checkCanShowSchemas(SystemSecurityContext context, String catalogNam\n     public void checkCanShowRoles(SystemSecurityContext context, String catalogName)\n     {\n     }\n+\n+    @Override\n+    public void checkCanExecuteProcedure(SystemSecurityContext systemSecurityContext, CatalogSchemaProcedureName procedure)\n+    {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NzgzMTI1", "url": "https://github.com/trinodb/trino/pull/2924#pullrequestreview-364783125", "createdAt": "2020-02-26T10:27:07Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDoyNzowN1rOFumEeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDozMzozOFrOFumS3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQwMjU1NA==", "bodyText": "`private", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384402554", "createdAt": "2020-02-26T10:27:07Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.CatalogManager;\n+import io.prestosql.metadata.MetadataManager;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.security.AllowAllAccessControl;\n+import io.prestosql.spi.procedure.Procedure;\n+import io.prestosql.spi.resourcegroups.ResourceGroupId;\n+import io.prestosql.sql.analyzer.FeaturesConfig;\n+import io.prestosql.sql.tree.Call;\n+import io.prestosql.sql.tree.QualifiedName;\n+import io.prestosql.transaction.TransactionManager;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+import java.net.URI;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutorService;\n+\n+import static io.airlift.concurrent.Threads.daemonThreadsNamed;\n+import static io.prestosql.metadata.MetadataManager.createTestMetadataManager;\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.testing.TestingSession.createBogusTestingCatalog;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static io.prestosql.transaction.InMemoryTransactionManager.createTestTransactionManager;\n+import static java.util.concurrent.Executors.newCachedThreadPool;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@Test(singleThreaded = true)\n+public class TestCallTask\n+{\n+    private static ExecutorService executor;\n+\n+    public static boolean invoked;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQwMjk1Ng==", "bodyText": "Adding missing test for CallTask\n\nIn the commit message i'd remove \"missing\".\nGenerally whenever you add a test it was previously missing.\nAlso, change Adding -> Add (per our guidelines https://chris.beams.io/posts/git-commit/)", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384402956", "createdAt": "2020-02-26T10:27:49Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCallTask.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.CatalogManager;\n+import io.prestosql.metadata.MetadataManager;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.security.AllowAllAccessControl;\n+import io.prestosql.spi.procedure.Procedure;\n+import io.prestosql.spi.resourcegroups.ResourceGroupId;\n+import io.prestosql.sql.analyzer.FeaturesConfig;\n+import io.prestosql.sql.tree.Call;\n+import io.prestosql.sql.tree.QualifiedName;\n+import io.prestosql.transaction.TransactionManager;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+import java.net.URI;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutorService;\n+\n+import static io.airlift.concurrent.Threads.daemonThreadsNamed;\n+import static io.prestosql.metadata.MetadataManager.createTestMetadataManager;\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.testing.TestingSession.createBogusTestingCatalog;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static io.prestosql.transaction.InMemoryTransactionManager.createTestTransactionManager;\n+import static java.util.concurrent.Executors.newCachedThreadPool;\n+import static org.assertj.core.api.Assertions.assertThat;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQwNjIzOQ==", "bodyText": "make this // TODO implement as well", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384406239", "createdAt": "2020-02-26T10:33:38Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/LegacyAccessControl.java", "diffHunk": "@@ -269,6 +270,11 @@ public void checkCanShowRoleGrants(ConnectorSecurityContext context, String cata\n     {\n     }\n \n+    @Override\n+    public void checkCanExecuteProcedure(ConnectorSecurityContext context, SchemaProcedureName procedure)\n+    {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0Nzk0OTc5", "url": "https://github.com/trinodb/trino/pull/2924#pullrequestreview-364794979", "createdAt": "2020-02-26T10:44:14Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MzQyNDAw", "url": "https://github.com/trinodb/trino/pull/2924#pullrequestreview-365342400", "createdAt": "2020-02-27T00:32:37Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMDozMjozN1rOFvBXxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMDozMjozN1rOFvBXxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0OTg2Mg==", "bodyText": "Use format to be consistent with the others", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384849862", "createdAt": "2020-02-27T00:32:37Z", "author": {"login": "electrum"}, "path": "presto-spi/src/main/java/io/prestosql/spi/security/AccessDeniedException.java", "diffHunk": "@@ -396,6 +396,11 @@ public static void denySetRole(String role)\n         throw new AccessDeniedException(format(\"Cannot set role %s\", role));\n     }\n \n+    public static void denyExecuteProcedure(String procedureName)\n+    {\n+        throw new AccessDeniedException(\"Cannot invoke procedure \" + procedureName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MzQyNjE3", "url": "https://github.com/trinodb/trino/pull/2924#pullrequestreview-365342617", "createdAt": "2020-02-27T00:33:18Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMDozMzoxOFrOFvBYmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMDozMzoxOFrOFvBYmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1MDA3Mg==", "bodyText": "Remove this. I'm not sure it makes sense to implement this generically.", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384850072", "createdAt": "2020-02-27T00:33:18Z", "author": {"login": "electrum"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedAccessControl.java", "diffHunk": "@@ -318,6 +319,12 @@ public void checkCanShowRoleGrants(ConnectorSecurityContext context, String cata\n     {\n     }\n \n+    @Override\n+    public void checkCanExecuteProcedure(ConnectorSecurityContext context, SchemaProcedureName procedure)\n+    {\n+        //TODO implement", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MzQ1Nzcz", "url": "https://github.com/trinodb/trino/pull/2924#pullrequestreview-365345773", "createdAt": "2020-02-27T00:42:54Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMDo0Mjo1NFrOFvBjYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMDo0Mjo1NFrOFvBjYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1MjgzNQ==", "bodyText": "We should probably call this CatalogSchemaObjectName so that it's more generic. That way we can reuse it for functions. Same with SchemaObjectName.", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384852835", "createdAt": "2020-02-27T00:42:54Z", "author": {"login": "electrum"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/CatalogSchemaProcedureName.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.connector;\n+\n+import java.util.Objects;\n+\n+import static java.util.Locale.ENGLISH;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class CatalogSchemaProcedureName", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MzM5MjI5", "url": "https://github.com/trinodb/trino/pull/2924#pullrequestreview-365339229", "createdAt": "2020-02-27T00:23:26Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMDoyMzoyN1rOFvBMlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMDozNDo0MVrOFvBaNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0Njk5OQ==", "bodyText": "The todo isn't needed. The LegacyAccessControl is designed to be backwards compatible with the original Presto Hive security system, and therefore we should I don't think we should be implementing this here.", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384846999", "createdAt": "2020-02-27T00:23:27Z", "author": {"login": "dain"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/LegacyAccessControl.java", "diffHunk": "@@ -269,6 +270,12 @@ public void checkCanShowRoleGrants(ConnectorSecurityContext context, String cata\n     {\n     }\n \n+    @Override\n+    public void checkCanExecuteProcedure(ConnectorSecurityContext context, SchemaProcedureName procedure)\n+    {\n+        //TODO implement", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0OTM1NA==", "bodyText": "I don't think this is right.  This would limit important table maintenance to only admins, and instead it should really be based on the procedure and the permissions the user has.  For example, I would expect anyone with DELETE permissions on a table to be able to execute unregister_partition.", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384849354", "createdAt": "2020-02-27T00:30:53Z", "author": {"login": "dain"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/SqlStandardAccessControl.java", "diffHunk": "@@ -390,6 +392,14 @@ public void checkCanShowRoleGrants(ConnectorSecurityContext context, String cata\n     {\n     }\n \n+    @Override\n+    public void checkCanExecuteProcedure(ConnectorSecurityContext context, SchemaProcedureName procedure)\n+    {\n+        if (!isAdmin(context)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1MDQ4NQ==", "bodyText": "Instead please create an issue if you think this should be implemented, or just implement it.", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r384850485", "createdAt": "2020-02-27T00:34:41Z", "author": {"login": "dain"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedAccessControl.java", "diffHunk": "@@ -318,6 +319,12 @@ public void checkCanShowRoleGrants(ConnectorSecurityContext context, String cata\n     {\n     }\n \n+    @Override\n+    public void checkCanExecuteProcedure(ConnectorSecurityContext context, SchemaProcedureName procedure)\n+    {\n+        //TODO implement", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e6e7fc3b1d6dbb7d6ea3f09e62ef522385f2f6f", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/2e6e7fc3b1d6dbb7d6ea3f09e62ef522385f2f6f", "committedDate": "2020-03-04T12:45:09Z", "message": "Add test for CallTask"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NzcyODcw", "url": "https://github.com/trinodb/trino/pull/2924#pullrequestreview-368772870", "createdAt": "2020-03-04T13:25:08Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NDE0ODQ1", "url": "https://github.com/trinodb/trino/pull/2924#pullrequestreview-369414845", "createdAt": "2020-03-05T09:33:53Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTozMzo1NFrOFyMQDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTozMzo1NFrOFyMQDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3MzgzNw==", "bodyText": "I don't think lowercasing is appropriate here.\nThis follows  SchemaTableName, but that is about to change\nSee https://github.com/prestosql/presto/pull/2350/files#diff-d86eb3d71bf172e6ebc672efd6346d4c\nLet's get this right from the start.", "url": "https://github.com/trinodb/trino/pull/2924#discussion_r388173837", "createdAt": "2020-03-05T09:33:54Z", "author": {"login": "findepi"}, "path": "presto-spi/src/main/java/io/prestosql/spi/connector/SchemaRoutineName.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.connector;\n+\n+import java.util.Objects;\n+\n+import static java.util.Locale.ENGLISH;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class SchemaRoutineName\n+{\n+    private final String schemaName;\n+    private final String routineName;\n+\n+    public SchemaRoutineName(String schemaName, String routineName)\n+    {\n+        this.schemaName = requireNonNull(schemaName, \"schemaName is null\").toLowerCase(ENGLISH);\n+        this.routineName = requireNonNull(routineName, \"routineName is null\").toLowerCase(ENGLISH);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "778751b5c79a387bcf1452222cbbb78f2817069d", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/778751b5c79a387bcf1452222cbbb78f2817069d", "committedDate": "2020-03-06T06:49:21Z", "message": "Add access control check for Procedures\n\nBoth for system-level and connector-level access control"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "778751b5c79a387bcf1452222cbbb78f2817069d", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/778751b5c79a387bcf1452222cbbb78f2817069d", "committedDate": "2020-03-06T06:49:21Z", "message": "Add access control check for Procedures\n\nBoth for system-level and connector-level access control"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1602, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}