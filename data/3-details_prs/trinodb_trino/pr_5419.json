{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4MDQyMDE3", "number": 5419, "title": "Add JWK to JwtAuthenticator", "bodyText": "", "createdAt": "2020-10-05T18:38:00Z", "url": "https://github.com/trinodb/trino/pull/5419", "merged": true, "mergeCommit": {"oid": "b26c9637bb2a619e1eb97366af9a19d7cd4b1776"}, "closed": true, "closedAt": "2020-10-14T22:49:55Z", "author": {"login": "dain"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQIoNZgFqTUwMzM5ODAwNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSilqfgBqjM4NzgyNDQ4ODg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMzk4MDA2", "url": "https://github.com/trinodb/trino/pull/5419#pullrequestreview-503398006", "createdAt": "2020-10-06T22:16:21Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMjoxNjoyMVrOHdb2ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODowNDoyNVrOHdnV5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYyNzA0NQ==", "bodyText": "Ec", "url": "https://github.com/trinodb/trino/pull/5419#discussion_r500627045", "createdAt": "2020-10-06T22:16:21Z", "author": {"login": "lukasz-walkiewicz"}, "path": "presto-main/src/test/java/io/prestosql/server/security/jwt/TestJwkDecoder.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.security.jwt;\n+\n+import com.google.common.io.Resources;\n+import io.airlift.security.pem.PemReader;\n+import io.jsonwebtoken.Claims;\n+import io.jsonwebtoken.Jws;\n+import io.jsonwebtoken.JwsHeader;\n+import io.jsonwebtoken.Jwts;\n+import io.jsonwebtoken.SignatureAlgorithm;\n+import io.jsonwebtoken.SigningKeyResolver;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.security.Key;\n+import java.security.PrivateKey;\n+import java.security.PublicKey;\n+import java.security.interfaces.RSAPublicKey;\n+import java.time.ZonedDateTime;\n+import java.util.Date;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static io.prestosql.server.security.jwt.JwkDecoder.decodeKeys;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestJwkDecoder\n+{\n+    @Test\n+    public void testReadRsaKeys()\n+    {\n+        Map<String, PublicKey> keys = decodeKeys(\"\" +\n+                \"{\\n\" +\n+                \"  \\\"keys\\\": [\\n\" +\n+                \"    {\\n\" +\n+                \"      \\\"e\\\": \\\"AQAB\\\",\\n\" +\n+                \"      \\\"n\\\": \\\"mvj-0waJ2owQlFWrlC06goLs9PcNehIzCF0QrkdsYZJXOsipcHCFlXBsgQIdTdLvlCzNI07jSYA-zggycYi96lfDX-FYv_CqC8dRLf9TBOPvUgCyFMCFNUTC69hsrEYMR_J79Wj0MIOffiVr6eX-AaCG3KhBMZMh15KCdn3uVrl9coQivy7bk2Uw-aUJ_b26C0gWYj1DnpO4UEEKBk1X-lpeUMh0B_XorqWeq0NYK2pN6CoEIh0UrzYKlGfdnMU1pJJCsNxMiha-Vw3qqxez6oytOV_AswlWvQc7TkSX6cHfqepNskQb7pGxpgQpy9sA34oIxB_S-O7VS7_h0Qh4vQ\\\",\\n\" +\n+                \"      \\\"alg\\\": \\\"RS256\\\",\\n\" +\n+                \"      \\\"use\\\": \\\"sig\\\",\\n\" +\n+                \"      \\\"kty\\\": \\\"RSA\\\",\\n\" +\n+                \"      \\\"kid\\\": \\\"2c6fa6f5950a7ce465fcf247aa0b094828ac952c\\\"\\n\" +\n+                \"    },\\n\" +\n+                \"    {\\n\" +\n+                \"      \\\"kid\\\": \\\"5effa76ef33ecb5e346bd512d7d89b30e47d8e98\\\",\\n\" +\n+                \"      \\\"alg\\\": \\\"RS256\\\",\\n\" +\n+                \"      \\\"n\\\": \\\"teG3wvigoU_KPbPAiEVERFmlGeHWPsnqbEk1pAhz69B0kGHJXU8l8tPHpTw0Gy_M9BJ5WAe9FvXL41xSFbqMGiJ7DIZ32ejlncrf2vGkMl26C5p8OOvuS6ThFjREUzWbV0sYtJL0nNjzmQNCQeb90tDQDZW229ZeUNlM2yN0QRisKlGFSK7uL8X0dRUbXnfgS6eI4mvSAK6tqq3n8IcPA0PxBr-R81rtdG70C2zxlPQ4Wp_MJzjb81d-RPdcYd64loOMhhHFbbfq2bTS9TSn_Y16lYA7gyRGSPhwcsdqOH2qqon7QOiF8gtrvztwd9TpxecPd7mleGGWVFlN6pTQYQ\\\",\\n\" +\n+                \"      \\\"kty\\\": \\\"RSA\\\",\\n\" +\n+                \"      \\\"e\\\": \\\"AQAB\\\",\\n\" +\n+                \"      \\\"use\\\": \\\"sig\\\"\\n\" +\n+                \"    }\\n\" +\n+                \"  ]\\n\" +\n+                \"}\");\n+        assertEquals(keys.size(), 2);\n+        assertTrue(keys.containsKey(\"2c6fa6f5950a7ce465fcf247aa0b094828ac952c\"));\n+        assertTrue(keys.containsKey(\"5effa76ef33ecb5e346bd512d7d89b30e47d8e98\"));\n+    }\n+\n+    @Test\n+    public void testReadEeKey()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxNTIwNQ==", "bodyText": "Where are those methods needed?", "url": "https://github.com/trinodb/trino/pull/5419#discussion_r500815205", "createdAt": "2020-10-07T08:04:11Z", "author": {"login": "lukasz-walkiewicz"}, "path": "presto-main/src/main/java/io/prestosql/server/security/jwt/JwtAuthenticatorSupportModule.java", "diffHunk": "@@ -29,10 +32,41 @@ protected void setup(Binder binder)\n         configBinder(binder).bindConfig(JwtAuthenticatorConfig.class);\n         install(installModuleIf(\n                 JwtAuthenticatorConfig.class,\n-                config -> config.getKeyFile().startsWith(\"https://\") || config.getKeyFile().startsWith(\"http://\"),\n-                jwkBinder -> {\n-                    httpClientBinder(jwkBinder)\n-                            .bindHttpClient(\"jwk\", null);\n-                }));\n+                JwtAuthenticatorSupportModule::isHttp,\n+                new JwkModule()));\n+        install(installModuleIf(\n+                JwtAuthenticatorConfig.class,\n+                config -> !isHttp(config),\n+                jwkBinder -> jwkBinder.bind(SigningKeyResolver.class).to(FileSigningKeyResolver.class).in(Scopes.SINGLETON)));\n+    }\n+\n+    private static boolean isHttp(JwtAuthenticatorConfig config)\n+    {\n+        return config.getKeyFile().startsWith(\"https://\") || config.getKeyFile().startsWith(\"http://\");\n+    }\n+\n+    private static class JwkModule\n+            implements Module\n+    {\n+        @Override\n+        public void configure(Binder binder)\n+        {\n+            binder.bind(SigningKeyResolver.class).to(JwkSigningKeyResolver.class).in(Scopes.SINGLETON);\n+            binder.bind(JwkService.class).in(Scopes.SINGLETON);\n+            httpClientBinder(binder)\n+                    .bindHttpClient(\"jwk\", ForJwk.class);\n+        }\n+\n+        @Override\n+        public int hashCode()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxNTMzNQ==", "bodyText": "hashCode & equals", "url": "https://github.com/trinodb/trino/pull/5419#discussion_r500815335", "createdAt": "2020-10-07T08:04:25Z", "author": {"login": "lukasz-walkiewicz"}, "path": "presto-main/src/main/java/io/prestosql/server/security/jwt/JwtAuthenticatorSupportModule.java", "diffHunk": "@@ -29,10 +32,41 @@ protected void setup(Binder binder)\n         configBinder(binder).bindConfig(JwtAuthenticatorConfig.class);\n         install(installModuleIf(\n                 JwtAuthenticatorConfig.class,\n-                config -> config.getKeyFile().startsWith(\"https://\") || config.getKeyFile().startsWith(\"http://\"),\n-                jwkBinder -> {\n-                    httpClientBinder(jwkBinder)\n-                            .bindHttpClient(\"jwk\", null);\n-                }));\n+                JwtAuthenticatorSupportModule::isHttp,\n+                new JwkModule()));\n+        install(installModuleIf(\n+                JwtAuthenticatorConfig.class,\n+                config -> !isHttp(config),\n+                jwkBinder -> jwkBinder.bind(SigningKeyResolver.class).to(FileSigningKeyResolver.class).in(Scopes.SINGLETON)));\n+    }\n+\n+    private static boolean isHttp(JwtAuthenticatorConfig config)\n+    {\n+        return config.getKeyFile().startsWith(\"https://\") || config.getKeyFile().startsWith(\"http://\");\n+    }\n+\n+    private static class JwkModule\n+            implements Module\n+    {\n+        @Override\n+        public void configure(Binder binder)\n+        {\n+            binder.bind(SigningKeyResolver.class).to(JwkSigningKeyResolver.class).in(Scopes.SINGLETON);\n+            binder.bind(JwkService.class).in(Scopes.SINGLETON);\n+            httpClientBinder(binder)\n+                    .bindHttpClient(\"jwk\", ForJwk.class);\n+        }\n+\n+        @Override\n+        public int hashCode()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxNTIwNQ=="}, "originalCommit": null, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzNzM0ODI0", "url": "https://github.com/trinodb/trino/pull/5419#pullrequestreview-503734824", "createdAt": "2020-10-07T10:22:19Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMDoyMjoxOVrOHdsnuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMDo0NTozMlrOHdtZMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkwMTgxNg==", "bodyText": "typo", "url": "https://github.com/trinodb/trino/pull/5419#discussion_r500901816", "createdAt": "2020-10-07T10:22:19Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/server/security/jwt/JwkDecoder.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.security.jwt;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.json.JsonCodec;\n+import io.airlift.log.Logger;\n+\n+import java.math.BigInteger;\n+import java.security.PublicKey;\n+import java.security.interfaces.RSAPublicKey;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.util.Base64.getUrlDecoder;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class JwkDecoder\n+{\n+    private static final Logger log = Logger.get(JwkDecoder.class);\n+    private static final JsonCodec<Keys> KEYS_CODEC = JsonCodec.jsonCodec(Keys.class);\n+\n+    private JwkDecoder() {}\n+\n+    public static Map<String, PublicKey> decodeKeys(String jwkJson)\n+    {\n+        Keys keys = KEYS_CODEC.fromJson(jwkJson);\n+        return keys.getKeys().stream()\n+                .map(JwkDecoder::tyrDecodeRsaKey)\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)\n+                .collect(toImmutableMap(JwkRsaPublicKey::getKeyId, Function.identity()));\n+    }\n+\n+    public static Optional<JwkRsaPublicKey> tyrDecodeRsaKey(Map<String, String> properties)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkwMzA1Ng==", "bodyText": "illegal state?", "url": "https://github.com/trinodb/trino/pull/5419#discussion_r500903056", "createdAt": "2020-10-07T10:24:28Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/server/security/jwt/JwkService.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.security.jwt;\n+\n+import com.google.common.io.Closer;\n+import io.airlift.concurrent.Threads;\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StringResponseHandler.StringResponse;\n+import io.airlift.log.Logger;\n+import io.airlift.units.Duration;\n+\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n+import javax.annotation.processing.Generated;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.security.PublicKey;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static io.airlift.http.client.Request.Builder.prepareGet;\n+import static io.airlift.http.client.StringResponseHandler.createStringResponseHandler;\n+import static io.prestosql.server.security.jwt.JwkDecoder.decodeKeys;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class JwkService\n+{\n+    private static final Logger log = Logger.get(JwkService.class);\n+\n+    private final URI address;\n+    private final HttpClient httpClient;\n+    private final Duration refreshDelay;\n+    private final AtomicReference<Map<String, PublicKey>> keys;\n+\n+    @Generated(\"this\")\n+    private Closer closer;\n+\n+    public JwkService(URI address, HttpClient httpClient, Duration refreshDelay)\n+    {\n+        this.address = requireNonNull(address, \"address is null\");\n+        this.httpClient = requireNonNull(httpClient, \"httpClient is null\");\n+        this.refreshDelay = requireNonNull(refreshDelay, \"refreshDelay is null\");\n+\n+        this.keys = new AtomicReference<>(fetchKeys());\n+    }\n+\n+    @PostConstruct\n+    public synchronized void start()\n+    {\n+        if (closer != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkwMzEyMQ==", "bodyText": "static imports", "url": "https://github.com/trinodb/trino/pull/5419#discussion_r500903121", "createdAt": "2020-10-07T10:24:35Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/server/security/jwt/JwkService.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.security.jwt;\n+\n+import com.google.common.io.Closer;\n+import io.airlift.concurrent.Threads;\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StringResponseHandler.StringResponse;\n+import io.airlift.log.Logger;\n+import io.airlift.units.Duration;\n+\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n+import javax.annotation.processing.Generated;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.security.PublicKey;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static io.airlift.http.client.Request.Builder.prepareGet;\n+import static io.airlift.http.client.StringResponseHandler.createStringResponseHandler;\n+import static io.prestosql.server.security.jwt.JwkDecoder.decodeKeys;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class JwkService\n+{\n+    private static final Logger log = Logger.get(JwkService.class);\n+\n+    private final URI address;\n+    private final HttpClient httpClient;\n+    private final Duration refreshDelay;\n+    private final AtomicReference<Map<String, PublicKey>> keys;\n+\n+    @Generated(\"this\")\n+    private Closer closer;\n+\n+    public JwkService(URI address, HttpClient httpClient, Duration refreshDelay)\n+    {\n+        this.address = requireNonNull(address, \"address is null\");\n+        this.httpClient = requireNonNull(httpClient, \"httpClient is null\");\n+        this.refreshDelay = requireNonNull(refreshDelay, \"refreshDelay is null\");\n+\n+        this.keys = new AtomicReference<>(fetchKeys());\n+    }\n+\n+    @PostConstruct\n+    public synchronized void start()\n+    {\n+        if (closer != null) {\n+            return;\n+        }\n+        closer = Closer.create();\n+\n+        ScheduledExecutorService executorService = Executors.newSingleThreadScheduledExecutor(Threads.daemonThreadsNamed(\"JWK loader\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkwMzcwNQ==", "bodyText": "illegal state?", "url": "https://github.com/trinodb/trino/pull/5419#discussion_r500903705", "createdAt": "2020-10-07T10:25:32Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/server/security/jwt/JwkService.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.security.jwt;\n+\n+import com.google.common.io.Closer;\n+import io.airlift.concurrent.Threads;\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StringResponseHandler.StringResponse;\n+import io.airlift.log.Logger;\n+import io.airlift.units.Duration;\n+\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n+import javax.annotation.processing.Generated;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.security.PublicKey;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static io.airlift.http.client.Request.Builder.prepareGet;\n+import static io.airlift.http.client.StringResponseHandler.createStringResponseHandler;\n+import static io.prestosql.server.security.jwt.JwkDecoder.decodeKeys;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class JwkService\n+{\n+    private static final Logger log = Logger.get(JwkService.class);\n+\n+    private final URI address;\n+    private final HttpClient httpClient;\n+    private final Duration refreshDelay;\n+    private final AtomicReference<Map<String, PublicKey>> keys;\n+\n+    @Generated(\"this\")\n+    private Closer closer;\n+\n+    public JwkService(URI address, HttpClient httpClient, Duration refreshDelay)\n+    {\n+        this.address = requireNonNull(address, \"address is null\");\n+        this.httpClient = requireNonNull(httpClient, \"httpClient is null\");\n+        this.refreshDelay = requireNonNull(refreshDelay, \"refreshDelay is null\");\n+\n+        this.keys = new AtomicReference<>(fetchKeys());\n+    }\n+\n+    @PostConstruct\n+    public synchronized void start()\n+    {\n+        if (closer != null) {\n+            return;\n+        }\n+        closer = Closer.create();\n+\n+        ScheduledExecutorService executorService = Executors.newSingleThreadScheduledExecutor(Threads.daemonThreadsNamed(\"JWK loader\"));\n+        closer.register(executorService::shutdownNow);\n+\n+        ScheduledFuture<?> refreshJob = executorService.scheduleWithFixedDelay(\n+                () -> {\n+                    try {\n+                        refreshKeys();\n+                    }\n+                    catch (Exception e) {\n+                        log.error(e, \"Error fetching JWK keys\");\n+                    }\n+                },\n+                refreshDelay.toMillis(),\n+                refreshDelay.toMillis(),\n+                TimeUnit.MILLISECONDS);\n+        closer.register(() -> refreshJob.cancel(true));\n+    }\n+\n+    @PreDestroy\n+    public synchronized void stop()\n+    {\n+        if (closer == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkwOTUzMQ==", "bodyText": "why it named a file? maybe remote file?", "url": "https://github.com/trinodb/trino/pull/5419#discussion_r500909531", "createdAt": "2020-10-07T10:36:25Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/server/security/jwt/JwkService.java", "diffHunk": "@@ -53,6 +54,12 @@\n     @Generated(\"this\")\n     private Closer closer;\n \n+    @Inject\n+    public JwkService(JwtAuthenticatorConfig config, @ForJwk HttpClient httpClient)\n+    {\n+        this(URI.create(config.getKeyFile()), httpClient, new Duration(15, TimeUnit.MINUTES));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkxNDQ4Mw==", "bodyText": "It would be nice if that would be closeable.", "url": "https://github.com/trinodb/trino/pull/5419#discussion_r500914483", "createdAt": "2020-10-07T10:45:32Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/server/ui/TestWebUi.java", "diffHunk": "@@ -438,6 +459,45 @@ public void testJwtAuthenticator()\n         }\n     }\n \n+    @Test\n+    public void testJwtWithJwkAuthenticator()\n+            throws Exception\n+    {\n+        TestingHttpServer jwkServer = createTestingJwkServer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 66}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3MTczNzcz", "url": "https://github.com/trinodb/trino/pull/5419#pullrequestreview-507173773", "createdAt": "2020-10-13T08:09:34Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwODowOTozNFrOHgagRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwODowOTozNFrOHgagRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc1MDcyNw==", "bodyText": "installModuleIf takes otherwise parameter", "url": "https://github.com/trinodb/trino/pull/5419#discussion_r503750727", "createdAt": "2020-10-13T08:09:34Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/server/security/jwt/JwtAuthenticatorSupportModule.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.security.jwt;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Module;\n+import com.google.inject.Scopes;\n+import io.airlift.configuration.AbstractConfigurationAwareModule;\n+import io.jsonwebtoken.SigningKeyResolver;\n+\n+import static io.airlift.configuration.ConditionalModule.installModuleIf;\n+import static io.airlift.configuration.ConfigBinder.configBinder;\n+import static io.airlift.http.client.HttpClientBinder.httpClientBinder;\n+\n+public class JwtAuthenticatorSupportModule\n+        extends AbstractConfigurationAwareModule\n+{\n+    @Override\n+    protected void setup(Binder binder)\n+    {\n+        configBinder(binder).bindConfig(JwtAuthenticatorConfig.class);\n+        install(installModuleIf(\n+                JwtAuthenticatorConfig.class,\n+                JwtAuthenticatorSupportModule::isHttp,\n+                new JwkModule()));\n+        install(installModuleIf(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3NTkzNTcy", "url": "https://github.com/trinodb/trino/pull/5419#pullrequestreview-507593572", "createdAt": "2020-10-13T15:57:58Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4MDg1NTc4", "url": "https://github.com/trinodb/trino/pull/5419#pullrequestreview-508085578", "createdAt": "2020-10-14T07:56:42Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzo1Njo0MlrOHhGvbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzo1OToxM1rOHhG1tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ3NTUwMQ==", "bodyText": "fieldName = x", "url": "https://github.com/trinodb/trino/pull/5419#discussion_r504475501", "createdAt": "2020-10-14T07:56:42Z", "author": {"login": "lukasz-walkiewicz"}, "path": "presto-main/src/main/java/io/prestosql/server/security/jwt/JwkDecoder.java", "diffHunk": "@@ -88,6 +99,45 @@ private JwkDecoder() {}\n         return Optional.of(new JwkRsaPublicKey(keyId, exponent.get(), modulus.get()));\n     }\n \n+    public static Optional<JwkEcPublicKey> tryDecodeEcKey(String keyId, Map<String, String> properties)\n+    {\n+        // alg field is optional so not verified\n+        // use field is optional so not verified\n+\n+        String curveName = properties.get(\"crv\");\n+        if (Strings.isNullOrEmpty(curveName)) {\n+            log.error(\"JWK EC key %s does not contain the required curve field 'crv'\", keyId);\n+            return Optional.empty();\n+        }\n+        String encodedX = properties.get(\"x\");\n+        if (Strings.isNullOrEmpty(encodedX)) {\n+            log.error(\"JWK EC key %s does not contain the required x coordinate field 'x'\", keyId);\n+            return Optional.empty();\n+        }\n+        String encodedY = properties.get(\"y\");\n+        if (Strings.isNullOrEmpty(encodedY)) {\n+            log.error(\"JWK EC key %s does not contain the required y coordinate field 'y'\", keyId);\n+            return Optional.empty();\n+        }\n+\n+        Optional<ECParameterSpec> curve = EcCurve.tryGet(curveName);\n+        if (curve.isEmpty()) {\n+            log.error(\"JWK EC %s curve '%s' is not supported\", keyId, curveName);\n+            return Optional.empty();\n+        }\n+        Optional<BigInteger> x = decodeBigint(keyId, \"modulus\", encodedX);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ3NzExMA==", "bodyText": "fieldName = y", "url": "https://github.com/trinodb/trino/pull/5419#discussion_r504477110", "createdAt": "2020-10-14T07:59:13Z", "author": {"login": "lukasz-walkiewicz"}, "path": "presto-main/src/main/java/io/prestosql/server/security/jwt/JwkDecoder.java", "diffHunk": "@@ -88,6 +99,45 @@ private JwkDecoder() {}\n         return Optional.of(new JwkRsaPublicKey(keyId, exponent.get(), modulus.get()));\n     }\n \n+    public static Optional<JwkEcPublicKey> tryDecodeEcKey(String keyId, Map<String, String> properties)\n+    {\n+        // alg field is optional so not verified\n+        // use field is optional so not verified\n+\n+        String curveName = properties.get(\"crv\");\n+        if (Strings.isNullOrEmpty(curveName)) {\n+            log.error(\"JWK EC key %s does not contain the required curve field 'crv'\", keyId);\n+            return Optional.empty();\n+        }\n+        String encodedX = properties.get(\"x\");\n+        if (Strings.isNullOrEmpty(encodedX)) {\n+            log.error(\"JWK EC key %s does not contain the required x coordinate field 'x'\", keyId);\n+            return Optional.empty();\n+        }\n+        String encodedY = properties.get(\"y\");\n+        if (Strings.isNullOrEmpty(encodedY)) {\n+            log.error(\"JWK EC key %s does not contain the required y coordinate field 'y'\", keyId);\n+            return Optional.empty();\n+        }\n+\n+        Optional<ECParameterSpec> curve = EcCurve.tryGet(curveName);\n+        if (curve.isEmpty()) {\n+            log.error(\"JWK EC %s curve '%s' is not supported\", keyId, curveName);\n+            return Optional.empty();\n+        }\n+        Optional<BigInteger> x = decodeBigint(keyId, \"modulus\", encodedX);\n+        if (x.isEmpty()) {\n+            return Optional.empty();\n+        }\n+        Optional<BigInteger> y = decodeBigint(keyId, \"exponent\", encodedY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 88}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1e54e2acdc40e1a27524721b49893543b524354", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/f1e54e2acdc40e1a27524721b49893543b524354", "committedDate": "2020-10-14T19:44:28Z", "message": "Move JWT to separate package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0831797fb01e15d9fd71c1d909ee8b63461a1d0a", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/0831797fb01e15d9fd71c1d909ee8b63461a1d0a", "committedDate": "2020-10-14T19:44:29Z", "message": "Extract file key loader from JWT authenticator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea1712681305be7179a665f20811e3cbffb731a0", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/ea1712681305be7179a665f20811e3cbffb731a0", "committedDate": "2020-10-14T19:44:29Z", "message": "Add JWK service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f68c017d02e29625be6282051d3facaa25431a1d", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/f68c017d02e29625be6282051d3facaa25431a1d", "committedDate": "2020-10-14T19:44:29Z", "message": "Add JWK to JwtAuthenticator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b3b473967f0d4697dd8109a001700b9271815b3", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/2b3b473967f0d4697dd8109a001700b9271815b3", "committedDate": "2020-10-14T19:45:33Z", "message": "Add JWK EC support"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "2b3b473967f0d4697dd8109a001700b9271815b3", "author": {"user": {"login": "dain", "name": "Dain Sundstrom"}}, "url": "https://github.com/trinodb/trino/commit/2b3b473967f0d4697dd8109a001700b9271815b3", "committedDate": "2020-10-14T19:45:33Z", "message": "Add JWK EC support"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3267, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}