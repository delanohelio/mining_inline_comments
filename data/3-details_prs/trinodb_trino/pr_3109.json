{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5MjM0MTQw", "number": 3109, "title": "Support arbitrary query in SHOW STATS", "bodyText": "Support arbitrary query in SHOW STATS", "createdAt": "2020-03-16T13:26:20Z", "url": "https://github.com/trinodb/trino/pull/3109", "merged": true, "mergeCommit": {"oid": "a030b90ee66665e6af518cdb9076db663bd7905a"}, "closed": true, "closedAt": "2020-12-14T14:39:27Z", "author": {"login": "kokosing"}, "timelineItems": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcO0zkqgFqTM3NjczODM0Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmGxAdgBqjQxMDk1ODA5MTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NzM4MzQ3", "url": "https://github.com/trinodb/trino/pull/3109#pullrequestreview-376738347", "createdAt": "2020-03-18T10:32:25Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMDozMjoyNVrOF3-7BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMDozMjoyNVrOF3-7BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI0NjkxNw==", "bodyText": "unused?\notherwise fmt", "url": "https://github.com/trinodb/trino/pull/3109#discussion_r394246917", "createdAt": "2020-03-18T10:32:25Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowQueriesRewrite.java", "diffHunk": "@@ -147,7 +148,7 @@ public Statement rewrite(\n             List<Expression> parameters,\n             Map<NodeRef<Parameter>, Expression> parameterLookup,\n             AccessControl accessControl,\n-            WarningCollector warningCollector)\n+            WarningCollector warningCollector, StatsCalculator statsCalculator)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MjI0NjM0", "url": "https://github.com/trinodb/trino/pull/3109#pullrequestreview-478224634", "createdAt": "2020-08-30T18:27:17Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxODoyNzoxOFrOHJkujw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxODoyNzoxOFrOHJkujw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMDk3NQ==", "bodyText": "Now it matches io.prestosql.cost.SymbolStatsEstimate#ZERO", "url": "https://github.com/trinodb/trino/pull/3109#discussion_r479800975", "createdAt": "2020-08-30T18:27:18Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestShowStats.java", "diffHunk": "@@ -74,10 +73,10 @@ public void testShowStats()\n \n         assertQuery(\"SHOW STATS FOR (SELECT * FROM nation_partitioned WHERE regionkey IS NULL)\",\n                 \"SELECT * FROM (VALUES \" +\n-                        \"   ('regionkey', null, 0.0, 0.0, null, null, null), \" +\n-                        \"   ('nationkey', null, 0.0, 0.0, null, null, null), \" +\n-                        \"   ('name', 0.0, 0.0, 0.0, null, null, null), \" +\n-                        \"   ('comment', 0.0, 0.0, 0.0, null, null, null), \" +\n+                        \"   ('regionkey', 0.0, 0.0, 1.0, null, null, null), \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMTE4Mjkw", "url": "https://github.com/trinodb/trino/pull/3109#pullrequestreview-532118290", "createdAt": "2020-11-17T08:22:58Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwODoyMjo1OFrOH0pRUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwODoyMjo1OFrOH0pRUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2NDE3Nw==", "bodyText": "Original error message was more accurate", "url": "https://github.com/trinodb/trino/pull/3109#discussion_r524964177", "createdAt": "2020-11-17T08:22:58Z", "author": {"login": "losipiuk"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueries.java", "diffHunk": "@@ -1807,15 +1807,15 @@ public void testAccessControl()\n         assertAccessAllowed(\"SHOW STATS FOR lineitem\", privilege(\"orders\", SELECT_COLUMN));\n         assertAccessAllowed(\"SHOW STATS FOR (SELECT * FROM lineitem)\");\n         assertAccessAllowed(\"SHOW STATS FOR (SELECT * FROM lineitem)\", privilege(\"orders\", SELECT_COLUMN));\n-        assertAccessDenied(\"SHOW STATS FOR (SELECT * FROM nation)\", \"Cannot show stats for columns \\\\[nationkey, regionkey, name, comment\\\\] in table or view .*.nation\", privilege(\"nation\", SELECT_COLUMN));\n-        assertAccessDenied(\"SHOW STATS FOR (SELECT nationkey FROM nation)\", \"Cannot show stats for columns \\\\[nationkey\\\\] in table or view .*.nation\", privilege(\"nation\", SELECT_COLUMN));\n-        assertAccessDenied(\"SHOW STATS FOR (SELECT nationkey FROM nation)\", \"Cannot show stats for columns \\\\[nationkey\\\\] in table or view .*.nation\", privilege(\"nation.nationkey\", SELECT_COLUMN));\n-        assertAccessDenied(\"SHOW STATS FOR (SELECT *, nationkey FROM nation)\", \"Cannot show stats for columns \\\\[nationkey, regionkey, name, comment\\\\] in table or view .*.nation\", privilege(\"nation.nationkey\", SELECT_COLUMN));\n-        assertAccessDenied(\"SHOW STATS FOR (SELECT *, * FROM nation)\", \"Cannot show stats for columns \\\\[nationkey, regionkey, name, comment\\\\] in table or view .*.nation\", privilege(\"nation.nationkey\", SELECT_COLUMN));\n-        assertAccessDenied(\"SHOW STATS FOR (SELECT linenumber, orderkey FROM lineitem)\", \"Cannot show stats for columns \\\\[linenumber, orderkey\\\\] in table or view .*.lineitem.*\", privilege(\"lineitem\", SELECT_COLUMN));\n-        assertAccessDenied(\"SHOW STATS FOR (SELECT linenumber, orderkey, quantity FROM lineitem)\", \"Cannot show stats for columns \\\\[linenumber, orderkey, quantity\\\\] in table or view .*.lineitem.*\", privilege(\"lineitem.linenumber\", SELECT_COLUMN), privilege(\"lineitem.orderkey\", SELECT_COLUMN));\n-        assertAccessDenied(\"SHOW STATS FOR (SELECT nationkey FROM nation)\", \"Cannot show stats for columns \\\\[nationkey\\\\] in table or view .*.nation.*\", privilege(\"nation\", SELECT_COLUMN));\n-        assertAccessDenied(\"SHOW STATS FOR (SELECT * FROM nation)\", \"Cannot show stats for columns \\\\[nationkey, regionkey, name, comment\\\\] in table or view .*.nation.*\", privilege(\"nation\", SELECT_COLUMN));\n+        assertAccessDenied(\"SHOW STATS FOR (SELECT * FROM nation)\", \"Cannot select from columns \\\\[nationkey, regionkey, name, comment\\\\] in table or view .*.nation\", privilege(\"nation\", SELECT_COLUMN));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMTI1NTA3", "url": "https://github.com/trinodb/trino/pull/3109#pullrequestreview-532125507", "createdAt": "2020-11-17T08:32:32Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MjkzODI0", "url": "https://github.com/trinodb/trino/pull/3109#pullrequestreview-536293824", "createdAt": "2020-11-23T09:28:21Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MzMzODc4", "url": "https://github.com/trinodb/trino/pull/3109#pullrequestreview-536333878", "createdAt": "2020-11-23T10:19:27Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDoxOToyN1rOH4HAcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDoyNjo1N1rOH4HRwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU5NzEwNg==", "bodyText": "columnSizeForFormat is left unused", "url": "https://github.com/trinodb/trino/pull/3109#discussion_r528597106", "createdAt": "2020-11-23T10:19:27Z", "author": {"login": "findepi"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/AbstractTestIcebergSmoke.java", "diffHunk": "@@ -1021,7 +1021,7 @@ public void testBasicTableStatistics()\n         MaterializedResult result = computeActual(\"SHOW STATS FOR \" + tableName);\n         MaterializedResult expectedStatistics =\n                 resultBuilder(getSession(), VARCHAR, DOUBLE, DOUBLE, DOUBLE, DOUBLE, VARCHAR, VARCHAR)\n-                        .row(\"col\", columnSizeForFormat(96.0), null, 0.0, null, \"-10.0\", \"100.0\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU5NzcyMw==", "bodyText": "It's weird that Analyzer needs a stats calculator. In any case, why not provide a NOOP here?", "url": "https://github.com/trinodb/trino/pull/3109#discussion_r528597723", "createdAt": "2020-11-23T10:20:24Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/execution/CreateMaterializedViewTask.java", "diffHunk": "@@ -86,7 +89,7 @@ public String explain(CreateMaterializedView statement, List<Expression> paramet\n \n         String sql = getFormattedSql(statement.getQuery(), sqlParser);\n \n-        Analysis analysis = new Analyzer(session, metadata, sqlParser, groupProvider, accessControl, Optional.empty(), parameters, parameterLookup, stateMachine.getWarningCollector())\n+        Analysis analysis = new Analyzer(session, metadata, sqlParser, groupProvider, accessControl, Optional.empty(), parameters, parameterLookup, stateMachine.getWarningCollector(), statsCalculator)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU5ODIxMg==", "bodyText": "rnn\nmore importantly though -- it's counter intuitive why Analyzer needs stats calculator. It seems analysis result doesn't depend on stats (the plan does). I see this is needed to pass to ShowStatsRewrite. Maybe we can inject it there at creation?", "url": "https://github.com/trinodb/trino/pull/3109#discussion_r528598212", "createdAt": "2020-11-23T10:21:16Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/Analyzer.java", "diffHunk": "@@ -72,6 +75,7 @@ public Analyzer(\n         this.parameters = parameters;\n         this.parameterLookup = parameterLookup;\n         this.warningCollector = requireNonNull(warningCollector, \"warningCollector is null\");\n+        this.statsCalculator = statsCalculator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYwMTUzNg==", "bodyText": "getRelation creates artificial query (simpleQuery(selectList(new AllColumns()), node.getRelation())), which we here analyze and plan. This can lead to eg AccessDeniedException referencing ... things user did not write. Previously we would post-process this with rewriteAccessDeniedException. Why is this not needed anymore?", "url": "https://github.com/trinodb/trino/pull/3109#discussion_r528601536", "createdAt": "2020-11-23T10:26:57Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -109,80 +94,44 @@ public Statement rewrite(\n             Map<NodeRef<Parameter>, Expression> parameterLookup,\n             GroupProvider groupProvider,\n             AccessControl accessControl,\n-            WarningCollector warningCollector)\n+            WarningCollector warningCollector,\n+            StatsCalculator statsCalculator)\n     {\n-        return (Statement) new Visitor(metadata, session, parameters, queryExplainer, accessControl, warningCollector).process(node, null);\n+        return (Statement) new Visitor(session, parameters, queryExplainer, warningCollector, statsCalculator).process(node, null);\n     }\n \n     private static class Visitor\n             extends AstVisitor<Node, Void>\n     {\n-        private final Metadata metadata;\n         private final Session session;\n         private final List<Expression> parameters;\n         private final Optional<QueryExplainer> queryExplainer;\n-        private final AccessControl accessControl;\n         private final WarningCollector warningCollector;\n+        private final StatsCalculator statsCalculator;\n \n-        private Visitor(Metadata metadata, Session session, List<Expression> parameters, Optional<QueryExplainer> queryExplainer, AccessControl accessControl, WarningCollector warningCollector)\n+        private Visitor(Session session, List<Expression> parameters, Optional<QueryExplainer> queryExplainer, WarningCollector warningCollector, StatsCalculator statsCalculator)\n         {\n-            this.metadata = requireNonNull(metadata, \"metadata is null\");\n             this.session = requireNonNull(session, \"session is null\");\n             this.parameters = requireNonNull(parameters, \"parameters is null\");\n             this.queryExplainer = requireNonNull(queryExplainer, \"queryExplainer is null\");\n-            this.accessControl = requireNonNull(accessControl, \"accessControl is null\");\n             this.warningCollector = requireNonNull(warningCollector, \"warningCollector is null\");\n+            this.statsCalculator = requireNonNull(statsCalculator, \"statsCalculator is null\");\n         }\n \n         @Override\n         protected Node visitShowStats(ShowStats node, Void context)\n         {\n             checkState(queryExplainer.isPresent(), \"Query explainer must be provided for SHOW STATS SELECT\");\n \n-            Query query = getRelationQuery(node);\n+            Query query = getRelation(node);\n             QuerySpecification specification = (QuerySpecification) query.getQueryBody();\n-\n-            Plan plan;\n-\n-            try {\n-                plan = queryExplainer.get().getLogicalPlan(session, query(specification), parameters, warningCollector);\n-            }\n-            catch (AccessDeniedException e) {\n-                throw rewriteAccessDeniedException(e);\n-            }\n-\n-            Table table = getTable(node, specification);\n-            QualifiedObjectName tableName = createQualifiedObjectName(session, node, table.getName());\n-            TableHandle tableHandle = metadata.getTableHandle(session, tableName)\n-                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, node, \"Table '%s' not found\", table.getName()));\n-            TableMetadata tableMetadata = metadata.getTableMetadata(session, tableHandle);\n-            Map<String, ColumnHandle> columnHandles = metadata.getColumnHandles(session, tableHandle);\n-            Set<String> columnNames = extractStatsColumns(tableMetadata, specification.getSelect().getSelectItems());\n-\n-            try {\n-                accessControl.checkCanSelectFromColumns(session.toSecurityContext(), tableName, columnNames);\n-            }\n-            catch (AccessDeniedException e) {\n-                throw rewriteAccessDeniedException(e);\n-            }\n-\n-            for (String columnName : columnNames) {\n-                ColumnMetadata column = tableMetadata.getColumn(columnName);\n-                if (!accessControl.getColumnMasks(session.toSecurityContext(), tableName, columnName, column.getType()).isEmpty()) {\n-                    throw new PrestoException(NOT_SUPPORTED, \"SHOW STATS for table with column masking is not supported: \" + columnName);\n-                }\n-            }\n-            if (!accessControl.getRowFilters(session.toSecurityContext(), tableName).isEmpty()) {\n-                // SHOW STATS could reveal min, max value which would be otherwise filtered out; or could reveal statistical properties of the data, like row count\n-                throw new PrestoException(NOT_SUPPORTED, \"SHOW STATS is not supported for a table with row filtering\");\n-            }\n-\n-            validateShowStatsSubquery(node, query, specification, plan);\n-\n-            return rewriteShowStats(table, tableHandle, tableMetadata, columnNames, columnHandles, getConstraint(plan));\n+            Plan plan = queryExplainer.get().getLogicalPlan(session, query(specification), parameters, warningCollector);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 162}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0MjkwOTAw", "url": "https://github.com/trinodb/trino/pull/3109#pullrequestreview-544290900", "createdAt": "2020-12-03T19:10:39Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxOToxMDozOVrOH-syBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxOToxMDozOVrOH-syBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUwNzQ2Mg==", "bodyText": "Why there is a change here?", "url": "https://github.com/trinodb/trino/pull/3109#discussion_r535507462", "createdAt": "2020-12-03T19:10:39Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -5877,21 +5877,21 @@ public void testCollectColumnStatisticsOnCreateTable()\n                         \"('c_bigint', null, 2.0E0, 0.5E0, null, '1', '2'), \" +\n                         \"('c_double', null, 2.0E0, 0.5E0, null, '2.3', '3.3'), \" +\n                         \"('c_timestamp', null, 2.0E0, 0.5E0, null, null, null), \" +\n-                        \"('c_varchar', 8.0E0, 2.0E0, 0.5E0, null, null, null), \" +\n-                        \"('c_varbinary', 8.0E0, null, 0.5E0, null, null, null), \" +\n+                        \"('c_varchar', 16.0E0, 2.0E0, 0.5E0, null, null, null), \" +\n+                        \"('c_varbinary', 16.0E0, null, 0.5E0, null, null, null), \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NTM5NDQ5", "url": "https://github.com/trinodb/trino/pull/3109#pullrequestreview-546539449", "createdAt": "2020-12-07T21:11:06Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToxMTowN1rOIA63xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToxMTowN1rOIA63xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzNTQ2Mw==", "bodyText": "there is a bunch of redudant changes: 0e0 -> 0\nthere are also some meaningful changes:\n\n0e0 -> 1\nnull -> 0\n\nideally let's avoid unnnecessary changes within the \"logic change\" commit\nmore importantly -- why the meaningful changes?", "url": "https://github.com/trinodb/trino/pull/3109#discussion_r537835463", "createdAt": "2020-12-07T21:11:07Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -5885,13 +5885,13 @@ public void testCollectColumnStatisticsOnCreateTable()\n         // non existing partition\n         assertQuery(format(\"SHOW STATS FOR (SELECT * FROM %s WHERE p_varchar = 'p3')\", tableName),\n                 \"SELECT * FROM VALUES \" +\n-                        \"('c_boolean', null, 0E0, 0E0, null, null, null), \" +\n-                        \"('c_bigint', null, 0E0, 0E0, null, null, null), \" +\n-                        \"('c_double', null, 0E0, 0E0, null, null, null), \" +\n-                        \"('c_timestamp', null, 0E0, 0E0, null, null, null), \" +\n-                        \"('c_varchar', 0E0, 0E0, 0E0, null, null, null), \" +\n-                        \"('c_varbinary', null, 0E0, 0E0, null, null, null), \" +\n-                        \"('p_varchar', 0E0, 0E0, 0E0, null, null, null), \" +\n+                        \"('c_boolean', 0, 0, 1, null, null, null), \" +\n+                        \"('c_bigint', 0, 0, 1, null, null, null), \" +\n+                        \"('c_double', 0, 0, 1, null, null, null), \" +\n+                        \"('c_timestamp', 0, 0, 1, null, null, null), \" +\n+                        \"('c_varchar', 0, 0, 1, null, null, null), \" +\n+                        \"('c_varbinary', 0, 0, 1, null, null, null), \" +\n+                        \"('p_varchar', 0, 0, 1, null, null, null), \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NjIxNjUz", "url": "https://github.com/trinodb/trino/pull/3109#pullrequestreview-548621653", "createdAt": "2020-12-09T21:24:18Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMToyNDoxOVrOICqJbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMToyNDoxOVrOICqJbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY1ODYwNg==", "bodyText": "You changed semantics here.\nIt used to be array of doubles, now it's array of decimal(2,1)\nSame in some other places.\nCan we drop this commit in order to expedite the merge of the important part of this PR?", "url": "https://github.com/trinodb/trino/pull/3109#discussion_r539658606", "createdAt": "2020-12-09T21:24:19Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -3376,12 +3376,12 @@ private void testRowsWithNulls(Session session, HiveStorageFormat format)\n     public void testComplex()\n     {\n         assertUpdate(\"CREATE TABLE tmp_complex1 AS SELECT \" +\n-                        \"ARRAY [MAP(ARRAY['a', 'b'], ARRAY[2.0E0, 4.0E0]), MAP(ARRAY['c', 'd'], ARRAY[12.0E0, 14.0E0])] AS a\",\n+                        \"ARRAY [MAP(ARRAY['a', 'b'], ARRAY[2, 4.0]), MAP(ARRAY['c', 'd'], ARRAY[12, 14.0])] AS a\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 126}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5OTUxOTkw", "url": "https://github.com/trinodb/trino/pull/3109#pullrequestreview-549951990", "createdAt": "2020-12-11T09:54:39Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwOTo1NDozOVrOIDxWEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDoxNTowMFrOIDyIww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgyNTEwNw==", "bodyText": "Please add a comment to the cmt message than now null fraction is normalized to 1 for tables with row count 0, regardless of what the stats returned by the connector.\nSame for data size being normalized to 0 for all-null columns (regardless of table row count).\nThis may help in the future, when someone questions why the expected values changed in this commit.", "url": "https://github.com/trinodb/trino/pull/3109#discussion_r540825107", "createdAt": "2020-12-11T09:54:39Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -5885,14 +5885,14 @@ public void testCollectColumnStatisticsOnCreateTable()\n         // non existing partition\n         assertQuery(format(\"SHOW STATS FOR (SELECT * FROM %s WHERE p_varchar = 'p3')\", tableName),\n                 \"SELECT * FROM VALUES \" +\n-                        \"('c_boolean', null, 0E0, 0E0, null, null, null), \" +\n-                        \"('c_bigint', null, 0E0, 0E0, null, null, null), \" +\n-                        \"('c_double', null, 0E0, 0E0, null, null, null), \" +\n-                        \"('c_timestamp', null, 0E0, 0E0, null, null, null), \" +\n-                        \"('c_varchar', 0E0, 0E0, 0E0, null, null, null), \" +\n-                        \"('c_varbinary', null, 0E0, 0E0, null, null, null), \" +\n-                        \"('p_varchar', 0E0, 0E0, 0E0, null, null, null), \" +\n-                        \"(null, null, null, null, 0E0, null, null)\");\n+                        \"('c_boolean', 0.0, 0.0, 1.0, null, null, null), \" +\n+                        \"('c_bigint', 0.0, 0.0, 1.0, null, null, null), \" +\n+                        \"('c_double', 0.0, 0.0, 1.0, null, null, null), \" +\n+                        \"('c_timestamp', 0.0, 0.0, 1.0, null, null, null), \" +\n+                        \"('c_varchar', 0.0, 0.0, 1.0, null, null, null), \" +\n+                        \"('c_varbinary', 0.0, 0.0, 1.0, null, null, null), \" +\n+                        \"('p_varchar', 0.0, 0.0, 1.0, null, null, null), \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgyNjgyOA==", "bodyText": "regionkey is twice here, same below in *, * case\nplease add a note in cmt message about this change too", "url": "https://github.com/trinodb/trino/pull/3109#discussion_r540826828", "createdAt": "2020-12-11T09:57:19Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestShowStats.java", "diffHunk": "@@ -158,14 +166,19 @@ public void testShowStats()\n                         \"   ('nationkey', null, 5.0, 0.0, null, 0, 24), \" +\n                         \"   ('name', 177.0, 5.0, 0.0, null, null, null), \" +\n                         \"   ('comment', 1857.0, 5.0, 0.0, null, null, null), \" +\n+                        \"   ('regionkey', null, 5.0, 0.0, null, 0, 4), \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgyNzU3OA==", "bodyText": "Maybe add\n// The two regionkey columns come from two different tables", "url": "https://github.com/trinodb/trino/pull/3109#discussion_r540827578", "createdAt": "2020-12-11T09:58:23Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestShowStats.java", "diffHunk": "@@ -181,28 +194,59 @@ public void testShowStats()\n     }\n \n     @Test\n-    public void testShowStatsWithoutFromFails()\n+    public void testShowStatsWithoutFrom()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT 1)\", \".*There must be exactly one table in query passed to SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT 1)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, 1.0, 0.0, null, 1, 1), \" +\n+                        \"   (null, null, null, null, 1.0, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsWithMultipleFromFails()\n+    public void testShowStatsWithMultipleFrom()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT * FROM nation_partitioned, region)\", \".*There must be exactly one table in query passed to SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT * FROM nation_partitioned, region)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('nationkey', null, 5, 0, null, 0, 24), \" +\n+                        \"   ('name',      850, 5, 0, null, null, null), \" +\n+                        \"   ('comment',   9285, 5, 0, null, null, null), \" +\n+                        \"   ('regionkey', null, 5, 0, null, 0, 4), \" +\n+                        \"   ('regionkey', null, 5, 0, null, 0, 4), \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgyOTU2Mg==", "bodyText": "Maybe add more than 1, so that the effect on min/max is more apparent.", "url": "https://github.com/trinodb/trino/pull/3109#discussion_r540829562", "createdAt": "2020-12-11T10:01:36Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestShowStats.java", "diffHunk": "@@ -212,62 +256,145 @@ public void testShowStatsForNonExistingColumnFails()\n     }\n \n     @Test\n-    public void testShowStatsForNonColumnQueryFails()\n+    public void testShowStatsForNonColumnQuery()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT 1 FROM nation_partitioned)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT 1 FROM nation_partitioned)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, 1, 0, null, 1, 1), \" +\n+                        \"   (null, null, null, null, 25, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsForAliasedColumnQueryFails()\n+    public void testShowStatsForAliasedColumnQuery()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT nationkey, name, name AS name2 FROM nation_partitioned WHERE regionkey > 0 and regionkey < 4)\", \".*Column aliasing is not supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT nationkey, name, name AS name2 FROM nation_partitioned WHERE regionkey > 0 and regionkey < 4)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('nationkey', null, 5, 0, null, 1, 24), \" +\n+                        \"   ('name', 109, 5, 0, null, null, null), \" +\n+                        \"   ('name2', 109, 5, 0, null, null, null), \" +\n+                        \"   (null, null, null, null, 15, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsForNonIdentifierColumnFails()\n+    public void testShowStatsForNonIdentifierColumn()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT CONCAT('some', 'value') FROM nation_partitioned)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT CONCAT('some', 'value') FROM nation_partitioned)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, 1, 0, null, null, null), \" +\n+                        \"   (null, null, null, null, 25, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsForColumnExpressionFails()\n+    public void testShowStatsForColumnExpression()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT nationkey + 1 FROM nation_partitioned)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT nationkey + 1 FROM nation_partitioned)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, 5, 0, null, 1, 25), \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgyOTY1NA==", "bodyText": "Also, give expression an alias, so that you we do not have to update the tests when implicit column alias changes from _col0 to something else.\nThere needs to be a test with implicit column names, but let's have one dedicated test case for that.\n(same in other places)", "url": "https://github.com/trinodb/trino/pull/3109#discussion_r540829654", "createdAt": "2020-12-11T10:01:44Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestShowStats.java", "diffHunk": "@@ -212,62 +256,145 @@ public void testShowStatsForNonExistingColumnFails()\n     }\n \n     @Test\n-    public void testShowStatsForNonColumnQueryFails()\n+    public void testShowStatsForNonColumnQuery()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT 1 FROM nation_partitioned)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT 1 FROM nation_partitioned)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, 1, 0, null, 1, 1), \" +\n+                        \"   (null, null, null, null, 25, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsForAliasedColumnQueryFails()\n+    public void testShowStatsForAliasedColumnQuery()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT nationkey, name, name AS name2 FROM nation_partitioned WHERE regionkey > 0 and regionkey < 4)\", \".*Column aliasing is not supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT nationkey, name, name AS name2 FROM nation_partitioned WHERE regionkey > 0 and regionkey < 4)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('nationkey', null, 5, 0, null, 1, 24), \" +\n+                        \"   ('name', 109, 5, 0, null, null, null), \" +\n+                        \"   ('name2', 109, 5, 0, null, null, null), \" +\n+                        \"   (null, null, null, null, 15, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsForNonIdentifierColumnFails()\n+    public void testShowStatsForNonIdentifierColumn()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT CONCAT('some', 'value') FROM nation_partitioned)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT CONCAT('some', 'value') FROM nation_partitioned)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, 1, 0, null, null, null), \" +\n+                        \"   (null, null, null, null, 25, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsForColumnExpressionFails()\n+    public void testShowStatsForColumnExpression()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT nationkey + 1 FROM nation_partitioned)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT nationkey + 1 FROM nation_partitioned)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, 5, 0, null, 1, 25), \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgyOTk5OQ==", "bodyText": "We should know the row count since it's NDV(orderkey), which is known.\nIs it unknown because of partial aggregations?\nPlease file an issue to further improve this.", "url": "https://github.com/trinodb/trino/pull/3109#discussion_r540829999", "createdAt": "2020-12-11T10:02:13Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestShowStats.java", "diffHunk": "@@ -212,62 +256,145 @@ public void testShowStatsForNonExistingColumnFails()\n     }\n \n     @Test\n-    public void testShowStatsForNonColumnQueryFails()\n+    public void testShowStatsForNonColumnQuery()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT 1 FROM nation_partitioned)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT 1 FROM nation_partitioned)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, 1, 0, null, 1, 1), \" +\n+                        \"   (null, null, null, null, 25, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsForAliasedColumnQueryFails()\n+    public void testShowStatsForAliasedColumnQuery()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT nationkey, name, name AS name2 FROM nation_partitioned WHERE regionkey > 0 and regionkey < 4)\", \".*Column aliasing is not supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT nationkey, name, name AS name2 FROM nation_partitioned WHERE regionkey > 0 and regionkey < 4)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('nationkey', null, 5, 0, null, 1, 24), \" +\n+                        \"   ('name', 109, 5, 0, null, null, null), \" +\n+                        \"   ('name2', 109, 5, 0, null, null, null), \" +\n+                        \"   (null, null, null, null, 15, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsForNonIdentifierColumnFails()\n+    public void testShowStatsForNonIdentifierColumn()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT CONCAT('some', 'value') FROM nation_partitioned)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT CONCAT('some', 'value') FROM nation_partitioned)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, 1, 0, null, null, null), \" +\n+                        \"   (null, null, null, null, 25, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsForColumnExpressionFails()\n+    public void testShowStatsForColumnExpression()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT nationkey + 1 FROM nation_partitioned)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT nationkey + 1 FROM nation_partitioned)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, 5, 0, null, 1, 25), \" +\n+                        \"   (null, null, null, null, 25, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsWithGroupByFails()\n+    public void testShowStatsWithGroupBy()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT avg(totalprice) FROM orders GROUP BY orderkey)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT avg(totalprice) FROM orders GROUP BY orderkey)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, null, null, null, null, null), \" +\n+                        \"   (null, null, null, null, null, null, null))\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgzMDgyNg==", "bodyText": "Add a test with\nSELECT DISTINCT regionkey FROM nation\n\nsince NDV(regionkey) is known, the row count should be known.\nI think it won't work yet (the same way as the GROUP BY case above), so\nthis will be a todo", "url": "https://github.com/trinodb/trino/pull/3109#discussion_r540830826", "createdAt": "2020-12-11T10:03:32Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestShowStats.java", "diffHunk": "@@ -212,62 +256,145 @@ public void testShowStatsForNonExistingColumnFails()\n     }\n \n     @Test\n-    public void testShowStatsForNonColumnQueryFails()\n+    public void testShowStatsForNonColumnQuery()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT 1 FROM nation_partitioned)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT 1 FROM nation_partitioned)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, 1, 0, null, 1, 1), \" +\n+                        \"   (null, null, null, null, 25, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsForAliasedColumnQueryFails()\n+    public void testShowStatsForAliasedColumnQuery()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT nationkey, name, name AS name2 FROM nation_partitioned WHERE regionkey > 0 and regionkey < 4)\", \".*Column aliasing is not supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT nationkey, name, name AS name2 FROM nation_partitioned WHERE regionkey > 0 and regionkey < 4)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('nationkey', null, 5, 0, null, 1, 24), \" +\n+                        \"   ('name', 109, 5, 0, null, null, null), \" +\n+                        \"   ('name2', 109, 5, 0, null, null, null), \" +\n+                        \"   (null, null, null, null, 15, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsForNonIdentifierColumnFails()\n+    public void testShowStatsForNonIdentifierColumn()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT CONCAT('some', 'value') FROM nation_partitioned)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT CONCAT('some', 'value') FROM nation_partitioned)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, 1, 0, null, null, null), \" +\n+                        \"   (null, null, null, null, 25, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsForColumnExpressionFails()\n+    public void testShowStatsForColumnExpression()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT nationkey + 1 FROM nation_partitioned)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT nationkey + 1 FROM nation_partitioned)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, 5, 0, null, 1, 25), \" +\n+                        \"   (null, null, null, null, 25, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsWithGroupByFails()\n+    public void testShowStatsWithGroupBy()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT avg(totalprice) FROM orders GROUP BY orderkey)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT avg(totalprice) FROM orders GROUP BY orderkey)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, null, null, null, null, null), \" +\n+                        \"   (null, null, null, null, null, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsWithHavingFails()\n+    public void testShowStatsWithHaving()\n     {\n-        assertQueryFails(\n+        assertQuery(\n                 \"SHOW STATS FOR (SELECT count(nationkey) FROM nation_partitioned GROUP BY regionkey HAVING regionkey > 0)\",\n-                \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, null, null, null, null, null), \" +\n+                        \"   (null, null, null, null, null, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsWithSelectDistinctFails()\n+    public void testShowStatsWithSelectDistinct()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT DISTINCT * FROM orders)\", \".*DISTINCT is not supported by SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT DISTINCT * FROM orders)\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgzMTU0Mw==", "bodyText": "row count should be 1, since this is a global agg\nthis may be useful for \"helper\" tables used with max to pull some information used in oiher places in a query\nplease add a todo", "url": "https://github.com/trinodb/trino/pull/3109#discussion_r540831543", "createdAt": "2020-12-11T10:04:46Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestShowStats.java", "diffHunk": "@@ -212,62 +256,145 @@ public void testShowStatsForNonExistingColumnFails()\n     }\n \n     @Test\n-    public void testShowStatsForNonColumnQueryFails()\n+    public void testShowStatsForNonColumnQuery()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT 1 FROM nation_partitioned)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT 1 FROM nation_partitioned)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, 1, 0, null, 1, 1), \" +\n+                        \"   (null, null, null, null, 25, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsForAliasedColumnQueryFails()\n+    public void testShowStatsForAliasedColumnQuery()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT nationkey, name, name AS name2 FROM nation_partitioned WHERE regionkey > 0 and regionkey < 4)\", \".*Column aliasing is not supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT nationkey, name, name AS name2 FROM nation_partitioned WHERE regionkey > 0 and regionkey < 4)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('nationkey', null, 5, 0, null, 1, 24), \" +\n+                        \"   ('name', 109, 5, 0, null, null, null), \" +\n+                        \"   ('name2', 109, 5, 0, null, null, null), \" +\n+                        \"   (null, null, null, null, 15, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsForNonIdentifierColumnFails()\n+    public void testShowStatsForNonIdentifierColumn()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT CONCAT('some', 'value') FROM nation_partitioned)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT CONCAT('some', 'value') FROM nation_partitioned)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, 1, 0, null, null, null), \" +\n+                        \"   (null, null, null, null, 25, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsForColumnExpressionFails()\n+    public void testShowStatsForColumnExpression()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT nationkey + 1 FROM nation_partitioned)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT nationkey + 1 FROM nation_partitioned)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, 5, 0, null, 1, 25), \" +\n+                        \"   (null, null, null, null, 25, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsWithGroupByFails()\n+    public void testShowStatsWithGroupBy()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT avg(totalprice) FROM orders GROUP BY orderkey)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT avg(totalprice) FROM orders GROUP BY orderkey)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, null, null, null, null, null), \" +\n+                        \"   (null, null, null, null, null, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsWithHavingFails()\n+    public void testShowStatsWithHaving()\n     {\n-        assertQueryFails(\n+        assertQuery(\n                 \"SHOW STATS FOR (SELECT count(nationkey) FROM nation_partitioned GROUP BY regionkey HAVING regionkey > 0)\",\n-                \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, null, null, null, null, null), \" +\n+                        \"   (null, null, null, null, null, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsWithSelectDistinctFails()\n+    public void testShowStatsWithSelectDistinct()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT DISTINCT * FROM orders)\", \".*DISTINCT is not supported by SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT DISTINCT * FROM orders)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('orderkey', null, null, null, null, null, null), \" +\n+                        \"   ('custkey', null, null, null, null, null, null), \" +\n+                        \"   ('orderstatus', null, null, null, null, null, null), \" +\n+                        \"   ('totalprice', null, null, null, null, null, null), \" +\n+                        \"   ('orderdate', null, null, null, null, null, null), \" +\n+                        \"   ('orderpriority', null, null, null, null, null, null), \" +\n+                        \"   ('clerk', null, null, null, null, null, null), \" +\n+                        \"   ('shippriority', null, null, null, null, null, null), \" +\n+                        \"   ('comment', null, null, null, null, null, null), \" +\n+                        \"   (null, null, null, null, null, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsWithSelectFunctionCallFails()\n+    public void testShowStatsWithSelectFunctionCall()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT sin(orderkey) FROM orders)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n-        assertQueryFails(\"SHOW STATS FOR (SELECT count(*) FROM orders)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT sin(orderkey) FROM orders)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, null, null, null, null, null), \" +\n+                        \"   (null, null, null, null, 15000, null, null))\");\n+        assertQuery(\"SHOW STATS FOR (SELECT count(*) FROM orders)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, null, null, null, null, null), \" +\n+                        \"   (null, null, null, null, null, null, null))\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 270}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgzMjE0MA==", "bodyText": "How do you know this filter has not been pushed down?\nPlease capture explanation for the filters used here in a code comment", "url": "https://github.com/trinodb/trino/pull/3109#discussion_r540832140", "createdAt": "2020-12-11T10:05:42Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestShowStats.java", "diffHunk": "@@ -212,62 +256,145 @@ public void testShowStatsForNonExistingColumnFails()\n     }\n \n     @Test\n-    public void testShowStatsForNonColumnQueryFails()\n+    public void testShowStatsForNonColumnQuery()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT 1 FROM nation_partitioned)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT 1 FROM nation_partitioned)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, 1, 0, null, 1, 1), \" +\n+                        \"   (null, null, null, null, 25, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsForAliasedColumnQueryFails()\n+    public void testShowStatsForAliasedColumnQuery()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT nationkey, name, name AS name2 FROM nation_partitioned WHERE regionkey > 0 and regionkey < 4)\", \".*Column aliasing is not supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT nationkey, name, name AS name2 FROM nation_partitioned WHERE regionkey > 0 and regionkey < 4)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('nationkey', null, 5, 0, null, 1, 24), \" +\n+                        \"   ('name', 109, 5, 0, null, null, null), \" +\n+                        \"   ('name2', 109, 5, 0, null, null, null), \" +\n+                        \"   (null, null, null, null, 15, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsForNonIdentifierColumnFails()\n+    public void testShowStatsForNonIdentifierColumn()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT CONCAT('some', 'value') FROM nation_partitioned)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT CONCAT('some', 'value') FROM nation_partitioned)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, 1, 0, null, null, null), \" +\n+                        \"   (null, null, null, null, 25, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsForColumnExpressionFails()\n+    public void testShowStatsForColumnExpression()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT nationkey + 1 FROM nation_partitioned)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT nationkey + 1 FROM nation_partitioned)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, 5, 0, null, 1, 25), \" +\n+                        \"   (null, null, null, null, 25, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsWithGroupByFails()\n+    public void testShowStatsWithGroupBy()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT avg(totalprice) FROM orders GROUP BY orderkey)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT avg(totalprice) FROM orders GROUP BY orderkey)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, null, null, null, null, null), \" +\n+                        \"   (null, null, null, null, null, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsWithHavingFails()\n+    public void testShowStatsWithHaving()\n     {\n-        assertQueryFails(\n+        assertQuery(\n                 \"SHOW STATS FOR (SELECT count(nationkey) FROM nation_partitioned GROUP BY regionkey HAVING regionkey > 0)\",\n-                \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, null, null, null, null, null), \" +\n+                        \"   (null, null, null, null, null, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsWithSelectDistinctFails()\n+    public void testShowStatsWithSelectDistinct()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT DISTINCT * FROM orders)\", \".*DISTINCT is not supported by SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT DISTINCT * FROM orders)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('orderkey', null, null, null, null, null, null), \" +\n+                        \"   ('custkey', null, null, null, null, null, null), \" +\n+                        \"   ('orderstatus', null, null, null, null, null, null), \" +\n+                        \"   ('totalprice', null, null, null, null, null, null), \" +\n+                        \"   ('orderdate', null, null, null, null, null, null), \" +\n+                        \"   ('orderpriority', null, null, null, null, null, null), \" +\n+                        \"   ('clerk', null, null, null, null, null, null), \" +\n+                        \"   ('shippriority', null, null, null, null, null, null), \" +\n+                        \"   ('comment', null, null, null, null, null, null), \" +\n+                        \"   (null, null, null, null, null, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsWithSelectFunctionCallFails()\n+    public void testShowStatsWithSelectFunctionCall()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT sin(orderkey) FROM orders)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n-        assertQueryFails(\"SHOW STATS FOR (SELECT count(*) FROM orders)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT sin(orderkey) FROM orders)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, null, null, null, null, null), \" +\n+                        \"   (null, null, null, null, 15000, null, null))\");\n+        assertQuery(\"SHOW STATS FOR (SELECT count(*) FROM orders)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, null, null, null, null, null), \" +\n+                        \"   (null, null, null, null, null, null, null))\");\n+    }\n+\n+    @Test\n+    public void testShowStatsWithNonPushDownFilter()\n+    {\n+        assertQuery(\"SHOW STATS FOR (SELECT * FROM nation_partitioned WHERE regionkey + 100 < 200)\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 276}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgzMjI2MQ==", "bodyText": "Push -> Pushed", "url": "https://github.com/trinodb/trino/pull/3109#discussion_r540832261", "createdAt": "2020-12-11T10:05:56Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestShowStats.java", "diffHunk": "@@ -212,62 +256,145 @@ public void testShowStatsForNonExistingColumnFails()\n     }\n \n     @Test\n-    public void testShowStatsForNonColumnQueryFails()\n+    public void testShowStatsForNonColumnQuery()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT 1 FROM nation_partitioned)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT 1 FROM nation_partitioned)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, 1, 0, null, 1, 1), \" +\n+                        \"   (null, null, null, null, 25, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsForAliasedColumnQueryFails()\n+    public void testShowStatsForAliasedColumnQuery()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT nationkey, name, name AS name2 FROM nation_partitioned WHERE regionkey > 0 and regionkey < 4)\", \".*Column aliasing is not supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT nationkey, name, name AS name2 FROM nation_partitioned WHERE regionkey > 0 and regionkey < 4)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('nationkey', null, 5, 0, null, 1, 24), \" +\n+                        \"   ('name', 109, 5, 0, null, null, null), \" +\n+                        \"   ('name2', 109, 5, 0, null, null, null), \" +\n+                        \"   (null, null, null, null, 15, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsForNonIdentifierColumnFails()\n+    public void testShowStatsForNonIdentifierColumn()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT CONCAT('some', 'value') FROM nation_partitioned)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT CONCAT('some', 'value') FROM nation_partitioned)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, 1, 0, null, null, null), \" +\n+                        \"   (null, null, null, null, 25, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsForColumnExpressionFails()\n+    public void testShowStatsForColumnExpression()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT nationkey + 1 FROM nation_partitioned)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT nationkey + 1 FROM nation_partitioned)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, 5, 0, null, 1, 25), \" +\n+                        \"   (null, null, null, null, 25, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsWithGroupByFails()\n+    public void testShowStatsWithGroupBy()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT avg(totalprice) FROM orders GROUP BY orderkey)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT avg(totalprice) FROM orders GROUP BY orderkey)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, null, null, null, null, null), \" +\n+                        \"   (null, null, null, null, null, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsWithHavingFails()\n+    public void testShowStatsWithHaving()\n     {\n-        assertQueryFails(\n+        assertQuery(\n                 \"SHOW STATS FOR (SELECT count(nationkey) FROM nation_partitioned GROUP BY regionkey HAVING regionkey > 0)\",\n-                \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, null, null, null, null, null), \" +\n+                        \"   (null, null, null, null, null, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsWithSelectDistinctFails()\n+    public void testShowStatsWithSelectDistinct()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT DISTINCT * FROM orders)\", \".*DISTINCT is not supported by SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT DISTINCT * FROM orders)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('orderkey', null, null, null, null, null, null), \" +\n+                        \"   ('custkey', null, null, null, null, null, null), \" +\n+                        \"   ('orderstatus', null, null, null, null, null, null), \" +\n+                        \"   ('totalprice', null, null, null, null, null, null), \" +\n+                        \"   ('orderdate', null, null, null, null, null, null), \" +\n+                        \"   ('orderpriority', null, null, null, null, null, null), \" +\n+                        \"   ('clerk', null, null, null, null, null, null), \" +\n+                        \"   ('shippriority', null, null, null, null, null, null), \" +\n+                        \"   ('comment', null, null, null, null, null, null), \" +\n+                        \"   (null, null, null, null, null, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsWithSelectFunctionCallFails()\n+    public void testShowStatsWithSelectFunctionCall()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT sin(orderkey) FROM orders)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n-        assertQueryFails(\"SHOW STATS FOR (SELECT count(*) FROM orders)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT sin(orderkey) FROM orders)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, null, null, null, null, null), \" +\n+                        \"   (null, null, null, null, 15000, null, null))\");\n+        assertQuery(\"SHOW STATS FOR (SELECT count(*) FROM orders)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, null, null, null, null, null), \" +\n+                        \"   (null, null, null, null, null, null, null))\");\n+    }\n+\n+    @Test\n+    public void testShowStatsWithNonPushDownFilter()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 274}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgzNTE3OQ==", "bodyText": "This should be more contextual.\nnull makes sense\n\nfor min being -inf\nfor max being +inf\nfor row count, NDV, null fraction, data size being nan\n\nbut we probably should not output dull null eg when\n\nrow count is +inf\n\nplease maybe add a todo note?\nsame in toStringLiteral(Type type, double value) above", "url": "https://github.com/trinodb/trino/pull/3109#discussion_r540835179", "createdAt": "2020-12-11T10:10:30Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -414,4 +225,12 @@ private static Expression toStringLiteral(Type type, double value)\n             throw new IllegalArgumentException(\"Unexpected type: \" + type);\n         }\n     }\n+\n+    private static Expression toDoubleLiteral(double value)\n+    {\n+        if (!isFinite(value)) {\n+            return NULL_DOUBLE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 415}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgzNjQ2NA==", "bodyText": "It would improve readability if you extracted this to   method\nString statsRow(String columnName, double datasize,....) \n\nalso,\n\ncast(1 AS double) can be expressed shortly with 1e0\nuppercase CAST and NULL", "url": "https://github.com/trinodb/trino/pull/3109#discussion_r540836464", "createdAt": "2020-12-11T10:12:35Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/sql/query/TestColumnMask.java", "diffHunk": "@@ -455,10 +455,22 @@ public void testShowStats()\n                 USER,\n                 new ViewExpression(USER, Optional.of(CATALOG), Optional.of(\"tiny\"), \"7\"));\n \n-        assertThatThrownBy(() -> assertions.query(\"SHOW STATS FOR (SELECT * FROM orders)\"))\n-                .hasMessageMatching(\"\\\\QSHOW STATS for table with column masking is not supported: orderkey\");\n-        assertThatThrownBy(() -> assertions.query(\"SHOW STATS FOR (SELECT orderkey FROM orders)\"))\n-                .hasMessageMatching(\"\\\\QSHOW STATS for table with column masking is not supported: orderkey\");\n+        assertThat(assertions.query(\"SHOW STATS FOR (SELECT * FROM orders)\"))\n+                .matches(\"VALUES \" +\n+                        \"(cast('orderkey' AS varchar), cast(null AS double), cast(1 AS double), cast(0 AS double), cast(null AS double), cast('7' AS varchar), cast('7' AS varchar)),\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgzODA4Mw==", "bodyText": "Nice.\nplease mention this normalization in a commit message as well", "url": "https://github.com/trinodb/trino/pull/3109#discussion_r540838083", "createdAt": "2020-12-11T10:15:00Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTableStatistics.java", "diffHunk": "@@ -120,7 +120,7 @@ public Requirement getRequirements(Configuration configuration)\n                 row(\"c_tinyint\", null, 2.0, 0.0, null, \"121\", \"127\"),\n                 row(\"c_smallint\", null, 2.0, 0.0, null, \"32761\", \"32767\"),\n                 row(\"c_int\", null, 2.0, 0.0, null, \"2147483641\", \"2147483647\"),\n-                row(\"c_bigint\", null, 2.0, 0.0, null, \"9223372036854775807\", \"9223372036854775807\"),\n+                row(\"c_bigint\", null, 1.0, 0.0, null, \"9223372036854775807\", \"9223372036854775807\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwOTUxMjE1", "url": "https://github.com/trinodb/trino/pull/3109#pullrequestreview-550951215", "createdAt": "2020-12-13T19:24:01Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxOToyNDowMVrOIE4T4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMDoxMjoxOVrOIE40KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk4NzgxMQ==", "bodyText": "#6323", "url": "https://github.com/trinodb/trino/pull/3109#discussion_r541987811", "createdAt": "2020-12-13T19:24:01Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestShowStats.java", "diffHunk": "@@ -212,62 +256,145 @@ public void testShowStatsForNonExistingColumnFails()\n     }\n \n     @Test\n-    public void testShowStatsForNonColumnQueryFails()\n+    public void testShowStatsForNonColumnQuery()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT 1 FROM nation_partitioned)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT 1 FROM nation_partitioned)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, 1, 0, null, 1, 1), \" +\n+                        \"   (null, null, null, null, 25, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsForAliasedColumnQueryFails()\n+    public void testShowStatsForAliasedColumnQuery()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT nationkey, name, name AS name2 FROM nation_partitioned WHERE regionkey > 0 and regionkey < 4)\", \".*Column aliasing is not supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT nationkey, name, name AS name2 FROM nation_partitioned WHERE regionkey > 0 and regionkey < 4)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('nationkey', null, 5, 0, null, 1, 24), \" +\n+                        \"   ('name', 109, 5, 0, null, null, null), \" +\n+                        \"   ('name2', 109, 5, 0, null, null, null), \" +\n+                        \"   (null, null, null, null, 15, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsForNonIdentifierColumnFails()\n+    public void testShowStatsForNonIdentifierColumn()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT CONCAT('some', 'value') FROM nation_partitioned)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT CONCAT('some', 'value') FROM nation_partitioned)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, 1, 0, null, null, null), \" +\n+                        \"   (null, null, null, null, 25, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsForColumnExpressionFails()\n+    public void testShowStatsForColumnExpression()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT nationkey + 1 FROM nation_partitioned)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT nationkey + 1 FROM nation_partitioned)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, 5, 0, null, 1, 25), \" +\n+                        \"   (null, null, null, null, 25, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsWithGroupByFails()\n+    public void testShowStatsWithGroupBy()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT avg(totalprice) FROM orders GROUP BY orderkey)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT avg(totalprice) FROM orders GROUP BY orderkey)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, null, null, null, null, null), \" +\n+                        \"   (null, null, null, null, null, null, null))\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgyOTk5OQ=="}, "originalCommit": null, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk4ODYzMQ==", "bodyText": "Actually, I do not care how big part of predicate was pushed down. I will rename the test to testShowStatsWithPredicate", "url": "https://github.com/trinodb/trino/pull/3109#discussion_r541988631", "createdAt": "2020-12-13T19:28:42Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestShowStats.java", "diffHunk": "@@ -212,62 +256,145 @@ public void testShowStatsForNonExistingColumnFails()\n     }\n \n     @Test\n-    public void testShowStatsForNonColumnQueryFails()\n+    public void testShowStatsForNonColumnQuery()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT 1 FROM nation_partitioned)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT 1 FROM nation_partitioned)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, 1, 0, null, 1, 1), \" +\n+                        \"   (null, null, null, null, 25, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsForAliasedColumnQueryFails()\n+    public void testShowStatsForAliasedColumnQuery()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT nationkey, name, name AS name2 FROM nation_partitioned WHERE regionkey > 0 and regionkey < 4)\", \".*Column aliasing is not supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT nationkey, name, name AS name2 FROM nation_partitioned WHERE regionkey > 0 and regionkey < 4)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('nationkey', null, 5, 0, null, 1, 24), \" +\n+                        \"   ('name', 109, 5, 0, null, null, null), \" +\n+                        \"   ('name2', 109, 5, 0, null, null, null), \" +\n+                        \"   (null, null, null, null, 15, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsForNonIdentifierColumnFails()\n+    public void testShowStatsForNonIdentifierColumn()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT CONCAT('some', 'value') FROM nation_partitioned)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT CONCAT('some', 'value') FROM nation_partitioned)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, 1, 0, null, null, null), \" +\n+                        \"   (null, null, null, null, 25, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsForColumnExpressionFails()\n+    public void testShowStatsForColumnExpression()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT nationkey + 1 FROM nation_partitioned)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT nationkey + 1 FROM nation_partitioned)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, 5, 0, null, 1, 25), \" +\n+                        \"   (null, null, null, null, 25, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsWithGroupByFails()\n+    public void testShowStatsWithGroupBy()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT avg(totalprice) FROM orders GROUP BY orderkey)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT avg(totalprice) FROM orders GROUP BY orderkey)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, null, null, null, null, null), \" +\n+                        \"   (null, null, null, null, null, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsWithHavingFails()\n+    public void testShowStatsWithHaving()\n     {\n-        assertQueryFails(\n+        assertQuery(\n                 \"SHOW STATS FOR (SELECT count(nationkey) FROM nation_partitioned GROUP BY regionkey HAVING regionkey > 0)\",\n-                \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, null, null, null, null, null), \" +\n+                        \"   (null, null, null, null, null, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsWithSelectDistinctFails()\n+    public void testShowStatsWithSelectDistinct()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT DISTINCT * FROM orders)\", \".*DISTINCT is not supported by SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT DISTINCT * FROM orders)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('orderkey', null, null, null, null, null, null), \" +\n+                        \"   ('custkey', null, null, null, null, null, null), \" +\n+                        \"   ('orderstatus', null, null, null, null, null, null), \" +\n+                        \"   ('totalprice', null, null, null, null, null, null), \" +\n+                        \"   ('orderdate', null, null, null, null, null, null), \" +\n+                        \"   ('orderpriority', null, null, null, null, null, null), \" +\n+                        \"   ('clerk', null, null, null, null, null, null), \" +\n+                        \"   ('shippriority', null, null, null, null, null, null), \" +\n+                        \"   ('comment', null, null, null, null, null, null), \" +\n+                        \"   (null, null, null, null, null, null, null))\");\n     }\n \n     @Test\n-    public void testShowStatsWithSelectFunctionCallFails()\n+    public void testShowStatsWithSelectFunctionCall()\n     {\n-        assertQueryFails(\"SHOW STATS FOR (SELECT sin(orderkey) FROM orders)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n-        assertQueryFails(\"SHOW STATS FOR (SELECT count(*) FROM orders)\", \".*Only table columns names are supported in SHOW STATS SELECT clause\");\n+        assertQuery(\"SHOW STATS FOR (SELECT sin(orderkey) FROM orders)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, null, null, null, null, null), \" +\n+                        \"   (null, null, null, null, 15000, null, null))\");\n+        assertQuery(\"SHOW STATS FOR (SELECT count(*) FROM orders)\",\n+                \"SELECT * FROM (VALUES \" +\n+                        \"   ('_col0', null, null, null, null, null, null), \" +\n+                        \"   (null, null, null, null, null, null, null))\");\n+    }\n+\n+    @Test\n+    public void testShowStatsWithNonPushDownFilter()\n+    {\n+        assertQuery(\"SHOW STATS FOR (SELECT * FROM nation_partitioned WHERE regionkey + 100 < 200)\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgzMjE0MA=="}, "originalCommit": null, "originalPosition": 276}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk5MjI1MA==", "bodyText": "It is not used for min and max. I don't see a big difference between NaN and null from user perspective.\n\nsame in toStringLiteral(Type type, double value) above\n\ntoStringLiteral is used only for min and max where -inf and +inf is represented differently for different types.\n\nplease maybe add a todo note?\n\nI don't fully understand you here, so let me skip that.", "url": "https://github.com/trinodb/trino/pull/3109#discussion_r541992250", "createdAt": "2020-12-13T19:49:57Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -414,4 +225,12 @@ private static Expression toStringLiteral(Type type, double value)\n             throw new IllegalArgumentException(\"Unexpected type: \" + type);\n         }\n     }\n+\n+    private static Expression toDoubleLiteral(double value)\n+    {\n+        if (!isFinite(value)) {\n+            return NULL_DOUBLE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgzNTE3OQ=="}, "originalCommit": null, "originalPosition": 415}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk5NjA3Mg==", "bodyText": "I simplified it differently. Case fixed.", "url": "https://github.com/trinodb/trino/pull/3109#discussion_r541996072", "createdAt": "2020-12-13T20:12:19Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/sql/query/TestColumnMask.java", "diffHunk": "@@ -455,10 +455,22 @@ public void testShowStats()\n                 USER,\n                 new ViewExpression(USER, Optional.of(CATALOG), Optional.of(\"tiny\"), \"7\"));\n \n-        assertThatThrownBy(() -> assertions.query(\"SHOW STATS FOR (SELECT * FROM orders)\"))\n-                .hasMessageMatching(\"\\\\QSHOW STATS for table with column masking is not supported: orderkey\");\n-        assertThatThrownBy(() -> assertions.query(\"SHOW STATS FOR (SELECT orderkey FROM orders)\"))\n-                .hasMessageMatching(\"\\\\QSHOW STATS for table with column masking is not supported: orderkey\");\n+        assertThat(assertions.query(\"SHOW STATS FOR (SELECT * FROM orders)\"))\n+                .matches(\"VALUES \" +\n+                        \"(cast('orderkey' AS varchar), cast(null AS double), cast(1 AS double), cast(0 AS double), cast(null AS double), cast('7' AS varchar), cast('7' AS varchar)),\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgzNjQ2NA=="}, "originalCommit": null, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxMTM5ODA3", "url": "https://github.com/trinodb/trino/pull/3109#pullrequestreview-551139807", "createdAt": "2020-12-14T08:33:24Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwODozMzoyNVrOIFFH_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwODozNDozM1rOIFFKog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE5Nzc1OA==", "bodyText": "CAST(1 AS double) -> 1e0", "url": "https://github.com/trinodb/trino/pull/3109#discussion_r542197758", "createdAt": "2020-12-14T08:33:25Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/sql/query/TestColumnMask.java", "diffHunk": "@@ -455,14 +455,19 @@ public void testShowStats()\n                 USER,\n                 new ViewExpression(USER, Optional.of(CATALOG), Optional.of(\"tiny\"), \"7\"));\n \n-        assertThatThrownBy(() -> assertions.query(\"SHOW STATS FOR (SELECT * FROM orders)\"))\n-                .hasMessageMatching(\"\\\\QSHOW STATS for table with column masking is not supported: orderkey\");\n-        assertThatThrownBy(() -> assertions.query(\"SHOW STATS FOR (SELECT orderkey FROM orders)\"))\n-                .hasMessageMatching(\"\\\\QSHOW STATS for table with column masking is not supported: orderkey\");\n+        assertThat(assertions.query(\"SHOW STATS FOR (SELECT * FROM orders)\"))\n+                .containsAll(\"VALUES \" +\n+                        \"(CAST('orderkey' AS varchar), CAST(NULL AS double), CAST(1 AS double), 0e1, NULL, '7', '7'),\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE5NzgxMg==", "bodyText": "CAST(1 AS double)\ni still think a statsRow formatting function could be useful, but it looks good enough", "url": "https://github.com/trinodb/trino/pull/3109#discussion_r542197812", "createdAt": "2020-12-14T08:33:33Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/sql/query/TestColumnMask.java", "diffHunk": "@@ -455,14 +455,19 @@ public void testShowStats()\n                 USER,\n                 new ViewExpression(USER, Optional.of(CATALOG), Optional.of(\"tiny\"), \"7\"));\n \n-        assertThatThrownBy(() -> assertions.query(\"SHOW STATS FOR (SELECT * FROM orders)\"))\n-                .hasMessageMatching(\"\\\\QSHOW STATS for table with column masking is not supported: orderkey\");\n-        assertThatThrownBy(() -> assertions.query(\"SHOW STATS FOR (SELECT orderkey FROM orders)\"))\n-                .hasMessageMatching(\"\\\\QSHOW STATS for table with column masking is not supported: orderkey\");\n+        assertThat(assertions.query(\"SHOW STATS FOR (SELECT * FROM orders)\"))\n+                .containsAll(\"VALUES \" +\n+                        \"(CAST('orderkey' AS varchar), CAST(NULL AS double), CAST(1 AS double), 0e1, NULL, '7', '7'),\" +\n+                        \"(CAST('clerk' AS varchar), 15e3, 1e3, 0e1, NULL, CAST(NULL AS varchar), CAST(NULL AS varchar)),\" +\n+                        \"(NULL, NULL, NULL, NULL, 15e3, NULL, NULL)\");\n+        assertThat(assertions.query(\"SHOW STATS FOR (SELECT orderkey FROM orders)\"))\n+                .matches(\"VALUES \" +\n+                        \"(CAST('orderkey' AS varchar), CAST(NULL AS double), CAST(1 AS double), 0e1, NULL, CAST('7' AS varchar), CAST('7' AS varchar)),\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE5ODQzNA==", "bodyText": "CAST(1 AS double)", "url": "https://github.com/trinodb/trino/pull/3109#discussion_r542198434", "createdAt": "2020-12-14T08:34:33Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/sql/query/TestRowFilter.java", "diffHunk": "@@ -366,7 +366,11 @@ public void testShowStats()\n                 USER,\n                 new ViewExpression(RUN_AS_USER, Optional.of(CATALOG), Optional.of(\"tiny\"), \"orderkey = 0\"));\n \n-        assertThatThrownBy(() -> assertions.query(\"SHOW STATS FOR (SELECT * FROM tiny.orders)\"))\n-                .hasMessageMatching(\"\\\\QSHOW STATS is not supported for a table with row filtering\");\n+        assertThat(assertions.query(\"SHOW STATS FOR (SELECT * FROM tiny.orders)\"))\n+                .containsAll(\n+                        \"VALUES \" +\n+                                \"(CAST('orderkey' AS varchar), 0e1, 0e1, CAST(1 AS double), CAST(NULL AS double), CAST(NULL AS varchar), CAST(NULL AS varchar)),\" +\n+                                \"(CAST('custkey' AS varchar), 0e1, 0e1, CAST(1 AS double), CAST(NULL AS double), CAST(NULL AS varchar), CAST(NULL AS varchar)),\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0deba09aeed98be6f4bad57015321877d3f6ece", "author": {"user": {"login": "kokosing", "name": "Grzegorz Kokosi\u0144ski"}}, "url": "https://github.com/trinodb/trino/commit/b0deba09aeed98be6f4bad57015321877d3f6ece", "committedDate": "2020-12-14T14:39:08Z", "message": "Use single node Presto in TestShowStats"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c5b5b053affa6cf093e7f4cbca0bb26d9bfb380", "author": {"user": {"login": "kokosing", "name": "Grzegorz Kokosi\u0144ski"}}, "url": "https://github.com/trinodb/trino/commit/3c5b5b053affa6cf093e7f4cbca0bb26d9bfb380", "committedDate": "2020-12-14T14:39:08Z", "message": "Support arbitrary query in SHOW STATS\n\nNow:\n - null fraction is normalized to 1 for tables with row count 0,\n regardless of what the stats returned by the connector.\n - all relation columns are listed in statistics, even if duplicated."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a030b90ee66665e6af518cdb9076db663bd7905a", "author": {"user": {"login": "kokosing", "name": "Grzegorz Kokosi\u0144ski"}}, "url": "https://github.com/trinodb/trino/commit/a030b90ee66665e6af518cdb9076db663bd7905a", "committedDate": "2020-12-14T14:39:08Z", "message": "Test code cleanup\n\n- Use capital letters for SQL keywords\n- Simplify expected queries\n- Put each argument into separate line"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "a030b90ee66665e6af518cdb9076db663bd7905a", "author": {"user": {"login": "kokosing", "name": "Grzegorz Kokosi\u0144ski"}}, "url": "https://github.com/trinodb/trino/commit/a030b90ee66665e6af518cdb9076db663bd7905a", "committedDate": "2020-12-14T14:39:08Z", "message": "Test code cleanup\n\n- Use capital letters for SQL keywords\n- Simplify expected queries\n- Put each argument into separate line"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1566, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}