{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4MTMzNjkw", "number": 4150, "title": "Remove redundant EXISTS during optimization", "bodyText": "This was being done during initial planning, which complicates\nthings unnecessarily.", "createdAt": "2020-06-22T19:26:02Z", "url": "https://github.com/trinodb/trino/pull/4150", "merged": true, "mergeCommit": {"oid": "c8a31a077f825d0b94d10402965e20a25cee2d28"}, "closed": true, "closedAt": "2020-06-23T15:27:07Z", "author": {"login": "martint"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABct5JndABqjM0NzA0NzU3NjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuHKIaABqjM0NzM1MjU2NTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NTA2Nzkw", "url": "https://github.com/trinodb/trino/pull/4150#pullrequestreview-435506790", "createdAt": "2020-06-23T07:21:18Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzoyMToxOFrOGncb6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzoyMjo0MVrOGnceyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAxMzU0NA==", "bodyText": "isAtLeastScalar?", "url": "https://github.com/trinodb/trino/pull/4150#discussion_r444013544", "createdAt": "2020-06-23T07:21:18Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/RemoveRedundantExists.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner.iterative.rule;\n+\n+import io.prestosql.matching.Captures;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.iterative.Rule;\n+import io.prestosql.sql.planner.optimizations.QueryCardinalityUtil;\n+import io.prestosql.sql.planner.plan.ApplyNode;\n+import io.prestosql.sql.planner.plan.Assignments;\n+import io.prestosql.sql.planner.plan.ProjectNode;\n+import io.prestosql.sql.tree.ExistsPredicate;\n+import io.prestosql.sql.tree.Expression;\n+\n+import static io.prestosql.sql.planner.plan.Patterns.applyNode;\n+import static io.prestosql.sql.tree.BooleanLiteral.FALSE_LITERAL;\n+import static io.prestosql.sql.tree.BooleanLiteral.TRUE_LITERAL;\n+\n+/**\n+ * Given:\n+ *\n+ * <pre>\n+ * - Apply [X.*, e = EXISTS (true)]\n+ *   - X\n+ *   - S with cardinality >= 1\n+ * </pre>\n+ *\n+ * Produces:\n+ *\n+ * <pre>\n+ * - Project [X.*, e = true]\n+ *   - X\n+ * </pre>\n+ *\n+ * Given:\n+ *\n+ * <pre>\n+ * - Apply [X.*, e = EXISTS (true)]\n+ *   - X\n+ *   - S with cardinality = 0\n+ * </pre>\n+ *\n+ * Produces:\n+ *\n+ * <pre>\n+ * - Project [X.*, e = false]\n+ *   - X\n+ * </pre>\n+ */\n+public class RemoveRedundantExists\n+        implements Rule<ApplyNode>\n+{\n+    private static final Pattern<ApplyNode> PATTERN = applyNode()\n+            .matching(node -> node.getSubqueryAssignments()\n+                    .getExpressions().stream()\n+                    .allMatch(expression -> expression instanceof ExistsPredicate && ((ExistsPredicate) expression).getSubquery().equals(TRUE_LITERAL)));\n+\n+    @Override\n+    public Pattern<ApplyNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    public Result apply(ApplyNode node, Captures captures, Context context)\n+    {\n+        Assignments.Builder assignments = Assignments.builder();\n+        assignments.putIdentities(node.getInput().getOutputSymbols());\n+\n+        Expression result;\n+        if (QueryCardinalityUtil.isAtMost(node.getSubquery(), context.getLookup(), 0)) {\n+            result = FALSE_LITERAL;\n+        }\n+        else if (QueryCardinalityUtil.isAtLeast(node.getSubquery(), context.getLookup(), 1)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAxMzg0Nw==", "bodyText": "It would be nice to extract QueryCardinalityUtil.itEmpty()", "url": "https://github.com/trinodb/trino/pull/4150#discussion_r444013847", "createdAt": "2020-06-23T07:21:54Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/RemoveRedundantExists.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner.iterative.rule;\n+\n+import io.prestosql.matching.Captures;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.iterative.Rule;\n+import io.prestosql.sql.planner.optimizations.QueryCardinalityUtil;\n+import io.prestosql.sql.planner.plan.ApplyNode;\n+import io.prestosql.sql.planner.plan.Assignments;\n+import io.prestosql.sql.planner.plan.ProjectNode;\n+import io.prestosql.sql.tree.ExistsPredicate;\n+import io.prestosql.sql.tree.Expression;\n+\n+import static io.prestosql.sql.planner.plan.Patterns.applyNode;\n+import static io.prestosql.sql.tree.BooleanLiteral.FALSE_LITERAL;\n+import static io.prestosql.sql.tree.BooleanLiteral.TRUE_LITERAL;\n+\n+/**\n+ * Given:\n+ *\n+ * <pre>\n+ * - Apply [X.*, e = EXISTS (true)]\n+ *   - X\n+ *   - S with cardinality >= 1\n+ * </pre>\n+ *\n+ * Produces:\n+ *\n+ * <pre>\n+ * - Project [X.*, e = true]\n+ *   - X\n+ * </pre>\n+ *\n+ * Given:\n+ *\n+ * <pre>\n+ * - Apply [X.*, e = EXISTS (true)]\n+ *   - X\n+ *   - S with cardinality = 0\n+ * </pre>\n+ *\n+ * Produces:\n+ *\n+ * <pre>\n+ * - Project [X.*, e = false]\n+ *   - X\n+ * </pre>\n+ */\n+public class RemoveRedundantExists\n+        implements Rule<ApplyNode>\n+{\n+    private static final Pattern<ApplyNode> PATTERN = applyNode()\n+            .matching(node -> node.getSubqueryAssignments()\n+                    .getExpressions().stream()\n+                    .allMatch(expression -> expression instanceof ExistsPredicate && ((ExistsPredicate) expression).getSubquery().equals(TRUE_LITERAL)));\n+\n+    @Override\n+    public Pattern<ApplyNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    public Result apply(ApplyNode node, Captures captures, Context context)\n+    {\n+        Assignments.Builder assignments = Assignments.builder();\n+        assignments.putIdentities(node.getInput().getOutputSymbols());\n+\n+        Expression result;\n+        if (QueryCardinalityUtil.isAtMost(node.getSubquery(), context.getLookup(), 0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAxNDE1OA==", "bodyText": "S is not referenced above", "url": "https://github.com/trinodb/trino/pull/4150#discussion_r444014158", "createdAt": "2020-06-23T07:22:27Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/RemoveRedundantExists.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner.iterative.rule;\n+\n+import io.prestosql.matching.Captures;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.iterative.Rule;\n+import io.prestosql.sql.planner.optimizations.QueryCardinalityUtil;\n+import io.prestosql.sql.planner.plan.ApplyNode;\n+import io.prestosql.sql.planner.plan.Assignments;\n+import io.prestosql.sql.planner.plan.ProjectNode;\n+import io.prestosql.sql.tree.ExistsPredicate;\n+import io.prestosql.sql.tree.Expression;\n+\n+import static io.prestosql.sql.planner.plan.Patterns.applyNode;\n+import static io.prestosql.sql.tree.BooleanLiteral.FALSE_LITERAL;\n+import static io.prestosql.sql.tree.BooleanLiteral.TRUE_LITERAL;\n+\n+/**\n+ * Given:\n+ *\n+ * <pre>\n+ * - Apply [X.*, e = EXISTS (true)]\n+ *   - X\n+ *   - S with cardinality >= 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAxNDI4Mg==", "bodyText": "S is not referenced above", "url": "https://github.com/trinodb/trino/pull/4150#discussion_r444014282", "createdAt": "2020-06-23T07:22:41Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/RemoveRedundantExists.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner.iterative.rule;\n+\n+import io.prestosql.matching.Captures;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.iterative.Rule;\n+import io.prestosql.sql.planner.optimizations.QueryCardinalityUtil;\n+import io.prestosql.sql.planner.plan.ApplyNode;\n+import io.prestosql.sql.planner.plan.Assignments;\n+import io.prestosql.sql.planner.plan.ProjectNode;\n+import io.prestosql.sql.tree.ExistsPredicate;\n+import io.prestosql.sql.tree.Expression;\n+\n+import static io.prestosql.sql.planner.plan.Patterns.applyNode;\n+import static io.prestosql.sql.tree.BooleanLiteral.FALSE_LITERAL;\n+import static io.prestosql.sql.tree.BooleanLiteral.TRUE_LITERAL;\n+\n+/**\n+ * Given:\n+ *\n+ * <pre>\n+ * - Apply [X.*, e = EXISTS (true)]\n+ *   - X\n+ *   - S with cardinality >= 1\n+ * </pre>\n+ *\n+ * Produces:\n+ *\n+ * <pre>\n+ * - Project [X.*, e = true]\n+ *   - X\n+ * </pre>\n+ *\n+ * Given:\n+ *\n+ * <pre>\n+ * - Apply [X.*, e = EXISTS (true)]\n+ *   - X\n+ *   - S with cardinality = 0", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NjE0NTY0", "url": "https://github.com/trinodb/trino/pull/4150#pullrequestreview-435614564", "createdAt": "2020-06-23T09:40:00Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTo0MDowMFrOGnheUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTo0MToyM1rOGnhhZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5NjA4Mg==", "bodyText": "static import expression", "url": "https://github.com/trinodb/trino/pull/4150#discussion_r444096082", "createdAt": "2020-06-23T09:40:00Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/iterative/rule/TestRemoveRedundantExists.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner.iterative.rule;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.sql.planner.assertions.PlanMatchPattern;\n+import io.prestosql.sql.planner.iterative.rule.test.BaseRuleTest;\n+import io.prestosql.sql.planner.plan.Assignments;\n+import io.prestosql.sql.tree.ExistsPredicate;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.sql.planner.assertions.PlanMatchPattern.project;\n+import static io.prestosql.sql.planner.assertions.PlanMatchPattern.values;\n+import static io.prestosql.sql.tree.BooleanLiteral.TRUE_LITERAL;\n+\n+public class TestRemoveRedundantExists\n+        extends BaseRuleTest\n+{\n+    @Test\n+    public void testExistsFalse()\n+    {\n+        tester().assertThat(new RemoveRedundantExists())\n+                .on(p -> p.apply(Assignments.of(p.symbol(\"exists\"), new ExistsPredicate(TRUE_LITERAL)),\n+                        ImmutableList.of(),\n+                        p.values(1),\n+                        p.values(0)))\n+                .matches(\n+                        project(\n+                                ImmutableMap.of(\"exists\", PlanMatchPattern.expression(\"false\")),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5Njg3MA==", "bodyText": "Add another test case where there is more than just exists assignment (rule should not fire)", "url": "https://github.com/trinodb/trino/pull/4150#discussion_r444096870", "createdAt": "2020-06-23T09:41:23Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/iterative/rule/TestRemoveRedundantExists.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner.iterative.rule;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.sql.planner.assertions.PlanMatchPattern;\n+import io.prestosql.sql.planner.iterative.rule.test.BaseRuleTest;\n+import io.prestosql.sql.planner.plan.Assignments;\n+import io.prestosql.sql.tree.ExistsPredicate;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.sql.planner.assertions.PlanMatchPattern.project;\n+import static io.prestosql.sql.planner.assertions.PlanMatchPattern.values;\n+import static io.prestosql.sql.tree.BooleanLiteral.TRUE_LITERAL;\n+\n+public class TestRemoveRedundantExists\n+        extends BaseRuleTest\n+{\n+    @Test\n+    public void testExistsFalse()\n+    {\n+        tester().assertThat(new RemoveRedundantExists())\n+                .on(p -> p.apply(Assignments.of(p.symbol(\"exists\"), new ExistsPredicate(TRUE_LITERAL)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8a31a077f825d0b94d10402965e20a25cee2d28", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/c8a31a077f825d0b94d10402965e20a25cee2d28", "committedDate": "2020-06-23T15:26:55Z", "message": "Remove redundant EXISTS during optimization\n\nThis was being done during initial planning, which complicates\nthings unnecessarily."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "c8a31a077f825d0b94d10402965e20a25cee2d28", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/c8a31a077f825d0b94d10402965e20a25cee2d28", "committedDate": "2020-06-23T15:26:55Z", "message": "Remove redundant EXISTS during optimization\n\nThis was being done during initial planning, which complicates\nthings unnecessarily."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 494, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}