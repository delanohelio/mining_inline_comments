{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMTEzMjg3", "number": 3786, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDoyOTowM1rOD90yEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzoxNDoxMlrOD-NdNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTU0NTEyOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/Multinode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDoyOTowM1rOGXjNOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDoyOTowM1rOGXjNOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM0NzI1Ng==", "bodyText": "Please create a new environment, MultinodeHiveCaching\n\nmultinode is not supposed to be \"include everything\" environment (Iceberg shouldn't be here too)\nin this new environment you can register the catalog as hive and run all storage_formats, which greatly improves fs coverage", "url": "https://github.com/trinodb/trino/pull/3786#discussion_r427347256", "createdAt": "2020-05-19T14:29:03Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/Multinode.java", "diffHunk": "@@ -70,7 +74,9 @@ protected void extendEnvironment(Environment.Builder builder)\n         builder.configureContainer(\"presto-master\", container -> {\n             container\n                     .withFileSystemBind(dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode/multinode-master-jvm.config\"), CONTAINER_PRESTO_JVM_CONFIG, READ_ONLY)\n-                    .withFileSystemBind(dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode/multinode-master-config.properties\"), CONTAINER_PRESTO_CONFIG_PROPERTIES, READ_ONLY);\n+                    .withFileSystemBind(dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode/multinode-master-config.properties\"), CONTAINER_PRESTO_CONFIG_PROPERTIES, READ_ONLY)\n+                    .withFileSystemBind(dockerFiles.getDockerFilesHostPath(\"common/hadoop/hivecached.properties\"), CONTAINER_PRESTO_HIVE_CACHED_PROPERTIES, READ_ONLY)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTU1NzE1OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/resources/docker/presto-product-tests/common/hadoop/hivecached.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDozMToyNVrOGXjVCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDozMToyNVrOGXjVCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM0OTI1Ng==", "bodyText": "I guess most of the are not needed?\nPlease leave only those that are important", "url": "https://github.com/trinodb/trino/pull/3786#discussion_r427349256", "createdAt": "2020-05-19T14:31:25Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/resources/docker/presto-product-tests/common/hadoop/hivecached.properties", "diffHunk": "@@ -0,0 +1,17 @@\n+connector.name=hive-hadoop2\n+hive.metastore.uri=thrift://hadoop-master:9083\n+hive.config.resources=/docker/presto-product-tests/conf/presto/etc/hive-default-fs-site.xml\n+hive.allow-add-column=true\n+hive.allow-drop-column=true\n+hive.allow-rename-column=true\n+hive.allow-comment-table=true\n+hive.allow-drop-table=true\n+hive.allow-rename-table=true\n+hive.allow-register-partition-procedure=true\n+hive.metastore-cache-ttl=0s\n+hive.fs.cache.max-size=10\n+hive.max-partitions-per-scan=100\n+hive.translate-hive-views=true", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTU3MDIwOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDozNDowNlrOGXjdWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDozNDowNlrOGXjdWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM1MTM4NA==", "bodyText": "getCachedReads method doesn't really know what it is doing, it could be called getFirstColumn\nSimilarly getRemoteReads could be called getSecondColumn.\nUse tryFindColumnIndex to map columns by name.", "url": "https://github.com/trinodb/trino/pull/3786#discussion_r427351384", "createdAt": "2020-05-19T14:34:06Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestCache.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.query.QueryResult;\n+import org.testng.annotations.Test;\n+\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static io.airlift.testing.Assertions.assertGreaterThan;\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.tests.TestGroups.HIVE_CACHE;\n+import static java.lang.Thread.sleep;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestCache\n+        extends ProductTest\n+{\n+    @Test(groups = HIVE_CACHE)\n+    public void testReadFromCache()\n+            throws InterruptedException\n+    {\n+        String nonCachedTableName = \"hive.default.test_cache_read\";\n+        String cachedTableName = \"hivecached.default.test_cache_read\";\n+\n+        query(\"DROP TABLE IF EXISTS \" + nonCachedTableName);\n+        query(\"CREATE TABLE \" + nonCachedTableName + \" WITH (format='ORC') AS SELECT 'Hello world' as col\");\n+\n+        QueryResult beforeCacheStats = getCacheStats();\n+        long beforeCachedReads = getCachedReads(beforeCacheStats);\n+        long beforeRemoteReads = getRemoteReads(beforeCacheStats);\n+\n+        assertThat(query(\"SELECT * FROM \" + cachedTableName))\n+                .containsExactly(row(\"Hello world\"));\n+\n+        // stats are propagated asynchronously, wait for them\n+        sleep(1000);\n+        QueryResult firstCacheStats = getCacheStats();\n+        long firstCachedReads = getCachedReads(firstCacheStats);\n+        long firstRemoteReads = getRemoteReads(firstCacheStats);\n+\n+        // first query via caching catalog should fetch remote data\n+        assertGreaterThan(firstRemoteReads, beforeRemoteReads);\n+        assertEquals(firstCachedReads, beforeCachedReads);\n+\n+        assertThat(query(\"SELECT * FROM \" + cachedTableName))\n+                .containsExactly(row(\"Hello world\"));\n+\n+        // stats are propagated asynchronously, wait for them\n+        sleep(1000);\n+        QueryResult secondCacheStats = getCacheStats();\n+        long secondCachedReads = getCachedReads(secondCacheStats);\n+        long secondRemoteReads = getRemoteReads(secondCacheStats);\n+\n+        // second query via caching catalog should read exclusively from cache\n+        assertEquals(secondRemoteReads, firstRemoteReads);\n+        assertGreaterThan(secondCachedReads, firstCachedReads);\n+\n+        query(\"DROP TABLE \" + nonCachedTableName);\n+    }\n+\n+    private QueryResult getCacheStats()\n+    {\n+        return query(\"SELECT cachedreads, remotereads FROM \" +\n+                \"jmx.current.\\\"rubix:catalog=hivecached,name=stats\\\" WHERE node = 'presto-worker'\");\n+    }\n+\n+    private long getCachedReads(QueryResult queryResult)\n+    {\n+        return (Long) getOnlyElement(queryResult.rows()).get(0);\n+    }\n+\n+    private long getRemoteReads(QueryResult queryResult)\n+    {\n+        return (Long) getOnlyElement(queryResult.rows()).get(1);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTU3MDk3OnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDozNDoxNlrOGXjd1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDozNDoxNlrOGXjd1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM1MTUxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throws InterruptedException\n          \n          \n            \n                        throws Exception", "url": "https://github.com/trinodb/trino/pull/3786#discussion_r427351510", "createdAt": "2020-05-19T14:34:16Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestCache.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.query.QueryResult;\n+import org.testng.annotations.Test;\n+\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static io.airlift.testing.Assertions.assertGreaterThan;\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.tests.TestGroups.HIVE_CACHE;\n+import static java.lang.Thread.sleep;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestCache\n+        extends ProductTest\n+{\n+    @Test(groups = HIVE_CACHE)\n+    public void testReadFromCache()\n+            throws InterruptedException", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTU4MTA2OnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDozNjoxNlrOGXjkHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDozNjoxNlrOGXjkHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM1MzExOA==", "bodyText": "use form of assert eventually, otherwise this will likely be flaky", "url": "https://github.com/trinodb/trino/pull/3786#discussion_r427353118", "createdAt": "2020-05-19T14:36:16Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestCache.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.query.QueryResult;\n+import org.testng.annotations.Test;\n+\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static io.airlift.testing.Assertions.assertGreaterThan;\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.tests.TestGroups.HIVE_CACHE;\n+import static java.lang.Thread.sleep;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestCache\n+        extends ProductTest\n+{\n+    @Test(groups = HIVE_CACHE)\n+    public void testReadFromCache()\n+            throws InterruptedException\n+    {\n+        String nonCachedTableName = \"hive.default.test_cache_read\";\n+        String cachedTableName = \"hivecached.default.test_cache_read\";\n+\n+        query(\"DROP TABLE IF EXISTS \" + nonCachedTableName);\n+        query(\"CREATE TABLE \" + nonCachedTableName + \" WITH (format='ORC') AS SELECT 'Hello world' as col\");\n+\n+        QueryResult beforeCacheStats = getCacheStats();\n+        long beforeCachedReads = getCachedReads(beforeCacheStats);\n+        long beforeRemoteReads = getRemoteReads(beforeCacheStats);\n+\n+        assertThat(query(\"SELECT * FROM \" + cachedTableName))\n+                .containsExactly(row(\"Hello world\"));\n+\n+        // stats are propagated asynchronously, wait for them\n+        sleep(1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDk2NzA2OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/resources/docker/presto-product-tests/conf/environment/multinode-cached/hive_cached.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMDoxNzo1N1rOGYE5cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMDoxNzo1N1rOGYE5cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg5OTI0OQ==", "bodyText": "call this file  hive.properties (corresponding to the file name it ends up being mounted at)", "url": "https://github.com/trinodb/trino/pull/3786#discussion_r427899249", "createdAt": "2020-05-20T10:17:57Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/resources/docker/presto-product-tests/conf/environment/multinode-cached/hive_cached.properties", "diffHunk": "@@ -0,0 +1,5 @@\n+connector.name=hive-hadoop2", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDk2OTk3OnYy", "diffSide": "RIGHT", "path": "presto-product-tests/bin/product-tests-suite-1.sh", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMDoxODo1NlrOGYE7Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMDoxODo1NlrOGYE7Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg5OTc0Ng==", "bodyText": "missing comma after hive_cache\ninstead of changing here, tag the caching tests with profile_specific_tests", "url": "https://github.com/trinodb/trino/pull/3786#discussion_r427899746", "createdAt": "2020-05-20T10:18:56Z", "author": {"login": "findepi"}, "path": "presto-product-tests/bin/product-tests-suite-1.sh", "diffHunk": "@@ -6,7 +6,12 @@ suite_exit_code=0\n \n presto-product-tests-launcher/bin/run-launcher test run \\\n     --environment multinode \\\n-    -- -x quarantine,big_query,storage_formats,profile_specific_tests,tpcds,cassandra,mysql,postgresql,kafka,hive_compression,\"${DISTRO_SKIP_GROUP}\" \\\n+    -- -x quarantine,big_query,storage_formats,profile_specific_tests,tpcds,cassandra,mysql,postgresql,kafka,hive_compression,hive_cache\"${DISTRO_SKIP_GROUP}\" \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDk3MjQ2OnYy", "diffSide": "RIGHT", "path": "presto-product-tests/bin/product-tests-suite-1.sh", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMDoxOTo0MVrOGYE89g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMDo0NjozOVrOGYF07w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkwMDE1MA==", "bodyText": "I think suite-1 is the longest. Can you confirm and pick a different suite?", "url": "https://github.com/trinodb/trino/pull/3786#discussion_r427900150", "createdAt": "2020-05-20T10:19:41Z", "author": {"login": "findepi"}, "path": "presto-product-tests/bin/product-tests-suite-1.sh", "diffHunk": "@@ -6,7 +6,12 @@ suite_exit_code=0\n \n presto-product-tests-launcher/bin/run-launcher test run \\\n     --environment multinode \\\n-    -- -x quarantine,big_query,storage_formats,profile_specific_tests,tpcds,cassandra,mysql,postgresql,kafka,hive_compression,\"${DISTRO_SKIP_GROUP}\" \\\n+    -- -x quarantine,big_query,storage_formats,profile_specific_tests,tpcds,cassandra,mysql,postgresql,kafka,hive_compression,hive_cache\"${DISTRO_SKIP_GROUP}\" \\\n+    || suite_exit_code=1\n+\n+presto-product-tests-launcher/bin/run-launcher test run \\\n+    --environment multinode-hive-caching \\\n+    -- -g hive_cache,storage_formats \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkxNDQ3OQ==", "bodyText": "moved to suite 5", "url": "https://github.com/trinodb/trino/pull/3786#discussion_r427914479", "createdAt": "2020-05-20T10:46:39Z", "author": {"login": "sopel39"}, "path": "presto-product-tests/bin/product-tests-suite-1.sh", "diffHunk": "@@ -6,7 +6,12 @@ suite_exit_code=0\n \n presto-product-tests-launcher/bin/run-launcher test run \\\n     --environment multinode \\\n-    -- -x quarantine,big_query,storage_formats,profile_specific_tests,tpcds,cassandra,mysql,postgresql,kafka,hive_compression,\"${DISTRO_SKIP_GROUP}\" \\\n+    -- -x quarantine,big_query,storage_formats,profile_specific_tests,tpcds,cassandra,mysql,postgresql,kafka,hive_compression,hive_cache\"${DISTRO_SKIP_GROUP}\" \\\n+    || suite_exit_code=1\n+\n+presto-product-tests-launcher/bin/run-launcher test run \\\n+    --environment multinode-hive-caching \\\n+    -- -g hive_cache,storage_formats \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkwMDE1MA=="}, "originalCommit": null, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDk3NDE3OnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMDoyMDowNFrOGYE-CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMDoyMDowNFrOGYE-CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkwMDQyNQ==", "bodyText": "nit: TestHiveCaching? (same for test group)", "url": "https://github.com/trinodb/trino/pull/3786#discussion_r427900425", "createdAt": "2020-05-20T10:20:04Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveCache.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import io.airlift.units.Duration;\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.query.QueryResult;\n+import org.testng.annotations.Test;\n+\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static io.airlift.testing.Assertions.assertGreaterThan;\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.testing.assertions.Assert.assertEventually;\n+import static io.prestosql.tests.TestGroups.HIVE_CACHE;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestHiveCache", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTU4NzczOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/TestGroups.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzoxNDoxMlrOGYK_Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNToyNDowOVrOGYRPeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk5ODk3OA==", "bodyText": "i think this should be part of storage_formats group (no need for new group), especially if it exploits new way of interacting between presto, file format, and file system.", "url": "https://github.com/trinodb/trino/pull/3786#discussion_r427998978", "createdAt": "2020-05-20T13:14:12Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/TestGroups.java", "diffHunk": "@@ -67,6 +67,7 @@\n     public static final String KAFKA = \"kafka\";\n     public static final String TWO_HIVES = \"two_hives\";\n     public static final String ICEBERG = \"iceberg\";\n+    public static final String AVRO = \"avro\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5fc209545ac0a5ccf0101e030430f6b1e213c3d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAwODMwOQ==", "bodyText": "i think this should be part of storage_formats group (no need for new group),\n\nAvro tests are still part of storage_formats. This group allows to exclude avro tests until #3794 is fixed (there is also TODO in bin/product-tests-suite-5.sh)", "url": "https://github.com/trinodb/trino/pull/3786#discussion_r428008309", "createdAt": "2020-05-20T13:26:24Z", "author": {"login": "sopel39"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/TestGroups.java", "diffHunk": "@@ -67,6 +67,7 @@\n     public static final String KAFKA = \"kafka\";\n     public static final String TWO_HIVES = \"two_hives\";\n     public static final String ICEBERG = \"iceberg\";\n+    public static final String AVRO = \"avro\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk5ODk3OA=="}, "originalCommit": {"oid": "d5fc209545ac0a5ccf0101e030430f6b1e213c3d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEwMTM1MQ==", "bodyText": "Some are. But some are not (presto-product-tests/src/main/java/io/prestosql/tests/hive/TestAvroSchemaUrl.java, presto-product-tests/src/main/java/io/prestosql/tests/hive/TestAvroSchemaEvolution.java)\nmaybe those two shouldnt' be storage_formats though", "url": "https://github.com/trinodb/trino/pull/3786#discussion_r428101351", "createdAt": "2020-05-20T15:23:57Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/TestGroups.java", "diffHunk": "@@ -67,6 +67,7 @@\n     public static final String KAFKA = \"kafka\";\n     public static final String TWO_HIVES = \"two_hives\";\n     public static final String ICEBERG = \"iceberg\";\n+    public static final String AVRO = \"avro\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk5ODk3OA=="}, "originalCommit": {"oid": "d5fc209545ac0a5ccf0101e030430f6b1e213c3d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEwMTQ5Ng==", "bodyText": "oh, the TestAvroSchemaUrl should be. Please add", "url": "https://github.com/trinodb/trino/pull/3786#discussion_r428101496", "createdAt": "2020-05-20T15:24:09Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/TestGroups.java", "diffHunk": "@@ -67,6 +67,7 @@\n     public static final String KAFKA = \"kafka\";\n     public static final String TWO_HIVES = \"two_hives\";\n     public static final String ICEBERG = \"iceberg\";\n+    public static final String AVRO = \"avro\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk5ODk3OA=="}, "originalCommit": {"oid": "d5fc209545ac0a5ccf0101e030430f6b1e213c3d"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4883, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}