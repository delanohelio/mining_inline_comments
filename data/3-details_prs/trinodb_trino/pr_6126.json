{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4Njk3NzU5", "number": 6126, "title": "Improve serde performance for Int96 blocks", "bodyText": "", "createdAt": "2020-11-27T16:23:35Z", "url": "https://github.com/trinodb/trino/pull/6126", "merged": true, "mergeCommit": {"oid": "d0858b51627b899465c80f9124ebd1619f4b282c"}, "closed": true, "closedAt": "2020-12-02T09:43:24Z", "author": {"login": "skrzypo987"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdhii80gFqTU0MDc2MzE2Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdh1SjPABqjQwNTU2OTA1MjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNzYzMTY3", "url": "https://github.com/trinodb/trino/pull/6126#pullrequestreview-540763167", "createdAt": "2020-11-30T10:11:41Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwODk3NDU5", "url": "https://github.com/trinodb/trino/pull/6126#pullrequestreview-540897459", "createdAt": "2020-11-30T13:17:00Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzoxNzowMFrOH76oug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzoxNzowMFrOH76oug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4ODczMA==", "bodyText": "Do I remember correctly that this check before previous two lines performs worse?", "url": "https://github.com/trinodb/trino/pull/6126#discussion_r532588730", "createdAt": "2020-11-30T13:17:00Z", "author": {"login": "ssheikin"}, "path": "presto-spi/src/main/java/io/prestosql/spi/block/Int96ArrayBlockEncoding.java", "diffHunk": "@@ -38,11 +40,25 @@ public void writeBlock(BlockEncodingSerde blockEncodingSerde, SliceOutput sliceO\n \n         encodeNullsAsBits(sliceOutput, block);\n \n-        for (int position = 0; position < positionCount; position++) {\n-            if (!block.isNull(position)) {\n-                sliceOutput.writeLong(block.getLong(position, 0));\n-                sliceOutput.writeInt(block.getInt(position, 8));\n+        if (!block.mayHaveNull()) {\n+            sliceOutput.writeBytes(getHighSlice(block));\n+            sliceOutput.writeBytes(getLowSlice(block));\n+        }\n+        else {\n+            long[] high = new long[positionCount];\n+            int[] low = new int[positionCount];\n+            int nonNullPositionCount = 0;\n+            for (int i = 0; i < positionCount; i++) {\n+                high[nonNullPositionCount] = block.getLong(i, 0);\n+                low[nonNullPositionCount] = block.getInt(i, 8);\n+                if (!block.isNull(i)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb7a5c6f9d0e6edbdbf37fc93addf326af65168c", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/bb7a5c6f9d0e6edbdbf37fc93addf326af65168c", "committedDate": "2020-12-01T08:01:50Z", "message": "Improve serde performance for Int96 blocks\n\nbefore:\nBenchmark                             (nullChance)  Mode  Cnt   Score   Error  Units\nBenchmarkBlockSerde.deserializeInt96             0  avgt   20  10,972 \u00b1 0,174  ns/op\nBenchmarkBlockSerde.deserializeInt96           .01  avgt   20   5,766 \u00b1 0,116  ns/op\nBenchmarkBlockSerde.deserializeInt96           .10  avgt   20   6,164 \u00b1 0,096  ns/op\nBenchmarkBlockSerde.deserializeInt96           .50  avgt   20   7,333 \u00b1 0,085  ns/op\nBenchmarkBlockSerde.deserializeInt96           .90  avgt   20   2,903 \u00b1 0,012  ns/op\nBenchmarkBlockSerde.deserializeInt96           .99  avgt   20   1,874 \u00b1 0,040  ns/op\nBenchmarkBlockSerde.serializeInt96               0  avgt   20   8,752 \u00b1 0,111  ns/op\nBenchmarkBlockSerde.serializeInt96             .01  avgt   20  10,196 \u00b1 0,196  ns/op\nBenchmarkBlockSerde.serializeInt96             .10  avgt   20  11,083 \u00b1 0,106  ns/op\nBenchmarkBlockSerde.serializeInt96             .50  avgt   20  10,778 \u00b1 0,059  ns/op\nBenchmarkBlockSerde.serializeInt96             .90  avgt   20   4,937 \u00b1 0,011  ns/op\nBenchmarkBlockSerde.serializeInt96             .99  avgt   20   3,114 \u00b1 0,026  ns/op\n\nafter:\nBenchmark                             (nullChance)  Mode  Cnt  Score   Error  Units\nBenchmarkBlockSerde.deserializeInt96             0  avgt   20  1,783 \u00b1 0,032  ns/op\nBenchmarkBlockSerde.deserializeInt96           .01  avgt   20  3,223 \u00b1 0,027  ns/op\nBenchmarkBlockSerde.deserializeInt96           .10  avgt   20  4,512 \u00b1 0,067  ns/op\nBenchmarkBlockSerde.deserializeInt96           .50  avgt   20  3,360 \u00b1 0,043  ns/op\nBenchmarkBlockSerde.deserializeInt96           .90  avgt   20  3,454 \u00b1 0,018  ns/op\nBenchmarkBlockSerde.deserializeInt96           .99  avgt   20  2,217 \u00b1 0,023  ns/op\nBenchmarkBlockSerde.serializeInt96               0  avgt   20  2,481 \u00b1 0,035  ns/op\nBenchmarkBlockSerde.serializeInt96             .01  avgt   20  4,431 \u00b1 0,042  ns/op\nBenchmarkBlockSerde.serializeInt96             .10  avgt   20  5,691 \u00b1 0,106  ns/op\nBenchmarkBlockSerde.serializeInt96             .50  avgt   20  3,874 \u00b1 0,047  ns/op\nBenchmarkBlockSerde.serializeInt96             .90  avgt   20  4,318 \u00b1 0,025  ns/op\nBenchmarkBlockSerde.serializeInt96             .99  avgt   20  2,956 \u00b1 0,006  ns/op"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "bb7a5c6f9d0e6edbdbf37fc93addf326af65168c", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/bb7a5c6f9d0e6edbdbf37fc93addf326af65168c", "committedDate": "2020-12-01T08:01:50Z", "message": "Improve serde performance for Int96 blocks\n\nbefore:\nBenchmark                             (nullChance)  Mode  Cnt   Score   Error  Units\nBenchmarkBlockSerde.deserializeInt96             0  avgt   20  10,972 \u00b1 0,174  ns/op\nBenchmarkBlockSerde.deserializeInt96           .01  avgt   20   5,766 \u00b1 0,116  ns/op\nBenchmarkBlockSerde.deserializeInt96           .10  avgt   20   6,164 \u00b1 0,096  ns/op\nBenchmarkBlockSerde.deserializeInt96           .50  avgt   20   7,333 \u00b1 0,085  ns/op\nBenchmarkBlockSerde.deserializeInt96           .90  avgt   20   2,903 \u00b1 0,012  ns/op\nBenchmarkBlockSerde.deserializeInt96           .99  avgt   20   1,874 \u00b1 0,040  ns/op\nBenchmarkBlockSerde.serializeInt96               0  avgt   20   8,752 \u00b1 0,111  ns/op\nBenchmarkBlockSerde.serializeInt96             .01  avgt   20  10,196 \u00b1 0,196  ns/op\nBenchmarkBlockSerde.serializeInt96             .10  avgt   20  11,083 \u00b1 0,106  ns/op\nBenchmarkBlockSerde.serializeInt96             .50  avgt   20  10,778 \u00b1 0,059  ns/op\nBenchmarkBlockSerde.serializeInt96             .90  avgt   20   4,937 \u00b1 0,011  ns/op\nBenchmarkBlockSerde.serializeInt96             .99  avgt   20   3,114 \u00b1 0,026  ns/op\n\nafter:\nBenchmark                             (nullChance)  Mode  Cnt  Score   Error  Units\nBenchmarkBlockSerde.deserializeInt96             0  avgt   20  1,783 \u00b1 0,032  ns/op\nBenchmarkBlockSerde.deserializeInt96           .01  avgt   20  3,223 \u00b1 0,027  ns/op\nBenchmarkBlockSerde.deserializeInt96           .10  avgt   20  4,512 \u00b1 0,067  ns/op\nBenchmarkBlockSerde.deserializeInt96           .50  avgt   20  3,360 \u00b1 0,043  ns/op\nBenchmarkBlockSerde.deserializeInt96           .90  avgt   20  3,454 \u00b1 0,018  ns/op\nBenchmarkBlockSerde.deserializeInt96           .99  avgt   20  2,217 \u00b1 0,023  ns/op\nBenchmarkBlockSerde.serializeInt96               0  avgt   20  2,481 \u00b1 0,035  ns/op\nBenchmarkBlockSerde.serializeInt96             .01  avgt   20  4,431 \u00b1 0,042  ns/op\nBenchmarkBlockSerde.serializeInt96             .10  avgt   20  5,691 \u00b1 0,106  ns/op\nBenchmarkBlockSerde.serializeInt96             .50  avgt   20  3,874 \u00b1 0,047  ns/op\nBenchmarkBlockSerde.serializeInt96             .90  avgt   20  4,318 \u00b1 0,025  ns/op\nBenchmarkBlockSerde.serializeInt96             .99  avgt   20  2,956 \u00b1 0,006  ns/op"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2400, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}