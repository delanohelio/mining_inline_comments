{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MTEwNjc4", "number": 3030, "title": "Add execute function access control", "bodyText": "Add execute function access control", "createdAt": "2020-03-07T06:21:19Z", "url": "https://github.com/trinodb/trino/pull/3030", "merged": true, "mergeCommit": {"oid": "0039dd8b2922df2c2ce57ccd337c357e5136bc3f"}, "closed": true, "closedAt": "2020-03-17T08:42:45Z", "author": {"login": "kokosing"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcLuelGgBqjMxMDg2NDQ0ODA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOKfgQgBqjMxMzIyNDIxOTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwOTcxMzMx", "url": "https://github.com/trinodb/trino/pull/3030#pullrequestreview-370971331", "createdAt": "2020-03-09T08:06:34Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwODoxMjoyN1rOFzd1XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwODoxNjozMFrOFzd6rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUxMDQ5Mw==", "bodyText": "Instead of comments you can extract those to different methods", "url": "https://github.com/trinodb/trino/pull/3030#discussion_r389510493", "createdAt": "2020-03-09T08:12:27Z", "author": {"login": "skrzypo987"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -1109,6 +1111,52 @@ public void testViewColumnAccessControl()\n         assertAccessAllowed(viewOwnerSession, \"DROP VIEW test_invoker_view_column_access\");\n     }\n \n+    @Test\n+    public void testViewFunctionAccessControl()\n+    {\n+        skipTestUnless(supportsViews());\n+\n+        Session viewOwnerSession = TestingSession.testSessionBuilder()\n+                .setIdentity(Identity.ofUser(\"test_view_access_owner\"))\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(getSession().getSchema().get())\n+                .build();\n+\n+        // TEST FUNCTION PRIVILEGES", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUxMTg1Mg==", "bodyText": "static import would be nice here", "url": "https://github.com/trinodb/trino/pull/3030#discussion_r389511852", "createdAt": "2020-03-09T08:16:30Z", "author": {"login": "skrzypo987"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/FunctionAssertions.java", "diffHunk": "@@ -349,7 +347,7 @@ public void assertCachedInstanceHasBoundedRetainedSize(String projection)\n     {\n         requireNonNull(projection, \"projection is null\");\n \n-        Expression projectionExpression = createExpression(session, projection, metadata, TypeProvider.copyOf(INPUT_TYPES));\n+        Expression projectionExpression = ExpressionTestUtils.createExpression(session, projection, metadata, TypeProvider.copyOf(INPUT_TYPES));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxODE2ODgw", "url": "https://github.com/trinodb/trino/pull/3030#pullrequestreview-371816880", "createdAt": "2020-03-10T10:04:33Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMDowNDozM1rOF0IVdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMDowNDozM1rOF0IVdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwNjgzOA==", "bodyText": "That's too many test scenarios in single method. It's hard to follow what is actually happening.", "url": "https://github.com/trinodb/trino/pull/3030#discussion_r390206838", "createdAt": "2020-03-10T10:04:33Z", "author": {"login": "lukasz-walkiewicz"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -1070,43 +1072,89 @@ public void testViewAccessControl()\n         // view creation permissions are only checked at query time, not at creation\n         assertAccessAllowed(\n                 nestedViewOwnerSession,\n-                \"CREATE VIEW test_nested_view_access AS SELECT * FROM test_view_access\",\n-                privilege(\"test_view_access\", CREATE_VIEW_WITH_SELECT_COLUMNS));\n+                \"CREATE VIEW test_nested_view_column_access AS SELECT * FROM test_view_column_access\",\n+                privilege(\"test_view_column_access\", CREATE_VIEW_WITH_SELECT_COLUMNS));\n \n         // verify selecting from a view over a view requires the view owner of the outer view to have special view creation privileges for the inner view\n         assertAccessDenied(\n-                \"SELECT * FROM test_nested_view_access\",\n-                \"View owner 'test_nested_view_access_owner' cannot create view that selects from .*.test_view_access.*\",\n-                privilege(nestedViewOwnerSession.getUser(), \"test_view_access\", CREATE_VIEW_WITH_SELECT_COLUMNS));\n+                \"SELECT * FROM test_nested_view_column_access\",\n+                \"View owner 'test_nested_view_access_owner' cannot create view that selects from .*.test_view_column_access.*\",\n+                privilege(nestedViewOwnerSession.getUser(), \"test_view_column_access\", CREATE_VIEW_WITH_SELECT_COLUMNS));\n \n         // verify selecting from a view over a view does not require the session user to have SELECT privileges for the inner view\n         assertAccessAllowed(\n-                \"SELECT * FROM test_nested_view_access\",\n-                privilege(getSession().getUser(), \"test_view_access\", CREATE_VIEW_WITH_SELECT_COLUMNS));\n+                \"SELECT * FROM test_nested_view_column_access\",\n+                privilege(getSession().getUser(), \"test_view_column_access\", CREATE_VIEW_WITH_SELECT_COLUMNS));\n         assertAccessAllowed(\n-                \"SELECT * FROM test_nested_view_access\",\n-                privilege(getSession().getUser(), \"test_view_access\", SELECT_COLUMN));\n+                \"SELECT * FROM test_nested_view_column_access\",\n+                privilege(getSession().getUser(), \"test_view_column_access\", SELECT_COLUMN));\n \n         // verify that INVOKER security runs as session user\n         assertAccessAllowed(\n                 viewOwnerSession,\n-                \"CREATE VIEW test_invoker_view_access SECURITY INVOKER AS SELECT * FROM orders\",\n+                \"CREATE VIEW test_invoker_view_column_access SECURITY INVOKER AS SELECT * FROM orders\",\n                 privilege(\"orders\", CREATE_VIEW_WITH_SELECT_COLUMNS));\n         assertAccessAllowed(\n-                \"SELECT * FROM test_invoker_view_access\",\n+                \"SELECT * FROM test_invoker_view_column_access\",\n                 privilege(viewOwnerSession.getUser(), \"orders\", SELECT_COLUMN));\n         assertAccessDenied(\n-                \"SELECT * FROM test_invoker_view_access\",\n+                \"SELECT * FROM test_invoker_view_column_access\",\n                 \"Cannot select from columns \\\\[.*\\\\] in table .*.orders.*\",\n                 privilege(getSession().getUser(), \"orders\", SELECT_COLUMN));\n \n         // change access denied exception to view\n-        assertAccessDenied(\"SHOW CREATE VIEW test_nested_view_access\", \"Cannot show create table for .*test_nested_view_access.*\", privilege(\"test_nested_view_access\", SHOW_CREATE_TABLE));\n-        assertAccessAllowed(\"SHOW CREATE VIEW test_nested_view_access\", privilege(\"test_denied_access_view\", SHOW_CREATE_TABLE));\n+        assertAccessDenied(\"SHOW CREATE VIEW test_nested_view_column_access\", \"Cannot show create table for .*test_nested_view_column_access.*\", privilege(\"test_nested_view_column_access\", SHOW_CREATE_TABLE));\n+        assertAccessAllowed(\"SHOW CREATE VIEW test_nested_view_column_access\", privilege(\"test_denied_access_view\", SHOW_CREATE_TABLE));\n \n-        assertAccessAllowed(nestedViewOwnerSession, \"DROP VIEW test_nested_view_access\");\n-        assertAccessAllowed(viewOwnerSession, \"DROP VIEW test_view_access\");\n-        assertAccessAllowed(viewOwnerSession, \"DROP VIEW test_invoker_view_access\");\n+        assertAccessAllowed(nestedViewOwnerSession, \"DROP VIEW test_nested_view_column_access\");\n+        assertAccessAllowed(viewOwnerSession, \"DROP VIEW test_view_column_access\");\n+        assertAccessAllowed(viewOwnerSession, \"DROP VIEW test_invoker_view_column_access\");\n+    }\n+\n+    @Test\n+    public void testViewFunctionAccessControl()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 115}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMTE0MjAx", "url": "https://github.com/trinodb/trino/pull/3030#pullrequestreview-372114201", "createdAt": "2020-03-10T16:23:07Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjoyMzowN1rOF0Wrvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjoyMzowN1rOF0Wrvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ0MTkxOA==", "bodyText": "I think this is the wrong abstraction. There's nothing in the SQL spec that limits whether user can create a view based on whether it contains certain functions. All it says is that:\nA column privilege descriptor is created that defines the privilege SELECT on CV to A. \nThat privilege is grantable if and only if all the following are true:\n...\n2) The applicable privileges for A include grantable EXECUTE privileges on all SQL-invoked \nroutines that are subject routines of <routine invocation>s contained in QE.\n...\n\nwhich, basically, states that the creator of the view (i.e., the schema owner) has a SELECT privilege on each column of the view. That privilege is grantable to others if certain conditions apply (i.e., among other things, the creator has a grantable EXECUTE privilege on all functions referenced by the query)", "url": "https://github.com/trinodb/trino/pull/3030#discussion_r390441918", "createdAt": "2020-03-10T16:23:07Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/security/AccessControl.java", "diffHunk": "@@ -255,6 +255,13 @@\n      */\n     void checkCanCreateViewWithSelectFromColumns(SecurityContext context, QualifiedObjectName tableName, Set<String> columnNames);\n \n+    /**\n+     * Check if identity is allowed to create a view that executes the function.\n+     *\n+     * @throws io.prestosql.spi.security.AccessDeniedException if not allowed\n+     */\n+    void checkCanCreateViewWithExecuteFunction(SecurityContext context, String functionName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMzAwMjEz", "url": "https://github.com/trinodb/trino/pull/3030#pullrequestreview-372300213", "createdAt": "2020-03-10T20:33:21Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMDozMzoyMVrOF0f8Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMDo0NjoyOFrOF0gW1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU5MzYxNA==", "bodyText": "I'd rephrase the commit as \"Improve robustness of InitializeSystemAccessControl\", and in the commit message indicate that this makes it easier to evolve the SystemAccessControl interface by adding new methods.", "url": "https://github.com/trinodb/trino/pull/3030#discussion_r390593614", "createdAt": "2020-03-10T20:33:21Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/security/AccessControlManager.java", "diffHunk": "@@ -24,6 +24,7 @@\n import io.prestosql.metadata.QualifiedObjectName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU5NjIwNA==", "bodyText": "This doesn't seem to belong to this \"generic\" method.", "url": "https://github.com/trinodb/trino/pull/3030#discussion_r390596204", "createdAt": "2020-03-10T20:38:28Z", "author": {"login": "martint"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestEffectivePredicateExtractor.java", "diffHunk": "@@ -607,6 +601,23 @@ public void testValues()\n                 TRUE_LITERAL);\n     }\n \n+    private Expression extract(TypeProvider types, ResolvedFunction resolvedFunction)\n+    {\n+        return transaction(new TestingTransactionManager(), new AllowAllAccessControl())\n+                .singleStatement()\n+                .execute(SESSION, transactionSession -> {\n+                    return effectivePredicateExtractor.extract(\n+                            transactionSession,\n+                            new ValuesNode(\n+                                    newId(),\n+                                    ImmutableList.of(A, B),\n+                                    ImmutableList.of(\n+                                            ImmutableList.of(bigintLiteral(1), new FunctionCall(resolvedFunction.toQualifiedName(), ImmutableList.of())))),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU5Njc5Ng==", "bodyText": "Can you add a comment in the commit message describing the motivation for this change?", "url": "https://github.com/trinodb/trino/pull/3030#discussion_r390596796", "createdAt": "2020-03-10T20:39:36Z", "author": {"login": "martint"}, "path": "presto-benchmark/src/main/java/io/prestosql/benchmark/AbstractOperatorBenchmark.java", "diffHunk": "@@ -279,6 +279,7 @@ protected final OperatorFactory createHashProjectOperator(int operatorId, PlanNo\n     {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU5ODM2OA==", "bodyText": "Change name as discussed offline", "url": "https://github.com/trinodb/trino/pull/3030#discussion_r390598368", "createdAt": "2020-03-10T20:42:45Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/security/AccessControlManager.java", "diffHunk": "@@ -586,6 +586,15 @@ public void checkCanCreateViewWithSelectFromColumns(SecurityContext securityCont\n         catalogAuthorizationCheck(tableName.getCatalogName(), securityContext, (control, context) -> control.checkCanCreateViewWithSelectFromColumns(context, tableName.asSchemaTableName(), columnNames));\n     }\n \n+    @Override\n+    public void checkCanCreateViewWithExecuteFunction(SecurityContext securityContext, String functionName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYwMDQwNw==", "bodyText": "This method is used in various places, such as when resolving session properties, arguments of procedures, etc. It should use a real AccessControl.", "url": "https://github.com/trinodb/trino/pull/3030#discussion_r390600407", "createdAt": "2020-03-10T20:46:28Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/ExpressionInterpreter.java", "diffHunk": "@@ -174,7 +175,7 @@ public static ExpressionInterpreter expressionOptimizer(Expression expression, M\n \n     public static Object evaluateConstantExpression(Expression expression, Type expectedType, Metadata metadata, Session session, Map<NodeRef<Parameter>, Expression> parameters)\n     {\n-        ExpressionAnalyzer analyzer = createConstantAnalyzer(metadata, session, parameters, WarningCollector.NOOP);\n+        ExpressionAnalyzer analyzer = createConstantAnalyzer(metadata, new AllowAllAccessControl(), session, parameters, WarningCollector.NOOP);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNjg1NjU3", "url": "https://github.com/trinodb/trino/pull/3030#pullrequestreview-372685657", "createdAt": "2020-03-11T11:45:15Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMTo0NToxNlrOF0zkbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo0NTo1NlrOF01Xbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkxNTE4MQ==", "bodyText": "This is required to use access control during expression analysis.\nAccess control requires to SecurityContext which requires a transaction.", "url": "https://github.com/trinodb/trino/pull/3030#discussion_r390915181", "createdAt": "2020-03-11T11:45:16Z", "author": {"login": "kokosing"}, "path": "presto-benchmark/src/main/java/io/prestosql/benchmark/AbstractOperatorBenchmark.java", "diffHunk": "@@ -279,6 +279,7 @@ protected final OperatorFactory createHashProjectOperator(int operatorId, PlanNo\n     {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU5Njc5Ng=="}, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkyMDY2MQ==", "bodyText": "Discussed offline.", "url": "https://github.com/trinodb/trino/pull/3030#discussion_r390920661", "createdAt": "2020-03-11T11:56:27Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/security/AccessControl.java", "diffHunk": "@@ -255,6 +255,13 @@\n      */\n     void checkCanCreateViewWithSelectFromColumns(SecurityContext context, QualifiedObjectName tableName, Set<String> columnNames);\n \n+    /**\n+     * Check if identity is allowed to create a view that executes the function.\n+     *\n+     * @throws io.prestosql.spi.security.AccessDeniedException if not allowed\n+     */\n+    void checkCanCreateViewWithExecuteFunction(SecurityContext context, String functionName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ0MTkxOA=="}, "originalCommit": null, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0NDYyMg==", "bodyText": "good catch!", "url": "https://github.com/trinodb/trino/pull/3030#discussion_r390944622", "createdAt": "2020-03-11T12:45:56Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/ExpressionInterpreter.java", "diffHunk": "@@ -174,7 +175,7 @@ public static ExpressionInterpreter expressionOptimizer(Expression expression, M\n \n     public static Object evaluateConstantExpression(Expression expression, Type expectedType, Metadata metadata, Session session, Map<NodeRef<Parameter>, Expression> parameters)\n     {\n-        ExpressionAnalyzer analyzer = createConstantAnalyzer(metadata, session, parameters, WarningCollector.NOOP);\n+        ExpressionAnalyzer analyzer = createConstantAnalyzer(metadata, new AllowAllAccessControl(), session, parameters, WarningCollector.NOOP);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYwMDQwNw=="}, "originalCommit": null, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNzM2Mzc5", "url": "https://github.com/trinodb/trino/pull/3030#pullrequestreview-372736379", "createdAt": "2020-03-11T13:03:57Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzowMzo1N1rOF018jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzowMzo1N1rOF018jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1NDEyNA==", "bodyText": "This is a bit misleading error. Do you have any suggestions?", "url": "https://github.com/trinodb/trino/pull/3030#discussion_r390954124", "createdAt": "2020-03-11T13:03:57Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -1070,43 +1072,89 @@ public void testViewAccessControl()\n         // view creation permissions are only checked at query time, not at creation\n         assertAccessAllowed(\n                 nestedViewOwnerSession,\n-                \"CREATE VIEW test_nested_view_access AS SELECT * FROM test_view_access\",\n-                privilege(\"test_view_access\", CREATE_VIEW_WITH_SELECT_COLUMNS));\n+                \"CREATE VIEW test_nested_view_column_access AS SELECT * FROM test_view_column_access\",\n+                privilege(\"test_view_column_access\", CREATE_VIEW_WITH_SELECT_COLUMNS));\n \n         // verify selecting from a view over a view requires the view owner of the outer view to have special view creation privileges for the inner view\n         assertAccessDenied(\n-                \"SELECT * FROM test_nested_view_access\",\n-                \"View owner 'test_nested_view_access_owner' cannot create view that selects from .*.test_view_access.*\",\n-                privilege(nestedViewOwnerSession.getUser(), \"test_view_access\", CREATE_VIEW_WITH_SELECT_COLUMNS));\n+                \"SELECT * FROM test_nested_view_column_access\",\n+                \"View owner 'test_nested_view_access_owner' cannot create view that selects from .*.test_view_column_access.*\",\n+                privilege(nestedViewOwnerSession.getUser(), \"test_view_column_access\", CREATE_VIEW_WITH_SELECT_COLUMNS));\n \n         // verify selecting from a view over a view does not require the session user to have SELECT privileges for the inner view\n         assertAccessAllowed(\n-                \"SELECT * FROM test_nested_view_access\",\n-                privilege(getSession().getUser(), \"test_view_access\", CREATE_VIEW_WITH_SELECT_COLUMNS));\n+                \"SELECT * FROM test_nested_view_column_access\",\n+                privilege(getSession().getUser(), \"test_view_column_access\", CREATE_VIEW_WITH_SELECT_COLUMNS));\n         assertAccessAllowed(\n-                \"SELECT * FROM test_nested_view_access\",\n-                privilege(getSession().getUser(), \"test_view_access\", SELECT_COLUMN));\n+                \"SELECT * FROM test_nested_view_column_access\",\n+                privilege(getSession().getUser(), \"test_view_column_access\", SELECT_COLUMN));\n \n         // verify that INVOKER security runs as session user\n         assertAccessAllowed(\n                 viewOwnerSession,\n-                \"CREATE VIEW test_invoker_view_access SECURITY INVOKER AS SELECT * FROM orders\",\n+                \"CREATE VIEW test_invoker_view_column_access SECURITY INVOKER AS SELECT * FROM orders\",\n                 privilege(\"orders\", CREATE_VIEW_WITH_SELECT_COLUMNS));\n         assertAccessAllowed(\n-                \"SELECT * FROM test_invoker_view_access\",\n+                \"SELECT * FROM test_invoker_view_column_access\",\n                 privilege(viewOwnerSession.getUser(), \"orders\", SELECT_COLUMN));\n         assertAccessDenied(\n-                \"SELECT * FROM test_invoker_view_access\",\n+                \"SELECT * FROM test_invoker_view_column_access\",\n                 \"Cannot select from columns \\\\[.*\\\\] in table .*.orders.*\",\n                 privilege(getSession().getUser(), \"orders\", SELECT_COLUMN));\n \n         // change access denied exception to view\n-        assertAccessDenied(\"SHOW CREATE VIEW test_nested_view_access\", \"Cannot show create table for .*test_nested_view_access.*\", privilege(\"test_nested_view_access\", SHOW_CREATE_TABLE));\n-        assertAccessAllowed(\"SHOW CREATE VIEW test_nested_view_access\", privilege(\"test_denied_access_view\", SHOW_CREATE_TABLE));\n+        assertAccessDenied(\"SHOW CREATE VIEW test_nested_view_column_access\", \"Cannot show create table for .*test_nested_view_column_access.*\", privilege(\"test_nested_view_column_access\", SHOW_CREATE_TABLE));\n+        assertAccessAllowed(\"SHOW CREATE VIEW test_nested_view_column_access\", privilege(\"test_denied_access_view\", SHOW_CREATE_TABLE));\n \n-        assertAccessAllowed(nestedViewOwnerSession, \"DROP VIEW test_nested_view_access\");\n-        assertAccessAllowed(viewOwnerSession, \"DROP VIEW test_view_access\");\n-        assertAccessAllowed(viewOwnerSession, \"DROP VIEW test_invoker_view_access\");\n+        assertAccessAllowed(nestedViewOwnerSession, \"DROP VIEW test_nested_view_column_access\");\n+        assertAccessAllowed(viewOwnerSession, \"DROP VIEW test_view_column_access\");\n+        assertAccessAllowed(viewOwnerSession, \"DROP VIEW test_invoker_view_column_access\");\n+    }\n+\n+    @Test\n+    public void testViewFunctionAccessControl()\n+    {\n+        skipTestUnless(supportsViews());\n+\n+        Session viewOwnerSession = TestingSession.testSessionBuilder()\n+                .setIdentity(Identity.ofUser(\"test_view_access_owner\"))\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(getSession().getSchema().get())\n+                .build();\n+\n+        // TEST FUNCTION PRIVILEGES\n+        // view creation permissions are only checked at query time, not at creation\n+        assertAccessAllowed(\n+                viewOwnerSession,\n+                \"CREATE VIEW test_view_function_access AS SELECT abs(1) AS c\",\n+                privilege(\"abs\", GRANT_EXECUTE_FUNCTION));\n+\n+        assertAccessDenied(\n+                \"SELECT * FROM test_view_function_access\",\n+                \"'test_view_access_owner' cannot grant 'abs' execution to user 'hive'\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 131}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczOTEyNTc3", "url": "https://github.com/trinodb/trino/pull/3030#pullrequestreview-373912577", "createdAt": "2020-03-12T21:22:51Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMToyMjo1MVrOF1vvmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMToyMjo1MVrOF1vvmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwMTA4Mw==", "bodyText": "That's good enough. Eventually we should improve these messages by providing the whole chain of view references that lead to such errors.", "url": "https://github.com/trinodb/trino/pull/3030#discussion_r391901083", "createdAt": "2020-03-12T21:22:51Z", "author": {"login": "martint"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -1070,43 +1072,89 @@ public void testViewAccessControl()\n         // view creation permissions are only checked at query time, not at creation\n         assertAccessAllowed(\n                 nestedViewOwnerSession,\n-                \"CREATE VIEW test_nested_view_access AS SELECT * FROM test_view_access\",\n-                privilege(\"test_view_access\", CREATE_VIEW_WITH_SELECT_COLUMNS));\n+                \"CREATE VIEW test_nested_view_column_access AS SELECT * FROM test_view_column_access\",\n+                privilege(\"test_view_column_access\", CREATE_VIEW_WITH_SELECT_COLUMNS));\n \n         // verify selecting from a view over a view requires the view owner of the outer view to have special view creation privileges for the inner view\n         assertAccessDenied(\n-                \"SELECT * FROM test_nested_view_access\",\n-                \"View owner 'test_nested_view_access_owner' cannot create view that selects from .*.test_view_access.*\",\n-                privilege(nestedViewOwnerSession.getUser(), \"test_view_access\", CREATE_VIEW_WITH_SELECT_COLUMNS));\n+                \"SELECT * FROM test_nested_view_column_access\",\n+                \"View owner 'test_nested_view_access_owner' cannot create view that selects from .*.test_view_column_access.*\",\n+                privilege(nestedViewOwnerSession.getUser(), \"test_view_column_access\", CREATE_VIEW_WITH_SELECT_COLUMNS));\n \n         // verify selecting from a view over a view does not require the session user to have SELECT privileges for the inner view\n         assertAccessAllowed(\n-                \"SELECT * FROM test_nested_view_access\",\n-                privilege(getSession().getUser(), \"test_view_access\", CREATE_VIEW_WITH_SELECT_COLUMNS));\n+                \"SELECT * FROM test_nested_view_column_access\",\n+                privilege(getSession().getUser(), \"test_view_column_access\", CREATE_VIEW_WITH_SELECT_COLUMNS));\n         assertAccessAllowed(\n-                \"SELECT * FROM test_nested_view_access\",\n-                privilege(getSession().getUser(), \"test_view_access\", SELECT_COLUMN));\n+                \"SELECT * FROM test_nested_view_column_access\",\n+                privilege(getSession().getUser(), \"test_view_column_access\", SELECT_COLUMN));\n \n         // verify that INVOKER security runs as session user\n         assertAccessAllowed(\n                 viewOwnerSession,\n-                \"CREATE VIEW test_invoker_view_access SECURITY INVOKER AS SELECT * FROM orders\",\n+                \"CREATE VIEW test_invoker_view_column_access SECURITY INVOKER AS SELECT * FROM orders\",\n                 privilege(\"orders\", CREATE_VIEW_WITH_SELECT_COLUMNS));\n         assertAccessAllowed(\n-                \"SELECT * FROM test_invoker_view_access\",\n+                \"SELECT * FROM test_invoker_view_column_access\",\n                 privilege(viewOwnerSession.getUser(), \"orders\", SELECT_COLUMN));\n         assertAccessDenied(\n-                \"SELECT * FROM test_invoker_view_access\",\n+                \"SELECT * FROM test_invoker_view_column_access\",\n                 \"Cannot select from columns \\\\[.*\\\\] in table .*.orders.*\",\n                 privilege(getSession().getUser(), \"orders\", SELECT_COLUMN));\n \n         // change access denied exception to view\n-        assertAccessDenied(\"SHOW CREATE VIEW test_nested_view_access\", \"Cannot show create table for .*test_nested_view_access.*\", privilege(\"test_nested_view_access\", SHOW_CREATE_TABLE));\n-        assertAccessAllowed(\"SHOW CREATE VIEW test_nested_view_access\", privilege(\"test_denied_access_view\", SHOW_CREATE_TABLE));\n+        assertAccessDenied(\"SHOW CREATE VIEW test_nested_view_column_access\", \"Cannot show create table for .*test_nested_view_column_access.*\", privilege(\"test_nested_view_column_access\", SHOW_CREATE_TABLE));\n+        assertAccessAllowed(\"SHOW CREATE VIEW test_nested_view_column_access\", privilege(\"test_denied_access_view\", SHOW_CREATE_TABLE));\n \n-        assertAccessAllowed(nestedViewOwnerSession, \"DROP VIEW test_nested_view_access\");\n-        assertAccessAllowed(viewOwnerSession, \"DROP VIEW test_view_access\");\n-        assertAccessAllowed(viewOwnerSession, \"DROP VIEW test_invoker_view_access\");\n+        assertAccessAllowed(nestedViewOwnerSession, \"DROP VIEW test_nested_view_column_access\");\n+        assertAccessAllowed(viewOwnerSession, \"DROP VIEW test_view_column_access\");\n+        assertAccessAllowed(viewOwnerSession, \"DROP VIEW test_invoker_view_column_access\");\n+    }\n+\n+    @Test\n+    public void testViewFunctionAccessControl()\n+    {\n+        skipTestUnless(supportsViews());\n+\n+        Session viewOwnerSession = TestingSession.testSessionBuilder()\n+                .setIdentity(Identity.ofUser(\"test_view_access_owner\"))\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(getSession().getSchema().get())\n+                .build();\n+\n+        // TEST FUNCTION PRIVILEGES\n+        // view creation permissions are only checked at query time, not at creation\n+        assertAccessAllowed(\n+                viewOwnerSession,\n+                \"CREATE VIEW test_view_function_access AS SELECT abs(1) AS c\",\n+                privilege(\"abs\", GRANT_EXECUTE_FUNCTION));\n+\n+        assertAccessDenied(\n+                \"SELECT * FROM test_view_function_access\",\n+                \"'test_view_access_owner' cannot grant 'abs' execution to user 'hive'\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1NDEyNA=="}, "originalCommit": null, "originalPosition": 131}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "51d9a16b69705e07d0ce052763fabf20b15911b5", "author": {"user": {"login": "kokosing", "name": "Grzegorz Kokosi\u0144ski"}}, "url": "https://github.com/trinodb/trino/commit/51d9a16b69705e07d0ce052763fabf20b15911b5", "committedDate": "2020-03-16T09:14:17Z", "message": "Rename testViewAccessControl to emphasis focus on columns"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35a9e5f9f5e4a988834ed211b1d2179667075520", "author": {"user": {"login": "kokosing", "name": "Grzegorz Kokosi\u0144ski"}}, "url": "https://github.com/trinodb/trino/commit/35a9e5f9f5e4a988834ed211b1d2179667075520", "committedDate": "2020-03-16T09:14:17Z", "message": "Match error message with access control check method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f25f1e821f39e7abef5f2b46113fafcd62f8bb0", "author": {"user": {"login": "kokosing", "name": "Grzegorz Kokosi\u0144ski"}}, "url": "https://github.com/trinodb/trino/commit/5f25f1e821f39e7abef5f2b46113fafcd62f8bb0", "committedDate": "2020-03-16T09:14:17Z", "message": "Use static import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "520380880835f49cafa25afc41a723a3bbc1ca7d", "author": {"user": {"login": "kokosing", "name": "Grzegorz Kokosi\u0144ski"}}, "url": "https://github.com/trinodb/trino/commit/520380880835f49cafa25afc41a723a3bbc1ca7d", "committedDate": "2020-03-16T09:14:17Z", "message": "Improve robustness of InitializeSystemAccessControl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69e583c804b7c1c80edf80ed3af4128225cddeac", "author": {"user": {"login": "kokosing", "name": "Grzegorz Kokosi\u0144ski"}}, "url": "https://github.com/trinodb/trino/commit/69e583c804b7c1c80edf80ed3af4128225cddeac", "committedDate": "2020-03-16T09:14:18Z", "message": "Move createExpression to ExpressionTestUtils"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b12183a35f260e0ff2d25e35fb5fba4deb77016", "author": {"user": {"login": "kokosing", "name": "Grzegorz Kokosi\u0144ski"}}, "url": "https://github.com/trinodb/trino/commit/1b12183a35f260e0ff2d25e35fb5fba4deb77016", "committedDate": "2020-03-16T09:14:18Z", "message": "Wrap expression test utilities with transaction\n\nThis is required to use access control during expression analysis.\nAccess control requires to SecurityContext which requires a transaction."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68d4b8c52a6da526db9428402b7dcd34826042a2", "author": {"user": {"login": "kokosing", "name": "Grzegorz Kokosi\u0144ski"}}, "url": "https://github.com/trinodb/trino/commit/68d4b8c52a6da526db9428402b7dcd34826042a2", "committedDate": "2020-03-16T09:14:18Z", "message": "Add execute function access control"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "68d4b8c52a6da526db9428402b7dcd34826042a2", "author": {"user": {"login": "kokosing", "name": "Grzegorz Kokosi\u0144ski"}}, "url": "https://github.com/trinodb/trino/commit/68d4b8c52a6da526db9428402b7dcd34826042a2", "committedDate": "2020-03-16T09:14:18Z", "message": "Add execute function access control"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2108, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}