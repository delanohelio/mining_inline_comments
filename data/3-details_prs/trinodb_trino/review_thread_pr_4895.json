{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwOTU5Nzk3", "number": 4895, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNToxMDozN1rOEalE9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDo0Njo1N1rOEcAvoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzA1OTExOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/SuiteRun.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNToxMDozN1rOHEGN8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNToyMTo0MFrOHEGrtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA1ODIyNQ==", "bodyText": "use job or run consistently", "url": "https://github.com/trinodb/trino/pull/4895#discussion_r474058225", "createdAt": "2020-08-20T15:10:37Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/SuiteRun.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.cli;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Module;\n+import io.airlift.airline.Command;\n+import io.airlift.airline.Option;\n+import io.airlift.log.Logger;\n+import io.prestosql.tests.product.launcher.Extensions;\n+import io.prestosql.tests.product.launcher.LauncherModule;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.env.EnvironmentFactory;\n+import io.prestosql.tests.product.launcher.env.EnvironmentModule;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.suite.Suite;\n+import io.prestosql.tests.product.launcher.suite.SuiteConfig;\n+import io.prestosql.tests.product.launcher.suite.SuiteFactory;\n+import io.prestosql.tests.product.launcher.suite.SuiteModule;\n+import io.prestosql.tests.product.launcher.suite.SuiteTestRun;\n+\n+import javax.inject.Inject;\n+\n+import static io.airlift.units.Duration.nanosSince;\n+import static io.prestosql.tests.product.launcher.cli.Commands.runCommand;\n+import static java.lang.System.exit;\n+import static java.util.Objects.requireNonNull;\n+\n+@Command(name = \"run\", description = \"run suite tests\")\n+public class SuiteRun\n+        implements Runnable\n+{\n+    private static final Logger log = Logger.get(SuiteRun.class);\n+\n+    private final Module additionalEnvironments;\n+    private final Module additionalSuites;\n+\n+    @Inject\n+    public SuiteRun.SuiteRunOptions suiteRunOptions = new SuiteRun.SuiteRunOptions();\n+\n+    @Inject\n+    public EnvironmentOptions environmentOptions = new EnvironmentOptions();\n+\n+    public SuiteRun(Extensions extensions)\n+    {\n+        this.additionalEnvironments = requireNonNull(extensions, \"extensions is null\").getAdditionalEnvironments();\n+        this.additionalSuites = requireNonNull(extensions, \"extensions is null\").getAdditionalSuites();\n+    }\n+\n+    @Override\n+    public void run()\n+    {\n+        runCommand(\n+                ImmutableList.<Module>builder()\n+                        .add(new LauncherModule())\n+                        .add(new SuiteModule(additionalSuites))\n+                        .add(new EnvironmentModule(additionalEnvironments))\n+                        .add(suiteRunOptions.toModule())\n+                        .add(environmentOptions.toModule())\n+                        .build(),\n+                SuiteRun.Execution.class);\n+    }\n+\n+    public static class SuiteRunOptions\n+    {\n+        @Option(name = \"--suite\", title = \"suite\", description = \"the name of the suite to run\", required = true)\n+        public String suite;\n+\n+        @Option(name = \"--suite-config\", title = \"suite-config\", description = \"the name of the suite config to use\")\n+        public String config = \"config-empty\";\n+\n+        public Module toModule()\n+        {\n+            return binder -> binder.bind(SuiteRun.SuiteRunOptions.class).toInstance(this);\n+        }\n+    }\n+\n+    public static class Execution\n+            implements Runnable\n+    {\n+        private final SuiteRunOptions suiteRunOptions;\n+        private final EnvironmentOptions environmentOptions;\n+        private final PathResolver pathResolver;\n+        private final SuiteFactory suiteFactory;\n+        private final EnvironmentFactory environmentFactory;\n+\n+        @Inject\n+        public Execution(SuiteRunOptions suiteRunOptions, EnvironmentOptions environmentOptions, PathResolver pathResolver, SuiteFactory suiteFactory, EnvironmentFactory environmentFactory)\n+        {\n+            this.suiteRunOptions = requireNonNull(suiteRunOptions, \"suiteRunOptions is null\");\n+            this.environmentOptions = requireNonNull(environmentOptions, \"environmentOptions is null\");\n+            this.pathResolver = requireNonNull(pathResolver, \"pathResolver is null\");\n+            this.suiteFactory = requireNonNull(suiteFactory, \"suiteFactory is null\");\n+            this.environmentFactory = requireNonNull(environmentFactory, \"environmentFactory is null\");\n+        }\n+\n+        @Override\n+        public void run()\n+        {\n+            Suite suite = suiteFactory.getSuite(suiteRunOptions.suite);\n+            SuiteConfig suiteConfig = suiteFactory.getSuiteConfig(suiteRunOptions.config);\n+\n+            log.info(\"Starting suite '%s' with config '%s' and jobs: \", suite.getSuiteName(), suiteConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA2NTg0Nw==", "bodyText": "Good catch.", "url": "https://github.com/trinodb/trino/pull/4895#discussion_r474065847", "createdAt": "2020-08-20T15:21:40Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/SuiteRun.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.cli;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Module;\n+import io.airlift.airline.Command;\n+import io.airlift.airline.Option;\n+import io.airlift.log.Logger;\n+import io.prestosql.tests.product.launcher.Extensions;\n+import io.prestosql.tests.product.launcher.LauncherModule;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.env.EnvironmentFactory;\n+import io.prestosql.tests.product.launcher.env.EnvironmentModule;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.suite.Suite;\n+import io.prestosql.tests.product.launcher.suite.SuiteConfig;\n+import io.prestosql.tests.product.launcher.suite.SuiteFactory;\n+import io.prestosql.tests.product.launcher.suite.SuiteModule;\n+import io.prestosql.tests.product.launcher.suite.SuiteTestRun;\n+\n+import javax.inject.Inject;\n+\n+import static io.airlift.units.Duration.nanosSince;\n+import static io.prestosql.tests.product.launcher.cli.Commands.runCommand;\n+import static java.lang.System.exit;\n+import static java.util.Objects.requireNonNull;\n+\n+@Command(name = \"run\", description = \"run suite tests\")\n+public class SuiteRun\n+        implements Runnable\n+{\n+    private static final Logger log = Logger.get(SuiteRun.class);\n+\n+    private final Module additionalEnvironments;\n+    private final Module additionalSuites;\n+\n+    @Inject\n+    public SuiteRun.SuiteRunOptions suiteRunOptions = new SuiteRun.SuiteRunOptions();\n+\n+    @Inject\n+    public EnvironmentOptions environmentOptions = new EnvironmentOptions();\n+\n+    public SuiteRun(Extensions extensions)\n+    {\n+        this.additionalEnvironments = requireNonNull(extensions, \"extensions is null\").getAdditionalEnvironments();\n+        this.additionalSuites = requireNonNull(extensions, \"extensions is null\").getAdditionalSuites();\n+    }\n+\n+    @Override\n+    public void run()\n+    {\n+        runCommand(\n+                ImmutableList.<Module>builder()\n+                        .add(new LauncherModule())\n+                        .add(new SuiteModule(additionalSuites))\n+                        .add(new EnvironmentModule(additionalEnvironments))\n+                        .add(suiteRunOptions.toModule())\n+                        .add(environmentOptions.toModule())\n+                        .build(),\n+                SuiteRun.Execution.class);\n+    }\n+\n+    public static class SuiteRunOptions\n+    {\n+        @Option(name = \"--suite\", title = \"suite\", description = \"the name of the suite to run\", required = true)\n+        public String suite;\n+\n+        @Option(name = \"--suite-config\", title = \"suite-config\", description = \"the name of the suite config to use\")\n+        public String config = \"config-empty\";\n+\n+        public Module toModule()\n+        {\n+            return binder -> binder.bind(SuiteRun.SuiteRunOptions.class).toInstance(this);\n+        }\n+    }\n+\n+    public static class Execution\n+            implements Runnable\n+    {\n+        private final SuiteRunOptions suiteRunOptions;\n+        private final EnvironmentOptions environmentOptions;\n+        private final PathResolver pathResolver;\n+        private final SuiteFactory suiteFactory;\n+        private final EnvironmentFactory environmentFactory;\n+\n+        @Inject\n+        public Execution(SuiteRunOptions suiteRunOptions, EnvironmentOptions environmentOptions, PathResolver pathResolver, SuiteFactory suiteFactory, EnvironmentFactory environmentFactory)\n+        {\n+            this.suiteRunOptions = requireNonNull(suiteRunOptions, \"suiteRunOptions is null\");\n+            this.environmentOptions = requireNonNull(environmentOptions, \"environmentOptions is null\");\n+            this.pathResolver = requireNonNull(pathResolver, \"pathResolver is null\");\n+            this.suiteFactory = requireNonNull(suiteFactory, \"suiteFactory is null\");\n+            this.environmentFactory = requireNonNull(environmentFactory, \"environmentFactory is null\");\n+        }\n+\n+        @Override\n+        public void run()\n+        {\n+            Suite suite = suiteFactory.getSuite(suiteRunOptions.suite);\n+            SuiteConfig suiteConfig = suiteFactory.getSuiteConfig(suiteRunOptions.config);\n+\n+            log.info(\"Starting suite '%s' with config '%s' and jobs: \", suite.getSuiteName(), suiteConfig);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA1ODIyNQ=="}, "originalCommit": null, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzA2MzcxOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/SuiteRun.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNToxMTo1MFrOHEGRHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNToxMTo1MFrOHEGRHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA1OTAzNw==", "bodyText": "Create EnvironmentOptions.copyOf method and use here", "url": "https://github.com/trinodb/trino/pull/4895#discussion_r474059037", "createdAt": "2020-08-20T15:11:50Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/SuiteRun.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.cli;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Module;\n+import io.airlift.airline.Command;\n+import io.airlift.airline.Option;\n+import io.airlift.log.Logger;\n+import io.prestosql.tests.product.launcher.Extensions;\n+import io.prestosql.tests.product.launcher.LauncherModule;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.env.EnvironmentFactory;\n+import io.prestosql.tests.product.launcher.env.EnvironmentModule;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.suite.Suite;\n+import io.prestosql.tests.product.launcher.suite.SuiteConfig;\n+import io.prestosql.tests.product.launcher.suite.SuiteFactory;\n+import io.prestosql.tests.product.launcher.suite.SuiteModule;\n+import io.prestosql.tests.product.launcher.suite.SuiteTestRun;\n+\n+import javax.inject.Inject;\n+\n+import static io.airlift.units.Duration.nanosSince;\n+import static io.prestosql.tests.product.launcher.cli.Commands.runCommand;\n+import static java.lang.System.exit;\n+import static java.util.Objects.requireNonNull;\n+\n+@Command(name = \"run\", description = \"run suite tests\")\n+public class SuiteRun\n+        implements Runnable\n+{\n+    private static final Logger log = Logger.get(SuiteRun.class);\n+\n+    private final Module additionalEnvironments;\n+    private final Module additionalSuites;\n+\n+    @Inject\n+    public SuiteRun.SuiteRunOptions suiteRunOptions = new SuiteRun.SuiteRunOptions();\n+\n+    @Inject\n+    public EnvironmentOptions environmentOptions = new EnvironmentOptions();\n+\n+    public SuiteRun(Extensions extensions)\n+    {\n+        this.additionalEnvironments = requireNonNull(extensions, \"extensions is null\").getAdditionalEnvironments();\n+        this.additionalSuites = requireNonNull(extensions, \"extensions is null\").getAdditionalSuites();\n+    }\n+\n+    @Override\n+    public void run()\n+    {\n+        runCommand(\n+                ImmutableList.<Module>builder()\n+                        .add(new LauncherModule())\n+                        .add(new SuiteModule(additionalSuites))\n+                        .add(new EnvironmentModule(additionalEnvironments))\n+                        .add(suiteRunOptions.toModule())\n+                        .add(environmentOptions.toModule())\n+                        .build(),\n+                SuiteRun.Execution.class);\n+    }\n+\n+    public static class SuiteRunOptions\n+    {\n+        @Option(name = \"--suite\", title = \"suite\", description = \"the name of the suite to run\", required = true)\n+        public String suite;\n+\n+        @Option(name = \"--suite-config\", title = \"suite-config\", description = \"the name of the suite config to use\")\n+        public String config = \"config-empty\";\n+\n+        public Module toModule()\n+        {\n+            return binder -> binder.bind(SuiteRun.SuiteRunOptions.class).toInstance(this);\n+        }\n+    }\n+\n+    public static class Execution\n+            implements Runnable\n+    {\n+        private final SuiteRunOptions suiteRunOptions;\n+        private final EnvironmentOptions environmentOptions;\n+        private final PathResolver pathResolver;\n+        private final SuiteFactory suiteFactory;\n+        private final EnvironmentFactory environmentFactory;\n+\n+        @Inject\n+        public Execution(SuiteRunOptions suiteRunOptions, EnvironmentOptions environmentOptions, PathResolver pathResolver, SuiteFactory suiteFactory, EnvironmentFactory environmentFactory)\n+        {\n+            this.suiteRunOptions = requireNonNull(suiteRunOptions, \"suiteRunOptions is null\");\n+            this.environmentOptions = requireNonNull(environmentOptions, \"environmentOptions is null\");\n+            this.pathResolver = requireNonNull(pathResolver, \"pathResolver is null\");\n+            this.suiteFactory = requireNonNull(suiteFactory, \"suiteFactory is null\");\n+            this.environmentFactory = requireNonNull(environmentFactory, \"environmentFactory is null\");\n+        }\n+\n+        @Override\n+        public void run()\n+        {\n+            Suite suite = suiteFactory.getSuite(suiteRunOptions.suite);\n+            SuiteConfig suiteConfig = suiteFactory.getSuiteConfig(suiteRunOptions.config);\n+\n+            log.info(\"Starting suite '%s' with config '%s' and jobs: \", suite.getSuiteName(), suiteConfig);\n+\n+            suite.getTestRuns().forEach(job ->\n+                    log.info(\" * environment '%s': groups: %s, excluded groups: %s, tests: %s, excluded tests: %s\",\n+                            job.getEnvironmentName(), job.getGroups(), job.getExcludedGroups(), job.getTests(), job.getExcludedTests()));\n+\n+            int exitCode = 0;\n+\n+            long suiteStartTime = System.nanoTime();\n+            ImmutableList.Builder<SuiteTestRun> failedTestRuns = ImmutableList.builder();\n+\n+            for (SuiteTestRun testRun : suite.getTestRuns()) {\n+                long startTime = System.nanoTime();\n+\n+                try {\n+                    log.info(\"Starting test run %s with config %s\", testRun, suiteConfig);\n+                    tryRunSuiteJob(testRun, suiteConfig);\n+                }\n+                catch (Exception e) {\n+                    failedTestRuns.add(testRun);\n+                    log.error(\"Failed to execute test run %s\", testRun, e);\n+                    exitCode = 1;\n+                }\n+                finally {\n+                    log.info(\"Executing test run %s took %s, elapsed %s since suite started\", testRun, nanosSince(startTime), nanosSince(suiteStartTime));\n+                }\n+            }\n+\n+            if (exitCode > 0) {\n+                log.error(\"Suite failed in %s, failing test runs: %s\", nanosSince(suiteStartTime), failedTestRuns.build());\n+            }\n+            else {\n+                log.error(\"Suite succeded in %s\", nanosSince(suiteStartTime));\n+            }\n+\n+            exit(exitCode);\n+        }\n+\n+        public void tryRunSuiteJob(SuiteTestRun suiteTestRun, SuiteConfig suiteConfig)\n+        {\n+            new TestRun.Execution(environmentFactory, pathResolver, createEnvironmentOptions(environmentOptions, suiteConfig), createTestRunOptions(suiteTestRun, suiteConfig)).run();\n+        }\n+\n+        private EnvironmentOptions createEnvironmentOptions(EnvironmentOptions environmentOptions, SuiteConfig suiteConfig)\n+        {\n+            EnvironmentOptions copy = new EnvironmentOptions();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzA2OTM2OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/suite/SuiteConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNToxMzoyMFrOHEGUyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNToyNTo1NVrOHEG2vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA1OTk3OA==", "bodyText": "drop the comments like this one eventually.", "url": "https://github.com/trinodb/trino/pull/4895#discussion_r474059978", "createdAt": "2020-08-20T15:13:20Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/suite/SuiteConfig.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.suite;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+\n+public abstract class SuiteConfig\n+{\n+    private static final String DEFAULT_DOCKER_IMAGES_VERSION = \"30\";\n+    private static final String DEFAULT_HADOOP_BASE_IMAGE = \"prestodev/hdp2.6-hive\";\n+\n+    /**\n+     * export HADOOP_BASE_IMAGE=\"${HADOOP_BASE_IMAGE:-prestodev/hdp2.6-hive}\"\n+     */\n+    public Optional<String> getHadoopBaseImage()\n+    {\n+        return Optional.of(DEFAULT_HADOOP_BASE_IMAGE);\n+    }\n+\n+    public List<String> getExcludedGroups()\n+    {\n+        return ImmutableList.of();\n+    }\n+\n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA2NDE4MA==", "bodyText": "I've kept it here for review to be simpler. I can drop them in a separate commit.", "url": "https://github.com/trinodb/trino/pull/4895#discussion_r474064180", "createdAt": "2020-08-20T15:19:18Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/suite/SuiteConfig.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.suite;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+\n+public abstract class SuiteConfig\n+{\n+    private static final String DEFAULT_DOCKER_IMAGES_VERSION = \"30\";\n+    private static final String DEFAULT_HADOOP_BASE_IMAGE = \"prestodev/hdp2.6-hive\";\n+\n+    /**\n+     * export HADOOP_BASE_IMAGE=\"${HADOOP_BASE_IMAGE:-prestodev/hdp2.6-hive}\"\n+     */\n+    public Optional<String> getHadoopBaseImage()\n+    {\n+        return Optional.of(DEFAULT_HADOOP_BASE_IMAGE);\n+    }\n+\n+    public List<String> getExcludedGroups()\n+    {\n+        return ImmutableList.of();\n+    }\n+\n+    /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA1OTk3OA=="}, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA2ODY3MA==", "bodyText": "Do you expect someone to actually read through all the definitions ? ;)", "url": "https://github.com/trinodb/trino/pull/4895#discussion_r474068670", "createdAt": "2020-08-20T15:25:55Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/suite/SuiteConfig.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.suite;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+\n+public abstract class SuiteConfig\n+{\n+    private static final String DEFAULT_DOCKER_IMAGES_VERSION = \"30\";\n+    private static final String DEFAULT_HADOOP_BASE_IMAGE = \"prestodev/hdp2.6-hive\";\n+\n+    /**\n+     * export HADOOP_BASE_IMAGE=\"${HADOOP_BASE_IMAGE:-prestodev/hdp2.6-hive}\"\n+     */\n+    public Optional<String> getHadoopBaseImage()\n+    {\n+        return Optional.of(DEFAULT_HADOOP_BASE_IMAGE);\n+    }\n+\n+    public List<String> getExcludedGroups()\n+    {\n+        return ImmutableList.of();\n+    }\n+\n+    /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA1OTk3OA=="}, "originalCommit": null, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzA4MzE5OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/suite/SuiteModule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNToxNjoyNFrOHEGdPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNToxNjoyNFrOHEGdPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA2MjE0Mw==", "bodyText": "Why do we need additionalSuites.\nCan't we just do\nMapBinder<String, Suite> suites = newMapBinder(binder, String.class, Suite.class);\nsuites.addBinding(...)\n\nin some other module if we need to extend the list?", "url": "https://github.com/trinodb/trino/pull/4895#discussion_r474062143", "createdAt": "2020-08-20T15:16:24Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/suite/SuiteModule.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.suite;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Module;\n+import com.google.inject.multibindings.MapBinder;\n+\n+import static com.google.inject.multibindings.MapBinder.newMapBinder;\n+import static io.prestosql.tests.product.launcher.suite.Suites.nameForConfigClass;\n+import static io.prestosql.tests.product.launcher.suite.Suites.nameForSuiteClass;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class SuiteModule\n+        implements Module\n+{\n+    public static final String BASE_SUITES_PACKAGE = \"io.prestosql.tests.product.launcher.suite\";\n+    private final Module additionalSuites;\n+\n+    public SuiteModule(Module additionalSuites)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NjUxOTcwOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/suite/SuiteTestRun.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMDowNzozM1rOHEnhOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODo0NToxMVrOHGN8RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYwMzgzMg==", "bodyText": "Do we need translation from suite definition to tempto options?\nI think in the suite definition we could instead:\ntestOnEnvironment(SinglenodeHiveImpersonation.class)\n        .withGroups(\"storage_formats\", \"hdfs_impersonation\")\n        .build(),\n\ndo something lower-level:\ntestOnEnvironment(SinglenodeHiveImpersonation.class)\n        .withTemptoOptions(\"-g\", \"storage_formats,hdfs_impersonation\")\n        .build(),\n\n\nthe semantic DSL is nice (so we have - on this)\nsimplicity is nice (we have + on this)\nit will allow to easily print proper test run command when suite fails (no translation here needed!)\nno change required in this class when tempto gains new options\n\nWDYT?", "url": "https://github.com/trinodb/trino/pull/4895#discussion_r474603832", "createdAt": "2020-08-21T10:07:33Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/suite/SuiteTestRun.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.suite;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.base.Splitter;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import io.prestosql.tests.product.launcher.env.EnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.Environments;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class SuiteTestRun\n+{\n+    private static final String SKIP_TEST_ARGUMENT = \"DISTRO_SKIP_TEST\";\n+    private static final String SKIP_GROUP_ARGUMENT = \"DISTRO_SKIP_GROUP\";\n+\n+    private static final String TEMPTO_TEST_ARG = \"-t\";\n+    private static final String TEMPTO_GROUP_ARG = \"-g\";\n+    private static final String TEMPTO_EXCLUDE_GROUP_ARG = \"-x\";\n+    private static final String TEMPTO_EXCLUDE_TEST_ARG = \"-t\";\n+\n+    private final Class<? extends EnvironmentProvider> environment;\n+    private final List<String> groups;\n+    private final List<String> excludedGroups;\n+    private final List<String> excludedTests;\n+    private final List<String> tests;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4MjY0OQ==", "bodyText": "@findepi that has one disadvantage. Some of the suite configurations define excluded groups / tests that we need to merge with test run exclusions.\nActually I've added printing test run command with parameters for convenience \ud83d\udc4d", "url": "https://github.com/trinodb/trino/pull/4895#discussion_r474782649", "createdAt": "2020-08-21T15:50:11Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/suite/SuiteTestRun.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.suite;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.base.Splitter;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import io.prestosql.tests.product.launcher.env.EnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.Environments;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class SuiteTestRun\n+{\n+    private static final String SKIP_TEST_ARGUMENT = \"DISTRO_SKIP_TEST\";\n+    private static final String SKIP_GROUP_ARGUMENT = \"DISTRO_SKIP_GROUP\";\n+\n+    private static final String TEMPTO_TEST_ARG = \"-t\";\n+    private static final String TEMPTO_GROUP_ARG = \"-g\";\n+    private static final String TEMPTO_EXCLUDE_GROUP_ARG = \"-x\";\n+    private static final String TEMPTO_EXCLUDE_TEST_ARG = \"-t\";\n+\n+    private final Class<? extends EnvironmentProvider> environment;\n+    private final List<String> groups;\n+    private final List<String> excludedGroups;\n+    private final List<String> excludedTests;\n+    private final List<String> tests;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYwMzgzMg=="}, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4MTkyNA==", "bodyText": "and suite describe to list all test runs with corresponding configuration", "url": "https://github.com/trinodb/trino/pull/4895#discussion_r476281924", "createdAt": "2020-08-25T08:45:11Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/suite/SuiteTestRun.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.suite;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.base.Splitter;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import io.prestosql.tests.product.launcher.env.EnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.Environments;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class SuiteTestRun\n+{\n+    private static final String SKIP_TEST_ARGUMENT = \"DISTRO_SKIP_TEST\";\n+    private static final String SKIP_GROUP_ARGUMENT = \"DISTRO_SKIP_GROUP\";\n+\n+    private static final String TEMPTO_TEST_ARG = \"-t\";\n+    private static final String TEMPTO_GROUP_ARG = \"-g\";\n+    private static final String TEMPTO_EXCLUDE_GROUP_ARG = \"-x\";\n+    private static final String TEMPTO_EXCLUDE_TEST_ARG = \"-t\";\n+\n+    private final Class<? extends EnvironmentProvider> environment;\n+    private final List<String> groups;\n+    private final List<String> excludedGroups;\n+    private final List<String> excludedTests;\n+    private final List<String> tests;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYwMzgzMg=="}, "originalCommit": null, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NjUzNTEyOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/suite/configs/ConfigEmpty.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMDoxMjozNlrOHEnqbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMDoxMjozNlrOHEnqbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYwNjE5MA==", "bodyText": "The config-empty was called \"empty\" because it did not provide any configs, calling into defaults embedded in test run.\nAs we go more object way, we should rename it to ConfigDefault?\nMaybe we merged SuiteConfig and ConfigDefault into one class (\"ConfigDefault\" acting as a cofig and base class for config as well -- so that defaults are defaults always)", "url": "https://github.com/trinodb/trino/pull/4895#discussion_r474606190", "createdAt": "2020-08-21T10:12:36Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/suite/configs/ConfigEmpty.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.suite.configs;\n+\n+import io.prestosql.tests.product.launcher.suite.SuiteConfig;\n+\n+public class ConfigEmpty", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjQ1MzExOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/suite/SuiteTestRun.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwOToxMzo0MFrOHFbQ9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjo0OToxOVrOHFtvHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ1MTYzNw==", "bodyText": "both test and exclude?", "url": "https://github.com/trinodb/trino/pull/4895#discussion_r475451637", "createdAt": "2020-08-24T09:13:40Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/suite/SuiteTestRun.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.suite;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.base.Splitter;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import io.prestosql.tests.product.launcher.env.EnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.Environments;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class SuiteTestRun\n+{\n+    private static final String SKIP_TEST_ARGUMENT = \"DISTRO_SKIP_TEST\";\n+    private static final String SKIP_GROUP_ARGUMENT = \"DISTRO_SKIP_GROUP\";\n+\n+    private static final String TEMPTO_TEST_ARG = \"-t\";\n+    private static final String TEMPTO_GROUP_ARG = \"-g\";\n+    private static final String TEMPTO_EXCLUDE_GROUP_ARG = \"-x\";\n+    private static final String TEMPTO_EXCLUDE_TEST_ARG = \"-t\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc1NDI2OQ==", "bodyText": "woah, good catch \ud83d\udc4d", "url": "https://github.com/trinodb/trino/pull/4895#discussion_r475754269", "createdAt": "2020-08-24T16:49:19Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/suite/SuiteTestRun.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.suite;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.base.Splitter;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import io.prestosql.tests.product.launcher.env.EnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.Environments;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class SuiteTestRun\n+{\n+    private static final String SKIP_TEST_ARGUMENT = \"DISTRO_SKIP_TEST\";\n+    private static final String SKIP_GROUP_ARGUMENT = \"DISTRO_SKIP_GROUP\";\n+\n+    private static final String TEMPTO_TEST_ARG = \"-t\";\n+    private static final String TEMPTO_GROUP_ARG = \"-g\";\n+    private static final String TEMPTO_EXCLUDE_GROUP_ARG = \"-x\";\n+    private static final String TEMPTO_EXCLUDE_TEST_ARG = \"-t\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ1MTYzNw=="}, "originalCommit": null, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzQzNDY4OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/SuiteDescribe.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODowMjowN1rOHGMQLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOTowMzozOVrOHGOvqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI1NDI1Mg==", "bodyText": "Squash with first commit?", "url": "https://github.com/trinodb/trino/pull/4895#discussion_r476254252", "createdAt": "2020-08-25T08:02:07Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/SuiteDescribe.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.cli;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+import com.google.inject.Module;\n+import io.airlift.airline.Command;\n+import io.airlift.airline.Option;\n+import io.prestosql.tests.product.launcher.Extensions;\n+import io.prestosql.tests.product.launcher.LauncherModule;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.suite.Suite;\n+import io.prestosql.tests.product.launcher.suite.SuiteConfig;\n+import io.prestosql.tests.product.launcher.suite.SuiteFactory;\n+import io.prestosql.tests.product.launcher.suite.SuiteModule;\n+import io.prestosql.tests.product.launcher.suite.SuiteTestRun;\n+\n+import javax.inject.Inject;\n+\n+import java.io.FileDescriptor;\n+import java.io.FileOutputStream;\n+import java.io.PrintStream;\n+import java.io.UnsupportedEncodingException;\n+import java.nio.charset.Charset;\n+\n+import static io.prestosql.tests.product.launcher.cli.Commands.runCommand;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+@Command(name = \"describe\", description = \"describe tests suite\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI5NTA4MQ==", "bodyText": "Sure.", "url": "https://github.com/trinodb/trino/pull/4895#discussion_r476295081", "createdAt": "2020-08-25T09:03:39Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/SuiteDescribe.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.cli;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+import com.google.inject.Module;\n+import io.airlift.airline.Command;\n+import io.airlift.airline.Option;\n+import io.prestosql.tests.product.launcher.Extensions;\n+import io.prestosql.tests.product.launcher.LauncherModule;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.suite.Suite;\n+import io.prestosql.tests.product.launcher.suite.SuiteConfig;\n+import io.prestosql.tests.product.launcher.suite.SuiteFactory;\n+import io.prestosql.tests.product.launcher.suite.SuiteModule;\n+import io.prestosql.tests.product.launcher.suite.SuiteTestRun;\n+\n+import javax.inject.Inject;\n+\n+import java.io.FileDescriptor;\n+import java.io.FileOutputStream;\n+import java.io.PrintStream;\n+import java.io.UnsupportedEncodingException;\n+import java.nio.charset.Charset;\n+\n+import static io.prestosql.tests.product.launcher.cli.Commands.runCommand;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+@Command(name = \"describe\", description = \"describe tests suite\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI1NDI1Mg=="}, "originalCommit": null, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzQ2MjUxOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/OptionsPrinter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODowNzo1NVrOHGMhmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOTowMzo1NlrOHGOwvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI1ODcxNQ==", "bodyText": "could you extract a few methods here to it is not indented such deeply?\nAlso we could have some simple unit test for that.", "url": "https://github.com/trinodb/trino/pull/4895#discussion_r476258715", "createdAt": "2020-08-25T08:07:55Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/OptionsPrinter.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.cli;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.airline.Arguments;\n+import io.airlift.airline.Option;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.List;\n+\n+import static java.lang.String.format;\n+\n+public final class OptionsPrinter\n+{\n+    private OptionsPrinter() {}\n+\n+    public static String toString(Object... objects)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI5NTM1OQ==", "bodyText": "Sure. I'll add unit for that.", "url": "https://github.com/trinodb/trino/pull/4895#discussion_r476295359", "createdAt": "2020-08-25T09:03:56Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/OptionsPrinter.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.cli;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.airline.Arguments;\n+import io.airlift.airline.Option;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.List;\n+\n+import static java.lang.String.format;\n+\n+public final class OptionsPrinter\n+{\n+    private OptionsPrinter() {}\n+\n+    public static String toString(Object... objects)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI1ODcxNQ=="}, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzU3Njk1OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/SuiteRun.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODozNjoyMlrOHGNmSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOTowNDozNFrOHGOzIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI3NjI5OQ==", "bodyText": "It is not obvious to me what drives the distinction whether we use Logger or PrintStream to generate output for caller.", "url": "https://github.com/trinodb/trino/pull/4895#discussion_r476276299", "createdAt": "2020-08-25T08:36:22Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/SuiteRun.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.cli;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+import com.google.inject.Module;\n+import io.airlift.airline.Command;\n+import io.airlift.airline.Option;\n+import io.airlift.log.Logger;\n+import io.airlift.units.Duration;\n+import io.prestosql.tests.product.launcher.Extensions;\n+import io.prestosql.tests.product.launcher.LauncherModule;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.env.EnvironmentFactory;\n+import io.prestosql.tests.product.launcher.env.EnvironmentModule;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.suite.Suite;\n+import io.prestosql.tests.product.launcher.suite.SuiteConfig;\n+import io.prestosql.tests.product.launcher.suite.SuiteFactory;\n+import io.prestosql.tests.product.launcher.suite.SuiteModule;\n+import io.prestosql.tests.product.launcher.suite.SuiteTestRun;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static io.airlift.units.Duration.nanosSince;\n+import static io.prestosql.tests.product.launcher.cli.Commands.runCommand;\n+import static java.lang.System.exit;\n+import static java.util.Objects.requireNonNull;\n+\n+@Command(name = \"run\", description = \"run suite tests\")\n+public class SuiteRun\n+        implements Runnable\n+{\n+    private static final Logger log = Logger.get(SuiteRun.class);\n+\n+    private final Module additionalEnvironments;\n+    private final Module additionalSuites;\n+\n+    @Inject\n+    public SuiteRun.SuiteRunOptions suiteRunOptions = new SuiteRun.SuiteRunOptions();\n+\n+    @Inject\n+    public EnvironmentOptions environmentOptions = new EnvironmentOptions();\n+\n+    public SuiteRun(Extensions extensions)\n+    {\n+        this.additionalEnvironments = requireNonNull(extensions, \"extensions is null\").getAdditionalEnvironments();\n+        this.additionalSuites = requireNonNull(extensions, \"extensions is null\").getAdditionalSuites();\n+    }\n+\n+    @Override\n+    public void run()\n+    {\n+        Module suiteModule = new SuiteModule(additionalSuites);\n+        SuiteConfig config = getSuiteConfig(suiteModule, suiteRunOptions.config);\n+\n+        runCommand(\n+                ImmutableList.<Module>builder()\n+                        .add(new LauncherModule())\n+                        .add(suiteModule)\n+                        .add(new EnvironmentModule(additionalEnvironments))\n+                        .add(suiteRunOptions.toModule())\n+                        .add(environmentOptions.forSuiteConfig(config).toModule())\n+                        .build(),\n+                SuiteRun.Execution.class);\n+    }\n+\n+    private static SuiteConfig getSuiteConfig(Module suiteModule, String configName)\n+    {\n+        Injector injector = Guice.createInjector(suiteModule);\n+        SuiteFactory instance = injector.getInstance(SuiteFactory.class);\n+        return instance.getSuiteConfig(configName);\n+    }\n+\n+    public static class SuiteRunOptions\n+    {\n+        @Option(name = \"--suite\", title = \"suite\", description = \"the name of the suite to run\", required = true)\n+        public String suite;\n+\n+        @Option(name = \"--suite-config\", title = \"suite-config\", description = \"the name of the suite config to use\")\n+        public String config = \"config-default\";\n+\n+        @Option(name = \"--test-jar\", title = \"test jar\", description = \"path to test jar\")\n+        public File testJar = new File(\"presto-product-tests/target/presto-product-tests-${project.version}-executable.jar\");\n+\n+        public Module toModule()\n+        {\n+            return binder -> binder.bind(SuiteRun.SuiteRunOptions.class).toInstance(this);\n+        }\n+    }\n+\n+    public static class Execution\n+            implements Runnable\n+    {\n+        private final SuiteRunOptions suiteRunOptions;\n+        private final EnvironmentOptions environmentOptions;\n+        private final PathResolver pathResolver;\n+        private final SuiteFactory suiteFactory;\n+        private final EnvironmentFactory environmentFactory;\n+\n+        @Inject\n+        public Execution(SuiteRunOptions suiteRunOptions, EnvironmentOptions environmentOptions, PathResolver pathResolver, SuiteFactory suiteFactory, EnvironmentFactory environmentFactory)\n+        {\n+            this.suiteRunOptions = requireNonNull(suiteRunOptions, \"suiteRunOptions is null\");\n+            this.environmentOptions = requireNonNull(environmentOptions, \"environmentOptions is null\");\n+            this.pathResolver = requireNonNull(pathResolver, \"pathResolver is null\");\n+            this.suiteFactory = requireNonNull(suiteFactory, \"suiteFactory is null\");\n+            this.environmentFactory = requireNonNull(environmentFactory, \"environmentFactory is null\");\n+        }\n+\n+        @Override\n+        public void run()\n+        {\n+            Suite suite = suiteFactory.getSuite(suiteRunOptions.suite);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI5NTk3MA==", "bodyText": "Lack of logger's logger name and date - it makes copying content much easier (no need to remove prefix)", "url": "https://github.com/trinodb/trino/pull/4895#discussion_r476295970", "createdAt": "2020-08-25T09:04:34Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/SuiteRun.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.cli;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+import com.google.inject.Module;\n+import io.airlift.airline.Command;\n+import io.airlift.airline.Option;\n+import io.airlift.log.Logger;\n+import io.airlift.units.Duration;\n+import io.prestosql.tests.product.launcher.Extensions;\n+import io.prestosql.tests.product.launcher.LauncherModule;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.env.EnvironmentFactory;\n+import io.prestosql.tests.product.launcher.env.EnvironmentModule;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.suite.Suite;\n+import io.prestosql.tests.product.launcher.suite.SuiteConfig;\n+import io.prestosql.tests.product.launcher.suite.SuiteFactory;\n+import io.prestosql.tests.product.launcher.suite.SuiteModule;\n+import io.prestosql.tests.product.launcher.suite.SuiteTestRun;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static io.airlift.units.Duration.nanosSince;\n+import static io.prestosql.tests.product.launcher.cli.Commands.runCommand;\n+import static java.lang.System.exit;\n+import static java.util.Objects.requireNonNull;\n+\n+@Command(name = \"run\", description = \"run suite tests\")\n+public class SuiteRun\n+        implements Runnable\n+{\n+    private static final Logger log = Logger.get(SuiteRun.class);\n+\n+    private final Module additionalEnvironments;\n+    private final Module additionalSuites;\n+\n+    @Inject\n+    public SuiteRun.SuiteRunOptions suiteRunOptions = new SuiteRun.SuiteRunOptions();\n+\n+    @Inject\n+    public EnvironmentOptions environmentOptions = new EnvironmentOptions();\n+\n+    public SuiteRun(Extensions extensions)\n+    {\n+        this.additionalEnvironments = requireNonNull(extensions, \"extensions is null\").getAdditionalEnvironments();\n+        this.additionalSuites = requireNonNull(extensions, \"extensions is null\").getAdditionalSuites();\n+    }\n+\n+    @Override\n+    public void run()\n+    {\n+        Module suiteModule = new SuiteModule(additionalSuites);\n+        SuiteConfig config = getSuiteConfig(suiteModule, suiteRunOptions.config);\n+\n+        runCommand(\n+                ImmutableList.<Module>builder()\n+                        .add(new LauncherModule())\n+                        .add(suiteModule)\n+                        .add(new EnvironmentModule(additionalEnvironments))\n+                        .add(suiteRunOptions.toModule())\n+                        .add(environmentOptions.forSuiteConfig(config).toModule())\n+                        .build(),\n+                SuiteRun.Execution.class);\n+    }\n+\n+    private static SuiteConfig getSuiteConfig(Module suiteModule, String configName)\n+    {\n+        Injector injector = Guice.createInjector(suiteModule);\n+        SuiteFactory instance = injector.getInstance(SuiteFactory.class);\n+        return instance.getSuiteConfig(configName);\n+    }\n+\n+    public static class SuiteRunOptions\n+    {\n+        @Option(name = \"--suite\", title = \"suite\", description = \"the name of the suite to run\", required = true)\n+        public String suite;\n+\n+        @Option(name = \"--suite-config\", title = \"suite-config\", description = \"the name of the suite config to use\")\n+        public String config = \"config-default\";\n+\n+        @Option(name = \"--test-jar\", title = \"test jar\", description = \"path to test jar\")\n+        public File testJar = new File(\"presto-product-tests/target/presto-product-tests-${project.version}-executable.jar\");\n+\n+        public Module toModule()\n+        {\n+            return binder -> binder.bind(SuiteRun.SuiteRunOptions.class).toInstance(this);\n+        }\n+    }\n+\n+    public static class Execution\n+            implements Runnable\n+    {\n+        private final SuiteRunOptions suiteRunOptions;\n+        private final EnvironmentOptions environmentOptions;\n+        private final PathResolver pathResolver;\n+        private final SuiteFactory suiteFactory;\n+        private final EnvironmentFactory environmentFactory;\n+\n+        @Inject\n+        public Execution(SuiteRunOptions suiteRunOptions, EnvironmentOptions environmentOptions, PathResolver pathResolver, SuiteFactory suiteFactory, EnvironmentFactory environmentFactory)\n+        {\n+            this.suiteRunOptions = requireNonNull(suiteRunOptions, \"suiteRunOptions is null\");\n+            this.environmentOptions = requireNonNull(environmentOptions, \"environmentOptions is null\");\n+            this.pathResolver = requireNonNull(pathResolver, \"pathResolver is null\");\n+            this.suiteFactory = requireNonNull(suiteFactory, \"suiteFactory is null\");\n+            this.environmentFactory = requireNonNull(environmentFactory, \"environmentFactory is null\");\n+        }\n+\n+        @Override\n+        public void run()\n+        {\n+            Suite suite = suiteFactory.getSuite(suiteRunOptions.suite);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI3NjI5OQ=="}, "originalCommit": null, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzU4MTEzOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/SuiteRun.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODozNzoyNlrOHGNo1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOTowOToxMFrOHGO_aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI3Njk1MQ==", "bodyText": "typo: succeeded", "url": "https://github.com/trinodb/trino/pull/4895#discussion_r476276951", "createdAt": "2020-08-25T08:37:26Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/SuiteRun.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.cli;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+import com.google.inject.Module;\n+import io.airlift.airline.Command;\n+import io.airlift.airline.Option;\n+import io.airlift.log.Logger;\n+import io.airlift.units.Duration;\n+import io.prestosql.tests.product.launcher.Extensions;\n+import io.prestosql.tests.product.launcher.LauncherModule;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.env.EnvironmentFactory;\n+import io.prestosql.tests.product.launcher.env.EnvironmentModule;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.suite.Suite;\n+import io.prestosql.tests.product.launcher.suite.SuiteConfig;\n+import io.prestosql.tests.product.launcher.suite.SuiteFactory;\n+import io.prestosql.tests.product.launcher.suite.SuiteModule;\n+import io.prestosql.tests.product.launcher.suite.SuiteTestRun;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static io.airlift.units.Duration.nanosSince;\n+import static io.prestosql.tests.product.launcher.cli.Commands.runCommand;\n+import static java.lang.System.exit;\n+import static java.util.Objects.requireNonNull;\n+\n+@Command(name = \"run\", description = \"run suite tests\")\n+public class SuiteRun\n+        implements Runnable\n+{\n+    private static final Logger log = Logger.get(SuiteRun.class);\n+\n+    private final Module additionalEnvironments;\n+    private final Module additionalSuites;\n+\n+    @Inject\n+    public SuiteRun.SuiteRunOptions suiteRunOptions = new SuiteRun.SuiteRunOptions();\n+\n+    @Inject\n+    public EnvironmentOptions environmentOptions = new EnvironmentOptions();\n+\n+    public SuiteRun(Extensions extensions)\n+    {\n+        this.additionalEnvironments = requireNonNull(extensions, \"extensions is null\").getAdditionalEnvironments();\n+        this.additionalSuites = requireNonNull(extensions, \"extensions is null\").getAdditionalSuites();\n+    }\n+\n+    @Override\n+    public void run()\n+    {\n+        Module suiteModule = new SuiteModule(additionalSuites);\n+        SuiteConfig config = getSuiteConfig(suiteModule, suiteRunOptions.config);\n+\n+        runCommand(\n+                ImmutableList.<Module>builder()\n+                        .add(new LauncherModule())\n+                        .add(suiteModule)\n+                        .add(new EnvironmentModule(additionalEnvironments))\n+                        .add(suiteRunOptions.toModule())\n+                        .add(environmentOptions.forSuiteConfig(config).toModule())\n+                        .build(),\n+                SuiteRun.Execution.class);\n+    }\n+\n+    private static SuiteConfig getSuiteConfig(Module suiteModule, String configName)\n+    {\n+        Injector injector = Guice.createInjector(suiteModule);\n+        SuiteFactory instance = injector.getInstance(SuiteFactory.class);\n+        return instance.getSuiteConfig(configName);\n+    }\n+\n+    public static class SuiteRunOptions\n+    {\n+        @Option(name = \"--suite\", title = \"suite\", description = \"the name of the suite to run\", required = true)\n+        public String suite;\n+\n+        @Option(name = \"--suite-config\", title = \"suite-config\", description = \"the name of the suite config to use\")\n+        public String config = \"config-default\";\n+\n+        @Option(name = \"--test-jar\", title = \"test jar\", description = \"path to test jar\")\n+        public File testJar = new File(\"presto-product-tests/target/presto-product-tests-${project.version}-executable.jar\");\n+\n+        public Module toModule()\n+        {\n+            return binder -> binder.bind(SuiteRun.SuiteRunOptions.class).toInstance(this);\n+        }\n+    }\n+\n+    public static class Execution\n+            implements Runnable\n+    {\n+        private final SuiteRunOptions suiteRunOptions;\n+        private final EnvironmentOptions environmentOptions;\n+        private final PathResolver pathResolver;\n+        private final SuiteFactory suiteFactory;\n+        private final EnvironmentFactory environmentFactory;\n+\n+        @Inject\n+        public Execution(SuiteRunOptions suiteRunOptions, EnvironmentOptions environmentOptions, PathResolver pathResolver, SuiteFactory suiteFactory, EnvironmentFactory environmentFactory)\n+        {\n+            this.suiteRunOptions = requireNonNull(suiteRunOptions, \"suiteRunOptions is null\");\n+            this.environmentOptions = requireNonNull(environmentOptions, \"environmentOptions is null\");\n+            this.pathResolver = requireNonNull(pathResolver, \"pathResolver is null\");\n+            this.suiteFactory = requireNonNull(suiteFactory, \"suiteFactory is null\");\n+            this.environmentFactory = requireNonNull(environmentFactory, \"environmentFactory is null\");\n+        }\n+\n+        @Override\n+        public void run()\n+        {\n+            Suite suite = suiteFactory.getSuite(suiteRunOptions.suite);\n+            SuiteConfig suiteConfig = suiteFactory.getSuiteConfig(suiteRunOptions.config);\n+            List<SuiteTestRun> suiteTestRuns = suite.getTestRuns(suiteConfig);\n+\n+            log.info(\"Starting suite '%s' with config '%s' and test runs: \", suite.getSuiteName(), suiteConfig.getConfigName());\n+            suiteTestRuns.forEach(job ->\n+                    log.info(\" * environment '%s': groups: %s, excluded groups: %s, tests: %s, excluded tests: %s\",\n+                            job.getEnvironmentName(), job.getGroups(), job.getExcludedGroups(), job.getTests(), job.getExcludedTests()));\n+\n+            long suiteStartTime = System.nanoTime();\n+            ImmutableList.Builder<TestRunResult> results = ImmutableList.builder();\n+\n+            for (SuiteTestRun testRun : suiteTestRuns) {\n+                results.add(executeSuiteTestRun(testRun, suiteConfig));\n+            }\n+\n+            List<TestRunResult> testRunsResults = results.build();\n+            boolean allSuccessful = testRunsResults.stream()\n+                    .allMatch(TestRunResult::isSuccessful);\n+\n+            if (allSuccessful) {\n+                log.info(\"Suite succeded in %s\", nanosSince(suiteStartTime));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI3ODIwMA==", "bodyText": "Also please log time in something nicer than nanoseconds. Like (1h 10m 12.343s)", "url": "https://github.com/trinodb/trino/pull/4895#discussion_r476278200", "createdAt": "2020-08-25T08:39:26Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/SuiteRun.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.cli;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+import com.google.inject.Module;\n+import io.airlift.airline.Command;\n+import io.airlift.airline.Option;\n+import io.airlift.log.Logger;\n+import io.airlift.units.Duration;\n+import io.prestosql.tests.product.launcher.Extensions;\n+import io.prestosql.tests.product.launcher.LauncherModule;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.env.EnvironmentFactory;\n+import io.prestosql.tests.product.launcher.env.EnvironmentModule;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.suite.Suite;\n+import io.prestosql.tests.product.launcher.suite.SuiteConfig;\n+import io.prestosql.tests.product.launcher.suite.SuiteFactory;\n+import io.prestosql.tests.product.launcher.suite.SuiteModule;\n+import io.prestosql.tests.product.launcher.suite.SuiteTestRun;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static io.airlift.units.Duration.nanosSince;\n+import static io.prestosql.tests.product.launcher.cli.Commands.runCommand;\n+import static java.lang.System.exit;\n+import static java.util.Objects.requireNonNull;\n+\n+@Command(name = \"run\", description = \"run suite tests\")\n+public class SuiteRun\n+        implements Runnable\n+{\n+    private static final Logger log = Logger.get(SuiteRun.class);\n+\n+    private final Module additionalEnvironments;\n+    private final Module additionalSuites;\n+\n+    @Inject\n+    public SuiteRun.SuiteRunOptions suiteRunOptions = new SuiteRun.SuiteRunOptions();\n+\n+    @Inject\n+    public EnvironmentOptions environmentOptions = new EnvironmentOptions();\n+\n+    public SuiteRun(Extensions extensions)\n+    {\n+        this.additionalEnvironments = requireNonNull(extensions, \"extensions is null\").getAdditionalEnvironments();\n+        this.additionalSuites = requireNonNull(extensions, \"extensions is null\").getAdditionalSuites();\n+    }\n+\n+    @Override\n+    public void run()\n+    {\n+        Module suiteModule = new SuiteModule(additionalSuites);\n+        SuiteConfig config = getSuiteConfig(suiteModule, suiteRunOptions.config);\n+\n+        runCommand(\n+                ImmutableList.<Module>builder()\n+                        .add(new LauncherModule())\n+                        .add(suiteModule)\n+                        .add(new EnvironmentModule(additionalEnvironments))\n+                        .add(suiteRunOptions.toModule())\n+                        .add(environmentOptions.forSuiteConfig(config).toModule())\n+                        .build(),\n+                SuiteRun.Execution.class);\n+    }\n+\n+    private static SuiteConfig getSuiteConfig(Module suiteModule, String configName)\n+    {\n+        Injector injector = Guice.createInjector(suiteModule);\n+        SuiteFactory instance = injector.getInstance(SuiteFactory.class);\n+        return instance.getSuiteConfig(configName);\n+    }\n+\n+    public static class SuiteRunOptions\n+    {\n+        @Option(name = \"--suite\", title = \"suite\", description = \"the name of the suite to run\", required = true)\n+        public String suite;\n+\n+        @Option(name = \"--suite-config\", title = \"suite-config\", description = \"the name of the suite config to use\")\n+        public String config = \"config-default\";\n+\n+        @Option(name = \"--test-jar\", title = \"test jar\", description = \"path to test jar\")\n+        public File testJar = new File(\"presto-product-tests/target/presto-product-tests-${project.version}-executable.jar\");\n+\n+        public Module toModule()\n+        {\n+            return binder -> binder.bind(SuiteRun.SuiteRunOptions.class).toInstance(this);\n+        }\n+    }\n+\n+    public static class Execution\n+            implements Runnable\n+    {\n+        private final SuiteRunOptions suiteRunOptions;\n+        private final EnvironmentOptions environmentOptions;\n+        private final PathResolver pathResolver;\n+        private final SuiteFactory suiteFactory;\n+        private final EnvironmentFactory environmentFactory;\n+\n+        @Inject\n+        public Execution(SuiteRunOptions suiteRunOptions, EnvironmentOptions environmentOptions, PathResolver pathResolver, SuiteFactory suiteFactory, EnvironmentFactory environmentFactory)\n+        {\n+            this.suiteRunOptions = requireNonNull(suiteRunOptions, \"suiteRunOptions is null\");\n+            this.environmentOptions = requireNonNull(environmentOptions, \"environmentOptions is null\");\n+            this.pathResolver = requireNonNull(pathResolver, \"pathResolver is null\");\n+            this.suiteFactory = requireNonNull(suiteFactory, \"suiteFactory is null\");\n+            this.environmentFactory = requireNonNull(environmentFactory, \"environmentFactory is null\");\n+        }\n+\n+        @Override\n+        public void run()\n+        {\n+            Suite suite = suiteFactory.getSuite(suiteRunOptions.suite);\n+            SuiteConfig suiteConfig = suiteFactory.getSuiteConfig(suiteRunOptions.config);\n+            List<SuiteTestRun> suiteTestRuns = suite.getTestRuns(suiteConfig);\n+\n+            log.info(\"Starting suite '%s' with config '%s' and test runs: \", suite.getSuiteName(), suiteConfig.getConfigName());\n+            suiteTestRuns.forEach(job ->\n+                    log.info(\" * environment '%s': groups: %s, excluded groups: %s, tests: %s, excluded tests: %s\",\n+                            job.getEnvironmentName(), job.getGroups(), job.getExcludedGroups(), job.getTests(), job.getExcludedTests()));\n+\n+            long suiteStartTime = System.nanoTime();\n+            ImmutableList.Builder<TestRunResult> results = ImmutableList.builder();\n+\n+            for (SuiteTestRun testRun : suiteTestRuns) {\n+                results.add(executeSuiteTestRun(testRun, suiteConfig));\n+            }\n+\n+            List<TestRunResult> testRunsResults = results.build();\n+            boolean allSuccessful = testRunsResults.stream()\n+                    .allMatch(TestRunResult::isSuccessful);\n+\n+            if (allSuccessful) {\n+                log.info(\"Suite succeded in %s\", nanosSince(suiteStartTime));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI3Njk1MQ=="}, "originalCommit": null, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI5OTExMw==", "bodyText": "Actually it's airlift Duration's nanosSince method which returns Duration which in turn has nice toString() implementation. So nanos are not displayed here \ud83d\udc4d\ud83c\udffb", "url": "https://github.com/trinodb/trino/pull/4895#discussion_r476299113", "createdAt": "2020-08-25T09:09:10Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/SuiteRun.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.cli;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+import com.google.inject.Module;\n+import io.airlift.airline.Command;\n+import io.airlift.airline.Option;\n+import io.airlift.log.Logger;\n+import io.airlift.units.Duration;\n+import io.prestosql.tests.product.launcher.Extensions;\n+import io.prestosql.tests.product.launcher.LauncherModule;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.env.EnvironmentFactory;\n+import io.prestosql.tests.product.launcher.env.EnvironmentModule;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.suite.Suite;\n+import io.prestosql.tests.product.launcher.suite.SuiteConfig;\n+import io.prestosql.tests.product.launcher.suite.SuiteFactory;\n+import io.prestosql.tests.product.launcher.suite.SuiteModule;\n+import io.prestosql.tests.product.launcher.suite.SuiteTestRun;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static io.airlift.units.Duration.nanosSince;\n+import static io.prestosql.tests.product.launcher.cli.Commands.runCommand;\n+import static java.lang.System.exit;\n+import static java.util.Objects.requireNonNull;\n+\n+@Command(name = \"run\", description = \"run suite tests\")\n+public class SuiteRun\n+        implements Runnable\n+{\n+    private static final Logger log = Logger.get(SuiteRun.class);\n+\n+    private final Module additionalEnvironments;\n+    private final Module additionalSuites;\n+\n+    @Inject\n+    public SuiteRun.SuiteRunOptions suiteRunOptions = new SuiteRun.SuiteRunOptions();\n+\n+    @Inject\n+    public EnvironmentOptions environmentOptions = new EnvironmentOptions();\n+\n+    public SuiteRun(Extensions extensions)\n+    {\n+        this.additionalEnvironments = requireNonNull(extensions, \"extensions is null\").getAdditionalEnvironments();\n+        this.additionalSuites = requireNonNull(extensions, \"extensions is null\").getAdditionalSuites();\n+    }\n+\n+    @Override\n+    public void run()\n+    {\n+        Module suiteModule = new SuiteModule(additionalSuites);\n+        SuiteConfig config = getSuiteConfig(suiteModule, suiteRunOptions.config);\n+\n+        runCommand(\n+                ImmutableList.<Module>builder()\n+                        .add(new LauncherModule())\n+                        .add(suiteModule)\n+                        .add(new EnvironmentModule(additionalEnvironments))\n+                        .add(suiteRunOptions.toModule())\n+                        .add(environmentOptions.forSuiteConfig(config).toModule())\n+                        .build(),\n+                SuiteRun.Execution.class);\n+    }\n+\n+    private static SuiteConfig getSuiteConfig(Module suiteModule, String configName)\n+    {\n+        Injector injector = Guice.createInjector(suiteModule);\n+        SuiteFactory instance = injector.getInstance(SuiteFactory.class);\n+        return instance.getSuiteConfig(configName);\n+    }\n+\n+    public static class SuiteRunOptions\n+    {\n+        @Option(name = \"--suite\", title = \"suite\", description = \"the name of the suite to run\", required = true)\n+        public String suite;\n+\n+        @Option(name = \"--suite-config\", title = \"suite-config\", description = \"the name of the suite config to use\")\n+        public String config = \"config-default\";\n+\n+        @Option(name = \"--test-jar\", title = \"test jar\", description = \"path to test jar\")\n+        public File testJar = new File(\"presto-product-tests/target/presto-product-tests-${project.version}-executable.jar\");\n+\n+        public Module toModule()\n+        {\n+            return binder -> binder.bind(SuiteRun.SuiteRunOptions.class).toInstance(this);\n+        }\n+    }\n+\n+    public static class Execution\n+            implements Runnable\n+    {\n+        private final SuiteRunOptions suiteRunOptions;\n+        private final EnvironmentOptions environmentOptions;\n+        private final PathResolver pathResolver;\n+        private final SuiteFactory suiteFactory;\n+        private final EnvironmentFactory environmentFactory;\n+\n+        @Inject\n+        public Execution(SuiteRunOptions suiteRunOptions, EnvironmentOptions environmentOptions, PathResolver pathResolver, SuiteFactory suiteFactory, EnvironmentFactory environmentFactory)\n+        {\n+            this.suiteRunOptions = requireNonNull(suiteRunOptions, \"suiteRunOptions is null\");\n+            this.environmentOptions = requireNonNull(environmentOptions, \"environmentOptions is null\");\n+            this.pathResolver = requireNonNull(pathResolver, \"pathResolver is null\");\n+            this.suiteFactory = requireNonNull(suiteFactory, \"suiteFactory is null\");\n+            this.environmentFactory = requireNonNull(environmentFactory, \"environmentFactory is null\");\n+        }\n+\n+        @Override\n+        public void run()\n+        {\n+            Suite suite = suiteFactory.getSuite(suiteRunOptions.suite);\n+            SuiteConfig suiteConfig = suiteFactory.getSuiteConfig(suiteRunOptions.config);\n+            List<SuiteTestRun> suiteTestRuns = suite.getTestRuns(suiteConfig);\n+\n+            log.info(\"Starting suite '%s' with config '%s' and test runs: \", suite.getSuiteName(), suiteConfig.getConfigName());\n+            suiteTestRuns.forEach(job ->\n+                    log.info(\" * environment '%s': groups: %s, excluded groups: %s, tests: %s, excluded tests: %s\",\n+                            job.getEnvironmentName(), job.getGroups(), job.getExcludedGroups(), job.getTests(), job.getExcludedTests()));\n+\n+            long suiteStartTime = System.nanoTime();\n+            ImmutableList.Builder<TestRunResult> results = ImmutableList.builder();\n+\n+            for (SuiteTestRun testRun : suiteTestRuns) {\n+                results.add(executeSuiteTestRun(testRun, suiteConfig));\n+            }\n+\n+            List<TestRunResult> testRunsResults = results.build();\n+            boolean allSuccessful = testRunsResults.stream()\n+                    .allMatch(TestRunResult::isSuccessful);\n+\n+            if (allSuccessful) {\n+                log.info(\"Suite succeded in %s\", nanosSince(suiteStartTime));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI3Njk1MQ=="}, "originalCommit": null, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzU5NjQ5OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/SuiteRun.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODo0MTowMlrOHGNyIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODo0MTowMlrOHGNyIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI3OTMyOA==", "bodyText": "Handle InterruptedException", "url": "https://github.com/trinodb/trino/pull/4895#discussion_r476279328", "createdAt": "2020-08-25T08:41:02Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/SuiteRun.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.cli;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+import com.google.inject.Module;\n+import io.airlift.airline.Command;\n+import io.airlift.airline.Option;\n+import io.airlift.log.Logger;\n+import io.airlift.units.Duration;\n+import io.prestosql.tests.product.launcher.Extensions;\n+import io.prestosql.tests.product.launcher.LauncherModule;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.env.EnvironmentFactory;\n+import io.prestosql.tests.product.launcher.env.EnvironmentModule;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.suite.Suite;\n+import io.prestosql.tests.product.launcher.suite.SuiteConfig;\n+import io.prestosql.tests.product.launcher.suite.SuiteFactory;\n+import io.prestosql.tests.product.launcher.suite.SuiteModule;\n+import io.prestosql.tests.product.launcher.suite.SuiteTestRun;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static io.airlift.units.Duration.nanosSince;\n+import static io.prestosql.tests.product.launcher.cli.Commands.runCommand;\n+import static java.lang.System.exit;\n+import static java.util.Objects.requireNonNull;\n+\n+@Command(name = \"run\", description = \"run suite tests\")\n+public class SuiteRun\n+        implements Runnable\n+{\n+    private static final Logger log = Logger.get(SuiteRun.class);\n+\n+    private final Module additionalEnvironments;\n+    private final Module additionalSuites;\n+\n+    @Inject\n+    public SuiteRun.SuiteRunOptions suiteRunOptions = new SuiteRun.SuiteRunOptions();\n+\n+    @Inject\n+    public EnvironmentOptions environmentOptions = new EnvironmentOptions();\n+\n+    public SuiteRun(Extensions extensions)\n+    {\n+        this.additionalEnvironments = requireNonNull(extensions, \"extensions is null\").getAdditionalEnvironments();\n+        this.additionalSuites = requireNonNull(extensions, \"extensions is null\").getAdditionalSuites();\n+    }\n+\n+    @Override\n+    public void run()\n+    {\n+        Module suiteModule = new SuiteModule(additionalSuites);\n+        SuiteConfig config = getSuiteConfig(suiteModule, suiteRunOptions.config);\n+\n+        runCommand(\n+                ImmutableList.<Module>builder()\n+                        .add(new LauncherModule())\n+                        .add(suiteModule)\n+                        .add(new EnvironmentModule(additionalEnvironments))\n+                        .add(suiteRunOptions.toModule())\n+                        .add(environmentOptions.forSuiteConfig(config).toModule())\n+                        .build(),\n+                SuiteRun.Execution.class);\n+    }\n+\n+    private static SuiteConfig getSuiteConfig(Module suiteModule, String configName)\n+    {\n+        Injector injector = Guice.createInjector(suiteModule);\n+        SuiteFactory instance = injector.getInstance(SuiteFactory.class);\n+        return instance.getSuiteConfig(configName);\n+    }\n+\n+    public static class SuiteRunOptions\n+    {\n+        @Option(name = \"--suite\", title = \"suite\", description = \"the name of the suite to run\", required = true)\n+        public String suite;\n+\n+        @Option(name = \"--suite-config\", title = \"suite-config\", description = \"the name of the suite config to use\")\n+        public String config = \"config-default\";\n+\n+        @Option(name = \"--test-jar\", title = \"test jar\", description = \"path to test jar\")\n+        public File testJar = new File(\"presto-product-tests/target/presto-product-tests-${project.version}-executable.jar\");\n+\n+        public Module toModule()\n+        {\n+            return binder -> binder.bind(SuiteRun.SuiteRunOptions.class).toInstance(this);\n+        }\n+    }\n+\n+    public static class Execution\n+            implements Runnable\n+    {\n+        private final SuiteRunOptions suiteRunOptions;\n+        private final EnvironmentOptions environmentOptions;\n+        private final PathResolver pathResolver;\n+        private final SuiteFactory suiteFactory;\n+        private final EnvironmentFactory environmentFactory;\n+\n+        @Inject\n+        public Execution(SuiteRunOptions suiteRunOptions, EnvironmentOptions environmentOptions, PathResolver pathResolver, SuiteFactory suiteFactory, EnvironmentFactory environmentFactory)\n+        {\n+            this.suiteRunOptions = requireNonNull(suiteRunOptions, \"suiteRunOptions is null\");\n+            this.environmentOptions = requireNonNull(environmentOptions, \"environmentOptions is null\");\n+            this.pathResolver = requireNonNull(pathResolver, \"pathResolver is null\");\n+            this.suiteFactory = requireNonNull(suiteFactory, \"suiteFactory is null\");\n+            this.environmentFactory = requireNonNull(environmentFactory, \"environmentFactory is null\");\n+        }\n+\n+        @Override\n+        public void run()\n+        {\n+            Suite suite = suiteFactory.getSuite(suiteRunOptions.suite);\n+            SuiteConfig suiteConfig = suiteFactory.getSuiteConfig(suiteRunOptions.config);\n+            List<SuiteTestRun> suiteTestRuns = suite.getTestRuns(suiteConfig);\n+\n+            log.info(\"Starting suite '%s' with config '%s' and test runs: \", suite.getSuiteName(), suiteConfig.getConfigName());\n+            suiteTestRuns.forEach(job ->\n+                    log.info(\" * environment '%s': groups: %s, excluded groups: %s, tests: %s, excluded tests: %s\",\n+                            job.getEnvironmentName(), job.getGroups(), job.getExcludedGroups(), job.getTests(), job.getExcludedTests()));\n+\n+            long suiteStartTime = System.nanoTime();\n+            ImmutableList.Builder<TestRunResult> results = ImmutableList.builder();\n+\n+            for (SuiteTestRun testRun : suiteTestRuns) {\n+                results.add(executeSuiteTestRun(testRun, suiteConfig));\n+            }\n+\n+            List<TestRunResult> testRunsResults = results.build();\n+            boolean allSuccessful = testRunsResults.stream()\n+                    .allMatch(TestRunResult::isSuccessful);\n+\n+            if (allSuccessful) {\n+                log.info(\"Suite succeded in %s\", nanosSince(suiteStartTime));\n+                printTestRunsSummary(testRunsResults);\n+                exit(0);\n+            }\n+\n+            log.error(\"Suite failed in %s:\", nanosSince(suiteStartTime));\n+            printTestRunsSummary(testRunsResults);\n+            exit(1);\n+        }\n+\n+        private static void printTestRunsSummary(List<TestRunResult> results)\n+        {\n+            long failedRuns = results.stream()\n+                    .filter(TestRunResult::hasFailed)\n+                    .count();\n+\n+            log.info(\"Test runs summary (%d passed, %d failed): \", results.size() - failedRuns, failedRuns);\n+            results.forEach(result -> log.info(\" * '%s' %s in %s\", result.getSuiteRun(), result.isSuccessful() ? \"PASSED\" : \"FAILED\", result.getDuration()));\n+        }\n+\n+        public TestRunResult executeSuiteTestRun(SuiteTestRun suiteTestRun, SuiteConfig suiteConfig)\n+        {\n+            log.info(\"Starting test run %s with config %s\", suiteTestRun, suiteConfig);\n+            long startTime = System.nanoTime();\n+\n+            Throwable t = null;\n+            try {\n+                TestRun.TestRunOptions testRunOptions = createTestRunOptions(suiteTestRun, suiteConfig);\n+                log.info(\"Execute this test run using:\\npresto-product-tests-launcher/bin/run-launcher test run %s\", OptionsPrinter.toString(environmentOptions, testRunOptions));\n+                new TestRun.Execution(environmentFactory, pathResolver, environmentOptions, testRunOptions).run();\n+            }\n+            catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzYwOTA1OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODo0NDowOFrOHGN5qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODo0NDowOFrOHGN5qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4MTI1OQ==", "bodyText": "When I see copyOf I expect it to be static factory method taking argument.\nAlternatively you may rename the method to getCopy() or just copy() but I prefere static factory.", "url": "https://github.com/trinodb/trino/pull/4895#discussion_r476281259", "createdAt": "2020-08-25T08:44:08Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentOptions.java", "diffHunk": "@@ -47,13 +50,43 @@\n     @Option(name = \"--debug\", description = \"open Java debug ports\")\n     public boolean debug;\n \n+    @Option(name = \"--hadoop-init-script\", description = \"Hadoop init script\")\n+    public String hadoopInitScript = \"\";\n+\n     public Module toModule()\n     {\n         return binder -> {\n             binder.bind(EnvironmentOptions.class).toInstance(this);\n         };\n     }\n \n+    public EnvironmentOptions copyOf()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzYxMjA3OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODo0NDo1MlrOHGN7fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODo0NDo1MlrOHGN7fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4MTcyNg==", "bodyText": "applySuiteConfig?\nOr another flavour of static copyOf taking two EnvironmentOptions source, SuiteConfig suiteConfig", "url": "https://github.com/trinodb/trino/pull/4895#discussion_r476281726", "createdAt": "2020-08-25T08:44:52Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentOptions.java", "diffHunk": "@@ -47,13 +50,43 @@\n     @Option(name = \"--debug\", description = \"open Java debug ports\")\n     public boolean debug;\n \n+    @Option(name = \"--hadoop-init-script\", description = \"Hadoop init script\")\n+    public String hadoopInitScript = \"\";\n+\n     public Module toModule()\n     {\n         return binder -> {\n             binder.bind(EnvironmentOptions.class).toInstance(this);\n         };\n     }\n \n+    public EnvironmentOptions copyOf()\n+    {\n+        EnvironmentOptions copy = new EnvironmentOptions();\n+        copy.hadoopBaseImage = hadoopBaseImage;\n+        copy.imagesVersion = imagesVersion;\n+        copy.hadoopImagesVersion = hadoopImagesVersion;\n+        copy.temptoEnvironmentConfigFile = temptoEnvironmentConfigFile;\n+        copy.serverPackage = serverPackage;\n+        copy.withoutPrestoMaster = withoutPrestoMaster;\n+        copy.bindPorts = bindPorts;\n+        copy.debug = debug;\n+        return copy;\n+    }\n+\n+    public EnvironmentOptions forSuiteConfig(SuiteConfig suiteConfig)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzYyNTY1OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/suite/SuiteTestRun.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODo0ODowNlrOHGODpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODo0ODowNlrOHGODpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4MzgxMw==", "bodyText": "make ordering of constants, fields, arguments, getters, usages in toString, equals, hashCode, consistent", "url": "https://github.com/trinodb/trino/pull/4895#discussion_r476283813", "createdAt": "2020-08-25T08:48:06Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/suite/SuiteTestRun.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.suite;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.base.Splitter;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import io.prestosql.tests.product.launcher.env.EnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.Environments;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class SuiteTestRun\n+{\n+    private static final String SKIP_TEST_ARGUMENT = \"DISTRO_SKIP_TEST\";\n+    private static final String SKIP_GROUP_ARGUMENT = \"DISTRO_SKIP_GROUP\";\n+\n+    private static final String TEMPTO_TEST_ARG = \"-t\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzYzMTI2OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/suite/SuiteTestRun.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODo0OToyNlrOHGOHNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODo0OToyNlrOHGOHNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4NDcyNg==", "bodyText": "splitValueFromEnv", "url": "https://github.com/trinodb/trino/pull/4895#discussion_r476284726", "createdAt": "2020-08-25T08:49:26Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/suite/SuiteTestRun.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.suite;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.base.Splitter;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import io.prestosql.tests.product.launcher.env.EnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.Environments;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class SuiteTestRun\n+{\n+    private static final String SKIP_TEST_ARGUMENT = \"DISTRO_SKIP_TEST\";\n+    private static final String SKIP_GROUP_ARGUMENT = \"DISTRO_SKIP_GROUP\";\n+\n+    private static final String TEMPTO_TEST_ARG = \"-t\";\n+    private static final String TEMPTO_GROUP_ARG = \"-g\";\n+    private static final String TEMPTO_EXCLUDE_GROUP_ARG = \"-x\";\n+    private static final String TEMPTO_EXCLUDE_TEST_ARG = \"-e\";\n+\n+    private final Class<? extends EnvironmentProvider> environment;\n+    private final List<String> groups;\n+    private final List<String> excludedGroups;\n+    private final List<String> excludedTests;\n+    private final List<String> tests;\n+\n+    public SuiteTestRun(Class<? extends EnvironmentProvider> environment, List<String> groups, List<String> excludedGroups, List<String> tests, List<String> excludedTests)\n+    {\n+        this.environment = requireNonNull(environment, \"environment is null\");\n+        this.groups = requireNonNull(groups, \"groups is null\");\n+        this.excludedGroups = requireNonNull(excludedGroups, \"excludedGroups is null\");\n+        this.excludedTests = requireNonNull(excludedTests, \"excludedTests is null\");\n+        this.tests = requireNonNull(tests, \"tests is null\");\n+    }\n+\n+    public Class<? extends EnvironmentProvider> getEnvironment()\n+    {\n+        return environment;\n+    }\n+\n+    public String getEnvironmentName()\n+    {\n+        return Environments.nameForClass(environment);\n+    }\n+\n+    public List<String> getGroups()\n+    {\n+        return groups;\n+    }\n+\n+    public List<String> getExcludedGroups()\n+    {\n+        return ImmutableList.<String>builder()\n+                .addAll(excludedGroups)\n+                .addAll(getSplittedEnvKey(SKIP_GROUP_ARGUMENT))\n+                .build();\n+    }\n+\n+    public List<String> getExcludedTests()\n+    {\n+        return ImmutableList.<String>builder()\n+                .addAll(excludedTests)\n+                .addAll(getSplittedEnvKey(SKIP_TEST_ARGUMENT))\n+                .build();\n+    }\n+\n+    public List<String> getTests()\n+    {\n+        return tests;\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return toStringHelper(this)\n+                .add(\"environment\", Environments.nameForClass(environment))\n+                .add(\"groups\", getGroups())\n+                .add(\"excludedGroups\", getExcludedGroups())\n+                .add(\"tests\", getTests())\n+                .add(\"excludedTests\", getExcludedTests())\n+                .toString();\n+    }\n+\n+    public List<String> getTemptoRunArguments(SuiteConfig suiteConfig)\n+    {\n+        ImmutableList.Builder<String> arguments = ImmutableList.builder();\n+        Joiner joiner = Joiner.on(\",\");\n+\n+        if (!groups.isEmpty()) {\n+            arguments.add(TEMPTO_GROUP_ARG, joiner.join(groups));\n+        }\n+\n+        Iterable<String> excludedGroups = Iterables.concat(getExcludedGroups(), suiteConfig.getExcludedGroups());\n+        if (!Iterables.isEmpty(excludedGroups)) {\n+            arguments.add(TEMPTO_EXCLUDE_GROUP_ARG, joiner.join(excludedGroups));\n+        }\n+\n+        if (!tests.isEmpty()) {\n+            arguments.add(TEMPTO_TEST_ARG, joiner.join(tests));\n+        }\n+\n+        Iterable<String> excludedTests = Iterables.concat(getExcludedTests(), suiteConfig.getExcludedTests());\n+        if (!Iterables.isEmpty(excludedTests)) {\n+            arguments.add(TEMPTO_EXCLUDE_TEST_ARG, joiner.join(excludedTests));\n+        }\n+\n+        return arguments.build();\n+    }\n+\n+    public static Builder testOnEnvironment(Class<? extends EnvironmentProvider> environment)\n+    {\n+        return new Builder(environment);\n+    }\n+\n+    public static class Builder\n+    {\n+        private Class<? extends EnvironmentProvider> environment;\n+        private List<String> groups = ImmutableList.of();\n+        private List<String> excludedGroups = ImmutableList.of();\n+        private List<String> excludedTests = ImmutableList.of();\n+        private List<String> tests = ImmutableList.of();\n+\n+        private Builder(Class<? extends EnvironmentProvider> environment)\n+        {\n+            this.environment = requireNonNull(environment, \"environment is null\");\n+        }\n+\n+        public Builder withGroups(String... groups)\n+        {\n+            this.groups = ImmutableList.copyOf(groups);\n+            return this;\n+        }\n+\n+        public Builder withExcludedGroups(String... groups)\n+        {\n+            this.excludedGroups = ImmutableList.copyOf(groups);\n+            return this;\n+        }\n+\n+        public Builder withTests(String... tests)\n+        {\n+            this.tests = ImmutableList.copyOf(tests);\n+            return this;\n+        }\n+\n+        public Builder withExcludedTests(String... tests)\n+        {\n+            this.excludedTests = ImmutableList.copyOf(tests);\n+            return this;\n+        }\n+\n+        public SuiteTestRun build()\n+        {\n+            return new SuiteTestRun(environment, groups, excludedGroups, tests, excludedTests);\n+        }\n+    }\n+\n+    private static List<String> getSplittedEnvKey(String key)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzY0MjEwOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/suite/SuiteTestRun.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODo1MjowOVrOHGON-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODo1MjowOVrOHGON-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4NjQ1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Splitter.on(',').splitToList(value);\n          \n          \n            \n                    return Splitter.on(',').trimResults().omitEmptyStrings().splitToList(value);", "url": "https://github.com/trinodb/trino/pull/4895#discussion_r476286456", "createdAt": "2020-08-25T08:52:09Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/suite/SuiteTestRun.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.suite;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.base.Splitter;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import io.prestosql.tests.product.launcher.env.EnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.Environments;\n+\n+import java.util.List;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class SuiteTestRun\n+{\n+    private static final String SKIP_TEST_ARGUMENT = \"DISTRO_SKIP_TEST\";\n+    private static final String SKIP_GROUP_ARGUMENT = \"DISTRO_SKIP_GROUP\";\n+\n+    private static final String TEMPTO_TEST_ARG = \"-t\";\n+    private static final String TEMPTO_GROUP_ARG = \"-g\";\n+    private static final String TEMPTO_EXCLUDE_GROUP_ARG = \"-x\";\n+    private static final String TEMPTO_EXCLUDE_TEST_ARG = \"-e\";\n+\n+    private final Class<? extends EnvironmentProvider> environment;\n+    private final List<String> groups;\n+    private final List<String> excludedGroups;\n+    private final List<String> excludedTests;\n+    private final List<String> tests;\n+\n+    public SuiteTestRun(Class<? extends EnvironmentProvider> environment, List<String> groups, List<String> excludedGroups, List<String> tests, List<String> excludedTests)\n+    {\n+        this.environment = requireNonNull(environment, \"environment is null\");\n+        this.groups = requireNonNull(groups, \"groups is null\");\n+        this.excludedGroups = requireNonNull(excludedGroups, \"excludedGroups is null\");\n+        this.excludedTests = requireNonNull(excludedTests, \"excludedTests is null\");\n+        this.tests = requireNonNull(tests, \"tests is null\");\n+    }\n+\n+    public Class<? extends EnvironmentProvider> getEnvironment()\n+    {\n+        return environment;\n+    }\n+\n+    public String getEnvironmentName()\n+    {\n+        return Environments.nameForClass(environment);\n+    }\n+\n+    public List<String> getGroups()\n+    {\n+        return groups;\n+    }\n+\n+    public List<String> getExcludedGroups()\n+    {\n+        return ImmutableList.<String>builder()\n+                .addAll(excludedGroups)\n+                .addAll(getSplittedEnvKey(SKIP_GROUP_ARGUMENT))\n+                .build();\n+    }\n+\n+    public List<String> getExcludedTests()\n+    {\n+        return ImmutableList.<String>builder()\n+                .addAll(excludedTests)\n+                .addAll(getSplittedEnvKey(SKIP_TEST_ARGUMENT))\n+                .build();\n+    }\n+\n+    public List<String> getTests()\n+    {\n+        return tests;\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return toStringHelper(this)\n+                .add(\"environment\", Environments.nameForClass(environment))\n+                .add(\"groups\", getGroups())\n+                .add(\"excludedGroups\", getExcludedGroups())\n+                .add(\"tests\", getTests())\n+                .add(\"excludedTests\", getExcludedTests())\n+                .toString();\n+    }\n+\n+    public List<String> getTemptoRunArguments(SuiteConfig suiteConfig)\n+    {\n+        ImmutableList.Builder<String> arguments = ImmutableList.builder();\n+        Joiner joiner = Joiner.on(\",\");\n+\n+        if (!groups.isEmpty()) {\n+            arguments.add(TEMPTO_GROUP_ARG, joiner.join(groups));\n+        }\n+\n+        Iterable<String> excludedGroups = Iterables.concat(getExcludedGroups(), suiteConfig.getExcludedGroups());\n+        if (!Iterables.isEmpty(excludedGroups)) {\n+            arguments.add(TEMPTO_EXCLUDE_GROUP_ARG, joiner.join(excludedGroups));\n+        }\n+\n+        if (!tests.isEmpty()) {\n+            arguments.add(TEMPTO_TEST_ARG, joiner.join(tests));\n+        }\n+\n+        Iterable<String> excludedTests = Iterables.concat(getExcludedTests(), suiteConfig.getExcludedTests());\n+        if (!Iterables.isEmpty(excludedTests)) {\n+            arguments.add(TEMPTO_EXCLUDE_TEST_ARG, joiner.join(excludedTests));\n+        }\n+\n+        return arguments.build();\n+    }\n+\n+    public static Builder testOnEnvironment(Class<? extends EnvironmentProvider> environment)\n+    {\n+        return new Builder(environment);\n+    }\n+\n+    public static class Builder\n+    {\n+        private Class<? extends EnvironmentProvider> environment;\n+        private List<String> groups = ImmutableList.of();\n+        private List<String> excludedGroups = ImmutableList.of();\n+        private List<String> excludedTests = ImmutableList.of();\n+        private List<String> tests = ImmutableList.of();\n+\n+        private Builder(Class<? extends EnvironmentProvider> environment)\n+        {\n+            this.environment = requireNonNull(environment, \"environment is null\");\n+        }\n+\n+        public Builder withGroups(String... groups)\n+        {\n+            this.groups = ImmutableList.copyOf(groups);\n+            return this;\n+        }\n+\n+        public Builder withExcludedGroups(String... groups)\n+        {\n+            this.excludedGroups = ImmutableList.copyOf(groups);\n+            return this;\n+        }\n+\n+        public Builder withTests(String... tests)\n+        {\n+            this.tests = ImmutableList.copyOf(tests);\n+            return this;\n+        }\n+\n+        public Builder withExcludedTests(String... tests)\n+        {\n+            this.excludedTests = ImmutableList.copyOf(tests);\n+            return this;\n+        }\n+\n+        public SuiteTestRun build()\n+        {\n+            return new SuiteTestRun(environment, groups, excludedGroups, tests, excludedTests);\n+        }\n+    }\n+\n+    private static List<String> getSplittedEnvKey(String key)\n+    {\n+        String value = System.getenv(key);\n+\n+        if (Strings.isNullOrEmpty(value)) {\n+            return ImmutableList.of();\n+        }\n+\n+        return Splitter.on(',').splitToList(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzY4NDA4OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentDefaults.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOTowMTozMVrOHGOnXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOToyNjozMVrOHGPojw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI5Mjk1OA==", "bodyText": "why do we need those getters after this change? Can't we just use constants?", "url": "https://github.com/trinodb/trino/pull/4895#discussion_r476292958", "createdAt": "2020-08-25T09:01:31Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentDefaults.java", "diffHunk": "@@ -13,8 +13,6 @@\n  */\n package io.prestosql.tests.product.launcher.env;\n \n-import static java.lang.System.getenv;\n-\n public class EnvironmentDefaults\n {\n     public static final String DOCKER_IMAGES_VERSION = \"31\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwOTY0Nw==", "bodyText": "Good point. Removing.", "url": "https://github.com/trinodb/trino/pull/4895#discussion_r476309647", "createdAt": "2020-08-25T09:26:31Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentDefaults.java", "diffHunk": "@@ -13,8 +13,6 @@\n  */\n package io.prestosql.tests.product.launcher.env;\n \n-import static java.lang.System.getenv;\n-\n public class EnvironmentDefaults\n {\n     public static final String DOCKER_IMAGES_VERSION = \"31\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI5Mjk1OA=="}, "originalCommit": null, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODA3NTkzOnYy", "diffSide": "LEFT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDo0NjoyMVrOHGSXdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDo1Mjo1MVrOHGSjxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM1NDQyMQ==", "bodyText": "why so?", "url": "https://github.com/trinodb/trino/pull/4895#discussion_r476354421", "createdAt": "2020-08-25T10:46:21Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentOptions.java", "diffHunk": "@@ -15,25 +15,28 @@\n \n import com.google.inject.Module;\n import io.airlift.airline.Option;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.suite.SuiteConfig;\n \n import java.io.File;\n import java.util.Locale;\n \n import static com.google.common.base.MoreObjects.firstNonNull;\n import static java.util.Objects.requireNonNull;\n \n-public final class EnvironmentOptions", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM1NzU3Mg==", "bodyText": "Sneaked through the trenches. Sorry :)", "url": "https://github.com/trinodb/trino/pull/4895#discussion_r476357572", "createdAt": "2020-08-25T10:52:51Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentOptions.java", "diffHunk": "@@ -15,25 +15,28 @@\n \n import com.google.inject.Module;\n import io.airlift.airline.Option;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.suite.SuiteConfig;\n \n import java.io.File;\n import java.util.Locale;\n \n import static com.google.common.base.MoreObjects.firstNonNull;\n import static java.util.Objects.requireNonNull;\n \n-public final class EnvironmentOptions", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM1NDQyMQ=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODA3Nzc3OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/OptionsPrinter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDo0Njo1N1rOHGSYiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDo0Njo1N1rOHGSYiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM1NDY5Nw==", "bodyText": "drop this one", "url": "https://github.com/trinodb/trino/pull/4895#discussion_r476354697", "createdAt": "2020-08-25T10:46:57Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/OptionsPrinter.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.cli;\n+\n+import com.google.common.base.Joiner;\n+import io.airlift.airline.Arguments;\n+import io.airlift.airline.Option;\n+\n+import java.lang.reflect.Field;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import static java.lang.reflect.Modifier.isPublic;\n+import static java.lang.reflect.Modifier.isStatic;\n+import static java.util.Arrays.stream;\n+import static java.util.stream.Collectors.toList;\n+\n+public final class OptionsPrinter\n+{\n+    private static final Joiner JOINER = Joiner.on(\" \\\\\\n\")\n+            .skipNulls();\n+\n+    private OptionsPrinter() {}\n+\n+    public static String format(Object... objects)\n+    {\n+        List<String> arguments = stream(objects)\n+                .map(OptionsPrinter::extractArguments)\n+                .flatMap(Collection::stream)\n+                .collect(toList());\n+\n+        return JOINER.join(arguments);\n+    }\n+\n+    public static String format(Object object)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3517, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}