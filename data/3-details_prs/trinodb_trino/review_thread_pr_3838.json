{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMzM1Nzk5", "number": 3838, "reviewThreads": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMToyMjoyNVrOD_oXKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwMDowNDoxMlrOEAUOwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDQ4MTY5OnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMToyMjoyNVrOGaZ2fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMDozMjo1MFrOGbcEDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMzOTcxMA==", "bodyText": "why 3.. oracle default is 6.\nwe shouldn't carry a limitation of presto timestamp to oracle", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r430339710", "createdAt": "2020-05-26T11:22:25Z", "author": {"login": "eskabetxe"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "diffHunk": "@@ -215,10 +213,10 @@ public WriteMapping toWriteMapping(ConnectorSession session, Type type)\n             return WriteMapping.longMapping(\"number(19,0)\", bigintWriteFunction());\n         }\n         if (type instanceof TimestampType) {\n-            return WriteMapping.longMapping(format(\"timestamp(%s)\", timestampDefaultPrecision), timestampWriteFunction(session));\n+            return WriteMapping.longMapping(\"timestamp(3)\", timestampWriteFunction(session));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM0Njg1Nw==", "bodyText": "timestamp(6) will lead to incorrect results (different results when predicate is pushed down and when it is not)\nAnyway, this will be addressed soon the right way with the ongoing work at #1284", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r430346857", "createdAt": "2020-05-26T11:37:08Z", "author": {"login": "findepi"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "diffHunk": "@@ -215,10 +213,10 @@ public WriteMapping toWriteMapping(ConnectorSession session, Type type)\n             return WriteMapping.longMapping(\"number(19,0)\", bigintWriteFunction());\n         }\n         if (type instanceof TimestampType) {\n-            return WriteMapping.longMapping(format(\"timestamp(%s)\", timestampDefaultPrecision), timestampWriteFunction(session));\n+            return WriteMapping.longMapping(\"timestamp(3)\", timestampWriteFunction(session));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMzOTcxMA=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM1MzA2NA==", "bodyText": "so any table create outside presto will have that problem (it will be created as timestamp(6))", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r430353064", "createdAt": "2020-05-26T11:49:43Z", "author": {"login": "eskabetxe"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "diffHunk": "@@ -215,10 +213,10 @@ public WriteMapping toWriteMapping(ConnectorSession session, Type type)\n             return WriteMapping.longMapping(\"number(19,0)\", bigintWriteFunction());\n         }\n         if (type instanceof TimestampType) {\n-            return WriteMapping.longMapping(format(\"timestamp(%s)\", timestampDefaultPrecision), timestampWriteFunction(session));\n+            return WriteMapping.longMapping(\"timestamp(3)\", timestampWriteFunction(session));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMzOTcxMA=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcwOTg4Mw==", "bodyText": "correct", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r430709883", "createdAt": "2020-05-26T21:10:37Z", "author": {"login": "findepi"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "diffHunk": "@@ -215,10 +213,10 @@ public WriteMapping toWriteMapping(ConnectorSession session, Type type)\n             return WriteMapping.longMapping(\"number(19,0)\", bigintWriteFunction());\n         }\n         if (type instanceof TimestampType) {\n-            return WriteMapping.longMapping(format(\"timestamp(%s)\", timestampDefaultPrecision), timestampWriteFunction(session));\n+            return WriteMapping.longMapping(\"timestamp(3)\", timestampWriteFunction(session));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMzOTcxMA=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyNDUyNw==", "bodyText": "Predicate pushdown seems like an unrelated issue. It should work correctly regardless of the precision in Presto vs Oracle. We can't depend on the types matching.\nBut removing precision here and using timestamp(3) is the right behavior as that will continue working after we support precision for timestamp in Presto (timestamp will likely mean timestamp(3) for compatibility reasons).", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431424527", "createdAt": "2020-05-27T20:32:50Z", "author": {"login": "electrum"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "diffHunk": "@@ -215,10 +213,10 @@ public WriteMapping toWriteMapping(ConnectorSession session, Type type)\n             return WriteMapping.longMapping(\"number(19,0)\", bigintWriteFunction());\n         }\n         if (type instanceof TimestampType) {\n-            return WriteMapping.longMapping(format(\"timestamp(%s)\", timestampDefaultPrecision), timestampWriteFunction(session));\n+            return WriteMapping.longMapping(\"timestamp(3)\", timestampWriteFunction(session));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMzOTcxMA=="}, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDQ5ODQwOnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleTypes.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMToyNzo1MVrOGaaA_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMToyNzowOVrOGbdw3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM0MjM5OA==", "bodyText": "the test of negative scale will be moved to another side?", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r430342398", "createdAt": "2020-05-26T11:27:51Z", "author": {"login": "eskabetxe"}, "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleTypes.java", "diffHunk": "@@ -141,9 +141,9 @@ public void testBooleanType()\n     @Test\n     public void testSpecialNumberFormats()\n     {\n-        oracleServer.execute(\"CREATE TABLE test (num1 number, num2 number(*,-2))\");\n-        oracleServer.execute(\"INSERT INTO test VALUES (12345678901234567890.12345678901234567890123456789012345678, 1234567890.123)\");\n-        assertQuery(\"SELECT * FROM test\", \"VALUES (12345678901234567890.1234567890, 1234567900.0000000000)\");\n+        oracleServer.execute(\"CREATE TABLE test (num1 number)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk2NDE2OA==", "bodyText": "There are tests for negative scale in testNumberNegativeScaleReadMapping.\nThis specific case which was tested here is not supported as it would require decimal precision of 40 in Presto, while up to 38 is supported.", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r430964168", "createdAt": "2020-05-27T08:59:14Z", "author": {"login": "losipiuk"}, "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleTypes.java", "diffHunk": "@@ -141,9 +141,9 @@ public void testBooleanType()\n     @Test\n     public void testSpecialNumberFormats()\n     {\n-        oracleServer.execute(\"CREATE TABLE test (num1 number, num2 number(*,-2))\");\n-        oracleServer.execute(\"INSERT INTO test VALUES (12345678901234567890.12345678901234567890123456789012345678, 1234567890.123)\");\n-        assertQuery(\"SELECT * FROM test\", \"VALUES (12345678901234567890.1234567890, 1234567900.0000000000)\");\n+        oracleServer.execute(\"CREATE TABLE test (num1 number)\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM0MjM5OA=="}, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2NjcwNA==", "bodyText": "really not, as -2 will affect the first part..\nthis 1234567890 will be saved as 1234567900", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431266704", "createdAt": "2020-05-27T16:11:17Z", "author": {"login": "eskabetxe"}, "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleTypes.java", "diffHunk": "@@ -141,9 +141,9 @@ public void testBooleanType()\n     @Test\n     public void testSpecialNumberFormats()\n     {\n-        oracleServer.execute(\"CREATE TABLE test (num1 number, num2 number(*,-2))\");\n-        oracleServer.execute(\"INSERT INTO test VALUES (12345678901234567890.12345678901234567890123456789012345678, 1234567890.123)\");\n-        assertQuery(\"SELECT * FROM test\", \"VALUES (12345678901234567890.1234567890, 1234567900.0000000000)\");\n+        oracleServer.execute(\"CREATE TABLE test (num1 number)\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM0MjM5OA=="}, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ1MjM4Mw==", "bodyText": "The problem is that Oracle will allow for numbers with up to 38 meaningful digits for types with negative scale (in your example meaningful digits are 12345679).\nThe number of total digits (including obvious trailing zeroes) larger.\nE.g. for `NUMBER(*,-2) total number of digits in represented values can be 40.\nIf you run such query in Oracle:\nSELECT CAST(1234567890123456789012345678901234567890 AS NUMBER(*,-2)) FROM dual;\n\nIt will work fine and return 40 digit number 1234567890123456789012345678901234567900.\nAs we do not support negative scale in Presto, we need to be able to represent the value, including trailing zeroes. Hence the limitation.", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431452383", "createdAt": "2020-05-27T21:27:09Z", "author": {"login": "losipiuk"}, "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleTypes.java", "diffHunk": "@@ -141,9 +141,9 @@ public void testBooleanType()\n     @Test\n     public void testSpecialNumberFormats()\n     {\n-        oracleServer.execute(\"CREATE TABLE test (num1 number, num2 number(*,-2))\");\n-        oracleServer.execute(\"INSERT INTO test VALUES (12345678901234567890.12345678901234567890123456789012345678, 1234567890.123)\");\n-        assertQuery(\"SELECT * FROM test\", \"VALUES (12345678901234567890.1234567890, 1234567900.0000000000)\");\n+        oracleServer.execute(\"CREATE TABLE test (num1 number)\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM0MjM5OA=="}, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDUyODgyOnYy", "diffSide": "LEFT", "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleConfig.java", "isResolved": false, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMTozODowNVrOGaaUCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwODoxMTo1MVrOGcTCFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM0NzI3NA==", "bodyText": "starting on oracle 12c varchar could be increased from 4000 to 32767 bytes (any value between) using Extended Data Types", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r430347274", "createdAt": "2020-05-26T11:38:05Z", "author": {"login": "eskabetxe"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleConfig.java", "diffHunk": "@@ -68,17 +67,4 @@ public OracleConfig setNumberRoundingMode(RoundingMode numberRoundingMode)\n         this.numberRoundingMode = numberRoundingMode;\n         return this;\n     }\n-\n-    @Min(4000)\n-    public int getVarcharMaxSize()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAyNTYzNQ==", "bodyText": "I reintroduced the config parameter. Just changed the name slightly, so it is obvious that limit is about number of bytes. Not characters.", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431025635", "createdAt": "2020-05-27T10:45:16Z", "author": {"login": "losipiuk"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleConfig.java", "diffHunk": "@@ -68,17 +67,4 @@ public OracleConfig setNumberRoundingMode(RoundingMode numberRoundingMode)\n         this.numberRoundingMode = numberRoundingMode;\n         return this;\n     }\n-\n-    @Min(4000)\n-    public int getVarcharMaxSize()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM0NzI3NA=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2Nzc2Ng==", "bodyText": "could be added the  @max(32767)", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431267766", "createdAt": "2020-05-27T16:12:56Z", "author": {"login": "eskabetxe"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleConfig.java", "diffHunk": "@@ -68,17 +67,4 @@ public OracleConfig setNumberRoundingMode(RoundingMode numberRoundingMode)\n         this.numberRoundingMode = numberRoundingMode;\n         return this;\n     }\n-\n-    @Min(4000)\n-    public int getVarcharMaxSize()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM0NzI3NA=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ1NDA3MQ==", "bodyText": "Actually can it be something in between 4000 and 32767. Or just 4000 or 32767?\nIf latter is the case maybe we should make the config parameter oracle.enable-extended-datatypes=true/false?", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431454071", "createdAt": "2020-05-27T21:30:41Z", "author": {"login": "losipiuk"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleConfig.java", "diffHunk": "@@ -68,17 +67,4 @@ public OracleConfig setNumberRoundingMode(RoundingMode numberRoundingMode)\n         this.numberRoundingMode = numberRoundingMode;\n         return this;\n     }\n-\n-    @Min(4000)\n-    public int getVarcharMaxSize()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM0NzI3NA=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY1ODA1Ng==", "bodyText": "@losipiuk the true/false may work, checking the documentation to activate that is used\nALTER SYSTEM SET max_string_size=extended SCOPE=SPFILE;\nthat change this values:\nVARCHAR2 : 4000 bytes\nNVARCHAR2 : 4000 bytes\nRAW : 2000 bytes\nto\nVARCHAR2 : 32767 bytes\nNVARCHAR2 : 32767 bytes\nRAW : 32767 bytes", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431658056", "createdAt": "2020-05-28T08:12:16Z", "author": {"login": "eskabetxe"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleConfig.java", "diffHunk": "@@ -68,17 +67,4 @@ public OracleConfig setNumberRoundingMode(RoundingMode numberRoundingMode)\n         this.numberRoundingMode = numberRoundingMode;\n         return this;\n     }\n-\n-    @Min(4000)\n-    public int getVarcharMaxSize()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM0NzI3NA=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc1ODE2Mw==", "bodyText": "Why exactly do we have this setting? What would be the downside to having this hard-coded, at 4000 (safe value)?\n(since this isn't obvious, we should capture the reasoning in the code comment at least)\nIf desired, in the future, we could try to detect server configuration and adapt, without user needing to set anything.", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431758163", "createdAt": "2020-05-28T11:11:31Z", "author": {"login": "findepi"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleConfig.java", "diffHunk": "@@ -68,17 +67,4 @@ public OracleConfig setNumberRoundingMode(RoundingMode numberRoundingMode)\n         this.numberRoundingMode = numberRoundingMode;\n         return this;\n     }\n-\n-    @Min(4000)\n-    public int getVarcharMaxSize()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM0NzI3NA=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgwNDMyMQ==", "bodyText": "I kinda agree with what @findepi wrote. @eskabetxe do you feel strongly about the functionality and can provide rationale? If not I would simplify configuration (after all, the lest configuration switches the better) and live with 4000 for now.", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431804321", "createdAt": "2020-05-28T12:41:22Z", "author": {"login": "losipiuk"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleConfig.java", "diffHunk": "@@ -68,17 +67,4 @@ public OracleConfig setNumberRoundingMode(RoundingMode numberRoundingMode)\n         this.numberRoundingMode = numberRoundingMode;\n         return this;\n     }\n-\n-    @Min(4000)\n-    public int getVarcharMaxSize()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM0NzI3NA=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxMTE3NA==", "bodyText": "I updated the PR removing oracle.varchar2.max-bytes. We may discuss later on if we want to add it (in this or other form) as a followup.", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431911174", "createdAt": "2020-05-28T15:07:48Z", "author": {"login": "losipiuk"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleConfig.java", "diffHunk": "@@ -68,17 +67,4 @@ public OracleConfig setNumberRoundingMode(RoundingMode numberRoundingMode)\n         this.numberRoundingMode = numberRoundingMode;\n         return this;\n     }\n-\n-    @Min(4000)\n-    public int getVarcharMaxSize()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM0NzI3NA=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2NTM4OQ==", "bodyText": "@findepi  this allow you to use the extended data types added on 12c\nyou can use the hard-coded value, but if the database have the extended version activated and on creation for example you create a table with varchar (5000), the connector will create a nlob field (because 5000 > than 4000 limit)\nwe can address this after but this was already on connector, we are adding a limitation that previous not exists", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r432065389", "createdAt": "2020-05-28T19:20:42Z", "author": {"login": "eskabetxe"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleConfig.java", "diffHunk": "@@ -68,17 +67,4 @@ public OracleConfig setNumberRoundingMode(RoundingMode numberRoundingMode)\n         this.numberRoundingMode = numberRoundingMode;\n         return this;\n     }\n-\n-    @Min(4000)\n-    public int getVarcharMaxSize()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM0NzI3NA=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMyNTE0MQ==", "bodyText": "I think we all understand what having a parameter changes in logic for CREATE TABLE issued from Presto to create Oracle table. The question is, is the benefit worth added complexity and extra configuration parameter. As @findepi mentioned above it can be improved to support higher limits without explicit configuration parameter. Also I believe that typical usecase for Oracle connector is to query tables created in Oracle already. Not to create new ones.", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r432325141", "createdAt": "2020-05-29T08:11:51Z", "author": {"login": "losipiuk"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleConfig.java", "diffHunk": "@@ -68,17 +67,4 @@ public OracleConfig setNumberRoundingMode(RoundingMode numberRoundingMode)\n         this.numberRoundingMode = numberRoundingMode;\n         return this;\n     }\n-\n-    @Min(4000)\n-    public int getVarcharMaxSize()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM0NzI3NA=="}, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzExODM0OnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/sql/TestTable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMDoyODozNVrOGbb7ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMDoyODozNVrOGbb7ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyMjM3MQ==", "bodyText": "This only leaves 36^5 = 60466176 maximum values. Also, the choice of this value seems arbitrary. We should probably have a maximum length and validate that the prefix+suffix is under the length. But we can follow up on that.", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431422371", "createdAt": "2020-05-27T20:28:35Z", "author": {"login": "electrum"}, "path": "presto-testing/src/main/java/io/prestosql/testing/sql/TestTable.java", "diffHunk": "@@ -27,7 +27,7 @@\n         implements AutoCloseable\n {\n     private static final SecureRandom random = new SecureRandom();\n-    private static final int RANDOM_SUFFIX_LENGTH = 12;\n+    private static final int RANDOM_SUFFIX_LENGTH = 5;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzE0NzM1OnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleDistributedQueries.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMDozNzo0MVrOGbcOBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMDozNzo0MVrOGbcOBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyNzA3OA==", "bodyText": "Use static import (that already exists)", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431427078", "createdAt": "2020-05-27T20:37:41Z", "author": {"login": "electrum"}, "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleDistributedQueries.java", "diffHunk": "@@ -115,7 +116,7 @@ protected TestTable createTableWithDefaultColumns()\n     {\n         return new TestTable(\n                 oracleServer::execute,\n-                \"tpch.table\",\n+                String.format(\"%s.table\", TEST_SCHEMA),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzUyMjcxOnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjo1NDoyOVrOGbf7Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMjoyOToxOFrOGby1hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ4Nzc4Mw==", "bodyText": "Can we make this calendar instance a constant? They are mutable, but this should be read-only.", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431487783", "createdAt": "2020-05-27T22:54:29Z", "author": {"login": "electrum"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "diffHunk": "@@ -190,10 +212,77 @@ public void createSchema(JdbcIdentity identity, String schemaName)\n                 return Optional.of(varcharColumnMapping(createVarcharType(columnSize)));\n             case Types.VARCHAR:\n                 return Optional.of(varcharColumnMapping(createVarcharType(columnSize)));\n+            // This mapping covers both DATE and TIMESTAMP, as Oracle's DATE has second precision.\n+            case OracleTypes.TIMESTAMP:\n+                return Optional.of(oracleTimestampColumnMapping(session));\n+            case OracleTypes.TIMESTAMPTZ:\n+                return Optional.of(oracleTimestampWithTimeZoneColumnMapping());\n         }\n         return super.toPrestoType(session, connection, typeHandle);\n     }\n \n+    public static LongWriteFunction oracleDateWriteFunction()\n+    {\n+        return (statement, index, value) -> {\n+            long utcMillis = DAYS.toMillis(value);\n+            ZonedDateTime date = Instant.ofEpochMilli(utcMillis).atZone(ZoneOffset.UTC);\n+            // because of how JDBC works with dates we need to use the ZonedDataTime object and not a LocalDateTime\n+            statement.setObject(index, date);\n+        };\n+    }\n+\n+    public static LongWriteFunction oracleTimestampWriteFunction(ConnectorSession session)\n+    {\n+        if (session.isLegacyTimestamp()) {\n+            return (statement, index, utcMillis) -> {\n+                long dateTimeAsUtcMillis = Instant.ofEpochMilli(utcMillis)\n+                        .atZone(ZoneId.of(session.getTimeZoneKey().getId()))\n+                        .withZoneSameLocal(ZoneOffset.UTC)\n+                        .toInstant().toEpochMilli();\n+                statement.setObject(index, new oracle.sql.TIMESTAMP(new Timestamp(dateTimeAsUtcMillis), Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY5OTg3Ng==", "bodyText": "I would rather leave it as is.\nUnder the hood getTimeZone() is called which looks like this:\n    public TimeZone getTimeZone() {\n        if (this.sharedZone) {\n            this.zone = (TimeZone)this.zone.clone();\n            this.sharedZone = false;\n        }\n\n        return this.zone;\n    }\n\nIt kinda can mutate calendar state, even if it does not do it in our case as sharedZone==false. Yet it still looks fragile.\nAlso new oracle.sql.TIMESTAMP(...) caretes yet another calendar instance internally, so we are not gaining much by avoiding creation of our own :)", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431699876", "createdAt": "2020-05-28T09:23:00Z", "author": {"login": "losipiuk"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "diffHunk": "@@ -190,10 +212,77 @@ public void createSchema(JdbcIdentity identity, String schemaName)\n                 return Optional.of(varcharColumnMapping(createVarcharType(columnSize)));\n             case Types.VARCHAR:\n                 return Optional.of(varcharColumnMapping(createVarcharType(columnSize)));\n+            // This mapping covers both DATE and TIMESTAMP, as Oracle's DATE has second precision.\n+            case OracleTypes.TIMESTAMP:\n+                return Optional.of(oracleTimestampColumnMapping(session));\n+            case OracleTypes.TIMESTAMPTZ:\n+                return Optional.of(oracleTimestampWithTimeZoneColumnMapping());\n         }\n         return super.toPrestoType(session, connection, typeHandle);\n     }\n \n+    public static LongWriteFunction oracleDateWriteFunction()\n+    {\n+        return (statement, index, value) -> {\n+            long utcMillis = DAYS.toMillis(value);\n+            ZonedDateTime date = Instant.ofEpochMilli(utcMillis).atZone(ZoneOffset.UTC);\n+            // because of how JDBC works with dates we need to use the ZonedDataTime object and not a LocalDateTime\n+            statement.setObject(index, date);\n+        };\n+    }\n+\n+    public static LongWriteFunction oracleTimestampWriteFunction(ConnectorSession session)\n+    {\n+        if (session.isLegacyTimestamp()) {\n+            return (statement, index, utcMillis) -> {\n+                long dateTimeAsUtcMillis = Instant.ofEpochMilli(utcMillis)\n+                        .atZone(ZoneId.of(session.getTimeZoneKey().getId()))\n+                        .withZoneSameLocal(ZoneOffset.UTC)\n+                        .toInstant().toEpochMilli();\n+                statement.setObject(index, new oracle.sql.TIMESTAMP(new Timestamp(dateTimeAsUtcMillis), Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"))));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ4Nzc4Mw=="}, "originalCommit": null, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc5NzYzNg==", "bodyText": "Right, Calendar is mutable even when used \"read only\".", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431797636", "createdAt": "2020-05-28T12:29:18Z", "author": {"login": "findepi"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "diffHunk": "@@ -190,10 +212,77 @@ public void createSchema(JdbcIdentity identity, String schemaName)\n                 return Optional.of(varcharColumnMapping(createVarcharType(columnSize)));\n             case Types.VARCHAR:\n                 return Optional.of(varcharColumnMapping(createVarcharType(columnSize)));\n+            // This mapping covers both DATE and TIMESTAMP, as Oracle's DATE has second precision.\n+            case OracleTypes.TIMESTAMP:\n+                return Optional.of(oracleTimestampColumnMapping(session));\n+            case OracleTypes.TIMESTAMPTZ:\n+                return Optional.of(oracleTimestampWithTimeZoneColumnMapping());\n         }\n         return super.toPrestoType(session, connection, typeHandle);\n     }\n \n+    public static LongWriteFunction oracleDateWriteFunction()\n+    {\n+        return (statement, index, value) -> {\n+            long utcMillis = DAYS.toMillis(value);\n+            ZonedDateTime date = Instant.ofEpochMilli(utcMillis).atZone(ZoneOffset.UTC);\n+            // because of how JDBC works with dates we need to use the ZonedDataTime object and not a LocalDateTime\n+            statement.setObject(index, date);\n+        };\n+    }\n+\n+    public static LongWriteFunction oracleTimestampWriteFunction(ConnectorSession session)\n+    {\n+        if (session.isLegacyTimestamp()) {\n+            return (statement, index, utcMillis) -> {\n+                long dateTimeAsUtcMillis = Instant.ofEpochMilli(utcMillis)\n+                        .atZone(ZoneId.of(session.getTimeZoneKey().getId()))\n+                        .withZoneSameLocal(ZoneOffset.UTC)\n+                        .toInstant().toEpochMilli();\n+                statement.setObject(index, new oracle.sql.TIMESTAMP(new Timestamp(dateTimeAsUtcMillis), Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"))));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ4Nzc4Mw=="}, "originalCommit": null, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzUyNjI0OnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/OracleDataTypes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjo1NjoxMFrOGbf9eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjo1NjoxMFrOGbf9eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ4ODM3Ng==", "bodyText": "This seems repeated for no reason", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431488376", "createdAt": "2020-05-27T22:56:10Z", "author": {"login": "electrum"}, "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/OracleDataTypes.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.oracle;\n+\n+import io.prestosql.spi.type.TimestampType;\n+import io.prestosql.spi.type.Type;\n+import io.prestosql.testing.datatype.DataType;\n+\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.function.Function;\n+\n+import static io.prestosql.spi.type.TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE;\n+import static java.lang.String.format;\n+\n+public final class OracleDataTypes\n+{\n+    private OracleDataTypes() {}\n+\n+    /* Datetime types */\n+\n+    public static DataType<LocalDate> dateDataType()\n+    {\n+        return dataType(\"DATE\", TimestampType.TIMESTAMP,\n+                DateTimeFormatter.ofPattern(\"'DATE '''yyyy-MM-dd''\")::format,\n+                LocalDate::atStartOfDay);\n+    }\n+\n+    public static DataType<ZonedDateTime> prestoTimestampWithTimeZoneDataType()\n+    {\n+        return dataType(\n+                \"timestamp with time zone\",\n+                TIMESTAMP_WITH_TIME_ZONE,\n+                DateTimeFormatter.ofPattern(\"'TIMESTAMP '''yyyy-MM-dd HH:mm:ss.SSS VV''\")::format,\n+                OracleDataTypes::normalizeForOracleStorage);\n+    }\n+\n+    @SuppressWarnings(\"MisusedWeekYear\")\n+    public static DataType<ZonedDateTime> oracleTimestamp3TimeZoneDataType()\n+    {\n+        return dataType(\n+                \"TIMESTAMP(3) WITH TIME ZONE\",\n+                TIMESTAMP_WITH_TIME_ZONE,\n+                zonedDateTime -> {\n+                    String zoneId = zonedDateTime.getZone().getId();\n+                    if (zoneId.equals(\"Z\")) {\n+                        zoneId = \"UTC\";\n+                    }\n+                    return format(\n+                            \"from_tz(TIMESTAMP '%s', '%s')\",\n+                            DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSSSSSSSS\").format(zonedDateTime.toLocalDateTime()),\n+                            zoneId);\n+                },\n+                OracleDataTypes::normalizeForOracleStorage);\n+    }\n+\n+    private static ZonedDateTime normalizeForOracleStorage(ZonedDateTime zonedDateTime)\n+    {\n+        // Oracle conflates UTC-equivalent zones to UTC.\n+        String zoneId = zonedDateTime.getZone().getId();\n+        if (zoneId.equals(\"Z\")) {\n+            // Oracle conflates UTC-equivalent zones to UTC.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzUyNjkzOnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/OracleDataTypes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjo1NjoyNFrOGbf93g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjo1NjoyNFrOGbf93g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ4ODQ3OA==", "bodyText": "Wrap all arguments or none", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431488478", "createdAt": "2020-05-27T22:56:24Z", "author": {"login": "electrum"}, "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/OracleDataTypes.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.oracle;\n+\n+import io.prestosql.spi.type.TimestampType;\n+import io.prestosql.spi.type.Type;\n+import io.prestosql.testing.datatype.DataType;\n+\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.function.Function;\n+\n+import static io.prestosql.spi.type.TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE;\n+import static java.lang.String.format;\n+\n+public final class OracleDataTypes\n+{\n+    private OracleDataTypes() {}\n+\n+    /* Datetime types */\n+\n+    public static DataType<LocalDate> dateDataType()\n+    {\n+        return dataType(\"DATE\", TimestampType.TIMESTAMP,\n+                DateTimeFormatter.ofPattern(\"'DATE '''yyyy-MM-dd''\")::format,\n+                LocalDate::atStartOfDay);\n+    }\n+\n+    public static DataType<ZonedDateTime> prestoTimestampWithTimeZoneDataType()\n+    {\n+        return dataType(\n+                \"timestamp with time zone\",\n+                TIMESTAMP_WITH_TIME_ZONE,\n+                DateTimeFormatter.ofPattern(\"'TIMESTAMP '''yyyy-MM-dd HH:mm:ss.SSS VV''\")::format,\n+                OracleDataTypes::normalizeForOracleStorage);\n+    }\n+\n+    @SuppressWarnings(\"MisusedWeekYear\")\n+    public static DataType<ZonedDateTime> oracleTimestamp3TimeZoneDataType()\n+    {\n+        return dataType(\n+                \"TIMESTAMP(3) WITH TIME ZONE\",\n+                TIMESTAMP_WITH_TIME_ZONE,\n+                zonedDateTime -> {\n+                    String zoneId = zonedDateTime.getZone().getId();\n+                    if (zoneId.equals(\"Z\")) {\n+                        zoneId = \"UTC\";\n+                    }\n+                    return format(\n+                            \"from_tz(TIMESTAMP '%s', '%s')\",\n+                            DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSSSSSSSS\").format(zonedDateTime.toLocalDateTime()),\n+                            zoneId);\n+                },\n+                OracleDataTypes::normalizeForOracleStorage);\n+    }\n+\n+    private static ZonedDateTime normalizeForOracleStorage(ZonedDateTime zonedDateTime)\n+    {\n+        // Oracle conflates UTC-equivalent zones to UTC.\n+        String zoneId = zonedDateTime.getZone().getId();\n+        if (zoneId.equals(\"Z\")) {\n+            // Oracle conflates UTC-equivalent zones to UTC.\n+            return zonedDateTime.withZoneSameInstant(ZoneId.of(\"UTC\"));\n+        }\n+        return zonedDateTime;\n+    }\n+\n+    /* Utility */\n+\n+    private static <T> DataType<T> dataType(String insertType, Type prestoResultType,\n+            Function<T, String> toLiteral, Function<T, ?> toPrestoQueryResult)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzUyODY5OnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleTypes.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjo1NzoxNVrOGbf-9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOTozMzozM1rOGbtPkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ4ODc1OQ==", "bodyText": "Nit: s -> value", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431488759", "createdAt": "2020-05-27T22:57:15Z", "author": {"login": "electrum"}, "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleTypes.java", "diffHunk": "@@ -153,12 +204,322 @@ public void testNumericTypes()\n                 queryResult);\n     }\n \n-    public static DataType<LocalDate> dateOracleType()\n+    /* Datetime tests */\n+\n+    @Test\n+    public void testLegacyDateMapping()\n     {\n-        return DataType.dataType(\n-                \"date\",\n-                TimestampType.TIMESTAMP,\n-                DateTimeFormatter.ofPattern(\"'DATE '''yyyy-MM-dd''\")::format,\n-                LocalDate::atStartOfDay);\n+        legacyDateTests(s -> prestoCreateAsSelect(\"l_date_\" + s));\n+    }\n+\n+    @Test\n+    public void testLegacyDateReadMapping()\n+    {\n+        legacyDateTests(s -> oracleCreateAndInsert(\"l_read_date_\" + s));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwNjAwMQ==", "bodyText": "Changed to more appropriate zone", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431706001", "createdAt": "2020-05-28T09:33:33Z", "author": {"login": "losipiuk"}, "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleTypes.java", "diffHunk": "@@ -153,12 +204,322 @@ public void testNumericTypes()\n                 queryResult);\n     }\n \n-    public static DataType<LocalDate> dateOracleType()\n+    /* Datetime tests */\n+\n+    @Test\n+    public void testLegacyDateMapping()\n     {\n-        return DataType.dataType(\n-                \"date\",\n-                TimestampType.TIMESTAMP,\n-                DateTimeFormatter.ofPattern(\"'DATE '''yyyy-MM-dd''\")::format,\n-                LocalDate::atStartOfDay);\n+        legacyDateTests(s -> prestoCreateAsSelect(\"l_date_\" + s));\n+    }\n+\n+    @Test\n+    public void testLegacyDateReadMapping()\n+    {\n+        legacyDateTests(s -> oracleCreateAndInsert(\"l_read_date_\" + s));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ4ODc1OQ=="}, "originalCommit": null, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzUzMDMyOnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleTypes.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjo1Nzo1MFrOGbf_6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOTozNjoyOVrOGbtWMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ4OTAwMg==", "bodyText": "This is not a Javadoc comment, so don't use Javadoc tags", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431489002", "createdAt": "2020-05-27T22:57:50Z", "author": {"login": "electrum"}, "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleTypes.java", "diffHunk": "@@ -153,12 +204,322 @@ public void testNumericTypes()\n                 queryResult);\n     }\n \n-    public static DataType<LocalDate> dateOracleType()\n+    /* Datetime tests */\n+\n+    @Test\n+    public void testLegacyDateMapping()\n     {\n-        return DataType.dataType(\n-                \"date\",\n-                TimestampType.TIMESTAMP,\n-                DateTimeFormatter.ofPattern(\"'DATE '''yyyy-MM-dd''\")::format,\n-                LocalDate::atStartOfDay);\n+        legacyDateTests(s -> prestoCreateAsSelect(\"l_date_\" + s));\n+    }\n+\n+    @Test\n+    public void testLegacyDateReadMapping()\n+    {\n+        legacyDateTests(s -> oracleCreateAndInsert(\"l_read_date_\" + s));\n+    }\n+\n+    private void legacyDateTests(Function<String, DataSetup> dataSetup)\n+    {\n+        Map<String, TimeZoneKey> zonesBySqlName = ImmutableMap.of(\n+                \"UTC\", UTC_KEY,\n+                \"JVM\", getTimeZoneKey(ZoneId.systemDefault().getId()),\n+                \"other\", getTimeZoneKey(ZoneId.of(\"Europe/Vilnius\").getId()));\n+\n+        for (Map.Entry<String, TimeZoneKey> zone : zonesBySqlName.entrySet()) {\n+            runLegacyTimestampTestInZone(\n+                    dataSetup.apply(zone.getKey()),\n+                    zone.getValue().getId(),\n+                    legacyDateTests());\n+        }\n+    }\n+\n+    /*\n+     * TODO These tests should be executed in {@link io.prestosql.Session Sessions}", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwNzY5Nw==", "bodyText": "I dropped the comment. It was not valid any more.", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431707697", "createdAt": "2020-05-28T09:36:29Z", "author": {"login": "losipiuk"}, "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleTypes.java", "diffHunk": "@@ -153,12 +204,322 @@ public void testNumericTypes()\n                 queryResult);\n     }\n \n-    public static DataType<LocalDate> dateOracleType()\n+    /* Datetime tests */\n+\n+    @Test\n+    public void testLegacyDateMapping()\n     {\n-        return DataType.dataType(\n-                \"date\",\n-                TimestampType.TIMESTAMP,\n-                DateTimeFormatter.ofPattern(\"'DATE '''yyyy-MM-dd''\")::format,\n-                LocalDate::atStartOfDay);\n+        legacyDateTests(s -> prestoCreateAsSelect(\"l_date_\" + s));\n+    }\n+\n+    @Test\n+    public void testLegacyDateReadMapping()\n+    {\n+        legacyDateTests(s -> oracleCreateAndInsert(\"l_read_date_\" + s));\n+    }\n+\n+    private void legacyDateTests(Function<String, DataSetup> dataSetup)\n+    {\n+        Map<String, TimeZoneKey> zonesBySqlName = ImmutableMap.of(\n+                \"UTC\", UTC_KEY,\n+                \"JVM\", getTimeZoneKey(ZoneId.systemDefault().getId()),\n+                \"other\", getTimeZoneKey(ZoneId.of(\"Europe/Vilnius\").getId()));\n+\n+        for (Map.Entry<String, TimeZoneKey> zone : zonesBySqlName.entrySet()) {\n+            runLegacyTimestampTestInZone(\n+                    dataSetup.apply(zone.getKey()),\n+                    zone.getValue().getId(),\n+                    legacyDateTests());\n+        }\n+    }\n+\n+    /*\n+     * TODO These tests should be executed in {@link io.prestosql.Session Sessions}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ4OTAwMg=="}, "originalCommit": null, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzUzMDcwOnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleTypes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjo1ODowMFrOGbgAIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjo1ODowMFrOGbgAIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ4OTA1OA==", "bodyText": "Same", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431489058", "createdAt": "2020-05-27T22:58:00Z", "author": {"login": "electrum"}, "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleTypes.java", "diffHunk": "@@ -153,12 +204,322 @@ public void testNumericTypes()\n                 queryResult);\n     }\n \n-    public static DataType<LocalDate> dateOracleType()\n+    /* Datetime tests */\n+\n+    @Test\n+    public void testLegacyDateMapping()\n     {\n-        return DataType.dataType(\n-                \"date\",\n-                TimestampType.TIMESTAMP,\n-                DateTimeFormatter.ofPattern(\"'DATE '''yyyy-MM-dd''\")::format,\n-                LocalDate::atStartOfDay);\n+        legacyDateTests(s -> prestoCreateAsSelect(\"l_date_\" + s));\n+    }\n+\n+    @Test\n+    public void testLegacyDateReadMapping()\n+    {\n+        legacyDateTests(s -> oracleCreateAndInsert(\"l_read_date_\" + s));\n+    }\n+\n+    private void legacyDateTests(Function<String, DataSetup> dataSetup)\n+    {\n+        Map<String, TimeZoneKey> zonesBySqlName = ImmutableMap.of(\n+                \"UTC\", UTC_KEY,\n+                \"JVM\", getTimeZoneKey(ZoneId.systemDefault().getId()),\n+                \"other\", getTimeZoneKey(ZoneId.of(\"Europe/Vilnius\").getId()));\n+\n+        for (Map.Entry<String, TimeZoneKey> zone : zonesBySqlName.entrySet()) {\n+            runLegacyTimestampTestInZone(\n+                    dataSetup.apply(zone.getKey()),\n+                    zone.getValue().getId(),\n+                    legacyDateTests());\n+        }\n+    }\n+\n+    /*\n+     * TODO These tests should be executed in {@link io.prestosql.Session Sessions}\n+     * configured for the JVM time zone, Europe/Vilnius, and UTC.\n+     */\n+    private static DataTypeTest legacyDateTests()\n+    {\n+        ZoneId someZone = ZoneId.of(\"Europe/Vilnius\");\n+\n+        LocalDate dateOfLocalTimeChangeBackwardAtMidnightInSomeZone =\n+                LocalDate.of(1983, 10, 1);\n+\n+        verify(someZone.getRules().getValidOffsets(\n+                dateOfLocalTimeChangeBackwardAtMidnightInSomeZone\n+                        .atStartOfDay().minusMinutes(1)).size() == 2);\n+\n+        return DataTypeTest.create()\n+                // before epoch\n+                .addRoundTrip(dateDataType(), LocalDate.of(1952, 4, 3))\n+                .addRoundTrip(dateDataType(), LocalDate.of(1970, 2, 3))\n+                // summer on northern hemisphere (possible DST)\n+                .addRoundTrip(dateDataType(), LocalDate.of(2017, 7, 1))\n+                // winter on northern hemisphere\n+                // (possible DST on southern hemisphere)\n+                .addRoundTrip(dateDataType(), LocalDate.of(2017, 1, 1))\n+                .addRoundTrip(dateDataType(),\n+                        dateOfLocalTimeChangeBackwardAtMidnightInSomeZone);\n+    }\n+\n+    @Test\n+    public void testNonLegacyDateMapping()\n+    {\n+        nonLegacyDateTests(s -> prestoCreateAsSelect(\"nl_date_\" + s));\n+    }\n+\n+    @Test\n+    public void testNonLegacyDateReadMapping()\n+    {\n+        nonLegacyDateTests(s -> oracleCreateAndInsert(\"nl_read_date_\" + s));\n+    }\n+\n+    void nonLegacyDateTests(Function<String, DataSetup> dataSetup)\n+    {\n+        Map<String, TimeZoneKey> zonesBySqlName = ImmutableMap.of(\n+                \"UTC\", UTC_KEY,\n+                \"JVM\", getTimeZoneKey(ZoneId.systemDefault().getId()),\n+                \"other\", getTimeZoneKey(ZoneId.of(\"Europe/Vilnius\").getId()));\n+\n+        for (Map.Entry<String, TimeZoneKey> zone : zonesBySqlName.entrySet()) {\n+            runNonLegacyTimestampTestInZone(\n+                    dataSetup.apply(zone.getKey()),\n+                    zone.getValue().getId(),\n+                    nonLegacyDateTests());\n+        }\n+    }\n+\n+    /*\n+     * TODO These tests should be executed in {@link io.prestosql.Session Sessions}", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 227}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzUzMjg2OnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleTypes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjo1OTowM1rOGbgBZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjo1OTowM1rOGbgBZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ4OTM4MQ==", "bodyText": "Why? Add a TODO comment or remove these", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431489381", "createdAt": "2020-05-27T22:59:03Z", "author": {"login": "electrum"}, "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleTypes.java", "diffHunk": "@@ -153,12 +204,322 @@ public void testNumericTypes()\n                 queryResult);\n     }\n \n-    public static DataType<LocalDate> dateOracleType()\n+    /* Datetime tests */\n+\n+    @Test\n+    public void testLegacyDateMapping()\n     {\n-        return DataType.dataType(\n-                \"date\",\n-                TimestampType.TIMESTAMP,\n-                DateTimeFormatter.ofPattern(\"'DATE '''yyyy-MM-dd''\")::format,\n-                LocalDate::atStartOfDay);\n+        legacyDateTests(s -> prestoCreateAsSelect(\"l_date_\" + s));\n+    }\n+\n+    @Test\n+    public void testLegacyDateReadMapping()\n+    {\n+        legacyDateTests(s -> oracleCreateAndInsert(\"l_read_date_\" + s));\n+    }\n+\n+    private void legacyDateTests(Function<String, DataSetup> dataSetup)\n+    {\n+        Map<String, TimeZoneKey> zonesBySqlName = ImmutableMap.of(\n+                \"UTC\", UTC_KEY,\n+                \"JVM\", getTimeZoneKey(ZoneId.systemDefault().getId()),\n+                \"other\", getTimeZoneKey(ZoneId.of(\"Europe/Vilnius\").getId()));\n+\n+        for (Map.Entry<String, TimeZoneKey> zone : zonesBySqlName.entrySet()) {\n+            runLegacyTimestampTestInZone(\n+                    dataSetup.apply(zone.getKey()),\n+                    zone.getValue().getId(),\n+                    legacyDateTests());\n+        }\n+    }\n+\n+    /*\n+     * TODO These tests should be executed in {@link io.prestosql.Session Sessions}\n+     * configured for the JVM time zone, Europe/Vilnius, and UTC.\n+     */\n+    private static DataTypeTest legacyDateTests()\n+    {\n+        ZoneId someZone = ZoneId.of(\"Europe/Vilnius\");\n+\n+        LocalDate dateOfLocalTimeChangeBackwardAtMidnightInSomeZone =\n+                LocalDate.of(1983, 10, 1);\n+\n+        verify(someZone.getRules().getValidOffsets(\n+                dateOfLocalTimeChangeBackwardAtMidnightInSomeZone\n+                        .atStartOfDay().minusMinutes(1)).size() == 2);\n+\n+        return DataTypeTest.create()\n+                // before epoch\n+                .addRoundTrip(dateDataType(), LocalDate.of(1952, 4, 3))\n+                .addRoundTrip(dateDataType(), LocalDate.of(1970, 2, 3))\n+                // summer on northern hemisphere (possible DST)\n+                .addRoundTrip(dateDataType(), LocalDate.of(2017, 7, 1))\n+                // winter on northern hemisphere\n+                // (possible DST on southern hemisphere)\n+                .addRoundTrip(dateDataType(), LocalDate.of(2017, 1, 1))\n+                .addRoundTrip(dateDataType(),\n+                        dateOfLocalTimeChangeBackwardAtMidnightInSomeZone);\n+    }\n+\n+    @Test\n+    public void testNonLegacyDateMapping()\n+    {\n+        nonLegacyDateTests(s -> prestoCreateAsSelect(\"nl_date_\" + s));\n+    }\n+\n+    @Test\n+    public void testNonLegacyDateReadMapping()\n+    {\n+        nonLegacyDateTests(s -> oracleCreateAndInsert(\"nl_read_date_\" + s));\n+    }\n+\n+    void nonLegacyDateTests(Function<String, DataSetup> dataSetup)\n+    {\n+        Map<String, TimeZoneKey> zonesBySqlName = ImmutableMap.of(\n+                \"UTC\", UTC_KEY,\n+                \"JVM\", getTimeZoneKey(ZoneId.systemDefault().getId()),\n+                \"other\", getTimeZoneKey(ZoneId.of(\"Europe/Vilnius\").getId()));\n+\n+        for (Map.Entry<String, TimeZoneKey> zone : zonesBySqlName.entrySet()) {\n+            runNonLegacyTimestampTestInZone(\n+                    dataSetup.apply(zone.getKey()),\n+                    zone.getValue().getId(),\n+                    nonLegacyDateTests());\n+        }\n+    }\n+\n+    /*\n+     * TODO These tests should be executed in {@link io.prestosql.Session Sessions}\n+     * configured for the JVM time zone, Europe/Vilnius, and UTC.\n+     */\n+    private DataTypeTest nonLegacyDateTests()\n+    {\n+        // Note: these test cases are duplicates of those for PostgreSQL and MySQL.\n+\n+        LocalDate dateOfLocalTimeChangeForwardAtMidnightInJvmZone =\n+                LocalDate.of(1970, 1, 1);\n+\n+        verify(jvmZone.getRules().getValidOffsets(\n+                dateOfLocalTimeChangeForwardAtMidnightInJvmZone\n+                        .atStartOfDay()).isEmpty());\n+\n+        ZoneId someZone = ZoneId.of(\"Europe/Vilnius\");\n+\n+        LocalDate dateOfLocalTimeChangeForwardAtMidnightInSomeZone =\n+                LocalDate.of(1983, 4, 1);\n+\n+        verify(someZone.getRules().getValidOffsets(\n+                dateOfLocalTimeChangeForwardAtMidnightInSomeZone\n+                        .atStartOfDay()).isEmpty());\n+\n+        LocalDate dateOfLocalTimeChangeBackwardAtMidnightInSomeZone =\n+                LocalDate.of(1983, 10, 1);\n+\n+        verify(someZone.getRules().getValidOffsets(\n+                dateOfLocalTimeChangeBackwardAtMidnightInSomeZone\n+                        .atStartOfDay().minusMinutes(1)).size() == 2);\n+\n+        return DataTypeTest.create()\n+                // before epoch\n+                .addRoundTrip(dateDataType(), LocalDate.of(1952, 4, 3))\n+                .addRoundTrip(dateDataType(), LocalDate.of(1970, 1, 1))\n+                .addRoundTrip(dateDataType(), LocalDate.of(1970, 2, 3))\n+                // summer on northern hemisphere (possible DST)\n+                .addRoundTrip(dateDataType(), LocalDate.of(2017, 7, 1))\n+                // winter on northern hemisphere\n+                // (possible DST on southern hemisphere)\n+                .addRoundTrip(dateDataType(), LocalDate.of(2017, 1, 1))\n+                .addRoundTrip(dateDataType(),\n+                        dateOfLocalTimeChangeForwardAtMidnightInJvmZone)\n+                .addRoundTrip(dateDataType(),\n+                        dateOfLocalTimeChangeForwardAtMidnightInSomeZone)\n+                .addRoundTrip(dateDataType(),\n+                        dateOfLocalTimeChangeBackwardAtMidnightInSomeZone);\n+    }\n+\n+    @Test(dataProvider = \"testTimestampDataProvider\")\n+    public void testTimestamp(boolean legacyTimestamp, boolean insertWithPresto, ZoneId sessionZone)\n+    {\n+        // using two non-JVM zones so that we don't need to worry what Oracle system zone is\n+        DataTypeTest tests = DataTypeTest.create()\n+                .addRoundTrip(timestampDataType(), beforeEpoch)\n+                .addRoundTrip(timestampDataType(), afterEpoch)\n+                .addRoundTrip(timestampDataType(), timeDoubledInJvmZone)\n+                .addRoundTrip(timestampDataType(), timeDoubledInVilnius);\n+\n+        addTimestampTestIfSupported(tests, legacyTimestamp, sessionZone, epoch); // epoch also is a gap in JVM zone\n+        addTimestampTestIfSupported(tests, legacyTimestamp, sessionZone, timeGapInJvmZone1);\n+        addTimestampTestIfSupported(tests, legacyTimestamp, sessionZone, timeGapInJvmZone2);\n+        addTimestampTestIfSupported(tests, legacyTimestamp, sessionZone, timeGapInVilnius);\n+        addTimestampTestIfSupported(tests, legacyTimestamp, sessionZone, timeGapInKathmandu);\n+\n+        Session session = Session.builder(getQueryRunner().getDefaultSession())\n+                .setTimeZoneKey(TimeZoneKey.getTimeZoneKey(sessionZone.getId()))\n+                .setSystemProperty(\"legacy_timestamp\", Boolean.toString(legacyTimestamp))\n+                .build();\n+\n+        if (insertWithPresto) {\n+            tests.execute(getQueryRunner(), session, prestoCreateAsSelect(session, \"test_timestamp\"));\n+        }\n+        else {\n+            tests.execute(getQueryRunner(), session, oracleCreateAndInsert(\"test_timestamp\"));\n+        }\n+    }\n+\n+    private void addTimestampTestIfSupported(DataTypeTest tests, boolean legacyTimestamp, ZoneId sessionZone, LocalDateTime dateTime)\n+    {\n+        if (legacyTimestamp && isGap(sessionZone, dateTime)) {\n+            // in legacy timestamp semantics we cannot represent this dateTime\n+            return;\n+        }\n+\n+        tests.addRoundTrip(timestampDataType(), dateTime);\n+    }\n+\n+    @DataProvider\n+    public Object[][] testTimestampDataProvider()\n+    {\n+        return new Object[][] {\n+                {true, true, ZoneOffset.UTC},\n+                {false, true, ZoneOffset.UTC},\n+                {true, false, ZoneOffset.UTC},\n+                {false, false, ZoneOffset.UTC},\n+\n+                {true, true, jvmZone},\n+                {false, true, jvmZone},\n+                {true, false, jvmZone},\n+                {false, false, jvmZone},\n+\n+                // using two non-JVM zones so that we don't need to worry what Oracle system zone is\n+                {true, true, vilnius},\n+                {false, true, vilnius},\n+                {true, false, vilnius},\n+                {false, false, vilnius},\n+\n+                {true, true, kathmandu},\n+                {false, true, kathmandu},\n+                {true, false, kathmandu},\n+                {false, false, kathmandu},\n+\n+                {true, true, ZoneId.of(TestingSession.DEFAULT_TIME_ZONE_KEY.getId())},\n+                {false, true, ZoneId.of(TestingSession.DEFAULT_TIME_ZONE_KEY.getId())},\n+                {true, false, ZoneId.of(TestingSession.DEFAULT_TIME_ZONE_KEY.getId())},\n+                {false, false, ZoneId.of(TestingSession.DEFAULT_TIME_ZONE_KEY.getId())},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"testTimestampWithTimeZoneDataProvider\")\n+    public void testTimestampWithTimeZone(boolean insertWithPresto)\n+    {\n+        DataType<ZonedDateTime> dataType;\n+        DataSetup dataSetup;\n+        if (insertWithPresto) {\n+            dataType = prestoTimestampWithTimeZoneDataType();\n+            dataSetup = prestoCreateAsSelect(\"timestamp_tz\");\n+        }\n+        else {\n+            dataType = oracleTimestamp3TimeZoneDataType();\n+            dataSetup = oracleCreateAndInsert(\"timestamp_tz\");\n+        }\n+\n+        DataTypeTest tests = DataTypeTest.create()\n+                .addRoundTrip(dataType, epoch.atZone(UTC))\n+                .addRoundTrip(dataType, epoch.atZone(kathmandu))\n+                .addRoundTrip(dataType, epoch.atZone(fixedOffsetEast))\n+                .addRoundTrip(dataType, epoch.atZone(fixedOffsetWest))\n+                .addRoundTrip(dataType, beforeEpoch.atZone(UTC))\n+                .addRoundTrip(dataType, beforeEpoch.atZone(kathmandu))\n+                .addRoundTrip(dataType, beforeEpoch.atZone(fixedOffsetEast))\n+                .addRoundTrip(dataType, beforeEpoch.atZone(fixedOffsetWest))\n+                .addRoundTrip(dataType, afterEpoch.atZone(UTC))\n+                .addRoundTrip(dataType, afterEpoch.atZone(kathmandu))\n+                .addRoundTrip(dataType, afterEpoch.atZone(fixedOffsetEast))\n+                .addRoundTrip(dataType, afterEpoch.atZone(fixedOffsetWest))\n+//                .addRoundTrip(dataType, afterEpoch.atZone(ZoneId.of(\"GMT\")))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 373}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzUzMzc5OnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleTypes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjo1OTozNVrOGbgCAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjo1OTozNVrOGbgCAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ4OTUzNg==", "bodyText": "Nit: no need to wrap here", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431489536", "createdAt": "2020-05-27T22:59:35Z", "author": {"login": "electrum"}, "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleTypes.java", "diffHunk": "@@ -153,12 +204,322 @@ public void testNumericTypes()\n                 queryResult);\n     }\n \n-    public static DataType<LocalDate> dateOracleType()\n+    /* Datetime tests */\n+\n+    @Test\n+    public void testLegacyDateMapping()\n     {\n-        return DataType.dataType(\n-                \"date\",\n-                TimestampType.TIMESTAMP,\n-                DateTimeFormatter.ofPattern(\"'DATE '''yyyy-MM-dd''\")::format,\n-                LocalDate::atStartOfDay);\n+        legacyDateTests(s -> prestoCreateAsSelect(\"l_date_\" + s));\n+    }\n+\n+    @Test\n+    public void testLegacyDateReadMapping()\n+    {\n+        legacyDateTests(s -> oracleCreateAndInsert(\"l_read_date_\" + s));\n+    }\n+\n+    private void legacyDateTests(Function<String, DataSetup> dataSetup)\n+    {\n+        Map<String, TimeZoneKey> zonesBySqlName = ImmutableMap.of(\n+                \"UTC\", UTC_KEY,\n+                \"JVM\", getTimeZoneKey(ZoneId.systemDefault().getId()),\n+                \"other\", getTimeZoneKey(ZoneId.of(\"Europe/Vilnius\").getId()));\n+\n+        for (Map.Entry<String, TimeZoneKey> zone : zonesBySqlName.entrySet()) {\n+            runLegacyTimestampTestInZone(\n+                    dataSetup.apply(zone.getKey()),\n+                    zone.getValue().getId(),\n+                    legacyDateTests());\n+        }\n+    }\n+\n+    /*\n+     * TODO These tests should be executed in {@link io.prestosql.Session Sessions}\n+     * configured for the JVM time zone, Europe/Vilnius, and UTC.\n+     */\n+    private static DataTypeTest legacyDateTests()\n+    {\n+        ZoneId someZone = ZoneId.of(\"Europe/Vilnius\");\n+\n+        LocalDate dateOfLocalTimeChangeBackwardAtMidnightInSomeZone =\n+                LocalDate.of(1983, 10, 1);\n+\n+        verify(someZone.getRules().getValidOffsets(\n+                dateOfLocalTimeChangeBackwardAtMidnightInSomeZone\n+                        .atStartOfDay().minusMinutes(1)).size() == 2);\n+\n+        return DataTypeTest.create()\n+                // before epoch\n+                .addRoundTrip(dateDataType(), LocalDate.of(1952, 4, 3))\n+                .addRoundTrip(dateDataType(), LocalDate.of(1970, 2, 3))\n+                // summer on northern hemisphere (possible DST)\n+                .addRoundTrip(dateDataType(), LocalDate.of(2017, 7, 1))\n+                // winter on northern hemisphere\n+                // (possible DST on southern hemisphere)\n+                .addRoundTrip(dateDataType(), LocalDate.of(2017, 1, 1))\n+                .addRoundTrip(dateDataType(),\n+                        dateOfLocalTimeChangeBackwardAtMidnightInSomeZone);\n+    }\n+\n+    @Test\n+    public void testNonLegacyDateMapping()\n+    {\n+        nonLegacyDateTests(s -> prestoCreateAsSelect(\"nl_date_\" + s));\n+    }\n+\n+    @Test\n+    public void testNonLegacyDateReadMapping()\n+    {\n+        nonLegacyDateTests(s -> oracleCreateAndInsert(\"nl_read_date_\" + s));\n+    }\n+\n+    void nonLegacyDateTests(Function<String, DataSetup> dataSetup)\n+    {\n+        Map<String, TimeZoneKey> zonesBySqlName = ImmutableMap.of(\n+                \"UTC\", UTC_KEY,\n+                \"JVM\", getTimeZoneKey(ZoneId.systemDefault().getId()),\n+                \"other\", getTimeZoneKey(ZoneId.of(\"Europe/Vilnius\").getId()));\n+\n+        for (Map.Entry<String, TimeZoneKey> zone : zonesBySqlName.entrySet()) {\n+            runNonLegacyTimestampTestInZone(\n+                    dataSetup.apply(zone.getKey()),\n+                    zone.getValue().getId(),\n+                    nonLegacyDateTests());\n+        }\n+    }\n+\n+    /*\n+     * TODO These tests should be executed in {@link io.prestosql.Session Sessions}\n+     * configured for the JVM time zone, Europe/Vilnius, and UTC.\n+     */\n+    private DataTypeTest nonLegacyDateTests()\n+    {\n+        // Note: these test cases are duplicates of those for PostgreSQL and MySQL.\n+\n+        LocalDate dateOfLocalTimeChangeForwardAtMidnightInJvmZone =\n+                LocalDate.of(1970, 1, 1);\n+\n+        verify(jvmZone.getRules().getValidOffsets(\n+                dateOfLocalTimeChangeForwardAtMidnightInJvmZone\n+                        .atStartOfDay()).isEmpty());\n+\n+        ZoneId someZone = ZoneId.of(\"Europe/Vilnius\");\n+\n+        LocalDate dateOfLocalTimeChangeForwardAtMidnightInSomeZone =\n+                LocalDate.of(1983, 4, 1);\n+\n+        verify(someZone.getRules().getValidOffsets(\n+                dateOfLocalTimeChangeForwardAtMidnightInSomeZone\n+                        .atStartOfDay()).isEmpty());\n+\n+        LocalDate dateOfLocalTimeChangeBackwardAtMidnightInSomeZone =\n+                LocalDate.of(1983, 10, 1);\n+\n+        verify(someZone.getRules().getValidOffsets(\n+                dateOfLocalTimeChangeBackwardAtMidnightInSomeZone\n+                        .atStartOfDay().minusMinutes(1)).size() == 2);\n+\n+        return DataTypeTest.create()\n+                // before epoch\n+                .addRoundTrip(dateDataType(), LocalDate.of(1952, 4, 3))\n+                .addRoundTrip(dateDataType(), LocalDate.of(1970, 1, 1))\n+                .addRoundTrip(dateDataType(), LocalDate.of(1970, 2, 3))\n+                // summer on northern hemisphere (possible DST)\n+                .addRoundTrip(dateDataType(), LocalDate.of(2017, 7, 1))\n+                // winter on northern hemisphere\n+                // (possible DST on southern hemisphere)\n+                .addRoundTrip(dateDataType(), LocalDate.of(2017, 1, 1))\n+                .addRoundTrip(dateDataType(),\n+                        dateOfLocalTimeChangeForwardAtMidnightInJvmZone)\n+                .addRoundTrip(dateDataType(),\n+                        dateOfLocalTimeChangeForwardAtMidnightInSomeZone)\n+                .addRoundTrip(dateDataType(),\n+                        dateOfLocalTimeChangeBackwardAtMidnightInSomeZone);\n+    }\n+\n+    @Test(dataProvider = \"testTimestampDataProvider\")\n+    public void testTimestamp(boolean legacyTimestamp, boolean insertWithPresto, ZoneId sessionZone)\n+    {\n+        // using two non-JVM zones so that we don't need to worry what Oracle system zone is\n+        DataTypeTest tests = DataTypeTest.create()\n+                .addRoundTrip(timestampDataType(), beforeEpoch)\n+                .addRoundTrip(timestampDataType(), afterEpoch)\n+                .addRoundTrip(timestampDataType(), timeDoubledInJvmZone)\n+                .addRoundTrip(timestampDataType(), timeDoubledInVilnius);\n+\n+        addTimestampTestIfSupported(tests, legacyTimestamp, sessionZone, epoch); // epoch also is a gap in JVM zone\n+        addTimestampTestIfSupported(tests, legacyTimestamp, sessionZone, timeGapInJvmZone1);\n+        addTimestampTestIfSupported(tests, legacyTimestamp, sessionZone, timeGapInJvmZone2);\n+        addTimestampTestIfSupported(tests, legacyTimestamp, sessionZone, timeGapInVilnius);\n+        addTimestampTestIfSupported(tests, legacyTimestamp, sessionZone, timeGapInKathmandu);\n+\n+        Session session = Session.builder(getQueryRunner().getDefaultSession())\n+                .setTimeZoneKey(TimeZoneKey.getTimeZoneKey(sessionZone.getId()))\n+                .setSystemProperty(\"legacy_timestamp\", Boolean.toString(legacyTimestamp))\n+                .build();\n+\n+        if (insertWithPresto) {\n+            tests.execute(getQueryRunner(), session, prestoCreateAsSelect(session, \"test_timestamp\"));\n+        }\n+        else {\n+            tests.execute(getQueryRunner(), session, oracleCreateAndInsert(\"test_timestamp\"));\n+        }\n+    }\n+\n+    private void addTimestampTestIfSupported(DataTypeTest tests, boolean legacyTimestamp, ZoneId sessionZone, LocalDateTime dateTime)\n+    {\n+        if (legacyTimestamp && isGap(sessionZone, dateTime)) {\n+            // in legacy timestamp semantics we cannot represent this dateTime\n+            return;\n+        }\n+\n+        tests.addRoundTrip(timestampDataType(), dateTime);\n+    }\n+\n+    @DataProvider\n+    public Object[][] testTimestampDataProvider()\n+    {\n+        return new Object[][] {\n+                {true, true, ZoneOffset.UTC},\n+                {false, true, ZoneOffset.UTC},\n+                {true, false, ZoneOffset.UTC},\n+                {false, false, ZoneOffset.UTC},\n+\n+                {true, true, jvmZone},\n+                {false, true, jvmZone},\n+                {true, false, jvmZone},\n+                {false, false, jvmZone},\n+\n+                // using two non-JVM zones so that we don't need to worry what Oracle system zone is\n+                {true, true, vilnius},\n+                {false, true, vilnius},\n+                {true, false, vilnius},\n+                {false, false, vilnius},\n+\n+                {true, true, kathmandu},\n+                {false, true, kathmandu},\n+                {true, false, kathmandu},\n+                {false, false, kathmandu},\n+\n+                {true, true, ZoneId.of(TestingSession.DEFAULT_TIME_ZONE_KEY.getId())},\n+                {false, true, ZoneId.of(TestingSession.DEFAULT_TIME_ZONE_KEY.getId())},\n+                {true, false, ZoneId.of(TestingSession.DEFAULT_TIME_ZONE_KEY.getId())},\n+                {false, false, ZoneId.of(TestingSession.DEFAULT_TIME_ZONE_KEY.getId())},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"testTimestampWithTimeZoneDataProvider\")\n+    public void testTimestampWithTimeZone(boolean insertWithPresto)\n+    {\n+        DataType<ZonedDateTime> dataType;\n+        DataSetup dataSetup;\n+        if (insertWithPresto) {\n+            dataType = prestoTimestampWithTimeZoneDataType();\n+            dataSetup = prestoCreateAsSelect(\"timestamp_tz\");\n+        }\n+        else {\n+            dataType = oracleTimestamp3TimeZoneDataType();\n+            dataSetup = oracleCreateAndInsert(\"timestamp_tz\");\n+        }\n+\n+        DataTypeTest tests = DataTypeTest.create()\n+                .addRoundTrip(dataType, epoch.atZone(UTC))\n+                .addRoundTrip(dataType, epoch.atZone(kathmandu))\n+                .addRoundTrip(dataType, epoch.atZone(fixedOffsetEast))\n+                .addRoundTrip(dataType, epoch.atZone(fixedOffsetWest))\n+                .addRoundTrip(dataType, beforeEpoch.atZone(UTC))\n+                .addRoundTrip(dataType, beforeEpoch.atZone(kathmandu))\n+                .addRoundTrip(dataType, beforeEpoch.atZone(fixedOffsetEast))\n+                .addRoundTrip(dataType, beforeEpoch.atZone(fixedOffsetWest))\n+                .addRoundTrip(dataType, afterEpoch.atZone(UTC))\n+                .addRoundTrip(dataType, afterEpoch.atZone(kathmandu))\n+                .addRoundTrip(dataType, afterEpoch.atZone(fixedOffsetEast))\n+                .addRoundTrip(dataType, afterEpoch.atZone(fixedOffsetWest))\n+//                .addRoundTrip(dataType, afterEpoch.atZone(ZoneId.of(\"GMT\")))\n+//                .addRoundTrip(dataType, afterEpoch.atZone(ZoneId.of(\"UTC\")))\n+//                .addRoundTrip(dataType, afterEpoch.atZone(ZoneId.of(\"Z\")))\n+//                .addRoundTrip(dataType, afterEpoch.atZone(ZoneId.of(\"UTC+00:00\")))\n+                .addRoundTrip(dataType, timeDoubledInJvmZone.atZone(UTC))\n+                .addRoundTrip(dataType, timeDoubledInJvmZone.atZone(jvmZone))\n+                .addRoundTrip(dataType, timeDoubledInJvmZone.atZone(kathmandu))\n+                .addRoundTrip(dataType, timeDoubledInVilnius.atZone(UTC))\n+                .addRoundTrip(dataType, timeDoubledInVilnius.atZone(vilnius))\n+                .addRoundTrip(dataType, timeDoubledInVilnius.atZone(kathmandu))\n+                .addRoundTrip(dataType, timeGapInJvmZone1.atZone(UTC))\n+                .addRoundTrip(dataType, timeGapInJvmZone1.atZone(kathmandu))\n+                .addRoundTrip(dataType, timeGapInJvmZone2.atZone(UTC))\n+                .addRoundTrip(dataType, timeGapInJvmZone2.atZone(kathmandu))\n+                .addRoundTrip(dataType, timeGapInVilnius.atZone(kathmandu))\n+                .addRoundTrip(dataType, timeGapInKathmandu.atZone(vilnius));\n+\n+        tests.execute(getQueryRunner(), dataSetup);\n+    }\n+\n+    @DataProvider\n+    public Object[][] testTimestampWithTimeZoneDataProvider()\n+    {\n+        return new Object[][] {\n+                {true},\n+                {false},\n+        };\n+    }\n+\n+    private DataSetup oracleCreateAndInsert(String tableNamePrefix)\n+    {\n+        return new CreateAndInsertDataSetup(\n+                getSqlExecutor(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 405}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzU0NDI0OnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzowMzo1MlrOGbgH2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzowNTo0MFrOGbgKIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ5MTAzNQ==", "bodyText": "This is confusing to read, add parens\nboolean precisionUnspecified = (columnSize + max(-typeHandle.getDecimalDigits(), 0)) == 127;", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431491035", "createdAt": "2020-05-27T23:03:52Z", "author": {"login": "electrum"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "diffHunk": "@@ -202,7 +203,8 @@ public void createSchema(JdbcIdentity identity, String schemaName)\n                 if (scale == 0) {\n                     return Optional.of(bigintColumnMapping());\n                 }\n-                if (scale < 0 || scale > precision) {\n+                boolean precisionUnspecified = columnSize + max(-typeHandle.getDecimalDigits(), 0) == 127;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ5MTYxNw==", "bodyText": "Actually, I think this separate boolean makes it harder to read. I'd inline this\nif ((columnSize + max(-typeHandle.getDecimalDigits(), 0)) == 127) {\nOr split it out like\nint digits = columnSize + max(-typeHandle.getDecimalDigits(), 0);\nif (digits == 127) {", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431491617", "createdAt": "2020-05-27T23:05:40Z", "author": {"login": "electrum"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "diffHunk": "@@ -202,7 +203,8 @@ public void createSchema(JdbcIdentity identity, String schemaName)\n                 if (scale == 0) {\n                     return Optional.of(bigintColumnMapping());\n                 }\n-                if (scale < 0 || scale > precision) {\n+                boolean precisionUnspecified = columnSize + max(-typeHandle.getDecimalDigits(), 0) == 127;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ5MTAzNQ=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzU1NTMxOnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzowODozMlrOGbgOQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzoxMDo0NVrOGbgRaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ5MjY3NA==", "bodyText": "Nit: redundant else", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431492674", "createdAt": "2020-05-27T23:08:32Z", "author": {"login": "electrum"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "diffHunk": "@@ -205,7 +205,12 @@ public void createSchema(JdbcIdentity identity, String schemaName)\n                 }\n                 boolean precisionUnspecified = columnSize + max(-typeHandle.getDecimalDigits(), 0) == 127;\n                 if (precisionUnspecified) {\n-                    return Optional.of(decimalColumnMapping(createDecimalType(precision, numberDefaultScale), numberRoundingMode));\n+                    if (numberDefaultScale.isPresent()) {\n+                        return Optional.of(decimalColumnMapping(createDecimalType(precision, numberDefaultScale.get()), numberRoundingMode));\n+                    }\n+                    else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ5MzQ4Mw==", "bodyText": "This can be replaced with\nreturn numberDefaultScale.map(scale -> decimalColumnMapping(createDecimalType(precision, scale), numberRoundingMode));\nOr\nreturn numberDefaultScale\n        .map(scale -> createDecimalType(precision, scale))\n        .map(type -> decimalColumnMapping(type, numberRoundingMode));", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431493483", "createdAt": "2020-05-27T23:10:45Z", "author": {"login": "electrum"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "diffHunk": "@@ -205,7 +205,12 @@ public void createSchema(JdbcIdentity identity, String schemaName)\n                 }\n                 boolean precisionUnspecified = columnSize + max(-typeHandle.getDecimalDigits(), 0) == 127;\n                 if (precisionUnspecified) {\n-                    return Optional.of(decimalColumnMapping(createDecimalType(precision, numberDefaultScale), numberRoundingMode));\n+                    if (numberDefaultScale.isPresent()) {\n+                        return Optional.of(decimalColumnMapping(createDecimalType(precision, numberDefaultScale.get()), numberRoundingMode));\n+                    }\n+                    else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ5MjY3NA=="}, "originalCommit": null, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzU2NTA3OnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzoxMjozN1rOGbgT2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzoxMjozN1rOGbgT2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ5NDEwNQ==", "bodyText": "Can you add a test using assertFailsValidation() to verify that this works?", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431494105", "createdAt": "2020-05-27T23:12:37Z", "author": {"login": "electrum"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleConfig.java", "diffHunk": "@@ -41,17 +43,16 @@ public OracleConfig setSynonymsEnabled(boolean enabled)\n         return this;\n     }\n \n-    @Min(0)\n-    @Max(38)\n-    public int getNumberDefaultScale()\n+    public Optional<@Min(0) @Max(38) Integer> getDefaultNumberScale()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzU2NjgyOnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzoxMzoyN1rOGbgU6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzoxMzoyN1rOGbgU6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ5NDM3Ng==", "bodyText": "date -> data", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431494376", "createdAt": "2020-05-27T23:13:27Z", "author": {"login": "electrum"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleConfig.java", "diffHunk": "@@ -41,17 +43,16 @@ public OracleConfig setSynonymsEnabled(boolean enabled)\n         return this;\n     }\n \n-    @Min(0)\n-    @Max(38)\n-    public int getNumberDefaultScale()\n+    public Optional<@Min(0) @Max(38) Integer> getDefaultNumberScale()\n     {\n-        return numberDefaultScale;\n+        return Optional.ofNullable(defaultNumberScale);\n     }\n \n     @Config(\"oracle.number.default-scale\")\n-    public OracleConfig setNumberDefaultScale(Integer numberDefaultScale)\n+    @ConfigDescription(\"Default Presto DECIMAL scale for Oracle NUMBER date type\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzU2ODIzOnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzoxNDowOVrOGbgVuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzoxNDowOVrOGbgVuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ5NDU4NQ==", "bodyText": "We usually static import the session property getters", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431494585", "createdAt": "2020-05-27T23:14:09Z", "author": {"login": "electrum"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "diffHunk": "@@ -203,6 +199,8 @@ public void createSchema(JdbcIdentity identity, String schemaName)\n                 if (scale == 0) {\n                     return Optional.of(bigintColumnMapping());\n                 }\n+                RoundingMode numberRoundingMode = OracleSessionProperties.getNumberRoundingMode(session);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzU2OTY1OnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleSessionProperties.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzoxNDo1NFrOGbgWjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzoxNDo1NFrOGbgWjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ5NDc5OA==", "bodyText": "Nit: could shorten parameter to config", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431494798", "createdAt": "2020-05-27T23:14:54Z", "author": {"login": "electrum"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleSessionProperties.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.oracle;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.plugin.jdbc.SessionPropertiesProvider;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.session.PropertyMetadata;\n+\n+import javax.inject.Inject;\n+\n+import java.math.RoundingMode;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static io.prestosql.spi.session.PropertyMetadata.enumProperty;\n+import static io.prestosql.spi.session.PropertyMetadata.integerProperty;\n+\n+public final class OracleSessionProperties\n+        implements SessionPropertiesProvider\n+{\n+    public static final String NUMBER_ROUNDING_MODE = \"number_rounding_mode\";\n+    public static final String NUMBER_DEFAULT_SCALE = \"number_default_scale\";\n+\n+    private final List<PropertyMetadata<?>> sessionProperties;\n+\n+    @Inject\n+    public OracleSessionProperties(OracleConfig oracleConfig)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzU4NDI1OnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzoyMTozMFrOGbgfFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzoyMTozMFrOGbgfFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ5Njk4MQ==", "bodyText": "Wrap all arguments or none. (I wouldn't wrap here)", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431496981", "createdAt": "2020-05-27T23:21:30Z", "author": {"login": "electrum"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "diffHunk": "@@ -319,6 +337,14 @@ public WriteMapping toWriteMapping(ConnectorSession session, Type type)\n                 return WriteMapping.sliceMapping(\"clob\", varcharWriteFunction());\n             }\n         }\n+        if (type instanceof DecimalType) {\n+            String dataType = format(\"number(%s, %s)\",\n+                    ((DecimalType) type).getPrecision(), ((DecimalType) type).getScale());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzU4NzI0OnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/OracleDataTypes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzoyMzowMlrOGbgg6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzoyMzowMlrOGbgg6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ5NzQ0OA==", "bodyText": "Shouldn't this just be \"\\\\d\"? Or do \"[0-9]\"", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431497448", "createdAt": "2020-05-27T23:23:02Z", "author": {"login": "electrum"}, "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/OracleDataTypes.java", "diffHunk": "@@ -17,19 +17,84 @@\n import io.prestosql.spi.type.Type;\n import io.prestosql.testing.datatype.DataType;\n \n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n import java.time.LocalDate;\n import java.time.ZoneId;\n import java.time.ZonedDateTime;\n import java.time.format.DateTimeFormatter;\n import java.util.function.Function;\n \n+import static io.prestosql.spi.type.DecimalType.createDecimalType;\n import static io.prestosql.spi.type.TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE;\n+import static java.lang.Math.max;\n import static java.lang.String.format;\n+import static java.math.RoundingMode.UNNECESSARY;\n \n public final class OracleDataTypes\n {\n     private OracleDataTypes() {}\n \n+    /* Fixed-point numeric types */\n+\n+    public static DataType<BigDecimal> unspecifiedNumberDataType(int expectedScaleInPresto)\n+    {\n+        return numberDataType(38, expectedScaleInPresto, \"number\");\n+    }\n+\n+    public static DataType<BigDecimal> numberDataType(int precision)\n+    {\n+        return numberDataType(precision, 0, format(\"number(%d)\", precision));\n+    }\n+\n+    /**\n+     * Create a number type using the same transformation as\n+     * OracleClient.toPrestoType to handle negative scale.\n+     */\n+    public static DataType<BigDecimal> numberDataType(int precision, int scale)\n+    {\n+        return numberDataType(precision, scale, format(\"number(%d, %d)\", precision, scale));\n+    }\n+\n+    private static DataType<BigDecimal> numberDataType(int precision, int scale, String oracleInsertType)\n+    {\n+        int prestoPrecision = precision + max(-scale, 0);\n+        int prestoScale = max(scale, 0);\n+        return dataType(\n+                oracleInsertType,\n+                createDecimalType(prestoPrecision, prestoScale),\n+                BigDecimal::toString,\n+                // Round to Oracle's scale if necessary, then return to the scale Presto will use.\n+                i -> i.setScale(scale, RoundingMode.HALF_UP).setScale(prestoScale));\n+    }\n+\n+    public static DataType<BigDecimal> oracleDecimalDataType(int precision, int scale)\n+    {\n+        String databaseType = format(\"decimal(%s, %s)\", precision, scale);\n+        return dataType(\n+                databaseType,\n+                createDecimalType(precision, scale),\n+                bigDecimal -> format(\"CAST(TO_NUMBER('%s', '%s') AS %s)\", bigDecimal.toPlainString(), toNumberFormatMask(bigDecimal), databaseType),\n+                bigDecimal -> bigDecimal.setScale(scale, UNNECESSARY));\n+    }\n+\n+    private static String toNumberFormatMask(BigDecimal bigDecimal)\n+    {\n+        return bigDecimal.toPlainString()\n+                .replace(\"-\", \"\")\n+                .replaceAll(\"[\\\\d]\", \"9\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzYwNTY4OnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleDistributedQueries.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzozMjowNVrOGbgr-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzozMjowNVrOGbgr-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwMDI4Mw==", "bodyText": "Nit: capitalize last AND", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431500283", "createdAt": "2020-05-27T23:32:05Z", "author": {"login": "electrum"}, "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleDistributedQueries.java", "diffHunk": "@@ -352,6 +352,17 @@ public void testShowColumns()\n                 format(\"%s does not matches %s\", actual, expectedParametrizedVarchar));\n     }\n \n+    @Override\n+    public void testInformationSchemaFiltering()\n+    {\n+        assertQuery(\n+                \"SELECT table_name FROM information_schema.tables WHERE table_name = 'orders' LIMIT 1\",\n+                \"SELECT 'orders' table_name\");\n+        assertQuery(\n+                \"SELECT table_name FROM information_schema.columns WHERE data_type = 'decimal(19,0)' AND table_name = 'customer' and column_name = 'custkey' LIMIT 1\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzYwOTM4OnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/OracleDataTypes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzozMzozOVrOGbguHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzozMzozOVrOGbguHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwMDgyOA==", "bodyText": "Nit: d -> value", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431500828", "createdAt": "2020-05-27T23:33:39Z", "author": {"login": "electrum"}, "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/OracleDataTypes.java", "diffHunk": "@@ -95,6 +99,85 @@ private static String toNumberFormatMask(BigDecimal bigDecimal)\n         return dataType(\"boolean\", createDecimalType(1), Object::toString, value -> value ? BigDecimal.ONE : BigDecimal.ZERO);\n     }\n \n+    /* Floating point numeric types */\n+\n+    public static DataType<Double> binaryDoubleDataType()\n+    {\n+        return dataType(\"binary_double\", DoubleType.DOUBLE,\n+                value -> {\n+                    if (Double.isFinite(value)) {\n+                        return value.toString();\n+                    }\n+                    if (Double.isNaN(value)) {\n+                        return \"binary_double_nan\";\n+                    }\n+                    return format(\"%sbinary_double_infinity\", value > 0 ? \"+\" : \"-\");\n+                });\n+    }\n+\n+    public static DataType<Float> binaryFloatDataType()\n+    {\n+        return dataType(\"binary_float\", RealType.REAL,\n+                value -> {\n+                    if (Float.isFinite(value)) {\n+                        return value.toString();\n+                    }\n+                    if (Float.isNaN(value)) {\n+                        return \"binary_float_nan\";\n+                    }\n+                    return format(\"%sbinary_float_infinity\", value > 0 ? \"+\" : \"-\");\n+                });\n+    }\n+\n+    public static DataType<Double> doubleDataType()\n+    {\n+        return dataType(\"double\", DoubleType.DOUBLE,\n+                value -> {\n+                    if (Double.isFinite(value)) {\n+                        return value.toString();\n+                    }\n+                    if (Double.isNaN(value)) {\n+                        return \"nan()\";\n+                    }\n+                    return format(\"%sinfinity()\", value > 0 ? \"+\" : \"-\");\n+                });\n+    }\n+\n+    public static DataType<Float> realDataType()\n+    {\n+        return dataType(\"real\", RealType.REAL,\n+                value -> {\n+                    if (Float.isFinite(value)) {\n+                        return value.toString();\n+                    }\n+                    if (Float.isNaN(value)) {\n+                        return \"nan()\";\n+                    }\n+                    return format(\"%sinfinity()\", value > 0 ? \"+\" : \"-\");\n+                });\n+    }\n+\n+    public static DataType<Double> oracleFloatDataType()\n+    {\n+        return oracleFloatDataType(Optional.empty());\n+    }\n+\n+    public static DataType<Double> oracleFloatDataType(int precision)\n+    {\n+        return oracleFloatDataType(Optional.of(precision));\n+    }\n+\n+    public static DataType<Double> oracleFloatDataType(Optional<Integer> precision)\n+    {\n+        String insertType = \"float\" + (precision.isPresent() ? format(\"(%s)\", precision.get()) : \"\");\n+        return dataType(insertType, DoubleType.DOUBLE,\n+                d -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzYxMDc4OnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/OracleDataTypes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzozNDoyMVrOGbgu-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzozNDoyMVrOGbgu-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwMTA1MQ==", "bodyText": "precision.map(value -> format(\"(%s)\", value)).orElse(\"\")", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431501051", "createdAt": "2020-05-27T23:34:21Z", "author": {"login": "electrum"}, "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/OracleDataTypes.java", "diffHunk": "@@ -95,6 +99,85 @@ private static String toNumberFormatMask(BigDecimal bigDecimal)\n         return dataType(\"boolean\", createDecimalType(1), Object::toString, value -> value ? BigDecimal.ONE : BigDecimal.ZERO);\n     }\n \n+    /* Floating point numeric types */\n+\n+    public static DataType<Double> binaryDoubleDataType()\n+    {\n+        return dataType(\"binary_double\", DoubleType.DOUBLE,\n+                value -> {\n+                    if (Double.isFinite(value)) {\n+                        return value.toString();\n+                    }\n+                    if (Double.isNaN(value)) {\n+                        return \"binary_double_nan\";\n+                    }\n+                    return format(\"%sbinary_double_infinity\", value > 0 ? \"+\" : \"-\");\n+                });\n+    }\n+\n+    public static DataType<Float> binaryFloatDataType()\n+    {\n+        return dataType(\"binary_float\", RealType.REAL,\n+                value -> {\n+                    if (Float.isFinite(value)) {\n+                        return value.toString();\n+                    }\n+                    if (Float.isNaN(value)) {\n+                        return \"binary_float_nan\";\n+                    }\n+                    return format(\"%sbinary_float_infinity\", value > 0 ? \"+\" : \"-\");\n+                });\n+    }\n+\n+    public static DataType<Double> doubleDataType()\n+    {\n+        return dataType(\"double\", DoubleType.DOUBLE,\n+                value -> {\n+                    if (Double.isFinite(value)) {\n+                        return value.toString();\n+                    }\n+                    if (Double.isNaN(value)) {\n+                        return \"nan()\";\n+                    }\n+                    return format(\"%sinfinity()\", value > 0 ? \"+\" : \"-\");\n+                });\n+    }\n+\n+    public static DataType<Float> realDataType()\n+    {\n+        return dataType(\"real\", RealType.REAL,\n+                value -> {\n+                    if (Float.isFinite(value)) {\n+                        return value.toString();\n+                    }\n+                    if (Float.isNaN(value)) {\n+                        return \"nan()\";\n+                    }\n+                    return format(\"%sinfinity()\", value > 0 ? \"+\" : \"-\");\n+                });\n+    }\n+\n+    public static DataType<Double> oracleFloatDataType()\n+    {\n+        return oracleFloatDataType(Optional.empty());\n+    }\n+\n+    public static DataType<Double> oracleFloatDataType(int precision)\n+    {\n+        return oracleFloatDataType(Optional.of(precision));\n+    }\n+\n+    public static DataType<Double> oracleFloatDataType(Optional<Integer> precision)\n+    {\n+        String insertType = \"float\" + (precision.isPresent() ? format(\"(%s)\", precision.get()) : \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzYxNDYxOnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/OracleDataTypes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzozNjowNFrOGbgxPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzozNjowNFrOGbgxPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwMTYzMA==", "bodyText": "Fix wrapping", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431501630", "createdAt": "2020-05-27T23:36:04Z", "author": {"login": "electrum"}, "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/OracleDataTypes.java", "diffHunk": "@@ -150,4 +233,10 @@ private static ZonedDateTime normalizeForOracleStorage(ZonedDateTime zonedDateTi\n     {\n         return DataType.dataType(insertType, prestoResultType, toLiteral, toPrestoQueryResult);\n     }\n+\n+    private static <T> DataType<T> dataType(String insertType, Type prestoResultType,\n+            Function<T, String> toLiteral)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzYxNTE2OnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzozNjoyMFrOGbgxmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzozNjoyMFrOGbgxmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwMTcyMg==", "bodyText": "Fix wrapping", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431501722", "createdAt": "2020-05-27T23:36:20Z", "author": {"login": "electrum"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "diffHunk": "@@ -376,6 +376,7 @@ public WriteMapping toWriteMapping(ConnectorSession session, Type type)\n         if (writeMapping != null) {\n             return writeMapping;\n         }\n-        return super.toWriteMapping(session, type);\n+        throw new PrestoException(NOT_SUPPORTED,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzYxNjU1OnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzozNzowOVrOGbgyjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzozNzowOVrOGbgyjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwMTk2Nw==", "bodyText": "This would read better as\n// single UTF char may require up to 4 bytes of storage", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431501967", "createdAt": "2020-05-27T23:37:09Z", "author": {"login": "electrum"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "diffHunk": "@@ -101,11 +109,17 @@\n public class OracleClient\n         extends BaseJdbcClient\n {\n+    // single UTF char may require at most 4 bytes of storage", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzYxOTI5OnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzozODozMVrOGbg0Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzozODozMVrOGbg0Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwMjM3OA==", "bodyText": "Nit: don't wrap here", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431502378", "createdAt": "2020-05-27T23:38:31Z", "author": {"login": "electrum"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "diffHunk": "@@ -350,16 +379,37 @@ public static DoubleWriteFunction oracleDoubleWriteFunction()\n         return ((statement, index, value) -> ((OraclePreparedStatement) statement).setBinaryDouble(index, value));\n     }\n \n+    private SliceWriteFunction oracleCharWriteFunction(CharType charType)\n+    {\n+        return (statement, index, value) -> {\n+            statement.setString(index, Chars.padSpaces(value, charType).toStringUtf8());\n+        };\n+    }\n+\n     @Override\n     public WriteMapping toWriteMapping(ConnectorSession session, Type type)\n     {\n         if (isVarcharType(type)) {\n-            if (((VarcharType) type).isUnbounded()) {\n-                return super.toWriteMapping(session, createVarcharType(varcharMaxSize));\n+            String dataType;\n+            VarcharType varcharType = (VarcharType) type;\n+            if (varcharType.isUnbounded() ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzY2NTE0OnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleTypes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwMDowMjoxM1rOGbhQWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwMDowMjoxM1rOGbhQWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwOTU5Mw==", "bodyText": "The word \"converts\" here seems to be a mistake.", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431509593", "createdAt": "2020-05-28T00:02:13Z", "author": {"login": "electrum"}, "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleTypes.java", "diffHunk": "@@ -347,6 +351,35 @@ private static DataTypeTest unicodeTests(IntFunction<DataType<String>> typeConst\n                 .addRoundTrip(typeConstructor.apply(nonBmpLength + 5), nonBmpCharacter);\n     }\n \n+    /* Varbinary tests */\n+\n+    @Test\n+    public void testVarbinaryMapping()\n+    {\n+        testTypeMapping(\"varbinary\", varbinaryTests(varbinaryDataType()));\n+    }\n+\n+    @Test\n+    public void testVarbinaryReadMapping()\n+    {\n+        testTypeReadMapping(\"read_varbinary\",\n+                varbinaryTests(blobDataType())\n+                        .addRoundTrip(blobDataType(), new byte[] {}),\n+                varbinaryTests(rawDataType(2000)));\n+        // The test with the empty array is read-only because Oracle converts treats", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzY2OTE0OnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleTypes.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwMDowNDoxMlrOGbhSvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMTozNjozNFrOGbxK8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxMDIwNg==", "bodyText": "What happens for CONVERT_TO_VARCHAR or jdbc-types-mapped-to-varchar?", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431510206", "createdAt": "2020-05-28T00:04:12Z", "author": {"login": "electrum"}, "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleTypes.java", "diffHunk": "@@ -842,6 +842,36 @@ public void testTimestampWithTimeZone(boolean insertWithPresto)\n         };\n     }\n \n+    /* Unsupported type tests */\n+\n+    @Test\n+    public void testUnsupportedBasicType()\n+    {\n+        testUnsupportedOracleType(\"BFILE\"); // Never in mapping", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc3MDM1Mw==", "bodyText": "It does not work with BFILE. Actually if one enables CONVERT_TO_VARCHAR and tries to read from table containing BFILE column, the query will fail because resultSet.getString(columnIndex) here would return null. And that is not supported.\nThe mapping of unsupported numbers to varchar is already tested in testHighNumberScale and others.\nIt could be improved but let's do that as a followup.", "url": "https://github.com/trinodb/trino/pull/3838#discussion_r431770353", "createdAt": "2020-05-28T11:36:34Z", "author": {"login": "losipiuk"}, "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleTypes.java", "diffHunk": "@@ -842,6 +842,36 @@ public void testTimestampWithTimeZone(boolean insertWithPresto)\n         };\n     }\n \n+    /* Unsupported type tests */\n+\n+    @Test\n+    public void testUnsupportedBasicType()\n+    {\n+        testUnsupportedOracleType(\"BFILE\"); // Never in mapping", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxMDIwNg=="}, "originalCommit": null, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4937, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}