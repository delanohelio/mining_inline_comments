{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5MDU5NzM5", "number": 3766, "title": "Adding schema access rules to FileBasedSystemAccessControl", "bodyText": "Currently FileBasedSystemAccessControl control has catalogRules, queryAccessRules, impersonationRules and principalUserMatchRules. The proposal here is to add schema access rules to it. This will give more granular access controls over the datasets.\nAt high level idea is to implement/enhance the below methods of FileBasedSystemAccessControl\n\ncheckCanDropSchema - Allow if user has access to catalog and is SchemaOwner\ncheckCanRenameSchema - Allow if user has access to catalog and is SchemaOwner\ncheckCanSetSchemaAuthorization - Allow if user has access to catalog and is SchemaOwner\ncheckCanShowCreateSchema - Allow if user has access to catalog and is SchemaOwner\n\nOriginal Issue : #3733", "createdAt": "2020-05-17T04:37:09Z", "url": "https://github.com/trinodb/trino/pull/3766", "merged": true, "mergeCommit": {"oid": "35e8734faab1fe23b358b791565e3c7bcd7d54ba"}, "closed": true, "closedAt": "2020-06-01T13:20:33Z", "author": {"login": "haldes"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABciwNQnAFqTQxNDIxMjI4MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABck9NM1gH2gAyNDE5MDU5NzM5OmU1NDEzOTk5ZWM5ZTM2ZWNhNjkzZTkxOGVkMTdiYjRhMmE4NWFjNTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0MjEyMjgx", "url": "https://github.com/trinodb/trino/pull/3766#pullrequestreview-414212281", "createdAt": "2020-05-19T08:23:19Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoyMzoxOVrOGXVPKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoyOTowNVrOGXVd-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExODM3Nw==", "bodyText": "if (schemaRules.isEmpty()) { return true; }\nThen you don't need to have schemaRules.isPresent() &&  in all the cases above.", "url": "https://github.com/trinodb/trino/pull/3766#discussion_r427118377", "createdAt": "2020-05-19T08:23:19Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedSystemAccessControl.java", "diffHunk": "@@ -334,6 +338,22 @@ public void checkCanDropSchema(SystemSecurityContext context, CatalogSchemaName\n         if (!canAccessCatalog(context.getIdentity(), schema.getCatalogName(), ALL)) {\n             denyDropSchema(schema.toString());\n         }\n+\n+        if (schemaRules.isPresent() && !isSchemaOwner(context, schema.getSchemaName())) {\n+            denyDropSchema(schema.getSchemaName());\n+        }\n+    }\n+\n+    private boolean isSchemaOwner(SystemSecurityContext context, String schemaName)\n+    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExOTcyOA==", "bodyText": "I think we need a better way to injecting rules to tests. It would be nice to define them next to the test as java object, then do serialization round trip, and the do the test. Maybe this should go as a refactor before this commit or after.\nThen instead of giant test with many cases we could have plenty of smaller test per case.", "url": "https://github.com/trinodb/trino/pull/3766#discussion_r427119728", "createdAt": "2020-05-19T08:25:22Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/test/resources/file-based-system-access-schema.json", "diffHunk": "@@ -0,0 +1,33 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyMDgxNg==", "bodyText": "it it to the very bottom of this file.\nAlso can you please introduce this method in the commit before and use it for other tests as well?", "url": "https://github.com/trinodb/trino/pull/3766#discussion_r427120816", "createdAt": "2020-05-19T08:27:00Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/test/java/io/prestosql/plugin/base/security/TestFileBasedSystemAccessControl.java", "diffHunk": "@@ -53,13 +54,82 @@\n     private static final Identity validSpecialRegexWildDot = Identity.forUser(\".*\").withPrincipal(new KerberosPrincipal(\"special/.*@EXAMPLE.COM\")).build();\n     private static final Identity validSpecialRegexEndQuote = Identity.forUser(\"\\\\E\").withPrincipal(new KerberosPrincipal(\"special/\\\\E@EXAMPLE.COM\")).build();\n     private static final Identity invalidSpecialRegex = Identity.forUser(\"alice\").withPrincipal(new KerberosPrincipal(\"special/.*@EXAMPLE.COM\")).build();\n-    private static final Identity bob = Identity.ofUser(\"bob\");\n-    private static final Identity admin = Identity.ofUser(\"admin\");\n+    private static final Identity bob = Identity.forUser(\"bob\").withGroups(ImmutableSet.of(\"staff\")).build();\n+    private static final Identity admin = Identity.forUser(\"admin\").withGroups(ImmutableSet.of(\"admin\", \"staff\")).build();\n     private static final Identity nonAsciiUser = Identity.ofUser(\"\\u0194\\u0194\\u0194\");\n     private static final Set<String> allCatalogs = ImmutableSet.of(\"secret\", \"open-to-all\", \"all-allowed\", \"alice-catalog\", \"allowed-absent\", \"\\u0200\\u0200\\u0200\");\n     private static final CatalogSchemaTableName aliceView = new CatalogSchemaTableName(\"alice-catalog\", \"schema\", \"view\");\n     private static final Optional<QueryId> queryId = Optional.empty();\n \n+    private static final Identity charlie = Identity.forUser(\"charlie\").withGroups(ImmutableSet.of(\"guests\")).build();\n+    private static final Identity joe = Identity.ofUser(\"joe\");\n+    private static final SystemSecurityContext ADMIN = new SystemSecurityContext(admin, queryId);\n+    private static final SystemSecurityContext BOB = new SystemSecurityContext(bob, queryId);\n+    private static final SystemSecurityContext CHARLIE = new SystemSecurityContext(charlie, queryId);\n+\n+    @Test\n+    public void testSchemaRules()\n+    {\n+        SystemAccessControl accessControl = newFileBasedSystemAccessControl(\"file-based-system-access-schema.json\");\n+        accessControl.checkCanDropSchema(ADMIN, new CatalogSchemaName(\"some-catalog\", \"bob\"));\n+        accessControl.checkCanDropSchema(ADMIN, new CatalogSchemaName(\"some-catalog\", \"staff\"));\n+        accessControl.checkCanDropSchema(ADMIN, new CatalogSchemaName(\"some-catalog\", \"authenticated\"));\n+        accessControl.checkCanDropSchema(ADMIN, new CatalogSchemaName(\"some-catalog\", \"test\"));\n+\n+        accessControl.checkCanDropSchema(BOB, new CatalogSchemaName(\"some-catalog\", \"bob\"));\n+        accessControl.checkCanDropSchema(BOB, new CatalogSchemaName(\"some-catalog\", \"staff\"));\n+        accessControl.checkCanDropSchema(BOB, new CatalogSchemaName(\"some-catalog\", \"authenticated\"));\n+        assertDenied(() -> accessControl.checkCanDropSchema(BOB, new CatalogSchemaName(\"some-catalog\", \"test\")));\n+\n+        accessControl.checkCanDropSchema(CHARLIE, new CatalogSchemaName(\"some-catalog\", \"authenticated\"));\n+        assertDenied(() -> accessControl.checkCanDropSchema(CHARLIE, new CatalogSchemaName(\"some-catalog\", \"bob\")));\n+        assertDenied(() -> accessControl.checkCanDropSchema(CHARLIE, new CatalogSchemaName(\"some-catalog\", \"staff\")));\n+        assertDenied(() -> accessControl.checkCanDropSchema(CHARLIE, new CatalogSchemaName(\"some-catalog\", \"test\")));\n+\n+        accessControl.checkCanRenameSchema(ADMIN, new CatalogSchemaName(\"some-catalog\", \"bob\"), \"new_schema\");\n+        accessControl.checkCanRenameSchema(ADMIN, new CatalogSchemaName(\"some-catalog\", \"staff\"), \"new_schema\");\n+        accessControl.checkCanRenameSchema(ADMIN, new CatalogSchemaName(\"some-catalog\", \"authenticated\"), \"new_schema\");\n+        accessControl.checkCanRenameSchema(ADMIN, new CatalogSchemaName(\"some-catalog\", \"test\"), \"new_schema\");\n+\n+        accessControl.checkCanRenameSchema(BOB, new CatalogSchemaName(\"some-catalog\", \"bob\"), \"staff\");\n+        accessControl.checkCanRenameSchema(BOB, new CatalogSchemaName(\"some-catalog\", \"staff\"), \"authenticated\");\n+        accessControl.checkCanRenameSchema(BOB, new CatalogSchemaName(\"some-catalog\", \"authenticated\"), \"bob\");\n+        assertDenied(() -> accessControl.checkCanRenameSchema(BOB, new CatalogSchemaName(\"some-catalog\", \"test\"), \"bob\"));\n+        assertDenied(() -> accessControl.checkCanRenameSchema(BOB, new CatalogSchemaName(\"some-catalog\", \"bob\"), \"test\"));\n+\n+        assertDenied(() -> accessControl.checkCanRenameSchema(CHARLIE, new CatalogSchemaName(\"some-catalog\", \"bob\"), \"new_schema\"));\n+        assertDenied(() -> accessControl.checkCanRenameSchema(CHARLIE, new CatalogSchemaName(\"some-catalog\", \"staff\"), \"new_schema\"));\n+        accessControl.checkCanRenameSchema(CHARLIE, new CatalogSchemaName(\"some-catalog\", \"authenticated\"), \"authenticated\");\n+        assertDenied(() -> accessControl.checkCanRenameSchema(CHARLIE, new CatalogSchemaName(\"some-catalog\", \"test\"), \"new_schema\"));\n+\n+        accessControl.checkCanSetSchemaAuthorization(ADMIN, new CatalogSchemaName(\"some-catalog\", \"test\"), new PrestoPrincipal(PrincipalType.ROLE, \"some_role\"));\n+        accessControl.checkCanSetSchemaAuthorization(ADMIN, new CatalogSchemaName(\"some-catalog\", \"test\"), new PrestoPrincipal(PrincipalType.USER, \"some_user\"));\n+        accessControl.checkCanSetSchemaAuthorization(BOB, new CatalogSchemaName(\"some-catalog\", \"bob\"), new PrestoPrincipal(PrincipalType.ROLE, \"some_role\"));\n+        accessControl.checkCanSetSchemaAuthorization(BOB, new CatalogSchemaName(\"some-catalog\", \"bob\"), new PrestoPrincipal(PrincipalType.USER, \"some_user\"));\n+        assertDenied(() -> accessControl.checkCanSetSchemaAuthorization(BOB, new CatalogSchemaName(\"some-catalog\", \"test\"), new PrestoPrincipal(PrincipalType.ROLE, \"some_role\")));\n+        assertDenied(() -> accessControl.checkCanSetSchemaAuthorization(BOB, new CatalogSchemaName(\"some-catalog\", \"test\"), new PrestoPrincipal(PrincipalType.USER, \"some_user\")));\n+\n+        accessControl.checkCanShowCreateSchema(ADMIN, new CatalogSchemaName(\"some-catalog\", \"bob\"));\n+        accessControl.checkCanShowCreateSchema(ADMIN, new CatalogSchemaName(\"some-catalog\", \"staff\"));\n+        accessControl.checkCanShowCreateSchema(ADMIN, new CatalogSchemaName(\"some-catalog\", \"authenticated\"));\n+        accessControl.checkCanShowCreateSchema(ADMIN, new CatalogSchemaName(\"some-catalog\", \"test\"));\n+\n+        accessControl.checkCanShowCreateSchema(BOB, new CatalogSchemaName(\"some-catalog\", \"bob\"));\n+        accessControl.checkCanShowCreateSchema(BOB, new CatalogSchemaName(\"some-catalog\", \"staff\"));\n+        accessControl.checkCanShowCreateSchema(BOB, new CatalogSchemaName(\"some-catalog\", \"authenticated\"));\n+        assertDenied(() -> accessControl.checkCanShowCreateSchema(BOB, new CatalogSchemaName(\"some-catalog\", \"test\")));\n+\n+        accessControl.checkCanShowCreateSchema(CHARLIE, new CatalogSchemaName(\"some-catalog\", \"authenticated\"));\n+        assertDenied(() -> accessControl.checkCanShowCreateSchema(CHARLIE, new CatalogSchemaName(\"some-catalog\", \"bob\")));\n+        assertDenied(() -> accessControl.checkCanShowCreateSchema(CHARLIE, new CatalogSchemaName(\"some-catalog\", \"staff\")));\n+        assertDenied(() -> accessControl.checkCanShowCreateSchema(CHARLIE, new CatalogSchemaName(\"some-catalog\", \"test\")));\n+    }\n+\n+    private static void assertDenied(ThrowingRunnable runnable)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyMjE2OQ==", "bodyText": "Please define one test per each schema related access control method. One for checkCanDropSchema, one for checkCanRenameSchema etc...", "url": "https://github.com/trinodb/trino/pull/3766#discussion_r427122169", "createdAt": "2020-05-19T08:29:05Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/test/java/io/prestosql/plugin/base/security/TestFileBasedSystemAccessControl.java", "diffHunk": "@@ -53,13 +54,82 @@\n     private static final Identity validSpecialRegexWildDot = Identity.forUser(\".*\").withPrincipal(new KerberosPrincipal(\"special/.*@EXAMPLE.COM\")).build();\n     private static final Identity validSpecialRegexEndQuote = Identity.forUser(\"\\\\E\").withPrincipal(new KerberosPrincipal(\"special/\\\\E@EXAMPLE.COM\")).build();\n     private static final Identity invalidSpecialRegex = Identity.forUser(\"alice\").withPrincipal(new KerberosPrincipal(\"special/.*@EXAMPLE.COM\")).build();\n-    private static final Identity bob = Identity.ofUser(\"bob\");\n-    private static final Identity admin = Identity.ofUser(\"admin\");\n+    private static final Identity bob = Identity.forUser(\"bob\").withGroups(ImmutableSet.of(\"staff\")).build();\n+    private static final Identity admin = Identity.forUser(\"admin\").withGroups(ImmutableSet.of(\"admin\", \"staff\")).build();\n     private static final Identity nonAsciiUser = Identity.ofUser(\"\\u0194\\u0194\\u0194\");\n     private static final Set<String> allCatalogs = ImmutableSet.of(\"secret\", \"open-to-all\", \"all-allowed\", \"alice-catalog\", \"allowed-absent\", \"\\u0200\\u0200\\u0200\");\n     private static final CatalogSchemaTableName aliceView = new CatalogSchemaTableName(\"alice-catalog\", \"schema\", \"view\");\n     private static final Optional<QueryId> queryId = Optional.empty();\n \n+    private static final Identity charlie = Identity.forUser(\"charlie\").withGroups(ImmutableSet.of(\"guests\")).build();\n+    private static final Identity joe = Identity.ofUser(\"joe\");\n+    private static final SystemSecurityContext ADMIN = new SystemSecurityContext(admin, queryId);\n+    private static final SystemSecurityContext BOB = new SystemSecurityContext(bob, queryId);\n+    private static final SystemSecurityContext CHARLIE = new SystemSecurityContext(charlie, queryId);\n+\n+    @Test\n+    public void testSchemaRules()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1ODY4MDcw", "url": "https://github.com/trinodb/trino/pull/3766#pullrequestreview-415868070", "createdAt": "2020-05-21T04:18:08Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNDoxODowOFrOGYlrOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNDoyMjo1OVrOGYlu9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzNjI4Mg==", "bodyText": "please move this method somewhere to the bottom of this class. Favor public interface first and also order methods by usage.", "url": "https://github.com/trinodb/trino/pull/3766#discussion_r428436282", "createdAt": "2020-05-21T04:18:08Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedSystemAccessControl.java", "diffHunk": "@@ -334,6 +338,26 @@ public void checkCanDropSchema(SystemSecurityContext context, CatalogSchemaName\n         if (!canAccessCatalog(context.getIdentity(), schema.getCatalogName(), ALL)) {\n             denyDropSchema(schema.toString());\n         }\n+\n+        if (!isSchemaOwner(context, schema.getSchemaName())) {\n+            denyDropSchema(schema.getSchemaName());\n+        }\n+    }\n+\n+    private boolean isSchemaOwner(SystemSecurityContext context, String schemaName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzNjUzOQ==", "bodyText": "can you use assertj. assertThatThrownBy() and assert error message here?", "url": "https://github.com/trinodb/trino/pull/3766#discussion_r428436539", "createdAt": "2020-05-21T04:19:46Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/test/java/io/prestosql/plugin/base/security/TestFileBasedSystemAccessControl.java", "diffHunk": "@@ -268,4 +314,14 @@ private String getResourcePath(String resourceName)\n     {\n         return this.getClass().getClassLoader().getResource(resourceName).getPath();\n     }\n+\n+    private static void assertDenied(ThrowingRunnable runnable)\n+    {\n+        assertThrows(AccessDeniedException.class, runnable);\n+    }\n+\n+    private static void assertDeniedWithIllegalArgumentException(ThrowingRunnable runnable)\n+    {\n+        assertThrows(IllegalArgumentException.class, runnable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 212}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzNjY2NQ==", "bodyText": "can you use assertj assertThatThrownBy()? Please also verify error message (it is quite important to know that the proper exception was raised).", "url": "https://github.com/trinodb/trino/pull/3766#discussion_r428436665", "createdAt": "2020-05-21T04:20:26Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/test/java/io/prestosql/plugin/base/security/TestFileBasedSystemAccessControl.java", "diffHunk": "@@ -268,4 +314,14 @@ private String getResourcePath(String resourceName)\n     {\n         return this.getClass().getClassLoader().getResource(resourceName).getPath();\n     }\n+\n+    private static void assertDenied(ThrowingRunnable runnable)\n+    {\n+        assertThrows(AccessDeniedException.class, runnable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzNzIzOA==", "bodyText": "Please extract such refactorings as separate preparatory commit. It has nothing to do with actual change of adding schema rules to file based access control.", "url": "https://github.com/trinodb/trino/pull/3766#discussion_r428437238", "createdAt": "2020-05-21T04:22:59Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/test/java/io/prestosql/plugin/base/security/TestFileBasedSystemAccessControl.java", "diffHunk": "@@ -53,50 +54,110 @@\n     private static final Identity validSpecialRegexWildDot = Identity.forUser(\".*\").withPrincipal(new KerberosPrincipal(\"special/.*@EXAMPLE.COM\")).build();\n     private static final Identity validSpecialRegexEndQuote = Identity.forUser(\"\\\\E\").withPrincipal(new KerberosPrincipal(\"special/\\\\E@EXAMPLE.COM\")).build();\n     private static final Identity invalidSpecialRegex = Identity.forUser(\"alice\").withPrincipal(new KerberosPrincipal(\"special/.*@EXAMPLE.COM\")).build();\n-    private static final Identity bob = Identity.ofUser(\"bob\");\n-    private static final Identity admin = Identity.ofUser(\"admin\");\n+    private static final Identity bob = Identity.forUser(\"bob\").withGroups(ImmutableSet.of(\"staff\")).build();\n+    private static final Identity admin = Identity.forUser(\"admin\").withGroups(ImmutableSet.of(\"admin\", \"staff\")).build();\n     private static final Identity nonAsciiUser = Identity.ofUser(\"\\u0194\\u0194\\u0194\");\n     private static final Set<String> allCatalogs = ImmutableSet.of(\"secret\", \"open-to-all\", \"all-allowed\", \"alice-catalog\", \"allowed-absent\", \"\\u0200\\u0200\\u0200\");\n     private static final CatalogSchemaTableName aliceView = new CatalogSchemaTableName(\"alice-catalog\", \"schema\", \"view\");\n     private static final Optional<QueryId> queryId = Optional.empty();\n \n+    private static final Identity charlie = Identity.forUser(\"charlie\").withGroups(ImmutableSet.of(\"guests\")).build();\n+    private static final Identity joe = Identity.ofUser(\"joe\");\n+    private static final SystemSecurityContext ADMIN = new SystemSecurityContext(admin, queryId);\n+    private static final SystemSecurityContext BOB = new SystemSecurityContext(bob, queryId);\n+    private static final SystemSecurityContext CHARLIE = new SystemSecurityContext(charlie, queryId);\n+\n+    @Test\n+    public void testSchemaRulesForCheckCanDropSchema()\n+    {\n+        SystemAccessControl accessControl = newFileBasedSystemAccessControl(\"file-based-system-access-schema.json\");\n+\n+        accessControl.checkCanDropSchema(ADMIN, new CatalogSchemaName(\"some-catalog\", \"bob\"));\n+        accessControl.checkCanDropSchema(ADMIN, new CatalogSchemaName(\"some-catalog\", \"staff\"));\n+        accessControl.checkCanDropSchema(ADMIN, new CatalogSchemaName(\"some-catalog\", \"authenticated\"));\n+        accessControl.checkCanDropSchema(ADMIN, new CatalogSchemaName(\"some-catalog\", \"test\"));\n+\n+        accessControl.checkCanDropSchema(BOB, new CatalogSchemaName(\"some-catalog\", \"bob\"));\n+        accessControl.checkCanDropSchema(BOB, new CatalogSchemaName(\"some-catalog\", \"staff\"));\n+        accessControl.checkCanDropSchema(BOB, new CatalogSchemaName(\"some-catalog\", \"authenticated\"));\n+        assertDenied(() -> accessControl.checkCanDropSchema(BOB, new CatalogSchemaName(\"some-catalog\", \"test\")));\n+\n+        accessControl.checkCanDropSchema(CHARLIE, new CatalogSchemaName(\"some-catalog\", \"authenticated\"));\n+        assertDenied(() -> accessControl.checkCanDropSchema(CHARLIE, new CatalogSchemaName(\"some-catalog\", \"bob\")));\n+        assertDenied(() -> accessControl.checkCanDropSchema(CHARLIE, new CatalogSchemaName(\"some-catalog\", \"staff\")));\n+        assertDenied(() -> accessControl.checkCanDropSchema(CHARLIE, new CatalogSchemaName(\"some-catalog\", \"test\")));\n+    }\n+\n+    @Test\n+    public void testSchemaRulesForCheckCanRenameSchema()\n+    {\n+        SystemAccessControl accessControl = newFileBasedSystemAccessControl(\"file-based-system-access-schema.json\");\n+\n+        accessControl.checkCanRenameSchema(ADMIN, new CatalogSchemaName(\"some-catalog\", \"bob\"), \"new_schema\");\n+        accessControl.checkCanRenameSchema(ADMIN, new CatalogSchemaName(\"some-catalog\", \"staff\"), \"new_schema\");\n+        accessControl.checkCanRenameSchema(ADMIN, new CatalogSchemaName(\"some-catalog\", \"authenticated\"), \"new_schema\");\n+        accessControl.checkCanRenameSchema(ADMIN, new CatalogSchemaName(\"some-catalog\", \"test\"), \"new_schema\");\n+\n+        accessControl.checkCanRenameSchema(BOB, new CatalogSchemaName(\"some-catalog\", \"bob\"), \"staff\");\n+        accessControl.checkCanRenameSchema(BOB, new CatalogSchemaName(\"some-catalog\", \"staff\"), \"authenticated\");\n+        accessControl.checkCanRenameSchema(BOB, new CatalogSchemaName(\"some-catalog\", \"authenticated\"), \"bob\");\n+        assertDenied(() -> accessControl.checkCanRenameSchema(BOB, new CatalogSchemaName(\"some-catalog\", \"test\"), \"bob\"));\n+        assertDenied(() -> accessControl.checkCanRenameSchema(BOB, new CatalogSchemaName(\"some-catalog\", \"bob\"), \"test\"));\n+\n+        assertDenied(() -> accessControl.checkCanRenameSchema(CHARLIE, new CatalogSchemaName(\"some-catalog\", \"bob\"), \"new_schema\"));\n+        assertDenied(() -> accessControl.checkCanRenameSchema(CHARLIE, new CatalogSchemaName(\"some-catalog\", \"staff\"), \"new_schema\"));\n+        accessControl.checkCanRenameSchema(CHARLIE, new CatalogSchemaName(\"some-catalog\", \"authenticated\"), \"authenticated\");\n+        assertDenied(() -> accessControl.checkCanRenameSchema(CHARLIE, new CatalogSchemaName(\"some-catalog\", \"test\"), \"new_schema\"));\n+    }\n+\n+    @Test\n+    public void testSchemaRulesForCheckCanSetSchemaAuthorization()\n+    {\n+        SystemAccessControl accessControl = newFileBasedSystemAccessControl(\"file-based-system-access-schema.json\");\n+\n+        accessControl.checkCanSetSchemaAuthorization(ADMIN, new CatalogSchemaName(\"some-catalog\", \"test\"), new PrestoPrincipal(PrincipalType.ROLE, \"some_role\"));\n+        accessControl.checkCanSetSchemaAuthorization(ADMIN, new CatalogSchemaName(\"some-catalog\", \"test\"), new PrestoPrincipal(PrincipalType.USER, \"some_user\"));\n+        accessControl.checkCanSetSchemaAuthorization(BOB, new CatalogSchemaName(\"some-catalog\", \"bob\"), new PrestoPrincipal(PrincipalType.ROLE, \"some_role\"));\n+        accessControl.checkCanSetSchemaAuthorization(BOB, new CatalogSchemaName(\"some-catalog\", \"bob\"), new PrestoPrincipal(PrincipalType.USER, \"some_user\"));\n+        assertDenied(() -> accessControl.checkCanSetSchemaAuthorization(BOB, new CatalogSchemaName(\"some-catalog\", \"test\"), new PrestoPrincipal(PrincipalType.ROLE, \"some_role\")));\n+        assertDenied(() -> accessControl.checkCanSetSchemaAuthorization(BOB, new CatalogSchemaName(\"some-catalog\", \"test\"), new PrestoPrincipal(PrincipalType.USER, \"some_user\")));\n+    }\n+\n+    @Test\n+    public void testSchemaRulesForCheckCanShowCreateSchema()\n+    {\n+        SystemAccessControl accessControl = newFileBasedSystemAccessControl(\"file-based-system-access-schema.json\");\n+\n+        accessControl.checkCanShowCreateSchema(ADMIN, new CatalogSchemaName(\"some-catalog\", \"bob\"));\n+        accessControl.checkCanShowCreateSchema(ADMIN, new CatalogSchemaName(\"some-catalog\", \"staff\"));\n+        accessControl.checkCanShowCreateSchema(ADMIN, new CatalogSchemaName(\"some-catalog\", \"authenticated\"));\n+        accessControl.checkCanShowCreateSchema(ADMIN, new CatalogSchemaName(\"some-catalog\", \"test\"));\n+\n+        accessControl.checkCanShowCreateSchema(BOB, new CatalogSchemaName(\"some-catalog\", \"bob\"));\n+        accessControl.checkCanShowCreateSchema(BOB, new CatalogSchemaName(\"some-catalog\", \"staff\"));\n+        accessControl.checkCanShowCreateSchema(BOB, new CatalogSchemaName(\"some-catalog\", \"authenticated\"));\n+        assertDenied(() -> accessControl.checkCanShowCreateSchema(BOB, new CatalogSchemaName(\"some-catalog\", \"test\")));\n+\n+        accessControl.checkCanShowCreateSchema(CHARLIE, new CatalogSchemaName(\"some-catalog\", \"authenticated\"));\n+        assertDenied(() -> accessControl.checkCanShowCreateSchema(CHARLIE, new CatalogSchemaName(\"some-catalog\", \"bob\")));\n+        assertDenied(() -> accessControl.checkCanShowCreateSchema(CHARLIE, new CatalogSchemaName(\"some-catalog\", \"staff\")));\n+        assertDenied(() -> accessControl.checkCanShowCreateSchema(CHARLIE, new CatalogSchemaName(\"some-catalog\", \"test\")));\n+    }\n+\n     @Test\n     public void testCanSetUserOperations()\n     {\n         SystemAccessControl accessControl = newFileBasedSystemAccessControl(\"catalog_principal.json\");\n \n-        try {\n-            accessControl.checkCanSetUser(Optional.empty(), alice.getUser());\n-            throw new AssertionError(\"expected AccessDeniedException\");\n-        }\n-        catch (AccessDeniedException expected) {\n-        }\n-\n+        assertDenied(() -> accessControl.checkCanSetUser(Optional.empty(), alice.getUser()));\n         accessControl.checkCanSetUser(kerberosValidAlice.getPrincipal(), kerberosValidAlice.getUser());\n         accessControl.checkCanSetUser(kerberosValidNonAsciiUser.getPrincipal(), kerberosValidNonAsciiUser.getUser());\n-        try {\n-            accessControl.checkCanSetUser(kerberosInvalidAlice.getPrincipal(), kerberosInvalidAlice.getUser());\n-            throw new AssertionError(\"expected AccessDeniedException\");\n-        }\n-        catch (AccessDeniedException expected) {\n-        }\n-\n+        assertDenied(() -> accessControl.checkCanSetUser(kerberosInvalidAlice.getPrincipal(), kerberosInvalidAlice.getUser()));\n         accessControl.checkCanSetUser(kerberosValidShare.getPrincipal(), kerberosValidShare.getUser());\n-        try {\n-            accessControl.checkCanSetUser(kerberosInValidShare.getPrincipal(), kerberosInValidShare.getUser());\n-            throw new AssertionError(\"expected AccessDeniedException\");\n-        }\n-        catch (AccessDeniedException expected) {\n-        }\n-\n+        assertDenied(() -> accessControl.checkCanSetUser(kerberosInValidShare.getPrincipal(), kerberosInValidShare.getUser()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 144}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1OTQ5NjQx", "url": "https://github.com/trinodb/trino/pull/3766#pullrequestreview-415949641", "createdAt": "2020-05-21T07:55:46Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzo1NTo0N1rOGYpt_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzo1ODo1OVrOGYpzXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMjUyNQ==", "bodyText": "DROP_SCHEMA_ERR_MESSAGE -> DROP_SCHEMA_ACCESS_DENIED_MESSAGE\nSame for all below.", "url": "https://github.com/trinodb/trino/pull/3766#discussion_r428502525", "createdAt": "2020-05-21T07:55:47Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/test/java/io/prestosql/plugin/base/security/TestFileBasedSystemAccessControl.java", "diffHunk": "@@ -53,13 +54,102 @@\n     private static final Identity validSpecialRegexWildDot = Identity.forUser(\".*\").withPrincipal(new KerberosPrincipal(\"special/.*@EXAMPLE.COM\")).build();\n     private static final Identity validSpecialRegexEndQuote = Identity.forUser(\"\\\\E\").withPrincipal(new KerberosPrincipal(\"special/\\\\E@EXAMPLE.COM\")).build();\n     private static final Identity invalidSpecialRegex = Identity.forUser(\"alice\").withPrincipal(new KerberosPrincipal(\"special/.*@EXAMPLE.COM\")).build();\n-    private static final Identity bob = Identity.ofUser(\"bob\");\n-    private static final Identity admin = Identity.ofUser(\"admin\");\n+    private static final Identity bob = Identity.forUser(\"bob\").withGroups(ImmutableSet.of(\"staff\")).build();\n+    private static final Identity admin = Identity.forUser(\"admin\").withGroups(ImmutableSet.of(\"admin\", \"staff\")).build();\n     private static final Identity nonAsciiUser = Identity.ofUser(\"\\u0194\\u0194\\u0194\");\n     private static final Set<String> allCatalogs = ImmutableSet.of(\"secret\", \"open-to-all\", \"all-allowed\", \"alice-catalog\", \"allowed-absent\", \"\\u0200\\u0200\\u0200\");\n     private static final CatalogSchemaTableName aliceView = new CatalogSchemaTableName(\"alice-catalog\", \"schema\", \"view\");\n     private static final Optional<QueryId> queryId = Optional.empty();\n \n+    private static final Identity charlie = Identity.forUser(\"charlie\").withGroups(ImmutableSet.of(\"guests\")).build();\n+    private static final Identity joe = Identity.ofUser(\"joe\");\n+    private static final SystemSecurityContext ADMIN = new SystemSecurityContext(admin, queryId);\n+    private static final SystemSecurityContext BOB = new SystemSecurityContext(bob, queryId);\n+    private static final SystemSecurityContext CHARLIE = new SystemSecurityContext(charlie, queryId);\n+\n+    private static final String DROP_SCHEMA_ERR_MESSAGE = \"Access Denied: Cannot drop schema\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMjgzNw==", "bodyText": "INVALID_JSON_ERR_MESSAGE -> INVALID_JSON", "url": "https://github.com/trinodb/trino/pull/3766#discussion_r428502837", "createdAt": "2020-05-21T07:56:29Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/test/java/io/prestosql/plugin/base/security/TestFileBasedSystemAccessControl.java", "diffHunk": "@@ -53,13 +54,102 @@\n     private static final Identity validSpecialRegexWildDot = Identity.forUser(\".*\").withPrincipal(new KerberosPrincipal(\"special/.*@EXAMPLE.COM\")).build();\n     private static final Identity validSpecialRegexEndQuote = Identity.forUser(\"\\\\E\").withPrincipal(new KerberosPrincipal(\"special/\\\\E@EXAMPLE.COM\")).build();\n     private static final Identity invalidSpecialRegex = Identity.forUser(\"alice\").withPrincipal(new KerberosPrincipal(\"special/.*@EXAMPLE.COM\")).build();\n-    private static final Identity bob = Identity.ofUser(\"bob\");\n-    private static final Identity admin = Identity.ofUser(\"admin\");\n+    private static final Identity bob = Identity.forUser(\"bob\").withGroups(ImmutableSet.of(\"staff\")).build();\n+    private static final Identity admin = Identity.forUser(\"admin\").withGroups(ImmutableSet.of(\"admin\", \"staff\")).build();\n     private static final Identity nonAsciiUser = Identity.ofUser(\"\\u0194\\u0194\\u0194\");\n     private static final Set<String> allCatalogs = ImmutableSet.of(\"secret\", \"open-to-all\", \"all-allowed\", \"alice-catalog\", \"allowed-absent\", \"\\u0200\\u0200\\u0200\");\n     private static final CatalogSchemaTableName aliceView = new CatalogSchemaTableName(\"alice-catalog\", \"schema\", \"view\");\n     private static final Optional<QueryId> queryId = Optional.empty();\n \n+    private static final Identity charlie = Identity.forUser(\"charlie\").withGroups(ImmutableSet.of(\"guests\")).build();\n+    private static final Identity joe = Identity.ofUser(\"joe\");\n+    private static final SystemSecurityContext ADMIN = new SystemSecurityContext(admin, queryId);\n+    private static final SystemSecurityContext BOB = new SystemSecurityContext(bob, queryId);\n+    private static final SystemSecurityContext CHARLIE = new SystemSecurityContext(charlie, queryId);\n+\n+    private static final String DROP_SCHEMA_ERR_MESSAGE = \"Access Denied: Cannot drop schema\";\n+    private static final String RENAME_SCHEMA_ERR_MESSAGE = \"Access Denied: Cannot rename schema from\";\n+    private static final String AUTH_SCHEMA_ERR_MESSAGE = \"Access Denied: Cannot set authorization for schema\";\n+    private static final String SHOW_CREATE_SCHEMA_ERR_MESSAGE = \"Access Denied: Cannot show create schema for\";\n+    private static final String INVALID_JSON_ERR_MESSAGE = \"Invalid JSON file\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMzAyNg==", "bodyText": "assertDenied  -> assertAccessDenied\nexpectedErrMessage -> expectedMessage", "url": "https://github.com/trinodb/trino/pull/3766#discussion_r428503026", "createdAt": "2020-05-21T07:56:54Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/test/java/io/prestosql/plugin/base/security/TestFileBasedSystemAccessControl.java", "diffHunk": "@@ -268,4 +354,18 @@ private String getResourcePath(String resourceName)\n     {\n         return this.getClass().getClassLoader().getResource(resourceName).getPath();\n     }\n+\n+    private static void assertDenied(ThrowingCallable callable, String expectedErrMessage)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMzA5NA==", "bodyText": "check that message equals or matches the pattern", "url": "https://github.com/trinodb/trino/pull/3766#discussion_r428503094", "createdAt": "2020-05-21T07:57:05Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/test/java/io/prestosql/plugin/base/security/TestFileBasedSystemAccessControl.java", "diffHunk": "@@ -268,4 +354,18 @@ private String getResourcePath(String resourceName)\n     {\n         return this.getClass().getClassLoader().getResource(resourceName).getPath();\n     }\n+\n+    private static void assertDenied(ThrowingCallable callable, String expectedErrMessage)\n+    {\n+        assertThatThrownBy(callable)\n+                .isInstanceOf(AccessDeniedException.class)\n+                .hasMessageStartingWith(expectedErrMessage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMzkwMg==", "bodyText": "I don't think there is a value in this refactor. Let's leave it as it was.", "url": "https://github.com/trinodb/trino/pull/3766#discussion_r428503902", "createdAt": "2020-05-21T07:58:59Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/test/java/io/prestosql/plugin/base/security/TestFileBasedSystemAccessControl.java", "diffHunk": "@@ -232,14 +322,10 @@ public void testRefreshing()\n         copy(new File(getResourcePath(\"security-config-file-with-unknown-rules.json\")), configFile);\n         sleep(2);\n \n-        assertThatThrownBy(() -> accessControl.checkCanCreateView(alice, aliceView))\n-                .isInstanceOf(IllegalArgumentException.class)\n-                .hasMessageStartingWith(\"Invalid JSON file\");\n+        assertDeniedWithIllegalArgumentException(() -> accessControl.checkCanCreateView(alice, aliceView), INVALID_JSON_ERR_MESSAGE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 129}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NjI2Mjc0", "url": "https://github.com/trinodb/trino/pull/3766#pullrequestreview-417626274", "createdAt": "2020-05-25T10:44:52Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5413999ec9e36eca693e918ed17bb4a2a85ac51", "author": {"user": {"login": "haldes", "name": null}}, "url": "https://github.com/trinodb/trino/commit/e5413999ec9e36eca693e918ed17bb4a2a85ac51", "committedDate": "2020-05-26T04:45:59Z", "message": "Add schema access rules to FileBasedSystemAccessControl\n\nAdd schema access rules to FileBasedSystemAccessControl\n\nAdd schema access rules to FileBasedSystemAccessControl\n\nAdd schema access rules to FileBasedSystemAccessControl\n\nAdd schema access rules to FileBasedSystemAccessControl\n\nAdd schema access rules to FileBasedSystemAccessControl"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1137, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}