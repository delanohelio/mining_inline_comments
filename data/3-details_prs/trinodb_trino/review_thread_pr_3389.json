{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwOTc3ODQy", "number": 3389, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMDo1MTowNVrOD3IxfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMDo1Mjo0NlrOD3Iz6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MTQyMDEzOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMDo1MTowNVrOGNON-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMDo1MTowNVrOGNON-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUxNzYyNg==", "bodyText": "unnecessary \\n, unless you reuse createTableSql in the assertion below\nadd more keywords like table or `select", "url": "https://github.com/trinodb/trino/pull/3389#discussion_r416517626", "createdAt": "2020-04-28T10:51:05Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -3233,6 +3233,24 @@ public void testShowCreateTable()\n         assertUpdate(createTableSql);\n         actualResult = computeActual(\"SHOW CREATE TABLE \\\"test_show_create_table'2\\\"\");\n         assertEquals(getOnlyElement(actualResult.getOnlyColumnAsSet()), createTableSql);\n+\n+        createTableSql = format(\"\" +\n+                        \"CREATE TABLE %s.%s.%s (\\n\" +\n+                        \"   c1 ROW(\\\"$a\\\" bigint, \\\"catalog\\\" varchar)\\n)\\n\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MTQyNjMyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMDo1Mjo0NlrOGNOR6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTowMzo0MVrOGODTpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUxODYzMw==", "bodyText": "you should be able to use createTableSql here\nyou cannot because catalog is no longer delimited\nbut, that also means  user cannot take SHOW CREATE TABLE output and use it to create the table.\nSince this is the purpose of the SHOW CREATE TABLE query, it's  a no-go to me.", "url": "https://github.com/trinodb/trino/pull/3389#discussion_r416518633", "createdAt": "2020-04-28T10:52:46Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -3233,6 +3233,24 @@ public void testShowCreateTable()\n         assertUpdate(createTableSql);\n         actualResult = computeActual(\"SHOW CREATE TABLE \\\"test_show_create_table'2\\\"\");\n         assertEquals(getOnlyElement(actualResult.getOnlyColumnAsSet()), createTableSql);\n+\n+        createTableSql = format(\"\" +\n+                        \"CREATE TABLE %s.%s.%s (\\n\" +\n+                        \"   c1 ROW(\\\"$a\\\" bigint, \\\"catalog\\\" varchar)\\n)\\n\",\n+                getSession().getCatalog().get(),\n+                getSession().getSchema().get(),\n+                \"test_show_create_table_with_special_characters\");\n+        assertUpdate(createTableSql);\n+        assertThat(computeActual(\"SHOW CREATE TABLE test_show_create_table_with_special_characters\").getOnlyValue())\n+                .isEqualTo(format(\"\" +\n+                                \"CREATE TABLE %s.%s.%s (\\n\" +\n+                                \"   c1 ROW(\\\"$a\\\" bigint, catalog varchar)\\n)\\n\",\n+                        getSession().getCatalog().get(),\n+                        getSession().getSchema().get(),\n+                        \"test_show_create_table_with_special_characters\") +\n+                        \"WITH (\\n\" +\n+                        \"   format = 'ORC'\\n\" +\n+                        \")\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM4NzQzMQ==", "bodyText": "logged #3584", "url": "https://github.com/trinodb/trino/pull/3389#discussion_r417387431", "createdAt": "2020-04-29T15:03:41Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -3233,6 +3233,24 @@ public void testShowCreateTable()\n         assertUpdate(createTableSql);\n         actualResult = computeActual(\"SHOW CREATE TABLE \\\"test_show_create_table'2\\\"\");\n         assertEquals(getOnlyElement(actualResult.getOnlyColumnAsSet()), createTableSql);\n+\n+        createTableSql = format(\"\" +\n+                        \"CREATE TABLE %s.%s.%s (\\n\" +\n+                        \"   c1 ROW(\\\"$a\\\" bigint, \\\"catalog\\\" varchar)\\n)\\n\",\n+                getSession().getCatalog().get(),\n+                getSession().getSchema().get(),\n+                \"test_show_create_table_with_special_characters\");\n+        assertUpdate(createTableSql);\n+        assertThat(computeActual(\"SHOW CREATE TABLE test_show_create_table_with_special_characters\").getOnlyValue())\n+                .isEqualTo(format(\"\" +\n+                                \"CREATE TABLE %s.%s.%s (\\n\" +\n+                                \"   c1 ROW(\\\"$a\\\" bigint, catalog varchar)\\n)\\n\",\n+                        getSession().getCatalog().get(),\n+                        getSession().getSchema().get(),\n+                        \"test_show_create_table_with_special_characters\") +\n+                        \"WITH (\\n\" +\n+                        \"   format = 'ORC'\\n\" +\n+                        \")\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUxODYzMw=="}, "originalCommit": null, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 378, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}