{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzNDM5NzAy", "number": 6007, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMzo0MzoxN1rOE7D1Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQyMTo0MjoxMlrOE75aCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzY0MTkxOnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMzo0MzoxN1rOH2fMNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMzo0MzoxN1rOH2fMNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg5NjE4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (constraint.getSummary().getDomains().isEmpty()) {\n          \n          \n            \n                        if (constraint.getSummary().isNone()) {", "url": "https://github.com/trinodb/trino/pull/6007#discussion_r526896183", "createdAt": "2020-11-19T13:43:17Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -114,9 +114,19 @@ public JdbcTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n         JdbcTableHandle handle = (JdbcTableHandle) table;\n \n         if (handle.getGroupingSets().isPresent()) {\n-            // handle's aggregations are applied after constraint, so we cannot apply filter if aggregates is already set\n-            // TODO (https://github.com/prestosql/presto/issues/4112) allow filter pushdown after aggregation pushdown\n-            return Optional.empty();\n+            if (constraint.getSummary().getDomains().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzY0Mzg1OnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMzo0Mzo0MVrOH2fNYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMzo0Mzo0MVrOH2fNYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg5NjQ4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Map<ColumnHandle, Domain> domains = constraint.getSummary().getDomains().get();\n          \n          \n            \n                        Map<ColumnHandle, Domain> domains = constraint.getSummary().getDomains().orElseThrow();", "url": "https://github.com/trinodb/trino/pull/6007#discussion_r526896481", "createdAt": "2020-11-19T13:43:41Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -114,9 +114,19 @@ public JdbcTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n         JdbcTableHandle handle = (JdbcTableHandle) table;\n \n         if (handle.getGroupingSets().isPresent()) {\n-            // handle's aggregations are applied after constraint, so we cannot apply filter if aggregates is already set\n-            // TODO (https://github.com/prestosql/presto/issues/4112) allow filter pushdown after aggregation pushdown\n-            return Optional.empty();\n+            if (constraint.getSummary().getDomains().isEmpty()) {\n+                return Optional.empty();\n+            }\n+\n+            Map<ColumnHandle, Domain> domains = constraint.getSummary().getDomains().get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzY3NjgyOnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMzo1MDo1OVrOH2fhOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjoxMjo1N1rOH20AIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkwMTU2Mw==", "bodyText": "i think we can pushdown if all the constraint columns are fully contained by every grouping set.\nit's not testable right now, since the SPI supoports grouping set pushdown, but the engine actually does not yet\ni propose\nSet<ColumnHandle> constraintColumns = constraint.getSummary().getDomains().orElseThrow().keySet();\nList<List<JdbcColumnHandle>> groupingSets = handle.getGroupingSets().get();\nverify(!groupingSets.isEmpty());\nboolean canPushDown = groupingSets.stream()\n        .allMatch(groupingSet -> isContainedBy(constraintColumns, groupingSet));\n\nprivate static boolean isContainedBy(Set<ColumnHandle> searchedFor, List<JdbcColumnHandle> container)\n    {\n        if (searchedFor.size() < 3) {\n            return container.containsAll(searchedFor);\n        }\n        return ImmutableSet.copyOf(container).containsAll(searchedFor);\n    }\n\n(we can also consider the method overkill and just do the defensive version inline)", "url": "https://github.com/trinodb/trino/pull/6007#discussion_r526901563", "createdAt": "2020-11-19T13:50:59Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -114,9 +114,19 @@ public JdbcTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n         JdbcTableHandle handle = (JdbcTableHandle) table;\n \n         if (handle.getGroupingSets().isPresent()) {\n-            // handle's aggregations are applied after constraint, so we cannot apply filter if aggregates is already set\n-            // TODO (https://github.com/prestosql/presto/issues/4112) allow filter pushdown after aggregation pushdown\n-            return Optional.empty();\n+            if (constraint.getSummary().getDomains().isEmpty()) {\n+                return Optional.empty();\n+            }\n+\n+            Map<ColumnHandle, Domain> domains = constraint.getSummary().getDomains().get();\n+            List<List<JdbcColumnHandle>> groupingSets = handle.getGroupingSets().get();\n+\n+            boolean canPushDown = domains.keySet().stream().allMatch(predicateColumn ->\n+                    groupingSets.stream().allMatch(group -> group.contains(predicateColumn)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE3NzcyMg==", "bodyText": "If I'm reading this correctly the conditions are the same. Right? Every constraint column must be in every group set.\nWhat's the motivation for the defensive version, with the copy?", "url": "https://github.com/trinodb/trino/pull/6007#discussion_r527177722", "createdAt": "2020-11-19T20:29:20Z", "author": {"login": "alexjo2144"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -114,9 +114,19 @@ public JdbcTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n         JdbcTableHandle handle = (JdbcTableHandle) table;\n \n         if (handle.getGroupingSets().isPresent()) {\n-            // handle's aggregations are applied after constraint, so we cannot apply filter if aggregates is already set\n-            // TODO (https://github.com/prestosql/presto/issues/4112) allow filter pushdown after aggregation pushdown\n-            return Optional.empty();\n+            if (constraint.getSummary().getDomains().isEmpty()) {\n+                return Optional.empty();\n+            }\n+\n+            Map<ColumnHandle, Domain> domains = constraint.getSummary().getDomains().get();\n+            List<List<JdbcColumnHandle>> groupingSets = handle.getGroupingSets().get();\n+\n+            boolean canPushDown = domains.keySet().stream().allMatch(predicateColumn ->\n+                    groupingSets.stream().allMatch(group -> group.contains(predicateColumn)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkwMTU2Mw=="}, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzNzE1Mg==", "bodyText": "What's the motivation for the defensive version, with the copy?\n\navoid O(m*n) when long group by (m) and many predicated column (n)\n\nIf I'm reading this correctly the conditions are the same.\n\ncorrect. i read the initial code incorrectly though", "url": "https://github.com/trinodb/trino/pull/6007#discussion_r527237152", "createdAt": "2020-11-19T22:12:57Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -114,9 +114,19 @@ public JdbcTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n         JdbcTableHandle handle = (JdbcTableHandle) table;\n \n         if (handle.getGroupingSets().isPresent()) {\n-            // handle's aggregations are applied after constraint, so we cannot apply filter if aggregates is already set\n-            // TODO (https://github.com/prestosql/presto/issues/4112) allow filter pushdown after aggregation pushdown\n-            return Optional.empty();\n+            if (constraint.getSummary().getDomains().isEmpty()) {\n+                return Optional.empty();\n+            }\n+\n+            Map<ColumnHandle, Domain> domains = constraint.getSummary().getDomains().get();\n+            List<List<JdbcColumnHandle>> groupingSets = handle.getGroupingSets().get();\n+\n+            boolean canPushDown = domains.keySet().stream().allMatch(predicateColumn ->\n+                    groupingSets.stream().allMatch(group -> group.contains(predicateColumn)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkwMTU2Mw=="}, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTgxMTIzOnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestJdbcMetadata.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjoxNDo0OFrOH20FoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjowNjo0MVrOH4Uj_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzODU2MA==", "bodyText": "Add a case with two grouping sets (a, b) and (a) and predicate on column (b) only. No predicate pushdown should occur", "url": "https://github.com/trinodb/trino/pull/6007#discussion_r527238560", "createdAt": "2020-11-19T22:14:48Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestJdbcMetadata.java", "diffHunk": "@@ -232,4 +246,84 @@ public void testDropTableTable()\n             assertEquals(e.getErrorCode(), NOT_FOUND.toErrorCode());\n         }\n     }\n+\n+    @Test\n+    public void testApplyFilterAfterAggregationPushdown()\n+    {\n+        ConnectorSession session = TestingConnectorSession.builder()\n+                .setPropertyMetadata(new JdbcMetadataSessionProperties(new JdbcMetadataConfig().setAggregationPushdownEnabled(true)).getSessionProperties())\n+                .build();\n+        ColumnHandle groupByColumn = metadata.getColumnHandles(session, tableHandle).get(\"text\");\n+        ConnectorTableHandle baseTableHandle = metadata.getTableHandle(session, new SchemaTableName(\"example\", \"numbers\"));\n+        ConnectorTableHandle aggregatedTable = applyCountAggregation(session, baseTableHandle, groupByColumn);\n+\n+        Domain domain = Domain.singleValue(VARCHAR, utf8Slice(\"one\"));\n+        JdbcTableHandle tableHandleWithFilter = applyConstraint(session, aggregatedTable, new Constraint(TupleDomain.withColumnDomains(ImmutableMap.of(groupByColumn, domain))));\n+\n+        assertEquals(tableHandleWithFilter.getConstraint().getDomains(), Optional.of(ImmutableMap.of(groupByColumn, domain)));\n+    }\n+\n+    @Test\n+    public void testCombineFiltersWithAggregationPushdown()\n+    {\n+        ConnectorSession session = TestingConnectorSession.builder()\n+                .setPropertyMetadata(new JdbcMetadataSessionProperties(new JdbcMetadataConfig().setAggregationPushdownEnabled(true)).getSessionProperties())\n+                .build();\n+        ColumnHandle groupByColumn = metadata.getColumnHandles(session, tableHandle).get(\"text\");\n+        ConnectorTableHandle baseTableHandle = metadata.getTableHandle(session, new SchemaTableName(\"example\", \"numbers\"));\n+\n+        Domain firstDomain = Domain.multipleValues(VARCHAR, ImmutableList.of(utf8Slice(\"one\"), utf8Slice(\"two\")));\n+        JdbcTableHandle filterResult = applyConstraint(session, baseTableHandle, new Constraint(TupleDomain.withColumnDomains(ImmutableMap.of(groupByColumn, firstDomain))));\n+\n+        ConnectorTableHandle aggregatedTable = applyCountAggregation(session, filterResult, groupByColumn);\n+\n+        Domain secondDomain = Domain.multipleValues(VARCHAR, ImmutableList.of(utf8Slice(\"one\"), utf8Slice(\"three\")));\n+        JdbcTableHandle tableHandleWithFilter = applyConstraint(session, aggregatedTable, new Constraint(TupleDomain.withColumnDomains(ImmutableMap.of(groupByColumn, secondDomain))));\n+        assertEquals(\n+                tableHandleWithFilter.getConstraint().getDomains(),\n+                Optional.of(ImmutableMap.of(groupByColumn, Domain.singleValue(VARCHAR, utf8Slice(\"one\")))));\n+    }\n+\n+    @Test\n+    public void testNonGroupKeyPredicatePushdown()\n+    {\n+        ConnectorSession session = TestingConnectorSession.builder()\n+                .setPropertyMetadata(new JdbcMetadataSessionProperties(new JdbcMetadataConfig().setAggregationPushdownEnabled(true)).getSessionProperties())\n+                .build();\n+        Map<String, ColumnHandle> columnHandles = metadata.getColumnHandles(session, tableHandle);\n+        ColumnHandle groupByColumn = columnHandles.get(\"text\");\n+        ColumnHandle nonGroupByColumn = columnHandles.get(\"value\");\n+\n+        ConnectorTableHandle baseTableHandle = metadata.getTableHandle(session, new SchemaTableName(\"example\", \"numbers\"));\n+        ConnectorTableHandle aggregatedTable = applyCountAggregation(session, baseTableHandle, groupByColumn);\n+\n+        Domain domain = Domain.singleValue(BIGINT, 123L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgwNzYzMQ==", "bodyText": "I had to set supportsGroupingSets to true in TestingH2JdbcClient to add that case, might break some other tests?\nEdit: Seems fine", "url": "https://github.com/trinodb/trino/pull/6007#discussion_r527807631", "createdAt": "2020-11-20T16:27:40Z", "author": {"login": "alexjo2144"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestJdbcMetadata.java", "diffHunk": "@@ -232,4 +246,84 @@ public void testDropTableTable()\n             assertEquals(e.getErrorCode(), NOT_FOUND.toErrorCode());\n         }\n     }\n+\n+    @Test\n+    public void testApplyFilterAfterAggregationPushdown()\n+    {\n+        ConnectorSession session = TestingConnectorSession.builder()\n+                .setPropertyMetadata(new JdbcMetadataSessionProperties(new JdbcMetadataConfig().setAggregationPushdownEnabled(true)).getSessionProperties())\n+                .build();\n+        ColumnHandle groupByColumn = metadata.getColumnHandles(session, tableHandle).get(\"text\");\n+        ConnectorTableHandle baseTableHandle = metadata.getTableHandle(session, new SchemaTableName(\"example\", \"numbers\"));\n+        ConnectorTableHandle aggregatedTable = applyCountAggregation(session, baseTableHandle, groupByColumn);\n+\n+        Domain domain = Domain.singleValue(VARCHAR, utf8Slice(\"one\"));\n+        JdbcTableHandle tableHandleWithFilter = applyConstraint(session, aggregatedTable, new Constraint(TupleDomain.withColumnDomains(ImmutableMap.of(groupByColumn, domain))));\n+\n+        assertEquals(tableHandleWithFilter.getConstraint().getDomains(), Optional.of(ImmutableMap.of(groupByColumn, domain)));\n+    }\n+\n+    @Test\n+    public void testCombineFiltersWithAggregationPushdown()\n+    {\n+        ConnectorSession session = TestingConnectorSession.builder()\n+                .setPropertyMetadata(new JdbcMetadataSessionProperties(new JdbcMetadataConfig().setAggregationPushdownEnabled(true)).getSessionProperties())\n+                .build();\n+        ColumnHandle groupByColumn = metadata.getColumnHandles(session, tableHandle).get(\"text\");\n+        ConnectorTableHandle baseTableHandle = metadata.getTableHandle(session, new SchemaTableName(\"example\", \"numbers\"));\n+\n+        Domain firstDomain = Domain.multipleValues(VARCHAR, ImmutableList.of(utf8Slice(\"one\"), utf8Slice(\"two\")));\n+        JdbcTableHandle filterResult = applyConstraint(session, baseTableHandle, new Constraint(TupleDomain.withColumnDomains(ImmutableMap.of(groupByColumn, firstDomain))));\n+\n+        ConnectorTableHandle aggregatedTable = applyCountAggregation(session, filterResult, groupByColumn);\n+\n+        Domain secondDomain = Domain.multipleValues(VARCHAR, ImmutableList.of(utf8Slice(\"one\"), utf8Slice(\"three\")));\n+        JdbcTableHandle tableHandleWithFilter = applyConstraint(session, aggregatedTable, new Constraint(TupleDomain.withColumnDomains(ImmutableMap.of(groupByColumn, secondDomain))));\n+        assertEquals(\n+                tableHandleWithFilter.getConstraint().getDomains(),\n+                Optional.of(ImmutableMap.of(groupByColumn, Domain.singleValue(VARCHAR, utf8Slice(\"one\")))));\n+    }\n+\n+    @Test\n+    public void testNonGroupKeyPredicatePushdown()\n+    {\n+        ConnectorSession session = TestingConnectorSession.builder()\n+                .setPropertyMetadata(new JdbcMetadataSessionProperties(new JdbcMetadataConfig().setAggregationPushdownEnabled(true)).getSessionProperties())\n+                .build();\n+        Map<String, ColumnHandle> columnHandles = metadata.getColumnHandles(session, tableHandle);\n+        ColumnHandle groupByColumn = columnHandles.get(\"text\");\n+        ColumnHandle nonGroupByColumn = columnHandles.get(\"value\");\n+\n+        ConnectorTableHandle baseTableHandle = metadata.getTableHandle(session, new SchemaTableName(\"example\", \"numbers\"));\n+        ConnectorTableHandle aggregatedTable = applyCountAggregation(session, baseTableHandle, groupByColumn);\n+\n+        Domain domain = Domain.singleValue(BIGINT, 123L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzODU2MA=="}, "originalCommit": null, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI0NjEyMA==", "bodyText": "Edit: Seems fine\n\nsurprising to me, will take a look", "url": "https://github.com/trinodb/trino/pull/6007#discussion_r528246120", "createdAt": "2020-11-21T21:42:41Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestJdbcMetadata.java", "diffHunk": "@@ -232,4 +246,84 @@ public void testDropTableTable()\n             assertEquals(e.getErrorCode(), NOT_FOUND.toErrorCode());\n         }\n     }\n+\n+    @Test\n+    public void testApplyFilterAfterAggregationPushdown()\n+    {\n+        ConnectorSession session = TestingConnectorSession.builder()\n+                .setPropertyMetadata(new JdbcMetadataSessionProperties(new JdbcMetadataConfig().setAggregationPushdownEnabled(true)).getSessionProperties())\n+                .build();\n+        ColumnHandle groupByColumn = metadata.getColumnHandles(session, tableHandle).get(\"text\");\n+        ConnectorTableHandle baseTableHandle = metadata.getTableHandle(session, new SchemaTableName(\"example\", \"numbers\"));\n+        ConnectorTableHandle aggregatedTable = applyCountAggregation(session, baseTableHandle, groupByColumn);\n+\n+        Domain domain = Domain.singleValue(VARCHAR, utf8Slice(\"one\"));\n+        JdbcTableHandle tableHandleWithFilter = applyConstraint(session, aggregatedTable, new Constraint(TupleDomain.withColumnDomains(ImmutableMap.of(groupByColumn, domain))));\n+\n+        assertEquals(tableHandleWithFilter.getConstraint().getDomains(), Optional.of(ImmutableMap.of(groupByColumn, domain)));\n+    }\n+\n+    @Test\n+    public void testCombineFiltersWithAggregationPushdown()\n+    {\n+        ConnectorSession session = TestingConnectorSession.builder()\n+                .setPropertyMetadata(new JdbcMetadataSessionProperties(new JdbcMetadataConfig().setAggregationPushdownEnabled(true)).getSessionProperties())\n+                .build();\n+        ColumnHandle groupByColumn = metadata.getColumnHandles(session, tableHandle).get(\"text\");\n+        ConnectorTableHandle baseTableHandle = metadata.getTableHandle(session, new SchemaTableName(\"example\", \"numbers\"));\n+\n+        Domain firstDomain = Domain.multipleValues(VARCHAR, ImmutableList.of(utf8Slice(\"one\"), utf8Slice(\"two\")));\n+        JdbcTableHandle filterResult = applyConstraint(session, baseTableHandle, new Constraint(TupleDomain.withColumnDomains(ImmutableMap.of(groupByColumn, firstDomain))));\n+\n+        ConnectorTableHandle aggregatedTable = applyCountAggregation(session, filterResult, groupByColumn);\n+\n+        Domain secondDomain = Domain.multipleValues(VARCHAR, ImmutableList.of(utf8Slice(\"one\"), utf8Slice(\"three\")));\n+        JdbcTableHandle tableHandleWithFilter = applyConstraint(session, aggregatedTable, new Constraint(TupleDomain.withColumnDomains(ImmutableMap.of(groupByColumn, secondDomain))));\n+        assertEquals(\n+                tableHandleWithFilter.getConstraint().getDomains(),\n+                Optional.of(ImmutableMap.of(groupByColumn, Domain.singleValue(VARCHAR, utf8Slice(\"one\")))));\n+    }\n+\n+    @Test\n+    public void testNonGroupKeyPredicatePushdown()\n+    {\n+        ConnectorSession session = TestingConnectorSession.builder()\n+                .setPropertyMetadata(new JdbcMetadataSessionProperties(new JdbcMetadataConfig().setAggregationPushdownEnabled(true)).getSessionProperties())\n+                .build();\n+        Map<String, ColumnHandle> columnHandles = metadata.getColumnHandles(session, tableHandle);\n+        ColumnHandle groupByColumn = columnHandles.get(\"text\");\n+        ColumnHandle nonGroupByColumn = columnHandles.get(\"value\");\n+\n+        ConnectorTableHandle baseTableHandle = metadata.getTableHandle(session, new SchemaTableName(\"example\", \"numbers\"));\n+        ConnectorTableHandle aggregatedTable = applyCountAggregation(session, baseTableHandle, groupByColumn);\n+\n+        Domain domain = Domain.singleValue(BIGINT, 123L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzODU2MA=="}, "originalCommit": null, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI0NjU5MA==", "bodyText": "i think i was adding the flag because h2 did not support GROUPING SETS; OTOH tests currently cannot exploit this fact, as engine doesn't push grouping sets yet.\nYet, h2 version did not change, so it may be h2 still doesn't support this.\nMaybe instead of changing the return type of supportsGroupingSets, just use a \"mock\" jdbc client in the TestJdbcMetadata test?\nBy \"mock\" i mean a ForwardingJdbcClient delegating to database.getJdbcClient(), but overriding supportsGroupingSets?\nThis way you'd avoid making a false statement in the io.prestosql.plugin.jdbc.TestingH2JdbcClient#supportsGroupingSets", "url": "https://github.com/trinodb/trino/pull/6007#discussion_r528246590", "createdAt": "2020-11-21T21:47:52Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestJdbcMetadata.java", "diffHunk": "@@ -232,4 +246,84 @@ public void testDropTableTable()\n             assertEquals(e.getErrorCode(), NOT_FOUND.toErrorCode());\n         }\n     }\n+\n+    @Test\n+    public void testApplyFilterAfterAggregationPushdown()\n+    {\n+        ConnectorSession session = TestingConnectorSession.builder()\n+                .setPropertyMetadata(new JdbcMetadataSessionProperties(new JdbcMetadataConfig().setAggregationPushdownEnabled(true)).getSessionProperties())\n+                .build();\n+        ColumnHandle groupByColumn = metadata.getColumnHandles(session, tableHandle).get(\"text\");\n+        ConnectorTableHandle baseTableHandle = metadata.getTableHandle(session, new SchemaTableName(\"example\", \"numbers\"));\n+        ConnectorTableHandle aggregatedTable = applyCountAggregation(session, baseTableHandle, groupByColumn);\n+\n+        Domain domain = Domain.singleValue(VARCHAR, utf8Slice(\"one\"));\n+        JdbcTableHandle tableHandleWithFilter = applyConstraint(session, aggregatedTable, new Constraint(TupleDomain.withColumnDomains(ImmutableMap.of(groupByColumn, domain))));\n+\n+        assertEquals(tableHandleWithFilter.getConstraint().getDomains(), Optional.of(ImmutableMap.of(groupByColumn, domain)));\n+    }\n+\n+    @Test\n+    public void testCombineFiltersWithAggregationPushdown()\n+    {\n+        ConnectorSession session = TestingConnectorSession.builder()\n+                .setPropertyMetadata(new JdbcMetadataSessionProperties(new JdbcMetadataConfig().setAggregationPushdownEnabled(true)).getSessionProperties())\n+                .build();\n+        ColumnHandle groupByColumn = metadata.getColumnHandles(session, tableHandle).get(\"text\");\n+        ConnectorTableHandle baseTableHandle = metadata.getTableHandle(session, new SchemaTableName(\"example\", \"numbers\"));\n+\n+        Domain firstDomain = Domain.multipleValues(VARCHAR, ImmutableList.of(utf8Slice(\"one\"), utf8Slice(\"two\")));\n+        JdbcTableHandle filterResult = applyConstraint(session, baseTableHandle, new Constraint(TupleDomain.withColumnDomains(ImmutableMap.of(groupByColumn, firstDomain))));\n+\n+        ConnectorTableHandle aggregatedTable = applyCountAggregation(session, filterResult, groupByColumn);\n+\n+        Domain secondDomain = Domain.multipleValues(VARCHAR, ImmutableList.of(utf8Slice(\"one\"), utf8Slice(\"three\")));\n+        JdbcTableHandle tableHandleWithFilter = applyConstraint(session, aggregatedTable, new Constraint(TupleDomain.withColumnDomains(ImmutableMap.of(groupByColumn, secondDomain))));\n+        assertEquals(\n+                tableHandleWithFilter.getConstraint().getDomains(),\n+                Optional.of(ImmutableMap.of(groupByColumn, Domain.singleValue(VARCHAR, utf8Slice(\"one\")))));\n+    }\n+\n+    @Test\n+    public void testNonGroupKeyPredicatePushdown()\n+    {\n+        ConnectorSession session = TestingConnectorSession.builder()\n+                .setPropertyMetadata(new JdbcMetadataSessionProperties(new JdbcMetadataConfig().setAggregationPushdownEnabled(true)).getSessionProperties())\n+                .build();\n+        Map<String, ColumnHandle> columnHandles = metadata.getColumnHandles(session, tableHandle);\n+        ColumnHandle groupByColumn = columnHandles.get(\"text\");\n+        ColumnHandle nonGroupByColumn = columnHandles.get(\"value\");\n+\n+        ConnectorTableHandle baseTableHandle = metadata.getTableHandle(session, new SchemaTableName(\"example\", \"numbers\"));\n+        ConnectorTableHandle aggregatedTable = applyCountAggregation(session, baseTableHandle, groupByColumn);\n+\n+        Domain domain = Domain.singleValue(BIGINT, 123L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzODU2MA=="}, "originalCommit": null, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgxOTE5Ng==", "bodyText": "Sounds good. Updated.", "url": "https://github.com/trinodb/trino/pull/6007#discussion_r528819196", "createdAt": "2020-11-23T16:06:41Z", "author": {"login": "alexjo2144"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestJdbcMetadata.java", "diffHunk": "@@ -232,4 +246,84 @@ public void testDropTableTable()\n             assertEquals(e.getErrorCode(), NOT_FOUND.toErrorCode());\n         }\n     }\n+\n+    @Test\n+    public void testApplyFilterAfterAggregationPushdown()\n+    {\n+        ConnectorSession session = TestingConnectorSession.builder()\n+                .setPropertyMetadata(new JdbcMetadataSessionProperties(new JdbcMetadataConfig().setAggregationPushdownEnabled(true)).getSessionProperties())\n+                .build();\n+        ColumnHandle groupByColumn = metadata.getColumnHandles(session, tableHandle).get(\"text\");\n+        ConnectorTableHandle baseTableHandle = metadata.getTableHandle(session, new SchemaTableName(\"example\", \"numbers\"));\n+        ConnectorTableHandle aggregatedTable = applyCountAggregation(session, baseTableHandle, groupByColumn);\n+\n+        Domain domain = Domain.singleValue(VARCHAR, utf8Slice(\"one\"));\n+        JdbcTableHandle tableHandleWithFilter = applyConstraint(session, aggregatedTable, new Constraint(TupleDomain.withColumnDomains(ImmutableMap.of(groupByColumn, domain))));\n+\n+        assertEquals(tableHandleWithFilter.getConstraint().getDomains(), Optional.of(ImmutableMap.of(groupByColumn, domain)));\n+    }\n+\n+    @Test\n+    public void testCombineFiltersWithAggregationPushdown()\n+    {\n+        ConnectorSession session = TestingConnectorSession.builder()\n+                .setPropertyMetadata(new JdbcMetadataSessionProperties(new JdbcMetadataConfig().setAggregationPushdownEnabled(true)).getSessionProperties())\n+                .build();\n+        ColumnHandle groupByColumn = metadata.getColumnHandles(session, tableHandle).get(\"text\");\n+        ConnectorTableHandle baseTableHandle = metadata.getTableHandle(session, new SchemaTableName(\"example\", \"numbers\"));\n+\n+        Domain firstDomain = Domain.multipleValues(VARCHAR, ImmutableList.of(utf8Slice(\"one\"), utf8Slice(\"two\")));\n+        JdbcTableHandle filterResult = applyConstraint(session, baseTableHandle, new Constraint(TupleDomain.withColumnDomains(ImmutableMap.of(groupByColumn, firstDomain))));\n+\n+        ConnectorTableHandle aggregatedTable = applyCountAggregation(session, filterResult, groupByColumn);\n+\n+        Domain secondDomain = Domain.multipleValues(VARCHAR, ImmutableList.of(utf8Slice(\"one\"), utf8Slice(\"three\")));\n+        JdbcTableHandle tableHandleWithFilter = applyConstraint(session, aggregatedTable, new Constraint(TupleDomain.withColumnDomains(ImmutableMap.of(groupByColumn, secondDomain))));\n+        assertEquals(\n+                tableHandleWithFilter.getConstraint().getDomains(),\n+                Optional.of(ImmutableMap.of(groupByColumn, Domain.singleValue(VARCHAR, utf8Slice(\"one\")))));\n+    }\n+\n+    @Test\n+    public void testNonGroupKeyPredicatePushdown()\n+    {\n+        ConnectorSession session = TestingConnectorSession.builder()\n+                .setPropertyMetadata(new JdbcMetadataSessionProperties(new JdbcMetadataConfig().setAggregationPushdownEnabled(true)).getSessionProperties())\n+                .build();\n+        Map<String, ColumnHandle> columnHandles = metadata.getColumnHandles(session, tableHandle);\n+        ColumnHandle groupByColumn = columnHandles.get(\"text\");\n+        ColumnHandle nonGroupByColumn = columnHandles.get(\"value\");\n+\n+        ConnectorTableHandle baseTableHandle = metadata.getTableHandle(session, new SchemaTableName(\"example\", \"numbers\"));\n+        ConnectorTableHandle aggregatedTable = applyCountAggregation(session, baseTableHandle, groupByColumn);\n+\n+        Domain domain = Domain.singleValue(BIGINT, 123L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzODU2MA=="}, "originalCommit": null, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMjQxOTk0OnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestingH2JdbcClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQyMTo0MjoxMlrOH3xlPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQyMTo0ODowNlrOH3xnRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI0NjA3OQ==", "bodyText": "remove the overrride, as the default is (and will be) true.", "url": "https://github.com/trinodb/trino/pull/6007#discussion_r528246079", "createdAt": "2020-11-21T21:42:12Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestingH2JdbcClient.java", "diffHunk": "@@ -37,7 +37,7 @@ public TestingH2JdbcClient(BaseJdbcConfig config, ConnectionFactory connectionFa\n     @Override\n     public boolean supportsGroupingSets()\n     {\n-        return false;\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI0NjU5Nw==", "bodyText": "see however #6007 (comment)", "url": "https://github.com/trinodb/trino/pull/6007#discussion_r528246597", "createdAt": "2020-11-21T21:48:06Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestingH2JdbcClient.java", "diffHunk": "@@ -37,7 +37,7 @@ public TestingH2JdbcClient(BaseJdbcConfig config, ConnectionFactory connectionFa\n     @Override\n     public boolean supportsGroupingSets()\n     {\n-        return false;\n+        return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI0NjA3OQ=="}, "originalCommit": null, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4821, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}