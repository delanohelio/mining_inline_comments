{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3ODU5MjQ0", "number": 5884, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMjoxNzoyN1rOE3Mx2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMToyNjowOFrOFDbXdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MzE2NTA1OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/TestRun.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMjoxNzoyN1rOHwZ6Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMjoxNzoyN1rOHwZ6Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUxODE3MQ==", "bodyText": "remember to drop this", "url": "https://github.com/trinodb/trino/pull/5884#discussion_r520518171", "createdAt": "2020-11-10T12:17:27Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/TestRun.java", "diffHunk": "@@ -262,7 +262,8 @@ private Environment getEnvironment()\n                                         \"-XX:MinHeapFreeRatio=10\",\n                                         \"-XX:MaxHeapFreeRatio=10\",\n                                         \"-Djava.util.logging.config.file=/docker/presto-product-tests/conf/tempto/logging.properties\",\n-                                        \"-Duser.timezone=Asia/Kathmandu\")\n+                                        \"-Duser.timezone=Asia/Kathmandu\",\n+                                        \"-Dio.prestosql.testng.services.FlakyTestRetryAnalyzer.enabled=true\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MzE3MDgwOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveCoercion.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMjoxOToxNFrOHwZ9zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMjoxOToxNFrOHwZ9zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUxOTExOA==", "bodyText": "onPresto() could return something that's scoped for a test method or class.\n(maybe it does already?)\nthus do it lazy, only when getExecutor is called.\nor, do like here\nhttps://github.com/prestosql/presto/blob/34504af3ce2a4dfff4fecdb1d26d840787345220/presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java#L793-L797\nwhere the enum is dumb", "url": "https://github.com/trinodb/trino/pull/5884#discussion_r520519118", "createdAt": "2020-11-10T12:19:14Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveCoercion.java", "diffHunk": "@@ -140,6 +146,24 @@\n                         \"STORED AS AVRO\");\n     }\n \n+    enum ExecutorType\n+    {\n+        PRESTO(onPresto()),\n+        HIVE(onHive());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTM4NDIwOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveCoercion.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMToyNjowOFrOIDEjOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMToyNjowOFrOIDEjOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA5MTE5Mg==", "bodyText": "fmt", "url": "https://github.com/trinodb/trino/pull/5884#discussion_r540091192", "createdAt": "2020-12-10T11:26:08Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveCoercion.java", "diffHunk": "@@ -561,4 +730,81 @@ private static Row project(Row row, int... columns)\n                 .map(prestoArray -> Arrays.asList((Object[]) prestoArray.getArray()))\n                 .collect(toImmutableList());\n     }\n+\n+    static class ColumnContext\n+    {\n+        private final String hiveVersion;\n+        private final String format;\n+        private final String column;\n+\n+        public ColumnContext(String hiveVersion, String format, String column)\n+        {\n+            this.hiveVersion = requireNonNull(hiveVersion, \"hiveVersion is null\");\n+            this.format = requireNonNull(format, \"format is null\");\n+            this.column = requireNonNull(column, \"column is null\");\n+        }\n+\n+        public static ColumnContext columnContext(String version, String format, String column)\n+        {\n+            return new ColumnContext(version, format, column);\n+        }\n+\n+        public String getHiveVersion()\n+        {\n+            return hiveVersion;\n+        }\n+\n+        public String getFormat()\n+        {\n+            return format;\n+        }\n+\n+        public String getColumn()\n+        {\n+            return column;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o)\n+        {\n+            if (this == o) {\n+                return true;\n+            }\n+            if (o == null || getClass() != o.getClass()) {\n+                return false;\n+            }\n+            ColumnContext that = (ColumnContext) o;\n+            return Objects.equals(hiveVersion, that.hiveVersion) && Objects.equals(format, that.format) && Objects.equals(\n+                    column, that.column);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 522}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4439, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}