{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyNTIxMjIw", "number": 4956, "title": "Add support for TopN to cost", "bodyText": "", "createdAt": "2020-08-24T13:28:56Z", "url": "https://github.com/trinodb/trino/pull/4956", "merged": true, "mergeCommit": {"oid": "24152c9c864e2151006e297cde17c248adfef629"}, "closed": true, "closedAt": "2020-09-01T08:37:23Z", "author": {"login": "kabunchi"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCHIDegFqTQ3Mzc1OTcxOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEhxFogBqjM3MTMxMzI4NTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNzU5NzE5", "url": "https://github.com/trinodb/trino/pull/4956#pullrequestreview-473759719", "createdAt": "2020-08-24T18:36:26Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODozNjoyN1rOHFxkHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODozODoyNlrOHFxoEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxNjk5MA==", "bodyText": "Name testTopNWithLongInput", "url": "https://github.com/trinodb/trino/pull/4956#discussion_r475816990", "createdAt": "2020-08-24T18:36:27Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/cost/TestTopNStatsRule.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.prestosql.cost;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.plan.TopNNode;\n+import org.testng.annotations.Test;\n+\n+public class TestTopNStatsRule\n+        extends BaseStatsCalculatorTest\n+{\n+    @Test\n+    public void testShorterTopN()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxNzEwNQ==", "bodyText": "Name testTopNWithSmallInput", "url": "https://github.com/trinodb/trino/pull/4956#discussion_r475817105", "createdAt": "2020-08-24T18:36:40Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/cost/TestTopNStatsRule.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.prestosql.cost;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.plan.TopNNode;\n+import org.testng.annotations.Test;\n+\n+public class TestTopNStatsRule\n+        extends BaseStatsCalculatorTest\n+{\n+    @Test\n+    public void testShorterTopN()\n+    {\n+        // Test case with more rows in data than in topN SINGLE step\n+        tester().assertStatsFor(pb -> pb\n+                .topN(10, ImmutableList.of(pb.symbol(\"i1\")), pb.values(pb.symbol(\"i1\"), pb.symbol(\"i2\"))))\n+                .withSourceStats(0, PlanNodeStatsEstimate.builder()\n+                        .setOutputRowCount(100)\n+                        .addSymbolStatistics(new Symbol(\"i1\"), SymbolStatsEstimate.builder()\n+                                .setLowValue(1)\n+                                .setHighValue(10)\n+                                .setDistinctValuesCount(5)\n+                                .setNullsFraction(0)\n+                                .build())\n+                        .addSymbolStatistics(new Symbol(\"i2\"), SymbolStatsEstimate.builder()\n+                                .setLowValue(0)\n+                                .setHighValue(3)\n+                                .setDistinctValuesCount(4)\n+                                .setNullsFraction(0)\n+                                .build())\n+                        .build())\n+                .check(check -> check\n+                        .outputRowsCount(10) //Expect TopN to limit\n+                        .symbolStats(\"i1\", assertion -> assertion\n+                                .lowValue(1)\n+                                .highValue(10)\n+                                .distinctValuesCount(5)\n+                                .dataSizeUnknown()\n+                                .nullsFraction(0))\n+                        .symbolStats(\"i2\", assertion -> assertion\n+                                .lowValue(0)\n+                                .highValue(3)\n+                                .dataSizeUnknown()\n+                                .distinctValuesCount(4)\n+                                .nullsFraction(0)));\n+\n+        // Test case with more rows in data than in topN PARTIAL step\n+        tester().assertStatsFor(pb -> pb\n+                .topN(10, ImmutableList.of(pb.symbol(\"i1\")), TopNNode.Step.PARTIAL, pb.values(pb.symbol(\"i1\"), pb.symbol(\"i2\"))))\n+                .withSourceStats(0, PlanNodeStatsEstimate.builder()\n+                        .setOutputRowCount(100)\n+                        .addSymbolStatistics(new Symbol(\"i1\"), SymbolStatsEstimate.builder()\n+                                .setLowValue(1)\n+                                .setHighValue(10)\n+                                .setDistinctValuesCount(5)\n+                                .setNullsFraction(0)\n+                                .build())\n+                        .addSymbolStatistics(new Symbol(\"i2\"), SymbolStatsEstimate.builder()\n+                                .setLowValue(0)\n+                                .setHighValue(3)\n+                                .setDistinctValuesCount(4)\n+                                .setNullsFraction(0)\n+                                .build())\n+                        .build())\n+                .check(check -> check\n+                        .outputRowsCount(100) //Expect TopN not to limit\n+                        .symbolStats(\"i1\", assertion -> assertion\n+                                .lowValue(1)\n+                                .highValue(10)\n+                                .distinctValuesCount(5)\n+                                .dataSizeUnknown()\n+                                .nullsFraction(0))\n+                        .symbolStats(\"i2\", assertion -> assertion\n+                                .lowValue(0)\n+                                .highValue(3)\n+                                .dataSizeUnknown()\n+                                .distinctValuesCount(4)\n+                                .nullsFraction(0)));\n+    }\n+\n+    @Test\n+    public void testLongerTopN()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxODAwMg==", "bodyText": "I think you should reset nulls fraction to 0 here. Or is it done anyway somewhere else. Can you please add test where input has non-zero null fraction.", "url": "https://github.com/trinodb/trino/pull/4956#discussion_r475818002", "createdAt": "2020-08-24T18:38:26Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/cost/TopNStatsRule.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.cost;\n+\n+import io.prestosql.Session;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.sql.planner.TypeProvider;\n+import io.prestosql.sql.planner.iterative.Lookup;\n+import io.prestosql.sql.planner.plan.TopNNode;\n+\n+import java.util.Optional;\n+\n+import static io.prestosql.sql.planner.plan.Patterns.topN;\n+\n+public class TopNStatsRule\n+        extends SimpleStatsRule<TopNNode>\n+{\n+    private static final Pattern<TopNNode> PATTERN = topN();\n+\n+    public TopNStatsRule(StatsNormalizer normalizer)\n+    {\n+        super(normalizer);\n+    }\n+\n+    @Override\n+    public Pattern<TopNNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    protected Optional<PlanNodeStatsEstimate> doCalculate(TopNNode node, StatsProvider statsProvider, Lookup lookup, Session session, TypeProvider types)\n+    {\n+        PlanNodeStatsEstimate sourceStats = statsProvider.getStats(node.getSource());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NjUyNjAy", "url": "https://github.com/trinodb/trino/pull/4956#pullrequestreview-474652602", "createdAt": "2020-08-25T16:29:20Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjoyOToyMVrOHGgJMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjozNzo0MFrOHGgeEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4MDE0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public TopNNode topN(long count, List<Symbol> orderBy, TopNNode.Step step, PlanNode source, SortOrder sortOrder)\n          \n          \n            \n                public TopNNode topN(long count, List<Symbol> orderBy, TopNNode.Step step, SortOrder sortOrder, PlanNode source)", "url": "https://github.com/trinodb/trino/pull/4956#discussion_r476580144", "createdAt": "2020-08-25T16:29:21Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/iterative/rule/test/PlanBuilder.java", "diffHunk": "@@ -259,13 +259,17 @@ public TopNNode topN(long count, List<Symbol> orderBy, PlanNode source)\n \n     public TopNNode topN(long count, List<Symbol> orderBy, TopNNode.Step step, PlanNode source)\n     {\n-        return new TopNNode(\n+        return topN(count, orderBy, step, source, SortOrder.ASC_NULLS_FIRST);\n+    }\n+\n+    public TopNNode topN(long count, List<Symbol> orderBy, TopNNode.Step step, PlanNode source, SortOrder sortOrder)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4NTQ5MA==", "bodyText": "Not sure about PARTIAL handling. It does not limit output size to same extent as FINAL, yet it still can very substantially limit it vs size of the input to queryParalellism*limit.\n@findepi do you have an idea how to do better estimation here? (or pass to someone who may have more context here)", "url": "https://github.com/trinodb/trino/pull/4956#discussion_r476585490", "createdAt": "2020-08-25T16:37:40Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/cost/TopNStatsRule.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.cost;\n+\n+import io.prestosql.Session;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.spi.block.SortOrder;\n+import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.TypeProvider;\n+import io.prestosql.sql.planner.iterative.Lookup;\n+import io.prestosql.sql.planner.plan.TopNNode;\n+\n+import java.util.Optional;\n+\n+import static io.prestosql.sql.planner.plan.Patterns.topN;\n+\n+public class TopNStatsRule\n+        extends SimpleStatsRule<TopNNode>\n+{\n+    private static final Pattern<TopNNode> PATTERN = topN();\n+\n+    public TopNStatsRule(StatsNormalizer normalizer)\n+    {\n+        super(normalizer);\n+    }\n+\n+    @Override\n+    public Pattern<TopNNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    protected Optional<PlanNodeStatsEstimate> doCalculate(TopNNode node, StatsProvider statsProvider, Lookup lookup, Session session, TypeProvider types)\n+    {\n+        PlanNodeStatsEstimate sourceStats = statsProvider.getStats(node.getSource());\n+        double rowCount = sourceStats.getOutputRowCount();\n+\n+        if ((rowCount <= node.getCount()) || (node.getStep() == TopNNode.Step.PARTIAL)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "18cc6f11a79050981aa30f1a4c76ad2e95321892", "author": {"user": {"login": "vromanv", "name": null}}, "url": "https://github.com/trinodb/trino/commit/18cc6f11a79050981aa30f1a4c76ad2e95321892", "committedDate": "2020-09-01T06:52:55Z", "message": "Add support for TopN to cost"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "18cc6f11a79050981aa30f1a4c76ad2e95321892", "author": {"user": {"login": "vromanv", "name": null}}, "url": "https://github.com/trinodb/trino/commit/18cc6f11a79050981aa30f1a4c76ad2e95321892", "committedDate": "2020-09-01T06:52:55Z", "message": "Add support for TopN to cost"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4140, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}