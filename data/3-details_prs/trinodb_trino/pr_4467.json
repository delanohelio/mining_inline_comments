{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NzM0Nzc4", "number": 4467, "title": "Handle NaN in Parquet statistics", "bodyText": "Fixes #4267", "createdAt": "2020-07-15T21:02:41Z", "url": "https://github.com/trinodb/trino/pull/4467", "merged": true, "mergeCommit": {"oid": "c457710fab971c95cc6b869a269269f2be1c7ef8"}, "closed": true, "closedAt": "2020-07-17T21:15:53Z", "author": {"login": "aalbu"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1XGj1gBqjM1NTEyNDc0MjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc15RgrgFqTQ1MDkxNzI2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMTYzNDM2", "url": "https://github.com/trinodb/trino/pull/4467#pullrequestreview-450163436", "createdAt": "2020-07-16T19:44:54Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOTo0NDo1NFrOGy6I7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOTo0NTozOVrOGy6LJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAzNDU0MQ==", "bodyText": "why not just\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (isFloatingPointNaN(type, min) || isFloatingPointNaN(type, max)) {\n          \n          \n            \n                        if (Float.isNaN(floatStatistics.getMin()) || Float.isNaN(floatStatistics.getMax())) {\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/trinodb/trino/pull/4467#discussion_r456034541", "createdAt": "2020-07-16T19:44:54Z", "author": {"login": "findepi"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/predicate/TupleDomainParquetPredicate.java", "diffHunk": "@@ -192,9 +193,12 @@ public static Domain getDomain(Type type, long rowCount, Statistics<?> statistic\n                 return Domain.create(ValueSet.all(type), hasNullValue);\n             }\n \n-            ParquetIntegerStatistics parquetStatistics = new ParquetIntegerStatistics(\n-                    (long) floatToRawIntBits(floatStatistics.getMin()),\n-                    (long) floatToRawIntBits(floatStatistics.getMax()));\n+            long min = floatToIntBits(floatStatistics.getMin());\n+            long max = floatToIntBits(floatStatistics.getMax());\n+            if (isFloatingPointNaN(type, min) || isFloatingPointNaN(type, max)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAzNDcxOA==", "bodyText": "as above", "url": "https://github.com/trinodb/trino/pull/4467#discussion_r456034718", "createdAt": "2020-07-16T19:45:07Z", "author": {"login": "findepi"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/predicate/TupleDomainParquetPredicate.java", "diffHunk": "@@ -205,6 +209,10 @@ public static Domain getDomain(Type type, long rowCount, Statistics<?> statistic\n                 failWithCorruptionException(failOnCorruptedParquetStatistics, column, id, doubleStatistics);\n                 return Domain.create(ValueSet.all(type), hasNullValue);\n             }\n+            if (isFloatingPointNaN(type, doubleStatistics.genericGetMin()) || isFloatingPointNaN(type, doubleStatistics.genericGetMax())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAzNTA0NA==", "bodyText": "Double.isNaN", "url": "https://github.com/trinodb/trino/pull/4467#discussion_r456035044", "createdAt": "2020-07-16T19:45:33Z", "author": {"login": "findepi"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/predicate/TupleDomainParquetPredicate.java", "diffHunk": "@@ -316,6 +324,9 @@ public static Domain getDomain(Type type, DictionaryDescriptor dictionaryDescrip\n         if (type.equals(DOUBLE) && columnDescriptor.getPrimitiveType().getPrimitiveTypeName() == PrimitiveTypeName.DOUBLE) {\n             List<Domain> domains = new ArrayList<>();\n             for (int i = 0; i < dictionarySize; i++) {\n+                if (isFloatingPointNaN(type, dictionary.decodeToDouble(i))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAzNTExMQ==", "bodyText": "probably same", "url": "https://github.com/trinodb/trino/pull/4467#discussion_r456035111", "createdAt": "2020-07-16T19:45:39Z", "author": {"login": "findepi"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/predicate/TupleDomainParquetPredicate.java", "diffHunk": "@@ -325,6 +336,9 @@ public static Domain getDomain(Type type, DictionaryDescriptor dictionaryDescrip\n         if (type.equals(DOUBLE) && columnDescriptor.getPrimitiveType().getPrimitiveTypeName() == PrimitiveTypeName.FLOAT) {\n             List<Domain> domains = new ArrayList<>();\n             for (int i = 0; i < dictionarySize; i++) {\n+                if (isFloatingPointNaN(type, dictionary.decodeToFloat(i))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMjQ0MTE3", "url": "https://github.com/trinodb/trino/pull/4467#pullrequestreview-450244117", "createdAt": "2020-07-16T21:56:05Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMTo1NjowNVrOGy-Mug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMTo1NjowNVrOGy-Mug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEwMTA1MA==", "bodyText": "Silly.  The first version was trying to do it more generically and when I refactored, I copied/pasted.", "url": "https://github.com/trinodb/trino/pull/4467#discussion_r456101050", "createdAt": "2020-07-16T21:56:05Z", "author": {"login": "aalbu"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/predicate/TupleDomainParquetPredicate.java", "diffHunk": "@@ -192,9 +193,12 @@ public static Domain getDomain(Type type, long rowCount, Statistics<?> statistic\n                 return Domain.create(ValueSet.all(type), hasNullValue);\n             }\n \n-            ParquetIntegerStatistics parquetStatistics = new ParquetIntegerStatistics(\n-                    (long) floatToRawIntBits(floatStatistics.getMin()),\n-                    (long) floatToRawIntBits(floatStatistics.getMax()));\n+            long min = floatToIntBits(floatStatistics.getMin());\n+            long max = floatToIntBits(floatStatistics.getMax());\n+            if (isFloatingPointNaN(type, min) || isFloatingPointNaN(type, max)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAzNDU0MQ=="}, "originalCommit": null, "originalPosition": 20}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNDM3Njk2", "url": "https://github.com/trinodb/trino/pull/4467#pullrequestreview-450437696", "createdAt": "2020-07-17T07:37:23Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNzozNzoyM1rOGzIoYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNzozNzoyM1rOGzIoYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI3MTk2OA==", "bodyText": "why the switch? Should not matter as for non-NaNs behaviour is the same. Yet I am curious.", "url": "https://github.com/trinodb/trino/pull/4467#discussion_r456271968", "createdAt": "2020-07-17T07:37:23Z", "author": {"login": "losipiuk"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/predicate/TupleDomainParquetPredicate.java", "diffHunk": "@@ -191,11 +191,13 @@ public static Domain getDomain(Type type, long rowCount, Statistics<?> statistic\n                 failWithCorruptionException(failOnCorruptedParquetStatistics, column, id, floatStatistics);\n                 return Domain.create(ValueSet.all(type), hasNullValue);\n             }\n+            if (floatStatistics.genericGetMin().isNaN() || floatStatistics.genericGetMax().isNaN()) {\n+                return Domain.create(ValueSet.all(type), hasNullValue);\n+            }\n \n             ParquetIntegerStatistics parquetStatistics = new ParquetIntegerStatistics(\n-                    (long) floatToRawIntBits(floatStatistics.getMin()),\n-                    (long) floatToRawIntBits(floatStatistics.getMax()));\n-\n+                    (long) floatToIntBits(floatStatistics.getMin()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNDQzNTA2", "url": "https://github.com/trinodb/trino/pull/4467#pullrequestreview-450443506", "createdAt": "2020-07-17T07:47:16Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNzo0NzoxNlrOGzI7Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNzo0NzoyMVrOGzI7ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI3Njc5MQ==", "bodyText": "extract dictionary.decodeToDouble(i) as variable\n(shouldn't matter in practice but still)", "url": "https://github.com/trinodb/trino/pull/4467#discussion_r456276791", "createdAt": "2020-07-17T07:47:16Z", "author": {"login": "findepi"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/predicate/TupleDomainParquetPredicate.java", "diffHunk": "@@ -316,6 +322,9 @@ public static Domain getDomain(Type type, DictionaryDescriptor dictionaryDescrip\n         if (type.equals(DOUBLE) && columnDescriptor.getPrimitiveType().getPrimitiveTypeName() == PrimitiveTypeName.DOUBLE) {\n             List<Domain> domains = new ArrayList<>();\n             for (int i = 0; i < dictionarySize; i++) {\n+                if (Double.isNaN(dictionary.decodeToDouble(i))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI3Njg0Mg==", "bodyText": "variable", "url": "https://github.com/trinodb/trino/pull/4467#discussion_r456276842", "createdAt": "2020-07-17T07:47:21Z", "author": {"login": "findepi"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/predicate/TupleDomainParquetPredicate.java", "diffHunk": "@@ -325,6 +334,9 @@ public static Domain getDomain(Type type, DictionaryDescriptor dictionaryDescrip\n         if (type.equals(DOUBLE) && columnDescriptor.getPrimitiveType().getPrimitiveTypeName() == PrimitiveTypeName.FLOAT) {\n             List<Domain> domains = new ArrayList<>();\n             for (int i = 0; i < dictionarySize; i++) {\n+                if (Float.isNaN(dictionary.decodeToFloat(i))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2235b45d4c40e1029fbd0b7d6cbbbe0f62e3966e", "author": {"user": {"login": "aalbu", "name": "Alex Albu"}}, "url": "https://github.com/trinodb/trino/commit/2235b45d4c40e1029fbd0b7d6cbbbe0f62e3966e", "committedDate": "2020-07-17T19:36:06Z", "message": "Handle NaN in Parquet statistics"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "2235b45d4c40e1029fbd0b7d6cbbbe0f62e3966e", "author": {"user": {"login": "aalbu", "name": "Alex Albu"}}, "url": "https://github.com/trinodb/trino/commit/2235b45d4c40e1029fbd0b7d6cbbbe0f62e3966e", "committedDate": "2020-07-17T19:36:06Z", "message": "Handle NaN in Parquet statistics"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwOTE3MjY3", "url": "https://github.com/trinodb/trino/pull/4467#pullrequestreview-450917267", "createdAt": "2020-07-17T19:47:47Z", "commit": {"oid": "2235b45d4c40e1029fbd0b7d6cbbbe0f62e3966e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4717, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}