{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzNjg4MjY5", "number": 5775, "title": "Minor codestyle fix", "bodyText": "", "createdAt": "2020-11-01T20:36:23Z", "url": "https://github.com/trinodb/trino/pull/5775", "merged": true, "mergeCommit": {"oid": "a5f227621ca4a8a9a78588425bb413eac2980925"}, "closed": true, "closedAt": "2020-11-02T10:11:17Z", "author": {"login": "findepi"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdYV-P8gH2gAyNTEzNjg4MjY5OjBiZTZjNmJkYzk4YmZiOTlmYjQyZjQ1NGE5ZWZhZThiODlkOWY5Nzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdYhFCLgFqTUyMTQ1NDc4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0be6c6bdc98bfb99fb42f454a9efae8b89d9f978", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/0be6c6bdc98bfb99fb42f454a9efae8b89d9f978", "committedDate": "2020-11-01T20:27:25Z", "message": "Avoid calling build() repeatedly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26a1fe157ec4f7559a93e5cf4796ad5468af259a", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/26a1fe157ec4f7559a93e5cf4796ad5468af259a", "committedDate": "2020-11-01T20:39:48Z", "message": "Simplify code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "26a1fe157ec4f7559a93e5cf4796ad5468af259a", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/26a1fe157ec4f7559a93e5cf4796ad5468af259a", "committedDate": "2020-11-01T20:39:48Z", "message": "Simplify code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMzA4NTg1", "url": "https://github.com/trinodb/trino/pull/5775#pullrequestreview-521308585", "createdAt": "2020-11-02T03:10:08Z", "commit": {"oid": "26a1fe157ec4f7559a93e5cf4796ad5468af259a"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMzoxMDowOVrOHr1EiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMzoxMDowOVrOHr1EiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcyMDMyOA==", "bodyText": "this is cool!", "url": "https://github.com/trinodb/trino/pull/5775#discussion_r515720328", "createdAt": "2020-11-02T03:10:09Z", "author": {"login": "phd3"}, "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/AbstractSessionPropertyManager.java", "diffHunk": "@@ -13,54 +13,41 @@\n  */\n package io.prestosql.plugin.session;\n \n-import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Table;\n import io.prestosql.spi.session.SessionConfigurationContext;\n import io.prestosql.spi.session.SessionPropertyConfigurationManager;\n \n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n-import java.util.Optional;\n \n import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static com.google.common.collect.ImmutableTable.toImmutableTable;\n \n public abstract class AbstractSessionPropertyManager\n         implements SessionPropertyConfigurationManager\n {\n     @Override\n     public final Map<String, String> getSystemSessionProperties(SessionConfigurationContext context)\n     {\n-        return getSessionProperties(context)\n-                .entrySet()\n-                .stream()\n+        Map<String, String> sessionProperties = getSessionProperties(context);\n+        return sessionProperties.entrySet().stream()\n                 .filter(property -> !isCatalogSessionProperty(property))\n                 .collect(toImmutableMap(Entry::getKey, Entry::getValue));\n     }\n \n     @Override\n     public final Map<String, Map<String, String>> getCatalogSessionProperties(SessionConfigurationContext context)\n     {\n-        Map<String, ImmutableMap.Builder<String, String>> catalogsSessionProperties = new HashMap<>();\n-        getSessionProperties(context)\n-                .entrySet()\n-                .stream()\n-                .filter(property -> isCatalogSessionProperty(property))\n-                .forEach(catalogProperty -> {\n-                    String[] property = catalogProperty.getKey().split(\"\\\\.\", 2);\n-                    String propertyCatalog = property[0];\n-                    String propertyName = property[1];\n-                    catalogsSessionProperties.compute(propertyCatalog, (catalog, properties) -> {\n-                        ImmutableMap.Builder<String, String> catalogPropertiesBuilder =\n-                                Optional.ofNullable(properties).orElseGet(ImmutableMap::builder);\n-                        catalogPropertiesBuilder.put(propertyName, catalogProperty.getValue());\n-                        return catalogPropertiesBuilder;\n-                    });\n-                });\n-        return catalogsSessionProperties\n-                .entrySet()\n-                .stream()\n-                .collect(toImmutableMap(Entry::getKey, entry -> entry.getValue().build()));\n+        Map<String, String> sessionProperties = getSessionProperties(context);\n+        Table<String, String, String> catalogsSessionProperties = sessionProperties.entrySet().stream()\n+                .filter(AbstractSessionPropertyManager::isCatalogSessionProperty)\n+                .collect(toImmutableTable(\n+                        catalogProperty -> catalogProperty.getKey().split(\"\\\\.\", 2)[0],\n+                        catalogProperty -> catalogProperty.getKey().split(\"\\\\.\", 2)[1],\n+                        Entry::getValue));\n+        return catalogsSessionProperties.rowMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26a1fe157ec4f7559a93e5cf4796ad5468af259a"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNDU0Nzg1", "url": "https://github.com/trinodb/trino/pull/5775#pullrequestreview-521454785", "createdAt": "2020-11-02T09:23:47Z", "commit": {"oid": "26a1fe157ec4f7559a93e5cf4796ad5468af259a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2748, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}