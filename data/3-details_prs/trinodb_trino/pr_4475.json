{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwNDA1ODM2", "number": 4475, "title": "Fix nested parametric timestamp compatibility with older clients", "bodyText": "This PR fixes handling of TIMESTAMP(p) and TIMESTAMP WITH TIMEZONE(p) nested in ROW, MAP, ARRAY types for legacy clients.\nIt also affects how those types are reported in DESCRIBE INPUT, DESCRIBE OUTPUT and information_schema.columns table.", "createdAt": "2020-07-16T18:24:50Z", "url": "https://github.com/trinodb/trino/pull/4475", "merged": true, "mergeCommit": {"oid": "0e4e41939b0b000418cd38d06b8f9c58cfb9484a"}, "closed": true, "closedAt": "2020-07-17T00:58:46Z", "author": {"login": "wendigo"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1j3OcAFqTQ1MDEyMjY0Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1oCLZgBqjM1NTU2MDQyNDU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMTIyNjQy", "url": "https://github.com/trinodb/trino/pull/4475#pullrequestreview-450122642", "createdAt": "2020-07-16T18:51:04Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxODo1MTowNFrOGy4FXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxODo1MTowNFrOGy4FXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAwMDg2MA==", "bodyText": "Does ROW type also need to be handled here?\ni guess not, but worth adding a comment why", "url": "https://github.com/trinodb/trino/pull/4475#discussion_r456000860", "createdAt": "2020-07-16T18:51:04Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -184,6 +179,48 @@ else if (type instanceof TimestampWithTimeZoneType) {\n         return Optional.of(unmodifiableList(row));\n     }\n \n+    private Object roundParametricDateTime(Object value, Type type)\n+    {\n+        if (supportsParametricDateTime || value == null) {\n+            return value;\n+        }\n+\n+        if (type instanceof TimestampType) {\n+            return ((SqlTimestamp) value).roundTo(3);\n+        }\n+\n+        if (type instanceof TimestampWithTimeZoneType) {\n+            return ((SqlTimestampWithTimeZone) value).roundTo(3);\n+        }\n+\n+        if (type instanceof ArrayType) {\n+            List<Object> values = (List<Object>) value;\n+\n+            ImmutableList.Builder<Object> result = ImmutableList.builder();\n+            Type elementType = ((ArrayType) type).getElementType();\n+\n+            for (int i = 0; i < values.size(); i++) {\n+                result.add(roundParametricDateTime(values.get(i), elementType));\n+            }\n+\n+            return result.build();\n+        }\n+\n+        if (type instanceof MapType) {\n+            Map<Object, Object> values = (Map<Object, Object>) value;\n+\n+            ImmutableMap.Builder<Object, Object> result = ImmutableMap.builder();\n+            Type keyType = ((MapType) type).getKeyType();\n+            Type valueType = ((MapType) type).getValueType();\n+\n+            values.entrySet().forEach(entry -> result.put(roundParametricDateTime(entry.getKey(), keyType), roundParametricDateTime(entry.getValue(), valueType)));\n+\n+            return result.build();\n+        }\n+\n+        return value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 86}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMTM2NjY1", "url": "https://github.com/trinodb/trino/pull/4475#pullrequestreview-450136665", "createdAt": "2020-07-16T19:11:20Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOToxMToyMFrOGy4xKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOToxMjowNVrOGy4yoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAxMjA3NQ==", "bodyText": "static", "url": "https://github.com/trinodb/trino/pull/4475#discussion_r456012075", "createdAt": "2020-07-16T19:11:20Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -184,6 +180,73 @@ else if (type instanceof TimestampWithTimeZoneType) {\n         return Optional.of(unmodifiableList(row));\n     }\n \n+    private Object roundParametricDateTime(Object value, Type type)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAxMjQ0OA==", "bodyText": "we shouldn't need to copy the array data, if it does not contain a timestamp type\nyou can effect that pretty concisely by making the method return optional\nwhere empty would signal \"no change\"\nthis way you would do the decomposition only once", "url": "https://github.com/trinodb/trino/pull/4475#discussion_r456012448", "createdAt": "2020-07-16T19:12:05Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -184,6 +180,73 @@ else if (type instanceof TimestampWithTimeZoneType) {\n         return Optional.of(unmodifiableList(row));\n     }\n \n+    private Object roundParametricDateTime(Object value, Type type)\n+    {\n+        if (supportsParametricDateTime || value == null) {\n+            return value;\n+        }\n+\n+        if (type instanceof TimestampType) {\n+            return ((SqlTimestamp) value).roundTo(3);\n+        }\n+\n+        if (type instanceof TimestampWithTimeZoneType) {\n+            return ((SqlTimestampWithTimeZone) value).roundTo(3);\n+        }\n+\n+        if (type instanceof ArrayType) {\n+            List<Object> values = (List<Object>) value;\n+\n+            ImmutableList.Builder<Object> result = ImmutableList.builder();\n+            Type elementType = ((ArrayType) type).getElementType();\n+\n+            for (int i = 0; i < values.size(); i++) {\n+                result.add(roundParametricDateTime(values.get(i), elementType));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 69}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMjQ1OTMz", "url": "https://github.com/trinodb/trino/pull/4475#pullrequestreview-450245933", "createdAt": "2020-07-16T21:59:49Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMTo1OTo0OVrOGy-TKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMjowODowNFrOGy-gzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEwMjY5Nw==", "bodyText": "This is ok for datetime types, but it will require a rewrite if we need to add custom rules for other types. It'd be more robust to structure as:\nif (supportsParametricDateTime) {\n   // common fast path\n}\nelse {\n   // legacy path\n}\nand\nprivate Object getLegacyValue(Object value, Type type)\n{\n    if (value == null) {\n        return null;\n    }\n\n    if (!supportsParametricDateTime) {\n        if (type instanceof TimestampType) {\n            return ((SqlTimestamp) value).roundTo(3);\n        }\n        if (...) {\n            ...\n        }\n    }\n\n    // in the future, handling for other types can be added here...\n\n    if (type instanceof ArrayType) {\n        ...\n    }\n    if (type instanceof MapType) {\n        ...\n    }\n    ...\n}", "url": "https://github.com/trinodb/trino/pull/4475#discussion_r456102697", "createdAt": "2020-07-16T21:59:49Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -184,6 +186,76 @@ else if (type instanceof TimestampWithTimeZoneType) {\n         return Optional.of(unmodifiableList(row));\n     }\n \n+    private static Object roundParametricDateTime(Object value, Type type)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEwNjE5MQ==", "bodyText": "Field names may need to be quoted. Have you checked how they are rendered currently?", "url": "https://github.com/trinodb/trino/pull/4475#discussion_r456106191", "createdAt": "2020-07-16T22:08:04Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/type/TypeUtils.java", "diffHunk": "@@ -151,13 +160,46 @@ public static void checkElementNotNull(boolean isNull, String errorMsg)\n     public static String getDisplayLabel(Type type, Session session)\n     {\n         if (isOmitDateTimeTypePrecision(session)) {\n-            if (type instanceof TimestampType && ((TimestampType) type).getPrecision() == TimestampType.DEFAULT_PRECISION) {\n-                return StandardTypes.TIMESTAMP;\n-            }\n-            else if (type instanceof TimestampWithTimeZoneType && ((TimestampWithTimeZoneType) type).getPrecision() == TimestampWithTimeZoneType.DEFAULT_PRECISION) {\n-                return StandardTypes.TIMESTAMP_WITH_TIME_ZONE;\n-            }\n+            return getDisplayLabelForLegacyClients(type);\n+        }\n+        return type.getDisplayName();\n+    }\n+\n+    private static String getDisplayLabelForLegacyClients(Type type)\n+    {\n+        if (type instanceof TimestampType && ((TimestampType) type).getPrecision() == TimestampType.DEFAULT_PRECISION) {\n+            return StandardTypes.TIMESTAMP;\n+        }\n+        if (type instanceof TimestampWithTimeZoneType && ((TimestampWithTimeZoneType) type).getPrecision() == TimestampWithTimeZoneType.DEFAULT_PRECISION) {\n+            return StandardTypes.TIMESTAMP_WITH_TIME_ZONE;\n         }\n+        if (type instanceof ArrayType) {\n+            return ARRAY + \"(\" + getDisplayLabelForLegacyClients(((ArrayType) type).getElementType()) + \")\";\n+        }\n+        if (type instanceof MapType) {\n+            return MAP + \"(\" + getDisplayLabelForLegacyClients(((MapType) type).getKeyType()) + \", \" + getDisplayLabelForLegacyClients(((MapType) type).getValueType()) + \")\";\n+        }\n+        if (type instanceof RowType) {\n+            return getRowDisplayLabelForLegacyClients((RowType) type);\n+        }\n+\n         return type.getDisplayName();\n     }\n+\n+    private static String getRowDisplayLabelForLegacyClients(RowType type)\n+    {\n+        List<String> fields = type.getFields().stream()\n+                .map(field -> {\n+                    String typeDisplayName = getDisplayLabelForLegacyClients(field.getType());\n+                    if (field.getName().isPresent()) {\n+                        return field.getName().get() + ' ' + typeDisplayName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 76}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMjgzMTUw", "url": "https://github.com/trinodb/trino/pull/4475#pullrequestreview-450283150", "createdAt": "2020-07-16T23:32:26Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMzozMjoyN1rOGzAQ0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMzozNTo1OVrOGzAU7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEzNDg2Nw==", "bodyText": "This can be simplified to:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        List<Object> values = (List<Object>) value;\n          \n          \n            \n                        ImmutableList.Builder<Object> result = ImmutableList.builder();\n          \n          \n            \n            \n          \n          \n            \n                        for (int i = 0; i < values.size(); i++) {\n          \n          \n            \n                            result.add(getLegacyValue(values.get(i), elementType));\n          \n          \n            \n                        }\n          \n          \n            \n            \n          \n          \n            \n                        return result.build();\n          \n          \n            \n                        return ((List<Object>) value).stream()\n          \n          \n            \n                                .map(element -> getLegacyValue(value, elementType))\n          \n          \n            \n                                .collect(toImmutableList());", "url": "https://github.com/trinodb/trino/pull/4475#discussion_r456134867", "createdAt": "2020-07-16T23:32:27Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -184,6 +185,80 @@ else if (type instanceof TimestampWithTimeZoneType) {\n         return Optional.of(unmodifiableList(row));\n     }\n \n+    private Object getLegacyValue(Object value, Type type)\n+    {\n+        if (value == null) {\n+            return null;\n+        }\n+\n+        if (!supportsParametricDateTime) {\n+            // for legacy clients we need to round timestamp and timestamp with timezone to default precision (3)\n+\n+            if (type instanceof TimestampType) {\n+                return ((SqlTimestamp) value).roundTo(3);\n+            }\n+\n+            if (type instanceof TimestampWithTimeZoneType) {\n+                return ((SqlTimestampWithTimeZone) value).roundTo(3);\n+            }\n+        }\n+\n+        if (type instanceof ArrayType) {\n+            Type elementType = ((ArrayType) type).getElementType();\n+\n+            if (!(elementType instanceof TimestampType || elementType instanceof TimestampWithTimeZoneType)) {\n+                return value;\n+            }\n+\n+            List<Object> values = (List<Object>) value;\n+            ImmutableList.Builder<Object> result = ImmutableList.builder();\n+\n+            for (int i = 0; i < values.size(); i++) {\n+                result.add(getLegacyValue(values.get(i), elementType));\n+            }\n+\n+            return result.build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEzNTM5Mw==", "bodyText": "This can be simplified to:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        ImmutableMap.Builder<Object, Object> result = ImmutableMap.builder();\n          \n          \n            \n                        values.entrySet().forEach(entry -> result.put(getLegacyValue(entry.getKey(), keyType), getLegacyValue(entry.getValue(), valueType)));\n          \n          \n            \n                        return result.build();\n          \n          \n            \n                        return ((Map<Object, Object>) value).entrySet().stream()\n          \n          \n            \n                                .collect(toImmutableMap(entry -> getLegacyValue(entry.getKey(), keyType), entry -> getLegacyValue(entry.getValue(), valueType)));", "url": "https://github.com/trinodb/trino/pull/4475#discussion_r456135393", "createdAt": "2020-07-16T23:34:19Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -184,6 +185,80 @@ else if (type instanceof TimestampWithTimeZoneType) {\n         return Optional.of(unmodifiableList(row));\n     }\n \n+    private Object getLegacyValue(Object value, Type type)\n+    {\n+        if (value == null) {\n+            return null;\n+        }\n+\n+        if (!supportsParametricDateTime) {\n+            // for legacy clients we need to round timestamp and timestamp with timezone to default precision (3)\n+\n+            if (type instanceof TimestampType) {\n+                return ((SqlTimestamp) value).roundTo(3);\n+            }\n+\n+            if (type instanceof TimestampWithTimeZoneType) {\n+                return ((SqlTimestampWithTimeZone) value).roundTo(3);\n+            }\n+        }\n+\n+        if (type instanceof ArrayType) {\n+            Type elementType = ((ArrayType) type).getElementType();\n+\n+            if (!(elementType instanceof TimestampType || elementType instanceof TimestampWithTimeZoneType)) {\n+                return value;\n+            }\n+\n+            List<Object> values = (List<Object>) value;\n+            ImmutableList.Builder<Object> result = ImmutableList.builder();\n+\n+            for (int i = 0; i < values.size(); i++) {\n+                result.add(getLegacyValue(values.get(i), elementType));\n+            }\n+\n+            return result.build();\n+        }\n+\n+        if (type instanceof MapType) {\n+            Map<Object, Object> values = (Map<Object, Object>) value;\n+\n+            Type keyType = ((MapType) type).getKeyType();\n+            Type valueType = ((MapType) type).getValueType();\n+\n+            ImmutableMap.Builder<Object, Object> result = ImmutableMap.builder();\n+            values.entrySet().forEach(entry -> result.put(getLegacyValue(entry.getKey(), keyType), getLegacyValue(entry.getValue(), valueType)));\n+            return result.build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEzNTkxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            ImmutableMap.Builder<String, Object> result = ImmutableMap.builder();\n          \n          \n            \n                            fields.forEach(field -> result.put(field.getName().orElseThrow(), getLegacyValue(values.get(field.getName()), field.getType())));\n          \n          \n            \n                            return result.build();\n          \n          \n            \n                            return fields.stream()\n          \n          \n            \n                                    .collect(toImmutableMap(field -> field.getName().orElseThrow(), field -> getLegacyValue(values.get(field.getName()), field.getType()));", "url": "https://github.com/trinodb/trino/pull/4475#discussion_r456135918", "createdAt": "2020-07-16T23:35:59Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -184,6 +185,80 @@ else if (type instanceof TimestampWithTimeZoneType) {\n         return Optional.of(unmodifiableList(row));\n     }\n \n+    private Object getLegacyValue(Object value, Type type)\n+    {\n+        if (value == null) {\n+            return null;\n+        }\n+\n+        if (!supportsParametricDateTime) {\n+            // for legacy clients we need to round timestamp and timestamp with timezone to default precision (3)\n+\n+            if (type instanceof TimestampType) {\n+                return ((SqlTimestamp) value).roundTo(3);\n+            }\n+\n+            if (type instanceof TimestampWithTimeZoneType) {\n+                return ((SqlTimestampWithTimeZone) value).roundTo(3);\n+            }\n+        }\n+\n+        if (type instanceof ArrayType) {\n+            Type elementType = ((ArrayType) type).getElementType();\n+\n+            if (!(elementType instanceof TimestampType || elementType instanceof TimestampWithTimeZoneType)) {\n+                return value;\n+            }\n+\n+            List<Object> values = (List<Object>) value;\n+            ImmutableList.Builder<Object> result = ImmutableList.builder();\n+\n+            for (int i = 0; i < values.size(); i++) {\n+                result.add(getLegacyValue(values.get(i), elementType));\n+            }\n+\n+            return result.build();\n+        }\n+\n+        if (type instanceof MapType) {\n+            Map<Object, Object> values = (Map<Object, Object>) value;\n+\n+            Type keyType = ((MapType) type).getKeyType();\n+            Type valueType = ((MapType) type).getValueType();\n+\n+            ImmutableMap.Builder<Object, Object> result = ImmutableMap.builder();\n+            values.entrySet().forEach(entry -> result.put(getLegacyValue(entry.getKey(), keyType), getLegacyValue(entry.getValue(), valueType)));\n+            return result.build();\n+        }\n+\n+        if (type instanceof RowType) {\n+            List<RowType.Field> fields = ((RowType) type).getFields();\n+\n+            if (value instanceof Map) {\n+                Map<String, Object> values = (Map<String, Object>) value;\n+\n+                ImmutableMap.Builder<String, Object> result = ImmutableMap.builder();\n+                fields.forEach(field -> result.put(field.getName().orElseThrow(), getLegacyValue(values.get(field.getName()), field.getType())));\n+                return result.build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 106}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1483b0c85189d46f0bf16b909918ab33f3fb62fe", "author": {"user": {"login": "wendigo", "name": "Mateusz \"Serafin\" Gajewski"}}, "url": "https://github.com/trinodb/trino/commit/1483b0c85189d46f0bf16b909918ab33f3fb62fe", "committedDate": "2020-07-16T23:41:52Z", "message": "Fix nested parametric timestamp compatibility with older clients"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "1483b0c85189d46f0bf16b909918ab33f3fb62fe", "author": {"user": {"login": "wendigo", "name": "Mateusz \"Serafin\" Gajewski"}}, "url": "https://github.com/trinodb/trino/commit/1483b0c85189d46f0bf16b909918ab33f3fb62fe", "committedDate": "2020-07-16T23:41:52Z", "message": "Fix nested parametric timestamp compatibility with older clients"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4740, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}