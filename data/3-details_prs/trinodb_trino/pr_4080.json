{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NTM0MzA1", "number": 4080, "title": "Support the SQL TRANSLATE function", "bodyText": "#3313\nThis implementation follows the specification used by Postgres; see the documentation section of this commit.", "createdAt": "2020-06-18T15:00:14Z", "url": "https://github.com/trinodb/trino/pull/4080", "merged": true, "mergeCommit": {"oid": "f4170ac50b88409d24a9c1387e3f4fff4b110860"}, "closed": true, "closedAt": "2020-06-23T23:55:52Z", "author": {"login": "djsstarburst"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsh-VPAFqTQzMzUwMTcyOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuN3e7ABqjM0NzUxNTAzNjk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTAxNzI4", "url": "https://github.com/trinodb/trino/pull/4080#pullrequestreview-433501728", "createdAt": "2020-06-18T17:31:49Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzozMTo0OVrOGl5Y8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzozMzoyOVrOGl5clw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5MDc2OA==", "bodyText": "This could use checkCondition from Failures. We can also rephrase the error message a bit:\ncheckCondition(originalsCodePoints.length == translationsLength, INVALID_FUNCTION_ARGUMENT, \"Translate originals and translations must be the same length\");", "url": "https://github.com/trinodb/trino/pull/4080#discussion_r442390768", "createdAt": "2020-06-18T17:31:49Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/StringFunctions.java", "diffHunk": "@@ -911,4 +913,42 @@ public static boolean startsWith(@SqlType(\"varchar(x)\") Slice source, @SqlType(\"\n         }\n         return source.compareTo(0, prefix.length(), prefix, 0, prefix.length()) == 0;\n     }\n+\n+    @Description(\"Translate characters from the source string based on original and translations strings\")\n+    @ScalarFunction\n+    @LiteralParameters({\"x\", \"y\", \"z\"})\n+    @SqlType(StandardTypes.VARCHAR)\n+    public static Slice translate(@SqlType(\"varchar(x)\") Slice source, @SqlType(\"varchar(y)\") Slice originals, @SqlType(\"varchar(z)\") Slice translations)\n+    {\n+        int[] translationsCodePoints = castToCodePoints(translations);\n+        int translationsLength = translationsCodePoints.length;\n+        int[] originalsCodePoints = castToCodePoints(originals);\n+        if (originalsCodePoints.length != translationsLength) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5MTE3Ng==", "bodyText": "I think this can simplify to\nint translatedCodePoint = map.getOrDefault(codePoint, codePoint);", "url": "https://github.com/trinodb/trino/pull/4080#discussion_r442391176", "createdAt": "2020-06-18T17:32:37Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/StringFunctions.java", "diffHunk": "@@ -911,4 +913,42 @@ public static boolean startsWith(@SqlType(\"varchar(x)\") Slice source, @SqlType(\"\n         }\n         return source.compareTo(0, prefix.length(), prefix, 0, prefix.length()) == 0;\n     }\n+\n+    @Description(\"Translate characters from the source string based on original and translations strings\")\n+    @ScalarFunction\n+    @LiteralParameters({\"x\", \"y\", \"z\"})\n+    @SqlType(StandardTypes.VARCHAR)\n+    public static Slice translate(@SqlType(\"varchar(x)\") Slice source, @SqlType(\"varchar(y)\") Slice originals, @SqlType(\"varchar(z)\") Slice translations)\n+    {\n+        int[] translationsCodePoints = castToCodePoints(translations);\n+        int translationsLength = translationsCodePoints.length;\n+        int[] originalsCodePoints = castToCodePoints(originals);\n+        if (originalsCodePoints.length != translationsLength) {\n+            throw new PrestoException(INVALID_FUNCTION_ARGUMENT, \"The length of the translate originals is not equal to the length of the translations\");\n+        }\n+\n+        Int2IntOpenHashMap map = new Int2IntOpenHashMap(translationsLength);\n+        for (int index = 0; index < translationsLength; index++) {\n+            map.put(originalsCodePoints[index], translationsCodePoints[index]);\n+        }\n+        int[] sourceCodePoints = castToCodePoints(source);\n+        int sourceLength = sourceCodePoints.length;\n+        int[] targetCodePoints = new int[sourceLength];\n+        int targetLength = 0;\n+        for (int index = 0; index < sourceLength; index++) {\n+            int codePoint = sourceCodePoints[index];\n+            int value = map.getOrDefault(codePoint, -1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5MTcwMw==", "bodyText": "Does this not work? This seems like a good test case to have, either working or as an explicitly disallowed input.", "url": "https://github.com/trinodb/trino/pull/4080#discussion_r442391703", "createdAt": "2020-06-18T17:33:29Z", "author": {"login": "electrum"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestStringFunctions.java", "diffHunk": "@@ -1046,4 +1046,27 @@ public void testCharConcat()\n \n         assertFunction(\"concat(cast(null as char(1)), cast(' ' as char(1)))\", createCharType(2), null);\n     }\n+\n+    @Test\n+    public void testTranslate()\n+    {\n+        //assertFunction(\"translate('abcd', '', '')\", VARCHAR, \"abcd\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MTg2NjE3", "url": "https://github.com/trinodb/trino/pull/4080#pullrequestreview-436186617", "createdAt": "2020-06-23T21:55:25Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MTg4Mjc4", "url": "https://github.com/trinodb/trino/pull/4080#pullrequestreview-436188278", "createdAt": "2020-06-23T21:58:44Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMTo1ODo0NFrOGn8G0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMjoxMjozNlrOGn8bEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUzMjQzMw==", "bodyText": "Please write these as full select queries that can be copy/pasted by the user:\nSELECT translate('abcd', '', ''); -- 'abcd'\nSo add SELECT and semicolon.", "url": "https://github.com/trinodb/trino/pull/4080#discussion_r444532433", "createdAt": "2020-06-23T21:58:44Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/functions/string.rst", "diffHunk": "@@ -168,6 +168,28 @@ String Functions\n     position ``start``. Positions start with ``1``. A negative starting\n     position is interpreted as being relative to the end of the string.\n \n+.. function:: translate(source, from, to) -> varchar\n+\n+   Returns the ``source`` string translated by replacing characters found in the\n+   ``from`` string with the corresponding characters in the ``to`` string.  If the ``from``\n+   string contains duplicates, only the first is used.  If the ``source`` character\n+   does not exist in the ``from`` string, the ``source`` character will be copied\n+   without translation.  If the index of the matching character in the ``from``\n+   string is beyond the length of the ``to`` string, the ``source`` character will\n+   be omitted from the resulting string.\n+\n+   Here are some examples illustrating the translate function::\n+\n+       translate('abcd', '', '') -- 'abcd'", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUzNzYxNg==", "bodyText": "This \\u is actually a Java escape and not valid in SQL (it works in the test because it's translated by the Java compiler, so it's effectively a literal character in the SQL)\nWe can write this using the SQL U& syntax as documented here: https://prestosql.io/docs/current/language/types.html#string\nFor the output, we can paste the literal in directly.\nSELECT translate('abcd', 'b', U&'\\+01F600'); -- a\ud83d\ude00cd", "url": "https://github.com/trinodb/trino/pull/4080#discussion_r444537616", "createdAt": "2020-06-23T22:12:36Z", "author": {"login": "electrum"}, "path": "presto-docs/src/main/sphinx/functions/string.rst", "diffHunk": "@@ -168,6 +168,28 @@ String Functions\n     position ``start``. Positions start with ``1``. A negative starting\n     position is interpreted as being relative to the end of the string.\n \n+.. function:: translate(source, from, to) -> varchar\n+\n+   Returns the ``source`` string translated by replacing characters found in the\n+   ``from`` string with the corresponding characters in the ``to`` string.  If the ``from``\n+   string contains duplicates, only the first is used.  If the ``source`` character\n+   does not exist in the ``from`` string, the ``source`` character will be copied\n+   without translation.  If the index of the matching character in the ``from``\n+   string is beyond the length of the ``to`` string, the ``source`` character will\n+   be omitted from the resulting string.\n+\n+   Here are some examples illustrating the translate function::\n+\n+       translate('abcd', '', '') -- 'abcd'\n+       translate('abcd', 'a', 'z') -- 'zbcd'\n+       translate('abcda', 'a', 'z') -- 'zbcdz'\n+       translate('Palho\u00e7a', '\u00e7','c') -- 'Palhoca'\n+       translate('abcd', 'b', '\\uD840\\uDC00') -- 'a\\uD840\\uDC00cd'", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdc4f061639129cf3168a4abffc9f8798851401b", "author": {"user": {"login": "djsstarburst", "name": "David Stryker"}}, "url": "https://github.com/trinodb/trino/commit/bdc4f061639129cf3168a4abffc9f8798851401b", "committedDate": "2020-06-23T23:15:43Z", "message": "Support the SQL TRANSLATE function\n\nThis implementation follows the specification used by Postgres;\nsee the documentation section of this commit, which also includes\nillustrative examples."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "bdc4f061639129cf3168a4abffc9f8798851401b", "author": {"user": {"login": "djsstarburst", "name": "David Stryker"}}, "url": "https://github.com/trinodb/trino/commit/bdc4f061639129cf3168a4abffc9f8798851401b", "committedDate": "2020-06-23T23:15:43Z", "message": "Support the SQL TRANSLATE function\n\nThis implementation follows the specification used by Postgres;\nsee the documentation section of this commit, which also includes\nillustrative examples."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 432, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}