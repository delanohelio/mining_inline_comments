{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4NTIwODM1", "number": 5661, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwNDowNjo0OVrOExnnfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwNDoyNTowNFrOExnrrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNDY0NzY1OnYy", "diffSide": "LEFT", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwNDowNjo0OVrOHn2LQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODoyMDozOVrOHocq3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU0NDEyOA==", "bodyText": "is the check removed because it is too obvious? I think it might be still good to keep it as a \"checkState\" from the method's perspective, thoughts?", "url": "https://github.com/trinodb/trino/pull/5661#discussion_r511544128", "createdAt": "2020-10-25T04:06:49Z", "author": {"login": "phd3"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -2214,9 +2213,22 @@ private Scope computeAndAssignOutputScope(QuerySpecification node, Optional<Scop\n \n             for (SelectItem item : node.getSelect().getSelectItems()) {\n                 if (item instanceof AllColumns) {\n-                    List<Field> itemOutputFields = analysis.getSelectAllResultFields((AllColumns) item);\n-                    checkNotNull(itemOutputFields, \"output fields is null for select item %s\", item);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE3NDgxMg==", "bodyText": "No, that was unintentional.", "url": "https://github.com/trinodb/trino/pull/5661#discussion_r512174812", "createdAt": "2020-10-26T18:20:39Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -2214,9 +2213,22 @@ private Scope computeAndAssignOutputScope(QuerySpecification node, Optional<Scop\n \n             for (SelectItem item : node.getSelect().getSelectItems()) {\n                 if (item instanceof AllColumns) {\n-                    List<Field> itemOutputFields = analysis.getSelectAllResultFields((AllColumns) item);\n-                    checkNotNull(itemOutputFields, \"output fields is null for select item %s\", item);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU0NDEyOA=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNDY1ODIyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwNDoyNDo0M1rOHn2P6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwNDoyNDo0M1rOHn2P6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU0NTMyMg==", "bodyText": "would it make sense to make CanonicalizationAware#canonicalize public so that definition of canonicalization remains in one place?", "url": "https://github.com/trinodb/trino/pull/5661#discussion_r511545322", "createdAt": "2020-10-25T04:24:43Z", "author": {"login": "phd3"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -2259,6 +2271,14 @@ else if (expression instanceof DereferenceExpression) {\n             return createAndAssignScope(node, scope, outputFields.build());\n         }\n \n+        private String canonicalize(Identifier identifier)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNDY1ODM3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwNDoyNTowNFrOHn2P-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODoyOTozN1rOHodARw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU0NTMzOQ==", "bodyText": "why do we need to standardize aliases here if getAliases(Select node)  returns CanonicalizationAware  objects anyway?", "url": "https://github.com/trinodb/trino/pull/5661#discussion_r511545339", "createdAt": "2020-10-25T04:25:04Z", "author": {"login": "phd3"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -2214,9 +2213,22 @@ private Scope computeAndAssignOutputScope(QuerySpecification node, Optional<Scop\n \n             for (SelectItem item : node.getSelect().getSelectItems()) {\n                 if (item instanceof AllColumns) {\n-                    List<Field> itemOutputFields = analysis.getSelectAllResultFields((AllColumns) item);\n-                    checkNotNull(itemOutputFields, \"output fields is null for select item %s\", item);\n-                    outputFields.addAll(itemOutputFields);\n+                    AllColumns allColumns = (AllColumns) item;\n+\n+                    List<Field> fields = analysis.getSelectAllResultFields(allColumns);\n+                    for (int i = 0; i < fields.size(); i++) {\n+                        Field field = fields.get(i);\n+\n+                        Optional<String> name;\n+                        if (!allColumns.getAliases().isEmpty()) {\n+                            name = Optional.of(canonicalize(allColumns.getAliases().get(i)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE4MDI5NQ==", "bodyText": "Here we need to extract a name (String) from the AST Identifier to assign to the resulting output field. The values returned by getAliases are used for matching purposes. I agree that it looks a bit awkward, but making things more coherent requires a bigger refactor than what this PR is trying to fix.", "url": "https://github.com/trinodb/trino/pull/5661#discussion_r512180295", "createdAt": "2020-10-26T18:29:37Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -2214,9 +2213,22 @@ private Scope computeAndAssignOutputScope(QuerySpecification node, Optional<Scop\n \n             for (SelectItem item : node.getSelect().getSelectItems()) {\n                 if (item instanceof AllColumns) {\n-                    List<Field> itemOutputFields = analysis.getSelectAllResultFields((AllColumns) item);\n-                    checkNotNull(itemOutputFields, \"output fields is null for select item %s\", item);\n-                    outputFields.addAll(itemOutputFields);\n+                    AllColumns allColumns = (AllColumns) item;\n+\n+                    List<Field> fields = analysis.getSelectAllResultFields(allColumns);\n+                    for (int i = 0; i < fields.size(); i++) {\n+                        Field field = fields.get(i);\n+\n+                        Optional<String> name;\n+                        if (!allColumns.getAliases().isEmpty()) {\n+                            name = Optional.of(canonicalize(allColumns.getAliases().get(i)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU0NTMzOQ=="}, "originalCommit": null, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4507, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}