{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyMTMyMDgx", "number": 6374, "title": "Ignore failures translating hive views while listing views", "bodyText": "Fix #6370", "createdAt": "2020-12-17T21:19:02Z", "url": "https://github.com/trinodb/trino/pull/6374", "merged": true, "mergeCommit": {"oid": "12df7f133ff6a681a00a664cebbfc5cbb631d73c"}, "closed": true, "closedAt": "2021-03-03T01:55:10Z", "author": {"login": "phd3"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdnKUP9gBqjQxMjcwODg2NjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd_RioygBqjQzOTc2NzI0NjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1MDczMzEz", "url": "https://github.com/trinodb/trino/pull/6374#pullrequestreview-555073313", "createdAt": "2020-12-17T23:37:57Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzozNzo1N1rOIINOeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzozNzo1N1rOIINOeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ3NjIxNw==", "bodyText": "What's the implication of not adding failing views to the view map? What would happen if one of these views was referenced in a query?", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r545476217", "createdAt": "2020-12-17T23:37:57Z", "author": {"login": "JamesRTaylor"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1917,6 +1918,26 @@ public boolean supportsMetadataDelete(ConnectorSession session, ConnectorTableHa\n         return handle.getTableParameters().isEmpty() || !isFullAcidTable(handle.getTableParameters().get());\n     }\n \n+    @Override\n+    public Map<SchemaTableName, ConnectorViewDefinition> getViews(ConnectorSession session, Optional<String> schemaName)\n+    {\n+        ImmutableMap.Builder<SchemaTableName, ConnectorViewDefinition> views = ImmutableMap.builder();\n+        for (SchemaTableName name : listViews(session, schemaName)) {\n+            try {\n+                getView(session, name).ifPresent(view -> views.put(name, view));\n+            }\n+            catch (PrestoException e) {\n+                if (e.getErrorCode().equals(HIVE_VIEW_TRANSLATION_ERROR.toErrorCode())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1MDc0NDE4", "url": "https://github.com/trinodb/trino/pull/6374#pullrequestreview-555074418", "createdAt": "2020-12-17T23:40:48Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzo0MDo0OFrOIINSdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzo0MDo0OFrOIINSdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ3NzIzOQ==", "bodyText": "Based on your comment, are you leaning toward not committing this test because you're worried about future versions of Coral supporting these functions? Perhaps you can instead use a construct that you think may never be supported by Coral? I like the idea of keeping the test if it's possible. FWIW, there are often times that tests need to be removed as functionality evolves.", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r545477239", "createdAt": "2020-12-17T23:40:48Z", "author": {"login": "JamesRTaylor"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViews.java", "diffHunk": "@@ -231,6 +233,32 @@ public void testHiveViewInInformationSchema()\n                 .contains(row(\"n_nationkey\", \"bigint\", \"\", \"\"));\n     }\n \n+    @Test(groups = HIVE_VIEWS)\n+    public void testFailingHiveViewsForInformationSchema()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1ODY5NzUx", "url": "https://github.com/trinodb/trino/pull/6374#pullrequestreview-555869751", "createdAt": "2020-12-18T23:03:08Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMzowMzowOFrOII1brw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMzowMzowOFrOII1brw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEzNDk1OQ==", "bodyText": "Can we have a test for reading information_schema.views when one of the views cannot be translated?\n(in fact, we could perhaps define a totally bogus view for that -- would that be possible?)\nAlso, can we have a test for reading information_schema.columns without and with filter?\nThis is where the ConnectorMetadata.getViews seems to be also used.", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r546134959", "createdAt": "2020-12-18T23:03:08Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1917,6 +1918,26 @@ public boolean supportsMetadataDelete(ConnectorSession session, ConnectorTableHa\n         return handle.getTableParameters().isEmpty() || !isFullAcidTable(handle.getTableParameters().get());\n     }\n \n+    @Override\n+    public Map<SchemaTableName, ConnectorViewDefinition> getViews(ConnectorSession session, Optional<String> schemaName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3Mzc1NTA3", "url": "https://github.com/trinodb/trino/pull/6374#pullrequestreview-557375507", "createdAt": "2020-12-22T21:25:16Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMToyNToxNlrOIKJoFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMToyNzo0NVrOIKJroA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxNDM4OA==", "bodyText": "Maybe add a bit more explanation:\n// Skip older versions since they don't support \"getTableNamesByType\" in ThriftHiveMetastore#getAllViews\n// and so information_schema.views does not include translated Hive views properly\n\nBTW, it still worthwhile to run the test with older Hive versions, just the assertions would be different -- to document current behavior & prevent regressions.\nHow would it look like if you used getHiveVersionMajor() on per-assertion basis?\nkind of like https://github.com/prestosql/presto/blob/3c5b5b053affa6cf093e7f4cbca0bb26d9bfb380/presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTableStatistics.java#L129-L131", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r547514388", "createdAt": "2020-12-22T21:25:16Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViews.java", "diffHunk": "@@ -231,6 +233,45 @@ public void testHiveViewInInformationSchema()\n                 .contains(row(\"n_nationkey\", \"bigint\", \"\", \"\"));\n     }\n \n+    @Test(groups = HIVE_VIEWS)\n+    public void testFailingHiveViewsForInformationSchema()\n+    {\n+        if (getHiveVersionMajor() < 3) {\n+            // Skip older versions since they don't support \"getTableNamesByType\" in ThriftHiveMetastore#getAllViews\n+            throw new SkipException(\"Only test the behavior for hive 3\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxNTAzOQ==", "bodyText": "DISTINCT table_name -> table_name, column_name\nso that we test also what is returned for these views", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r547515039", "createdAt": "2020-12-22T21:26:54Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViews.java", "diffHunk": "@@ -231,6 +233,45 @@ public void testHiveViewInInformationSchema()\n                 .contains(row(\"n_nationkey\", \"bigint\", \"\", \"\"));\n     }\n \n+    @Test(groups = HIVE_VIEWS)\n+    public void testFailingHiveViewsForInformationSchema()\n+    {\n+        if (getHiveVersionMajor() < 3) {\n+            // Skip older versions since they don't support \"getTableNamesByType\" in ThriftHiveMetastore#getAllViews\n+            throw new SkipException(\"Only test the behavior for hive 3\");\n+        }\n+\n+        onHive().executeQuery(\"DROP SCHEMA IF EXISTS test_list_failing_views CASCADE\");\n+        onHive().executeQuery(\"CREATE SCHEMA test_list_failing_views\");\n+        onHive().executeQuery(\"CREATE VIEW test_list_failing_views.correct_view AS SELECT * FROM nation limit 5\");\n+\n+        // Create a view for which the translation is guaranteed to fail\n+        onPresto().executeQuery(\"CREATE TABLE test_list_failing_views.table_dropped (col0 BIGINT)\");\n+        onHive().executeQuery(\"CREATE VIEW test_list_failing_views.failing_view AS SELECT * FROM test_list_failing_views.table_dropped\");\n+        onPresto().executeQuery(\"DROP TABLE test_list_failing_views.table_dropped\");\n+\n+        assertThat(query(\"SELECT table_name FROM information_schema.views WHERE table_schema = 'test_list_failing_views'\"))\n+                .containsOnly(row(\"correct_view\"));\n+\n+        assertThat(query(\"SELECT table_name FROM information_schema.views\"))\n+                .contains(row(\"correct_view\"));\n+\n+        assertThat(query(\"SELECT table_name FROM information_schema.views WHERE table_schema = 'test_list_failing_views' and table_name = 'correct_view'\"))\n+                .containsOnly(row(\"correct_view\"));\n+\n+        // Listing fails when metadata for the problematic view is queried specifically\n+        assertThatThrownBy(() -> query(\"SELECT table_name FROM information_schema.views WHERE table_schema = 'test_list_failing_views' and table_name = 'failing_view'\"))\n+                .hasMessageContaining(\"Failed to translate Hive view 'test_list_failing_views.failing_view'\");\n+\n+        // Queries on information_schema.columns also trigger ConnectorMetadata#getViews. Columns from failing_view are\n+        // listed too since HiveMetadata#listTableColumns does not ignore views.\n+        assertThat(query(\"SELECT DISTINCT table_name FROM information_schema.columns WHERE table_schema = 'test_list_failing_views'\"))\n+                .containsOnly(row(\"correct_view\"), row(\"failing_view\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxNTI5Ng==", "bodyText": "Why does it fail? In the unfiltered information_schema.columns query we were OK to use information available in metastore, without translating the view. Why are we not doing this here?", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r547515296", "createdAt": "2020-12-22T21:27:45Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViews.java", "diffHunk": "@@ -231,6 +233,45 @@ public void testHiveViewInInformationSchema()\n                 .contains(row(\"n_nationkey\", \"bigint\", \"\", \"\"));\n     }\n \n+    @Test(groups = HIVE_VIEWS)\n+    public void testFailingHiveViewsForInformationSchema()\n+    {\n+        if (getHiveVersionMajor() < 3) {\n+            // Skip older versions since they don't support \"getTableNamesByType\" in ThriftHiveMetastore#getAllViews\n+            throw new SkipException(\"Only test the behavior for hive 3\");\n+        }\n+\n+        onHive().executeQuery(\"DROP SCHEMA IF EXISTS test_list_failing_views CASCADE\");\n+        onHive().executeQuery(\"CREATE SCHEMA test_list_failing_views\");\n+        onHive().executeQuery(\"CREATE VIEW test_list_failing_views.correct_view AS SELECT * FROM nation limit 5\");\n+\n+        // Create a view for which the translation is guaranteed to fail\n+        onPresto().executeQuery(\"CREATE TABLE test_list_failing_views.table_dropped (col0 BIGINT)\");\n+        onHive().executeQuery(\"CREATE VIEW test_list_failing_views.failing_view AS SELECT * FROM test_list_failing_views.table_dropped\");\n+        onPresto().executeQuery(\"DROP TABLE test_list_failing_views.table_dropped\");\n+\n+        assertThat(query(\"SELECT table_name FROM information_schema.views WHERE table_schema = 'test_list_failing_views'\"))\n+                .containsOnly(row(\"correct_view\"));\n+\n+        assertThat(query(\"SELECT table_name FROM information_schema.views\"))\n+                .contains(row(\"correct_view\"));\n+\n+        assertThat(query(\"SELECT table_name FROM information_schema.views WHERE table_schema = 'test_list_failing_views' and table_name = 'correct_view'\"))\n+                .containsOnly(row(\"correct_view\"));\n+\n+        // Listing fails when metadata for the problematic view is queried specifically\n+        assertThatThrownBy(() -> query(\"SELECT table_name FROM information_schema.views WHERE table_schema = 'test_list_failing_views' and table_name = 'failing_view'\"))\n+                .hasMessageContaining(\"Failed to translate Hive view 'test_list_failing_views.failing_view'\");\n+\n+        // Queries on information_schema.columns also trigger ConnectorMetadata#getViews. Columns from failing_view are\n+        // listed too since HiveMetadata#listTableColumns does not ignore views.\n+        assertThat(query(\"SELECT DISTINCT table_name FROM information_schema.columns WHERE table_schema = 'test_list_failing_views'\"))\n+                .containsOnly(row(\"correct_view\"), row(\"failing_view\"));\n+\n+        assertThatThrownBy(() -> query(\"SELECT * FROM information_schema.columns WHERE table_schema = 'test_list_failing_views' AND table_name = 'failing_view'\"))\n+                .hasMessageContaining(\"Failed to translate Hive view 'test_list_failing_views.failing_view'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 56}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "9f8b4bd8b3016e451241754e305f35048c65018e", "author": {"user": {"login": "phd3", "name": "Pratham"}}, "url": "https://github.com/trinodb/trino/commit/9f8b4bd8b3016e451241754e305f35048c65018e", "committedDate": "2021-01-04T20:42:31Z", "message": "Rename assertion methods in TestHiveViews"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9f8b4bd8b3016e451241754e305f35048c65018e", "author": {"user": {"login": "phd3", "name": "Pratham"}}, "url": "https://github.com/trinodb/trino/commit/9f8b4bd8b3016e451241754e305f35048c65018e", "committedDate": "2021-01-04T20:42:31Z", "message": "Rename assertion methods in TestHiveViews"}, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkzMTk1Mjcw", "url": "https://github.com/trinodb/trino/pull/6374#pullrequestreview-593195270", "createdAt": "2021-02-18T13:11:44Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOFQxMzoxMTo0NFrOInnAsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOFQxMzoxODo0NlrOInnS6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODQwNDUzMA==", "bodyText": "We should also ignore TableNotFoundException (race condition)", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r578404530", "createdAt": "2021-02-18T13:11:44Z", "author": {"login": "findepi"}, "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -2006,6 +2007,26 @@ public boolean supportsMetadataDelete(ConnectorSession session, ConnectorTableHa\n         return handle.getTableParameters().isEmpty() || !isFullAcidTable(handle.getTableParameters().get());\n     }\n \n+    @Override\n+    public Map<SchemaTableName, ConnectorViewDefinition> getViews(ConnectorSession session, Optional<String> schemaName)\n+    {\n+        ImmutableMap.Builder<SchemaTableName, ConnectorViewDefinition> views = ImmutableMap.builder();\n+        for (SchemaTableName name : listViews(session, schemaName)) {\n+            try {\n+                getView(session, name).ifPresent(view -> views.put(name, view));\n+            }\n+            catch (TrinoException e) {\n+                if (e.getErrorCode().equals(HIVE_VIEW_TRANSLATION_ERROR.toErrorCode())) {\n+                    // Ignore hive views for which translation fails", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODQwNTM1OA==", "bodyText": "Make sure it's clear we're talking about Trino's information_schema, not the one in HMS", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r578405358", "createdAt": "2021-02-18T13:13:08Z", "author": {"login": "findepi"}, "path": "testing/trino-product-tests/src/main/java/io/trino/tests/hive/TestHiveViews.java", "diffHunk": "@@ -13,5 +13,71 @@\n  */\n package io.trino.tests.hive;\n \n+import io.trino.tempto.Requires;\n+import io.trino.tempto.assertions.QueryAssert;\n+import io.trino.tempto.fulfillment.table.hive.tpch.ImmutableTpchTablesRequirements;\n+import org.testng.annotations.Test;\n+\n+import static io.trino.tempto.assertions.QueryAssert.Row.row;\n+import static io.trino.tempto.assertions.QueryAssert.assertThat;\n+import static io.trino.tempto.query.QueryExecutor.query;\n+import static io.trino.tests.TestGroups.HIVE_VIEWS;\n+import static io.trino.tests.utils.QueryExecutors.onHive;\n+import static io.trino.tests.utils.QueryExecutors.onPresto;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@Requires({\n+        ImmutableTpchTablesRequirements.ImmutableNationTable.class,\n+        ImmutableTpchTablesRequirements.ImmutableOrdersTable.class,\n+})\n public class TestHiveViews\n-        extends AbstractTestHiveViews {}\n+        extends AbstractTestHiveViews\n+{\n+    @Test(groups = HIVE_VIEWS)\n+    public void testFailingHiveViewsForInformationSchema()\n+    {\n+        // The expected behavior is different across hive versions. For hive 3, the call \"getTableNamesByType\" is\n+        // used in ThriftHiveMetastore#getAllViews. For older versions, the fallback to doGetTablesWithParameter\n+        // is used, so information_schema.views does not include translated Hive views.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODQwNjI0MA==", "bodyText": "I very much dislike annotation-based requirements, because they make working with tests harder.\nAnyway TestHiveViewsLegacy already uses this, so please keep it.\nimport the inner classes", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r578406240", "createdAt": "2021-02-18T13:14:29Z", "author": {"login": "findepi"}, "path": "testing/trino-product-tests/src/main/java/io/trino/tests/hive/TestHiveViews.java", "diffHunk": "@@ -13,5 +13,71 @@\n  */\n package io.trino.tests.hive;\n \n+import io.trino.tempto.Requires;\n+import io.trino.tempto.assertions.QueryAssert;\n+import io.trino.tempto.fulfillment.table.hive.tpch.ImmutableTpchTablesRequirements;\n+import org.testng.annotations.Test;\n+\n+import static io.trino.tempto.assertions.QueryAssert.Row.row;\n+import static io.trino.tempto.assertions.QueryAssert.assertThat;\n+import static io.trino.tempto.query.QueryExecutor.query;\n+import static io.trino.tests.TestGroups.HIVE_VIEWS;\n+import static io.trino.tests.utils.QueryExecutors.onHive;\n+import static io.trino.tests.utils.QueryExecutors.onPresto;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@Requires({\n+        ImmutableTpchTablesRequirements.ImmutableNationTable.class,\n+        ImmutableTpchTablesRequirements.ImmutableOrdersTable.class,\n+})", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODQwNzI3Nw==", "bodyText": "assertThatThrownBy should be followed with the actual assertion.", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r578407277", "createdAt": "2021-02-18T13:15:56Z", "author": {"login": "findepi"}, "path": "testing/trino-product-tests/src/main/java/io/trino/tests/hive/TestHiveViews.java", "diffHunk": "@@ -13,5 +13,71 @@\n  */\n package io.trino.tests.hive;\n \n+import io.trino.tempto.Requires;\n+import io.trino.tempto.assertions.QueryAssert;\n+import io.trino.tempto.fulfillment.table.hive.tpch.ImmutableTpchTablesRequirements;\n+import org.testng.annotations.Test;\n+\n+import static io.trino.tempto.assertions.QueryAssert.Row.row;\n+import static io.trino.tempto.assertions.QueryAssert.assertThat;\n+import static io.trino.tempto.query.QueryExecutor.query;\n+import static io.trino.tests.TestGroups.HIVE_VIEWS;\n+import static io.trino.tests.utils.QueryExecutors.onHive;\n+import static io.trino.tests.utils.QueryExecutors.onPresto;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@Requires({\n+        ImmutableTpchTablesRequirements.ImmutableNationTable.class,\n+        ImmutableTpchTablesRequirements.ImmutableOrdersTable.class,\n+})\n public class TestHiveViews\n-        extends AbstractTestHiveViews {}\n+        extends AbstractTestHiveViews\n+{\n+    @Test(groups = HIVE_VIEWS)\n+    public void testFailingHiveViewsForInformationSchema()\n+    {\n+        // The expected behavior is different across hive versions. For hive 3, the call \"getTableNamesByType\" is\n+        // used in ThriftHiveMetastore#getAllViews. For older versions, the fallback to doGetTablesWithParameter\n+        // is used, so information_schema.views does not include translated Hive views.\n+\n+        onHive().executeQuery(\"DROP SCHEMA IF EXISTS test_list_failing_views CASCADE\");\n+        onHive().executeQuery(\"CREATE SCHEMA test_list_failing_views\");\n+        onHive().executeQuery(\"CREATE VIEW test_list_failing_views.correct_view AS SELECT * FROM nation limit 5\");\n+\n+        // Create a view for which the translation is guaranteed to fail\n+        onPresto().executeQuery(\"CREATE TABLE test_list_failing_views.table_dropped (col0 BIGINT)\");\n+        onHive().executeQuery(\"CREATE VIEW test_list_failing_views.failing_view AS SELECT * FROM test_list_failing_views.table_dropped\");\n+        onPresto().executeQuery(\"DROP TABLE test_list_failing_views.table_dropped\");\n+\n+        runQueryWithAssertion(\n+                \"SELECT table_name FROM information_schema.views WHERE table_schema = 'test_list_failing_views'\",\n+                getHiveVersionMajor() == 3\n+                        ? queryAssert -> queryAssert.containsOnly(row(\"correct_view\"))\n+                        : QueryAssert::hasNoRows);\n+\n+        runQueryWithAssertion(\"SELECT table_name FROM information_schema.views\",\n+                getHiveVersionMajor() == 3\n+                        ? queryAssert -> queryAssert.contains(row(\"correct_view\"))\n+                        : queryAssert -> assertThatThrownBy(() -> queryAssert.contains(row(\"correct_view\"))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODQwODM2NA==", "bodyText": "Why this does not depend on the hive version? please add a comment", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r578408364", "createdAt": "2021-02-18T13:17:34Z", "author": {"login": "findepi"}, "path": "testing/trino-product-tests/src/main/java/io/trino/tests/hive/TestHiveViews.java", "diffHunk": "@@ -13,5 +13,71 @@\n  */\n package io.trino.tests.hive;\n \n+import io.trino.tempto.Requires;\n+import io.trino.tempto.assertions.QueryAssert;\n+import io.trino.tempto.fulfillment.table.hive.tpch.ImmutableTpchTablesRequirements;\n+import org.testng.annotations.Test;\n+\n+import static io.trino.tempto.assertions.QueryAssert.Row.row;\n+import static io.trino.tempto.assertions.QueryAssert.assertThat;\n+import static io.trino.tempto.query.QueryExecutor.query;\n+import static io.trino.tests.TestGroups.HIVE_VIEWS;\n+import static io.trino.tests.utils.QueryExecutors.onHive;\n+import static io.trino.tests.utils.QueryExecutors.onPresto;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@Requires({\n+        ImmutableTpchTablesRequirements.ImmutableNationTable.class,\n+        ImmutableTpchTablesRequirements.ImmutableOrdersTable.class,\n+})\n public class TestHiveViews\n-        extends AbstractTestHiveViews {}\n+        extends AbstractTestHiveViews\n+{\n+    @Test(groups = HIVE_VIEWS)\n+    public void testFailingHiveViewsForInformationSchema()\n+    {\n+        // The expected behavior is different across hive versions. For hive 3, the call \"getTableNamesByType\" is\n+        // used in ThriftHiveMetastore#getAllViews. For older versions, the fallback to doGetTablesWithParameter\n+        // is used, so information_schema.views does not include translated Hive views.\n+\n+        onHive().executeQuery(\"DROP SCHEMA IF EXISTS test_list_failing_views CASCADE\");\n+        onHive().executeQuery(\"CREATE SCHEMA test_list_failing_views\");\n+        onHive().executeQuery(\"CREATE VIEW test_list_failing_views.correct_view AS SELECT * FROM nation limit 5\");\n+\n+        // Create a view for which the translation is guaranteed to fail\n+        onPresto().executeQuery(\"CREATE TABLE test_list_failing_views.table_dropped (col0 BIGINT)\");\n+        onHive().executeQuery(\"CREATE VIEW test_list_failing_views.failing_view AS SELECT * FROM test_list_failing_views.table_dropped\");\n+        onPresto().executeQuery(\"DROP TABLE test_list_failing_views.table_dropped\");\n+\n+        runQueryWithAssertion(\n+                \"SELECT table_name FROM information_schema.views WHERE table_schema = 'test_list_failing_views'\",\n+                getHiveVersionMajor() == 3\n+                        ? queryAssert -> queryAssert.containsOnly(row(\"correct_view\"))\n+                        : QueryAssert::hasNoRows);\n+\n+        runQueryWithAssertion(\"SELECT table_name FROM information_schema.views\",\n+                getHiveVersionMajor() == 3\n+                        ? queryAssert -> queryAssert.contains(row(\"correct_view\"))\n+                        : queryAssert -> assertThatThrownBy(() -> queryAssert.contains(row(\"correct_view\"))));\n+\n+        assertThat(query(\"SELECT table_name FROM information_schema.views WHERE table_schema = 'test_list_failing_views' and table_name = 'correct_view'\"))\n+                .containsOnly(row(\"correct_view\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODQwOTE5NA==", "bodyText": "Let's use \"Trino\" here even though the body has onPresto.\nLess work later.", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r578409194", "createdAt": "2021-02-18T13:18:46Z", "author": {"login": "findepi"}, "path": "testing/trino-product-tests/src/main/java/io/trino/tests/hive/AbstractTestHiveViews.java", "diffHunk": "@@ -359,14 +359,14 @@ public void testCurrentUser()\n         assertThat(connectToPresto(\"alice@presto\").executeQuery(testQuery)).containsOnly(row(\"alice\"));\n     }\n \n-    protected static void assertViewQuery(String query, Consumer<QueryAssert> assertion)\n+    protected static void assertOnHiveAndPresto(String query, Consumer<QueryAssert> assertion)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkzNjgxNTE2", "url": "https://github.com/trinodb/trino/pull/6374#pullrequestreview-593681516", "createdAt": "2021-02-18T22:00:01Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAxNTQ0NjM4", "url": "https://github.com/trinodb/trino/pull/6374#pullrequestreview-601544638", "createdAt": "2021-03-02T08:26:55Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b19aa8aefc47f3c42a4c9f81b58e111468ec016", "author": {"user": {"login": "phd3", "name": "Pratham"}}, "url": "https://github.com/trinodb/trino/commit/0b19aa8aefc47f3c42a4c9f81b58e111468ec016", "committedDate": "2021-03-02T19:20:25Z", "message": "Ignore failures translating hive views while listing views"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "0b19aa8aefc47f3c42a4c9f81b58e111468ec016", "author": {"user": {"login": "phd3", "name": "Pratham"}}, "url": "https://github.com/trinodb/trino/commit/0b19aa8aefc47f3c42a4c9f81b58e111468ec016", "committedDate": "2021-03-02T19:20:25Z", "message": "Ignore failures translating hive views while listing views"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1864, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}