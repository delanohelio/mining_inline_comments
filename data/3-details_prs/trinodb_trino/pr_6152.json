{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5NTI3NDk3", "number": 6152, "title": "Test TIMESTAMP WITH TIME ZONE calendar compatibility", "bodyText": "", "createdAt": "2020-11-30T12:48:43Z", "url": "https://github.com/trinodb/trino/pull/6152", "merged": true, "mergeCommit": {"oid": "a36ddb1a78ec2ee5f11050dca311a7b0e78520a3"}, "closed": true, "closedAt": "2020-12-04T12:27:48Z", "author": {"login": "findepi"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdhlACiABqjQwNTE4MjY2OTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdi242pABqjQwNzI0Njk0NTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMTk2MDM4", "url": "https://github.com/trinodb/trino/pull/6152#pullrequestreview-542196038", "createdAt": "2020-12-01T18:47:43Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODo0Nzo0M1rOH868kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODo0ODozNVrOH86-fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY0MjM4NQ==", "bodyText": "I think splitting expressions into 2 arguments (prestoExpression, referenceExpressions) would make this more intuitive.", "url": "https://github.com/trinodb/trino/pull/6152#discussion_r533642385", "createdAt": "2020-12-01T18:47:43Z", "author": {"login": "aalbu"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcResultSetTimezone.java", "diffHunk": "@@ -248,15 +249,23 @@ private void assertParameter(Object expectedValue, Optional<String> sessionTimez\n     private void checkRepresentation(String expression, JDBCType type, Optional<String> sessionTimezoneId, ResultAssertion assertion)\n             throws Exception\n     {\n+        checkRepresentation(nCopies(referenceDrivers.size() + 1, expression), type, sessionTimezoneId, assertion);\n+    }\n+\n+    private void checkRepresentation(List<String> expressions, JDBCType type, Optional<String> sessionTimezoneId, ResultAssertion assertion)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY0Mjg3OA==", "bodyText": "Nit: Wrong expression list size?", "url": "https://github.com/trinodb/trino/pull/6152#discussion_r533642878", "createdAt": "2020-12-01T18:48:35Z", "author": {"login": "aalbu"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcResultSetTimezone.java", "diffHunk": "@@ -248,15 +249,23 @@ private void assertParameter(Object expectedValue, Optional<String> sessionTimez\n     private void checkRepresentation(String expression, JDBCType type, Optional<String> sessionTimezoneId, ResultAssertion assertion)\n             throws Exception\n     {\n+        checkRepresentation(nCopies(referenceDrivers.size() + 1, expression), type, sessionTimezoneId, assertion);\n+    }\n+\n+    private void checkRepresentation(List<String> expressions, JDBCType type, Optional<String> sessionTimezoneId, ResultAssertion assertion)\n+            throws Exception\n+    {\n+        verify(expressions.size() == referenceDrivers.size() + 1, \"Wrong expressions list\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NzYwMDUy", "url": "https://github.com/trinodb/trino/pull/6152#pullrequestreview-544760052", "createdAt": "2020-12-04T08:50:53Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODo1MDo1M1rOH_Gxyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODo1MDo1M1rOH_Gxyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkzMzM4Ng==", "bodyText": "I do not find comment here usefult given two lines above.", "url": "https://github.com/trinodb/trino/pull/6152#discussion_r535933386", "createdAt": "2020-12-04T08:50:53Z", "author": {"login": "losipiuk"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -492,7 +493,9 @@ public void testTimestampWithTimeZone()\n     {\n         try (ConnectedStatement connectedStatement = newStatement()) {\n             checkRepresentation(connectedStatement.getStatement(), \"TIMESTAMP '2018-02-13 13:14:15.227 Europe/Warsaw'\", Types.TIMESTAMP /* TODO TIMESTAMP_WITH_TIMEZONE */, (rs, column) -> {\n-                assertEquals(rs.getObject(column), Timestamp.valueOf(LocalDateTime.of(2018, 2, 13, 6, 14, 15, 227_000_000))); // TODO this should represent TIMESTAMP '2018-02-13 13:14:15.227 Europe/Warsaw'\n+                ZonedDateTime zonedDateTime = ZonedDateTime.of(2018, 2, 13, 13, 14, 15, 227_000_000, ZoneId.of(\"Europe/Warsaw\"));\n+                Timestamp timestampForPointInTime = Timestamp.from(zonedDateTime.toInstant());\n+                assertEquals(rs.getObject(column), timestampForPointInTime); // TODO this should represent TIMESTAMP '2018-02-13 13:14:15.227 Europe/Warsaw'", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NzYxMDgx", "url": "https://github.com/trinodb/trino/pull/6152#pullrequestreview-544761081", "createdAt": "2020-12-04T08:52:20Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODo1MjoyMVrOH_G1oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODo1MjoyMVrOH_G1oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkzNDM2OQ==", "bodyText": "ditto here and below.", "url": "https://github.com/trinodb/trino/pull/6152#discussion_r535934369", "createdAt": "2020-12-04T08:52:21Z", "author": {"login": "losipiuk"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -501,52 +504,61 @@ public void testTimestampWithTimeZone()\n                         .hasMessage(serverSupportsVariablePrecisionTimestampWithTimeZone()\n                                 ? \"Expected column to be a time type but is timestamp with time zone(3)\" // TODO (https://github.com/prestosql/presto/issues/5317) placement of precision parameter\n                                 : \"Expected column to be a time type but is timestamp with time zone\");\n-                assertEquals(rs.getTimestamp(column), Timestamp.valueOf(LocalDateTime.of(2018, 2, 13, 6, 14, 15, 227_000_000))); // TODO this should fail, or represent TIMESTAMP '2018-02-13 13:14:15.227'\n+                assertEquals(rs.getTimestamp(column), timestampForPointInTime);\n             });\n \n             // second fraction in nanoseconds overflowing to next second, minute, hour, day, month, year\n             if (serverSupportsVariablePrecisionTimestampWithTimeZone()) {\n                 checkRepresentation(connectedStatement.getStatement(), \"TIMESTAMP '2019-12-31 23:59:59.999999999999 Europe/Warsaw'\", Types.TIMESTAMP /* TODO TIMESTAMP_WITH_TIMEZONE */, (rs, column) -> {\n-                    assertEquals(rs.getObject(column), Timestamp.valueOf(LocalDateTime.of(2019, 12, 31, 17, 0, 0, 0)));  // TODO this should represent TIMESTAMP TIMESTAMP '2019-12-31 23:59:59.999999999999 Europe/Warsaw'\n+                    ZonedDateTime zonedDateTime = ZonedDateTime.of(2020, 1, 1, 0, 0, 0, 0, ZoneId.of(\"Europe/Warsaw\"));\n+                    Timestamp timestampForPointInTime = Timestamp.from(zonedDateTime.toInstant());\n+                    assertEquals(rs.getObject(column), timestampForPointInTime);  // TODO this should represent TIMESTAMP TIMESTAMP '2019-12-31 23:59:59.999999999999 Europe/Warsaw'", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NzY1NjI1", "url": "https://github.com/trinodb/trino/pull/6152#pullrequestreview-544765625", "createdAt": "2020-12-04T08:58:03Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODo1ODowM1rOH_HFHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODo1ODowM1rOH_HFHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkzODMzNQ==", "bodyText": "Why comment here references Europe/Warsaw", "url": "https://github.com/trinodb/trino/pull/6152#discussion_r535938335", "createdAt": "2020-12-04T08:58:03Z", "author": {"login": "losipiuk"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -501,52 +504,61 @@ public void testTimestampWithTimeZone()\n                         .hasMessage(serverSupportsVariablePrecisionTimestampWithTimeZone()\n                                 ? \"Expected column to be a time type but is timestamp with time zone(3)\" // TODO (https://github.com/prestosql/presto/issues/5317) placement of precision parameter\n                                 : \"Expected column to be a time type but is timestamp with time zone\");\n-                assertEquals(rs.getTimestamp(column), Timestamp.valueOf(LocalDateTime.of(2018, 2, 13, 6, 14, 15, 227_000_000))); // TODO this should fail, or represent TIMESTAMP '2018-02-13 13:14:15.227'\n+                assertEquals(rs.getTimestamp(column), timestampForPointInTime);\n             });\n \n             // second fraction in nanoseconds overflowing to next second, minute, hour, day, month, year\n             if (serverSupportsVariablePrecisionTimestampWithTimeZone()) {\n                 checkRepresentation(connectedStatement.getStatement(), \"TIMESTAMP '2019-12-31 23:59:59.999999999999 Europe/Warsaw'\", Types.TIMESTAMP /* TODO TIMESTAMP_WITH_TIMEZONE */, (rs, column) -> {\n-                    assertEquals(rs.getObject(column), Timestamp.valueOf(LocalDateTime.of(2019, 12, 31, 17, 0, 0, 0)));  // TODO this should represent TIMESTAMP TIMESTAMP '2019-12-31 23:59:59.999999999999 Europe/Warsaw'\n+                    ZonedDateTime zonedDateTime = ZonedDateTime.of(2020, 1, 1, 0, 0, 0, 0, ZoneId.of(\"Europe/Warsaw\"));\n+                    Timestamp timestampForPointInTime = Timestamp.from(zonedDateTime.toInstant());\n+                    assertEquals(rs.getObject(column), timestampForPointInTime);  // TODO this should represent TIMESTAMP TIMESTAMP '2019-12-31 23:59:59.999999999999 Europe/Warsaw'\n                     assertThatThrownBy(() -> rs.getDate(column))\n                             .isInstanceOf(SQLException.class)\n                             .hasMessage(\"Expected value to be a date but is: 2019-12-31 23:59:59.999999999999 Europe/Warsaw\");\n                     assertThatThrownBy(() -> rs.getTime(column))\n                             .isInstanceOf(IllegalArgumentException.class) // TODO (https://github.com/prestosql/presto/issues/5315) SQLException\n                             .hasMessage(\"Expected column to be a time type but is timestamp with time zone(12)\"); // TODO (https://github.com/prestosql/presto/issues/5317) placement of precision parameter\n-                    assertEquals(rs.getTimestamp(column), Timestamp.valueOf(LocalDateTime.of(2019, 12, 31, 17, 0, 0, 0)));\n+                    assertEquals(rs.getTimestamp(column), timestampForPointInTime);\n                 });\n \n+                ZoneId jvmZone = ZoneId.systemDefault();\n                 checkRepresentation(\n                         connectedStatement.getStatement(),\n-                        format(\"TIMESTAMP '2019-12-31 23:59:59.999999999999 %s'\", ZoneId.systemDefault().getId()),\n+                        format(\"TIMESTAMP '2019-12-31 23:59:59.999999999999 %s'\", jvmZone.getId()),\n                         Types.TIMESTAMP /* TODO TIMESTAMP_WITH_TIMEZONE */,\n                         (rs, column) -> {\n-                            assertEquals(rs.getObject(column), Timestamp.valueOf(LocalDateTime.of(2020, 1, 1, 0, 0, 0, 0)));  // TODO this should represent TIMESTAMP TIMESTAMP '2019-12-31 23:59:59.999999999999 Europe/Warsaw'\n+                            ZonedDateTime zonedDateTime = ZonedDateTime.of(2020, 1, 1, 0, 0, 0, 0, jvmZone);\n+                            Timestamp timestampForPointInTime = Timestamp.from(zonedDateTime.toInstant());\n+                            assertEquals(rs.getObject(column), timestampForPointInTime);  // TODO this should represent TIMESTAMP TIMESTAMP '2019-12-31 23:59:59.999999999999 Europe/Warsaw'", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NzczODAz", "url": "https://github.com/trinodb/trino/pull/6152#pullrequestreview-544773803", "createdAt": "2020-12-04T09:09:03Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOTowOTowM1rOH_He8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOTowOTowM1rOH_He8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk0NDk0Ng==", "bodyText": "Why not TIMESTAMP_WITH_TIMEZONE? Todo?", "url": "https://github.com/trinodb/trino/pull/6152#discussion_r535944946", "createdAt": "2020-12-04T09:09:03Z", "author": {"login": "losipiuk"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcResultSetTimezone.java", "diffHunk": "@@ -172,6 +175,75 @@ public void testTimestamp(Optional<String> sessionTimezoneId)\n         });\n     }\n \n+    @Test(dataProvider = \"timeZoneIds\")\n+    public void testTimestampWithTimeZone(Optional<String> sessionTimezoneId)\n+            throws Exception\n+    {\n+        checkRepresentation(\n+                \"TIMESTAMP '1970-01-01 00:00:00.000 +00:00'\", // Presto\n+                ImmutableList.of(\n+                        \"TIMESTAMP WITH TIME ZONE '1970-01-01 00:00:00.000 +00:00'\", // PostgreSQL\n+                        \"from_tz(TIMESTAMP '1970-01-01 00:00:00.000', '+00:00')\"), // Oracle\n+                TIMESTAMP,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0Nzc0ODU5", "url": "https://github.com/trinodb/trino/pull/6152#pullrequestreview-544774859", "createdAt": "2020-12-04T09:10:27Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0ODk1NzIw", "url": "https://github.com/trinodb/trino/pull/6152#pullrequestreview-544895720", "createdAt": "2020-12-04T11:56:30Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMTo1NjozMVrOH_Nuew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMTo1NjozMVrOH_Nuew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA0NzIyNw==", "bodyText": "With this there is another question. Should it still work with TIMESTAMP passed here. If so, should we have test coverage?", "url": "https://github.com/trinodb/trino/pull/6152#discussion_r536047227", "createdAt": "2020-12-04T11:56:31Z", "author": {"login": "losipiuk"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcResultSetTimezone.java", "diffHunk": "@@ -184,7 +185,7 @@ public void testTimestampWithTimeZone(Optional<String> sessionTimezoneId)\n                 ImmutableList.of(\n                         \"TIMESTAMP WITH TIME ZONE '1970-01-01 00:00:00.000 +00:00'\", // PostgreSQL\n                         \"from_tz(TIMESTAMP '1970-01-01 00:00:00.000', '+00:00')\"), // Oracle\n-                TIMESTAMP,\n+                TIMESTAMP_WITH_TIMEZONE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0ODk2Mjg1", "url": "https://github.com/trinodb/trino/pull/6152#pullrequestreview-544896285", "createdAt": "2020-12-04T11:57:21Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2200b68117a35503df00a7885b93085301839d7", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/f2200b68117a35503df00a7885b93085301839d7", "committedDate": "2020-12-04T12:27:29Z", "message": "Rephrase TIMESTAMP TZ ResultSet tests in point-in-time semantics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7ee3314eb748cd12d8070d3ff1fd0f1caea6c89", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/a7ee3314eb748cd12d8070d3ff1fd0f1caea6c89", "committedDate": "2020-12-04T12:27:29Z", "message": "Fix formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4daa57c47bdce16456f2b17c876ecbf069cabff8", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/4daa57c47bdce16456f2b17c876ecbf069cabff8", "committedDate": "2020-12-04T12:27:29Z", "message": "Prepare tested data once"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2f8a75123932c19ea33c00aeff1b550728314f7", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/e2f8a75123932c19ea33c00aeff1b550728314f7", "committedDate": "2020-12-04T12:27:29Z", "message": "Improve error reporting when one of test cases fails"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ca182922087e05446a77d3e9f099d3fbbf88cfc", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/7ca182922087e05446a77d3e9f099d3fbbf88cfc", "committedDate": "2020-12-04T12:27:29Z", "message": "Test with implicit session zone in TestJdbcResultSetTimezone too"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f169d188b8c9b58aa87f1b35f555f7175feaf96", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/2f169d188b8c9b58aa87f1b35f555f7175feaf96", "committedDate": "2020-12-04T12:27:29Z", "message": "Allow different literals for compared databases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f20acbc51b568d81fdab8b22689fd7cefb914b67", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/f20acbc51b568d81fdab8b22689fd7cefb914b67", "committedDate": "2020-12-04T12:27:29Z", "message": "Test TIMESTAMP WITH TIME ZONE calendar compatibility"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d60366fff919556151087a9fe0d32063a9188dc", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/6d60366fff919556151087a9fe0d32063a9188dc", "committedDate": "2020-12-04T12:27:29Z", "message": "Declare support by default in test reference driver\n\nThis ensures reference driver is used by default, unless it opts out."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "6d60366fff919556151087a9fe0d32063a9188dc", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/6d60366fff919556151087a9fe0d32063a9188dc", "committedDate": "2020-12-04T12:27:29Z", "message": "Declare support by default in test reference driver\n\nThis ensures reference driver is used by default, unless it opts out."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2445, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}