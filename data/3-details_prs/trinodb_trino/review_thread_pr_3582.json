{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNzQyMDE2", "number": 3582, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjo1MjowOVrOD3tvuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzo0Njo0M1rOEJCXTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzQ3NzY4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HivePageSourceProvider.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjo1MjowOVrOGOH_qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNzozMzoxN1rOGPEAAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NDIzNA==", "bodyText": "Do we need some escaping of / or = here?", "url": "https://github.com/trinodb/trino/pull/3582#discussion_r417464234", "createdAt": "2020-04-29T16:52:09Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HivePageSourceProvider.java", "diffHunk": "@@ -384,9 +385,12 @@ public int getIndex()\n                     }\n                 }\n                 else {\n+                    String partitionKeyValues = String.join(\"/\", partitionKeys.stream()\n+                            .map(partitionKey -> format(\"%s=%s\", partitionKey.getName(), partitionKey.getValue()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NjEzNw==", "bodyText": "Also wouln't MAP be a better type here instead of VARCHAR?", "url": "https://github.com/trinodb/trino/pull/3582#discussion_r417466137", "createdAt": "2020-04-29T16:54:52Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HivePageSourceProvider.java", "diffHunk": "@@ -384,9 +385,12 @@ public int getIndex()\n                     }\n                 }\n                 else {\n+                    String partitionKeyValues = String.join(\"/\", partitionKeys.stream()\n+                            .map(partitionKey -> format(\"%s=%s\", partitionKey.getName(), partitionKey.getValue()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NDIzNA=="}, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY5OTkzMw==", "bodyText": "I think escaping or encoding is needed. Let me update it.\nExactly, MAP type is also a candidate for this column.\n@martint Do you have any opinion?", "url": "https://github.com/trinodb/trino/pull/3582#discussion_r417699933", "createdAt": "2020-04-30T01:08:17Z", "author": {"login": "ebyhr"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HivePageSourceProvider.java", "diffHunk": "@@ -384,9 +385,12 @@ public int getIndex()\n                     }\n                 }\n                 else {\n+                    String partitionKeyValues = String.join(\"/\", partitionKeys.stream()\n+                            .map(partitionKey -> format(\"%s=%s\", partitionKey.getName(), partitionKey.getValue()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NDIzNA=="}, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0MjI0OQ==", "bodyText": "there might be also be :-escaping and canonicalization of representation.\nbut, since we know partition name before hand, why dont we just pass it here, instead of reconsructing?\ndid you consider this approach?\ncc @electrum", "url": "https://github.com/trinodb/trino/pull/3582#discussion_r418342249", "createdAt": "2020-04-30T23:20:03Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HivePageSourceProvider.java", "diffHunk": "@@ -384,9 +385,12 @@ public int getIndex()\n                     }\n                 }\n                 else {\n+                    String partitionKeyValues = String.join(\"/\", partitionKeys.stream()\n+                            .map(partitionKey -> format(\"%s=%s\", partitionKey.getName(), partitionKey.getValue()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NDIzNA=="}, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ0NzM2MA==", "bodyText": "Replaced with partitionName provided by Hive split.\nWe may still need to add manual escaping in tests.", "url": "https://github.com/trinodb/trino/pull/3582#discussion_r418447360", "createdAt": "2020-05-01T07:33:17Z", "author": {"login": "ebyhr"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HivePageSourceProvider.java", "diffHunk": "@@ -384,9 +385,12 @@ public int getIndex()\n                     }\n                 }\n                 else {\n+                    String partitionKeyValues = String.join(\"/\", partitionKeys.stream()\n+                            .map(partitionKey -> format(\"%s=%s\", partitionKey.getName(), partitionKey.getValue()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NDIzNA=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTA5Mzk5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzo0MDoyM1rOGpW5ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzo0MDoyM1rOGpW5ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyMDAwMw==", "bodyText": "nit: drop this assertion", "url": "https://github.com/trinodb/trino/pull/3582#discussion_r446020003", "createdAt": "2020-06-26T07:40:23Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -3820,6 +3821,53 @@ public void testFileModifiedTimeHiddenColumn()\n         assertUpdate(\"DROP TABLE test_file_modified_time\");\n     }\n \n+    @Test\n+    public void testPartitionHiddenColumn()\n+    {\n+        @Language(\"SQL\") String createTable = \"CREATE TABLE test_partition_hidden_column \" +\n+                \"WITH (\" +\n+                \"partitioned_by = ARRAY['col1', 'col2']\" +\n+                \") AS \" +\n+                \"SELECT * FROM (VALUES \" +\n+                \"(0, 11, 21), (1, 12, 22), (2, 13, 23), \" +\n+                \"(3, 14, 24), (4, 15, 25), (5, 16, 26), \" +\n+                \"(6, 17, 27), (7, 18, 28), (8, 19, 29)\" +\n+                \" ) t (col0, col1, col2) \";\n+        assertUpdate(createTable, 9);\n+        assertTrue(getQueryRunner().tableExists(getSession(), \"test_partition_hidden_column\"));\n+\n+        TableMetadata tableMetadata = getTableMetadata(catalog, TPCH_SCHEMA, \"test_partition_hidden_column\");\n+        assertEquals(tableMetadata.getMetadata().getProperties().get(PARTITIONED_BY_PROPERTY), ImmutableList.of(\"col1\", \"col2\"));\n+\n+        List<String> columnNames = ImmutableList.of(\"col0\", \"col1\", \"col2\", PATH_COLUMN_NAME, FILE_SIZE_COLUMN_NAME, FILE_MODIFIED_TIME_COLUMN_NAME, PARTITION_COLUMN_NAME);\n+        List<ColumnMetadata> columnMetadatas = tableMetadata.getColumns();\n+        assertEquals(columnMetadatas.size(), columnNames.size());\n+        for (int i = 0; i < columnMetadatas.size(); i++) {\n+            ColumnMetadata columnMetadata = columnMetadatas.get(i);\n+            assertEquals(columnMetadata.getName(), columnNames.get(i));\n+            if (columnMetadata.getName().equals(PARTITION_COLUMN_NAME)) {\n+                // $partition should be hidden column\n+                assertTrue(columnMetadata.isHidden());\n+            }\n+        }\n+        assertEquals(getPartitions(\"test_partition_hidden_column\").size(), 9);\n+\n+        MaterializedResult results = computeActual(format(\"SELECT *, \\\"%s\\\" FROM test_partition_hidden_column\", PARTITION_COLUMN_NAME));\n+        for (int i = 0; i < results.getRowCount(); i++) {\n+            MaterializedRow row = results.getMaterializedRows().get(i);\n+            int col1 = (int) row.getField(1);\n+            int col2 = (int) row.getField(2);\n+            String actual = (String) row.getField(3);\n+            String expected = format(\"col1=%s/col2=%s\", col1, col2);\n+\n+            assertEquals(actual, expected);\n+        }\n+        assertEquals(results.getRowCount(), 9);\n+\n+        assertUpdate(\"DROP TABLE test_partition_hidden_column\");\n+        assertFalse(getQueryRunner().tableExists(getSession(), \"test_partition_hidden_column\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTExMTUyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzo0NjowMVrOGpXD-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzo0NjowMVrOGpXD-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyMjY0OQ==", "bodyText": "You can drop index from loop. IMO this looks a bit cleaner:\n        for (MaterializedRow row : results.getMaterializedRows()) {\n            String actualPartition = (String) row.getField(3);\n            String expectedPartition = format(\"col1=%s/col2=%s\", row.getField(1), row.getField(2));\n            assertEquals(actualPartition, expectedPartition);\n        }", "url": "https://github.com/trinodb/trino/pull/3582#discussion_r446022649", "createdAt": "2020-06-26T07:46:01Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -3820,6 +3821,53 @@ public void testFileModifiedTimeHiddenColumn()\n         assertUpdate(\"DROP TABLE test_file_modified_time\");\n     }\n \n+    @Test\n+    public void testPartitionHiddenColumn()\n+    {\n+        @Language(\"SQL\") String createTable = \"CREATE TABLE test_partition_hidden_column \" +\n+                \"WITH (\" +\n+                \"partitioned_by = ARRAY['col1', 'col2']\" +\n+                \") AS \" +\n+                \"SELECT * FROM (VALUES \" +\n+                \"(0, 11, 21), (1, 12, 22), (2, 13, 23), \" +\n+                \"(3, 14, 24), (4, 15, 25), (5, 16, 26), \" +\n+                \"(6, 17, 27), (7, 18, 28), (8, 19, 29)\" +\n+                \" ) t (col0, col1, col2) \";\n+        assertUpdate(createTable, 9);\n+        assertTrue(getQueryRunner().tableExists(getSession(), \"test_partition_hidden_column\"));\n+\n+        TableMetadata tableMetadata = getTableMetadata(catalog, TPCH_SCHEMA, \"test_partition_hidden_column\");\n+        assertEquals(tableMetadata.getMetadata().getProperties().get(PARTITIONED_BY_PROPERTY), ImmutableList.of(\"col1\", \"col2\"));\n+\n+        List<String> columnNames = ImmutableList.of(\"col0\", \"col1\", \"col2\", PATH_COLUMN_NAME, FILE_SIZE_COLUMN_NAME, FILE_MODIFIED_TIME_COLUMN_NAME, PARTITION_COLUMN_NAME);\n+        List<ColumnMetadata> columnMetadatas = tableMetadata.getColumns();\n+        assertEquals(columnMetadatas.size(), columnNames.size());\n+        for (int i = 0; i < columnMetadatas.size(); i++) {\n+            ColumnMetadata columnMetadata = columnMetadatas.get(i);\n+            assertEquals(columnMetadata.getName(), columnNames.get(i));\n+            if (columnMetadata.getName().equals(PARTITION_COLUMN_NAME)) {\n+                // $partition should be hidden column\n+                assertTrue(columnMetadata.isHidden());\n+            }\n+        }\n+        assertEquals(getPartitions(\"test_partition_hidden_column\").size(), 9);\n+\n+        MaterializedResult results = computeActual(format(\"SELECT *, \\\"%s\\\" FROM test_partition_hidden_column\", PARTITION_COLUMN_NAME));\n+        for (int i = 0; i < results.getRowCount(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTExMzcyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzo0Njo0M1rOGpXFSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzo0Njo0M1rOGpXFSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyMjk4Ng==", "bodyText": "drop comment", "url": "https://github.com/trinodb/trino/pull/3582#discussion_r446022986", "createdAt": "2020-06-26T07:46:43Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -3820,6 +3821,53 @@ public void testFileModifiedTimeHiddenColumn()\n         assertUpdate(\"DROP TABLE test_file_modified_time\");\n     }\n \n+    @Test\n+    public void testPartitionHiddenColumn()\n+    {\n+        @Language(\"SQL\") String createTable = \"CREATE TABLE test_partition_hidden_column \" +\n+                \"WITH (\" +\n+                \"partitioned_by = ARRAY['col1', 'col2']\" +\n+                \") AS \" +\n+                \"SELECT * FROM (VALUES \" +\n+                \"(0, 11, 21), (1, 12, 22), (2, 13, 23), \" +\n+                \"(3, 14, 24), (4, 15, 25), (5, 16, 26), \" +\n+                \"(6, 17, 27), (7, 18, 28), (8, 19, 29)\" +\n+                \" ) t (col0, col1, col2) \";\n+        assertUpdate(createTable, 9);\n+        assertTrue(getQueryRunner().tableExists(getSession(), \"test_partition_hidden_column\"));\n+\n+        TableMetadata tableMetadata = getTableMetadata(catalog, TPCH_SCHEMA, \"test_partition_hidden_column\");\n+        assertEquals(tableMetadata.getMetadata().getProperties().get(PARTITIONED_BY_PROPERTY), ImmutableList.of(\"col1\", \"col2\"));\n+\n+        List<String> columnNames = ImmutableList.of(\"col0\", \"col1\", \"col2\", PATH_COLUMN_NAME, FILE_SIZE_COLUMN_NAME, FILE_MODIFIED_TIME_COLUMN_NAME, PARTITION_COLUMN_NAME);\n+        List<ColumnMetadata> columnMetadatas = tableMetadata.getColumns();\n+        assertEquals(columnMetadatas.size(), columnNames.size());\n+        for (int i = 0; i < columnMetadatas.size(); i++) {\n+            ColumnMetadata columnMetadata = columnMetadatas.get(i);\n+            assertEquals(columnMetadata.getName(), columnNames.get(i));\n+            if (columnMetadata.getName().equals(PARTITION_COLUMN_NAME)) {\n+                // $partition should be hidden column", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4975, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}