{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3OTM1ODQ5", "number": 4609, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODozNDoyOVrOETJyMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODozNDoyOVrOETJyMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTE4NzA0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODozNDoyOVrOG4uWFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODozNDoyOVrOG4uWFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEzMjc1OQ==", "bodyText": "static import scopeAwareKey?", "url": "https://github.com/trinodb/trino/pull/4609#discussion_r462132759", "createdAt": "2020-07-29T08:34:29Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -379,14 +379,15 @@ private GroupingSetsPlan planGroupingSets(PlanBuilder subPlan, QuerySpecificatio\n             groupingSetMappings.put(output, input);\n         }\n \n-        ImmutableMap.Builder<Expression, Symbol> expressionsBuilder = ImmutableMap.builder();\n+        Map<ScopeAware<Expression>, Symbol> complexExpressions = new HashMap<>();\n         for (Expression expression : groupingSetAnalysis.getComplexExpressions()) {\n-            Symbol input = subPlan.translate(expression);\n-            Symbol output = symbolAllocator.newSymbol(expression, analysis.getType(expression), \"gid\");\n-            expressionsBuilder.put(expression, output);\n-            groupingSetMappings.put(output, input);\n+            if (!complexExpressions.containsKey(scopeAwareKey(expression, analysis, subPlan.getScope()))) {\n+                Symbol input = subPlan.translate(expression);\n+                Symbol output = symbolAllocator.newSymbol(expression, analysis.getType(expression), \"gid\");\n+                complexExpressions.put(ScopeAware.scopeAwareKey(expression, analysis, subPlan.getScope()), output);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3530, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}