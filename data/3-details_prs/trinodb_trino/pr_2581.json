{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1OTU4MTc3", "number": 2581, "title": "Add callback in FileSingleStreamSpiller to clear Factory cache on disk error", "bodyText": "Follow up work to #2444\nNot married to the callback structure. It seemed the most efficient way to get it done without refactoring a bunch of code. If a better way comes to mind, let me know.", "createdAt": "2020-01-22T16:50:10Z", "url": "https://github.com/trinodb/trino/pull/2581", "merged": true, "mergeCommit": {"oid": "ea8d6929b1954bb42c348336d295b642e57ac272"}, "closed": true, "closedAt": "2020-06-30T11:49:55Z", "author": {"login": "dfinninger"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb84rAzgBqjI5NzA4MTQ4NDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwUOmrAFqTQzOTkzNDkzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3MzE0OTU0", "url": "https://github.com/trinodb/trino/pull/2581#pullrequestreview-347314954", "createdAt": "2020-01-23T13:59:39Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMzo1OTozOVrOFg_EqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNDowMzoxN1rOFg_Mpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEzMjEzNw==", "bodyText": "The commit tittle is a big too long", "url": "https://github.com/trinodb/trino/pull/2581#discussion_r370132137", "createdAt": "2020-01-23T13:59:39Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/spiller/FileSingleStreamSpiller.java", "diffHunk": "@@ -71,14 +71,17 @@\n     private long spilledPagesInMemorySize;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEzMzY1NA==", "bodyText": "code style mistake. Other than that I would inline this method.", "url": "https://github.com/trinodb/trino/pull/2581#discussion_r370133654", "createdAt": "2020-01-23T14:02:18Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/spiller/FileSingleStreamSpillerFactory.java", "diffHunk": "@@ -215,4 +225,8 @@ private boolean isSeeminglyHealthy(Path path)\n             return false;\n         }\n     }\n+\n+    private void clearDiskHealthCache() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEzNDE4Mg==", "bodyText": "Maybe instead of exposing a field, create a method that exposes just the size of cache.", "url": "https://github.com/trinodb/trino/pull/2581#discussion_r370134182", "createdAt": "2020-01-23T14:03:17Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/spiller/FileSingleStreamSpillerFactory.java", "diffHunk": "@@ -78,7 +78,9 @@\n     private final double maxUsedSpaceThreshold;\n     private final boolean spillEncryptionEnabled;\n     private int roundRobinIndex;\n-    private final LoadingCache<Path, Boolean> spillPathHealthCache;\n+\n+    @VisibleForTesting\n+    final LoadingCache<Path, Boolean> spillPathHealthCache;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMjQ1Mzg5", "url": "https://github.com/trinodb/trino/pull/2581#pullrequestreview-352245389", "createdAt": "2020-02-03T13:19:50Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMzoxOTo1MFrOFkxBqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMzoyMDoyMFrOFkxCww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA5NjI5OA==", "bodyText": "requireNonNull", "url": "https://github.com/trinodb/trino/pull/2581#discussion_r374096298", "createdAt": "2020-02-03T13:19:50Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/spiller/FileSingleStreamSpiller.java", "diffHunk": "@@ -99,10 +102,12 @@ public FileSingleStreamSpiller(\n         // before/after the spiller thread allocates that memory -- -- whether before or after depends on whether writePages() is in the\n         // middle of execution when close() is called (note that this applies to both readPages() and writePages() methods).\n         this.memoryContext.setBytes(BUFFER_SIZE);\n+        this.filesystemErrorHandler = filesystemErrorHandler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA5NjU3OQ==", "bodyText": "It looks like this comment is not addressed", "url": "https://github.com/trinodb/trino/pull/2581#discussion_r374096579", "createdAt": "2020-02-03T13:20:20Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/spiller/FileSingleStreamSpillerFactory.java", "diffHunk": "@@ -78,7 +78,9 @@\n     private final double maxUsedSpaceThreshold;\n     private final boolean spillEncryptionEnabled;\n     private int roundRobinIndex;\n-    private final LoadingCache<Path, Boolean> spillPathHealthCache;\n+\n+    @VisibleForTesting\n+    final LoadingCache<Path, Boolean> spillPathHealthCache;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEzNDE4Mg=="}, "originalCommit": null, "originalPosition": 7}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyODAwODI2", "url": "https://github.com/trinodb/trino/pull/2581#pullrequestreview-352800826", "createdAt": "2020-02-04T08:43:00Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwODo0MzowMFrOFlL5dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwODo0Nzo0NFrOFlMBsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUzNjU2NA==", "bodyText": "add a message that \"filesystemErrorHandler is null\"", "url": "https://github.com/trinodb/trino/pull/2581#discussion_r374536564", "createdAt": "2020-02-04T08:43:00Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/spiller/FileSingleStreamSpiller.java", "diffHunk": "@@ -99,10 +102,12 @@ public FileSingleStreamSpiller(\n         // before/after the spiller thread allocates that memory -- -- whether before or after depends on whether writePages() is in the\n         // middle of execution when close() is called (note that this applies to both readPages() and writePages() methods).\n         this.memoryContext.setBytes(BUFFER_SIZE);\n+        this.filesystemErrorHandler = requireNonNull(filesystemErrorHandler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUzNjU5OQ==", "bodyText": "final", "url": "https://github.com/trinodb/trino/pull/2581#discussion_r374536599", "createdAt": "2020-02-04T08:43:04Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/spiller/FileSingleStreamSpiller.java", "diffHunk": "@@ -71,14 +71,17 @@\n     private long spilledPagesInMemorySize;\n     private ListenableFuture<?> spillInProgress = Futures.immediateFuture(null);\n \n+    private Runnable filesystemErrorHandler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUzNjY4Mg==", "bodyText": "undo", "url": "https://github.com/trinodb/trino/pull/2581#discussion_r374536682", "createdAt": "2020-02-04T08:43:15Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/spiller/FileSingleStreamSpillerFactory.java", "diffHunk": "@@ -78,6 +78,7 @@\n     private final double maxUsedSpaceThreshold;\n     private final boolean spillEncryptionEnabled;\n     private int roundRobinIndex;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUzNjgxMQ==", "bodyText": "@VisibleForTesting?", "url": "https://github.com/trinodb/trino/pull/2581#discussion_r374536811", "createdAt": "2020-02-04T08:43:31Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/spiller/FileSingleStreamSpillerFactory.java", "diffHunk": "@@ -215,4 +224,9 @@ private boolean isSeeminglyHealthy(Path path)\n             return false;\n         }\n     }\n+\n+    protected long getSpillPathCacheSize()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUzNzI0NQ==", "bodyText": "can you extract a method where you create spillerFactory", "url": "https://github.com/trinodb/trino/pull/2581#discussion_r374537245", "createdAt": "2020-02-04T08:44:28Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/spiller/TestFileSingleStreamSpillerFactory.java", "diffHunk": "@@ -147,6 +147,87 @@ public void testDistributesSpillOverPathsBadDisk()\n         assertEquals(listFiles(spillPath2.toPath()).size(), 0);\n     }\n \n+    @Test\n+    public void testCacheInvalidatedOnBadDisk()\n+            throws Exception\n+    {\n+        List<Type> types = ImmutableList.of(BIGINT);\n+        List<Path> spillPaths = ImmutableList.of(spillPath1.toPath(), spillPath2.toPath());\n+        FileSingleStreamSpillerFactory spillerFactory = new FileSingleStreamSpillerFactory(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUzNzc0OA==", "bodyText": "Please use org.assertj.core.api.AssertionsForClassTypes#assertThatThrownBy(org.assertj.core.api.ThrowableAssert.ThrowingCallable)\nto verify expected exceptions.", "url": "https://github.com/trinodb/trino/pull/2581#discussion_r374537748", "createdAt": "2020-02-04T08:45:42Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/spiller/TestFileSingleStreamSpillerFactory.java", "diffHunk": "@@ -147,6 +147,87 @@ public void testDistributesSpillOverPathsBadDisk()\n         assertEquals(listFiles(spillPath2.toPath()).size(), 0);\n     }\n \n+    @Test\n+    public void testCacheInvalidatedOnBadDisk()\n+            throws Exception\n+    {\n+        List<Type> types = ImmutableList.of(BIGINT);\n+        List<Path> spillPaths = ImmutableList.of(spillPath1.toPath(), spillPath2.toPath());\n+        FileSingleStreamSpillerFactory spillerFactory = new FileSingleStreamSpillerFactory(\n+                executor, // executor won't be closed, because we don't call destroy() on the spiller factory\n+                blockEncodingSerde,\n+                new SpillerStats(),\n+                spillPaths,\n+                1.0,\n+                false,\n+                false);\n+\n+        assertEquals(listFiles(spillPath1.toPath()).size(), 0);\n+        assertEquals(listFiles(spillPath2.toPath()).size(), 0);\n+\n+        Page page = buildPage();\n+        List<SingleStreamSpiller> spillers = new ArrayList<>();\n+        for (int i = 0; i < 2; ++i) {\n+            SingleStreamSpiller singleStreamSpiller = spillerFactory.create(types, bytes -> {}, newSimpleAggregatedMemoryContext().newLocalMemoryContext(\"test\"));\n+\n+            if (i == 1) {\n+                // Set second spiller path to read-only after initialization to emulate a disk failing during runtime\n+                setPosixFilePermissions(spillPath2.toPath(), ImmutableSet.of(PosixFilePermission.OWNER_READ));\n+            }\n+\n+            try {\n+                getUnchecked(singleStreamSpiller.spill(page));\n+            }\n+            catch (Exception ignored) {\n+                // Do nothing because we expect this to fail due to file permissions", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUzODMyMg==", "bodyText": "Please unroll this loop", "url": "https://github.com/trinodb/trino/pull/2581#discussion_r374538322", "createdAt": "2020-02-04T08:46:56Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/spiller/TestFileSingleStreamSpillerFactory.java", "diffHunk": "@@ -147,6 +147,87 @@ public void testDistributesSpillOverPathsBadDisk()\n         assertEquals(listFiles(spillPath2.toPath()).size(), 0);\n     }\n \n+    @Test\n+    public void testCacheInvalidatedOnBadDisk()\n+            throws Exception\n+    {\n+        List<Type> types = ImmutableList.of(BIGINT);\n+        List<Path> spillPaths = ImmutableList.of(spillPath1.toPath(), spillPath2.toPath());\n+        FileSingleStreamSpillerFactory spillerFactory = new FileSingleStreamSpillerFactory(\n+                executor, // executor won't be closed, because we don't call destroy() on the spiller factory\n+                blockEncodingSerde,\n+                new SpillerStats(),\n+                spillPaths,\n+                1.0,\n+                false,\n+                false);\n+\n+        assertEquals(listFiles(spillPath1.toPath()).size(), 0);\n+        assertEquals(listFiles(spillPath2.toPath()).size(), 0);\n+\n+        Page page = buildPage();\n+        List<SingleStreamSpiller> spillers = new ArrayList<>();\n+        for (int i = 0; i < 2; ++i) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUzODY3Mg==", "bodyText": "you haven't modified permissions in this test.", "url": "https://github.com/trinodb/trino/pull/2581#discussion_r374538672", "createdAt": "2020-02-04T08:47:44Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/spiller/TestFileSingleStreamSpillerFactory.java", "diffHunk": "@@ -147,6 +147,87 @@ public void testDistributesSpillOverPathsBadDisk()\n         assertEquals(listFiles(spillPath2.toPath()).size(), 0);\n     }\n \n+    @Test\n+    public void testCacheInvalidatedOnBadDisk()\n+            throws Exception\n+    {\n+        List<Type> types = ImmutableList.of(BIGINT);\n+        List<Path> spillPaths = ImmutableList.of(spillPath1.toPath(), spillPath2.toPath());\n+        FileSingleStreamSpillerFactory spillerFactory = new FileSingleStreamSpillerFactory(\n+                executor, // executor won't be closed, because we don't call destroy() on the spiller factory\n+                blockEncodingSerde,\n+                new SpillerStats(),\n+                spillPaths,\n+                1.0,\n+                false,\n+                false);\n+\n+        assertEquals(listFiles(spillPath1.toPath()).size(), 0);\n+        assertEquals(listFiles(spillPath2.toPath()).size(), 0);\n+\n+        Page page = buildPage();\n+        List<SingleStreamSpiller> spillers = new ArrayList<>();\n+        for (int i = 0; i < 2; ++i) {\n+            SingleStreamSpiller singleStreamSpiller = spillerFactory.create(types, bytes -> {}, newSimpleAggregatedMemoryContext().newLocalMemoryContext(\"test\"));\n+\n+            if (i == 1) {\n+                // Set second spiller path to read-only after initialization to emulate a disk failing during runtime\n+                setPosixFilePermissions(spillPath2.toPath(), ImmutableSet.of(PosixFilePermission.OWNER_READ));\n+            }\n+\n+            try {\n+                getUnchecked(singleStreamSpiller.spill(page));\n+            }\n+            catch (Exception ignored) {\n+                // Do nothing because we expect this to fail due to file permissions\n+            }\n+            spillers.add(singleStreamSpiller);\n+        }\n+\n+        assertEquals(spillerFactory.getSpillPathCacheSize(), 0, \"cache still contains entries\");\n+\n+        // restore permissions to allow cleanup\n+        setPosixFilePermissions(spillPath2.toPath(), ImmutableSet.of(PosixFilePermission.OWNER_READ, PosixFilePermission.OWNER_WRITE, PosixFilePermission.OWNER_EXECUTE));\n+        spillers.forEach(SingleStreamSpiller::close);\n+        assertEquals(listFiles(spillPath1.toPath()).size(), 0);\n+        assertEquals(listFiles(spillPath2.toPath()).size(), 0);\n+    }\n+\n+    @Test\n+    public void testCacheFull()\n+            throws Exception\n+    {\n+        List<Type> types = ImmutableList.of(BIGINT);\n+        List<Path> spillPaths = ImmutableList.of(spillPath1.toPath(), spillPath2.toPath());\n+        FileSingleStreamSpillerFactory spillerFactory = new FileSingleStreamSpillerFactory(\n+                executor, // executor won't be closed, because we don't call destroy() on the spiller factory\n+                blockEncodingSerde,\n+                new SpillerStats(),\n+                spillPaths,\n+                1.0,\n+                false,\n+                false);\n+\n+        assertEquals(listFiles(spillPath1.toPath()).size(), 0);\n+        assertEquals(listFiles(spillPath2.toPath()).size(), 0);\n+\n+        Page page = buildPage();\n+        List<SingleStreamSpiller> spillers = new ArrayList<>();\n+        for (int i = 0; i < 2; ++i) {\n+            SingleStreamSpiller singleStreamSpiller = spillerFactory.create(types, bytes -> {}, newSimpleAggregatedMemoryContext().newLocalMemoryContext(\"test\"));\n+            getUnchecked(singleStreamSpiller.spill(page));\n+            spillers.add(singleStreamSpiller);\n+        }\n+\n+        assertEquals(spillerFactory.getSpillPathCacheSize(), 2, \"cache contains no entries\");\n+\n+        // restore permissions to allow cleanup\n+        setPosixFilePermissions(spillPath2.toPath(), ImmutableSet.of(PosixFilePermission.OWNER_READ, PosixFilePermission.OWNER_WRITE, PosixFilePermission.OWNER_EXECUTE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 79}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNTQ4NzUz", "url": "https://github.com/trinodb/trino/pull/2581#pullrequestreview-353548753", "createdAt": "2020-02-05T08:53:59Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwODo1NDowMFrOFlv5IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwODo1NToyNFrOFlv8Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyNjMwNQ==", "bodyText": "I think it does need to be protected. Just package should be enough.", "url": "https://github.com/trinodb/trino/pull/2581#discussion_r375126305", "createdAt": "2020-02-05T08:54:00Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/spiller/FileSingleStreamSpillerFactory.java", "diffHunk": "@@ -215,4 +223,10 @@ private boolean isSeeminglyHealthy(Path path)\n             return false;\n         }\n     }\n+\n+    @VisibleForTesting\n+    protected long getSpillPathCacheSize()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyNzA0Nw==", "bodyText": "please extract this change to separate commit, before your actual change. Because it is just a refactoring. Also please put this method somewhere at the bottom, it is not just much important as it is only utility method.", "url": "https://github.com/trinodb/trino/pull/2581#discussion_r375127047", "createdAt": "2020-02-05T08:55:24Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/spiller/TestFileSingleStreamSpillerFactory.java", "diffHunk": "@@ -75,20 +76,30 @@ public void tearDown()\n         closer.close();\n     }\n \n-    @Test\n-    public void testDistributesSpillOverPaths()\n-            throws Exception\n+    private FileSingleStreamSpillerFactory spillerFactoryFactory(List<Path> paths)\n     {\n-        List<Type> types = ImmutableList.of(BIGINT);\n-        List<Path> spillPaths = ImmutableList.of(spillPath1.toPath(), spillPath2.toPath());\n-        FileSingleStreamSpillerFactory spillerFactory = new FileSingleStreamSpillerFactory(\n+        return spillerFactoryFactory (paths, 1.0);\n+    }\n+\n+    private FileSingleStreamSpillerFactory spillerFactoryFactory(List<Path> paths, Double maxUsedSpaceThreshold)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "17e0a70bbc5eb796fb141f1efca5fc2fdf17eb32", "author": {"user": {"login": "dfinninger", "name": "Devon Finninger"}}, "url": "https://github.com/trinodb/trino/commit/17e0a70bbc5eb796fb141f1efca5fc2fdf17eb32", "committedDate": "2020-02-13T17:08:46Z", "message": "Extract SpillerFactory creation to function in tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2OTQwMjU5", "url": "https://github.com/trinodb/trino/pull/2581#pullrequestreview-436940259", "createdAt": "2020-06-24T19:24:07Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOToyNDowN1rOGof7hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOToyNDo0N1rOGof84A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTExOTM2NQ==", "bodyText": "rename variable and field to fileSystemErrorHandler", "url": "https://github.com/trinodb/trino/pull/2581#discussion_r445119365", "createdAt": "2020-06-24T19:24:07Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/spiller/FileSingleStreamSpiller.java", "diffHunk": "@@ -71,14 +71,17 @@\n     private long spilledPagesInMemorySize;\n     private ListenableFuture<?> spillInProgress = Futures.immediateFuture(null);\n \n+    private final Runnable filesystemErrorHandler;\n+\n     public FileSingleStreamSpiller(\n             PagesSerde serde,\n             ListeningExecutorService executor,\n             Path spillPath,\n             SpillerStats spillerStats,\n             SpillContext spillContext,\n             LocalMemoryContext memoryContext,\n-            Optional<SpillCipher> spillCipher)\n+            Optional<SpillCipher> spillCipher,\n+            Runnable filesystemErrorHandler)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTExOTcxMg==", "bodyText": "there is no point to use this.\nshould we wrap this with try-catch so we don't swallow the current exception? If so please extract the method.", "url": "https://github.com/trinodb/trino/pull/2581#discussion_r445119712", "createdAt": "2020-06-24T19:24:47Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/spiller/FileSingleStreamSpiller.java", "diffHunk": "@@ -150,6 +155,7 @@ private void writePages(Iterator<Page> pageIterator)\n             }\n         }\n         catch (UncheckedIOException | IOException e) {\n+            this.filesystemErrorHandler.run();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5afe948148206864e1db4d3338e50e169f94189c", "author": {"user": {"login": "dfinninger", "name": "Devon Finninger"}}, "url": "https://github.com/trinodb/trino/commit/5afe948148206864e1db4d3338e50e169f94189c", "committedDate": "2020-06-26T21:18:06Z", "message": "Add cache clearing to FileSingleStreamSpiller"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "5afe948148206864e1db4d3338e50e169f94189c", "author": {"user": {"login": "dfinninger", "name": "Devon Finninger"}}, "url": "https://github.com/trinodb/trino/commit/5afe948148206864e1db4d3338e50e169f94189c", "committedDate": "2020-06-26T21:18:06Z", "message": "Add cache clearing to FileSingleStreamSpiller"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5OTM0OTM2", "url": "https://github.com/trinodb/trino/pull/2581#pullrequestreview-439934936", "createdAt": "2020-06-30T11:48:30Z", "commit": {"oid": "5afe948148206864e1db4d3338e50e169f94189c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 963, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}