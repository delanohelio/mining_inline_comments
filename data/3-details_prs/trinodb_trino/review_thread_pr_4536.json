{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MTU0Mzg1", "number": 4536, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxODozNToxM1rOEY1APA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjozNzowOFrOEaD6cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDY5NjkyOnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/ExpressionConverter.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxODozNToxM1rOHBUXKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMjo0MDoxMlrOHB9MhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0NDIzNA==", "bodyText": "Use roundDiv(marker.getValue(), PICOSECONDS_PER_MICROSECOND) from io.prestosql.spi.type.Timestamps so that it works correctly with negative epoch values and does rounding (which is the expected Presto behavior when going to a lower precision time value).", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471144234", "createdAt": "2020-08-16T18:35:13Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/ExpressionConverter.java", "diffHunk": "@@ -181,6 +183,10 @@ private static Object getIcebergLiteralValue(Type type, Marker marker)\n             return toIntExact(((Long) marker.getValue()));\n         }\n \n+        if (type instanceof TimeType) {\n+            return ((long) marker.getValue()) / PICOSECONDS_PER_MICROSECOND;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU3MTQ5OQ==", "bodyText": "TIME type doesn't use epoch (it's just picoseconds since midnight), and its values cannot be negative, so this is unnecessary.", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471571499", "createdAt": "2020-08-17T15:47:54Z", "author": {"login": "martint"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/ExpressionConverter.java", "diffHunk": "@@ -181,6 +183,10 @@ private static Object getIcebergLiteralValue(Type type, Marker marker)\n             return toIntExact(((Long) marker.getValue()));\n         }\n \n+        if (type instanceof TimeType) {\n+            return ((long) marker.getValue()) / PICOSECONDS_PER_MICROSECOND;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0NDIzNA=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY0NTQwOQ==", "bodyText": "Left as it is.", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471645409", "createdAt": "2020-08-17T17:27:19Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/ExpressionConverter.java", "diffHunk": "@@ -181,6 +183,10 @@ private static Object getIcebergLiteralValue(Type type, Marker marker)\n             return toIntExact(((Long) marker.getValue()));\n         }\n \n+        if (type instanceof TimeType) {\n+            return ((long) marker.getValue()) / PICOSECONDS_PER_MICROSECOND;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0NDIzNA=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcyMzUxOA==", "bodyText": "We still need rounding, right?", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471723518", "createdAt": "2020-08-17T19:19:14Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/ExpressionConverter.java", "diffHunk": "@@ -181,6 +183,10 @@ private static Object getIcebergLiteralValue(Type type, Marker marker)\n             return toIntExact(((Long) marker.getValue()));\n         }\n \n+        if (type instanceof TimeType) {\n+            return ((long) marker.getValue()) / PICOSECONDS_PER_MICROSECOND;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0NDIzNA=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgxMzI1Mw==", "bodyText": "@electrum, I should assume the question is directed at @martint, right?", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471813253", "createdAt": "2020-08-17T22:40:12Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/ExpressionConverter.java", "diffHunk": "@@ -181,6 +183,10 @@ private static Object getIcebergLiteralValue(Type type, Marker marker)\n             return toIntExact(((Long) marker.getValue()));\n         }\n \n+        if (type instanceof TimeType) {\n+            return ((long) marker.getValue()) / PICOSECONDS_PER_MICROSECOND;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0NDIzNA=="}, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDY5ODQxOnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergPageSink.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxODozNzoxNVrOHBUX8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzoyNzoyM1rOHBy9LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0NDQzMg==", "bodyText": "roundDiv", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471144432", "createdAt": "2020-08-16T18:37:15Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergPageSink.java", "diffHunk": "@@ -361,6 +363,9 @@ public static Object getIcebergValue(Block block, int position, Type type)\n         if (type instanceof DoubleType) {\n             return type.getDouble(block, position);\n         }\n+        if (type instanceof TimeType) {\n+            return type.getLong(block, position) / PICOSECONDS_PER_MICROSECOND;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY0NTQ4NQ==", "bodyText": "Based on @martint's previous comment, left as it is.", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471645485", "createdAt": "2020-08-17T17:27:23Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergPageSink.java", "diffHunk": "@@ -361,6 +363,9 @@ public static Object getIcebergValue(Block block, int position, Type type)\n         if (type instanceof DoubleType) {\n             return type.getDouble(block, position);\n         }\n+        if (type instanceof TimeType) {\n+            return type.getLong(block, position) / PICOSECONDS_PER_MICROSECOND;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0NDQzMg=="}, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDcwMDI2OnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergSplitSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxODozOTo0MlrOHBUY1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzoyNzo0M1rOHBy-og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0NDY2MA==", "bodyText": "I like to introduce a method for these types of switch expressions, since it looks cleaner than assign+break:\nswitch (type.typeId()) {\n    case FIXED:\n    case BINARY:\n        return ...;\n    case TIME:\n        return ...;\n}\nIn Java 14, we will be able to do\nString partitionValue = switch (type.typeId()) {\n    case FIXED, BINARY -> ... ;\n    case TIME -> ... ;\n}", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471144660", "createdAt": "2020-08-16T18:39:42Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergSplitSource.java", "diffHunk": "@@ -126,12 +124,18 @@ private ConnectorSplit toIcebergSplit(FileScanTask task)\n             }\n             else {\n                 String partitionValue;\n-                if (type.typeId() == FIXED || type.typeId() == BINARY) {\n-                    // this is safe because Iceberg PartitionData directly wraps the byte array\n-                    partitionValue = new String(((ByteBuffer) value).array(), UTF_8);\n-                }\n-                else {\n-                    partitionValue = value.toString();\n+                switch (type.typeId()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY0NTg1OA==", "bodyText": "Done, and much nicer.  Since in String.valueOf((Long) value), the cast to Long is redundant, the former TIME case is correctly handled by the default case, as pointed out by Intellij.", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471645858", "createdAt": "2020-08-17T17:27:43Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergSplitSource.java", "diffHunk": "@@ -126,12 +124,18 @@ private ConnectorSplit toIcebergSplit(FileScanTask task)\n             }\n             else {\n                 String partitionValue;\n-                if (type.typeId() == FIXED || type.typeId() == BINARY) {\n-                    // this is safe because Iceberg PartitionData directly wraps the byte array\n-                    partitionValue = new String(((ByteBuffer) value).array(), UTF_8);\n-                }\n-                else {\n-                    partitionValue = value.toString();\n+                switch (type.typeId()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0NDY2MA=="}, "originalCommit": null, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDcwMjIzOnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/PartitionTable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxODo0MjoxNlrOHBUZww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzoyNzo0OVrOHBy_Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0NDg5OQ==", "bodyText": "Static import", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471144899", "createdAt": "2020-08-16T18:42:16Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/PartitionTable.java", "diffHunk": "@@ -300,6 +301,9 @@ private static Object convert(Object value, Type type)\n             }\n             return utcMillis;\n         }\n+        if (type instanceof Types.TimeType) {\n+            return ((Long) value) * Timestamps.PICOSECONDS_PER_MICROSECOND;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY0NTk5NQ==", "bodyText": "Done.", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471645995", "createdAt": "2020-08-17T17:27:49Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/PartitionTable.java", "diffHunk": "@@ -300,6 +301,9 @@ private static Object convert(Object value, Type type)\n             }\n             return utcMillis;\n         }\n+        if (type instanceof Types.TimeType) {\n+            return ((Long) value) * Timestamps.PICOSECONDS_PER_MICROSECOND;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0NDg5OQ=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzQwNjkxOnYy", "diffSide": "RIGHT", "path": "presto-parquet/src/main/java/io/prestosql/parquet/writer/valuewriter/TimeValueWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNTowOToyNlrOHBs1uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzoyODoxN1rOHBzBeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU0NTI3Mw==", "bodyText": "Name the class TimeMicrosValueWriter and check the logical type outside, then we don't need to specialize inside the writer code.", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471545273", "createdAt": "2020-08-17T15:09:26Z", "author": {"login": "electrum"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/writer/valuewriter/TimeValueWriter.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.parquet.writer.valuewriter;\n+\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.type.Timestamps;\n+import io.prestosql.spi.type.Type;\n+import org.apache.parquet.column.values.ValuesWriter;\n+import org.apache.parquet.schema.OriginalType;\n+import org.apache.parquet.schema.PrimitiveType;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class TimeValueWriter\n+        extends PrimitiveValueWriter\n+{\n+    private final Type type;\n+    private final boolean scaleValue;\n+\n+    public TimeValueWriter(ValuesWriter valuesWriter, Type type, PrimitiveType parquetType)\n+    {\n+        super(parquetType, valuesWriter);\n+        this.type = requireNonNull(type, \"type is null\");\n+        this.scaleValue = parquetType.isPrimitive() && parquetType.getOriginalType() == OriginalType.TIME_MICROS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY0NjU4Ng==", "bodyText": "Done.  It's great to remove that grotty check in the writer!", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471646586", "createdAt": "2020-08-17T17:28:17Z", "author": {"login": "djsstarburst"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/writer/valuewriter/TimeValueWriter.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.parquet.writer.valuewriter;\n+\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.type.Timestamps;\n+import io.prestosql.spi.type.Type;\n+import org.apache.parquet.column.values.ValuesWriter;\n+import org.apache.parquet.schema.OriginalType;\n+import org.apache.parquet.schema.PrimitiveType;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class TimeValueWriter\n+        extends PrimitiveValueWriter\n+{\n+    private final Type type;\n+    private final boolean scaleValue;\n+\n+    public TimeValueWriter(ValuesWriter valuesWriter, Type type, PrimitiveType parquetType)\n+    {\n+        super(parquetType, valuesWriter);\n+        this.type = requireNonNull(type, \"type is null\");\n+        this.scaleValue = parquetType.isPrimitive() && parquetType.getOriginalType() == OriginalType.TIME_MICROS;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU0NTI3Mw=="}, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzQwNzI0OnYy", "diffSide": "RIGHT", "path": "presto-parquet/src/main/java/io/prestosql/parquet/writer/valuewriter/TimeValueWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNTowOTozM1rOHBs19Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzoyODoyM1rOHBzB-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU0NTMzMw==", "bodyText": "roundDiv", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471545333", "createdAt": "2020-08-17T15:09:33Z", "author": {"login": "electrum"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/writer/valuewriter/TimeValueWriter.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.parquet.writer.valuewriter;\n+\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.type.Timestamps;\n+import io.prestosql.spi.type.Type;\n+import org.apache.parquet.column.values.ValuesWriter;\n+import org.apache.parquet.schema.OriginalType;\n+import org.apache.parquet.schema.PrimitiveType;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class TimeValueWriter\n+        extends PrimitiveValueWriter\n+{\n+    private final Type type;\n+    private final boolean scaleValue;\n+\n+    public TimeValueWriter(ValuesWriter valuesWriter, Type type, PrimitiveType parquetType)\n+    {\n+        super(parquetType, valuesWriter);\n+        this.type = requireNonNull(type, \"type is null\");\n+        this.scaleValue = parquetType.isPrimitive() && parquetType.getOriginalType() == OriginalType.TIME_MICROS;\n+    }\n+\n+    @Override\n+    public void write(Block block)\n+    {\n+        for (int i = 0; i < block.getPositionCount(); i++) {\n+            if (!block.isNull(i)) {\n+                long value = type.getLong(block, i);\n+                long scaledValue = scaleValue ? value / Timestamps.PICOSECONDS_PER_MICROSECOND : value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY0NjcxNQ==", "bodyText": "Per @martint's comment, left as is.", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471646715", "createdAt": "2020-08-17T17:28:23Z", "author": {"login": "djsstarburst"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/writer/valuewriter/TimeValueWriter.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.parquet.writer.valuewriter;\n+\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.type.Timestamps;\n+import io.prestosql.spi.type.Type;\n+import org.apache.parquet.column.values.ValuesWriter;\n+import org.apache.parquet.schema.OriginalType;\n+import org.apache.parquet.schema.PrimitiveType;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class TimeValueWriter\n+        extends PrimitiveValueWriter\n+{\n+    private final Type type;\n+    private final boolean scaleValue;\n+\n+    public TimeValueWriter(ValuesWriter valuesWriter, Type type, PrimitiveType parquetType)\n+    {\n+        super(parquetType, valuesWriter);\n+        this.type = requireNonNull(type, \"type is null\");\n+        this.scaleValue = parquetType.isPrimitive() && parquetType.getOriginalType() == OriginalType.TIME_MICROS;\n+    }\n+\n+    @Override\n+    public void write(Block block)\n+    {\n+        for (int i = 0; i < block.getPositionCount(); i++) {\n+            if (!block.isNull(i)) {\n+                long value = type.getLong(block, i);\n+                long scaledValue = scaleValue ? value / Timestamps.PICOSECONDS_PER_MICROSECOND : value;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU0NTMzMw=="}, "originalCommit": null, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzQzNzU5OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/io/prestosql/orc/writer/TimeColumnWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNToxNjozMlrOHBtIMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzoyODoyOFrOHBzCaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU1MDAwMQ==", "bodyText": "roundDiv", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471550001", "createdAt": "2020-08-17T15:16:32Z", "author": {"login": "electrum"}, "path": "presto-orc/src/main/java/io/prestosql/orc/writer/TimeColumnWriter.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.orc.writer;\n+\n+import io.prestosql.orc.metadata.CompressionKind;\n+import io.prestosql.orc.metadata.OrcColumnId;\n+import io.prestosql.orc.metadata.statistics.LongValueStatisticsBuilder;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.function.Supplier;\n+\n+import static io.prestosql.spi.type.Timestamps.PICOSECONDS_PER_MICROSECOND;\n+\n+public class TimeColumnWriter\n+        extends LongColumnWriter\n+{\n+    public TimeColumnWriter(\n+            OrcColumnId columnId,\n+            Type type,\n+            CompressionKind compression,\n+            int bufferSize,\n+            Supplier<LongValueStatisticsBuilder> statisticsBuilderSupplier)\n+    {\n+        super(columnId, type, compression, bufferSize, statisticsBuilderSupplier);\n+    }\n+\n+    @Override\n+    protected long transformValue(long value)\n+    {\n+        return value / PICOSECONDS_PER_MICROSECOND;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY0NjgyNw==", "bodyText": "Per @martint's comment, left as is.", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471646827", "createdAt": "2020-08-17T17:28:28Z", "author": {"login": "djsstarburst"}, "path": "presto-orc/src/main/java/io/prestosql/orc/writer/TimeColumnWriter.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.orc.writer;\n+\n+import io.prestosql.orc.metadata.CompressionKind;\n+import io.prestosql.orc.metadata.OrcColumnId;\n+import io.prestosql.orc.metadata.statistics.LongValueStatisticsBuilder;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.function.Supplier;\n+\n+import static io.prestosql.spi.type.Timestamps.PICOSECONDS_PER_MICROSECOND;\n+\n+public class TimeColumnWriter\n+        extends LongColumnWriter\n+{\n+    public TimeColumnWriter(\n+            OrcColumnId columnId,\n+            Type type,\n+            CompressionKind compression,\n+            int bufferSize,\n+            Supplier<LongValueStatisticsBuilder> statisticsBuilderSupplier)\n+    {\n+        super(columnId, type, compression, bufferSize, statisticsBuilderSupplier);\n+    }\n+\n+    @Override\n+    protected long transformValue(long value)\n+    {\n+        return value / PICOSECONDS_PER_MICROSECOND;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU1MDAwMQ=="}, "originalCommit": null, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzU2NjY3OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/io/prestosql/orc/reader/TimeColumnReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNTo0NTo0M1rOHBuWRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzoyODozMlrOHBzC1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2OTk5MA==", "bodyText": "Can use *=", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471569990", "createdAt": "2020-08-17T15:45:43Z", "author": {"login": "electrum"}, "path": "presto-orc/src/main/java/io/prestosql/orc/reader/TimeColumnReader.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.orc.reader;\n+\n+import io.prestosql.memory.context.LocalMemoryContext;\n+import io.prestosql.orc.OrcColumn;\n+import io.prestosql.orc.OrcCorruptionException;\n+import io.prestosql.spi.type.Type;\n+\n+import static io.prestosql.spi.type.Timestamps.PICOSECONDS_PER_MICROSECOND;\n+\n+public class TimeColumnReader\n+        extends LongColumnReader\n+{\n+    public TimeColumnReader(Type type, OrcColumn column, LocalMemoryContext systemMemoryContext)\n+            throws OrcCorruptionException\n+    {\n+        super(type, column, systemMemoryContext);\n+    }\n+\n+    @Override\n+    protected void maybeTransformValues(long[] values, int nextBatchSize)\n+    {\n+        for (int i = 0; i < nextBatchSize; i++) {\n+            values[i] = values[i] * PICOSECONDS_PER_MICROSECOND;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY0NjkzMw==", "bodyText": "Changed.", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471646933", "createdAt": "2020-08-17T17:28:32Z", "author": {"login": "djsstarburst"}, "path": "presto-orc/src/main/java/io/prestosql/orc/reader/TimeColumnReader.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.orc.reader;\n+\n+import io.prestosql.memory.context.LocalMemoryContext;\n+import io.prestosql.orc.OrcColumn;\n+import io.prestosql.orc.OrcCorruptionException;\n+import io.prestosql.spi.type.Type;\n+\n+import static io.prestosql.spi.type.Timestamps.PICOSECONDS_PER_MICROSECOND;\n+\n+public class TimeColumnReader\n+        extends LongColumnReader\n+{\n+    public TimeColumnReader(Type type, OrcColumn column, LocalMemoryContext systemMemoryContext)\n+            throws OrcCorruptionException\n+    {\n+        super(type, column, systemMemoryContext);\n+    }\n+\n+    @Override\n+    protected void maybeTransformValues(long[] values, int nextBatchSize)\n+    {\n+        for (int i = 0; i < nextBatchSize; i++) {\n+            values[i] = values[i] * PICOSECONDS_PER_MICROSECOND;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2OTk5MA=="}, "originalCommit": null, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzU2OTgyOnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/io/prestosql/orc/writer/ColumnWriters.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNTo0NjoyNFrOHBuYGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzoyODozOFrOHBzDUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU3MDQ1Ng==", "bodyText": "checkArgument(orcType == LONG, \"wrong ORC type for time type: %s\", orcType);", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471570456", "createdAt": "2020-08-17T15:46:24Z", "author": {"login": "electrum"}, "path": "presto-orc/src/main/java/io/prestosql/orc/writer/ColumnWriters.java", "diffHunk": "@@ -47,6 +48,9 @@ public static ColumnWriter createColumnWriter(\n             Supplier<BloomFilterBuilder> bloomFilterBuilder)\n     {\n         requireNonNull(type, \"type is null\");\n+        if (type instanceof TimeType) {\n+            return new TimeColumnWriter(columnId, type, compression, bufferSize, () -> new IntegerStatisticsBuilder(bloomFilterBuilder.get()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY0NzA1Ng==", "bodyText": "Added.", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471647056", "createdAt": "2020-08-17T17:28:38Z", "author": {"login": "djsstarburst"}, "path": "presto-orc/src/main/java/io/prestosql/orc/writer/ColumnWriters.java", "diffHunk": "@@ -47,6 +48,9 @@ public static ColumnWriter createColumnWriter(\n             Supplier<BloomFilterBuilder> bloomFilterBuilder)\n     {\n         requireNonNull(type, \"type is null\");\n+        if (type instanceof TimeType) {\n+            return new TimeColumnWriter(columnId, type, compression, bufferSize, () -> new IntegerStatisticsBuilder(bloomFilterBuilder.get()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU3MDQ1Ng=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODUwMjA0OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/io/prestosql/orc/writer/ColumnWriters.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxOToyMDowOFrOHB3viA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMDoyOTo0NVrOHB5zTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcyMzkxMg==", "bodyText": "Add a comment that this is for Iceberg", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471723912", "createdAt": "2020-08-17T19:20:08Z", "author": {"login": "electrum"}, "path": "presto-orc/src/main/java/io/prestosql/orc/writer/ColumnWriters.java", "diffHunk": "@@ -48,6 +51,10 @@ public static ColumnWriter createColumnWriter(\n     {\n         requireNonNull(type, \"type is null\");\n         OrcType orcType = orcTypes.get(columnId);\n+        if (type instanceof TimeType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc1NzY0Ng==", "bodyText": "Added.", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471757646", "createdAt": "2020-08-17T20:29:45Z", "author": {"login": "djsstarburst"}, "path": "presto-orc/src/main/java/io/prestosql/orc/writer/ColumnWriters.java", "diffHunk": "@@ -48,6 +51,10 @@ public static ColumnWriter createColumnWriter(\n     {\n         requireNonNull(type, \"type is null\");\n         OrcType orcType = orcTypes.get(columnId);\n+        if (type instanceof TimeType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcyMzkxMg=="}, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODUwNTIxOnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/io/prestosql/orc/TupleDomainOrcPredicate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxOToyMTowNlrOHB3xdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMDoyOTo0MlrOHB5zOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcyNDQwNA==", "bodyText": "Comment that this is for Iceberg", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471724404", "createdAt": "2020-08-17T19:21:06Z", "author": {"login": "electrum"}, "path": "presto-orc/src/main/java/io/prestosql/orc/TupleDomainOrcPredicate.java", "diffHunk": "@@ -189,6 +191,9 @@ public static Domain getDomain(Type type, long rowCount, ColumnStatistics column\n \n         boolean hasNullValue = columnStatistics.getNumberOfValues() != rowCount;\n \n+        if (type instanceof TimeType && columnStatistics.getIntegerStatistics() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc1NzYyNw==", "bodyText": "Added.", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471757627", "createdAt": "2020-08-17T20:29:42Z", "author": {"login": "djsstarburst"}, "path": "presto-orc/src/main/java/io/prestosql/orc/TupleDomainOrcPredicate.java", "diffHunk": "@@ -189,6 +191,9 @@ public static Domain getDomain(Type type, long rowCount, ColumnStatistics column\n \n         boolean hasNullValue = columnStatistics.getNumberOfValues() != rowCount;\n \n+        if (type instanceof TimeType && columnStatistics.getIntegerStatistics() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcyNDQwNA=="}, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODUwOTg1OnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergSplitSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxOToyMjo0M1rOHB30Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMDoyOTo0MFrOHB5zLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcyNTEyNg==", "bodyText": "I think you accidentally removed the case for TIME", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471725126", "createdAt": "2020-08-17T19:22:43Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergSplitSource.java", "diffHunk": "@@ -125,18 +123,22 @@ private ConnectorSplit toIcebergSplit(FileScanTask task)\n                 partitionKeys.put(id, null);\n             }\n             else {\n-                String partitionValue;\n-                if (type.typeId() == FIXED || type.typeId() == BINARY) {\n-                    // this is safe because Iceberg PartitionData directly wraps the byte array\n-                    partitionValue = new String(((ByteBuffer) value).array(), UTF_8);\n-                }\n-                else {\n-                    partitionValue = value.toString();\n-                }\n-                partitionKeys.put(id, partitionValue);\n+                partitionKeys.put(id, partitionValueFromType(type, value));\n             }\n         });\n \n         return Collections.unmodifiableMap(partitionKeys);\n     }\n+\n+    private static String partitionValueFromType(Type type, Object value)\n+    {\n+        switch (type.typeId()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc1NzYxNA==", "bodyText": "Since in String.valueOf((Long) value), the cast to Long is redundant, the former TIME case is correctly handled by the default case, as pointed out by Intellij.\n\nNo; as mentioned in this PR comment above, the default case suffices", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471757614", "createdAt": "2020-08-17T20:29:40Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergSplitSource.java", "diffHunk": "@@ -125,18 +123,22 @@ private ConnectorSplit toIcebergSplit(FileScanTask task)\n                 partitionKeys.put(id, null);\n             }\n             else {\n-                String partitionValue;\n-                if (type.typeId() == FIXED || type.typeId() == BINARY) {\n-                    // this is safe because Iceberg PartitionData directly wraps the byte array\n-                    partitionValue = new String(((ByteBuffer) value).array(), UTF_8);\n-                }\n-                else {\n-                    partitionValue = value.toString();\n-                }\n-                partitionKeys.put(id, partitionValue);\n+                partitionKeys.put(id, partitionValueFromType(type, value));\n             }\n         });\n \n         return Collections.unmodifiableMap(partitionKeys);\n     }\n+\n+    private static String partitionValueFromType(Type type, Object value)\n+    {\n+        switch (type.typeId()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcyNTEyNg=="}, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODUxOTMzOnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/TypeConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxOToyNTo0N1rOHB36SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNTozMDoxN1rOHCaEXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcyNjY2NA==", "bodyText": "This should only allow time(6). We should probably add a TIME_MICROS constant for createTimeType(6) like I did in the timestamps PR. Then add another check\nif (type instanceof TimestampType) {\n    throw new PrestoException(NOT_SUPPORTED, format(\"Time precision (%s) not supported for Iceberg. Use \\\"time(6)\\\" instead.\", ((TimeType) type).getPrecision()));\n}", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471726664", "createdAt": "2020-08-17T19:25:47Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/TypeConverter.java", "diffHunk": "@@ -176,6 +177,9 @@ public static Type toPrestoType(org.apache.iceberg.types.Type type, TypeManager\n         if (type instanceof MapType) {\n             return fromMap((MapType) type);\n         }\n+        if (type instanceof TimeType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4NjMwMQ==", "bodyText": "Done.", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r472286301", "createdAt": "2020-08-18T15:30:17Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/TypeConverter.java", "diffHunk": "@@ -176,6 +177,9 @@ public static Type toPrestoType(org.apache.iceberg.types.Type type, TypeManager\n         if (type instanceof MapType) {\n             return fromMap((MapType) type);\n         }\n+        if (type instanceof TimeType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcyNjY2NA=="}, "originalCommit": null, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODU0MzAzOnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/io/prestosql/orc/reader/ColumnReaders.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxOTozNDowMlrOHB4JDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjo0NjowNlrOHDQTag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTczMDQ0Ng==", "bodyText": "I realized why this is problematic. In the ORC code, which is generic, we making a huge assumption that the time type is written as a long with microsecond encoding. We should be able to do this in a safe way by checking the iceberg.long-type = TIME attribute from OrcColumn. The code would still have this ugly Iceberg specific logic, but it would be safe if we introduce other usages of TimeType in the future.", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r471730446", "createdAt": "2020-08-17T19:34:02Z", "author": {"login": "electrum"}, "path": "presto-orc/src/main/java/io/prestosql/orc/reader/ColumnReaders.java", "diffHunk": "@@ -32,6 +33,9 @@ public static ColumnReader createColumnReader(\n             OrcBlockFactory blockFactory)\n             throws OrcCorruptionException\n     {\n+        if (type instanceof TimeType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4NTg5NQ==", "bodyText": "I made this change and force-pushed.", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r472285895", "createdAt": "2020-08-18T15:29:44Z", "author": {"login": "djsstarburst"}, "path": "presto-orc/src/main/java/io/prestosql/orc/reader/ColumnReaders.java", "diffHunk": "@@ -32,6 +33,9 @@ public static ColumnReader createColumnReader(\n             OrcBlockFactory blockFactory)\n             throws OrcCorruptionException\n     {\n+        if (type instanceof TimeType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTczMDQ0Ng=="}, "originalCommit": null, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE3NDg5MA==", "bodyText": "Verify three things:\n\ntype.precision == 6\ncolumn.getColumnType() == LONG\n\"LONG\".equals(column.getAttributes(\"iceberg.long-type\"))", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r473174890", "createdAt": "2020-08-19T16:46:06Z", "author": {"login": "electrum"}, "path": "presto-orc/src/main/java/io/prestosql/orc/reader/ColumnReaders.java", "diffHunk": "@@ -32,6 +33,9 @@ public static ColumnReader createColumnReader(\n             OrcBlockFactory blockFactory)\n             throws OrcCorruptionException\n     {\n+        if (type instanceof TimeType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTczMDQ0Ng=="}, "originalCommit": null, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjA5MTcwOnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/PartitionTransforms.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNToyMTo1M1rOHCZrCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDozMDowNFrOHDKJdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3OTgxNg==", "bodyText": "Name this extractTime since it's not specific to hours", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r472279816", "createdAt": "2020-08-18T15:21:53Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/PartitionTransforms.java", "diffHunk": "@@ -253,6 +257,27 @@ private static Block extractTimestamp(Block block, LongUnaryOperator function)\n         return builder.build();\n     }\n \n+    private static Block hoursFromTime(Block block)\n+    {\n+        return extractHoursFromTime(block, HOURS_DURATION::getValueAsLong);\n+    }\n+\n+    private static Block extractHoursFromTime(Block block, LongUnaryOperator function)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA3NDAzNg==", "bodyText": "Changed.", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r473074036", "createdAt": "2020-08-19T14:30:04Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/PartitionTransforms.java", "diffHunk": "@@ -253,6 +257,27 @@ private static Block extractTimestamp(Block block, LongUnaryOperator function)\n         return builder.build();\n     }\n \n+    private static Block hoursFromTime(Block block)\n+    {\n+        return extractHoursFromTime(block, HOURS_DURATION::getValueAsLong);\n+    }\n+\n+    private static Block extractHoursFromTime(Block block, LongUnaryOperator function)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3OTgxNg=="}, "originalCommit": null, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzUyMjA4OnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergSplitSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjoyMDowNlrOHDO6Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjozMzoxOVrOHDPxfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE1MjA2Ng==", "bodyText": "It looks like this didn't require any changes, so we can leave it as-is", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r473152066", "createdAt": "2020-08-19T16:20:06Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergSplitSource.java", "diffHunk": "@@ -125,18 +123,22 @@ private ConnectorSplit toIcebergSplit(FileScanTask task)\n                 partitionKeys.put(id, null);\n             }\n             else {\n-                String partitionValue;\n-                if (type.typeId() == FIXED || type.typeId() == BINARY) {\n-                    // this is safe because Iceberg PartitionData directly wraps the byte array\n-                    partitionValue = new String(((ByteBuffer) value).array(), UTF_8);\n-                }\n-                else {\n-                    partitionValue = value.toString();\n-                }\n-                partitionKeys.put(id, partitionValue);\n+                partitionKeys.put(id, partitionValueFromType(type, value));\n             }\n         });\n \n         return Collections.unmodifiableMap(partitionKeys);\n     }\n+\n+    private static String partitionValueFromType(Type type, Object value)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE2NjIwNw==", "bodyText": "Change reverted.", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r473166207", "createdAt": "2020-08-19T16:33:19Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergSplitSource.java", "diffHunk": "@@ -125,18 +123,22 @@ private ConnectorSplit toIcebergSplit(FileScanTask task)\n                 partitionKeys.put(id, null);\n             }\n             else {\n-                String partitionValue;\n-                if (type.typeId() == FIXED || type.typeId() == BINARY) {\n-                    // this is safe because Iceberg PartitionData directly wraps the byte array\n-                    partitionValue = new String(((ByteBuffer) value).array(), UTF_8);\n-                }\n-                else {\n-                    partitionValue = value.toString();\n-                }\n-                partitionKeys.put(id, partitionValue);\n+                partitionKeys.put(id, partitionValueFromType(type, value));\n             }\n         });\n \n         return Collections.unmodifiableMap(partitionKeys);\n     }\n+\n+    private static String partitionValueFromType(Type type, Object value)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE1MjA2Ng=="}, "originalCommit": null, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzUyNDcxOnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/ExpressionConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjoyMDozMlrOHDO75g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjozMzoyNFrOHDPx1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE1MjQ4Ng==", "bodyText": "TIME_MICROS", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r473152486", "createdAt": "2020-08-19T16:20:32Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/ExpressionConverter.java", "diffHunk": "@@ -181,6 +183,10 @@ private static Object getIcebergLiteralValue(Type type, Marker marker)\n             return toIntExact(((Long) marker.getValue()));\n         }\n \n+        if (type instanceof TimeType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE2NjI5NQ==", "bodyText": "Changed.", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r473166295", "createdAt": "2020-08-19T16:33:24Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/ExpressionConverter.java", "diffHunk": "@@ -181,6 +183,10 @@ private static Object getIcebergLiteralValue(Type type, Marker marker)\n             return toIntExact(((Long) marker.getValue()));\n         }\n \n+        if (type instanceof TimeType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE1MjQ4Ng=="}, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzU1ODUzOnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/PartitionData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjoyNTozNVrOHDPRyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjozNTozN1rOHDP7GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE1ODA5MA==", "bodyText": "Can collapse to previous cases", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r473158090", "createdAt": "2020-08-19T16:25:35Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/PartitionData.java", "diffHunk": "@@ -134,6 +134,8 @@ public static Object getValue(JsonNode partitionValue, Type type)\n             case LONG:\n             case TIMESTAMP:\n                 return partitionValue.asLong();\n+            case TIME:", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE2ODY2NQ==", "bodyText": "Collapsed.", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r473168665", "createdAt": "2020-08-19T16:35:37Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/PartitionData.java", "diffHunk": "@@ -134,6 +134,8 @@ public static Object getValue(JsonNode partitionValue, Type type)\n             case LONG:\n             case TIMESTAMP:\n                 return partitionValue.asLong();\n+            case TIME:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE1ODA5MA=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzU5NjMyOnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/TypeConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjozMTo0M1rOHDPrNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjozNTozNFrOHDP68A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE2NDU5OQ==", "bodyText": "Flip equals() so it's consistent with the others", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r473164599", "createdAt": "2020-08-19T16:31:43Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/TypeConverter.java", "diffHunk": "@@ -261,6 +270,9 @@ private static TypeInfo toHiveTypeInfo(Type type)\n         if (DATE.equals(type)) {\n             return HIVE_DATE.getTypeInfo();\n         }\n+        if (type.equals(TIME_MICROS)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE2ODYyNA==", "bodyText": "Flipped.", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r473168624", "createdAt": "2020-08-19T16:35:34Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/TypeConverter.java", "diffHunk": "@@ -261,6 +270,9 @@ private static TypeInfo toHiveTypeInfo(Type type)\n         if (DATE.equals(type)) {\n             return HIVE_DATE.getTypeInfo();\n         }\n+        if (type.equals(TIME_MICROS)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE2NDU5OQ=="}, "originalCommit": null, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzYwMzY1OnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjozMjo1OFrOHDPwIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjo0Njo0NlrOHDQVCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE2NTg1OQ==", "bodyText": "No need to lowercase format", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r473165859", "createdAt": "2020-08-19T16:32:58Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -144,6 +145,35 @@ private void testDecimalWithPrecisionAndScale(Session session, FileFormat format\n         dropTable(session, tableName);\n     }\n \n+    @Test\n+    public void testTime()\n+    {\n+        testWithAllFileFormats((session, format) -> testTimeForFormat(session, format, false));\n+    }\n+\n+    @Test\n+    public void testPartitionedByTime()\n+    {\n+        testWithAllFileFormats((session, format) -> testTimeForFormat(session, format, true));\n+    }\n+\n+    private void testTimeForFormat(Session session, FileFormat format, boolean partitioned)\n+    {\n+        String tableName = format(\"test_%s%s_time\", partitioned ? \"partitioned_\" : \"\", format.name().toLowerCase(ENGLISH));\n+        String partitioning = partitioned ? \", partitioning = ARRAY['x']\" : \"\";\n+        assertUpdate(session, format(\"CREATE TABLE %s (x TIME, y BIGINT) WITH (format = '%s'%s)\", tableName, format.name().toLowerCase(ENGLISH), partitioning));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE3NTMwNg==", "bodyText": "Removed.", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r473175306", "createdAt": "2020-08-19T16:46:46Z", "author": {"login": "djsstarburst"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -144,6 +145,35 @@ private void testDecimalWithPrecisionAndScale(Session session, FileFormat format\n         dropTable(session, tableName);\n     }\n \n+    @Test\n+    public void testTime()\n+    {\n+        testWithAllFileFormats((session, format) -> testTimeForFormat(session, format, false));\n+    }\n+\n+    @Test\n+    public void testPartitionedByTime()\n+    {\n+        testWithAllFileFormats((session, format) -> testTimeForFormat(session, format, true));\n+    }\n+\n+    private void testTimeForFormat(Session session, FileFormat format, boolean partitioned)\n+    {\n+        String tableName = format(\"test_%s%s_time\", partitioned ? \"partitioned_\" : \"\", format.name().toLowerCase(ENGLISH));\n+        String partitioning = partitioned ? \", partitioning = ARRAY['x']\" : \"\";\n+        assertUpdate(session, format(\"CREATE TABLE %s (x TIME, y BIGINT) WITH (format = '%s'%s)\", tableName, format.name().toLowerCase(ENGLISH), partitioning));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE2NTg1OQ=="}, "originalCommit": null, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzYxODQ5OnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/io/prestosql/orc/writer/TimeColumnWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjozNToyNlrOHDP6Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjo0Njo0OVrOHDQVPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE2ODQ3MA==", "bodyText": "No need to wrap here, especially for simple delegation", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r473168470", "createdAt": "2020-08-19T16:35:26Z", "author": {"login": "electrum"}, "path": "presto-orc/src/main/java/io/prestosql/orc/writer/TimeColumnWriter.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.orc.writer;\n+\n+import io.prestosql.orc.metadata.CompressionKind;\n+import io.prestosql.orc.metadata.OrcColumnId;\n+import io.prestosql.orc.metadata.statistics.LongValueStatisticsBuilder;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.function.Supplier;\n+\n+import static io.prestosql.spi.type.Timestamps.PICOSECONDS_PER_MICROSECOND;\n+\n+public class TimeColumnWriter\n+        extends LongColumnWriter\n+{\n+    public TimeColumnWriter(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE3NTM1Ng==", "bodyText": "Unwrapped.", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r473175356", "createdAt": "2020-08-19T16:46:49Z", "author": {"login": "djsstarburst"}, "path": "presto-orc/src/main/java/io/prestosql/orc/writer/TimeColumnWriter.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.orc.writer;\n+\n+import io.prestosql.orc.metadata.CompressionKind;\n+import io.prestosql.orc.metadata.OrcColumnId;\n+import io.prestosql.orc.metadata.statistics.LongValueStatisticsBuilder;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.function.Supplier;\n+\n+import static io.prestosql.spi.type.Timestamps.PICOSECONDS_PER_MICROSECOND;\n+\n+public class TimeColumnWriter\n+        extends LongColumnWriter\n+{\n+    public TimeColumnWriter(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE2ODQ3MA=="}, "originalCommit": null, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzYyNTQ1OnYy", "diffSide": "RIGHT", "path": "presto-parquet/src/main/java/io/prestosql/parquet/writer/valuewriter/TimeMicrosValueWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjozNzowOFrOHDP-sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzowMTozNFrOHDRBCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE2OTU4Ng==", "bodyText": "Static import\nWe could inline this above\nlong value = type.getLong(block, i) / PICOSECONDS_PER_MICROSECOND;", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r473169586", "createdAt": "2020-08-19T16:37:08Z", "author": {"login": "electrum"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/writer/valuewriter/TimeMicrosValueWriter.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.parquet.writer.valuewriter;\n+\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.type.Timestamps;\n+import io.prestosql.spi.type.Type;\n+import org.apache.parquet.column.values.ValuesWriter;\n+import org.apache.parquet.schema.PrimitiveType;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class TimeMicrosValueWriter\n+        extends PrimitiveValueWriter\n+{\n+    private final Type type;\n+\n+    public TimeMicrosValueWriter(ValuesWriter valuesWriter, Type type, PrimitiveType parquetType)\n+    {\n+        super(parquetType, valuesWriter);\n+        this.type = requireNonNull(type, \"type is null\");\n+    }\n+\n+    @Override\n+    public void write(Block block)\n+    {\n+        for (int i = 0; i < block.getPositionCount(); i++) {\n+            if (!block.isNull(i)) {\n+                long value = type.getLong(block, i);\n+                long scaledValue = value / Timestamps.PICOSECONDS_PER_MICROSECOND;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4NjU2OQ==", "bodyText": "Inlined.", "url": "https://github.com/trinodb/trino/pull/4536#discussion_r473186569", "createdAt": "2020-08-19T17:01:34Z", "author": {"login": "djsstarburst"}, "path": "presto-parquet/src/main/java/io/prestosql/parquet/writer/valuewriter/TimeMicrosValueWriter.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.parquet.writer.valuewriter;\n+\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.type.Timestamps;\n+import io.prestosql.spi.type.Type;\n+import org.apache.parquet.column.values.ValuesWriter;\n+import org.apache.parquet.schema.PrimitiveType;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class TimeMicrosValueWriter\n+        extends PrimitiveValueWriter\n+{\n+    private final Type type;\n+\n+    public TimeMicrosValueWriter(ValuesWriter valuesWriter, Type type, PrimitiveType parquetType)\n+    {\n+        super(parquetType, valuesWriter);\n+        this.type = requireNonNull(type, \"type is null\");\n+    }\n+\n+    @Override\n+    public void write(Block block)\n+    {\n+        for (int i = 0; i < block.getPositionCount(); i++) {\n+            if (!block.isNull(i)) {\n+                long value = type.getLong(block, i);\n+                long scaledValue = value / Timestamps.PICOSECONDS_PER_MICROSECOND;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE2OTU4Ng=="}, "originalCommit": null, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3727, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}