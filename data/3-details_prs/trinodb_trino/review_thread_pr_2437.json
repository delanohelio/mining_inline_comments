{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwNDc1MDUx", "number": 2437, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxOToxNTozM1rODWpInw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDowNzowN1rODXeBhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MDY5MjE1OnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/WriteFunction.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxOToxNTozM1rOFbhFuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNjoyMzoxMVrOFbr5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM5ODAwOQ==", "bodyText": "I am not sure about it. Now you could reuse existing write functions when you had to implement custom write functions. Now you need to extend all write functions. That was the point of having them separated.\nSame comment goes to read function. However that does hit me.", "url": "https://github.com/trinodb/trino/pull/2437#discussion_r364398009", "createdAt": "2020-01-08T19:15:33Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/WriteFunction.java", "diffHunk": "@@ -13,7 +13,16 @@\n  */\n package io.prestosql.plugin.jdbc;\n \n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+\n public interface WriteFunction\n {\n     Class<?> getJavaType();\n+\n+    default void setNull(PreparedStatement statement, int index)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ2Njk1Mw==", "bodyText": "I hear what you're saying. This makes the interface coherent & simplifies the code. I think this is a good improvement even considered this downside that you mention", "url": "https://github.com/trinodb/trino/pull/2437#discussion_r364466953", "createdAt": "2020-01-08T22:06:47Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/WriteFunction.java", "diffHunk": "@@ -13,7 +13,16 @@\n  */\n package io.prestosql.plugin.jdbc;\n \n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+\n public interface WriteFunction\n {\n     Class<?> getJavaType();\n+\n+    default void setNull(PreparedStatement statement, int index)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM5ODAwOQ=="}, "originalCommit": null, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU3NTAzMw==", "bodyText": "This simplifies the code on side and complicates on the other side. I would expect gains here to be  much lower than loses. ; /", "url": "https://github.com/trinodb/trino/pull/2437#discussion_r364575033", "createdAt": "2020-01-09T06:23:11Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/WriteFunction.java", "diffHunk": "@@ -13,7 +13,16 @@\n  */\n package io.prestosql.plugin.jdbc;\n \n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+\n public interface WriteFunction\n {\n     Class<?> getJavaType();\n+\n+    default void setNull(PreparedStatement statement, int index)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM5ODAwOQ=="}, "originalCommit": null, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTM1NzUxOnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/ReadFunction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDowNzowN1rOFcx7QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDoyODozOFrOFcygLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcyMjQzMw==", "bodyText": "Is there any other way to read null value from JDBC, that you heard of?", "url": "https://github.com/trinodb/trino/pull/2437#discussion_r365722433", "createdAt": "2020-01-13T10:07:07Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/ReadFunction.java", "diffHunk": "@@ -13,10 +13,23 @@\n  */\n package io.prestosql.plugin.jdbc;\n \n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n public interface ReadFunction\n {\n     Class<?> getJavaType();\n \n+    default boolean isNull(ResultSet resultSet, int columnIndex)\n+            throws SQLException\n+    {\n+        // JDBC is kind of dumb: we need to read the field and then ask\n+        // if it was null, which means we are wasting effort here.\n+        // We could save the result of the field access if it matters.\n+        resultSet.getObject(columnIndex);\n+        return resultSet.wasNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26026b6efa4b240e4860c189ed4f87d4e203eee"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTczMTg4Nw==", "bodyText": "Nope :/", "url": "https://github.com/trinodb/trino/pull/2437#discussion_r365731887", "createdAt": "2020-01-13T10:28:38Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/ReadFunction.java", "diffHunk": "@@ -13,10 +13,23 @@\n  */\n package io.prestosql.plugin.jdbc;\n \n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n public interface ReadFunction\n {\n     Class<?> getJavaType();\n \n+    default boolean isNull(ResultSet resultSet, int columnIndex)\n+            throws SQLException\n+    {\n+        // JDBC is kind of dumb: we need to read the field and then ask\n+        // if it was null, which means we are wasting effort here.\n+        // We could save the result of the field access if it matters.\n+        resultSet.getObject(columnIndex);\n+        return resultSet.wasNull();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcyMjQzMw=="}, "originalCommit": {"oid": "f26026b6efa4b240e4860c189ed4f87d4e203eee"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1106, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}