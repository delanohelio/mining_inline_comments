{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4OTc3MDMz", "number": 4862, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjoxOTo0NVrOEhwIxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOToyNzo0NFrOEh0n3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODI3MTQxOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/HostAddress.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjoxOTo0NlrOHPPcHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxOToxMDo1N1rOHpMd7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc0MzY0Nw==", "bodyText": "This is a fairly specific method to add to HostAddress. Let's do this inside SubnetBasedTopology.", "url": "https://github.com/trinodb/trino/pull/4862#discussion_r485743647", "createdAt": "2020-09-09T16:19:46Z", "author": {"login": "electrum"}, "path": "presto-spi/src/main/java/io/prestosql/spi/HostAddress.java", "diffHunk": "@@ -247,6 +247,12 @@ public InetAddress toInetAddress()\n         return InetAddress.getByName(getHostText());\n     }\n \n+    public InetAddress[] getAllInetAddresses()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ5MzU2Nw==", "bodyText": "Could you elaborate on what part seems \"specific\"? Just want to understand it better.\nHostAddress currently has toInetAddress method, which effectively returns getAllInetAddresses()[0], so that one seems even more specific. would you recommend moving that out too?", "url": "https://github.com/trinodb/trino/pull/4862#discussion_r486493567", "createdAt": "2020-09-10T16:55:07Z", "author": {"login": "phd3"}, "path": "presto-spi/src/main/java/io/prestosql/spi/HostAddress.java", "diffHunk": "@@ -247,6 +247,12 @@ public InetAddress toInetAddress()\n         return InetAddress.getByName(getHostText());\n     }\n \n+    public InetAddress[] getAllInetAddresses()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc0MzY0Nw=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1NzkzNA==", "bodyText": "I meant that it is only used in once place, and doesn't seem needed as a shared method. But I didn't realize we already had toInetAddress and this method fits with that, so it now seems fine to add it.\nWe should have it return a List rather than an array, per Effective Java.", "url": "https://github.com/trinodb/trino/pull/4862#discussion_r512957934", "createdAt": "2020-10-27T19:10:57Z", "author": {"login": "electrum"}, "path": "presto-spi/src/main/java/io/prestosql/spi/HostAddress.java", "diffHunk": "@@ -247,6 +247,12 @@ public InetAddress toInetAddress()\n         return InetAddress.getByName(getHostText());\n     }\n \n+    public InetAddress[] getAllInetAddresses()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc0MzY0Nw=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODI3NTgwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/scheduler/SubnetBasedTopology.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjoyMDoyNFrOHPPexQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjoyMDoyNFrOHPPexQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc0NDMyNQ==", "bodyText": "The more common capitalization is IPv4", "url": "https://github.com/trinodb/trino/pull/4862#discussion_r485744325", "createdAt": "2020-09-09T16:20:24Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/execution/scheduler/SubnetBasedTopology.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution.scheduler;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Ordering;\n+import io.prestosql.spi.HostAddress;\n+\n+import javax.inject.Inject;\n+\n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.List;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.execution.scheduler.NetworkLocation.ROOT_LOCATION;\n+import static java.util.Objects.requireNonNull;\n+\n+public class SubnetBasedTopology\n+        implements NetworkTopology\n+{\n+    private final List<byte[]> subnetMasks;\n+    private final AddressProtocol protocol;\n+\n+    @Inject\n+    public SubnetBasedTopology(SubnetTopologyConfig config)\n+    {\n+        this(config.getCidrPrefixLengths(), config.getAddressProtocol());\n+    }\n+\n+    SubnetBasedTopology(List<Integer> cidrPrefixLengths, AddressProtocol protocol)\n+    {\n+        requireNonNull(cidrPrefixLengths, \"cidrPrefixLengths is null\");\n+        requireNonNull(protocol, \"protocol is null\");\n+\n+        validateHierarchy(cidrPrefixLengths, protocol);\n+\n+        this.protocol = protocol;\n+        this.subnetMasks = cidrPrefixLengths.stream()\n+                .map(protocol::computeSubnetMask)\n+                .collect(toImmutableList());\n+    }\n+\n+    @Override\n+    public NetworkLocation locate(HostAddress address)\n+    {\n+        try {\n+            InetAddress inetAddress = protocol.getInetAddress(address.getAllInetAddresses());\n+\n+            if (inetAddress == null) {\n+                return ROOT_LOCATION;\n+            }\n+\n+            byte[] addressBytes = inetAddress.getAddress();\n+            ImmutableList.Builder<String> segments = ImmutableList.builder();\n+\n+            for (byte[] subnetMask : subnetMasks) {\n+                byte[] bytes = applyMask(addressBytes, subnetMask);\n+                segments.add(InetAddress.getByAddress(bytes).getHostAddress());\n+            }\n+\n+            segments.add(inetAddress.getHostAddress());\n+            return new NetworkLocation(segments.build());\n+        }\n+        catch (UnknownHostException e) {\n+            return ROOT_LOCATION;\n+        }\n+    }\n+\n+    private byte[] applyMask(byte[] addressBytes, byte[] subnetMask)\n+    {\n+        int length = subnetMask.length;\n+        byte[] subnet = new byte[length];\n+        for (int i = 0; i < length; i++) {\n+            subnet[i] = (byte) (addressBytes[i] & subnetMask[i]);\n+        }\n+        return subnet;\n+    }\n+\n+    private static void validateHierarchy(List<Integer> lengths, AddressProtocol protocol)\n+    {\n+        if (!Ordering.natural().isStrictlyOrdered(lengths)) {\n+            throw new IllegalArgumentException(\"Subnet hierarchy should be listed in the order of increasing prefix lengths\");\n+        }\n+\n+        if (lengths.size() > 0) {\n+            if (lengths.get(0) <= 0 || Iterables.getLast(lengths) >= protocol.getTotalBitCount()) {\n+                throw new IllegalArgumentException(\"Subnet mask prefix lengths are invalid\");\n+            }\n+        }\n+    }\n+\n+    public enum AddressProtocol\n+    {\n+        IPV4(Inet4Address.class, 32),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODI4MTExOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/scheduler/SubnetBasedTopology.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjoyMToyNlrOHPPiHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjoyMToyNlrOHPPiHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc0NTE4Mw==", "bodyText": "Make this public. No need to be package private -- it's good to allow construction without a config object", "url": "https://github.com/trinodb/trino/pull/4862#discussion_r485745183", "createdAt": "2020-09-09T16:21:26Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/execution/scheduler/SubnetBasedTopology.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution.scheduler;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Ordering;\n+import io.prestosql.spi.HostAddress;\n+\n+import javax.inject.Inject;\n+\n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.List;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.execution.scheduler.NetworkLocation.ROOT_LOCATION;\n+import static java.util.Objects.requireNonNull;\n+\n+public class SubnetBasedTopology\n+        implements NetworkTopology\n+{\n+    private final List<byte[]> subnetMasks;\n+    private final AddressProtocol protocol;\n+\n+    @Inject\n+    public SubnetBasedTopology(SubnetTopologyConfig config)\n+    {\n+        this(config.getCidrPrefixLengths(), config.getAddressProtocol());\n+    }\n+\n+    SubnetBasedTopology(List<Integer> cidrPrefixLengths, AddressProtocol protocol)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODI5NTg2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/scheduler/SubnetBasedTopology.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjoyMzo1NVrOHPPqyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjoyMzo1NVrOHPPqyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc0NzQwMw==", "bodyText": "Use isEmpty()", "url": "https://github.com/trinodb/trino/pull/4862#discussion_r485747403", "createdAt": "2020-09-09T16:23:55Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/execution/scheduler/SubnetBasedTopology.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution.scheduler;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Ordering;\n+import io.prestosql.spi.HostAddress;\n+\n+import javax.inject.Inject;\n+\n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.List;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.execution.scheduler.NetworkLocation.ROOT_LOCATION;\n+import static java.util.Objects.requireNonNull;\n+\n+public class SubnetBasedTopology\n+        implements NetworkTopology\n+{\n+    private final List<byte[]> subnetMasks;\n+    private final AddressProtocol protocol;\n+\n+    @Inject\n+    public SubnetBasedTopology(SubnetTopologyConfig config)\n+    {\n+        this(config.getCidrPrefixLengths(), config.getAddressProtocol());\n+    }\n+\n+    SubnetBasedTopology(List<Integer> cidrPrefixLengths, AddressProtocol protocol)\n+    {\n+        requireNonNull(cidrPrefixLengths, \"cidrPrefixLengths is null\");\n+        requireNonNull(protocol, \"protocol is null\");\n+\n+        validateHierarchy(cidrPrefixLengths, protocol);\n+\n+        this.protocol = protocol;\n+        this.subnetMasks = cidrPrefixLengths.stream()\n+                .map(protocol::computeSubnetMask)\n+                .collect(toImmutableList());\n+    }\n+\n+    @Override\n+    public NetworkLocation locate(HostAddress address)\n+    {\n+        try {\n+            InetAddress inetAddress = protocol.getInetAddress(address.getAllInetAddresses());\n+\n+            if (inetAddress == null) {\n+                return ROOT_LOCATION;\n+            }\n+\n+            byte[] addressBytes = inetAddress.getAddress();\n+            ImmutableList.Builder<String> segments = ImmutableList.builder();\n+\n+            for (byte[] subnetMask : subnetMasks) {\n+                byte[] bytes = applyMask(addressBytes, subnetMask);\n+                segments.add(InetAddress.getByAddress(bytes).getHostAddress());\n+            }\n+\n+            segments.add(inetAddress.getHostAddress());\n+            return new NetworkLocation(segments.build());\n+        }\n+        catch (UnknownHostException e) {\n+            return ROOT_LOCATION;\n+        }\n+    }\n+\n+    private byte[] applyMask(byte[] addressBytes, byte[] subnetMask)\n+    {\n+        int length = subnetMask.length;\n+        byte[] subnet = new byte[length];\n+        for (int i = 0; i < length; i++) {\n+            subnet[i] = (byte) (addressBytes[i] & subnetMask[i]);\n+        }\n+        return subnet;\n+    }\n+\n+    private static void validateHierarchy(List<Integer> lengths, AddressProtocol protocol)\n+    {\n+        if (!Ordering.natural().isStrictlyOrdered(lengths)) {\n+            throw new IllegalArgumentException(\"Subnet hierarchy should be listed in the order of increasing prefix lengths\");\n+        }\n+\n+        if (lengths.size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODg5NzgyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/scheduler/SubnetBasedTopology.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODo1Nzo1MFrOHPVhbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODo1Nzo1MFrOHPVhbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0MzMxMQ==", "bodyText": "You can do this as a stream\nreturn Arrays.stream(inetAddresses)\n        .filter(addressClass::isInstance)\n        .findFirst().orElse(null);", "url": "https://github.com/trinodb/trino/pull/4862#discussion_r485843311", "createdAt": "2020-09-09T18:57:50Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/execution/scheduler/SubnetBasedTopology.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution.scheduler;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Ordering;\n+import io.prestosql.spi.HostAddress;\n+\n+import javax.inject.Inject;\n+\n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.List;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.execution.scheduler.NetworkLocation.ROOT_LOCATION;\n+import static java.util.Objects.requireNonNull;\n+\n+public class SubnetBasedTopology\n+        implements NetworkTopology\n+{\n+    private final List<byte[]> subnetMasks;\n+    private final AddressProtocol protocol;\n+\n+    @Inject\n+    public SubnetBasedTopology(SubnetTopologyConfig config)\n+    {\n+        this(config.getCidrPrefixLengths(), config.getAddressProtocol());\n+    }\n+\n+    SubnetBasedTopology(List<Integer> cidrPrefixLengths, AddressProtocol protocol)\n+    {\n+        requireNonNull(cidrPrefixLengths, \"cidrPrefixLengths is null\");\n+        requireNonNull(protocol, \"protocol is null\");\n+\n+        validateHierarchy(cidrPrefixLengths, protocol);\n+\n+        this.protocol = protocol;\n+        this.subnetMasks = cidrPrefixLengths.stream()\n+                .map(protocol::computeSubnetMask)\n+                .collect(toImmutableList());\n+    }\n+\n+    @Override\n+    public NetworkLocation locate(HostAddress address)\n+    {\n+        try {\n+            InetAddress inetAddress = protocol.getInetAddress(address.getAllInetAddresses());\n+\n+            if (inetAddress == null) {\n+                return ROOT_LOCATION;\n+            }\n+\n+            byte[] addressBytes = inetAddress.getAddress();\n+            ImmutableList.Builder<String> segments = ImmutableList.builder();\n+\n+            for (byte[] subnetMask : subnetMasks) {\n+                byte[] bytes = applyMask(addressBytes, subnetMask);\n+                segments.add(InetAddress.getByAddress(bytes).getHostAddress());\n+            }\n+\n+            segments.add(inetAddress.getHostAddress());\n+            return new NetworkLocation(segments.build());\n+        }\n+        catch (UnknownHostException e) {\n+            return ROOT_LOCATION;\n+        }\n+    }\n+\n+    private byte[] applyMask(byte[] addressBytes, byte[] subnetMask)\n+    {\n+        int length = subnetMask.length;\n+        byte[] subnet = new byte[length];\n+        for (int i = 0; i < length; i++) {\n+            subnet[i] = (byte) (addressBytes[i] & subnetMask[i]);\n+        }\n+        return subnet;\n+    }\n+\n+    private static void validateHierarchy(List<Integer> lengths, AddressProtocol protocol)\n+    {\n+        if (!Ordering.natural().isStrictlyOrdered(lengths)) {\n+            throw new IllegalArgumentException(\"Subnet hierarchy should be listed in the order of increasing prefix lengths\");\n+        }\n+\n+        if (lengths.size() > 0) {\n+            if (lengths.get(0) <= 0 || Iterables.getLast(lengths) >= protocol.getTotalBitCount()) {\n+                throw new IllegalArgumentException(\"Subnet mask prefix lengths are invalid\");\n+            }\n+        }\n+    }\n+\n+    public enum AddressProtocol\n+    {\n+        IPV4(Inet4Address.class, 32),\n+        IPV6(Inet6Address.class, 128);\n+\n+        private final Class<?> addressClass;\n+        private final int totalBitCount;\n+\n+        AddressProtocol(Class<?> addressClass, int totalBitCount)\n+        {\n+            this.addressClass = addressClass;\n+            this.totalBitCount = totalBitCount;\n+        }\n+\n+        int getTotalBitCount()\n+        {\n+            return totalBitCount;\n+        }\n+\n+        byte[] computeSubnetMask(int length)\n+        {\n+            checkArgument(length > 0 && length < getTotalBitCount(), \"Invalid length for subnet mask\");\n+            byte[] mask = new byte[getTotalBitCount() / Byte.SIZE]; // default is zero\n+\n+            for (int i = 0; i < mask.length; i++) {\n+                if (length < Byte.SIZE) {\n+                    int residue = 0;\n+\n+                    while (length > 0) {\n+                        residue += (1 << (8 - length));\n+                        length--;\n+                    }\n+                    mask[i] = (byte) residue;\n+                    break;\n+                }\n+\n+                mask[i] = (byte) 0xff;\n+                length -= Byte.SIZE;\n+            }\n+\n+            return mask;\n+        }\n+\n+        InetAddress getInetAddress(InetAddress[] inetAddresses)\n+        {\n+            for (InetAddress address : inetAddresses) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODk2MzYwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/scheduler/SubnetBasedTopology.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOToxNjo0NFrOHPWJXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjo1NTozNVrOHP9OnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1MzUzMg==", "bodyText": "You can replace this with\nmask[i] = (byte) -(1 << (8 - length)); // set n leading bits", "url": "https://github.com/trinodb/trino/pull/4862#discussion_r485853532", "createdAt": "2020-09-09T19:16:44Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/execution/scheduler/SubnetBasedTopology.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution.scheduler;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Ordering;\n+import io.prestosql.spi.HostAddress;\n+\n+import javax.inject.Inject;\n+\n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.List;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.execution.scheduler.NetworkLocation.ROOT_LOCATION;\n+import static java.util.Objects.requireNonNull;\n+\n+public class SubnetBasedTopology\n+        implements NetworkTopology\n+{\n+    private final List<byte[]> subnetMasks;\n+    private final AddressProtocol protocol;\n+\n+    @Inject\n+    public SubnetBasedTopology(SubnetTopologyConfig config)\n+    {\n+        this(config.getCidrPrefixLengths(), config.getAddressProtocol());\n+    }\n+\n+    SubnetBasedTopology(List<Integer> cidrPrefixLengths, AddressProtocol protocol)\n+    {\n+        requireNonNull(cidrPrefixLengths, \"cidrPrefixLengths is null\");\n+        requireNonNull(protocol, \"protocol is null\");\n+\n+        validateHierarchy(cidrPrefixLengths, protocol);\n+\n+        this.protocol = protocol;\n+        this.subnetMasks = cidrPrefixLengths.stream()\n+                .map(protocol::computeSubnetMask)\n+                .collect(toImmutableList());\n+    }\n+\n+    @Override\n+    public NetworkLocation locate(HostAddress address)\n+    {\n+        try {\n+            InetAddress inetAddress = protocol.getInetAddress(address.getAllInetAddresses());\n+\n+            if (inetAddress == null) {\n+                return ROOT_LOCATION;\n+            }\n+\n+            byte[] addressBytes = inetAddress.getAddress();\n+            ImmutableList.Builder<String> segments = ImmutableList.builder();\n+\n+            for (byte[] subnetMask : subnetMasks) {\n+                byte[] bytes = applyMask(addressBytes, subnetMask);\n+                segments.add(InetAddress.getByAddress(bytes).getHostAddress());\n+            }\n+\n+            segments.add(inetAddress.getHostAddress());\n+            return new NetworkLocation(segments.build());\n+        }\n+        catch (UnknownHostException e) {\n+            return ROOT_LOCATION;\n+        }\n+    }\n+\n+    private byte[] applyMask(byte[] addressBytes, byte[] subnetMask)\n+    {\n+        int length = subnetMask.length;\n+        byte[] subnet = new byte[length];\n+        for (int i = 0; i < length; i++) {\n+            subnet[i] = (byte) (addressBytes[i] & subnetMask[i]);\n+        }\n+        return subnet;\n+    }\n+\n+    private static void validateHierarchy(List<Integer> lengths, AddressProtocol protocol)\n+    {\n+        if (!Ordering.natural().isStrictlyOrdered(lengths)) {\n+            throw new IllegalArgumentException(\"Subnet hierarchy should be listed in the order of increasing prefix lengths\");\n+        }\n+\n+        if (lengths.size() > 0) {\n+            if (lengths.get(0) <= 0 || Iterables.getLast(lengths) >= protocol.getTotalBitCount()) {\n+                throw new IllegalArgumentException(\"Subnet mask prefix lengths are invalid\");\n+            }\n+        }\n+    }\n+\n+    public enum AddressProtocol\n+    {\n+        IPV4(Inet4Address.class, 32),\n+        IPV6(Inet6Address.class, 128);\n+\n+        private final Class<?> addressClass;\n+        private final int totalBitCount;\n+\n+        AddressProtocol(Class<?> addressClass, int totalBitCount)\n+        {\n+            this.addressClass = addressClass;\n+            this.totalBitCount = totalBitCount;\n+        }\n+\n+        int getTotalBitCount()\n+        {\n+            return totalBitCount;\n+        }\n+\n+        byte[] computeSubnetMask(int length)\n+        {\n+            checkArgument(length > 0 && length < getTotalBitCount(), \"Invalid length for subnet mask\");\n+            byte[] mask = new byte[getTotalBitCount() / Byte.SIZE]; // default is zero\n+\n+            for (int i = 0; i < mask.length; i++) {\n+                if (length < Byte.SIZE) {\n+                    int residue = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ5Mzg1Mg==", "bodyText": "thanks, this is neat!", "url": "https://github.com/trinodb/trino/pull/4862#discussion_r486493852", "createdAt": "2020-09-10T16:55:35Z", "author": {"login": "phd3"}, "path": "presto-main/src/main/java/io/prestosql/execution/scheduler/SubnetBasedTopology.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution.scheduler;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Ordering;\n+import io.prestosql.spi.HostAddress;\n+\n+import javax.inject.Inject;\n+\n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.List;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.execution.scheduler.NetworkLocation.ROOT_LOCATION;\n+import static java.util.Objects.requireNonNull;\n+\n+public class SubnetBasedTopology\n+        implements NetworkTopology\n+{\n+    private final List<byte[]> subnetMasks;\n+    private final AddressProtocol protocol;\n+\n+    @Inject\n+    public SubnetBasedTopology(SubnetTopologyConfig config)\n+    {\n+        this(config.getCidrPrefixLengths(), config.getAddressProtocol());\n+    }\n+\n+    SubnetBasedTopology(List<Integer> cidrPrefixLengths, AddressProtocol protocol)\n+    {\n+        requireNonNull(cidrPrefixLengths, \"cidrPrefixLengths is null\");\n+        requireNonNull(protocol, \"protocol is null\");\n+\n+        validateHierarchy(cidrPrefixLengths, protocol);\n+\n+        this.protocol = protocol;\n+        this.subnetMasks = cidrPrefixLengths.stream()\n+                .map(protocol::computeSubnetMask)\n+                .collect(toImmutableList());\n+    }\n+\n+    @Override\n+    public NetworkLocation locate(HostAddress address)\n+    {\n+        try {\n+            InetAddress inetAddress = protocol.getInetAddress(address.getAllInetAddresses());\n+\n+            if (inetAddress == null) {\n+                return ROOT_LOCATION;\n+            }\n+\n+            byte[] addressBytes = inetAddress.getAddress();\n+            ImmutableList.Builder<String> segments = ImmutableList.builder();\n+\n+            for (byte[] subnetMask : subnetMasks) {\n+                byte[] bytes = applyMask(addressBytes, subnetMask);\n+                segments.add(InetAddress.getByAddress(bytes).getHostAddress());\n+            }\n+\n+            segments.add(inetAddress.getHostAddress());\n+            return new NetworkLocation(segments.build());\n+        }\n+        catch (UnknownHostException e) {\n+            return ROOT_LOCATION;\n+        }\n+    }\n+\n+    private byte[] applyMask(byte[] addressBytes, byte[] subnetMask)\n+    {\n+        int length = subnetMask.length;\n+        byte[] subnet = new byte[length];\n+        for (int i = 0; i < length; i++) {\n+            subnet[i] = (byte) (addressBytes[i] & subnetMask[i]);\n+        }\n+        return subnet;\n+    }\n+\n+    private static void validateHierarchy(List<Integer> lengths, AddressProtocol protocol)\n+    {\n+        if (!Ordering.natural().isStrictlyOrdered(lengths)) {\n+            throw new IllegalArgumentException(\"Subnet hierarchy should be listed in the order of increasing prefix lengths\");\n+        }\n+\n+        if (lengths.size() > 0) {\n+            if (lengths.get(0) <= 0 || Iterables.getLast(lengths) >= protocol.getTotalBitCount()) {\n+                throw new IllegalArgumentException(\"Subnet mask prefix lengths are invalid\");\n+            }\n+        }\n+    }\n+\n+    public enum AddressProtocol\n+    {\n+        IPV4(Inet4Address.class, 32),\n+        IPV6(Inet6Address.class, 128);\n+\n+        private final Class<?> addressClass;\n+        private final int totalBitCount;\n+\n+        AddressProtocol(Class<?> addressClass, int totalBitCount)\n+        {\n+            this.addressClass = addressClass;\n+            this.totalBitCount = totalBitCount;\n+        }\n+\n+        int getTotalBitCount()\n+        {\n+            return totalBitCount;\n+        }\n+\n+        byte[] computeSubnetMask(int length)\n+        {\n+            checkArgument(length > 0 && length < getTotalBitCount(), \"Invalid length for subnet mask\");\n+            byte[] mask = new byte[getTotalBitCount() / Byte.SIZE]; // default is zero\n+\n+            for (int i = 0; i < mask.length; i++) {\n+                if (length < Byte.SIZE) {\n+                    int residue = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1MzUzMg=="}, "originalCommit": null, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODk3OTEwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/scheduler/TestSubnetTopology.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOToyMToxM1rOHPWSbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOToyMToxM1rOHPWSbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1NTg1Mw==", "bodyText": "Don't static import fromString since it's not clear from the name alone what it is producing", "url": "https://github.com/trinodb/trino/pull/4862#discussion_r485855853", "createdAt": "2020-09-09T19:21:13Z", "author": {"login": "electrum"}, "path": "presto-main/src/test/java/io/prestosql/execution/scheduler/TestSubnetTopology.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution.scheduler;\n+\n+import com.google.common.collect.ImmutableList;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.execution.scheduler.NetworkLocation.ROOT_LOCATION;\n+import static io.prestosql.execution.scheduler.SubnetBasedTopology.AddressProtocol.IPV4;\n+import static io.prestosql.execution.scheduler.SubnetBasedTopology.AddressProtocol.IPV6;\n+import static io.prestosql.spi.HostAddress.fromString;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertThrows;\n+\n+public class TestSubnetTopology\n+{\n+    @Test\n+    public void testSubnetTopologyIpv4()\n+    {\n+        SubnetBasedTopology topology = new SubnetBasedTopology(ImmutableList.of(24, 25, 27), IPV4);\n+        assertEquals(\n+                topology.locate(fromString(\"192.168.0.172\")),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTAwNjM2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/scheduler/SubnetBasedTopology.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOToyNzo0NFrOHPWitg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOToyNzo0NFrOHPWitg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg2MDAyMg==", "bodyText": "You might want to use InetAddresses.toAddrString() here, so that you get correctly formatted IPv6 addresses.", "url": "https://github.com/trinodb/trino/pull/4862#discussion_r485860022", "createdAt": "2020-09-09T19:27:44Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/execution/scheduler/SubnetBasedTopology.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution.scheduler;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Ordering;\n+import io.prestosql.spi.HostAddress;\n+\n+import javax.inject.Inject;\n+\n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.List;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.execution.scheduler.NetworkLocation.ROOT_LOCATION;\n+import static java.util.Objects.requireNonNull;\n+\n+public class SubnetBasedTopology\n+        implements NetworkTopology\n+{\n+    private final List<byte[]> subnetMasks;\n+    private final AddressProtocol protocol;\n+\n+    @Inject\n+    public SubnetBasedTopology(SubnetTopologyConfig config)\n+    {\n+        this(config.getCidrPrefixLengths(), config.getAddressProtocol());\n+    }\n+\n+    SubnetBasedTopology(List<Integer> cidrPrefixLengths, AddressProtocol protocol)\n+    {\n+        requireNonNull(cidrPrefixLengths, \"cidrPrefixLengths is null\");\n+        requireNonNull(protocol, \"protocol is null\");\n+\n+        validateHierarchy(cidrPrefixLengths, protocol);\n+\n+        this.protocol = protocol;\n+        this.subnetMasks = cidrPrefixLengths.stream()\n+                .map(protocol::computeSubnetMask)\n+                .collect(toImmutableList());\n+    }\n+\n+    @Override\n+    public NetworkLocation locate(HostAddress address)\n+    {\n+        try {\n+            InetAddress inetAddress = protocol.getInetAddress(address.getAllInetAddresses());\n+\n+            if (inetAddress == null) {\n+                return ROOT_LOCATION;\n+            }\n+\n+            byte[] addressBytes = inetAddress.getAddress();\n+            ImmutableList.Builder<String> segments = ImmutableList.builder();\n+\n+            for (byte[] subnetMask : subnetMasks) {\n+                byte[] bytes = applyMask(addressBytes, subnetMask);\n+                segments.add(InetAddress.getByAddress(bytes).getHostAddress());\n+            }\n+\n+            segments.add(inetAddress.getHostAddress());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3492, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}