{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MTk1Mjcz", "number": 4617, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNjoyNzo0NVrOETHK7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDozNDo1MFrOEUje6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDc1ODg3OnYy", "diffSide": "RIGHT", "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixTableProperties.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNjoyNzo0NVrOG4qUww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMDoxOToxNlrOG5yZXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2Njg4Mw==", "bodyText": "Can we use Optional.ofNullable", "url": "https://github.com/trinodb/trino/pull/4617#discussion_r462066883", "createdAt": "2020-07-29T06:27:45Z", "author": {"login": "Praveen2112"}, "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixTableProperties.java", "diffHunk": "@@ -232,6 +238,17 @@ public PhoenixTableProperties()\n         return Optional.of(value);\n     }\n \n+    public static Optional<String> getDataBlockEncoding(Map<String, Object> tableProperties)\n+    {\n+        requireNonNull(tableProperties);\n+\n+        String value = (String) tableProperties.get(DATA_BLOCK_ENCODING);\n+        if (value == null) {\n+            return Optional.empty();\n+        }\n+        return Optional.of(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI0NzcxMA==", "bodyText": "I fixed all the occurrences here, as that just seemed right and no functional change at all.", "url": "https://github.com/trinodb/trino/pull/4617#discussion_r463247710", "createdAt": "2020-07-30T20:19:16Z", "author": {"login": "lhofhansl"}, "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixTableProperties.java", "diffHunk": "@@ -232,6 +238,17 @@ public PhoenixTableProperties()\n         return Optional.of(value);\n     }\n \n+    public static Optional<String> getDataBlockEncoding(Map<String, Object> tableProperties)\n+    {\n+        requireNonNull(tableProperties);\n+\n+        String value = (String) tableProperties.get(DATA_BLOCK_ENCODING);\n+        if (value == null) {\n+            return Optional.empty();\n+        }\n+        return Optional.of(value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2Njg4Mw=="}, "originalCommit": null, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDc3OTc0OnYy", "diffSide": "RIGHT", "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixTableProperties.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNjozNTozMVrOG4qgrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMDoxOTo1NlrOG5yaog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2OTkzNA==", "bodyText": "Can we have a enum property for this like we define STORAGE_FORMAT_PROPERTY for HiveTableProperties", "url": "https://github.com/trinodb/trino/pull/4617#discussion_r462069934", "createdAt": "2020-07-29T06:35:31Z", "author": {"login": "Praveen2112"}, "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixTableProperties.java", "diffHunk": "@@ -109,6 +110,11 @@ public PhoenixTableProperties()\n                         TTL,\n                         \"Number of seconds for cell TTL.  HBase will automatically delete rows once the expiration time is reached.\",\n                         null,\n+                        false),\n+                stringProperty(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM5MTM2NQ==", "bodyText": "In both cases I just followed the existing code. I think if we change that, it is for all other parts too, and then we're mixing concerns of PRs.", "url": "https://github.com/trinodb/trino/pull/4617#discussion_r462391365", "createdAt": "2020-07-29T15:32:24Z", "author": {"login": "lhofhansl"}, "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixTableProperties.java", "diffHunk": "@@ -109,6 +110,11 @@ public PhoenixTableProperties()\n                         TTL,\n                         \"Number of seconds for cell TTL.  HBase will automatically delete rows once the expiration time is reached.\",\n                         null,\n+                        false),\n+                stringProperty(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2OTkzNA=="}, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1Njg0OA==", "bodyText": "Let me know if you want me to fix all the other instances as well in this PR or file a separate one.", "url": "https://github.com/trinodb/trino/pull/4617#discussion_r462656848", "createdAt": "2020-07-30T00:01:10Z", "author": {"login": "lhofhansl"}, "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixTableProperties.java", "diffHunk": "@@ -109,6 +110,11 @@ public PhoenixTableProperties()\n                         TTL,\n                         \"Number of seconds for cell TTL.  HBase will automatically delete rows once the expiration time is reached.\",\n                         null,\n+                        false),\n+                stringProperty(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2OTkzNA=="}, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE4Mzg1OA==", "bodyText": "It would be better if we could fix all the other instances also. Maybe we can have s separate PR for them ?", "url": "https://github.com/trinodb/trino/pull/4617#discussion_r463183858", "createdAt": "2020-07-30T18:16:22Z", "author": {"login": "Praveen2112"}, "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixTableProperties.java", "diffHunk": "@@ -109,6 +110,11 @@ public PhoenixTableProperties()\n                         TTL,\n                         \"Number of seconds for cell TTL.  HBase will automatically delete rows once the expiration time is reached.\",\n                         null,\n+                        false),\n+                stringProperty(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2OTkzNA=="}, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI0ODAzNA==", "bodyText": "I fixed the Optional use below. The property list change should be a separate PR IMHO.", "url": "https://github.com/trinodb/trino/pull/4617#discussion_r463248034", "createdAt": "2020-07-30T20:19:56Z", "author": {"login": "lhofhansl"}, "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixTableProperties.java", "diffHunk": "@@ -109,6 +110,11 @@ public PhoenixTableProperties()\n                         TTL,\n                         \"Number of seconds for cell TTL.  HBase will automatically delete rows once the expiration time is reached.\",\n                         null,\n+                        false),\n+                stringProperty(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2OTkzNA=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjUyNTQ1OnYy", "diffSide": "LEFT", "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixTableProperties.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMTozNToxNlrOG50qKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOTo1NjoxNVrOG6UWcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI4NDc3Ng==", "bodyText": "Can we capture them in a separate commit ?", "url": "https://github.com/trinodb/trino/pull/4617#discussion_r463284776", "createdAt": "2020-07-30T21:35:16Z", "author": {"login": "Praveen2112"}, "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixTableProperties.java", "diffHunk": "@@ -160,86 +158,70 @@ public PhoenixTableProperties()\n         requireNonNull(tableProperties);\n \n         Boolean value = (Boolean) tableProperties.get(DISABLE_WAL);\n-        if (value == null) {\n-            return Optional.empty();\n-        }\n-        return Optional.of(value);\n+        return Optional.ofNullable(value);\n     }\n \n     public static Optional<Boolean> getImmutableRows(Map<String, Object> tableProperties)\n     {\n         requireNonNull(tableProperties);\n \n         Boolean value = (Boolean) tableProperties.get(IMMUTABLE_ROWS);\n-        if (value == null) {\n-            return Optional.empty();\n-        }\n-        return Optional.of(value);\n+        return Optional.ofNullable(value);\n     }\n \n     public static Optional<String> getDefaultColumnFamily(Map<String, Object> tableProperties)\n     {\n         requireNonNull(tableProperties);\n \n         String value = (String) tableProperties.get(DEFAULT_COLUMN_FAMILY);\n-        if (value == null) {\n-            return Optional.empty();\n-        }\n-        return Optional.of(value);\n+        return Optional.ofNullable(value);\n     }\n \n     public static Optional<String> getBloomfilter(Map<String, Object> tableProperties)\n     {\n         requireNonNull(tableProperties);\n \n         String value = (String) tableProperties.get(BLOOMFILTER);\n-        if (value == null) {\n-            return Optional.empty();\n-        }\n-        return Optional.of(value);\n+        return Optional.ofNullable(value);\n     }\n \n     public static Optional<Integer> getVersions(Map<String, Object> tableProperties)\n     {\n         requireNonNull(tableProperties);\n \n         Integer value = (Integer) tableProperties.get(VERSIONS);\n-        if (value == null) {\n-            return Optional.empty();\n-        }\n-        return Optional.of(value);\n+        return Optional.ofNullable(value);\n     }\n \n     public static Optional<Integer> getMinVersions(Map<String, Object> tableProperties)\n     {\n         requireNonNull(tableProperties);\n \n         Integer value = (Integer) tableProperties.get(MIN_VERSIONS);\n-        if (value == null) {\n-            return Optional.empty();\n-        }\n-        return Optional.of(value);\n+        return Optional.ofNullable(value);\n     }\n \n     public static Optional<String> getCompression(Map<String, Object> tableProperties)\n     {\n         requireNonNull(tableProperties);\n \n         String value = (String) tableProperties.get(COMPRESSION);\n-        if (value == null) {\n-            return Optional.empty();\n-        }\n-        return Optional.of(value);\n+        return Optional.ofNullable(value);\n+    }\n+\n+    public static Optional<String> getDataBlockEncoding(Map<String, Object> tableProperties)\n+    {\n+        requireNonNull(tableProperties);\n+\n+        String value = (String) tableProperties.get(DATA_BLOCK_ENCODING);\n+        return Optional.ofNullable(value);\n     }\n \n     public static Optional<Integer> getTimeToLive(Map<String, Object> tableProperties)\n     {\n         requireNonNull(tableProperties);\n \n         Integer value = (Integer) tableProperties.get(TTL);\n-        if (value == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwNDAxNg==", "bodyText": "Then let's do separate PRs. I'll undo this change, and just make sure the new code uses ofNullable.\nWhat about the documentation fixes. Maybe it's best to separate the fix for the Bloomfilter doc as well.", "url": "https://github.com/trinodb/trino/pull/4617#discussion_r463804016", "createdAt": "2020-07-31T19:56:15Z", "author": {"login": "lhofhansl"}, "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixTableProperties.java", "diffHunk": "@@ -160,86 +158,70 @@ public PhoenixTableProperties()\n         requireNonNull(tableProperties);\n \n         Boolean value = (Boolean) tableProperties.get(DISABLE_WAL);\n-        if (value == null) {\n-            return Optional.empty();\n-        }\n-        return Optional.of(value);\n+        return Optional.ofNullable(value);\n     }\n \n     public static Optional<Boolean> getImmutableRows(Map<String, Object> tableProperties)\n     {\n         requireNonNull(tableProperties);\n \n         Boolean value = (Boolean) tableProperties.get(IMMUTABLE_ROWS);\n-        if (value == null) {\n-            return Optional.empty();\n-        }\n-        return Optional.of(value);\n+        return Optional.ofNullable(value);\n     }\n \n     public static Optional<String> getDefaultColumnFamily(Map<String, Object> tableProperties)\n     {\n         requireNonNull(tableProperties);\n \n         String value = (String) tableProperties.get(DEFAULT_COLUMN_FAMILY);\n-        if (value == null) {\n-            return Optional.empty();\n-        }\n-        return Optional.of(value);\n+        return Optional.ofNullable(value);\n     }\n \n     public static Optional<String> getBloomfilter(Map<String, Object> tableProperties)\n     {\n         requireNonNull(tableProperties);\n \n         String value = (String) tableProperties.get(BLOOMFILTER);\n-        if (value == null) {\n-            return Optional.empty();\n-        }\n-        return Optional.of(value);\n+        return Optional.ofNullable(value);\n     }\n \n     public static Optional<Integer> getVersions(Map<String, Object> tableProperties)\n     {\n         requireNonNull(tableProperties);\n \n         Integer value = (Integer) tableProperties.get(VERSIONS);\n-        if (value == null) {\n-            return Optional.empty();\n-        }\n-        return Optional.of(value);\n+        return Optional.ofNullable(value);\n     }\n \n     public static Optional<Integer> getMinVersions(Map<String, Object> tableProperties)\n     {\n         requireNonNull(tableProperties);\n \n         Integer value = (Integer) tableProperties.get(MIN_VERSIONS);\n-        if (value == null) {\n-            return Optional.empty();\n-        }\n-        return Optional.of(value);\n+        return Optional.ofNullable(value);\n     }\n \n     public static Optional<String> getCompression(Map<String, Object> tableProperties)\n     {\n         requireNonNull(tableProperties);\n \n         String value = (String) tableProperties.get(COMPRESSION);\n-        if (value == null) {\n-            return Optional.empty();\n-        }\n-        return Optional.of(value);\n+        return Optional.ofNullable(value);\n+    }\n+\n+    public static Optional<String> getDataBlockEncoding(Map<String, Object> tableProperties)\n+    {\n+        requireNonNull(tableProperties);\n+\n+        String value = (String) tableProperties.get(DATA_BLOCK_ENCODING);\n+        return Optional.ofNullable(value);\n     }\n \n     public static Optional<Integer> getTimeToLive(Map<String, Object> tableProperties)\n     {\n         requireNonNull(tableProperties);\n \n         Integer value = (Integer) tableProperties.get(TTL);\n-        if (value == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI4NDc3Ng=="}, "originalCommit": null, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTg4MzMxOnYy", "diffSide": "RIGHT", "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixTableProperties.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDozNDo1MFrOG60kAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMDoyMDowNFrOG7Hamw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzMTc3OQ==", "bodyText": "Did we miss None and PREFIX_TREE encoding technique ?", "url": "https://github.com/trinodb/trino/pull/4617#discussion_r464331779", "createdAt": "2020-08-03T10:34:50Z", "author": {"login": "Praveen2112"}, "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixTableProperties.java", "diffHunk": "@@ -109,6 +110,11 @@ public PhoenixTableProperties()\n                         TTL,\n                         \"Number of seconds for cell TTL.  HBase will automatically delete rows once the expiration time is reached.\",\n                         null,\n+                        false),\n+                stringProperty(\n+                        DATA_BLOCK_ENCODING,\n+                        \"The block encoding algorithm to use for Cells in HBase blocks. Options are: PREFIX, DIFF, FAST_DIFF, ROW_INDEX_V1, and others.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzMjU0OA==", "bodyText": "Can we add the same in the doc too", "url": "https://github.com/trinodb/trino/pull/4617#discussion_r464332548", "createdAt": "2020-08-03T10:36:35Z", "author": {"login": "Praveen2112"}, "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixTableProperties.java", "diffHunk": "@@ -109,6 +110,11 @@ public PhoenixTableProperties()\n                         TTL,\n                         \"Number of seconds for cell TTL.  HBase will automatically delete rows once the expiration time is reached.\",\n                         null,\n+                        false),\n+                stringProperty(\n+                        DATA_BLOCK_ENCODING,\n+                        \"The block encoding algorithm to use for Cells in HBase blocks. Options are: PREFIX, DIFF, FAST_DIFF, ROW_INDEX_V1, and others.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzMTc3OQ=="}, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYzNjgzNg==", "bodyText": "PREFIX_TREE is not finished in HBase, nobody should use it.\nAnd there really is no reason to use PREFIX or DIFF (since FAST_DIFF is better and faster than both).\nYep. None is missing. And also, yes, it should consistent with the documentation.", "url": "https://github.com/trinodb/trino/pull/4617#discussion_r464636836", "createdAt": "2020-08-03T20:11:27Z", "author": {"login": "lhofhansl"}, "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixTableProperties.java", "diffHunk": "@@ -109,6 +110,11 @@ public PhoenixTableProperties()\n                         TTL,\n                         \"Number of seconds for cell TTL.  HBase will automatically delete rows once the expiration time is reached.\",\n                         null,\n+                        false),\n+                stringProperty(\n+                        DATA_BLOCK_ENCODING,\n+                        \"The block encoding algorithm to use for Cells in HBase blocks. Options are: PREFIX, DIFF, FAST_DIFF, ROW_INDEX_V1, and others.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzMTc3OQ=="}, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY0MDY2Nw==", "bodyText": "Updated.", "url": "https://github.com/trinodb/trino/pull/4617#discussion_r464640667", "createdAt": "2020-08-03T20:20:04Z", "author": {"login": "lhofhansl"}, "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixTableProperties.java", "diffHunk": "@@ -109,6 +110,11 @@ public PhoenixTableProperties()\n                         TTL,\n                         \"Number of seconds for cell TTL.  HBase will automatically delete rows once the expiration time is reached.\",\n                         null,\n+                        false),\n+                stringProperty(\n+                        DATA_BLOCK_ENCODING,\n+                        \"The block encoding algorithm to use for Cells in HBase blocks. Options are: PREFIX, DIFF, FAST_DIFF, ROW_INDEX_V1, and others.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzMTc3OQ=="}, "originalCommit": null, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3538, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}