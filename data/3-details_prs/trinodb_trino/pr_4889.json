{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNDU4NjA0", "number": 4889, "title": "Refactor ABFS tests to be more extensible", "bodyText": "This is the refactoring and additional tests added in preparation for #5052 supporting a new authentication method for ABFS.", "createdAt": "2020-08-19T21:10:39Z", "url": "https://github.com/trinodb/trino/pull/4889", "merged": true, "mergeCommit": {"oid": "cbabd272806e04aeba6df613e7bc995ba79cc00a"}, "closed": true, "closedAt": "2020-09-17T11:21:25Z", "author": {"login": "jirassimok"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEyGDkABqjM3MTc0OTc1NzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdI5Vd8ABqjM3NjUyNDA3NTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "a2b42c13a9b567bb15c0337c78b930e1ddc01af8", "author": {"user": {"login": "jirassimok", "name": "Jacob Ilias Komissar"}}, "url": "https://github.com/trinodb/trino/commit/a2b42c13a9b567bb15c0337c78b930e1ddc01af8", "committedDate": "2020-09-09T15:39:54Z", "message": "Add tests for PrestoAzureConfigurationInitializer"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a2b42c13a9b567bb15c0337c78b930e1ddc01af8", "author": {"user": {"login": "jirassimok", "name": "Jacob Ilias Komissar"}}, "url": "https://github.com/trinodb/trino/commit/a2b42c13a9b567bb15c0337c78b930e1ddc01af8", "committedDate": "2020-09-09T15:39:54Z", "message": "Add tests for PrestoAzureConfigurationInitializer"}, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NDY1NDc4", "url": "https://github.com/trinodb/trino/pull/4889#pullrequestreview-485465478", "createdAt": "2020-09-09T23:19:32Z", "commit": {"oid": "5a65ddf606cb6befe3fc3e68945adb193eef437b"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzoxOTozMlrOHPddqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzozNjo0MFrOHPdyDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3MzQxNg==", "bodyText": "Private helper methods should go after public methods", "url": "https://github.com/trinodb/trino/pull/4889#discussion_r485973416", "createdAt": "2020-09-09T23:19:32Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/azure/PrestoAzureConfigurationInitializer.java", "diffHunk": "@@ -36,39 +36,37 @@\n     private final Optional<String> abfsAccessKey;\n     private final Optional<String> abfsStorageAccount;\n \n+    private static Optional<String> dropEmpty(Optional<String> optional)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a65ddf606cb6befe3fc3e68945adb193eef437b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3MzU4OA==", "bodyText": "Don't end messages in a period, unless there are multiple sentences", "url": "https://github.com/trinodb/trino/pull/4889#discussion_r485973588", "createdAt": "2020-09-09T23:20:07Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/azure/PrestoAzureConfigurationInitializer.java", "diffHunk": "@@ -36,39 +36,37 @@\n     private final Optional<String> abfsAccessKey;\n     private final Optional<String> abfsStorageAccount;\n \n+    private static Optional<String> dropEmpty(Optional<String> optional)\n+    {\n+        return optional.filter(value -> !value.isEmpty());\n+    }\n+\n     @Inject\n-    public PrestoAzureConfigurationInitializer(HiveAzureConfig hiveAzureConfig)\n+    public PrestoAzureConfigurationInitializer(HiveAzureConfig config)\n     {\n-        this.wasbAccessKey = hiveAzureConfig.getWasbAccessKey();\n-        this.wasbStorageAccount = hiveAzureConfig.getWasbStorageAccount();\n+        this.wasbAccessKey = dropEmpty(config.getWasbAccessKey());\n+        this.wasbStorageAccount = dropEmpty(config.getWasbStorageAccount());\n         if (wasbAccessKey.isPresent() || wasbStorageAccount.isPresent()) {\n             checkArgument(\n-                    wasbAccessKey.isPresent() && !wasbAccessKey.get().isEmpty(),\n-                    \"hive.azure.wasb-storage-account is set, but hive.azure.wasb-access-key is not\");\n-            checkArgument(\n-                    wasbStorageAccount.isPresent() && !wasbStorageAccount.get().isEmpty(),\n-                    \"hive.azure.wasb-access-key is set, but hive.azure.wasb-storage-account is not\");\n+                    wasbAccessKey.isPresent() && wasbStorageAccount.isPresent(),\n+                    \"If WASB storage account or access key is set, both must be set.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a65ddf606cb6befe3fc3e68945adb193eef437b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3NDU5Ng==", "bodyText": "This indentation seems off. Probably better not to wrap here", "url": "https://github.com/trinodb/trino/pull/4889#discussion_r485974596", "createdAt": "2020-09-09T23:23:11Z", "author": {"login": "electrum"}, "path": "presto-hive-hadoop2/bin/common.sh", "diffHunk": "@@ -142,3 +142,54 @@ function get_hive_major_version() {\n     fi\n     echo \"${version}\"\n }\n+\n+# $1 = base URI for table names\n+function create_test_tables() {\n+    local table_name table_path\n+    local base_path=\"${1:?create_test_tables requires an argument}\"\n+    base_path=\"${base_path%/}\" # remove trailing slash\n+\n+    table_name=\"presto_test_external_fs\"\n+    table_path=\"$base_path/$table_name/\"\n+    exec_in_hadoop_master_container hadoop fs -mkdir -p \"${table_path}\"\n+    exec_in_hadoop_master_container hadoop fs -copyFromLocal -f /docker/files/test_table.csv{,.gz,.bz2,.lz4} \"${table_path}\"\n+    exec_in_hadoop_master_container /usr/bin/hive -e \"CREATE EXTERNAL TABLE $table_name(t_bigint bigint) LOCATION '${table_path}'\"\n+\n+    table_name=\"presto_test_external_fs_with_header\"\n+    table_path=\"$base_path/$table_name/\"\n+    exec_in_hadoop_master_container hadoop fs -mkdir -p \"${table_path}\"\n+    exec_in_hadoop_master_container hadoop fs -copyFromLocal -f /docker/files/test_table_with_header.csv{,.gz,.bz2,.lz4} \"${table_path}\"\n+    exec_in_hadoop_master_container /usr/bin/hive -e \"\n+        CREATE EXTERNAL TABLE $table_name(t_bigint bigint)\n+        STORED AS TEXTFILE\n+        LOCATION '${table_path}'\n+        TBLPROPERTIES ('skip.header.line.count'='1')\"\n+\n+    table_name=\"presto_test_external_fs_with_header_and_footer\"\n+    table_path=\"$base_path/$table_name/\"\n+    exec_in_hadoop_master_container hadoop fs -mkdir -p \"${table_path}\"\n+    exec_in_hadoop_master_container hadoop fs -copyFromLocal -f /docker/files/test_table_with_header_and_footer.csv{,.gz,.bz2,.lz4} \"${table_path}\"\n+    exec_in_hadoop_master_container /usr/bin/hive -e \"\n+        CREATE EXTERNAL TABLE $table_name(t_bigint bigint)\n+        STORED AS TEXTFILE\n+        LOCATION '${table_path}'\n+        TBLPROPERTIES ('skip.header.line.count'='2', 'skip.footer.line.count'='2')\"\n+}\n+\n+# $1 = basename of core-site.xml template\n+# other arguments are names of variables to substitute in the file\n+function deploy_core_site_xml() {\n+    local template=\"${1:?deploy_core_site_xml expects at least one argument}\"\n+    shift\n+    local args=()\n+    local name value\n+    for name; do\n+        shift\n+        value=\"${!name//\\\\/\\\\\\\\}\" # escape \\ as \\\\\n+        value=\"${value//|/\\\\|}\" # escape | as \\|\n+        args+=(-e \"s|%$name%|$value|g\")\n+    done\n+    exec_in_hadoop_master_container bash -c '\n+        sed \"${@:2}\" \"/docker/files/$1\" > /etc/hadoop/conf/core-site.xml' \\\n+                                    bash \"$template\" \"${args[@]}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3NDk4MQ==", "bodyText": "Wrap the environment variables to be consistent", "url": "https://github.com/trinodb/trino/pull/4889#discussion_r485974981", "createdAt": "2020-09-09T23:24:24Z", "author": {"login": "electrum"}, "path": "presto-hive-hadoop2/bin/run_hive_abfs_tests.sh", "diffHunk": "@@ -12,43 +12,16 @@ cleanup_hadoop_docker_containers\n start_hadoop_docker_containers\n \n test_directory=\"$(date '+%Y%m%d-%H%M%S')-$(uuidgen | sha1sum | cut -b 1-6)\"\n-test_root=\"abfs://${ABFS_CONTAINER}@${ABFS_ACCOUNT}.dfs.core.windows.net/${test_directory}\"\n \n # insert Azure credentials\n # TODO replace core-site.xml.abfs-template with apply-site-xml-override.sh\n-exec_in_hadoop_master_container cp /docker/files/core-site.xml.abfs-template /etc/hadoop/conf/core-site.xml\n-exec_in_hadoop_master_container sed -i \\\n-    -e \"s|%ABFS_ACCESS_KEY%|${ABFS_ACCESS_KEY}|g\" \\\n-    -e \"s|%ABFS_ACCOUNT%|${ABFS_ACCOUNT}|g\" \\\n-    /etc/hadoop/conf/core-site.xml\n+deploy_core_site_xml core-site.xml.abfs-template ABFS_ACCESS_KEY ABFS_ACCOUNT", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3NTQxNw==", "bodyText": "I'm not even sure what this comment means. Let's remove it everywhere.", "url": "https://github.com/trinodb/trino/pull/4889#discussion_r485975417", "createdAt": "2020-09-09T23:25:51Z", "author": {"login": "electrum"}, "path": "presto-hive-hadoop2/bin/run_hive_abfs_tests.sh", "diffHunk": "@@ -12,43 +12,16 @@ cleanup_hadoop_docker_containers\n start_hadoop_docker_containers\n \n test_directory=\"$(date '+%Y%m%d-%H%M%S')-$(uuidgen | sha1sum | cut -b 1-6)\"\n-test_root=\"abfs://${ABFS_CONTAINER}@${ABFS_ACCOUNT}.dfs.core.windows.net/${test_directory}\"\n \n # insert Azure credentials\n # TODO replace core-site.xml.abfs-template with apply-site-xml-override.sh", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3NjYwNA==", "bodyText": "Static import getValidConfigurationMetadata and format like\ngetValidConfigurationMetadata(HiveAzureConfig.class).getAttributes().values().stream()\n        .map(AttributeMetadata::getInjectionPoint)\n        .collect(toMap(InjectionPointMetaData::getProperty, InjectionPointMetaData::getSetter));", "url": "https://github.com/trinodb/trino/pull/4889#discussion_r485976604", "createdAt": "2020-09-09T23:29:44Z", "author": {"login": "electrum"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/azure/TestPrestoAzureConfigurationInitializer.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.azure;\n+\n+import io.airlift.configuration.ConfigurationMetadata;\n+import io.airlift.configuration.ConfigurationMetadata.AttributeMetadata;\n+import io.airlift.configuration.ConfigurationMetadata.InjectionPointMetaData;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.Method;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static com.google.common.collect.Sets.combinations;\n+import static org.testng.Assert.assertThrows;\n+import static org.testng.Assert.fail;\n+\n+public class TestPrestoAzureConfigurationInitializer\n+{\n+    /**\n+     * Map from presto config property names to the corresponding\n+     * {@link HiveAzureConfig} setter method. Use via {@link #toConfig}.\n+     */\n+    private static final Map<String, Method> PROPERTY_SETTERS =\n+            ConfigurationMetadata.getValidConfigurationMetadata(HiveAzureConfig.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3Njc2Mg==", "bodyText": "This is constant so it should be uppercase", "url": "https://github.com/trinodb/trino/pull/4889#discussion_r485976762", "createdAt": "2020-09-09T23:30:13Z", "author": {"login": "electrum"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/azure/TestPrestoAzureConfigurationInitializer.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.azure;\n+\n+import io.airlift.configuration.ConfigurationMetadata;\n+import io.airlift.configuration.ConfigurationMetadata.AttributeMetadata;\n+import io.airlift.configuration.ConfigurationMetadata.InjectionPointMetaData;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.Method;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static com.google.common.collect.Sets.combinations;\n+import static org.testng.Assert.assertThrows;\n+import static org.testng.Assert.fail;\n+\n+public class TestPrestoAzureConfigurationInitializer\n+{\n+    /**\n+     * Map from presto config property names to the corresponding\n+     * {@link HiveAzureConfig} setter method. Use via {@link #toConfig}.\n+     */\n+    private static final Map<String, Method> PROPERTY_SETTERS =\n+            ConfigurationMetadata.getValidConfigurationMetadata(HiveAzureConfig.class)\n+                    .getAttributes()\n+                    .values()\n+                    .stream()\n+                    .map(AttributeMetadata::getInjectionPoint)\n+                    .collect(Collectors.toMap(\n+                            InjectionPointMetaData::getProperty,\n+                            InjectionPointMetaData::getSetter));\n+\n+    private static final Set<Set<String>> propertyGroups = Set.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3NjgzMQ==", "bodyText": "Name it property. There should a space between [] and {", "url": "https://github.com/trinodb/trino/pull/4889#discussion_r485976831", "createdAt": "2020-09-09T23:30:27Z", "author": {"login": "electrum"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/azure/TestPrestoAzureConfigurationInitializer.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.azure;\n+\n+import io.airlift.configuration.ConfigurationMetadata;\n+import io.airlift.configuration.ConfigurationMetadata.AttributeMetadata;\n+import io.airlift.configuration.ConfigurationMetadata.InjectionPointMetaData;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.Method;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static com.google.common.collect.Sets.combinations;\n+import static org.testng.Assert.assertThrows;\n+import static org.testng.Assert.fail;\n+\n+public class TestPrestoAzureConfigurationInitializer\n+{\n+    /**\n+     * Map from presto config property names to the corresponding\n+     * {@link HiveAzureConfig} setter method. Use via {@link #toConfig}.\n+     */\n+    private static final Map<String, Method> PROPERTY_SETTERS =\n+            ConfigurationMetadata.getValidConfigurationMetadata(HiveAzureConfig.class)\n+                    .getAttributes()\n+                    .values()\n+                    .stream()\n+                    .map(AttributeMetadata::getInjectionPoint)\n+                    .collect(Collectors.toMap(\n+                            InjectionPointMetaData::getProperty,\n+                            InjectionPointMetaData::getSetter));\n+\n+    private static final Set<Set<String>> propertyGroups = Set.of(\n+            Set.of(\n+                    \"hive.azure.abfs-storage-account\",\n+                    \"hive.azure.abfs-access-key\"),\n+            Set.of(\n+                    \"hive.azure.wasb-storage-account\",\n+                    \"hive.azure.wasb-access-key\"),\n+            Set.of(\n+                    \"hive.azure.adl-client-id\",\n+                    \"hive.azure.adl-credential\",\n+                    \"hive.azure.adl-refresh-url\"));\n+\n+    @DataProvider(parallel = true)\n+    public Iterator<Object[]> propertyGroups()\n+    {\n+        return propertyGroups.stream().map(p -> new Object[]{p}).iterator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3NzM0Ng==", "bodyText": "Avoid using var here since the type is not clear.", "url": "https://github.com/trinodb/trino/pull/4889#discussion_r485977346", "createdAt": "2020-09-09T23:32:21Z", "author": {"login": "electrum"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/azure/TestPrestoAzureConfigurationInitializer.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.azure;\n+\n+import io.airlift.configuration.ConfigurationMetadata;\n+import io.airlift.configuration.ConfigurationMetadata.AttributeMetadata;\n+import io.airlift.configuration.ConfigurationMetadata.InjectionPointMetaData;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.Method;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static com.google.common.collect.Sets.combinations;\n+import static org.testng.Assert.assertThrows;\n+import static org.testng.Assert.fail;\n+\n+public class TestPrestoAzureConfigurationInitializer\n+{\n+    /**\n+     * Map from presto config property names to the corresponding\n+     * {@link HiveAzureConfig} setter method. Use via {@link #toConfig}.\n+     */\n+    private static final Map<String, Method> PROPERTY_SETTERS =\n+            ConfigurationMetadata.getValidConfigurationMetadata(HiveAzureConfig.class)\n+                    .getAttributes()\n+                    .values()\n+                    .stream()\n+                    .map(AttributeMetadata::getInjectionPoint)\n+                    .collect(Collectors.toMap(\n+                            InjectionPointMetaData::getProperty,\n+                            InjectionPointMetaData::getSetter));\n+\n+    private static final Set<Set<String>> propertyGroups = Set.of(\n+            Set.of(\n+                    \"hive.azure.abfs-storage-account\",\n+                    \"hive.azure.abfs-access-key\"),\n+            Set.of(\n+                    \"hive.azure.wasb-storage-account\",\n+                    \"hive.azure.wasb-access-key\"),\n+            Set.of(\n+                    \"hive.azure.adl-client-id\",\n+                    \"hive.azure.adl-credential\",\n+                    \"hive.azure.adl-refresh-url\"));\n+\n+    @DataProvider(parallel = true)\n+    public Iterator<Object[]> propertyGroups()\n+    {\n+        return propertyGroups.stream().map(p -> new Object[]{p}).iterator();\n+    }\n+\n+    @Test(dataProvider = \"propertyGroups\")\n+    public void testPropertyGroups(Set<String> properties)\n+    {\n+        var config = toConfig(properties);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3NzcyMQ==", "bodyText": "No need for try/catch since the test will fail anyway if it throws", "url": "https://github.com/trinodb/trino/pull/4889#discussion_r485977721", "createdAt": "2020-09-09T23:33:45Z", "author": {"login": "electrum"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/azure/TestPrestoAzureConfigurationInitializer.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.azure;\n+\n+import io.airlift.configuration.ConfigurationMetadata;\n+import io.airlift.configuration.ConfigurationMetadata.AttributeMetadata;\n+import io.airlift.configuration.ConfigurationMetadata.InjectionPointMetaData;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.Method;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static com.google.common.collect.Sets.combinations;\n+import static org.testng.Assert.assertThrows;\n+import static org.testng.Assert.fail;\n+\n+public class TestPrestoAzureConfigurationInitializer\n+{\n+    /**\n+     * Map from presto config property names to the corresponding\n+     * {@link HiveAzureConfig} setter method. Use via {@link #toConfig}.\n+     */\n+    private static final Map<String, Method> PROPERTY_SETTERS =\n+            ConfigurationMetadata.getValidConfigurationMetadata(HiveAzureConfig.class)\n+                    .getAttributes()\n+                    .values()\n+                    .stream()\n+                    .map(AttributeMetadata::getInjectionPoint)\n+                    .collect(Collectors.toMap(\n+                            InjectionPointMetaData::getProperty,\n+                            InjectionPointMetaData::getSetter));\n+\n+    private static final Set<Set<String>> propertyGroups = Set.of(\n+            Set.of(\n+                    \"hive.azure.abfs-storage-account\",\n+                    \"hive.azure.abfs-access-key\"),\n+            Set.of(\n+                    \"hive.azure.wasb-storage-account\",\n+                    \"hive.azure.wasb-access-key\"),\n+            Set.of(\n+                    \"hive.azure.adl-client-id\",\n+                    \"hive.azure.adl-credential\",\n+                    \"hive.azure.adl-refresh-url\"));\n+\n+    @DataProvider(parallel = true)\n+    public Iterator<Object[]> propertyGroups()\n+    {\n+        return propertyGroups.stream().map(p -> new Object[]{p}).iterator();\n+    }\n+\n+    @Test(dataProvider = \"propertyGroups\")\n+    public void testPropertyGroups(Set<String> properties)\n+    {\n+        var config = toConfig(properties);\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3ODYzNg==", "bodyText": "While clever, this whole class is hard to read, hard to tell what it's doing, and hard to tell that it's correct. Test code should be a simple and clear as possible. Avoiding redundancy is not a goal. The fact that we're basically writing a framework to reflectively call methods says that this is too complicated.", "url": "https://github.com/trinodb/trino/pull/4889#discussion_r485978636", "createdAt": "2020-09-09T23:36:40Z", "author": {"login": "electrum"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/azure/TestPrestoAzureConfigurationInitializer.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.azure;\n+\n+import io.airlift.configuration.ConfigurationMetadata;\n+import io.airlift.configuration.ConfigurationMetadata.AttributeMetadata;\n+import io.airlift.configuration.ConfigurationMetadata.InjectionPointMetaData;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.Method;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static com.google.common.collect.Sets.combinations;\n+import static org.testng.Assert.assertThrows;\n+import static org.testng.Assert.fail;\n+\n+public class TestPrestoAzureConfigurationInitializer", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1ODY2Mzk1", "url": "https://github.com/trinodb/trino/pull/4889#pullrequestreview-485866395", "createdAt": "2020-09-10T12:15:13Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d395e71a24a3035e9f509adedaa8b2507c508a0f", "author": {"user": {"login": "jirassimok", "name": "Jacob Ilias Komissar"}}, "url": "https://github.com/trinodb/trino/commit/d395e71a24a3035e9f509adedaa8b2507c508a0f", "committedDate": "2020-09-11T00:10:18Z", "message": "Clean up PrestoAzureConfigurationInitializer\n\n- Rename 'hiveAzureConfig' parameter to 'config'\n- Add method to convert empty strings to empty optionals\n- Make error messages more uniform"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ff97f9db2eea5faaa87d74fe51ce4177c743992", "author": {"user": {"login": "jirassimok", "name": "Jacob Ilias Komissar"}}, "url": "https://github.com/trinodb/trino/commit/3ff97f9db2eea5faaa87d74fe51ce4177c743992", "committedDate": "2020-09-11T00:10:22Z", "message": "Fix indentation and line continuations in hive test scripts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "c25aa63a2abfc55a94eef76d7309e202bfb26f4c", "author": {"user": {"login": "jirassimok", "name": "Jacob Ilias Komissar"}}, "url": "https://github.com/trinodb/trino/commit/c25aa63a2abfc55a94eef76d7309e202bfb26f4c", "committedDate": "2020-09-11T03:06:29Z", "message": "Add tests for PrestoAzureConfigurationInitializer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60ec5d357a3244bf846b3af1ffc957c8961959f9", "author": {"user": {"login": "jirassimok", "name": "Jacob Ilias Komissar"}}, "url": "https://github.com/trinodb/trino/commit/60ec5d357a3244bf846b3af1ffc957c8961959f9", "committedDate": "2020-09-14T20:35:32Z", "message": "Share more setup code between hive test scripts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c843802bbb92b0a90b0f40e8d20d19d88816c17b", "author": {"user": {"login": "jirassimok", "name": "Jacob Ilias Komissar"}}, "url": "https://github.com/trinodb/trino/commit/c843802bbb92b0a90b0f40e8d20d19d88816c17b", "committedDate": "2020-09-14T20:35:36Z", "message": "Rename ABFS tests as ABFS access key tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "baf442855b324212544bece9e46cce164db7bdc6", "author": {"user": {"login": "jirassimok", "name": "Jacob Ilias Komissar"}}, "url": "https://github.com/trinodb/trino/commit/baf442855b324212544bece9e46cce164db7bdc6", "committedDate": "2020-09-14T20:35:36Z", "message": "Add superclass for tests using different ABFS authentication methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34fa1a12644d866099520cdd026b9217a785918b", "author": {"user": {"login": "jirassimok", "name": "Jacob Ilias Komissar"}}, "url": "https://github.com/trinodb/trino/commit/34fa1a12644d866099520cdd026b9217a785918b", "committedDate": "2020-09-14T20:35:36Z", "message": "Move TestHiveAzureConfig to azure package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "989a130f5f58391397425ea8993a1ecf53562d88", "author": {"user": {"login": "jirassimok", "name": "Jacob Ilias Komissar"}}, "url": "https://github.com/trinodb/trino/commit/989a130f5f58391397425ea8993a1ecf53562d88", "committedDate": "2020-09-14T20:35:36Z", "message": "Add tests for PrestoAzureConfigurationInitializer"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c25aa63a2abfc55a94eef76d7309e202bfb26f4c", "author": {"user": {"login": "jirassimok", "name": "Jacob Ilias Komissar"}}, "url": "https://github.com/trinodb/trino/commit/c25aa63a2abfc55a94eef76d7309e202bfb26f4c", "committedDate": "2020-09-11T03:06:29Z", "message": "Add tests for PrestoAzureConfigurationInitializer"}, "afterCommit": {"oid": "989a130f5f58391397425ea8993a1ecf53562d88", "author": {"user": {"login": "jirassimok", "name": "Jacob Ilias Komissar"}}, "url": "https://github.com/trinodb/trino/commit/989a130f5f58391397425ea8993a1ecf53562d88", "committedDate": "2020-09-14T20:35:36Z", "message": "Add tests for PrestoAzureConfigurationInitializer"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4457, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}