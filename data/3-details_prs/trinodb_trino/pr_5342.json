{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0Nzc5MzM1", "number": 5342, "title": "Improve time/timestamp/timestamp with time zone handling in PostgreSQL connector", "bodyText": "Fixes #5371", "createdAt": "2020-09-29T12:03:26Z", "url": "https://github.com/trinodb/trino/pull/5342", "merged": true, "mergeCommit": {"oid": "fbd4ca7f6ca1326a077fd06cd33b687cbfe17cf2"}, "closed": true, "closedAt": "2020-10-01T18:17:50Z", "author": {"login": "findepi"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdNm-CIAH2gAyNDk0Nzc5MzM1OjQ4YTlmN2M3ZjgzOGI5MWI1NjdlMGE5MmM3ODNkNmE4M2I4ODI5MzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOCvnwAFqTQ5OTc4MzExOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "48a9f7c7f838b91b567e0a92c783d6a83b882931", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/48a9f7c7f838b91b567e0a92c783d6a83b882931", "committedDate": "2020-09-29T12:02:24Z", "message": "Pass session to setup too"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ca78db571ba2c78a55989bcaf6679544c820622", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/9ca78db571ba2c78a55989bcaf6679544c820622", "committedDate": "2020-09-29T12:02:25Z", "message": "Use shortcut method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e8a0bf6837d0f9ce5d98b892bc45792cdd86c01", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/2e8a0bf6837d0f9ce5d98b892bc45792cdd86c01", "committedDate": "2020-09-29T12:02:26Z", "message": "Add temporal data tests with INSERT in Presto"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NDM2Njg0", "url": "https://github.com/trinodb/trino/pull/5342#pullrequestreview-498436684", "createdAt": "2020-09-29T12:55:27Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjo1NToyN1rOHZru4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjo1NToyN1rOHZru4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY5Mjk2Mg==", "bodyText": "The commit message should say about timestamp with time zone\nNVM. I cant read", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r496692962", "createdAt": "2020-09-29T12:55:27Z", "author": {"login": "losipiuk"}, "path": "presto-postgresql/src/main/java/io/prestosql/plugin/postgresql/PostgreSqlClient.java", "diffHunk": "@@ -463,15 +463,16 @@ public WriteMapping toWriteMapping(ConnectorSession session, Type type)\n             verify(timestampType.getPrecision() > TimestampType.MAX_SHORT_PRECISION);\n             return WriteMapping.objectMapping(format(\"timestamp(%s)\", MAX_SUPPORTED_TIMESTAMP_PRECISION), longTimestampWriteFunction());\n         }\n-        if (type instanceof TimestampWithTimeZoneType && ((TimestampWithTimeZoneType) type).getPrecision() <= MAX_SUPPORTED_TIMESTAMP_PRECISION) {\n-            int precision = ((TimestampWithTimeZoneType) type).getPrecision();\n-            String postgresType = format(\"timestamptz(%d)\", precision);\n-            if (precision <= TimestampWithTimeZoneType.MAX_SHORT_PRECISION) {\n-                return WriteMapping.longMapping(postgresType, shortTimestampWithTimeZoneWriteFunction());\n-            }\n-            else {\n-                return WriteMapping.objectMapping(postgresType, longTimestampWithTimeZoneWriteFunction());\n+        if (type instanceof TimestampWithTimeZoneType) {\n+            TimestampWithTimeZoneType timestampWithTimeZoneType = (TimestampWithTimeZoneType) type;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NDM3OTAw", "url": "https://github.com/trinodb/trino/pull/5342#pullrequestreview-498437900", "createdAt": "2020-09-29T12:56:45Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NDk1MzEz", "url": "https://github.com/trinodb/trino/pull/5342#pullrequestreview-498495313", "createdAt": "2020-09-29T13:54:15Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzo1NDoxNlrOHZuZqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDowNDowMVrOHZu4Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjczNjY4MA==", "bodyText": "Use a constant?", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r496736680", "createdAt": "2020-09-29T13:54:16Z", "author": {"login": "aalbu"}, "path": "presto-postgresql/src/main/java/io/prestosql/plugin/postgresql/PostgreSqlClient.java", "diffHunk": "@@ -499,15 +515,68 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n         return true;\n     }\n \n+    private static ColumnMapping timeColumnMapping(int precision)\n+    {\n+        verify(precision <= 6);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc0MDk3OQ==", "bodyText": "Why not nanosOfDay = 0 (since in Presto 24:00:00 == 00:00:00)?", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r496740979", "createdAt": "2020-09-29T13:59:33Z", "author": {"login": "aalbu"}, "path": "presto-postgresql/src/main/java/io/prestosql/plugin/postgresql/PostgreSqlClient.java", "diffHunk": "@@ -499,15 +515,68 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n         return true;\n     }\n \n+    private static ColumnMapping timeColumnMapping(int precision)\n+    {\n+        verify(precision <= 6);\n+        return ColumnMapping.longMapping(\n+                createTimeType(precision),\n+                (resultSet, columnIndex) -> {\n+                    LocalTime time = resultSet.getObject(columnIndex, LocalTime.class);\n+                    long nanosOfDay = time.toNanoOfDay();\n+                    if (nanosOfDay == NANOSECONDS_PER_DAY - 1) {\n+                        // PostgreSQL's 24:00:00 is returned as 23:59:59.999999999, regardless of column precision\n+                        nanosOfDay = NANOSECONDS_PER_DAY - LongMath.pow(10, 9 - precision);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc0NDU0Mw==", "bodyText": "Constant?", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r496744543", "createdAt": "2020-09-29T14:04:01Z", "author": {"login": "aalbu"}, "path": "presto-postgresql/src/main/java/io/prestosql/plugin/postgresql/PostgreSqlClient.java", "diffHunk": "@@ -499,15 +515,68 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n         return true;\n     }\n \n+    private static ColumnMapping timeColumnMapping(int precision)\n+    {\n+        verify(precision <= 6);\n+        return ColumnMapping.longMapping(\n+                createTimeType(precision),\n+                (resultSet, columnIndex) -> {\n+                    LocalTime time = resultSet.getObject(columnIndex, LocalTime.class);\n+                    long nanosOfDay = time.toNanoOfDay();\n+                    if (nanosOfDay == NANOSECONDS_PER_DAY - 1) {\n+                        // PostgreSQL's 24:00:00 is returned as 23:59:59.999999999, regardless of column precision\n+                        nanosOfDay = NANOSECONDS_PER_DAY - LongMath.pow(10, 9 - precision);\n+                    }\n+\n+                    long picosOfDay = nanosOfDay * PICOSECONDS_PER_NANOSECOND;\n+                    return round(picosOfDay, 12 - precision);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 142}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4OTk3ODE5", "url": "https://github.com/trinodb/trino/pull/5342#pullrequestreview-498997819", "createdAt": "2020-09-29T23:42:12Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMzo0MjoxM1rOHaHeCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDoyOTo0NVrOHaJYZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE0NzQwMA==", "bodyText": "I'm confused by this. This ensures that precision is no larger than the max supported precision, but the else branch proceeds to handle timestamps with larger precision than that. Are the supported or not?", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r497147400", "createdAt": "2020-09-29T23:42:13Z", "author": {"login": "martint"}, "path": "presto-postgresql/src/main/java/io/prestosql/plugin/postgresql/PostgreSqlClient.java", "diffHunk": "@@ -444,9 +446,14 @@ public WriteMapping toWriteMapping(ConnectorSession session, Type type)\n         if (TIME.equals(type)) {\n             return WriteMapping.longMapping(\"time\", timeWriteFunction());\n         }\n-        if (type instanceof TimestampType && ((TimestampType) type).getPrecision() <= MAX_SUPPORTED_TIMESTAMP_PRECISION) {\n+        if (type instanceof TimestampType) {\n             TimestampType timestampType = (TimestampType) type;\n-            return WriteMapping.longMapping(format(\"timestamp(%s)\", timestampType.getPrecision()), timestampWriteFunction(timestampType));\n+            if (timestampType.getPrecision() <= MAX_SUPPORTED_TIMESTAMP_PRECISION) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE1Mzk5Mg==", "bodyText": "with timestamp precision higher than expressible with {@code LocalDateTime}.\n\nInaccurate comment? Most of the tests below use precisions that fit within LocalDateTime precision.", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r497153992", "createdAt": "2020-09-29T23:51:31Z", "author": {"login": "martint"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -1052,6 +1058,59 @@ public void testTimestamp(boolean insertWithPresto, ZoneId sessionZone)\n         }\n     }\n \n+    /**\n+     * Additional test supplementing {@link #testTimestamp} with timestamp precision higher than expressible with {@code LocalDateTime}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE2MjcyMg==", "bodyText": "Is this the value returned by PostgresSQL's JDBC driver or are we somehow changing it on the connector side?", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r497162722", "createdAt": "2020-09-30T00:04:26Z", "author": {"login": "martint"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -1010,6 +1011,51 @@ public void testTime(boolean insertWithPresto, ZoneId sessionZone)\n         }\n     }\n \n+    @Test\n+    public void testTime24()\n+    {\n+        try (TestTable testTable = new TestTable(\n+                new JdbcSqlExecutor(postgreSqlServer.getJdbcUrl()),\n+                \"tpch.test_time_24\",\n+                \"(a time(0), b time(3), c time(6))\",\n+                List.of(\n+                        // \"zero\" row\n+                        \"TIME '00:00:00', TIME '00:00:00.000', TIME '00:00:00.000000'\",\n+                        // \"max\" row\n+                        \"TIME '23:59:59', TIME '23:59:59.999', TIME '23:59:59.999999'\",\n+                        // \"24\" row\n+                        \"TIME '24:00:00', TIME '24:00:00.000', TIME '24:00:00.000000'\"))) {\n+            // select\n+            assertThat(query(\"SELECT a, b, c FROM \" + testTable.getName()))\n+                    .matches(\"VALUES \" +\n+                            \"(TIME '00:00:00.000', TIME '00:00:00.000', TIME '00:00:00.000'), \" +\n+                            \"(TIME '23:59:59.000', TIME '23:59:59.999', TIME '23:59:59.999'), \" +\n+                            \"(TIME '23:59:59.999', TIME '23:59:59.999', TIME '23:59:59.999')\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE2Mzc5OQ==", "bodyText": "checkArgument?", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r497163799", "createdAt": "2020-09-30T00:05:54Z", "author": {"login": "martint"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/StandardColumnMappings.java", "diffHunk": "@@ -350,36 +351,31 @@ private static Time toSqlTime(LocalTime localTime)\n         return new Time(Time.valueOf(localTime).getTime() + NANOSECONDS.toMillis(localTime.getNano()));\n     }\n \n-    public static ColumnMapping timeColumnMapping()\n+    public static ColumnMapping timeColumnMapping(TimeType timeType)\n     {\n+        verify(timeType.getPrecision() <= 9, \"Unsupported type precision: %s\", timeType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE3MjY2Nw==", "bodyText": "For later... we should fix this test to not use testTimestampDataProvider. Timezones don't play a role in TIME type, so we don't need to do any checks for gaps or different timezones.", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r497172667", "createdAt": "2020-09-30T00:18:56Z", "author": {"login": "martint"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -974,28 +974,35 @@ public void testEnum()\n         }\n     }\n \n+    /**\n+     * @see #testTimeCoercion\n+     */\n     @Test(dataProvider = \"testTimestampDataProvider\")\n     public void testTime(boolean insertWithPresto, ZoneId sessionZone)\n     {\n         LocalTime timeGapInJvmZone = LocalTime.of(0, 12, 34, 567_000_000);\n         checkIsGap(jvmZone, timeGapInJvmZone.atDate(EPOCH_DAY));\n \n         DataTypeTest tests = DataTypeTest.create()\n-                .addRoundTrip(timeDataType(), LocalTime.of(1, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(2, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(2, 12, 34, 1_000_000))\n-                .addRoundTrip(timeDataType(), LocalTime.of(3, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(4, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(5, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(6, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(9, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(10, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(15, 12, 34, 567_000_000))\n-                .addRoundTrip(timeDataType(), LocalTime.of(23, 59, 59, 999_000_000));\n-\n-        // epoch is also a gap in JVM zone\n-        tests.addRoundTrip(timeDataType(), epoch.toLocalTime());\n-        tests.addRoundTrip(timeDataType(), timeGapInJvmZone);\n+                .addRoundTrip(timeDataType(0), LocalTime.of(1, 12, 34, 0))\n+                .addRoundTrip(timeDataType(1), LocalTime.of(2, 12, 34, 100_000_000))\n+                .addRoundTrip(timeDataType(2), LocalTime.of(2, 12, 34, 10_000_000))\n+                .addRoundTrip(timeDataType(3), LocalTime.of(2, 12, 34, 1_000_000))\n+                .addRoundTrip(timeDataType(3), LocalTime.of(3, 12, 34, 0))\n+                .addRoundTrip(timeDataType(4), LocalTime.of(4, 12, 34, 0))\n+                .addRoundTrip(timeDataType(5), LocalTime.of(5, 12, 34, 0))\n+                .addRoundTrip(timeDataType(5), LocalTime.of(6, 12, 34, 0))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(9, 12, 34, 0))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(10, 12, 34, 0))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(15, 12, 34, 567_000_000))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(23, 59, 59, 0))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(23, 59, 59, 999_000_000))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(23, 59, 59, 999_900_000))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(23, 59, 59, 999_990_000))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(23, 59, 59, 999_999_000))\n+                // epoch is also a gap in JVM zone", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE3NTQ1MA==", "bodyText": "\"instead of\". Also, are PgObject and PGobject different things? I couldn't find any class named PgObject", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r497175450", "createdAt": "2020-09-30T00:22:56Z", "author": {"login": "martint"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -1011,6 +1018,86 @@ public void testTime(boolean insertWithPresto, ZoneId sessionZone)\n         }\n     }\n \n+    /**\n+     * Additional test supplementing {@link #testTime} with timestamp precision higher than expressible with {@code LocalTime}.\n+     *\n+     * @see #testTime\n+     */\n+    @Test\n+    public void testTimeCoercion()\n+            throws SQLException\n+    {\n+        testCreateTableAsAndInsertConsistency(\"TIME '00:00:00'\", \"TIME '00:00:00'\");\n+        testCreateTableAsAndInsertConsistency(\"TIME '00:00:00.000000'\", \"TIME '00:00:00.000000'\");\n+        testCreateTableAsAndInsertConsistency(\"TIME '00:00:00.123456'\", \"TIME '00:00:00.123456'\");\n+        testCreateTableAsAndInsertConsistency(\"TIME '12:34:56'\", \"TIME '12:34:56'\");\n+        testCreateTableAsAndInsertConsistency(\"TIME '12:34:56.123456'\", \"TIME '12:34:56.123456'\");\n+\n+        // Cases which require using PgObject instead if PGobject with PostgreSQL JDBC driver", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE3NzE4MQ==", "bodyText": "This seems unrelated to supporting time(p) in postgresql", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r497177181", "createdAt": "2020-09-30T00:25:26Z", "author": {"login": "martint"}, "path": "presto-testing/src/test/java/io/prestosql/testing/datatype/TestDataType.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.testing.datatype;\n+\n+import org.testng.annotations.Test;\n+\n+import java.time.LocalTime;\n+\n+import static io.prestosql.testing.datatype.DataType.timeDataType;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestDataType\n+{\n+    @Test\n+    public void testTimeDataType()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE3ODcyNw==", "bodyText": "Same comment as elsewhere regarding accuracy of this text.", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r497178727", "createdAt": "2020-09-30T00:29:45Z", "author": {"login": "martint"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -1368,13 +1371,56 @@ public void testTimestampWithTimeZone(boolean insertWithPresto)\n         }\n     }\n \n+    /**\n+     * Additional test supplementing {@link #testTimestampWithTimeZone} with timestamp with time zone precision higher than expressible with {@code LocalDateTime}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ff8b7034b08f2a5934816de45fa7e6cb7a3d5be", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/3ff8b7034b08f2a5934816de45fa7e6cb7a3d5be", "committedDate": "2020-09-30T20:00:58Z", "message": "Support CTAS with timestamp(>6) in PostgreSQL"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62b78de04bd72b416bfe1dcf5f93bba81c89c996", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/62b78de04bd72b416bfe1dcf5f93bba81c89c996", "committedDate": "2020-09-30T20:00:58Z", "message": "Add explicit test for PostgreSQL TIME 24"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0b20516a96cabe11903725136a6a6b54e26b67b", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/c0b20516a96cabe11903725136a6a6b54e26b67b", "committedDate": "2020-09-30T20:22:30Z", "message": "Support time(p) in PostgreSQL"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef7cccf8fe85fe5e900a28a1d2b6f876169e7f84", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/ef7cccf8fe85fe5e900a28a1d2b6f876169e7f84", "committedDate": "2020-09-30T20:22:30Z", "message": "Fix rounding in long timestamptz to long timestamptz cast"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "345ccb27f631561aee60d1139219a7ce1d4a1182", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/345ccb27f631561aee60d1139219a7ce1d4a1182", "committedDate": "2020-09-30T20:22:31Z", "message": "Support CTAS with timestamp(>6) with time zone in PostgreSQL"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "345ccb27f631561aee60d1139219a7ce1d4a1182", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/345ccb27f631561aee60d1139219a7ce1d4a1182", "committedDate": "2020-09-30T20:22:31Z", "message": "Support CTAS with timestamp(>6) with time zone in PostgreSQL"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NzgzMTE5", "url": "https://github.com/trinodb/trino/pull/5342#pullrequestreview-499783119", "createdAt": "2020-09-30T20:24:01Z", "commit": {"oid": "345ccb27f631561aee60d1139219a7ce1d4a1182"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3497, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}