{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NzU1ODcy", "number": 3523, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQyMDoyMTowNFrOD2LWqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQyMTowNzoyM1rOD2LyMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MTM1NzIzOnYy", "diffSide": "LEFT", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapAuthenticator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQyMDoyMTowNFrOGL56uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQyMDoyMTowNFrOGL56uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTEzNjQ0Mw==", "bodyText": "Copy this to the common Credential class, but without password in toString output", "url": "https://github.com/trinodb/trino/pull/3523#discussion_r415136443", "createdAt": "2020-04-25T20:21:04Z", "author": {"login": "findepi"}, "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapAuthenticator.java", "diffHunk": "@@ -294,57 +293,4 @@ private static String replaceUser(String pattern, String user)\n     {\n         return pattern.replace(\"${USER}\", user);\n     }\n-\n-    private static class Credentials\n-    {\n-        private final String user;\n-        private final String password;\n-\n-        private Credentials(String user, String password)\n-        {\n-            this.user = requireNonNull(user);\n-            this.password = requireNonNull(password);\n-        }\n-\n-        public String getUser()\n-        {\n-            return user;\n-        }\n-\n-        public String getPassword()\n-        {\n-            return password;\n-        }\n-\n-        @Override\n-        public boolean equals(Object o)\n-        {\n-            if (this == o) {\n-                return true;\n-            }\n-            if (o == null || getClass() != o.getClass()) {\n-                return false;\n-            }\n-\n-            Credentials that = (Credentials) o;\n-\n-            return Objects.equals(this.user, that.user) &&\n-                    Objects.equals(this.password, that.password);\n-        }\n-\n-        @Override\n-        public int hashCode()\n-        {\n-            return Objects.hash(user, password);\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            return toStringHelper(this)\n-                    .add(\"user\", user)\n-                    .add(\"password\", password)\n-                    .toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MTM1ODM0OnYy", "diffSide": "RIGHT", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapAuthenticator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQyMDoyMTozOFrOGL57Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQyMDoyMTozOFrOGL57Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTEzNjU2Mw==", "bodyText": "break line\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    checkArgument(!bindDistinguishedName.isPresent() || groupAuthorizationSearchPattern.isPresent(),\n          \n          \n            \n                    checkArgument(\n          \n          \n            \n                        !bindDistinguishedName.isPresent() || groupAuthorizationSearchPattern.isPresent(),", "url": "https://github.com/trinodb/trino/pull/3523#discussion_r415136563", "createdAt": "2020-04-25T20:21:38Z", "author": {"login": "findepi"}, "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapAuthenticator.java", "diffHunk": "@@ -80,32 +79,25 @@ public LdapAuthenticator(LdapConfig ldapConfig)\n         this.ignoreReferrals = ldapConfig.isIgnoreReferrals();\n \n         if (groupAuthorizationSearchPattern.isPresent()) {\n-            checkState(userBaseDistinguishedName.isPresent(), \"Base distinguished name (DN) for user is null\");\n+            checkArgument(userBaseDistinguishedName.isPresent(), \"Base distinguished name (DN) for user is null\");\n         }\n-        checkState(bindDistinguishedName.isPresent() == bindPassword.isPresent(),\n-                \"Both or none bind distinguished name and bind password must be provided\");\n-        checkState(\n-                !bindDistinguishedName.isPresent() || groupAuthorizationSearchPattern.isPresent(),\n-                \"Group authorization search pattern must be provided when bind distinguished name is not used\");\n-        checkState(bindDistinguishedName.isPresent() || userBindSearchPattern.isPresent(),\n+        checkArgument(bindDistinguishedName.isPresent() == bindPassword.isPresent(),\n+                \"Both bind distinguished name and bind password must be provided together\");\n+        checkArgument(!bindDistinguishedName.isPresent() || groupAuthorizationSearchPattern.isPresent(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MTM1ODkxOnYy", "diffSide": "RIGHT", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapAuthenticator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQyMDoyMjowMVrOGL57dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQyMDoyMjowMVrOGL57dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTEzNjYyOQ==", "bodyText": "break line", "url": "https://github.com/trinodb/trino/pull/3523#discussion_r415136629", "createdAt": "2020-04-25T20:22:01Z", "author": {"login": "findepi"}, "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapAuthenticator.java", "diffHunk": "@@ -80,32 +79,25 @@ public LdapAuthenticator(LdapConfig ldapConfig)\n         this.ignoreReferrals = ldapConfig.isIgnoreReferrals();\n \n         if (groupAuthorizationSearchPattern.isPresent()) {\n-            checkState(userBaseDistinguishedName.isPresent(), \"Base distinguished name (DN) for user is null\");\n+            checkArgument(userBaseDistinguishedName.isPresent(), \"Base distinguished name (DN) for user is null\");\n         }\n-        checkState(bindDistinguishedName.isPresent() == bindPassword.isPresent(),\n-                \"Both or none bind distinguished name and bind password must be provided\");\n-        checkState(\n-                !bindDistinguishedName.isPresent() || groupAuthorizationSearchPattern.isPresent(),\n-                \"Group authorization search pattern must be provided when bind distinguished name is not used\");\n-        checkState(bindDistinguishedName.isPresent() || userBindSearchPattern.isPresent(),\n+        checkArgument(bindDistinguishedName.isPresent() == bindPassword.isPresent(),\n+                \"Both bind distinguished name and bind password must be provided together\");\n+        checkArgument(!bindDistinguishedName.isPresent() || groupAuthorizationSearchPattern.isPresent(),\n+                \"Group authorization search pattern must be provided when bind distinguished name is used\");\n+        checkArgument(bindDistinguishedName.isPresent() || userBindSearchPattern.isPresent(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MTM4NDU1OnYy", "diffSide": "RIGHT", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapAuthenticator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQyMDozOTowNVrOGL6GwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQyMzowNjoyM1rOGMLYkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTEzOTUyMQ==", "bodyText": "I prefer the previous version because naked .get triggers a warning in IDE (Java | Probable bugs | Optional.get() is called without isPresent() check).", "url": "https://github.com/trinodb/trino/pull/3523#discussion_r415139521", "createdAt": "2020-04-25T20:39:05Z", "author": {"login": "findepi"}, "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapAuthenticator.java", "diffHunk": "@@ -248,7 +240,7 @@ private String validateGroupMembership(String user, DirContext context)\n     private NamingEnumeration<SearchResult> searchGroupMembership(String user, DirContext context)\n             throws NamingException\n     {\n-        String userBase = userBaseDistinguishedName.orElseThrow(VerifyException::new);\n+        String userBase = userBaseDistinguishedName.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQyMjYwOQ==", "bodyText": "I agree, but we have several other raw get() calls here, so it seems better to be consistent. Hiding it in this way is kind of a code smell -- it would be better to see if the code can be structured to avoid this. Maybe by creating some helper classes to hold the state.\nIn Java 10+, get() should be replaced with orElseThrow() to be explicit.", "url": "https://github.com/trinodb/trino/pull/3523#discussion_r415422609", "createdAt": "2020-04-26T23:06:23Z", "author": {"login": "electrum"}, "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapAuthenticator.java", "diffHunk": "@@ -248,7 +240,7 @@ private String validateGroupMembership(String user, DirContext context)\n     private NamingEnumeration<SearchResult> searchGroupMembership(String user, DirContext context)\n             throws NamingException\n     {\n-        String userBase = userBaseDistinguishedName.orElseThrow(VerifyException::new);\n+        String userBase = userBaseDistinguishedName.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTEzOTUyMQ=="}, "originalCommit": null, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MTM5NzA1OnYy", "diffSide": "RIGHT", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapConfig.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQyMDo0Njo1N1rOGL6MUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjo0NTo0OVrOGMTSwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE0MDk0Nw==", "bodyText": "ldap.tls.truststore-path would be consistent with elasticsearch.tls.truststore-path or cassandra.tls.truststore-path\nshould we have a truststore-password too?", "url": "https://github.com/trinodb/trino/pull/3523#discussion_r415140947", "createdAt": "2020-04-25T20:46:57Z", "author": {"login": "findepi"}, "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapConfig.java", "diffHunk": "@@ -49,6 +51,19 @@ public LdapConfig setLdapUrl(String url)\n         return this;\n     }\n \n+    public File getTrustCertificate()\n+    {\n+        return trustCertificate;\n+    }\n+\n+    @Config(\"ldap.ssl-trust-certificate\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE0NTQxNQ==", "bodyText": "forgot to update this comment; I know you don't accept password because you support only PEM in this code.\nIt is probably fine for now, but i am concerned it may be not sufficient in all deployments, just like ended up having support for password in few other places.", "url": "https://github.com/trinodb/trino/pull/3523#discussion_r415145415", "createdAt": "2020-04-25T21:13:18Z", "author": {"login": "findepi"}, "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapConfig.java", "diffHunk": "@@ -49,6 +51,19 @@ public LdapConfig setLdapUrl(String url)\n         return this;\n     }\n \n+    public File getTrustCertificate()\n+    {\n+        return trustCertificate;\n+    }\n+\n+    @Config(\"ldap.ssl-trust-certificate\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE0MDk0Nw=="}, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQyNDQ3Nw==", "bodyText": "I'd like to phase out support for JKS. My feeling is that users don't want JKS, they just use it because they have to or because they don't realize (and the documentation doesn't say) that they can use PEM files.\nIf we need to support it later, we'll deprecate this and switch to the other name style. Regarding tls vs ssl, I chose ssl since that matches the majority of existing configs and language used in the documentation.", "url": "https://github.com/trinodb/trino/pull/3523#discussion_r415424477", "createdAt": "2020-04-26T23:16:49Z", "author": {"login": "electrum"}, "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapConfig.java", "diffHunk": "@@ -49,6 +51,19 @@ public LdapConfig setLdapUrl(String url)\n         return this;\n     }\n \n+    public File getTrustCertificate()\n+    {\n+        return trustCertificate;\n+    }\n+\n+    @Config(\"ldap.ssl-trust-certificate\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE0MDk0Nw=="}, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1MjE5Mw==", "bodyText": "Regarding tls vs ssl, I chose ssl since that matches the majority of existing configs and language used in the documentation.\n\nuh, i didn't do statistics, sorry. But I think we should go SSL->TLS direction in wording (except for code places where things like SSLContext are in stone).", "url": "https://github.com/trinodb/trino/pull/3523#discussion_r415552193", "createdAt": "2020-04-27T06:45:49Z", "author": {"login": "findepi"}, "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapConfig.java", "diffHunk": "@@ -49,6 +51,19 @@ public LdapConfig setLdapUrl(String url)\n         return this;\n     }\n \n+    public File getTrustCertificate()\n+    {\n+        return trustCertificate;\n+    }\n+\n+    @Config(\"ldap.ssl-trust-certificate\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE0MDk0Nw=="}, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MTM5ODQyOnYy", "diffSide": "RIGHT", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapAuthenticator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQyMDo0ODozOFrOGL6NDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQyMDo0ODozOFrOGL6NDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE0MTEzMw==", "bodyText": "document where this value comes from or refers to", "url": "https://github.com/trinodb/trino/pull/3523#discussion_r415141133", "createdAt": "2020-04-25T20:48:38Z", "author": {"login": "findepi"}, "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapAuthenticator.java", "diffHunk": "@@ -57,6 +68,7 @@\n     private static final Logger log = Logger.get(LdapAuthenticator.class);\n     private static final CharMatcher SPECIAL_CHARACTERS = CharMatcher.anyOf(\",=+<>#;*()\\\"\\\\\\u0000\");\n     private static final CharMatcher WHITESPACE = CharMatcher.anyOf(\" \\r\");\n+    private static final String LDAP_SOCKET_FACTORY = \"java.naming.ldap.factory.socket\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MTQwNzgyOnYy", "diffSide": "RIGHT", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapSslSocketFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQyMDo1NDozMVrOGL6RLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQyMDo1NDozMVrOGL6RLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE0MjE4OQ==", "bodyText": "\"unused\" too\n\n\ncomment how this is used; since this looks like entry point, i would put it at the top, below SSL_CONTEXT", "url": "https://github.com/trinodb/trino/pull/3523#discussion_r415142189", "createdAt": "2020-04-25T20:54:31Z", "author": {"login": "findepi"}, "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapSslSocketFactory.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.ldap;\n+\n+import javax.net.SocketFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLSocketFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+\n+public class LdapSslSocketFactory\n+        extends SSLSocketFactory\n+{\n+    private static final ThreadLocal<SSLContext> SSL_CONTEXT = new ThreadLocal<>();\n+\n+    private final SSLSocketFactory socketFactory;\n+\n+    public LdapSslSocketFactory(SSLContext sslContext)\n+    {\n+        this.socketFactory = sslContext.getSocketFactory();\n+    }\n+\n+    @Override\n+    public String[] getDefaultCipherSuites()\n+    {\n+        return socketFactory.getDefaultCipherSuites();\n+    }\n+\n+    @Override\n+    public String[] getSupportedCipherSuites()\n+    {\n+        return socketFactory.getSupportedCipherSuites();\n+    }\n+\n+    @Override\n+    public Socket createSocket(Socket socket, String host, int port, boolean autoClose)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(socket, host, port, autoClose);\n+    }\n+\n+    @Override\n+    public Socket createSocket(String host, int port)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(host, port);\n+    }\n+\n+    @Override\n+    public Socket createSocket(String host, int port, InetAddress clientAddress, int clientPort)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(host, port, clientAddress, clientPort);\n+    }\n+\n+    @Override\n+    public Socket createSocket(InetAddress address, int port)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(address, port);\n+    }\n+\n+    @Override\n+    public Socket createSocket(InetAddress address, int port, InetAddress clientAddress, int clientPort)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(address, port, clientAddress, clientPort);\n+    }\n+\n+    @Override\n+    public Socket createSocket(Socket socket, InputStream consumed, boolean autoClose)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(socket, consumed, autoClose);\n+    }\n+\n+    @Override\n+    public Socket createSocket()\n+            throws IOException\n+    {\n+        return socketFactory.createSocket();\n+    }\n+\n+    @SuppressWarnings(\"MethodOverridesStaticMethodOfSuperclass\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MTQwODEwOnYy", "diffSide": "RIGHT", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapSslSocketFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQyMDo1NDo0N1rOGL6RTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNTowNjowOVrOGMQ5bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE0MjIyMQ==", "bodyText": "package private", "url": "https://github.com/trinodb/trino/pull/3523#discussion_r415142221", "createdAt": "2020-04-25T20:54:47Z", "author": {"login": "findepi"}, "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapSslSocketFactory.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.ldap;\n+\n+import javax.net.SocketFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLSocketFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+\n+public class LdapSslSocketFactory", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxMjk0Mg==", "bodyText": "This has to be public since it's accessed reflectively by the LDAP code.", "url": "https://github.com/trinodb/trino/pull/3523#discussion_r415512942", "createdAt": "2020-04-27T05:06:09Z", "author": {"login": "electrum"}, "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapSslSocketFactory.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.ldap;\n+\n+import javax.net.SocketFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLSocketFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+\n+public class LdapSslSocketFactory", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE0MjIyMQ=="}, "originalCommit": null, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MTQwOTExOnYy", "diffSide": "RIGHT", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapAuthenticator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQyMDo1NTozM1rOGL6RvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQyMDo1NTozM1rOGL6RvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE0MjMzMw==", "bodyText": "This looks scary as if global state was being modified.\nRename setSslContext to sth like setSslContextForCurrentThread", "url": "https://github.com/trinodb/trino/pull/3523#discussion_r415142333", "createdAt": "2020-04-25T20:55:33Z", "author": {"login": "findepi"}, "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapAuthenticator.java", "diffHunk": "@@ -272,17 +288,45 @@ private DirContext createUserDirContext(String userDistinguishedName, String pas\n \n     private Map<String, String> createEnvironment(String userDistinguishedName, String password)\n     {\n-        return ImmutableMap.<String, String>builder()\n+        ImmutableMap.Builder<String, String> environment = ImmutableMap.<String, String>builder()\n                 .putAll(basicEnvironment)\n                 .put(SECURITY_AUTHENTICATION, \"simple\")\n                 .put(SECURITY_PRINCIPAL, userDistinguishedName)\n                 .put(SECURITY_CREDENTIALS, password)\n-                .put(REFERRAL, ignoreReferrals ? \"ignore\" : \"follow\")\n-                .build();\n+                .put(REFERRAL, ignoreReferrals ? \"ignore\" : \"follow\");\n+\n+        sslContext.ifPresent(context -> {\n+            LdapSslSocketFactory.setSslContext(context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MTQyNDY5OnYy", "diffSide": "RIGHT", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapSslSocketFactory.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQyMTowNTo0N1rOGL6Ykg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjo0ODo1NFrOGMTYng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE0NDA4Mg==", "bodyText": "verify SSL_CONTEXT.get() is not null", "url": "https://github.com/trinodb/trino/pull/3523#discussion_r415144082", "createdAt": "2020-04-25T21:05:47Z", "author": {"login": "findepi"}, "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapSslSocketFactory.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.ldap;\n+\n+import javax.net.SocketFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLSocketFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+\n+public class LdapSslSocketFactory\n+        extends SSLSocketFactory\n+{\n+    private static final ThreadLocal<SSLContext> SSL_CONTEXT = new ThreadLocal<>();\n+\n+    private final SSLSocketFactory socketFactory;\n+\n+    public LdapSslSocketFactory(SSLContext sslContext)\n+    {\n+        this.socketFactory = sslContext.getSocketFactory();\n+    }\n+\n+    @Override\n+    public String[] getDefaultCipherSuites()\n+    {\n+        return socketFactory.getDefaultCipherSuites();\n+    }\n+\n+    @Override\n+    public String[] getSupportedCipherSuites()\n+    {\n+        return socketFactory.getSupportedCipherSuites();\n+    }\n+\n+    @Override\n+    public Socket createSocket(Socket socket, String host, int port, boolean autoClose)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(socket, host, port, autoClose);\n+    }\n+\n+    @Override\n+    public Socket createSocket(String host, int port)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(host, port);\n+    }\n+\n+    @Override\n+    public Socket createSocket(String host, int port, InetAddress clientAddress, int clientPort)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(host, port, clientAddress, clientPort);\n+    }\n+\n+    @Override\n+    public Socket createSocket(InetAddress address, int port)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(address, port);\n+    }\n+\n+    @Override\n+    public Socket createSocket(InetAddress address, int port, InetAddress clientAddress, int clientPort)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(address, port, clientAddress, clientPort);\n+    }\n+\n+    @Override\n+    public Socket createSocket(Socket socket, InputStream consumed, boolean autoClose)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(socket, consumed, autoClose);\n+    }\n+\n+    @Override\n+    public Socket createSocket()\n+            throws IOException\n+    {\n+        return socketFactory.createSocket();\n+    }\n+\n+    @SuppressWarnings(\"MethodOverridesStaticMethodOfSuperclass\")\n+    public static SocketFactory getDefault()\n+    {\n+        return new LdapSslSocketFactory(SSL_CONTEXT.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE0NDU2Ng==", "bodyText": "you delegate all [explicitly implemented] methods\nwhy not just\nreturn SSL_CONTEXT.get().getSocketFactory();\n\n?", "url": "https://github.com/trinodb/trino/pull/3523#discussion_r415144566", "createdAt": "2020-04-25T21:08:21Z", "author": {"login": "findepi"}, "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapSslSocketFactory.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.ldap;\n+\n+import javax.net.SocketFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLSocketFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+\n+public class LdapSslSocketFactory\n+        extends SSLSocketFactory\n+{\n+    private static final ThreadLocal<SSLContext> SSL_CONTEXT = new ThreadLocal<>();\n+\n+    private final SSLSocketFactory socketFactory;\n+\n+    public LdapSslSocketFactory(SSLContext sslContext)\n+    {\n+        this.socketFactory = sslContext.getSocketFactory();\n+    }\n+\n+    @Override\n+    public String[] getDefaultCipherSuites()\n+    {\n+        return socketFactory.getDefaultCipherSuites();\n+    }\n+\n+    @Override\n+    public String[] getSupportedCipherSuites()\n+    {\n+        return socketFactory.getSupportedCipherSuites();\n+    }\n+\n+    @Override\n+    public Socket createSocket(Socket socket, String host, int port, boolean autoClose)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(socket, host, port, autoClose);\n+    }\n+\n+    @Override\n+    public Socket createSocket(String host, int port)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(host, port);\n+    }\n+\n+    @Override\n+    public Socket createSocket(String host, int port, InetAddress clientAddress, int clientPort)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(host, port, clientAddress, clientPort);\n+    }\n+\n+    @Override\n+    public Socket createSocket(InetAddress address, int port)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(address, port);\n+    }\n+\n+    @Override\n+    public Socket createSocket(InetAddress address, int port, InetAddress clientAddress, int clientPort)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(address, port, clientAddress, clientPort);\n+    }\n+\n+    @Override\n+    public Socket createSocket(Socket socket, InputStream consumed, boolean autoClose)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(socket, consumed, autoClose);\n+    }\n+\n+    @Override\n+    public Socket createSocket()\n+            throws IOException\n+    {\n+        return socketFactory.createSocket();\n+    }\n+\n+    @SuppressWarnings(\"MethodOverridesStaticMethodOfSuperclass\")\n+    public static SocketFactory getDefault()\n+    {\n+        return new LdapSslSocketFactory(SSL_CONTEXT.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE0NDA4Mg=="}, "originalCommit": null, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQyNTA3Mw==", "bodyText": "Ooh, that's a nice trick.", "url": "https://github.com/trinodb/trino/pull/3523#discussion_r415425073", "createdAt": "2020-04-26T23:20:16Z", "author": {"login": "electrum"}, "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapSslSocketFactory.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.ldap;\n+\n+import javax.net.SocketFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLSocketFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+\n+public class LdapSslSocketFactory\n+        extends SSLSocketFactory\n+{\n+    private static final ThreadLocal<SSLContext> SSL_CONTEXT = new ThreadLocal<>();\n+\n+    private final SSLSocketFactory socketFactory;\n+\n+    public LdapSslSocketFactory(SSLContext sslContext)\n+    {\n+        this.socketFactory = sslContext.getSocketFactory();\n+    }\n+\n+    @Override\n+    public String[] getDefaultCipherSuites()\n+    {\n+        return socketFactory.getDefaultCipherSuites();\n+    }\n+\n+    @Override\n+    public String[] getSupportedCipherSuites()\n+    {\n+        return socketFactory.getSupportedCipherSuites();\n+    }\n+\n+    @Override\n+    public Socket createSocket(Socket socket, String host, int port, boolean autoClose)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(socket, host, port, autoClose);\n+    }\n+\n+    @Override\n+    public Socket createSocket(String host, int port)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(host, port);\n+    }\n+\n+    @Override\n+    public Socket createSocket(String host, int port, InetAddress clientAddress, int clientPort)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(host, port, clientAddress, clientPort);\n+    }\n+\n+    @Override\n+    public Socket createSocket(InetAddress address, int port)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(address, port);\n+    }\n+\n+    @Override\n+    public Socket createSocket(InetAddress address, int port, InetAddress clientAddress, int clientPort)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(address, port, clientAddress, clientPort);\n+    }\n+\n+    @Override\n+    public Socket createSocket(Socket socket, InputStream consumed, boolean autoClose)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(socket, consumed, autoClose);\n+    }\n+\n+    @Override\n+    public Socket createSocket()\n+            throws IOException\n+    {\n+        return socketFactory.createSocket();\n+    }\n+\n+    @SuppressWarnings(\"MethodOverridesStaticMethodOfSuperclass\")\n+    public static SocketFactory getDefault()\n+    {\n+        return new LdapSslSocketFactory(SSL_CONTEXT.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE0NDA4Mg=="}, "originalCommit": null, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU0NzcyMw==", "bodyText": "It turns out that in Java 8, the JDK code assumes that createSocket is implemented on the passed in class name (it looks it up reflectively), and that the factory returned from getDefault() is of the same class. The Java 11 code works as expected by casting to SocketFactory and simply calling the method.", "url": "https://github.com/trinodb/trino/pull/3523#discussion_r415547723", "createdAt": "2020-04-27T06:36:20Z", "author": {"login": "electrum"}, "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapSslSocketFactory.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.ldap;\n+\n+import javax.net.SocketFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLSocketFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+\n+public class LdapSslSocketFactory\n+        extends SSLSocketFactory\n+{\n+    private static final ThreadLocal<SSLContext> SSL_CONTEXT = new ThreadLocal<>();\n+\n+    private final SSLSocketFactory socketFactory;\n+\n+    public LdapSslSocketFactory(SSLContext sslContext)\n+    {\n+        this.socketFactory = sslContext.getSocketFactory();\n+    }\n+\n+    @Override\n+    public String[] getDefaultCipherSuites()\n+    {\n+        return socketFactory.getDefaultCipherSuites();\n+    }\n+\n+    @Override\n+    public String[] getSupportedCipherSuites()\n+    {\n+        return socketFactory.getSupportedCipherSuites();\n+    }\n+\n+    @Override\n+    public Socket createSocket(Socket socket, String host, int port, boolean autoClose)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(socket, host, port, autoClose);\n+    }\n+\n+    @Override\n+    public Socket createSocket(String host, int port)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(host, port);\n+    }\n+\n+    @Override\n+    public Socket createSocket(String host, int port, InetAddress clientAddress, int clientPort)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(host, port, clientAddress, clientPort);\n+    }\n+\n+    @Override\n+    public Socket createSocket(InetAddress address, int port)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(address, port);\n+    }\n+\n+    @Override\n+    public Socket createSocket(InetAddress address, int port, InetAddress clientAddress, int clientPort)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(address, port, clientAddress, clientPort);\n+    }\n+\n+    @Override\n+    public Socket createSocket(Socket socket, InputStream consumed, boolean autoClose)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(socket, consumed, autoClose);\n+    }\n+\n+    @Override\n+    public Socket createSocket()\n+            throws IOException\n+    {\n+        return socketFactory.createSocket();\n+    }\n+\n+    @SuppressWarnings(\"MethodOverridesStaticMethodOfSuperclass\")\n+    public static SocketFactory getDefault()\n+    {\n+        return new LdapSslSocketFactory(SSL_CONTEXT.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE0NDA4Mg=="}, "originalCommit": null, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1MzY5NA==", "bodyText": "Thanks for checking this! Please add a TODO so we can prune the boilerplate when we drop J 8", "url": "https://github.com/trinodb/trino/pull/3523#discussion_r415553694", "createdAt": "2020-04-27T06:48:54Z", "author": {"login": "findepi"}, "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapSslSocketFactory.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.ldap;\n+\n+import javax.net.SocketFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLSocketFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+\n+public class LdapSslSocketFactory\n+        extends SSLSocketFactory\n+{\n+    private static final ThreadLocal<SSLContext> SSL_CONTEXT = new ThreadLocal<>();\n+\n+    private final SSLSocketFactory socketFactory;\n+\n+    public LdapSslSocketFactory(SSLContext sslContext)\n+    {\n+        this.socketFactory = sslContext.getSocketFactory();\n+    }\n+\n+    @Override\n+    public String[] getDefaultCipherSuites()\n+    {\n+        return socketFactory.getDefaultCipherSuites();\n+    }\n+\n+    @Override\n+    public String[] getSupportedCipherSuites()\n+    {\n+        return socketFactory.getSupportedCipherSuites();\n+    }\n+\n+    @Override\n+    public Socket createSocket(Socket socket, String host, int port, boolean autoClose)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(socket, host, port, autoClose);\n+    }\n+\n+    @Override\n+    public Socket createSocket(String host, int port)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(host, port);\n+    }\n+\n+    @Override\n+    public Socket createSocket(String host, int port, InetAddress clientAddress, int clientPort)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(host, port, clientAddress, clientPort);\n+    }\n+\n+    @Override\n+    public Socket createSocket(InetAddress address, int port)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(address, port);\n+    }\n+\n+    @Override\n+    public Socket createSocket(InetAddress address, int port, InetAddress clientAddress, int clientPort)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(address, port, clientAddress, clientPort);\n+    }\n+\n+    @Override\n+    public Socket createSocket(Socket socket, InputStream consumed, boolean autoClose)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(socket, consumed, autoClose);\n+    }\n+\n+    @Override\n+    public Socket createSocket()\n+            throws IOException\n+    {\n+        return socketFactory.createSocket();\n+    }\n+\n+    @SuppressWarnings(\"MethodOverridesStaticMethodOfSuperclass\")\n+    public static SocketFactory getDefault()\n+    {\n+        return new LdapSslSocketFactory(SSL_CONTEXT.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE0NDA4Mg=="}, "originalCommit": null, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MTQyNzcxOnYy", "diffSide": "RIGHT", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapSslSocketFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQyMTowNzoyM1rOGL6Z6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjo0Nzo1OFrOGMTW8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE0NDQyNw==", "bodyText": "package private", "url": "https://github.com/trinodb/trino/pull/3523#discussion_r415144427", "createdAt": "2020-04-25T21:07:23Z", "author": {"login": "findepi"}, "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapSslSocketFactory.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.ldap;\n+\n+import javax.net.SocketFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLSocketFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+\n+public class LdapSslSocketFactory\n+        extends SSLSocketFactory\n+{\n+    private static final ThreadLocal<SSLContext> SSL_CONTEXT = new ThreadLocal<>();\n+\n+    private final SSLSocketFactory socketFactory;\n+\n+    public LdapSslSocketFactory(SSLContext sslContext)\n+    {\n+        this.socketFactory = sslContext.getSocketFactory();\n+    }\n+\n+    @Override\n+    public String[] getDefaultCipherSuites()\n+    {\n+        return socketFactory.getDefaultCipherSuites();\n+    }\n+\n+    @Override\n+    public String[] getSupportedCipherSuites()\n+    {\n+        return socketFactory.getSupportedCipherSuites();\n+    }\n+\n+    @Override\n+    public Socket createSocket(Socket socket, String host, int port, boolean autoClose)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(socket, host, port, autoClose);\n+    }\n+\n+    @Override\n+    public Socket createSocket(String host, int port)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(host, port);\n+    }\n+\n+    @Override\n+    public Socket createSocket(String host, int port, InetAddress clientAddress, int clientPort)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(host, port, clientAddress, clientPort);\n+    }\n+\n+    @Override\n+    public Socket createSocket(InetAddress address, int port)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(address, port);\n+    }\n+\n+    @Override\n+    public Socket createSocket(InetAddress address, int port, InetAddress clientAddress, int clientPort)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(address, port, clientAddress, clientPort);\n+    }\n+\n+    @Override\n+    public Socket createSocket(Socket socket, InputStream consumed, boolean autoClose)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(socket, consumed, autoClose);\n+    }\n+\n+    @Override\n+    public Socket createSocket()\n+            throws IOException\n+    {\n+        return socketFactory.createSocket();\n+    }\n+\n+    @SuppressWarnings(\"MethodOverridesStaticMethodOfSuperclass\")\n+    public static SocketFactory getDefault()\n+    {\n+        return new LdapSslSocketFactory(SSL_CONTEXT.get());\n+    }\n+\n+    public static void setSslContext(SSLContext sslContext)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxNjc5NQ==", "bodyText": "I'd rather leave this public since it's part of the public API for the class. If someone wanted to reuse this class, it'd be useless without this method, and there doesn't seem to be any danger of leaving it public.", "url": "https://github.com/trinodb/trino/pull/3523#discussion_r415516795", "createdAt": "2020-04-27T05:17:27Z", "author": {"login": "electrum"}, "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapSslSocketFactory.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.ldap;\n+\n+import javax.net.SocketFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLSocketFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+\n+public class LdapSslSocketFactory\n+        extends SSLSocketFactory\n+{\n+    private static final ThreadLocal<SSLContext> SSL_CONTEXT = new ThreadLocal<>();\n+\n+    private final SSLSocketFactory socketFactory;\n+\n+    public LdapSslSocketFactory(SSLContext sslContext)\n+    {\n+        this.socketFactory = sslContext.getSocketFactory();\n+    }\n+\n+    @Override\n+    public String[] getDefaultCipherSuites()\n+    {\n+        return socketFactory.getDefaultCipherSuites();\n+    }\n+\n+    @Override\n+    public String[] getSupportedCipherSuites()\n+    {\n+        return socketFactory.getSupportedCipherSuites();\n+    }\n+\n+    @Override\n+    public Socket createSocket(Socket socket, String host, int port, boolean autoClose)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(socket, host, port, autoClose);\n+    }\n+\n+    @Override\n+    public Socket createSocket(String host, int port)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(host, port);\n+    }\n+\n+    @Override\n+    public Socket createSocket(String host, int port, InetAddress clientAddress, int clientPort)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(host, port, clientAddress, clientPort);\n+    }\n+\n+    @Override\n+    public Socket createSocket(InetAddress address, int port)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(address, port);\n+    }\n+\n+    @Override\n+    public Socket createSocket(InetAddress address, int port, InetAddress clientAddress, int clientPort)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(address, port, clientAddress, clientPort);\n+    }\n+\n+    @Override\n+    public Socket createSocket(Socket socket, InputStream consumed, boolean autoClose)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(socket, consumed, autoClose);\n+    }\n+\n+    @Override\n+    public Socket createSocket()\n+            throws IOException\n+    {\n+        return socketFactory.createSocket();\n+    }\n+\n+    @SuppressWarnings(\"MethodOverridesStaticMethodOfSuperclass\")\n+    public static SocketFactory getDefault()\n+    {\n+        return new LdapSslSocketFactory(SSL_CONTEXT.get());\n+    }\n+\n+    public static void setSslContext(SSLContext sslContext)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE0NDQyNw=="}, "originalCommit": null, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1MzI2Ng==", "bodyText": "the reason i would want this to be p-private is that it sets a static state (the ThreadLocal, but still a static state)\nsetting static state should be guarded\nif we want to reuse, we will either copy or rename this class, we can revisit", "url": "https://github.com/trinodb/trino/pull/3523#discussion_r415553266", "createdAt": "2020-04-27T06:47:58Z", "author": {"login": "findepi"}, "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapSslSocketFactory.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.ldap;\n+\n+import javax.net.SocketFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLSocketFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+\n+public class LdapSslSocketFactory\n+        extends SSLSocketFactory\n+{\n+    private static final ThreadLocal<SSLContext> SSL_CONTEXT = new ThreadLocal<>();\n+\n+    private final SSLSocketFactory socketFactory;\n+\n+    public LdapSslSocketFactory(SSLContext sslContext)\n+    {\n+        this.socketFactory = sslContext.getSocketFactory();\n+    }\n+\n+    @Override\n+    public String[] getDefaultCipherSuites()\n+    {\n+        return socketFactory.getDefaultCipherSuites();\n+    }\n+\n+    @Override\n+    public String[] getSupportedCipherSuites()\n+    {\n+        return socketFactory.getSupportedCipherSuites();\n+    }\n+\n+    @Override\n+    public Socket createSocket(Socket socket, String host, int port, boolean autoClose)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(socket, host, port, autoClose);\n+    }\n+\n+    @Override\n+    public Socket createSocket(String host, int port)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(host, port);\n+    }\n+\n+    @Override\n+    public Socket createSocket(String host, int port, InetAddress clientAddress, int clientPort)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(host, port, clientAddress, clientPort);\n+    }\n+\n+    @Override\n+    public Socket createSocket(InetAddress address, int port)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(address, port);\n+    }\n+\n+    @Override\n+    public Socket createSocket(InetAddress address, int port, InetAddress clientAddress, int clientPort)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(address, port, clientAddress, clientPort);\n+    }\n+\n+    @Override\n+    public Socket createSocket(Socket socket, InputStream consumed, boolean autoClose)\n+            throws IOException\n+    {\n+        return socketFactory.createSocket(socket, consumed, autoClose);\n+    }\n+\n+    @Override\n+    public Socket createSocket()\n+            throws IOException\n+    {\n+        return socketFactory.createSocket();\n+    }\n+\n+    @SuppressWarnings(\"MethodOverridesStaticMethodOfSuperclass\")\n+    public static SocketFactory getDefault()\n+    {\n+        return new LdapSslSocketFactory(SSL_CONTEXT.get());\n+    }\n+\n+    public static void setSslContext(SSLContext sslContext)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE0NDQyNw=="}, "originalCommit": null, "originalPosition": 104}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 224, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}