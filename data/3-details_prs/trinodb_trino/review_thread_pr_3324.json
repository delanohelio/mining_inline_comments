{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MDc2MDAz", "number": 3324, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjowMjoyN1rODucFtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjowNTo1MFrODucKPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDIxMzAwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjowMjoyN1rOGAbyig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNjozMToxMFrOGHsUVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEwODQ5MA==", "bodyText": "Be explicit about it (and throw a proper exception):\nif (!result.getProjections().stream().allMatch(Objects::isNull)) {\n    throw new PrestoException(...);\n}\n\nif (!result.getAssignments().stream().allMatch(Objects::isNull)) {\n    throw new PrestoException(...);\n}", "url": "https://github.com/trinodb/trino/pull/3324#discussion_r403108490", "createdAt": "2020-04-03T16:02:27Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataManager.java", "diffHunk": "@@ -1099,10 +1099,16 @@ public void validateScan(Session session, TableHandle table)\n \n         ConnectorSession connectorSession = session.toConnectorSession(catalogName);\n         return metadata.applyProjection(connectorSession, table.getConnectorHandle(), projections, assignments)\n-                .map(result -> new ProjectionApplicationResult<>(\n-                        new TableHandle(catalogName, result.getHandle(), table.getTransaction(), Optional.empty()),\n-                        result.getProjections(),\n-                        result.getAssignments()));\n+                .map(result -> {\n+                    // verify no nulls\n+                    List<ConnectorExpression> newProjections = ImmutableList.copyOf(result.getProjections());\n+                    List<ProjectionApplicationResult.Assignment> newAssignments = ImmutableList.copyOf(result.getAssignments());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcxOTMxNw==", "bodyText": "changed to explicit code (but slightly different)", "url": "https://github.com/trinodb/trino/pull/3324#discussion_r410719317", "createdAt": "2020-04-18T16:31:10Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataManager.java", "diffHunk": "@@ -1099,10 +1099,16 @@ public void validateScan(Session session, TableHandle table)\n \n         ConnectorSession connectorSession = session.toConnectorSession(catalogName);\n         return metadata.applyProjection(connectorSession, table.getConnectorHandle(), projections, assignments)\n-                .map(result -> new ProjectionApplicationResult<>(\n-                        new TableHandle(catalogName, result.getHandle(), table.getTransaction(), Optional.empty()),\n-                        result.getProjections(),\n-                        result.getAssignments()));\n+                .map(result -> {\n+                    // verify no nulls\n+                    List<ConnectorExpression> newProjections = ImmutableList.copyOf(result.getProjections());\n+                    List<ProjectionApplicationResult.Assignment> newAssignments = ImmutableList.copyOf(result.getAssignments());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEwODQ5MA=="}, "originalCommit": null, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDIyMjY5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjowNToxMlrOGAb4zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjowNToxMlrOGAb4zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzExMDA5Mg==", "bodyText": "Throw a PrestoException (we'll need a new error code similar to FUNCTION_IMPLEMENTATION_ERROR)", "url": "https://github.com/trinodb/trino/pull/3324#discussion_r403110092", "createdAt": "2020-04-03T16:05:12Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataManager.java", "diffHunk": "@@ -1104,6 +1104,13 @@ public void validateScan(Session session, TableHandle table)\n                     List<ConnectorExpression> newProjections = ImmutableList.copyOf(result.getProjections());\n                     List<ProjectionApplicationResult.Assignment> newAssignments = ImmutableList.copyOf(result.getAssignments());\n \n+                    verify(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDIyNDYzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjowNTo1MFrOGAb6Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMDozMjowMVrOGAoNuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzExMDQzNA==", "bodyText": "Throw a proper PrestoException", "url": "https://github.com/trinodb/trino/pull/3324#discussion_r403110434", "createdAt": "2020-04-03T16:05:50Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataManager.java", "diffHunk": "@@ -1111,6 +1113,15 @@ public void validateScan(Session session, TableHandle table)\n                             projections.size(),\n                             table);\n \n+                    Set<String> assignedVariables = newAssignments.stream()\n+                            .map(ProjectionApplicationResult.Assignment::getVariable)\n+                            .collect(toImmutableSet());\n+                    newProjections.stream()\n+                            .flatMap(connectorExpression -> ConnectorExpressions.extractVariables(connectorExpression).stream())\n+                            .map(Variable::getName)\n+                            .filter(variableName -> !assignedVariables.contains(variableName))\n+                            .findAny().ifPresent(variableName -> { throw new IllegalStateException(\"Unbound variable: \" + variableName); });", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMxMjA1Nw==", "bodyText": "i thought about that.\nthis should happen only during connector development, so i decided to go \"lite\" about these exceptions, and use brief forms of verification (like verify)\n(eg if we were to convert all requireNonNull to if ... throw PrestoException would not be fun, and would greatly harm readability for little or no value to end users)", "url": "https://github.com/trinodb/trino/pull/3324#discussion_r403312057", "createdAt": "2020-04-03T20:32:01Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataManager.java", "diffHunk": "@@ -1111,6 +1113,15 @@ public void validateScan(Session session, TableHandle table)\n                             projections.size(),\n                             table);\n \n+                    Set<String> assignedVariables = newAssignments.stream()\n+                            .map(ProjectionApplicationResult.Assignment::getVariable)\n+                            .collect(toImmutableSet());\n+                    newProjections.stream()\n+                            .flatMap(connectorExpression -> ConnectorExpressions.extractVariables(connectorExpression).stream())\n+                            .map(Variable::getName)\n+                            .filter(variableName -> !assignedVariables.contains(variableName))\n+                            .findAny().ifPresent(variableName -> { throw new IllegalStateException(\"Unbound variable: \" + variableName); });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzExMDQzNA=="}, "originalCommit": null, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 300, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}