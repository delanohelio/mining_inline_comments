{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMjcwODM3", "number": 4232, "title": "Fix Iceberg ORC DECIMAL types", "bodyText": "This commit enables DECIMAL types in Iceberg ORC, and\nfixes a couple of bugs in conversion from SPI DecimalType\nand BigDecimal used by Iceberg ORC.  It adds some additional\nDECIMAL tests in TestIcebergSmoke.  It also adds machinery\nthat allows the partitioned table unit tests to run with DECIMAL\nand TIMESTAMP columns for FileFormat.ORC, and runs the same\ntests without DECIMAL and TIMESTAMP for FileFormat.PARQUET,\nwhere they are not yet supported.", "createdAt": "2020-06-25T21:38:55Z", "url": "https://github.com/trinodb/trino/pull/4232", "merged": true, "mergeCommit": {"oid": "0cd10a289de371e55e766a74af61162d2f263444"}, "closed": true, "closedAt": "2020-06-27T04:09:44Z", "author": {"login": "djsstarburst"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcvEIoLABqjM0ODY4NDc0MTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcvM08qgBqjM0ODg0OTk1MTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MzgwNTMy", "url": "https://github.com/trinodb/trino/pull/4232#pullrequestreview-438380532", "createdAt": "2020-06-26T15:15:41Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNToxNTo0MlrOGpkujg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNToxNTo0MlrOGpkujg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0NjU0Mg==", "bodyText": "Remove?", "url": "https://github.com/trinodb/trino/pull/4232#discussion_r446246542", "createdAt": "2020-06-26T15:15:42Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -255,9 +268,12 @@ private void testPartitionedTableWithNullValues(Session session, FileFormat file\n                 \", null _real\" +\n                 \", null _double\" +\n                 \", null _boolean\" +\n-//                \", CAST('3.14' AS DECIMAL(3,2)) _decimal_short\" +\n-//                \", CAST('12345678901234567890.0123456789' AS DECIMAL(30,10)) _decimal_long\" +\n-//                \", CAST('2017-05-01 10:12:34' AS TIMESTAMP) _timestamp\" +\n+                returnSqlIfFormatSupportsDecimalsAndTimestamps(fileFormat, \", null _decimal_short\" +\n+                        \", null _decimal_long\" +\n+                        \", null _timestamp\") +\n+//                formatSupportsDecimalsAndTimestamps(fileFormat, \", CAST('3.14' AS DECIMAL(3,2)) _decimal_short\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 126}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MzgwOTQ3", "url": "https://github.com/trinodb/trino/pull/4232#pullrequestreview-438380947", "createdAt": "2020-06-26T15:16:11Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNToxNjoxMVrOGpkvsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNToxNjoxMVrOGpkvsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0NjgzNQ==", "bodyText": "There's already a isShortDecimal method", "url": "https://github.com/trinodb/trino/pull/4232#discussion_r446246835", "createdAt": "2020-06-26T15:16:11Z", "author": {"login": "electrum"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/Decimals.java", "diffHunk": "@@ -326,4 +326,9 @@ private static void checkArgument(boolean condition)\n             throw new IllegalArgumentException();\n         }\n     }\n+\n+    public static boolean isShortDecimalType(DecimalType decimalType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MzgxMjA3", "url": "https://github.com/trinodb/trino/pull/4232#pullrequestreview-438381207", "createdAt": "2020-06-26T15:16:30Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNToxNjozMFrOGpkwdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNToxNjozMFrOGpkwdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0NzAzMA==", "bodyText": "Nit: \"else\" is redundant", "url": "https://github.com/trinodb/trino/pull/4232#discussion_r446247030", "createdAt": "2020-06-26T15:16:30Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/ExpressionConverter.java", "diffHunk": "@@ -175,6 +179,19 @@ private static Object getValue(Type type, Marker marker, ConnectorSession sessio\n             return ((Slice) marker.getValue()).getBytes();\n         }\n \n+        if (type instanceof DecimalType) {\n+            DecimalType decimalType = (DecimalType) type;\n+            Object value = marker.getValue();\n+            if (Decimals.isShortDecimalType(decimalType)) {\n+                checkArgument(value instanceof Long, \"A short decimal should be represented by a long value but was \" + value);\n+                return value;\n+            }\n+            else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4Mzg0MTM3", "url": "https://github.com/trinodb/trino/pull/4232#pullrequestreview-438384137", "createdAt": "2020-06-26T15:20:20Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNToyMDoyMVrOGpk4jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNToyMDoyMVrOGpk4jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0OTEwMw==", "bodyText": "checkArgument takes string format so use %s instead of concatenation. Also, we should print the class since it might not be obvious from the toString()\ncheckArgument(value instanceof Slice, \"A long decimal should be represented by a Slice value but was %s\", value.getClass().getName());", "url": "https://github.com/trinodb/trino/pull/4232#discussion_r446249103", "createdAt": "2020-06-26T15:20:21Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/ExpressionConverter.java", "diffHunk": "@@ -175,6 +179,19 @@ private static Object getValue(Type type, Marker marker, ConnectorSession sessio\n             return ((Slice) marker.getValue()).getBytes();\n         }\n \n+        if (type instanceof DecimalType) {\n+            DecimalType decimalType = (DecimalType) type;\n+            Object value = marker.getValue();\n+            if (Decimals.isShortDecimalType(decimalType)) {\n+                checkArgument(value instanceof Long, \"A short decimal should be represented by a long value but was \" + value);\n+                return value;\n+            }\n+            else {\n+                checkArgument(value instanceof Slice, \"A long decimal should be represented by a Slice value but was \" + value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NjQyNTY1", "url": "https://github.com/trinodb/trino/pull/4232#pullrequestreview-438642565", "createdAt": "2020-06-26T23:21:32Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMzoyMTozMlrOGpxHEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMzoyNjo1NlrOGpxLOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0OTQyNw==", "bodyText": "Preconditions only support %s for formatting.\nNote that in general, %s is preferred, since it works for all types. Use the others like %02d when you need special type-specific formatting.", "url": "https://github.com/trinodb/trino/pull/4232#discussion_r446449427", "createdAt": "2020-06-26T23:21:32Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -101,15 +102,34 @@ public void testShowCreateTable()\n     @Test\n     public void testDecimal()\n     {\n-        assertUpdate(\"CREATE TABLE test_decimal_short (x decimal(3,2))\");\n-        assertQueryFails(\"INSERT INTO test_decimal_short VALUES (decimal '3.14')\", \"Writing to columns of type decimal not yet supported\");\n-//        assertQuery(\"SELECT * FROM test_decimal_short\", \"SELECT CAST('3.14' AS DECIMAL(3,2))\");\n-        dropTable(getSession(), \"test_decimal_short\");\n-\n-        assertUpdate(\"CREATE TABLE test_decimal_long (x decimal(25,2))\");\n-        assertQueryFails(\"INSERT INTO test_decimal_long VALUES (decimal '3.14')\", \"Writing to columns of type decimal not yet supported\");\n-//        assertQuery(\"SELECT * FROM test_decimal_long\", \"SELECT CAST('3.14' AS DECIMAL(25,2))\");\n-        dropTable(getSession(), \"test_decimal_long\");\n+        for (int precision = 1; precision <= 38; precision++) {\n+            testDecimalWithPrecisionAndScale(precision, precision - 1);\n+        }\n+\n+        for (int scale = 1; scale < 37; scale++) {\n+            testDecimalWithPrecisionAndScale(38, scale);\n+        }\n+\n+        for (int scale = 1; scale < 17; scale++) {\n+            testDecimalWithPrecisionAndScale(18, scale);\n+        }\n+    }\n+\n+    private void testDecimalWithPrecisionAndScale(int precision, int scale)\n+    {\n+        checkArgument(precision >= 1 && precision <= 38, \"Decimal precision must be between 1 and 38 inclusive, but was %d\", precision);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0OTU4NA==", "bodyText": "No need to wrap here", "url": "https://github.com/trinodb/trino/pull/4232#discussion_r446449584", "createdAt": "2020-06-26T23:22:23Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -101,15 +102,34 @@ public void testShowCreateTable()\n     @Test\n     public void testDecimal()\n     {\n-        assertUpdate(\"CREATE TABLE test_decimal_short (x decimal(3,2))\");\n-        assertQueryFails(\"INSERT INTO test_decimal_short VALUES (decimal '3.14')\", \"Writing to columns of type decimal not yet supported\");\n-//        assertQuery(\"SELECT * FROM test_decimal_short\", \"SELECT CAST('3.14' AS DECIMAL(3,2))\");\n-        dropTable(getSession(), \"test_decimal_short\");\n-\n-        assertUpdate(\"CREATE TABLE test_decimal_long (x decimal(25,2))\");\n-        assertQueryFails(\"INSERT INTO test_decimal_long VALUES (decimal '3.14')\", \"Writing to columns of type decimal not yet supported\");\n-//        assertQuery(\"SELECT * FROM test_decimal_long\", \"SELECT CAST('3.14' AS DECIMAL(25,2))\");\n-        dropTable(getSession(), \"test_decimal_long\");\n+        for (int precision = 1; precision <= 38; precision++) {\n+            testDecimalWithPrecisionAndScale(precision, precision - 1);\n+        }\n+\n+        for (int scale = 1; scale < 37; scale++) {\n+            testDecimalWithPrecisionAndScale(38, scale);\n+        }\n+\n+        for (int scale = 1; scale < 17; scale++) {\n+            testDecimalWithPrecisionAndScale(18, scale);\n+        }\n+    }\n+\n+    private void testDecimalWithPrecisionAndScale(int precision, int scale)\n+    {\n+        checkArgument(precision >= 1 && precision <= 38, \"Decimal precision must be between 1 and 38 inclusive, but was %d\", precision);\n+        checkArgument(scale < precision && scale >= 0, \"Decimal scale must be less than the precision and non-negative, but was %d with precision %d\",\n+                scale, precision);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0OTc4NQ==", "bodyText": "We could shorten these messages by putting the values inline\n\"Decimal precision (%s) must be between 1 and 38 inclusive\"\n\"Decimal scale (%s) must be less than the precision (%s) and non-negative\"", "url": "https://github.com/trinodb/trino/pull/4232#discussion_r446449785", "createdAt": "2020-06-26T23:23:19Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -101,15 +102,34 @@ public void testShowCreateTable()\n     @Test\n     public void testDecimal()\n     {\n-        assertUpdate(\"CREATE TABLE test_decimal_short (x decimal(3,2))\");\n-        assertQueryFails(\"INSERT INTO test_decimal_short VALUES (decimal '3.14')\", \"Writing to columns of type decimal not yet supported\");\n-//        assertQuery(\"SELECT * FROM test_decimal_short\", \"SELECT CAST('3.14' AS DECIMAL(3,2))\");\n-        dropTable(getSession(), \"test_decimal_short\");\n-\n-        assertUpdate(\"CREATE TABLE test_decimal_long (x decimal(25,2))\");\n-        assertQueryFails(\"INSERT INTO test_decimal_long VALUES (decimal '3.14')\", \"Writing to columns of type decimal not yet supported\");\n-//        assertQuery(\"SELECT * FROM test_decimal_long\", \"SELECT CAST('3.14' AS DECIMAL(25,2))\");\n-        dropTable(getSession(), \"test_decimal_long\");\n+        for (int precision = 1; precision <= 38; precision++) {\n+            testDecimalWithPrecisionAndScale(precision, precision - 1);\n+        }\n+\n+        for (int scale = 1; scale < 37; scale++) {\n+            testDecimalWithPrecisionAndScale(38, scale);\n+        }\n+\n+        for (int scale = 1; scale < 17; scale++) {\n+            testDecimalWithPrecisionAndScale(18, scale);\n+        }\n+    }\n+\n+    private void testDecimalWithPrecisionAndScale(int precision, int scale)\n+    {\n+        checkArgument(precision >= 1 && precision <= 38, \"Decimal precision must be between 1 and 38 inclusive, but was %d\", precision);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0OTQyNw=="}, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ1MDQ5MQ==", "bodyText": "We often use the trick of \"\" + to format multi-line strings so that the arguments line up:\nreturnSqlIfFormatSupportsDecimalsAndTimestamps(fileFormat, \"\" +\n        \", _decimal_short DECIMAL(3,2)\" +\n        \", _decimal_long DECIMAL(30,10)\" +\n        \", _timestamp TIMESTAMP\") +\nThis works with the code style and IntelliJ formatter rules.", "url": "https://github.com/trinodb/trino/pull/4232#discussion_r446450491", "createdAt": "2020-06-26T23:26:56Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -139,9 +159,9 @@ private void testCreatePartitionedTable(Session session, FileFormat fileFormat)\n                 \", _real REAL\" +\n                 \", _double DOUBLE\" +\n                 \", _boolean BOOLEAN\" +\n-//                \", _decimal_short DECIMAL(3,2)\" +\n-//                \", _decimal_long DECIMAL(30,10)\" +\n-//                \", _timestamp TIMESTAMP\" +\n+                returnSqlIfFormatSupportsDecimalsAndTimestamps(fileFormat, \", _decimal_short DECIMAL(3,2)\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c6aca686f440265a1d38bc06cb0f2c11f762df8", "author": {"user": {"login": "djsstarburst", "name": "David Stryker"}}, "url": "https://github.com/trinodb/trino/commit/1c6aca686f440265a1d38bc06cb0f2c11f762df8", "committedDate": "2020-06-27T00:36:58Z", "message": "Fix Iceberg ORC DECIMAL types\n\nThis commit enables DECIMAL types in Iceberg ORC, and\nfixes a couple of bugs in conversion from SPI DecimalType\nto BigDecimal used by Iceberg ORC.  It adds a unit test\nthat ensures that all legal DECIMAL precisions are correctly\nencoded.  It also adds machinery that allows the partitioned\ntable unit tests to run with DECIMAL and TIMESTAMP columns\nfor FileFormat.ORC, and runs the same tests without DECIMAL\nand TIMESTAMP for FileFormat.PARQUET, where they are not\nyet supported."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "1c6aca686f440265a1d38bc06cb0f2c11f762df8", "author": {"user": {"login": "djsstarburst", "name": "David Stryker"}}, "url": "https://github.com/trinodb/trino/commit/1c6aca686f440265a1d38bc06cb0f2c11f762df8", "committedDate": "2020-06-27T00:36:58Z", "message": "Fix Iceberg ORC DECIMAL types\n\nThis commit enables DECIMAL types in Iceberg ORC, and\nfixes a couple of bugs in conversion from SPI DecimalType\nto BigDecimal used by Iceberg ORC.  It adds a unit test\nthat ensures that all legal DECIMAL precisions are correctly\nencoded.  It also adds machinery that allows the partitioned\ntable unit tests to run with DECIMAL and TIMESTAMP columns\nfor FileFormat.ORC, and runs the same tests without DECIMAL\nand TIMESTAMP for FileFormat.PARQUET, where they are not\nyet supported."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 198, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}