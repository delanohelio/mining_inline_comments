{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNzE4MzE3", "number": 3862, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToxNzo0NlrOEAAU9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToxNzo0NlrOEAAU9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDQwODIxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/rubix/TestRubixCaching.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToxNzo0NlrOGbArwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOToxNDo1NVrOGbslXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3NTkzOA==", "bodyText": "why is getAsyncDownloadedMb be guaranteed to go up from beforeAsyncDownloadedMb to beforeAsyncDownloadedMb + 1?", "url": "https://github.com/trinodb/trino/pull/3862#discussion_r430975938", "createdAt": "2020-05-27T09:17:46Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/rubix/TestRubixCaching.java", "diffHunk": "@@ -291,6 +291,13 @@ public void testCacheRead(ReadMode readMode)\n \n         assertEquals(readFile(cachingFileSystem.open(file)), randomData);\n \n+        if (readMode == ASYNC) {\n+            // wait for async Rubix requests to complete\n+            assertEventually(\n+                    new Duration(10, SECONDS),\n+                    () -> assertEquals(getAsyncDownloadedMb(readMode), beforeAsyncDownloadedMb + 1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc04a3d5916b0c505593cdc1924c576b9e4b7233"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3OTY0Mg==", "bodyText": "why is getAsyncDownloadedMb be guaranteed to go up from beforeAsyncDownloadedMb to beforeAsyncDownloadedMb + 1\n\ntest file has exactly 1MB, so the counter should increase by this much", "url": "https://github.com/trinodb/trino/pull/3862#discussion_r430979642", "createdAt": "2020-05-27T09:23:42Z", "author": {"login": "sopel39"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/rubix/TestRubixCaching.java", "diffHunk": "@@ -291,6 +291,13 @@ public void testCacheRead(ReadMode readMode)\n \n         assertEquals(readFile(cachingFileSystem.open(file)), randomData);\n \n+        if (readMode == ASYNC) {\n+            // wait for async Rubix requests to complete\n+            assertEventually(\n+                    new Duration(10, SECONDS),\n+                    () -> assertEquals(getAsyncDownloadedMb(readMode), beforeAsyncDownloadedMb + 1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3NTkzOA=="}, "originalCommit": {"oid": "cc04a3d5916b0c505593cdc1924c576b9e4b7233"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI0NDU4MA==", "bodyText": "Isn't it possible that counter would flip before whole file is downloaded? (not sure if that matters very much)", "url": "https://github.com/trinodb/trino/pull/3862#discussion_r431244580", "createdAt": "2020-05-27T15:44:55Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/rubix/TestRubixCaching.java", "diffHunk": "@@ -291,6 +291,13 @@ public void testCacheRead(ReadMode readMode)\n \n         assertEquals(readFile(cachingFileSystem.open(file)), randomData);\n \n+        if (readMode == ASYNC) {\n+            // wait for async Rubix requests to complete\n+            assertEventually(\n+                    new Duration(10, SECONDS),\n+                    () -> assertEquals(getAsyncDownloadedMb(readMode), beforeAsyncDownloadedMb + 1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3NTkzOA=="}, "originalCommit": {"oid": "cc04a3d5916b0c505593cdc1924c576b9e4b7233"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwMDQxNw==", "bodyText": "Isn't it possible that counter would flip before whole file is downloaded?\n\nIt shouldn't happen. In each test we assert that whole file gets downloaded asynchronously before continuing, so there should be no pending counter updates.", "url": "https://github.com/trinodb/trino/pull/3862#discussion_r431400417", "createdAt": "2020-05-27T19:44:01Z", "author": {"login": "sopel39"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/rubix/TestRubixCaching.java", "diffHunk": "@@ -291,6 +291,13 @@ public void testCacheRead(ReadMode readMode)\n \n         assertEquals(readFile(cachingFileSystem.open(file)), randomData);\n \n+        if (readMode == ASYNC) {\n+            // wait for async Rubix requests to complete\n+            assertEventually(\n+                    new Duration(10, SECONDS),\n+                    () -> assertEquals(getAsyncDownloadedMb(readMode), beforeAsyncDownloadedMb + 1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3NTkzOA=="}, "originalCommit": {"oid": "cc04a3d5916b0c505593cdc1924c576b9e4b7233"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY3NzkyMw==", "bodyText": "The observed counter increase can still be from the time when file was still being downloaded. Right?", "url": "https://github.com/trinodb/trino/pull/3862#discussion_r431677923", "createdAt": "2020-05-28T08:45:29Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/rubix/TestRubixCaching.java", "diffHunk": "@@ -291,6 +291,13 @@ public void testCacheRead(ReadMode readMode)\n \n         assertEquals(readFile(cachingFileSystem.open(file)), randomData);\n \n+        if (readMode == ASYNC) {\n+            // wait for async Rubix requests to complete\n+            assertEventually(\n+                    new Duration(10, SECONDS),\n+                    () -> assertEquals(getAsyncDownloadedMb(readMode), beforeAsyncDownloadedMb + 1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3NTkzOA=="}, "originalCommit": {"oid": "cc04a3d5916b0c505593cdc1924c576b9e4b7233"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY5NTE5OQ==", "bodyText": "The observed counter increase can still be from the time when file was still being downloaded. Right?\n\nSince the file is 1MB, then when the counter bumps, then file should already be downloaded.", "url": "https://github.com/trinodb/trino/pull/3862#discussion_r431695199", "createdAt": "2020-05-28T09:14:55Z", "author": {"login": "sopel39"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/rubix/TestRubixCaching.java", "diffHunk": "@@ -291,6 +291,13 @@ public void testCacheRead(ReadMode readMode)\n \n         assertEquals(readFile(cachingFileSystem.open(file)), randomData);\n \n+        if (readMode == ASYNC) {\n+            // wait for async Rubix requests to complete\n+            assertEventually(\n+                    new Duration(10, SECONDS),\n+                    () -> assertEquals(getAsyncDownloadedMb(readMode), beforeAsyncDownloadedMb + 1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3NTkzOA=="}, "originalCommit": {"oid": "cc04a3d5916b0c505593cdc1924c576b9e4b7233"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4183, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}