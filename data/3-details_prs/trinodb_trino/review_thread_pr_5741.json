{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyNDQ1Mzc0", "number": 5741, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMDo0ODo0OVrOEzehHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMDo0ODo0OVrOEzehHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDEyODI5OnYy", "diffSide": "LEFT", "path": "presto-main/src/main/java/io/prestosql/execution/SqlTaskManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMDo0ODo0OVrOHquFgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwODowOToyM1rOHrExiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU1NzMxNQ==", "bodyText": "We know we can skip calling setMaxUserMemory because it will be obliterated by setResourceOvercommit invoc if overcommit enabled.\ni.e. This is correct because of what setResourceOvercommit does internally.\nI'd suggest removing (inlining) the setResourceOvercommit method, and exposing this relationship here:\nif (no overcocommit) { \n do usual stuff\n}\nelse {\n setMaxUserMemory & setMaxTotalMemory to memoryPool.max\n}", "url": "https://github.com/trinodb/trino/pull/5741#discussion_r514557315", "createdAt": "2020-10-29T20:48:49Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/execution/SqlTaskManager.java", "diffHunk": "@@ -373,21 +373,22 @@ public TaskInfo updateTask(Session session, TaskId taskId, Optional<PlanFragment\n         requireNonNull(sources, \"sources is null\");\n         requireNonNull(outputBuffers, \"outputBuffers is null\");\n \n-        long sessionQueryMaxMemoryPerNode = getQueryMaxMemoryPerNode(session).toBytes();\n-        long sessionQueryTotalMaxMemoryPerNode = getQueryMaxTotalMemoryPerNode(session).toBytes();\n-        // Session property query_max_memory_per_node is used to only decrease memory limit\n-        if (sessionQueryMaxMemoryPerNode <= queryMaxMemoryPerNode) {\n-            queryContexts.getUnchecked(taskId.getQueryId()).setMaxUserMemory(sessionQueryMaxMemoryPerNode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de006fe48058dbb7e39d0a292f651f233a84e09f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY2OTQ1Mg==", "bodyText": "@findepi I thought about this, and feel that it still may not be very clean, since we end up locking the object outside of the class, because we'd like to also access the guarded memoryPool. do you feel that the following would look better?\n......\nelse {\n    synchronized (queryContext) {\n        long maxBytes = queryContext.getMemoryPool().getMaxBytes();\n        queryContext.setMaxUserMemory(maxBytes);\n        queryContext.setMaxTotalMemory(maxBytes);\n    }\n}\n\nAnother option is we introduce specific methods like setMaxUserMemoryToMemoryPoolMaxBytes setMaxTotalMemoryToMemoryPoolMaxBytes. Thoughts?", "url": "https://github.com/trinodb/trino/pull/5741#discussion_r514669452", "createdAt": "2020-10-30T01:32:07Z", "author": {"login": "phd3"}, "path": "presto-main/src/main/java/io/prestosql/execution/SqlTaskManager.java", "diffHunk": "@@ -373,21 +373,22 @@ public TaskInfo updateTask(Session session, TaskId taskId, Optional<PlanFragment\n         requireNonNull(sources, \"sources is null\");\n         requireNonNull(outputBuffers, \"outputBuffers is null\");\n \n-        long sessionQueryMaxMemoryPerNode = getQueryMaxMemoryPerNode(session).toBytes();\n-        long sessionQueryTotalMaxMemoryPerNode = getQueryMaxTotalMemoryPerNode(session).toBytes();\n-        // Session property query_max_memory_per_node is used to only decrease memory limit\n-        if (sessionQueryMaxMemoryPerNode <= queryMaxMemoryPerNode) {\n-            queryContexts.getUnchecked(taskId.getQueryId()).setMaxUserMemory(sessionQueryMaxMemoryPerNode);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU1NzMxNQ=="}, "originalCommit": {"oid": "de006fe48058dbb7e39d0a292f651f233a84e09f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkyOTAzNQ==", "bodyText": "I see your point. Let's get in what you have now.", "url": "https://github.com/trinodb/trino/pull/5741#discussion_r514929035", "createdAt": "2020-10-30T08:09:23Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/execution/SqlTaskManager.java", "diffHunk": "@@ -373,21 +373,22 @@ public TaskInfo updateTask(Session session, TaskId taskId, Optional<PlanFragment\n         requireNonNull(sources, \"sources is null\");\n         requireNonNull(outputBuffers, \"outputBuffers is null\");\n \n-        long sessionQueryMaxMemoryPerNode = getQueryMaxMemoryPerNode(session).toBytes();\n-        long sessionQueryTotalMaxMemoryPerNode = getQueryMaxTotalMemoryPerNode(session).toBytes();\n-        // Session property query_max_memory_per_node is used to only decrease memory limit\n-        if (sessionQueryMaxMemoryPerNode <= queryMaxMemoryPerNode) {\n-            queryContexts.getUnchecked(taskId.getQueryId()).setMaxUserMemory(sessionQueryMaxMemoryPerNode);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU1NzMxNQ=="}, "originalCommit": {"oid": "de006fe48058dbb7e39d0a292f651f233a84e09f"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4852, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}