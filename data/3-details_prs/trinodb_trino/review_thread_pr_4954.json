{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyNTAwMTk4", "number": 4954, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzoxODozMVrOEbj7BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzoyMjoxMlrOEbkAyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzM1NTU3OnYy", "diffSide": "LEFT", "path": "presto-main/src/test/java/io/prestosql/sql/planner/optimizations/TestRemoveUnsupportedDynamicFilters.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzoxODozMVrOHFj5Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzoxODozMVrOHFj5Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU5Mjk3MQ==", "bodyText": "i prefer the previous formatting\ni know it does not conform to our global formatting rules, but i find this way more readable in plan tests", "url": "https://github.com/trinodb/trino/pull/4954#discussion_r475592971", "createdAt": "2020-08-24T13:18:31Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/optimizations/TestRemoveUnsupportedDynamicFilters.java", "diffHunk": "@@ -116,7 +116,8 @@ public void testUnconsumedDynamicFilterInJoin()\n                 join(\n                         INNER,\n                         ImmutableList.of(equiJoinClause(\"ORDERS_OK\", \"LINEITEM_OK\")),\n-                        filter(\"ORDERS_OK > 0\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42c9aeb007bfecdadb41efd478689a31466b8888"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzM3MDMyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/sql/planner/optimizations/TestRemoveUnsupportedDynamicFilters.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzoyMjoxMlrOHFkByQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzozMzowOVrOHFkc2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU5NTIwOQ==", "bodyText": "This is good. But it seems too easy to use a filter overload which does not check for dynamic filters.\nideas\n\nthis class could define filter method that delegates to PlanMatchPattern#filter making sure the lax matching is not used in this class\nthe PlanMatchPattern#filter  lax overload could be renamed to eg staticFilter, making it easier and more tempting to use the more strict overload", "url": "https://github.com/trinodb/trino/pull/4954#discussion_r475595209", "createdAt": "2020-08-24T13:22:12Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/optimizations/TestRemoveUnsupportedDynamicFilters.java", "diffHunk": "@@ -181,7 +182,8 @@ public void testUnmatchedDynamicFilter()\n                                 ImmutableList.of(equiJoinClause(\"ORDERS_OK\", \"LINEITEM_OK\")),\n                                 tableScan(\"orders\", ImmutableMap.of(\"ORDERS_OK\", \"orderkey\")),\n                                 filter(\n-                                        \"LINEITEM_OK > 0\",\n+                                        expression(\"LINEITEM_OK > 0\"),\n+                                        TRUE_LITERAL,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYwMjEzOA==", "bodyText": "this class could define filter method that delegates to PlanMatchPattern#filter making sure the lax matching is not used in this class\n\nthat makes sense", "url": "https://github.com/trinodb/trino/pull/4954#discussion_r475602138", "createdAt": "2020-08-24T13:33:09Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/optimizations/TestRemoveUnsupportedDynamicFilters.java", "diffHunk": "@@ -181,7 +182,8 @@ public void testUnmatchedDynamicFilter()\n                                 ImmutableList.of(equiJoinClause(\"ORDERS_OK\", \"LINEITEM_OK\")),\n                                 tableScan(\"orders\", ImmutableMap.of(\"ORDERS_OK\", \"orderkey\")),\n                                 filter(\n-                                        \"LINEITEM_OK > 0\",\n+                                        expression(\"LINEITEM_OK > 0\"),\n+                                        TRUE_LITERAL,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU5NTIwOQ=="}, "originalCommit": null, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3288, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}