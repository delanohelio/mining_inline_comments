{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4MTM0NTk5", "number": 4151, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzozNDozN1rOEH2UZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzozNjoyNVrOEH2XcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjY1NDQ3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/sql/query/TestJoin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzozNDozN1rOGnc28w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODo1MToyN1rOGn2RyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyMDQ2Nw==", "bodyText": "what correlation in IN and inner join?", "url": "https://github.com/trinodb/trino/pull/4151#discussion_r444020467", "createdAt": "2020-06-23T07:34:37Z", "author": {"login": "kokosing"}, "path": "presto-main/src/test/java/io/prestosql/sql/query/TestJoin.java", "diffHunk": "@@ -58,7 +59,106 @@ public void testJoinOnNan()\n     {\n         assertThat(assertions.query(\n                 \"WITH t(x) AS (VALUES if(rand() > 0, nan())) \" + // TODO: remove if(rand() > 0, ...) once https://github.com/prestosql/presto/issues/4119 is fixed\n-                \"SELECT * FROM t t1 JOIN t t2 ON NOT t1.x < t2.x\"))\n-            .matches(\"VALUES (nan(), nan())\");\n+                        \"SELECT * FROM t t1 JOIN t t2 ON NOT t1.x < t2.x\"))\n+                .matches(\"VALUES (nan(), nan())\");\n+    }\n+\n+    @Test\n+    public void testInPredicateInJoinCriteria()\n+    {\n+        assertThat(assertions.query(\"SELECT * FROM (VALUES 1, 2, NULL) t(x) JOIN (VALUES 1, 3, NULL) u(x) ON t.x IN (VALUES 1)\"))\n+                .matches(\"VALUES (1, 1), (1, 3), (1, NULL)\");\n+\n+        assertThat(assertions.query(\"SELECT * FROM (VALUES 1, 2, NULL) t(x) LEFT JOIN (VALUES 1, 3, NULL) u(x) ON t.x IN (VALUES 1)\"))\n+                .matches(\"VALUES (1, 1), (1, 3), (1, NULL), (2, NULL), (NULL, NULL)\");\n+\n+        assertThat(assertions.query(\n+                \"SELECT * FROM (VALUES 1, 2, NULL) t(x) RIGHT JOIN (VALUES 1, 3, NULL) u(x) ON t.x IN (VALUES 1)\"))\n+                .matches(\"VALUES (1, 1), (1, 3), (1, NULL)\");\n+\n+        assertThat(assertions.query(\n+                \"SELECT * FROM (VALUES 1, 2, NULL) t(x) FULL JOIN (VALUES 1, 3, NULL) u(x) ON t.x IN (VALUES 1)\"))\n+                .matches(\"VALUES (1, 1), (1, 3), (1, NULL), (2, NULL), (NULL, NULL)\");\n+\n+        assertThat(assertions.query(\n+                \"SELECT * FROM (VALUES 1, 2, NULL) t(x) JOIN (VALUES 1, 3, NULL) u(x) ON u.x IN (VALUES 1)\"))\n+                .matches(\"VALUES (1, 1), (2, 1), (NULL, 1)\");\n+\n+        assertThat(assertions.query(\n+                \"SELECT * FROM (VALUES 1, 2, NULL) t(x) LEFT JOIN (VALUES 1, 3, NULL) u(x) ON u.x IN (VALUES 1)\"))\n+                .matches(\"VALUES (1, 1), (2, 1), (NULL, 1)\");\n+\n+        assertThat(assertions.query(\n+                \"SELECT * FROM (VALUES 1, 2, NULL) t(x) RIGHT JOIN (VALUES 1, 3, NULL) u(x) ON u.x IN (VALUES 1)\"))\n+                .matches(\"VALUES (1, 1), (2, 1), (NULL, 1), (NULL, 3), (NULL, NULL)\");\n+\n+        assertThat(assertions.query(\n+                \"SELECT * FROM (VALUES 1, 2, NULL) t(x) FULL JOIN (VALUES 1, 3, NULL) u(x) ON u.x IN (VALUES 1)\"))\n+                .matches(\"VALUES (1, 1), (2, 1), (NULL, 1), (NULL, 3), (NULL, NULL)\");\n+\n+        // correlation in join clause not allowed for outer join", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzNjkzNg==", "bodyText": "Added a test.", "url": "https://github.com/trinodb/trino/pull/4151#discussion_r444436936", "createdAt": "2020-06-23T18:51:27Z", "author": {"login": "martint"}, "path": "presto-main/src/test/java/io/prestosql/sql/query/TestJoin.java", "diffHunk": "@@ -58,7 +59,106 @@ public void testJoinOnNan()\n     {\n         assertThat(assertions.query(\n                 \"WITH t(x) AS (VALUES if(rand() > 0, nan())) \" + // TODO: remove if(rand() > 0, ...) once https://github.com/prestosql/presto/issues/4119 is fixed\n-                \"SELECT * FROM t t1 JOIN t t2 ON NOT t1.x < t2.x\"))\n-            .matches(\"VALUES (nan(), nan())\");\n+                        \"SELECT * FROM t t1 JOIN t t2 ON NOT t1.x < t2.x\"))\n+                .matches(\"VALUES (nan(), nan())\");\n+    }\n+\n+    @Test\n+    public void testInPredicateInJoinCriteria()\n+    {\n+        assertThat(assertions.query(\"SELECT * FROM (VALUES 1, 2, NULL) t(x) JOIN (VALUES 1, 3, NULL) u(x) ON t.x IN (VALUES 1)\"))\n+                .matches(\"VALUES (1, 1), (1, 3), (1, NULL)\");\n+\n+        assertThat(assertions.query(\"SELECT * FROM (VALUES 1, 2, NULL) t(x) LEFT JOIN (VALUES 1, 3, NULL) u(x) ON t.x IN (VALUES 1)\"))\n+                .matches(\"VALUES (1, 1), (1, 3), (1, NULL), (2, NULL), (NULL, NULL)\");\n+\n+        assertThat(assertions.query(\n+                \"SELECT * FROM (VALUES 1, 2, NULL) t(x) RIGHT JOIN (VALUES 1, 3, NULL) u(x) ON t.x IN (VALUES 1)\"))\n+                .matches(\"VALUES (1, 1), (1, 3), (1, NULL)\");\n+\n+        assertThat(assertions.query(\n+                \"SELECT * FROM (VALUES 1, 2, NULL) t(x) FULL JOIN (VALUES 1, 3, NULL) u(x) ON t.x IN (VALUES 1)\"))\n+                .matches(\"VALUES (1, 1), (1, 3), (1, NULL), (2, NULL), (NULL, NULL)\");\n+\n+        assertThat(assertions.query(\n+                \"SELECT * FROM (VALUES 1, 2, NULL) t(x) JOIN (VALUES 1, 3, NULL) u(x) ON u.x IN (VALUES 1)\"))\n+                .matches(\"VALUES (1, 1), (2, 1), (NULL, 1)\");\n+\n+        assertThat(assertions.query(\n+                \"SELECT * FROM (VALUES 1, 2, NULL) t(x) LEFT JOIN (VALUES 1, 3, NULL) u(x) ON u.x IN (VALUES 1)\"))\n+                .matches(\"VALUES (1, 1), (2, 1), (NULL, 1)\");\n+\n+        assertThat(assertions.query(\n+                \"SELECT * FROM (VALUES 1, 2, NULL) t(x) RIGHT JOIN (VALUES 1, 3, NULL) u(x) ON u.x IN (VALUES 1)\"))\n+                .matches(\"VALUES (1, 1), (2, 1), (NULL, 1), (NULL, 3), (NULL, NULL)\");\n+\n+        assertThat(assertions.query(\n+                \"SELECT * FROM (VALUES 1, 2, NULL) t(x) FULL JOIN (VALUES 1, 3, NULL) u(x) ON u.x IN (VALUES 1)\"))\n+                .matches(\"VALUES (1, 1), (2, 1), (NULL, 1), (NULL, 3), (NULL, NULL)\");\n+\n+        // correlation in join clause not allowed for outer join", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyMDQ2Nw=="}, "originalCommit": null, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjY2MjI0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/RelationPlanner.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzozNjoyNVrOGnc7cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo0MDoxNVrOGoGjrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyMTYxNw==", "bodyText": "else if (dependencies.stream().allMatch(right::canResolve) and then else fail?", "url": "https://github.com/trinodb/trino/pull/4151#discussion_r444021617", "createdAt": "2020-06-23T07:36:25Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/RelationPlanner.java", "diffHunk": "@@ -411,15 +409,15 @@ else if (firstDependencies.stream().allMatch(right::canResolve) && secondDepende\n \n         if (node.getType() != INNER) {\n             for (Expression complexExpression : complexJoinExpressions) {\n-                Set<InPredicate> inPredicates = subqueryPlanner.collectInPredicateSubqueries(complexExpression, node);\n-                if (!inPredicates.isEmpty()) {\n-                    InPredicate inPredicate = Iterables.getLast(inPredicates);\n-                    throw semanticException(NOT_SUPPORTED, inPredicate, \"IN with subquery predicate in join condition is not supported\");\n+                Set<QualifiedName> dependencies = SymbolsExtractor.extractNames(complexExpression, analysis.getColumnReferences());\n+\n+                if (dependencies.stream().allMatch(left::canResolve)) {\n+                    leftPlanBuilder = subqueryPlanner.handleSubqueries(leftPlanBuilder, complexExpression, node);\n+                }\n+                else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQyNzMxNA==", "bodyText": "It doesn't matter. This is for handling uncorrelated subqueries (correlated ones are checked and prevented during analysis, as they are unsupported). This is a best effort to plan the subquery in the branch of the join that involves the operand in the expression. E.g.,\n\nSELECT ... FROM t LEFT JOIN u ON t.x IN (...), we want the subquery to be planned in the t branch\nSELECT ... FROM t LEFT JOIN u ON u.x IN (...), we want the subquery to be planned in the u branch\nSELECT ... FROM t LEFT JOIN u ON t.x + u.x IN (...), handle the subquery in an arbitrary branch. Not much we can do.\n\nI'll add a comment with an explanation.", "url": "https://github.com/trinodb/trino/pull/4151#discussion_r444427314", "createdAt": "2020-06-23T18:34:39Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/RelationPlanner.java", "diffHunk": "@@ -411,15 +409,15 @@ else if (firstDependencies.stream().allMatch(right::canResolve) && secondDepende\n \n         if (node.getType() != INNER) {\n             for (Expression complexExpression : complexJoinExpressions) {\n-                Set<InPredicate> inPredicates = subqueryPlanner.collectInPredicateSubqueries(complexExpression, node);\n-                if (!inPredicates.isEmpty()) {\n-                    InPredicate inPredicate = Iterables.getLast(inPredicates);\n-                    throw semanticException(NOT_SUPPORTED, inPredicate, \"IN with subquery predicate in join condition is not supported\");\n+                Set<QualifiedName> dependencies = SymbolsExtractor.extractNames(complexExpression, analysis.getColumnReferences());\n+\n+                if (dependencies.stream().allMatch(left::canResolve)) {\n+                    leftPlanBuilder = subqueryPlanner.handleSubqueries(leftPlanBuilder, complexExpression, node);\n+                }\n+                else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyMTYxNw=="}, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwMzY2Mw==", "bodyText": "thanks", "url": "https://github.com/trinodb/trino/pull/4151#discussion_r444703663", "createdAt": "2020-06-24T07:40:15Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/RelationPlanner.java", "diffHunk": "@@ -411,15 +409,15 @@ else if (firstDependencies.stream().allMatch(right::canResolve) && secondDepende\n \n         if (node.getType() != INNER) {\n             for (Expression complexExpression : complexJoinExpressions) {\n-                Set<InPredicate> inPredicates = subqueryPlanner.collectInPredicateSubqueries(complexExpression, node);\n-                if (!inPredicates.isEmpty()) {\n-                    InPredicate inPredicate = Iterables.getLast(inPredicates);\n-                    throw semanticException(NOT_SUPPORTED, inPredicate, \"IN with subquery predicate in join condition is not supported\");\n+                Set<QualifiedName> dependencies = SymbolsExtractor.extractNames(complexExpression, analysis.getColumnReferences());\n+\n+                if (dependencies.stream().allMatch(left::canResolve)) {\n+                    leftPlanBuilder = subqueryPlanner.handleSubqueries(leftPlanBuilder, complexExpression, node);\n+                }\n+                else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyMTYxNw=="}, "originalCommit": null, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4171, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}