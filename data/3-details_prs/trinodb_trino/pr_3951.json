{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMwMjM0MzU1", "number": 3951, "title": "Add table access rules to FileBasedSystemAccessControl", "bodyText": "Currently FileBasedSystemAccessControl control has catalogRules, queryAccessRules, impersonationRules, principalUserMatchRules and schemaAccessRules.\nThe proposal here is to add table access rules to it. This will give more granular access controls over the datasets.\nAt high level idea is to implement/enhance the below methods of FileBasedSystemAccessControl\n1. checkCanDropTable \t\t\t\t- Allow if user has OWNERSHIP access to table\n2. checkCanRenameTable \t\t\t- Allow if user has OWNERSHIP access to table\n3. checkCanGrantTablePrivilege\t\t- Allow if user has OWNERSHIP access to table\n4. checkCanRevokeTablePrivilege\t        - Allow if user has OWNERSHIP access to table\n5. checkCanShowCreateTable\t\t- Allow if user has OWNERSHIP access to table\n6. checkCanAddColumn\t\t\t\t- Allow if user has OWNERSHIP access to table\n7. checkCanDropColumn\t\t\t- Allow if user has OWNERSHIP access to table\n8. checkCanRenameColumn\t\t\t- Allow if user has OWNERSHIP access to table\n9. checkCanSetTableComment\t\t- Allow if user has OWNERSHIP access to table\n10. checkCanShowColumns  \t\t\t- Allow if user has any the SELECT, INSERT, DELETE, OWNERSHIP, GRANT_SELECT access to table\n11. filterColumns\t\t\t\t\t- Allow if user has any the SELECT, INSERT, DELETE, OWNERSHIP, GRANT_SELECT access to table\n12. checkCanSelectFromColumns          - Allow if user has SELECT access to table\n13. checkCanInsertIntoTable\t\t\t- Allow if user has INSERT access to table\n14. checkCanDeleteFromTable\t\t- Allow if user has DELETE access to table\n\nPlease find below the slack discussion on the same\nhttps://prestosql.slack.com/archives/CFLB9AMBN/p1588921035123100?thread_ts=1507847605.000156&cid=CFLB9AMBN\n@kokosing @findepi", "createdAt": "2020-06-07T17:29:35Z", "url": "https://github.com/trinodb/trino/pull/3951", "merged": true, "mergeCommit": {"oid": "5c7387cebb0ce7f6c3bdfd3b7623fdb9a46d219e"}, "closed": true, "closedAt": "2020-06-15T11:02:06Z", "author": {"login": "haldes"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpAbq4AH2gAyNDMwMjM0MzU1OmE3YTJkN2M0NDFkMWVkNjU2NWM2OTAyNDI1YmZiZDFhNTZiNzRjNDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcp2pt4gFqTQyNzg5OTYyNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a7a2d7c441d1ed6565c6902425bfbd1a56b74c40", "author": {"user": {"login": "haldes", "name": null}}, "url": "https://github.com/trinodb/trino/commit/a7a2d7c441d1ed6565c6902425bfbd1a56b74c40", "committedDate": "2020-06-07T18:47:12Z", "message": "Add table access rules to FileBasedSystemAccessControl"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3ODk5NjI3", "url": "https://github.com/trinodb/trino/pull/3951#pullrequestreview-427899627", "createdAt": "2020-06-10T09:56:42Z", "commit": {"oid": "a7a2d7c441d1ed6565c6902425bfbd1a56b74c40"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwOTo1Njo0MlrOGhtu9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwOTo1Njo0MlrOGhtu9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAwNTQ5NQ==", "bodyText": "I don't think anyone should be allowed to modify INFORMATION_SCHEMA_NAME tables. But I see it is how it is implemented in FileBasedAccessControl.", "url": "https://github.com/trinodb/trino/pull/3951#discussion_r438005495", "createdAt": "2020-06-10T09:56:42Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedSystemAccessControl.java", "diffHunk": "@@ -617,4 +683,34 @@ private boolean isSchemaOwner(SystemSecurityContext context, String schemaName)\n         }\n         return false;\n     }\n+\n+    private boolean checkAnyTablePermission(SystemSecurityContext context, SchemaTableName tableName)\n+    {\n+        return checkTablePermission(context, tableName, privileges -> !privileges.isEmpty());\n+    }\n+\n+    private boolean checkTablePermission(SystemSecurityContext context, SchemaTableName tableName, TableAccessControlRule.TablePrivilege... requiredPrivileges)\n+    {\n+        return checkTablePermission(context, tableName, privileges -> privileges.containsAll(ImmutableSet.copyOf(requiredPrivileges)));\n+    }\n+\n+    private boolean checkTablePermission(SystemSecurityContext context, SchemaTableName tableName, Predicate<Set<TableAccessControlRule.TablePrivilege>> checkPrivileges)\n+    {\n+        if (tableRules.isEmpty()) {\n+            return true;\n+        }\n+\n+        if (INFORMATION_SCHEMA_NAME.equals(tableName.getSchemaName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7a2d7c441d1ed6565c6902425bfbd1a56b74c40"}, "originalPosition": 242}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 607, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}