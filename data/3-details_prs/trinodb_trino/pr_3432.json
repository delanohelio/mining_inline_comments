{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNDQ2NDE1", "number": 3432, "title": "Use fixed pattern in a rule", "bodyText": "Splits the TransformCorrelatedScalarAggregationToJoin Optimizer rule\ninto a set of two rules with fixed patterns instead of using\nPlanNodeSearcher inside the rule.\nAfter this change, the only patterns supported by the rules are:\n\nCorrelatedJoin\n\nInput\nglobal Aggregation\n\n\n\nand\n\nCorrelatedJoin\n\nInput\nProject\n\nglobal Aggregation\n\n\n\n\n\nPreviously, the rule supported also cases were\n\nthere were multiple Projections above the Aggregation.\nThis case was handled incorrectly.\nthere were EnforceSingleRowNodes in the subquery\nabove the Aggregation. This functionality is restored\nby adding a rule to remove redundant EnforceSingleRowNodes.", "createdAt": "2020-04-14T22:32:47Z", "url": "https://github.com/trinodb/trino/pull/3432", "merged": true, "mergeCommit": {"oid": "3be0c5f07ca09c1586a392b86ee87a3cc55ea3e3"}, "closed": true, "closedAt": "2020-04-15T18:17:57Z", "author": {"login": "kasiafi"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXkR1QAH2gAyNDAzNDQ2NDE1OjFjNmQ1NjM5YWZkYWFkNmU4Y2UyNWJhNmRkOGNjMzg2NjhmNmFlN2I=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcX63W7ABqjMyMzYzNTE1NzI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1c6d5639afdaad6e8ce25ba6dd8cc38668f6ae7b", "author": {"user": {"login": "kasiafi", "name": null}}, "url": "https://github.com/trinodb/trino/commit/1c6d5639afdaad6e8ce25ba6dd8cc38668f6ae7b", "committedDate": "2020-04-14T14:22:24Z", "message": "Fix CorrelatedJoin naming in PlanPrinter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9755bdbad53d914e18e40cf41d91dd811e76cefe", "author": {"user": {"login": "kasiafi", "name": null}}, "url": "https://github.com/trinodb/trino/commit/9755bdbad53d914e18e40cf41d91dd811e76cefe", "committedDate": "2020-04-14T15:47:46Z", "message": "Minor refactor in correlated Aggregation rewriter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be2a97e38d2512eacdfec993a2550a2ff9ee749e", "author": {"user": {"login": "kasiafi", "name": null}}, "url": "https://github.com/trinodb/trino/commit/be2a97e38d2512eacdfec993a2550a2ff9ee749e", "committedDate": "2020-04-14T17:22:56Z", "message": "Fix source property in CorrelatedJoin pattern\n\nresolve the child node to skip GroupReference"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "206ac9839916abffbc30462bc4c4cfa941a7577a", "author": {"user": {"login": "kasiafi", "name": null}}, "url": "https://github.com/trinodb/trino/commit/206ac9839916abffbc30462bc4c4cfa941a7577a", "committedDate": "2020-04-14T22:29:54Z", "message": "Add rule to remove redundant EnforceSingleRowNodes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMzUyNzM1", "url": "https://github.com/trinodb/trino/pull/3432#pullrequestreview-393352735", "createdAt": "2020-04-14T23:02:00Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMzowMjowMVrOGFj9Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMzowNToxM1rOGFkBog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ4NTE3OQ==", "bodyText": "Annotate with @VisibleForTesting", "url": "https://github.com/trinodb/trino/pull/3432#discussion_r408485179", "createdAt": "2020-04-14T23:02:01Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/TransformCorrelatedScalarAggregationToJoin.java", "diffHunk": "@@ -66,55 +75,124 @@\n  * Note that only conjunction predicates in FilterNode are supported\n  */\n public class TransformCorrelatedScalarAggregationToJoin\n-        implements Rule<CorrelatedJoinNode>\n {\n-    private static final Pattern<CorrelatedJoinNode> PATTERN = correlatedJoin()\n-            .with(nonEmpty(correlation()))\n-            .with(filter().equalTo(TRUE_LITERAL)); // todo non-trivial join filter: adding filter/project on top of aggregation\n-\n-    @Override\n-    public Pattern<CorrelatedJoinNode> getPattern()\n-    {\n-        return PATTERN;\n-    }\n-\n     private final Metadata metadata;\n \n     public TransformCorrelatedScalarAggregationToJoin(Metadata metadata)\n     {\n         this.metadata = requireNonNull(metadata, \"metadata is null\");\n     }\n \n-    @Override\n-    public Result apply(CorrelatedJoinNode correlatedJoinNode, Captures captures, Context context)\n+    public Set<Rule<?>> rules()\n+    {\n+        return ImmutableSet.of(\n+                new TransformCorrelatedScalarAggregationToJoin.TransformCorrelatedScalarAggregationWithProjection(metadata),\n+                new TransformCorrelatedScalarAggregationToJoin.TransformCorrelatedScalarAggregationWithoutProjection(metadata));\n+    }\n+\n+    static final class TransformCorrelatedScalarAggregationWithProjection", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ4NjMwNg==", "bodyText": "Annotate with @VisibleForTesting", "url": "https://github.com/trinodb/trino/pull/3432#discussion_r408486306", "createdAt": "2020-04-14T23:05:13Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/TransformCorrelatedScalarAggregationToJoin.java", "diffHunk": "@@ -66,55 +75,124 @@\n  * Note that only conjunction predicates in FilterNode are supported\n  */\n public class TransformCorrelatedScalarAggregationToJoin\n-        implements Rule<CorrelatedJoinNode>\n {\n-    private static final Pattern<CorrelatedJoinNode> PATTERN = correlatedJoin()\n-            .with(nonEmpty(correlation()))\n-            .with(filter().equalTo(TRUE_LITERAL)); // todo non-trivial join filter: adding filter/project on top of aggregation\n-\n-    @Override\n-    public Pattern<CorrelatedJoinNode> getPattern()\n-    {\n-        return PATTERN;\n-    }\n-\n     private final Metadata metadata;\n \n     public TransformCorrelatedScalarAggregationToJoin(Metadata metadata)\n     {\n         this.metadata = requireNonNull(metadata, \"metadata is null\");\n     }\n \n-    @Override\n-    public Result apply(CorrelatedJoinNode correlatedJoinNode, Captures captures, Context context)\n+    public Set<Rule<?>> rules()\n+    {\n+        return ImmutableSet.of(\n+                new TransformCorrelatedScalarAggregationToJoin.TransformCorrelatedScalarAggregationWithProjection(metadata),\n+                new TransformCorrelatedScalarAggregationToJoin.TransformCorrelatedScalarAggregationWithoutProjection(metadata));\n+    }\n+\n+    static final class TransformCorrelatedScalarAggregationWithProjection\n+            implements Rule<CorrelatedJoinNode>\n     {\n-        PlanNode subquery = correlatedJoinNode.getSubquery();\n+        private static final Capture<ProjectNode> PROJECTION = newCapture();\n+        private static final Capture<AggregationNode> AGGREGATION = newCapture();\n+\n+        private static final Pattern<CorrelatedJoinNode> PATTERN = correlatedJoin()\n+                .with(nonEmpty(correlation()))\n+                .with(filter().equalTo(TRUE_LITERAL))\n+                .with(subquery().matching(project()\n+                        .capturedAs(PROJECTION)\n+                        .with(source().matching(aggregation()\n+                                .with(empty(groupingColumns()))\n+                                .capturedAs(AGGREGATION)))));\n+\n+        private final Metadata metadata;\n \n-        if (!isScalar(subquery, context.getLookup())) {\n-            return Result.empty();\n+        TransformCorrelatedScalarAggregationWithProjection(Metadata metadata)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 96}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fbb55233656197ba42be9c093e257490beb7eb9", "author": {"user": {"login": "kasiafi", "name": null}}, "url": "https://github.com/trinodb/trino/commit/2fbb55233656197ba42be9c093e257490beb7eb9", "committedDate": "2020-04-15T16:40:59Z", "message": "Use fixed pattern in a rule\n\nSplits the TransformCorrelatedScalarAggregationToJoin Optimizer rule\ninto a set of two rules with fixed patterns instead of using\nPlanNodeSearcher inside the rule.\nAfter this change, the only patterns supported by the rules are:\n\n- CorrelatedJoin\n    - Input\n    - global Aggregation\n\nand\n\n- CorrelatedJoin\n    - Input\n    - Project\n\t- global Aggregation\n\nPreviously, the rule supported also cases were\n1. there were multiple Projections above the Aggregation.\n   This case was handled incorrectly.\n2. there were EnforceSingleRowNodes in the subquery\n   above the Aggregation. This functionality is restored\n   by adding a rule to remove redundant EnforceSingleRowNodes."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "2fbb55233656197ba42be9c093e257490beb7eb9", "author": {"user": {"login": "kasiafi", "name": null}}, "url": "https://github.com/trinodb/trino/commit/2fbb55233656197ba42be9c093e257490beb7eb9", "committedDate": "2020-04-15T16:40:59Z", "message": "Use fixed pattern in a rule\n\nSplits the TransformCorrelatedScalarAggregationToJoin Optimizer rule\ninto a set of two rules with fixed patterns instead of using\nPlanNodeSearcher inside the rule.\nAfter this change, the only patterns supported by the rules are:\n\n- CorrelatedJoin\n    - Input\n    - global Aggregation\n\nand\n\n- CorrelatedJoin\n    - Input\n    - Project\n\t- global Aggregation\n\nPreviously, the rule supported also cases were\n1. there were multiple Projections above the Aggregation.\n   This case was handled incorrectly.\n2. there were EnforceSingleRowNodes in the subquery\n   above the Aggregation. This functionality is restored\n   by adding a rule to remove redundant EnforceSingleRowNodes."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1509, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}