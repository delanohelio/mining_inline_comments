{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNjU5Nzg3", "number": 4918, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjoyMTo0OVrOEbB1jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjoyMzoxN1rOEbB3LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Nzc3MTAxOnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleDistributedQueries.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjoyMTo0OVrOHEzbgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMDo1NzoyNVrOHFfXwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc5ODk3Nw==", "bodyText": "can we remove override now?", "url": "https://github.com/trinodb/trino/pull/4918#discussion_r474798977", "createdAt": "2020-08-21T16:21:49Z", "author": {"login": "findepi"}, "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleDistributedQueries.java", "diffHunk": "@@ -128,7 +128,7 @@ protected TestTable createTableWithDefaultColumns()\n     @Override\n     public void testLargeIn()\n     {\n-        int numberOfElements = 1000;\n+        int numberOfElements = 5000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEwODM2Nw==", "bodyText": "yes, this was overridden only to change the number of elements..", "url": "https://github.com/trinodb/trino/pull/4918#discussion_r475108367", "createdAt": "2020-08-22T16:47:31Z", "author": {"login": "eskabetxe"}, "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleDistributedQueries.java", "diffHunk": "@@ -128,7 +128,7 @@ protected TestTable createTableWithDefaultColumns()\n     @Override\n     public void testLargeIn()\n     {\n-        int numberOfElements = 1000;\n+        int numberOfElements = 5000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc5ODk3Nw=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ1NDc5MQ==", "bodyText": "There is still this extra part in Oracle test which is not present in superclass:\n        String arrayValues = range(0, numberOfElements)\n                .mapToObj(i -> format(\"ARRAY[%s, %s, %s]\", i, i + 1, i + 2))\n                .collect(joining(\", \"));\n        assertQuery(\"SELECT ARRAY[0, 0, 0] in (ARRAY[0, 0, 0], \" + arrayValues + \")\", \"values true\");\n        assertQuery(\"SELECT ARRAY[0, 0, 0] in (\" + arrayValues + \")\", \"values false\");\n\nI can call out to super anyway though, even if we still want test with arrays.", "url": "https://github.com/trinodb/trino/pull/4918#discussion_r475454791", "createdAt": "2020-08-24T09:19:14Z", "author": {"login": "losipiuk"}, "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleDistributedQueries.java", "diffHunk": "@@ -128,7 +128,7 @@ protected TestTable createTableWithDefaultColumns()\n     @Override\n     public void testLargeIn()\n     {\n-        int numberOfElements = 1000;\n+        int numberOfElements = 5000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc5ODk3Nw=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxODkxMw==", "bodyText": "@losipiuk that code isnt oracle especific, that method have that code before..\nthat was removed here 0c13d16", "url": "https://github.com/trinodb/trino/pull/4918#discussion_r475518913", "createdAt": "2020-08-24T10:57:25Z", "author": {"login": "eskabetxe"}, "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleDistributedQueries.java", "diffHunk": "@@ -128,7 +128,7 @@ protected TestTable createTableWithDefaultColumns()\n     @Override\n     public void testLargeIn()\n     {\n-        int numberOfElements = 1000;\n+        int numberOfElements = 5000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc5ODk3Nw=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Nzc3NTE3OnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjoyMzoxN1rOHEzeIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMjowMjoyMVrOHFhQDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc5OTY1MQ==", "bodyText": "You eliminate a filter here. Do we have a predicate pushdown test for Oracle, like we have for postgres?", "url": "https://github.com/trinodb/trino/pull/4918#discussion_r474799651", "createdAt": "2020-08-21T16:23:17Z", "author": {"login": "findepi"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "diffHunk": "@@ -332,6 +345,19 @@ else if (precision > Decimals.MAX_PRECISION || columnSize <= 0) {\n         return Optional.empty();\n     }\n \n+    private static PredicatePushdownController.DomainPushdownResult fullPushdownIfSupported(Domain domain)\n+    {\n+        if (domain.getValues().getRanges().getRangeCount() > ORACLE_MAX_LIST_EXPRESSIONS) {\n+            // pushdown simplified domain\n+            Domain pushedDown = domain.simplify();\n+            return new PredicatePushdownController.DomainPushdownResult(pushedDown, domain);\n+        }\n+        else {\n+            // full pushdown\n+            return new PredicatePushdownController.DomainPushdownResult(domain, Domain.all(domain.getType()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU0OTcwOA==", "bodyText": "Added.", "url": "https://github.com/trinodb/trino/pull/4918#discussion_r475549708", "createdAt": "2020-08-24T12:02:21Z", "author": {"login": "losipiuk"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "diffHunk": "@@ -332,6 +345,19 @@ else if (precision > Decimals.MAX_PRECISION || columnSize <= 0) {\n         return Optional.empty();\n     }\n \n+    private static PredicatePushdownController.DomainPushdownResult fullPushdownIfSupported(Domain domain)\n+    {\n+        if (domain.getValues().getRanges().getRangeCount() > ORACLE_MAX_LIST_EXPRESSIONS) {\n+            // pushdown simplified domain\n+            Domain pushedDown = domain.simplify();\n+            return new PredicatePushdownController.DomainPushdownResult(pushedDown, domain);\n+        }\n+        else {\n+            // full pushdown\n+            return new PredicatePushdownController.DomainPushdownResult(domain, Domain.all(domain.getType()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc5OTY1MQ=="}, "originalCommit": null, "originalPosition": 109}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3238, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}