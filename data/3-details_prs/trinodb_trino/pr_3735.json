{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4MTQ1MjEx", "number": 3735, "title": "Add support for passthrough Elasticsearch queries", "bodyText": "This allows running queries over the results of a raw Elasticsearch query.\nIt extends the syntax of the enhanced ES table names with the following:\nSELECT * FROM es.default.\"<index>$query:<base32-encoded ES query>\"\n\nThe query is base32-encoded to avoid having to deal with escaping quotes and case\nsensitivity issues in table identifiers.\nThe result of these query tables is a table with a single row and a single column\nnamed \"result\" of type JSON.\nDepends on #3718", "createdAt": "2020-05-14T17:29:57Z", "url": "https://github.com/trinodb/trino/pull/3735", "merged": true, "mergeCommit": {"oid": "2fe05db314f355a074f2544af32ebc6e47a52b94"}, "closed": true, "closedAt": "2020-05-22T03:26:21Z", "author": {"login": "martint"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchSKRxABqjMzMzc5ODU2NjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjpXR5AFqTQxNjYxOTc2OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMjUwMTgw", "url": "https://github.com/trinodb/trino/pull/3735#pullrequestreview-412250180", "createdAt": "2020-05-14T23:23:52Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMzoyMzo1MlrOGVxcYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMTo1MjoxMVrOGVz1-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ4MzM2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (handle.getType().equals(QUERY)) {\n          \n          \n            \n                    if (handle.getType() == QUERY) {\n          \n      \n    \n    \n  \n\nOr perhaps a helper method like isPassthroughQuery() would aid readability, since this test shows up in a few places.", "url": "https://github.com/trinodb/trino/pull/3735#discussion_r425483360", "createdAt": "2020-05-14T23:23:52Z", "author": {"login": "aalbu"}, "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/ElasticsearchMetadata.java", "diffHunk": "@@ -115,37 +163,84 @@ public ElasticsearchTableHandle getTableHandle(ConnectorSession session, SchemaT\n     public ConnectorTableMetadata getTableMetadata(ConnectorSession session, ConnectorTableHandle table)\n     {\n         ElasticsearchTableHandle handle = (ElasticsearchTableHandle) table;\n+\n+        if (handle.getType().equals(QUERY)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5MzE0MQ==", "bodyText": "Using pretty is going to make the response bigger.", "url": "https://github.com/trinodb/trino/pull/3735#discussion_r425493141", "createdAt": "2020-05-14T23:58:20Z", "author": {"login": "aalbu"}, "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/client/ElasticsearchClient.java", "diffHunk": "@@ -530,6 +532,36 @@ private JsonNode nullSafeNode(JsonNode jsonNode, String name)\n         return jsonNode.get(name);\n     }\n \n+    public String executeQuery(String index, String query)\n+    {\n+        String path = format(\"/%s/_search?pretty\", index);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5OTk5MQ==", "bodyText": "It seems more expressive use the equivalent SQL query for expected: SELECT max(orderkey), sum(orderkey) FROM orders", "url": "https://github.com/trinodb/trino/pull/3735#discussion_r425499991", "createdAt": "2020-05-15T00:23:11Z", "author": {"login": "aalbu"}, "path": "presto-elasticsearch/src/test/java/io/prestosql/elasticsearch/BaseElasticsearchSmokeTest.java", "diffHunk": "@@ -747,6 +749,27 @@ public void testMultiIndexAlias()\n                 \"SELECT (SELECT count(*) FROM region) + (SELECT count(*) FROM nation)\");\n     }\n \n+    @Test\n+    public void testPassthroughQuery()\n+    {\n+        @Language(\"JSON\")\n+        String query = \"{\\n\" +\n+                \"    \\\"size\\\": 0,\\n\" +\n+                \"    \\\"aggs\\\" : {\\n\" +\n+                \"        \\\"max_orderkey\\\" : { \\\"max\\\" : { \\\"field\\\" : \\\"orderkey\\\" } },\\n\" +\n+                \"        \\\"sum_orderkey\\\" : { \\\"sum\\\" : { \\\"field\\\" : \\\"orderkey\\\" } }\\n\" +\n+                \"    }\\n\" +\n+                \"}\";\n+\n+        assertQuery(\n+                format(\"WITH data(r) AS (\" +\n+                        \"   SELECT CAST(result AS ROW(aggregations ROW(max_orderkey ROW(value BIGINT), sum_orderkey ROW(value BIGINT)))) \" +\n+                        \"   FROM \\\"orders$query:%s\\\") \" +\n+                        \"SELECT r.aggregations.max_orderkey.value, r.aggregations.sum_orderkey.value \" +\n+                        \"FROM data\", BaseEncoding.base32().encode(query.getBytes(UTF_8))),\n+                \"VALUES (60000, 449872500)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUxOTQzNA==", "bodyText": "I was thinking about the relative advantages of using JSON vs VARCHAR for the column type.  JSON is more expressive (one might even argue correctness), but without knowing how a client might use the result, VARCHAR might be more pragmatic.  I think it's conceivable one might want to parse and process the results of an aggregation client side, so they might end up serializing the result and reading the resulting string.  The responses can get pretty big and the cost of parsing a big JSON document might not be insignificant.  On the other hand, if a client wanted to join the aggregation result with some other table, they'd only need to call json_parse(result).", "url": "https://github.com/trinodb/trino/pull/3735#discussion_r425519434", "createdAt": "2020-05-15T01:39:21Z", "author": {"login": "aalbu"}, "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/ElasticsearchMetadata.java", "diffHunk": "@@ -79,6 +95,16 @@ public ElasticsearchMetadata(TypeManager typeManager, ElasticsearchClient client\n         this.client = requireNonNull(client, \"client is null\");\n         requireNonNull(config, \"config is null\");\n         this.schemaName = config.getDefaultSchema();\n+\n+        Type jsonType = typeManager.getType(new TypeSignature(StandardTypes.JSON));\n+        queryResultColumnMetadata = ColumnMetadata.builder()\n+                .setName(\"result\")\n+                .setType(jsonType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUyMjY4Mg==", "bodyText": "Perhaps a test for an invalid query?", "url": "https://github.com/trinodb/trino/pull/3735#discussion_r425522682", "createdAt": "2020-05-15T01:52:11Z", "author": {"login": "aalbu"}, "path": "presto-elasticsearch/src/test/java/io/prestosql/elasticsearch/BaseElasticsearchSmokeTest.java", "diffHunk": "@@ -747,6 +749,27 @@ public void testMultiIndexAlias()\n                 \"SELECT (SELECT count(*) FROM region) + (SELECT count(*) FROM nation)\");\n     }\n \n+    @Test\n+    public void testPassthroughQuery()\n+    {\n+        @Language(\"JSON\")\n+        String query = \"{\\n\" +\n+                \"    \\\"size\\\": 0,\\n\" +\n+                \"    \\\"aggs\\\" : {\\n\" +\n+                \"        \\\"max_orderkey\\\" : { \\\"max\\\" : { \\\"field\\\" : \\\"orderkey\\\" } },\\n\" +\n+                \"        \\\"sum_orderkey\\\" : { \\\"sum\\\" : { \\\"field\\\" : \\\"orderkey\\\" } }\\n\" +\n+                \"    }\\n\" +\n+                \"}\";\n+\n+        assertQuery(\n+                format(\"WITH data(r) AS (\" +\n+                        \"   SELECT CAST(result AS ROW(aggregations ROW(max_orderkey ROW(value BIGINT), sum_orderkey ROW(value BIGINT)))) \" +\n+                        \"   FROM \\\"orders$query:%s\\\") \" +\n+                        \"SELECT r.aggregations.max_orderkey.value, r.aggregations.sum_orderkey.value \" +\n+                        \"FROM data\", BaseEncoding.base32().encode(query.getBytes(UTF_8))),\n+                \"VALUES (60000, 449872500)\");\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbd132c861c11ded7afc0b9d4333a73455450660", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/dbd132c861c11ded7afc0b9d4333a73455450660", "committedDate": "2020-05-15T18:55:56Z", "message": "Add support for passthrough Elasticsearch queries\n\nThis allows running queries over the results of a raw Elasticsearch query.\nIt extends the syntax of the enhanced ES table names with the following:\n\n    SELECT * FROM es.default.\"<index>$query:<base32-encoded ES query>\"\n\nThe query is base32-encoded to avoid having to deal with escaping quotes and case\nsensitivity issues in table identifiers.\n\nThe result of these query tables is a table with a single row and a single column\nnamed \"result\" of type JSON."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "dbd132c861c11ded7afc0b9d4333a73455450660", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/dbd132c861c11ded7afc0b9d4333a73455450660", "committedDate": "2020-05-15T18:55:56Z", "message": "Add support for passthrough Elasticsearch queries\n\nThis allows running queries over the results of a raw Elasticsearch query.\nIt extends the syntax of the enhanced ES table names with the following:\n\n    SELECT * FROM es.default.\"<index>$query:<base32-encoded ES query>\"\n\nThe query is base32-encoded to avoid having to deal with escaping quotes and case\nsensitivity issues in table identifiers.\n\nThe result of these query tables is a table with a single row and a single column\nnamed \"result\" of type JSON."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NjE5NzY5", "url": "https://github.com/trinodb/trino/pull/3735#pullrequestreview-416619769", "createdAt": "2020-05-22T03:04:59Z", "commit": {"oid": "dbd132c861c11ded7afc0b9d4333a73455450660"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1105, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}