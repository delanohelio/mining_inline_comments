{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxMTgxMjY0", "number": 5087, "title": "Fix compiler error for lambda parameter with non-letter", "bodyText": "Fix a generated code error when lambda parameter contains a character\nthat is not part of a valid Java identifier.\nFixes #5085", "createdAt": "2020-09-07T08:28:27Z", "url": "https://github.com/trinodb/trino/pull/5087", "merged": true, "mergeCommit": {"oid": "8732f675e6add47b03abcd9f6a3c9943a40d7bc0"}, "closed": true, "closedAt": "2020-09-09T09:06:04Z", "author": {"login": "findepi"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdGevPeAFqTQ4MzM1NjQ5Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHHGyJgBqjM3NDQzNTU3Nzc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMzU2NDky", "url": "https://github.com/trinodb/trino/pull/5087#pullrequestreview-483356492", "createdAt": "2020-09-07T08:29:31Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwODoyOTozMVrOHN1xgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwODoyOTozMVrOHN1xgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI3NDU2Mg==", "bodyText": "I realize \"lambda_\" + argumentPosition is enough from generated code perspective.\nI retained argument name in case there is any need to debug the generated code.", "url": "https://github.com/trinodb/trino/pull/5087#discussion_r484274562", "createdAt": "2020-09-07T08:29:31Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/gen/LambdaBytecodeGenerator.java", "diffHunk": "@@ -142,6 +142,14 @@ public static CompiledLambda preGenerateLambdaExpression(\n                 lambdaExpression);\n     }\n \n+    /**\n+     * Parameter name for the generated method.\n+     */\n+    private static String parameterName(int argumentPosition, String lambdaArgumentName)\n+    {\n+        return \"lambda_\" + argumentPosition + \"_\" + lambdaArgumentName.replaceAll(\"[^a-zA-Z_]\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzOTQwODQ2", "url": "https://github.com/trinodb/trino/pull/5087#pullrequestreview-483940846", "createdAt": "2020-09-08T09:08:01Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTowODowMVrOHOT3kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTowODowMVrOHOT3kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc2NzYzMw==", "bodyText": "@Praveen2112 was there a similar escaping somewhere already? I think you did one, but I can't remember where was it.", "url": "https://github.com/trinodb/trino/pull/5087#discussion_r484767633", "createdAt": "2020-09-08T09:08:01Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/sql/gen/LambdaBytecodeGenerator.java", "diffHunk": "@@ -142,6 +142,14 @@ public static CompiledLambda preGenerateLambdaExpression(\n                 lambdaExpression);\n     }\n \n+    /**\n+     * Parameter name for the generated method.\n+     */\n+    private static String parameterName(int argumentPosition, String lambdaArgumentName)\n+    {\n+        return \"lambda_\" + argumentPosition + \"_\" + lambdaArgumentName.replaceAll(\"[^a-zA-Z_]\", \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI3NDU2Mg=="}, "originalCommit": null, "originalPosition": 18}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzODAyNDU5", "url": "https://github.com/trinodb/trino/pull/5087#pullrequestreview-483802459", "createdAt": "2020-09-08T05:24:16Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNToyNDoxNlrOHONGZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNToyNDoxNlrOHONGZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY1Njc0MQ==", "bodyText": "The current approach in the PR makes sense, considering that the construction of the class definition shouldn't make any assumptions about the symbols, and do this sanitization before creating parameter names.\nAnother place to do this sanitization could be SymbolAllocator#newSymbol. As a side-effect, it  may improve plan readability (a minor benefit though). For example, if we truncate the string while \"sanitizing\" the symbols for the issue mentioned in #5088, the explain plan would display the truncated symbol. Thoughts?", "url": "https://github.com/trinodb/trino/pull/5087#discussion_r484656741", "createdAt": "2020-09-08T05:24:16Z", "author": {"login": "phd3"}, "path": "presto-main/src/main/java/io/prestosql/sql/gen/LambdaBytecodeGenerator.java", "diffHunk": "@@ -142,6 +142,14 @@ public static CompiledLambda preGenerateLambdaExpression(\n                 lambdaExpression);\n     }\n \n+    /**\n+     * Parameter name for the generated method.\n+     */\n+    private static String parameterName(int argumentPosition, String lambdaArgumentName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2c7bfac371b85d2687310cc6924a7e8ebf95452", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/d2c7bfac371b85d2687310cc6924a7e8ebf95452", "committedDate": "2020-09-09T07:31:18Z", "message": "Remove bogus braces from regex\n\nAlthough the unqualified name in JVM apparently _can_ contain braces `(`\nor `)`, the intention was to remove them, retaining only letters,\ndigits, underscore and dollar sign."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fb4ac0eaa95b49232217fea542492b74ba1894e", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/5fb4ac0eaa95b49232217fea542492b74ba1894e", "committedDate": "2020-09-09T07:31:19Z", "message": "Remove redundant constructor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11b4e3af3f478b88a7e48be09c48c913816da5e3", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/11b4e3af3f478b88a7e48be09c48c913816da5e3", "committedDate": "2020-09-09T07:31:19Z", "message": "Fix indentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c2347187686f0b9e1e2be0cf483bf40191adc31", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/3c2347187686f0b9e1e2be0cf483bf40191adc31", "committedDate": "2020-09-09T07:31:19Z", "message": "Fix compiler error for lambda parameter with non-letter\n\nFix a generated code error when lambda parameter contains a character\nthat is not part of a valid Java identifier."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "3c2347187686f0b9e1e2be0cf483bf40191adc31", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/3c2347187686f0b9e1e2be0cf483bf40191adc31", "committedDate": "2020-09-09T07:31:19Z", "message": "Fix compiler error for lambda parameter with non-letter\n\nFix a generated code error when lambda parameter contains a character\nthat is not part of a valid Java identifier."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3898, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}