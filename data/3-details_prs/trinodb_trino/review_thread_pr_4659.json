{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwNTMwNzM2", "number": 4659, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxOToxNzo0MVrOEWgZsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxOToyMTozNVrOEWgavg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDM0OTk1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/connector/system/RuleStatsSystemTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxOToxNzo0MVrOG91q-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxOToxNzo0MVrOG91q-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ5NTY3Mw==", "bodyText": "Don't use InternalTypeManager. That's an implementation detail of the metadata system:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .column(\"time_distribution_percentiles\", new InternalTypeManager(metadata).getType(mapType(DOUBLE.getTypeSignature(), DOUBLE.getTypeSignature())))\n          \n          \n            \n                           .column(\"time_distribution_percentiles\", metadata.getType(mapType(DOUBLE.getTypeSignature(), DOUBLE.getTypeSignature())))", "url": "https://github.com/trinodb/trino/pull/4659#discussion_r467495673", "createdAt": "2020-08-08T19:17:41Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/connector/system/RuleStatsSystemTable.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.connector.system;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.connector.ColumnMetadata;\n+import io.prestosql.spi.connector.ConnectorPageSource;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorTableMetadata;\n+import io.prestosql.spi.connector.ConnectorTransactionHandle;\n+import io.prestosql.spi.connector.FixedPageSource;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import io.prestosql.spi.connector.SystemTable;\n+import io.prestosql.spi.predicate.TupleDomain;\n+import io.prestosql.sql.planner.RuleStatsRecorder;\n+import io.prestosql.sql.planner.iterative.RuleStats;\n+import io.prestosql.type.InternalTypeManager;\n+\n+import javax.inject.Inject;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static io.prestosql.metadata.MetadataUtil.TableMetadataBuilder.tableMetadataBuilder;\n+import static io.prestosql.spi.connector.SystemTable.Distribution.SINGLE_COORDINATOR;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.TypeSignature.mapType;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class RuleStatsSystemTable\n+        implements SystemTable\n+{\n+    private static final SchemaTableName TABLE_NAME = new SchemaTableName(\"runtime\", \"optimizer_rule_stats\");\n+    private final ConnectorTableMetadata ruleStatsTable;\n+    private final Optional<RuleStatsRecorder> ruleStatsRecorder;\n+\n+    @Inject\n+    public RuleStatsSystemTable(Optional<RuleStatsRecorder> ruleStatsRecorder, Metadata metadata)\n+    {\n+        this.ruleStatsRecorder = requireNonNull(ruleStatsRecorder, \"ruleStatsRecorder is null\");\n+        requireNonNull(metadata, \"metadata is null\");\n+\n+        this.ruleStatsTable = tableMetadataBuilder(TABLE_NAME)\n+                .column(\"rule_name\", VARCHAR)\n+                .column(\"invocations\", BIGINT)\n+                .column(\"matches\", BIGINT)\n+                .column(\"failures\", BIGINT)\n+                .column(\"average_time\", DOUBLE)\n+                .column(\"time_distribution_percentiles\", new InternalTypeManager(metadata).getType(mapType(DOUBLE.getTypeSignature(), DOUBLE.getTypeSignature())))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDM1MjYyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/connector/system/RuleStatsSystemTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxOToyMTozNVrOG91sKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxOToyMTozNVrOG91sKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ5NTk3Nw==", "bodyText": "Let's remove this column. All measurements are in the same unit, so we don't need to clarify what the unit is per row.", "url": "https://github.com/trinodb/trino/pull/4659#discussion_r467495977", "createdAt": "2020-08-08T19:21:35Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/connector/system/RuleStatsSystemTable.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.connector.system;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.connector.ColumnMetadata;\n+import io.prestosql.spi.connector.ConnectorPageSource;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorTableMetadata;\n+import io.prestosql.spi.connector.ConnectorTransactionHandle;\n+import io.prestosql.spi.connector.FixedPageSource;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import io.prestosql.spi.connector.SystemTable;\n+import io.prestosql.spi.predicate.TupleDomain;\n+import io.prestosql.sql.planner.RuleStatsRecorder;\n+import io.prestosql.sql.planner.iterative.RuleStats;\n+import io.prestosql.type.InternalTypeManager;\n+\n+import javax.inject.Inject;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static io.prestosql.metadata.MetadataUtil.TableMetadataBuilder.tableMetadataBuilder;\n+import static io.prestosql.spi.connector.SystemTable.Distribution.SINGLE_COORDINATOR;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.TypeSignature.mapType;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class RuleStatsSystemTable\n+        implements SystemTable\n+{\n+    private static final SchemaTableName TABLE_NAME = new SchemaTableName(\"runtime\", \"optimizer_rule_stats\");\n+    private final ConnectorTableMetadata ruleStatsTable;\n+    private final Optional<RuleStatsRecorder> ruleStatsRecorder;\n+\n+    @Inject\n+    public RuleStatsSystemTable(Optional<RuleStatsRecorder> ruleStatsRecorder, Metadata metadata)\n+    {\n+        this.ruleStatsRecorder = requireNonNull(ruleStatsRecorder, \"ruleStatsRecorder is null\");\n+        requireNonNull(metadata, \"metadata is null\");\n+\n+        this.ruleStatsTable = tableMetadataBuilder(TABLE_NAME)\n+                .column(\"rule_name\", VARCHAR)\n+                .column(\"invocations\", BIGINT)\n+                .column(\"matches\", BIGINT)\n+                .column(\"failures\", BIGINT)\n+                .column(\"average_time\", DOUBLE)\n+                .column(\"time_distribution_percentiles\", new InternalTypeManager(metadata).getType(mapType(DOUBLE.getTypeSignature(), DOUBLE.getTypeSignature())))\n+                .column(\"time_unit\", VARCHAR)\n+                .build();\n+    }\n+\n+    @Override\n+    public Distribution getDistribution()\n+    {\n+        return SINGLE_COORDINATOR;\n+    }\n+\n+    @Override\n+    public ConnectorTableMetadata getTableMetadata()\n+    {\n+        return ruleStatsTable;\n+    }\n+\n+    @Override\n+    public ConnectorPageSource pageSource(ConnectorTransactionHandle transactionHandle, ConnectorSession session, TupleDomain<Integer> constraint)\n+    {\n+        checkState(ruleStatsRecorder.isPresent(), \"Rule stats system table can return results only on coordinator\");\n+        Map<Class<?>, RuleStats> ruleStats = ruleStatsRecorder.get().getStats();\n+\n+        int positionCount = ruleStats.size();\n+        Map<String, BlockBuilder> blockBuilders = ruleStatsTable.getColumns().stream()\n+                .collect(toImmutableMap(ColumnMetadata::getName, column -> column.getType().createBlockBuilder(null, positionCount)));\n+\n+        for (Map.Entry<Class<?>, RuleStats> entry : ruleStats.entrySet()) {\n+            RuleStats stats = entry.getValue();\n+\n+            VARCHAR.writeString(blockBuilders.get(\"rule_name\"), entry.getKey().getSimpleName());\n+            BIGINT.writeLong(blockBuilders.get(\"invocations\"), stats.getInvocations());\n+            BIGINT.writeLong(blockBuilders.get(\"matches\"), stats.getHits());\n+            BIGINT.writeLong(blockBuilders.get(\"failures\"), stats.getFailures());\n+            DOUBLE.writeDouble(blockBuilders.get(\"average_time\"), stats.getTime().getAvg());\n+\n+            BlockBuilder mapWriter = blockBuilders.get(\"time_distribution_percentiles\").beginBlockEntry();\n+            for (Map.Entry<Double, Double> percentile : stats.getTime().getPercentiles().entrySet()) {\n+                DOUBLE.writeDouble(mapWriter, percentile.getKey());\n+                DOUBLE.writeDouble(mapWriter, percentile.getValue());\n+            }\n+            blockBuilders.get(\"time_distribution_percentiles\").closeEntry();\n+\n+            VARCHAR.writeString(blockBuilders.get(\"time_unit\"), stats.getTime().getUnit().name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 111}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3568, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}