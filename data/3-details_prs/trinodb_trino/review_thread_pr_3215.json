{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNDk5ODQ1", "number": 3215, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDo1MzoxMVrODqjQ1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMTowODoyNlrODqjkxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTQ0NTM0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/GenerateTraceTokenRequestFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDo1MzoxMVrOF6XqbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMTowNTozNlrOF6YFTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0OTQyMA==", "bodyText": "Padding on the right is not as good as padding on the left, eg 2nd and 17th numbers: 0x1, 0x10 will result in same token, right?", "url": "https://github.com/trinodb/trino/pull/3215#discussion_r396749420", "createdAt": "2020-03-23T20:53:11Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/server/GenerateTraceTokenRequestFilter.java", "diffHunk": "@@ -29,22 +29,28 @@\n public class GenerateTraceTokenRequestFilter\n         implements HttpRequestFilter\n {\n+    private static final int SEQUENCE_NUMBER_HEX_LENGTH = 10;\n+\n     private final String prefix = randomUUID().toString().toLowerCase(ENGLISH).replace(\"-\", \"\");\n     private final AtomicLong sequence = new AtomicLong();\n \n     @Override\n     public Request filterRequest(Request request)\n     {\n         requireNonNull(request, \"request is null\");\n-        String newToken = createToken(sequence.getAndIncrement());\n         return fromRequest(request)\n-                .setHeader(TRACETOKEN_HEADER, newToken)\n+                .setHeader(TRACETOKEN_HEADER, createToken(sequence.getAndIncrement()))\n                 .build();\n     }\n \n     private String createToken(long value)\n     {\n-        return prefix + format(\"%010x\", value);\n+        StringBuilder builder = new StringBuilder(prefix.length() + SEQUENCE_NUMBER_HEX_LENGTH).append(prefix);\n+        String sequenceNumHex = Long.toHexString(value);\n+        for (int i = sequenceNumHex.length(); i < SEQUENCE_NUMBER_HEX_LENGTH; i++) {\n+            builder.append('0');", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1NjMwMQ==", "bodyText": "The padding is on the left, since sequenceNumHex is appended below.", "url": "https://github.com/trinodb/trino/pull/3215#discussion_r396756301", "createdAt": "2020-03-23T21:05:36Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/GenerateTraceTokenRequestFilter.java", "diffHunk": "@@ -29,22 +29,28 @@\n public class GenerateTraceTokenRequestFilter\n         implements HttpRequestFilter\n {\n+    private static final int SEQUENCE_NUMBER_HEX_LENGTH = 10;\n+\n     private final String prefix = randomUUID().toString().toLowerCase(ENGLISH).replace(\"-\", \"\");\n     private final AtomicLong sequence = new AtomicLong();\n \n     @Override\n     public Request filterRequest(Request request)\n     {\n         requireNonNull(request, \"request is null\");\n-        String newToken = createToken(sequence.getAndIncrement());\n         return fromRequest(request)\n-                .setHeader(TRACETOKEN_HEADER, newToken)\n+                .setHeader(TRACETOKEN_HEADER, createToken(sequence.getAndIncrement()))\n                 .build();\n     }\n \n     private String createToken(long value)\n     {\n-        return prefix + format(\"%010x\", value);\n+        StringBuilder builder = new StringBuilder(prefix.length() + SEQUENCE_NUMBER_HEX_LENGTH).append(prefix);\n+        String sequenceNumHex = Long.toHexString(value);\n+        for (int i = sequenceNumHex.length(); i < SEQUENCE_NUMBER_HEX_LENGTH; i++) {\n+            builder.append('0');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0OTQyMA=="}, "originalCommit": null, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTQ5NjM2OnYy", "diffSide": "LEFT", "path": "presto-main/src/main/java/io/prestosql/server/GenerateTraceTokenRequestFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMTowODoyNlrOF6YLCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjo1Nzo0MFrOF6bLxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1Nzc3MA==", "bodyText": "Maybe keep this as a comment\n// optimized version of this: prefix + format(\"%010x\", value)", "url": "https://github.com/trinodb/trino/pull/3215#discussion_r396757770", "createdAt": "2020-03-23T21:08:26Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/server/GenerateTraceTokenRequestFilter.java", "diffHunk": "@@ -29,22 +29,28 @@\n public class GenerateTraceTokenRequestFilter\n         implements HttpRequestFilter\n {\n+    private static final int SEQUENCE_NUMBER_HEX_LENGTH = 10;\n+\n     private final String prefix = randomUUID().toString().toLowerCase(ENGLISH).replace(\"-\", \"\");\n     private final AtomicLong sequence = new AtomicLong();\n \n     @Override\n     public Request filterRequest(Request request)\n     {\n         requireNonNull(request, \"request is null\");\n-        String newToken = createToken(sequence.getAndIncrement());\n         return fromRequest(request)\n-                .setHeader(TRACETOKEN_HEADER, newToken)\n+                .setHeader(TRACETOKEN_HEADER, createToken(sequence.getAndIncrement()))\n                 .build();\n     }\n \n     private String createToken(long value)\n     {\n-        return prefix + format(\"%010x\", value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgwNzEwOQ==", "bodyText": "Added", "url": "https://github.com/trinodb/trino/pull/3215#discussion_r396807109", "createdAt": "2020-03-23T22:57:40Z", "author": {"login": "pettyjamesm"}, "path": "presto-main/src/main/java/io/prestosql/server/GenerateTraceTokenRequestFilter.java", "diffHunk": "@@ -29,22 +29,28 @@\n public class GenerateTraceTokenRequestFilter\n         implements HttpRequestFilter\n {\n+    private static final int SEQUENCE_NUMBER_HEX_LENGTH = 10;\n+\n     private final String prefix = randomUUID().toString().toLowerCase(ENGLISH).replace(\"-\", \"\");\n     private final AtomicLong sequence = new AtomicLong();\n \n     @Override\n     public Request filterRequest(Request request)\n     {\n         requireNonNull(request, \"request is null\");\n-        String newToken = createToken(sequence.getAndIncrement());\n         return fromRequest(request)\n-                .setHeader(TRACETOKEN_HEADER, newToken)\n+                .setHeader(TRACETOKEN_HEADER, createToken(sequence.getAndIncrement()))\n                 .build();\n     }\n \n     private String createToken(long value)\n     {\n-        return prefix + format(\"%010x\", value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1Nzc3MA=="}, "originalCommit": null, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 475, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}