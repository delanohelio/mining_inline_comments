{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNDQ2Mzcz", "number": 2984, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNToyNzoxOVrODkTxfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODo1MTo0NlrODkj4HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Mzk5MjkyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/cache/ReentrantExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNToyNzoxOVrOFwjsew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNToyNzoxOVrOFwjsew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2MDc5NQ==", "bodyText": "+ finally cleanup", "url": "https://github.com/trinodb/trino/pull/2984#discussion_r386460795", "createdAt": "2020-03-02T15:27:19Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/cache/ReentrantExecutor.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.metastore.cache;\n+\n+import java.util.concurrent.Executor;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class ReentrantExecutor\n+        implements Executor\n+{\n+    private final ThreadLocal<Boolean> executorThreadMarkers = ThreadLocal.withInitial(() -> false);\n+    private final Executor delegate;\n+\n+    public ReentrantExecutor(Executor delegate)\n+    {\n+        this.delegate = requireNonNull(delegate, \"delegate is null\");\n+    }\n+\n+    @Override\n+    public void execute(Runnable task)\n+    {\n+        if (executorThreadMarkers.get()) {\n+            task.run();\n+        }\n+\n+        delegate.execute(() -> {\n+            executorThreadMarkers.set(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Mzk5MzExOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/cache/ReentrantExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNToyNzoyMVrOFwjslA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNToyOTo0OFrOFwjy5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2MDgyMA==", "bodyText": "Previously the call would run on a separate thread. Now it runs on the stack.\nIt would be better to extended BoundedExecutor, or alternatively, share the underlying executor and delegate to that.", "url": "https://github.com/trinodb/trino/pull/2984#discussion_r386460820", "createdAt": "2020-03-02T15:27:21Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/cache/ReentrantExecutor.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.metastore.cache;\n+\n+import java.util.concurrent.Executor;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class ReentrantExecutor\n+        implements Executor\n+{\n+    private final ThreadLocal<Boolean> executorThreadMarkers = ThreadLocal.withInitial(() -> false);\n+    private final Executor delegate;\n+\n+    public ReentrantExecutor(Executor delegate)\n+    {\n+        this.delegate = requireNonNull(delegate, \"delegate is null\");\n+    }\n+\n+    @Override\n+    public void execute(Runnable task)\n+    {\n+        if (executorThreadMarkers.get()) {\n+            task.run();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2MjQzOA==", "bodyText": "then the class would be ReentrantBoundedExecutor", "url": "https://github.com/trinodb/trino/pull/2984#discussion_r386462438", "createdAt": "2020-03-02T15:29:48Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/cache/ReentrantExecutor.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.metastore.cache;\n+\n+import java.util.concurrent.Executor;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class ReentrantExecutor\n+        implements Executor\n+{\n+    private final ThreadLocal<Boolean> executorThreadMarkers = ThreadLocal.withInitial(() -> false);\n+    private final Executor delegate;\n+\n+    public ReentrantExecutor(Executor delegate)\n+    {\n+        this.delegate = requireNonNull(delegate, \"delegate is null\");\n+    }\n+\n+    @Override\n+    public void execute(Runnable task)\n+    {\n+        if (executorThreadMarkers.get()) {\n+            task.run();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2MDgyMA=="}, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDAwMDUwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/cache/ReentrantExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNToyOTowNVrOFwjxIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNToyOTowNVrOFwjxIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2MTk4Ng==", "bodyText": "It's tri-state effectively (true, false, but could be unset).\nYou can make it two-state by using Object MARKER and only set, remove methods.", "url": "https://github.com/trinodb/trino/pull/2984#discussion_r386461986", "createdAt": "2020-03-02T15:29:05Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/cache/ReentrantExecutor.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.metastore.cache;\n+\n+import java.util.concurrent.Executor;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class ReentrantExecutor\n+        implements Executor\n+{\n+    private final ThreadLocal<Boolean> executorThreadMarkers = ThreadLocal.withInitial(() -> false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjYyODQ3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/cache/ReentrantBoundedExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODo1MTowMVrOFw80QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODo1MTowMVrOFw80QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg3MjM4NQ==", "bodyText": "Remove the else block.\nIf you really want reset state, use no initial value (and Object, not Boolean).\nIf you want to use Boolean, then initial value is appropriate and you shouldn't reset false to unset.", "url": "https://github.com/trinodb/trino/pull/2984#discussion_r386872385", "createdAt": "2020-03-03T08:51:01Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/cache/ReentrantBoundedExecutor.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.metastore.cache;\n+\n+import io.airlift.concurrent.BoundedExecutor;\n+\n+import java.util.concurrent.Executor;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class ReentrantBoundedExecutor\n+        implements Executor\n+{\n+    private final ThreadLocal<Boolean> executorThreadMarkers = ThreadLocal.withInitial(() -> false);\n+    private final Executor boundedExecutor;\n+    private final Executor coreExecutor;\n+\n+    public ReentrantBoundedExecutor(Executor coreExecutor, int maxThreads)\n+    {\n+        this.boundedExecutor = new BoundedExecutor(requireNonNull(coreExecutor, \"coreExecutor is null\"), maxThreads);\n+        this.coreExecutor = coreExecutor;\n+    }\n+\n+    @Override\n+    public void execute(Runnable task)\n+    {\n+        if (executorThreadMarkers.get()) {\n+            coreExecutor.execute(task);\n+        }\n+        else {\n+            // remove the initial marker value initialized by java.lang.ThreadLocal.get\n+            executorThreadMarkers.remove();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjYyOTU3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/cache/ReentrantBoundedExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODo1MToxOVrOFw803Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODo1MToxOVrOFw803Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg3MjU0MQ==", "bodyText": "Add a javadoc", "url": "https://github.com/trinodb/trino/pull/2984#discussion_r386872541", "createdAt": "2020-03-03T08:51:19Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/cache/ReentrantBoundedExecutor.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.metastore.cache;\n+\n+import io.airlift.concurrent.BoundedExecutor;\n+\n+import java.util.concurrent.Executor;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class ReentrantBoundedExecutor", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjYzMTMzOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/cache/ReentrantBoundedExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODo1MTo0NlrOFw812g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODo1MTo0NlrOFw812g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg3Mjc5NA==", "bodyText": "Consider adding a comment here", "url": "https://github.com/trinodb/trino/pull/2984#discussion_r386872794", "createdAt": "2020-03-03T08:51:46Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/cache/ReentrantBoundedExecutor.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.metastore.cache;\n+\n+import io.airlift.concurrent.BoundedExecutor;\n+\n+import java.util.concurrent.Executor;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class ReentrantBoundedExecutor\n+        implements Executor\n+{\n+    private final ThreadLocal<Boolean> executorThreadMarkers = ThreadLocal.withInitial(() -> false);\n+    private final Executor boundedExecutor;\n+    private final Executor coreExecutor;\n+\n+    public ReentrantBoundedExecutor(Executor coreExecutor, int maxThreads)\n+    {\n+        this.boundedExecutor = new BoundedExecutor(requireNonNull(coreExecutor, \"coreExecutor is null\"), maxThreads);\n+        this.coreExecutor = coreExecutor;\n+    }\n+\n+    @Override\n+    public void execute(Runnable task)\n+    {\n+        if (executorThreadMarkers.get()) {\n+            coreExecutor.execute(task);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 849, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}