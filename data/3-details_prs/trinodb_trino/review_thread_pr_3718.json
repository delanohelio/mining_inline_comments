{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MzUxMTEy", "number": 3718, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMzoxMjo1M1rOD8RKjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjoyNDowOFrOD8jhcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTIyMzgzOnYy", "diffSide": "RIGHT", "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/ElasticsearchMetadata.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMzoxMjo1M1rOGVGruw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowOToyMFrOGVVYGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4Mjc3OQ==", "bodyText": "Move to the bottom of this file", "url": "https://github.com/trinodb/trino/pull/3718#discussion_r424782779", "createdAt": "2020-05-13T23:12:53Z", "author": {"login": "martint"}, "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/ElasticsearchMetadata.java", "diffHunk": "@@ -114,41 +111,90 @@ public ElasticsearchTableHandle getTableHandle(ConnectorSession session, SchemaT\n     @Override\n     public ConnectorTableMetadata getTableMetadata(ConnectorSession session, ConnectorTableHandle table)\n     {\n-        ElasticsearchTableHandle handle = (ElasticsearchTableHandle) table;\n-        return getTableMetadata(handle.getSchema(), handle.getIndex());\n+        return getInternalTableMetadata(table).getConnectorTableMetadata();\n     }\n \n-    private ConnectorTableMetadata getTableMetadata(String schemaName, String tableName)\n+    private InternalTableMetadata getInternalTableMetadata(ConnectorTableHandle table)\n     {\n-        IndexMetadata metadata = client.getIndexMetadata(tableName);\n+        ElasticsearchTableHandle handle = (ElasticsearchTableHandle) table;\n+        return getInternalTableMetadata(handle.getSchema(), handle.getIndex());\n+    }\n \n-        return new ConnectorTableMetadata(\n-                new SchemaTableName(schemaName, tableName),\n-                toColumnMetadata(metadata));\n+    private InternalTableMetadata getInternalTableMetadata(String schemaName, String index)\n+    {\n+        return new InternalTableMetadata(\n+                new SchemaTableName(schemaName, index),\n+                client.getIndexMetadata(index));\n     }\n \n-    private List<ColumnMetadata> toColumnMetadata(IndexMetadata metadata)\n+    private class InternalTableMetadata", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4NjI3OA==", "bodyText": "There's no good reason for this class to be non-static and for the logic in getColumnMetadata/getColumnHandles to be on-demand.\nMake the class a pure structure (and make it static), and initialize it with the handles and metadata. So, something like:\nprivate InternalTableMetadata makeInternalTableMetadata(SchemaTableName table, IndexMetadata metadata)\n{\n    // build List<ColumnMetadata> from IndexMetadata\n    List<ColumnMetadata> columnMetadata = ...;\n    // build Map<String, ColumnHandle> from IndexMetadata\n    Map<String, ColumnHandle> columnHandles = ...;\n\n    return new InternalTableMetadata(table, columnMetadata, columnHandles)\n}", "url": "https://github.com/trinodb/trino/pull/3718#discussion_r424786278", "createdAt": "2020-05-13T23:24:15Z", "author": {"login": "martint"}, "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/ElasticsearchMetadata.java", "diffHunk": "@@ -114,41 +111,90 @@ public ElasticsearchTableHandle getTableHandle(ConnectorSession session, SchemaT\n     @Override\n     public ConnectorTableMetadata getTableMetadata(ConnectorSession session, ConnectorTableHandle table)\n     {\n-        ElasticsearchTableHandle handle = (ElasticsearchTableHandle) table;\n-        return getTableMetadata(handle.getSchema(), handle.getIndex());\n+        return getInternalTableMetadata(table).getConnectorTableMetadata();\n     }\n \n-    private ConnectorTableMetadata getTableMetadata(String schemaName, String tableName)\n+    private InternalTableMetadata getInternalTableMetadata(ConnectorTableHandle table)\n     {\n-        IndexMetadata metadata = client.getIndexMetadata(tableName);\n+        ElasticsearchTableHandle handle = (ElasticsearchTableHandle) table;\n+        return getInternalTableMetadata(handle.getSchema(), handle.getIndex());\n+    }\n \n-        return new ConnectorTableMetadata(\n-                new SchemaTableName(schemaName, tableName),\n-                toColumnMetadata(metadata));\n+    private InternalTableMetadata getInternalTableMetadata(String schemaName, String index)\n+    {\n+        return new InternalTableMetadata(\n+                new SchemaTableName(schemaName, index),\n+                client.getIndexMetadata(index));\n     }\n \n-    private List<ColumnMetadata> toColumnMetadata(IndexMetadata metadata)\n+    private class InternalTableMetadata", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4Mjc3OQ=="}, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMzUxMg==", "bodyText": "Done. I added SchemaTableName to InternalTableMetatadata as you suggest but it is not used in the codebase. It is natural to be there though, and may come handy for object introspection.", "url": "https://github.com/trinodb/trino/pull/3718#discussion_r425023512", "createdAt": "2020-05-14T10:09:20Z", "author": {"login": "losipiuk"}, "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/ElasticsearchMetadata.java", "diffHunk": "@@ -114,41 +111,90 @@ public ElasticsearchTableHandle getTableHandle(ConnectorSession session, SchemaT\n     @Override\n     public ConnectorTableMetadata getTableMetadata(ConnectorSession session, ConnectorTableHandle table)\n     {\n-        ElasticsearchTableHandle handle = (ElasticsearchTableHandle) table;\n-        return getTableMetadata(handle.getSchema(), handle.getIndex());\n+        return getInternalTableMetadata(table).getConnectorTableMetadata();\n     }\n \n-    private ConnectorTableMetadata getTableMetadata(String schemaName, String tableName)\n+    private InternalTableMetadata getInternalTableMetadata(ConnectorTableHandle table)\n     {\n-        IndexMetadata metadata = client.getIndexMetadata(tableName);\n+        ElasticsearchTableHandle handle = (ElasticsearchTableHandle) table;\n+        return getInternalTableMetadata(handle.getSchema(), handle.getIndex());\n+    }\n \n-        return new ConnectorTableMetadata(\n-                new SchemaTableName(schemaName, tableName),\n-                toColumnMetadata(metadata));\n+    private InternalTableMetadata getInternalTableMetadata(String schemaName, String index)\n+    {\n+        return new InternalTableMetadata(\n+                new SchemaTableName(schemaName, index),\n+                client.getIndexMetadata(index));\n     }\n \n-    private List<ColumnMetadata> toColumnMetadata(IndexMetadata metadata)\n+    private class InternalTableMetadata", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4Mjc3OQ=="}, "originalCommit": null, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTI0OTU1OnYy", "diffSide": "RIGHT", "path": "presto-elasticsearch/src/test/java/io/prestosql/elasticsearch/BaseElasticsearchSmokeTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMzoyNTo0NFrOGVG7Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMToyOTowNlrOGVX9yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4Njc4Ng==", "bodyText": "This commit needs to come after (or be squashed with) the one that fixes the bug", "url": "https://github.com/trinodb/trino/pull/3718#discussion_r424786786", "createdAt": "2020-05-13T23:25:44Z", "author": {"login": "martint"}, "path": "presto-elasticsearch/src/test/java/io/prestosql/elasticsearch/BaseElasticsearchSmokeTest.java", "diffHunk": "@@ -27,7 +27,6 @@\n import org.elasticsearch.client.RestClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA2MDgwOA==", "bodyText": "Order is fine now (it was not before). Github UI ordering is broken, though.", "url": "https://github.com/trinodb/trino/pull/3718#discussion_r425060808", "createdAt": "2020-05-14T11:18:53Z", "author": {"login": "losipiuk"}, "path": "presto-elasticsearch/src/test/java/io/prestosql/elasticsearch/BaseElasticsearchSmokeTest.java", "diffHunk": "@@ -27,7 +27,6 @@\n import org.elasticsearch.client.RestClient;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4Njc4Ng=="}, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA2MTU5OQ==", "bodyText": "https://gist.github.com/findepi/7abf17c8a26d3b74e8bb9527caadfdbe", "url": "https://github.com/trinodb/trino/pull/3718#discussion_r425061599", "createdAt": "2020-05-14T11:20:30Z", "author": {"login": "findepi"}, "path": "presto-elasticsearch/src/test/java/io/prestosql/elasticsearch/BaseElasticsearchSmokeTest.java", "diffHunk": "@@ -27,7 +27,6 @@\n import org.elasticsearch.client.RestClient;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4Njc4Ng=="}, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA2NTkyOA==", "bodyText": "Yeah - I know. I did not want to kill automation.", "url": "https://github.com/trinodb/trino/pull/3718#discussion_r425065928", "createdAt": "2020-05-14T11:29:06Z", "author": {"login": "losipiuk"}, "path": "presto-elasticsearch/src/test/java/io/prestosql/elasticsearch/BaseElasticsearchSmokeTest.java", "diffHunk": "@@ -27,7 +27,6 @@\n import org.elasticsearch.client.RestClient;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4Njc4Ng=="}, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTI1MDQyOnYy", "diffSide": "RIGHT", "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/BuiltinColumns.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMzoyNjoxNFrOGVG7-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDoxMToxOVrOGVsd2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4NjkzNg==", "bodyText": "Add an explanation to the commit message describing why and what bug it fixes", "url": "https://github.com/trinodb/trino/pull/3718#discussion_r424786936", "createdAt": "2020-05-13T23:26:14Z", "author": {"login": "martint"}, "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/BuiltinColumns.java", "diffHunk": "@@ -13,15 +13,14 @@\n  */", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwMTgxOQ==", "bodyText": "Typos in the commit message: \"Elastic Seach\" and \"Elatics Search\"", "url": "https://github.com/trinodb/trino/pull/3718#discussion_r425401819", "createdAt": "2020-05-14T20:11:19Z", "author": {"login": "martint"}, "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/BuiltinColumns.java", "diffHunk": "@@ -13,15 +13,14 @@\n  */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4NjkzNg=="}, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODE5MjU5OnYy", "diffSide": "LEFT", "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/ElasticsearchMetadata.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjoxNTo1MVrOGVj5Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjoxNTo1MVrOGVj5Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2MTQxMQ==", "bodyText": "Since this fixes code that was introduced in the previous commit, squash it with that commit.", "url": "https://github.com/trinodb/trino/pull/3718#discussion_r425261411", "createdAt": "2020-05-14T16:15:51Z", "author": {"login": "martint"}, "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/ElasticsearchMetadata.java", "diffHunk": "@@ -158,9 +158,9 @@ private InternalTableMetadata makeInternalTableMetadata(String schema, String ta\n     {\n         ImmutableList.Builder<ColumnMetadata> result = ImmutableList.builder();\n \n-        result.add(BuiltinColumns.ID.getMetadata());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODIwMTY2OnYy", "diffSide": "RIGHT", "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/ElasticsearchMetadata.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjoxNzo0MFrOGVj-4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjoxNzo0MFrOGVj-4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2MjgxOQ==", "bodyText": "This can be renamed to metadata for brevity.", "url": "https://github.com/trinodb/trino/pull/3718#discussion_r425262819", "createdAt": "2020-05-14T16:17:40Z", "author": {"login": "martint"}, "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/ElasticsearchMetadata.java", "diffHunk": "@@ -120,32 +117,73 @@ public ConnectorTableMetadata getTableMetadata(ConnectorSession session, Connect\n \n     private ConnectorTableMetadata getTableMetadata(String schemaName, String tableName)\n     {\n-        IndexMetadata metadata = client.getIndexMetadata(tableName);\n+        InternalTableMetadata internalTableMetadata = makeInternalTableMetadata(schemaName, tableName);\n+        return new ConnectorTableMetadata(new SchemaTableName(schemaName, tableName), internalTableMetadata.getColumnMetadata());\n+    }\n \n-        return new ConnectorTableMetadata(\n-                new SchemaTableName(schemaName, tableName),\n-                toColumnMetadata(metadata));\n+    private InternalTableMetadata makeInternalTableMetadata(ConnectorTableHandle table)\n+    {\n+        ElasticsearchTableHandle handle = (ElasticsearchTableHandle) table;\n+        return makeInternalTableMetadata(handle.getSchema(), handle.getIndex());\n     }\n \n-    private List<ColumnMetadata> toColumnMetadata(IndexMetadata metadata)\n+    private InternalTableMetadata makeInternalTableMetadata(String schema, String tableName)\n     {\n-        ImmutableList.Builder<ColumnMetadata> result = ImmutableList.builder();\n+        IndexMetadata indexMetadata = client.getIndexMetadata(tableName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODIwMjkzOnYy", "diffSide": "RIGHT", "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/ElasticsearchMetadata.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjoxNzo1OFrOGVj_rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjoxNzo1OFrOGVj_rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2MzAyMA==", "bodyText": "This can be renamed to fields for brevity.", "url": "https://github.com/trinodb/trino/pull/3718#discussion_r425263020", "createdAt": "2020-05-14T16:17:58Z", "author": {"login": "martint"}, "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/ElasticsearchMetadata.java", "diffHunk": "@@ -120,32 +117,73 @@ public ConnectorTableMetadata getTableMetadata(ConnectorSession session, Connect\n \n     private ConnectorTableMetadata getTableMetadata(String schemaName, String tableName)\n     {\n-        IndexMetadata metadata = client.getIndexMetadata(tableName);\n+        InternalTableMetadata internalTableMetadata = makeInternalTableMetadata(schemaName, tableName);\n+        return new ConnectorTableMetadata(new SchemaTableName(schemaName, tableName), internalTableMetadata.getColumnMetadata());\n+    }\n \n-        return new ConnectorTableMetadata(\n-                new SchemaTableName(schemaName, tableName),\n-                toColumnMetadata(metadata));\n+    private InternalTableMetadata makeInternalTableMetadata(ConnectorTableHandle table)\n+    {\n+        ElasticsearchTableHandle handle = (ElasticsearchTableHandle) table;\n+        return makeInternalTableMetadata(handle.getSchema(), handle.getIndex());\n     }\n \n-    private List<ColumnMetadata> toColumnMetadata(IndexMetadata metadata)\n+    private InternalTableMetadata makeInternalTableMetadata(String schema, String tableName)\n     {\n-        ImmutableList.Builder<ColumnMetadata> result = ImmutableList.builder();\n+        IndexMetadata indexMetadata = client.getIndexMetadata(tableName);\n+        List<IndexMetadata.Field> indexColumnFields = getColumnFields(indexMetadata);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODIxODg3OnYy", "diffSide": "RIGHT", "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/ElasticsearchMetadata.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjoyMjowM1rOGVkKIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjoyMjowM1rOGVkKIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2NTY5Nw==", "bodyText": "Inline these variables:\nreturn new InternalTableMetadata(new SchemaTableName(schema, tableName), makeColumnMetadata(fields), makeColumnHandles(fields));", "url": "https://github.com/trinodb/trino/pull/3718#discussion_r425265697", "createdAt": "2020-05-14T16:22:03Z", "author": {"login": "martint"}, "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/ElasticsearchMetadata.java", "diffHunk": "@@ -120,32 +117,73 @@ public ConnectorTableMetadata getTableMetadata(ConnectorSession session, Connect\n \n     private ConnectorTableMetadata getTableMetadata(String schemaName, String tableName)\n     {\n-        IndexMetadata metadata = client.getIndexMetadata(tableName);\n+        InternalTableMetadata internalTableMetadata = makeInternalTableMetadata(schemaName, tableName);\n+        return new ConnectorTableMetadata(new SchemaTableName(schemaName, tableName), internalTableMetadata.getColumnMetadata());\n+    }\n \n-        return new ConnectorTableMetadata(\n-                new SchemaTableName(schemaName, tableName),\n-                toColumnMetadata(metadata));\n+    private InternalTableMetadata makeInternalTableMetadata(ConnectorTableHandle table)\n+    {\n+        ElasticsearchTableHandle handle = (ElasticsearchTableHandle) table;\n+        return makeInternalTableMetadata(handle.getSchema(), handle.getIndex());\n     }\n \n-    private List<ColumnMetadata> toColumnMetadata(IndexMetadata metadata)\n+    private InternalTableMetadata makeInternalTableMetadata(String schema, String tableName)\n     {\n-        ImmutableList.Builder<ColumnMetadata> result = ImmutableList.builder();\n+        IndexMetadata indexMetadata = client.getIndexMetadata(tableName);\n+        List<IndexMetadata.Field> indexColumnFields = getColumnFields(indexMetadata);\n+        List<ColumnMetadata> columnMetadata = makeColumnMetadata(indexColumnFields);\n+        Map<String, ColumnHandle> columnHandles = makeColumnHandles(indexColumnFields);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODIyNjMwOnYy", "diffSide": "RIGHT", "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/ElasticsearchMetadata.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjoyMzoxOVrOGVkOwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjoyMzoxOVrOGVkOwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2Njg4MA==", "bodyText": "This can be renamed to metadata for brevity (and undo the rename below)", "url": "https://github.com/trinodb/trino/pull/3718#discussion_r425266880", "createdAt": "2020-05-14T16:23:19Z", "author": {"login": "martint"}, "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/ElasticsearchMetadata.java", "diffHunk": "@@ -120,32 +117,73 @@ public ConnectorTableMetadata getTableMetadata(ConnectorSession session, Connect\n \n     private ConnectorTableMetadata getTableMetadata(String schemaName, String tableName)\n     {\n-        IndexMetadata metadata = client.getIndexMetadata(tableName);\n+        InternalTableMetadata internalTableMetadata = makeInternalTableMetadata(schemaName, tableName);\n+        return new ConnectorTableMetadata(new SchemaTableName(schemaName, tableName), internalTableMetadata.getColumnMetadata());\n+    }\n \n-        return new ConnectorTableMetadata(\n-                new SchemaTableName(schemaName, tableName),\n-                toColumnMetadata(metadata));\n+    private InternalTableMetadata makeInternalTableMetadata(ConnectorTableHandle table)\n+    {\n+        ElasticsearchTableHandle handle = (ElasticsearchTableHandle) table;\n+        return makeInternalTableMetadata(handle.getSchema(), handle.getIndex());\n     }\n \n-    private List<ColumnMetadata> toColumnMetadata(IndexMetadata metadata)\n+    private InternalTableMetadata makeInternalTableMetadata(String schema, String tableName)\n     {\n-        ImmutableList.Builder<ColumnMetadata> result = ImmutableList.builder();\n+        IndexMetadata indexMetadata = client.getIndexMetadata(tableName);\n+        List<IndexMetadata.Field> indexColumnFields = getColumnFields(indexMetadata);\n+        List<ColumnMetadata> columnMetadata = makeColumnMetadata(indexColumnFields);\n+        Map<String, ColumnHandle> columnHandles = makeColumnHandles(indexColumnFields);\n \n-        result.add(BuiltinColumns.ID.getMetadata());\n-        result.add(BuiltinColumns.SOURCE.getMetadata());\n-        result.add(BuiltinColumns.SCORE.getMetadata());\n+        return new InternalTableMetadata(new SchemaTableName(schema, tableName), columnMetadata, columnHandles);\n+    }\n \n-        Map<String, Long> counts = metadata.getSchema()\n+    private List<IndexMetadata.Field> getColumnFields(IndexMetadata indexMetadata)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODIyOTUzOnYy", "diffSide": "RIGHT", "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/ElasticsearchMetadata.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjoyMzo1MFrOGVkQ9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjoyMzo1MFrOGVkQ9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2NzQ0NQ==", "bodyText": "Rename to fields for brevity", "url": "https://github.com/trinodb/trino/pull/3718#discussion_r425267445", "createdAt": "2020-05-14T16:23:50Z", "author": {"login": "martint"}, "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/ElasticsearchMetadata.java", "diffHunk": "@@ -120,32 +117,73 @@ public ConnectorTableMetadata getTableMetadata(ConnectorSession session, Connect\n \n     private ConnectorTableMetadata getTableMetadata(String schemaName, String tableName)\n     {\n-        IndexMetadata metadata = client.getIndexMetadata(tableName);\n+        InternalTableMetadata internalTableMetadata = makeInternalTableMetadata(schemaName, tableName);\n+        return new ConnectorTableMetadata(new SchemaTableName(schemaName, tableName), internalTableMetadata.getColumnMetadata());\n+    }\n \n-        return new ConnectorTableMetadata(\n-                new SchemaTableName(schemaName, tableName),\n-                toColumnMetadata(metadata));\n+    private InternalTableMetadata makeInternalTableMetadata(ConnectorTableHandle table)\n+    {\n+        ElasticsearchTableHandle handle = (ElasticsearchTableHandle) table;\n+        return makeInternalTableMetadata(handle.getSchema(), handle.getIndex());\n     }\n \n-    private List<ColumnMetadata> toColumnMetadata(IndexMetadata metadata)\n+    private InternalTableMetadata makeInternalTableMetadata(String schema, String tableName)\n     {\n-        ImmutableList.Builder<ColumnMetadata> result = ImmutableList.builder();\n+        IndexMetadata indexMetadata = client.getIndexMetadata(tableName);\n+        List<IndexMetadata.Field> indexColumnFields = getColumnFields(indexMetadata);\n+        List<ColumnMetadata> columnMetadata = makeColumnMetadata(indexColumnFields);\n+        Map<String, ColumnHandle> columnHandles = makeColumnHandles(indexColumnFields);\n \n-        result.add(BuiltinColumns.ID.getMetadata());\n-        result.add(BuiltinColumns.SOURCE.getMetadata());\n-        result.add(BuiltinColumns.SCORE.getMetadata());\n+        return new InternalTableMetadata(new SchemaTableName(schema, tableName), columnMetadata, columnHandles);\n+    }\n \n-        Map<String, Long> counts = metadata.getSchema()\n+    private List<IndexMetadata.Field> getColumnFields(IndexMetadata indexMetadata)\n+    {\n+        ImmutableList.Builder<IndexMetadata.Field> result = ImmutableList.builder();\n+        Map<String, Long> counts = indexMetadata.getSchema()\n                 .getFields().stream()\n                 .collect(Collectors.groupingBy(f -> f.getName().toLowerCase(ENGLISH), Collectors.counting()));\n \n-        for (IndexMetadata.Field field : metadata.getSchema().getFields()) {\n+        for (IndexMetadata.Field field : indexMetadata.getSchema().getFields()) {\n             Type type = toPrestoType(field);\n             if (type == null || counts.get(field.getName().toLowerCase(ENGLISH)) > 1) {\n                 continue;\n             }\n+            result.add(field);\n+        }\n+        return result.build();\n+    }\n+\n+    private List<ColumnMetadata> makeColumnMetadata(List<IndexMetadata.Field> columnFields)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODIzMTUyOnYy", "diffSide": "RIGHT", "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/ElasticsearchMetadata.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjoyNDowOFrOGVkSMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNzo0MjozMVrOGV5-aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2Nzc2Mw==", "bodyText": "Rename to fields for brevity", "url": "https://github.com/trinodb/trino/pull/3718#discussion_r425267763", "createdAt": "2020-05-14T16:24:08Z", "author": {"login": "martint"}, "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/ElasticsearchMetadata.java", "diffHunk": "@@ -120,32 +117,73 @@ public ConnectorTableMetadata getTableMetadata(ConnectorSession session, Connect\n \n     private ConnectorTableMetadata getTableMetadata(String schemaName, String tableName)\n     {\n-        IndexMetadata metadata = client.getIndexMetadata(tableName);\n+        InternalTableMetadata internalTableMetadata = makeInternalTableMetadata(schemaName, tableName);\n+        return new ConnectorTableMetadata(new SchemaTableName(schemaName, tableName), internalTableMetadata.getColumnMetadata());\n+    }\n \n-        return new ConnectorTableMetadata(\n-                new SchemaTableName(schemaName, tableName),\n-                toColumnMetadata(metadata));\n+    private InternalTableMetadata makeInternalTableMetadata(ConnectorTableHandle table)\n+    {\n+        ElasticsearchTableHandle handle = (ElasticsearchTableHandle) table;\n+        return makeInternalTableMetadata(handle.getSchema(), handle.getIndex());\n     }\n \n-    private List<ColumnMetadata> toColumnMetadata(IndexMetadata metadata)\n+    private InternalTableMetadata makeInternalTableMetadata(String schema, String tableName)\n     {\n-        ImmutableList.Builder<ColumnMetadata> result = ImmutableList.builder();\n+        IndexMetadata indexMetadata = client.getIndexMetadata(tableName);\n+        List<IndexMetadata.Field> indexColumnFields = getColumnFields(indexMetadata);\n+        List<ColumnMetadata> columnMetadata = makeColumnMetadata(indexColumnFields);\n+        Map<String, ColumnHandle> columnHandles = makeColumnHandles(indexColumnFields);\n \n-        result.add(BuiltinColumns.ID.getMetadata());\n-        result.add(BuiltinColumns.SOURCE.getMetadata());\n-        result.add(BuiltinColumns.SCORE.getMetadata());\n+        return new InternalTableMetadata(new SchemaTableName(schema, tableName), columnMetadata, columnHandles);\n+    }\n \n-        Map<String, Long> counts = metadata.getSchema()\n+    private List<IndexMetadata.Field> getColumnFields(IndexMetadata indexMetadata)\n+    {\n+        ImmutableList.Builder<IndexMetadata.Field> result = ImmutableList.builder();\n+        Map<String, Long> counts = indexMetadata.getSchema()\n                 .getFields().stream()\n                 .collect(Collectors.groupingBy(f -> f.getName().toLowerCase(ENGLISH), Collectors.counting()));\n \n-        for (IndexMetadata.Field field : metadata.getSchema().getFields()) {\n+        for (IndexMetadata.Field field : indexMetadata.getSchema().getFields()) {\n             Type type = toPrestoType(field);\n             if (type == null || counts.get(field.getName().toLowerCase(ENGLISH)) > 1) {\n                 continue;\n             }\n+            result.add(field);\n+        }\n+        return result.build();\n+    }\n+\n+    private List<ColumnMetadata> makeColumnMetadata(List<IndexMetadata.Field> columnFields)\n+    {\n+        ImmutableList.Builder<ColumnMetadata> result = ImmutableList.builder();\n+\n+        result.add(BuiltinColumns.ID.getMetadata());\n+        result.add(BuiltinColumns.SOURCE.getMetadata());\n+        result.add(BuiltinColumns.SCORE.getMetadata());\n \n-            result.add(makeColumnMetadata(field.getName(), type, supportsPredicates(field.getType())));\n+        for (IndexMetadata.Field field : columnFields) {\n+            result.add(ColumnMetadata.builder()\n+                    .setName(field.getName())\n+                    .setType(toPrestoType(field))\n+                    .build());\n+        }\n+        return result.build();\n+    }\n+\n+    public Map<String, ColumnHandle> makeColumnHandles(List<IndexMetadata.Field> columnFields)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYyMzE0Nw==", "bodyText": "Also made this one private.", "url": "https://github.com/trinodb/trino/pull/3718#discussion_r425623147", "createdAt": "2020-05-15T07:42:31Z", "author": {"login": "losipiuk"}, "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/ElasticsearchMetadata.java", "diffHunk": "@@ -120,32 +117,73 @@ public ConnectorTableMetadata getTableMetadata(ConnectorSession session, Connect\n \n     private ConnectorTableMetadata getTableMetadata(String schemaName, String tableName)\n     {\n-        IndexMetadata metadata = client.getIndexMetadata(tableName);\n+        InternalTableMetadata internalTableMetadata = makeInternalTableMetadata(schemaName, tableName);\n+        return new ConnectorTableMetadata(new SchemaTableName(schemaName, tableName), internalTableMetadata.getColumnMetadata());\n+    }\n \n-        return new ConnectorTableMetadata(\n-                new SchemaTableName(schemaName, tableName),\n-                toColumnMetadata(metadata));\n+    private InternalTableMetadata makeInternalTableMetadata(ConnectorTableHandle table)\n+    {\n+        ElasticsearchTableHandle handle = (ElasticsearchTableHandle) table;\n+        return makeInternalTableMetadata(handle.getSchema(), handle.getIndex());\n     }\n \n-    private List<ColumnMetadata> toColumnMetadata(IndexMetadata metadata)\n+    private InternalTableMetadata makeInternalTableMetadata(String schema, String tableName)\n     {\n-        ImmutableList.Builder<ColumnMetadata> result = ImmutableList.builder();\n+        IndexMetadata indexMetadata = client.getIndexMetadata(tableName);\n+        List<IndexMetadata.Field> indexColumnFields = getColumnFields(indexMetadata);\n+        List<ColumnMetadata> columnMetadata = makeColumnMetadata(indexColumnFields);\n+        Map<String, ColumnHandle> columnHandles = makeColumnHandles(indexColumnFields);\n \n-        result.add(BuiltinColumns.ID.getMetadata());\n-        result.add(BuiltinColumns.SOURCE.getMetadata());\n-        result.add(BuiltinColumns.SCORE.getMetadata());\n+        return new InternalTableMetadata(new SchemaTableName(schema, tableName), columnMetadata, columnHandles);\n+    }\n \n-        Map<String, Long> counts = metadata.getSchema()\n+    private List<IndexMetadata.Field> getColumnFields(IndexMetadata indexMetadata)\n+    {\n+        ImmutableList.Builder<IndexMetadata.Field> result = ImmutableList.builder();\n+        Map<String, Long> counts = indexMetadata.getSchema()\n                 .getFields().stream()\n                 .collect(Collectors.groupingBy(f -> f.getName().toLowerCase(ENGLISH), Collectors.counting()));\n \n-        for (IndexMetadata.Field field : metadata.getSchema().getFields()) {\n+        for (IndexMetadata.Field field : indexMetadata.getSchema().getFields()) {\n             Type type = toPrestoType(field);\n             if (type == null || counts.get(field.getName().toLowerCase(ENGLISH)) > 1) {\n                 continue;\n             }\n+            result.add(field);\n+        }\n+        return result.build();\n+    }\n+\n+    private List<ColumnMetadata> makeColumnMetadata(List<IndexMetadata.Field> columnFields)\n+    {\n+        ImmutableList.Builder<ColumnMetadata> result = ImmutableList.builder();\n+\n+        result.add(BuiltinColumns.ID.getMetadata());\n+        result.add(BuiltinColumns.SOURCE.getMetadata());\n+        result.add(BuiltinColumns.SCORE.getMetadata());\n \n-            result.add(makeColumnMetadata(field.getName(), type, supportsPredicates(field.getType())));\n+        for (IndexMetadata.Field field : columnFields) {\n+            result.add(ColumnMetadata.builder()\n+                    .setName(field.getName())\n+                    .setType(toPrestoType(field))\n+                    .build());\n+        }\n+        return result.build();\n+    }\n+\n+    public Map<String, ColumnHandle> makeColumnHandles(List<IndexMetadata.Field> columnFields)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2Nzc2Mw=="}, "originalCommit": null, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4803, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}