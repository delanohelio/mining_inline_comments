{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0MjUwNzQ0", "number": 4344, "title": "Add human_readable timestamp function", "bodyText": "Pull request for the following requirement\nadd human readable representation of duration\nThe \"human_readable\" timestamp function pareses the input (seconds) to represent it into more human readable format.\n\nhuman_readable(1)   -->  '0 weeks, 0 days, 0 hours, 0 minutes, 1 second'\nhuman_readable(60)  -->  '0 weeks, 0 days, 0 hours, 1 minute, 0 seconds'\nhuman_readable(61)  -->  '0 weeks, 0 days, 0 hours, 1 minute, 1 second'\nhuman_readable(535333.9513888889) \t-->  '0 weeks, 6 days, 4 hours, 42 minutes, 13 seconds'\nhuman_readable(56363463)   -->  '93 weeks, 1 day, 8 hours, 31 minutes, 3 seconds'\nhuman_readable(3660)\t\t -->  '0 weeks, 0 days, 1 hour, 1 minute, 0 seconds'\nhuman_readable(8003) \t\t -->  '0 weeks, 0 days, 2 hours, 13 minutes, 23 seconds'\n\nFixes #3948", "createdAt": "2020-07-04T07:16:32Z", "url": "https://github.com/trinodb/trino/pull/4344", "merged": true, "mergeCommit": {"oid": "d5577c680ddaf8be992bc911f646a16b9997d3bd"}, "closed": true, "closedAt": "2020-08-25T18:54:43Z", "author": {"login": "haldes"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc2gCppgFqTQ1MTE0NTkzOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCUzsfgH2gAyNDQ0MjUwNzQ0OjY0MmVjN2ViYzk4ZDM3MDAwZGVjOGFkNzY1MDg4M2JmNjI3NTcxNTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMTQ1OTM4", "url": "https://github.com/trinodb/trino/pull/4344#pullrequestreview-451145938", "createdAt": "2020-07-19T16:34:07Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxNjozNDowN1rOGzwtlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxNjo1NzoyNlrOGzw2Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkyODY2Mw==", "bodyText": "Did you forget to delete this class?", "url": "https://github.com/trinodb/trino/pull/4344#discussion_r456928663", "createdAt": "2020-07-19T16:34:07Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/HumanReadable.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar.timestamp;\n+\n+import io.airlift.slice.Slice;\n+import io.prestosql.spi.function.ScalarFunction;\n+import io.prestosql.spi.function.SqlType;\n+import io.prestosql.spi.type.StandardTypes;\n+\n+import java.util.StringJoiner;\n+import java.util.concurrent.TimeUnit;\n+\n+import static io.airlift.slice.Slices.utf8Slice;\n+\n+@ScalarFunction(\"human_readable\")\n+public final class HumanReadable", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkyODY3OQ==", "bodyText": "This constant is not used", "url": "https://github.com/trinodb/trino/pull/4344#discussion_r456928679", "createdAt": "2020-07-19T16:34:18Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/HumanReadableSeconds.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar.timestamp;\n+\n+import io.airlift.slice.Slice;\n+import io.prestosql.spi.function.ScalarFunction;\n+import io.prestosql.spi.function.SqlType;\n+import io.prestosql.spi.type.StandardTypes;\n+\n+import java.util.StringJoiner;\n+import java.util.concurrent.TimeUnit;\n+\n+import static io.airlift.slice.Slices.utf8Slice;\n+\n+@ScalarFunction(\"human_readable_seconds\")\n+public final class HumanReadableSeconds\n+{\n+    private static final String HUMAN_REDABLE_FORMAT = \"%s, %s, %s, %s, %s\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkyODczMA==", "bodyText": "Why DOUBLE?\nWhat happens when the value is NaN or Infinity?\nAlso, if we want to stick with DOUBLE, it would make sense to round to the nearest second instead of truncating.", "url": "https://github.com/trinodb/trino/pull/4344#discussion_r456928730", "createdAt": "2020-07-19T16:34:46Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/HumanReadableSeconds.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar.timestamp;\n+\n+import io.airlift.slice.Slice;\n+import io.prestosql.spi.function.ScalarFunction;\n+import io.prestosql.spi.function.SqlType;\n+import io.prestosql.spi.type.StandardTypes;\n+\n+import java.util.StringJoiner;\n+import java.util.concurrent.TimeUnit;\n+\n+import static io.airlift.slice.Slices.utf8Slice;\n+\n+@ScalarFunction(\"human_readable_seconds\")\n+public final class HumanReadableSeconds\n+{\n+    private static final String HUMAN_REDABLE_FORMAT = \"%s, %s, %s, %s, %s\";\n+    private static final int DAYS_IN_WEEK = 7;\n+    private static final String WEEK = \"week\";\n+    private static final String DAY = \"day\";\n+    private static final String HOUR = \"hour\";\n+    private static final String MINUTE = \"minute\";\n+    private static final String SECOND = \"second\";\n+\n+    private HumanReadableSeconds() {}\n+\n+    @SqlType(StandardTypes.VARCHAR)\n+    public static Slice humanReadable(@SqlType(StandardTypes.DOUBLE) double inputSeconds)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkyODgyOA==", "bodyText": "(long) inputSeconds", "url": "https://github.com/trinodb/trino/pull/4344#discussion_r456928828", "createdAt": "2020-07-19T16:35:49Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/HumanReadableSeconds.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar.timestamp;\n+\n+import io.airlift.slice.Slice;\n+import io.prestosql.spi.function.ScalarFunction;\n+import io.prestosql.spi.function.SqlType;\n+import io.prestosql.spi.type.StandardTypes;\n+\n+import java.util.StringJoiner;\n+import java.util.concurrent.TimeUnit;\n+\n+import static io.airlift.slice.Slices.utf8Slice;\n+\n+@ScalarFunction(\"human_readable_seconds\")\n+public final class HumanReadableSeconds\n+{\n+    private static final String HUMAN_REDABLE_FORMAT = \"%s, %s, %s, %s, %s\";\n+    private static final int DAYS_IN_WEEK = 7;\n+    private static final String WEEK = \"week\";\n+    private static final String DAY = \"day\";\n+    private static final String HOUR = \"hour\";\n+    private static final String MINUTE = \"minute\";\n+    private static final String SECOND = \"second\";\n+\n+    private HumanReadableSeconds() {}\n+\n+    @SqlType(StandardTypes.VARCHAR)\n+    public static Slice humanReadable(@SqlType(StandardTypes.DOUBLE) double inputSeconds)\n+    {\n+        long seconds = Double.valueOf(inputSeconds).longValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkyOTA4Mw==", "bodyText": "@SqlType(StandardTypes.BIGINT) is not needed for these methods. The annotation is used by Presto to discover metadata about functions, but these are implementation details internal to the function", "url": "https://github.com/trinodb/trino/pull/4344#discussion_r456929083", "createdAt": "2020-07-19T16:38:23Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/HumanReadableSeconds.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar.timestamp;\n+\n+import io.airlift.slice.Slice;\n+import io.prestosql.spi.function.ScalarFunction;\n+import io.prestosql.spi.function.SqlType;\n+import io.prestosql.spi.type.StandardTypes;\n+\n+import java.util.StringJoiner;\n+import java.util.concurrent.TimeUnit;\n+\n+import static io.airlift.slice.Slices.utf8Slice;\n+\n+@ScalarFunction(\"human_readable_seconds\")\n+public final class HumanReadableSeconds\n+{\n+    private static final String HUMAN_REDABLE_FORMAT = \"%s, %s, %s, %s, %s\";\n+    private static final int DAYS_IN_WEEK = 7;\n+    private static final String WEEK = \"week\";\n+    private static final String DAY = \"day\";\n+    private static final String HOUR = \"hour\";\n+    private static final String MINUTE = \"minute\";\n+    private static final String SECOND = \"second\";\n+\n+    private HumanReadableSeconds() {}\n+\n+    @SqlType(StandardTypes.VARCHAR)\n+    public static Slice humanReadable(@SqlType(StandardTypes.DOUBLE) double inputSeconds)\n+    {\n+        long seconds = Double.valueOf(inputSeconds).longValue();\n+\n+        long weeks = processWeeks(seconds);\n+        if (weeks > 0) {\n+            seconds -= TimeUnit.DAYS.toSeconds(weeks * DAYS_IN_WEEK);\n+        }\n+\n+        long days = processDays(seconds);\n+        seconds -= TimeUnit.DAYS.toSeconds(days);\n+\n+        long hours = processHours(seconds);\n+        seconds -= TimeUnit.HOURS.toSeconds(hours);\n+\n+        long minutes = processMinutes(seconds);\n+        seconds -= TimeUnit.MINUTES.toSeconds(minutes);\n+\n+        long lseconds = processSeconds(seconds);\n+\n+        return getTimePeriods(weeks, days, hours, minutes, lseconds);\n+    }\n+\n+    private static long processWeeks(@SqlType(StandardTypes.BIGINT) long seconds)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkyOTgyOQ==", "bodyText": "I don't think the processXXX methods are necessary. This could be done more concisely, and IMO, easier to read and follow like this:\nlong seconds = (long) inputSeconds;\n\nlong weeks = TimeUnit.SECONDS.toDays(seconds) / DAYS_IN_WEEK;\nseconds -= TimeUnit.DAYS.toSeconds(weeks * DAYS_IN_WEEK);\n\nlong days = TimeUnit.SECONDS.toDays(seconds);\nseconds -= TimeUnit.DAYS.toSeconds(days);\n\nlong hours = TimeUnit.SECONDS.toHours(seconds);\nseconds -= TimeUnit.HOURS.toSeconds(hours);\n\nlong minutes = TimeUnit.SECONDS.toMinutes(seconds);\nseconds -= TimeUnit.MINUTES.toSeconds(minutes);\n\nreturn getTimePeriods(weeks, days, hours, minutes, seconds);", "url": "https://github.com/trinodb/trino/pull/4344#discussion_r456929829", "createdAt": "2020-07-19T16:46:29Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/HumanReadableSeconds.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar.timestamp;\n+\n+import io.airlift.slice.Slice;\n+import io.prestosql.spi.function.ScalarFunction;\n+import io.prestosql.spi.function.SqlType;\n+import io.prestosql.spi.type.StandardTypes;\n+\n+import java.util.StringJoiner;\n+import java.util.concurrent.TimeUnit;\n+\n+import static io.airlift.slice.Slices.utf8Slice;\n+\n+@ScalarFunction(\"human_readable_seconds\")\n+public final class HumanReadableSeconds\n+{\n+    private static final String HUMAN_REDABLE_FORMAT = \"%s, %s, %s, %s, %s\";\n+    private static final int DAYS_IN_WEEK = 7;\n+    private static final String WEEK = \"week\";\n+    private static final String DAY = \"day\";\n+    private static final String HOUR = \"hour\";\n+    private static final String MINUTE = \"minute\";\n+    private static final String SECOND = \"second\";\n+\n+    private HumanReadableSeconds() {}\n+\n+    @SqlType(StandardTypes.VARCHAR)\n+    public static Slice humanReadable(@SqlType(StandardTypes.DOUBLE) double inputSeconds)\n+    {\n+        long seconds = Double.valueOf(inputSeconds).longValue();\n+\n+        long weeks = processWeeks(seconds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkzMDUxOA==", "bodyText": "It could be further simplified to this if you introduce constants from \"number of seconds in a week\", \"number of seconds in a day\", etc:\nlong seconds = (long) inputSeconds;\n\nlong weeks = TimeUnit.SECONDS.toDays(seconds) / DAYS_IN_WEEK;\nseconds = seconds % SECONDS_PER_WEEK;\n\nlong days = TimeUnit.SECONDS.toDays(seconds);\nseconds = seconds % SECONDS_PER_DAY;\n\nlong hours = TimeUnit.SECONDS.toHours(seconds);\nseconds = seconds % SECONDS_PER_HOUR;\n\nlong minutes = TimeUnit.SECONDS.toMinutes(seconds);\nseconds = seconds % SECONDS_PER_MINUTE;\n\nreturn getTimePeriods(weeks, days, hours, minutes, seconds);", "url": "https://github.com/trinodb/trino/pull/4344#discussion_r456930518", "createdAt": "2020-07-19T16:53:27Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/HumanReadableSeconds.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar.timestamp;\n+\n+import io.airlift.slice.Slice;\n+import io.prestosql.spi.function.ScalarFunction;\n+import io.prestosql.spi.function.SqlType;\n+import io.prestosql.spi.type.StandardTypes;\n+\n+import java.util.StringJoiner;\n+import java.util.concurrent.TimeUnit;\n+\n+import static io.airlift.slice.Slices.utf8Slice;\n+\n+@ScalarFunction(\"human_readable_seconds\")\n+public final class HumanReadableSeconds\n+{\n+    private static final String HUMAN_REDABLE_FORMAT = \"%s, %s, %s, %s, %s\";\n+    private static final int DAYS_IN_WEEK = 7;\n+    private static final String WEEK = \"week\";\n+    private static final String DAY = \"day\";\n+    private static final String HOUR = \"hour\";\n+    private static final String MINUTE = \"minute\";\n+    private static final String SECOND = \"second\";\n+\n+    private HumanReadableSeconds() {}\n+\n+    @SqlType(StandardTypes.VARCHAR)\n+    public static Slice humanReadable(@SqlType(StandardTypes.DOUBLE) double inputSeconds)\n+    {\n+        long seconds = Double.valueOf(inputSeconds).longValue();\n+\n+        long weeks = processWeeks(seconds);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkyOTgyOQ=="}, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkzMDczMA==", "bodyText": "Don't abbreviate variable names. Rename val -> value", "url": "https://github.com/trinodb/trino/pull/4344#discussion_r456930730", "createdAt": "2020-07-19T16:55:39Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/HumanReadableSeconds.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar.timestamp;\n+\n+import io.airlift.slice.Slice;\n+import io.prestosql.spi.function.ScalarFunction;\n+import io.prestosql.spi.function.SqlType;\n+import io.prestosql.spi.type.StandardTypes;\n+\n+import java.util.StringJoiner;\n+import java.util.concurrent.TimeUnit;\n+\n+import static io.airlift.slice.Slices.utf8Slice;\n+\n+@ScalarFunction(\"human_readable_seconds\")\n+public final class HumanReadableSeconds\n+{\n+    private static final String HUMAN_REDABLE_FORMAT = \"%s, %s, %s, %s, %s\";\n+    private static final int DAYS_IN_WEEK = 7;\n+    private static final String WEEK = \"week\";\n+    private static final String DAY = \"day\";\n+    private static final String HOUR = \"hour\";\n+    private static final String MINUTE = \"minute\";\n+    private static final String SECOND = \"second\";\n+\n+    private HumanReadableSeconds() {}\n+\n+    @SqlType(StandardTypes.VARCHAR)\n+    public static Slice humanReadable(@SqlType(StandardTypes.DOUBLE) double inputSeconds)\n+    {\n+        long seconds = Double.valueOf(inputSeconds).longValue();\n+\n+        long weeks = processWeeks(seconds);\n+        if (weeks > 0) {\n+            seconds -= TimeUnit.DAYS.toSeconds(weeks * DAYS_IN_WEEK);\n+        }\n+\n+        long days = processDays(seconds);\n+        seconds -= TimeUnit.DAYS.toSeconds(days);\n+\n+        long hours = processHours(seconds);\n+        seconds -= TimeUnit.HOURS.toSeconds(hours);\n+\n+        long minutes = processMinutes(seconds);\n+        seconds -= TimeUnit.MINUTES.toSeconds(minutes);\n+\n+        long lseconds = processSeconds(seconds);\n+\n+        return getTimePeriods(weeks, days, hours, minutes, lseconds);\n+    }\n+\n+    private static long processWeeks(@SqlType(StandardTypes.BIGINT) long seconds)\n+    {\n+        long weeks = 0;\n+        if (seconds > 0) {\n+            weeks = TimeUnit.SECONDS.toDays(seconds) / DAYS_IN_WEEK;\n+        }\n+        return weeks;\n+    }\n+\n+    private static long processDays(@SqlType(StandardTypes.BIGINT) long seconds)\n+    {\n+        long days = 0;\n+        if (seconds > 0) {\n+            days = TimeUnit.SECONDS.toDays(seconds);\n+        }\n+        return days;\n+    }\n+\n+    private static long processHours(@SqlType(StandardTypes.BIGINT) long remainingSeconds)\n+    {\n+        long hours = 0;\n+        if (remainingSeconds > 0) {\n+            hours = TimeUnit.SECONDS.toHours(remainingSeconds);\n+        }\n+        return hours;\n+    }\n+\n+    private static long processMinutes(@SqlType(StandardTypes.BIGINT) long remainingSeconds)\n+    {\n+        long minutes = 0;\n+        if (remainingSeconds > 0) {\n+            minutes = TimeUnit.SECONDS.toMinutes(remainingSeconds);\n+        }\n+        return minutes;\n+    }\n+\n+    private static long processSeconds(@SqlType(StandardTypes.BIGINT) long remainingSeconds)\n+    {\n+        long inputSeconds = 0;\n+        if (remainingSeconds > 0) {\n+            inputSeconds = remainingSeconds;\n+        }\n+        return inputSeconds;\n+    }\n+\n+    private static Slice getTimePeriods(long weeks, long days, long hours, long minutes, long seconds)\n+    {\n+        StringJoiner stringJoiner = new StringJoiner(\", \");\n+        if (weeks > 0) {\n+            stringJoiner.add(getPeriodType(weeks, WEEK));\n+        }\n+        if (days > 0) {\n+            stringJoiner.add(getPeriodType(days, DAY));\n+        }\n+        if (hours > 0) {\n+            stringJoiner.add(getPeriodType(hours, HOUR));\n+        }\n+        if (minutes > 0) {\n+            stringJoiner.add(getPeriodType(minutes, MINUTE));\n+        }\n+        if (seconds > 0) {\n+            stringJoiner.add(getPeriodType(seconds, SECOND));\n+        }\n+        return utf8Slice(stringJoiner.toString());\n+    }\n+\n+    private static String getPeriodType(long val, String type)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkzMDg5MA==", "bodyText": "The name of this method doesn't describe what it does very accurately. I'd rename it to \"render\" or something similar", "url": "https://github.com/trinodb/trino/pull/4344#discussion_r456930890", "createdAt": "2020-07-19T16:57:26Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/HumanReadableSeconds.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar.timestamp;\n+\n+import io.airlift.slice.Slice;\n+import io.prestosql.spi.function.ScalarFunction;\n+import io.prestosql.spi.function.SqlType;\n+import io.prestosql.spi.type.StandardTypes;\n+\n+import java.util.StringJoiner;\n+import java.util.concurrent.TimeUnit;\n+\n+import static io.airlift.slice.Slices.utf8Slice;\n+\n+@ScalarFunction(\"human_readable_seconds\")\n+public final class HumanReadableSeconds\n+{\n+    private static final String HUMAN_REDABLE_FORMAT = \"%s, %s, %s, %s, %s\";\n+    private static final int DAYS_IN_WEEK = 7;\n+    private static final String WEEK = \"week\";\n+    private static final String DAY = \"day\";\n+    private static final String HOUR = \"hour\";\n+    private static final String MINUTE = \"minute\";\n+    private static final String SECOND = \"second\";\n+\n+    private HumanReadableSeconds() {}\n+\n+    @SqlType(StandardTypes.VARCHAR)\n+    public static Slice humanReadable(@SqlType(StandardTypes.DOUBLE) double inputSeconds)\n+    {\n+        long seconds = Double.valueOf(inputSeconds).longValue();\n+\n+        long weeks = processWeeks(seconds);\n+        if (weeks > 0) {\n+            seconds -= TimeUnit.DAYS.toSeconds(weeks * DAYS_IN_WEEK);\n+        }\n+\n+        long days = processDays(seconds);\n+        seconds -= TimeUnit.DAYS.toSeconds(days);\n+\n+        long hours = processHours(seconds);\n+        seconds -= TimeUnit.HOURS.toSeconds(hours);\n+\n+        long minutes = processMinutes(seconds);\n+        seconds -= TimeUnit.MINUTES.toSeconds(minutes);\n+\n+        long lseconds = processSeconds(seconds);\n+\n+        return getTimePeriods(weeks, days, hours, minutes, lseconds);\n+    }\n+\n+    private static long processWeeks(@SqlType(StandardTypes.BIGINT) long seconds)\n+    {\n+        long weeks = 0;\n+        if (seconds > 0) {\n+            weeks = TimeUnit.SECONDS.toDays(seconds) / DAYS_IN_WEEK;\n+        }\n+        return weeks;\n+    }\n+\n+    private static long processDays(@SqlType(StandardTypes.BIGINT) long seconds)\n+    {\n+        long days = 0;\n+        if (seconds > 0) {\n+            days = TimeUnit.SECONDS.toDays(seconds);\n+        }\n+        return days;\n+    }\n+\n+    private static long processHours(@SqlType(StandardTypes.BIGINT) long remainingSeconds)\n+    {\n+        long hours = 0;\n+        if (remainingSeconds > 0) {\n+            hours = TimeUnit.SECONDS.toHours(remainingSeconds);\n+        }\n+        return hours;\n+    }\n+\n+    private static long processMinutes(@SqlType(StandardTypes.BIGINT) long remainingSeconds)\n+    {\n+        long minutes = 0;\n+        if (remainingSeconds > 0) {\n+            minutes = TimeUnit.SECONDS.toMinutes(remainingSeconds);\n+        }\n+        return minutes;\n+    }\n+\n+    private static long processSeconds(@SqlType(StandardTypes.BIGINT) long remainingSeconds)\n+    {\n+        long inputSeconds = 0;\n+        if (remainingSeconds > 0) {\n+            inputSeconds = remainingSeconds;\n+        }\n+        return inputSeconds;\n+    }\n+\n+    private static Slice getTimePeriods(long weeks, long days, long hours, long minutes, long seconds)\n+    {\n+        StringJoiner stringJoiner = new StringJoiner(\", \");\n+        if (weeks > 0) {\n+            stringJoiner.add(getPeriodType(weeks, WEEK));\n+        }\n+        if (days > 0) {\n+            stringJoiner.add(getPeriodType(days, DAY));\n+        }\n+        if (hours > 0) {\n+            stringJoiner.add(getPeriodType(hours, HOUR));\n+        }\n+        if (minutes > 0) {\n+            stringJoiner.add(getPeriodType(minutes, MINUTE));\n+        }\n+        if (seconds > 0) {\n+            stringJoiner.add(getPeriodType(seconds, SECOND));\n+        }\n+        return utf8Slice(stringJoiner.toString());\n+    }\n+\n+    private static String getPeriodType(long val, String type)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 129}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczMDI5MzM4", "url": "https://github.com/trinodb/trino/pull/4344#pullrequestreview-473029338", "createdAt": "2020-08-23T17:35:55Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "642ec7ebc98d37000dec8ad7650883bf62757154", "author": {"user": {"login": "haldes", "name": null}}, "url": "https://github.com/trinodb/trino/commit/642ec7ebc98d37000dec8ad7650883bf62757154", "committedDate": "2020-08-25T10:39:39Z", "message": "Add human_readable timestamp function"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4952, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}