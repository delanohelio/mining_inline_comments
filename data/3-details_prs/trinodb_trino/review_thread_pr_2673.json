{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4Nzk4NTY5", "number": 2673, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxODo0NjowMlrODcvFSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDoxMzozNlrODkNe8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDU4MTIyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/SetSchemaAuthorizationTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxODo0NjowMlrOFk74BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxODo0NjowMlrOFk74BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI3NDA1Mg==", "bodyText": "Typo in AUTHORIZTION", "url": "https://github.com/trinodb/trino/pull/2673#discussion_r374274052", "createdAt": "2020-02-03T18:46:02Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/execution/SetSchemaAuthorizationTask.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.util.concurrent.ListenableFuture;\n+import io.prestosql.Session;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.spi.connector.CatalogSchemaName;\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.spi.security.PrincipalType;\n+import io.prestosql.sql.tree.Expression;\n+import io.prestosql.sql.tree.SetSchemaAuthorization;\n+import io.prestosql.transaction.TransactionManager;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.google.common.util.concurrent.Futures.immediateFuture;\n+import static io.prestosql.metadata.MetadataUtil.createCatalogName;\n+import static io.prestosql.metadata.MetadataUtil.createCatalogSchemaName;\n+import static io.prestosql.metadata.MetadataUtil.createPrincipal;\n+import static io.prestosql.spi.StandardErrorCode.ROLE_NOT_FOUND;\n+import static io.prestosql.spi.StandardErrorCode.SCHEMA_NOT_FOUND;\n+import static io.prestosql.sql.analyzer.SemanticExceptions.semanticException;\n+\n+public class SetSchemaAuthorizationTask\n+        implements DataDefinitionTask<SetSchemaAuthorization>\n+{\n+    @Override\n+    public String getName()\n+    {\n+        return \"SET SCHEMA AUTHORIZTION\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjA4ODkyOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/connector/hive-security.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOTowNDo0MFrOFqcwrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOTowNDo0MFrOFqcwrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1NTcyNg==", "bodyText": ", is not needed before or", "url": "https://github.com/trinodb/trino/pull/2673#discussion_r380055726", "createdAt": "2020-02-17T09:04:40Z", "author": {"login": "kokosing"}, "path": "presto-docs/src/main/sphinx/connector/hive-security.rst", "diffHunk": "@@ -54,13 +54,14 @@ Hive does not exactly follow the SQL standard, there are the following\n limitations and differences:\n \n * ``CREATE ROLE role WITH ADMIN`` is not supported.\n-* The ``admin`` role must be enabled to execute ``CREATE ROLE`` or ``DROP ROLE``.\n+* The ``admin`` role must be enabled to execute ``CREATE ROLE``, ``DROP ROLE``, or ``CREATE SCHEMA``.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjA5MDkzOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/connector/hive-security.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOTowNToyM1rOFqcx7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOTowNToyM1rOFqcx7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1NjA0NA==", "bodyText": "Please squash commits into single commit and follow https://chris.beams.io/posts/git-commit/ when writting a commit message.", "url": "https://github.com/trinodb/trino/pull/2673#discussion_r380056044", "createdAt": "2020-02-17T09:05:23Z", "author": {"login": "kokosing"}, "path": "presto-docs/src/main/sphinx/connector/hive-security.rst", "diffHunk": "@@ -54,13 +54,14 @@ Hive does not exactly follow the SQL standard, there are the following\n limitations and differences:", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjA5MjA3OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/connector/hive-security.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOTowNTo0OFrOFqcymw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNTowMDo1NlrOFq1MNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1NjIxOQ==", "bodyText": "Do you have any plans to implement ALTER TABLE SET AUTHORIZATION?", "url": "https://github.com/trinodb/trino/pull/2673#discussion_r380056219", "createdAt": "2020-02-17T09:05:48Z", "author": {"login": "kokosing"}, "path": "presto-docs/src/main/sphinx/connector/hive-security.rst", "diffHunk": "@@ -54,13 +54,14 @@ Hive does not exactly follow the SQL standard, there are the following\n limitations and differences:\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ1NTk4OQ==", "bodyText": "I wasn't planning to, since it's not needed. Unlike with schemas, individual permissions can be granted on tables.\nAs discussed on the issue, it's preferable to stay with what's possible in Hive and not diverge from that (Hive cannot grant permissions on schemas, but it can change the owner of a schema).", "url": "https://github.com/trinodb/trino/pull/2673#discussion_r380455989", "createdAt": "2020-02-18T05:00:56Z", "author": {"login": "lhofhansl"}, "path": "presto-docs/src/main/sphinx/connector/hive-security.rst", "diffHunk": "@@ -54,13 +54,14 @@ Hive does not exactly follow the SQL standard, there are the following\n limitations and differences:\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1NjIxOQ=="}, "originalCommit": null, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjA5NDY0OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/connector/hive-security.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOTowNjo0M1rOFqc0Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOTowNjo0M1rOFqc0Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1NjYwNw==", "bodyText": "replace principal with user", "url": "https://github.com/trinodb/trino/pull/2673#discussion_r380056607", "createdAt": "2020-02-17T09:06:43Z", "author": {"login": "kokosing"}, "path": "presto-docs/src/main/sphinx/connector/hive-security.rst", "diffHunk": "@@ -54,13 +54,14 @@ Hive does not exactly follow the SQL standard, there are the following\n limitations and differences:\n \n * ``CREATE ROLE role WITH ADMIN`` is not supported.\n-* The ``admin`` role must be enabled to execute ``CREATE ROLE`` or ``DROP ROLE``.\n+* The ``admin`` role must be enabled to execute ``CREATE ROLE``, ``DROP ROLE``, or ``CREATE SCHEMA``.\n * ``GRANT role TO user GRANTED BY someone`` is not supported.\n * ``REVOKE role FROM user GRANTED BY someone`` is not supported.\n * By default, all a user's roles, except ``admin``, are enabled in a new user session.\n * One particular role can be selected by executing ``SET ROLE role``.\n * ``SET ROLE ALL`` enables all of a user's roles except ``admin``.\n * The ``admin`` role must be enabled explicitly by executing ``SET ROLE admin``.\n+* ``GRANT privilege ON SCHEMA ...`` is not supported. Schema ownership can be changed with ``ALTER SCHEMA schema SET AUTHORIZATION principal``", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjA5NTc5OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/connector/hive-security.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOTowNzowNlrOFqc00w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOTowNzowNlrOFqc00w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1Njc4Nw==", "bodyText": "replace ... with some example schema name", "url": "https://github.com/trinodb/trino/pull/2673#discussion_r380056787", "createdAt": "2020-02-17T09:07:06Z", "author": {"login": "kokosing"}, "path": "presto-docs/src/main/sphinx/connector/hive-security.rst", "diffHunk": "@@ -54,13 +54,14 @@ Hive does not exactly follow the SQL standard, there are the following\n limitations and differences:\n \n * ``CREATE ROLE role WITH ADMIN`` is not supported.\n-* The ``admin`` role must be enabled to execute ``CREATE ROLE`` or ``DROP ROLE``.\n+* The ``admin`` role must be enabled to execute ``CREATE ROLE``, ``DROP ROLE``, or ``CREATE SCHEMA``.\n * ``GRANT role TO user GRANTED BY someone`` is not supported.\n * ``REVOKE role FROM user GRANTED BY someone`` is not supported.\n * By default, all a user's roles, except ``admin``, are enabled in a new user session.\n * One particular role can be selected by executing ``SET ROLE role``.\n * ``SET ROLE ALL`` enables all of a user's roles except ``admin``.\n * The ``admin`` role must be enabled explicitly by executing ``SET ROLE admin``.\n+* ``GRANT privilege ON SCHEMA ...`` is not supported. Schema ownership can be changed with ``ALTER SCHEMA schema SET AUTHORIZATION principal``", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjA5OTc5OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/sql/alter-schema.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOTowODoyNFrOFqc3OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOTowODoyNFrOFqc3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1NzQwMQ==", "bodyText": "This is general note for most of the things in Presto. I would remove this.", "url": "https://github.com/trinodb/trino/pull/2673#discussion_r380057401", "createdAt": "2020-02-17T09:08:24Z", "author": {"login": "kokosing"}, "path": "presto-docs/src/main/sphinx/sql/alter-schema.rst", "diffHunk": "@@ -21,6 +22,20 @@ Rename schema ``web`` to ``traffic``::\n \n     ALTER SCHEMA web RENAME TO traffic\n \n+Change owner of schema ``web`` to user ``alice``::\n+\n+    ALTER SCHEMA web SET AUTHORIZATION alice\n+\n+Allow everyone to create tables in schema ``web`` (or to drop the schema)::\n+\n+    ALTER SCHEMA web SET AUTHORIZATION ROLE PUBLIC\n+\n+Limitations", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjEwMzIyOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/sql/alter-schema.rst", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOTowOToyOVrOFqc5Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo0ODo0NFrOFrOLIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1Nzk0Nw==", "bodyText": "Allow everyone to drop schema and create tables in schema ``web``::\n\n?", "url": "https://github.com/trinodb/trino/pull/2673#discussion_r380057947", "createdAt": "2020-02-17T09:09:29Z", "author": {"login": "kokosing"}, "path": "presto-docs/src/main/sphinx/sql/alter-schema.rst", "diffHunk": "@@ -21,6 +22,20 @@ Rename schema ``web`` to ``traffic``::\n \n     ALTER SCHEMA web RENAME TO traffic\n \n+Change owner of schema ``web`` to user ``alice``::\n+\n+    ALTER SCHEMA web SET AUTHORIZATION alice\n+\n+Allow everyone to create tables in schema ``web`` (or to drop the schema)::", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2NTMxMw==", "bodyText": "We're setting authorization to role \"PUBLIC\" so everyone can create and drop tables and drop the schema itself.\nLemme try to rephrase this in better English.", "url": "https://github.com/trinodb/trino/pull/2673#discussion_r380865313", "createdAt": "2020-02-18T18:48:44Z", "author": {"login": "lhofhansl"}, "path": "presto-docs/src/main/sphinx/sql/alter-schema.rst", "diffHunk": "@@ -21,6 +22,20 @@ Rename schema ``web`` to ``traffic``::\n \n     ALTER SCHEMA web RENAME TO traffic\n \n+Change owner of schema ``web`` to user ``alice``::\n+\n+    ALTER SCHEMA web SET AUTHORIZATION alice\n+\n+Allow everyone to create tables in schema ``web`` (or to drop the schema)::", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1Nzk0Nw=="}, "originalCommit": null, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjExMTIzOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOToxMjowN1rOFqc-Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOToxMjowN1rOFqc-Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1OTE5NQ==", "bodyText": "replace shared_schema with test_schema_authorization. So that name is unique across tests.", "url": "https://github.com/trinodb/trino/pull/2673#discussion_r380059195", "createdAt": "2020-02-17T09:12:07Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -186,6 +186,49 @@ public void testSchemaOperations()\n         assertUpdate(admin, \"DROP SCHEMA new_schema\");\n     }\n \n+    @Test\n+    public void testSchemaAuthorization()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE SCHEMA shared_schema\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjExMzQ4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOToxMjo0OVrOFqc_lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOToxMjo0OVrOFqc_lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1OTU0Mg==", "bodyText": "just user?", "url": "https://github.com/trinodb/trino/pull/2673#discussion_r380059542", "createdAt": "2020-02-17T09:12:49Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -186,6 +186,49 @@ public void testSchemaOperations()\n         assertUpdate(admin, \"DROP SCHEMA new_schema\");\n     }\n \n+    @Test\n+    public void testSchemaAuthorization()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE SCHEMA shared_schema\");\n+\n+        Session user1 = testSessionBuilder().setCatalog(getSession().getCatalog().get()).setSchema(\"shared_schema\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjExNTU4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOToxMzoyNlrOFqdAxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOToxMzoyNlrOFqdAxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1OTg0Nw==", "bodyText": "extract the below test case as separate test method", "url": "https://github.com/trinodb/trino/pull/2673#discussion_r380059847", "createdAt": "2020-02-17T09:13:26Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -186,6 +186,49 @@ public void testSchemaOperations()\n         assertUpdate(admin, \"DROP SCHEMA new_schema\");\n     }\n \n+    @Test\n+    public void testSchemaAuthorization()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE SCHEMA shared_schema\");\n+\n+        Session user1 = testSessionBuilder().setCatalog(getSession().getCatalog().get()).setSchema(\"shared_schema\")\n+                .setIdentity(Identity.forUser(\"user1\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n+        // ordinary users cannot drop a schema or create a table in a schema the do not own\n+        assertQueryFails(user1, \"DROP SCHEMA shared_schema\", \"Access Denied: Cannot drop schema shared_schema\");\n+        assertQueryFails(user1, \"CREATE TABLE shared_schema.test (x bigint)\",\n+                \"Access Denied: Cannot create table shared_schema.test\");\n+\n+        // change owner to user1\n+        assertUpdate(admin, \"ALTER SCHEMA shared_schema SET AUTHORIZATION user1\");\n+\n+        assertUpdate(user1, \"CREATE TABLE shared_schema.test (x bigint)\");\n+        assertUpdate(user1, \"DROP TABLE shared_schema.test\");\n+        assertUpdate(user1, \"DROP SCHEMA shared_schema\");\n+\n+        // same with a role", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjExNzA0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOToxNDowMVrOFqdBsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOToxNDowMVrOFqdBsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA2MDA4Mw==", "bodyText": "DROP ROLE users", "url": "https://github.com/trinodb/trino/pull/2673#discussion_r380060083", "createdAt": "2020-02-17T09:14:01Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -186,6 +186,49 @@ public void testSchemaOperations()\n         assertUpdate(admin, \"DROP SCHEMA new_schema\");\n     }\n \n+    @Test\n+    public void testSchemaAuthorization()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE SCHEMA shared_schema\");\n+\n+        Session user1 = testSessionBuilder().setCatalog(getSession().getCatalog().get()).setSchema(\"shared_schema\")\n+                .setIdentity(Identity.forUser(\"user1\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n+        // ordinary users cannot drop a schema or create a table in a schema the do not own\n+        assertQueryFails(user1, \"DROP SCHEMA shared_schema\", \"Access Denied: Cannot drop schema shared_schema\");\n+        assertQueryFails(user1, \"CREATE TABLE shared_schema.test (x bigint)\",\n+                \"Access Denied: Cannot create table shared_schema.test\");\n+\n+        // change owner to user1\n+        assertUpdate(admin, \"ALTER SCHEMA shared_schema SET AUTHORIZATION user1\");\n+\n+        assertUpdate(user1, \"CREATE TABLE shared_schema.test (x bigint)\");\n+        assertUpdate(user1, \"DROP TABLE shared_schema.test\");\n+        assertUpdate(user1, \"DROP SCHEMA shared_schema\");\n+\n+        // same with a role\n+        assertUpdate(admin, \"CREATE ROLE users\");\n+        assertUpdate(admin, \"GRANT users TO user2\");\n+\n+        assertUpdate(admin, \"CREATE SCHEMA shared_schema\");\n+        assertUpdate(admin, \"ALTER SCHEMA shared_schema SET AUTHORIZATION ROLE users\");\n+\n+        Session user2 = testSessionBuilder().setCatalog(getSession().getCatalog().get()).setSchema(\"shared_schema\")\n+                .setIdentity(Identity.forUser(\"user2\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n+        assertUpdate(user2, \"CREATE TABLE shared_schema.test (x bigint)\");\n+        assertUpdate(user2, \"DROP TABLE shared_schema.test\");\n+        assertUpdate(user2, \"DROP SCHEMA shared_schema\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjExODI0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOToxNDoyM1rOFqdCeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOToxNDoyM1rOFqdCeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA2MDI4MQ==", "bodyText": "replace users with some more unique and related to the test", "url": "https://github.com/trinodb/trino/pull/2673#discussion_r380060281", "createdAt": "2020-02-17T09:14:23Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -186,6 +186,49 @@ public void testSchemaOperations()\n         assertUpdate(admin, \"DROP SCHEMA new_schema\");\n     }\n \n+    @Test\n+    public void testSchemaAuthorization()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE SCHEMA shared_schema\");\n+\n+        Session user1 = testSessionBuilder().setCatalog(getSession().getCatalog().get()).setSchema(\"shared_schema\")\n+                .setIdentity(Identity.forUser(\"user1\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n+        // ordinary users cannot drop a schema or create a table in a schema the do not own\n+        assertQueryFails(user1, \"DROP SCHEMA shared_schema\", \"Access Denied: Cannot drop schema shared_schema\");\n+        assertQueryFails(user1, \"CREATE TABLE shared_schema.test (x bigint)\",\n+                \"Access Denied: Cannot create table shared_schema.test\");\n+\n+        // change owner to user1\n+        assertUpdate(admin, \"ALTER SCHEMA shared_schema SET AUTHORIZATION user1\");\n+\n+        assertUpdate(user1, \"CREATE TABLE shared_schema.test (x bigint)\");\n+        assertUpdate(user1, \"DROP TABLE shared_schema.test\");\n+        assertUpdate(user1, \"DROP SCHEMA shared_schema\");\n+\n+        // same with a role\n+        assertUpdate(admin, \"CREATE ROLE users\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjEyMDEwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/SetSchemaAuthorizationTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOToxNDo1OVrOFqdDqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOToxNDo1OVrOFqdDqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA2MDU4NA==", "bodyText": "can you please add test for this case?", "url": "https://github.com/trinodb/trino/pull/2673#discussion_r380060584", "createdAt": "2020-02-17T09:14:59Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/execution/SetSchemaAuthorizationTask.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.util.concurrent.ListenableFuture;\n+import io.prestosql.Session;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.spi.connector.CatalogSchemaName;\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.spi.security.PrincipalType;\n+import io.prestosql.sql.tree.Expression;\n+import io.prestosql.sql.tree.SetSchemaAuthorization;\n+import io.prestosql.transaction.TransactionManager;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.google.common.util.concurrent.Futures.immediateFuture;\n+import static io.prestosql.metadata.MetadataUtil.createCatalogName;\n+import static io.prestosql.metadata.MetadataUtil.createCatalogSchemaName;\n+import static io.prestosql.metadata.MetadataUtil.createPrincipal;\n+import static io.prestosql.spi.StandardErrorCode.ROLE_NOT_FOUND;\n+import static io.prestosql.spi.StandardErrorCode.SCHEMA_NOT_FOUND;\n+import static io.prestosql.sql.analyzer.SemanticExceptions.semanticException;\n+\n+public class SetSchemaAuthorizationTask\n+        implements DataDefinitionTask<SetSchemaAuthorization>\n+{\n+    @Override\n+    public String getName()\n+    {\n+        return \"SET SCHEMA AUTHORIZTION\";\n+    }\n+\n+    @Override\n+    public ListenableFuture<?> execute(SetSchemaAuthorization statement, TransactionManager transactionManager, Metadata metadata, AccessControl accessControl, QueryStateMachine stateMachine, List<Expression> parameters)\n+    {\n+        Session session = stateMachine.getSession();\n+        String catalog = createCatalogName(session, statement);\n+        CatalogSchemaName source = createCatalogSchemaName(session, statement, Optional.of(statement.getSource()));\n+\n+        if (!metadata.schemaExists(session, source)) {\n+            throw semanticException(SCHEMA_NOT_FOUND, statement, \"Schema '%s' does not exist\", source);\n+        }\n+        PrestoPrincipal principal = createPrincipal(statement.getPrincipal());\n+        if (principal.getType() == PrincipalType.ROLE\n+                && !metadata.listRoles(session, catalog).contains(principal.getName())) {\n+            throw semanticException(ROLE_NOT_FOUND, statement, \"Role '%s' does not exist\", principal.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjEyOTkzOnYy", "diffSide": "RIGHT", "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedSystemAccessControl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOToxODowN1rOFqdJnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOToxODowN1rOFqdJnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA2MjEwOQ==", "bodyText": "Please add tests for this access control", "url": "https://github.com/trinodb/trino/pull/2673#discussion_r380062109", "createdAt": "2020-02-17T09:18:07Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedSystemAccessControl.java", "diffHunk": "@@ -270,6 +271,14 @@ public void checkCanRenameSchema(SystemSecurityContext context, CatalogSchemaNam\n         }\n     }\n \n+    @Override\n+    public void checkCanSetSchemaAuthorization(SystemSecurityContext context, CatalogSchemaName schema, PrestoPrincipal principal)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NDYwMDAxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjoyODo0MVrOFsRguA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjoyODo0MVrOFsRguA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk2ODU2OA==", "bodyText": "please don't break this line, or put all arguments in separate lines", "url": "https://github.com/trinodb/trino/pull/2673#discussion_r381968568", "createdAt": "2020-02-20T12:28:41Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -186,6 +186,65 @@ public void testSchemaOperations()\n         assertUpdate(admin, \"DROP SCHEMA new_schema\");\n     }\n \n+    @Test\n+    public void testSchemaAuthorizationForUser()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_schema_authorization_user\");\n+\n+        Session user = testSessionBuilder().setCatalog(getSession().getCatalog().get()).setSchema(\"test_schema_authorization_user\")\n+                .setIdentity(Identity.forUser(\"user\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n+        // ordinary users cannot drop a schema or create a table in a schema the do not own\n+        assertQueryFails(user, \"DROP SCHEMA test_schema_authorization_user\", \"Access Denied: Cannot drop schema test_schema_authorization_user\");\n+        assertQueryFails(user, \"CREATE TABLE test_schema_authorization_user.test (x bigint)\",\n+                \"Access Denied: Cannot create table test_schema_authorization_user.test\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NDYwMDcxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjoyODo1N1rOFsRhOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjoyODo1N1rOFsRhOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk2ODY5Nw==", "bodyText": "remove the comment", "url": "https://github.com/trinodb/trino/pull/2673#discussion_r381968697", "createdAt": "2020-02-20T12:28:57Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -186,6 +186,65 @@ public void testSchemaOperations()\n         assertUpdate(admin, \"DROP SCHEMA new_schema\");\n     }\n \n+    @Test\n+    public void testSchemaAuthorizationForUser()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_schema_authorization_user\");\n+\n+        Session user = testSessionBuilder().setCatalog(getSession().getCatalog().get()).setSchema(\"test_schema_authorization_user\")\n+                .setIdentity(Identity.forUser(\"user\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n+        // ordinary users cannot drop a schema or create a table in a schema the do not own\n+        assertQueryFails(user, \"DROP SCHEMA test_schema_authorization_user\", \"Access Denied: Cannot drop schema test_schema_authorization_user\");\n+        assertQueryFails(user, \"CREATE TABLE test_schema_authorization_user.test (x bigint)\",\n+                \"Access Denied: Cannot create table test_schema_authorization_user.test\");\n+\n+        // change owner to user\n+        assertUpdate(admin, \"ALTER SCHEMA test_schema_authorization_user SET AUTHORIZATION user\");\n+\n+        assertUpdate(user, \"CREATE TABLE test_schema_authorization_user.test (x bigint)\");\n+        assertUpdate(user, \"DROP TABLE test_schema_authorization_user.test\");\n+        assertUpdate(user, \"DROP SCHEMA test_schema_authorization_user\");\n+    }\n+\n+    @Test\n+    public void testSchemaAuthorizationForRole()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_schema_authorization_role\");\n+\n+        // make sure role-grants only work on existsing roles\n+        assertQueryFails(admin, \"ALTER SCHEMA test_schema_authorization_role SET AUTHORIZATION ROLE nonexisting_role\", \".*?Role 'nonexisting_role' does not exist\");\n+\n+        // same with a role", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NDYxNTM5OnYy", "diffSide": "RIGHT", "path": "presto-plugin-toolkit/src/test/java/io/prestosql/plugin/base/security/TestFileBasedSystemAccessControl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjozMzo1MlrOFsRqIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjozMzo1MlrOFsRqIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk3MDk3Nw==", "bodyText": "use org.assertj.core.api.Assertions.assertThatThrownBy here and below", "url": "https://github.com/trinodb/trino/pull/2673#discussion_r381970977", "createdAt": "2020-02-20T12:33:52Z", "author": {"login": "kokosing"}, "path": "presto-plugin-toolkit/src/test/java/io/prestosql/plugin/base/security/TestFileBasedSystemAccessControl.java", "diffHunk": "@@ -96,6 +99,49 @@ public void testCanSetUserOperations()\n         accessControlNoPatterns.checkCanSetUser(kerberosValidAlice.getPrincipal(), kerberosValidAlice.getUser());\n     }\n \n+    @Test\n+    public void testSchemaOperations()\n+    {\n+        SystemAccessControl accessControl = newFileBasedSystemAccessControl(\"catalog.json\");\n+\n+        PrestoPrincipal user = new PrestoPrincipal(PrincipalType.USER, \"some_user\");\n+        PrestoPrincipal role = new PrestoPrincipal(PrincipalType.ROLE, \"some_user\");\n+\n+        accessControl.checkCanSetSchemaAuthorization(new SystemSecurityContext(admin), new CatalogSchemaName(\"alice-catalog\", \"some_schema\"), user);\n+        accessControl.checkCanSetSchemaAuthorization(new SystemSecurityContext(admin), new CatalogSchemaName(\"alice-catalog\", \"some_schema\"), role);\n+\n+        accessControl.checkCanSetSchemaAuthorization(new SystemSecurityContext(alice), new CatalogSchemaName(\"alice-catalog\", \"some_schema\"), user);\n+        accessControl.checkCanSetSchemaAuthorization(new SystemSecurityContext(alice), new CatalogSchemaName(\"alice-catalog\", \"some_schema\"), role);\n+\n+        try {\n+            accessControl.checkCanSetSchemaAuthorization(new SystemSecurityContext(bob), new CatalogSchemaName(\"alice-catalog\", \"some_schema\"), user);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MTcyNzIwOnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/sql/alter-schema.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QyMzowNDowOFrOFtTYKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QyMzowNDowOFrOFtTYKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA0NzcyMA==", "bodyText": "Typo: AUTHORIZTION", "url": "https://github.com/trinodb/trino/pull/2673#discussion_r383047720", "createdAt": "2020-02-23T23:04:08Z", "author": {"login": "martint"}, "path": "presto-docs/src/main/sphinx/sql/alter-schema.rst", "diffHunk": "@@ -8,6 +8,7 @@ Synopsis\n .. code-block:: none\n \n     ALTER SCHEMA name RENAME TO new_name\n+    ALTER SCHEMA name SET AUTHORIZTION ( user | USER user | ROLE role )", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MTczNjkwOnYy", "diffSide": "RIGHT", "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QyMzoxNzoxMFrOFtTc3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwMzowMzowNFrOFwL--w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA0ODkyNg==", "bodyText": "Per the SQL spec, the authorization identifier should follow this syntax:\n<authorization identifier> ::=\n    <role name>\n  | <user identifier>\n\n<role name> ::=\n  <identifier>\n\n<user identifier> ::=\n  <identifier>\n\nprincipal in this grammar file is defined as:\nprincipal\n    : identifier            #unspecifiedPrincipal\n    | USER identifier       #userPrincipal\n    | ROLE identifier       #rolePrincipal\n    ;\n\nWhich doesn't fit what the spec describes for this case.", "url": "https://github.com/trinodb/trino/pull/2673#discussion_r383048926", "createdAt": "2020-02-23T23:17:10Z", "author": {"login": "martint"}, "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "diffHunk": "@@ -42,6 +42,7 @@ statement\n         (WITH properties)?                                             #createSchema\n     | DROP SCHEMA (IF EXISTS)? qualifiedName (CASCADE | RESTRICT)?     #dropSchema\n     | ALTER SCHEMA qualifiedName RENAME TO identifier                  #renameSchema\n+    | ALTER SCHEMA qualifiedName SET AUTHORIZATION principal           #setSchemaAuthorization", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA0OTAwMg==", "bodyText": "We may want to extend it in the future, but I'd prefer we start conservatively and follow the spec as closely as possible.", "url": "https://github.com/trinodb/trino/pull/2673#discussion_r383049002", "createdAt": "2020-02-23T23:18:02Z", "author": {"login": "martint"}, "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "diffHunk": "@@ -42,6 +42,7 @@ statement\n         (WITH properties)?                                             #createSchema\n     | DROP SCHEMA (IF EXISTS)? qualifiedName (CASCADE | RESTRICT)?     #dropSchema\n     | ALTER SCHEMA qualifiedName RENAME TO identifier                  #renameSchema\n+    | ALTER SCHEMA qualifiedName SET AUTHORIZATION principal           #setSchemaAuthorization", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA0ODkyNg=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA1OTQ3NA==", "bodyText": "I thought it was nice that the principal parsing would be the same across GRANT, REVOKE, and SET AUTHORIZATION.\nDo we stay closer to the SQL standard or to Presto's existing syntax in similar scenarios?\nAlso in the standard you cannot set authorization for a user if the user happens to have the same name as a role (and for some database - such as PostgreSQL - where a user and a role are the same thing that's fine).\nIn order to know whether you set to a user or a role you'd need to check whether such a role does exist.\nHappy to change, I just think it's better this way.", "url": "https://github.com/trinodb/trino/pull/2673#discussion_r383059474", "createdAt": "2020-02-24T01:11:28Z", "author": {"login": "lhofhansl"}, "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "diffHunk": "@@ -42,6 +42,7 @@ statement\n         (WITH properties)?                                             #createSchema\n     | DROP SCHEMA (IF EXISTS)? qualifiedName (CASCADE | RESTRICT)?     #dropSchema\n     | ALTER SCHEMA qualifiedName RENAME TO identifier                  #renameSchema\n+    | ALTER SCHEMA qualifiedName SET AUTHORIZATION principal           #setSchemaAuthorization", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA0ODkyNg=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwMzQ5MQ==", "bodyText": "Please let me know.\nBTW. I looked up the standard system for GRANT and REVOKE and they also use what you cite above:\n<authorization identifier>    ::=   <role name> | <user identifier>\n\n<role name>    ::=   <identifier>\n\n<user identifier>    ::=   <identifier>\n\nGiven that we already diverged from the SQL standard with GRANT and REVOKE I'd vote for being consistent within Presto.\nAlso one last point: Unless we force the explicit ROLE syntax, since Presto and Hive do not have pre-defined users, there would be no way to enforce valid roles, when a role is misspelled it would just need to assume that you meant a user.\nIn the end... Let me know what's the best approach and I'll do that.", "url": "https://github.com/trinodb/trino/pull/2673#discussion_r383603491", "createdAt": "2020-02-25T00:59:40Z", "author": {"login": "lhofhansl"}, "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "diffHunk": "@@ -42,6 +42,7 @@ statement\n         (WITH properties)?                                             #createSchema\n     | DROP SCHEMA (IF EXISTS)? qualifiedName (CASCADE | RESTRICT)?     #dropSchema\n     | ALTER SCHEMA qualifiedName RENAME TO identifier                  #renameSchema\n+    | ALTER SCHEMA qualifiedName SET AUTHORIZATION principal           #setSchemaAuthorization", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA0ODkyNg=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwNTAyNQ==", "bodyText": "Given that we already diverged from the SQL standard with GRANT and REVOKE I'd vote for being consistent within Presto.\n\nYeah, it's unfortunate we diverged from the standard like that. Let me think about it and I'll get back to you shortly.", "url": "https://github.com/trinodb/trino/pull/2673#discussion_r383605025", "createdAt": "2020-02-25T01:04:48Z", "author": {"login": "martint"}, "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "diffHunk": "@@ -42,6 +42,7 @@ statement\n         (WITH properties)?                                             #createSchema\n     | DROP SCHEMA (IF EXISTS)? qualifiedName (CASCADE | RESTRICT)?     #dropSchema\n     | ALTER SCHEMA qualifiedName RENAME TO identifier                  #renameSchema\n+    | ALTER SCHEMA qualifiedName SET AUTHORIZATION principal           #setSchemaAuthorization", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA0ODkyNg=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYyMDAxNg==", "bodyText": "Awesome. Thanks!", "url": "https://github.com/trinodb/trino/pull/2673#discussion_r383620016", "createdAt": "2020-02-25T02:02:40Z", "author": {"login": "lhofhansl"}, "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "diffHunk": "@@ -42,6 +42,7 @@ statement\n         (WITH properties)?                                             #createSchema\n     | DROP SCHEMA (IF EXISTS)? qualifiedName (CASCADE | RESTRICT)?     #dropSchema\n     | ALTER SCHEMA qualifiedName RENAME TO identifier                  #renameSchema\n+    | ALTER SCHEMA qualifiedName SET AUTHORIZATION principal           #setSchemaAuthorization", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA0ODkyNg=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk0MjM1MQ==", "bodyText": "I apologize for the delay, I should've responded sooner. Let's keep it as you have it for now. It covers the standard case plus the presto-specific extension. We can revisit later more holistically if we decide it's worth constraining.", "url": "https://github.com/trinodb/trino/pull/2673#discussion_r385942351", "createdAt": "2020-02-28T22:00:25Z", "author": {"login": "martint"}, "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "diffHunk": "@@ -42,6 +42,7 @@ statement\n         (WITH properties)?                                             #createSchema\n     | DROP SCHEMA (IF EXISTS)? qualifiedName (CASCADE | RESTRICT)?     #dropSchema\n     | ALTER SCHEMA qualifiedName RENAME TO identifier                  #renameSchema\n+    | ALTER SCHEMA qualifiedName SET AUTHORIZATION principal           #setSchemaAuthorization", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA0ODkyNg=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3MjMxNQ==", "bodyText": "Thanks for looking @martint ! (I do realize you have many, many PRs to look through.)\nFor this one then I'm assuming that are currently no further requests for changes.", "url": "https://github.com/trinodb/trino/pull/2673#discussion_r386072315", "createdAt": "2020-03-01T03:03:04Z", "author": {"login": "lhofhansl"}, "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "diffHunk": "@@ -42,6 +42,7 @@ statement\n         (WITH properties)?                                             #createSchema\n     | DROP SCHEMA (IF EXISTS)? qualifiedName (CASCADE | RESTRICT)?     #dropSchema\n     | ALTER SCHEMA qualifiedName RENAME TO identifier                  #renameSchema\n+    | ALTER SCHEMA qualifiedName SET AUTHORIZATION principal           #setSchemaAuthorization", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA0ODkyNg=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Mjk1MzAwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDoxMDo1NlrOFwZ9GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDoxMDo1NlrOFwZ9GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwMTIwOQ==", "bodyText": "Please format this as.\nSession user = testSessionBuilder()\n    .setCatalog(getSession().getCatalog().get())\n    .setSchema(\"test_schema_authorization_user\")\n    .setIdentity(Identity.forUser(\"user\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n    .build();", "url": "https://github.com/trinodb/trino/pull/2673#discussion_r386301209", "createdAt": "2020-03-02T10:10:56Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -449,6 +449,63 @@ public void testSchemaOperations()\n         assertUpdate(session, \"DROP SCHEMA new_schema\");\n     }\n \n+    @Test\n+    public void testSchemaAuthorizationForUser()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_schema_authorization_user\");\n+\n+        Session user = testSessionBuilder().setCatalog(getSession().getCatalog().get()).setSchema(\"test_schema_authorization_user\")\n+                .setIdentity(Identity.forUser(\"user\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Mjk1ODM5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDoxMjoyMFrOFwaAQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDoxMjoyMFrOFwaAQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwMjAxNg==", "bodyText": "Can you add test that has:\n       assertUpdate(admin, \"ALTER SCHEMA test_schema_authorization_user SET AUTHORIZATION user\");\n       assertUpdate(user, \"ALTER SCHEMA test_schema_authorization_user SET AUTHORIZATION ROLE admin\");       \n       assertFails(user, \"ALTER SCHEMA test_schema_authorization_user SET AUTHORIZATION ROLE admin\", ...);", "url": "https://github.com/trinodb/trino/pull/2673#discussion_r386302016", "createdAt": "2020-03-02T10:12:20Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -449,6 +449,63 @@ public void testSchemaOperations()\n         assertUpdate(session, \"DROP SCHEMA new_schema\");\n     }\n \n+    @Test\n+    public void testSchemaAuthorizationForUser()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_schema_authorization_user\");\n+\n+        Session user = testSessionBuilder().setCatalog(getSession().getCatalog().get()).setSchema(\"test_schema_authorization_user\")\n+                .setIdentity(Identity.forUser(\"user\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n+        // ordinary users cannot drop a schema or create a table in a schema the do not own\n+        assertQueryFails(user, \"DROP SCHEMA test_schema_authorization_user\", \"Access Denied: Cannot drop schema test_schema_authorization_user\");\n+        assertQueryFails(user, \"CREATE TABLE test_schema_authorization_user.test (x bigint)\", \"Access Denied: Cannot create table test_schema_authorization_user.test\");\n+\n+        // change owner to user\n+        assertUpdate(admin, \"ALTER SCHEMA test_schema_authorization_user SET AUTHORIZATION user\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Mjk2MjQxOnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergMetadata.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDoxMzozNlrOFwaCsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToxMDozOFrOFygVhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwMjY0Mw==", "bodyText": "Can you please also add for iceberg connector, like you did for Hive.\nDoes iceberg supports sql-standard?\nMaybe we should not implement this for iceberg for now?", "url": "https://github.com/trinodb/trino/pull/2673#discussion_r386302643", "createdAt": "2020-03-02T10:13:36Z", "author": {"login": "kokosing"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergMetadata.java", "diffHunk": "@@ -289,6 +291,12 @@ public void renameSchema(ConnectorSession session, String source, String target)\n         metastore.renameDatabase(new HiveIdentity(session), source, target);\n     }\n \n+    @Override\n+    public void setSchemaAuthorization(ConnectorSession session, String source, PrestoPrincipal principal)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA2MTI2Mg==", "bodyText": "I'm not sure I follow with this one. This is all that is needed for Iceberg, right? I did not actually change the HiveConnector, I added it to the metastore and the metadata (just as I have done here). Apologies if I'm missing something.\nEdit: In other words, I added it to all metastore implementations that support setting database ownership.", "url": "https://github.com/trinodb/trino/pull/2673#discussion_r388061262", "createdAt": "2020-03-05T03:30:17Z", "author": {"login": "lhofhansl"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergMetadata.java", "diffHunk": "@@ -289,6 +291,12 @@ public void renameSchema(ConnectorSession session, String source, String target)\n         metastore.renameDatabase(new HiveIdentity(session), source, target);\n     }\n \n+    @Override\n+    public void setSchemaAuthorization(ConnectorSession session, String source, PrestoPrincipal principal)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwMjY0Mw=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyMDI2MA==", "bodyText": "In hive we have sql-standard access control which controls who can change the schema owner. How is it with Iceberg? As I understand after your change, anyone can change the schema owner. Am I right? If so, then maybe it is better to not to add this security leak to iceberg just yet. WDYT?", "url": "https://github.com/trinodb/trino/pull/2673#discussion_r388220260", "createdAt": "2020-03-05T10:57:40Z", "author": {"login": "kokosing"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergMetadata.java", "diffHunk": "@@ -289,6 +291,12 @@ public void renameSchema(ConnectorSession session, String source, String target)\n         metastore.renameDatabase(new HiveIdentity(session), source, target);\n     }\n \n+    @Override\n+    public void setSchemaAuthorization(ConnectorSession session, String source, PrestoPrincipal principal)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwMjY0Mw=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwMjkxOQ==", "bodyText": "Oh I see what you mean now.\nThe code here just defers to whatever the referenced HiveMetastore implementation can do.\nThe real Hive Metastore is one implementation, there's also the filebased metastore, etc. I added the right code to all metastore implementations (and the default is to deny this operation).\nThe metastore implementations will deny the change if it is not supported (default, unless the metastore implements it), and allow it if is supported, so it should be OK as is!", "url": "https://github.com/trinodb/trino/pull/2673#discussion_r388502919", "createdAt": "2020-03-05T19:10:38Z", "author": {"login": "lhofhansl"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergMetadata.java", "diffHunk": "@@ -289,6 +291,12 @@ public void renameSchema(ConnectorSession session, String source, String target)\n         metastore.renameDatabase(new HiveIdentity(session), source, target);\n     }\n \n+    @Override\n+    public void setSchemaAuthorization(ConnectorSession session, String source, PrestoPrincipal principal)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwMjY0Mw=="}, "originalCommit": null, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 979, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}