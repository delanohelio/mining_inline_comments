{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwMjM2NDg4", "number": 5237, "title": "Update task status on broadcast buffer blocking", "bodyText": "", "createdAt": "2020-09-21T11:45:28Z", "url": "https://github.com/trinodb/trino/pull/5237", "merged": true, "mergeCommit": {"oid": "159a0d6a62997bbebd8fb1e73fdb92a73446982c"}, "closed": true, "closedAt": "2020-09-23T09:38:57Z", "author": {"login": "rohangarg"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLB83FgFqTQ5MjUxNTU1NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLY8cugBqjM3OTM2MDE1Njk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyNTE1NTU0", "url": "https://github.com/trinodb/trino/pull/5237#pullrequestreview-492515554", "createdAt": "2020-09-21T11:46:46Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMTo0Njo0NlrOHVL7og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMTo0Njo0NlrOHVL7og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk3NzYzNA==", "bodyText": "should we check for isFull or the logic we use at coordinator (> 50% util.)?", "url": "https://github.com/trinodb/trino/pull/5237#discussion_r491977634", "createdAt": "2020-09-21T11:46:46Z", "author": {"login": "rohangarg"}, "path": "presto-main/src/main/java/io/prestosql/execution/buffer/BroadcastOutputBuffer.java", "diffHunk": "@@ -231,6 +237,11 @@ public void enqueue(List<SerializedPage> pages)\n \n         // drop the initial reference\n         serializedPageReferences.forEach(SerializedPageReference::dereferencePage);\n+\n+        // if the buffer is full for first time, update the task status\n+        if (!hasBlockedBefore.get() && !isFull().isDone() && hasBlockedBefore.compareAndSet(false, true)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzMzUxMjA4", "url": "https://github.com/trinodb/trino/pull/5237#pullrequestreview-493351208", "createdAt": "2020-09-22T11:10:12Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMToxMDoxMlrOHV1C9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMToxMDoxMlrOHV1C9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY1MTI1NA==", "bodyText": "Let's use isFull, 50% condition is opportunistic when there is no notification", "url": "https://github.com/trinodb/trino/pull/5237#discussion_r492651254", "createdAt": "2020-09-22T11:10:12Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/execution/buffer/BroadcastOutputBuffer.java", "diffHunk": "@@ -231,6 +237,11 @@ public void enqueue(List<SerializedPage> pages)\n \n         // drop the initial reference\n         serializedPageReferences.forEach(SerializedPageReference::dereferencePage);\n+\n+        // if the buffer is full for first time, update the task status\n+        if (!hasBlockedBefore.get() && !isFull().isDone() && hasBlockedBefore.compareAndSet(false, true)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk3NzYzNA=="}, "originalCommit": null, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzMzUyOTQ5", "url": "https://github.com/trinodb/trino/pull/5237#pullrequestreview-493352949", "createdAt": "2020-09-22T11:13:03Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMToxMzowM1rOHV1IGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMToxMzowM1rOHV1IGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY1MjU2OA==", "bodyText": "please add some more rationale why we do this (for future readers)", "url": "https://github.com/trinodb/trino/pull/5237#discussion_r492652568", "createdAt": "2020-09-22T11:13:03Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/execution/buffer/BroadcastOutputBuffer.java", "diffHunk": "@@ -231,6 +237,11 @@ public void enqueue(List<SerializedPage> pages)\n \n         // drop the initial reference\n         serializedPageReferences.forEach(SerializedPageReference::dereferencePage);\n+\n+        // if the buffer is full for first time, update the task status", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNDM4NTU5", "url": "https://github.com/trinodb/trino/pull/5237#pullrequestreview-493438559", "createdAt": "2020-09-22T13:07:36Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzowNzozNlrOHV5HkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzowNzozNlrOHV5HkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcxNzk2OA==", "bodyText": "Please add another test case where you make sure notification count is still 0 when no more buffers state is reached, but buffer is full", "url": "https://github.com/trinodb/trino/pull/5237#discussion_r492717968", "createdAt": "2020-09-22T13:07:36Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/execution/buffer/TestBroadcastOutputBuffer.java", "diffHunk": "@@ -316,6 +317,40 @@ public void testSharedBufferFull()\n         enqueuePage(buffer, createPage(3));\n     }\n \n+    @Test\n+    public void testNotifyStatusOnBufferFull()\n+    {\n+        AtomicInteger notifyCount = new AtomicInteger();\n+        BroadcastOutputBuffer buffer = createBroadcastBuffer(\n+                createInitialEmptyOutputBuffers(BROADCAST).withBuffer(FIRST, BROADCAST_PARTITION_ID),\n+                sizeOfPages(1),\n+                notifyCount::incrementAndGet);\n+\n+        // Add a page to the buffer\n+        addPage(buffer, createPage(1));\n+        assertTrue(buffer.isFull().isDone());\n+        assertEquals(notifyCount.get(), 0);\n+\n+        // Add another page to block\n+        ListenableFuture<?> future = enqueuePage(buffer, createPage(2));\n+        assertFalse(future.isDone());\n+        assertEquals(notifyCount.get(), 1);\n+\n+        // Set no more buffers", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d85564d12bdc8c058bd8ceedfdeeedeb55ae897", "author": {"user": {"login": "rohangarg", "name": "Rohan Garg"}}, "url": "https://github.com/trinodb/trino/commit/6d85564d12bdc8c058bd8ceedfdeeedeb55ae897", "committedDate": "2020-09-22T14:33:56Z", "message": "Update task status on broadcast buffer blocking"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "6d85564d12bdc8c058bd8ceedfdeeedeb55ae897", "author": {"user": {"login": "rohangarg", "name": "Rohan Garg"}}, "url": "https://github.com/trinodb/trino/commit/6d85564d12bdc8c058bd8ceedfdeeedeb55ae897", "committedDate": "2020-09-22T14:33:56Z", "message": "Update task status on broadcast buffer blocking"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3684, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}