{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwOTgxODQw", "number": 3159, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTozNDoxMlrODqTDqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTo1MzoxNlrODqThBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Njc5MDE4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTozNDoxMlrOF59N2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTozNDoxMlrOF59N2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMxNjEyMQ==", "bodyText": "the previous version was more readable", "url": "https://github.com/trinodb/trino/pull/3159#discussion_r396316121", "createdAt": "2020-03-23T09:34:12Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -253,11 +251,8 @@ private Constraint getConstraint(Plan plan)\n                     .where(TableScanNode.class::isInstance)\n                     .findSingle();\n \n-            if (!scanNode.isPresent()) {\n-                return Constraint.alwaysFalse();\n-            }\n-\n-            return new Constraint(metadata.getTableProperties(session, scanNode.get().getTable()).getPredicate());\n+            return scanNode.map(tableScanNode -> new Constraint(metadata.getTableProperties(session, tableScanNode.getTable()).getPredicate()))\n+                    .orElseGet(Constraint::alwaysFalse);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjgwMzMyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTozNzozNlrOF59V2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTozNzozNlrOF59V2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMxODE2OQ==", "bodyText": "Extract getQueryRelation method commit:\n\nthe getQueryRelation -> getRelationQuery\nit's not really \"Extract... \", because you're also changing flow... Maybe Factor out getting query for SHOW STATS", "url": "https://github.com/trinodb/trino/pull/3159#discussion_r396318169", "createdAt": "2020-03-23T09:37:36Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -128,26 +128,30 @@ protected Node visitShowStats(ShowStats node, Void context)\n         {\n             checkState(queryExplainer.isPresent(), \"Query explainer must be provided for SHOW STATS SELECT\");\n \n-            if (node.getRelation() instanceof TableSubquery) {\n-                Query query = ((TableSubquery) node.getRelation()).getQuery();\n-                QuerySpecification specification = (QuerySpecification) query.getQueryBody();\n-\n-                Plan plan;\n+            Query query = getRelationQuery(node);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjgxMDM5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestShowStats.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTozOTowOFrOF59Z2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTozOTowOFrOF59Z2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMxOTE5NQ==", "bodyText": "add also a test case:\nassertQueryFails(\"SHOW STATS FOR (SELECT * FROM (SELECT * FROM nation))\", \nbtw i think the case you have currently doesn't match the test method name -- it's more like testShowStatsWithoutTableScan", "url": "https://github.com/trinodb/trino/pull/3159#discussion_r396319195", "createdAt": "2020-03-23T09:39:08Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestShowStats.java", "diffHunk": "@@ -191,6 +191,12 @@ public void testShowStatsWithMultipleFromFails()\n         assertQueryFails(\"SHOW STATS FOR (SELECT * FROM nation_partitioned, region)\", \".*There must be exactly one table in query passed to SHOW STATS SELECT clause\");\n     }\n \n+    @Test\n+    public void testShowStatsWithSubqueryFails()\n+    {\n+        assertQueryFails(\"SHOW STATS FOR (SELECT * FROM (VALUES 1))\", \".*There must be exactly one table in query passed to SHOW STATS SELECT clause\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjgyNjA1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTo0MzowN1rOF59jPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTo0MzowN1rOF59jPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyMTU5OQ==", "bodyText": "This is fishy. Rather than filter, we should verify the  the FROM is just a table.\n(like we did https://github.com/prestosql/presto/blob/1f9088dc5757d18abf1f622f64d8bad4a87e8e2b/presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java#L176-L177)\nAdd a test case like\nSTATS FOR \n  SELECT * \n  FROM nation, (subquery)", "url": "https://github.com/trinodb/trino/pull/3159#discussion_r396321599", "createdAt": "2020-03-23T09:43:07Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -156,6 +170,17 @@ private Query getRelationQuery(ShowStats node)\n             throw new IllegalArgumentException(\"Expected either TableSubquery or Table as relation\");\n         }\n \n+        private Table getTable(ShowStats node, QuerySpecification specification)\n+        {\n+            check(specification.getFrom().isPresent(), node, \"There must be exactly one table in query passed to SHOW STATS SELECT clause\");\n+            List<Table> tables = preOrder(specification.getFrom().get())\n+                    .filter(Table.class::isInstance)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjgyNzI3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTo0MzoyOVrOF59kAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTo0MzoyOVrOF59kAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyMTc5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return tables.get(0);\n          \n          \n            \n                        return getOnlyElement(tables);", "url": "https://github.com/trinodb/trino/pull/3159#discussion_r396321793", "createdAt": "2020-03-23T09:43:29Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -156,6 +170,17 @@ private Query getRelationQuery(ShowStats node)\n             throw new IllegalArgumentException(\"Expected either TableSubquery or Table as relation\");\n         }\n \n+        private Table getTable(ShowStats node, QuerySpecification specification)\n+        {\n+            check(specification.getFrom().isPresent(), node, \"There must be exactly one table in query passed to SHOW STATS SELECT clause\");\n+            List<Table> tables = preOrder(specification.getFrom().get())\n+                    .filter(Table.class::isInstance)\n+                    .map(Table.class::cast)\n+                    .collect(toImmutableList());\n+            check(tables.size() == 1, node, \"There must be exactly one table in query passed to SHOW STATS SELECT clause\");\n+            return tables.get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjgzMTI1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTo0NDozOFrOF59mrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoyOTo1NFrOF6IAiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyMjQ3OQ==", "bodyText": "Do validation after access control in ShowStats\nValidation potentially could leak information about column masks and row\nfilters used during the planning (done within ShowStatsRewrite).\n\n\nCan we have a test covering precisely this?\nshould we ask AC whether there are any masks?", "url": "https://github.com/trinodb/trino/pull/3159#discussion_r396322479", "createdAt": "2020-03-23T09:44:38Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -140,9 +140,23 @@ protected Node visitShowStats(ShowStats node, Void context)\n                 throw rewriteAccessDeniedException(e);\n             }\n \n+            Table table = getTable(node, specification);\n+            QualifiedObjectName tableName = createQualifiedObjectName(session, node, table.getName());\n+            TableHandle tableHandle = metadata.getTableHandle(session, tableName)\n+                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, node, \"Table '%s' not found\", table.getName()));\n+            TableMetadata tableMetadata = metadata.getTableMetadata(session, tableHandle);\n+            Set<String> columnNames = extractStatsColumns(tableMetadata, specification.getSelect().getSelectItems());\n+\n+            try {\n+                accessControl.checkCanSelectFromColumns(session.toSecurityContext(), tableName, columnNames);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ0NDY1Mw==", "bodyText": "should we ask AC whether there are any masks?\n\nI do that in next commit.", "url": "https://github.com/trinodb/trino/pull/3159#discussion_r396444653", "createdAt": "2020-03-23T13:21:16Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -140,9 +140,23 @@ protected Node visitShowStats(ShowStats node, Void context)\n                 throw rewriteAccessDeniedException(e);\n             }\n \n+            Table table = getTable(node, specification);\n+            QualifiedObjectName tableName = createQualifiedObjectName(session, node, table.getName());\n+            TableHandle tableHandle = metadata.getTableHandle(session, tableName)\n+                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, node, \"Table '%s' not found\", table.getName()));\n+            TableMetadata tableMetadata = metadata.getTableMetadata(session, tableHandle);\n+            Set<String> columnNames = extractStatsColumns(tableMetadata, specification.getSelect().getSelectItems());\n+\n+            try {\n+                accessControl.checkCanSelectFromColumns(session.toSecurityContext(), tableName, columnNames);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyMjQ3OQ=="}, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ1NTg5NQ==", "bodyText": "Validation potentially could leak information about column masks and row\n\nI meant that if column mask is a function the user might get an error with information showing that function.", "url": "https://github.com/trinodb/trino/pull/3159#discussion_r396455895", "createdAt": "2020-03-23T13:38:02Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -140,9 +140,23 @@ protected Node visitShowStats(ShowStats node, Void context)\n                 throw rewriteAccessDeniedException(e);\n             }\n \n+            Table table = getTable(node, specification);\n+            QualifiedObjectName tableName = createQualifiedObjectName(session, node, table.getName());\n+            TableHandle tableHandle = metadata.getTableHandle(session, tableName)\n+                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, node, \"Table '%s' not found\", table.getName()));\n+            TableMetadata tableMetadata = metadata.getTableMetadata(session, tableHandle);\n+            Set<String> columnNames = extractStatsColumns(tableMetadata, specification.getSelect().getSelectItems());\n+\n+            try {\n+                accessControl.checkCanSelectFromColumns(session.toSecurityContext(), tableName, columnNames);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyMjQ3OQ=="}, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4NDA4MA==", "bodyText": "so maybe squash the two commits", "url": "https://github.com/trinodb/trino/pull/3159#discussion_r396484080", "createdAt": "2020-03-23T14:18:00Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -140,9 +140,23 @@ protected Node visitShowStats(ShowStats node, Void context)\n                 throw rewriteAccessDeniedException(e);\n             }\n \n+            Table table = getTable(node, specification);\n+            QualifiedObjectName tableName = createQualifiedObjectName(session, node, table.getName());\n+            TableHandle tableHandle = metadata.getTableHandle(session, tableName)\n+                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, node, \"Table '%s' not found\", table.getName()));\n+            TableMetadata tableMetadata = metadata.getTableMetadata(session, tableHandle);\n+            Set<String> columnNames = extractStatsColumns(tableMetadata, specification.getSelect().getSelectItems());\n+\n+            try {\n+                accessControl.checkCanSelectFromColumns(session.toSecurityContext(), tableName, columnNames);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyMjQ3OQ=="}, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ5MjkzOQ==", "bodyText": "So I did", "url": "https://github.com/trinodb/trino/pull/3159#discussion_r396492939", "createdAt": "2020-03-23T14:29:54Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -140,9 +140,23 @@ protected Node visitShowStats(ShowStats node, Void context)\n                 throw rewriteAccessDeniedException(e);\n             }\n \n+            Table table = getTable(node, specification);\n+            QualifiedObjectName tableName = createQualifiedObjectName(session, node, table.getName());\n+            TableHandle tableHandle = metadata.getTableHandle(session, tableName)\n+                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, node, \"Table '%s' not found\", table.getName()));\n+            TableMetadata tableMetadata = metadata.getTableMetadata(session, tableHandle);\n+            Set<String> columnNames = extractStatsColumns(tableMetadata, specification.getSelect().getSelectItems());\n+\n+            try {\n+                accessControl.checkCanSelectFromColumns(session.toSecurityContext(), tableName, columnNames);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyMjQ3OQ=="}, "originalCommit": null, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjgzOTg3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTo0NzowN1rOF59sKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMzoyMDo0NVrOF6FCWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyMzg4MA==", "bodyText": "Use the getTableHandle(Node node, QualifiedName table) method, instead of removing it\nhttps://github.com/prestosql/presto/blob/1f9088dc5757d18abf1f622f64d8bad4a87e8e2b/presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java#L263-L268", "url": "https://github.com/trinodb/trino/pull/3159#discussion_r396323880", "createdAt": "2020-03-23T09:47:07Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -140,9 +140,23 @@ protected Node visitShowStats(ShowStats node, Void context)\n                 throw rewriteAccessDeniedException(e);\n             }\n \n+            Table table = getTable(node, specification);\n+            QualifiedObjectName tableName = createQualifiedObjectName(session, node, table.getName());\n+            TableHandle tableHandle = metadata.getTableHandle(session, tableName)\n+                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, node, \"Table '%s' not found\", table.getName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ0NDI0OQ==", "bodyText": "I am going to use tableName later on, so there are not much benefits of this method.", "url": "https://github.com/trinodb/trino/pull/3159#discussion_r396444249", "createdAt": "2020-03-23T13:20:45Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -140,9 +140,23 @@ protected Node visitShowStats(ShowStats node, Void context)\n                 throw rewriteAccessDeniedException(e);\n             }\n \n+            Table table = getTable(node, specification);\n+            QualifiedObjectName tableName = createQualifiedObjectName(session, node, table.getName());\n+            TableHandle tableHandle = metadata.getTableHandle(session, tableName)\n+                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, node, \"Table '%s' not found\", table.getName()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyMzg4MA=="}, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Njg1MDk4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTo0OTo1OFrOF59zTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTo0OTo1OFrOF59zTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyNTcwOA==", "bodyText": "i think you should grab ConnectorTableMetadata instead of calling connector metadata for each column separately.", "url": "https://github.com/trinodb/trino/pull/3159#discussion_r396325708", "createdAt": "2020-03-23T09:49:58Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -154,9 +156,19 @@ protected Node visitShowStats(ShowStats node, Void context)\n                 throw rewriteAccessDeniedException(e);\n             }\n \n+            for (ColumnHandle column : columnHandles.values()) {\n+                ColumnMetadata columnMetadata = metadata.getColumnMetadata(session, tableHandle, column);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Njg1ODQwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTo1MTo0OVrOF5933w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTo1MTo0OVrOF5933w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyNjg3OQ==", "bodyText": "maybe add\n// SHOW STATS could reveal min, max value which would be otherwise filtered out; or could reveal statistical properties of the data, like row count", "url": "https://github.com/trinodb/trino/pull/3159#discussion_r396326879", "createdAt": "2020-03-23T09:51:49Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -154,9 +156,19 @@ protected Node visitShowStats(ShowStats node, Void context)\n                 throw rewriteAccessDeniedException(e);\n             }\n \n+            for (ColumnHandle column : columnHandles.values()) {\n+                ColumnMetadata columnMetadata = metadata.getColumnMetadata(session, tableHandle, column);\n+                if (!accessControl.getColumnMasks(session.toSecurityContext(), tableName, columnMetadata.getName(), columnMetadata.getType()).isEmpty()) {\n+                    throw new PrestoException(NOT_SUPPORTED, \"SHOW STATS for table with column masking is not supported: \" + columnMetadata.getName());\n+                }\n+            }\n+            if (!accessControl.getRowFilters(session.toSecurityContext(), tableName).isEmpty()) {\n+                throw new PrestoException(NOT_SUPPORTED, \"SHOW STATS is not supported for a table with row filtering\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Njg2MTc5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTo1MjoyOVrOF595vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTo1MjoyOVrOF595vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyNzM1Nw==", "bodyText": "This should be verified only for the columns requested.\nIe if i SHOW STATS FOR SELECT a FROM t, then mask on b doesn't matter", "url": "https://github.com/trinodb/trino/pull/3159#discussion_r396327357", "createdAt": "2020-03-23T09:52:29Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -154,9 +156,19 @@ protected Node visitShowStats(ShowStats node, Void context)\n                 throw rewriteAccessDeniedException(e);\n             }\n \n+            for (ColumnHandle column : columnHandles.values()) {\n+                ColumnMetadata columnMetadata = metadata.getColumnMetadata(session, tableHandle, column);\n+                if (!accessControl.getColumnMasks(session.toSecurityContext(), tableName, columnMetadata.getName(), columnMetadata.getType()).isEmpty()) {\n+                    throw new PrestoException(NOT_SUPPORTED, \"SHOW STATS for table with column masking is not supported: \" + columnMetadata.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Njg2NTMyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/sql/query/TestColumnMask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTo1MzoxNlrOF5976Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTo1MzoxNlrOF5976Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyNzkxMw==", "bodyText": "add\n\ncase when masked column is explicitly selected (alone, or with others)\ncase when masked column is not selected", "url": "https://github.com/trinodb/trino/pull/3159#discussion_r396327913", "createdAt": "2020-03-23T09:53:16Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/sql/query/TestColumnMask.java", "diffHunk": "@@ -351,4 +351,19 @@ public void testInvalidMasks()\n             assertions.assertFails(\"SELECT orderkey FROM orders\", \"\\\\Qline 1:20: Column mask for 'orders.orderkey' cannot contain aggregations, window functions or grouping operations: [GROUPING (orderkey)]\\\\E\");\n         });\n     }\n+\n+    @Test\n+    public void testShowStats()\n+    {\n+        assertions.executeExclusively(() -> {\n+            accessControl.reset();\n+            accessControl.columnMask(\n+                    new QualifiedObjectName(CATALOG, \"tiny\", \"orders\"),\n+                    \"orderkey\",\n+                    USER,\n+                    new ViewExpression(USER, Optional.of(CATALOG), Optional.of(\"tiny\"), \"7\"));\n+\n+            assertions.assertFails(\"SHOW STATS FOR (SELECT * FROM orders)\", \"\\\\QSHOW STATS for table with column masking is not supported: orderkey\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 780, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}