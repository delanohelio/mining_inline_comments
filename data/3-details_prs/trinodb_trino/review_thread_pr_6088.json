{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3MzgzNzE4", "number": 6088, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjoyODoyN1rOE9TjTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMTo1MTo0NFrOE9Zytg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzE4OTI0OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjoyODoyN1rOH57NCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMTo1Mjo1MFrOH6E8qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUwMDg3NA==", "bodyText": "typo", "url": "https://github.com/trinodb/trino/pull/6088#discussion_r530500874", "createdAt": "2020-11-25T16:28:27Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -75,7 +77,13 @@\n             .with(Executors.newCachedThreadPool(daemonThreadsNamed(\"docker-container-%d\")));\n \n     private final String logicalName;\n-    private final Stopwatch startupTime = Stopwatch.createUnstarted();\n+\n+    // start is retried, we are recording the last attempt only\n+    @GuardedBy(\"this\")\n+    private OptionalLong lastStartUpCommenceTimeNanos = OptionalLong.empty();\n+    @GuardedBy(\"this\")\n+    private OptionalLong lastStartUFinishTimeNanos = OptionalLong.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2MDUyMg==", "bodyText": "thanks, fixed", "url": "https://github.com/trinodb/trino/pull/6088#discussion_r530660522", "createdAt": "2020-11-25T21:52:50Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -75,7 +77,13 @@\n             .with(Executors.newCachedThreadPool(daemonThreadsNamed(\"docker-container-%d\")));\n \n     private final String logicalName;\n-    private final Stopwatch startupTime = Stopwatch.createUnstarted();\n+\n+    // start is retried, we are recording the last attempt only\n+    @GuardedBy(\"this\")\n+    private OptionalLong lastStartUpCommenceTimeNanos = OptionalLong.empty();\n+    @GuardedBy(\"this\")\n+    private OptionalLong lastStartUFinishTimeNanos = OptionalLong.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUwMDg3NA=="}, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzE5MDU0OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjoyODo0NVrOH57N4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMDoxMjowNlrOH6Ukbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUwMTA4OQ==", "bodyText": "what is Commence? Use stupid English.", "url": "https://github.com/trinodb/trino/pull/6088#discussion_r530501089", "createdAt": "2020-11-25T16:28:45Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -75,7 +77,13 @@\n             .with(Executors.newCachedThreadPool(daemonThreadsNamed(\"docker-container-%d\")));\n \n     private final String logicalName;\n-    private final Stopwatch startupTime = Stopwatch.createUnstarted();\n+\n+    // start is retried, we are recording the last attempt only\n+    @GuardedBy(\"this\")\n+    private OptionalLong lastStartUpCommenceTimeNanos = OptionalLong.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYyNzI3Mw==", "bodyText": "Also let names to match the methods", "url": "https://github.com/trinodb/trino/pull/6088#discussion_r530627273", "createdAt": "2020-11-25T20:28:32Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -75,7 +77,13 @@\n             .with(Executors.newCachedThreadPool(daemonThreadsNamed(\"docker-container-%d\")));\n \n     private final String logicalName;\n-    private final Stopwatch startupTime = Stopwatch.createUnstarted();\n+\n+    // start is retried, we are recording the last attempt only\n+    @GuardedBy(\"this\")\n+    private OptionalLong lastStartUpCommenceTimeNanos = OptionalLong.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUwMTA4OQ=="}, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY1OTU5MA==", "bodyText": "would `startUpStartUpTime\" be better? that's why i used this word.", "url": "https://github.com/trinodb/trino/pull/6088#discussion_r530659590", "createdAt": "2020-11-25T21:50:19Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -75,7 +77,13 @@\n             .with(Executors.newCachedThreadPool(daemonThreadsNamed(\"docker-container-%d\")));\n \n     private final String logicalName;\n-    private final Stopwatch startupTime = Stopwatch.createUnstarted();\n+\n+    // start is retried, we are recording the last attempt only\n+    @GuardedBy(\"this\")\n+    private OptionalLong lastStartUpCommenceTimeNanos = OptionalLong.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUwMTA4OQ=="}, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2OTMzNg==", "bodyText": "startUpBeginTime and startUpEndTime?", "url": "https://github.com/trinodb/trino/pull/6088#discussion_r530669336", "createdAt": "2020-11-25T22:14:49Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -75,7 +77,13 @@\n             .with(Executors.newCachedThreadPool(daemonThreadsNamed(\"docker-container-%d\")));\n \n     private final String logicalName;\n-    private final Stopwatch startupTime = Stopwatch.createUnstarted();\n+\n+    // start is retried, we are recording the last attempt only\n+    @GuardedBy(\"this\")\n+    private OptionalLong lastStartUpCommenceTimeNanos = OptionalLong.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUwMTA4OQ=="}, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY3MTI1Mg==", "bodyText": "i like my names more. Can it be the day when we learn a new word?\ni can still change if you want to.", "url": "https://github.com/trinodb/trino/pull/6088#discussion_r530671252", "createdAt": "2020-11-25T22:19:58Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -75,7 +77,13 @@\n             .with(Executors.newCachedThreadPool(daemonThreadsNamed(\"docker-container-%d\")));\n \n     private final String logicalName;\n-    private final Stopwatch startupTime = Stopwatch.createUnstarted();\n+\n+    // start is retried, we are recording the last attempt only\n+    @GuardedBy(\"this\")\n+    private OptionalLong lastStartUpCommenceTimeNanos = OptionalLong.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUwMTA4OQ=="}, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkxNjQ2Mg==", "bodyText": "keep them", "url": "https://github.com/trinodb/trino/pull/6088#discussion_r530916462", "createdAt": "2020-11-26T10:12:06Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -75,7 +77,13 @@\n             .with(Executors.newCachedThreadPool(daemonThreadsNamed(\"docker-container-%d\")));\n \n     private final String logicalName;\n-    private final Stopwatch startupTime = Stopwatch.createUnstarted();\n+\n+    // start is retried, we are recording the last attempt only\n+    @GuardedBy(\"this\")\n+    private OptionalLong lastStartUpCommenceTimeNanos = OptionalLong.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUwMTA4OQ=="}, "originalCommit": null, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzk4NjMzOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMDoyNToyMlrOH6C1hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMTo1MDo0N1rOH6E50A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYyNTkyNQ==", "bodyText": "why synchronized? AtomicLong?", "url": "https://github.com/trinodb/trino/pull/6088#discussion_r530625925", "createdAt": "2020-11-25T20:25:22Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -152,23 +160,30 @@ public DockerContainer withHealthCheck(Path healthCheckScript)\n                 .withCreateContainerCmdModifier(command -> command.withHealthcheck(cmd));\n     }\n \n-    public Duration getStartupTime()\n+    public synchronized Duration getStartupTime()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY1OTc5Mg==", "bodyText": "would it be better if i made this atomic?", "url": "https://github.com/trinodb/trino/pull/6088#discussion_r530659792", "createdAt": "2020-11-25T21:50:47Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -152,23 +160,30 @@ public DockerContainer withHealthCheck(Path healthCheckScript)\n                 .withCreateContainerCmdModifier(command -> command.withHealthcheck(cmd));\n     }\n \n-    public Duration getStartupTime()\n+    public synchronized Duration getStartupTime()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYyNTkyNQ=="}, "originalCommit": null, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzk5NTY5OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMDoyODo0M1rOH6C7Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMTo1NDowN1rOH6E-ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYyNzM1NA==", "bodyText": "This could be Duration", "url": "https://github.com/trinodb/trino/pull/6088#discussion_r530627354", "createdAt": "2020-11-25T20:28:43Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -75,7 +77,13 @@\n             .with(Executors.newCachedThreadPool(daemonThreadsNamed(\"docker-container-%d\")));\n \n     private final String logicalName;\n-    private final Stopwatch startupTime = Stopwatch.createUnstarted();\n+\n+    // start is retried, we are recording the last attempt only\n+    @GuardedBy(\"this\")\n+    private OptionalLong lastStartUpCommenceTimeNanos = OptionalLong.empty();\n+    @GuardedBy(\"this\")\n+    private OptionalLong lastStartUFinishTimeNanos = OptionalLong.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2MDk3MA==", "bodyText": "i am storing actual data on a field and leaving rounding to the getter. I think it's a fair deal.", "url": "https://github.com/trinodb/trino/pull/6088#discussion_r530660970", "createdAt": "2020-11-25T21:54:07Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -75,7 +77,13 @@\n             .with(Executors.newCachedThreadPool(daemonThreadsNamed(\"docker-container-%d\")));\n \n     private final String logicalName;\n-    private final Stopwatch startupTime = Stopwatch.createUnstarted();\n+\n+    // start is retried, we are recording the last attempt only\n+    @GuardedBy(\"this\")\n+    private OptionalLong lastStartUpCommenceTimeNanos = OptionalLong.empty();\n+    @GuardedBy(\"this\")\n+    private OptionalLong lastStartUFinishTimeNanos = OptionalLong.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYyNzM1NA=="}, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODIxMTc0OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMTo1MTo0NFrOH6E7IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMDoxMTo0OFrOH6Ujnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2MDEyOA==", "bodyText": "this should also reset lastStartUFinishTimeNanos", "url": "https://github.com/trinodb/trino/pull/6088#discussion_r530660128", "createdAt": "2020-11-25T21:51:44Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -152,23 +160,30 @@ public DockerContainer withHealthCheck(Path healthCheckScript)\n                 .withCreateContainerCmdModifier(command -> command.withHealthcheck(cmd));\n     }\n \n-    public Duration getStartupTime()\n+    public synchronized Duration getStartupTime()\n     {\n-        return Duration.succinctNanos(startupTime.elapsed(NANOSECONDS)).convertToMostSuccinctTimeUnit();\n+        checkState(lastStartUpCommenceTimeNanos.isPresent(), \"Container did not commence starting\");\n+        checkState(lastStartUFinishTimeNanos.isPresent(), \"Container not started\");\n+        return Duration.succinctNanos(lastStartUFinishTimeNanos.getAsLong() - lastStartUpCommenceTimeNanos.getAsLong()).convertToMostSuccinctTimeUnit();\n     }\n \n     @Override\n     protected void containerIsStarting(InspectContainerResponse containerInfo)\n     {\n-        this.startupTime.start();\n+        synchronized (this) {\n+            lastStartUpCommenceTimeNanos = OptionalLong.of(System.nanoTime());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2MDgwMg==", "bodyText": "good catch, fixed", "url": "https://github.com/trinodb/trino/pull/6088#discussion_r530660802", "createdAt": "2020-11-25T21:53:36Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -152,23 +160,30 @@ public DockerContainer withHealthCheck(Path healthCheckScript)\n                 .withCreateContainerCmdModifier(command -> command.withHealthcheck(cmd));\n     }\n \n-    public Duration getStartupTime()\n+    public synchronized Duration getStartupTime()\n     {\n-        return Duration.succinctNanos(startupTime.elapsed(NANOSECONDS)).convertToMostSuccinctTimeUnit();\n+        checkState(lastStartUpCommenceTimeNanos.isPresent(), \"Container did not commence starting\");\n+        checkState(lastStartUFinishTimeNanos.isPresent(), \"Container not started\");\n+        return Duration.succinctNanos(lastStartUFinishTimeNanos.getAsLong() - lastStartUpCommenceTimeNanos.getAsLong()).convertToMostSuccinctTimeUnit();\n     }\n \n     @Override\n     protected void containerIsStarting(InspectContainerResponse containerInfo)\n     {\n-        this.startupTime.start();\n+        synchronized (this) {\n+            lastStartUpCommenceTimeNanos = OptionalLong.of(System.nanoTime());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2MDEyOA=="}, "originalCommit": null, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2OTk3NQ==", "bodyText": "why?\nIt shoud verify if lastStartUFinishTimeNanos is empty. Rigth?", "url": "https://github.com/trinodb/trino/pull/6088#discussion_r530669975", "createdAt": "2020-11-25T22:16:26Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -152,23 +160,30 @@ public DockerContainer withHealthCheck(Path healthCheckScript)\n                 .withCreateContainerCmdModifier(command -> command.withHealthcheck(cmd));\n     }\n \n-    public Duration getStartupTime()\n+    public synchronized Duration getStartupTime()\n     {\n-        return Duration.succinctNanos(startupTime.elapsed(NANOSECONDS)).convertToMostSuccinctTimeUnit();\n+        checkState(lastStartUpCommenceTimeNanos.isPresent(), \"Container did not commence starting\");\n+        checkState(lastStartUFinishTimeNanos.isPresent(), \"Container not started\");\n+        return Duration.succinctNanos(lastStartUFinishTimeNanos.getAsLong() - lastStartUpCommenceTimeNanos.getAsLong()).convertToMostSuccinctTimeUnit();\n     }\n \n     @Override\n     protected void containerIsStarting(InspectContainerResponse containerInfo)\n     {\n-        this.startupTime.start();\n+        synchronized (this) {\n+            lastStartUpCommenceTimeNanos = OptionalLong.of(System.nanoTime());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2MDEyOA=="}, "originalCommit": null, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY3MTAwMA==", "bodyText": "The whole point is that starts are retried (as per cmt msg  and @kokosing analysis in #6079)", "url": "https://github.com/trinodb/trino/pull/6088#discussion_r530671000", "createdAt": "2020-11-25T22:19:18Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -152,23 +160,30 @@ public DockerContainer withHealthCheck(Path healthCheckScript)\n                 .withCreateContainerCmdModifier(command -> command.withHealthcheck(cmd));\n     }\n \n-    public Duration getStartupTime()\n+    public synchronized Duration getStartupTime()\n     {\n-        return Duration.succinctNanos(startupTime.elapsed(NANOSECONDS)).convertToMostSuccinctTimeUnit();\n+        checkState(lastStartUpCommenceTimeNanos.isPresent(), \"Container did not commence starting\");\n+        checkState(lastStartUFinishTimeNanos.isPresent(), \"Container not started\");\n+        return Duration.succinctNanos(lastStartUFinishTimeNanos.getAsLong() - lastStartUpCommenceTimeNanos.getAsLong()).convertToMostSuccinctTimeUnit();\n     }\n \n     @Override\n     protected void containerIsStarting(InspectContainerResponse containerInfo)\n     {\n-        this.startupTime.start();\n+        synchronized (this) {\n+            lastStartUpCommenceTimeNanos = OptionalLong.of(System.nanoTime());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2MDEyOA=="}, "originalCommit": null, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkxNjI1NQ==", "bodyText": "Ok - I thought that they are required only if thy do not reach actual \"started\" state.", "url": "https://github.com/trinodb/trino/pull/6088#discussion_r530916255", "createdAt": "2020-11-26T10:11:48Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -152,23 +160,30 @@ public DockerContainer withHealthCheck(Path healthCheckScript)\n                 .withCreateContainerCmdModifier(command -> command.withHealthcheck(cmd));\n     }\n \n-    public Duration getStartupTime()\n+    public synchronized Duration getStartupTime()\n     {\n-        return Duration.succinctNanos(startupTime.elapsed(NANOSECONDS)).convertToMostSuccinctTimeUnit();\n+        checkState(lastStartUpCommenceTimeNanos.isPresent(), \"Container did not commence starting\");\n+        checkState(lastStartUFinishTimeNanos.isPresent(), \"Container not started\");\n+        return Duration.succinctNanos(lastStartUFinishTimeNanos.getAsLong() - lastStartUpCommenceTimeNanos.getAsLong()).convertToMostSuccinctTimeUnit();\n     }\n \n     @Override\n     protected void containerIsStarting(InspectContainerResponse containerInfo)\n     {\n-        this.startupTime.start();\n+        synchronized (this) {\n+            lastStartUpCommenceTimeNanos = OptionalLong.of(System.nanoTime());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2MDEyOA=="}, "originalCommit": null, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4661, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}