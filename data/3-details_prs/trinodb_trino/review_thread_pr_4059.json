{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1NjQxMzI4", "number": 4059, "reviewThreads": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxMDozNDozMVrOEHShMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QwNTo1ODo0MFrOEi1zJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDc4ODk3OnYy", "diffSide": "RIGHT", "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/CassandraClientConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxMDozNDozMVrOGml75g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMjowMzo1MlrOGmv_vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEyMDYxNA==", "bodyText": "There is no existing connector that makes DELETE statement configurable like this. Is this property mandatory in your environment?", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r443120614", "createdAt": "2020-06-20T10:34:31Z", "author": {"login": "ebyhr"}, "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/CassandraClientConfig.java", "diffHunk": "@@ -189,6 +190,19 @@ public CassandraClientConfig setAllowDropTable(boolean allowDropTable)\n         return this;\n     }\n \n+    public boolean getAllowDeleteData()\n+    {\n+        return this.allowDeleteData;\n+    }\n+\n+    @Config(\"cassandra.allow-delete-data\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4NTQzNw==", "bodyText": "No, I don't need it in my environment. I followed @Config(\"cassandra.allow-drop-table\") and I just thought deleting data is more careful. But, I will remove it if no need.", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r443285437", "createdAt": "2020-06-22T02:03:52Z", "author": {"login": "t2y"}, "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/CassandraClientConfig.java", "diffHunk": "@@ -189,6 +190,19 @@ public CassandraClientConfig setAllowDropTable(boolean allowDropTable)\n         return this;\n     }\n \n+    public boolean getAllowDeleteData()\n+    {\n+        return this.allowDeleteData;\n+    }\n+\n+    @Config(\"cassandra.allow-delete-data\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEyMDYxNA=="}, "originalCommit": null, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDgxOTY5OnYy", "diffSide": "RIGHT", "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/CassandraMetadata.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxMTo0NDoyNVrOGmmLhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNDo0Nzo0MVrOGpTj5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEyNDYxMg==", "bodyText": "I suppose the query should not be failed even if partition does not exist for the specified condition. Could you share your intention?", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r443124612", "createdAt": "2020-06-20T11:44:25Z", "author": {"login": "ebyhr"}, "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/CassandraMetadata.java", "diffHunk": "@@ -369,4 +373,41 @@ private static boolean isHiddenIdColumn(CassandraColumnHandle columnHandle)\n     {\n         return columnHandle.isHidden() && ID_COLUMN_NAME.equals(columnHandle.getName());\n     }\n+\n+    @Override\n+    public ColumnHandle getUpdateRowIdColumnHandle(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        return new CassandraColumnHandle(\"$dummy\", 0, CassandraType.TEXT, false, false, false, true);\n+    }\n+\n+    @Override\n+    public ConnectorTableHandle beginDelete(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        throw new PrestoException(NOT_SUPPORTED, \"This connector only supports delete with primary key or partition key\");\n+    }\n+\n+    @Override\n+    public Optional<ConnectorTableHandle> applyDelete(ConnectorSession session, ConnectorTableHandle handle)\n+    {\n+        if (!allowDeleteData) {\n+            throw new PrestoException(PERMISSION_DENIED, \"Deleting data is disabled in this Cassandra catalog\");\n+        }\n+        return Optional.of(handle);\n+    }\n+\n+    @Override\n+    public OptionalLong executeDelete(ConnectorSession session, ConnectorTableHandle deleteHandle)\n+    {\n+        CassandraTableHandle handle = (CassandraTableHandle) deleteHandle;\n+        Optional<List<CassandraPartition>> opt = handle.getPartitions();\n+        if (!opt.isPresent()) {\n+            throw new PrestoException(PERMISSION_DENIED, \"Deleting without partition key is unsupported\");\n+        }\n+        if (opt.get().isEmpty()) {\n+            throw new PrestoException(PERMISSION_DENIED, \"No data with the given condition\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4ODUyOQ==", "bodyText": "When a partition does not exist for the specified condition, we shouldn't execute a delete statement. At that time, should I return just OptionalLong.empty();? I'm not sure what handling is better for that condition.", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r443288529", "createdAt": "2020-06-22T02:20:53Z", "author": {"login": "t2y"}, "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/CassandraMetadata.java", "diffHunk": "@@ -369,4 +373,41 @@ private static boolean isHiddenIdColumn(CassandraColumnHandle columnHandle)\n     {\n         return columnHandle.isHidden() && ID_COLUMN_NAME.equals(columnHandle.getName());\n     }\n+\n+    @Override\n+    public ColumnHandle getUpdateRowIdColumnHandle(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        return new CassandraColumnHandle(\"$dummy\", 0, CassandraType.TEXT, false, false, false, true);\n+    }\n+\n+    @Override\n+    public ConnectorTableHandle beginDelete(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        throw new PrestoException(NOT_SUPPORTED, \"This connector only supports delete with primary key or partition key\");\n+    }\n+\n+    @Override\n+    public Optional<ConnectorTableHandle> applyDelete(ConnectorSession session, ConnectorTableHandle handle)\n+    {\n+        if (!allowDeleteData) {\n+            throw new PrestoException(PERMISSION_DENIED, \"Deleting data is disabled in this Cassandra catalog\");\n+        }\n+        return Optional.of(handle);\n+    }\n+\n+    @Override\n+    public OptionalLong executeDelete(ConnectorSession session, ConnectorTableHandle deleteHandle)\n+    {\n+        CassandraTableHandle handle = (CassandraTableHandle) deleteHandle;\n+        Optional<List<CassandraPartition>> opt = handle.getPartitions();\n+        if (!opt.isPresent()) {\n+            throw new PrestoException(PERMISSION_DENIED, \"Deleting without partition key is unsupported\");\n+        }\n+        if (opt.get().isEmpty()) {\n+            throw new PrestoException(PERMISSION_DENIED, \"No data with the given condition\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEyNDYxMg=="}, "originalCommit": null, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ3MzY2NA==", "bodyText": "I thought again about the below code.\nif (partitions.get().isEmpty()) {\n    throw new PrestoException(PERMISSION_DENIED, \"No data with the given condition\");\n}\n\nI suppose the query should not be failed\n\nProbably true. Cassandra cluster will return an error when it requests a delete statement without partition keys if the partitions are empty. So, I don't care about it.\nI fixed it in 1b9db106.", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r443473664", "createdAt": "2020-06-22T10:48:14Z", "author": {"login": "t2y"}, "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/CassandraMetadata.java", "diffHunk": "@@ -369,4 +373,41 @@ private static boolean isHiddenIdColumn(CassandraColumnHandle columnHandle)\n     {\n         return columnHandle.isHidden() && ID_COLUMN_NAME.equals(columnHandle.getName());\n     }\n+\n+    @Override\n+    public ColumnHandle getUpdateRowIdColumnHandle(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        return new CassandraColumnHandle(\"$dummy\", 0, CassandraType.TEXT, false, false, false, true);\n+    }\n+\n+    @Override\n+    public ConnectorTableHandle beginDelete(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        throw new PrestoException(NOT_SUPPORTED, \"This connector only supports delete with primary key or partition key\");\n+    }\n+\n+    @Override\n+    public Optional<ConnectorTableHandle> applyDelete(ConnectorSession session, ConnectorTableHandle handle)\n+    {\n+        if (!allowDeleteData) {\n+            throw new PrestoException(PERMISSION_DENIED, \"Deleting data is disabled in this Cassandra catalog\");\n+        }\n+        return Optional.of(handle);\n+    }\n+\n+    @Override\n+    public OptionalLong executeDelete(ConnectorSession session, ConnectorTableHandle deleteHandle)\n+    {\n+        CassandraTableHandle handle = (CassandraTableHandle) deleteHandle;\n+        Optional<List<CassandraPartition>> opt = handle.getPartitions();\n+        if (!opt.isPresent()) {\n+            throw new PrestoException(PERMISSION_DENIED, \"Deleting without partition key is unsupported\");\n+        }\n+        if (opt.get().isEmpty()) {\n+            throw new PrestoException(PERMISSION_DENIED, \"No data with the given condition\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEyNDYxMg=="}, "originalCommit": null, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk2NTI4NA==", "bodyText": "I had forgotten that code prevents an error when there are no records with a given partition key.\nQuery 20200626_042205_00023_qzyzn failed: line 0:-1 no viable alternative at input '<EOF>'\n\nI changed to return without any error in acceec1b.", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r445965284", "createdAt": "2020-06-26T04:47:41Z", "author": {"login": "t2y"}, "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/CassandraMetadata.java", "diffHunk": "@@ -369,4 +373,41 @@ private static boolean isHiddenIdColumn(CassandraColumnHandle columnHandle)\n     {\n         return columnHandle.isHidden() && ID_COLUMN_NAME.equals(columnHandle.getName());\n     }\n+\n+    @Override\n+    public ColumnHandle getUpdateRowIdColumnHandle(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        return new CassandraColumnHandle(\"$dummy\", 0, CassandraType.TEXT, false, false, false, true);\n+    }\n+\n+    @Override\n+    public ConnectorTableHandle beginDelete(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        throw new PrestoException(NOT_SUPPORTED, \"This connector only supports delete with primary key or partition key\");\n+    }\n+\n+    @Override\n+    public Optional<ConnectorTableHandle> applyDelete(ConnectorSession session, ConnectorTableHandle handle)\n+    {\n+        if (!allowDeleteData) {\n+            throw new PrestoException(PERMISSION_DENIED, \"Deleting data is disabled in this Cassandra catalog\");\n+        }\n+        return Optional.of(handle);\n+    }\n+\n+    @Override\n+    public OptionalLong executeDelete(ConnectorSession session, ConnectorTableHandle deleteHandle)\n+    {\n+        CassandraTableHandle handle = (CassandraTableHandle) deleteHandle;\n+        Optional<List<CassandraPartition>> opt = handle.getPartitions();\n+        if (!opt.isPresent()) {\n+            throw new PrestoException(PERMISSION_DENIED, \"Deleting without partition key is unsupported\");\n+        }\n+        if (opt.get().isEmpty()) {\n+            throw new PrestoException(PERMISSION_DENIED, \"No data with the given condition\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEyNDYxMg=="}, "originalCommit": null, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDgzNDI0OnYy", "diffSide": "RIGHT", "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/CassandraMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxMjoxNTowOFrOGmmTDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMjowNDo0OFrOGmwAUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEyNjU0MA==", "bodyText": "Basically, we don't use abbreviations. Other places are also the same.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Optional<List<CassandraPartition>> opt = handle.getPartitions();\n          \n          \n            \n                    if (!opt.isPresent()) {\n          \n          \n            \n                    Optional<List<CassandraPartition>> partitions = handle.getPartitions();\n          \n          \n            \n                    if (partitions.isEmpty()) {", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r443126540", "createdAt": "2020-06-20T12:15:08Z", "author": {"login": "ebyhr"}, "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/CassandraMetadata.java", "diffHunk": "@@ -369,4 +373,41 @@ private static boolean isHiddenIdColumn(CassandraColumnHandle columnHandle)\n     {\n         return columnHandle.isHidden() && ID_COLUMN_NAME.equals(columnHandle.getName());\n     }\n+\n+    @Override\n+    public ColumnHandle getUpdateRowIdColumnHandle(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        return new CassandraColumnHandle(\"$dummy\", 0, CassandraType.TEXT, false, false, false, true);\n+    }\n+\n+    @Override\n+    public ConnectorTableHandle beginDelete(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        throw new PrestoException(NOT_SUPPORTED, \"This connector only supports delete with primary key or partition key\");\n+    }\n+\n+    @Override\n+    public Optional<ConnectorTableHandle> applyDelete(ConnectorSession session, ConnectorTableHandle handle)\n+    {\n+        if (!allowDeleteData) {\n+            throw new PrestoException(PERMISSION_DENIED, \"Deleting data is disabled in this Cassandra catalog\");\n+        }\n+        return Optional.of(handle);\n+    }\n+\n+    @Override\n+    public OptionalLong executeDelete(ConnectorSession session, ConnectorTableHandle deleteHandle)\n+    {\n+        CassandraTableHandle handle = (CassandraTableHandle) deleteHandle;\n+        Optional<List<CassandraPartition>> opt = handle.getPartitions();\n+        if (!opt.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4NTU4NA==", "bodyText": "I see. Got it.", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r443285584", "createdAt": "2020-06-22T02:04:48Z", "author": {"login": "t2y"}, "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/CassandraMetadata.java", "diffHunk": "@@ -369,4 +373,41 @@ private static boolean isHiddenIdColumn(CassandraColumnHandle columnHandle)\n     {\n         return columnHandle.isHidden() && ID_COLUMN_NAME.equals(columnHandle.getName());\n     }\n+\n+    @Override\n+    public ColumnHandle getUpdateRowIdColumnHandle(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        return new CassandraColumnHandle(\"$dummy\", 0, CassandraType.TEXT, false, false, false, true);\n+    }\n+\n+    @Override\n+    public ConnectorTableHandle beginDelete(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        throw new PrestoException(NOT_SUPPORTED, \"This connector only supports delete with primary key or partition key\");\n+    }\n+\n+    @Override\n+    public Optional<ConnectorTableHandle> applyDelete(ConnectorSession session, ConnectorTableHandle handle)\n+    {\n+        if (!allowDeleteData) {\n+            throw new PrestoException(PERMISSION_DENIED, \"Deleting data is disabled in this Cassandra catalog\");\n+        }\n+        return Optional.of(handle);\n+    }\n+\n+    @Override\n+    public OptionalLong executeDelete(ConnectorSession session, ConnectorTableHandle deleteHandle)\n+    {\n+        CassandraTableHandle handle = (CassandraTableHandle) deleteHandle;\n+        Optional<List<CassandraPartition>> opt = handle.getPartitions();\n+        if (!opt.isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEyNjU0MA=="}, "originalCommit": null, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDg0NjUxOnYy", "diffSide": "RIGHT", "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/CassandraTestingUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxMjo0MTo1N1rOGmmZSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxMjo0MTo1N1rOGmmZSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEyODEzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            \"CREATE TABLE \" + table + \" (\" + \"partition_one bigint, \" + \"partition_two int, \" + \"clust_one text, \" + \"data text, \" + \"PRIMARY KEY((partition_one, partition_two), clust_one) \" + \")\");\n          \n          \n            \n                            \"CREATE TABLE \" + table + \" ( \" +\n          \n          \n            \n                                    \"partition_one bigint, \" +\n          \n          \n            \n                                    \"partition_two int, \" +\n          \n          \n            \n                                    \"clust_one text, \" +\n          \n          \n            \n                                    \"data text, \" +\n          \n          \n            \n                                    \"PRIMARY KEY((partition_one, partition_two), clust_one))\");", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r443128139", "createdAt": "2020-06-20T12:41:57Z", "author": {"login": "ebyhr"}, "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/CassandraTestingUtils.java", "diffHunk": "@@ -248,4 +250,58 @@ private static void insertTestData(CassandraSession session, SchemaTableName tab\n         }\n         assertEquals(session.execute(\"SELECT COUNT(*) FROM \" + table).all().get(0).getLong(0), rowsCount);\n     }\n+\n+    private static void createTableDeleteData(CassandraSession session, SchemaTableName table)\n+    {\n+        session.execute(\"DROP TABLE IF EXISTS \" + table);\n+        session.execute(\n+                \"CREATE TABLE \" + table + \" (\" + \"partition_one bigint, \" + \"partition_two int, \" + \"clust_one text, \" + \"data text, \" + \"PRIMARY KEY((partition_one, partition_two), clust_one) \" + \")\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDg1Njk0OnYy", "diffSide": "RIGHT", "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestCassandraConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxMzowNjozOVrOGmmexQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxMzowNjozOVrOGmmexQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEyOTU0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new CassandraTableHandle(handle.getSchemaName(), handle\n          \n          \n            \n                            .getTableName(), partitions, clusteringKeyPredicates);\n          \n          \n            \n                    return new CassandraTableHandle(handle.getSchemaName(), handle.getTableName(), partitions, clusteringKeyPredicates);", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r443129541", "createdAt": "2020-06-20T13:06:39Z", "author": {"login": "ebyhr"}, "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestCassandraConnector.java", "diffHunk": "@@ -267,4 +273,55 @@ private ConnectorTableHandle getTableHandle(SchemaTableName tableName)\n         }\n         return index.build();\n     }\n+\n+    @Test(expectedExceptions = PrestoException.class)\n+    public void testApplyDeleteException()\n+    {\n+        metadata.applyDelete(SESSION, getTableHandle(tableForDelete));\n+    }\n+\n+    @Test\n+    public void testExecuteDelete()\n+    {\n+        assertNumberOfRows(tableForDelete, 15);\n+        CassandraTableHandle handle1 = getTableHandle(Optional.of(\n+                List.of(createPartition(1, 1))), \"\");\n+        metadata.executeDelete(SESSION, handle1);\n+        assertNumberOfRows(tableForDelete, 12);\n+\n+        CassandraTableHandle handle2 = getTableHandle(Optional.of(\n+                List.of(createPartition(1, 2))), \"clust_one='clust_one_2'\");\n+        metadata.executeDelete(SESSION, handle2);\n+        assertNumberOfRows(tableForDelete, 11);\n+\n+        CassandraTableHandle handle3 = getTableHandle(Optional.of(\n+                List.of(createPartition(5, 5))), \"\");\n+        metadata.executeDelete(SESSION, handle3);\n+        assertNumberOfRows(tableForDelete, 10);\n+    }\n+\n+    private CassandraTableHandle getTableHandle(Optional<List<CassandraPartition>> partitions, String clusteringKeyPredicates)\n+    {\n+        CassandraTableHandle handle = (CassandraTableHandle) getTableHandle(tableForDelete);\n+        return new CassandraTableHandle(handle.getSchemaName(), handle\n+                .getTableName(), partitions, clusteringKeyPredicates);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDg2ODYyOnYy", "diffSide": "RIGHT", "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestJsonCassandraHandles.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxMzozMDoxNVrOGmmk4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxMzozMDoxNVrOGmmk4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMTEwNA==", "bodyText": "Please inline to L52.", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r443131104", "createdAt": "2020-06-20T13:30:15Z", "author": {"login": "ebyhr"}, "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestJsonCassandraHandles.java", "diffHunk": "@@ -31,7 +36,22 @@\n {\n     private static final Map<String, Object> TABLE_HANDLE_AS_MAP = ImmutableMap.of(\n             \"schemaName\", \"cassandra_schema\",\n-            \"tableName\", \"cassandra_table\");\n+            \"tableName\", \"cassandra_table\",\n+            \"clusteringKeyPredicates\", \"\");\n+\n+    private static final Map<String, Object> TUPLE_DOMAIN_ALL_AS_MAP = ImmutableMap.of(\n+            \"columnDomains\", Collections.emptyList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDg3NDMzOnYy", "diffSide": "RIGHT", "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestJsonCassandraHandles.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxMzo0MTozMVrOGmmntg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxMzo0MTozMVrOGmmntg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMTgzMA==", "bodyText": "Static and replace the order with the above ObjectMapper.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Optional<List<CassandraPartition>> partitions = Optional.of(List.of(\n          \n          \n            \n                private static final Optional<List<CassandraPartition>> PARTITION = Optional.of(List.of(", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r443131830", "createdAt": "2020-06-20T13:41:31Z", "author": {"login": "ebyhr"}, "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestJsonCassandraHandles.java", "diffHunk": "@@ -55,6 +75,13 @@\n \n     private final ObjectMapper objectMapper = new ObjectMapperProvider().get();\n \n+    private final Optional<List<CassandraPartition>> partitions = Optional.of(List.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDg5MTk1OnYy", "diffSide": "RIGHT", "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/util/CassandraCqlUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxNDoxNTo1MVrOGmmw7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMjoyOTowN1rOGmwRsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNDE4OA==", "bodyText": "If we can use Cassandra's QueryBuilder to build clause, it worth to use the library. But StringBuilder looks sufficient and then we can avoid this hack.", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r443134188", "createdAt": "2020-06-20T14:15:51Z", "author": {"login": "ebyhr"}, "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/util/CassandraCqlUtils.java", "diffHunk": "@@ -121,4 +129,27 @@ public static Select selectDistinctFrom(CassandraTableHandle tableHandle, List<C\n     {\n         return from(select(columns).distinct(), tableHandle);\n     }\n+\n+    public static String getWhereClause(List<CassandraPartition> partitions, String clusteringKeyPredicates)\n+    {\n+        List<String> conditions = new ArrayList<>();\n+        for (CassandraPartition part : partitions) {\n+            conditions.add(part.getPartitionId());\n+        }\n+        if (!clusteringKeyPredicates.isEmpty()) {\n+            conditions.add(clusteringKeyPredicates);\n+        }\n+        return \" WHERE \" + String.join(\" AND \", conditions);\n+    }\n+\n+    public static String deleteFrom(CassandraTableHandle handle)\n+    {\n+        Delete delete = QueryBuilder.delete().from(handle.getSchemaName(), handle.getTableName());\n+        Optional<List<CassandraPartition>> opt = handle.getPartitions();\n+        List<CassandraPartition> partitions = opt.orElse(Collections.emptyList());\n+        String clause = getWhereClause(partitions, handle.getClusteringKeyPredicates());\n+        String cql = delete.getQueryString().replace(\";\", clause);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI5MDAzMw==", "bodyText": "I see. I will construct CQL with StringBuilder only.", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r443290033", "createdAt": "2020-06-22T02:29:07Z", "author": {"login": "t2y"}, "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/util/CassandraCqlUtils.java", "diffHunk": "@@ -121,4 +129,27 @@ public static Select selectDistinctFrom(CassandraTableHandle tableHandle, List<C\n     {\n         return from(select(columns).distinct(), tableHandle);\n     }\n+\n+    public static String getWhereClause(List<CassandraPartition> partitions, String clusteringKeyPredicates)\n+    {\n+        List<String> conditions = new ArrayList<>();\n+        for (CassandraPartition part : partitions) {\n+            conditions.add(part.getPartitionId());\n+        }\n+        if (!clusteringKeyPredicates.isEmpty()) {\n+            conditions.add(clusteringKeyPredicates);\n+        }\n+        return \" WHERE \" + String.join(\" AND \", conditions);\n+    }\n+\n+    public static String deleteFrom(CassandraTableHandle handle)\n+    {\n+        Delete delete = QueryBuilder.delete().from(handle.getSchemaName(), handle.getTableName());\n+        Optional<List<CassandraPartition>> opt = handle.getPartitions();\n+        List<CassandraPartition> partitions = opt.orElse(Collections.emptyList());\n+        String clause = getWhereClause(partitions, handle.getClusteringKeyPredicates());\n+        String cql = delete.getQueryString().replace(\";\", clause);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNDE4OA=="}, "originalCommit": null, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDg5MzMxOnYy", "diffSide": "RIGHT", "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/util/CassandraCqlUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxNDoxNzo1OFrOGmmxkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMjoyOTozM1rOGmwR_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNDM1Mw==", "bodyText": "Please move logging to caller side to focus the actual logic in util class.", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r443134353", "createdAt": "2020-06-20T14:17:58Z", "author": {"login": "ebyhr"}, "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/util/CassandraCqlUtils.java", "diffHunk": "@@ -121,4 +129,27 @@ public static Select selectDistinctFrom(CassandraTableHandle tableHandle, List<C\n     {\n         return from(select(columns).distinct(), tableHandle);\n     }\n+\n+    public static String getWhereClause(List<CassandraPartition> partitions, String clusteringKeyPredicates)\n+    {\n+        List<String> conditions = new ArrayList<>();\n+        for (CassandraPartition part : partitions) {\n+            conditions.add(part.getPartitionId());\n+        }\n+        if (!clusteringKeyPredicates.isEmpty()) {\n+            conditions.add(clusteringKeyPredicates);\n+        }\n+        return \" WHERE \" + String.join(\" AND \", conditions);\n+    }\n+\n+    public static String deleteFrom(CassandraTableHandle handle)\n+    {\n+        Delete delete = QueryBuilder.delete().from(handle.getSchemaName(), handle.getTableName());\n+        Optional<List<CassandraPartition>> opt = handle.getPartitions();\n+        List<CassandraPartition> partitions = opt.orElse(Collections.emptyList());\n+        String clause = getWhereClause(partitions, handle.getClusteringKeyPredicates());\n+        String cql = delete.getQueryString().replace(\";\", clause);\n+        log.debug(\"Created CQL: %s\", cql);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI5MDExMA==", "bodyText": "Got it.", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r443290110", "createdAt": "2020-06-22T02:29:33Z", "author": {"login": "t2y"}, "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/util/CassandraCqlUtils.java", "diffHunk": "@@ -121,4 +129,27 @@ public static Select selectDistinctFrom(CassandraTableHandle tableHandle, List<C\n     {\n         return from(select(columns).distinct(), tableHandle);\n     }\n+\n+    public static String getWhereClause(List<CassandraPartition> partitions, String clusteringKeyPredicates)\n+    {\n+        List<String> conditions = new ArrayList<>();\n+        for (CassandraPartition part : partitions) {\n+            conditions.add(part.getPartitionId());\n+        }\n+        if (!clusteringKeyPredicates.isEmpty()) {\n+            conditions.add(clusteringKeyPredicates);\n+        }\n+        return \" WHERE \" + String.join(\" AND \", conditions);\n+    }\n+\n+    public static String deleteFrom(CassandraTableHandle handle)\n+    {\n+        Delete delete = QueryBuilder.delete().from(handle.getSchemaName(), handle.getTableName());\n+        Optional<List<CassandraPartition>> opt = handle.getPartitions();\n+        List<CassandraPartition> partitions = opt.orElse(Collections.emptyList());\n+        String clause = getWhereClause(partitions, handle.getClusteringKeyPredicates());\n+        String cql = delete.getQueryString().replace(\";\", clause);\n+        log.debug(\"Created CQL: %s\", cql);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNDM1Mw=="}, "originalCommit": null, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDg5NDIyOnYy", "diffSide": "RIGHT", "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/util/CassandraCqlUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxNDoxOTo1NFrOGmmyBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMjoyNTo1M1rOGmwPXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNDQ3MA==", "bodyText": "No need to extract this method because it's simple and only used in deleteFrom.", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r443134470", "createdAt": "2020-06-20T14:19:54Z", "author": {"login": "ebyhr"}, "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/util/CassandraCqlUtils.java", "diffHunk": "@@ -121,4 +129,27 @@ public static Select selectDistinctFrom(CassandraTableHandle tableHandle, List<C\n     {\n         return from(select(columns).distinct(), tableHandle);\n     }\n+\n+    public static String getWhereClause(List<CassandraPartition> partitions, String clusteringKeyPredicates)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4OTQzOQ==", "bodyText": "OK. Got it.", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r443289439", "createdAt": "2020-06-22T02:25:53Z", "author": {"login": "t2y"}, "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/util/CassandraCqlUtils.java", "diffHunk": "@@ -121,4 +129,27 @@ public static Select selectDistinctFrom(CassandraTableHandle tableHandle, List<C\n     {\n         return from(select(columns).distinct(), tableHandle);\n     }\n+\n+    public static String getWhereClause(List<CassandraPartition> partitions, String clusteringKeyPredicates)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNDQ3MA=="}, "originalCommit": null, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjUxOTM3OnYy", "diffSide": "RIGHT", "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/CassandraMetadata.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzoxOTo1N1rOGm0nPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzoxOTo1N1rOGm0nPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MTA4NA==", "bodyText": "s/dummy/update_row_id", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r443361084", "createdAt": "2020-06-22T07:19:57Z", "author": {"login": "kokosing"}, "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/CassandraMetadata.java", "diffHunk": "@@ -369,4 +374,39 @@ private static boolean isHiddenIdColumn(CassandraColumnHandle columnHandle)\n     {\n         return columnHandle.isHidden() && ID_COLUMN_NAME.equals(columnHandle.getName());\n     }\n+\n+    @Override\n+    public ColumnHandle getUpdateRowIdColumnHandle(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        return new CassandraColumnHandle(\"$dummy\", 0, CassandraType.TEXT, false, false, false, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjUyMjI5OnYy", "diffSide": "RIGHT", "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/CassandraMetadata.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzoyMDo1NFrOGm0o-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzoyMDo1NFrOGm0o-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MTUyOA==", "bodyText": "s/PERMISSION_DENIED/NOT_SUPPORTED ?", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r443361528", "createdAt": "2020-06-22T07:20:54Z", "author": {"login": "kokosing"}, "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/CassandraMetadata.java", "diffHunk": "@@ -369,4 +374,39 @@ private static boolean isHiddenIdColumn(CassandraColumnHandle columnHandle)\n     {\n         return columnHandle.isHidden() && ID_COLUMN_NAME.equals(columnHandle.getName());\n     }\n+\n+    @Override\n+    public ColumnHandle getUpdateRowIdColumnHandle(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        return new CassandraColumnHandle(\"$dummy\", 0, CassandraType.TEXT, false, false, false, true);\n+    }\n+\n+    @Override\n+    public ConnectorTableHandle beginDelete(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        throw new PrestoException(NOT_SUPPORTED, \"This connector only supports delete with primary key or partition key\");\n+    }\n+\n+    @Override\n+    public Optional<ConnectorTableHandle> applyDelete(ConnectorSession session, ConnectorTableHandle handle)\n+    {\n+        return Optional.of(handle);\n+    }\n+\n+    @Override\n+    public OptionalLong executeDelete(ConnectorSession session, ConnectorTableHandle deleteHandle)\n+    {\n+        CassandraTableHandle handle = (CassandraTableHandle) deleteHandle;\n+        Optional<List<CassandraPartition>> partitions = handle.getPartitions();\n+        if (!partitions.isPresent()) {\n+            throw new PrestoException(PERMISSION_DENIED, \"Deleting without partition key is unsupported\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjUyMjQ2OnYy", "diffSide": "RIGHT", "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/CassandraMetadata.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzoyMDo1OFrOGm0pGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzoyMDo1OFrOGm0pGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MTU2Mw==", "bodyText": "s/PERMISSION_DENIED/NOT_SUPPORTED ?", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r443361563", "createdAt": "2020-06-22T07:20:58Z", "author": {"login": "kokosing"}, "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/CassandraMetadata.java", "diffHunk": "@@ -369,4 +374,39 @@ private static boolean isHiddenIdColumn(CassandraColumnHandle columnHandle)\n     {\n         return columnHandle.isHidden() && ID_COLUMN_NAME.equals(columnHandle.getName());\n     }\n+\n+    @Override\n+    public ColumnHandle getUpdateRowIdColumnHandle(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        return new CassandraColumnHandle(\"$dummy\", 0, CassandraType.TEXT, false, false, false, true);\n+    }\n+\n+    @Override\n+    public ConnectorTableHandle beginDelete(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        throw new PrestoException(NOT_SUPPORTED, \"This connector only supports delete with primary key or partition key\");\n+    }\n+\n+    @Override\n+    public Optional<ConnectorTableHandle> applyDelete(ConnectorSession session, ConnectorTableHandle handle)\n+    {\n+        return Optional.of(handle);\n+    }\n+\n+    @Override\n+    public OptionalLong executeDelete(ConnectorSession session, ConnectorTableHandle deleteHandle)\n+    {\n+        CassandraTableHandle handle = (CassandraTableHandle) deleteHandle;\n+        Optional<List<CassandraPartition>> partitions = handle.getPartitions();\n+        if (!partitions.isPresent()) {\n+            throw new PrestoException(PERMISSION_DENIED, \"Deleting without partition key is unsupported\");\n+        }\n+        if (partitions.get().isEmpty()) {\n+            throw new PrestoException(PERMISSION_DENIED, \"No data with the given condition\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjUyMzY0OnYy", "diffSide": "RIGHT", "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/CassandraMetadata.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzoyMToyM1rOGm0p4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNzo1MzozMVrOG-EiaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MTc2Mg==", "bodyText": "maybe logging should happen in CassandraSession?", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r443361762", "createdAt": "2020-06-22T07:21:23Z", "author": {"login": "kokosing"}, "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/CassandraMetadata.java", "diffHunk": "@@ -369,4 +374,39 @@ private static boolean isHiddenIdColumn(CassandraColumnHandle columnHandle)\n     {\n         return columnHandle.isHidden() && ID_COLUMN_NAME.equals(columnHandle.getName());\n     }\n+\n+    @Override\n+    public ColumnHandle getUpdateRowIdColumnHandle(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        return new CassandraColumnHandle(\"$dummy\", 0, CassandraType.TEXT, false, false, false, true);\n+    }\n+\n+    @Override\n+    public ConnectorTableHandle beginDelete(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        throw new PrestoException(NOT_SUPPORTED, \"This connector only supports delete with primary key or partition key\");\n+    }\n+\n+    @Override\n+    public Optional<ConnectorTableHandle> applyDelete(ConnectorSession session, ConnectorTableHandle handle)\n+    {\n+        return Optional.of(handle);\n+    }\n+\n+    @Override\n+    public OptionalLong executeDelete(ConnectorSession session, ConnectorTableHandle deleteHandle)\n+    {\n+        CassandraTableHandle handle = (CassandraTableHandle) deleteHandle;\n+        Optional<List<CassandraPartition>> partitions = handle.getPartitions();\n+        if (!partitions.isPresent()) {\n+            throw new PrestoException(PERMISSION_DENIED, \"Deleting without partition key is unsupported\");\n+        }\n+        if (partitions.get().isEmpty()) {\n+            throw new PrestoException(PERMISSION_DENIED, \"No data with the given condition\");\n+        }\n+        String cql = CassandraCqlUtils.deleteFrom(handle);\n+        log.debug(\"Delete statement: %s\", cql);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzczOTI0MQ==", "bodyText": "@t2y Logging in CassandraSession was added in other commits. Please remove and simplify these lines.\ncassandraSession.execute(deleteFrom(handle));", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r467739241", "createdAt": "2020-08-10T07:53:31Z", "author": {"login": "ebyhr"}, "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/CassandraMetadata.java", "diffHunk": "@@ -369,4 +374,39 @@ private static boolean isHiddenIdColumn(CassandraColumnHandle columnHandle)\n     {\n         return columnHandle.isHidden() && ID_COLUMN_NAME.equals(columnHandle.getName());\n     }\n+\n+    @Override\n+    public ColumnHandle getUpdateRowIdColumnHandle(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        return new CassandraColumnHandle(\"$dummy\", 0, CassandraType.TEXT, false, false, false, true);\n+    }\n+\n+    @Override\n+    public ConnectorTableHandle beginDelete(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        throw new PrestoException(NOT_SUPPORTED, \"This connector only supports delete with primary key or partition key\");\n+    }\n+\n+    @Override\n+    public Optional<ConnectorTableHandle> applyDelete(ConnectorSession session, ConnectorTableHandle handle)\n+    {\n+        return Optional.of(handle);\n+    }\n+\n+    @Override\n+    public OptionalLong executeDelete(ConnectorSession session, ConnectorTableHandle deleteHandle)\n+    {\n+        CassandraTableHandle handle = (CassandraTableHandle) deleteHandle;\n+        Optional<List<CassandraPartition>> partitions = handle.getPartitions();\n+        if (!partitions.isPresent()) {\n+            throw new PrestoException(PERMISSION_DENIED, \"Deleting without partition key is unsupported\");\n+        }\n+        if (partitions.get().isEmpty()) {\n+            throw new PrestoException(PERMISSION_DENIED, \"No data with the given condition\");\n+        }\n+        String cql = CassandraCqlUtils.deleteFrom(handle);\n+        log.debug(\"Delete statement: %s\", cql);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2MTc2Mg=="}, "originalCommit": null, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTcxODgwOnYy", "diffSide": "RIGHT", "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestCassandraConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMjoyOToyMFrOG2he0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMjoyOToyMFrOG2he0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgyNDg0OA==", "bodyText": "nit: Remove redundant String.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String partitionId = String.format(\"partition_one=%d AND partition_two=%d\", value1, value2);\n          \n          \n            \n                    String partitionId = format(\"partition_one=%d AND partition_two=%d\", value1, value2);", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r459824848", "createdAt": "2020-07-24T02:29:20Z", "author": {"login": "ebyhr"}, "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestCassandraConnector.java", "diffHunk": "@@ -267,4 +272,48 @@ private ConnectorTableHandle getTableHandle(SchemaTableName tableName)\n         }\n         return index.build();\n     }\n+\n+    @Test\n+    public void testExecuteDelete()\n+    {\n+        assertNumberOfRows(tableForDelete, 15);\n+        CassandraTableHandle handle1 = getTableHandle(Optional.of(\n+                List.of(createPartition(1, 1))), \"\");\n+        metadata.executeDelete(SESSION, handle1);\n+        assertNumberOfRows(tableForDelete, 12);\n+\n+        CassandraTableHandle handle2 = getTableHandle(Optional.of(\n+                List.of(createPartition(1, 2))), \"clust_one='clust_one_2'\");\n+        metadata.executeDelete(SESSION, handle2);\n+        assertNumberOfRows(tableForDelete, 11);\n+\n+        CassandraTableHandle handle3 = getTableHandle(Optional.of(\n+                List.of(createPartition(5, 5))), \"\");\n+        metadata.executeDelete(SESSION, handle3);\n+        assertNumberOfRows(tableForDelete, 10);\n+    }\n+\n+    private CassandraTableHandle getTableHandle(Optional<List<CassandraPartition>> partitions, String clusteringKeyPredicates)\n+    {\n+        CassandraTableHandle handle = (CassandraTableHandle) getTableHandle(tableForDelete);\n+        return new CassandraTableHandle(handle.getSchemaName(), handle.getTableName(), partitions, clusteringKeyPredicates);\n+    }\n+\n+    private CassandraPartition createPartition(long value1, long value2)\n+    {\n+        CassandraColumnHandle col1 = new CassandraColumnHandle(\"partition_one\", 1, CassandraType.BIGINT, true, false, false, false);\n+        CassandraColumnHandle col2 = new CassandraColumnHandle(\"partition_two\", 2, CassandraType.INT, true, false, false, false);\n+        TupleDomain<ColumnHandle> tupleDomain = TupleDomain.withColumnDomains(\n+                ImmutableMap.of(\n+                        col1, Domain.singleValue(BIGINT, value1),\n+                        col2, Domain.singleValue(INTEGER, value2)));\n+        String partitionId = String.format(\"partition_one=%d AND partition_two=%d\", value1, value2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjM2OTc1OnYy", "diffSide": "RIGHT", "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestJsonCassandraHandles.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwODoyNDoxNVrOG-Fb2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwODoyNDoxNVrOG-Fb2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc1Mzk0NQ==", "bodyText": "Please revert unrelated change or separate commit (the variable name should be uppercase).", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r467753945", "createdAt": "2020-08-10T08:24:15Z", "author": {"login": "ebyhr"}, "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestJsonCassandraHandles.java", "diffHunk": "@@ -53,7 +70,14 @@\n             .put(\"hidden\", false)\n             .build();\n \n-    private final ObjectMapper objectMapper = new ObjectMapperProvider().get();\n+    private static final ObjectMapper objectMapper = new ObjectMapperProvider().get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjQyMTc5OnYy", "diffSide": "RIGHT", "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestJsonCassandraHandles.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwODo0MDoyN1rOG-F6dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwODo0MDoyN1rOG-F6dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc2MTc4MA==", "bodyText": "Uppercase and move to before ObjectMapper.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Optional<List<CassandraPartition>> partitions = Optional.of(List.of(\n          \n          \n            \n                private static final Optional<List<CassandraPartition>> PARTITIONS = Optional.of(List.of(", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r467761780", "createdAt": "2020-08-10T08:40:27Z", "author": {"login": "ebyhr"}, "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestJsonCassandraHandles.java", "diffHunk": "@@ -53,7 +70,14 @@\n             .put(\"hidden\", false)\n             .build();\n \n-    private final ObjectMapper objectMapper = new ObjectMapperProvider().get();\n+    private static final ObjectMapper objectMapper = new ObjectMapperProvider().get();\n+\n+    private static final Optional<List<CassandraPartition>> partitions = Optional.of(List.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjgwMDA4OnYy", "diffSide": "RIGHT", "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/CassandraTestingUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMDozOToyNlrOG-Jbww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo0NzoxNlrOHJzp_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgxOTQ1OQ==", "bodyText": "Redundant concat \" + \".", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r467819459", "createdAt": "2020-08-10T10:39:26Z", "author": {"login": "ebyhr"}, "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/CassandraTestingUtils.java", "diffHunk": "@@ -248,4 +250,62 @@ private static void insertTestData(CassandraSession session, SchemaTableName tab\n         }\n         assertEquals(session.execute(\"SELECT COUNT(*) FROM \" + table).all().get(0).getLong(0), rowsCount);\n     }\n+\n+    private static void createTableDeleteData(CassandraSession session, SchemaTableName table)\n+    {\n+        session.execute(\"DROP TABLE IF EXISTS \" + table);\n+        session.execute(\"CREATE TABLE \" + table + \" (\" +\n+                \"partition_one bigint, \" +\n+                \"partition_two int, \" +\n+                \"clust_one text, \" +\n+                \"data text, \" +\n+                \"PRIMARY KEY((partition_one, partition_two), clust_one) \" + \")\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA0NTU2NA==", "bodyText": "Looking around other test code, the format is like this.\nsession.execute(\"CREATE TABLE \" + table + \" (\" +\n        ...\n        \"data text, \" +\n        \"PRIMARY KEY((partition_one, partition_two), clust_one, clust_two, clust_three) \" +\n        \")\");", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r480045564", "createdAt": "2020-08-31T10:47:16Z", "author": {"login": "t2y"}, "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/CassandraTestingUtils.java", "diffHunk": "@@ -248,4 +250,62 @@ private static void insertTestData(CassandraSession session, SchemaTableName tab\n         }\n         assertEquals(session.execute(\"SELECT COUNT(*) FROM \" + table).all().get(0).getLong(0), rowsCount);\n     }\n+\n+    private static void createTableDeleteData(CassandraSession session, SchemaTableName table)\n+    {\n+        session.execute(\"DROP TABLE IF EXISTS \" + table);\n+        session.execute(\"CREATE TABLE \" + table + \" (\" +\n+                \"partition_one bigint, \" +\n+                \"partition_two int, \" +\n+                \"clust_one text, \" +\n+                \"data text, \" +\n+                \"PRIMARY KEY((partition_one, partition_two), clust_one) \" + \")\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgxOTQ1OQ=="}, "originalCommit": null, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjgxMjgyOnYy", "diffSide": "RIGHT", "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/CassandraTestingUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMDo0Mzo1M1rOG-JjWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMDo0Mzo1M1rOG-JjWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgyMTQwMA==", "bodyText": "Please reorder the data.\n                         1 |             1 | clust_one_1 | null\n                         1 |             1 | clust_one_2 | null\n                         1 |             1 | clust_one_3 | null\n                         1 |             2 | clust_one_1 | null\n                         1 |             2 | clust_one_2 | null\n                         1 |             2 | clust_one_3 | null\n                         2 |             2 | clust_one_1 | null\n                         2 |             2 | clust_one_2 | null\n                         3 |             3 | clust_one_3 | null\n                         4 |             4 | clust_one_4 | null\n                         5 |             5 | clust_one_5 | null\n                         6 |             6 | clust_one_6 | null\n                         7 |             7 | clust_one_7 | null\n                         8 |             8 | clust_one_8 | null\n                         9 |             9 | clust_one_9 | null", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r467821400", "createdAt": "2020-08-10T10:43:53Z", "author": {"login": "ebyhr"}, "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/CassandraTestingUtils.java", "diffHunk": "@@ -248,4 +250,62 @@ private static void insertTestData(CassandraSession session, SchemaTableName tab\n         }\n         assertEquals(session.execute(\"SELECT COUNT(*) FROM \" + table).all().get(0).getLong(0), rowsCount);\n     }\n+\n+    private static void createTableDeleteData(CassandraSession session, SchemaTableName table)\n+    {\n+        session.execute(\"DROP TABLE IF EXISTS \" + table);\n+        session.execute(\"CREATE TABLE \" + table + \" (\" +\n+                \"partition_one bigint, \" +\n+                \"partition_two int, \" +\n+                \"clust_one text, \" +\n+                \"data text, \" +\n+                \"PRIMARY KEY((partition_one, partition_two), clust_one) \" + \")\");\n+        insertIntoTableDeleteData(session, table);\n+    }\n+\n+    private static void insertIntoTableDeleteData(CassandraSession session, SchemaTableName table)\n+    {\n+        /*   This function inserts data (15 records) as below.\n+             partition_one | partition_two | clust_one   | data\n+            ---------------+---------------+-------------+------\n+                         1 |             2 | clust_one_1 | null\n+                         1 |             2 | clust_one_2 | null\n+                         1 |             2 | clust_one_3 | null\n+                         2 |             2 | clust_one_1 | null\n+                         2 |             2 | clust_one_2 | null\n+                         1 |             1 | clust_one_1 | null\n+                         1 |             1 | clust_one_2 | null\n+                         1 |             1 | clust_one_3 | null\n+                         5 |             5 | clust_one_5 | null\n+                         8 |             8 | clust_one_8 | null\n+                         6 |             6 | clust_one_6 | null\n+                         4 |             4 | clust_one_4 | null\n+                         9 |             9 | clust_one_9 | null\n+                         3 |             3 | clust_one_3 | null\n+                         7 |             7 | clust_one_7 | null", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5OTU3MzIwOnYy", "diffSide": "RIGHT", "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestJsonCassandraHandles.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxMTo1MToxNlrOHJiPKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxMTo1MToxNlrOHJiPKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc2MDE3MQ==", "bodyText": "L97 & 129 is also the same.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"clusteringKeyPredicates\", \"clusteringKey1 == 33\");\n          \n          \n            \n                        \"clusteringKeyPredicates\", \"clusteringKey1 = 33\");", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r479760171", "createdAt": "2020-08-30T11:51:16Z", "author": {"login": "ebyhr"}, "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestJsonCassandraHandles.java", "diffHunk": "@@ -31,7 +36,19 @@\n {\n     private static final Map<String, Object> TABLE_HANDLE_AS_MAP = ImmutableMap.of(\n             \"schemaName\", \"cassandra_schema\",\n-            \"tableName\", \"cassandra_table\");\n+            \"tableName\", \"cassandra_table\",\n+            \"clusteringKeyPredicates\", \"\");\n+\n+    private static final Map<String, Object> TABLE2_HANDLE_AS_MAP = ImmutableMap.of(\n+            \"schemaName\", \"cassandra_schema\",\n+            \"tableName\", \"cassandra_table\",\n+            \"partitions\", List.of(\n+                    ImmutableMap.of(\n+                            \"key\", \"a2V5\",\n+                            \"partitionId\", \"partitionKey1 = 11 AND partitionKey2 = 22\",\n+                            \"tupleDomain\", ImmutableMap.of(\"columnDomains\", Collections.emptyList()),\n+                            \"indexedColumnPredicatePushdown\", true)),\n+            \"clusteringKeyPredicates\", \"clusteringKey1 == 33\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5OTU3NDU4OnYy", "diffSide": "RIGHT", "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestCassandraIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxMTo1MzoxMVrOHJiP2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxMTo1MzoxMVrOHJiP2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc2MDM0NQ==", "bodyText": "nit : No need to wrap. L658 is also.", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r479760345", "createdAt": "2020-08-30T11:53:11Z", "author": {"login": "ebyhr"}, "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestCassandraIntegrationSmokeTest.java", "diffHunk": "@@ -630,6 +632,34 @@ public void testInsert()\n                 \"key3\", null, 999, null, null, null, \"ansi\", false, null, null, null, null, null, null, null, null, null, null));\n     }\n \n+    @Test\n+    public void testDelete()\n+    {\n+        String keyspaceAndTable = format(\"%s.%s\", KEYSPACE, TABLE_DELETE_DATA);\n+        assertEquals(execute(\"SELECT * FROM \" + keyspaceAndTable).getRowCount(), 15);\n+\n+        // success\n+        String wherePrimaryKey = \" WHERE partition_one=1 AND partition_two=1 AND clust_one='clust_one_1'\";\n+        execute(\"DELETE FROM \" + keyspaceAndTable + wherePrimaryKey);\n+        assertEquals(execute(\"SELECT * FROM \" + keyspaceAndTable).getRowCount(), 14);\n+        assertEquals(execute(\"SELECT * FROM \" + keyspaceAndTable + wherePrimaryKey).getRowCount(), 0);\n+\n+        String wherePartitionKey = \" WHERE partition_one=1 AND partition_two=2\";\n+        execute(\"DELETE FROM \" + keyspaceAndTable + wherePartitionKey);\n+        assertEquals(execute(\"SELECT * FROM \" + keyspaceAndTable).getRowCount(), 11);\n+        assertEquals(execute(\"SELECT * FROM \" + keyspaceAndTable + wherePartitionKey).getRowCount(), 0);\n+\n+        // error\n+        assertThrows(\n+                () -> execute(\"DELETE FROM \" + keyspaceAndTable));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5OTU3NTgwOnYy", "diffSide": "RIGHT", "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestCassandraConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxMTo1NDozN1rOHJiQeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxMTo1NDozN1rOHJiQeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc2MDUwNQ==", "bodyText": "Move to after testGetRecords method.", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r479760505", "createdAt": "2020-08-30T11:54:37Z", "author": {"login": "ebyhr"}, "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestCassandraConnector.java", "diffHunk": "@@ -267,4 +272,48 @@ private ConnectorTableHandle getTableHandle(SchemaTableName tableName)\n         }\n         return index.build();\n     }\n+\n+    @Test\n+    public void testExecuteDelete()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5OTU4MTgzOnYy", "diffSide": "RIGHT", "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestCassandraConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxMjowMTozN1rOHJiTWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxMjowMTozN1rOHJiTWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc2MTI0MA==", "bodyText": "nit: No need to wrap. Following block is also the same.", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r479761240", "createdAt": "2020-08-30T12:01:37Z", "author": {"login": "ebyhr"}, "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestCassandraConnector.java", "diffHunk": "@@ -267,4 +272,48 @@ private ConnectorTableHandle getTableHandle(SchemaTableName tableName)\n         }\n         return index.build();\n     }\n+\n+    @Test\n+    public void testExecuteDelete()\n+    {\n+        assertNumberOfRows(tableForDelete, 15);\n+        CassandraTableHandle handle1 = getTableHandle(Optional.of(\n+                List.of(createPartition(1, 1))), \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTk4NDg5OnYy", "diffSide": "RIGHT", "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestJsonCassandraHandles.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNzo0MDoyOFrOHNgWDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNzo0MDoyOFrOHNgWDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkyMzQ2OA==", "bodyText": "reminder: Please separate a commit when squashing commits.", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r483923468", "createdAt": "2020-09-05T07:40:28Z", "author": {"login": "ebyhr"}, "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestJsonCassandraHandles.java", "diffHunk": "@@ -53,30 +70,63 @@\n             .put(\"hidden\", false)\n             .build();\n \n-    private final ObjectMapper objectMapper = new ObjectMapperProvider().get();\n+    private static final Optional<List<CassandraPartition>> PARTITIONS = Optional.of(List.of(\n+            new CassandraPartition(\n+                    \"key\".getBytes(UTF_8),\n+                    \"partitionKey1 = 11 AND partitionKey2 = 22\",\n+                    TupleDomain.all(),\n+                    true)));\n+\n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapperProvider().get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTk5NDYyOnYy", "diffSide": "RIGHT", "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/util/CassandraCqlUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNzo1NjoxOVrOHNgaeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwNzo1NjoxOVrOHNgaeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkyNDYwMQ==", "bodyText": "Could you simplify like this?\n    private static String getWhereCondition(String partitionId, String clusteringKeyPredicates)\n    {\n...\n        return String.join(\" AND \", conditions);\n    }\n\n    private static String deleteFrom(String schemaName, String tableName, CassandraPartition partition, String clusteringKeyPredicates)\n    {\n        return format(\"DELETE FROM \\\"%s\\\".\\\"%s\\\" WHERE %s\",\n                schemaName, tableName, getWhereCondition(partition.getPartitionId(), clusteringKeyPredicates));\n    }", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r483924601", "createdAt": "2020-09-05T07:56:19Z", "author": {"login": "ebyhr"}, "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/util/CassandraCqlUtils.java", "diffHunk": "@@ -121,4 +124,31 @@ public static Select selectDistinctFrom(CassandraTableHandle tableHandle, List<C\n     {\n         return from(select(columns).distinct(), tableHandle);\n     }\n+\n+    private static String getWhereClause(CassandraPartition partition, String clusteringKeyPredicates)\n+    {\n+        List<String> conditions = new ArrayList<>();\n+        conditions.add(partition.getPartitionId());\n+        if (!clusteringKeyPredicates.isEmpty()) {\n+            conditions.add(clusteringKeyPredicates);\n+        }\n+        return \" WHERE \" + String.join(\" AND \", conditions);\n+    }\n+\n+    private static String deleteFrom(String schemaName, String tableName, CassandraPartition partition, String clusteringKeyPredicates)\n+    {\n+        StringBuilder queryBuilder = new StringBuilder();\n+        queryBuilder.append(format(\"DELETE FROM \\\"%s\\\".\\\"%s\\\"\", schemaName, tableName));\n+        queryBuilder.append(getWhereClause(partition, clusteringKeyPredicates));\n+        return queryBuilder.toString();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjAxMjY4OnYy", "diffSide": "RIGHT", "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/CassandraMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwODoyNDoxNlrOHNgi2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwODoyNDoxNlrOHNgi2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkyNjc0Nw==", "bodyText": "Remove unused variable.", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r483926747", "createdAt": "2020-09-05T08:24:16Z", "author": {"login": "ebyhr"}, "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/CassandraMetadata.java", "diffHunk": "@@ -68,6 +71,8 @@\n {\n     public static final String PRESTO_COMMENT_METADATA = \"Presto Metadata:\";\n \n+    private static final Logger log = Logger.get(CassandraMetadata.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0OTY3MTg1OnYy", "diffSide": "RIGHT", "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestCassandraIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QwNTozOTozOFrOHQ5sZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMzowNzoyMFrOHSA6jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ4NDUxOA==", "bodyText": "nit: Reorder the case likes positive \u2192 negative.", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r487484518", "createdAt": "2020-09-13T05:39:38Z", "author": {"login": "ebyhr"}, "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestCassandraIntegrationSmokeTest.java", "diffHunk": "@@ -629,6 +631,43 @@ public void testInsert()\n                 \"key3\", null, 999, null, null, null, \"ansi\", false, null, null, null, null, null, null, null, null, null, null));\n     }\n \n+    @Test\n+    public void testDelete()\n+    {\n+        String keyspaceAndTable = format(\"%s.%s\", KEYSPACE, TABLE_DELETE_DATA);\n+        assertEquals(execute(\"SELECT * FROM \" + keyspaceAndTable).getRowCount(), 15);\n+\n+        // error", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY1MTQwNQ==", "bodyText": "Because there are deleting row tests and the successful test cases delete test data for error cases. So, I do tests for error cases first.", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r488651405", "createdAt": "2020-09-15T13:07:20Z", "author": {"login": "t2y"}, "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestCassandraIntegrationSmokeTest.java", "diffHunk": "@@ -629,6 +631,43 @@ public void testInsert()\n                 \"key3\", null, 999, null, null, null, \"ansi\", false, null, null, null, null, null, null, null, null, null, null));\n     }\n \n+    @Test\n+    public void testDelete()\n+    {\n+        String keyspaceAndTable = format(\"%s.%s\", KEYSPACE, TABLE_DELETE_DATA);\n+        assertEquals(execute(\"SELECT * FROM \" + keyspaceAndTable).getRowCount(), 15);\n+\n+        // error", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ4NDUxOA=="}, "originalCommit": null, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0OTY4MDg3OnYy", "diffSide": "RIGHT", "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/util/CassandraCqlUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QwNTo1Mjo0OVrOHQ5wdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QwNTo1Mjo0OVrOHQ5wdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ4NTU1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static List<String> getDeleteQueries(CassandraTableHandle handle)\n          \n          \n            \n                {\n          \n          \n            \n                    List<String> queries = new ArrayList<>();\n          \n          \n            \n                    for (CassandraPartition partition : handle.getPartitions().get()) {\n          \n          \n            \n                        queries.add(deleteFrom(handle.getSchemaName(), handle.getTableName(), partition, handle.getClusteringKeyPredicates()));\n          \n          \n            \n                    }\n          \n          \n            \n                    return queries;\n          \n          \n            \n                }\n          \n          \n            \n                public static List<String> getDeleteQueries(CassandraTableHandle handle)\n          \n          \n            \n                {\n          \n          \n            \n                    ImmutableList.Builder<String> queries = ImmutableList.builder();\n          \n          \n            \n                    for (CassandraPartition partition : handle.getPartitions().orElse(ImmutableList.of())) {\n          \n          \n            \n                        queries.add(deleteFrom(handle.getSchemaName(), handle.getTableName(), partition.getPartitionId(), handle.getClusteringKeyPredicates()));\n          \n          \n            \n                    }\n          \n          \n            \n                    return queries.build();\n          \n          \n            \n                }", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r487485556", "createdAt": "2020-09-13T05:52:49Z", "author": {"login": "ebyhr"}, "path": "presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/util/CassandraCqlUtils.java", "diffHunk": "@@ -121,4 +124,31 @@ public static Select selectDistinctFrom(CassandraTableHandle tableHandle, List<C\n     {\n         return from(select(columns).distinct(), tableHandle);\n     }\n+\n+    private static String getWhereClause(CassandraPartition partition, String clusteringKeyPredicates)\n+    {\n+        List<String> conditions = new ArrayList<>();\n+        conditions.add(partition.getPartitionId());\n+        if (!clusteringKeyPredicates.isEmpty()) {\n+            conditions.add(clusteringKeyPredicates);\n+        }\n+        return \" WHERE \" + String.join(\" AND \", conditions);\n+    }\n+\n+    private static String deleteFrom(String schemaName, String tableName, CassandraPartition partition, String clusteringKeyPredicates)\n+    {\n+        StringBuilder queryBuilder = new StringBuilder();\n+        queryBuilder.append(format(\"DELETE FROM \\\"%s\\\".\\\"%s\\\"\", schemaName, tableName));\n+        queryBuilder.append(getWhereClause(partition, clusteringKeyPredicates));\n+        return queryBuilder.toString();\n+    }\n+\n+    public static List<String> getDeleteQueries(CassandraTableHandle handle)\n+    {\n+        List<String> queries = new ArrayList<>();\n+        for (CassandraPartition partition : handle.getPartitions().get()) {\n+            queries.add(deleteFrom(handle.getSchemaName(), handle.getTableName(), partition, handle.getClusteringKeyPredicates()));\n+        }\n+        return queries;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0OTY4MzM0OnYy", "diffSide": "RIGHT", "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/CassandraTestingUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QwNTo1NjozNVrOHQ5xlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QwNTo1NjozNVrOHQ5xlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ4NTg0NA==", "bodyText": "nit: long \u2192 int", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r487485844", "createdAt": "2020-09-13T05:56:35Z", "author": {"login": "ebyhr"}, "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/CassandraTestingUtils.java", "diffHunk": "@@ -248,4 +250,63 @@ private static void insertTestData(CassandraSession session, SchemaTableName tab\n         }\n         assertEquals(session.execute(\"SELECT COUNT(*) FROM \" + table).all().get(0).getLong(0), rowsCount);\n     }\n+\n+    private static void createTableDeleteData(CassandraSession session, SchemaTableName table)\n+    {\n+        session.execute(\"DROP TABLE IF EXISTS \" + table);\n+        session.execute(\"CREATE TABLE \" + table + \" (\" +\n+                \"partition_one bigint, \" +\n+                \"partition_two int, \" +\n+                \"clust_one text, \" +\n+                \"data text, \" +\n+                \"PRIMARY KEY((partition_one, partition_two), clust_one) \" +\n+                \")\");\n+        insertIntoTableDeleteData(session, table);\n+    }\n+\n+    private static void insertIntoTableDeleteData(CassandraSession session, SchemaTableName table)\n+    {\n+        /*   This function inserts data (15 records) as below.\n+             partition_one | partition_two | clust_one   | data\n+            ---------------+---------------+-------------+------\n+                         1 |             1 | clust_one_1 | null\n+                         1 |             1 | clust_one_2 | null\n+                         1 |             1 | clust_one_3 | null\n+                         1 |             2 | clust_one_1 | null\n+                         1 |             2 | clust_one_2 | null\n+                         1 |             2 | clust_one_3 | null\n+                         2 |             2 | clust_one_1 | null\n+                         2 |             2 | clust_one_2 | null\n+                         3 |             3 | clust_one_3 | null\n+                         4 |             4 | clust_one_4 | null\n+                         5 |             5 | clust_one_5 | null\n+                         6 |             6 | clust_one_6 | null\n+                         7 |             7 | clust_one_7 | null\n+                         8 |             8 | clust_one_8 | null\n+                         9 |             9 | clust_one_9 | null\n+         */\n+        for (long rowNumber = 1; rowNumber < 10; rowNumber++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0OTY4NDg3OnYy", "diffSide": "RIGHT", "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestCassandraConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QwNTo1ODo0MFrOHQ5ySA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QwNTo1ODo0MFrOHQ5ySA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ4NjAyNA==", "bodyText": "Avoid abbreviation:\ncol1 \u2192 column1\ncol2 \u2192 column2", "url": "https://github.com/trinodb/trino/pull/4059#discussion_r487486024", "createdAt": "2020-09-13T05:58:40Z", "author": {"login": "ebyhr"}, "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestCassandraConnector.java", "diffHunk": "@@ -269,4 +291,28 @@ private ConnectorTableHandle getTableHandle(SchemaTableName tableName)\n         }\n         return index.build();\n     }\n+\n+    private CassandraTableHandle getTableHandle(Optional<List<CassandraPartition>> partitions, String clusteringKeyPredicates)\n+    {\n+        CassandraTableHandle handle = (CassandraTableHandle) getTableHandle(tableForDelete);\n+        return new CassandraTableHandle(handle.getSchemaName(), handle.getTableName(), partitions, clusteringKeyPredicates);\n+    }\n+\n+    private CassandraPartition createPartition(long value1, long value2)\n+    {\n+        CassandraColumnHandle col1 = new CassandraColumnHandle(\"partition_one\", 1, CassandraType.BIGINT, true, false, false, false);\n+        CassandraColumnHandle col2 = new CassandraColumnHandle(\"partition_two\", 2, CassandraType.INT, true, false, false, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4102, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}