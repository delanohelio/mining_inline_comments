{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MzkyNjE3", "number": 3496, "title": "Minor cleanups in planner", "bodyText": "The decision of how unnest expressions map to output fields\nis now determined by the analyzer. Doing this in the planner\nduplicates effort and is brittle.", "createdAt": "2020-04-21T01:54:46Z", "url": "https://github.com/trinodb/trino/pull/3496", "merged": true, "mergeCommit": {"oid": "69f8c05c6b2ae750d45bbcf0849557f440dd28a0"}, "closed": true, "closedAt": "2020-04-28T21:36:09Z", "author": {"login": "martint"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZ6bzVgFqTM5NzU3NDI4Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABccJR8_gFqTQwMjE1NjU0Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NTc0Mjg3", "url": "https://github.com/trinodb/trino/pull/3496#pullrequestreview-397574287", "createdAt": "2020-04-21T18:38:38Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODozODozOFrOGJS3gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxOTo0Njo1NFrOGJVjig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM5OTQ4OA==", "bodyText": "mappings values are mutable lists. Maybe make immutable copies or use ImmutableListMultimap instead?", "url": "https://github.com/trinodb/trino/pull/3496#discussion_r412399488", "createdAt": "2020-04-21T18:38:38Z", "author": {"login": "kasiafi"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/Analysis.java", "diffHunk": "@@ -987,6 +999,28 @@ public GroupingSetAnalysis(\n         }\n     }\n \n+    public static class UnnestAnalysis\n+    {\n+        private final Map<NodeRef<Expression>, List<Field>> mappings;\n+        private final Optional<Field> ordinalityField;\n+\n+        public UnnestAnalysis(Map<NodeRef<Expression>, List<Field>> mappings, Optional<Field> ordinalityField)\n+        {\n+            this.mappings = requireNonNull(mappings, \"mappings is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQxNjMxNg==", "bodyText": "You could use analysis.getOutputDescriptor(node) instead of analysis.getScope(node).getRelationType()", "url": "https://github.com/trinodb/trino/pull/3496#discussion_r412416316", "createdAt": "2020-04-21T19:03:57Z", "author": {"login": "kasiafi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/RelationPlanner.java", "diffHunk": "@@ -715,16 +668,48 @@ else if (type instanceof MapType) {\n             }\n         }\n \n+        return planUnnest(\n+                initializePlanBuilder(leftPlan),\n+                node,\n+                leftPlan.getRoot().getOutputSymbols(),\n+                filterExpression,\n+                joinNode.getType(),\n+                analysis.getScope(joinNode));\n+    }\n+\n+    private RelationPlan planUnnest(PlanBuilder subPlan, Unnest node, List<Symbol> replicatedColumns, Optional<Expression> filter, Join.Type type, Scope outputScope)\n+    {\n+        subPlan = subPlan.appendProjections(node.getExpressions(), symbolAllocator, idAllocator);\n+\n+        Map<Field, Symbol> allocations = analysis.getScope(node)\n+                .getRelationType()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ0MzUzMA==", "bodyText": "The parameter replicatedColumns defined as leftPlan.getRoot().getOutputSymbols() is not equivalent to leftPlan.getFieldMappings(), used here before the change. But it seems correct. Should we consider it a fix?", "url": "https://github.com/trinodb/trino/pull/3496#discussion_r412443530", "createdAt": "2020-04-21T19:46:54Z", "author": {"login": "kasiafi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/RelationPlanner.java", "diffHunk": "@@ -715,16 +668,48 @@ else if (type instanceof MapType) {\n             }\n         }\n \n+        return planUnnest(\n+                initializePlanBuilder(leftPlan),\n+                node,\n+                leftPlan.getRoot().getOutputSymbols(),\n+                filterExpression,\n+                joinNode.getType(),\n+                analysis.getScope(joinNode));\n+    }\n+\n+    private RelationPlan planUnnest(PlanBuilder subPlan, Unnest node, List<Symbol> replicatedColumns, Optional<Expression> filter, Join.Type type, Scope outputScope)\n+    {\n+        subPlan = subPlan.appendProjections(node.getExpressions(), symbolAllocator, idAllocator);\n+\n+        Map<Field, Symbol> allocations = analysis.getScope(node)\n+                .getRelationType()\n+                .getVisibleFields().stream()\n+                .collect(toImmutableMap(Function.identity(), symbolAllocator::newSymbol));\n+\n+        UnnestAnalysis unnestAnalysis = analysis.getUnnest(node);\n+        ImmutableMap.Builder<Symbol, List<Symbol>> mappings = ImmutableMap.builder();\n+        for (Expression expression : node.getExpressions()) {\n+            Symbol input = subPlan.translate(expression);\n+            List<Symbol> outputs = unnestAnalysis.getMappings().get(NodeRef.of(expression)).stream()\n+                    .map(allocations::get)\n+                    .collect(toImmutableList());\n+\n+            mappings.put(input, outputs);\n+        }\n+\n         UnnestNode unnestNode = new UnnestNode(\n                 idAllocator.getNextId(),\n-                projectNode,\n-                leftPlan.getFieldMappings(),\n-                unnestSymbols.build(),\n-                ordinalitySymbol,\n-                JoinNode.Type.typeConvert(joinNode.getType()),\n-                filterExpression);\n-\n-        return new RelationPlan(unnestNode, analysis.getScope(joinNode), unnestNode.getOutputSymbols());\n+                subPlan.getRoot(),\n+                replicatedColumns,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 134}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbd40a97af84667f57af446930384db8eb444f94", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/bbd40a97af84667f57af446930384db8eb444f94", "committedDate": "2020-04-27T17:11:17Z", "message": "Clean up planning of unnest\n\nThe decision of how unnest expressions map to output fields\nis now determined by the analyzer. Doing this in the planner\nduplicates effort and is brittle."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "bbd40a97af84667f57af446930384db8eb444f94", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/bbd40a97af84667f57af446930384db8eb444f94", "committedDate": "2020-04-27T17:11:17Z", "message": "Clean up planning of unnest\n\nThe decision of how unnest expressions map to output fields\nis now determined by the analyzer. Doing this in the planner\nduplicates effort and is brittle."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMzA1MjI4", "url": "https://github.com/trinodb/trino/pull/3496#pullrequestreview-401305228", "createdAt": "2020-04-27T20:34:28Z", "commit": {"oid": "bbd40a97af84667f57af446930384db8eb444f94"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMTU2NTQy", "url": "https://github.com/trinodb/trino/pull/3496#pullrequestreview-402156542", "createdAt": "2020-04-28T19:44:43Z", "commit": {"oid": "bbd40a97af84667f57af446930384db8eb444f94"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1599, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}