{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNDM4NjM5", "number": 2956, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMToyODoxN1rODjP4mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMTo0NToxNVrODjQNpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mjg3MDAyOnYy", "diffSide": "LEFT", "path": "presto-phoenix/src/test/java/io/prestosql/plugin/phoenix/TestPhoenixIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMToyODoxN1rOFu86lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjozNDozNlrOFu-4sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3Njg1NA==", "bodyText": "the related issue is not fixed.", "url": "https://github.com/trinodb/trino/pull/2956#discussion_r384776854", "createdAt": "2020-02-26T21:28:17Z", "author": {"login": "findepi"}, "path": "presto-phoenix/src/test/java/io/prestosql/plugin/phoenix/TestPhoenixIntegrationSmokeTest.java", "diffHunk": "@@ -157,12 +157,6 @@ public void testCreateSchema()\n         throw new SkipException(\"test disabled until issue fixed\"); // TODO https://github.com/prestosql/presto/issues/2348\n     }\n \n-    @Override\n-    public void testDropSchema()\n-    {\n-        throw new SkipException(\"test disabled until issue fixed\"); // TODO https://github.com/prestosql/presto/issues/2348", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgwOTEzNw==", "bodyText": "This is moved to TestPhoenixDistributedQueries", "url": "https://github.com/trinodb/trino/pull/2956#discussion_r384809137", "createdAt": "2020-02-26T22:34:36Z", "author": {"login": "electrum"}, "path": "presto-phoenix/src/test/java/io/prestosql/plugin/phoenix/TestPhoenixIntegrationSmokeTest.java", "diffHunk": "@@ -157,12 +157,6 @@ public void testCreateSchema()\n         throw new SkipException(\"test disabled until issue fixed\"); // TODO https://github.com/prestosql/presto/issues/2348\n     }\n \n-    @Override\n-    public void testDropSchema()\n-    {\n-        throw new SkipException(\"test disabled until issue fixed\"); // TODO https://github.com/prestosql/presto/issues/2348", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3Njg1NA=="}, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mjg3MjgxOnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/BaseJdbcClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMToyOTowN1rOFu88bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMDowODozNVrOFvA61A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3NzMyNA==", "bodyText": "Do we need any access control checks for this?", "url": "https://github.com/trinodb/trino/pull/2956#discussion_r384777324", "createdAt": "2020-02-26T21:29:07Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -816,6 +816,17 @@ public void createSchema(JdbcIdentity identity, String schemaName)\n         }\n     }\n \n+    @Override\n+    public void dropSchema(JdbcIdentity identity, String schemaName)\n+    {\n+        try (Connection connection = connectionFactory.openConnection(identity)) {\n+            execute(connection, \"DROP SCHEMA \" + quoted(schemaName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgwMzAzNg==", "bodyText": "Access control is handled by the engine (see DropSchemaTask)", "url": "https://github.com/trinodb/trino/pull/2956#discussion_r384803036", "createdAt": "2020-02-26T22:21:03Z", "author": {"login": "dain"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -816,6 +816,17 @@ public void createSchema(JdbcIdentity identity, String schemaName)\n         }\n     }\n \n+    @Override\n+    public void dropSchema(JdbcIdentity identity, String schemaName)\n+    {\n+        try (Connection connection = connectionFactory.openConnection(identity)) {\n+            execute(connection, \"DROP SCHEMA \" + quoted(schemaName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3NzMyNA=="}, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0MjQ1Mg==", "bodyText": "We have a legacy check for allowDropTable, which should be removed. Dropping a schema should be safe since databases require the schema to be empty (unless called with CASCADE which we don't use).", "url": "https://github.com/trinodb/trino/pull/2956#discussion_r384842452", "createdAt": "2020-02-27T00:08:35Z", "author": {"login": "electrum"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -816,6 +816,17 @@ public void createSchema(JdbcIdentity identity, String schemaName)\n         }\n     }\n \n+    @Override\n+    public void dropSchema(JdbcIdentity identity, String schemaName)\n+    {\n+        try (Connection connection = connectionFactory.openConnection(identity)) {\n+            execute(connection, \"DROP SCHEMA \" + quoted(schemaName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3NzMyNA=="}, "originalCommit": null, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mjg3MzMwOnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/CreateAsSelectDataSetup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMToyOToxN1rOFu88vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMDoxMDo1N1rOFvA9sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3NzQwNA==", "bodyText": "i dont think it's needed", "url": "https://github.com/trinodb/trino/pull/2956#discussion_r384777404", "createdAt": "2020-02-26T21:29:17Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/CreateAsSelectDataSetup.java", "diffHunk": "@@ -45,7 +45,12 @@ public TestTable setupTestTable(List<DataTypeTest.Input<?>> inputs)\n         Stream<String> columnValuesWithNames = range(0, columnValues.size())\n                 .mapToObj(i -> format(\"%s col_%d\", columnValues.get(i), i));\n         String selectBody = Joiner.on(\",\\n\").join(columnValuesWithNames.iterator());\n-        return new TestTable(sqlExecutor, tableNamePrefix, \"AS SELECT \" + selectBody);\n+        return new TestTable(sqlExecutor, tableNamePrefix, getTableDefinition(selectBody));\n+    }\n+\n+    protected String getTableDefinition(String selectBody)\n+    {\n+        return \"AS SELECT \" + selectBody;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0MzE4Nw==", "bodyText": "Removed", "url": "https://github.com/trinodb/trino/pull/2956#discussion_r384843187", "createdAt": "2020-02-27T00:10:57Z", "author": {"login": "electrum"}, "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/CreateAsSelectDataSetup.java", "diffHunk": "@@ -45,7 +45,12 @@ public TestTable setupTestTable(List<DataTypeTest.Input<?>> inputs)\n         Stream<String> columnValuesWithNames = range(0, columnValues.size())\n                 .mapToObj(i -> format(\"%s col_%d\", columnValues.get(i), i));\n         String selectBody = Joiner.on(\",\\n\").join(columnValuesWithNames.iterator());\n-        return new TestTable(sqlExecutor, tableNamePrefix, \"AS SELECT \" + selectBody);\n+        return new TestTable(sqlExecutor, tableNamePrefix, getTableDefinition(selectBody));\n+    }\n+\n+    protected String getTableDefinition(String selectBody)\n+    {\n+        return \"AS SELECT \" + selectBody;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3NzQwNA=="}, "originalCommit": null, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mjg3NDg0OnYy", "diffSide": "RIGHT", "path": "presto-accumulo/src/test/java/io/prestosql/plugin/accumulo/TestAccumuloDistributedQueries.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMToyOTo1MFrOFu89uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxNjoxMTozMFrOFwJ4bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3NzY1Ng==", "bodyText": "it's better throw new SkipException", "url": "https://github.com/trinodb/trino/pull/2956#discussion_r384777656", "createdAt": "2020-02-26T21:29:50Z", "author": {"login": "findepi"}, "path": "presto-accumulo/src/test/java/io/prestosql/plugin/accumulo/TestAccumuloDistributedQueries.java", "diffHunk": "@@ -45,6 +45,12 @@ protected QueryRunner createQueryRunner()\n         return createAccumuloQueryRunner(ImmutableMap.of());\n     }\n \n+    @Override\n+    public void testCreateSchema()\n+    {\n+        // schema creation is not supported", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgwODk3MA==", "bodyText": "This is existing behavior, and we do this in many other places, so I'll leave it alone here. If we want to change the policy, we'll do it consistently instead of for one method.", "url": "https://github.com/trinodb/trino/pull/2956#discussion_r384808970", "createdAt": "2020-02-26T22:34:12Z", "author": {"login": "electrum"}, "path": "presto-accumulo/src/test/java/io/prestosql/plugin/accumulo/TestAccumuloDistributedQueries.java", "diffHunk": "@@ -45,6 +45,12 @@ protected QueryRunner createQueryRunner()\n         return createAccumuloQueryRunner(ImmutableMap.of());\n     }\n \n+    @Override\n+    public void testCreateSchema()\n+    {\n+        // schema creation is not supported", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3NzY1Ng=="}, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg2NzAzNw==", "bodyText": "i believe both  are \"existing behavior\"", "url": "https://github.com/trinodb/trino/pull/2956#discussion_r385867037", "createdAt": "2020-02-28T18:58:36Z", "author": {"login": "findepi"}, "path": "presto-accumulo/src/test/java/io/prestosql/plugin/accumulo/TestAccumuloDistributedQueries.java", "diffHunk": "@@ -45,6 +45,12 @@ protected QueryRunner createQueryRunner()\n         return createAccumuloQueryRunner(ImmutableMap.of());\n     }\n \n+    @Override\n+    public void testCreateSchema()\n+    {\n+        // schema creation is not supported", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3NzY1Ng=="}, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAzNzg2OQ==", "bodyText": "eg 789027e", "url": "https://github.com/trinodb/trino/pull/2956#discussion_r386037869", "createdAt": "2020-02-29T16:11:30Z", "author": {"login": "findepi"}, "path": "presto-accumulo/src/test/java/io/prestosql/plugin/accumulo/TestAccumuloDistributedQueries.java", "diffHunk": "@@ -45,6 +45,12 @@ protected QueryRunner createQueryRunner()\n         return createAccumuloQueryRunner(ImmutableMap.of());\n     }\n \n+    @Override\n+    public void testCreateSchema()\n+    {\n+        // schema creation is not supported", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3NzY1Ng=="}, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mjg3NTIyOnYy", "diffSide": "RIGHT", "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestCassandraDistributedQueries.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMToyOTo1OFrOFu899w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMToyOTo1OFrOFu899w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3NzcxOQ==", "bodyText": "SkipException", "url": "https://github.com/trinodb/trino/pull/2956#discussion_r384777719", "createdAt": "2020-02-26T21:29:58Z", "author": {"login": "findepi"}, "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestCassandraDistributedQueries.java", "diffHunk": "@@ -49,6 +49,12 @@ protected boolean supportsViews()\n         return false;\n     }\n \n+    @Override\n+    public void testCreateSchema()\n+    {\n+        // Cassandra does not support creating schemas", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjkwNzQ2OnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMTo0MDoxNVrOFu9SGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMTo0MDoxNVrOFu9SGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc4Mjg3Mg==", "bodyText": "Please add a javadoc to ATDQ and ATIST governing what goes where.\nAlso, now the test is no longer run for: redis, jdbc+h2, kafka, thrift, ES, Kudu, Accumulo and Mongo", "url": "https://github.com/trinodb/trino/pull/2956#discussion_r384782872", "createdAt": "2020-02-26T21:40:15Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -1153,4 +1154,19 @@ public void testCreateSchema()\n         assertUpdate(\"DROP SCHEMA test_schema_create\");\n         assertQueryFails(\"DROP SCHEMA test_schema_create\", \"line 1:1: Schema '.*\\\\.test_schema_create' does not exist\");\n     }\n+\n+    @Test\n+    public void testInsertForDefaultColumn()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjkxNTI2OnYy", "diffSide": "RIGHT", "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestingMySqlServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMTo0Mjo0OFrOFu9W_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMTo0Mjo0OFrOFu9W_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc4NDEyNQ==", "bodyText": "i'd keep image name and version together (\"mysql:8.0.12\") -- no much drawback but a lot more flexible.\nAlso, we should run tests with Maria DB (follow up)", "url": "https://github.com/trinodb/trino/pull/2956#discussion_r384784125", "createdAt": "2020-02-26T21:42:48Z", "author": {"login": "findepi"}, "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestingMySqlServer.java", "diffHunk": "@@ -22,12 +22,17 @@\n \n import static java.lang.String.format;\n \n-public class TestingMySqlServer\n+public final class TestingMySqlServer\n         extends MySQLContainer<TestingMySqlServer>\n {\n     public TestingMySqlServer()\n     {\n-        super(\"mysql:8.0.12\");\n+        this(\"8.0.12\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjkyMTA3OnYy", "diffSide": "RIGHT", "path": "presto-mysql/src/main/java/io/prestosql/plugin/mysql/MySqlJdbcConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMTo0NDoyNFrOFu9adw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMDoxNTo1OFrOFvBDbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc4NTAxNQ==", "bodyText": "i feel it's better to avoid extending Config classes. can we avoid this?", "url": "https://github.com/trinodb/trino/pull/2956#discussion_r384785015", "createdAt": "2020-02-26T21:44:24Z", "author": {"login": "findepi"}, "path": "presto-mysql/src/main/java/io/prestosql/plugin/mysql/MySqlJdbcConfig.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.mysql;\n+\n+import com.mysql.jdbc.Driver;\n+import io.prestosql.plugin.jdbc.BaseJdbcConfig;\n+\n+import javax.validation.constraints.AssertTrue;\n+\n+import java.sql.SQLException;\n+import java.util.Properties;\n+\n+public class MySqlJdbcConfig\n+        extends BaseJdbcConfig", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0NDY1Mw==", "bodyText": "I'm not sure how the config system would handle multiple bound config classes that have conflicting annotations like ConfigDescription. Also, we want this to be identical to the parent, but with additional validations, so this seems the best way.\nIdeally, there would be some way to bind additional bean validators.", "url": "https://github.com/trinodb/trino/pull/2956#discussion_r384844653", "createdAt": "2020-02-27T00:15:58Z", "author": {"login": "electrum"}, "path": "presto-mysql/src/main/java/io/prestosql/plugin/mysql/MySqlJdbcConfig.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.mysql;\n+\n+import com.mysql.jdbc.Driver;\n+import io.prestosql.plugin.jdbc.BaseJdbcConfig;\n+\n+import javax.validation.constraints.AssertTrue;\n+\n+import java.sql.SQLException;\n+import java.util.Properties;\n+\n+public class MySqlJdbcConfig\n+        extends BaseJdbcConfig", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc4NTAxNQ=="}, "originalCommit": null, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjkyMzY5OnYy", "diffSide": "RIGHT", "path": "presto-accumulo/src/test/java/io/prestosql/plugin/accumulo/TestAccumuloIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMTo0NToxMlrOFu9cCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMDoxODo0MFrOFvBGrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc4NTQxOA==", "bodyText": "technically, it's redundant", "url": "https://github.com/trinodb/trino/pull/2956#discussion_r384785418", "createdAt": "2020-02-26T21:45:12Z", "author": {"login": "findepi"}, "path": "presto-accumulo/src/test/java/io/prestosql/plugin/accumulo/TestAccumuloIntegrationSmokeTest.java", "diffHunk": "@@ -33,28 +34,22 @@ protected QueryRunner createQueryRunner()\n         return createAccumuloQueryRunner(ImmutableMap.of());\n     }\n \n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0NTQ4Nw==", "bodyText": "Agreed, but it seems cleaner to have them. For example, what if the original had something like @Test(expectedExceptions=...)", "url": "https://github.com/trinodb/trino/pull/2956#discussion_r384845487", "createdAt": "2020-02-27T00:18:40Z", "author": {"login": "electrum"}, "path": "presto-accumulo/src/test/java/io/prestosql/plugin/accumulo/TestAccumuloIntegrationSmokeTest.java", "diffHunk": "@@ -33,28 +34,22 @@ protected QueryRunner createQueryRunner()\n         return createAccumuloQueryRunner(ImmutableMap.of());\n     }\n \n+    @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc4NTQxOA=="}, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjkyMzg5OnYy", "diffSide": "RIGHT", "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestCassandraIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMTo0NToxNVrOFu9cJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMTo0NToxNVrOFu9cJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc4NTQ0NQ==", "bodyText": "technically, it's redundant", "url": "https://github.com/trinodb/trino/pull/2956#discussion_r384785445", "createdAt": "2020-02-26T21:45:15Z", "author": {"login": "findepi"}, "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestCassandraIntegrationSmokeTest.java", "diffHunk": "@@ -90,16 +92,23 @@ public void tearDown()\n         server.close();\n     }\n \n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 834, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}