{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0NjQwNjc0", "number": 6030, "title": "Add test when filter domain type is different then target column type", "bodyText": "", "createdAt": "2020-11-20T11:26:33Z", "url": "https://github.com/trinodb/trino/pull/6030", "merged": true, "mergeCommit": {"oid": "2cdba9aa0bc40487d5bec2bf3ddc8f804345bf09"}, "closed": true, "closedAt": "2020-12-03T20:29:40Z", "author": {"login": "sopel39"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdeVojiABqjQwMjA0NTQ0OTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdioaT0AFqTU0NDMxNzk2Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1Mzk5MDQx", "url": "https://github.com/trinodb/trino/pull/6030#pullrequestreview-535399041", "createdAt": "2020-11-20T12:48:11Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMjo0ODoxMlrOH3OXUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMjo0OTowMlrOH3OY2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY2OTA3Mw==", "bodyText": "you moved ApplyTableScanRedirection to last. why?", "url": "https://github.com/trinodb/trino/pull/6030#discussion_r527669073", "createdAt": "2020-11-20T12:48:12Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/PlanOptimizers.java", "diffHunk": "@@ -550,8 +550,9 @@ public PlanOptimizers(\n                         statsCalculator,\n                         estimatedExchangesCostCalculator,\n                         ImmutableSet.of(\n-                                new ApplyTableScanRedirection(metadata),\n-                                new PushPredicateIntoTableScan(metadata, typeOperators, typeAnalyzer))));\n+                                new PushProjectionIntoTableScan(metadata, typeAnalyzer),\n+                                new PushPredicateIntoTableScan(metadata, typeOperators, typeAnalyzer),\n+                                new ApplyTableScanRedirection(metadata))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY2OTQ2NA==", "bodyText": "is this a TODO comment? maybe link to the issue regardless", "url": "https://github.com/trinodb/trino/pull/6030#discussion_r527669464", "createdAt": "2020-11-20T12:49:02Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestTableScanRedirectionWithPushdown.java", "diffHunk": "@@ -193,7 +194,8 @@ public void testRedirectAfterColumnPruningOnPushedDownPredicate()\n                             ImmutableList.of(\"DEST_COL_B\"),\n                             tableScan(\n                                     equalTo(new MockConnectorTableHandle(destinationTable)),\n-                                    TupleDomain.withColumnDomains(ImmutableMap.of(equalTo(destinationColumnHandleA), singleValue(INTEGER, 1L))),\n+                                    // PushProjectionIntoTableScan does not preserve enforced constraint\n+                                    TupleDomain.all(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NDAxNTEw", "url": "https://github.com/trinodb/trino/pull/6030#pullrequestreview-535401510", "createdAt": "2020-11-20T12:52:14Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMjo1MjoxNFrOH3OfZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMjo1MzoxOFrOH3OhaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3MTE0Mw==", "bodyText": "why validate again? is it guaranteed by sourceType.equals(redirectedType)) above?\nbut this is good catch anyone, would be great to have not only a unit test, but also an integration test where redirect occurs after predicate pushdown, and query completes correctly. This would be very useful especially should we ever relax the sourceType.equals(redirectedType)) condition above", "url": "https://github.com/trinodb/trino/pull/6030#discussion_r527671143", "createdAt": "2020-11-20T12:52:14Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/ApplyTableScanRedirection.java", "diffHunk": "@@ -145,10 +143,23 @@ public Result apply(TableScanNode scanNode, Captures captures, Context context)\n                 // symbol should be mapped in redirected table scan\n                 return symbol;\n             }\n-            // Column pruning after PPD into table scan can remove assignments for filter columns from the scan node\n+\n+            // validate that redirected types match source types\n             Type domainType = requiredFilter.getDomains().get().get(destinationColumn).getType();\n-            symbol = context.getSymbolAllocator().newSymbol(destinationColumn, domainType);\n             ColumnHandle destinationColumnHandle = destinationColumnHandles.get(destinationColumn);\n+            Type redirectedType = metadata.getColumnMetadata(context.getSession(), destinationTableHandle.get(), destinationColumnHandle).getType();\n+            if (!domainType.equals(redirectedType)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3MTY1Ng==", "bodyText": "PPD is a wrong term here. \"pushing predicates\"\nagain, is this a bug/problem?", "url": "https://github.com/trinodb/trino/pull/6030#discussion_r527671656", "createdAt": "2020-11-20T12:53:18Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/ApplyTableScanRedirection.java", "diffHunk": "@@ -145,10 +143,23 @@ public Result apply(TableScanNode scanNode, Captures captures, Context context)\n                 // symbol should be mapped in redirected table scan\n                 return symbol;\n             }\n-            // Column pruning after PPD into table scan can remove assignments for filter columns from the scan node\n+\n+            // validate that redirected types match source types\n             Type domainType = requiredFilter.getDomains().get().get(destinationColumn).getType();\n-            symbol = context.getSymbolAllocator().newSymbol(destinationColumn, domainType);\n             ColumnHandle destinationColumnHandle = destinationColumnHandles.get(destinationColumn);\n+            Type redirectedType = metadata.getColumnMetadata(context.getSession(), destinationTableHandle.get(), destinationColumnHandle).getType();\n+            if (!domainType.equals(redirectedType)) {\n+                throwTypeMismatchException(\n+                        destinationTable,\n+                        destinationColumn,\n+                        redirectedType,\n+                        scanNode.getTable(),\n+                        sourceColumnHandle,\n+                        domainType);\n+            }\n+\n+            // Column pruning after PPD into table scan can remove assignments for filter columns from the scan node", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08265a6daa7bb82ba24e6484573e3273cf495e85", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/08265a6daa7bb82ba24e6484573e3273cf495e85", "committedDate": "2020-11-20T21:26:54Z", "message": "Fix testRedirectAfterColumnPruningOnPushedDownPredicate test\n\nPreviously column pruning happened after redirection, which\nmade test with redirected filter incomplete\n(filter columns did not introduce new symbols)."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1f28760519f36f1d7083eedc1460ed401e522b9", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/a1f28760519f36f1d7083eedc1460ed401e522b9", "committedDate": "2020-11-23T22:46:08Z", "message": "Add test when filter domain type is different then target column type"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "a1f28760519f36f1d7083eedc1460ed401e522b9", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/a1f28760519f36f1d7083eedc1460ed401e522b9", "committedDate": "2020-11-23T22:46:08Z", "message": "Add test when filter domain type is different then target column type"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3MTIzNDU0", "url": "https://github.com/trinodb/trino/pull/6030#pullrequestreview-537123454", "createdAt": "2020-11-24T06:58:43Z", "commit": {"oid": "a1f28760519f36f1d7083eedc1460ed401e522b9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0MzE3OTYy", "url": "https://github.com/trinodb/trino/pull/6030#pullrequestreview-544317962", "createdAt": "2020-12-03T19:35:36Z", "commit": {"oid": "a1f28760519f36f1d7083eedc1460ed401e522b9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2198, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}