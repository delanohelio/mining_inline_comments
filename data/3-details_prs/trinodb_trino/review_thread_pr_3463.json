{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1MDUwNjgy", "number": 3463, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMzoxNzo0NFrODy5bVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNTozNjo0NFrODzjXSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Njk2Mjc2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveDistributedQueries.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMzoxNzo0NFrOGHNjrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMzoxNzo0NFrOGHNjrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIxNTM0Mg==", "bodyText": "#3461", "url": "https://github.com/trinodb/trino/pull/3463#discussion_r410215342", "createdAt": "2020-04-17T13:17:44Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveDistributedQueries.java", "diffHunk": "@@ -59,6 +59,17 @@ public void testExplainOfCreateTableAs()\n         assertEquals(getOnlyElement(result.getOnlyColumnAsSet()), getExplainPlan(query, LOGICAL));\n     }\n \n+    @Override\n+    public void testColumnName(String columnName)\n+    {\n+        if (columnName.equals(\"atrailingspace \")) {\n+            // TODO (https://github.com/prestosql/presto/issues/3461)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzAwMDA0OnYy", "diffSide": "RIGHT", "path": "presto-mongodb/src/test/java/io/prestosql/plugin/mongodb/TestMongoDistributedQueries.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMzoyNzo1NVrOGHN71g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMzoyNzo1NVrOGHN71g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIyMTUyNg==", "bodyText": "#3460", "url": "https://github.com/trinodb/trino/pull/3463#discussion_r410221526", "createdAt": "2020-04-17T13:27:55Z", "author": {"login": "findepi"}, "path": "presto-mongodb/src/test/java/io/prestosql/plugin/mongodb/TestMongoDistributedQueries.java", "diffHunk": "@@ -116,10 +117,14 @@ protected TestTable createTableWithDefaultColumns()\n     }\n \n     @Override\n+    @Test(dataProvider = \"testColumnNameDataProvider\")\n     public void testColumnName(String columnName)\n     {\n         if (columnName.equals(\"a.dot\")) {\n-            // TODO https://github.com/prestosql/presto/issues/3460\n+            // TODO (https://github.com/prestosql/presto/issues/3460)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzAwMDg5OnYy", "diffSide": "RIGHT", "path": "presto-phoenix/src/test/java/io/prestosql/plugin/phoenix/TestPhoenixDistributedQueries.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMzoyODowM1rOGHN8WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMzoyODowM1rOGHN8WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIyMTY1Ng==", "bodyText": "#3466", "url": "https://github.com/trinodb/trino/pull/3463#discussion_r410221656", "createdAt": "2020-04-17T13:28:03Z", "author": {"login": "findepi"}, "path": "presto-phoenix/src/test/java/io/prestosql/plugin/phoenix/TestPhoenixDistributedQueries.java", "diffHunk": "@@ -133,6 +133,13 @@ public void testCreateSchema()\n         throw new SkipException(\"test disabled until issue fixed\"); // TODO https://github.com/prestosql/presto/issues/2348\n     }\n \n+    @Override\n+    public void testColumnName(String columnName)\n+    {\n+        // TODO (https://github.com/prestosql/presto/issues/3466) Phoenix generally lacks quoting in underlying queries", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDkyMTMwOnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduDistributedQueries.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMjo1MDoyMlrOGHvE0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMjo1MDoyMlrOGHvE0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc2NDQ5Nw==", "bodyText": "#3477", "url": "https://github.com/trinodb/trino/pull/3463#discussion_r410764497", "createdAt": "2020-04-18T22:50:22Z", "author": {"login": "findepi"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduDistributedQueries.java", "diffHunk": "@@ -158,7 +158,7 @@ public void testWrittenStats()\n     @Override\n     public void testColumnName(String columnName)\n     {\n-        // TODO enable the test\n+        // TODO (https://github.com/prestosql/presto/issues/3477) enable the test", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MzgyNjA1OnYy", "diffSide": "RIGHT", "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestCassandraDistributedQueries.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNTozMzoyNFrOGIDyww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNzozMTozOFrOGIG_Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEwMzkzOQ==", "bodyText": "does it support CTAS?", "url": "https://github.com/trinodb/trino/pull/3463#discussion_r411103939", "createdAt": "2020-04-20T05:33:24Z", "author": {"login": "kokosing"}, "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestCassandraDistributedQueries.java", "diffHunk": "@@ -160,6 +160,12 @@ protected TestTable createTableWithDefaultColumns()\n         throw new SkipException(\"Cassandra connector does not support column default values\");\n     }\n \n+    @Override\n+    public void testColumnName(String columnName)\n+    {\n+        // Cassandra connector currently does not support create table", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTExNjEwNw==", "bodyText": "Yes, CTAS is already supported.", "url": "https://github.com/trinodb/trino/pull/3463#discussion_r411116107", "createdAt": "2020-04-20T06:08:06Z", "author": {"login": "ebyhr"}, "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestCassandraDistributedQueries.java", "diffHunk": "@@ -160,6 +160,12 @@ protected TestTable createTableWithDefaultColumns()\n         throw new SkipException(\"Cassandra connector does not support column default values\");\n     }\n \n+    @Override\n+    public void testColumnName(String columnName)\n+    {\n+        // Cassandra connector currently does not support create table", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEwMzkzOQ=="}, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyOTUxOQ==", "bodyText": "let's cover this in #3478 maybe.", "url": "https://github.com/trinodb/trino/pull/3463#discussion_r411129519", "createdAt": "2020-04-20T06:40:03Z", "author": {"login": "findepi"}, "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestCassandraDistributedQueries.java", "diffHunk": "@@ -160,6 +160,12 @@ protected TestTable createTableWithDefaultColumns()\n         throw new SkipException(\"Cassandra connector does not support column default values\");\n     }\n \n+    @Override\n+    public void testColumnName(String columnName)\n+    {\n+        // Cassandra connector currently does not support create table", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEwMzkzOQ=="}, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE0OTUyOQ==", "bodyText": "i removed the override, tests will pass when #3478 is merged", "url": "https://github.com/trinodb/trino/pull/3463#discussion_r411149529", "createdAt": "2020-04-20T07:19:29Z", "author": {"login": "findepi"}, "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestCassandraDistributedQueries.java", "diffHunk": "@@ -160,6 +160,12 @@ protected TestTable createTableWithDefaultColumns()\n         throw new SkipException(\"Cassandra connector does not support column default values\");\n     }\n \n+    @Override\n+    public void testColumnName(String columnName)\n+    {\n+        // Cassandra connector currently does not support create table", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEwMzkzOQ=="}, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1NjMxNQ==", "bodyText": "I added the override back. The test fails for cassandra for a reason i don't understand.\nlet's get the test in in its general shape so that we can collaborate on it", "url": "https://github.com/trinodb/trino/pull/3463#discussion_r411156315", "createdAt": "2020-04-20T07:31:38Z", "author": {"login": "findepi"}, "path": "presto-cassandra/src/test/java/io/prestosql/plugin/cassandra/TestCassandraDistributedQueries.java", "diffHunk": "@@ -160,6 +160,12 @@ protected TestTable createTableWithDefaultColumns()\n         throw new SkipException(\"Cassandra connector does not support column default values\");\n     }\n \n+    @Override\n+    public void testColumnName(String columnName)\n+    {\n+        // Cassandra connector currently does not support create table", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEwMzkzOQ=="}, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MzgzMDMyOnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNTozNToxNFrOGID1GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNjo0MToxOFrOGIFY0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEwNDUzNw==", "bodyText": "please extract qoute method", "url": "https://github.com/trinodb/trino/pull/3463#discussion_r411104537", "createdAt": "2020-04-20T05:35:14Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -1239,6 +1240,84 @@ public void testInsertForDefaultColumn()\n \n     protected abstract TestTable createTableWithDefaultColumns();\n \n+    @Test(dataProvider = \"testColumnNameDataProvider\")\n+    public void testColumnName(String columnName)\n+    {\n+        if (!requiresDelimiting(columnName)) {\n+            testColumnName(columnName, false);\n+        }\n+        testColumnName(columnName, true);\n+    }\n+\n+    private void testColumnName(String columnName, boolean delimited)\n+    {\n+        String nameInSql = columnName;\n+        if (delimited) {\n+            nameInSql = \"\\\"\" + columnName.replace(\"\\\"\", \"\\\"\\\"\") + \"\\\"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEzMDA2Nw==", "bodyText": "it's used once, and for specific purpose  and i prefer to leave it as is.\n(i could as well make it part of data provided by the @DataProvider)", "url": "https://github.com/trinodb/trino/pull/3463#discussion_r411130067", "createdAt": "2020-04-20T06:41:18Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -1239,6 +1240,84 @@ public void testInsertForDefaultColumn()\n \n     protected abstract TestTable createTableWithDefaultColumns();\n \n+    @Test(dataProvider = \"testColumnNameDataProvider\")\n+    public void testColumnName(String columnName)\n+    {\n+        if (!requiresDelimiting(columnName)) {\n+            testColumnName(columnName, false);\n+        }\n+        testColumnName(columnName, true);\n+    }\n+\n+    private void testColumnName(String columnName, boolean delimited)\n+    {\n+        String nameInSql = columnName;\n+        if (delimited) {\n+            nameInSql = \"\\\"\" + columnName.replace(\"\\\"\", \"\\\"\\\"\") + \"\\\"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEwNDUzNw=="}, "originalCommit": null, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MzgzMzcxOnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNTozNjo0NFrOGID25Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNjo0MjoyNlrOGIFawQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEwNDk5Nw==", "bodyText": "remove?", "url": "https://github.com/trinodb/trino/pull/3463#discussion_r411104997", "createdAt": "2020-04-20T05:36:44Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -1239,6 +1240,84 @@ public void testInsertForDefaultColumn()\n \n     protected abstract TestTable createTableWithDefaultColumns();\n \n+    @Test(dataProvider = \"testColumnNameDataProvider\")\n+    public void testColumnName(String columnName)\n+    {\n+        if (!requiresDelimiting(columnName)) {\n+            testColumnName(columnName, false);\n+        }\n+        testColumnName(columnName, true);\n+    }\n+\n+    private void testColumnName(String columnName, boolean delimited)\n+    {\n+        String nameInSql = columnName;\n+        if (delimited) {\n+            nameInSql = \"\\\"\" + columnName.replace(\"\\\"\", \"\\\"\\\"\") + \"\\\"\";\n+        }\n+        String tableName = \"test_column_names_\" + nameInSql.toLowerCase(ENGLISH).replaceAll(\"[^a-z0-9]\", \"_\") + \"_\" + randomTableSuffix();\n+\n+        try {\n+            // TODO test with both CTAS *and* CREATE TABLE + INSERT, since they use different connector API methods.\n+            assertUpdate(\"CREATE TABLE \" + tableName + \"(id varchar, \" + nameInSql + \" varchar)\");\n+        }\n+        catch (RuntimeException e) {\n+            if (isColumnNameRejected(e, columnName, delimited)) {\n+                // Fair enough", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEzMDU2MQ==", "bodyText": "changed to // It is OK if give column name is not allowed and is clearly rejected by the connector.", "url": "https://github.com/trinodb/trino/pull/3463#discussion_r411130561", "createdAt": "2020-04-20T06:42:26Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -1239,6 +1240,84 @@ public void testInsertForDefaultColumn()\n \n     protected abstract TestTable createTableWithDefaultColumns();\n \n+    @Test(dataProvider = \"testColumnNameDataProvider\")\n+    public void testColumnName(String columnName)\n+    {\n+        if (!requiresDelimiting(columnName)) {\n+            testColumnName(columnName, false);\n+        }\n+        testColumnName(columnName, true);\n+    }\n+\n+    private void testColumnName(String columnName, boolean delimited)\n+    {\n+        String nameInSql = columnName;\n+        if (delimited) {\n+            nameInSql = \"\\\"\" + columnName.replace(\"\\\"\", \"\\\"\\\"\") + \"\\\"\";\n+        }\n+        String tableName = \"test_column_names_\" + nameInSql.toLowerCase(ENGLISH).replaceAll(\"[^a-z0-9]\", \"_\") + \"_\" + randomTableSuffix();\n+\n+        try {\n+            // TODO test with both CTAS *and* CREATE TABLE + INSERT, since they use different connector API methods.\n+            assertUpdate(\"CREATE TABLE \" + tableName + \"(id varchar, \" + nameInSql + \" varchar)\");\n+        }\n+        catch (RuntimeException e) {\n+            if (isColumnNameRejected(e, columnName, delimited)) {\n+                // Fair enough", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEwNDk5Nw=="}, "originalCommit": null, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 167, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}