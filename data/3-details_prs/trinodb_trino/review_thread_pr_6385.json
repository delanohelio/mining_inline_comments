{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyODQ4NTk3", "number": 6385, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDoyNDoxMlrOFIGtgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDoyNDoxMlrOFIGtgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDQyODgyOnYy", "diffSide": "RIGHT", "path": "presto-tests/src/test/java/io/prestosql/execution/TestTry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDoyNDoxMlrOIJ2F6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDoyNDoxMlrOIJ2F6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE5NDM0NA==", "bodyText": "static import", "url": "https://github.com/trinodb/trino/pull/6385#discussion_r547194344", "createdAt": "2020-12-22T10:24:12Z", "author": {"login": "kokosing"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestTry.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import io.prestosql.plugin.memory.MemoryQueryRunner;\n+import io.prestosql.testing.AbstractTestQueryFramework;\n+import io.prestosql.testing.QueryRunner;\n+import org.assertj.core.api.Assertions;\n+import org.testng.annotations.Test;\n+\n+public class TestTry\n+        extends AbstractTestQueryFramework\n+{\n+    @Override\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        return MemoryQueryRunner.createQueryRunner();\n+    }\n+\n+    @Test\n+    public void testTryWithColumnWithAt()\n+    {\n+        assertUpdate(\"CREATE TABLE table_with_column_with_at(\\\"a@b\\\" integer)\");\n+        assertUpdate(\"INSERT INTO table_with_column_with_at VALUES (55)\", 1);\n+        Assertions.assertThat(query(\"SELECT try(\\\"a@b\\\") FROM table_with_column_with_at\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4379, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}