{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxOTYyNzAx", "number": 4279, "title": "getTableDefaultLocation should not called if external_location present", "bodyText": "In\n66c3609\nCTAS was fixed to use the external_location if provided but due to the\nway Optional.orElse() works it still ended up calling\ngetTableDefaultLocation() which will throw errors if the location\ndefined in the schema cannot be accessed. This can be fixed by the user\nby fixing the location defined in the schema - but Hive doesn't allow\nthat. So the other option is to not check the location defined in the\nschema until absolutely needed.\nFixes #4069.", "createdAt": "2020-06-30T11:25:13Z", "url": "https://github.com/trinodb/trino/pull/4279", "merged": true, "mergeCommit": {"oid": "883e38d58736db5216aa070fcd7938b1de8cdb91"}, "closed": true, "closedAt": "2020-07-22T08:34:01Z", "author": {"login": "hashhar"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwUHfmAFqTQzOTkyOTk3MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3S65EAH2gAyNDQxOTYyNzAxOmEwNWU2YWY1ODk5YTJiN2QxYjUwMWQxMDQyY2JlYzYwZjRkNWViOGY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5OTI5OTcx", "url": "https://github.com/trinodb/trino/pull/4279#pullrequestreview-439929971", "createdAt": "2020-06-30T11:40:44Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMTo0MDo0NFrOGq4ZJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMTo0MDo0NFrOGq4ZJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYxNzMxNw==", "bodyText": "sigh. i wish orElse had longer name, so that it would be simply more convenient to call orElseGet.\nI guess you can find many places like that in the codebase.", "url": "https://github.com/trinodb/trino/pull/4279#discussion_r447617317", "createdAt": "2020-06-30T11:40:44Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveLocationService.java", "diffHunk": "@@ -55,7 +55,7 @@ public HiveLocationService(HdfsEnvironment hdfsEnvironment)\n     public LocationHandle forNewTable(SemiTransactionalHiveMetastore metastore, ConnectorSession session, String schemaName, String tableName, Optional<Path> externalLocation)\n     {\n         HdfsContext context = new HdfsContext(session, schemaName, tableName);\n-        Path targetPath = externalLocation.orElse(getTableDefaultLocation(context, metastore, hdfsEnvironment, schemaName, tableName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNTcwNTI1", "url": "https://github.com/trinodb/trino/pull/4279#pullrequestreview-450570525", "createdAt": "2020-07-17T11:08:03Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMTowODowNFrOGzO_xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMTowODowOVrOGzO_8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM3NjI2Mg==", "bodyText": "this fails on CI\n2020-07-11T18:47:14.9602286Z tests               | io.prestosql.tempto.query.QueryExecutionException: java.sql.SQLException: Query failed (#20200711_184714_00781_asknk): Writes to non-managed Hive tables is disabled\n\nsadly, we would need a separate environment with different hive.properties unlocking this...\nas this requires quite a few steps, and I am not sure of how much added value this actually brings,\ni would be OK taking a step back and not doing a test at all cc @kokosing @electrum\n(sorry, i didnt foreseen this earlier)\nif we want to go with a test, i can provide necessary guidance.", "url": "https://github.com/trinodb/trino/pull/4279#discussion_r456376262", "createdAt": "2020-07-17T11:08:04Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestExternalHiveTable.java", "diffHunk": "@@ -46,6 +53,27 @@ public Requirement getRequirements(Configuration configuration)\n                 mutableTable(NATION_PARTITIONED_BY_BIGINT_REGIONKEY));\n     }\n \n+    @Test\n+    public void testCreateExternalTableWithInaccessibleSchemaLocation()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM3NjMwNA==", "bodyText": "The temp dir is local in the tests' containers, so it can as well not exist at all, am i right?", "url": "https://github.com/trinodb/trino/pull/4279#discussion_r456376304", "createdAt": "2020-07-17T11:08:09Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestExternalHiveTable.java", "diffHunk": "@@ -46,6 +53,27 @@ public Requirement getRequirements(Configuration configuration)\n                 mutableTable(NATION_PARTITIONED_BY_BIGINT_REGIONKEY));\n     }\n \n+    @Test\n+    public void testCreateExternalTableWithInaccessibleSchemaLocation()\n+            throws IOException\n+    {\n+        File tempDir = createTempDir();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMjA2NTU5", "url": "https://github.com/trinodb/trino/pull/4279#pullrequestreview-452206559", "createdAt": "2020-07-21T07:46:37Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNzo0NjozN1rOG0sIxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNzo0NjozN1rOG0sIxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkwMjI3OA==", "bodyText": "Instead of creating new environment, can you define new catalog (like hive_with_writes_to_external) in existing environment?", "url": "https://github.com/trinodb/trino/pull/4279#discussion_r457902278", "createdAt": "2020-07-21T07:46:37Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/SinglenodeWithWritesToExternal.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.environment;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.common.AbstractEnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.common.Hadoop;\n+import io.prestosql.tests.product.launcher.env.common.Standard;\n+import io.prestosql.tests.product.launcher.env.common.TestsEnvironment;\n+\n+import javax.inject.Inject;\n+\n+import static io.prestosql.tests.product.launcher.env.common.Hadoop.CONTAINER_PRESTO_HIVE_PROPERTIES;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.utility.MountableFile.forHostPath;\n+\n+@TestsEnvironment\n+public final class SinglenodeWithWritesToExternal\n+        extends AbstractEnvironmentProvider\n+{\n+    private final DockerFiles dockerFiles;\n+\n+    @Inject\n+    public SinglenodeWithWritesToExternal(DockerFiles dockerFiles, Standard standard, Hadoop hadoop)\n+    {\n+        super(ImmutableList.of(standard, hadoop));\n+        this.dockerFiles = requireNonNull(dockerFiles, \"dockerFiles is null\");\n+    }\n+\n+    @Override\n+    protected void extendEnvironment(Environment.Builder builder)\n+    {\n+        builder.configureContainer(\"presto-master\", container -> container\n+                .withCopyFileToContainer(forHostPath(dockerFiles.getDockerFilesHostPath(\"conf/environment/singlenode-with-writes-to-external/hive.properties\")), CONTAINER_PRESTO_HIVE_PROPERTIES));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNDE2NzAy", "url": "https://github.com/trinodb/trino/pull/4279#pullrequestreview-452416702", "createdAt": "2020-07-21T12:46:00Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMjo0NjowMFrOG02N6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMjo0OTo0OFrOG02W4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA2NzQzMw==", "bodyText": "redundant?", "url": "https://github.com/trinodb/trino/pull/4279#discussion_r458067433", "createdAt": "2020-07-21T12:46:00Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveCreateExternalTable.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.name.Named;\n+import io.prestosql.tempto.AfterTestWithContext;\n+import io.prestosql.tempto.BeforeTestWithContext;\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.Requirement;\n+import io.prestosql.tempto.RequirementsProvider;\n+import io.prestosql.tempto.configuration.Configuration;\n+import io.prestosql.tempto.hadoop.hdfs.HdfsClient;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.tempto.Requirements.compose;\n+import static io.prestosql.tempto.fulfillment.table.TableRequirements.mutableTable;\n+import static io.prestosql.tempto.fulfillment.table.hive.tpch.TpchTableDefinitions.NATION;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.tests.TestGroups.PROFILE_SPECIFIC_TESTS;\n+import static java.lang.String.format;\n+\n+public class TestHiveCreateExternalTable\n+        extends ProductTest\n+        implements RequirementsProvider\n+{\n+    @Inject\n+    private HdfsClient hdfsClient;\n+\n+    @Inject\n+    @Named(\"databases.hive.warehouse_directory_path\")\n+    private String warehouseDirectory;\n+\n+    @BeforeTestWithContext\n+    public void setup()\n+            throws Exception\n+    {\n+        hdfsClient.createDirectory(warehouseDirectory + \"/TestHiveCreateExternalTable\");\n+    }\n+\n+    @AfterTestWithContext\n+    public void cleanup()\n+    {\n+        hdfsClient.delete(warehouseDirectory + \"/TestHiveCreateExternalTable\");\n+    }\n+\n+    @Override\n+    public Requirement getRequirements(Configuration configuration)\n+    {\n+        return compose(\n+                mutableTable(NATION));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA2ODAxMg==", "bodyText": "I would like to remove warehouse_directory_path.\nHere, it's not needed. You can create a directory in (HDFS's) /tmp", "url": "https://github.com/trinodb/trino/pull/4279#discussion_r458068012", "createdAt": "2020-07-21T12:47:00Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveCreateExternalTable.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.name.Named;\n+import io.prestosql.tempto.AfterTestWithContext;\n+import io.prestosql.tempto.BeforeTestWithContext;\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.Requirement;\n+import io.prestosql.tempto.RequirementsProvider;\n+import io.prestosql.tempto.configuration.Configuration;\n+import io.prestosql.tempto.hadoop.hdfs.HdfsClient;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.tempto.Requirements.compose;\n+import static io.prestosql.tempto.fulfillment.table.TableRequirements.mutableTable;\n+import static io.prestosql.tempto.fulfillment.table.hive.tpch.TpchTableDefinitions.NATION;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.tests.TestGroups.PROFILE_SPECIFIC_TESTS;\n+import static java.lang.String.format;\n+\n+public class TestHiveCreateExternalTable\n+        extends ProductTest\n+        implements RequirementsProvider\n+{\n+    @Inject\n+    private HdfsClient hdfsClient;\n+\n+    @Inject\n+    @Named(\"databases.hive.warehouse_directory_path\")\n+    private String warehouseDirectory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA2OTczMA==", "bodyText": "Use a shorter (not nested) path for tableLocation in the test code\nand this will let you remove setup and cleanup from here\n(even if you leave a table directory behind, it's not a problem)", "url": "https://github.com/trinodb/trino/pull/4279#discussion_r458069730", "createdAt": "2020-07-21T12:49:48Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveCreateExternalTable.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.name.Named;\n+import io.prestosql.tempto.AfterTestWithContext;\n+import io.prestosql.tempto.BeforeTestWithContext;\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.Requirement;\n+import io.prestosql.tempto.RequirementsProvider;\n+import io.prestosql.tempto.configuration.Configuration;\n+import io.prestosql.tempto.hadoop.hdfs.HdfsClient;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.tempto.Requirements.compose;\n+import static io.prestosql.tempto.fulfillment.table.TableRequirements.mutableTable;\n+import static io.prestosql.tempto.fulfillment.table.hive.tpch.TpchTableDefinitions.NATION;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.tests.TestGroups.PROFILE_SPECIFIC_TESTS;\n+import static java.lang.String.format;\n+\n+public class TestHiveCreateExternalTable\n+        extends ProductTest\n+        implements RequirementsProvider\n+{\n+    @Inject\n+    private HdfsClient hdfsClient;\n+\n+    @Inject\n+    @Named(\"databases.hive.warehouse_directory_path\")\n+    private String warehouseDirectory;\n+\n+    @BeforeTestWithContext\n+    public void setup()\n+            throws Exception\n+    {\n+        hdfsClient.createDirectory(warehouseDirectory + \"/TestHiveCreateExternalTable\");\n+    }\n+\n+    @AfterTestWithContext\n+    public void cleanup()\n+    {\n+        hdfsClient.delete(warehouseDirectory + \"/TestHiveCreateExternalTable\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyODI2MTU1", "url": "https://github.com/trinodb/trino/pull/4279#pullrequestreview-452826155", "createdAt": "2020-07-21T21:01:55Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a05e6af5899a2b7d1b501d1042cbec60f4d5eb8f", "author": {"user": {"login": "hashhar", "name": "Ashhar Hasan"}}, "url": "https://github.com/trinodb/trino/commit/a05e6af5899a2b7d1b501d1042cbec60f4d5eb8f", "committedDate": "2020-07-22T04:14:32Z", "message": "Do not call getTableDefaultLocation if external_location present in CTAS\n\nIn\nhttps://github.com/prestosql/presto/commit/66c360963e690a13b5a526060d7faac2110279ef\nCTAS was fixed to use the external_location if provided but due to the\nway Optional.orElse() works it still ended up calling\ngetTableDefaultLocation() which will throw errors if the schema location\ncannot be accessed or is missing. This can be fixed by the user\nby fixing the location defined in the schema - but Hive doesn't allow\nthat. So the other option is to not check the location defined in the\nschema until absolutely needed.\n\nFor testing a new Hive catalog is added with writes to external tables\nenabled.\n\nFixes: #4069."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 276, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}