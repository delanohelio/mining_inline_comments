{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0OTIxMjU5", "number": 4748, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxODoxOTowOFrOEZmZ2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMTozOToyNlrOEvRaSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Mjc5MDY2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/spi/block/BlockJsonSerde.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxODoxOTowOFrOHCgkCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMDo0MjoyN1rOHE8y8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM5MjcxMg==", "bodyText": "Move to io.prestosql.plugin.hive.util package", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r472392712", "createdAt": "2020-08-18T18:19:08Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/spi/block/BlockJsonSerde.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.spi.block;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk1MjQzMw==", "bodyText": "done", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r474952433", "createdAt": "2020-08-21T20:42:27Z", "author": {"login": "rash67"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/spi/block/BlockJsonSerde.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.spi.block;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM5MjcxMg=="}, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Mjc5MDk3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/spi/block/HiveBlockEncodingSerde.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo0MTo1N1rOHHkAZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo0MTo1N1rOHHkAZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY5MjAwNg==", "bodyText": "Move to io.prestosql.plugin.hive.util package", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r477692006", "createdAt": "2020-08-26T23:41:57Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/spi/block/HiveBlockEncodingSerde.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.spi.block;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjgwMjcyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveModule.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxODoyMjozMVrOHCgrqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxODo1MzowOFrOHE3x1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM5NDY2Nw==", "bodyText": "We shouldn't bind RecordingHiveMetastore here unconditionally.\nThere are three duplicated bindings for RecordingHiveMetastore in ThriftMetastoreModule and GlueMetastoreModule. Existing duplicated code:\nbinder.bind(HiveMetastore.class)\n        .annotatedWith(ForCachingHiveMetastore.class)\n        .to(RecordingHiveMetastore.class)\n        .in(Scopes.SINGLETON);\nbinder.bind(RecordingHiveMetastore.class).in(Scopes.SINGLETON);\nnewExporter(binder).export(RecordingHiveMetastore.class).withGeneratedName();\nCreate a RecordingHiveMetastoreModule and move that plus this code into the new module. Then install the module in those metastore modules.", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r472394667", "createdAt": "2020-08-18T18:22:31Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveModule.java", "diffHunk": "@@ -124,6 +128,11 @@ public void configure(Binder binder)\n \n         jsonBinder(binder).addDeserializerBinding(Type.class).to(TypeDeserializer.class);\n \n+        binder.bind(HiveBlockEncodingSerde.class).in(Scopes.SINGLETON);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc5MjEzMA==", "bodyText": "relevant?", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r474792130", "createdAt": "2020-08-21T16:08:33Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveModule.java", "diffHunk": "@@ -124,6 +128,11 @@ public void configure(Binder binder)\n \n         jsonBinder(binder).addDeserializerBinding(Type.class).to(TypeDeserializer.class);\n \n+        binder.bind(HiveBlockEncodingSerde.class).in(Scopes.SINGLETON);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM5NDY2Nw=="}, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3MDIyOA==", "bodyText": "We now need additional code when binding RecordingHiveMetastore, so it makes sense to extract the module for it.", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r474870228", "createdAt": "2020-08-21T18:53:08Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveModule.java", "diffHunk": "@@ -124,6 +128,11 @@ public void configure(Binder binder)\n \n         jsonBinder(binder).addDeserializerBinding(Type.class).to(TypeDeserializer.class);\n \n+        binder.bind(HiveBlockEncodingSerde.class).in(Scopes.SINGLETON);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM5NDY2Nw=="}, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MzIzNzU4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/MetastoreUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDoyMTo0NFrOHCk88g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDoyMTo0NFrOHCk88g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ2NDYyNg==", "bodyText": "Nit: the \"else\" are redundant since the above \"if\" returns\nif (...) {\n    return ...;\n}\nif (...) {\n    return ...;\n}", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r472464626", "createdAt": "2020-08-18T20:21:44Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/MetastoreUtil.java", "diffHunk": "@@ -290,4 +321,118 @@ public static PrincipalPrivileges buildInitialPrivilegeSet(String tableOwner)\n                         .build(),\n                 ImmutableMultimap.of());\n     }\n+\n+    public static boolean isPartitionKeyFilterFalse(TupleDomain<String> partitionKeysFilter)\n+    {\n+        return partitionKeysFilter.isNone() || partitionKeysFilter.getDomains().get().values().stream().anyMatch(Domain::isNone);\n+    }\n+\n+    /**\n+     * @param columnNames\n+     * @param partitionKeysFilter\n+     * @param assumeCanonicalPartitionKeys allow conversion of\n+     * @return the Domain for each partition key to either the wildcard or an equals check.\n+     * TupleDomain.none() or any column's Domain.isNone() -> Optional.empty()\n+     */\n+    public static Optional<List<String>> partitionKeyFilterToStringList(List<String> columnNames, TupleDomain<String> partitionKeysFilter, boolean assumeCanonicalPartitionKeys)\n+    {\n+        if (isPartitionKeyFilterFalse(partitionKeysFilter)) {\n+            return Optional.empty();\n+        }\n+\n+        checkArgument(partitionKeysFilter.getDomains().isPresent());\n+\n+        Map<String, Domain> domainMap = partitionKeysFilter.getDomains().orElse(ImmutableMap.of());\n+        List<String> partitionList = columnNames.stream().map(cn -> domainToString(domainMap.get(cn), assumeCanonicalPartitionKeys, HIVE_PARTITION_VALUE_WILDCARD)).collect(toImmutableList());\n+        return Optional.of(partitionList);\n+    }\n+\n+    /**\n+     * @param domain - domain expression for the column. null => TupleDomain.all()\n+     * @param assumeCanonicalPartitionKeys\n+     * @param partitionWildcardString wildcard\n+     * @return string for scalar values\n+     */\n+    public static String domainToString(Domain domain, boolean assumeCanonicalPartitionKeys, String partitionWildcardString)\n+    {\n+        if (domain != null && domain.isNullableSingleValue()) {\n+            return sqlScalarToString(domain.getType(), domain.getNullableSingleValue(), assumeCanonicalPartitionKeys, partitionWildcardString);\n+        }\n+        else { // null or not a single value\n+            return partitionWildcardString;\n+        }\n+    }\n+\n+    /**\n+     * @param type\n+     * @param value\n+     * @param assumeCanonicalPartitionKeys\n+     * @param partitionWildcardString\n+     * @return value converted a string format. Returns\n+     */\n+    public static String sqlScalarToString(Type type, Object value, boolean assumeCanonicalPartitionKeys, String partitionWildcardString)\n+    {\n+        if (value == null) {\n+            return HIVE_DEFAULT_DYNAMIC_PARTITION;\n+        }\n+        else if (type instanceof CharType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MzI0MzU0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/HiveQueryRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDoyMjo0OFrOHClAxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMDo0MzoxNlrOHE81kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ2NTYwNQ==", "bodyText": "Make sure to remove later", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r472465605", "createdAt": "2020-08-18T20:22:48Z", "author": {"login": "electrum"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/HiveQueryRunner.java", "diffHunk": "@@ -297,5 +296,21 @@ public static void main(String[] args)\n         Thread.sleep(10);\n         log.info(\"======== SERVER STARTED ========\");\n         log.info(\"\\n====\\n%s\\n====\", queryRunner.getCoordinator().getBaseUrl());\n+\n+        Session session = createSession(Optional.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk1MzEwNA==", "bodyText": "oh shoot, yes, done", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r474953104", "createdAt": "2020-08-21T20:43:16Z", "author": {"login": "rash67"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/HiveQueryRunner.java", "diffHunk": "@@ -297,5 +296,21 @@ public static void main(String[] args)\n         Thread.sleep(10);\n         log.info(\"======== SERVER STARTED ========\");\n         log.info(\"\\n====\\n%s\\n====\", queryRunner.getCoordinator().getBaseUrl());\n+\n+        Session session = createSession(Optional.empty());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ2NTYwNQ=="}, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Mzg4NDMwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HivePartitionManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODozNDo1NlrOHEOVqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODozNDo1NlrOHEOVqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE5MTI3NA==", "bodyText": "It looks like this method signature didn't change, so keep the original formatting for the arguments.", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r474191274", "createdAt": "2020-08-20T18:34:56Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HivePartitionManager.java", "diffHunk": "@@ -266,70 +241,17 @@ public static boolean partitionMatches(List<HiveColumnHandle> partitionColumns,\n         return true;\n     }\n \n-    private List<String> getFilteredPartitionNames(SemiTransactionalHiveMetastore metastore, HiveIdentity identity, SchemaTableName tableName, List<HiveColumnHandle> partitionKeys, TupleDomain<ColumnHandle> effectivePredicate)\n+    private List<String> getFilteredPartitionNames(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzkxMzMxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/MetastoreUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODo0MzowMVrOHEOncQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODo0MzowMVrOHEOncQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE5NTgyNQ==", "bodyText": "This seems to be missing something. Maybe remove all the @param and just explain what the method does.", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r474195825", "createdAt": "2020-08-20T18:43:01Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/MetastoreUtil.java", "diffHunk": "@@ -290,4 +321,118 @@ public static PrincipalPrivileges buildInitialPrivilegeSet(String tableOwner)\n                         .build(),\n                 ImmutableMultimap.of());\n     }\n+\n+    public static boolean isPartitionKeyFilterFalse(TupleDomain<String> partitionKeysFilter)\n+    {\n+        return partitionKeysFilter.isNone() || partitionKeysFilter.getDomains().get().values().stream().anyMatch(Domain::isNone);\n+    }\n+\n+    /**\n+     * @param columnNames\n+     * @param partitionKeysFilter\n+     * @param assumeCanonicalPartitionKeys allow conversion of", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzkxNDI2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/MetastoreUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODo0MzoxNVrOHEOoBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxOTowMjo0OFrOHE4CYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE5NTk3Mw==", "bodyText": "We avoid having empty/useless documentation for obvious parameters.", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r474195973", "createdAt": "2020-08-20T18:43:15Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/MetastoreUtil.java", "diffHunk": "@@ -290,4 +321,118 @@ public static PrincipalPrivileges buildInitialPrivilegeSet(String tableOwner)\n                         .build(),\n                 ImmutableMultimap.of());\n     }\n+\n+    public static boolean isPartitionKeyFilterFalse(TupleDomain<String> partitionKeysFilter)\n+    {\n+        return partitionKeysFilter.isNone() || partitionKeysFilter.getDomains().get().values().stream().anyMatch(Domain::isNone);\n+    }\n+\n+    /**\n+     * @param columnNames", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3NDQ2Ng==", "bodyText": "my mistake, i left this half-finished", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r474874466", "createdAt": "2020-08-21T19:02:48Z", "author": {"login": "rash67"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/MetastoreUtil.java", "diffHunk": "@@ -290,4 +321,118 @@ public static PrincipalPrivileges buildInitialPrivilegeSet(String tableOwner)\n                         .build(),\n                 ImmutableMultimap.of());\n     }\n+\n+    public static boolean isPartitionKeyFilterFalse(TupleDomain<String> partitionKeysFilter)\n+    {\n+        return partitionKeysFilter.isNone() || partitionKeysFilter.getDomains().get().values().stream().anyMatch(Domain::isNone);\n+    }\n+\n+    /**\n+     * @param columnNames", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE5NTk3Mw=="}, "originalCommit": null, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzkxNzIxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/MetastoreUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODo0NDowNlrOHEOpxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxOTowODoyMlrOHE4LsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE5NjQyMg==", "bodyText": "Nit: wrap stream operations\nList x = stream()\n        .map(...)\n        .collect(...);", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r474196422", "createdAt": "2020-08-20T18:44:06Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/MetastoreUtil.java", "diffHunk": "@@ -290,4 +321,118 @@ public static PrincipalPrivileges buildInitialPrivilegeSet(String tableOwner)\n                         .build(),\n                 ImmutableMultimap.of());\n     }\n+\n+    public static boolean isPartitionKeyFilterFalse(TupleDomain<String> partitionKeysFilter)\n+    {\n+        return partitionKeysFilter.isNone() || partitionKeysFilter.getDomains().get().values().stream().anyMatch(Domain::isNone);\n+    }\n+\n+    /**\n+     * @param columnNames\n+     * @param partitionKeysFilter\n+     * @param assumeCanonicalPartitionKeys allow conversion of\n+     * @return the Domain for each partition key to either the wildcard or an equals check.\n+     * TupleDomain.none() or any column's Domain.isNone() -> Optional.empty()\n+     */\n+    public static Optional<List<String>> partitionKeyFilterToStringList(List<String> columnNames, TupleDomain<String> partitionKeysFilter, boolean assumeCanonicalPartitionKeys)\n+    {\n+        if (isPartitionKeyFilterFalse(partitionKeysFilter)) {\n+            return Optional.empty();\n+        }\n+\n+        checkArgument(partitionKeysFilter.getDomains().isPresent());\n+\n+        Map<String, Domain> domainMap = partitionKeysFilter.getDomains().orElse(ImmutableMap.of());\n+        List<String> partitionList = columnNames.stream().map(cn -> domainToString(domainMap.get(cn), assumeCanonicalPartitionKeys, HIVE_PARTITION_VALUE_WILDCARD)).collect(toImmutableList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3Njg0OA==", "bodyText": "will do. i'll check my other uses of stream()", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r474876848", "createdAt": "2020-08-21T19:08:22Z", "author": {"login": "rash67"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/MetastoreUtil.java", "diffHunk": "@@ -290,4 +321,118 @@ public static PrincipalPrivileges buildInitialPrivilegeSet(String tableOwner)\n                         .build(),\n                 ImmutableMultimap.of());\n     }\n+\n+    public static boolean isPartitionKeyFilterFalse(TupleDomain<String> partitionKeysFilter)\n+    {\n+        return partitionKeysFilter.isNone() || partitionKeysFilter.getDomains().get().values().stream().anyMatch(Domain::isNone);\n+    }\n+\n+    /**\n+     * @param columnNames\n+     * @param partitionKeysFilter\n+     * @param assumeCanonicalPartitionKeys allow conversion of\n+     * @return the Domain for each partition key to either the wildcard or an equals check.\n+     * TupleDomain.none() or any column's Domain.isNone() -> Optional.empty()\n+     */\n+    public static Optional<List<String>> partitionKeyFilterToStringList(List<String> columnNames, TupleDomain<String> partitionKeysFilter, boolean assumeCanonicalPartitionKeys)\n+    {\n+        if (isPartitionKeyFilterFalse(partitionKeysFilter)) {\n+            return Optional.empty();\n+        }\n+\n+        checkArgument(partitionKeysFilter.getDomains().isPresent());\n+\n+        Map<String, Domain> domainMap = partitionKeysFilter.getDomains().orElse(ImmutableMap.of());\n+        List<String> partitionList = columnNames.stream().map(cn -> domainToString(domainMap.get(cn), assumeCanonicalPartitionKeys, HIVE_PARTITION_VALUE_WILDCARD)).collect(toImmutableList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE5NjQyMg=="}, "originalCommit": null, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzkyMDI0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/MetastoreUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODo0NDo1OFrOHEOrvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODo0NDo1OFrOHEOrvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE5NjkyNQ==", "bodyText": "Nit: else is redundant", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r474196925", "createdAt": "2020-08-20T18:44:58Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/MetastoreUtil.java", "diffHunk": "@@ -290,4 +321,118 @@ public static PrincipalPrivileges buildInitialPrivilegeSet(String tableOwner)\n                         .build(),\n                 ImmutableMultimap.of());\n     }\n+\n+    public static boolean isPartitionKeyFilterFalse(TupleDomain<String> partitionKeysFilter)\n+    {\n+        return partitionKeysFilter.isNone() || partitionKeysFilter.getDomains().get().values().stream().anyMatch(Domain::isNone);\n+    }\n+\n+    /**\n+     * @param columnNames\n+     * @param partitionKeysFilter\n+     * @param assumeCanonicalPartitionKeys allow conversion of\n+     * @return the Domain for each partition key to either the wildcard or an equals check.\n+     * TupleDomain.none() or any column's Domain.isNone() -> Optional.empty()\n+     */\n+    public static Optional<List<String>> partitionKeyFilterToStringList(List<String> columnNames, TupleDomain<String> partitionKeysFilter, boolean assumeCanonicalPartitionKeys)\n+    {\n+        if (isPartitionKeyFilterFalse(partitionKeysFilter)) {\n+            return Optional.empty();\n+        }\n+\n+        checkArgument(partitionKeysFilter.getDomains().isPresent());\n+\n+        Map<String, Domain> domainMap = partitionKeysFilter.getDomains().orElse(ImmutableMap.of());\n+        List<String> partitionList = columnNames.stream().map(cn -> domainToString(domainMap.get(cn), assumeCanonicalPartitionKeys, HIVE_PARTITION_VALUE_WILDCARD)).collect(toImmutableList());\n+        return Optional.of(partitionList);\n+    }\n+\n+    /**\n+     * @param domain - domain expression for the column. null => TupleDomain.all()\n+     * @param assumeCanonicalPartitionKeys\n+     * @param partitionWildcardString wildcard\n+     * @return string for scalar values\n+     */\n+    public static String domainToString(Domain domain, boolean assumeCanonicalPartitionKeys, String partitionWildcardString)\n+    {\n+        if (domain != null && domain.isNullableSingleValue()) {\n+            return sqlScalarToString(domain.getType(), domain.getNullableSingleValue(), assumeCanonicalPartitionKeys, partitionWildcardString);\n+        }\n+        else { // null or not a single value", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzkzNTI3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/MetastoreUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODo0OTozNlrOHEO1bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMDoyODozMFrOHE8F4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE5OTQwNg==", "bodyText": "Are we trying to preserve order? Does that matter?", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r474199406", "createdAt": "2020-08-20T18:49:36Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/MetastoreUtil.java", "diffHunk": "@@ -290,4 +321,118 @@ public static PrincipalPrivileges buildInitialPrivilegeSet(String tableOwner)\n                         .build(),\n                 ImmutableMultimap.of());\n     }\n+\n+    public static boolean isPartitionKeyFilterFalse(TupleDomain<String> partitionKeysFilter)\n+    {\n+        return partitionKeysFilter.isNone() || partitionKeysFilter.getDomains().get().values().stream().anyMatch(Domain::isNone);\n+    }\n+\n+    /**\n+     * @param columnNames\n+     * @param partitionKeysFilter\n+     * @param assumeCanonicalPartitionKeys allow conversion of\n+     * @return the Domain for each partition key to either the wildcard or an equals check.\n+     * TupleDomain.none() or any column's Domain.isNone() -> Optional.empty()\n+     */\n+    public static Optional<List<String>> partitionKeyFilterToStringList(List<String> columnNames, TupleDomain<String> partitionKeysFilter, boolean assumeCanonicalPartitionKeys)\n+    {\n+        if (isPartitionKeyFilterFalse(partitionKeysFilter)) {\n+            return Optional.empty();\n+        }\n+\n+        checkArgument(partitionKeysFilter.getDomains().isPresent());\n+\n+        Map<String, Domain> domainMap = partitionKeysFilter.getDomains().orElse(ImmutableMap.of());\n+        List<String> partitionList = columnNames.stream().map(cn -> domainToString(domainMap.get(cn), assumeCanonicalPartitionKeys, HIVE_PARTITION_VALUE_WILDCARD)).collect(toImmutableList());\n+        return Optional.of(partitionList);\n+    }\n+\n+    /**\n+     * @param domain - domain expression for the column. null => TupleDomain.all()\n+     * @param assumeCanonicalPartitionKeys\n+     * @param partitionWildcardString wildcard\n+     * @return string for scalar values\n+     */\n+    public static String domainToString(Domain domain, boolean assumeCanonicalPartitionKeys, String partitionWildcardString)\n+    {\n+        if (domain != null && domain.isNullableSingleValue()) {\n+            return sqlScalarToString(domain.getType(), domain.getNullableSingleValue(), assumeCanonicalPartitionKeys, partitionWildcardString);\n+        }\n+        else { // null or not a single value\n+            return partitionWildcardString;\n+        }\n+    }\n+\n+    /**\n+     * @param type\n+     * @param value\n+     * @param assumeCanonicalPartitionKeys\n+     * @param partitionWildcardString\n+     * @return value converted a string format. Returns\n+     */\n+    public static String sqlScalarToString(Type type, Object value, boolean assumeCanonicalPartitionKeys, String partitionWildcardString)\n+    {\n+        if (value == null) {\n+            return HIVE_DEFAULT_DYNAMIC_PARTITION;\n+        }\n+        else if (type instanceof CharType) {\n+            Slice slice = (Slice) value;\n+            return padSpaces(slice, (CharType) type).toStringUtf8();\n+        }\n+        else if (type instanceof VarcharType) {\n+            Slice slice = (Slice) value;\n+            return slice.toStringUtf8();\n+        }\n+        else if (!assumeCanonicalPartitionKeys) {\n+            return partitionWildcardString;\n+        }\n+        else if (type instanceof DecimalType && !((DecimalType) type).isShort()) {\n+            Slice slice = (Slice) value;\n+            return Decimals.toString(slice, ((DecimalType) type).getScale());\n+        }\n+        else if (type instanceof DecimalType && ((DecimalType) type).isShort()) {\n+            return Decimals.toString((long) value, ((DecimalType) type).getScale());\n+        }\n+        else if (type instanceof DateType) {\n+            DateTimeFormatter dateTimeFormatter = ISODateTimeFormat.date().withZoneUTC();\n+            return dateTimeFormatter.print(TimeUnit.DAYS.toMillis((long) value));\n+        }\n+        else if (type instanceof TimestampType) {\n+            // we don't have time zone info, so just add a wildcard\n+            return partitionWildcardString;\n+        }\n+        else if (type instanceof TinyintType\n+                || type instanceof SmallintType\n+                || type instanceof IntegerType\n+                || type instanceof BigintType\n+                || type instanceof DoubleType\n+                || type instanceof RealType\n+                || type instanceof BooleanType) {\n+            return value.toString();\n+        }\n+        else {\n+            throw new PrestoException(NOT_SUPPORTED, format(\"Unsupported partition key type: %s\", type.getDisplayName()));\n+        }\n+    }\n+\n+    /**\n+     * This method creates a TupleDomain for each partitionKey specified\n+     *\n+     * @return filtered version of relevant Domains in effectivePredicate.\n+     */\n+    public static TupleDomain<String> computePartitionKeyFilter(List<HiveColumnHandle> partitionKeys, TupleDomain<ColumnHandle> effectivePredicate)\n+    {\n+        checkArgument(effectivePredicate.getDomains().isPresent());\n+\n+        Map<String, Domain> domains = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk0MDg5Nw==", "bodyText": "i don't think this matters any more since I realized any column that was all() would be missing and any conversion of the TupleDomain would have an ordered list of the columns\nthis is a relic from when I assumed I could iterate on the underlying String -> Domain map and needed to produce my value list in order", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r474940897", "createdAt": "2020-08-21T20:28:30Z", "author": {"login": "rash67"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/MetastoreUtil.java", "diffHunk": "@@ -290,4 +321,118 @@ public static PrincipalPrivileges buildInitialPrivilegeSet(String tableOwner)\n                         .build(),\n                 ImmutableMultimap.of());\n     }\n+\n+    public static boolean isPartitionKeyFilterFalse(TupleDomain<String> partitionKeysFilter)\n+    {\n+        return partitionKeysFilter.isNone() || partitionKeysFilter.getDomains().get().values().stream().anyMatch(Domain::isNone);\n+    }\n+\n+    /**\n+     * @param columnNames\n+     * @param partitionKeysFilter\n+     * @param assumeCanonicalPartitionKeys allow conversion of\n+     * @return the Domain for each partition key to either the wildcard or an equals check.\n+     * TupleDomain.none() or any column's Domain.isNone() -> Optional.empty()\n+     */\n+    public static Optional<List<String>> partitionKeyFilterToStringList(List<String> columnNames, TupleDomain<String> partitionKeysFilter, boolean assumeCanonicalPartitionKeys)\n+    {\n+        if (isPartitionKeyFilterFalse(partitionKeysFilter)) {\n+            return Optional.empty();\n+        }\n+\n+        checkArgument(partitionKeysFilter.getDomains().isPresent());\n+\n+        Map<String, Domain> domainMap = partitionKeysFilter.getDomains().orElse(ImmutableMap.of());\n+        List<String> partitionList = columnNames.stream().map(cn -> domainToString(domainMap.get(cn), assumeCanonicalPartitionKeys, HIVE_PARTITION_VALUE_WILDCARD)).collect(toImmutableList());\n+        return Optional.of(partitionList);\n+    }\n+\n+    /**\n+     * @param domain - domain expression for the column. null => TupleDomain.all()\n+     * @param assumeCanonicalPartitionKeys\n+     * @param partitionWildcardString wildcard\n+     * @return string for scalar values\n+     */\n+    public static String domainToString(Domain domain, boolean assumeCanonicalPartitionKeys, String partitionWildcardString)\n+    {\n+        if (domain != null && domain.isNullableSingleValue()) {\n+            return sqlScalarToString(domain.getType(), domain.getNullableSingleValue(), assumeCanonicalPartitionKeys, partitionWildcardString);\n+        }\n+        else { // null or not a single value\n+            return partitionWildcardString;\n+        }\n+    }\n+\n+    /**\n+     * @param type\n+     * @param value\n+     * @param assumeCanonicalPartitionKeys\n+     * @param partitionWildcardString\n+     * @return value converted a string format. Returns\n+     */\n+    public static String sqlScalarToString(Type type, Object value, boolean assumeCanonicalPartitionKeys, String partitionWildcardString)\n+    {\n+        if (value == null) {\n+            return HIVE_DEFAULT_DYNAMIC_PARTITION;\n+        }\n+        else if (type instanceof CharType) {\n+            Slice slice = (Slice) value;\n+            return padSpaces(slice, (CharType) type).toStringUtf8();\n+        }\n+        else if (type instanceof VarcharType) {\n+            Slice slice = (Slice) value;\n+            return slice.toStringUtf8();\n+        }\n+        else if (!assumeCanonicalPartitionKeys) {\n+            return partitionWildcardString;\n+        }\n+        else if (type instanceof DecimalType && !((DecimalType) type).isShort()) {\n+            Slice slice = (Slice) value;\n+            return Decimals.toString(slice, ((DecimalType) type).getScale());\n+        }\n+        else if (type instanceof DecimalType && ((DecimalType) type).isShort()) {\n+            return Decimals.toString((long) value, ((DecimalType) type).getScale());\n+        }\n+        else if (type instanceof DateType) {\n+            DateTimeFormatter dateTimeFormatter = ISODateTimeFormat.date().withZoneUTC();\n+            return dateTimeFormatter.print(TimeUnit.DAYS.toMillis((long) value));\n+        }\n+        else if (type instanceof TimestampType) {\n+            // we don't have time zone info, so just add a wildcard\n+            return partitionWildcardString;\n+        }\n+        else if (type instanceof TinyintType\n+                || type instanceof SmallintType\n+                || type instanceof IntegerType\n+                || type instanceof BigintType\n+                || type instanceof DoubleType\n+                || type instanceof RealType\n+                || type instanceof BooleanType) {\n+            return value.toString();\n+        }\n+        else {\n+            throw new PrestoException(NOT_SUPPORTED, format(\"Unsupported partition key type: %s\", type.getDisplayName()));\n+        }\n+    }\n+\n+    /**\n+     * This method creates a TupleDomain for each partitionKey specified\n+     *\n+     * @return filtered version of relevant Domains in effectivePredicate.\n+     */\n+    public static TupleDomain<String> computePartitionKeyFilter(List<HiveColumnHandle> partitionKeys, TupleDomain<ColumnHandle> effectivePredicate)\n+    {\n+        checkArgument(effectivePredicate.getDomains().isPresent());\n+\n+        Map<String, Domain> domains = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE5OTQwNg=="}, "originalCommit": null, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Mzk0NDc0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/alluxio/AlluxioHiveMetastore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODo1Mjo0MlrOHEO7yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMDozMDoyNlrOHE8MOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIwMTAzNA==", "bodyText": "No need for requireNonNull since the . access will throw NPE anyway", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r474201034", "createdAt": "2020-08-20T18:52:42Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -66,12 +69,14 @@\n public class AlluxioHiveMetastore\n         implements HiveMetastore\n {\n+    private final boolean assumeCanonicalPartitionKeys;\n     private TableMasterClient client;\n \n     @Inject\n-    public AlluxioHiveMetastore(TableMasterClient client)\n+    public AlluxioHiveMetastore(TableMasterClient client, AlluxioHiveMetastoreConfig metastoreConfig)\n     {\n         this.client = requireNonNull(client);\n+        this.assumeCanonicalPartitionKeys = requireNonNull(metastoreConfig).isAssumeCanonicalPartitionKeys();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk0MjUyMA==", "bodyText": "ah good point", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r474942520", "createdAt": "2020-08-21T20:30:26Z", "author": {"login": "rash67"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -66,12 +69,14 @@\n public class AlluxioHiveMetastore\n         implements HiveMetastore\n {\n+    private final boolean assumeCanonicalPartitionKeys;\n     private TableMasterClient client;\n \n     @Inject\n-    public AlluxioHiveMetastore(TableMasterClient client)\n+    public AlluxioHiveMetastore(TableMasterClient client, AlluxioHiveMetastoreConfig metastoreConfig)\n     {\n         this.client = requireNonNull(client);\n+        this.assumeCanonicalPartitionKeys = requireNonNull(metastoreConfig).isAssumeCanonicalPartitionKeys();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIwMTAzNA=="}, "originalCommit": null, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDk4NjI2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/file/FileHiveMetastore.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMTo0Nzo1NlrOHEYzag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QyMjoxMzoxMlrOHFQZUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM2MjczMA==", "bodyText": "We shouldn't need the assumeCanonicalPartitionKeys config or filtering here at all, as filtering by the metastore is best effort. This isn't being pushed down, so we can let the caller do it.", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r474362730", "createdAt": "2020-08-21T01:47:56Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/file/FileHiveMetastore.java", "diffHunk": "@@ -990,11 +994,24 @@ private boolean isValidPartition(Table table, String partitionName)\n     }\n \n     @Override\n-    public synchronized Optional<List<String>> getPartitionNamesByParts(HiveIdentity identity, String databaseName, String tableName, List<String> parts)\n+    public Optional<List<String>> getPartitionNamesByFilter(\n+            HiveIdentity identity,\n+            String databaseName,\n+            String tableName,\n+            List<String> columnNames,\n+            TupleDomain<String> partitionKeysFilter)\n     {\n-        // todo this should be more efficient by selectively walking the directory tree\n-        return getPartitionNames(identity, databaseName, tableName).map(partitionNames -> partitionNames.stream()\n-                .filter(partitionName -> partitionMatches(partitionName, parts))\n+        if (partitionKeysFilter.isNone()) {\n+            return Optional.of(ImmutableList.of());\n+        }\n+        Optional<List<String>> parts = partitionKeyFilterToStringList(columnNames, partitionKeysFilter, assumeCanonicalPartitionKeys);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk0OTExNg==", "bodyText": "I'm not sure I follow. previously, this information was indeed used by the caller to generate a List<String> parts that included the information. it would be a \"regression\" in the sense the caller would get a larger list.\nare you saying just pass false and let the caller deal with it to avoid having this config for AlluxioHiveMetastore ?\nthe Glue and Thrift impls will still need it", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r474949116", "createdAt": "2020-08-21T20:38:33Z", "author": {"login": "rash67"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/file/FileHiveMetastore.java", "diffHunk": "@@ -990,11 +994,24 @@ private boolean isValidPartition(Table table, String partitionName)\n     }\n \n     @Override\n-    public synchronized Optional<List<String>> getPartitionNamesByParts(HiveIdentity identity, String databaseName, String tableName, List<String> parts)\n+    public Optional<List<String>> getPartitionNamesByFilter(\n+            HiveIdentity identity,\n+            String databaseName,\n+            String tableName,\n+            List<String> columnNames,\n+            TupleDomain<String> partitionKeysFilter)\n     {\n-        // todo this should be more efficient by selectively walking the directory tree\n-        return getPartitionNames(identity, databaseName, tableName).map(partitionNames -> partitionNames.stream()\n-                .filter(partitionName -> partitionMatches(partitionName, parts))\n+        if (partitionKeysFilter.isNone()) {\n+            return Optional.of(ImmutableList.of());\n+        }\n+        Optional<List<String>> parts = partitionKeyFilterToStringList(columnNames, partitionKeysFilter, assumeCanonicalPartitionKeys);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM2MjczMA=="}, "originalCommit": null, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyMDQyNw==", "bodyText": "talked on slack and i get this, i've made the change", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r475020427", "createdAt": "2020-08-22T00:25:59Z", "author": {"login": "rash67"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/file/FileHiveMetastore.java", "diffHunk": "@@ -990,11 +994,24 @@ private boolean isValidPartition(Table table, String partitionName)\n     }\n \n     @Override\n-    public synchronized Optional<List<String>> getPartitionNamesByParts(HiveIdentity identity, String databaseName, String tableName, List<String> parts)\n+    public Optional<List<String>> getPartitionNamesByFilter(\n+            HiveIdentity identity,\n+            String databaseName,\n+            String tableName,\n+            List<String> columnNames,\n+            TupleDomain<String> partitionKeysFilter)\n     {\n-        // todo this should be more efficient by selectively walking the directory tree\n-        return getPartitionNames(identity, databaseName, tableName).map(partitionNames -> partitionNames.stream()\n-                .filter(partitionName -> partitionMatches(partitionName, parts))\n+        if (partitionKeysFilter.isNone()) {\n+            return Optional.of(ImmutableList.of());\n+        }\n+        Optional<List<String>> parts = partitionKeyFilterToStringList(columnNames, partitionKeysFilter, assumeCanonicalPartitionKeys);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM2MjczMA=="}, "originalCommit": null, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI3MzU1NA==", "bodyText": "isn't assumeCanonicalPartitionKeys applicable to some metastores and not the others  -- eg depending whether the call is over string representation or interpreted values?\nfor example it may turn out to be HMS- (and file-?) metastore specific?", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r475273554", "createdAt": "2020-08-23T22:13:12Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/file/FileHiveMetastore.java", "diffHunk": "@@ -990,11 +994,24 @@ private boolean isValidPartition(Table table, String partitionName)\n     }\n \n     @Override\n-    public synchronized Optional<List<String>> getPartitionNamesByParts(HiveIdentity identity, String databaseName, String tableName, List<String> parts)\n+    public Optional<List<String>> getPartitionNamesByFilter(\n+            HiveIdentity identity,\n+            String databaseName,\n+            String tableName,\n+            List<String> columnNames,\n+            TupleDomain<String> partitionKeysFilter)\n     {\n-        // todo this should be more efficient by selectively walking the directory tree\n-        return getPartitionNames(identity, databaseName, tableName).map(partitionNames -> partitionNames.stream()\n-                .filter(partitionName -> partitionMatches(partitionName, parts))\n+        if (partitionKeysFilter.isNone()) {\n+            return Optional.of(ImmutableList.of());\n+        }\n+        Optional<List<String>> parts = partitionKeyFilterToStringList(columnNames, partitionKeysFilter, assumeCanonicalPartitionKeys);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM2MjczMA=="}, "originalCommit": null, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDk5MTg2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/BridgingHiveMetastore.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMTo1MToyM1rOHEY2yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QwMDo0MDoxNFrOHFJEIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM2MzU5Mw==", "bodyText": "Should we drop the getPartitionNames() method from the ThriftMetastore interface? Then this can be a straight delegation.", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r474363593", "createdAt": "2020-08-21T01:51:23Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/BridgingHiveMetastore.java", "diffHunk": "@@ -319,15 +321,22 @@ private void alterTable(HiveIdentity identity, String databaseName, String table\n     }\n \n     @Override\n-    public Optional<List<String>> getPartitionNames(HiveIdentity identity, String databaseName, String tableName)\n+    public Optional<List<String>> getPartitionNamesByFilter(\n+            HiveIdentity identity,\n+            String databaseName,\n+            String tableName,\n+            List<String> columnNames,\n+            TupleDomain<String> partitionKeysFilter)\n     {\n-        return delegate.getPartitionNames(identity, databaseName, tableName);\n-    }\n+        if (partitionKeysFilter.isNone()) {\n+            return Optional.of(ImmutableList.of());\n+        }\n \n-    @Override\n-    public Optional<List<String>> getPartitionNamesByParts(HiveIdentity identity, String databaseName, String tableName, List<String> parts)\n-    {\n-        return delegate.getPartitionNamesByParts(identity, databaseName, tableName, parts);\n+        if (partitionKeysFilter.isAll()) {\n+            return delegate.getPartitionNames(identity, databaseName, tableName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk1MDQwOA==", "bodyText": "I thought about this, but I didn't know what to pass to thrift to say \"all\". This should, in theory, be just TupleDomain.all(), but i hit some snags\ni can look at it again", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r474950408", "createdAt": "2020-08-21T20:40:08Z", "author": {"login": "rash67"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/BridgingHiveMetastore.java", "diffHunk": "@@ -319,15 +321,22 @@ private void alterTable(HiveIdentity identity, String databaseName, String table\n     }\n \n     @Override\n-    public Optional<List<String>> getPartitionNames(HiveIdentity identity, String databaseName, String tableName)\n+    public Optional<List<String>> getPartitionNamesByFilter(\n+            HiveIdentity identity,\n+            String databaseName,\n+            String tableName,\n+            List<String> columnNames,\n+            TupleDomain<String> partitionKeysFilter)\n     {\n-        return delegate.getPartitionNames(identity, databaseName, tableName);\n-    }\n+        if (partitionKeysFilter.isNone()) {\n+            return Optional.of(ImmutableList.of());\n+        }\n \n-    @Override\n-    public Optional<List<String>> getPartitionNamesByParts(HiveIdentity identity, String databaseName, String tableName, List<String> parts)\n-    {\n-        return delegate.getPartitionNamesByParts(identity, databaseName, tableName, parts);\n+        if (partitionKeysFilter.isAll()) {\n+            return delegate.getPartitionNames(identity, databaseName, tableName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM2MzU5Mw=="}, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyMDUxNw==", "bodyText": "I made this change and I'm waiting for a new CI (pushed right now) to run to verify that my translation of TupleDomain.all() to a list of \"\" works. it should as this was the previous behavior.", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r475020517", "createdAt": "2020-08-22T00:26:44Z", "author": {"login": "rash67"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/BridgingHiveMetastore.java", "diffHunk": "@@ -319,15 +321,22 @@ private void alterTable(HiveIdentity identity, String databaseName, String table\n     }\n \n     @Override\n-    public Optional<List<String>> getPartitionNames(HiveIdentity identity, String databaseName, String tableName)\n+    public Optional<List<String>> getPartitionNamesByFilter(\n+            HiveIdentity identity,\n+            String databaseName,\n+            String tableName,\n+            List<String> columnNames,\n+            TupleDomain<String> partitionKeysFilter)\n     {\n-        return delegate.getPartitionNames(identity, databaseName, tableName);\n-    }\n+        if (partitionKeysFilter.isNone()) {\n+            return Optional.of(ImmutableList.of());\n+        }\n \n-    @Override\n-    public Optional<List<String>> getPartitionNamesByParts(HiveIdentity identity, String databaseName, String tableName, List<String> parts)\n-    {\n-        return delegate.getPartitionNamesByParts(identity, databaseName, tableName, parts);\n+        if (partitionKeysFilter.isAll()) {\n+            return delegate.getPartitionNames(identity, databaseName, tableName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM2MzU5Mw=="}, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE1MzQ0Mg==", "bodyText": "I removed this and what happens is that once it's down to the thrift API, it seems like any value for a partitionKey in the 'parts' api that is \"\" (our wildcard value) gets removed. the parts api then fails when the list is empty\nwe might be able to solve this when we translate it to an expression, but for now, i think i need to restore the previous special case", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r475153442", "createdAt": "2020-08-23T00:40:14Z", "author": {"login": "rash67"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/BridgingHiveMetastore.java", "diffHunk": "@@ -319,15 +321,22 @@ private void alterTable(HiveIdentity identity, String databaseName, String table\n     }\n \n     @Override\n-    public Optional<List<String>> getPartitionNames(HiveIdentity identity, String databaseName, String tableName)\n+    public Optional<List<String>> getPartitionNamesByFilter(\n+            HiveIdentity identity,\n+            String databaseName,\n+            String tableName,\n+            List<String> columnNames,\n+            TupleDomain<String> partitionKeysFilter)\n     {\n-        return delegate.getPartitionNames(identity, databaseName, tableName);\n-    }\n+        if (partitionKeysFilter.isNone()) {\n+            return Optional.of(ImmutableList.of());\n+        }\n \n-    @Override\n-    public Optional<List<String>> getPartitionNamesByParts(HiveIdentity identity, String databaseName, String tableName, List<String> parts)\n-    {\n-        return delegate.getPartitionNamesByParts(identity, databaseName, tableName, parts);\n+        if (partitionKeysFilter.isAll()) {\n+            return delegate.getPartitionNames(identity, databaseName, tableName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM2MzU5Mw=="}, "originalCommit": null, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzczMjI0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/SemiTransactionalHiveMetastore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjowOTo1NFrOHEzDTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMDoyOToxNFrOHE8INg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc5Mjc4Mw==", "bodyText": "\"this\" means what here?", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r474792783", "createdAt": "2020-08-21T16:09:54Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/SemiTransactionalHiveMetastore.java", "diffHunk": "@@ -635,34 +652,17 @@ public synchronized void truncateUnpartitionedTable(ConnectorSession session, St\n         }\n         // add newly-added partitions to the results from underlying metastore\n         if (!partitionActionsOfTable.isEmpty()) {\n-            List<String> columnNames = table.get().getPartitionColumns().stream().map(Column::getName).collect(Collectors.toList());\n+            // the top of the function guards against TupleDomain.none() so this cannot be empty", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk0MTQ5NA==", "bodyText": "removing this comment, holdover from when this still did filtering. it referred to the columnNames\nI'll remove the comment", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r474941494", "createdAt": "2020-08-21T20:29:14Z", "author": {"login": "rash67"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/SemiTransactionalHiveMetastore.java", "diffHunk": "@@ -635,34 +652,17 @@ public synchronized void truncateUnpartitionedTable(ConnectorSession session, St\n         }\n         // add newly-added partitions to the results from underlying metastore\n         if (!partitionActionsOfTable.isEmpty()) {\n-            List<String> columnNames = table.get().getPartitionColumns().stream().map(Column::getName).collect(Collectors.toList());\n+            // the top of the function guards against TupleDomain.none() so this cannot be empty", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc5Mjc4Mw=="}, "originalCommit": null, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NjQxNDM4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/HiveMetastore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzozOTozNVrOHHjycQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzozOTozNVrOHHjycQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY4ODQzMw==", "bodyText": "Remove blank line before Javadoc", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r477688433", "createdAt": "2020-08-26T23:39:35Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/HiveMetastore.java", "diffHunk": "@@ -85,9 +86,18 @@\n \n     Optional<Partition> getPartition(HiveIdentity identity, Table table, List<String> partitionValues);\n \n-    Optional<List<String>> getPartitionNames(HiveIdentity identity, String databaseName, String tableName);\n+    /**\n+     * return a list of partition names where partitionKeysFilter is used as a hint to each implementation.\n+     *\n+     * @param databaseName the name of the database\n+     * @param tableName the name of the table\n+     * @param columnNames the list of partition column names\n+     * @param partitionKeysFilter map of filters (Domain) for each partition column\n+     * @return optionally, a list of strings where each entry is in the form of {key}={value}\n+     * @see TupleDomain\n+     */\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NjQyMTkxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/alluxio/AlluxioHiveMetastore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo0MDoyNVrOHHj3lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo1MjoyM1rOHHk9oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY4OTc0OA==", "bodyText": "We can remove all this client side filtering here since it's only a hint. So I think the whole method can be\nreturn ProtoUtils.toPartitionInfoList(\n        client.readTable(databaseName, tableName, Constraint.getDefaultInstance()));", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r477689748", "createdAt": "2020-08-26T23:40:25Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -335,23 +338,22 @@ public void dropColumn(HiveIdentity identity, String databaseName, String tableN\n     }\n \n     @Override\n-    public Optional<List<String>> getPartitionNames(HiveIdentity identity, String databaseName, String tableName)\n+    public Optional<List<String>> getPartitionNamesByFilter(\n+            HiveIdentity identity,\n+            String databaseName,\n+            String tableName,\n+            List<String> columnNames,\n+            TupleDomain<String> partitionKeysFilter)\n     {\n-        throw new PrestoException(NOT_SUPPORTED, \"getPartitionNames\");\n-    }\n+        if (partitionKeysFilter.isNone()) {\n+            return Optional.of(Collections.emptyList());\n+        }\n+        Optional<List<String>> optionalParts = partitionKeyFilterToStringList(columnNames, partitionKeysFilter, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzcwNzY4MA==", "bodyText": "got it. it looks like I need a mapping of PartitionInfo::getPartitionName as well", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r477707680", "createdAt": "2020-08-26T23:52:23Z", "author": {"login": "rash67"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -335,23 +338,22 @@ public void dropColumn(HiveIdentity identity, String databaseName, String tableN\n     }\n \n     @Override\n-    public Optional<List<String>> getPartitionNames(HiveIdentity identity, String databaseName, String tableName)\n+    public Optional<List<String>> getPartitionNamesByFilter(\n+            HiveIdentity identity,\n+            String databaseName,\n+            String tableName,\n+            List<String> columnNames,\n+            TupleDomain<String> partitionKeysFilter)\n     {\n-        throw new PrestoException(NOT_SUPPORTED, \"getPartitionNames\");\n-    }\n+        if (partitionKeysFilter.isNone()) {\n+            return Optional.of(Collections.emptyList());\n+        }\n+        Optional<List<String>> optionalParts = partitionKeyFilterToStringList(columnNames, partitionKeysFilter, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY4OTc0OA=="}, "originalCommit": null, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NjQzMjcyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/alluxio/AlluxioHiveMetastore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo0MTozOVrOHHj-pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo0MTozOVrOHHj-pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY5MTU1Nw==", "bodyText": "The config is not needed", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r477691557", "createdAt": "2020-08-26T23:41:39Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -69,7 +72,7 @@\n     private TableMasterClient client;\n \n     @Inject\n-    public AlluxioHiveMetastore(TableMasterClient client)\n+    public AlluxioHiveMetastore(TableMasterClient client, AlluxioHiveMetastoreConfig metastoreConfig)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NjQzNzY5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/spi/block/HiveBlockEncodingSerde.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo0MjoxNVrOHHkB8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo1Mzo1M1rOHHlGRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY5MjQwMw==", "bodyText": "Remove the second sentence as it doesn't really fit here", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r477692403", "createdAt": "2020-08-26T23:42:15Z", "author": {"login": "electrum"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/spi/block/HiveBlockEncodingSerde.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.spi.block;\n+\n+import io.airlift.slice.SliceInput;\n+import io.airlift.slice.SliceOutput;\n+import io.prestosql.spi.block.ArrayBlockEncoding;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.BlockEncoding;\n+import io.prestosql.spi.block.BlockEncodingSerde;\n+import io.prestosql.spi.block.ByteArrayBlockEncoding;\n+import io.prestosql.spi.block.DictionaryBlockEncoding;\n+import io.prestosql.spi.block.Int128ArrayBlockEncoding;\n+import io.prestosql.spi.block.IntArrayBlockEncoding;\n+import io.prestosql.spi.block.LazyBlockEncoding;\n+import io.prestosql.spi.block.LongArrayBlockEncoding;\n+import io.prestosql.spi.block.RowBlockEncoding;\n+import io.prestosql.spi.block.RunLengthBlockEncoding;\n+import io.prestosql.spi.block.ShortArrayBlockEncoding;\n+import io.prestosql.spi.block.SingleRowBlockEncoding;\n+import io.prestosql.spi.block.VariableWidthBlockEncoding;\n+\n+import javax.inject.Inject;\n+\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+// This class is exactly the same as BlockEncodingManager. They are in SPI and don't have access to InternalBlockEncodingSerde.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzcwOTg5Mg==", "bodyText": "i thought i did these, will update", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r477709892", "createdAt": "2020-08-26T23:53:53Z", "author": {"login": "rash67"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/spi/block/HiveBlockEncodingSerde.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.spi.block;\n+\n+import io.airlift.slice.SliceInput;\n+import io.airlift.slice.SliceOutput;\n+import io.prestosql.spi.block.ArrayBlockEncoding;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.BlockEncoding;\n+import io.prestosql.spi.block.BlockEncodingSerde;\n+import io.prestosql.spi.block.ByteArrayBlockEncoding;\n+import io.prestosql.spi.block.DictionaryBlockEncoding;\n+import io.prestosql.spi.block.Int128ArrayBlockEncoding;\n+import io.prestosql.spi.block.IntArrayBlockEncoding;\n+import io.prestosql.spi.block.LazyBlockEncoding;\n+import io.prestosql.spi.block.LongArrayBlockEncoding;\n+import io.prestosql.spi.block.RowBlockEncoding;\n+import io.prestosql.spi.block.RunLengthBlockEncoding;\n+import io.prestosql.spi.block.ShortArrayBlockEncoding;\n+import io.prestosql.spi.block.SingleRowBlockEncoding;\n+import io.prestosql.spi.block.VariableWidthBlockEncoding;\n+\n+import javax.inject.Inject;\n+\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+// This class is exactly the same as BlockEncodingManager. They are in SPI and don't have access to InternalBlockEncodingSerde.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY5MjQwMw=="}, "originalCommit": null, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NjQ0NTUyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/metastore/TestMetastoreUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo0MzoxMlrOHHkHNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo1NDowNlrOHHlHgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY5Mzc0OQ==", "bodyText": "Remove the printing. Probably add an assertion or remove the entire test method.", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r477693749", "createdAt": "2020-08-26T23:43:12Z", "author": {"login": "electrum"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/metastore/TestMetastoreUtil.java", "diffHunk": "@@ -153,4 +156,12 @@ public void testHiveSchemaPartition()\n         Properties actual = MetastoreUtil.getHiveSchema(ThriftMetastoreUtil.fromMetastoreApiPartition(TEST_PARTITION_WITH_UNSUPPORTED_FIELDS), ThriftMetastoreUtil.fromMetastoreApiTable(TEST_TABLE_WITH_UNSUPPORTED_FIELDS, TEST_SCHEMA));\n         assertEquals(actual, expected);\n     }\n+\n+    @Test\n+    public void testTupleDomainToString()\n+            throws Exception\n+    {\n+        Optional<List<String>> ds = MetastoreUtil.partitionKeyFilterToStringList(Arrays.asList(\"ds1\", \"ds2\", \"ds3\"), TupleDomain.all(), false);\n+        System.err.println(ds.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzcxMDIxMA==", "bodyText": "oops again, yea i'll assert or remove it", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r477710210", "createdAt": "2020-08-26T23:54:06Z", "author": {"login": "rash67"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/metastore/TestMetastoreUtil.java", "diffHunk": "@@ -153,4 +156,12 @@ public void testHiveSchemaPartition()\n         Properties actual = MetastoreUtil.getHiveSchema(ThriftMetastoreUtil.fromMetastoreApiPartition(TEST_PARTITION_WITH_UNSUPPORTED_FIELDS), ThriftMetastoreUtil.fromMetastoreApiTable(TEST_TABLE_WITH_UNSUPPORTED_FIELDS, TEST_SCHEMA));\n         assertEquals(actual, expected);\n     }\n+\n+    @Test\n+    public void testTupleDomainToString()\n+            throws Exception\n+    {\n+        Optional<List<String>> ds = MetastoreUtil.partitionKeyFilterToStringList(Arrays.asList(\"ds1\", \"ds2\", \"ds3\"), TupleDomain.all(), false);\n+        System.err.println(ds.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY5Mzc0OQ=="}, "originalCommit": null, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MDAzNzg0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/ThriftHiveMetastore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMTozOToyNlrOHkKMwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMTo0MDoyOFrOHkKOvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY3Nzg4OA==", "bodyText": "the \"getPartitionNamesByParts\", stats.getGetPartitionNamesByParts()... above should be renamed too.", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r507677888", "createdAt": "2020-10-19T11:39:26Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/ThriftHiveMetastore.java", "diffHunk": "@@ -1141,39 +1146,31 @@ public void alterTable(HiveIdentity identity, String databaseName, String tableN\n     }\n \n     @Override\n-    public Optional<List<String>> getPartitionNames(HiveIdentity identity, String databaseName, String tableName)\n+    public Optional<List<String>> getPartitionNamesByFilter(HiveIdentity identity, String databaseName, String tableName, List<String> columnNames, TupleDomain<String> partitionKeysFilter)\n     {\n-        try {\n-            return retry()\n-                    .stopOn(NoSuchObjectException.class)\n-                    .stopOnIllegalExceptions()\n-                    .run(\"getPartitionNames\", stats.getGetPartitionNames().wrap(() -> {\n-                        try (ThriftMetastoreClient client = createMetastoreClient(identity)) {\n-                            return Optional.of(client.getPartitionNames(databaseName, tableName));\n-                        }\n-                    }));\n-        }\n-        catch (NoSuchObjectException e) {\n-            return Optional.empty();\n-        }\n-        catch (TException e) {\n-            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n-        }\n-        catch (Exception e) {\n-            throw propagate(e);\n+        Optional<List<String>> parts = partitionKeyFilterToStringList(columnNames, partitionKeysFilter, assumeCanonicalPartitionKeys);\n+        Preconditions.checkArgument(!columnNames.isEmpty() || partitionKeysFilter.isAll(), \"must pass in all columnNames or the filter must be all\");\n+        if (parts.isEmpty()) {\n+            return Optional.of(ImmutableList.of());\n         }\n-    }\n \n-    @Override\n-    public Optional<List<String>> getPartitionNamesByParts(HiveIdentity identity, String databaseName, String tableName, List<String> parts)\n-    {\n         try {\n+            if (partitionKeysFilter.isAll()) {\n+                return retry()\n+                        .stopOn(NoSuchObjectException.class)\n+                        .stopOnIllegalExceptions()\n+                        .run(\"getPartitionNames\", stats.getGetPartitionNames().wrap(() -> {\n+                            try (ThriftMetastoreClient client = createMetastoreClient(identity)) {\n+                                return Optional.of(client.getPartitionNames(databaseName, tableName));\n+                            }\n+                        }));\n+            }\n             return retry()\n                     .stopOn(NoSuchObjectException.class)\n                     .stopOnIllegalExceptions()\n                     .run(\"getPartitionNamesByParts\", stats.getGetPartitionNamesByParts().wrap(() -> {\n                         try (ThriftMetastoreClient client = createMetastoreClient(identity)) {\n-                            return Optional.of(client.getPartitionNamesFiltered(databaseName, tableName, parts));\n+                            return Optional.of(client.getPartitionNamesFiltered(databaseName, tableName, parts.get()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43843b2499bfe6d6245df51efd4bf82f54db424e"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY3ODM5OQ==", "bodyText": "nvrm, i see this is pre-existing... still worth updating", "url": "https://github.com/trinodb/trino/pull/4748#discussion_r507678399", "createdAt": "2020-10-19T11:40:28Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/ThriftHiveMetastore.java", "diffHunk": "@@ -1141,39 +1146,31 @@ public void alterTable(HiveIdentity identity, String databaseName, String tableN\n     }\n \n     @Override\n-    public Optional<List<String>> getPartitionNames(HiveIdentity identity, String databaseName, String tableName)\n+    public Optional<List<String>> getPartitionNamesByFilter(HiveIdentity identity, String databaseName, String tableName, List<String> columnNames, TupleDomain<String> partitionKeysFilter)\n     {\n-        try {\n-            return retry()\n-                    .stopOn(NoSuchObjectException.class)\n-                    .stopOnIllegalExceptions()\n-                    .run(\"getPartitionNames\", stats.getGetPartitionNames().wrap(() -> {\n-                        try (ThriftMetastoreClient client = createMetastoreClient(identity)) {\n-                            return Optional.of(client.getPartitionNames(databaseName, tableName));\n-                        }\n-                    }));\n-        }\n-        catch (NoSuchObjectException e) {\n-            return Optional.empty();\n-        }\n-        catch (TException e) {\n-            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n-        }\n-        catch (Exception e) {\n-            throw propagate(e);\n+        Optional<List<String>> parts = partitionKeyFilterToStringList(columnNames, partitionKeysFilter, assumeCanonicalPartitionKeys);\n+        Preconditions.checkArgument(!columnNames.isEmpty() || partitionKeysFilter.isAll(), \"must pass in all columnNames or the filter must be all\");\n+        if (parts.isEmpty()) {\n+            return Optional.of(ImmutableList.of());\n         }\n-    }\n \n-    @Override\n-    public Optional<List<String>> getPartitionNamesByParts(HiveIdentity identity, String databaseName, String tableName, List<String> parts)\n-    {\n         try {\n+            if (partitionKeysFilter.isAll()) {\n+                return retry()\n+                        .stopOn(NoSuchObjectException.class)\n+                        .stopOnIllegalExceptions()\n+                        .run(\"getPartitionNames\", stats.getGetPartitionNames().wrap(() -> {\n+                            try (ThriftMetastoreClient client = createMetastoreClient(identity)) {\n+                                return Optional.of(client.getPartitionNames(databaseName, tableName));\n+                            }\n+                        }));\n+            }\n             return retry()\n                     .stopOn(NoSuchObjectException.class)\n                     .stopOnIllegalExceptions()\n                     .run(\"getPartitionNamesByParts\", stats.getGetPartitionNamesByParts().wrap(() -> {\n                         try (ThriftMetastoreClient client = createMetastoreClient(identity)) {\n-                            return Optional.of(client.getPartitionNamesFiltered(databaseName, tableName, parts));\n+                            return Optional.of(client.getPartitionNamesFiltered(databaseName, tableName, parts.get()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY3Nzg4OA=="}, "originalCommit": {"oid": "43843b2499bfe6d6245df51efd4bf82f54db424e"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3410, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}