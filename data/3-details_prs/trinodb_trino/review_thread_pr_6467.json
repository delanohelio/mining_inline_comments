{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2NjcwMjU1", "number": 6467, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMzozMzoyOFrOFJ5KCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQyMTo0Mzo0NFrOFKgpCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTE3OTYzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/gen/BytecodeUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMzozMzoyOFrOIMacYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMzozMzoyOFrOIMacYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg4NzA3NA==", "bodyText": "in #6429", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r549887074", "createdAt": "2020-12-29T23:33:28Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/gen/BytecodeUtils.java", "diffHunk": "@@ -209,7 +209,7 @@ public static BytecodeNode generateInvocation(\n     private static Function<Optional<Class<?>>, BytecodeNode> simpleArgument(BytecodeNode argument)\n     {\n         return lambdaInterface -> {\n-            checkArgument(!lambdaInterface.isPresent(), \"Simple method invocation can not be used with functions that have lambda arguments\");\n+            checkArgument(lambdaInterface.isEmpty(), \"Simple method invocation can not be used with functions that have lambda arguments\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTE4MDczOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/gen/BytecodeUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMzozNDowNFrOIMac4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMzozNDowNFrOIMac4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg4NzIwMg==", "bodyText": "we prefer comments on line before", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r549887202", "createdAt": "2020-12-29T23:34:04Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/gen/BytecodeUtils.java", "diffHunk": "@@ -269,37 +269,32 @@ else if (functionMetadata.getArgumentDefinitions().get(i).isNullable()) {\n                 true);\n         FunctionInvoker functionInvoker = functionInvokerProvider.apply(invocationConvention);\n \n-        Binding binding = binder.bind(functionInvoker.getMethodHandle());\n-\n         LabelNode end = new LabelNode(\"end\");\n         BytecodeBlock block = new BytecodeBlock()\n                 .setDescription(\"invoke \" + functionMetadata.getSignature().getName());\n \n-        Optional<BytecodeNode> instance = functionInvoker.getInstanceFactory()\n-                .map(instanceFactory);\n-\n-        // Index of current parameter in the MethodHandle\n-        int currentParameterIndex = 0;\n-\n-        // Index of parameter (without @IsNull) in Presto function\n-        int realParameterIndex = 0;\n-\n-        // Index of function argument types\n-        int lambdaArgumentIndex = 0;\n-\n+        Binding binding = binder.bind(functionInvoker.getMethodHandle());\n         MethodType methodType = binding.getType();\n         Class<?> returnType = methodType.returnType();\n         Class<?> unboxedReturnType = Primitives.unwrap(returnType);\n \n+        // Types on the stack as the parameters are processed\n         List<Class<?>> stackTypes = new ArrayList<>();\n-        boolean boundInstance = false;\n+\n+        Optional<BytecodeNode> instance = functionInvoker.getInstanceFactory().map(instanceFactory);\n+        boolean instanceIsBound = false;\n+\n+        int currentParameterIndex = 0; // Index of current parameter in the MethodHandle", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTE4NDA0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/gen/BytecodeUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMzozNjoxNlrOIMaejQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMzo1Nzo1NFrOIMathw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg4NzYyOQ==", "bodyText": "was lack of this cast exploitable with any test today?", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r549887629", "createdAt": "2020-12-29T23:36:16Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/gen/BytecodeUtils.java", "diffHunk": "@@ -345,6 +350,9 @@ else if (type == ConnectorSession.class) {\n         if (functionMetadata.isNullable()) {\n             block.append(unboxPrimitiveIfNecessary(scope, returnType));\n         }\n+        if (Object.class.equals(returnType)) {\n+            block.comment(\"Cast to proper SQL return type\").checkCast(sqlReturnType.getJavaType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg5MTQ2Mw==", "bodyText": "After the change I made to ArraySubscriptOperator, I am not aware of any functions that would require this cast, but I wouldn't be surprised if some existed.", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r549891463", "createdAt": "2020-12-29T23:57:54Z", "author": {"login": "jirassimok"}, "path": "presto-main/src/main/java/io/prestosql/sql/gen/BytecodeUtils.java", "diffHunk": "@@ -345,6 +350,9 @@ else if (type == ConnectorSession.class) {\n         if (functionMetadata.isNullable()) {\n             block.append(unboxPrimitiveIfNecessary(scope, returnType));\n         }\n+        if (Object.class.equals(returnType)) {\n+            block.comment(\"Cast to proper SQL return type\").checkCast(sqlReturnType.getJavaType());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg4NzYyOQ=="}, "originalCommit": null, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTE4NTg3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/gen/BytecodeUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMzozNzozOVrOIMafiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQxNDo0Mzo1MlrOIM_qcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg4Nzg4MA==", "bodyText": "Why equals? Would \"object.class.isAssignableFrom returntype && returntype != sqlReturnType.getJavaType()\" be better?", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r549887880", "createdAt": "2020-12-29T23:37:39Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/gen/BytecodeUtils.java", "diffHunk": "@@ -345,6 +350,9 @@ else if (type == ConnectorSession.class) {\n         if (functionMetadata.isNullable()) {\n             block.append(unboxPrimitiveIfNecessary(scope, returnType));\n         }\n+        if (Object.class.equals(returnType)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ5Njg4MQ==", "bodyText": "This check and cast isn't in the PR any more, but yes, that probably would have been better.", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r550496881", "createdAt": "2020-12-31T14:43:52Z", "author": {"login": "jirassimok"}, "path": "presto-main/src/main/java/io/prestosql/sql/gen/BytecodeUtils.java", "diffHunk": "@@ -345,6 +350,9 @@ else if (type == ConnectorSession.class) {\n         if (functionMetadata.isNullable()) {\n             block.append(unboxPrimitiveIfNecessary(scope, returnType));\n         }\n+        if (Object.class.equals(returnType)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg4Nzg4MA=="}, "originalCommit": null, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTE4NjY3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/ArraySubscriptOperator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMzozODoyMFrOIMaf-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMzo0ODo0MlrOIManHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg4Nzk5NQ==", "bodyText": "squash! Fix array subscripting for SQL types represented as Objects\n\nremove squash from the message", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r549887995", "createdAt": "2020-12-29T23:38:20Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/ArraySubscriptOperator.java", "diffHunk": "@@ -77,7 +77,9 @@ else if (elementType.getJavaType() == Slice.class) {\n             methodHandle = METHOD_HANDLE_SLICE;\n         }\n         else {\n-            methodHandle = METHOD_HANDLE_OBJECT;\n+            methodHandle = METHOD_HANDLE_OBJECT.asType(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg4OTgyMw==", "bodyText": "I'm going to squash it in the future.", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r549889823", "createdAt": "2020-12-29T23:48:42Z", "author": {"login": "jirassimok"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/ArraySubscriptOperator.java", "diffHunk": "@@ -77,7 +77,9 @@ else if (elementType.getJavaType() == Slice.class) {\n             methodHandle = METHOD_HANDLE_SLICE;\n         }\n         else {\n-            methodHandle = METHOD_HANDLE_OBJECT;\n+            methodHandle = METHOD_HANDLE_OBJECT.asType(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg4Nzk5NQ=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTE4ODcwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/ArraySubscriptOperator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMzozOTo1M1rOIMahDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMzozOTo1M1rOIMahDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg4ODI3MA==", "bodyText": "Typically this comment would go before this line (standalone).\nBut I think it's fine to go without a comment at all here", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r549888270", "createdAt": "2020-12-29T23:39:53Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/ArraySubscriptOperator.java", "diffHunk": "@@ -77,7 +77,9 @@ else if (elementType.getJavaType() == Slice.class) {\n             methodHandle = METHOD_HANDLE_SLICE;\n         }\n         else {\n-            methodHandle = METHOD_HANDLE_OBJECT;\n+            methodHandle = METHOD_HANDLE_OBJECT.asType(\n+                    // Force this operator to return the element type instead of Object", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTE4OTIzOnYy", "diffSide": "LEFT", "path": "presto-main/src/main/java/io/prestosql/sql/gen/BytecodeUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMzo0MDoyOVrOIMahYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMzo0OTowOFrOIManeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg4ODM1NA==", "bodyText": "This got reverted. Was that an abandoned attempt approach?", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r549888354", "createdAt": "2020-12-29T23:40:29Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/gen/BytecodeUtils.java", "diffHunk": "@@ -350,9 +345,6 @@ else if (type == ConnectorSession.class) {\n         if (functionMetadata.isNullable()) {\n             block.append(unboxPrimitiveIfNecessary(scope, returnType));\n         }\n-        if (Object.class.equals(returnType)) {\n-            block.comment(\"Cast to proper SQL return type\").checkCast(sqlReturnType.getJavaType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg4OTkxMg==", "bodyText": "Yes; see my initial PR comment.", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r549889912", "createdAt": "2020-12-29T23:49:08Z", "author": {"login": "jirassimok"}, "path": "presto-main/src/main/java/io/prestosql/sql/gen/BytecodeUtils.java", "diffHunk": "@@ -350,9 +345,6 @@ else if (type == ConnectorSession.class) {\n         if (functionMetadata.isNullable()) {\n             block.append(unboxPrimitiveIfNecessary(scope, returnType));\n         }\n-        if (Object.class.equals(returnType)) {\n-            block.comment(\"Cast to proper SQL return type\").checkCast(sqlReturnType.getJavaType());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg4ODM1NA=="}, "originalCommit": null, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTE5MTk0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/type/TestArrayOperators.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMzo0Mjo1MFrOIMaixA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQxNDo0NTowM1rOIM_rKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg4ODcwOA==", "bodyText": "Looks very sturdy but then the expression below doesn't validate that the expression used is indeed a timestamp nanos, so the value of this check is comemntary\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Verify that timestamps with nanoseconds are represented as a non-slice object\n          \n          \n            \n                    assertTrue(TIMESTAMP_NANOS.getJavaType() == LongTimestamp.class && !Slice.class.isAssignableFrom(LongTimestamp.class));\n          \n          \n            \n                    // timestamp(9) has LongTimestamp stack representation (Object-based)", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r549888708", "createdAt": "2020-12-29T23:42:50Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/type/TestArrayOperators.java", "diffHunk": "@@ -749,6 +752,17 @@ public void testSubscript()\n         assertDecimalFunction(\"ARRAY [2.22222222222222222, 2.3][1]\", decimal(\"2.22222222222222222\"));\n     }\n \n+    @Test\n+    public void testObjectSubscript()\n+    {\n+        // Verify that timestamps with nanoseconds are represented as a non-slice object\n+        assertTrue(TIMESTAMP_NANOS.getJavaType() == LongTimestamp.class && !Slice.class.isAssignableFrom(LongTimestamp.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ5NzA2NA==", "bodyText": "I've removed that check and expanded the test slightly.", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r550497064", "createdAt": "2020-12-31T14:45:03Z", "author": {"login": "jirassimok"}, "path": "presto-main/src/test/java/io/prestosql/type/TestArrayOperators.java", "diffHunk": "@@ -749,6 +752,17 @@ public void testSubscript()\n         assertDecimalFunction(\"ARRAY [2.22222222222222222, 2.3][1]\", decimal(\"2.22222222222222222\"));\n     }\n \n+    @Test\n+    public void testObjectSubscript()\n+    {\n+        // Verify that timestamps with nanoseconds are represented as a non-slice object\n+        assertTrue(TIMESTAMP_NANOS.getJavaType() == LongTimestamp.class && !Slice.class.isAssignableFrom(LongTimestamp.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg4ODcwOA=="}, "originalCommit": null, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTE5MzQxOnYy", "diffSide": "LEFT", "path": "presto-main/src/test/java/io/prestosql/type/TestArrayOperators.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMzo0Mzo0NlrOIMajeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMzo0Mzo0NlrOIMajeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg4ODg4OQ==", "bodyText": "and it's gone?", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r549888889", "createdAt": "2020-12-29T23:43:46Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/type/TestArrayOperators.java", "diffHunk": "@@ -752,17 +749,6 @@ public void testSubscript()\n         assertDecimalFunction(\"ARRAY [2.22222222222222222, 2.3][1]\", decimal(\"2.22222222222222222\"));\n     }\n \n-    @Test\n-    public void testObjectSubscript()\n-    {\n-        // Verify that timestamps with nanoseconds are represented as a non-slice object\n-        assertTrue(TIMESTAMP_NANOS.getJavaType() == LongTimestamp.class && !Slice.class.isAssignableFrom(LongTimestamp.class));\n-        assertFunction(\n-                \"CAST((ARRAY [TIMESTAMP '1970-01-01 00:00:00.000000001'])[1] AS VARCHAR(30))\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTE5NTgyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMzo0NTozN1rOIMakug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMDowMzo1OVrOIMaxMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg4OTIxMA==", "bodyText": "The check was previously reversed, so what is actually satisfied is equality.\nAnd indeed, the stack representation is not polymorphic today, so equality can be demanded.", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r549889210", "createdAt": "2020-12-29T23:45:37Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataManager.java", "diffHunk": "@@ -2025,11 +2025,13 @@ private static void verifyMethodHandleSignature(BoundSignature boundSignature, F\n         Type returnType = boundSignature.getReturnType();\n         switch (convention.getReturnConvention()) {\n             case FAIL_ON_NULL:\n-                verifyFunctionSignature(methodType.returnType().isAssignableFrom(returnType.getJavaType()),\n+                verifyFunctionSignature(\n+                        returnType.getJavaType().isAssignableFrom(methodType.returnType()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg5MjQwMg==", "bodyText": "That's a good point.\nBut given how many tests fail with this change, it doesn't seem like equality is the right solution, so I'm going to take it out of the PR.", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r549892402", "createdAt": "2020-12-30T00:03:59Z", "author": {"login": "jirassimok"}, "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataManager.java", "diffHunk": "@@ -2025,11 +2025,13 @@ private static void verifyMethodHandleSignature(BoundSignature boundSignature, F\n         Type returnType = boundSignature.getReturnType();\n         switch (convention.getReturnConvention()) {\n             case FAIL_ON_NULL:\n-                verifyFunctionSignature(methodType.returnType().isAssignableFrom(returnType.getJavaType()),\n+                verifyFunctionSignature(\n+                        returnType.getJavaType().isAssignableFrom(methodType.returnType()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg4OTIxMA=="}, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MzQxODg4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/type/TestArrayOperators.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQxNDo1ODozMlrOIM_1dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQxNzowNDowNFrOINDqDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ5OTcwMw==", "bodyText": "a Block is a special case.\nit works today, dunno why\nassertFunction(\"CAST((ARRAY[ARRAY['xxx']])[1] AS json)\", JSON, \"[\\\"xxx\\\"]\"); // block\n\nbut still worth having a test\nnote: cast here is to JSON, because of #6347\nthis anomaly in test cases leads to a question whether assertSubscriptCast is worth having separate or inline back. I'd inline.", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r550499703", "createdAt": "2020-12-31T14:58:32Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/type/TestArrayOperators.java", "diffHunk": "@@ -749,6 +750,23 @@ public void testSubscript()\n         assertDecimalFunction(\"ARRAY [2.22222222222222222, 2.3][1]\", decimal(\"2.22222222222222222\"));\n     }\n \n+    @Test\n+    public void testSubscriptReturnType()\n+    {\n+        // Test return type of array subscript by passing it to another operation\n+        // One test for each specialization of the operator\n+        assertSubscriptCast(\"true\", \"true\"); // boolean\n+        assertSubscriptCast(\"1234\", \"1234\"); // long\n+        assertSubscriptCast(\"1.23\", \"1.23\"); // double\n+        assertSubscriptCast(\"IPADDRESS '127.0.0.1'\", \"127.0.0.1\"); // slice\n+        assertSubscriptCast(\"TIMESTAMP '1970-01-01 00:00:00.000000001'\", \"1970-01-01 00:00:00.000000001\"); // object (LongTimestamp)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU2MjMxNw==", "bodyText": "Or instead, I could use JSON for all of them. \ud83d\udc40", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r550562317", "createdAt": "2020-12-31T17:04:04Z", "author": {"login": "jirassimok"}, "path": "presto-main/src/test/java/io/prestosql/type/TestArrayOperators.java", "diffHunk": "@@ -749,6 +750,23 @@ public void testSubscript()\n         assertDecimalFunction(\"ARRAY [2.22222222222222222, 2.3][1]\", decimal(\"2.22222222222222222\"));\n     }\n \n+    @Test\n+    public void testSubscriptReturnType()\n+    {\n+        // Test return type of array subscript by passing it to another operation\n+        // One test for each specialization of the operator\n+        assertSubscriptCast(\"true\", \"true\"); // boolean\n+        assertSubscriptCast(\"1234\", \"1234\"); // long\n+        assertSubscriptCast(\"1.23\", \"1.23\"); // double\n+        assertSubscriptCast(\"IPADDRESS '127.0.0.1'\", \"127.0.0.1\"); // slice\n+        assertSubscriptCast(\"TIMESTAMP '1970-01-01 00:00:00.000000001'\", \"1970-01-01 00:00:00.000000001\"); // object (LongTimestamp)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ5OTcwMw=="}, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MzUzNzE0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/type/TestArrayOperators.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQxNjowNjoyMVrOINA5tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQyMTo0MjoyMVrOINSyTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDUxNzE3Mg==", "bodyText": "select CAST((ARRAY [TIMESTAMP '1970-01-01 00:00:00.000000001'])[1] AS VARCHAR); does not fail even without your fixes.", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r550517172", "createdAt": "2020-12-31T16:06:21Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/type/TestArrayOperators.java", "diffHunk": "@@ -749,6 +750,23 @@ public void testSubscript()\n         assertDecimalFunction(\"ARRAY [2.22222222222222222, 2.3][1]\", decimal(\"2.22222222222222222\"));\n     }\n \n+    @Test\n+    public void testSubscriptReturnType()\n+    {\n+        // Test return type of array subscript by passing it to another operation\n+        // One test for each specialization of the operator\n+        assertSubscriptCast(\"true\", \"true\"); // boolean\n+        assertSubscriptCast(\"1234\", \"1234\"); // long\n+        assertSubscriptCast(\"1.23\", \"1.23\"); // double\n+        assertSubscriptCast(\"IPADDRESS '127.0.0.1'\", \"127.0.0.1\"); // slice\n+        assertSubscriptCast(\"TIMESTAMP '1970-01-01 00:00:00.000000001'\", \"1970-01-01 00:00:00.000000001\"); // object (LongTimestamp)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDUyMTI1OQ==", "bodyText": "It does in this test.", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r550521259", "createdAt": "2020-12-31T16:11:40Z", "author": {"login": "jirassimok"}, "path": "presto-main/src/test/java/io/prestosql/type/TestArrayOperators.java", "diffHunk": "@@ -749,6 +750,23 @@ public void testSubscript()\n         assertDecimalFunction(\"ARRAY [2.22222222222222222, 2.3][1]\", decimal(\"2.22222222222222222\"));\n     }\n \n+    @Test\n+    public void testSubscriptReturnType()\n+    {\n+        // Test return type of array subscript by passing it to another operation\n+        // One test for each specialization of the operator\n+        assertSubscriptCast(\"true\", \"true\"); // boolean\n+        assertSubscriptCast(\"1234\", \"1234\"); // long\n+        assertSubscriptCast(\"1.23\", \"1.23\"); // double\n+        assertSubscriptCast(\"IPADDRESS '127.0.0.1'\", \"127.0.0.1\"); // slice\n+        assertSubscriptCast(\"TIMESTAMP '1970-01-01 00:00:00.000000001'\", \"1970-01-01 00:00:00.000000001\"); // object (LongTimestamp)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDUxNzE3Mg=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDUzMTU4Ng==", "bodyText": "Indeed :) WTF ...", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r550531586", "createdAt": "2020-12-31T16:25:11Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/type/TestArrayOperators.java", "diffHunk": "@@ -749,6 +750,23 @@ public void testSubscript()\n         assertDecimalFunction(\"ARRAY [2.22222222222222222, 2.3][1]\", decimal(\"2.22222222222222222\"));\n     }\n \n+    @Test\n+    public void testSubscriptReturnType()\n+    {\n+        // Test return type of array subscript by passing it to another operation\n+        // One test for each specialization of the operator\n+        assertSubscriptCast(\"true\", \"true\"); // boolean\n+        assertSubscriptCast(\"1234\", \"1234\"); // long\n+        assertSubscriptCast(\"1.23\", \"1.23\"); // double\n+        assertSubscriptCast(\"IPADDRESS '127.0.0.1'\", \"127.0.0.1\"); // slice\n+        assertSubscriptCast(\"TIMESTAMP '1970-01-01 00:00:00.000000001'\", \"1970-01-01 00:00:00.000000001\"); // object (LongTimestamp)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDUxNzE3Mg=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU3NzUzOQ==", "bodyText": "assertFunction executes the expression five different ways. At least one of them involves manually compiling the expression, which makes the bug occur.\nIt fails at FunctionAssertions line 502. But to get there, the query had to already succeed as-is on line 493.", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r550577539", "createdAt": "2020-12-31T17:23:49Z", "author": {"login": "jirassimok"}, "path": "presto-main/src/test/java/io/prestosql/type/TestArrayOperators.java", "diffHunk": "@@ -749,6 +750,23 @@ public void testSubscript()\n         assertDecimalFunction(\"ARRAY [2.22222222222222222, 2.3][1]\", decimal(\"2.22222222222222222\"));\n     }\n \n+    @Test\n+    public void testSubscriptReturnType()\n+    {\n+        // Test return type of array subscript by passing it to another operation\n+        // One test for each specialization of the operator\n+        assertSubscriptCast(\"true\", \"true\"); // boolean\n+        assertSubscriptCast(\"1234\", \"1234\"); // long\n+        assertSubscriptCast(\"1.23\", \"1.23\"); // double\n+        assertSubscriptCast(\"IPADDRESS '127.0.0.1'\", \"127.0.0.1\"); // slice\n+        assertSubscriptCast(\"TIMESTAMP '1970-01-01 00:00:00.000000001'\", \"1970-01-01 00:00:00.000000001\"); // object (LongTimestamp)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDUxNzE3Mg=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgxMDE4OA==", "bodyText": "@losipiuk this query doesn't fail, as the subscript (and everything else) is taken care of by the expression interpreter, during optimization, doesn't reach compiled code at all\nthe TestArrayOperators exercises both optimized and non-optimized expressions.", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r550810188", "createdAt": "2021-01-01T21:42:21Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/type/TestArrayOperators.java", "diffHunk": "@@ -749,6 +750,23 @@ public void testSubscript()\n         assertDecimalFunction(\"ARRAY [2.22222222222222222, 2.3][1]\", decimal(\"2.22222222222222222\"));\n     }\n \n+    @Test\n+    public void testSubscriptReturnType()\n+    {\n+        // Test return type of array subscript by passing it to another operation\n+        // One test for each specialization of the operator\n+        assertSubscriptCast(\"true\", \"true\"); // boolean\n+        assertSubscriptCast(\"1234\", \"1234\"); // long\n+        assertSubscriptCast(\"1.23\", \"1.23\"); // double\n+        assertSubscriptCast(\"IPADDRESS '127.0.0.1'\", \"127.0.0.1\"); // slice\n+        assertSubscriptCast(\"TIMESTAMP '1970-01-01 00:00:00.000000001'\", \"1970-01-01 00:00:00.000000001\"); // object (LongTimestamp)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDUxNzE3Mg=="}, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MzU3MDEyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/ArraySubscriptOperator.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQxNjoxMzozOFrOINBP0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMToyMDozOVrOINuJCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDUyMjgzMw==", "bodyText": "I was planning to add suggestion to add extra casting in the generated code, as I was expecting array subscript is not only affected function.\nFor example I expected MapSubscriptOperator to have same issue. But for some reason I do not reproduce the problem with\nCREATE TABLE test (col MAP(VARCHAR,TIMESTAMP(7)));\n\ninteresting.", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r550522833", "createdAt": "2020-12-31T16:13:38Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/ArraySubscriptOperator.java", "diffHunk": "@@ -77,7 +77,8 @@ else if (elementType.getJavaType() == Slice.class) {\n             methodHandle = METHOD_HANDLE_SLICE;\n         }\n         else {\n-            methodHandle = METHOD_HANDLE_OBJECT;\n+            methodHandle = METHOD_HANDLE_OBJECT.asType(\n+                    METHOD_HANDLE_OBJECT.type().changeReturnType(elementType.getJavaType()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDU1NDI4OA==", "bodyText": "I had the cast you suggested until I realized that MapSubscriptOperator doesn't have the bug. Then I copied the current solution from that class.\nAnother option I considered early on was to perform this same MethodType conversion in generateFullInvocation. I did it wrong at first, and now I think it's not quite as clean a solution. Yes, it would prevent this exact error in the future, but it seems like a better idea to trust each SQL function to correctly set its return type. (I've pushed this change as 0e34890.)\nMaybe this should be in a doc comment on SqlScalarFunction.specialize.", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r550554288", "createdAt": "2020-12-31T16:53:53Z", "author": {"login": "jirassimok"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/ArraySubscriptOperator.java", "diffHunk": "@@ -77,7 +77,8 @@ else if (elementType.getJavaType() == Slice.class) {\n             methodHandle = METHOD_HANDLE_SLICE;\n         }\n         else {\n-            methodHandle = METHOD_HANDLE_OBJECT;\n+            methodHandle = METHOD_HANDLE_OBJECT.asType(\n+                    METHOD_HANDLE_OBJECT.type().changeReturnType(elementType.getJavaType()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDUyMjgzMw=="}, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE2NzQxNA==", "bodyText": "Should we maybe that method handle return type match the type in FunctionRegistry.specializeScalarFunction?", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r551167414", "createdAt": "2021-01-04T08:13:08Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/ArraySubscriptOperator.java", "diffHunk": "@@ -77,7 +77,8 @@ else if (elementType.getJavaType() == Slice.class) {\n             methodHandle = METHOD_HANDLE_SLICE;\n         }\n         else {\n-            methodHandle = METHOD_HANDLE_OBJECT;\n+            methodHandle = METHOD_HANDLE_OBJECT.asType(\n+                    METHOD_HANDLE_OBJECT.type().changeReturnType(elementType.getJavaType()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDUyMjgzMw=="}, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI0MTI4Mw==", "bodyText": "That sounds reasonable to me. Let's consider this as a follow up maybe?", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r551241283", "createdAt": "2021-01-04T10:45:19Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/ArraySubscriptOperator.java", "diffHunk": "@@ -77,7 +77,8 @@ else if (elementType.getJavaType() == Slice.class) {\n             methodHandle = METHOD_HANDLE_SLICE;\n         }\n         else {\n-            methodHandle = METHOD_HANDLE_OBJECT;\n+            methodHandle = METHOD_HANDLE_OBJECT.asType(\n+                    METHOD_HANDLE_OBJECT.type().changeReturnType(elementType.getJavaType()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDUyMjgzMw=="}, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1ODM3Nw==", "bodyText": "+1", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r551258377", "createdAt": "2021-01-04T11:20:39Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/ArraySubscriptOperator.java", "diffHunk": "@@ -77,7 +77,8 @@ else if (elementType.getJavaType() == Slice.class) {\n             methodHandle = METHOD_HANDLE_SLICE;\n         }\n         else {\n-            methodHandle = METHOD_HANDLE_OBJECT;\n+            methodHandle = METHOD_HANDLE_OBJECT.asType(\n+                    METHOD_HANDLE_OBJECT.type().changeReturnType(elementType.getJavaType()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDUyMjgzMw=="}, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTY0ODczOnYy", "diffSide": "LEFT", "path": "presto-server-main/etc/catalog/tpch.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQyMTo0Mzo0NFrOINSypg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQyMTo0Mzo0NFrOINSypg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgxMDI3OA==", "bodyText": "revert", "url": "https://github.com/trinodb/trino/pull/6467#discussion_r550810278", "createdAt": "2021-01-01T21:43:44Z", "author": {"login": "findepi"}, "path": "presto-server-main/etc/catalog/tpch.properties", "diffHunk": "@@ -1,9 +0,0 @@\n-#\n-# WARNING\n-# ^^^^^^^\n-# This configuration file is for development only and should NOT be used\n-# in production. For example configuration, see the Presto documentation.\n-#\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4298, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}