{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4NjA4NDA5", "number": 5434, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODoyNTo0NVrOEq3l0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODoyNjo0OFrOErEatg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzg2NDQ4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODoyNTo0NVrOHdUmeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODoyNDo0NVrOHdoHlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwODI4MQ==", "bodyText": "Use dynamicFilterCollectionTime.get(filterId) and perform null check on that to avoid lookup in map twice", "url": "https://github.com/trinodb/trino/pull/5434#discussion_r500508281", "createdAt": "2020-10-06T18:25:45Z", "author": {"login": "raunaqmorarka"}, "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -683,6 +727,15 @@ private void stageCannotScheduleMoreTasks(StageId stageId, int numberOfTasks)\n         {\n             return replicatedDynamicFilters;\n         }\n+\n+        private Optional<Duration> getDynamicFilterCollectionDuration(DynamicFilterId filterId)\n+        {\n+            if (queryStartTime.get() == null || !dynamicFilterCollectionTime.containsKey(filterId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyODA1NA==", "bodyText": "This has would have nice added value that the code is properly guarded even if there are map .remove calls somewhere -- now, or in the future. (there aren't today)", "url": "https://github.com/trinodb/trino/pull/5434#discussion_r500828054", "createdAt": "2020-10-07T08:24:45Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -683,6 +727,15 @@ private void stageCannotScheduleMoreTasks(StageId stageId, int numberOfTasks)\n         {\n             return replicatedDynamicFilters;\n         }\n+\n+        private Optional<Duration> getDynamicFilterCollectionDuration(DynamicFilterId filterId)\n+        {\n+            if (queryStartTime.get() == null || !dynamicFilterCollectionTime.containsKey(filterId)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwODI4MQ=="}, "originalCommit": null, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTkzNTYwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODoxOToyMFrOHdn5zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODozMzo0N1rOHdoeZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyNDUyNw==", "bodyText": "does this belong to  registerQuery overload being called above?", "url": "https://github.com/trinodb/trino/pull/5434#discussion_r500824527", "createdAt": "2020-10-07T08:19:20Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -123,6 +127,12 @@ public void registerQuery(SqlQueryExecution sqlQueryExecution, SubPlan fragmente\n                     dynamicFilters,\n                     lazyDynamicFilters,\n                     replicatedDynamicFilters);\n+\n+            sqlQueryExecution.addStateChangeListener(state -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgzMzg5NQ==", "bodyText": "nope. One needs SqlQueryExecution to register for events. The other overload is for testing", "url": "https://github.com/trinodb/trino/pull/5434#discussion_r500833895", "createdAt": "2020-10-07T08:33:47Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -123,6 +127,12 @@ public void registerQuery(SqlQueryExecution sqlQueryExecution, SubPlan fragmente\n                     dynamicFilters,\n                     lazyDynamicFilters,\n                     replicatedDynamicFilters);\n+\n+            sqlQueryExecution.addStateChangeListener(state -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyNDUyNw=="}, "originalCommit": null, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTk0NzIzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODoyMjowNlrOHdoA7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODozNTowN1rOHdohmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyNjM0OA==", "bodyText": "The query will be STARTING very soon:\nhttps://github.com/prestosql/presto/blob/a29fc64a478818c52c0714e05d24241cc6ef4464/presto-main/src/main/java/io/prestosql/execution/SqlQueryExecution.java#L376-L379\nthe callback adds complexity & theoretical uncertainty whcih i would prefer to avoid, if possible.\nwould it be still OK to start the timer immediately here?", "url": "https://github.com/trinodb/trino/pull/5434#discussion_r500826348", "createdAt": "2020-10-07T08:22:06Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -123,6 +127,12 @@ public void registerQuery(SqlQueryExecution sqlQueryExecution, SubPlan fragmente\n                     dynamicFilters,\n                     lazyDynamicFilters,\n                     replicatedDynamicFilters);\n+\n+            sqlQueryExecution.addStateChangeListener(state -> {\n+                if (state == STARTING) {\n+                    queryIsStarting(sqlQueryExecution.getQueryId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgzNDcxMw==", "bodyText": "Yes. Makes sense.", "url": "https://github.com/trinodb/trino/pull/5434#discussion_r500834713", "createdAt": "2020-10-07T08:35:07Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -123,6 +127,12 @@ public void registerQuery(SqlQueryExecution sqlQueryExecution, SubPlan fragmente\n                     dynamicFilters,\n                     lazyDynamicFilters,\n                     replicatedDynamicFilters);\n+\n+            sqlQueryExecution.addStateChangeListener(state -> {\n+                if (state == STARTING) {\n+                    queryIsStarting(sqlQueryExecution.getQueryId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyNjM0OA=="}, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTk1MTI1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODoyMzowNVrOHdoDfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODoyMzowNVrOHdoDfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyNzAwNg==", "bodyText": "rnn", "url": "https://github.com/trinodb/trino/pull/5434#discussion_r500827006", "createdAt": "2020-10-07T08:23:05Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -521,18 +547,21 @@ public int hashCode()\n         private final String simplifiedDomain;\n         private final int rangeCount;\n         private final int discreteValuesCount;\n+        private final Optional<Duration> collectionDuration;\n \n         @JsonCreator\n         public DynamicFilterDomainStats(\n                 @JsonProperty(\"dynamicFilterId\") DynamicFilterId dynamicFilterId,\n                 @JsonProperty(\"simplifiedDomain\") String simplifiedDomain,\n                 @JsonProperty(\"rangeCount\") int rangeCount,\n-                @JsonProperty(\"discreteValuesCount\") int discreteValuesCount)\n+                @JsonProperty(\"discreteValuesCount\") int discreteValuesCount,\n+                @JsonProperty(\"collectionDuration\") Optional<Duration> collectionDuration)\n         {\n             this.dynamicFilterId = dynamicFilterId;\n             this.simplifiedDomain = simplifiedDomain;\n             this.rangeCount = rangeCount;\n             this.discreteValuesCount = discreteValuesCount;\n+            this.collectionDuration = collectionDuration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTk2MTEzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODoyNToyOFrOHdoJpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODo1NTozMFrOHdpVpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyODU4MQ==", "bodyText": "under what circumstances can queryStartTime.get() == null?", "url": "https://github.com/trinodb/trino/pull/5434#discussion_r500828581", "createdAt": "2020-10-07T08:25:28Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -683,6 +727,15 @@ private void stageCannotScheduleMoreTasks(StageId stageId, int numberOfTasks)\n         {\n             return replicatedDynamicFilters;\n         }\n+\n+        private Optional<Duration> getDynamicFilterCollectionDuration(DynamicFilterId filterId)\n+        {\n+            if (queryStartTime.get() == null || !dynamicFilterCollectionTime.containsKey(filterId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg0ODAzNg==", "bodyText": "state listeners are executed asynchroniusly, so they could be late. Anyway, I've removed using of state listener completely", "url": "https://github.com/trinodb/trino/pull/5434#discussion_r500848036", "createdAt": "2020-10-07T08:55:30Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -683,6 +727,15 @@ private void stageCannotScheduleMoreTasks(StageId stageId, int numberOfTasks)\n         {\n             return replicatedDynamicFilters;\n         }\n+\n+        private Optional<Duration> getDynamicFilterCollectionDuration(DynamicFilterId filterId)\n+        {\n+            if (queryStartTime.get() == null || !dynamicFilterCollectionTime.containsKey(filterId)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyODU4MQ=="}, "originalCommit": null, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTk2Mjg5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/server/TestDynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODoyNTo1N1rOHdoKxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODoyNTo1N1rOHdoKxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyODg2OA==", "bodyText": "fmt: all args to new DynamicFilterDomainStats should be on the new DynamicFilterDomainStats line, or each on separate line", "url": "https://github.com/trinodb/trino/pull/5434#discussion_r500828868", "createdAt": "2020-10-07T08:25:57Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/server/TestDynamicFilterService.java", "diffHunk": "@@ -127,7 +127,7 @@ public void testDynamicFilterSummaryCompletion()\n         assertEquals(\n                 stats.getDynamicFilterDomainStats(),\n                 ImmutableList.of(new DynamicFilterDomainStats(\n-                        filterId, getExpectedDomainString(1L, 3L), 3, 0)));\n+                        filterId, getExpectedDomainString(1L, 3L), 3, 0, Optional.empty())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTk2NDA4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/server/TestDynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODoyNjoxNVrOHdoLig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODoyNjoxNVrOHdoLig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyOTA2Ng==", "bodyText": "fmt: all args to new DynamicFilterDomainStats should be on the new DynamicFilterDomainStats line, or each on separate line", "url": "https://github.com/trinodb/trino/pull/5434#discussion_r500829066", "createdAt": "2020-10-07T08:26:15Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/server/TestDynamicFilterService.java", "diffHunk": "@@ -292,11 +292,11 @@ public void testDynamicFilter()\n         assertEquals(stats.getReplicatedDynamicFilters(), 0);\n         assertEquals(ImmutableSet.copyOf(stats.getDynamicFilterDomainStats()), ImmutableSet.of(\n                 new DynamicFilterDomainStats(\n-                        filterId1, getExpectedDomainString(1L, 2L), 2, 0),\n+                        filterId1, getExpectedDomainString(1L, 2L), 2, 0, Optional.empty()),\n                 new DynamicFilterDomainStats(\n-                        filterId2, getExpectedDomainString(2L, 3L), 2, 0),\n+                        filterId2, getExpectedDomainString(2L, 3L), 2, 0, Optional.empty()),\n                 new DynamicFilterDomainStats(\n-                        filterId3, Domain.none(INTEGER).toString(session.toConnectorSession()), 0, 0)));\n+                        filterId3, Domain.none(INTEGER).toString(session.toConnectorSession()), 0, 0, Optional.empty())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTk2NTk4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODoyNjo0OFrOHdoMzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODo1NDo0M1rOHdpThQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyOTM5MA==", "bodyText": "verify(queryStartTime.get() == 0, \"queryStartTime already set\");", "url": "https://github.com/trinodb/trino/pull/5434#discussion_r500829390", "createdAt": "2020-10-07T08:26:48Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -669,6 +708,11 @@ private void stageCannotScheduleMoreTasks(StageId stageId, int numberOfTasks)\n             stageNumberOfTasks.put(stageId, numberOfTasks);\n         }\n \n+        private void queryIsStarting()\n+        {\n+            queryStartTime.set(System.nanoTime());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg0NzQ5Mw==", "bodyText": "removed", "url": "https://github.com/trinodb/trino/pull/5434#discussion_r500847493", "createdAt": "2020-10-07T08:54:43Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -669,6 +708,11 @@ private void stageCannotScheduleMoreTasks(StageId stageId, int numberOfTasks)\n             stageNumberOfTasks.put(stageId, numberOfTasks);\n         }\n \n+        private void queryIsStarting()\n+        {\n+            queryStartTime.set(System.nanoTime());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyOTM5MA=="}, "originalCommit": null, "originalPosition": 152}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4615, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}