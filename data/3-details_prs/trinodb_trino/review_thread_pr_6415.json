{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzNzM1MzQ3", "number": 6415, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjoxMDoyOVrOFICVsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwODo0NDoyN1rOFIfNzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTcxMjUxOnYy", "diffSide": "RIGHT", "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/schema/confluent/ConfluentSchemaRegistryTableDescriptionSupplier.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjoxMDoyOVrOIJvk2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjoxMDoyOVrOIJvk2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA4NzU3OA==", "bodyText": "Once we move to latest schema registry can we handle them based on SchemaProvider#getSchemaType ? I will raising a PR to bind SchemaProvider and I guess we can inject it here also to validate here", "url": "https://github.com/trinodb/trino/pull/6415#discussion_r547087578", "createdAt": "2020-12-22T06:10:29Z", "author": {"login": "Praveen2112"}, "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/schema/confluent/ConfluentSchemaRegistryTableDescriptionSupplier.java", "diffHunk": "@@ -187,7 +190,11 @@ private String resolveSubject(String candidate)\n     private KafkaTopicFieldGroup getFieldGroup(AvroSchemaConverter avroSchemaConverter, String subject)\n     {\n         try {\n-            Schema schema = new Schema.Parser().parse(schemaRegistryClient.getLatestSchemaMetadata(subject).getSchema());\n+            SchemaMetadata schemaMetadata = schemaRegistryClient.getLatestSchemaMetadata(subject);\n+            if (schemaMetadata.getSchemaType() != \"AVRO\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTIzMDc1OnYy", "diffSide": "RIGHT", "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/schema/confluent/ConfluentModule.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDo0MDo1OFrOIJ9cGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDo0NToxOVrOIJ9liA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMxNDcxMg==", "bodyText": "We don't have to bind them separately, SchemaRegistryClient#getSchemaProviders would give a Map<String, SchemaParser>", "url": "https://github.com/trinodb/trino/pull/6415#discussion_r547314712", "createdAt": "2020-12-22T14:40:58Z", "author": {"login": "Praveen2112"}, "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/schema/confluent/ConfluentModule.java", "diffHunk": "@@ -64,6 +64,7 @@ protected void setup(Binder binder)\n         newSetBinder(binder, SchemaProvider.class).addBinding().to(AvroSchemaProvider.class).in(Scopes.SINGLETON);\n         newSetBinder(binder, SessionPropertiesProvider.class).addBinding().to(ConfluentSessionProperties.class).in(Scopes.SINGLETON);\n         binder.bind(TableDescriptionSupplier.class).toProvider(ConfluentSchemaRegistryTableDescriptionSupplier.Factory.class).in(Scopes.SINGLETON);\n+        newMapBinder(binder, String.class, SchemaParser.class).addBinding(\"AVRO\").to(AvroSchemaParser.class).in(Scopes.SINGLETON);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMxNzEyOA==", "bodyText": "This method is defined in io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient#getSchemaProviders.\nAlso we need to still to parse the schema into an object that Presto Kafka Connector understands so it could create a Presto table etc.", "url": "https://github.com/trinodb/trino/pull/6415#discussion_r547317128", "createdAt": "2020-12-22T14:45:19Z", "author": {"login": "kokosing"}, "path": "presto-kafka/src/main/java/io/prestosql/plugin/kafka/schema/confluent/ConfluentModule.java", "diffHunk": "@@ -64,6 +64,7 @@ protected void setup(Binder binder)\n         newSetBinder(binder, SchemaProvider.class).addBinding().to(AvroSchemaProvider.class).in(Scopes.SINGLETON);\n         newSetBinder(binder, SessionPropertiesProvider.class).addBinding().to(ConfluentSessionProperties.class).in(Scopes.SINGLETON);\n         binder.bind(TableDescriptionSupplier.class).toProvider(ConfluentSchemaRegistryTableDescriptionSupplier.Factory.class).in(Scopes.SINGLETON);\n+        newMapBinder(binder, String.class, SchemaParser.class).addBinding(\"AVRO\").to(AvroSchemaParser.class).in(Scopes.SINGLETON);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMxNDcxMg=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTcwNDM1OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNjo1MTo1MlrOIKB1ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxOTo0MjoyMlrOIKHIPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM4NjgxMA==", "bodyText": "Is there is any plugin that could fail if such libraries are added ?", "url": "https://github.com/trinodb/trino/pull/6415#discussion_r547386810", "createdAt": "2020-12-22T16:51:52Z", "author": {"login": "Praveen2112"}, "path": "pom.xml", "diffHunk": "@@ -1113,6 +1113,27 @@\n                 </exclusions>\n             </dependency>\n \n+            <dependency>\n+                <!-- This is under Confluence Community License and it should not be used in compile scope -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ3MzQ2OQ==", "bodyText": "I am not aware of this. I tried to find such, but with no lock. I will define test scope in master pom.xml, so it will force to explicit overwrite and so there is high chance that someone would read the comment.", "url": "https://github.com/trinodb/trino/pull/6415#discussion_r547473469", "createdAt": "2020-12-22T19:42:22Z", "author": {"login": "kokosing"}, "path": "pom.xml", "diffHunk": "@@ -1113,6 +1113,27 @@\n                 </exclusions>\n             </dependency>\n \n+            <dependency>\n+                <!-- This is under Confluence Community License and it should not be used in compile scope -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM4NjgxMA=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NDQ0MzY2OnYy", "diffSide": "RIGHT", "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/schema/confluent/TestKafkaWithConfluentSchemaRegistryMinimalFunctionality.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwODo0NDoyN1rOIKb9gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwODo0NDoyN1rOIKb9gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzgxNDc4Ng==", "bodyText": "send -> sent", "url": "https://github.com/trinodb/trino/pull/6415#discussion_r547814786", "createdAt": "2020-12-23T08:44:27Z", "author": {"login": "skrzypo987"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/schema/confluent/TestKafkaWithConfluentSchemaRegistryMinimalFunctionality.java", "diffHunk": "@@ -137,6 +148,35 @@ public void testUnsupportedInsert()\n         assertQueryFails(format(\"INSERT INTO \\\"%s\\\" VALUES (0, 0, '')\", topicName), \"Insert not supported\");\n     }\n \n+    @Test\n+    public void testUnsupportedFormat()\n+            throws Exception\n+    {\n+        String topicName = \"topic-unsupported-format\";\n+        testingKafkaWithSchemaRegistry.createTopic(topicName);\n+\n+        assertNotExists(topicName);\n+\n+        Future<RecordMetadata> lastSendFuture = Futures.immediateFuture(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7c7bdc27d33bfe0e29e5c087506193e7ac4911"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4404, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}