{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3Mjk4NTA4", "number": 6084, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOToyMDo1OVrOE9IlPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMToyNTo1MFrOE9LzOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTM5MTk4OnYy", "diffSide": "LEFT", "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataListing.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOToyMDo1OVrOH5qCnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOToyMDo1OVrOH5qCnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIxOTY3Ng==", "bodyText": "I think this was motivation why filterColumns was accepting List<ColumnMetadata> parameter and returning List<ColumnMetadata>. It was simply easy to write this particular line and so far this was the only usage of this call.", "url": "https://github.com/trinodb/trino/pull/6084#discussion_r530219676", "createdAt": "2020-11-25T09:20:59Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataListing.java", "diffHunk": "@@ -140,12 +141,21 @@ private MetadataListing() {}\n \n         ImmutableMap.Builder<SchemaTableName, List<ColumnMetadata>> result = ImmutableMap.builder();\n         for (Entry<SchemaTableName, List<ColumnMetadata>> entry : tableColumns.entrySet()) {\n-            if (allowedTables.contains(entry.getKey())) {\n-                result.put(entry.getKey(), accessControl.filterColumns(\n-                        session.toSecurityContext(),\n-                        new CatalogSchemaTableName(prefix.getCatalogName(), entry.getKey()),\n-                        entry.getValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTQzMDE5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/LegacyAccessControl.java", "isResolved": false, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOToyOTo1OVrOH5qacw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQyMjowOToxMFrOIc2TIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIyNTc3OQ==", "bodyText": "What about custom implementations that use this information (if there are any).\nIs there any reasonable workaround?", "url": "https://github.com/trinodb/trino/pull/6084#discussion_r530225779", "createdAt": "2020-11-25T09:29:59Z", "author": {"login": "skrzypo987"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/LegacyAccessControl.java", "diffHunk": "@@ -178,7 +176,7 @@ public void checkCanShowColumns(ConnectorSecurityContext context, SchemaTableNam\n     }\n \n     @Override\n-    public List<ColumnMetadata> filterColumns(ConnectorSecurityContext context, SchemaTableName tableName, List<ColumnMetadata> columns)\n+    public Set<String> filterColumns(ConnectorSecurityContext context, SchemaTableName tableName, Set<String> columns)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI2MjIxMg==", "bodyText": "That would be very bizarre to control access to a column basing on its type, column properties or a column comment.\nSee implementation in prestosql they bother such information. Also I checked all access control implementation I have access to and their are using just a column names.\n@electrum Are you aware of such access controls?", "url": "https://github.com/trinodb/trino/pull/6084#discussion_r530262212", "createdAt": "2020-11-25T10:22:59Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/LegacyAccessControl.java", "diffHunk": "@@ -178,7 +176,7 @@ public void checkCanShowColumns(ConnectorSecurityContext context, SchemaTableNam\n     }\n \n     @Override\n-    public List<ColumnMetadata> filterColumns(ConnectorSecurityContext context, SchemaTableName tableName, List<ColumnMetadata> columns)\n+    public Set<String> filterColumns(ConnectorSecurityContext context, SchemaTableName tableName, Set<String> columns)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIyNTc3OQ=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njk0NDQ2OA==", "bodyText": "@kokosing Are you sure, that you have checked all the \"...access control implementation you have access to...\"\nYou could have simply kept the old method with a deprecation annotation!\nThere could be other healthy workarounds also.\nBUT NO, BECAUSE OF THIS MESS AFTER MIGRATING TO presto-348 from 331 OUR ENTIRE DATALAKE VANISHED.\nDatalake schemas were populated based on \"DESCRIBE ...\" (aka information_schema.columns) \nOne of the mostly used access control system is ranger access control.\nPlease have a look at here :\nhttps://github.com/apache/ranger/blob/5df512439c85199abacb84675b91d0b704fb61f0/plugin-presto/src/main/java/org/apache/ranger/authorization/presto/authorizer/RangerSystemAccessControl.java#L578\nAnd here:\nhttps://github.com/apache/ranger/blob/5df512439c85199abacb84675b91d0b704fb61f0/ranger-presto-plugin-shim/src/main/java/org/apache/ranger/authorization/presto/authorizer/RangerSystemAccessControl.java#L394\nI'll make a detailed issue later, and create a JIRA card on ranger.\nSorry for my anger, it came out of frustration, as we had to roll back just 3hrs after deploying.", "url": "https://github.com/trinodb/trino/pull/6084#discussion_r566944468", "createdAt": "2021-01-29T16:33:07Z", "author": {"login": "pPanda-beta"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/LegacyAccessControl.java", "diffHunk": "@@ -178,7 +176,7 @@ public void checkCanShowColumns(ConnectorSecurityContext context, SchemaTableNam\n     }\n \n     @Override\n-    public List<ColumnMetadata> filterColumns(ConnectorSecurityContext context, SchemaTableName tableName, List<ColumnMetadata> columns)\n+    public Set<String> filterColumns(ConnectorSecurityContext context, SchemaTableName tableName, Set<String> columns)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIyNTc3OQ=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njk3Nzk5OQ==", "bodyText": "Please be aware that presto plugin for ranger has been written some time ago and was never supported by PrestoSQL(now Trino). It will completely cease to work after 351 Trino version because of the packages rename.\nBoth Trino and Ranger are open-source projects. You cannot expect them to always work with each other.\nThere are commercial Ranger integrations that are well supported.", "url": "https://github.com/trinodb/trino/pull/6084#discussion_r566977999", "createdAt": "2021-01-29T17:26:52Z", "author": {"login": "skrzypo987"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/LegacyAccessControl.java", "diffHunk": "@@ -178,7 +176,7 @@ public void checkCanShowColumns(ConnectorSecurityContext context, SchemaTableNam\n     }\n \n     @Override\n-    public List<ColumnMetadata> filterColumns(ConnectorSecurityContext context, SchemaTableName tableName, List<ColumnMetadata> columns)\n+    public Set<String> filterColumns(ConnectorSecurityContext context, SchemaTableName tableName, Set<String> columns)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIyNTc3OQ=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzAwODE0MA==", "bodyText": "@pPanda-beta\nI understand the problem you are facing. I guess it took some time to figure out the cause of your problems, and I am sorry you had to go thru this.\nPlease see #3705 for a similar discussion in the past. Unfortunately, we cannot freeze the security APIs for ever. They need to evolve as the project evolves.\nThis applies to actually all the APIs in the project -- not only security. We try to avoid breaking changes.\nYes, for every single change you can think about how to support previous version. Then you basically have two choices:\n\nsupport \"previous version\" for ever. -- The consequences of doing this is that these \"previous versions\" add up and significantly slow down development of the project. We believe that this is not a sustainable model for the long run.\nremove \"previous version\" eventually. -- I do not think it would be helpful though. I would guess that the deprecation would go unnoticed only after we eventually remove the \"previous version\", which brings us back to square one, just we spend more development cycles on that, without producing any benefit to anyone.\n\nSadly, in a fast-pasted project like this one, integrations need to be rigorously tested and there is no exempt from that.\nOn the positive side, we make it easy to test against Trino (formerly Presto). For integration tests i recommend using testcontainers library for spinning up Trino in a docker container.\ntestcontainers/testcontainers-java#3668 adds  a pre-packaged container for Trino, and there already exists a previous one for Presto.\nHope that this comment helps drive improvements for you in the long-term.", "url": "https://github.com/trinodb/trino/pull/6084#discussion_r567008140", "createdAt": "2021-01-29T18:19:46Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/LegacyAccessControl.java", "diffHunk": "@@ -178,7 +176,7 @@ public void checkCanShowColumns(ConnectorSecurityContext context, SchemaTableNam\n     }\n \n     @Override\n-    public List<ColumnMetadata> filterColumns(ConnectorSecurityContext context, SchemaTableName tableName, List<ColumnMetadata> columns)\n+    public Set<String> filterColumns(ConnectorSecurityContext context, SchemaTableName tableName, Set<String> columns)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIyNTc3OQ=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzAxNjczMw==", "bodyText": "@skrzypo987 At least I remember last year when I was part of that presto-ranger plugin development it was purely done for prestosql (kka Trinodb)\nWe have extended SystemAccessControl\nSee this :\nhttps://github.com/apache/ranger/blob/5df512439c85199abacb84675b91d0b704fb61f0/ranger-presto-plugin-shim/src/main/java/org/apache/ranger/authorization/presto/authorizer/RangerSystemAccessControl.java#L38-L43\nAlso advanced features like row filtering and masking is only supported with prestosql <3\nPrestodb on the other hand is still struggling to make a production ready ranger plugin.", "url": "https://github.com/trinodb/trino/pull/6084#discussion_r567016733", "createdAt": "2021-01-29T18:35:55Z", "author": {"login": "pPanda-beta"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/LegacyAccessControl.java", "diffHunk": "@@ -178,7 +176,7 @@ public void checkCanShowColumns(ConnectorSecurityContext context, SchemaTableNam\n     }\n \n     @Override\n-    public List<ColumnMetadata> filterColumns(ConnectorSecurityContext context, SchemaTableName tableName, List<ColumnMetadata> columns)\n+    public Set<String> filterColumns(ConnectorSecurityContext context, SchemaTableName tableName, Set<String> columns)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIyNTc3OQ=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzAyMTQ1Nw==", "bodyText": "@findepi\n\"I would guess that the deprecation would go unnoticed only after we eventually remove the \"previous version\"\" <- I would recommend a deprecation with a finite timeline (e.g. 6 months). This can be captured in build plugins. After 6 months build will automatically shouting \"Too stale deprecated function found\".\nI indeed agree Trino (fka prestosql) is a fast paced project. But on the other hand ranger needs to move with a lot of other projects. They build plugin for every systems.  So at least couple of months of breathing time should have been given to us to fix this issue.\nIn Rapido, we already run integration tests using presto-testing library.\nWe use io.prestosql.testing.DistributedQueryRunner and io.prestosql.testing.StandaloneQueryRunner for that. It takes around 8secs to boot the server.\nThose are fast and lot more configurable from java codebase, compared to the official docker image, which involves  lots of plugins, costing a boot-up time > 40secs.", "url": "https://github.com/trinodb/trino/pull/6084#discussion_r567021457", "createdAt": "2021-01-29T18:44:58Z", "author": {"login": "pPanda-beta"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/LegacyAccessControl.java", "diffHunk": "@@ -178,7 +176,7 @@ public void checkCanShowColumns(ConnectorSecurityContext context, SchemaTableNam\n     }\n \n     @Override\n-    public List<ColumnMetadata> filterColumns(ConnectorSecurityContext context, SchemaTableName tableName, List<ColumnMetadata> columns)\n+    public Set<String> filterColumns(ConnectorSecurityContext context, SchemaTableName tableName, Set<String> columns)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIyNTc3OQ=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzA3NjI3NQ==", "bodyText": "Are you sure, that you have checked all the\n\nThe wording here is a bit unfortunate. My point was to verify if information from ColumnMetadata are used to determine the access. Points mentioned by you do not use that information either.\nI would like to understand more how you hit this issue? As I understand the change went in 348. What version of Ranger did you use? What version of Trino (pka PrestoSQL) does it support? SPI is a complicated contract, it not only requires a plugin to be compilable but also to match Trino expectations that may vary from version to version in some subtle ways. From what I understand trying to compile that Ranger integration with Trino 348 would fail.\n\nwe had to roll back just 3hrs after deploying.\n\nPlease forgive me, I don't want to be impolite, but I guess you just found a place in your pipeline that is not well covered with tests. A place for improvement.", "url": "https://github.com/trinodb/trino/pull/6084#discussion_r567076275", "createdAt": "2021-01-29T20:28:03Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/LegacyAccessControl.java", "diffHunk": "@@ -178,7 +176,7 @@ public void checkCanShowColumns(ConnectorSecurityContext context, SchemaTableNam\n     }\n \n     @Override\n-    public List<ColumnMetadata> filterColumns(ConnectorSecurityContext context, SchemaTableName tableName, List<ColumnMetadata> columns)\n+    public Set<String> filterColumns(ConnectorSecurityContext context, SchemaTableName tableName, Set<String> columns)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIyNTc3OQ=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzExNjc0NA==", "bodyText": "Okay let me clear some points here.\n\nMe and my team neither maintains prestosql (kka Trino) or presto-ranger plugin.\nAs part of the community I contribute to ranger and also here I'm trying to help prestosql. The tests for ranger-presto-plugin is already written in ranger-repo and maintained by ranger community. Neither me or my organisation is involved in this.\nSince we are just integrating two already tested products, i.e. prestosql-348 and presto-ranger plugin, we aren\u2019t writing any kind of tests, to ensure the compatibility. We do write tests for the presto related products that we build and maintain. But not for other's products\nI totally agree the movement towards Trinodb, and my team is well aware of the fact that with trinodb lots of things will be broken.  But this change happened before trino (27th Dec 2020) came into picture. We decided to go with prestosql-348 instead of trino, trino releases was readily available. Cause we know things will be broken with Trino. It would be better if we can keep this \"trino\" renaming aside on this conversation .\nThe mistake that happened from my side is that we assumed presto-348 is fully backward compatible with prestosql spi 331.  We have other plugins also which are using spi-331. We found most of the features were already working except a few. But whichever feature was broken we got explicit errors. This one produced incorrect results without giving any error messages.\n\nSome suggestions from my side:\n\nIf this was done in a proper deprecation manner then we may have survived the mess.\nIf there is any breaking change (like exposed public function/api change), it would be nice to mention on the changelog / release notes. Me and my team had read the changelogs. \"...coherent with other filter methods..\" never gave any hint on this much big bug.\nIt is best to follow semver 2.0, frankly speaking 331 -> 348 doesn\u2019t give proper idea on what could be breaking.\nFor SPI / any public rest api it is good to have a +/- 6 months of compatibility and deprecation window.\n\nIt gives enough buffer to other community projects to move in their pace.\nConsumers will have more confidence and fearlessly migrate to next version. Thinking about the breaking changes we dropped the plan to migrate to \"Trino\". Now it seems we have to drop the plan for presto-348 also. I dont want to justify but may be because of those fears only Qubole R60 (latest) is stuck at Prestosql 317 (since 2020-Q1)\n\n\n\nHow much do we use Trino (fka prestosql) ?\nWell we are one of the successful presto on kubernetes adopter with a \"pay as you go\" model. I can proudly say our presto helm chart can compete with enterprise prestosql distributions like Qubole.\nApart from load based auto scaling, we also have resource groups, gcs based query logging, ranger integration, atlas integration.  We maintain multiple presto clusters. Also during releases we use presto gateway to do a proper blue green deployment. And if progress remains like this, then I'm very sorry to say that may be we wont able to upgrade Trino (fka prestosql) more than once every 6 months. Frankly we either need more confidence on backward compatibility or explicit mention of broken features in changelog.", "url": "https://github.com/trinodb/trino/pull/6084#discussion_r567116744", "createdAt": "2021-01-29T21:59:21Z", "author": {"login": "pPanda-beta"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/LegacyAccessControl.java", "diffHunk": "@@ -178,7 +176,7 @@ public void checkCanShowColumns(ConnectorSecurityContext context, SchemaTableNam\n     }\n \n     @Override\n-    public List<ColumnMetadata> filterColumns(ConnectorSecurityContext context, SchemaTableName tableName, List<ColumnMetadata> columns)\n+    public Set<String> filterColumns(ConnectorSecurityContext context, SchemaTableName tableName, Set<String> columns)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIyNTc3OQ=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzEyMDY3NQ==", "bodyText": "we assumed presto-348 is fully backward compatible with prestosql spi 331. We have other plugins also which are using spi-331. We found most of the features were already working except a few. But whichever feature was broken we got explicit errors. This one produced incorrect results without giving any error messages.\n\nNot strictly related, but there is potential silent incorrect results unless plugin is updated, see https://trino.io/docs/current/release/release-341.html#spi-changes\nHope that helps.\n\nIf there is any breaking change (like exposed public function/api change), it would be nice to mention on the changelog / release notes. Me and my team had read the changelogs. \"...coherent with other filter methods..\" never gave any hint on this much big bug.\n\nThe good side is that we did not miss that in release notes, but i see that was not helpful.\nWhat kind of wording do you think would be helpful here?", "url": "https://github.com/trinodb/trino/pull/6084#discussion_r567120675", "createdAt": "2021-01-29T22:09:10Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/LegacyAccessControl.java", "diffHunk": "@@ -178,7 +176,7 @@ public void checkCanShowColumns(ConnectorSecurityContext context, SchemaTableNam\n     }\n \n     @Override\n-    public List<ColumnMetadata> filterColumns(ConnectorSecurityContext context, SchemaTableName tableName, List<ColumnMetadata> columns)\n+    public Set<String> filterColumns(ConnectorSecurityContext context, SchemaTableName tableName, Set<String> columns)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIyNTc3OQ=="}, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTkxMzQwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataListing.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMToyNDoyMlrOH5u-jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMToyNDoyMlrOH5u-jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMwMDU1OA==", "bodyText": "you can use mappedCopy here :)", "url": "https://github.com/trinodb/trino/pull/6084#discussion_r530300558", "createdAt": "2020-11-25T11:24:22Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataListing.java", "diffHunk": "@@ -140,12 +141,21 @@ private MetadataListing() {}\n \n         ImmutableMap.Builder<SchemaTableName, List<ColumnMetadata>> result = ImmutableMap.builder();\n         for (Entry<SchemaTableName, List<ColumnMetadata>> entry : tableColumns.entrySet()) {\n-            if (allowedTables.contains(entry.getKey())) {\n-                result.put(entry.getKey(), accessControl.filterColumns(\n-                        session.toSecurityContext(),\n-                        new CatalogSchemaTableName(prefix.getCatalogName(), entry.getKey()),\n-                        entry.getValue()));\n+            if (!allowedTables.contains(entry.getKey())) {\n+                continue;\n             }\n+            List<ColumnMetadata> columns = entry.getValue();\n+            Set<String> allowedColumns = accessControl.filterColumns(\n+                    session.toSecurityContext(),\n+                    new CatalogSchemaTableName(prefix.getCatalogName(), entry.getKey()),\n+                    columns.stream()\n+                            .map(ColumnMetadata::getName)\n+                            .collect(toImmutableSet()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTkxMzU1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataListing.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMToyNDoyM1rOH5u-oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMToyNDoyM1rOH5u-oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMwMDU3Ng==", "bodyText": "you can use filteredCopy that @kokosing added for reuse :)", "url": "https://github.com/trinodb/trino/pull/6084#discussion_r530300576", "createdAt": "2020-11-25T11:24:23Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataListing.java", "diffHunk": "@@ -140,12 +141,21 @@ private MetadataListing() {}\n \n         ImmutableMap.Builder<SchemaTableName, List<ColumnMetadata>> result = ImmutableMap.builder();\n         for (Entry<SchemaTableName, List<ColumnMetadata>> entry : tableColumns.entrySet()) {\n-            if (allowedTables.contains(entry.getKey())) {\n-                result.put(entry.getKey(), accessControl.filterColumns(\n-                        session.toSecurityContext(),\n-                        new CatalogSchemaTableName(prefix.getCatalogName(), entry.getKey()),\n-                        entry.getValue()));\n+            if (!allowedTables.contains(entry.getKey())) {\n+                continue;\n             }\n+            List<ColumnMetadata> columns = entry.getValue();\n+            Set<String> allowedColumns = accessControl.filterColumns(\n+                    session.toSecurityContext(),\n+                    new CatalogSchemaTableName(prefix.getCatalogName(), entry.getKey()),\n+                    columns.stream()\n+                            .map(ColumnMetadata::getName)\n+                            .collect(toImmutableSet()));\n+            result.put(\n+                    entry.getKey(),\n+                    columns.stream()\n+                            .filter(column -> allowedColumns.contains(column.getName()))\n+                            .collect(toImmutableList()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTkxODk5OnYy", "diffSide": "RIGHT", "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedAccessControl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMToyNTo0NFrOH5vB2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMToyNTo0NFrOH5vB2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMwMTQwMw==", "bodyText": "This can be further simplified with com.google.common.collect.Sets#difference\n(separate commit, if you decide to do so)", "url": "https://github.com/trinodb/trino/pull/6084#discussion_r530301403", "createdAt": "2020-11-25T11:25:44Z", "author": {"login": "findepi"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedAccessControl.java", "diffHunk": "@@ -238,8 +235,8 @@ public void checkCanShowColumns(ConnectorSecurityContext context, SchemaTableNam\n \n         Set<String> restrictedColumns = rule.getRestrictedColumns();\n         return columns.stream()\n-                .filter(columnMetadata -> !restrictedColumns.contains(columnMetadata.getName()))\n-                .collect(toImmutableList());\n+                .filter(column -> !restrictedColumns.contains(column))\n+                .collect(toImmutableSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTkxOTMwOnYy", "diffSide": "RIGHT", "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedSystemAccessControl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMToyNTo1MFrOH5vCDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMToyNTo1MFrOH5vCDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMwMTQ1NA==", "bodyText": "This can be further simplified with com.google.common.collect.Sets#difference\n(separate commit, if you decide to do so)", "url": "https://github.com/trinodb/trino/pull/6084#discussion_r530301454", "createdAt": "2020-11-25T11:25:50Z", "author": {"login": "findepi"}, "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedSystemAccessControl.java", "diffHunk": "@@ -587,8 +585,8 @@ public void checkCanShowColumns(SystemSecurityContext context, CatalogSchemaTabl\n \n         Set<String> restrictedColumns = rule.getRestrictedColumns();\n         return columns.stream()\n-                .filter(columnMetadata -> !restrictedColumns.contains(columnMetadata.getName()))\n-                .collect(toImmutableList());\n+                .filter(column -> !restrictedColumns.contains(column))\n+                .collect(toImmutableSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4656, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}