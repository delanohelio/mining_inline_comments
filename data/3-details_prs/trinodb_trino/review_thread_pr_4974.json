{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczNDMxNTA1", "number": 4974, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDozNToyMFrOEcO8ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMTo1OToyOFrOEefNRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDQwNTA2OnYy", "diffSide": "RIGHT", "path": "presto-accumulo/src/main/java/io/prestosql/plugin/accumulo/io/AccumuloRecordCursor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDozNToyMFrOHGowYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDozNToyMFrOHGowYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcyMTI1MA==", "bodyText": "Change all these to createTimestampType(3) or add a TIMESTAMP_MILLIS constant so it's clear why these conversions are using milliseconds.", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r476721250", "createdAt": "2020-08-25T20:35:20Z", "author": {"login": "electrum"}, "path": "presto-accumulo/src/main/java/io/prestosql/plugin/accumulo/io/AccumuloRecordCursor.java", "diffHunk": "@@ -217,7 +218,7 @@ public long getLong(int field)\n             return serializer.getTime(fieldToColumnName[field]).getTime();\n         }\n         if (type.equals(TIMESTAMP)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDQxNjg3OnYy", "diffSide": "RIGHT", "path": "presto-accumulo/src/main/java/io/prestosql/plugin/accumulo/model/Field.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDozOTowM1rOHGo3zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDozOTowM1rOHGo3zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcyMzE1MQ==", "bodyText": "This cast is wrong", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r476723151", "createdAt": "2020-08-25T20:39:03Z", "author": {"login": "electrum"}, "path": "presto-accumulo/src/main/java/io/prestosql/plugin/accumulo/model/Field.java", "diffHunk": "@@ -335,7 +337,7 @@ private static Object convert(Object value, Type type)\n         }\n \n         if (type.equals(TIMESTAMP)) {\n-            return new Timestamp((long) value);\n+            return new Timestamp(floorDiv((int) value, MICROSECONDS_PER_MILLISECOND));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDQ3MjM0OnYy", "diffSide": "RIGHT", "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/ElasticsearchQueryBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDo1NTozNlrOHGpZhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDo1NTozNlrOHGpZhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjczMTc4MA==", "bodyText": "This cast is wrong", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r476731780", "createdAt": "2020-08-25T20:55:36Z", "author": {"login": "electrum"}, "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/ElasticsearchQueryBuilder.java", "diffHunk": "@@ -158,7 +160,7 @@ private static Object getValue(Type type, Object value)\n             return ((Slice) value).toStringUtf8();\n         }\n         if (type.equals(TIMESTAMP)) {\n-            return Instant.ofEpochMilli((Long) value)\n+            return Instant.ofEpochMilli(floorDiv((Integer) value, MICROSECONDS_PER_MILLISECOND))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDQ3ODY1OnYy", "diffSide": "RIGHT", "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/decoders/TimestampDecoder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDo1NzozN1rOHGpdkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDo1NzozN1rOHGpdkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjczMjgxNw==", "bodyText": "I'd remove this wrapping", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r476732817", "createdAt": "2020-08-25T20:57:37Z", "author": {"login": "electrum"}, "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/decoders/TimestampDecoder.java", "diffHunk": "@@ -77,11 +78,11 @@ else if (value instanceof Number) {\n                         value.getClass().getSimpleName()));\n             }\n \n-            long epochMillis = timestamp.atOffset(ZoneOffset.UTC)\n+            long epochMicros = timestamp.atOffset(ZoneOffset.UTC)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDUwMzQ4OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/type/Timestamps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMTowNTozM1rOHGptNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMTowNTozM1rOHGptNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjczNjgyMQ==", "bodyText": "Shouldn't this be floorDiv?", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r476736821", "createdAt": "2020-08-25T21:05:33Z", "author": {"login": "electrum"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/Timestamps.java", "diffHunk": "@@ -104,6 +104,11 @@ public static long roundDiv(long value, long factor)\n         return (value + 1 - (factor / 2)) / factor;\n     }\n \n+    public static long truncateEpochMicrosToMillis(long epochMicros)\n+    {\n+        return epochMicros / MICROSECONDS_PER_MILLISECOND * MICROSECONDS_PER_MILLISECOND;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDU3NDMwOnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/PartitionTransforms.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMToyNDowNlrOHGqZng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMToyNDowNlrOHGqZng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc0ODE5MA==", "bodyText": "From the Iceberg changes\nlong epochMicros = TIMESTAMP.getLong(block, position);\nlong epochMillis = floorDiv(epochMicros, MICROSECONDS_PER_MILLISECOND);\nepochMillis = function.applyAsLong(epochMillis);\nINTEGER.writeLong(builder, epochMillis);", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r476748190", "createdAt": "2020-08-25T21:24:06Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/PartitionTransforms.java", "diffHunk": "@@ -252,7 +253,7 @@ private static Block extractTimestamp(Block block, LongUnaryOperator function)\n                 continue;\n             }\n             long value = TIMESTAMP.getLong(block, position);\n-            value = function.applyAsLong(value);\n+            value = function.applyAsLong(floorDiv(value, MICROSECONDS_PER_MILLISECOND));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDU4MjY3OnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/PartitionTransforms.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMToyNTozNFrOHGqfBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMToyNTozNFrOHGqfBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc0OTU3Mg==", "bodyText": "Inline this now, like the others\nreturn bucketBlock(block, count, position -> bucketHash(TIMESTAMP.getLong(block, position)));", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r476749572", "createdAt": "2020-08-25T21:25:34Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/PartitionTransforms.java", "diffHunk": "@@ -358,7 +359,7 @@ private static Block bucketTimestamp(Block block, int count)\n     {\n         return bucketBlock(block, count, position -> {\n             long value = TIMESTAMP.getLong(block, position);\n-            return bucketHash(MILLISECONDS.toMicros(value));\n+            return bucketHash(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDYxMjI0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/DateFormat.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMTozMDo1OVrOHGqyOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMjo0MzoyM1rOHGuQbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc1NDQ4OA==", "bodyText": "Wouldn't this be simpler as\ntimestamp = roundDiv(timestamp, MICROSECONDS_PER_MILLISECOND);", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r476754488", "createdAt": "2020-08-25T21:30:59Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/DateFormat.java", "diffHunk": "@@ -36,12 +36,10 @@ private DateFormat() {}\n \n     @LiteralParameters({\"x\", \"p\"})\n     @SqlType(StandardTypes.VARCHAR)\n-    public static Slice format(@LiteralParameter(\"p\") long precision, ConnectorSession session, @SqlType(\"timestamp(p)\") long timestamp, @SqlType(\"varchar(x)\") Slice formatString)\n+    public static Slice format(ConnectorSession session, @SqlType(\"timestamp(p)\") long timestamp, @SqlType(\"varchar(x)\") Slice formatString)\n     {\n         // TODO: currently, date formatting only supports up to millis, so round to that unit\n-        if (precision > 3) {\n-            timestamp = scaleEpochMicrosToMillis(round(timestamp, 3));\n-        }\n+        timestamp = scaleEpochMicrosToMillis(round(timestamp, 3));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgxMTM3Mw==", "bodyText": "Yes. However, I initially wrote it that way to make it explicit we're scaling \"epoch\" values. roundDiv is mostly an implementation detail that gets used by some of the convenience functions for operating on timestamps. I know we've started using it in other places, though.", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r476811373", "createdAt": "2020-08-25T22:43:23Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/DateFormat.java", "diffHunk": "@@ -36,12 +36,10 @@ private DateFormat() {}\n \n     @LiteralParameters({\"x\", \"p\"})\n     @SqlType(StandardTypes.VARCHAR)\n-    public static Slice format(@LiteralParameter(\"p\") long precision, ConnectorSession session, @SqlType(\"timestamp(p)\") long timestamp, @SqlType(\"varchar(x)\") Slice formatString)\n+    public static Slice format(ConnectorSession session, @SqlType(\"timestamp(p)\") long timestamp, @SqlType(\"varchar(x)\") Slice formatString)\n     {\n         // TODO: currently, date formatting only supports up to millis, so round to that unit\n-        if (precision > 3) {\n-            timestamp = scaleEpochMicrosToMillis(round(timestamp, 3));\n-        }\n+        timestamp = scaleEpochMicrosToMillis(round(timestamp, 3));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc1NDQ4OA=="}, "originalCommit": null, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDYyNTQwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/DateToTimestampCast.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMTozMzozN1rOHGq6ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMTozMzozN1rOHGq6ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc1NjY2Ng==", "bodyText": "return DAYS.toMicros(date);\nor\nreturn multiplyExact(date, MICROSECONDS_PER_DAY);", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r476756666", "createdAt": "2020-08-25T21:33:37Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/DateToTimestampCast.java", "diffHunk": "@@ -32,21 +31,15 @@ private DateToTimestampCast() {}\n \n     @LiteralParameters(\"p\")\n     @SqlType(\"timestamp(p)\")\n-    public static long cast(@LiteralParameter(\"p\") long precision, @SqlType(StandardTypes.DATE) long date)\n+    public static long castToShort(@SqlType(StandardTypes.DATE) long date)\n     {\n-        long result = TimeUnit.DAYS.toMillis(date);\n-\n-        if (precision > 3) {\n-            return scaleEpochMillisToMicros(result);\n-        }\n-\n-        return result;\n+        return scaleEpochMillisToMicros(TimeUnit.DAYS.toMillis(date));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDY0MzY5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/SequenceIntervalDayToSecond.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMTozNzowMVrOHGrGeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMjo0NTo0NVrOHGuXLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc1OTY3Mw==", "bodyText": "scaleEpochMillisToMicros", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r476759673", "createdAt": "2020-08-25T21:37:01Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/SequenceIntervalDayToSecond.java", "diffHunk": "@@ -44,15 +43,12 @@ private SequenceIntervalDayToSecond() {}\n     @LiteralParameters(\"p\")\n     @SqlType(\"array(timestamp(p))\")\n     public static Block sequence(\n-            @LiteralParameter(\"p\") long precision,\n             @SqlType(\"timestamp(p)\") long start,\n             @SqlType(\"timestamp(p)\") long stop,\n             @SqlType(StandardTypes.INTERVAL_DAY_TO_SECOND) long step)\n     {\n-        if (precision > 3) {\n-            // scale to micros\n-            step = multiplyExact(step, MICROSECONDS_PER_MILLISECOND);\n-        }\n+        // scale to micros", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgxMzEwMg==", "bodyText": "step is not an epoch value. It's just a \"millisecond delta\", so using the epoch functions is misleading", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r476813102", "createdAt": "2020-08-25T22:45:45Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/SequenceIntervalDayToSecond.java", "diffHunk": "@@ -44,15 +43,12 @@ private SequenceIntervalDayToSecond() {}\n     @LiteralParameters(\"p\")\n     @SqlType(\"array(timestamp(p))\")\n     public static Block sequence(\n-            @LiteralParameter(\"p\") long precision,\n             @SqlType(\"timestamp(p)\") long start,\n             @SqlType(\"timestamp(p)\") long stop,\n             @SqlType(StandardTypes.INTERVAL_DAY_TO_SECOND) long step)\n     {\n-        if (precision > 3) {\n-            // scale to micros\n-            step = multiplyExact(step, MICROSECONDS_PER_MILLISECOND);\n-        }\n+        // scale to micros", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc1OTY3Mw=="}, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDY0NTg5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/TimestampOperators.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMTozNzoyNFrOHGrHxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMjo0ODowNFrOHGudSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc2MDAwNA==", "bodyText": "scaleEpochMillisToMicros", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r476760004", "createdAt": "2020-08-25T21:37:24Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/TimestampOperators.java", "diffHunk": "@@ -227,14 +226,11 @@ public static long xxHash64(@SqlType(\"timestamp(p)\") LongTimestamp value)\n         @SqlType(\"timestamp(u)\")\n         @Constraint(variable = \"u\", expression = \"max(3, p)\") // Interval is currently p = 3, so the minimum result precision is 3.\n         public static long add(\n-                @LiteralParameter(\"p\") long precision,\n                 @SqlType(\"timestamp(p)\") long timestamp,\n                 @SqlType(StandardTypes.INTERVAL_DAY_TO_SECOND) long interval)\n         {\n-            if (precision > 3) {\n-                // scale to micros\n-                interval = multiplyExact(interval, MICROSECONDS_PER_MILLISECOND);\n-            }\n+            // scale to micros", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgxNDY2Ng==", "bodyText": "Same as above. interval is not an epoch-based value, so using that function is misleading", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r476814666", "createdAt": "2020-08-25T22:48:04Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/TimestampOperators.java", "diffHunk": "@@ -227,14 +226,11 @@ public static long xxHash64(@SqlType(\"timestamp(p)\") LongTimestamp value)\n         @SqlType(\"timestamp(u)\")\n         @Constraint(variable = \"u\", expression = \"max(3, p)\") // Interval is currently p = 3, so the minimum result precision is 3.\n         public static long add(\n-                @LiteralParameter(\"p\") long precision,\n                 @SqlType(\"timestamp(p)\") long timestamp,\n                 @SqlType(StandardTypes.INTERVAL_DAY_TO_SECOND) long interval)\n         {\n-            if (precision > 3) {\n-                // scale to micros\n-                interval = multiplyExact(interval, MICROSECONDS_PER_MILLISECOND);\n-            }\n+            // scale to micros", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc2MDAwNA=="}, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDY1NzAzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/TimestampToDateCast.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMTozOToyOVrOHGrOuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMTozOToyOVrOHGrOuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc2MTc4NA==", "bodyText": "I think this is wrong for negative epoch\nreturn floorMod(timestamp, MICROSECONDS_PER_DAY);", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r476761784", "createdAt": "2020-08-25T21:39:29Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/TimestampToDateCast.java", "diffHunk": "@@ -35,19 +34,15 @@ private TimestampToDateCast() {}\n \n     @LiteralParameters(\"p\")\n     @SqlType(StandardTypes.DATE)\n-    public static long cast(@LiteralParameter(\"p\") long precision, ConnectorSession session, @SqlType(\"timestamp(p)\") long timestamp)\n+    public static long cast(ConnectorSession session, @SqlType(\"timestamp(p)\") long timestamp)\n     {\n-        if (precision > 3) {\n-            timestamp = scaleEpochMicrosToMillis(timestamp);\n-        }\n-\n-        return TimeUnit.MILLISECONDS.toDays(timestamp);\n+        return TimeUnit.MILLISECONDS.toDays(scaleEpochMicrosToMillis(timestamp));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDY2MzgxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/TimestampToTimeWithTimezoneCast.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMTo0MDo0NFrOHGrS1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMjo1MzowNlrOHGurXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc2MjgzNw==", "bodyText": "value = roundDiv(value, MICROSECONDS_PER_MILLISECOND);", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r476762837", "createdAt": "2020-08-25T21:40:44Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/TimestampToTimeWithTimezoneCast.java", "diffHunk": "@@ -38,9 +38,7 @@ private TimestampToTimeWithTimezoneCast() {}\n     @SqlType(StandardTypes.TIME_WITH_TIME_ZONE)\n     public static long cast(@LiteralParameter(\"p\") long precision, ConnectorSession session, @SqlType(\"timestamp(p)\") long value)\n     {\n-        if (precision > 3) {\n-            value = scaleEpochMicrosToMillis(round(value, 3));\n-        }\n+        value = scaleEpochMicrosToMillis(round(value, 3));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgxODI2OQ==", "bodyText": "I'm adding epochMicrosToMillisWithRounding, per comment above re: roundDiv", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r476818269", "createdAt": "2020-08-25T22:53:06Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/TimestampToTimeWithTimezoneCast.java", "diffHunk": "@@ -38,9 +38,7 @@ private TimestampToTimeWithTimezoneCast() {}\n     @SqlType(StandardTypes.TIME_WITH_TIME_ZONE)\n     public static long cast(@LiteralParameter(\"p\") long precision, ConnectorSession session, @SqlType(\"timestamp(p)\") long value)\n     {\n-        if (precision > 3) {\n-            value = scaleEpochMicrosToMillis(round(value, 3));\n-        }\n+        value = scaleEpochMicrosToMillis(round(value, 3));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc2MjgzNw=="}, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDY2OTAwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/WithTimeZone.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMTo0MTo0NlrOHGrWLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMTo0MTo0NlrOHGrWLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc2MzY5Mw==", "bodyText": "scaleEpochMicrosToMillis", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r476763693", "createdAt": "2020-08-25T21:41:46Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/WithTimeZone.java", "diffHunk": "@@ -55,7 +57,7 @@ public static long shortPrecision(@LiteralParameter(\"p\") long precision, @SqlTyp\n             throw new PrestoException(INVALID_FUNCTION_ARGUMENT, format(\"'%s' is not a valid time zone\", zoneId.toStringUtf8()));\n         }\n         DateTimeZone toDateTimeZone = getDateTimeZone(toTimeZoneKey);\n-        return packDateTimeWithZone(UTC.getMillisKeepLocal(toDateTimeZone, timestamp), toTimeZoneKey);\n+        return packDateTimeWithZone(UTC.getMillisKeepLocal(toDateTimeZone, floorDiv(timestamp, MICROSECONDS_PER_MILLISECOND)), toTimeZoneKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDY3MzU3OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/type/DateTimes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMTo0MjozOVrOHGrZFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMTo0MjozOVrOHGrZFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc2NDQzNw==", "bodyText": "multiplyExact?", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r476764437", "createdAt": "2020-08-25T21:42:39Z", "author": {"login": "electrum"}, "path": "presto-main/src/main/java/io/prestosql/type/DateTimes.java", "diffHunk": "@@ -358,16 +355,12 @@ private static long parseShortTimestamp(String value)\n             fractionValue = Long.parseLong(fraction);\n         }\n \n-        if (precision <= 3) {\n-            // scale to millis\n-            return epochSecond * MILLISECONDS_PER_SECOND + rescale(fractionValue, precision, 3);\n-        }\n-        else if (precision <= MAX_SHORT_PRECISION) {\n-            // scale to micros\n-            return epochSecond * MICROSECONDS_PER_SECOND + rescale(fractionValue, precision, 6);\n+        if (precision > MAX_SHORT_PRECISION) {\n+            throw new IllegalArgumentException(format(\"Cannot parse '%s' as short timestamp. Max allowed precision = %s\", value, MAX_SHORT_PRECISION));\n         }\n \n-        throw new IllegalArgumentException(format(\"Cannot parse '%s' as short timestamp. Max allowed precision = %s\", value, MAX_SHORT_PRECISION));\n+        // scale to micros\n+        return epochSecond * MICROSECONDS_PER_SECOND + rescale(fractionValue, precision, 6);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDY3ODgyOnYy", "diffSide": "RIGHT", "path": "presto-orc/src/main/java/io/prestosql/orc/OrcWriteValidation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMTo0MzozOVrOHGrciA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMTo0MzozOVrOHGrciA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc2NTMyMA==", "bodyText": "MICROSECONDS_PER_MILLISECOND", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r476765320", "createdAt": "2020-08-25T21:43:39Z", "author": {"login": "electrum"}, "path": "presto-orc/src/main/java/io/prestosql/orc/OrcWriteValidation.java", "diffHunk": "@@ -549,7 +551,7 @@ private static long hashPositionSkipNullMapKeys(Type type, Block block, int posi\n                 // A flaw in ORC encoding makes it impossible to represent timestamp\n                 // between 1969-12-31 23:59:59.000, exclusive, and 1970-01-01 00:00:00.000, exclusive.\n                 // Therefore, such data won't round trip. The data read back is expected to be 1 second later than the original value.\n-                long mills = TIMESTAMP.getLong(block, position);\n+                long mills = floorDiv(TIMESTAMP.getLong(block, position), MICROSECONDS_PER_SECOND);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDY5MTcwOnYy", "diffSide": "LEFT", "path": "presto-raptor-legacy/src/main/java/io/prestosql/plugin/raptor/legacy/storage/organization/TemporalFunction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMTo0NjoxMVrOHGrktw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMTo0NjoxMVrOHGrktw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc2NzQxNQ==", "bodyText": "I think this was wrong for negative epoch\nlong days = floorDiv(TIMESTAMP.getLong(block, position), MICROSECONDS_PER_DAY);", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r476767415", "createdAt": "2020-08-25T21:46:11Z", "author": {"login": "electrum"}, "path": "presto-raptor-legacy/src/main/java/io/prestosql/plugin/raptor/legacy/storage/organization/TemporalFunction.java", "diffHunk": "@@ -36,7 +38,7 @@ public static int getDay(Type type, Block block, int position)\n         }\n \n         if (type.equals(TIMESTAMP)) {\n-            long millis = TIMESTAMP.getLong(block, position);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDcwNDc1OnYy", "diffSide": "RIGHT", "path": "presto-raptor-legacy/src/main/java/io/prestosql/plugin/raptor/legacy/systemtables/ColumnRangesSystemTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMTo0ODo0OVrOHGrtVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMTo0ODo0OVrOHGrtVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc2OTYyMQ==", "bodyText": "Split out the type\nelse if (columnType.equals(TIMESTAMP)) {\n    long value = resultSet.getLong(i + 1);\n    if (!resultSet.wasNull()) {\n        columnType.writeValue(blockBuilder, value * MICROSECONDS_PER_MILLISECOND);\n    }\n    else {\n        blockBuilder.appendNull();\n    }\n}", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r476769621", "createdAt": "2020-08-25T21:48:49Z", "author": {"login": "electrum"}, "path": "presto-raptor-legacy/src/main/java/io/prestosql/plugin/raptor/legacy/systemtables/ColumnRangesSystemTable.java", "diffHunk": "@@ -128,6 +128,7 @@ public ConnectorPageSource pageSource(ConnectorTransactionHandle transactionHand\n                     if (columnType.equals(BIGINT) || columnType.equals(DATE) || columnType.equals(TIMESTAMP)) {\n                         long value = resultSet.getLong(i + 1);\n                         if (!resultSet.wasNull()) {\n+                            // TODO: timestamp", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDc1NTE5OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/type/ShortTimestampType.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMTo1ODo1MlrOHGsNng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzo0Nzo1OVrOHMPzog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc3Nzg4Ng==", "bodyText": "We can encapsulate (same goes for whole class...)\nlong epochMicros = getLong(block, position);", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r476777886", "createdAt": "2020-08-25T21:58:52Z", "author": {"login": "electrum"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/ShortTimestampType.java", "diffHunk": "@@ -127,17 +125,7 @@ public Object getObjectValue(ConnectorSession session, Block block, int position\n             return null;\n         }\n \n-        long value = block.getLong(position, 0);\n-\n-        if (getPrecision() <= 3) {\n-            value = scaleEpochMillisToMicros(value);\n-        }\n-\n-        return SqlTimestamp.newInstance(getPrecision(), value, 0);\n-    }\n-\n-    private static long scaleEpochMillisToMicros(long epochMillis)\n-    {\n-        return multiplyExact(epochMillis, 1000);\n+        long epochMicros = block.getLong(position, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgyNTA1Mw==", "bodyText": "Just to be clear, are you suggesting I add a getEpochMicros(Block, position) method that returns that?", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r476825053", "createdAt": "2020-08-25T22:59:39Z", "author": {"login": "martint"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/ShortTimestampType.java", "diffHunk": "@@ -127,17 +125,7 @@ public Object getObjectValue(ConnectorSession session, Block block, int position\n             return null;\n         }\n \n-        long value = block.getLong(position, 0);\n-\n-        if (getPrecision() <= 3) {\n-            value = scaleEpochMillisToMicros(value);\n-        }\n-\n-        return SqlTimestamp.newInstance(getPrecision(), value, 0);\n-    }\n-\n-    private static long scaleEpochMillisToMicros(long epochMillis)\n-    {\n-        return multiplyExact(epochMillis, 1000);\n+        long epochMicros = block.getLong(position, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc3Nzg4Ng=="}, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwMzkzOA==", "bodyText": "No, I meant just calling the getLong method on the type, rather than calling it directly on the block. Exactly the code I wrote in the comment.", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r482603938", "createdAt": "2020-09-02T23:47:59Z", "author": {"login": "electrum"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/ShortTimestampType.java", "diffHunk": "@@ -127,17 +125,7 @@ public Object getObjectValue(ConnectorSession session, Block block, int position\n             return null;\n         }\n \n-        long value = block.getLong(position, 0);\n-\n-        if (getPrecision() <= 3) {\n-            value = scaleEpochMillisToMicros(value);\n-        }\n-\n-        return SqlTimestamp.newInstance(getPrecision(), value, 0);\n-    }\n-\n-    private static long scaleEpochMillisToMicros(long epochMillis)\n-    {\n-        return multiplyExact(epochMillis, 1000);\n+        long epochMicros = block.getLong(position, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc3Nzg4Ng=="}, "originalCommit": null, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDc3MjkwOnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestAggregations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMjowMjozMFrOHGsY9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMzowMDozNFrOHGvKHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc4MDc5MA==", "bodyText": "We should document that checksum() changed for timestamp in this release. (we don't guarantee that, but good to tell people when we are aware)", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r476780790", "createdAt": "2020-08-25T22:02:30Z", "author": {"login": "electrum"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestAggregations.java", "diffHunk": "@@ -718,8 +718,8 @@ public void testApproximateCountDistinct()\n         assertQuery(\"SELECT approx_distinct(orderdate, 0.023) FROM orders\", \"SELECT 2443\");\n \n         // test timestamp\n-        assertQuery(\"SELECT approx_distinct(CAST(orderdate AS TIMESTAMP)) FROM orders\", \"SELECT 2384\");\n-        assertQuery(\"SELECT approx_distinct(CAST(orderdate AS TIMESTAMP), 0.023) FROM orders\", \"SELECT 2384\");\n+        assertQuery(\"SELECT approx_distinct(CAST(orderdate AS TIMESTAMP)) FROM orders\", \"SELECT 2379\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgyNjE0Mg==", "bodyText": "This is actually a different issue. xxhash for a value with p <= 3 now returns a different value because, so approx_distinct produces different results.", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r476826142", "createdAt": "2020-08-25T23:00:34Z", "author": {"login": "martint"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestAggregations.java", "diffHunk": "@@ -718,8 +718,8 @@ public void testApproximateCountDistinct()\n         assertQuery(\"SELECT approx_distinct(orderdate, 0.023) FROM orders\", \"SELECT 2443\");\n \n         // test timestamp\n-        assertQuery(\"SELECT approx_distinct(CAST(orderdate AS TIMESTAMP)) FROM orders\", \"SELECT 2384\");\n-        assertQuery(\"SELECT approx_distinct(CAST(orderdate AS TIMESTAMP), 0.023) FROM orders\", \"SELECT 2384\");\n+        assertQuery(\"SELECT approx_distinct(CAST(orderdate AS TIMESTAMP)) FROM orders\", \"SELECT 2379\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc4MDc5MA=="}, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzcwODYwOnYy", "diffSide": "RIGHT", "path": "presto-raptor-legacy/src/main/java/io/prestosql/plugin/raptor/legacy/storage/ShardStats.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDowOTo0NFrOHKHjWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzo1Mjo1MVrOHMP5dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM3MTU0NA==", "bodyText": "Not sure what we want to do here. @electrum, thoughts?", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r480371544", "createdAt": "2020-08-31T20:09:44Z", "author": {"login": "martint"}, "path": "presto-raptor-legacy/src/main/java/io/prestosql/plugin/raptor/legacy/storage/ShardStats.java", "diffHunk": "@@ -87,6 +87,7 @@ private static ColumnStats doComputeColumnStats(OrcReader orcReader, long column\n         if (type.equals(BigintType.BIGINT) ||\n                 type.equals(DateType.DATE) ||\n                 type.equals(TimestampType.TIMESTAMP)) {\n+            // TODO: timestamp", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQxODYwMA==", "bodyText": "I would guess for TIMESTAMP we need to floor divide to millis.... Raptor only supports TS(3)", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r480418600", "createdAt": "2020-08-31T21:49:45Z", "author": {"login": "dain"}, "path": "presto-raptor-legacy/src/main/java/io/prestosql/plugin/raptor/legacy/storage/ShardStats.java", "diffHunk": "@@ -87,6 +87,7 @@ private static ColumnStats doComputeColumnStats(OrcReader orcReader, long column\n         if (type.equals(BigintType.BIGINT) ||\n                 type.equals(DateType.DATE) ||\n                 type.equals(TimestampType.TIMESTAMP)) {\n+            // TODO: timestamp", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM3MTU0NA=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwNTQyOQ==", "bodyText": "Since we're now storing micros, there's nothing to do here, as the stats will also be in micros.\nAs a follow up, or as part of this PR, we could change Raptor to timestamp(6) and the only difference would be that users get more precision.", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r482605429", "createdAt": "2020-09-02T23:52:51Z", "author": {"login": "electrum"}, "path": "presto-raptor-legacy/src/main/java/io/prestosql/plugin/raptor/legacy/storage/ShardStats.java", "diffHunk": "@@ -87,6 +87,7 @@ private static ColumnStats doComputeColumnStats(OrcReader orcReader, long column\n         if (type.equals(BigintType.BIGINT) ||\n                 type.equals(DateType.DATE) ||\n                 type.equals(TimestampType.TIMESTAMP)) {\n+            // TODO: timestamp", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM3MTU0NA=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzg3NzIwOnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergPageSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMTowMzo1M1rOHKJKVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzo1NTowOVrOHMP7-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5NzkxMQ==", "bodyText": "Is this still correct?  It thought @electrum updated Iceberg to TIMESTAMP(6)", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r480397911", "createdAt": "2020-08-31T21:03:53Z", "author": {"login": "dain"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergPageSource.java", "diffHunk": "@@ -216,7 +217,7 @@ private static Object deserializePartitionValue(Type type, String valueString, S\n                 return parseLong(valueString) * PICOSECONDS_PER_MICROSECOND;\n             }\n             if (type.equals(TIMESTAMP_MICROS)) {\n-                return parseLong(valueString);\n+                return truncateEpochMicrosToMillis(parseLong(valueString));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwNjA3Mw==", "bodyText": "Yeah, this should not change. It is already a micros value.", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r482606073", "createdAt": "2020-09-02T23:55:09Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergPageSource.java", "diffHunk": "@@ -216,7 +217,7 @@ private static Object deserializePartitionValue(Type type, String valueString, S\n                 return parseLong(valueString) * PICOSECONDS_PER_MICROSECOND;\n             }\n             if (type.equals(TIMESTAMP_MICROS)) {\n-                return parseLong(valueString);\n+                return truncateEpochMicrosToMillis(parseLong(valueString));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5NzkxMQ=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzg4MDM1OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/TypeHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMTowNDo1NlrOHKJMKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMTowNDo1NlrOHKJMKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5ODM3OQ==", "bodyText": "Should this be TIMESTAMP_MILLIS?", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r480398379", "createdAt": "2020-08-31T21:04:56Z", "author": {"login": "dain"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/TypeHelper.java", "diffHunk": "@@ -132,7 +134,7 @@ public static Object getJavaValue(Type type, Object nativeValue)\n             return ((Slice) nativeValue).toStringUtf8();\n         }\n         if (type.equals(TimestampType.TIMESTAMP)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzg4MjY3OnYy", "diffSide": "RIGHT", "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/TypeHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMTowNTozOFrOHKJNhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMTowNTozOFrOHKJNhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5ODcyNA==", "bodyText": "Maybe a a comment that kudu native type is in micros?", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r480398724", "createdAt": "2020-08-31T21:05:38Z", "author": {"login": "dain"}, "path": "presto-kudu/src/main/java/io/prestosql/plugin/kudu/TypeHelper.java", "diffHunk": "@@ -132,7 +134,7 @@ public static Object getJavaValue(Type type, Object nativeValue)\n             return ((Slice) nativeValue).toStringUtf8();\n         }\n         if (type.equals(TimestampType.TIMESTAMP)) {\n-            return ((Long) nativeValue) * 1000;\n+            return nativeValue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzg5MTM4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/DateAdd.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMTowODozOVrOHKJSww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMjo0ODowMFrOHKMN3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwMDA2Nw==", "bodyText": "Is microFraction the right name here?  I was thinking millisFraction.  I'm fine with what ever is consistent.", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r480400067", "createdAt": "2020-08-31T21:08:39Z", "author": {"login": "dain"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/DateAdd.java", "diffHunk": "@@ -44,20 +44,16 @@ public static long add(\n             @SqlType(StandardTypes.BIGINT) long value,\n             @SqlType(\"timestamp(p)\") long timestamp)\n     {\n-        long epochMillis = timestamp;\n-        int microFraction = 0;\n-        if (precision > 3) {\n-            epochMillis = scaleEpochMicrosToMillis(timestamp);\n-            microFraction = getMicrosOfMilli(timestamp);\n-        }\n+        long epochMillis = scaleEpochMicrosToMillis(timestamp);\n+        int microFraction = getMicrosOfMilli(timestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ0Nzk2Ng==", "bodyText": "No, it's not. It's misleading, as this is the fraction of the millisecond. I'll rename to microsOfMilli for clarity.", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r480447966", "createdAt": "2020-08-31T22:48:00Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/DateAdd.java", "diffHunk": "@@ -44,20 +44,16 @@ public static long add(\n             @SqlType(StandardTypes.BIGINT) long value,\n             @SqlType(\"timestamp(p)\") long timestamp)\n     {\n-        long epochMillis = timestamp;\n-        int microFraction = 0;\n-        if (precision > 3) {\n-            epochMillis = scaleEpochMicrosToMillis(timestamp);\n-            microFraction = getMicrosOfMilli(timestamp);\n-        }\n+        long epochMillis = scaleEpochMicrosToMillis(timestamp);\n+        int microFraction = getMicrosOfMilli(timestamp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwMDA2Nw=="}, "originalCommit": null, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNDA0MDM5OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/type/ShortTimestampType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMTo1OToyOFrOHKKqrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMTo1OToyOFrOHKKqrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQyMjU3NA==", "bodyText": "We should add this text from TimestampType  and is to be interpreted as local date time without regards to any time zone", "url": "https://github.com/trinodb/trino/pull/4974#discussion_r480422574", "createdAt": "2020-08-31T21:59:28Z", "author": {"login": "dain"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/ShortTimestampType.java", "diffHunk": "@@ -21,14 +21,12 @@\n import io.prestosql.spi.connector.ConnectorSession;\n \n import static io.prestosql.spi.type.TimestampTypes.hashShortTimestamp;\n-import static java.lang.Math.multiplyExact;\n import static java.lang.String.format;\n \n /**\n  * Encodes timestamps up to p = 6.\n  * <p>\n- * For 0 <= p <= 3, the value is encoded as milliseconds from the 1970-01-01 00:00:00 epoch.\n- * For 3 < p <= 6, the value is encoded as microseconds from the 1970-01-01 00:00:00 epoch.\n+ * The value is encoded as microseconds from the 1970-01-01 00:00:00 epoch.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3309, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}