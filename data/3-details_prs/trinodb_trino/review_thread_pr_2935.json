{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NDUxNDYx", "number": 2935, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMjozNjoyMFrODpvF0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTowMToxOFrODstwJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDg5NzQ1OnYy", "diffSide": "RIGHT", "path": "presto-mongodb/src/main/java/io/prestosql/plugin/mongodb/MongoSession.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMjozNjoyMFrOF5GQtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMjozNjoyMFrOF5GQtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxNTczNQ==", "bodyText": "Please revert the unrelated change.", "url": "https://github.com/trinodb/trino/pull/2935#discussion_r395415735", "createdAt": "2020-03-20T02:36:20Z", "author": {"login": "ebyhr"}, "path": "presto-mongodb/src/main/java/io/prestosql/plugin/mongodb/MongoSession.java", "diffHunk": "@@ -489,7 +489,8 @@ private boolean deleteTableMetadata(SchemaTableName schemaTableName)\n                 builder.add(metadata);\n             }\n             else {\n-                log.debug(\"Unable to guess field type from %s : %s\", value == null ? \"null\" : value.getClass().getName(), value);\n+                log.debug(\"Unable to guess field type from %s : %s\",\n+                        value == null ? \"null\" : value.getClass().getName(), value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDkzMzU2OnYy", "diffSide": "RIGHT", "path": "presto-mongodb/src/test/java/io/prestosql/plugin/mongodb/TestMongoIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMzowNjoyNFrOF5GlmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxMzo0Nzo0OVrOF9R4BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyMTA4MQ==", "bodyText": "Could you simplify this test method?\n    @Test\n    public void testGuessUnknownTypes()\n    {\n        Document document1 = new Document(\"col\", Document.parse(\"{\\\"key1\\\": \\\"value1\\\", \\\"key2\\\": null}\"));\n        client.getDatabase(\"test\").getCollection(\"tmp_guess_schema1\").insertOne(document1);\n        assertQuery(\"SHOW COLUMNS FROM test.tmp_guess_schema1\", \"SELECT 'col', 'row(key1 varchar)', '', ''\");\n        assertQuery(\"SELECT col.key1 FROM test.tmp_guess_schema1\", \"SELECT 'value1'\");\n\n        Document document2 = new Document(\"col\", new Document(\"key1\", null));\n        client.getDatabase(\"test\").getCollection(\"tmp_guess_schema2\").insertOne(document2);\n        assertQueryReturnsEmptyResult(\"SHOW COLUMNS FROM test.tmp_guess_schema2\");\n    }", "url": "https://github.com/trinodb/trino/pull/2935#discussion_r395421081", "createdAt": "2020-03-20T03:06:24Z", "author": {"login": "ebyhr"}, "path": "presto-mongodb/src/test/java/io/prestosql/plugin/mongodb/TestMongoIntegrationSmokeTest.java", "diffHunk": "@@ -180,6 +184,26 @@ public void testTemporalArrays()\n         assertOneNotNullResult(\"SELECT col[1] FROM tmp_array8\");\n     }\n \n+    @Test\n+    public void testGuessSchema()\n+    {\n+        Document doc1 = new Document(ImmutableMap.of(\n+                \"colA\", new Document(new HashMap<String, Object>() {\n+                    {\n+                        put(\"key1\", \"value1\");\n+                        put(\"key2\", null);\n+                    }\n+                })));\n+        testInferredSchemaType(\"tmp_guess_schema1\", doc1, ImmutableMap.of(\"colA\", \"row(\\\"key1\\\" varchar)\"));\n+        Document doc2 = new Document(ImmutableMap.of(\n+                \"colA\", new Document(new HashMap<String, Object>() {\n+                    {\n+                        put(\"key1\", null);\n+                    }\n+                })));\n+        testInferredSchemaType(\"tmp_guess_schema2\", doc2, ImmutableMap.of());\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwMDMyNQ==", "bodyText": "It is indeed much simpler :)", "url": "https://github.com/trinodb/trino/pull/2935#discussion_r399800325", "createdAt": "2020-03-29T13:47:49Z", "author": {"login": "msosnicki"}, "path": "presto-mongodb/src/test/java/io/prestosql/plugin/mongodb/TestMongoIntegrationSmokeTest.java", "diffHunk": "@@ -180,6 +184,26 @@ public void testTemporalArrays()\n         assertOneNotNullResult(\"SELECT col[1] FROM tmp_array8\");\n     }\n \n+    @Test\n+    public void testGuessSchema()\n+    {\n+        Document doc1 = new Document(ImmutableMap.of(\n+                \"colA\", new Document(new HashMap<String, Object>() {\n+                    {\n+                        put(\"key1\", \"value1\");\n+                        put(\"key2\", null);\n+                    }\n+                })));\n+        testInferredSchemaType(\"tmp_guess_schema1\", doc1, ImmutableMap.of(\"colA\", \"row(\\\"key1\\\" varchar)\"));\n+        Document doc2 = new Document(ImmutableMap.of(\n+                \"colA\", new Document(new HashMap<String, Object>() {\n+                    {\n+                        put(\"key1\", null);\n+                    }\n+                })));\n+        testInferredSchemaType(\"tmp_guess_schema2\", doc2, ImmutableMap.of());\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyMTA4MQ=="}, "originalCommit": null, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjA5MjM3OnYy", "diffSide": "RIGHT", "path": "presto-mongodb/src/test/java/io/prestosql/plugin/mongodb/TestMongoIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDo1MjoyNFrOF9to1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDoyODo1NVrOGFzjpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI1NTE5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testGuessUnknownTypes()\n          \n          \n            \n                public void testSkipUnknownTypes()", "url": "https://github.com/trinodb/trino/pull/2935#discussion_r400255190", "createdAt": "2020-03-30T14:52:24Z", "author": {"login": "ebyhr"}, "path": "presto-mongodb/src/test/java/io/prestosql/plugin/mongodb/TestMongoIntegrationSmokeTest.java", "diffHunk": "@@ -180,6 +180,19 @@ public void testTemporalArrays()\n         assertOneNotNullResult(\"SELECT col[1] FROM tmp_array8\");\n     }\n \n+    @Test\n+    public void testGuessUnknownTypes()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc0MDc3Mg==", "bodyText": "Fixed", "url": "https://github.com/trinodb/trino/pull/2935#discussion_r408740772", "createdAt": "2020-04-15T10:28:55Z", "author": {"login": "msosnicki"}, "path": "presto-mongodb/src/test/java/io/prestosql/plugin/mongodb/TestMongoIntegrationSmokeTest.java", "diffHunk": "@@ -180,6 +180,19 @@ public void testTemporalArrays()\n         assertOneNotNullResult(\"SELECT col[1] FROM tmp_array8\");\n     }\n \n+    @Test\n+    public void testGuessUnknownTypes()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI1NTE5MA=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjEzNTQzOnYy", "diffSide": "RIGHT", "path": "presto-mongodb/src/main/java/io/prestosql/plugin/mongodb/MongoSession.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTowMToxOFrOF9uEFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDoyODo0OFrOGFzjYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2MjE2Nw==", "bodyText": "Logging only here looks a little weird in this method. We could put just else at the last of the  instanceof conditions if needed in the future. Could you revert some change and update like this?\n            for (String key : ((Document) value).keySet()) {\n                Optional<TypeSignature> fieldType = guessFieldType(((Document) value).get(key));\n                if (fieldType.isPresent()) {\n                    parameters.add(TypeSignatureParameter.namedTypeParameter(new NamedTypeSignature(Optional.of(new RowFieldName(key)), fieldType.get())));\n                }\n            }", "url": "https://github.com/trinodb/trino/pull/2935#discussion_r400262167", "createdAt": "2020-03-30T15:01:18Z", "author": {"login": "ebyhr"}, "path": "presto-mongodb/src/main/java/io/prestosql/plugin/mongodb/MongoSession.java", "diffHunk": "@@ -549,14 +549,18 @@ else if (value instanceof Document) {\n             List<TypeSignatureParameter> parameters = new ArrayList<>();\n \n             for (String key : ((Document) value).keySet()) {\n-                Optional<TypeSignature> fieldType = guessFieldType(((Document) value).get(key));\n-                if (!fieldType.isPresent()) {\n-                    return Optional.empty();\n+                Object fieldValue = ((Document) value).get(key);\n+                Optional<TypeSignature> fieldType = guessFieldType(fieldValue);\n+                if (fieldType.isPresent()) {\n+                    parameters.add(TypeSignatureParameter.namedTypeParameter(new NamedTypeSignature(Optional.of(new RowFieldName(key)), fieldType.get())));\n                 }\n-\n-                parameters.add(TypeSignatureParameter.namedTypeParameter(new NamedTypeSignature(Optional.of(new RowFieldName(key)), fieldType.get())));\n+                else {\n+                    log.info(\"Unable to guess document field %s type from class %s with value %s\", key, fieldValue == null ? \"null\" : fieldValue.getClass().getName(), fieldValue);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc0MDcwNw==", "bodyText": "Ok, removed", "url": "https://github.com/trinodb/trino/pull/2935#discussion_r408740707", "createdAt": "2020-04-15T10:28:48Z", "author": {"login": "msosnicki"}, "path": "presto-mongodb/src/main/java/io/prestosql/plugin/mongodb/MongoSession.java", "diffHunk": "@@ -549,14 +549,18 @@ else if (value instanceof Document) {\n             List<TypeSignatureParameter> parameters = new ArrayList<>();\n \n             for (String key : ((Document) value).keySet()) {\n-                Optional<TypeSignature> fieldType = guessFieldType(((Document) value).get(key));\n-                if (!fieldType.isPresent()) {\n-                    return Optional.empty();\n+                Object fieldValue = ((Document) value).get(key);\n+                Optional<TypeSignature> fieldType = guessFieldType(fieldValue);\n+                if (fieldType.isPresent()) {\n+                    parameters.add(TypeSignatureParameter.namedTypeParameter(new NamedTypeSignature(Optional.of(new RowFieldName(key)), fieldType.get())));\n                 }\n-\n-                parameters.add(TypeSignatureParameter.namedTypeParameter(new NamedTypeSignature(Optional.of(new RowFieldName(key)), fieldType.get())));\n+                else {\n+                    log.info(\"Unable to guess document field %s type from class %s with value %s\", key, fieldValue == null ? \"null\" : fieldValue.getClass().getName(), fieldValue);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2MjE2Nw=="}, "originalCommit": null, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 823, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}