{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMDI1MTQ2", "number": 3613, "title": "Add support for casting row to json with field name", "bodyText": "Fixes #3536", "createdAt": "2020-05-04T15:33:55Z", "url": "https://github.com/trinodb/trino/pull/3613", "merged": true, "mergeCommit": {"oid": "a86f2d9a2abc5c14b03b36782eee6f7c268de8e3"}, "closed": true, "closedAt": "2021-05-07T06:04:26Z", "author": {"login": "ebyhr"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcemsK_gBqjMzMDc5OTA1NzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABeUI38OgBqjQ2OTU4MjI3MDU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NDE2NTY2", "url": "https://github.com/trinodb/trino/pull/3613#pullrequestreview-439416566", "createdAt": "2020-06-29T18:56:56Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxODo1Njo1N1rOGqeBkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxOTowNjozM1rOGqeWiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE4NTI5Ng==", "bodyText": "nit: I would prefer if .. else instead of elvis.", "url": "https://github.com/trinodb/trino/pull/3613#discussion_r447185296", "createdAt": "2020-06-29T18:56:57Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/RowToJsonCast.java", "diffHunk": "@@ -75,18 +82,43 @@ public ScalarFunctionImplementation specialize(BoundVariables boundVariables, in\n         checkCondition(canCastToJson(type), INVALID_CAST_ARGUMENT, \"Cannot cast %s to JSON\", type);\n \n         List<Type> fieldTypes = type.getTypeParameters();\n+        List<TypeSignatureParameter> typeSignatureParameters = type.getTypeSignature().getParameters();\n+\n+        List<String> fieldNames = new ArrayList<>(fieldTypes.size());\n         List<JsonGeneratorWriter> fieldWriters = new ArrayList<>(fieldTypes.size());\n         for (int i = 0; i < fieldTypes.size(); i++) {\n-            fieldWriters.add(createJsonGeneratorWriter(fieldTypes.get(i)));\n+            fieldNames.add(typeSignatureParameters.get(i).getNamedTypeSignature().getName().orElse(\"field\" + i));\n+            fieldWriters.add(createJsonGeneratorWriter(fieldTypes.get(i), legacyRowToJson));\n         }\n-        MethodHandle methodHandle = METHOD_HANDLE.bindTo(fieldWriters);\n+        MethodHandle methodHandle = legacyRowToJson ? LEGACY_METHOD_HANDLE.bindTo(fieldWriters) : METHOD_HANDLE.bindTo(fieldNames).bindTo(fieldWriters);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE5MDM5NQ==", "bodyText": "rename toJsonArray", "url": "https://github.com/trinodb/trino/pull/3613#discussion_r447190395", "createdAt": "2020-06-29T19:06:06Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/RowToJsonCast.java", "diffHunk": "@@ -75,18 +82,43 @@ public ScalarFunctionImplementation specialize(BoundVariables boundVariables, in\n         checkCondition(canCastToJson(type), INVALID_CAST_ARGUMENT, \"Cannot cast %s to JSON\", type);\n \n         List<Type> fieldTypes = type.getTypeParameters();\n+        List<TypeSignatureParameter> typeSignatureParameters = type.getTypeSignature().getParameters();\n+\n+        List<String> fieldNames = new ArrayList<>(fieldTypes.size());\n         List<JsonGeneratorWriter> fieldWriters = new ArrayList<>(fieldTypes.size());\n         for (int i = 0; i < fieldTypes.size(); i++) {\n-            fieldWriters.add(createJsonGeneratorWriter(fieldTypes.get(i)));\n+            fieldNames.add(typeSignatureParameters.get(i).getNamedTypeSignature().getName().orElse(\"field\" + i));\n+            fieldWriters.add(createJsonGeneratorWriter(fieldTypes.get(i), legacyRowToJson));\n         }\n-        MethodHandle methodHandle = METHOD_HANDLE.bindTo(fieldWriters);\n+        MethodHandle methodHandle = legacyRowToJson ? LEGACY_METHOD_HANDLE.bindTo(fieldWriters) : METHOD_HANDLE.bindTo(fieldNames).bindTo(fieldWriters);\n \n         return new ScalarFunctionImplementation(\n                 false,\n                 ImmutableList.of(valueTypeArgumentProperty(RETURN_NULL_ON_NULL)),\n                 methodHandle);\n     }\n \n+    @UsedByGeneratedCode\n+    public static Slice toJson(List<String> fieldNames, List<JsonGeneratorWriter> fieldWriters, ConnectorSession session, Block block)\n+    {\n+        try {\n+            SliceOutput output = new DynamicSliceOutput(40);\n+            try (JsonGenerator jsonGenerator = createJsonGenerator(JSON_FACTORY, output)) {\n+                jsonGenerator.writeStartObject();\n+                for (int i = 0; i < block.getPositionCount(); i++) {\n+                    jsonGenerator.writeFieldName(fieldNames.get(i));\n+                    fieldWriters.get(i).writeJsonValue(jsonGenerator, block, i, session);\n+                }\n+                jsonGenerator.writeEndObject();\n+            }\n+            return output.slice();\n+        }\n+        catch (IOException e) {\n+            throwIfUnchecked(e);\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n     @UsedByGeneratedCode\n     public static Slice toJson(List<JsonGeneratorWriter> fieldWriters, ConnectorSession session, Block block)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE5MDY2NQ==", "bodyText": "rename to toJsonObject. I did not spot the difference between first and second method at first read.", "url": "https://github.com/trinodb/trino/pull/3613#discussion_r447190665", "createdAt": "2020-06-29T19:06:33Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/operator/scalar/RowToJsonCast.java", "diffHunk": "@@ -75,18 +82,43 @@ public ScalarFunctionImplementation specialize(BoundVariables boundVariables, in\n         checkCondition(canCastToJson(type), INVALID_CAST_ARGUMENT, \"Cannot cast %s to JSON\", type);\n \n         List<Type> fieldTypes = type.getTypeParameters();\n+        List<TypeSignatureParameter> typeSignatureParameters = type.getTypeSignature().getParameters();\n+\n+        List<String> fieldNames = new ArrayList<>(fieldTypes.size());\n         List<JsonGeneratorWriter> fieldWriters = new ArrayList<>(fieldTypes.size());\n         for (int i = 0; i < fieldTypes.size(); i++) {\n-            fieldWriters.add(createJsonGeneratorWriter(fieldTypes.get(i)));\n+            fieldNames.add(typeSignatureParameters.get(i).getNamedTypeSignature().getName().orElse(\"field\" + i));\n+            fieldWriters.add(createJsonGeneratorWriter(fieldTypes.get(i), legacyRowToJson));\n         }\n-        MethodHandle methodHandle = METHOD_HANDLE.bindTo(fieldWriters);\n+        MethodHandle methodHandle = legacyRowToJson ? LEGACY_METHOD_HANDLE.bindTo(fieldWriters) : METHOD_HANDLE.bindTo(fieldNames).bindTo(fieldWriters);\n \n         return new ScalarFunctionImplementation(\n                 false,\n                 ImmutableList.of(valueTypeArgumentProperty(RETURN_NULL_ON_NULL)),\n                 methodHandle);\n     }\n \n+    @UsedByGeneratedCode\n+    public static Slice toJson(List<String> fieldNames, List<JsonGeneratorWriter> fieldWriters, ConnectorSession session, Block block)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 58}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "bb3721e1bbee55ecf8a3c67b5d463b92f53a0754", "author": {"user": {"login": "ebyhr", "name": "Yuya Ebihara"}}, "url": "https://github.com/trinodb/trino/commit/bb3721e1bbee55ecf8a3c67b5d463b92f53a0754", "committedDate": "2020-07-31T04:00:58Z", "message": "Add support for casting row to json with field name"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bb3721e1bbee55ecf8a3c67b5d463b92f53a0754", "author": {"user": {"login": "ebyhr", "name": "Yuya Ebihara"}}, "url": "https://github.com/trinodb/trino/commit/bb3721e1bbee55ecf8a3c67b5d463b92f53a0754", "committedDate": "2020-07-31T04:00:58Z", "message": "Add support for casting row to json with field name"}, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjUwNjY5ODc1", "url": "https://github.com/trinodb/trino/pull/3613#pullrequestreview-650669875", "createdAt": "2021-05-03T19:51:19Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wM1QxOTo1MToxOVrOJUW6Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wM1QxOTo1NjoxNlrOJUXFSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTMyNjYwMw==", "bodyText": "If the field name is missing, let's use an empty string as a key (see the discussion on the main conversation thread)", "url": "https://github.com/trinodb/trino/pull/3613#discussion_r625326603", "createdAt": "2021-05-03T19:51:19Z", "author": {"login": "martint"}, "path": "core/trino-main/src/main/java/io/trino/operator/scalar/RowToJsonCast.java", "diffHunk": "@@ -73,11 +80,21 @@ protected ScalarFunctionImplementation specialize(FunctionBinding functionBindin\n         checkCondition(canCastToJson(type), INVALID_CAST_ARGUMENT, \"Cannot cast %s to JSON\", type);\n \n         List<Type> fieldTypes = type.getTypeParameters();\n+        List<TypeSignatureParameter> typeSignatureParameters = type.getTypeSignature().getParameters();\n+\n+        List<String> fieldNames = new ArrayList<>(fieldTypes.size());\n         List<JsonGeneratorWriter> fieldWriters = new ArrayList<>(fieldTypes.size());\n         for (int i = 0; i < fieldTypes.size(); i++) {\n-            fieldWriters.add(createJsonGeneratorWriter(fieldTypes.get(i)));\n+            fieldNames.add(typeSignatureParameters.get(i).getNamedTypeSignature().getName().orElse(\"field\" + i));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTMyNzMzMQ==", "bodyText": "Also, move this into the else block of the if below. It's not needed for legacy mode", "url": "https://github.com/trinodb/trino/pull/3613#discussion_r625327331", "createdAt": "2021-05-03T19:52:28Z", "author": {"login": "martint"}, "path": "core/trino-main/src/main/java/io/trino/operator/scalar/RowToJsonCast.java", "diffHunk": "@@ -73,11 +80,21 @@ protected ScalarFunctionImplementation specialize(FunctionBinding functionBindin\n         checkCondition(canCastToJson(type), INVALID_CAST_ARGUMENT, \"Cannot cast %s to JSON\", type);\n \n         List<Type> fieldTypes = type.getTypeParameters();\n+        List<TypeSignatureParameter> typeSignatureParameters = type.getTypeSignature().getParameters();\n+\n+        List<String> fieldNames = new ArrayList<>(fieldTypes.size());\n         List<JsonGeneratorWriter> fieldWriters = new ArrayList<>(fieldTypes.size());\n         for (int i = 0; i < fieldTypes.size(); i++) {\n-            fieldWriters.add(createJsonGeneratorWriter(fieldTypes.get(i)));\n+            fieldNames.add(typeSignatureParameters.get(i).getNamedTypeSignature().getName().orElse(\"field\" + i));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTMyNjYwMw=="}, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTMyODA0Mw==", "bodyText": "Same here. Use empty string for anonymous fields.", "url": "https://github.com/trinodb/trino/pull/3613#discussion_r625328043", "createdAt": "2021-05-03T19:53:49Z", "author": {"login": "martint"}, "path": "core/trino-main/src/main/java/io/trino/util/JsonUtil.java", "diffHunk": "@@ -634,11 +637,23 @@ public void writeJsonValue(JsonGenerator jsonGenerator, Block block, int positio\n             }\n             else {\n                 Block rowBlock = type.getObject(block, position);\n-                jsonGenerator.writeStartArray();\n-                for (int i = 0; i < rowBlock.getPositionCount(); i++) {\n-                    fieldWriters.get(i).writeJsonValue(jsonGenerator, rowBlock, i);\n+\n+                if (legacyRowToJson) {\n+                    jsonGenerator.writeStartArray();\n+                    for (int i = 0; i < rowBlock.getPositionCount(); i++) {\n+                        fieldWriters.get(i).writeJsonValue(jsonGenerator, rowBlock, i);\n+                    }\n+                    jsonGenerator.writeEndArray();\n+                }\n+                else {\n+                    List<TypeSignatureParameter> typeSignatureParameters = type.getTypeSignature().getParameters();\n+                    jsonGenerator.writeStartObject();\n+                    for (int i = 0; i < rowBlock.getPositionCount(); i++) {\n+                        jsonGenerator.writeFieldName(typeSignatureParameters.get(i).getNamedTypeSignature().getName().orElse(\"field\" + i));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTMyODcyMg==", "bodyText": "The default should be false", "url": "https://github.com/trinodb/trino/pull/3613#discussion_r625328722", "createdAt": "2021-05-03T19:55:00Z", "author": {"login": "martint"}, "path": "core/trino-main/src/main/java/io/trino/sql/analyzer/FeaturesConfig.java", "diffHunk": "@@ -88,6 +88,7 @@\n     private boolean pushTableWriteThroughUnion = true;\n     private DataIntegrityVerification exchangeDataIntegrityVerification = DataIntegrityVerification.ABORT;\n     private boolean exchangeCompressionEnabled;\n+    private boolean legacyRowToJsonCast = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTMyOTAxNA==", "bodyText": "Don't use angle brackets for parametric types. That's the legacy form. Use map(bigint, bigint), instead.", "url": "https://github.com/trinodb/trino/pull/3613#discussion_r625329014", "createdAt": "2021-05-03T19:55:31Z", "author": {"login": "martint"}, "path": "core/trino-main/src/test/java/io/trino/type/TestMapOperatorsLegacy.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.type;\n+\n+import io.airlift.slice.Slice;\n+import io.trino.operator.scalar.AbstractTestFunctions;\n+import io.trino.spi.function.LiteralParameters;\n+import io.trino.spi.function.ScalarFunction;\n+import io.trino.spi.function.SqlType;\n+import io.trino.spi.type.StandardTypes;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static io.trino.testing.DateTimeTestingUtils.sqlTimestampOf;\n+import static io.trino.type.JsonType.JSON;\n+import static java.lang.String.format;\n+\n+public class TestMapOperatorsLegacy\n+        extends AbstractTestFunctions\n+{\n+    @BeforeClass\n+    public void setUp()\n+    {\n+        registerScalar(getClass());\n+    }\n+\n+    @ScalarFunction\n+    @LiteralParameters(\"x\")\n+    @SqlType(StandardTypes.JSON)\n+    public static Slice uncheckedToJson(@SqlType(\"varchar(x)\") Slice slice)\n+    {\n+        return slice;\n+    }\n+\n+    @Test\n+    public void testMapToJson()\n+    {\n+        // Test key ordering\n+        assertFunction(\"CAST(MAP(ARRAY[7,5,3,1], ARRAY[8,6,4,2]) AS JSON)\", JSON, \"{\\\"1\\\":2,\\\"3\\\":4,\\\"5\\\":6,\\\"7\\\":8}\");\n+        assertFunction(\"CAST(MAP(ARRAY[1,3,5,7], ARRAY[2,4,6,8]) AS JSON)\", JSON, \"{\\\"1\\\":2,\\\"3\\\":4,\\\"5\\\":6,\\\"7\\\":8}\");\n+\n+        // Test null value\n+        assertFunction(\"cast(cast (null as MAP<BIGINT, BIGINT>) AS JSON)\", JSON, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTMyOTQ4Mg==", "bodyText": "Capitalize AS here and everywhere else.", "url": "https://github.com/trinodb/trino/pull/3613#discussion_r625329482", "createdAt": "2021-05-03T19:56:16Z", "author": {"login": "martint"}, "path": "core/trino-main/src/test/java/io/trino/type/TestRowOperatorsLegacy.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.type;\n+\n+import io.airlift.slice.Slice;\n+import io.trino.operator.scalar.AbstractTestFunctions;\n+import io.trino.spi.function.LiteralParameters;\n+import io.trino.spi.function.ScalarFunction;\n+import io.trino.spi.function.SqlType;\n+import io.trino.spi.type.StandardTypes;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static io.trino.testing.DateTimeTestingUtils.sqlTimestampOf;\n+import static io.trino.type.JsonType.JSON;\n+import static java.lang.String.format;\n+\n+public class TestRowOperatorsLegacy\n+        extends AbstractTestFunctions\n+{\n+    public TestRowOperatorsLegacy() {}\n+\n+    @BeforeClass\n+    public void setUp()\n+    {\n+        registerScalar(getClass());\n+    }\n+\n+    @ScalarFunction\n+    @LiteralParameters(\"x\")\n+    @SqlType(StandardTypes.JSON)\n+    public static Slice uncheckedToJson(@SqlType(\"varchar(x)\") Slice slice)\n+    {\n+        return slice;\n+    }\n+\n+    @Test\n+    public void testRowToJson()\n+    {\n+        assertFunction(\"cast(cast (null as ROW(BIGINT, VARCHAR)) AS JSON)\", JSON, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjUyNjM3NTg3", "url": "https://github.com/trinodb/trino/pull/3613#pullrequestreview-652637587", "createdAt": "2021-05-05T18:47:02Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNVQxODo0NzowMlrOJVxsaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNVQxODo0ODoxOVrOJVxvfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNjgxNDA1Ng==", "bodyText": "ARRAY(BIGINT)", "url": "https://github.com/trinodb/trino/pull/3613#discussion_r626814056", "createdAt": "2021-05-05T18:47:02Z", "author": {"login": "martint"}, "path": "core/trino-main/src/test/java/io/trino/type/TestArrayOperatorsLegacy.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.type;\n+\n+import io.airlift.slice.Slice;\n+import io.trino.operator.scalar.AbstractTestFunctions;\n+import io.trino.spi.function.LiteralParameters;\n+import io.trino.spi.function.ScalarFunction;\n+import io.trino.spi.function.SqlType;\n+import io.trino.spi.type.StandardTypes;\n+import io.trino.sql.analyzer.FeaturesConfig;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static io.trino.testing.DateTimeTestingUtils.sqlTimestampOf;\n+import static io.trino.type.JsonType.JSON;\n+import static java.lang.String.format;\n+\n+public class TestArrayOperatorsLegacy\n+        extends AbstractTestFunctions\n+{\n+    public TestArrayOperatorsLegacy()\n+    {\n+        super(new FeaturesConfig().setLegacyRowToJsonCast(true));\n+    }\n+\n+    @BeforeClass\n+    public void setUp()\n+    {\n+        registerScalar(getClass());\n+    }\n+\n+    @ScalarFunction\n+    @LiteralParameters(\"x\")\n+    @SqlType(StandardTypes.JSON)\n+    public static Slice uncheckedToJson(@SqlType(\"varchar(x)\") Slice slice)\n+    {\n+        return slice;\n+    }\n+\n+    @Test\n+    public void testArrayToJson()\n+    {\n+        assertFunction(\"cast(cast (null AS ARRAY<BIGINT>) AS JSON)\", JSON, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNjgxNDI0NQ==", "bodyText": "ARRAY(SMALLINT)", "url": "https://github.com/trinodb/trino/pull/3613#discussion_r626814245", "createdAt": "2021-05-05T18:47:22Z", "author": {"login": "martint"}, "path": "core/trino-main/src/test/java/io/trino/type/TestArrayOperatorsLegacy.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.type;\n+\n+import io.airlift.slice.Slice;\n+import io.trino.operator.scalar.AbstractTestFunctions;\n+import io.trino.spi.function.LiteralParameters;\n+import io.trino.spi.function.ScalarFunction;\n+import io.trino.spi.function.SqlType;\n+import io.trino.spi.type.StandardTypes;\n+import io.trino.sql.analyzer.FeaturesConfig;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static io.trino.testing.DateTimeTestingUtils.sqlTimestampOf;\n+import static io.trino.type.JsonType.JSON;\n+import static java.lang.String.format;\n+\n+public class TestArrayOperatorsLegacy\n+        extends AbstractTestFunctions\n+{\n+    public TestArrayOperatorsLegacy()\n+    {\n+        super(new FeaturesConfig().setLegacyRowToJsonCast(true));\n+    }\n+\n+    @BeforeClass\n+    public void setUp()\n+    {\n+        registerScalar(getClass());\n+    }\n+\n+    @ScalarFunction\n+    @LiteralParameters(\"x\")\n+    @SqlType(StandardTypes.JSON)\n+    public static Slice uncheckedToJson(@SqlType(\"varchar(x)\") Slice slice)\n+    {\n+        return slice;\n+    }\n+\n+    @Test\n+    public void testArrayToJson()\n+    {\n+        assertFunction(\"cast(cast (null AS ARRAY<BIGINT>) AS JSON)\", JSON, null);\n+        assertFunction(\"cast(ARRAY[] AS JSON)\", JSON, \"[]\");\n+        assertFunction(\"cast(ARRAY[null, null] AS JSON)\", JSON, \"[null,null]\");\n+\n+        assertFunction(\"cast(ARRAY[true, false, null] AS JSON)\", JSON, \"[true,false,null]\");\n+\n+        assertFunction(\"cast(cast(ARRAY[1, 2, null] AS ARRAY<TINYINT>) AS JSON)\", JSON, \"[1,2,null]\");\n+        assertFunction(\"cast(cast(ARRAY[12345, -12345, null] AS ARRAY<SMALLINT>) AS JSON)\", JSON, \"[12345,-12345,null]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNjgxNDM2Nw==", "bodyText": "ARRAY(TINYINT)", "url": "https://github.com/trinodb/trino/pull/3613#discussion_r626814367", "createdAt": "2021-05-05T18:47:32Z", "author": {"login": "martint"}, "path": "core/trino-main/src/test/java/io/trino/type/TestArrayOperatorsLegacy.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.type;\n+\n+import io.airlift.slice.Slice;\n+import io.trino.operator.scalar.AbstractTestFunctions;\n+import io.trino.spi.function.LiteralParameters;\n+import io.trino.spi.function.ScalarFunction;\n+import io.trino.spi.function.SqlType;\n+import io.trino.spi.type.StandardTypes;\n+import io.trino.sql.analyzer.FeaturesConfig;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static io.trino.testing.DateTimeTestingUtils.sqlTimestampOf;\n+import static io.trino.type.JsonType.JSON;\n+import static java.lang.String.format;\n+\n+public class TestArrayOperatorsLegacy\n+        extends AbstractTestFunctions\n+{\n+    public TestArrayOperatorsLegacy()\n+    {\n+        super(new FeaturesConfig().setLegacyRowToJsonCast(true));\n+    }\n+\n+    @BeforeClass\n+    public void setUp()\n+    {\n+        registerScalar(getClass());\n+    }\n+\n+    @ScalarFunction\n+    @LiteralParameters(\"x\")\n+    @SqlType(StandardTypes.JSON)\n+    public static Slice uncheckedToJson(@SqlType(\"varchar(x)\") Slice slice)\n+    {\n+        return slice;\n+    }\n+\n+    @Test\n+    public void testArrayToJson()\n+    {\n+        assertFunction(\"cast(cast (null AS ARRAY<BIGINT>) AS JSON)\", JSON, null);\n+        assertFunction(\"cast(ARRAY[] AS JSON)\", JSON, \"[]\");\n+        assertFunction(\"cast(ARRAY[null, null] AS JSON)\", JSON, \"[null,null]\");\n+\n+        assertFunction(\"cast(ARRAY[true, false, null] AS JSON)\", JSON, \"[true,false,null]\");\n+\n+        assertFunction(\"cast(cast(ARRAY[1, 2, null] AS ARRAY<TINYINT>) AS JSON)\", JSON, \"[1,2,null]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNjgxNDU0Mg==", "bodyText": "ARRAY(BIGINT)", "url": "https://github.com/trinodb/trino/pull/3613#discussion_r626814542", "createdAt": "2021-05-05T18:47:48Z", "author": {"login": "martint"}, "path": "core/trino-main/src/test/java/io/trino/type/TestArrayOperatorsLegacy.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.type;\n+\n+import io.airlift.slice.Slice;\n+import io.trino.operator.scalar.AbstractTestFunctions;\n+import io.trino.spi.function.LiteralParameters;\n+import io.trino.spi.function.ScalarFunction;\n+import io.trino.spi.function.SqlType;\n+import io.trino.spi.type.StandardTypes;\n+import io.trino.sql.analyzer.FeaturesConfig;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static io.trino.testing.DateTimeTestingUtils.sqlTimestampOf;\n+import static io.trino.type.JsonType.JSON;\n+import static java.lang.String.format;\n+\n+public class TestArrayOperatorsLegacy\n+        extends AbstractTestFunctions\n+{\n+    public TestArrayOperatorsLegacy()\n+    {\n+        super(new FeaturesConfig().setLegacyRowToJsonCast(true));\n+    }\n+\n+    @BeforeClass\n+    public void setUp()\n+    {\n+        registerScalar(getClass());\n+    }\n+\n+    @ScalarFunction\n+    @LiteralParameters(\"x\")\n+    @SqlType(StandardTypes.JSON)\n+    public static Slice uncheckedToJson(@SqlType(\"varchar(x)\") Slice slice)\n+    {\n+        return slice;\n+    }\n+\n+    @Test\n+    public void testArrayToJson()\n+    {\n+        assertFunction(\"cast(cast (null AS ARRAY<BIGINT>) AS JSON)\", JSON, null);\n+        assertFunction(\"cast(ARRAY[] AS JSON)\", JSON, \"[]\");\n+        assertFunction(\"cast(ARRAY[null, null] AS JSON)\", JSON, \"[null,null]\");\n+\n+        assertFunction(\"cast(ARRAY[true, false, null] AS JSON)\", JSON, \"[true,false,null]\");\n+\n+        assertFunction(\"cast(cast(ARRAY[1, 2, null] AS ARRAY<TINYINT>) AS JSON)\", JSON, \"[1,2,null]\");\n+        assertFunction(\"cast(cast(ARRAY[12345, -12345, null] AS ARRAY<SMALLINT>) AS JSON)\", JSON, \"[12345,-12345,null]\");\n+        assertFunction(\"cast(cast(ARRAY[123456789, -123456789, null] AS ARRAY<INTEGER>) AS JSON)\", JSON, \"[123456789,-123456789,null]\");\n+        assertFunction(\"cast(cast(ARRAY[1234567890123456789, -1234567890123456789, null] AS ARRAY<BIGINT>) AS JSON)\", JSON, \"[1234567890123456789,-1234567890123456789,null]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNjgxNDg0Nw==", "bodyText": "ARRAY(TINYINT)", "url": "https://github.com/trinodb/trino/pull/3613#discussion_r626814847", "createdAt": "2021-05-05T18:48:19Z", "author": {"login": "martint"}, "path": "core/trino-main/src/test/java/io/trino/type/TestMapOperatorsLegacy.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.type;\n+\n+import io.airlift.slice.Slice;\n+import io.trino.operator.scalar.AbstractTestFunctions;\n+import io.trino.spi.function.LiteralParameters;\n+import io.trino.spi.function.ScalarFunction;\n+import io.trino.spi.function.SqlType;\n+import io.trino.spi.type.StandardTypes;\n+import io.trino.sql.analyzer.FeaturesConfig;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static io.trino.testing.DateTimeTestingUtils.sqlTimestampOf;\n+import static io.trino.type.JsonType.JSON;\n+import static java.lang.String.format;\n+\n+public class TestMapOperatorsLegacy\n+        extends AbstractTestFunctions\n+{\n+    public TestMapOperatorsLegacy()\n+    {\n+        super(new FeaturesConfig().setLegacyRowToJsonCast(true));\n+    }\n+\n+    @BeforeClass\n+    public void setUp()\n+    {\n+        registerScalar(getClass());\n+    }\n+\n+    @ScalarFunction\n+    @LiteralParameters(\"x\")\n+    @SqlType(StandardTypes.JSON)\n+    public static Slice uncheckedToJson(@SqlType(\"varchar(x)\") Slice slice)\n+    {\n+        return slice;\n+    }\n+\n+    @Test\n+    public void testMapToJson()\n+    {\n+        // Test key ordering\n+        assertFunction(\"CAST(MAP(ARRAY[7,5,3,1], ARRAY[8,6,4,2]) AS JSON)\", JSON, \"{\\\"1\\\":2,\\\"3\\\":4,\\\"5\\\":6,\\\"7\\\":8}\");\n+        assertFunction(\"CAST(MAP(ARRAY[1,3,5,7], ARRAY[2,4,6,8]) AS JSON)\", JSON, \"{\\\"1\\\":2,\\\"3\\\":4,\\\"5\\\":6,\\\"7\\\":8}\");\n+\n+        // Test null value\n+        assertFunction(\"cast(cast (null AS MAP(BIGINT, BIGINT)) AS JSON)\", JSON, null);\n+        assertFunction(\"cast(MAP() AS JSON)\", JSON, \"{}\");\n+        assertFunction(\"cast(MAP(ARRAY[1, 2], ARRAY[null, null]) AS JSON)\", JSON, \"{\\\"1\\\":null,\\\"2\\\":null}\");\n+\n+        // Test key types\n+        assertFunction(\"CAST(MAP(ARRAY[true, false], ARRAY[1, 2]) AS JSON)\", JSON, \"{\\\"false\\\":2,\\\"true\\\":1}\");\n+\n+        assertFunction(\n+                \"cast(MAP(cast(ARRAY[1, 2, 3] AS ARRAY<TINYINT>), ARRAY[5, 8, null]) AS JSON)\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc06d0a90aa16e7f7439232aa5d502bdc826fe9c", "author": {"user": {"login": "ebyhr", "name": "Yuya Ebihara"}}, "url": "https://github.com/trinodb/trino/commit/fc06d0a90aa16e7f7439232aa5d502bdc826fe9c", "committedDate": "2021-05-06T15:06:52Z", "message": "Add support for casting row to json with field name"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "fc06d0a90aa16e7f7439232aa5d502bdc826fe9c", "author": {"user": {"login": "ebyhr", "name": "Yuya Ebihara"}}, "url": "https://github.com/trinodb/trino/commit/fc06d0a90aa16e7f7439232aa5d502bdc826fe9c", "committedDate": "2021-05-06T15:06:52Z", "message": "Add support for casting row to json with field name"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1366, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}