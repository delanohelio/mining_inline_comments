{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NjE3NTYz", "number": 4578, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxODo0NjoyMVrOESEsqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxODo1MzozMFrOESEuhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Mzg2Nzk0OnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergMetadata.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxODo0NjoyMVrOG3GlcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzowNzowN1rOG32rIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMjc1Mg==", "bodyText": "Have you considered making TypeConverter an object that stores the index? That should be simpler than passing it through static methods with recursive invocations. Something like\nTypeConverter converter = new TypeConverter();\nfor (ColumnMetadata column : columns) {\n    Type type = converter.toIcebergType(column.getType());\n    int index = converter.getIndex();\n    ...\n}\nWe'd probably want to split up the class into PrestoTypeConverter and IcebergTypeConverter as a precursor commit, since toPrestoType can stay static.", "url": "https://github.com/trinodb/trino/pull/4578#discussion_r460432752", "createdAt": "2020-07-25T18:46:21Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergMetadata.java", "diffHunk": "@@ -539,14 +539,16 @@ private ConnectorTableMetadata getTableMetadata(ConnectorSession session, Schema\n     private static Schema toIcebergSchema(List<ColumnMetadata> columns)\n     {\n         List<NestedField> icebergColumns = new ArrayList<>();\n+        int index = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMDY0Mg==", "bodyText": "I made these changes as you suggested. Turns out there is another commit that is not yet pushed upstream that requires this fix. So, I am going to abandon this particular commit and upload a new one when the other commit is pushed upstream (soon).", "url": "https://github.com/trinodb/trino/pull/4578#discussion_r461220642", "createdAt": "2020-07-27T23:07:07Z", "author": {"login": "anjalinorwood"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergMetadata.java", "diffHunk": "@@ -539,14 +539,16 @@ private ConnectorTableMetadata getTableMetadata(ConnectorSession session, Schema\n     private static Schema toIcebergSchema(List<ColumnMetadata> columns)\n     {\n         List<NestedField> icebergColumns = new ArrayList<>();\n+        int index = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMjc1Mg=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Mzg3MTQzOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/iceberg/TestCreateTable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxODo1MTozNFrOG3GnHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzowODo1NVrOG32tgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMzE4MQ==", "bodyText": "Can you add these tests to TestIcebergSmoke? Product tests should only be used if absolutely necessary, since they are harder to run (you can't run them in the IDE or easily debug them).", "url": "https://github.com/trinodb/trino/pull/4578#discussion_r460433181", "createdAt": "2020-07-25T18:51:34Z", "author": {"login": "electrum"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/iceberg/TestCreateTable.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.iceberg;\n+\n+import io.airlift.log.Logger;\n+import io.prestosql.tempto.AfterTestWithContext;\n+import io.prestosql.tempto.BeforeTestWithContext;\n+import io.prestosql.tempto.ProductTest;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.tests.TestGroups.CREATE_TABLE;\n+\n+public class TestCreateTable", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMTI1MA==", "bodyText": "Yes, moved the tests to TestIcebergSmoke.\nI was able to run product tests in IDE similar to how I run smoke, but I agree that smoke tests is a better place for these.", "url": "https://github.com/trinodb/trino/pull/4578#discussion_r461221250", "createdAt": "2020-07-27T23:08:55Z", "author": {"login": "anjalinorwood"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/iceberg/TestCreateTable.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.iceberg;\n+\n+import io.airlift.log.Logger;\n+import io.prestosql.tempto.AfterTestWithContext;\n+import io.prestosql.tempto.BeforeTestWithContext;\n+import io.prestosql.tempto.ProductTest;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.tests.TestGroups.CREATE_TABLE;\n+\n+public class TestCreateTable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMzE4MQ=="}, "originalCommit": null, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Mzg3MTgxOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/iceberg/TestCreateTable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxODo1MjowN1rOG3GnRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzowOTowOFrOG32tyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMzIyMw==", "bodyText": "We shouldn't catch exceptions like this in tests, as we want any such exception to fail the test.", "url": "https://github.com/trinodb/trino/pull/4578#discussion_r460433223", "createdAt": "2020-07-25T18:52:07Z", "author": {"login": "electrum"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/iceberg/TestCreateTable.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.iceberg;\n+\n+import io.airlift.log.Logger;\n+import io.prestosql.tempto.AfterTestWithContext;\n+import io.prestosql.tempto.BeforeTestWithContext;\n+import io.prestosql.tempto.ProductTest;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.tests.TestGroups.CREATE_TABLE;\n+\n+public class TestCreateTable\n+        extends ProductTest\n+{\n+    private static final String ICEBERG_TABLE_NAME1 = \"iceberg.ice_tables.nested_types\";\n+    private static final String ICEBERG_TABLE_NAME2 = \"iceberg.ice_tables.nested_types2\";\n+    private static final String ICEBERG_TABLE_SCHEMA = \"iceberg.ice_tables\";\n+\n+    @BeforeTestWithContext\n+    public void createObjects()\n+    {\n+        // Drop Iceberg tables and schema\n+        try {\n+            query(\"DROP TABLE IF EXISTS \" + ICEBERG_TABLE_NAME1);\n+            query(\"DROP TABLE IF EXISTS \" + ICEBERG_TABLE_NAME2);\n+        }\n+        catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMTMyMA==", "bodyText": "Got it.", "url": "https://github.com/trinodb/trino/pull/4578#discussion_r461221320", "createdAt": "2020-07-27T23:09:08Z", "author": {"login": "anjalinorwood"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/iceberg/TestCreateTable.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.iceberg;\n+\n+import io.airlift.log.Logger;\n+import io.prestosql.tempto.AfterTestWithContext;\n+import io.prestosql.tempto.BeforeTestWithContext;\n+import io.prestosql.tempto.ProductTest;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.tests.TestGroups.CREATE_TABLE;\n+\n+public class TestCreateTable\n+        extends ProductTest\n+{\n+    private static final String ICEBERG_TABLE_NAME1 = \"iceberg.ice_tables.nested_types\";\n+    private static final String ICEBERG_TABLE_NAME2 = \"iceberg.ice_tables.nested_types2\";\n+    private static final String ICEBERG_TABLE_SCHEMA = \"iceberg.ice_tables\";\n+\n+    @BeforeTestWithContext\n+    public void createObjects()\n+    {\n+        // Drop Iceberg tables and schema\n+        try {\n+            query(\"DROP TABLE IF EXISTS \" + ICEBERG_TABLE_NAME1);\n+            query(\"DROP TABLE IF EXISTS \" + ICEBERG_TABLE_NAME2);\n+        }\n+        catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMzIyMw=="}, "originalCommit": null, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Mzg3MjY5OnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/TypeConverter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxODo1MzozMFrOG3GnsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzowOToyMVrOG32uDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMzMyOA==", "bodyText": "Can you add a test to TestIcebergSmoke that creates a table with a row type, inserts a null into one of the row fields, then reads it?", "url": "https://github.com/trinodb/trino/pull/4578#discussion_r460433328", "createdAt": "2020-07-25T18:53:30Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/TypeConverter.java", "diffHunk": "@@ -199,7 +199,7 @@ private static PrestoToIcebergReturnDataType fromRow(RowType type, int index)\n             String name = field.getName().orElseThrow(() ->\n                     new PrestoException(NOT_SUPPORTED, \"Row type field does not have a name: \" + type.getDisplayName()));\n             PrestoToIcebergReturnDataType returnType = toIcebergType(field.getType(), index);\n-            fields.add(Types.NestedField.required(index, name, returnType.getType()));\n+            fields.add(Types.NestedField.optional(index, name, returnType.getType()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMTM4OQ==", "bodyText": "Yes.", "url": "https://github.com/trinodb/trino/pull/4578#discussion_r461221389", "createdAt": "2020-07-27T23:09:21Z", "author": {"login": "anjalinorwood"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/TypeConverter.java", "diffHunk": "@@ -199,7 +199,7 @@ private static PrestoToIcebergReturnDataType fromRow(RowType type, int index)\n             String name = field.getName().orElseThrow(() ->\n                     new PrestoException(NOT_SUPPORTED, \"Row type field does not have a name: \" + type.getDisplayName()));\n             PrestoToIcebergReturnDataType returnType = toIcebergType(field.getType(), index);\n-            fields.add(Types.NestedField.required(index, name, returnType.getType()));\n+            fields.add(Types.NestedField.optional(index, name, returnType.getType()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMzMyOA=="}, "originalCommit": null, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3771, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}