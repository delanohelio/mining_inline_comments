{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNjA3ODc2", "number": 3437, "title": "Allow reading ORC files which do not have row-group information", "bodyText": "fixes #3436\nAdded test in full acid product tests to trigger minor compaction and read data after it is done. It fails without this fix with error mentioned in issue: io.prestosql.tempto.query.QueryExecutionException: java.sql.SQLException: Query failed (#20200415_073817_00043_er3az): Error opening Hive split hdfs://hadoop-master:9000/user/hive/warehouse/test_full_acid_table_read/delta_0000002_0000003/bucket_00000 (offset=0, length=581): rowsInRowGroup must be greater than zero", "createdAt": "2020-04-15T08:11:49Z", "url": "https://github.com/trinodb/trino/pull/3437", "merged": true, "mergeCommit": {"oid": "ed1d66cb584b618a01f047e3827a4ef3002691b9"}, "closed": true, "closedAt": "2020-04-29T20:05:12Z", "author": {"login": "shubhamtagra"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcX0O0BgFqTM5MzU4MjQzNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABccbxWTAFqTQwMjg3NTg3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNTgyNDM0", "url": "https://github.com/trinodb/trino/pull/3437#pullrequestreview-393582434", "createdAt": "2020-04-15T08:56:21Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODo1NjoyMVrOGFwOxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODo1NzoxM1rOGFwQ9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4NjI3OQ==", "bodyText": "Why use a Future here?", "url": "https://github.com/trinodb/trino/pull/3437#discussion_r408686279", "createdAt": "2020-04-15T08:56:21Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -59,14 +66,28 @@ public void testReadFullAcid(boolean isPartitioned, BucketingType bucketingType)\n             // test filtering\n             assertThat(query(\"SELECT col, fcol FROM \" + tableName + \" WHERE fcol = 1 ORDER BY col\")).containsOnly(row(21, 1));\n \n+            // test compacted data read\n+            onHive().executeQuery(\n+                    \"INSERT INTO TABLE \" + tableName + hivePartitionString + \" VALUES (20, 3)\");\n+            ExecutorService executor = Executors.newSingleThreadExecutor();\n+            try {\n+                Future result = executor.submit(() ->\n+                        onHive().executeQuery(\"alter table \" + tableName + \" \" + hivePartitionString + \" compact 'minor' and wait\"));\n+                result.get(5, TimeUnit.MINUTES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4Njc0MQ==", "bodyText": "upper case SQL keywords (and 'minor' too)", "url": "https://github.com/trinodb/trino/pull/3437#discussion_r408686741", "createdAt": "2020-04-15T08:57:03Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -59,14 +66,28 @@ public void testReadFullAcid(boolean isPartitioned, BucketingType bucketingType)\n             // test filtering\n             assertThat(query(\"SELECT col, fcol FROM \" + tableName + \" WHERE fcol = 1 ORDER BY col\")).containsOnly(row(21, 1));\n \n+            // test compacted data read\n+            onHive().executeQuery(\n+                    \"INSERT INTO TABLE \" + tableName + hivePartitionString + \" VALUES (20, 3)\");\n+            ExecutorService executor = Executors.newSingleThreadExecutor();\n+            try {\n+                Future result = executor.submit(() ->\n+                        onHive().executeQuery(\"alter table \" + tableName + \" \" + hivePartitionString + \" compact 'minor' and wait\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4NjgzOQ==", "bodyText": "should we test with MAJOR compaction too?", "url": "https://github.com/trinodb/trino/pull/3437#discussion_r408686839", "createdAt": "2020-04-15T08:57:13Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -59,14 +66,28 @@ public void testReadFullAcid(boolean isPartitioned, BucketingType bucketingType)\n             // test filtering\n             assertThat(query(\"SELECT col, fcol FROM \" + tableName + \" WHERE fcol = 1 ORDER BY col\")).containsOnly(row(21, 1));\n \n+            // test compacted data read\n+            onHive().executeQuery(\n+                    \"INSERT INTO TABLE \" + tableName + hivePartitionString + \" VALUES (20, 3)\");\n+            ExecutorService executor = Executors.newSingleThreadExecutor();\n+            try {\n+                Future result = executor.submit(() ->\n+                        onHive().executeQuery(\"alter table \" + tableName + \" \" + hivePartitionString + \" compact 'minor' and wait\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4Njc0MQ=="}, "originalCommit": null, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzOTc5NTM3", "url": "https://github.com/trinodb/trino/pull/3437#pullrequestreview-393979537", "createdAt": "2020-04-15T17:20:35Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoyMDozNVrOGGD1Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoyNTo1MlrOGGEBZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwNzQ0Nw==", "bodyText": "The extra parentheses are not needed.  Also I would flip the && and do the > 0 first", "url": "https://github.com/trinodb/trino/pull/3437#discussion_r409007447", "createdAt": "2020-04-15T17:20:35Z", "author": {"login": "dain"}, "path": "presto-orc/src/main/java/io/prestosql/orc/StripeReader.java", "diffHunk": "@@ -133,7 +133,7 @@ public Stripe readStripe(StripeInformation stripe, AggregatedMemoryContext syste\n \n         // handle stripes with more than one row group\n         boolean invalidCheckPoint = false;\n-        if (stripe.getNumberOfRows() > rowsInRowGroup) {\n+        if ((stripe.getNumberOfRows() > rowsInRowGroup) && rowsInRowGroup > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwOTY5NQ==", "bodyText": "There are two other uses of rowsInRowGroup in this file, in the createRowGroups and selectRowGroups methods, which are only called from this if block.  Add checkState calls to both of those methods, so it is clear they should not be used in this case.", "url": "https://github.com/trinodb/trino/pull/3437#discussion_r409009695", "createdAt": "2020-04-15T17:24:23Z", "author": {"login": "dain"}, "path": "presto-orc/src/main/java/io/prestosql/orc/StripeReader.java", "diffHunk": "@@ -133,7 +133,7 @@ public Stripe readStripe(StripeInformation stripe, AggregatedMemoryContext syste\n \n         // handle stripes with more than one row group\n         boolean invalidCheckPoint = false;\n-        if (stripe.getNumberOfRows() > rowsInRowGroup) {\n+        if ((stripe.getNumberOfRows() > rowsInRowGroup) && rowsInRowGroup > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwNzQ0Nw=="}, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMDUzNA==", "bodyText": "Consider making rowsInRowGroup as OptionalInt, so it is super clear to future maintainers that this value may not be provided.", "url": "https://github.com/trinodb/trino/pull/3437#discussion_r409010534", "createdAt": "2020-04-15T17:25:52Z", "author": {"login": "dain"}, "path": "presto-orc/src/main/java/io/prestosql/orc/StripeReader.java", "diffHunk": "@@ -133,7 +133,7 @@ public Stripe readStripe(StripeInformation stripe, AggregatedMemoryContext syste\n \n         // handle stripes with more than one row group\n         boolean invalidCheckPoint = false;\n-        if (stripe.getNumberOfRows() > rowsInRowGroup) {\n+        if ((stripe.getNumberOfRows() > rowsInRowGroup) && rowsInRowGroup > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwNzQ0Nw=="}, "originalCommit": null, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMzAwMTMw", "url": "https://github.com/trinodb/trino/pull/3437#pullrequestreview-402300130", "createdAt": "2020-04-29T00:23:50Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMDoyMzo1MFrOGNrz0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMDozMDowMlrOGNr78g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwMjQ1MA==", "bodyText": "Maybe do this instead:\nint rowsInRowGroup = this.rowsInRowGroup.orElseThrow(() -> new IllegalStateException(\"Cannot create row groups if row group info is missing\"))\nThen the code below doesn't need to change.", "url": "https://github.com/trinodb/trino/pull/3437#discussion_r417002450", "createdAt": "2020-04-29T00:23:50Z", "author": {"login": "dain"}, "path": "presto-orc/src/main/java/io/prestosql/orc/StripeReader.java", "diffHunk": "@@ -332,12 +333,13 @@ private InputStreamSources createDictionaryStreamSources(Map<StreamId, Stream> s\n             ColumnMetadata<ColumnEncoding> encodings)\n             throws InvalidCheckpointException\n     {\n+        checkState(rowsInRowGroup.isPresent(), \"Cannot create row groups if row group info is missing\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwMjQ5NA==", "bodyText": "Same here", "url": "https://github.com/trinodb/trino/pull/3437#discussion_r417002494", "createdAt": "2020-04-29T00:23:57Z", "author": {"login": "dain"}, "path": "presto-orc/src/main/java/io/prestosql/orc/StripeReader.java", "diffHunk": "@@ -438,13 +440,15 @@ static boolean isIndexStream(Stream stream)\n \n     private Set<Integer> selectRowGroups(StripeInformation stripe, Map<StreamId, List<RowGroupIndex>> columnIndexes)\n     {\n+        checkState(rowsInRowGroup.isPresent(), \"Cannot create row groups if row group info is missing\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwNDUzMA==", "bodyText": "Change the argument type instead. That will make it clear in the metadata reader that there is something special about zero.  Then lets verify the value in the optional is at least 1. Something like:\nrowsInRowGroup.ifPresent(value -> checkArgument(value > 0, \"rowsInRowGroup must be at least 1\"));", "url": "https://github.com/trinodb/trino/pull/3437#discussion_r417004530", "createdAt": "2020-04-29T00:30:02Z", "author": {"login": "dain"}, "path": "presto-orc/src/main/java/io/prestosql/orc/metadata/Footer.java", "diffHunk": "@@ -45,7 +46,7 @@ public Footer(\n             Map<String, Slice> userMetadata)\n     {\n         this.numberOfRows = numberOfRows;\n-        this.rowsInRowGroup = rowsInRowGroup;\n+        this.rowsInRowGroup = rowsInRowGroup == 0 ? OptionalInt.empty() : OptionalInt.of(rowsInRowGroup);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8b8107702a8615c805687a263eac2671840c246", "author": {"user": {"login": "shubhamtagra", "name": "Shubham Tagra"}}, "url": "https://github.com/trinodb/trino/commit/e8b8107702a8615c805687a263eac2671840c246", "committedDate": "2020-04-29T04:21:20Z", "message": "Allow reading ORC files which do not have row-group information"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "e8b8107702a8615c805687a263eac2671840c246", "author": {"user": {"login": "shubhamtagra", "name": "Shubham Tagra"}}, "url": "https://github.com/trinodb/trino/commit/e8b8107702a8615c805687a263eac2671840c246", "committedDate": "2020-04-29T04:21:20Z", "message": "Allow reading ORC files which do not have row-group information"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyODc1ODc0", "url": "https://github.com/trinodb/trino/pull/3437#pullrequestreview-402875874", "createdAt": "2020-04-29T17:17:18Z", "commit": {"oid": "e8b8107702a8615c805687a263eac2671840c246"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1521, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}