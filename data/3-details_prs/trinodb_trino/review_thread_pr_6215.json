{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzMjczODYy", "number": 6215, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMDoxNjo1NlrOFBs53w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNTo1MjoxNVrOFB2U-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MzI4NjA3OnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcPageSink.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMDoxNjo1NlrOIAfepQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNToyMjoyNFrOIAr_lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM4NjY2MQ==", "bodyText": "This is not the only place were we wrap SQLException as PrestoException. Do we need to update all places like that?", "url": "https://github.com/trinodb/trino/pull/6215#discussion_r537386661", "createdAt": "2020-12-07T10:16:56Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcPageSink.java", "diffHunk": "@@ -165,6 +165,11 @@ else if (javaType == Slice.class) {\n             throw new PrestoException(JDBC_NON_TRANSIENT_ERROR, e);\n         }\n         catch (SQLException e) {\n+            SQLException nextExc = e.getNextException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQxMDY1Mg==", "bodyText": "I think we should. So far we've only seen a SQLException chain from Redshift and hence this change was limited to this.\nIf we do want to do this everywhere then I'll need to think of a better way than copy pasting this everywhere.", "url": "https://github.com/trinodb/trino/pull/6215#discussion_r537410652", "createdAt": "2020-12-07T10:52:53Z", "author": {"login": "hashhar"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcPageSink.java", "diffHunk": "@@ -165,6 +165,11 @@ else if (javaType == Slice.class) {\n             throw new PrestoException(JDBC_NON_TRANSIENT_ERROR, e);\n         }\n         catch (SQLException e) {\n+            SQLException nextExc = e.getNextException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM4NjY2MQ=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU5MTcwMA==", "bodyText": "If we want to do this everywhere, we'll probably need to copy/paste something. I think subclassing PrestoException (JdbcPrestoException) or adding factory methods somewhere are preferable to just adding a utility method that converts chained SQLExceptions to suppressed exceptions.\n(The only way I can think of to avoid needing to make changes in a lot of places would be to add constructors accepting SQLException to PrestoException, but that seems like a very  bad idea.)", "url": "https://github.com/trinodb/trino/pull/6215#discussion_r537591700", "createdAt": "2020-12-07T15:22:24Z", "author": {"login": "jirassimok"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcPageSink.java", "diffHunk": "@@ -165,6 +165,11 @@ else if (javaType == Slice.class) {\n             throw new PrestoException(JDBC_NON_TRANSIENT_ERROR, e);\n         }\n         catch (SQLException e) {\n+            SQLException nextExc = e.getNextException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM4NjY2MQ=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MzY0OTEwOnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcPageSink.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMTo0MDoxN1rOIAitzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMTo0MDoxN1rOIAitzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQzOTY5NQ==", "bodyText": "nextExc -> nextException", "url": "https://github.com/trinodb/trino/pull/6215#discussion_r537439695", "createdAt": "2020-12-07T11:40:17Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcPageSink.java", "diffHunk": "@@ -165,6 +165,11 @@ else if (javaType == Slice.class) {\n             throw new PrestoException(JDBC_NON_TRANSIENT_ERROR, e);\n         }\n         catch (SQLException e) {\n+            SQLException nextExc = e.getNextException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MzY1Mjk2OnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcPageSink.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMTo0MToyM1rOIAiwKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToyODoyNFrOIA7f4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ0MDI5Ng==", "bodyText": "be defensive here, since this code is (and will not be) well test covered:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            e.addSuppressed(nextExc);\n          \n          \n            \n                            if (e != nextExc) {\n          \n          \n            \n                                e.addSuppressed(nextExc);\n          \n          \n            \n                            }", "url": "https://github.com/trinodb/trino/pull/6215#discussion_r537440296", "createdAt": "2020-12-07T11:41:23Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcPageSink.java", "diffHunk": "@@ -165,6 +165,11 @@ else if (javaType == Slice.class) {\n             throw new PrestoException(JDBC_NON_TRANSIENT_ERROR, e);\n         }\n         catch (SQLException e) {\n+            SQLException nextExc = e.getNextException();\n+            while (nextExc != null) {\n+                e.addSuppressed(nextExc);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ0MDcyNQ==", "bodyText": "Also, it might be good to distinguish these:\ne.addSuppressed(new Exception(\"Next exception\", nextException));", "url": "https://github.com/trinodb/trino/pull/6215#discussion_r537440725", "createdAt": "2020-12-07T11:42:10Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcPageSink.java", "diffHunk": "@@ -165,6 +165,11 @@ else if (javaType == Slice.class) {\n             throw new PrestoException(JDBC_NON_TRANSIENT_ERROR, e);\n         }\n         catch (SQLException e) {\n+            SQLException nextExc = e.getNextException();\n+            while (nextExc != null) {\n+                e.addSuppressed(nextExc);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ0MDI5Ng=="}, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU5OTEyMQ==", "bodyText": "A better defense would be breaking out of the loop when e == nextException. If you see the original exception again, you're in a loop. You could end up in a loop without the original, too, which would require a few more steps to check.", "url": "https://github.com/trinodb/trino/pull/6215#discussion_r537599121", "createdAt": "2020-12-07T15:31:41Z", "author": {"login": "jirassimok"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcPageSink.java", "diffHunk": "@@ -165,6 +165,11 @@ else if (javaType == Slice.class) {\n             throw new PrestoException(JDBC_NON_TRANSIENT_ERROR, e);\n         }\n         catch (SQLException e) {\n+            SQLException nextExc = e.getNextException();\n+            while (nextExc != null) {\n+                e.addSuppressed(nextExc);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ0MDI5Ng=="}, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzMjYyOQ==", "bodyText": "i didn't think about this. Do you have evidence loop is possible? Or just to be on the safe side?", "url": "https://github.com/trinodb/trino/pull/6215#discussion_r537832629", "createdAt": "2020-12-07T21:06:27Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcPageSink.java", "diffHunk": "@@ -165,6 +165,11 @@ else if (javaType == Slice.class) {\n             throw new PrestoException(JDBC_NON_TRANSIENT_ERROR, e);\n         }\n         catch (SQLException e) {\n+            SQLException nextExc = e.getNextException();\n+            while (nextExc != null) {\n+                e.addSuppressed(nextExc);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ0MDI5Ng=="}, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0NTczMQ==", "bodyText": "It's technically possible (most simply, x.setNextException(x)), but it really shouldn't ever happen in a sane JDBC driver, and it doesn't seem like the sort of thing that would easy to do by accident.\nThe JDBC specification (section 8.1.2) does imply that there can't be loops by suggesting a loop much like this one for navigating chained exceptions:\n\nTo access the additional chained SQLExceptions, an application would recursively invoke getNextException until a null value is returned.\n\nFollowing from that, no check should be necessary except for a pathological JDBC driver.", "url": "https://github.com/trinodb/trino/pull/6215#discussion_r537845731", "createdAt": "2020-12-07T21:28:24Z", "author": {"login": "jirassimok"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcPageSink.java", "diffHunk": "@@ -165,6 +165,11 @@ else if (javaType == Slice.class) {\n             throw new PrestoException(JDBC_NON_TRANSIENT_ERROR, e);\n         }\n         catch (SQLException e) {\n+            SQLException nextExc = e.getNextException();\n+            while (nextExc != null) {\n+                e.addSuppressed(nextExc);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ0MDI5Ng=="}, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NDgzMDAwOnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcPageSink.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNTo1MjoxNVrOIAta_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNTo1MjoxNVrOIAta_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYxNTEwMA==", "bodyText": "I'd add a comment in code noting what this is for, like \"convert chained SQLExceptions to suppressed exceptions so they are visible in the stack trace.\"", "url": "https://github.com/trinodb/trino/pull/6215#discussion_r537615100", "createdAt": "2020-12-07T15:52:15Z", "author": {"login": "jirassimok"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcPageSink.java", "diffHunk": "@@ -165,6 +165,13 @@ else if (javaType == Slice.class) {\n             throw new PrestoException(JDBC_NON_TRANSIENT_ERROR, e);\n         }\n         catch (SQLException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 3}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4494, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}