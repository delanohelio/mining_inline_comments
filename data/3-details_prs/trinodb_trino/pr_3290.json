{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2MjI0MDU5", "number": 3290, "title": "Add access control check while listing views", "bodyText": "", "createdAt": "2020-03-31T10:16:57Z", "url": "https://github.com/trinodb/trino/pull/3290", "merged": true, "mergeCommit": {"oid": "f922c858734065b2a5a744aa2ef964c61a1dfc47"}, "closed": true, "closedAt": "2020-04-01T13:53:48Z", "author": {"login": "skrzypo987"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTAoUegFqTM4NDU5NTc0Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTXC_0ABqjMxODc3MDYyODM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NTk1NzQ3", "url": "https://github.com/trinodb/trino/pull/3290#pullrequestreview-384595747", "createdAt": "2020-03-31T10:21:10Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDoyMToxMVrOF-PAWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDozMjoxMFrOF-PZow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgwMTg4Mg==", "bodyText": "inline createView", "url": "https://github.com/trinodb/trino/pull/3290#discussion_r400801882", "createdAt": "2020-03-31T10:21:11Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -4733,6 +4734,39 @@ public void testShowColumnMetadata()\n         assertUpdate(\"DROP TABLE \" + tableName);\n     }\n \n+    @Test\n+    public void testShowViews()\n+    {\n+        String viewName = \"test_show_views\";\n+\n+        @Language(\"SQL\") String createView = \"CREATE VIEW \" + viewName + \" AS SELECT abs(1) as whatever\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgwMzA5MA==", "bodyText": "format(\"... WHERE table_name = '%s', viewName)", "url": "https://github.com/trinodb/trino/pull/3290#discussion_r400803090", "createdAt": "2020-03-31T10:23:10Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -4733,6 +4734,39 @@ public void testShowColumnMetadata()\n         assertUpdate(\"DROP TABLE \" + tableName);\n     }\n \n+    @Test\n+    public void testShowViews()\n+    {\n+        String viewName = \"test_show_views\";\n+\n+        @Language(\"SQL\") String createView = \"CREATE VIEW \" + viewName + \" AS SELECT abs(1) as whatever\";\n+\n+        Session testSession = testSessionBuilder()\n+                .setIdentity(Identity.ofUser(\"test_view_access_owner\"))\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(getSession().getSchema().get())\n+                .build();\n+\n+        assertUpdate(createView);\n+        try {\n+            String showViews = \"SELECT * FROM information_schema.views\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgwMzUwMw==", "bodyText": "I would remove this try-finally block. View name is unique and no other test should depend that there is no view in the system.", "url": "https://github.com/trinodb/trino/pull/3290#discussion_r400803503", "createdAt": "2020-03-31T10:23:49Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -4733,6 +4734,39 @@ public void testShowColumnMetadata()\n         assertUpdate(\"DROP TABLE \" + tableName);\n     }\n \n+    @Test\n+    public void testShowViews()\n+    {\n+        String viewName = \"test_show_views\";\n+\n+        @Language(\"SQL\") String createView = \"CREATE VIEW \" + viewName + \" AS SELECT abs(1) as whatever\";\n+\n+        Session testSession = testSessionBuilder()\n+                .setIdentity(Identity.ofUser(\"test_view_access_owner\"))\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(getSession().getSchema().get())\n+                .build();\n+\n+        assertUpdate(createView);\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgwNDAwMw==", "bodyText": "inline views", "url": "https://github.com/trinodb/trino/pull/3290#discussion_r400804003", "createdAt": "2020-03-31T10:24:38Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/connector/informationschema/InformationSchemaPageSource.java", "diffHunk": "@@ -288,11 +288,13 @@ private void addTablesRecords(QualifiedTablePrefix prefix)\n \n     private void addViewsRecords(QualifiedTablePrefix prefix)\n     {\n-        for (Map.Entry<QualifiedObjectName, ConnectorViewDefinition> entry : metadata.getViews(session, prefix).entrySet()) {\n+        Map<SchemaTableName, ConnectorViewDefinition> views = getViews(session, metadata, accessControl, prefix);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgwNTYzMQ==", "bodyText": "I don't think listViews should depend on getViews. Notice that you changed the metadata.listViews(...) to metadata.getViews(...). These method could be implemented completely different (one could be cheap and other expensive to call). One only list objects, while the other retrieves all info about them.", "url": "https://github.com/trinodb/trino/pull/3290#discussion_r400805631", "createdAt": "2020-03-31T10:27:30Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataListing.java", "diffHunk": "@@ -69,10 +70,23 @@ private MetadataListing() {}\n \n     public static Set<SchemaTableName> listViews(Session session, Metadata metadata, AccessControl accessControl, QualifiedTablePrefix prefix)\n     {\n-        Set<SchemaTableName> tableNames = metadata.listViews(session, prefix).stream()\n-                .map(QualifiedObjectName::asSchemaTableName)\n-                .collect(toImmutableSet());\n-        return accessControl.filterTables(session.toSecurityContext(), prefix.getCatalogName(), tableNames);\n+        return getViews(session, metadata, accessControl, prefix).keySet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgwNTg5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Map<SchemaTableName, ConnectorViewDefinition> views =\n          \n          \n            \n                            metadata.getViews(session, prefix).entrySet().stream()\n          \n          \n            \n                                    .collect(toImmutableMap(entry -> entry.getKey().asSchemaTableName(), Entry::getValue));\n          \n          \n            \n                    Map<SchemaTableName, ConnectorViewDefinition> views =  metadata.getViews(session, prefix).entrySet().stream()\n          \n          \n            \n                                    .collect(toImmutableMap(entry -> entry.getKey().asSchemaTableName(), Entry::getValue));", "url": "https://github.com/trinodb/trino/pull/3290#discussion_r400805899", "createdAt": "2020-03-31T10:28:01Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataListing.java", "diffHunk": "@@ -69,10 +70,23 @@ private MetadataListing() {}\n \n     public static Set<SchemaTableName> listViews(Session session, Metadata metadata, AccessControl accessControl, QualifiedTablePrefix prefix)\n     {\n-        Set<SchemaTableName> tableNames = metadata.listViews(session, prefix).stream()\n-                .map(QualifiedObjectName::asSchemaTableName)\n-                .collect(toImmutableSet());\n-        return accessControl.filterTables(session.toSecurityContext(), prefix.getCatalogName(), tableNames);\n+        return getViews(session, metadata, accessControl, prefix).keySet();\n+    }\n+\n+    public static Map<SchemaTableName, ConnectorViewDefinition> getViews(Session session, Metadata metadata, AccessControl accessControl, QualifiedTablePrefix prefix)\n+    {\n+        Map<SchemaTableName, ConnectorViewDefinition> views =\n+                metadata.getViews(session, prefix).entrySet().stream()\n+                        .collect(toImmutableMap(entry -> entry.getKey().asSchemaTableName(), Entry::getValue));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgwNjMwMQ==", "bodyText": "I don't think you need to break parameters in separate lines, the line is should not be very long", "url": "https://github.com/trinodb/trino/pull/3290#discussion_r400806301", "createdAt": "2020-03-31T10:28:45Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataListing.java", "diffHunk": "@@ -69,10 +70,23 @@ private MetadataListing() {}\n \n     public static Set<SchemaTableName> listViews(Session session, Metadata metadata, AccessControl accessControl, QualifiedTablePrefix prefix)\n     {\n-        Set<SchemaTableName> tableNames = metadata.listViews(session, prefix).stream()\n-                .map(QualifiedObjectName::asSchemaTableName)\n-                .collect(toImmutableSet());\n-        return accessControl.filterTables(session.toSecurityContext(), prefix.getCatalogName(), tableNames);\n+        return getViews(session, metadata, accessControl, prefix).keySet();\n+    }\n+\n+    public static Map<SchemaTableName, ConnectorViewDefinition> getViews(Session session, Metadata metadata, AccessControl accessControl, QualifiedTablePrefix prefix)\n+    {\n+        Map<SchemaTableName, ConnectorViewDefinition> views =\n+                metadata.getViews(session, prefix).entrySet().stream()\n+                        .collect(toImmutableMap(entry -> entry.getKey().asSchemaTableName(), Entry::getValue));\n+\n+        Set<SchemaTableName> accessible = accessControl.filterTables(\n+                session.toSecurityContext(),\n+                prefix.getCatalogName(),\n+                views.keySet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgwODM1NQ==", "bodyText": "I don't think you should use denyPrivileges here. This case is very different. Notice how filterCatalogs is implemented and follow same pattern.", "url": "https://github.com/trinodb/trino/pull/3290#discussion_r400808355", "createdAt": "2020-03-31T10:32:10Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/testing/TestingAccessControlManager.java", "diffHunk": "@@ -514,6 +516,18 @@ public void checkCanExecuteFunction(SecurityContext context, String functionName\n         return super.getColumnMasks(context, tableName, column, type);\n     }\n \n+    @Override\n+    public Set<SchemaTableName> filterTables(SecurityContext context, String catalogName, Set<SchemaTableName> tableNames)\n+    {\n+        if (shouldDenyPrivilege(context.getIdentity().getUser(), catalogName, FILTER_TABLES)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NjYyMDk1", "url": "https://github.com/trinodb/trino/pull/3290#pullrequestreview-384662095", "createdAt": "2020-03-31T12:01:24Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjowMToyNFrOF-SUKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjowMToyNFrOF-SUKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg1NjEwNw==", "bodyText": "assertQuery(\n      format(\"SELECT table_name FROM information_schema.views WHERE table_name = '%s'\", viewName),\n      format(\"VALUES '%s'\", viewName)); \n\nor\nassertQuery(\n      format(\"SELECT count(*) FROM information_schema.views WHERE table_name = '%s'\", viewName),\n      \"VALUES 1\");", "url": "https://github.com/trinodb/trino/pull/3290#discussion_r400856107", "createdAt": "2020-03-31T12:01:24Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -4733,6 +4733,35 @@ public void testShowColumnMetadata()\n         assertUpdate(\"DROP TABLE \" + tableName);\n     }\n \n+    @Test\n+    public void testShowViews()\n+    {\n+        String viewName = \"test_show_views\";\n+\n+        Session testSession = testSessionBuilder()\n+                .setIdentity(Identity.ofUser(\"test_view_access_owner\"))\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(getSession().getSchema().get())\n+                .build();\n+\n+        assertUpdate(\"CREATE VIEW \" + viewName + \" AS SELECT abs(1) as whatever\");\n+\n+        String showViews = format(\"SELECT * FROM information_schema.views WHERE table_name = '%s'\", viewName);\n+        assertEquals(1, computeActual(showViews).getRowCount());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "1909afcae120f9407750823fdfce8505aff4bd73", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/1909afcae120f9407750823fdfce8505aff4bd73", "committedDate": "2020-04-01T12:40:19Z", "message": "Add access control check while listing views"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "1909afcae120f9407750823fdfce8505aff4bd73", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/1909afcae120f9407750823fdfce8505aff4bd73", "committedDate": "2020-04-01T12:40:19Z", "message": "Add access control check while listing views"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1682, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}