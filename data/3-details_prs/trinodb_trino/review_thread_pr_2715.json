{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwMzU3MTYz", "number": 2715, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjozNjoyM1rODdUOoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjo1MTo1NFrODdUfaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDY2NzIwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/ThriftHiveMetastoreClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjozNjoyM1rOFl2Opw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjozNjoyM1rOFl2Opw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIzMDExOQ==", "bodyText": "We could expose this call without tablePattern param. There is no value in it.", "url": "https://github.com/trinodb/trino/pull/2715#discussion_r375230119", "createdAt": "2020-02-05T12:36:23Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/ThriftHiveMetastoreClient.java", "diffHunk": "@@ -121,6 +121,13 @@ public Database getDatabase(String dbName)\n         return client.get_table_names_by_filter(databaseName, filter, (short) -1);\n     }\n \n+    @Override\n+    public List<String> getTableNamesByType(String databaseName, String tablePattern, String tableType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDY3OTkyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjo0MTowOFrOFl2WYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDoyNTowM1rOFmWGMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIzMjA5OQ==", "bodyText": "add // TODO make view conversion extensible", "url": "https://github.com/trinodb/trino/pull/2715#discussion_r375232099", "createdAt": "2020-02-05T12:41:08Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1711,25 +1719,35 @@ public void dropView(ConnectorSession session, SchemaTableName viewName)\n     public Optional<ConnectorViewDefinition> getView(ConnectorSession session, SchemaTableName viewName)\n     {\n         return metastore.getTable(new HiveIdentity(session), viewName.getSchemaName(), viewName.getTableName())\n-                .filter(HiveUtil::isPrestoView)\n-                .map(view -> {\n-                    ConnectorViewDefinition definition = decodeViewData(view.getViewOriginalText()\n-                            .orElseThrow(() -> new PrestoException(HIVE_INVALID_METADATA, \"No view original text: \" + viewName)));\n-                    // use owner from table metadata if it exists\n-                    if (view.getOwner() != null && !definition.isRunAsInvoker()) {\n-                        definition = new ConnectorViewDefinition(\n-                                definition.getOriginalSql(),\n-                                definition.getCatalog(),\n-                                definition.getSchema(),\n-                                definition.getColumns(),\n-                                definition.getComment(),\n-                                Optional.of(view.getOwner()),\n-                                false);\n+                .flatMap(view -> {\n+                    if (isPrestoView(view)) {\n+                        ConnectorViewDefinition definition = decodeViewData(view.getViewOriginalText()\n+                                .orElseThrow(() -> new PrestoException(HIVE_INVALID_METADATA, \"No view original text: \" + viewName)));\n+                        // use owner from table metadata if it exists\n+                        if (view.getOwner() != null && !definition.isRunAsInvoker()) {\n+                            definition = new ConnectorViewDefinition(\n+                                    definition.getOriginalSql(),\n+                                    definition.getCatalog(),\n+                                    definition.getSchema(),\n+                                    definition.getColumns(),\n+                                    definition.getComment(),\n+                                    Optional.of(view.getOwner()),\n+                                    false);\n+                        }\n+                        return Optional.of(definition);\n                     }\n-                    return definition;\n+                    else if (isHiveViewsEnabled && isHiveOrPrestoView(view)) {\n+                        return Optional.of(buildHiveViewConnectorDefinition(catalogName, view));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc1MjI0Mw==", "bodyText": "I think it would just be replaced", "url": "https://github.com/trinodb/trino/pull/2715#discussion_r375752243", "createdAt": "2020-02-06T10:25:03Z", "author": {"login": "sopel39"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1711,25 +1719,35 @@ public void dropView(ConnectorSession session, SchemaTableName viewName)\n     public Optional<ConnectorViewDefinition> getView(ConnectorSession session, SchemaTableName viewName)\n     {\n         return metastore.getTable(new HiveIdentity(session), viewName.getSchemaName(), viewName.getTableName())\n-                .filter(HiveUtil::isPrestoView)\n-                .map(view -> {\n-                    ConnectorViewDefinition definition = decodeViewData(view.getViewOriginalText()\n-                            .orElseThrow(() -> new PrestoException(HIVE_INVALID_METADATA, \"No view original text: \" + viewName)));\n-                    // use owner from table metadata if it exists\n-                    if (view.getOwner() != null && !definition.isRunAsInvoker()) {\n-                        definition = new ConnectorViewDefinition(\n-                                definition.getOriginalSql(),\n-                                definition.getCatalog(),\n-                                definition.getSchema(),\n-                                definition.getColumns(),\n-                                definition.getComment(),\n-                                Optional.of(view.getOwner()),\n-                                false);\n+                .flatMap(view -> {\n+                    if (isPrestoView(view)) {\n+                        ConnectorViewDefinition definition = decodeViewData(view.getViewOriginalText()\n+                                .orElseThrow(() -> new PrestoException(HIVE_INVALID_METADATA, \"No view original text: \" + viewName)));\n+                        // use owner from table metadata if it exists\n+                        if (view.getOwner() != null && !definition.isRunAsInvoker()) {\n+                            definition = new ConnectorViewDefinition(\n+                                    definition.getOriginalSql(),\n+                                    definition.getCatalog(),\n+                                    definition.getSchema(),\n+                                    definition.getColumns(),\n+                                    definition.getComment(),\n+                                    Optional.of(view.getOwner()),\n+                                    false);\n+                        }\n+                        return Optional.of(definition);\n                     }\n-                    return definition;\n+                    else if (isHiveViewsEnabled && isHiveOrPrestoView(view)) {\n+                        return Optional.of(buildHiveViewConnectorDefinition(catalogName, view));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIzMjA5OQ=="}, "originalCommit": null, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDY4MjM0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadataFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjo0MTo1OFrOFl2XyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjo0MTo1OFrOFl2XyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIzMjQ1Nw==", "bodyText": "move it as the top field, just as it's the first ctor arg", "url": "https://github.com/trinodb/trino/pull/2715#discussion_r375232457", "createdAt": "2020-02-05T12:41:58Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadataFactory.java", "diffHunk": "@@ -44,7 +44,9 @@\n     private final boolean skipTargetCleanupOnRollback;\n     private final boolean writesToNonManagedTablesEnabled;\n     private final boolean createsOfNonManagedTablesEnabled;\n+    private final boolean hiveViewsEnabled;\n     private final long perTransactionCacheMaximumSize;\n+    private final HiveCatalogName catalogName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDY4MzM1OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadataFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjo0MjoyMFrOFl2YZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjo0MjoyMFrOFl2YZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIzMjYxNQ==", "bodyText": "move assignment to the top, just as it's the first ctor arg", "url": "https://github.com/trinodb/trino/pull/2715#discussion_r375232615", "createdAt": "2020-02-05T12:42:20Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadataFactory.java", "diffHunk": "@@ -128,8 +135,10 @@ public HiveMetadataFactory(\n         this.skipTargetCleanupOnRollback = skipTargetCleanupOnRollback;\n         this.writesToNonManagedTablesEnabled = writesToNonManagedTablesEnabled;\n         this.createsOfNonManagedTablesEnabled = createsOfNonManagedTablesEnabled;\n+        this.hiveViewsEnabled = hiveViewsEnabled;\n         this.perTransactionCacheMaximumSize = perTransactionCacheMaximumSize;\n \n+        this.catalogName = requireNonNull(catalogName, \"catalogName is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDY5MDY4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjo0NDo1NFrOFl2c5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjo0NDo1NFrOFl2c5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIzMzc2Ng==", "bodyText": "Optional.empty(), // comment\nfalse); // don't run as invoker", "url": "https://github.com/trinodb/trino/pull/2715#discussion_r375233766", "createdAt": "2020-02-05T12:44:54Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveUtil.java", "diffHunk": "@@ -665,6 +667,22 @@ public static ConnectorViewDefinition decodeViewData(String data)\n         return VIEW_CODEC.fromJson(bytes);\n     }\n \n+    public static ConnectorViewDefinition buildHiveViewConnectorDefinition(HiveCatalogName catalogName, Table view)\n+    {\n+        return new ConnectorViewDefinition(\n+                view.getViewOriginalText().get(),\n+                Optional.of(catalogName.toString()),\n+                Optional.ofNullable(view.getDatabaseName()),\n+                view.getDataColumns().stream()\n+                        .map(column -> new ConnectorViewDefinition.ViewColumn(column.getName(), TypeId.of(column.getType().getTypeSignature().toString())))\n+                        .collect(toImmutableList()),\n+                Optional.ofNullable(view.getOwner()),\n+                // no comment\n+                Optional.empty(),\n+                // don't run as invoker\n+                false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDY5NzYzOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViews.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjo0NzozMVrOFl2g5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjo0NzozMVrOFl2g5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIzNDc5MA==", "bodyText": "return immutableTable(NATION); ?", "url": "https://github.com/trinodb/trino/pull/2715#discussion_r375234790", "createdAt": "2020-02-05T12:47:31Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViews.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import io.prestosql.tempto.Requirement;\n+import io.prestosql.tempto.RequirementsProvider;\n+import io.prestosql.tempto.configuration.Configuration;\n+import org.testng.annotations.Test;\n+\n+import java.math.BigDecimal;\n+\n+import static io.prestosql.tempto.Requirements.compose;\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tempto.fulfillment.table.TableRequirements.immutableTable;\n+import static io.prestosql.tempto.fulfillment.table.hive.tpch.TpchTableDefinitions.NATION;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.tests.TestGroups.HIVE_VIEWS;\n+import static io.prestosql.tests.utils.QueryExecutors.onHive;\n+import static io.prestosql.tests.utils.QueryExecutors.onPresto;\n+\n+public class TestHiveViews\n+        extends HiveProductTest\n+        implements RequirementsProvider\n+{\n+    @Override\n+    public Requirement getRequirements(Configuration configuration)\n+    {\n+        return compose(\n+                immutableTable(NATION));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDY5ODYzOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViews.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjo0Nzo1MFrOFl2hdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjo0Nzo1MFrOFl2hdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIzNDkzMw==", "bodyText": "here & above, remove ; from the query", "url": "https://github.com/trinodb/trino/pull/2715#discussion_r375234933", "createdAt": "2020-02-05T12:47:50Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViews.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import io.prestosql.tempto.Requirement;\n+import io.prestosql.tempto.RequirementsProvider;\n+import io.prestosql.tempto.configuration.Configuration;\n+import org.testng.annotations.Test;\n+\n+import java.math.BigDecimal;\n+\n+import static io.prestosql.tempto.Requirements.compose;\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tempto.fulfillment.table.TableRequirements.immutableTable;\n+import static io.prestosql.tempto.fulfillment.table.hive.tpch.TpchTableDefinitions.NATION;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.tests.TestGroups.HIVE_VIEWS;\n+import static io.prestosql.tests.utils.QueryExecutors.onHive;\n+import static io.prestosql.tests.utils.QueryExecutors.onPresto;\n+\n+public class TestHiveViews\n+        extends HiveProductTest\n+        implements RequirementsProvider\n+{\n+    @Override\n+    public Requirement getRequirements(Configuration configuration)\n+    {\n+        return compose(\n+                immutableTable(NATION));\n+    }\n+\n+    @Test(groups = HIVE_VIEWS)\n+    public void testSelectOnView()\n+    {\n+        onHive().executeQuery(\"DROP VIEW IF EXISTS hive_test_view\");\n+\n+        onHive().executeQuery(\"CREATE VIEW hive_test_view AS SELECT * FROM nation\");\n+\n+        assertThat(query(\"SELECT * FROM hive_test_view\")).hasRowsCount(25);\n+    }\n+\n+    @Test(groups = HIVE_VIEWS)\n+    public void testSelectOnViewFromDifferentSchema()\n+    {\n+        onHive().executeQuery(\"DROP SCHEMA IF EXISTS test_schema CASCADE;\");\n+\n+        onHive().executeQuery(\"CREATE SCHEMA test_schema;\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDcwMjcwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveQlTranslation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjo0OToxM1rOFl2j1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjo0OToxM1rOFl2j1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIzNTU0MA==", "bodyText": "this is not a regex, use String#replace", "url": "https://github.com/trinodb/trino/pull/2715#discussion_r375235540", "createdAt": "2020-02-05T12:49:13Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveQlTranslation.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public final class HiveQlTranslation\n+{\n+    /**\n+     * This pattern matches to quoted with ' or \" strings. Also it does support escapes the quote character with \\.\n+     * Like:\n+     *  - 'string'\n+     *  - \"string\"\n+     *  - 'it\\'s an \"apple\"'\n+     *  - \"it's an \\\"apple\\\"\"\n+     */\n+    private static final Pattern LITERALS = Pattern.compile(\"(?s)((?<![\\\\\\\\])['\\\"])((?:.(?!(?<![\\\\\\\\])\\\\1))*.?)\\\\1\");\n+\n+    private HiveQlTranslation() {}\n+\n+    /**\n+     * - Replaces Hive ` as Presto \" to wrap identifiers.\n+     * - Replaces Hive \" as Presto ' for string literals.\n+     * - Removes Hive character escaping with \\ in string literals.\n+     * - Escapes ' with '' in string literals.\n+     */\n+    public static String translateHiveQlToPrestoSql(String hiveSql)\n+    {\n+        Matcher matcher = LITERALS.matcher(hiveSql);\n+        StringBuilder prestoSql = new StringBuilder();\n+        int start = 0;\n+        while (matcher.find()) {\n+            prestoSql.append(replaceBackTicks(hiveSql.substring(start, matcher.start())))\n+                    .append(\"'\")\n+                    .append(removeHiveEscapes(escapeQuotes(matcher.group().substring(1, matcher.group().length() - 1))))\n+                    .append(\"'\");\n+            start = matcher.end();\n+        }\n+        prestoSql.append(replaceBackTicks(hiveSql.substring(start)));\n+        return prestoSql.toString();\n+    }\n+\n+    private static String removeHiveEscapes(String value)\n+    {\n+        return value.replaceAll(\"(?s)\\\\\\\\(.)\", \"$1\");\n+    }\n+\n+    private static String escapeQuotes(String value)\n+    {\n+        return value.replaceAll(\"(?s)'\", \"''\");\n+    }\n+\n+    private static String replaceBackTicks(String value)\n+    {\n+        return value.replaceAll(\"`\", \"\\\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDcwMzU4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveQlTranslation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjo0OTozNVrOFl2kVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjo0OTozNVrOFl2kVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIzNTY2OQ==", "bodyText": "no need for regex, use String#replace", "url": "https://github.com/trinodb/trino/pull/2715#discussion_r375235669", "createdAt": "2020-02-05T12:49:35Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveQlTranslation.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public final class HiveQlTranslation\n+{\n+    /**\n+     * This pattern matches to quoted with ' or \" strings. Also it does support escapes the quote character with \\.\n+     * Like:\n+     *  - 'string'\n+     *  - \"string\"\n+     *  - 'it\\'s an \"apple\"'\n+     *  - \"it's an \\\"apple\\\"\"\n+     */\n+    private static final Pattern LITERALS = Pattern.compile(\"(?s)((?<![\\\\\\\\])['\\\"])((?:.(?!(?<![\\\\\\\\])\\\\1))*.?)\\\\1\");\n+\n+    private HiveQlTranslation() {}\n+\n+    /**\n+     * - Replaces Hive ` as Presto \" to wrap identifiers.\n+     * - Replaces Hive \" as Presto ' for string literals.\n+     * - Removes Hive character escaping with \\ in string literals.\n+     * - Escapes ' with '' in string literals.\n+     */\n+    public static String translateHiveQlToPrestoSql(String hiveSql)\n+    {\n+        Matcher matcher = LITERALS.matcher(hiveSql);\n+        StringBuilder prestoSql = new StringBuilder();\n+        int start = 0;\n+        while (matcher.find()) {\n+            prestoSql.append(replaceBackTicks(hiveSql.substring(start, matcher.start())))\n+                    .append(\"'\")\n+                    .append(removeHiveEscapes(escapeQuotes(matcher.group().substring(1, matcher.group().length() - 1))))\n+                    .append(\"'\");\n+            start = matcher.end();\n+        }\n+        prestoSql.append(replaceBackTicks(hiveSql.substring(start)));\n+        return prestoSql.toString();\n+    }\n+\n+    private static String removeHiveEscapes(String value)\n+    {\n+        return value.replaceAll(\"(?s)\\\\\\\\(.)\", \"$1\");\n+    }\n+\n+    private static String escapeQuotes(String value)\n+    {\n+        return value.replaceAll(\"(?s)'\", \"''\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDcwNjM5OnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViews.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjo1MDozN1rOFl2mEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDozNDozMVrOFmWY3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIzNjExMg==", "bodyText": "This seems to belong to the next commit: Support Hive views with tables from unspecified and different schema.\nSquash?", "url": "https://github.com/trinodb/trino/pull/2715#discussion_r375236112", "createdAt": "2020-02-05T12:50:37Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViews.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import io.prestosql.tempto.Requirement;\n+import io.prestosql.tempto.RequirementsProvider;\n+import io.prestosql.tempto.configuration.Configuration;\n+import org.testng.annotations.Test;\n+\n+import java.math.BigDecimal;\n+\n+import static io.prestosql.tempto.Requirements.compose;\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tempto.fulfillment.table.TableRequirements.immutableTable;\n+import static io.prestosql.tempto.fulfillment.table.hive.tpch.TpchTableDefinitions.NATION;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.tests.TestGroups.HIVE_VIEWS;\n+import static io.prestosql.tests.utils.QueryExecutors.onHive;\n+import static io.prestosql.tests.utils.QueryExecutors.onPresto;\n+\n+public class TestHiveViews\n+        extends HiveProductTest\n+        implements RequirementsProvider\n+{\n+    @Override\n+    public Requirement getRequirements(Configuration configuration)\n+    {\n+        return compose(\n+                immutableTable(NATION));\n+    }\n+\n+    @Test(groups = HIVE_VIEWS)\n+    public void testSelectOnView()\n+    {\n+        onHive().executeQuery(\"DROP VIEW IF EXISTS hive_test_view\");\n+\n+        onHive().executeQuery(\"CREATE VIEW hive_test_view AS SELECT * FROM nation\");\n+\n+        assertThat(query(\"SELECT * FROM hive_test_view\")).hasRowsCount(25);\n+    }\n+\n+    @Test(groups = HIVE_VIEWS)\n+    public void testSelectOnViewFromDifferentSchema()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc1NzAyMg==", "bodyText": "squashed", "url": "https://github.com/trinodb/trino/pull/2715#discussion_r375757022", "createdAt": "2020-02-06T10:34:31Z", "author": {"login": "sopel39"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViews.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import io.prestosql.tempto.Requirement;\n+import io.prestosql.tempto.RequirementsProvider;\n+import io.prestosql.tempto.configuration.Configuration;\n+import org.testng.annotations.Test;\n+\n+import java.math.BigDecimal;\n+\n+import static io.prestosql.tempto.Requirements.compose;\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tempto.fulfillment.table.TableRequirements.immutableTable;\n+import static io.prestosql.tempto.fulfillment.table.hive.tpch.TpchTableDefinitions.NATION;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.tests.TestGroups.HIVE_VIEWS;\n+import static io.prestosql.tests.utils.QueryExecutors.onHive;\n+import static io.prestosql.tests.utils.QueryExecutors.onPresto;\n+\n+public class TestHiveViews\n+        extends HiveProductTest\n+        implements RequirementsProvider\n+{\n+    @Override\n+    public Requirement getRequirements(Configuration configuration)\n+    {\n+        return compose(\n+                immutableTable(NATION));\n+    }\n+\n+    @Test(groups = HIVE_VIEWS)\n+    public void testSelectOnView()\n+    {\n+        onHive().executeQuery(\"DROP VIEW IF EXISTS hive_test_view\");\n+\n+        onHive().executeQuery(\"CREATE VIEW hive_test_view AS SELECT * FROM nation\");\n+\n+        assertThat(query(\"SELECT * FROM hive_test_view\")).hasRowsCount(25);\n+    }\n+\n+    @Test(groups = HIVE_VIEWS)\n+    public void testSelectOnViewFromDifferentSchema()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIzNjExMg=="}, "originalCommit": null, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDcwODg0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjo1MToyOFrOFl2new==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjo1MToyOFrOFl2new==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIzNjQ3NQ==", "bodyText": "the // TODO make view conversion extensible may actually go here", "url": "https://github.com/trinodb/trino/pull/2715#discussion_r375236475", "createdAt": "2020-02-05T12:51:28Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveUtil.java", "diffHunk": "@@ -670,7 +671,7 @@ public static ConnectorViewDefinition decodeViewData(String data)\n     public static ConnectorViewDefinition buildHiveViewConnectorDefinition(HiveCatalogName catalogName, Table view)\n     {\n         return new ConnectorViewDefinition(\n-                view.getViewOriginalText().get(),\n+                translateHiveQlToPrestoSql(view.getViewExpandedText().get()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDcxMDE5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveQlTranslation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjo1MTo1NFrOFl2oNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjo1MTo1NFrOFl2oNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIzNjY2MQ==", "bodyText": "remove or execute.", "url": "https://github.com/trinodb/trino/pull/2715#discussion_r375236661", "createdAt": "2020-02-05T12:51:54Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveQlTranslation.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import io.prestosql.sql.parser.ParsingOptions;\n+import io.prestosql.sql.parser.SqlParser;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.plugin.hive.HiveQlTranslation.translateHiveQlToPrestoSql;\n+import static io.prestosql.testing.assertions.Assert.assertEquals;\n+\n+// TODO run test queries on Presto and Hive and assert that results are the same", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1005, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}