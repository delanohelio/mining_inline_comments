{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0NTcwMzcy", "number": 6027, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOTozMjozMlrOE7diag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMzoyNTo0NVrOFLR4Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzg1Mzg2OnYy", "diffSide": "RIGHT", "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/TestKafkaIntegrationPushDown.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOTozMjozMlrOH3H7QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOTo1MDo0M1rOH3ImGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2MzU4NA==", "bodyText": "This doesn't work. Final stats are set once. If they are wrong, they will stay wrong.", "url": "https://github.com/trinodb/trino/pull/6027#discussion_r527563584", "createdAt": "2020-11-20T09:32:32Z", "author": {"login": "sopel39"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/TestKafkaIntegrationPushDown.java", "diffHunk": "@@ -105,38 +106,36 @@ public void stopKafka()\n     }\n \n     @Test\n-    public void testPartitionPushDown() throws ExecutionException, InterruptedException\n+    public void testPartitionPushDown()\n+            throws ExecutionException, InterruptedException\n     {\n         createMessages(topicNamePartition);\n         String sql = format(\"SELECT count(*) FROM default.%s WHERE _partition_id=1\", topicNamePartition);\n \n         ResultWithQueryId<MaterializedResult> queryResult = getDistributedQueryRunner().executeWithQueryId(getSession(), sql);\n-        assertEquals(getQueryInfo(getDistributedQueryRunner(), queryResult).getQueryStats().getProcessedInputPositions(), MESSAGE_NUM / 2);\n+        assertEventually(() -> assertEquals(getQueryInfo(getDistributedQueryRunner(), queryResult).getQueryStats().getProcessedInputPositions(), MESSAGE_NUM / 2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2NzU2Mg==", "bodyText": "oh... so we need to retry query execution as well.", "url": "https://github.com/trinodb/trino/pull/6027#discussion_r527567562", "createdAt": "2020-11-20T09:39:29Z", "author": {"login": "kokosing"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/TestKafkaIntegrationPushDown.java", "diffHunk": "@@ -105,38 +106,36 @@ public void stopKafka()\n     }\n \n     @Test\n-    public void testPartitionPushDown() throws ExecutionException, InterruptedException\n+    public void testPartitionPushDown()\n+            throws ExecutionException, InterruptedException\n     {\n         createMessages(topicNamePartition);\n         String sql = format(\"SELECT count(*) FROM default.%s WHERE _partition_id=1\", topicNamePartition);\n \n         ResultWithQueryId<MaterializedResult> queryResult = getDistributedQueryRunner().executeWithQueryId(getSession(), sql);\n-        assertEquals(getQueryInfo(getDistributedQueryRunner(), queryResult).getQueryStats().getProcessedInputPositions(), MESSAGE_NUM / 2);\n+        assertEventually(() -> assertEquals(getQueryInfo(getDistributedQueryRunner(), queryResult).getQueryStats().getProcessedInputPositions(), MESSAGE_NUM / 2));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2MzU4NA=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU3NDU1NQ==", "bodyText": "Unfortunately yes. We should fix the base issue, but that is some digging into complex scheduler.", "url": "https://github.com/trinodb/trino/pull/6027#discussion_r527574555", "createdAt": "2020-11-20T09:50:43Z", "author": {"login": "sopel39"}, "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/TestKafkaIntegrationPushDown.java", "diffHunk": "@@ -105,38 +106,36 @@ public void stopKafka()\n     }\n \n     @Test\n-    public void testPartitionPushDown() throws ExecutionException, InterruptedException\n+    public void testPartitionPushDown()\n+            throws ExecutionException, InterruptedException\n     {\n         createMessages(topicNamePartition);\n         String sql = format(\"SELECT count(*) FROM default.%s WHERE _partition_id=1\", topicNamePartition);\n \n         ResultWithQueryId<MaterializedResult> queryResult = getDistributedQueryRunner().executeWithQueryId(getSession(), sql);\n-        assertEquals(getQueryInfo(getDistributedQueryRunner(), queryResult).getQueryStats().getProcessedInputPositions(), MESSAGE_NUM / 2);\n+        assertEventually(() -> assertEquals(getQueryInfo(getDistributedQueryRunner(), queryResult).getQueryStats().getProcessedInputPositions(), MESSAGE_NUM / 2));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2MzU4NA=="}, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MzcxNTUwOnYy", "diffSide": "RIGHT", "path": "core/trino-main/src/main/java/io/trino/testing/assertions/Assert.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMzoyNTo0NVrOIOXGqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMzoyNTo0NVrOIOXGqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkyOTUxNQ==", "bodyText": "static import", "url": "https://github.com/trinodb/trino/pull/6027#discussion_r551929515", "createdAt": "2021-01-05T13:25:45Z", "author": {"login": "skrzypo987"}, "path": "core/trino-main/src/main/java/io/trino/testing/assertions/Assert.java", "diffHunk": "@@ -50,6 +52,11 @@ public static void assertEquals(Iterable<?> actual, Iterable<?> expected, String\n         }\n     }\n \n+    public static void assertEventually(Runnable assertion)\n+    {\n+        assertEventually(new Duration(30, TimeUnit.SECONDS), assertion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4843, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}