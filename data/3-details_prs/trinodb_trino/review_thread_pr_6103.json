{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MDMwNzkx", "number": 6103, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNTo0ODowNlrOE9r_hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNTo1MDowOFrOE9sCXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTE5MzY3OnYy", "diffSide": "RIGHT", "path": "presto-tests/src/test/java/io/prestosql/execution/EventsAwaitingQueries.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNTo0ODowNlrOH6gkvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNTo0ODowNlrOH6gkvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTExMzE0OQ==", "bodyText": "Add a comment why we're doing this, otherwise the first impression is \"flaky!\" and the second is \"let's fix that\"", "url": "https://github.com/trinodb/trino/pull/6103#discussion_r531113149", "createdAt": "2020-11-26T15:48:06Z", "author": {"login": "findepi"}, "path": "presto-tests/src/test/java/io/prestosql/execution/EventsAwaitingQueries.java", "diffHunk": "@@ -64,7 +67,7 @@ MaterializedResult runQueryAndWaitForEvents(@Language(\"SQL\") String sql, int num\n         }\n \n         eventsCollector.waitForEvents(10);\n-\n+        Thread.sleep(extraWaitTime.toMillis());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTE5NTM4OnYy", "diffSide": "RIGHT", "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListenerWithSplits.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNTo0ODozNlrOH6gl5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzoyNDoxMlrOH6jchw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTExMzQ0Nw==", "bodyText": "if you added 1s everywhere, then maybe we do not need this parametric and we can do 1s unconditionally?", "url": "https://github.com/trinodb/trino/pull/6103#discussion_r531113447", "createdAt": "2020-11-26T15:48:36Z", "author": {"login": "findepi"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListenerWithSplits.java", "diffHunk": "@@ -90,7 +91,7 @@ protected QueryRunner createQueryRunner()\n         queryRunner.getCoordinator().getResourceGroupManager().get()\n                 .setConfigurationManager(\"file\", ImmutableMap.of(\"resource-groups.config-file\", getResourceFilePath(\"resource_groups_config_simple.json\")));\n \n-        queries = new EventsAwaitingQueries(generatedEvents, queryRunner);\n+        queries = new EventsAwaitingQueries(generatedEvents, queryRunner, Duration.ofSeconds(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE2MDE5OQ==", "bodyText": "Maybe. Let's leave it though. There are not many calls to this constructor.", "url": "https://github.com/trinodb/trino/pull/6103#discussion_r531160199", "createdAt": "2020-11-26T17:24:12Z", "author": {"login": "losipiuk"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListenerWithSplits.java", "diffHunk": "@@ -90,7 +91,7 @@ protected QueryRunner createQueryRunner()\n         queryRunner.getCoordinator().getResourceGroupManager().get()\n                 .setConfigurationManager(\"file\", ImmutableMap.of(\"resource-groups.config-file\", getResourceFilePath(\"resource_groups_config_simple.json\")));\n \n-        queries = new EventsAwaitingQueries(generatedEvents, queryRunner);\n+        queries = new EventsAwaitingQueries(generatedEvents, queryRunner, Duration.ofSeconds(1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTExMzQ0Nw=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTIwMDkzOnYy", "diffSide": "RIGHT", "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListenerBasic.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNTo1MDowOFrOH6gpMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzoyNTozN1rOH6je8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTExNDI4OA==", "bodyText": "maybe\nassertFailedQuery(\"This is NOT a SQL statement and will fail to parse\",", "url": "https://github.com/trinodb/trino/pull/6103#discussion_r531114288", "createdAt": "2020-11-26T15:50:08Z", "author": {"login": "findepi"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListenerBasic.java", "diffHunk": "@@ -131,6 +131,13 @@ public void testAnalysisFailure()\n         assertFailedQuery(\"EXPLAIN (TYPE IO) SELECT sum(bogus) FROM lineitem\", \"line 1:30: Column 'bogus' cannot be resolved\");\n     }\n \n+    @Test\n+    public void testParseError()\n+            throws Exception\n+    {\n+        assertFailedQuery(\"describe formatted table blah\", \"line 1:20: mismatched input 'table'. Expecting: '.', <EOF>\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE2MDgxOQ==", "bodyText": "I used \"You shall not parse!\"", "url": "https://github.com/trinodb/trino/pull/6103#discussion_r531160819", "createdAt": "2020-11-26T17:25:37Z", "author": {"login": "losipiuk"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListenerBasic.java", "diffHunk": "@@ -131,6 +131,13 @@ public void testAnalysisFailure()\n         assertFailedQuery(\"EXPLAIN (TYPE IO) SELECT sum(bogus) FROM lineitem\", \"line 1:30: Column 'bogus' cannot be resolved\");\n     }\n \n+    @Test\n+    public void testParseError()\n+            throws Exception\n+    {\n+        assertFailedQuery(\"describe formatted table blah\", \"line 1:20: mismatched input 'table'. Expecting: '.', <EOF>\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTExNDI4OA=="}, "originalCommit": null, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4679, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}