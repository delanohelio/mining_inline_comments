{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MzIxNzQw", "number": 4846, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxODoyMToxNVrOEYuvWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDoxMzoxNlrOEcAEtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzY3MDY0OnYy", "diffSide": "RIGHT", "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxODoyMToxNVrOHBM1iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDoxMjozOFrOHGRTlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAyMDkzOQ==", "bodyText": "Can this be tested with DataTypeTest? Maybe we can have TestSqlServerTypeMapping stub?\n(see #565)", "url": "https://github.com/trinodb/trino/pull/4846#discussion_r471020939", "createdAt": "2020-08-15T18:21:15Z", "author": {"login": "findepi"}, "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -111,6 +111,18 @@ public void testDecimalPredicatePushdown()\n         }\n     }\n \n+    @Test\n+    public void testInsertVarbinary()\n+            throws Exception\n+    {\n+        try (AutoCloseable ignoreTable = withTable(\"test_varbinary\",\n+                \"(x varbinary(max))\")) {\n+            assertUpdate(\"INSERT INTO test_varbinary VALUES (X'65683F'), (NULL)\", 2);\n+            assertQuery(\"SELECT * FROM test_varbinary\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA1MTc2MQ==", "bodyText": "@findepi I avoided TestSqlServerTypeMapping considering #4734, but moved the test to the class. Confirmed TestSqlServerTypeMapping.testVarbinary failed before this commit.", "url": "https://github.com/trinodb/trino/pull/4846#discussion_r471051761", "createdAt": "2020-08-16T01:27:39Z", "author": {"login": "ebyhr"}, "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -111,6 +111,18 @@ public void testDecimalPredicatePushdown()\n         }\n     }\n \n+    @Test\n+    public void testInsertVarbinary()\n+            throws Exception\n+    {\n+        try (AutoCloseable ignoreTable = withTable(\"test_varbinary\",\n+                \"(x varbinary(max))\")) {\n+            assertUpdate(\"INSERT INTO test_varbinary VALUES (X'65683F'), (NULL)\", 2);\n+            assertQuery(\"SELECT * FROM test_varbinary\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAyMDkzOQ=="}, "originalCommit": null, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMzNjMxMw==", "bodyText": "Right. Let's have a TODO in the code, to move the method over there, while TestSqlServerTypeMapping exists", "url": "https://github.com/trinodb/trino/pull/4846#discussion_r476336313", "createdAt": "2020-08-25T10:11:16Z", "author": {"login": "findepi"}, "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -111,6 +111,18 @@ public void testDecimalPredicatePushdown()\n         }\n     }\n \n+    @Test\n+    public void testInsertVarbinary()\n+            throws Exception\n+    {\n+        try (AutoCloseable ignoreTable = withTable(\"test_varbinary\",\n+                \"(x varbinary(max))\")) {\n+            assertUpdate(\"INSERT INTO test_varbinary VALUES (X'65683F'), (NULL)\", 2);\n+            assertQuery(\"SELECT * FROM test_varbinary\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAyMDkzOQ=="}, "originalCommit": null, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMzNzA0Nw==", "bodyText": "Oh, i see you called the test class TestSqlServerTypeMappi. Fine.", "url": "https://github.com/trinodb/trino/pull/4846#discussion_r476337047", "createdAt": "2020-08-25T10:12:38Z", "author": {"login": "findepi"}, "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -111,6 +111,18 @@ public void testDecimalPredicatePushdown()\n         }\n     }\n \n+    @Test\n+    public void testInsertVarbinary()\n+            throws Exception\n+    {\n+        try (AutoCloseable ignoreTable = withTable(\"test_varbinary\",\n+                \"(x varbinary(max))\")) {\n+            assertUpdate(\"INSERT INTO test_varbinary VALUES (X'65683F'), (NULL)\", 2);\n+            assertQuery(\"SELECT * FROM test_varbinary\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAyMDkzOQ=="}, "originalCommit": null, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzY3MDg1OnYy", "diffSide": "RIGHT", "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxODoyMToyMVrOHBM1oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxODoyMToyMVrOHBM1oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAyMDk2MQ==", "bodyText": "no need for a newline", "url": "https://github.com/trinodb/trino/pull/4846#discussion_r471020961", "createdAt": "2020-08-15T18:21:21Z", "author": {"login": "findepi"}, "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -111,6 +111,18 @@ public void testDecimalPredicatePushdown()\n         }\n     }\n \n+    @Test\n+    public void testInsertVarbinary()\n+            throws Exception\n+    {\n+        try (AutoCloseable ignoreTable = withTable(\"test_varbinary\",\n+                \"(x varbinary(max))\")) {\n+            assertUpdate(\"INSERT INTO test_varbinary VALUES (X'65683F'), (NULL)\", 2);\n+            assertQuery(\"SELECT * FROM test_varbinary\",\n+                    \"VALUES (X'65683F'), (NULL)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzY3MTAxOnYy", "diffSide": "RIGHT", "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxODoyMTozM1rOHBM1tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxODoyMTozM1rOHBM1tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAyMDk4MA==", "bodyText": "nit: no need for a newline", "url": "https://github.com/trinodb/trino/pull/4846#discussion_r471020980", "createdAt": "2020-08-15T18:21:33Z", "author": {"login": "findepi"}, "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -111,6 +111,18 @@ public void testDecimalPredicatePushdown()\n         }\n     }\n \n+    @Test\n+    public void testInsertVarbinary()\n+            throws Exception\n+    {\n+        try (AutoCloseable ignoreTable = withTable(\"test_varbinary\",\n+                \"(x varbinary(max))\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzczOTY1OnYy", "diffSide": "RIGHT", "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQyMDowMjo0NVrOHBNVKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwMToyNjoxMlrOHBOtjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAyOTAzNA==", "bodyText": "This test seems to be passing even without changes in SqlServerClient.\nIntentional?", "url": "https://github.com/trinodb/trino/pull/4846#discussion_r471029034", "createdAt": "2020-08-15T20:02:45Z", "author": {"login": "findepi"}, "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -111,6 +111,18 @@ public void testDecimalPredicatePushdown()\n         }\n     }\n \n+    @Test\n+    public void testInsertVarbinary()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA1MTY2Mg==", "bodyText": "@findepi Sorry, it's unintentional. I should have separated INSERT statements.", "url": "https://github.com/trinodb/trino/pull/4846#discussion_r471051662", "createdAt": "2020-08-16T01:26:12Z", "author": {"login": "ebyhr"}, "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -111,6 +111,18 @@ public void testDecimalPredicatePushdown()\n         }\n     }\n \n+    @Test\n+    public void testInsertVarbinary()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAyOTAzNA=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Nzk2NzM2OnYy", "diffSide": "RIGHT", "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerTypeMapping.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDoxMzowNVrOHGRUjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDoxMzowNVrOHGRUjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMzNzI5Mg==", "bodyText": "make this first", "url": "https://github.com/trinodb/trino/pull/4846#discussion_r476337292", "createdAt": "2020-08-25T10:13:05Z", "author": {"login": "findepi"}, "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerTypeMapping.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.sqlserver;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.Session;\n+import io.prestosql.testing.AbstractTestQueryFramework;\n+import io.prestosql.testing.QueryRunner;\n+import io.prestosql.testing.datatype.CreateAsSelectDataSetup;\n+import io.prestosql.testing.datatype.DataSetup;\n+import io.prestosql.testing.datatype.DataType;\n+import io.prestosql.testing.datatype.DataTypeTest;\n+import io.prestosql.testing.sql.PrestoSqlExecutor;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.plugin.sqlserver.SqlServerQueryRunner.createSqlServerQueryRunner;\n+import static io.prestosql.testing.datatype.DataType.varbinaryDataType;\n+import static java.nio.charset.StandardCharsets.UTF_16LE;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+public class TestSqlServerTypeMapping\n+        extends AbstractTestQueryFramework\n+{\n+    private TestingSqlServer sqlServer;\n+\n+    @Override\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        sqlServer = new TestingSqlServer();\n+        sqlServer.start();\n+        return createSqlServerQueryRunner(\n+                sqlServer,\n+                ImmutableMap.of(),\n+                ImmutableList.of());\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public final void destroy()\n+    {\n+        sqlServer.close();\n+    }\n+\n+    @Test\n+    public void testVarbinary()\n+    {\n+        varbinaryTestCases(varbinaryDataType())\n+                .execute(getQueryRunner(), prestoCreateAsSelect(\"test_varbinary\"));\n+    }\n+\n+    private static DataTypeTest varbinaryTestCases(DataType<byte[]> varbinaryDataType)\n+    {\n+        return DataTypeTest.create()\n+                .addRoundTrip(varbinaryDataType, \"hello\".getBytes(UTF_8))\n+                .addRoundTrip(varbinaryDataType, \"Pi\u0119kna \u0142\u0105ka w \u6771\u4eac\u90fd\".getBytes(UTF_8))\n+                .addRoundTrip(varbinaryDataType, \"Bag full of \ud83d\udcb0\".getBytes(UTF_16LE))\n+                .addRoundTrip(varbinaryDataType, null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "034fd8500c77d7a6ba3a40935d2e775907b6f642"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Nzk2Nzg4OnYy", "diffSide": "RIGHT", "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerTypeMapping.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDoxMzoxNlrOHGRU5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMDoxMzoxNlrOHGRU5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMzNzM4MQ==", "bodyText": "no need for a method, you can inline with test body", "url": "https://github.com/trinodb/trino/pull/4846#discussion_r476337381", "createdAt": "2020-08-25T10:13:16Z", "author": {"login": "findepi"}, "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerTypeMapping.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.sqlserver;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.Session;\n+import io.prestosql.testing.AbstractTestQueryFramework;\n+import io.prestosql.testing.QueryRunner;\n+import io.prestosql.testing.datatype.CreateAsSelectDataSetup;\n+import io.prestosql.testing.datatype.DataSetup;\n+import io.prestosql.testing.datatype.DataType;\n+import io.prestosql.testing.datatype.DataTypeTest;\n+import io.prestosql.testing.sql.PrestoSqlExecutor;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.plugin.sqlserver.SqlServerQueryRunner.createSqlServerQueryRunner;\n+import static io.prestosql.testing.datatype.DataType.varbinaryDataType;\n+import static java.nio.charset.StandardCharsets.UTF_16LE;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+public class TestSqlServerTypeMapping\n+        extends AbstractTestQueryFramework\n+{\n+    private TestingSqlServer sqlServer;\n+\n+    @Override\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        sqlServer = new TestingSqlServer();\n+        sqlServer.start();\n+        return createSqlServerQueryRunner(\n+                sqlServer,\n+                ImmutableMap.of(),\n+                ImmutableList.of());\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public final void destroy()\n+    {\n+        sqlServer.close();\n+    }\n+\n+    @Test\n+    public void testVarbinary()\n+    {\n+        varbinaryTestCases(varbinaryDataType())\n+                .execute(getQueryRunner(), prestoCreateAsSelect(\"test_varbinary\"));\n+    }\n+\n+    private static DataTypeTest varbinaryTestCases(DataType<byte[]> varbinaryDataType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "034fd8500c77d7a6ba3a40935d2e775907b6f642"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3470, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}