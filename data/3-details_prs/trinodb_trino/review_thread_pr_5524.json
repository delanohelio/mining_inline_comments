{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNTU4ODk2", "number": 5524, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjo1NToxOFrOEsnsmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMjo0NDowNVrOEszXOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjIzMTk1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/PlanOptimizers.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjo1NToxOFrOHf9jSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjo1NToxOFrOHf9jSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3NjM2MQ==", "bodyText": "#811", "url": "https://github.com/trinodb/trino/pull/5524#discussion_r503276361", "createdAt": "2020-10-12T12:55:18Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/PlanOptimizers.java", "diffHunk": "@@ -527,20 +527,26 @@ public PlanOptimizers(\n                 new CheckSubqueryNodesAreRewritten(),\n                 new StatsRecordingPlanOptimizer(\n                         optimizerStats,\n-                        new PredicatePushDown(metadata, typeOperators, typeAnalyzer, false, false)),\n-                new IterativeOptimizer(\n-                        ruleStats,\n-                        statsCalculator,\n-                        estimatedExchangesCostCalculator,\n-                        ImmutableSet.<Rule<?>>builder()\n-                                .addAll(columnPruningRules)\n-                                .addAll(projectionPushdownRules)\n-                                .add(new RemoveRedundantIdentityProjections())\n-                                .add(new PushLimitIntoTableScan(metadata))\n-                                .add(new PushPredicateIntoTableScan(metadata, typeOperators, typeAnalyzer))\n-                                .add(new PushSampleIntoTableScan(metadata))\n-                                .add(new PushAggregationIntoTableScan(metadata))\n-                                .build()),\n+                        new PredicatePushDown(metadata, typeOperators, typeAnalyzer, false, false)));\n+\n+        IterativeOptimizer pushIntoTableScanOptimizer = new IterativeOptimizer(\n+                ruleStats,\n+                statsCalculator,\n+                estimatedExchangesCostCalculator,\n+                ImmutableSet.<Rule<?>>builder()\n+                        .addAll(columnPruningRules)\n+                        .addAll(projectionPushdownRules)\n+                        .add(new RemoveRedundantIdentityProjections())\n+                        .add(new PushLimitIntoTableScan(metadata))\n+                        .add(new PushPredicateIntoTableScan(metadata, typeOperators, typeAnalyzer))\n+                        .add(new PushSampleIntoTableScan(metadata))\n+                        .add(new PushAggregationIntoTableScan(metadata))\n+                        .build());\n+        builder.add(pushIntoTableScanOptimizer);\n+        builder.add(new UnaliasSymbolReferences(metadata));\n+        builder.add(pushIntoTableScanOptimizer); // TODO (https://github.com/prestosql/presto/issues/811) merge merge with the above after migrating UnaliasSymbolReferences to rules", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjIzMjgzOnYy", "diffSide": "RIGHT", "path": "presto-druid/src/test/java/io/prestosql/plugin/druid/TestDruidIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjo1NTozNVrOHf9j2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjo1NTozNVrOHf9j2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3NjUwNA==", "bodyText": "#4313", "url": "https://github.com/trinodb/trino/pull/5524#discussion_r503276504", "createdAt": "2020-10-12T12:55:35Z", "author": {"login": "findepi"}, "path": "presto-druid/src/test/java/io/prestosql/plugin/druid/TestDruidIntegrationSmokeTest.java", "diffHunk": "@@ -283,5 +284,14 @@ public void testLimitPushdown()\n \n         // with filter over varchar column\n         assertThat(query(\"SELECT name FROM nation WHERE name < 'EEE' LIMIT 5\")).isCorrectlyPushedDown();\n+\n+        // with aggregation\n+        assertThat(query(\"SELECT max(regionkey) FROM nation LIMIT 5\")).isNotFullyPushedDown(AggregationNode.class); // global aggregation, LIMIT removed TODO https://github.com/prestosql/presto/pull/4313", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjIzMzg0OnYy", "diffSide": "RIGHT", "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjo1NTo1MFrOHf9kdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOToyNDozN1rOHgKiLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3NjY2Mw==", "bodyText": "#5522", "url": "https://github.com/trinodb/trino/pull/5524#discussion_r503276663", "createdAt": "2020-10-12T12:55:50Z", "author": {"login": "findepi"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlIntegrationSmokeTest.java", "diffHunk": "@@ -385,6 +385,15 @@ public void testLimitPushdown()\n \n         // with filter over varchar column\n         assertThat(query(\"SELECT name FROM nation WHERE name < 'EEE' LIMIT 5\")).isCorrectlyPushedDown();\n+\n+        // with aggregation\n+        assertThat(query(\"SELECT max(regionkey) FROM nation LIMIT 5\")).isCorrectlyPushedDown(); // global aggregation, LIMIT removed\n+        assertThat(query(\"SELECT regionkey, max(name) FROM nation GROUP BY regionkey LIMIT 5\")).isCorrectlyPushedDown();\n+        // TODO (https://github.com/prestosql/presto/issues/5522) assertThat(query(\"SELECT DISTINCT regionkey FROM nation LIMIT 5\")).isCorrectlyPushedDown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4OTA3MQ==", "bodyText": "add an example with actual aggregation? like avg(DISTINCT regionkey)`?", "url": "https://github.com/trinodb/trino/pull/5524#discussion_r503489071", "createdAt": "2020-10-12T19:24:37Z", "author": {"login": "losipiuk"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlIntegrationSmokeTest.java", "diffHunk": "@@ -385,6 +385,15 @@ public void testLimitPushdown()\n \n         // with filter over varchar column\n         assertThat(query(\"SELECT name FROM nation WHERE name < 'EEE' LIMIT 5\")).isCorrectlyPushedDown();\n+\n+        // with aggregation\n+        assertThat(query(\"SELECT max(regionkey) FROM nation LIMIT 5\")).isCorrectlyPushedDown(); // global aggregation, LIMIT removed\n+        assertThat(query(\"SELECT regionkey, max(name) FROM nation GROUP BY regionkey LIMIT 5\")).isCorrectlyPushedDown();\n+        // TODO (https://github.com/prestosql/presto/issues/5522) assertThat(query(\"SELECT DISTINCT regionkey FROM nation LIMIT 5\")).isCorrectlyPushedDown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3NjY2Mw=="}, "originalCommit": null, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzYxNzY1OnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueries.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOToyNzo1MFrOHgKnlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOTo0NDoxNFrOHgeZ6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5MDQ1NQ==", "bodyText": "General comment. I have some problem with test naming. It claims that pushdown is being tested here. While we do not really have any pushdown related assertions. We are just checking if LIMIT queries are not messed up by connector implementation.", "url": "https://github.com/trinodb/trino/pull/5524#discussion_r503490455", "createdAt": "2020-10-12T19:27:50Z", "author": {"login": "losipiuk"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueries.java", "diffHunk": "@@ -866,6 +866,22 @@ public void testLimitPushDown()\n \n         assertEquals(actual.getMaterializedRows().size(), 10);\n         assertContains(all, actual);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc1OTU1OA==", "bodyText": "pre-existing, i can change it still, preferrably as a followup", "url": "https://github.com/trinodb/trino/pull/5524#discussion_r503759558", "createdAt": "2020-10-13T08:22:42Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueries.java", "diffHunk": "@@ -866,6 +866,22 @@ public void testLimitPushDown()\n \n         assertEquals(actual.getMaterializedRows().size(), 10);\n         assertContains(all, actual);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5MDQ1NQ=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgxNDYzNA==", "bodyText": "Sure. Thanks", "url": "https://github.com/trinodb/trino/pull/5524#discussion_r503814634", "createdAt": "2020-10-13T09:44:14Z", "author": {"login": "losipiuk"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueries.java", "diffHunk": "@@ -866,6 +866,22 @@ public void testLimitPushDown()\n \n         assertEquals(actual.getMaterializedRows().size(), 10);\n         assertContains(all, actual);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5MDQ1NQ=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDEzMzM5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/PlanOptimizers.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMjozOToyNlrOHgPZLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwODoyMzo1M1rOHgbF4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU2ODY4NA==", "bodyText": "may be define this at the top where other optimizers/rulesets are defined? just a suggestion.", "url": "https://github.com/trinodb/trino/pull/5524#discussion_r503568684", "createdAt": "2020-10-12T22:39:26Z", "author": {"login": "phd3"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/PlanOptimizers.java", "diffHunk": "@@ -527,20 +527,26 @@ public PlanOptimizers(\n                 new CheckSubqueryNodesAreRewritten(),\n                 new StatsRecordingPlanOptimizer(\n                         optimizerStats,\n-                        new PredicatePushDown(metadata, typeOperators, typeAnalyzer, false, false)),\n-                new IterativeOptimizer(\n-                        ruleStats,\n-                        statsCalculator,\n-                        estimatedExchangesCostCalculator,\n-                        ImmutableSet.<Rule<?>>builder()\n-                                .addAll(columnPruningRules)\n-                                .addAll(projectionPushdownRules)\n-                                .add(new RemoveRedundantIdentityProjections())\n-                                .add(new PushLimitIntoTableScan(metadata))\n-                                .add(new PushPredicateIntoTableScan(metadata, typeOperators, typeAnalyzer))\n-                                .add(new PushSampleIntoTableScan(metadata))\n-                                .add(new PushAggregationIntoTableScan(metadata))\n-                                .build()),\n+                        new PredicatePushDown(metadata, typeOperators, typeAnalyzer, false, false)));\n+\n+        IterativeOptimizer pushIntoTableScanOptimizer = new IterativeOptimizer(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2MDM1NA==", "bodyText": "i thought about that. \"at the top\" is a few screens away, which makes code navigation harder\nit would be definitely better if pushIntoTableScanOptimizer was used in more than one place (i consider current two incantations still  \"one place\")", "url": "https://github.com/trinodb/trino/pull/5524#discussion_r503760354", "createdAt": "2020-10-13T08:23:53Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/PlanOptimizers.java", "diffHunk": "@@ -527,20 +527,26 @@ public PlanOptimizers(\n                 new CheckSubqueryNodesAreRewritten(),\n                 new StatsRecordingPlanOptimizer(\n                         optimizerStats,\n-                        new PredicatePushDown(metadata, typeOperators, typeAnalyzer, false, false)),\n-                new IterativeOptimizer(\n-                        ruleStats,\n-                        statsCalculator,\n-                        estimatedExchangesCostCalculator,\n-                        ImmutableSet.<Rule<?>>builder()\n-                                .addAll(columnPruningRules)\n-                                .addAll(projectionPushdownRules)\n-                                .add(new RemoveRedundantIdentityProjections())\n-                                .add(new PushLimitIntoTableScan(metadata))\n-                                .add(new PushPredicateIntoTableScan(metadata, typeOperators, typeAnalyzer))\n-                                .add(new PushSampleIntoTableScan(metadata))\n-                                .add(new PushAggregationIntoTableScan(metadata))\n-                                .build()),\n+                        new PredicatePushDown(metadata, typeOperators, typeAnalyzer, false, false)));\n+\n+        IterativeOptimizer pushIntoTableScanOptimizer = new IterativeOptimizer(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU2ODY4NA=="}, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDE0MzI4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/PlanOptimizers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMjo0NDowNVrOHgPeyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwODoyNDowNVrOHgbGnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3MDEyMw==", "bodyText": "nit: merge merge --> merge", "url": "https://github.com/trinodb/trino/pull/5524#discussion_r503570123", "createdAt": "2020-10-12T22:44:05Z", "author": {"login": "phd3"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/PlanOptimizers.java", "diffHunk": "@@ -527,20 +527,26 @@ public PlanOptimizers(\n                 new CheckSubqueryNodesAreRewritten(),\n                 new StatsRecordingPlanOptimizer(\n                         optimizerStats,\n-                        new PredicatePushDown(metadata, typeOperators, typeAnalyzer, false, false)),\n-                new IterativeOptimizer(\n-                        ruleStats,\n-                        statsCalculator,\n-                        estimatedExchangesCostCalculator,\n-                        ImmutableSet.<Rule<?>>builder()\n-                                .addAll(columnPruningRules)\n-                                .addAll(projectionPushdownRules)\n-                                .add(new RemoveRedundantIdentityProjections())\n-                                .add(new PushLimitIntoTableScan(metadata))\n-                                .add(new PushPredicateIntoTableScan(metadata, typeOperators, typeAnalyzer))\n-                                .add(new PushSampleIntoTableScan(metadata))\n-                                .add(new PushAggregationIntoTableScan(metadata))\n-                                .build()),\n+                        new PredicatePushDown(metadata, typeOperators, typeAnalyzer, false, false)));\n+\n+        IterativeOptimizer pushIntoTableScanOptimizer = new IterativeOptimizer(\n+                ruleStats,\n+                statsCalculator,\n+                estimatedExchangesCostCalculator,\n+                ImmutableSet.<Rule<?>>builder()\n+                        .addAll(columnPruningRules)\n+                        .addAll(projectionPushdownRules)\n+                        .add(new RemoveRedundantIdentityProjections())\n+                        .add(new PushLimitIntoTableScan(metadata))\n+                        .add(new PushPredicateIntoTableScan(metadata, typeOperators, typeAnalyzer))\n+                        .add(new PushSampleIntoTableScan(metadata))\n+                        .add(new PushAggregationIntoTableScan(metadata))\n+                        .build());\n+        builder.add(pushIntoTableScanOptimizer);\n+        builder.add(new UnaliasSymbolReferences(metadata));\n+        builder.add(pushIntoTableScanOptimizer); // TODO (https://github.com/prestosql/presto/issues/811) merge merge with the above after migrating UnaliasSymbolReferences to rules", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2MDU0MA==", "bodyText": "merge merges? OK", "url": "https://github.com/trinodb/trino/pull/5524#discussion_r503760540", "createdAt": "2020-10-13T08:24:05Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/PlanOptimizers.java", "diffHunk": "@@ -527,20 +527,26 @@ public PlanOptimizers(\n                 new CheckSubqueryNodesAreRewritten(),\n                 new StatsRecordingPlanOptimizer(\n                         optimizerStats,\n-                        new PredicatePushDown(metadata, typeOperators, typeAnalyzer, false, false)),\n-                new IterativeOptimizer(\n-                        ruleStats,\n-                        statsCalculator,\n-                        estimatedExchangesCostCalculator,\n-                        ImmutableSet.<Rule<?>>builder()\n-                                .addAll(columnPruningRules)\n-                                .addAll(projectionPushdownRules)\n-                                .add(new RemoveRedundantIdentityProjections())\n-                                .add(new PushLimitIntoTableScan(metadata))\n-                                .add(new PushPredicateIntoTableScan(metadata, typeOperators, typeAnalyzer))\n-                                .add(new PushSampleIntoTableScan(metadata))\n-                                .add(new PushAggregationIntoTableScan(metadata))\n-                                .build()),\n+                        new PredicatePushDown(metadata, typeOperators, typeAnalyzer, false, false)));\n+\n+        IterativeOptimizer pushIntoTableScanOptimizer = new IterativeOptimizer(\n+                ruleStats,\n+                statsCalculator,\n+                estimatedExchangesCostCalculator,\n+                ImmutableSet.<Rule<?>>builder()\n+                        .addAll(columnPruningRules)\n+                        .addAll(projectionPushdownRules)\n+                        .add(new RemoveRedundantIdentityProjections())\n+                        .add(new PushLimitIntoTableScan(metadata))\n+                        .add(new PushPredicateIntoTableScan(metadata, typeOperators, typeAnalyzer))\n+                        .add(new PushSampleIntoTableScan(metadata))\n+                        .add(new PushAggregationIntoTableScan(metadata))\n+                        .build());\n+        builder.add(pushIntoTableScanOptimizer);\n+        builder.add(new UnaliasSymbolReferences(metadata));\n+        builder.add(pushIntoTableScanOptimizer); // TODO (https://github.com/prestosql/presto/issues/811) merge merge with the above after migrating UnaliasSymbolReferences to rules", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3MDEyMw=="}, "originalCommit": null, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4679, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}