{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MTgyNDA0", "number": 5843, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTo0MDoyNFrOE123VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTo0MDo0OFrOE1237w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTA4ODg0OnYy", "diffSide": "LEFT", "path": "presto-main/src/test/java/io/prestosql/operator/TestAggregationOperator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTo0MDoyNFrOHuXu7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQwODowNDozNVrOHvOgzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM4NTM5MQ==", "bodyText": "@martint was this intentionally like this?\notherwise I guess the getAggregateFunctionImplementation call be removed.", "url": "https://github.com/trinodb/trino/pull/5843#discussion_r518385391", "createdAt": "2020-11-05T21:40:24Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/TestAggregationOperator.java", "diffHunk": "@@ -91,7 +91,7 @@ public void tearDown()\n     public void testMaskWithDirtyNulls()\n     {\n         // Ensures that the operator properly tests for nulls in the mask channel before reading its value\n-        InternalAggregationFunction countBooleanColumn = metadata.getAggregateFunctionImplementation(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI4Mjg5Mg==", "bodyText": "Thanks, remove call already.", "url": "https://github.com/trinodb/trino/pull/5843#discussion_r519282892", "createdAt": "2020-11-08T08:04:35Z", "author": {"login": "brandboat"}, "path": "presto-main/src/test/java/io/prestosql/operator/TestAggregationOperator.java", "diffHunk": "@@ -91,7 +91,7 @@ public void tearDown()\n     public void testMaskWithDirtyNulls()\n     {\n         // Ensures that the operator properly tests for nulls in the mask channel before reading its value\n-        InternalAggregationFunction countBooleanColumn = metadata.getAggregateFunctionImplementation(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM4NTM5MQ=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTA5MDA0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/operator/aggregation/minmaxby/TestMinMaxByAggregation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTo0MDo0NFrOHuXvmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQwODowNDowMFrOHvOf7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM4NTU2Mw==", "bodyText": "remove call to getAggregateFunctionImplementation", "url": "https://github.com/trinodb/trino/pull/5843#discussion_r518385563", "createdAt": "2020-11-05T21:40:44Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/aggregation/minmaxby/TestMinMaxByAggregation.java", "diffHunk": "@@ -86,7 +86,7 @@ public void testMinUnknown()\n                 null,\n                 createBooleansBlock(null, null),\n                 createDoublesBlock(1.0, 2.0));\n-        InternalAggregationFunction unknownValue = METADATA.getAggregateFunctionImplementation(METADATA.resolveFunction(QualifiedName.of(\"min_by\"), fromTypes(DOUBLE, UNKNOWN)));\n+        METADATA.getAggregateFunctionImplementation(METADATA.resolveFunction(QualifiedName.of(\"min_by\"), fromTypes(DOUBLE, UNKNOWN)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI4MjY2OA==", "bodyText": "Thanks, remove call already.", "url": "https://github.com/trinodb/trino/pull/5843#discussion_r519282668", "createdAt": "2020-11-08T08:04:00Z", "author": {"login": "brandboat"}, "path": "presto-main/src/test/java/io/prestosql/operator/aggregation/minmaxby/TestMinMaxByAggregation.java", "diffHunk": "@@ -86,7 +86,7 @@ public void testMinUnknown()\n                 null,\n                 createBooleansBlock(null, null),\n                 createDoublesBlock(1.0, 2.0));\n-        InternalAggregationFunction unknownValue = METADATA.getAggregateFunctionImplementation(METADATA.resolveFunction(QualifiedName.of(\"min_by\"), fromTypes(DOUBLE, UNKNOWN)));\n+        METADATA.getAggregateFunctionImplementation(METADATA.resolveFunction(QualifiedName.of(\"min_by\"), fromTypes(DOUBLE, UNKNOWN)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM4NTU2Mw=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTA5MDM5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/operator/aggregation/minmaxby/TestMinMaxByAggregation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTo0MDo0OFrOHuXvyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQwODowNDozMFrOHvOgsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM4NTYwOQ==", "bodyText": "same here", "url": "https://github.com/trinodb/trino/pull/5843#discussion_r518385609", "createdAt": "2020-11-05T21:40:48Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/aggregation/minmaxby/TestMinMaxByAggregation.java", "diffHunk": "@@ -103,7 +103,7 @@ public void testMaxUnknown()\n                 null,\n                 createBooleansBlock(null, null),\n                 createDoublesBlock(1.0, 2.0));\n-        InternalAggregationFunction unknownValue = METADATA.getAggregateFunctionImplementation(METADATA.resolveFunction(QualifiedName.of(\"max_by\"), fromTypes(DOUBLE, UNKNOWN)));\n+        METADATA.getAggregateFunctionImplementation(METADATA.resolveFunction(QualifiedName.of(\"max_by\"), fromTypes(DOUBLE, UNKNOWN)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI4Mjg2NA==", "bodyText": "Thanks, remove call already.", "url": "https://github.com/trinodb/trino/pull/5843#discussion_r519282864", "createdAt": "2020-11-08T08:04:30Z", "author": {"login": "brandboat"}, "path": "presto-main/src/test/java/io/prestosql/operator/aggregation/minmaxby/TestMinMaxByAggregation.java", "diffHunk": "@@ -103,7 +103,7 @@ public void testMaxUnknown()\n                 null,\n                 createBooleansBlock(null, null),\n                 createDoublesBlock(1.0, 2.0));\n-        InternalAggregationFunction unknownValue = METADATA.getAggregateFunctionImplementation(METADATA.resolveFunction(QualifiedName.of(\"max_by\"), fromTypes(DOUBLE, UNKNOWN)));\n+        METADATA.getAggregateFunctionImplementation(METADATA.resolveFunction(QualifiedName.of(\"max_by\"), fromTypes(DOUBLE, UNKNOWN)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM4NTYwOQ=="}, "originalCommit": null, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4959, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}