{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NTk0ODE0", "number": 4624, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzo1MDoyOFrOETkaQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwODowNjowNFrOETkvew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTU0OTQ2OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/SinglenodeIceberg.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzo1MDoyOFrOG5X7Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODoyNzoyOVrOG5u33g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxNDAyMg==", "bodyText": "is HDP3 an important thing here?", "url": "https://github.com/trinodb/trino/pull/4624#discussion_r462814022", "createdAt": "2020-07-30T07:50:28Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/SinglenodeIceberg.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.environment;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.env.common.AbstractEnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.common.Hadoop;\n+import io.prestosql.tests.product.launcher.env.common.Standard;\n+import io.prestosql.tests.product.launcher.env.common.TestsEnvironment;\n+import io.prestosql.tests.product.launcher.testcontainers.PortBinder;\n+import io.prestosql.tests.product.launcher.testcontainers.SelectedPortWaitStrategy;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+\n+import javax.inject.Inject;\n+\n+import static io.prestosql.tests.product.launcher.env.common.Standard.CONTAINER_PRESTO_ETC;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.utility.MountableFile.forHostPath;\n+\n+@TestsEnvironment\n+public class SinglenodeIceberg\n+        extends AbstractEnvironmentProvider\n+{\n+    private static final int SPARK_THRIFT_PORT = 10213;\n+\n+    private final DockerFiles dockerFiles;\n+    private final PortBinder portBinder;\n+    private final String hadoopImagesVersion;\n+\n+    @Inject\n+    public SinglenodeIceberg(Standard standard, Hadoop hadoop, DockerFiles dockerFiles, EnvironmentOptions environmentOptions, PortBinder portBinder)\n+    {\n+        super(ImmutableList.of(standard, hadoop));\n+        this.dockerFiles = requireNonNull(dockerFiles, \"dockerFiles is null\");\n+        this.portBinder = requireNonNull(portBinder, \"portBinder is null\");\n+        this.hadoopImagesVersion = requireNonNull(environmentOptions.hadoopImagesVersion, \"environmentOptions.hadoopImagesVersion is null\");\n+    }\n+\n+    @Override\n+    protected void extendEnvironment(Environment.Builder builder)\n+    {\n+        builder.configureContainer(\"hadoop-master\", dockerContainer -> {\n+            dockerContainer.setDockerImageName(\"prestodev/hdp3.1-hive:\" + hadoopImagesVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE4OTk4Mg==", "bodyText": "Yes, because the Thrift client Spark uses is not compatible with the other Hadoop images.", "url": "https://github.com/trinodb/trino/pull/4624#discussion_r463189982", "createdAt": "2020-07-30T18:27:29Z", "author": {"login": "aalbu"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/SinglenodeIceberg.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.environment;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.env.common.AbstractEnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.common.Hadoop;\n+import io.prestosql.tests.product.launcher.env.common.Standard;\n+import io.prestosql.tests.product.launcher.env.common.TestsEnvironment;\n+import io.prestosql.tests.product.launcher.testcontainers.PortBinder;\n+import io.prestosql.tests.product.launcher.testcontainers.SelectedPortWaitStrategy;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+\n+import javax.inject.Inject;\n+\n+import static io.prestosql.tests.product.launcher.env.common.Standard.CONTAINER_PRESTO_ETC;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.utility.MountableFile.forHostPath;\n+\n+@TestsEnvironment\n+public class SinglenodeIceberg\n+        extends AbstractEnvironmentProvider\n+{\n+    private static final int SPARK_THRIFT_PORT = 10213;\n+\n+    private final DockerFiles dockerFiles;\n+    private final PortBinder portBinder;\n+    private final String hadoopImagesVersion;\n+\n+    @Inject\n+    public SinglenodeIceberg(Standard standard, Hadoop hadoop, DockerFiles dockerFiles, EnvironmentOptions environmentOptions, PortBinder portBinder)\n+    {\n+        super(ImmutableList.of(standard, hadoop));\n+        this.dockerFiles = requireNonNull(dockerFiles, \"dockerFiles is null\");\n+        this.portBinder = requireNonNull(portBinder, \"portBinder is null\");\n+        this.hadoopImagesVersion = requireNonNull(environmentOptions.hadoopImagesVersion, \"environmentOptions.hadoopImagesVersion is null\");\n+    }\n+\n+    @Override\n+    protected void extendEnvironment(Environment.Builder builder)\n+    {\n+        builder.configureContainer(\"hadoop-master\", dockerContainer -> {\n+            dockerContainer.setDockerImageName(\"prestodev/hdp3.1-hive:\" + hadoopImagesVersion);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxNDAyMg=="}, "originalCommit": null, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTU1MjkzOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/SinglenodeIceberg.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzo1MToyNVrOG5X9Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzo1MToyNVrOG5X9Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxNDU1MA==", "bodyText": "We have iceberg.properties in Hadoop, so this is not \"some iceberg\", it's \"iceberg with Spark\".\nWhat about SinglenodeSparkIceberg ?", "url": "https://github.com/trinodb/trino/pull/4624#discussion_r462814550", "createdAt": "2020-07-30T07:51:25Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/SinglenodeIceberg.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.environment;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.env.common.AbstractEnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.common.Hadoop;\n+import io.prestosql.tests.product.launcher.env.common.Standard;\n+import io.prestosql.tests.product.launcher.env.common.TestsEnvironment;\n+import io.prestosql.tests.product.launcher.testcontainers.PortBinder;\n+import io.prestosql.tests.product.launcher.testcontainers.SelectedPortWaitStrategy;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+\n+import javax.inject.Inject;\n+\n+import static io.prestosql.tests.product.launcher.env.common.Standard.CONTAINER_PRESTO_ETC;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.utility.MountableFile.forHostPath;\n+\n+@TestsEnvironment\n+public class SinglenodeIceberg", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTU2MTY3OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/SinglenodeIceberg.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzo1NDowMlrOG5YCuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzo1NDowMlrOG5YCuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxNTkyOA==", "bodyText": ":version", "url": "https://github.com/trinodb/trino/pull/4624#discussion_r462815928", "createdAt": "2020-07-30T07:54:02Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/SinglenodeIceberg.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.environment;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.env.common.AbstractEnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.common.Hadoop;\n+import io.prestosql.tests.product.launcher.env.common.Standard;\n+import io.prestosql.tests.product.launcher.env.common.TestsEnvironment;\n+import io.prestosql.tests.product.launcher.testcontainers.PortBinder;\n+import io.prestosql.tests.product.launcher.testcontainers.SelectedPortWaitStrategy;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+\n+import javax.inject.Inject;\n+\n+import static io.prestosql.tests.product.launcher.env.common.Standard.CONTAINER_PRESTO_ETC;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.utility.MountableFile.forHostPath;\n+\n+@TestsEnvironment\n+public class SinglenodeIceberg\n+        extends AbstractEnvironmentProvider\n+{\n+    private static final int SPARK_THRIFT_PORT = 10213;\n+\n+    private final DockerFiles dockerFiles;\n+    private final PortBinder portBinder;\n+    private final String hadoopImagesVersion;\n+\n+    @Inject\n+    public SinglenodeIceberg(Standard standard, Hadoop hadoop, DockerFiles dockerFiles, EnvironmentOptions environmentOptions, PortBinder portBinder)\n+    {\n+        super(ImmutableList.of(standard, hadoop));\n+        this.dockerFiles = requireNonNull(dockerFiles, \"dockerFiles is null\");\n+        this.portBinder = requireNonNull(portBinder, \"portBinder is null\");\n+        this.hadoopImagesVersion = requireNonNull(environmentOptions.hadoopImagesVersion, \"environmentOptions.hadoopImagesVersion is null\");\n+    }\n+\n+    @Override\n+    protected void extendEnvironment(Environment.Builder builder)\n+    {\n+        builder.configureContainer(\"hadoop-master\", dockerContainer -> {\n+            dockerContainer.setDockerImageName(\"prestodev/hdp3.1-hive:\" + hadoopImagesVersion);\n+            dockerContainer.withCreateContainerCmdModifier(createContainerCmd ->\n+                    createContainerCmd.withEntrypoint(ImmutableList.of((\"/docker/presto-product-tests/conf/environment/singlenode-hdp3/hadoop-entrypoint.sh\"))));\n+        });\n+\n+        builder.configureContainer(\"presto-master\", container -> container\n+                .withCopyFileToContainer(\n+                        forHostPath(dockerFiles.getDockerFilesHostPath(\"conf/environment/singlenode-iceberg/iceberg.properties\")),\n+                        CONTAINER_PRESTO_ETC + \"/catalog/iceberg.properties\"));\n+\n+        DockerContainer spark = createSpark();\n+        // Spark needs the HMS to be up before it starts\n+        builder.configureContainer(\"hadoop-master\", spark::dependsOn);\n+\n+        builder.addContainer(\"spark\", spark);\n+    }\n+\n+    @SuppressWarnings(\"resource\")\n+    private DockerContainer createSpark()\n+    {\n+        DockerContainer container = new DockerContainer(\"prestodev/spark3.0.0-iceberg\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTU2MzY1OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/SinglenodeIceberg.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzo1NDozM1rOG5YD_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODozMTo0NVrOG5vBEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxNjI1NQ==", "bodyText": "it's baked into the container.. maybe should be removed from the dockerfile?", "url": "https://github.com/trinodb/trino/pull/4624#discussion_r462816255", "createdAt": "2020-07-30T07:54:33Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/SinglenodeIceberg.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.environment;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.env.common.AbstractEnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.common.Hadoop;\n+import io.prestosql.tests.product.launcher.env.common.Standard;\n+import io.prestosql.tests.product.launcher.env.common.TestsEnvironment;\n+import io.prestosql.tests.product.launcher.testcontainers.PortBinder;\n+import io.prestosql.tests.product.launcher.testcontainers.SelectedPortWaitStrategy;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+\n+import javax.inject.Inject;\n+\n+import static io.prestosql.tests.product.launcher.env.common.Standard.CONTAINER_PRESTO_ETC;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.utility.MountableFile.forHostPath;\n+\n+@TestsEnvironment\n+public class SinglenodeIceberg\n+        extends AbstractEnvironmentProvider\n+{\n+    private static final int SPARK_THRIFT_PORT = 10213;\n+\n+    private final DockerFiles dockerFiles;\n+    private final PortBinder portBinder;\n+    private final String hadoopImagesVersion;\n+\n+    @Inject\n+    public SinglenodeIceberg(Standard standard, Hadoop hadoop, DockerFiles dockerFiles, EnvironmentOptions environmentOptions, PortBinder portBinder)\n+    {\n+        super(ImmutableList.of(standard, hadoop));\n+        this.dockerFiles = requireNonNull(dockerFiles, \"dockerFiles is null\");\n+        this.portBinder = requireNonNull(portBinder, \"portBinder is null\");\n+        this.hadoopImagesVersion = requireNonNull(environmentOptions.hadoopImagesVersion, \"environmentOptions.hadoopImagesVersion is null\");\n+    }\n+\n+    @Override\n+    protected void extendEnvironment(Environment.Builder builder)\n+    {\n+        builder.configureContainer(\"hadoop-master\", dockerContainer -> {\n+            dockerContainer.setDockerImageName(\"prestodev/hdp3.1-hive:\" + hadoopImagesVersion);\n+            dockerContainer.withCreateContainerCmdModifier(createContainerCmd ->\n+                    createContainerCmd.withEntrypoint(ImmutableList.of((\"/docker/presto-product-tests/conf/environment/singlenode-hdp3/hadoop-entrypoint.sh\"))));\n+        });\n+\n+        builder.configureContainer(\"presto-master\", container -> container\n+                .withCopyFileToContainer(\n+                        forHostPath(dockerFiles.getDockerFilesHostPath(\"conf/environment/singlenode-iceberg/iceberg.properties\")),\n+                        CONTAINER_PRESTO_ETC + \"/catalog/iceberg.properties\"));\n+\n+        DockerContainer spark = createSpark();\n+        // Spark needs the HMS to be up before it starts\n+        builder.configureContainer(\"hadoop-master\", spark::dependsOn);\n+\n+        builder.addContainer(\"spark\", spark);\n+    }\n+\n+    @SuppressWarnings(\"resource\")\n+    private DockerContainer createSpark()\n+    {\n+        DockerContainer container = new DockerContainer(\"prestodev/spark3.0.0-iceberg\")\n+                .withEnv(\"HADOOP_USER_NAME\", \"hive\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MjMzNw==", "bodyText": "Not sure what you mean, this is not in the Dockerfile.", "url": "https://github.com/trinodb/trino/pull/4624#discussion_r463192337", "createdAt": "2020-07-30T18:31:45Z", "author": {"login": "aalbu"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/SinglenodeIceberg.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.environment;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.env.common.AbstractEnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.common.Hadoop;\n+import io.prestosql.tests.product.launcher.env.common.Standard;\n+import io.prestosql.tests.product.launcher.env.common.TestsEnvironment;\n+import io.prestosql.tests.product.launcher.testcontainers.PortBinder;\n+import io.prestosql.tests.product.launcher.testcontainers.SelectedPortWaitStrategy;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+\n+import javax.inject.Inject;\n+\n+import static io.prestosql.tests.product.launcher.env.common.Standard.CONTAINER_PRESTO_ETC;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.utility.MountableFile.forHostPath;\n+\n+@TestsEnvironment\n+public class SinglenodeIceberg\n+        extends AbstractEnvironmentProvider\n+{\n+    private static final int SPARK_THRIFT_PORT = 10213;\n+\n+    private final DockerFiles dockerFiles;\n+    private final PortBinder portBinder;\n+    private final String hadoopImagesVersion;\n+\n+    @Inject\n+    public SinglenodeIceberg(Standard standard, Hadoop hadoop, DockerFiles dockerFiles, EnvironmentOptions environmentOptions, PortBinder portBinder)\n+    {\n+        super(ImmutableList.of(standard, hadoop));\n+        this.dockerFiles = requireNonNull(dockerFiles, \"dockerFiles is null\");\n+        this.portBinder = requireNonNull(portBinder, \"portBinder is null\");\n+        this.hadoopImagesVersion = requireNonNull(environmentOptions.hadoopImagesVersion, \"environmentOptions.hadoopImagesVersion is null\");\n+    }\n+\n+    @Override\n+    protected void extendEnvironment(Environment.Builder builder)\n+    {\n+        builder.configureContainer(\"hadoop-master\", dockerContainer -> {\n+            dockerContainer.setDockerImageName(\"prestodev/hdp3.1-hive:\" + hadoopImagesVersion);\n+            dockerContainer.withCreateContainerCmdModifier(createContainerCmd ->\n+                    createContainerCmd.withEntrypoint(ImmutableList.of((\"/docker/presto-product-tests/conf/environment/singlenode-hdp3/hadoop-entrypoint.sh\"))));\n+        });\n+\n+        builder.configureContainer(\"presto-master\", container -> container\n+                .withCopyFileToContainer(\n+                        forHostPath(dockerFiles.getDockerFilesHostPath(\"conf/environment/singlenode-iceberg/iceberg.properties\")),\n+                        CONTAINER_PRESTO_ETC + \"/catalog/iceberg.properties\"));\n+\n+        DockerContainer spark = createSpark();\n+        // Spark needs the HMS to be up before it starts\n+        builder.configureContainer(\"hadoop-master\", spark::dependsOn);\n+\n+        builder.addContainer(\"spark\", spark);\n+    }\n+\n+    @SuppressWarnings(\"resource\")\n+    private DockerContainer createSpark()\n+    {\n+        DockerContainer container = new DockerContainer(\"prestodev/spark3.0.0-iceberg\")\n+                .withEnv(\"HADOOP_USER_NAME\", \"hive\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxNjI1NQ=="}, "originalCommit": null, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTU2Njg0OnYy", "diffSide": "RIGHT", "path": "presto-product-tests/bin/product-tests-suite-7-non-generic.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzo1NToyNlrOG5YF7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODozMzoyNVrOG5vECg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxNjc1MQ==", "bodyText": "Why exclude storage formats?", "url": "https://github.com/trinodb/trino/pull/4624#discussion_r462816751", "createdAt": "2020-07-30T07:55:26Z", "author": {"login": "findepi"}, "path": "presto-product-tests/bin/product-tests-suite-7-non-generic.sh", "diffHunk": "@@ -30,6 +30,11 @@ presto-product-tests-launcher/bin/run-launcher test run \\\n     -- -g sqlserver \\\n     || suite_exit_code=1\n \n+presto-product-tests-launcher/bin/run-launcher test run \\\n+    --environment singlenode-iceberg \\\n+    -- -g iceberg -x storage_formats \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MzA5OA==", "bodyText": "They are run somewhere else (suite-2).", "url": "https://github.com/trinodb/trino/pull/4624#discussion_r463193098", "createdAt": "2020-07-30T18:33:25Z", "author": {"login": "aalbu"}, "path": "presto-product-tests/bin/product-tests-suite-7-non-generic.sh", "diffHunk": "@@ -30,6 +30,11 @@ presto-product-tests-launcher/bin/run-launcher test run \\\n     -- -g sqlserver \\\n     || suite_exit_code=1\n \n+presto-product-tests-launcher/bin/run-launcher test run \\\n+    --environment singlenode-iceberg \\\n+    -- -g iceberg -x storage_formats \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxNjc1MQ=="}, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTU3NDEwOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/iceberg/TestIcebergBasic.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzo1NzoyN1rOG5YKYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzo1NzoyN1rOG5YKYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxNzg4OA==", "bodyText": "Use io.prestosql.tempto.assertions.QueryAssert#assertThat(io.prestosql.tempto.query.QueryResult)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    QueryResult sparkQueryResult = onSpark().executeQuery(format(\"SELECT * FROM %s\", ICEBERG_TABLE_NAME));\n          \n          \n            \n                    assertThat(sparkQueryResult).contains(ROW1);\n          \n          \n            \n                    assertThat(onSpark().executeQuery(format(\"SELECT * FROM %s\", ICEBERG_TABLE_NAME)))\n          \n          \n            \n                            .containsOnly(ROW1);", "url": "https://github.com/trinodb/trino/pull/4624#discussion_r462817888", "createdAt": "2020-07-30T07:57:27Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/iceberg/TestIcebergBasic.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.iceberg;\n+\n+import io.prestosql.tempto.AfterTestWithContext;\n+import io.prestosql.tempto.BeforeTestWithContext;\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.assertions.QueryAssert;\n+import io.prestosql.tempto.query.QueryResult;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tests.TestGroups.ICEBERG;\n+import static io.prestosql.tests.TestGroups.PROFILE_SPECIFIC_TESTS;\n+import static io.prestosql.tests.utils.QueryExecutors.onPresto;\n+import static io.prestosql.tests.utils.QueryExecutors.onSpark;\n+import static java.lang.String.format;\n+\n+public class TestIcebergBasic\n+        extends ProductTest\n+{\n+    // see spark-defaults.conf\n+    private static final String ICEBERG_CATALOG = \"iceberg_test\";\n+    private static final String PRESTO_CATALOG = \"iceberg\";\n+    private static final String TABLE_NAME = \"test_iceberg_basic\";\n+    private static final String ICEBERG_TABLE_NAME = format(\"%s.default.%s\", ICEBERG_CATALOG, TABLE_NAME);\n+    private static final String PRESTO_TABLE_NAME = format(\"%s.default.%s\", PRESTO_CATALOG, TABLE_NAME);\n+\n+    private static final QueryAssert.Row ROW1 = row(42L);\n+\n+    @BeforeTestWithContext\n+    @AfterTestWithContext\n+    public void dropTestTables()\n+    {\n+        onPresto().executeQuery(format(\"DROP TABLE IF EXISTS %s\", PRESTO_TABLE_NAME));\n+    }\n+\n+    @Test(groups = {ICEBERG, PROFILE_SPECIFIC_TESTS})\n+    public void testCompatibility()\n+    {\n+        onSpark().executeQuery(format(\"CREATE TABLE %s (id BIGINT) USING ICEBERG\", ICEBERG_TABLE_NAME));\n+        onSpark().executeQuery(format(\"INSERT INTO %s VALUES (42)\", ICEBERG_TABLE_NAME));\n+\n+        QueryResult sparkQueryResult = onSpark().executeQuery(format(\"SELECT * FROM %s\", ICEBERG_TABLE_NAME));\n+        assertThat(sparkQueryResult).contains(ROW1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTU3NjUxOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/iceberg/TestIcebergBasic.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzo1ODowM1rOG5YL0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzo1ODowM1rOG5YL0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxODI1OA==", "bodyText": "inline", "url": "https://github.com/trinodb/trino/pull/4624#discussion_r462818258", "createdAt": "2020-07-30T07:58:03Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/iceberg/TestIcebergBasic.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.iceberg;\n+\n+import io.prestosql.tempto.AfterTestWithContext;\n+import io.prestosql.tempto.BeforeTestWithContext;\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.assertions.QueryAssert;\n+import io.prestosql.tempto.query.QueryResult;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tests.TestGroups.ICEBERG;\n+import static io.prestosql.tests.TestGroups.PROFILE_SPECIFIC_TESTS;\n+import static io.prestosql.tests.utils.QueryExecutors.onPresto;\n+import static io.prestosql.tests.utils.QueryExecutors.onSpark;\n+import static java.lang.String.format;\n+\n+public class TestIcebergBasic\n+        extends ProductTest\n+{\n+    // see spark-defaults.conf\n+    private static final String ICEBERG_CATALOG = \"iceberg_test\";\n+    private static final String PRESTO_CATALOG = \"iceberg\";\n+    private static final String TABLE_NAME = \"test_iceberg_basic\";\n+    private static final String ICEBERG_TABLE_NAME = format(\"%s.default.%s\", ICEBERG_CATALOG, TABLE_NAME);\n+    private static final String PRESTO_TABLE_NAME = format(\"%s.default.%s\", PRESTO_CATALOG, TABLE_NAME);\n+\n+    private static final QueryAssert.Row ROW1 = row(42L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTU3ODU2OnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/iceberg/TestIcebergBasic.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzo1ODozOVrOG5YNHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzo1ODozOVrOG5YNHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxODU5MQ==", "bodyText": "SPARK_TABLE_NAME?", "url": "https://github.com/trinodb/trino/pull/4624#discussion_r462818591", "createdAt": "2020-07-30T07:58:39Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/iceberg/TestIcebergBasic.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.iceberg;\n+\n+import io.prestosql.tempto.AfterTestWithContext;\n+import io.prestosql.tempto.BeforeTestWithContext;\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.assertions.QueryAssert;\n+import io.prestosql.tempto.query.QueryResult;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tests.TestGroups.ICEBERG;\n+import static io.prestosql.tests.TestGroups.PROFILE_SPECIFIC_TESTS;\n+import static io.prestosql.tests.utils.QueryExecutors.onPresto;\n+import static io.prestosql.tests.utils.QueryExecutors.onSpark;\n+import static java.lang.String.format;\n+\n+public class TestIcebergBasic\n+        extends ProductTest\n+{\n+    // see spark-defaults.conf\n+    private static final String ICEBERG_CATALOG = \"iceberg_test\";\n+    private static final String PRESTO_CATALOG = \"iceberg\";\n+    private static final String TABLE_NAME = \"test_iceberg_basic\";\n+    private static final String ICEBERG_TABLE_NAME = format(\"%s.default.%s\", ICEBERG_CATALOG, TABLE_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTU3ODkyOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/iceberg/TestIcebergBasic.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzo1ODo0NVrOG5YNUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzo1ODo0NVrOG5YNUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxODY0MA==", "bodyText": "SPARK_CATALOG", "url": "https://github.com/trinodb/trino/pull/4624#discussion_r462818640", "createdAt": "2020-07-30T07:58:45Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/iceberg/TestIcebergBasic.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.iceberg;\n+\n+import io.prestosql.tempto.AfterTestWithContext;\n+import io.prestosql.tempto.BeforeTestWithContext;\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.assertions.QueryAssert;\n+import io.prestosql.tempto.query.QueryResult;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tests.TestGroups.ICEBERG;\n+import static io.prestosql.tests.TestGroups.PROFILE_SPECIFIC_TESTS;\n+import static io.prestosql.tests.utils.QueryExecutors.onPresto;\n+import static io.prestosql.tests.utils.QueryExecutors.onSpark;\n+import static java.lang.String.format;\n+\n+public class TestIcebergBasic\n+        extends ProductTest\n+{\n+    // see spark-defaults.conf\n+    private static final String ICEBERG_CATALOG = \"iceberg_test\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTU4NDQyOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/resources/tempto-configuration.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwODowMDoxMlrOG5YQlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwODowMDoxMlrOG5YQlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxOTQ3OA==", "bodyText": "use 2 space ident for consistency with the rest of the file\n(we can change in separate commit/pr)", "url": "https://github.com/trinodb/trino/pull/4624#discussion_r462819478", "createdAt": "2020-07-30T08:00:12Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/resources/tempto-configuration.yaml", "diffHunk": "@@ -123,6 +123,19 @@ databases:\n     jdbc_pooling: true\n     table_manager_type: jdbc\n \n+  spark:\n+      host: spark", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTYwMzc5OnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/resources/tempto-configuration.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwODowNjowNFrOG5Ycow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOToxNDoxOVrOG5wX8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyMjU2Mw==", "bodyText": "used?", "url": "https://github.com/trinodb/trino/pull/4624#discussion_r462822563", "createdAt": "2020-07-30T08:06:04Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/resources/tempto-configuration.yaml", "diffHunk": "@@ -123,6 +123,19 @@ databases:\n     jdbc_pooling: true\n     table_manager_type: jdbc\n \n+  spark:\n+      host: spark\n+      jdbc_driver_class: org.apache.hive.jdbc.HiveDriver\n+      jdbc_url: jdbc:hive2://${databases.spark.host}:10213\n+      jdbc_user: hive\n+      jdbc_password: na\n+      jdbc_pooling: false\n+      schema: default\n+      prepare_statement:\n+          - USE ${databases.spark.schema}\n+      table_manager_type: jdbc\n+      warehouse_directory_path: /user/hive/warehouse", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIxNDU3OA==", "bodyText": "Not at this point, I'll remove.", "url": "https://github.com/trinodb/trino/pull/4624#discussion_r463214578", "createdAt": "2020-07-30T19:14:19Z", "author": {"login": "aalbu"}, "path": "presto-product-tests/src/main/resources/tempto-configuration.yaml", "diffHunk": "@@ -123,6 +123,19 @@ databases:\n     jdbc_pooling: true\n     table_manager_type: jdbc\n \n+  spark:\n+      host: spark\n+      jdbc_driver_class: org.apache.hive.jdbc.HiveDriver\n+      jdbc_url: jdbc:hive2://${databases.spark.host}:10213\n+      jdbc_user: hive\n+      jdbc_password: na\n+      jdbc_pooling: false\n+      schema: default\n+      prepare_statement:\n+          - USE ${databases.spark.schema}\n+      table_manager_type: jdbc\n+      warehouse_directory_path: /user/hive/warehouse", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyMjU2Mw=="}, "originalCommit": null, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3541, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}