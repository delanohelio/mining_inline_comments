{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyNTk0NjQ3", "number": 6378, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMTo1Njo0N1rOFHW8XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMTo1Njo0N1rOFHW8XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjYwMjUzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMTo1Njo0N1rOIIz5NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMTo1Njo0N1rOIIz5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEwOTc0OQ==", "bodyText": "field.getName().orElseThrow() can be extracted to a variable", "url": "https://github.com/trinodb/trino/pull/6378#discussion_r546109749", "createdAt": "2020-12-18T21:56:47Z", "author": {"login": "ssheikin"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1278,19 +1278,16 @@ private void analyzeFiltersAndMasks(Table table, QualifiedObjectName name, Optio\n                     .withRelationType(RelationId.anonymous(), new RelationType(fields))\n                     .build();\n \n-            Set<String> allColumns = fields.stream()\n-                    .flatMap(field -> field.getName().stream())\n-                    .collect(toImmutableSet());\n-\n-            Set<String> visibleColumns = filterColumns(name, allColumns);\n-\n             ImmutableMap.Builder<Field, List<ViewExpression>> columnMasks = ImmutableMap.builder();\n             for (Field field : fields) {\n-                if (field.getName().isPresent() && visibleColumns.contains(field.getName().orElseThrow())) {\n+                if (field.getName().isPresent()) {\n                     List<ViewExpression> masks = accessControl.getColumnMasks(session.toSecurityContext(), name, field.getName().get(), field.getType());\n-                    columnMasks.put(field, masks);\n \n-                    masks.forEach(mask -> analyzeColumnMask(session.getIdentity().getUser(), table, name, field, accessControlScope, mask));\n+                    if (!masks.isEmpty() && checkCanSelectFromColumn(name, field.getName().orElseThrow())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "148fb0281b74b44373e6ce1547d8260d18377c76"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4377, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}