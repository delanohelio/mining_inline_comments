{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3ODA0MTkw", "number": 5181, "title": "128 bit decimal improvements once more", "bodyText": "Another batch of 128-bit decimal optimizations\nBenchmarks (BenchmarkDecimalOperators class):\n\n\n\nBenchmark\nthroughput before\nthroughput after\n\n\n\n\ns2 + l2\n557\n705\n\n\nl1 + l2\n571\n601\n\n\nl1 + l2 + l3 + l4\n240\n262\n\n\ns2 + l3 + l1 + s4\n251\n307\n\n\ns2 + lz3 + lz1 + s4\n230\n285\n\n\ns1 / s3\n265\n334\n\n\ns2 / l1\n391\n497\n\n\nl1 / s2\n279\n354\n\n\ns3 / l1\n224\n294\n\n\nl2 / l3\n186\n222\n\n\nl2 / l4 / l4 / l4\n113\n128\n\n\nl2 / s4 / s4 / s4\n110\n140\n\n\ns2 % l2\n443\n578\n\n\nl3 % s3\n272\n358\n\n\ns4 % l3\n320\n379\n\n\nl2 % l3\n260\n299\n\n\nl2 % l3 % l4 % l1\n91\n113\n\n\ns3 * s4\n586\n1153\n\n\nl2 * s2\n716\n855\n\n\nl2 * s2 * s5 * s6\n329\n448\n\n\ns1 * l2\n713\n865", "createdAt": "2020-09-16T07:55:45Z", "url": "https://github.com/trinodb/trino/pull/5181", "merged": true, "mergeCommit": {"oid": "d5fb0f1094effb69757257ec0708dfd54ceaf311"}, "closed": true, "closedAt": "2020-10-22T08:25:14Z", "author": {"login": "skrzypo987"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdKD_ClgFqTQ5MTM4Mjc5NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUp6nRgBqjM5MDI4MzMzNTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMzgyNzk0", "url": "https://github.com/trinodb/trino/pull/5181#pullrequestreview-491382794", "createdAt": "2020-09-18T11:30:37Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTozMDozOFrOHUJO-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTozMzozNFrOHUJV8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg4NDg1OQ==", "bodyText": "This looks like a specialization of multiply(Slice left, Slice right, Slice result). Am I right?\nIf so can we somehow use specialization in the implementation of generic multiply(Slice left, Slice right, Slice result)?", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r490884859", "createdAt": "2020-09-18T11:30:38Z", "author": {"login": "kokosing"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -481,6 +495,108 @@ public static void multiply(Slice left, Slice right, Slice result)\n         pack(result, (int) z0, (int) z1, (int) z2, (int) z3, leftNegative != rightNegative);\n     }\n \n+    public static void multiply(Slice left, long right, Slice result)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg4NTQ0Nw==", "bodyText": "Do you you think it makes sense to extract refactors to separate preparatory commit before this one? That way it will be clear to see what kind of new tests case were added.", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r490885447", "createdAt": "2020-09-18T11:31:38Z", "author": {"login": "kokosing"}, "path": "presto-spi/src/test/java/io/prestosql/spi/type/TestUnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -768,4 +772,43 @@ private static Slice negate(Slice slice)\n         }\n         return ints;\n     }\n+\n+    private static boolean isShort(BigInteger value)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg4NjI3NQ==", "bodyText": "why not multiply(tenToScale, value)?", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r490886275", "createdAt": "2020-09-18T11:32:57Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/type/DecimalCasts.java", "diffHunk": "@@ -223,7 +223,7 @@ public static long bigintToShortDecimal(long value, long precision, long scale,\n     public static Slice bigintToLongDecimal(long value, long precision, long scale, BigInteger tenToScale)\n     {\n         try {\n-            Slice decimal = multiply(unscaledDecimal(value), unscaledDecimal(tenToScale));\n+            Slice decimal = multiply(unscaledDecimal(tenToScale), value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg4NjY0Mg==", "bodyText": "refactor in separate commit?", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r490886642", "createdAt": "2020-09-18T11:33:34Z", "author": {"login": "kokosing"}, "path": "presto-spi/src/test/java/io/prestosql/spi/type/TestUnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -811,4 +811,13 @@ private static void assertMultiply(long a, long b, long result)\n     {\n         assertMultiply(a, b, BigInteger.valueOf(result));\n     }\n+\n+    private static void assertRescale(Slice decimal, int rescale, Slice expected)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNjAzMTA1", "url": "https://github.com/trinodb/trino/pull/5181#pullrequestreview-491603105", "createdAt": "2020-09-18T16:12:33Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjoxMjozM1rOHUTffA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjoyNTo1NlrOHUT7-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1MjkyNA==", "bodyText": "unscaledDecimal and others - method names should start with imperative", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r491052924", "createdAt": "2020-09-18T16:12:33Z", "author": {"login": "iirekm"}, "path": "presto-main/src/main/java/io/prestosql/type/DecimalCasts.java", "diffHunk": "@@ -339,7 +339,7 @@ public static long smallintToShortDecimal(long value, long precision, long scale\n     public static Slice smallintToLongDecimal(long value, long precision, long scale, BigInteger tenToScale)\n     {\n         try {\n-            Slice decimal = multiply(unscaledDecimal(value), unscaledDecimal(tenToScale));\n+            Slice decimal = multiply(unscaledDecimal(tenToScale), value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1NjAwMw==", "bodyText": "copy and paste, somebody fixes an issue in one place, forgets another and we have a bug; generalize the methods, or if not possible (eg would hurt performance), write a script which generates this copy and paste", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r491056003", "createdAt": "2020-09-18T16:18:20Z", "author": {"login": "iirekm"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -481,6 +562,172 @@ public static void multiply(Slice left, Slice right, Slice result)\n         pack(result, (int) z0, (int) z1, (int) z2, (int) z3, leftNegative != rightNegative);\n     }\n \n+    public static void multiply(Slice left, long right, Slice result)\n+    {\n+        checkArgument(result.length() == NUMBER_OF_LONGS * Long.BYTES);\n+\n+        long l0 = toUnsignedLong(getInt(left, 0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1NjIxNg==", "bodyText": "no explanation how it all works, it's very hard to decipher it from looking at code", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r491056216", "createdAt": "2020-09-18T16:18:46Z", "author": {"login": "iirekm"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -481,6 +562,172 @@ public static void multiply(Slice left, Slice right, Slice result)\n         pack(result, (int) z0, (int) z1, (int) z2, (int) z3, leftNegative != rightNegative);\n     }\n \n+    public static void multiply(Slice left, long right, Slice result)\n+    {\n+        checkArgument(result.length() == NUMBER_OF_LONGS * Long.BYTES);\n+\n+        long l0 = toUnsignedLong(getInt(left, 0));\n+        long l1 = toUnsignedLong(getInt(left, 1));\n+        long l2 = toUnsignedLong(getInt(left, 2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1NzkzNg==", "bodyText": "why not javadoc?\n\nsimilarly - copy & paste to generalize or generate", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r491057936", "createdAt": "2020-09-18T16:21:53Z", "author": {"login": "iirekm"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -239,13 +271,41 @@ else if (rescaleFactor > 0) {\n             if (rescaleFactor >= POWERS_OF_TEN.length) {\n                 throwOverflowException();\n             }\n-            multiply(decimal, POWERS_OF_TEN[rescaleFactor], result);\n+            shiftLeftBy10(decimal, rescaleFactor, result);\n         }\n         else {\n             scaleDownTruncate(decimal, -rescaleFactor, result);\n         }\n     }\n \n+    // Multiplies by 10^rescaleFactor. Only positive rescaleFactor values are allowed\n+    private static void shiftLeftBy10(Slice decimal, int rescaleFactor, Slice result)\n+    {\n+        if (rescaleFactor <= MAX_POWER_OF_TEN_INT) {\n+            multiply(decimal, (int) longTenToNth(rescaleFactor), result);\n+        }\n+        else if (rescaleFactor <= MAX_POWER_OF_TEN_LONG) {\n+            multiply(decimal, longTenToNth(rescaleFactor), result);\n+        }\n+        else {\n+            multiply(POWERS_OF_TEN[rescaleFactor], decimal, result);\n+        }\n+    }\n+\n+    // Multiplies by 10^rescaleFactor. Only positive rescaleFactor values are allowed", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1ODg3OA==", "bodyText": "according to \"clean code\" method should not have more than 3 params", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r491058878", "createdAt": "2020-09-18T16:23:32Z", "author": {"login": "iirekm"}, "path": "presto-main/src/main/java/io/prestosql/type/DecimalOperators.java", "diffHunk": "@@ -124,13 +124,32 @@ public static Slice addLongLongLong(Slice a, Slice b, int rescale, boolean left)\n     @UsedByGeneratedCode\n     public static Slice addShortLongLong(long a, Slice b, int rescale, boolean left)\n     {\n-        return internalAddLongLongLong(unscaledDecimal(a), b, rescale, left);\n+        return addLongShortLong(b, a, rescale, !left);\n     }\n \n     @UsedByGeneratedCode\n-    public static Slice addLongShortLong(Slice a, long b, int rescale, boolean left)\n+    public static Slice addLongShortLong(Slice a, long b, int rescale, boolean rescaleLeft)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1OTc5Nw==", "bodyText": "missing blank line", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r491059797", "createdAt": "2020-09-18T16:25:10Z", "author": {"login": "iirekm"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -69,6 +69,14 @@\n      */\n     private static final int[] POWERS_OF_FIVES_INT = new int[MAX_POWER_OF_FIVE_INT + 1];\n \n+    /**\n+     * 5^27 fits in 2^31.\n+     */\n+    private static final int MAX_POWER_OF_FIVE_LONG = 27;\n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA2MDA2OQ==", "bodyText": "check not null", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r491060069", "createdAt": "2020-09-18T16:25:39Z", "author": {"login": "iirekm"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -481,6 +562,172 @@ public static void multiply(Slice left, Slice right, Slice result)\n         pack(result, (int) z0, (int) z1, (int) z2, (int) z3, leftNegative != rightNegative);\n     }\n \n+    public static void multiply(Slice left, long right, Slice result)\n+    {\n+        checkArgument(result.length() == NUMBER_OF_LONGS * Long.BYTES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA2MDIxNg==", "bodyText": "check not null", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r491060216", "createdAt": "2020-09-18T16:25:56Z", "author": {"login": "iirekm"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -574,6 +821,115 @@ public static void multiply256(Slice left, Slice right, Slice result)\n         setRawInt(result, 7, (int) z7);\n     }\n \n+    public static void multiply256(Slice left, long right, Slice result)\n+    {\n+        checkArgument(result.length() >= NUMBER_OF_LONGS * Long.BYTES * 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 311}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNjEzNDc4", "url": "https://github.com/trinodb/trino/pull/5181#pullrequestreview-511613478", "createdAt": "2020-10-19T10:16:33Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMDoxNjozM1rOHkHcRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMDoyMzowMlrOHkHquA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYzMjcxMA==", "bodyText": "Can we extract a method from public static void multiply(Slice left, Slice right, Slice result) which we could use in implementation of multiply(Slice left, long right, Slice result) and multiply(long left, long right, Slice result)?\nI am bit concerned of amount of complex code that was copied.", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r507632710", "createdAt": "2020-10-19T10:16:33Z", "author": {"login": "kokosing"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -481,6 +495,108 @@ public static void multiply(Slice left, Slice right, Slice result)\n         pack(result, (int) z0, (int) z1, (int) z2, (int) z3, leftNegative != rightNegative);\n     }\n \n+    public static void multiply(Slice left, long right, Slice result)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg4NDg1OQ=="}, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYzNjQwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static void shiftLeftBy5(int[] value, int shift)\n          \n          \n            \n                private static void shiftLeftBy5Desctrutive(int[] value, int shift)\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r507636408", "createdAt": "2020-10-19T10:23:02Z", "author": {"login": "kokosing"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -1441,16 +1437,16 @@ private static void divide(long dividendLow, long dividendHigh, int dividendScal\n     /**\n      * Value must be a 256-bit slice\n      */\n-    private static void shiftLeftBy5(Slice value, int shift)\n+    private static void shiftLeftBy5(int[] value, int shift)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 155}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyNDkyMDg2", "url": "https://github.com/trinodb/trino/pull/5181#pullrequestreview-512492086", "createdAt": "2020-10-20T09:08:13Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOTowODoxM1rOHkyV0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOTozOTo0OFrOHkzpwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMzNTU2OA==", "bodyText": "static import?", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r508335568", "createdAt": "2020-10-20T09:08:13Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -480,6 +494,108 @@ public static void multiply(Slice left, Slice right, Slice result)\n         pack(result, (int) z0, (int) z1, (int) z2, (int) z3, leftNegative != rightNegative);\n     }\n \n+    public static void multiply(Slice left, long right, Slice result)\n+    {\n+        checkArgument(result.length() == NUMBER_OF_LONGS * Long.BYTES);\n+\n+        long l0 = toUnsignedLong(getInt(left, 0));\n+        long l1 = toUnsignedLong(getInt(left, 1));\n+        long l2 = toUnsignedLong(getInt(left, 2));\n+        int l3raw = getRawInt(left, 3);\n+        boolean leftNegative = isNegative(l3raw);\n+        long l3 = toUnsignedLong(unpackUnsignedInt(l3raw));\n+\n+        boolean rightNegative = right < 0;\n+        right = Math.abs(right);\n+        long r0 = right & LOW_32_BITS;\n+        long r1 = right >>> 32;\n+\n+        // the combinations below definitely result in an overflow\n+        if (r1 != 0 && l3 != 0) {\n+            throwOverflowException();\n+        }\n+\n+        long z0 = 0;\n+        long z1 = 0;\n+        long z2 = 0;\n+        long z3 = 0;\n+\n+        if (r0 != 0) {\n+            long accumulator = r0 * l0;\n+            z0 = accumulator & LOW_32_BITS;\n+            accumulator = (accumulator >>> 32) + l1 * r0;\n+\n+            z1 = accumulator & LOW_32_BITS;\n+            accumulator = (accumulator >>> 32) + l2 * r0;\n+\n+            z2 = accumulator & LOW_32_BITS;\n+            accumulator = (accumulator >>> 32) + l3 * r0;\n+\n+            z3 = accumulator & LOW_32_BITS;\n+\n+            if ((accumulator >>> 32) != 0) {\n+                throwOverflowException();\n+            }\n+        }\n+\n+        if (r1 != 0) {\n+            long accumulator = l0 * r1 + z1;\n+            z1 = accumulator & LOW_32_BITS;\n+            accumulator = (accumulator >>> 32) + l1 * r1 + z2;\n+\n+            z2 = accumulator & LOW_32_BITS;\n+            accumulator = (accumulator >>> 32) + l2 * r1 + z3;\n+\n+            z3 = accumulator & LOW_32_BITS;\n+\n+            if ((accumulator >>> 32) != 0) {\n+                throwOverflowException();\n+            }\n+        }\n+\n+        pack(result, (int) z0, (int) z1, (int) z2, (int) z3, leftNegative != rightNegative);\n+    }\n+\n+    public static void multiply(long left, long right, Slice result)\n+    {\n+        checkArgument(result.length() == NUMBER_OF_LONGS * Long.BYTES);\n+        boolean rightNegative = right < 0;\n+        boolean leftNegative = left < 0;\n+        left = Math.abs(left);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM0NDYyMA==", "bodyText": "move below usage (other assertMultiply methods)", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r508344620", "createdAt": "2020-10-20T09:21:20Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/test/java/io/prestosql/spi/type/TestUnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -759,4 +763,43 @@ private static Slice negate(Slice slice)\n         }\n         return ints;\n     }\n+\n+    private static boolean isShort(BigInteger value)\n+    {\n+        return value.abs().shiftRight(63).equals(BigInteger.ZERO);\n+    }\n+\n+    private static void assertMultiply(BigInteger a, BigInteger b, BigInteger result)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM0NTY2NQ==", "bodyText": "static import?", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r508345665", "createdAt": "2020-10-20T09:22:50Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/type/DecimalOperators.java", "diffHunk": "@@ -260,7 +260,14 @@ public static long multiplyShortShortShort(long a, long b)\n     @UsedByGeneratedCode\n     public static Slice multiplyShortShortLong(long a, long b)\n     {\n-        return multiplyLongLongLong(encodeUnscaledValue(a), encodeUnscaledValue(b));\n+        try {\n+            Slice result = UnscaledDecimal128Arithmetic.multiply(a, b);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM0ODU0MQ==", "bodyText": "call it r0", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r508348541", "createdAt": "2020-10-20T09:27:01Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -596,6 +688,32 @@ public static void multiply(long left, long right, Slice result)\n         pack(result, (int) z0, (int) z1, (int) z2, (int) z3, leftNegative != rightNegative);\n     }\n \n+    public static void multiply(long left, int right, Slice result)\n+    {\n+        checkArgument(result.length() == NUMBER_OF_LONGS * Long.BYTES);\n+        boolean rightNegative = right < 0;\n+        boolean leftNegative = left < 0;\n+        left = Math.abs(left);\n+        right = Math.abs(right);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM0OTA2OA==", "bodyText": "call it r0", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r508349068", "createdAt": "2020-10-20T09:27:44Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -556,6 +610,44 @@ public static void multiply(Slice left, long right, Slice result)\n         pack(result, (int) z0, (int) z1, (int) z2, (int) z3, leftNegative != rightNegative);\n     }\n \n+    public static void multiply(Slice left, int right, Slice result)\n+    {\n+        checkArgument(result.length() == NUMBER_OF_LONGS * Long.BYTES);\n+\n+        long l0 = toUnsignedLong(getInt(left, 0));\n+        long l1 = toUnsignedLong(getInt(left, 1));\n+        long l2 = toUnsignedLong(getInt(left, 2));\n+        int l3raw = getRawInt(left, 3);\n+        boolean leftNegative = isNegative(l3raw);\n+        long l3 = toUnsignedLong(unpackUnsignedInt(l3raw));\n+\n+        boolean rightNegative = right < 0;\n+        right = Math.abs(right);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM1MDU2OA==", "bodyText": "what about negative decimal (+ add test)?", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r508350568", "createdAt": "2020-10-20T09:29:56Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -210,13 +210,32 @@ else if (rescaleFactor > 0) {\n             if (rescaleFactor >= POWERS_OF_TEN.length) {\n                 throwOverflowException();\n             }\n-            multiply(decimal, POWERS_OF_TEN[rescaleFactor], result);\n+            shiftLeftBy10(decimal, rescaleFactor, result);\n         }\n         else {\n             scaleDownRoundUp(decimal, -rescaleFactor, result);\n         }\n     }\n \n+    public static Slice rescale(long decimal, int rescaleFactor)\n+    {\n+        Slice result = unscaledDecimal();\n+        if (rescaleFactor == 0) {\n+            result.setLong(0, decimal);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM1NzA1OA==", "bodyText": "call it r0", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r508357058", "createdAt": "2020-10-20T09:39:48Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -807,6 +820,115 @@ public static void multiply256(Slice left, Slice right, Slice result)\n         setRawInt(result, 7, (int) z7);\n     }\n \n+    public static void multiply256(Slice left, long right, Slice result)\n+    {\n+        checkArgument(result.length() >= NUMBER_OF_LONGS * Long.BYTES * 2);\n+\n+        long l0 = toUnsignedLong(getInt(left, 0));\n+        long l1 = toUnsignedLong(getInt(left, 1));\n+        long l2 = toUnsignedLong(getInt(left, 2));\n+        long l3 = toUnsignedLong(getInt(left, 3));\n+\n+        right = Math.abs(right);\n+        long r0 = right & LOW_32_BITS;\n+        long r1 = right >>> 32;\n+\n+        long z0 = 0;\n+        long z1 = 0;\n+        long z2 = 0;\n+        long z3 = 0;\n+        long z4 = 0;\n+        long z5 = 0;\n+\n+        if (l0 != 0) {\n+            long accumulator = r0 * l0;\n+            z0 = accumulator & LOW_32_BITS;\n+            accumulator = (accumulator >>> 32) + r1 * l0;\n+\n+            z1 = accumulator & LOW_32_BITS;\n+            z2 = accumulator >>> 32;\n+        }\n+\n+        if (l1 != 0) {\n+            long accumulator = r0 * l1 + z1;\n+            z1 = accumulator & LOW_32_BITS;\n+            accumulator = (accumulator >>> 32) + r1 * l1 + z2;\n+\n+            z2 = accumulator & LOW_32_BITS;\n+            z3 = accumulator >>> 32;\n+        }\n+\n+        if (l2 != 0) {\n+            long accumulator = r0 * l2 + z2;\n+            z2 = accumulator & LOW_32_BITS;\n+            accumulator = (accumulator >>> 32) + r1 * l2 + z3;\n+\n+            z3 = accumulator & LOW_32_BITS;\n+            z4 = accumulator >>> 32;\n+        }\n+\n+        if (l3 != 0) {\n+            long accumulator = r0 * l3 + z3;\n+            z3 = accumulator & LOW_32_BITS;\n+            accumulator = (accumulator >>> 32) + r1 * l3 + z4;\n+\n+            z4 = accumulator & LOW_32_BITS;\n+            z5 = accumulator >>> 32;\n+        }\n+\n+        setRawInt(result, 0, (int) z0);\n+        setRawInt(result, 1, (int) z1);\n+        setRawInt(result, 2, (int) z2);\n+        setRawInt(result, 3, (int) z3);\n+        setRawInt(result, 4, (int) z4);\n+        setRawInt(result, 5, (int) z5);\n+        setRawInt(result, 6, 0);\n+        setRawInt(result, 7, 0);\n+    }\n+\n+    public static void multiply256(Slice left, int right, Slice result)\n+    {\n+        checkArgument(result.length() >= NUMBER_OF_LONGS * Long.BYTES * 2);\n+\n+        long l0 = toUnsignedLong(getInt(left, 0));\n+        long l1 = toUnsignedLong(getInt(left, 1));\n+        long l2 = toUnsignedLong(getInt(left, 2));\n+        long l3 = toUnsignedLong(getInt(left, 3));\n+\n+        right = Math.abs(right);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 106}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d89badf4952e7e67a9068a29c56e6a32e5a5894", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/5d89badf4952e7e67a9068a29c56e6a32e5a5894", "committedDate": "2020-10-21T09:25:40Z", "message": "Add static imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "616235d8babfc341390a9903dba02cbcf3fb1c7e", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/616235d8babfc341390a9903dba02cbcf3fb1c7e", "committedDate": "2020-10-21T09:25:40Z", "message": "Optimize short decimal multiplication"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10d8a3c07f95ff4fcdef6e48c4bd0d8969da6734", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/10d8a3c07f95ff4fcdef6e48c4bd0d8969da6734", "committedDate": "2020-10-21T09:25:40Z", "message": "Use short decimal multiplication in some decimal casts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5939c7456eb6e46fcef82a573f9448edebb303b", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/a5939c7456eb6e46fcef82a573f9448edebb303b", "committedDate": "2020-10-21T09:25:40Z", "message": "Optimize decimal rescaling\n\nWhen possible, rescaling is now done using 32-bit or 64-bit decimals\ninstead of 128-bit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e7e1038d8aba512658aae5b2018b287994886b4", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/1e7e1038d8aba512658aae5b2018b287994886b4", "committedDate": "2020-10-21T09:25:40Z", "message": "Optimize decimal division\n\nAdds specialized methods for 64 and 32-bit values instead of\nwrapping them to Slice."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d103820280e5600b8affe56db5d0d89509c89cd5", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/d103820280e5600b8affe56db5d0d89509c89cd5", "committedDate": "2020-10-21T09:25:41Z", "message": "Remove unused methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af1c03916ec82aa91a346fe5ee278a53949f726b", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/af1c03916ec82aa91a346fe5ee278a53949f726b", "committedDate": "2020-10-21T09:25:41Z", "message": "Simplify 128-bit multiplication\n\nAvoids wrapping int[] array into Slice just to unwrap it."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96500656127dc00a7f6099b29af4d5b161142fde", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/96500656127dc00a7f6099b29af4d5b161142fde", "committedDate": "2020-10-21T09:25:41Z", "message": "Remove unnecessary bit masking operations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cfd46b93b7b76071fb89cb96d192aa8b57cb700", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/9cfd46b93b7b76071fb89cb96d192aa8b57cb700", "committedDate": "2020-10-21T09:25:41Z", "message": "Update params of BenchmarkDecimalOperators\n\nAdditionally removed some warnings"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "9cfd46b93b7b76071fb89cb96d192aa8b57cb700", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/9cfd46b93b7b76071fb89cb96d192aa8b57cb700", "committedDate": "2020-10-21T09:25:41Z", "message": "Update params of BenchmarkDecimalOperators\n\nAdditionally removed some warnings"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3603, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}