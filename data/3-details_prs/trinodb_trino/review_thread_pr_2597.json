{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NDQzMzQ1", "number": 2597, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNToxMToxMlrODdt5Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNToxMjowNFrODdt6qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNDg3MjQzOnYy", "diffSide": "RIGHT", "path": "presto-noop/src/main/java/io/prestosql/plugin/memory/NoOpPlugin.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNToxMToxMlrOFmelfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNToxMToxMlrOFmelfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg5MTMyNg==", "bodyText": "I think the transaction handle should be defined the same way", "url": "https://github.com/trinodb/trino/pull/2597#discussion_r375891326", "createdAt": "2020-02-06T15:11:12Z", "author": {"login": "findepi"}, "path": "presto-noop/src/main/java/io/prestosql/plugin/memory/NoOpPlugin.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.memory;\n+\n+import io.prestosql.spi.Plugin;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.connector.Connector;\n+import io.prestosql.spi.connector.ConnectorContext;\n+import io.prestosql.spi.connector.ConnectorFactory;\n+import io.prestosql.spi.connector.ConnectorHandleResolver;\n+import io.prestosql.spi.connector.ConnectorMetadata;\n+import io.prestosql.spi.connector.ConnectorTransactionHandle;\n+import io.prestosql.spi.transaction.IsolationLevel;\n+\n+import java.util.Map;\n+\n+import static java.util.Collections.singletonList;\n+\n+public final class NoOpPlugin\n+        implements Plugin\n+{\n+    @Override\n+    public Iterable<ConnectorFactory> getConnectorFactories()\n+    {\n+        return singletonList(new NoOpConnectorFactory());\n+    }\n+\n+    private static class NoOpConnectorFactory\n+            implements ConnectorFactory\n+    {\n+        @Override\n+        public String getName()\n+        {\n+            return \"noop\";\n+        }\n+\n+        @Override\n+        public Connector create(String catalogName, Map<String, String> config, ConnectorContext context)\n+        {\n+            return new NoOpConnector();\n+        }\n+\n+        @Override\n+        public ConnectorHandleResolver getHandleResolver()\n+        {\n+            return new ConnectorHandleResolver() {\n+                @Override\n+                public Class<? extends ColumnHandle> getColumnHandleClass()\n+                {\n+                    throw new UnsupportedOperationException();\n+                }\n+            };\n+        }\n+    }\n+\n+    private static class NoOpConnector\n+            implements Connector\n+    {\n+        private static final ConnectorTransactionHandle TRANSACTION_HANDLE = new ConnectorTransactionHandle() {};\n+\n+        @Override\n+        public ConnectorTransactionHandle beginTransaction(IsolationLevel isolationLevel, boolean readOnly)\n+        {\n+            return TRANSACTION_HANDLE;\n+        }\n+\n+        @Override\n+        public ConnectorMetadata getMetadata(ConnectorTransactionHandle transactionHandle)\n+        {\n+            return new NoOpMetadata();\n+        }\n+    }\n+\n+    private static class NoOpMetadata\n+            implements ConnectorMetadata {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNDg3NTk1OnYy", "diffSide": "RIGHT", "path": "presto-noop/src/test/java/io/prestosql/plugin/memory/NoOpQueryRunner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNToxMjowNFrOFmenrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNToxMjowNFrOFmenrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg5MTg4NQ==", "bodyText": "redundant", "url": "https://github.com/trinodb/trino/pull/2597#discussion_r375891885", "createdAt": "2020-02-06T15:12:04Z", "author": {"login": "findepi"}, "path": "presto-noop/src/test/java/io/prestosql/plugin/memory/NoOpQueryRunner.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.memory;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.airlift.log.Logger;\n+import io.airlift.log.Logging;\n+import io.prestosql.testing.DistributedQueryRunner;\n+\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+\n+public final class NoOpQueryRunner\n+{\n+    private static final Logger log = Logger.get(NoOpQueryRunner.class);\n+\n+    private NoOpQueryRunner()\n+    {\n+    }\n+\n+    public static DistributedQueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        Logging.initialize();\n+\n+        DistributedQueryRunner queryRunner = DistributedQueryRunner\n+                .builder(testSessionBuilder().build())\n+                .setNodeCount(4)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1070, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}