{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2Nzk1MTU2", "number": 6081, "title": "Fix caching for TableHandle in CachingJdbcClient", "bodyText": "TableHandle should be cached if there is a value,\nor tableHandle is empty but missing value cashing is expected.", "createdAt": "2020-11-24T21:23:04Z", "url": "https://github.com/trinodb/trino/pull/6081", "merged": true, "mergeCommit": {"oid": "1a73f83c6bb0db7b8486511376ceb9264b43a474"}, "closed": true, "closedAt": "2020-11-26T19:13:53Z", "author": {"login": "ssheikin"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfwtqCAFqTUzNzk2OTYzNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdgX5oxgFqTUzOTUxODMwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3OTY5NjM0", "url": "https://github.com/trinodb/trino/pull/6081#pullrequestreview-537969634", "createdAt": "2020-11-24T21:34:09Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMTozNDoxMFrOH5WCyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMTozNDoxMFrOH5WCyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5MjA0Mg==", "bodyText": "Can you please add a test for that?", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r529892042", "createdAt": "2020-11-24T21:34:10Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/CachingJdbcClient.java", "diffHunk": "@@ -196,7 +196,7 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n             return cachedTableHandle;\n         }\n         Optional<JdbcTableHandle> tableHandle = delegate.getTableHandle(identity, schemaTableName);\n-        if (tableHandle.isEmpty() || cacheMissing) {\n+        if (tableHandle.isPresent() || cacheMissing) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MDA1NjM2", "url": "https://github.com/trinodb/trino/pull/6081#pullrequestreview-538005636", "createdAt": "2020-11-24T22:05:02Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjowNTowMlrOH5XmNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjowNTowMlrOH5XmNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkxNzQ5Mw==", "bodyText": "maybe no-one needed this cache after all :)", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r529917493", "createdAt": "2020-11-24T22:05:02Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/CachingJdbcClient.java", "diffHunk": "@@ -196,7 +196,7 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n             return cachedTableHandle;\n         }\n         Optional<JdbcTableHandle> tableHandle = delegate.getTableHandle(identity, schemaTableName);\n-        if (tableHandle.isEmpty() || cacheMissing) {\n+        if (tableHandle.isPresent() || cacheMissing) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5MjA0Mg=="}, "originalCommit": null, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5MDE4MzMz", "url": "https://github.com/trinodb/trino/pull/6081#pullrequestreview-539018333", "createdAt": "2020-11-26T06:14:55Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNjoxNDo1NVrOH6NFWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNjoxNDo1NVrOH6NFWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc5MzgxNw==", "bodyText": "Why not to simply mock jdbc client?", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r530793817", "createdAt": "2020-11-26T06:14:55Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestCachingJdbcClient.java", "diffHunk": "@@ -14,15 +14,175 @@\n package io.prestosql.plugin.jdbc;\n \n import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import io.airlift.units.Duration;\n+import io.prestosql.spi.connector.ColumnMetadata;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorTableMetadata;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n import java.lang.reflect.Method;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n \n+import static com.google.common.collect.Sets.difference;\n import static io.prestosql.spi.testing.InterfaceTestUtils.assertAllMethodsOverridden;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static java.util.Collections.emptyList;\n+import static java.util.concurrent.TimeUnit.DAYS;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n public class TestCachingJdbcClient\n {\n+    private static final Duration FOREVER = Duration.succinctDuration(1, DAYS);\n+    private static final ConnectorSession session = testSessionBuilder().build().toConnectorSession();\n+    private static final JdbcIdentity identity = JdbcIdentity.from(session);\n+\n+    private TestingDatabase database;\n+    private CachingJdbcClient cachingJdbcClient;\n+    private JdbcClient dbHacker;\n+    private String schema;\n+\n+    @BeforeMethod\n+    public void setUp()\n+            throws Exception\n+    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5MjMwNjYw", "url": "https://github.com/trinodb/trino/pull/6081#pullrequestreview-539230660", "createdAt": "2020-11-26T11:27:55Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMToyNzo1NVrOH6XY9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMTozODowNFrOH6XvAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2MjY3OQ==", "bodyText": "it is not a hacker, please simply call it jdbcClient", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r530962679", "createdAt": "2020-11-26T11:27:55Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestCachingJdbcClient.java", "diffHunk": "@@ -14,15 +14,176 @@\n package io.prestosql.plugin.jdbc;\n \n import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import io.airlift.units.Duration;\n+import io.prestosql.spi.connector.ColumnMetadata;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorTableMetadata;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n import java.lang.reflect.Method;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n \n+import static com.google.common.collect.Sets.difference;\n import static io.prestosql.spi.testing.InterfaceTestUtils.assertAllMethodsOverridden;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static java.util.Collections.emptyList;\n+import static java.util.concurrent.TimeUnit.DAYS;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n+@Test(singleThreaded = true)\n public class TestCachingJdbcClient\n {\n+    private static final Duration FOREVER = Duration.succinctDuration(1, DAYS);\n+    private static final ConnectorSession session = testSessionBuilder().build().toConnectorSession();\n+    private static final JdbcIdentity identity = JdbcIdentity.from(session);\n+\n+    private TestingDatabase database;\n+    private CachingJdbcClient cachingJdbcClient;\n+    private JdbcClient dbHacker;\n+    private String schema;\n+\n+    @BeforeMethod\n+    public void setUp()\n+            throws Exception\n+    {\n+        database = new TestingDatabase();\n+        cachingJdbcClient = createCachingJdbcClient(true);\n+        dbHacker = database.getJdbcClient();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2MjkyOA==", "bodyText": "1 day is not forever", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r530962928", "createdAt": "2020-11-26T11:28:23Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestCachingJdbcClient.java", "diffHunk": "@@ -14,15 +14,176 @@\n package io.prestosql.plugin.jdbc;\n \n import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import io.airlift.units.Duration;\n+import io.prestosql.spi.connector.ColumnMetadata;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorTableMetadata;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n import java.lang.reflect.Method;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n \n+import static com.google.common.collect.Sets.difference;\n import static io.prestosql.spi.testing.InterfaceTestUtils.assertAllMethodsOverridden;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static java.util.Collections.emptyList;\n+import static java.util.concurrent.TimeUnit.DAYS;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n+@Test(singleThreaded = true)\n public class TestCachingJdbcClient\n {\n+    private static final Duration FOREVER = Duration.succinctDuration(1, DAYS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2MzEyNw==", "bodyText": "io.prestosql.testing.TestingConnectorSession#SESSION", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r530963127", "createdAt": "2020-11-26T11:28:44Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestCachingJdbcClient.java", "diffHunk": "@@ -14,15 +14,176 @@\n package io.prestosql.plugin.jdbc;\n \n import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import io.airlift.units.Duration;\n+import io.prestosql.spi.connector.ColumnMetadata;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorTableMetadata;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n import java.lang.reflect.Method;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n \n+import static com.google.common.collect.Sets.difference;\n import static io.prestosql.spi.testing.InterfaceTestUtils.assertAllMethodsOverridden;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static java.util.Collections.emptyList;\n+import static java.util.concurrent.TimeUnit.DAYS;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n+@Test(singleThreaded = true)\n public class TestCachingJdbcClient\n {\n+    private static final Duration FOREVER = Duration.succinctDuration(1, DAYS);\n+    private static final ConnectorSession session = testSessionBuilder().build().toConnectorSession();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2NDM2OA==", "bodyText": "Why not to reuse it between tests? Then you can use io.prestosql.testing.AbstractTestQueryFramework#closeAfterClass. Then you can make it concurrent again", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r530964368", "createdAt": "2020-11-26T11:30:59Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestCachingJdbcClient.java", "diffHunk": "@@ -14,15 +14,176 @@\n package io.prestosql.plugin.jdbc;\n \n import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import io.airlift.units.Duration;\n+import io.prestosql.spi.connector.ColumnMetadata;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorTableMetadata;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n import java.lang.reflect.Method;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n \n+import static com.google.common.collect.Sets.difference;\n import static io.prestosql.spi.testing.InterfaceTestUtils.assertAllMethodsOverridden;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static java.util.Collections.emptyList;\n+import static java.util.concurrent.TimeUnit.DAYS;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n+@Test(singleThreaded = true)\n public class TestCachingJdbcClient\n {\n+    private static final Duration FOREVER = Duration.succinctDuration(1, DAYS);\n+    private static final ConnectorSession session = testSessionBuilder().build().toConnectorSession();\n+    private static final JdbcIdentity identity = JdbcIdentity.from(session);\n+\n+    private TestingDatabase database;\n+    private CachingJdbcClient cachingJdbcClient;\n+    private JdbcClient dbHacker;\n+    private String schema;\n+\n+    @BeforeMethod\n+    public void setUp()\n+            throws Exception\n+    {\n+        database = new TestingDatabase();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2NTg1Ng==", "bodyText": "Declare type as View. Instead of using difference please use jdbcClient.getSchemaNames() and just verify that cached schemas do not contain phantom_schema", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r530965856", "createdAt": "2020-11-26T11:33:38Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestCachingJdbcClient.java", "diffHunk": "@@ -14,15 +14,176 @@\n package io.prestosql.plugin.jdbc;\n \n import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import io.airlift.units.Duration;\n+import io.prestosql.spi.connector.ColumnMetadata;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorTableMetadata;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n import java.lang.reflect.Method;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n \n+import static com.google.common.collect.Sets.difference;\n import static io.prestosql.spi.testing.InterfaceTestUtils.assertAllMethodsOverridden;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static java.util.Collections.emptyList;\n+import static java.util.concurrent.TimeUnit.DAYS;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n+@Test(singleThreaded = true)\n public class TestCachingJdbcClient\n {\n+    private static final Duration FOREVER = Duration.succinctDuration(1, DAYS);\n+    private static final ConnectorSession session = testSessionBuilder().build().toConnectorSession();\n+    private static final JdbcIdentity identity = JdbcIdentity.from(session);\n+\n+    private TestingDatabase database;\n+    private CachingJdbcClient cachingJdbcClient;\n+    private JdbcClient dbHacker;\n+    private String schema;\n+\n+    @BeforeMethod\n+    public void setUp()\n+            throws Exception\n+    {\n+        database = new TestingDatabase();\n+        cachingJdbcClient = createCachingJdbcClient(true);\n+        dbHacker = database.getJdbcClient();\n+        schema = dbHacker.getSchemaNames(identity).iterator().next();\n+    }\n+\n+    private CachingJdbcClient createCachingJdbcClient(boolean cacheMissing)\n+    {\n+        return new CachingJdbcClient(database.getJdbcClient(), FOREVER, cacheMissing);\n+    }\n+\n+    @AfterMethod(alwaysRun = true)\n+    public void tearDown()\n+            throws Exception\n+    {\n+        database.close();\n+    }\n+\n+    @Test\n+    public void testSchemaNamesCached()\n+    {\n+        String phantomSchema = \"phantom_schema\";\n+\n+        dbHacker.createSchema(identity, phantomSchema);\n+        Set<String> cachedSchemas = cachingJdbcClient.getSchemaNames(identity);\n+        dbHacker.dropSchema(identity, phantomSchema);\n+\n+        Sets.SetView<String> actualDbState = difference(cachedSchemas, Set.of(phantomSchema));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2NjMwNQ==", "bodyText": "Please create it every test. I noticed that sometimes it is created and sometimes it is created here. So lets be coherent.", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r530966305", "createdAt": "2020-11-26T11:34:28Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestCachingJdbcClient.java", "diffHunk": "@@ -14,15 +14,176 @@\n package io.prestosql.plugin.jdbc;\n \n import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import io.airlift.units.Duration;\n+import io.prestosql.spi.connector.ColumnMetadata;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorTableMetadata;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n import java.lang.reflect.Method;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n \n+import static com.google.common.collect.Sets.difference;\n import static io.prestosql.spi.testing.InterfaceTestUtils.assertAllMethodsOverridden;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static java.util.Collections.emptyList;\n+import static java.util.concurrent.TimeUnit.DAYS;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n+@Test(singleThreaded = true)\n public class TestCachingJdbcClient\n {\n+    private static final Duration FOREVER = Duration.succinctDuration(1, DAYS);\n+    private static final ConnectorSession session = testSessionBuilder().build().toConnectorSession();\n+    private static final JdbcIdentity identity = JdbcIdentity.from(session);\n+\n+    private TestingDatabase database;\n+    private CachingJdbcClient cachingJdbcClient;\n+    private JdbcClient dbHacker;\n+    private String schema;\n+\n+    @BeforeMethod\n+    public void setUp()\n+            throws Exception\n+    {\n+        database = new TestingDatabase();\n+        cachingJdbcClient = createCachingJdbcClient(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2NzMwMA==", "bodyText": "You might want to use io.prestosql.testing.sql.TestTable#randomTableSuffix", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r530967300", "createdAt": "2020-11-26T11:36:07Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestCachingJdbcClient.java", "diffHunk": "@@ -14,15 +14,176 @@\n package io.prestosql.plugin.jdbc;\n \n import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import io.airlift.units.Duration;\n+import io.prestosql.spi.connector.ColumnMetadata;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorTableMetadata;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n import java.lang.reflect.Method;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n \n+import static com.google.common.collect.Sets.difference;\n import static io.prestosql.spi.testing.InterfaceTestUtils.assertAllMethodsOverridden;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static java.util.Collections.emptyList;\n+import static java.util.concurrent.TimeUnit.DAYS;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n+@Test(singleThreaded = true)\n public class TestCachingJdbcClient\n {\n+    private static final Duration FOREVER = Duration.succinctDuration(1, DAYS);\n+    private static final ConnectorSession session = testSessionBuilder().build().toConnectorSession();\n+    private static final JdbcIdentity identity = JdbcIdentity.from(session);\n+\n+    private TestingDatabase database;\n+    private CachingJdbcClient cachingJdbcClient;\n+    private JdbcClient dbHacker;\n+    private String schema;\n+\n+    @BeforeMethod\n+    public void setUp()\n+            throws Exception\n+    {\n+        database = new TestingDatabase();\n+        cachingJdbcClient = createCachingJdbcClient(true);\n+        dbHacker = database.getJdbcClient();\n+        schema = dbHacker.getSchemaNames(identity).iterator().next();\n+    }\n+\n+    private CachingJdbcClient createCachingJdbcClient(boolean cacheMissing)\n+    {\n+        return new CachingJdbcClient(database.getJdbcClient(), FOREVER, cacheMissing);\n+    }\n+\n+    @AfterMethod(alwaysRun = true)\n+    public void tearDown()\n+            throws Exception\n+    {\n+        database.close();\n+    }\n+\n+    @Test\n+    public void testSchemaNamesCached()\n+    {\n+        String phantomSchema = \"phantom_schema\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2ODAwOQ==", "bodyText": "Please apply above comments to all tests below.", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r530968009", "createdAt": "2020-11-26T11:37:26Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestCachingJdbcClient.java", "diffHunk": "@@ -14,15 +14,176 @@\n package io.prestosql.plugin.jdbc;\n \n import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import io.airlift.units.Duration;\n+import io.prestosql.spi.connector.ColumnMetadata;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorTableMetadata;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n import java.lang.reflect.Method;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n \n+import static com.google.common.collect.Sets.difference;\n import static io.prestosql.spi.testing.InterfaceTestUtils.assertAllMethodsOverridden;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static java.util.Collections.emptyList;\n+import static java.util.concurrent.TimeUnit.DAYS;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n+@Test(singleThreaded = true)\n public class TestCachingJdbcClient\n {\n+    private static final Duration FOREVER = Duration.succinctDuration(1, DAYS);\n+    private static final ConnectorSession session = testSessionBuilder().build().toConnectorSession();\n+    private static final JdbcIdentity identity = JdbcIdentity.from(session);\n+\n+    private TestingDatabase database;\n+    private CachingJdbcClient cachingJdbcClient;\n+    private JdbcClient dbHacker;\n+    private String schema;\n+\n+    @BeforeMethod\n+    public void setUp()\n+            throws Exception\n+    {\n+        database = new TestingDatabase();\n+        cachingJdbcClient = createCachingJdbcClient(true);\n+        dbHacker = database.getJdbcClient();\n+        schema = dbHacker.getSchemaNames(identity).iterator().next();\n+    }\n+\n+    private CachingJdbcClient createCachingJdbcClient(boolean cacheMissing)\n+    {\n+        return new CachingJdbcClient(database.getJdbcClient(), FOREVER, cacheMissing);\n+    }\n+\n+    @AfterMethod(alwaysRun = true)\n+    public void tearDown()\n+            throws Exception\n+    {\n+        database.close();\n+    }\n+\n+    @Test\n+    public void testSchemaNamesCached()\n+    {\n+        String phantomSchema = \"phantom_schema\";\n+\n+        dbHacker.createSchema(identity, phantomSchema);\n+        Set<String> cachedSchemas = cachingJdbcClient.getSchemaNames(identity);\n+        dbHacker.dropSchema(identity, phantomSchema);\n+\n+        Sets.SetView<String> actualDbState = difference(cachedSchemas, Set.of(phantomSchema));\n+        assertThat(dbHacker.getSchemaNames(identity)).containsExactlyInAnyOrderElementsOf(actualDbState);\n+        assertThat(cachingJdbcClient.getSchemaNames(identity)).containsExactlyInAnyOrderElementsOf(cachedSchemas);\n+    }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2ODMyMQ==", "bodyText": "now please invalidate cache and see it got refreshed after the second call.", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r530968321", "createdAt": "2020-11-26T11:38:04Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestCachingJdbcClient.java", "diffHunk": "@@ -14,15 +14,176 @@\n package io.prestosql.plugin.jdbc;\n \n import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import io.airlift.units.Duration;\n+import io.prestosql.spi.connector.ColumnMetadata;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorTableMetadata;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n import java.lang.reflect.Method;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n \n+import static com.google.common.collect.Sets.difference;\n import static io.prestosql.spi.testing.InterfaceTestUtils.assertAllMethodsOverridden;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static java.util.Collections.emptyList;\n+import static java.util.concurrent.TimeUnit.DAYS;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n+@Test(singleThreaded = true)\n public class TestCachingJdbcClient\n {\n+    private static final Duration FOREVER = Duration.succinctDuration(1, DAYS);\n+    private static final ConnectorSession session = testSessionBuilder().build().toConnectorSession();\n+    private static final JdbcIdentity identity = JdbcIdentity.from(session);\n+\n+    private TestingDatabase database;\n+    private CachingJdbcClient cachingJdbcClient;\n+    private JdbcClient dbHacker;\n+    private String schema;\n+\n+    @BeforeMethod\n+    public void setUp()\n+            throws Exception\n+    {\n+        database = new TestingDatabase();\n+        cachingJdbcClient = createCachingJdbcClient(true);\n+        dbHacker = database.getJdbcClient();\n+        schema = dbHacker.getSchemaNames(identity).iterator().next();\n+    }\n+\n+    private CachingJdbcClient createCachingJdbcClient(boolean cacheMissing)\n+    {\n+        return new CachingJdbcClient(database.getJdbcClient(), FOREVER, cacheMissing);\n+    }\n+\n+    @AfterMethod(alwaysRun = true)\n+    public void tearDown()\n+            throws Exception\n+    {\n+        database.close();\n+    }\n+\n+    @Test\n+    public void testSchemaNamesCached()\n+    {\n+        String phantomSchema = \"phantom_schema\";\n+\n+        dbHacker.createSchema(identity, phantomSchema);\n+        Set<String> cachedSchemas = cachingJdbcClient.getSchemaNames(identity);\n+        dbHacker.dropSchema(identity, phantomSchema);\n+\n+        Sets.SetView<String> actualDbState = difference(cachedSchemas, Set.of(phantomSchema));\n+        assertThat(dbHacker.getSchemaNames(identity)).containsExactlyInAnyOrderElementsOf(actualDbState);\n+        assertThat(cachingJdbcClient.getSchemaNames(identity)).containsExactlyInAnyOrderElementsOf(cachedSchemas);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 73}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "209e15cc1be826f1a6039a5cece24c5ce3ce308b", "author": {"user": {"login": "ssheikin", "name": "Sasha Sheikin"}}, "url": "https://github.com/trinodb/trino/commit/209e15cc1be826f1a6039a5cece24c5ce3ce308b", "committedDate": "2020-11-26T15:58:36Z", "message": "Fix caching for TableHandle in CachingJdbcClient\n\nTableHandle should be cached if there is a value,\nor tableHandle is empty but missing value cashing is expected."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f0cb3b5df50ac9cf2e5f89dc10b0ef3f5f4eaa3", "author": {"user": {"login": "ssheikin", "name": "Sasha Sheikin"}}, "url": "https://github.com/trinodb/trino/commit/4f0cb3b5df50ac9cf2e5f89dc10b0ef3f5f4eaa3", "committedDate": "2020-11-26T15:58:36Z", "message": "Implement tests for CachingJdbcClient"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "4f0cb3b5df50ac9cf2e5f89dc10b0ef3f5f4eaa3", "author": {"user": {"login": "ssheikin", "name": "Sasha Sheikin"}}, "url": "https://github.com/trinodb/trino/commit/4f0cb3b5df50ac9cf2e5f89dc10b0ef3f5f4eaa3", "committedDate": "2020-11-26T15:58:36Z", "message": "Implement tests for CachingJdbcClient"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5NTE4MzAz", "url": "https://github.com/trinodb/trino/pull/6081#pullrequestreview-539518303", "createdAt": "2020-11-26T19:13:36Z", "commit": {"oid": "4f0cb3b5df50ac9cf2e5f89dc10b0ef3f5f4eaa3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2316, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}