{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMDY3NjYz", "number": 4223, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTowMzozOFrOEIzSzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzowMjo0OVrOEJBogQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjY0NDYyOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTowMzozOFrOGo-9ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTowMzozOFrOGo-9ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyNzc1NA==", "bodyText": "static,\nmove below, at the end of the class", "url": "https://github.com/trinodb/trino/pull/4223#discussion_r445627754", "createdAt": "2020-06-25T15:03:38Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -95,9 +97,11 @@ public void testReadFullAcid(boolean isPartitioned, BucketingType bucketingType)\n             compactTableAndWait(MAJOR, tableName, hivePartitionString, Duration.valueOf(\"5m\"));\n             assertThat(query(selectFromOnePartitionsSql)).containsExactly(row(20, 3), row(23, 1));\n         }\n-        finally {\n-            onHive().executeQuery(\"DROP TABLE \" + tableName);\n-        }\n+    }\n+\n+    private String tableName(String testName, boolean isPartitioned, BucketingType bucketingType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjY1NDYwOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTowNTo1MlrOGo_D3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNToyOTozMVrOGpAGPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyOTQwNQ==", "bodyText": "Simplify compaction logic in TestHiveTransactionalTabl\n\nWhat does this commit change?\nI would prefer for this code to be defensive, especially that it's based on assumptions and hard to test.\nE.g. if we want to assume there is no compaction, we should verify there initially is no compaction.\n(or leave as it was)\nnit: typo in cmt", "url": "https://github.com/trinodb/trino/pull/4223#discussion_r445629405", "createdAt": "2020-06-25T15:05:52Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -190,26 +188,24 @@ private static String hiveTableProperties(TransactionalTableType transactionalTa\n \n     private static void compactTableAndWait(CompactionMode compactMode, String tableName, String partitionString, Duration timeout)\n     {\n-        Set<String> existingCompactionsIds = getTableCompactions(compactMode, tableName)\n-                .map(row -> row.get(\"compactionid\"))\n-                .collect(toUnmodifiableSet());\n-\n         onHive().executeQuery(format(\"ALTER TABLE %s %s COMPACT '%s'\", tableName, partitionString, compactMode.name()));\n \n-        Set<String> tableCompactionsIds = Sets.difference(getTableCompactions(compactMode, tableName)\n-                .map(row -> row.get(\"compactionid\"))\n-                .collect(toUnmodifiableSet()),\n-                existingCompactionsIds);\n+        // Since we disabled table auto compaction we can assume that every compaction is triggered in this test", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY0NjM5Ng==", "bodyText": "I'll add an assertion that there are no compactions", "url": "https://github.com/trinodb/trino/pull/4223#discussion_r445646396", "createdAt": "2020-06-25T15:29:31Z", "author": {"login": "wendigo"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -190,26 +188,24 @@ private static String hiveTableProperties(TransactionalTableType transactionalTa\n \n     private static void compactTableAndWait(CompactionMode compactMode, String tableName, String partitionString, Duration timeout)\n     {\n-        Set<String> existingCompactionsIds = getTableCompactions(compactMode, tableName)\n-                .map(row -> row.get(\"compactionid\"))\n-                .collect(toUnmodifiableSet());\n-\n         onHive().executeQuery(format(\"ALTER TABLE %s %s COMPACT '%s'\", tableName, partitionString, compactMode.name()));\n \n-        Set<String> tableCompactionsIds = Sets.difference(getTableCompactions(compactMode, tableName)\n-                .map(row -> row.get(\"compactionid\"))\n-                .collect(toUnmodifiableSet()),\n-                existingCompactionsIds);\n+        // Since we disabled table auto compaction we can assume that every compaction is triggered in this test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYyOTQwNQ=="}, "originalCommit": null, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzM1ODcwOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxODowOTowOVrOGpGFmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxODowOTowOVrOGpGFmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc0NDUzOA==", "bodyText": "contentEquals -> equals\nsame below", "url": "https://github.com/trinodb/trino/pull/4223#discussion_r445744538", "createdAt": "2020-06-25T18:09:09Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -185,26 +183,26 @@ private static String hiveTableProperties(TransactionalTableType transactionalTa\n \n     private static void compactTableAndWait(CompactionMode compactMode, String tableName, String partitionString, Duration timeout)\n     {\n-        Set<String> existingCompactionsIds = getTableCompactions(compactMode, tableName)\n-                .map(row -> row.get(\"compactionid\"))\n-                .collect(toUnmodifiableSet());\n-\n         onHive().executeQuery(format(\"ALTER TABLE %s %s COMPACT '%s'\", tableName, partitionString, compactMode.name()));\n+        assertEquals(getTableCompactions(compactMode, tableName).count(), 0);\n \n-        Set<String> tableCompactionsIds = Sets.difference(getTableCompactions(compactMode, tableName)\n-                .map(row -> row.get(\"compactionid\"))\n-                .collect(toUnmodifiableSet()),\n-                existingCompactionsIds);\n+        // Since we disabled table auto compaction and we checked that there are no compaction to the table\n+        // we can assume that every compaction from now on is triggered in this test\n+        // and all compaction should complete successfully before proceeding.\n+        assertEventually(timeout, () -> {\n+            List<Map<String, String>> allCompactions = getTableCompactions(compactMode, tableName)\n+                    .collect(toImmutableList());\n \n-        assertFalse(tableCompactionsIds.isEmpty(), \"tableCompactionsIds are empty\");\n+            long completedCompactions = allCompactions.stream()\n+                    .filter(row -> row.get(\"state\").contentEquals(\"succeeded\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzM2MjY0OnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxODoxMDowN1rOGpGH5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxODoxMDowN1rOGpGH5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc0NTEyNg==", "bodyText": "that should not hold, as we just invoked a compaction", "url": "https://github.com/trinodb/trino/pull/4223#discussion_r445745126", "createdAt": "2020-06-25T18:10:07Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -185,26 +183,26 @@ private static String hiveTableProperties(TransactionalTableType transactionalTa\n \n     private static void compactTableAndWait(CompactionMode compactMode, String tableName, String partitionString, Duration timeout)\n     {\n-        Set<String> existingCompactionsIds = getTableCompactions(compactMode, tableName)\n-                .map(row -> row.get(\"compactionid\"))\n-                .collect(toUnmodifiableSet());\n-\n         onHive().executeQuery(format(\"ALTER TABLE %s %s COMPACT '%s'\", tableName, partitionString, compactMode.name()));\n+        assertEquals(getTableCompactions(compactMode, tableName).count(), 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzM2Mzk5OnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxODoxMDozMlrOGpGIzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxODoxMDozMlrOGpGIzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc0NTM1Nw==", "bodyText": "we should verify there is 1 (or fewer?) compaction", "url": "https://github.com/trinodb/trino/pull/4223#discussion_r445745357", "createdAt": "2020-06-25T18:10:32Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -185,26 +183,26 @@ private static String hiveTableProperties(TransactionalTableType transactionalTa\n \n     private static void compactTableAndWait(CompactionMode compactMode, String tableName, String partitionString, Duration timeout)\n     {\n-        Set<String> existingCompactionsIds = getTableCompactions(compactMode, tableName)\n-                .map(row -> row.get(\"compactionid\"))\n-                .collect(toUnmodifiableSet());\n-\n         onHive().executeQuery(format(\"ALTER TABLE %s %s COMPACT '%s'\", tableName, partitionString, compactMode.name()));\n+        assertEquals(getTableCompactions(compactMode, tableName).count(), 0);\n \n-        Set<String> tableCompactionsIds = Sets.difference(getTableCompactions(compactMode, tableName)\n-                .map(row -> row.get(\"compactionid\"))\n-                .collect(toUnmodifiableSet()),\n-                existingCompactionsIds);\n+        // Since we disabled table auto compaction and we checked that there are no compaction to the table\n+        // we can assume that every compaction from now on is triggered in this test\n+        // and all compaction should complete successfully before proceeding.\n+        assertEventually(timeout, () -> {\n+            List<Map<String, String>> allCompactions = getTableCompactions(compactMode, tableName)\n+                    .collect(toImmutableList());\n \n-        assertFalse(tableCompactionsIds.isEmpty(), \"tableCompactionsIds are empty\");\n+            long completedCompactions = allCompactions.stream()\n+                    .filter(row -> row.get(\"state\").contentEquals(\"succeeded\"))\n+                    .count();\n \n-        assertEventually(timeout, () -> {\n-            Set<String> completedCompactionsIds = getTableCompactions(compactMode, tableName)\n-                    .filter(row -> row.get(\"state\").equals(\"succeeded\"))\n-                    .map(row -> row.get(\"compactionid\"))\n-                    .collect(toUnmodifiableSet());\n+            long failedCompactions = allCompactions.stream()\n+                    .filter(row -> row.get(\"state\").contentEquals(\"failed\"))\n+                    .count();\n \n-            assertTrue(completedCompactionsIds.containsAll(tableCompactionsIds));\n+            verify(failedCompactions == 0, \"compactions failed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODk5MzkzOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzowMjo0OVrOGpV8Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzoyNjoyNFrOGpWhHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAwNDI1MA==", "bodyText": "shouldn't there be just 1 row with state == SUCCEEDED.\nAnd then we can just do:\n        Map<String, String> compaction = getOnlyElement(\n                getTableCompactions(compactMode, tableName).collect(ImmutableList.toImmutableList()));\n        assertEquals(compaction.get(\"state\"), \"succeeded\");", "url": "https://github.com/trinodb/trino/pull/4223#discussion_r446004250", "createdAt": "2020-06-26T07:02:49Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -185,26 +183,27 @@ private static String hiveTableProperties(TransactionalTableType transactionalTa\n \n     private static void compactTableAndWait(CompactionMode compactMode, String tableName, String partitionString, Duration timeout)\n     {\n-        Set<String> existingCompactionsIds = getTableCompactions(compactMode, tableName)\n-                .map(row -> row.get(\"compactionid\"))\n-                .collect(toUnmodifiableSet());\n-\n+        assertEquals(getTableCompactions(compactMode, tableName).count(), 0);\n         onHive().executeQuery(format(\"ALTER TABLE %s %s COMPACT '%s'\", tableName, partitionString, compactMode.name()));\n \n-        Set<String> tableCompactionsIds = Sets.difference(getTableCompactions(compactMode, tableName)\n-                .map(row -> row.get(\"compactionid\"))\n-                .collect(toUnmodifiableSet()),\n-                existingCompactionsIds);\n-\n-        assertFalse(tableCompactionsIds.isEmpty(), \"tableCompactionsIds are empty\");\n-\n+        // Since we disabled table auto compaction and we checked that there are no compaction to the table\n+        // we can assume that every compaction from now on is triggered in this test\n+        // and all compaction should complete successfully before proceeding.\n         assertEventually(timeout, () -> {\n-            Set<String> completedCompactionsIds = getTableCompactions(compactMode, tableName)\n+            List<Map<String, String>> allCompactions = getTableCompactions(compactMode, tableName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAxMzcyNg==", "bodyText": "Yes, there should be only one row with either state succeeded or failed", "url": "https://github.com/trinodb/trino/pull/4223#discussion_r446013726", "createdAt": "2020-06-26T07:26:24Z", "author": {"login": "wendigo"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -185,26 +183,27 @@ private static String hiveTableProperties(TransactionalTableType transactionalTa\n \n     private static void compactTableAndWait(CompactionMode compactMode, String tableName, String partitionString, Duration timeout)\n     {\n-        Set<String> existingCompactionsIds = getTableCompactions(compactMode, tableName)\n-                .map(row -> row.get(\"compactionid\"))\n-                .collect(toUnmodifiableSet());\n-\n+        assertEquals(getTableCompactions(compactMode, tableName).count(), 0);\n         onHive().executeQuery(format(\"ALTER TABLE %s %s COMPACT '%s'\", tableName, partitionString, compactMode.name()));\n \n-        Set<String> tableCompactionsIds = Sets.difference(getTableCompactions(compactMode, tableName)\n-                .map(row -> row.get(\"compactionid\"))\n-                .collect(toUnmodifiableSet()),\n-                existingCompactionsIds);\n-\n-        assertFalse(tableCompactionsIds.isEmpty(), \"tableCompactionsIds are empty\");\n-\n+        // Since we disabled table auto compaction and we checked that there are no compaction to the table\n+        // we can assume that every compaction from now on is triggered in this test\n+        // and all compaction should complete successfully before proceeding.\n         assertEventually(timeout, () -> {\n-            Set<String> completedCompactionsIds = getTableCompactions(compactMode, tableName)\n+            List<Map<String, String>> allCompactions = getTableCompactions(compactMode, tableName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAwNDI1MA=="}, "originalCommit": null, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3943, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}