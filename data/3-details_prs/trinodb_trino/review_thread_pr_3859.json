{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNTAxMDU5", "number": 3859, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMToyMTowM1rOD_5n-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNjoxMTo0MVrOEALEuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzMxMDAwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/sql/query/TestFormat.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMToyMTowM1rOGa1yZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMzoyNjoyM1rOGa4MUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc5NzQxMw==", "bodyText": "Rename to testAggregationInFormat to clarify this is not a generic test, but we're exercising a specific behavior.", "url": "https://github.com/trinodb/trino/pull/3859#discussion_r430797413", "createdAt": "2020-05-27T01:21:03Z", "author": {"login": "martint"}, "path": "presto-main/src/test/java/io/prestosql/sql/query/TestFormat.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package io.prestosql.sql.query;\n+\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+public class TestFormat\n+{\n+    private QueryAssertions assertions;\n+\n+    @BeforeClass\n+    public void init()\n+    {\n+        assertions = new QueryAssertions();\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void teardown()\n+    {\n+        assertions.close();\n+        assertions = null;\n+    }\n+\n+    @Test\n+    public void testFormat()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgzNjgxNw==", "bodyText": "will do, thanks for reviewing", "url": "https://github.com/trinodb/trino/pull/3859#discussion_r430836817", "createdAt": "2020-05-27T03:26:23Z", "author": {"login": "ArvinZheng"}, "path": "presto-main/src/test/java/io/prestosql/sql/query/TestFormat.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package io.prestosql.sql.query;\n+\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+public class TestFormat\n+{\n+    private QueryAssertions assertions;\n+\n+    @BeforeClass\n+    public void init()\n+    {\n+        assertions = new QueryAssertions();\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void teardown()\n+    {\n+        assertions.close();\n+        assertions = null;\n+    }\n+\n+    @Test\n+    public void testFormat()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc5NzQxMw=="}, "originalCommit": null, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjE2ODg5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/AggregationAnalyzer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNjoxMTo0MVrOGbSciQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzoyNzo1MVrOGbVf2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2Njk1Mw==", "bodyText": "This needs to process all arguments to Format. Otherwise, the analyzer won't realize this is an invalid query:\nSELECT format(s, sum(v)) FROM (VALUES ('%s', 1)) t(s, v)\n\n(s must be in the group by clause)", "url": "https://github.com/trinodb/trino/pull/3859#discussion_r431266953", "createdAt": "2020-05-27T16:11:41Z", "author": {"login": "martint"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/AggregationAnalyzer.java", "diffHunk": "@@ -308,6 +309,12 @@ protected Boolean visitInPredicate(InPredicate node, Void context)\n             return process(node.getValue(), context) && process(node.getValueList(), context);\n         }\n \n+        @Override\n+        protected Boolean visitFormat(Format node, Void context)\n+        {\n+            return node.getArguments().subList(1, node.getArguments().size()).stream().allMatch(expression -> process(expression, context));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMxNjk1NA==", "bodyText": "ah...thanks, will fix the code and squash the commits", "url": "https://github.com/trinodb/trino/pull/3859#discussion_r431316954", "createdAt": "2020-05-27T17:27:51Z", "author": {"login": "ArvinZheng"}, "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/AggregationAnalyzer.java", "diffHunk": "@@ -308,6 +309,12 @@ protected Boolean visitInPredicate(InPredicate node, Void context)\n             return process(node.getValue(), context) && process(node.getValueList(), context);\n         }\n \n+        @Override\n+        protected Boolean visitFormat(Format node, Void context)\n+        {\n+            return node.getArguments().subList(1, node.getArguments().size()).stream().allMatch(expression -> process(expression, context));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2Njk1Mw=="}, "originalCommit": null, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4958, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}