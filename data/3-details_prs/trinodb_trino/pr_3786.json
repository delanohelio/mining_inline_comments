{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMTEzMjg3", "number": 3786, "title": "Add Rubix HDFS product test", "bodyText": "", "createdAt": "2020-05-19T13:17:38Z", "url": "https://github.com/trinodb/trino/pull/3786", "merged": true, "mergeCommit": {"oid": "43f2be5c3fbe7b6b07e087460341a9a372088fa7"}, "closed": true, "closedAt": "2020-05-20T13:32:18Z", "author": {"login": "sopel39"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABci0qibAFqTQxNDQ1NjQ1Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjI5gWgFqTQxNTMxOTI1OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NDU2NDUy", "url": "https://github.com/trinodb/trino/pull/3786#pullrequestreview-414456452", "createdAt": "2020-05-19T13:41:02Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NTA0NzM5", "url": "https://github.com/trinodb/trino/pull/3786#pullrequestreview-414504739", "createdAt": "2020-05-19T14:29:02Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDoyOTowM1rOGXjNOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDozNjoxNlrOGXjkHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM0NzI1Ng==", "bodyText": "Please create a new environment, MultinodeHiveCaching\n\nmultinode is not supposed to be \"include everything\" environment (Iceberg shouldn't be here too)\nin this new environment you can register the catalog as hive and run all storage_formats, which greatly improves fs coverage", "url": "https://github.com/trinodb/trino/pull/3786#discussion_r427347256", "createdAt": "2020-05-19T14:29:03Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/Multinode.java", "diffHunk": "@@ -70,7 +74,9 @@ protected void extendEnvironment(Environment.Builder builder)\n         builder.configureContainer(\"presto-master\", container -> {\n             container\n                     .withFileSystemBind(dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode/multinode-master-jvm.config\"), CONTAINER_PRESTO_JVM_CONFIG, READ_ONLY)\n-                    .withFileSystemBind(dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode/multinode-master-config.properties\"), CONTAINER_PRESTO_CONFIG_PROPERTIES, READ_ONLY);\n+                    .withFileSystemBind(dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode/multinode-master-config.properties\"), CONTAINER_PRESTO_CONFIG_PROPERTIES, READ_ONLY)\n+                    .withFileSystemBind(dockerFiles.getDockerFilesHostPath(\"common/hadoop/hivecached.properties\"), CONTAINER_PRESTO_HIVE_CACHED_PROPERTIES, READ_ONLY)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM0OTI1Ng==", "bodyText": "I guess most of the are not needed?\nPlease leave only those that are important", "url": "https://github.com/trinodb/trino/pull/3786#discussion_r427349256", "createdAt": "2020-05-19T14:31:25Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/resources/docker/presto-product-tests/common/hadoop/hivecached.properties", "diffHunk": "@@ -0,0 +1,17 @@\n+connector.name=hive-hadoop2\n+hive.metastore.uri=thrift://hadoop-master:9083\n+hive.config.resources=/docker/presto-product-tests/conf/presto/etc/hive-default-fs-site.xml\n+hive.allow-add-column=true\n+hive.allow-drop-column=true\n+hive.allow-rename-column=true\n+hive.allow-comment-table=true\n+hive.allow-drop-table=true\n+hive.allow-rename-table=true\n+hive.allow-register-partition-procedure=true\n+hive.metastore-cache-ttl=0s\n+hive.fs.cache.max-size=10\n+hive.max-partitions-per-scan=100\n+hive.translate-hive-views=true", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM1MTM4NA==", "bodyText": "getCachedReads method doesn't really know what it is doing, it could be called getFirstColumn\nSimilarly getRemoteReads could be called getSecondColumn.\nUse tryFindColumnIndex to map columns by name.", "url": "https://github.com/trinodb/trino/pull/3786#discussion_r427351384", "createdAt": "2020-05-19T14:34:06Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestCache.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.query.QueryResult;\n+import org.testng.annotations.Test;\n+\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static io.airlift.testing.Assertions.assertGreaterThan;\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.tests.TestGroups.HIVE_CACHE;\n+import static java.lang.Thread.sleep;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestCache\n+        extends ProductTest\n+{\n+    @Test(groups = HIVE_CACHE)\n+    public void testReadFromCache()\n+            throws InterruptedException\n+    {\n+        String nonCachedTableName = \"hive.default.test_cache_read\";\n+        String cachedTableName = \"hivecached.default.test_cache_read\";\n+\n+        query(\"DROP TABLE IF EXISTS \" + nonCachedTableName);\n+        query(\"CREATE TABLE \" + nonCachedTableName + \" WITH (format='ORC') AS SELECT 'Hello world' as col\");\n+\n+        QueryResult beforeCacheStats = getCacheStats();\n+        long beforeCachedReads = getCachedReads(beforeCacheStats);\n+        long beforeRemoteReads = getRemoteReads(beforeCacheStats);\n+\n+        assertThat(query(\"SELECT * FROM \" + cachedTableName))\n+                .containsExactly(row(\"Hello world\"));\n+\n+        // stats are propagated asynchronously, wait for them\n+        sleep(1000);\n+        QueryResult firstCacheStats = getCacheStats();\n+        long firstCachedReads = getCachedReads(firstCacheStats);\n+        long firstRemoteReads = getRemoteReads(firstCacheStats);\n+\n+        // first query via caching catalog should fetch remote data\n+        assertGreaterThan(firstRemoteReads, beforeRemoteReads);\n+        assertEquals(firstCachedReads, beforeCachedReads);\n+\n+        assertThat(query(\"SELECT * FROM \" + cachedTableName))\n+                .containsExactly(row(\"Hello world\"));\n+\n+        // stats are propagated asynchronously, wait for them\n+        sleep(1000);\n+        QueryResult secondCacheStats = getCacheStats();\n+        long secondCachedReads = getCachedReads(secondCacheStats);\n+        long secondRemoteReads = getRemoteReads(secondCacheStats);\n+\n+        // second query via caching catalog should read exclusively from cache\n+        assertEquals(secondRemoteReads, firstRemoteReads);\n+        assertGreaterThan(secondCachedReads, firstCachedReads);\n+\n+        query(\"DROP TABLE \" + nonCachedTableName);\n+    }\n+\n+    private QueryResult getCacheStats()\n+    {\n+        return query(\"SELECT cachedreads, remotereads FROM \" +\n+                \"jmx.current.\\\"rubix:catalog=hivecached,name=stats\\\" WHERE node = 'presto-worker'\");\n+    }\n+\n+    private long getCachedReads(QueryResult queryResult)\n+    {\n+        return (Long) getOnlyElement(queryResult.rows()).get(0);\n+    }\n+\n+    private long getRemoteReads(QueryResult queryResult)\n+    {\n+        return (Long) getOnlyElement(queryResult.rows()).get(1);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM1MTUxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throws InterruptedException\n          \n          \n            \n                        throws Exception", "url": "https://github.com/trinodb/trino/pull/3786#discussion_r427351510", "createdAt": "2020-05-19T14:34:16Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestCache.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.query.QueryResult;\n+import org.testng.annotations.Test;\n+\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static io.airlift.testing.Assertions.assertGreaterThan;\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.tests.TestGroups.HIVE_CACHE;\n+import static java.lang.Thread.sleep;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestCache\n+        extends ProductTest\n+{\n+    @Test(groups = HIVE_CACHE)\n+    public void testReadFromCache()\n+            throws InterruptedException", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM1MzExOA==", "bodyText": "use form of assert eventually, otherwise this will likely be flaky", "url": "https://github.com/trinodb/trino/pull/3786#discussion_r427353118", "createdAt": "2020-05-19T14:36:16Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestCache.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.query.QueryResult;\n+import org.testng.annotations.Test;\n+\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static io.airlift.testing.Assertions.assertGreaterThan;\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.tests.TestGroups.HIVE_CACHE;\n+import static java.lang.Thread.sleep;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestCache\n+        extends ProductTest\n+{\n+    @Test(groups = HIVE_CACHE)\n+    public void testReadFromCache()\n+            throws InterruptedException\n+    {\n+        String nonCachedTableName = \"hive.default.test_cache_read\";\n+        String cachedTableName = \"hivecached.default.test_cache_read\";\n+\n+        query(\"DROP TABLE IF EXISTS \" + nonCachedTableName);\n+        query(\"CREATE TABLE \" + nonCachedTableName + \" WITH (format='ORC') AS SELECT 'Hello world' as col\");\n+\n+        QueryResult beforeCacheStats = getCacheStats();\n+        long beforeCachedReads = getCachedReads(beforeCacheStats);\n+        long beforeRemoteReads = getRemoteReads(beforeCacheStats);\n+\n+        assertThat(query(\"SELECT * FROM \" + cachedTableName))\n+                .containsExactly(row(\"Hello world\"));\n+\n+        // stats are propagated asynchronously, wait for them\n+        sleep(1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MTg5MzI0", "url": "https://github.com/trinodb/trino/pull/3786#pullrequestreview-415189324", "createdAt": "2020-05-20T10:14:08Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMDoxNzo1N1rOGYE5cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMDoyMDowNFrOGYE-CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg5OTI0OQ==", "bodyText": "call this file  hive.properties (corresponding to the file name it ends up being mounted at)", "url": "https://github.com/trinodb/trino/pull/3786#discussion_r427899249", "createdAt": "2020-05-20T10:17:57Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/resources/docker/presto-product-tests/conf/environment/multinode-cached/hive_cached.properties", "diffHunk": "@@ -0,0 +1,5 @@\n+connector.name=hive-hadoop2", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg5OTc0Ng==", "bodyText": "missing comma after hive_cache\ninstead of changing here, tag the caching tests with profile_specific_tests", "url": "https://github.com/trinodb/trino/pull/3786#discussion_r427899746", "createdAt": "2020-05-20T10:18:56Z", "author": {"login": "findepi"}, "path": "presto-product-tests/bin/product-tests-suite-1.sh", "diffHunk": "@@ -6,7 +6,12 @@ suite_exit_code=0\n \n presto-product-tests-launcher/bin/run-launcher test run \\\n     --environment multinode \\\n-    -- -x quarantine,big_query,storage_formats,profile_specific_tests,tpcds,cassandra,mysql,postgresql,kafka,hive_compression,\"${DISTRO_SKIP_GROUP}\" \\\n+    -- -x quarantine,big_query,storage_formats,profile_specific_tests,tpcds,cassandra,mysql,postgresql,kafka,hive_compression,hive_cache\"${DISTRO_SKIP_GROUP}\" \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkwMDE1MA==", "bodyText": "I think suite-1 is the longest. Can you confirm and pick a different suite?", "url": "https://github.com/trinodb/trino/pull/3786#discussion_r427900150", "createdAt": "2020-05-20T10:19:41Z", "author": {"login": "findepi"}, "path": "presto-product-tests/bin/product-tests-suite-1.sh", "diffHunk": "@@ -6,7 +6,12 @@ suite_exit_code=0\n \n presto-product-tests-launcher/bin/run-launcher test run \\\n     --environment multinode \\\n-    -- -x quarantine,big_query,storage_formats,profile_specific_tests,tpcds,cassandra,mysql,postgresql,kafka,hive_compression,\"${DISTRO_SKIP_GROUP}\" \\\n+    -- -x quarantine,big_query,storage_formats,profile_specific_tests,tpcds,cassandra,mysql,postgresql,kafka,hive_compression,hive_cache\"${DISTRO_SKIP_GROUP}\" \\\n+    || suite_exit_code=1\n+\n+presto-product-tests-launcher/bin/run-launcher test run \\\n+    --environment multinode-hive-caching \\\n+    -- -g hive_cache,storage_formats \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkwMDQyNQ==", "bodyText": "nit: TestHiveCaching? (same for test group)", "url": "https://github.com/trinodb/trino/pull/3786#discussion_r427900425", "createdAt": "2020-05-20T10:20:04Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveCache.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import io.airlift.units.Duration;\n+import io.prestosql.tempto.ProductTest;\n+import io.prestosql.tempto.query.QueryResult;\n+import org.testng.annotations.Test;\n+\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static io.airlift.testing.Assertions.assertGreaterThan;\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.testing.assertions.Assert.assertEventually;\n+import static io.prestosql.tests.TestGroups.HIVE_CACHE;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestHiveCache", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5fc209545ac0a5ccf0101e030430f6b1e213c3d", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/d5fc209545ac0a5ccf0101e030430f6b1e213c3d", "committedDate": "2020-05-20T12:05:55Z", "message": "Add AVRO product test group"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0c9edf1fe7e4da67c59944751aaa606e7984494", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/c0c9edf1fe7e4da67c59944751aaa606e7984494", "committedDate": "2020-05-20T12:17:41Z", "message": "Add Rubix HDFS product test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "c0c9edf1fe7e4da67c59944751aaa606e7984494", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/c0c9edf1fe7e4da67c59944751aaa606e7984494", "committedDate": "2020-05-20T12:17:41Z", "message": "Add Rubix HDFS product test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MzE5MjU4", "url": "https://github.com/trinodb/trino/pull/3786#pullrequestreview-415319258", "createdAt": "2020-05-20T13:14:12Z", "commit": {"oid": "d5fc209545ac0a5ccf0101e030430f6b1e213c3d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzoxNDoxMlrOGYK_Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzoxNDoxMlrOGYK_Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk5ODk3OA==", "bodyText": "i think this should be part of storage_formats group (no need for new group), especially if it exploits new way of interacting between presto, file format, and file system.", "url": "https://github.com/trinodb/trino/pull/3786#discussion_r427998978", "createdAt": "2020-05-20T13:14:12Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/TestGroups.java", "diffHunk": "@@ -67,6 +67,7 @@\n     public static final String KAFKA = \"kafka\";\n     public static final String TWO_HIVES = \"two_hives\";\n     public static final String ICEBERG = \"iceberg\";\n+    public static final String AVRO = \"avro\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5fc209545ac0a5ccf0101e030430f6b1e213c3d"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1184, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}