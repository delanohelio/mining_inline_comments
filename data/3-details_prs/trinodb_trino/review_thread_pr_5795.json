{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0NzMzMTI4", "number": 5795, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMTo1NDo1OVrOE0_qdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDo1NjozMVrOE1Qswg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDA0NDY4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMTo1NDo1OVrOHtB1VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMTo1NDo1OVrOHtB1VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk3ODAwNQ==", "bodyText": ".", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r516978005", "createdAt": "2020-11-03T21:54:59Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "diffHunk": "@@ -87,8 +98,11 @@ public StaticMetastoreLocator(List<URI> metastoreUris, @Nullable String metastor\n     public ThriftMetastoreClient createMetastoreClient(Optional<String> delegationToken)\n             throws TException\n     {\n+//        Comparator<Backoff> comparator = Comparator.comparingLong(Backoff::getBackoffDuration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDA0NjgxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMTo1NTo0MVrOHtB2nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjozMToxOFrOHtCzfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk3ODMzNQ==", "bodyText": "Any chance to keep fewer overloads of the ctor?", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r516978335", "createdAt": "2020-11-03T21:55:41Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "diffHunk": "@@ -63,14 +69,19 @@ public StaticMetastoreLocator(StaticMetastoreConfig config, ThriftMetastoreAuthe\n     }\n \n     public StaticMetastoreLocator(List<URI> metastoreUris, @Nullable String metastoreUsername, ThriftMetastoreClientFactory clientFactory)\n+    {\n+        this(metastoreUris, metastoreUsername, clientFactory, Ticker.systemTicker());\n+    }\n+\n+    private StaticMetastoreLocator(List<URI> metastoreUris, @Nullable String metastoreUsername, ThriftMetastoreClientFactory clientFactory, Ticker ticker)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5MzkxOQ==", "bodyText": "Not really. I could have 3 but then I would have duplication of param->field initialization.\nOr I could go with 2 - but then I would need to explicitly pass systemTicker in calling code which I dont want", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r516993919", "createdAt": "2020-11-03T22:31:18Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "diffHunk": "@@ -63,14 +69,19 @@ public StaticMetastoreLocator(StaticMetastoreConfig config, ThriftMetastoreAuthe\n     }\n \n     public StaticMetastoreLocator(List<URI> metastoreUris, @Nullable String metastoreUsername, ThriftMetastoreClientFactory clientFactory)\n+    {\n+        this(metastoreUris, metastoreUsername, clientFactory, Ticker.systemTicker());\n+    }\n+\n+    private StaticMetastoreLocator(List<URI> metastoreUris, @Nullable String metastoreUsername, ThriftMetastoreClientFactory clientFactory, Ticker ticker)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk3ODMzNQ=="}, "originalCommit": null, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDA1NTA3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMTo1ODo0N1rOHtB7xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjo1Mjo0NVrOHtDUdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk3OTY1NQ==", "bodyText": "pre-existing, but not so nice...\nWe're sorting a list and then getting indexOf for every element.\nWe could eg encode metastoreindex as a payload in the Backoff object,\nor map to Entry<Integer, Backoff> and sort that", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r516979655", "createdAt": "2020-11-03T21:58:47Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "diffHunk": "@@ -87,8 +98,11 @@ public StaticMetastoreLocator(List<URI> metastoreUris, @Nullable String metastor\n     public ThriftMetastoreClient createMetastoreClient(Optional<String> delegationToken)\n             throws TException\n     {\n+//        Comparator<Backoff> comparator = Comparator.comparingLong(Backoff::getBackoffDuration);\n+        Comparator<Backoff> comparator = Comparator.comparingLong(Backoff::getBackoffDuration)\n+                .thenComparingLong(Backoff::getLastFailureTimestamp);\n         List<Integer> indices = backoffs.stream()\n-                .sorted(Comparator.comparingLong(Backoff::getBackoffDuration))\n+                .sorted(comparator)\n                 .map(backoffs::indexOf)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5MDQ3MA==", "bodyText": "Yeah. I also noticed that. O(n^2) hurts. Even if not really matters :).\nI will see if it looks nicer if reworked.", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r516990470", "createdAt": "2020-11-03T22:23:22Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "diffHunk": "@@ -87,8 +98,11 @@ public StaticMetastoreLocator(List<URI> metastoreUris, @Nullable String metastor\n     public ThriftMetastoreClient createMetastoreClient(Optional<String> delegationToken)\n             throws TException\n     {\n+//        Comparator<Backoff> comparator = Comparator.comparingLong(Backoff::getBackoffDuration);\n+        Comparator<Backoff> comparator = Comparator.comparingLong(Backoff::getBackoffDuration)\n+                .thenComparingLong(Backoff::getLastFailureTimestamp);\n         List<Integer> indices = backoffs.stream()\n-                .sorted(Comparator.comparingLong(Backoff::getBackoffDuration))\n+                .sorted(comparator)\n                 .map(backoffs::indexOf)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk3OTY1NQ=="}, "originalCommit": null, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwMjM1Nw==", "bodyText": "PTAL 4c99d636bc4a72e2c146861aa07bb36a85e902c9", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r517002357", "createdAt": "2020-11-03T22:52:45Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "diffHunk": "@@ -87,8 +98,11 @@ public StaticMetastoreLocator(List<URI> metastoreUris, @Nullable String metastor\n     public ThriftMetastoreClient createMetastoreClient(Optional<String> delegationToken)\n             throws TException\n     {\n+//        Comparator<Backoff> comparator = Comparator.comparingLong(Backoff::getBackoffDuration);\n+        Comparator<Backoff> comparator = Comparator.comparingLong(Backoff::getBackoffDuration)\n+                .thenComparingLong(Backoff::getLastFailureTimestamp);\n         List<Integer> indices = backoffs.stream()\n-                .sorted(Comparator.comparingLong(Backoff::getBackoffDuration))\n+                .sorted(comparator)\n                 .map(backoffs::indexOf)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk3OTY1NQ=="}, "originalCommit": null, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDA2MTA4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjowMDoyOVrOHtB_Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjo0MToyNlrOHtDDWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk4MDUzOQ==", "bodyText": "do you want to reset lastFailureTimestamp here (as it used to be)?\nnote that you do not sort over success field", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r516980539", "createdAt": "2020-11-03T22:00:29Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "diffHunk": "@@ -138,34 +152,46 @@ private static URI checkMetastoreUri(URI uri)\n         return uri;\n     }\n \n-    private static class Backoff\n+    static class Backoff\n     {\n-        private static final long MIN_BACKOFF = new Duration(50, MILLISECONDS).roundTo(NANOSECONDS);\n-        private static final long MAX_BACKOFF = new Duration(60, SECONDS).roundTo(NANOSECONDS);\n+        static final long MIN_BACKOFF = new Duration(50, MILLISECONDS).roundTo(NANOSECONDS);\n+        static final long MAX_BACKOFF = new Duration(60, SECONDS).roundTo(NANOSECONDS);\n \n-        private final Ticker ticker = Ticker.systemTicker();\n+        private final Ticker ticker;\n         private long backoffDuration = MIN_BACKOFF;\n-        private OptionalLong lastFailureTimestamp = OptionalLong.empty();\n+        private boolean success = true;\n+        private long lastFailureTimestamp;\n+\n+        Backoff(Ticker ticker)\n+        {\n+            this.ticker = requireNonNull(ticker, \"ticker is null\");\n+        }\n \n         synchronized void fail()\n         {\n-            lastFailureTimestamp = OptionalLong.of(ticker.read());\n+            success = false;\n+            lastFailureTimestamp = ticker.read();\n             backoffDuration = min(backoffDuration * 2, MAX_BACKOFF);\n         }\n \n         synchronized void success()\n         {\n-            lastFailureTimestamp = OptionalLong.empty();\n+            success = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5Nzk3OA==", "bodyText": "Reworked to retain lastFailureTimestamp as OptionalLong and dropped success flag", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r516997978", "createdAt": "2020-11-03T22:41:26Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "diffHunk": "@@ -138,34 +152,46 @@ private static URI checkMetastoreUri(URI uri)\n         return uri;\n     }\n \n-    private static class Backoff\n+    static class Backoff\n     {\n-        private static final long MIN_BACKOFF = new Duration(50, MILLISECONDS).roundTo(NANOSECONDS);\n-        private static final long MAX_BACKOFF = new Duration(60, SECONDS).roundTo(NANOSECONDS);\n+        static final long MIN_BACKOFF = new Duration(50, MILLISECONDS).roundTo(NANOSECONDS);\n+        static final long MAX_BACKOFF = new Duration(60, SECONDS).roundTo(NANOSECONDS);\n \n-        private final Ticker ticker = Ticker.systemTicker();\n+        private final Ticker ticker;\n         private long backoffDuration = MIN_BACKOFF;\n-        private OptionalLong lastFailureTimestamp = OptionalLong.empty();\n+        private boolean success = true;\n+        private long lastFailureTimestamp;\n+\n+        Backoff(Ticker ticker)\n+        {\n+            this.ticker = requireNonNull(ticker, \"ticker is null\");\n+        }\n \n         synchronized void fail()\n         {\n-            lastFailureTimestamp = OptionalLong.of(ticker.read());\n+            success = false;\n+            lastFailureTimestamp = ticker.read();\n             backoffDuration = min(backoffDuration * 2, MAX_BACKOFF);\n         }\n \n         synchronized void success()\n         {\n-            lastFailureTimestamp = OptionalLong.empty();\n+            success = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk4MDUzOQ=="}, "originalCommit": null, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDA2Nzg3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjowMjo0OFrOHtCDaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjozMjoyMVrOHtC1Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk4MTYwOQ==", "bodyText": "This looks like incrementing lastFailureTimestamp value, but it may actually decrement it -- ticker can return a negative value.\nMaybe init lastFailureTimestamp to Long.MIN_VALUE to make reader's life easier?", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r516981609", "createdAt": "2020-11-03T22:02:48Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "diffHunk": "@@ -138,34 +152,46 @@ private static URI checkMetastoreUri(URI uri)\n         return uri;\n     }\n \n-    private static class Backoff\n+    static class Backoff\n     {\n-        private static final long MIN_BACKOFF = new Duration(50, MILLISECONDS).roundTo(NANOSECONDS);\n-        private static final long MAX_BACKOFF = new Duration(60, SECONDS).roundTo(NANOSECONDS);\n+        static final long MIN_BACKOFF = new Duration(50, MILLISECONDS).roundTo(NANOSECONDS);\n+        static final long MAX_BACKOFF = new Duration(60, SECONDS).roundTo(NANOSECONDS);\n \n-        private final Ticker ticker = Ticker.systemTicker();\n+        private final Ticker ticker;\n         private long backoffDuration = MIN_BACKOFF;\n-        private OptionalLong lastFailureTimestamp = OptionalLong.empty();\n+        private boolean success = true;\n+        private long lastFailureTimestamp;\n+\n+        Backoff(Ticker ticker)\n+        {\n+            this.ticker = requireNonNull(ticker, \"ticker is null\");\n+        }\n \n         synchronized void fail()\n         {\n-            lastFailureTimestamp = OptionalLong.of(ticker.read());\n+            success = false;\n+            lastFailureTimestamp = ticker.read();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5NDMzMQ==", "bodyText": "ticker can return a negative value\nGood point I did not know that. I will use MIN_VALUE", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r516994331", "createdAt": "2020-11-03T22:32:21Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "diffHunk": "@@ -138,34 +152,46 @@ private static URI checkMetastoreUri(URI uri)\n         return uri;\n     }\n \n-    private static class Backoff\n+    static class Backoff\n     {\n-        private static final long MIN_BACKOFF = new Duration(50, MILLISECONDS).roundTo(NANOSECONDS);\n-        private static final long MAX_BACKOFF = new Duration(60, SECONDS).roundTo(NANOSECONDS);\n+        static final long MIN_BACKOFF = new Duration(50, MILLISECONDS).roundTo(NANOSECONDS);\n+        static final long MAX_BACKOFF = new Duration(60, SECONDS).roundTo(NANOSECONDS);\n \n-        private final Ticker ticker = Ticker.systemTicker();\n+        private final Ticker ticker;\n         private long backoffDuration = MIN_BACKOFF;\n-        private OptionalLong lastFailureTimestamp = OptionalLong.empty();\n+        private boolean success = true;\n+        private long lastFailureTimestamp;\n+\n+        Backoff(Ticker ticker)\n+        {\n+            this.ticker = requireNonNull(ticker, \"ticker is null\");\n+        }\n \n         synchronized void fail()\n         {\n-            lastFailureTimestamp = OptionalLong.of(ticker.read());\n+            success = false;\n+            lastFailureTimestamp = ticker.read();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk4MTYwOQ=="}, "originalCommit": null, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MjgyMjUwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDo1Mzo0NVrOHtbskQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDo1Mzo0NVrOHtbskQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQwMTc0NQ==", "bodyText": "@VisibleForTesting", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r517401745", "createdAt": "2020-11-04T14:53:45Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "diffHunk": "@@ -138,15 +152,20 @@ private static URI checkMetastoreUri(URI uri)\n         return uri;\n     }\n \n-    private static class Backoff\n+    static class Backoff", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MjgzMTE1OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDo1NTozMlrOHtbyBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDo1NTozMlrOHtbyBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQwMzE0Mg==", "bodyText": "the public StaticMetastoreLocator(List<URI> metastoreUris, @Nullable String metastoreUsername, ThriftMetastoreClientFactory clientFactory) seems unused now", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r517403142", "createdAt": "2020-11-04T14:55:32Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "diffHunk": "@@ -63,14 +70,19 @@ public StaticMetastoreLocator(StaticMetastoreConfig config, ThriftMetastoreAuthe\n     }\n \n     public StaticMetastoreLocator(List<URI> metastoreUris, @Nullable String metastoreUsername, ThriftMetastoreClientFactory clientFactory)\n+    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MjgzNTg2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDo1NjozMVrOHtb08g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNTozNzowNFrOHtdpEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQwMzg5MA==", "bodyText": "Construct a list of attempted addresses (in order of attempt) so that \"Failed connecting to Hive metastore: \" below is accurate.\nThen you can remove addresses field.", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r517403890", "createdAt": "2020-11-04T14:56:31Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "diffHunk": "@@ -101,15 +102,14 @@ public ThriftMetastoreClient createMetastoreClient(Optional<String> delegationTo\n     {\n         Comparator<Backoff> comparator = Comparator.comparingLong(Backoff::getBackoffDuration)\n                 .thenComparingLong(Backoff::getLastFailureTimestamp);\n-        List<Integer> indices = backoffs.stream()\n+        List<Backoff> backoffsSorted = backoffs.stream()\n                 .sorted(comparator)\n-                .map(backoffs::indexOf)\n                 .collect(toImmutableList());\n \n         TException lastException = null;\n-        for (int index : indices) {\n+        for (Backoff backoff : backoffsSorted) {\n             try {\n-                return getClient(addresses.get(index), backoffs.get(index), delegationToken);\n+                return getClient(backoff.getAddress(), backoff, delegationToken);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQzMTE5NA==", "bodyText": "Yeah - did not come to my mind that maybe order in error message is not that important.", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r517431194", "createdAt": "2020-11-04T15:33:42Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "diffHunk": "@@ -101,15 +102,14 @@ public ThriftMetastoreClient createMetastoreClient(Optional<String> delegationTo\n     {\n         Comparator<Backoff> comparator = Comparator.comparingLong(Backoff::getBackoffDuration)\n                 .thenComparingLong(Backoff::getLastFailureTimestamp);\n-        List<Integer> indices = backoffs.stream()\n+        List<Backoff> backoffsSorted = backoffs.stream()\n                 .sorted(comparator)\n-                .map(backoffs::indexOf)\n                 .collect(toImmutableList());\n \n         TException lastException = null;\n-        for (int index : indices) {\n+        for (Backoff backoff : backoffsSorted) {\n             try {\n-                return getClient(addresses.get(index), backoffs.get(index), delegationToken);\n+                return getClient(backoff.getAddress(), backoff, delegationToken);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQwMzg5MA=="}, "originalCommit": null, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQzMzYxNg==", "bodyText": "Actually unsorted list could still be recovered from List of backoffs.", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r517433616", "createdAt": "2020-11-04T15:37:04Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "diffHunk": "@@ -101,15 +102,14 @@ public ThriftMetastoreClient createMetastoreClient(Optional<String> delegationTo\n     {\n         Comparator<Backoff> comparator = Comparator.comparingLong(Backoff::getBackoffDuration)\n                 .thenComparingLong(Backoff::getLastFailureTimestamp);\n-        List<Integer> indices = backoffs.stream()\n+        List<Backoff> backoffsSorted = backoffs.stream()\n                 .sorted(comparator)\n-                .map(backoffs::indexOf)\n                 .collect(toImmutableList());\n \n         TException lastException = null;\n-        for (int index : indices) {\n+        for (Backoff backoff : backoffsSorted) {\n             try {\n-                return getClient(addresses.get(index), backoffs.get(index), delegationToken);\n+                return getClient(backoff.getAddress(), backoff, delegationToken);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQwMzg5MA=="}, "originalCommit": null, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4913, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}