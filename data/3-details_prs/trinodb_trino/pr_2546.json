{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0MzUzMjQz", "number": 2546, "title": "Convert *impersonation to Launcher", "bodyText": "", "createdAt": "2020-01-17T23:07:00Z", "url": "https://github.com/trinodb/trino/pull/2546", "merged": true, "mergeCommit": {"oid": "8b2134a2d2c06bae076cc773040e5b6b7c4b5883"}, "closed": true, "closedAt": "2020-01-20T08:21:59Z", "author": {"login": "findepi"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb7VaE6gH2gAyMzY0MzUzMjQzOjUzZDJiMTQyODUwYzRhOTM1YTNkZGU2MzVhY2VhOThkMGQ1M2YzNDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb8HGEcgFqTM0NTEwNzMxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "53d2b142850c4a935a3dde635acea98d0d53f344", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/53d2b142850c4a935a3dde635acea98d0d53f344", "committedDate": "2020-01-17T21:12:57Z", "message": "Convert multinode to Launcher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99d4f8f39c3925d2355160758c337f43db6cd64e", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/99d4f8f39c3925d2355160758c337f43db6cd64e", "committedDate": "2020-01-17T23:07:25Z", "message": "Convert singlenode-hdfs-impersonation to Launcher"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "99d4f8f39c3925d2355160758c337f43db6cd64e", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/99d4f8f39c3925d2355160758c337f43db6cd64e", "committedDate": "2020-01-17T23:07:25Z", "message": "Convert singlenode-hdfs-impersonation to Launcher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ca342ac91e1bbe932e472be69d94dffd9482200", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/4ca342ac91e1bbe932e472be69d94dffd9482200", "committedDate": "2020-01-17T23:11:00Z", "message": "Convert singlenode-kerberos-hdfs-impersonation to Launcher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb1a4619b3a7339cc9d876b5050b2f4e9a6c1c58", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/cb1a4619b3a7339cc9d876b5050b2f4e9a6c1c58", "committedDate": "2020-01-17T23:14:57Z", "message": "Convert singlenode-hive-impersonation to Launcher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "167e5b32fff62ca8622cc076165dfd1b44b6c770", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/167e5b32fff62ca8622cc076165dfd1b44b6c770", "committedDate": "2020-01-17T23:17:42Z", "message": "Convert singlenode-kerberos-hive-impersonation to Launcher"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1MTA3MzE4", "url": "https://github.com/trinodb/trino/pull/2546#pullrequestreview-345107318", "createdAt": "2020-01-20T06:59:17Z", "commit": {"oid": "53d2b142850c4a935a3dde635acea98d0d53f344"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwNjo1OToxN1rOFfU4pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwNzowNTo1MlrOFfU-SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM5MjM1Nw==", "bodyText": "we used to have couple workers. Maybe let's use 2 workers?", "url": "https://github.com/trinodb/trino/pull/2546#discussion_r368392357", "createdAt": "2020-01-20T06:59:17Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/Multinode.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.environment;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.env.common.AbstractEnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.common.Hadoop;\n+import io.prestosql.tests.product.launcher.env.common.Standard;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.time.Duration;\n+\n+import static io.prestosql.tests.product.launcher.env.common.Hadoop.CONTAINER_PRESTO_HIVE_PROPERTIES;\n+import static io.prestosql.tests.product.launcher.env.common.Standard.CONTAINER_PRESTO_CONFIG_PROPERTIES;\n+import static io.prestosql.tests.product.launcher.env.common.Standard.CONTAINER_PRESTO_JVM_CONFIG;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.containers.BindMode.READ_ONLY;\n+\n+public final class Multinode\n+        extends AbstractEnvironmentProvider\n+{\n+    private final PathResolver pathResolver;\n+    private final DockerFiles dockerFiles;\n+\n+    private final String imagesVersion;\n+    private final File serverPackage;\n+\n+    @Inject\n+    public Multinode(\n+            PathResolver pathResolver,\n+            DockerFiles dockerFiles,\n+            Standard standard,\n+            Hadoop hadoop,\n+            EnvironmentOptions environmentOptions)\n+    {\n+        super(ImmutableList.of(standard, hadoop));\n+        this.pathResolver = requireNonNull(pathResolver, \"pathResolver is null\");\n+        this.dockerFiles = requireNonNull(dockerFiles, \"dockerFiles is null\");\n+        imagesVersion = requireNonNull(environmentOptions.imagesVersion, \"environmentOptions.imagesVersion is null\");\n+        serverPackage = requireNonNull(environmentOptions.serverPackage, \"environmentOptions.serverPackage is null\");\n+    }\n+\n+    @Override\n+    protected void extendEnvironment(Environment.Builder builder)\n+    {\n+        super.extendEnvironment(builder);\n+\n+        builder.configureContainer(\"presto-master\", container -> {\n+            container\n+                    .withFileSystemBind(dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode/multinode-master-jvm.config\"), CONTAINER_PRESTO_JVM_CONFIG, READ_ONLY)\n+                    .withFileSystemBind(dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode/multinode-master-config.properties\"), CONTAINER_PRESTO_CONFIG_PROPERTIES, READ_ONLY);\n+        });\n+\n+        builder.addContainer(\"presto-worker\", createPrestoWorker());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53d2b142850c4a935a3dde635acea98d0d53f344"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM5MjQ4Mw==", "bodyText": "can we take image from presto-master container? The best would be to copy presto-master and modify what is needed? Or maybe we need to have a base presto container that could be used to setup coordinator and worker?", "url": "https://github.com/trinodb/trino/pull/2546#discussion_r368392483", "createdAt": "2020-01-20T06:59:52Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/Multinode.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.environment;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.env.common.AbstractEnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.common.Hadoop;\n+import io.prestosql.tests.product.launcher.env.common.Standard;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.time.Duration;\n+\n+import static io.prestosql.tests.product.launcher.env.common.Hadoop.CONTAINER_PRESTO_HIVE_PROPERTIES;\n+import static io.prestosql.tests.product.launcher.env.common.Standard.CONTAINER_PRESTO_CONFIG_PROPERTIES;\n+import static io.prestosql.tests.product.launcher.env.common.Standard.CONTAINER_PRESTO_JVM_CONFIG;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.containers.BindMode.READ_ONLY;\n+\n+public final class Multinode\n+        extends AbstractEnvironmentProvider\n+{\n+    private final PathResolver pathResolver;\n+    private final DockerFiles dockerFiles;\n+\n+    private final String imagesVersion;\n+    private final File serverPackage;\n+\n+    @Inject\n+    public Multinode(\n+            PathResolver pathResolver,\n+            DockerFiles dockerFiles,\n+            Standard standard,\n+            Hadoop hadoop,\n+            EnvironmentOptions environmentOptions)\n+    {\n+        super(ImmutableList.of(standard, hadoop));\n+        this.pathResolver = requireNonNull(pathResolver, \"pathResolver is null\");\n+        this.dockerFiles = requireNonNull(dockerFiles, \"dockerFiles is null\");\n+        imagesVersion = requireNonNull(environmentOptions.imagesVersion, \"environmentOptions.imagesVersion is null\");\n+        serverPackage = requireNonNull(environmentOptions.serverPackage, \"environmentOptions.serverPackage is null\");\n+    }\n+\n+    @Override\n+    protected void extendEnvironment(Environment.Builder builder)\n+    {\n+        super.extendEnvironment(builder);\n+\n+        builder.configureContainer(\"presto-master\", container -> {\n+            container\n+                    .withFileSystemBind(dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode/multinode-master-jvm.config\"), CONTAINER_PRESTO_JVM_CONFIG, READ_ONLY)\n+                    .withFileSystemBind(dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode/multinode-master-config.properties\"), CONTAINER_PRESTO_CONFIG_PROPERTIES, READ_ONLY);\n+        });\n+\n+        builder.addContainer(\"presto-worker\", createPrestoWorker());\n+    }\n+\n+    @SuppressWarnings(\"resource\")\n+    private DockerContainer createPrestoWorker()\n+    {\n+        DockerContainer container = new DockerContainer(\"prestodev/centos6-oj8:\" + imagesVersion)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53d2b142850c4a935a3dde635acea98d0d53f344"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM5MzExOQ==", "bodyText": "What is the issue here? I am afraid this is not the only one such test?", "url": "https://github.com/trinodb/trino/pull/2546#discussion_r368393119", "createdAt": "2020-01-20T07:02:37Z", "author": {"login": "kokosing"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestAvroSchemaUrl.java", "diffHunk": "@@ -46,6 +47,8 @@\n     public void setup()\n             throws Exception\n     {\n+        // TODO move Avro schema files to classpath", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53d2b142850c4a935a3dde635acea98d0d53f344"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM5MzgwMA==", "bodyText": "I think we could try to merge metastore and hdfs impersonation into single environment and have single environment with no impersonation. Maybe  a follow up?", "url": "https://github.com/trinodb/trino/pull/2546#discussion_r368393800", "createdAt": "2020-01-20T07:05:52Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentModule.java", "diffHunk": "@@ -49,12 +50,18 @@ public void configure(Binder binder)\n         binder.bind(Kerberos.class);\n \n         MapBinder<String, EnvironmentProvider> environments = newMapBinder(binder, String.class, EnvironmentProvider.class);\n+\n         environments.addBinding(\"singlenode\").to(Singlenode.class);\n+\n         environments.addBinding(\"singlenode-hive-impersonation\").to(SinglenodeHiveImpersonation.class);\n+        environments.addBinding(\"singlenode-kerberos-hive-impersonation\").to(SinglenodeKerberosHiveImpersonation.class);\n+\n         environments.addBinding(\"singlenode-hdfs-impersonation\").to(SinglenodeHdfsImpersonation.class);\n         environments.addBinding(\"singlenode-kerberos-hdfs-impersonation\").to(SinglenodeKerberosHdfsImpersonation.class);\n         environments.addBinding(\"singlenode-kerberos-hdfs-no-impersonation\").to(SinglenodeKerberosHdfsNoImpersonation.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167e5b32fff62ca8622cc076165dfd1b44b6c770"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 916, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}