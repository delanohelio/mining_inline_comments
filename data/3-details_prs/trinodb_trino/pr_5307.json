{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzNjc1NjM3", "number": 5307, "title": "Add support for setting column comment in PostgreSQL", "bodyText": "Implements https://stackoverflow.com/questions/64063891/postgress-column-comment-in-presto", "createdAt": "2020-09-27T06:05:51Z", "url": "https://github.com/trinodb/trino/pull/5307", "merged": true, "mergeCommit": {"oid": "142c8e20fb14535064667f8a7978525aa6e1f6f5"}, "closed": true, "closedAt": "2020-09-29T03:30:19Z", "author": {"login": "ebyhr"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdNDD-7gFqTQ5NzA5OTQ4MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdNd2iYABqjM4MTcwNTE0NzE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MDk5NDgx", "url": "https://github.com/trinodb/trino/pull/5307#pullrequestreview-497099481", "createdAt": "2020-09-27T18:08:11Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxODowODoxMVrOHYo93w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxODoxMjoxM1rOHYo_NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5OTA3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    stats.getAddColumn().wrap(() -> delegate().setColumnComment(identity, handle, column, comment));\n          \n          \n            \n                    stats.getSetColumnComment().wrap(() -> delegate().setColumnComment(identity, handle, column, comment));", "url": "https://github.com/trinodb/trino/pull/5307#discussion_r495599071", "createdAt": "2020-09-27T18:08:11Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/jmx/StatisticsAwareJdbcClient.java", "diffHunk": "@@ -158,6 +158,12 @@ public PreparedStatement buildSql(ConnectorSession session, Connection connectio\n         return stats.getBuildSql().wrap(() -> delegate().buildSql(session, connection, split, tableHandle, columnHandles));\n     }\n \n+    @Override\n+    public void setColumnComment(JdbcIdentity identity, JdbcTableHandle handle, JdbcColumnHandle column, Optional<String> comment)\n+    {\n+        stats.getAddColumn().wrap(() -> delegate().setColumnComment(identity, handle, column, comment));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5OTEyMg==", "bodyText": "What Optional.empty() means? A null?", "url": "https://github.com/trinodb/trino/pull/5307#discussion_r495599122", "createdAt": "2020-09-27T18:08:57Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/CachingJdbcClient.java", "diffHunk": "@@ -274,6 +274,13 @@ public void dropSchema(JdbcIdentity identity, String schemaName)\n         invalidateSchemasCache();\n     }\n \n+    @Override\n+    public void setColumnComment(JdbcIdentity identity, JdbcTableHandle handle, JdbcColumnHandle column, Optional<String> comment)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5OTE3NQ==", "bodyText": "orElse(null)?", "url": "https://github.com/trinodb/trino/pull/5307#discussion_r495599175", "createdAt": "2020-09-27T18:09:25Z", "author": {"login": "kokosing"}, "path": "presto-postgresql/src/main/java/io/prestosql/plugin/postgresql/PostgreSqlClient.java", "diffHunk": "@@ -510,6 +510,17 @@ private static LongWriteFunction timestampWriteFunction(TimestampType timestampT\n         };\n     }\n \n+    @Override\n+    public void setColumnComment(JdbcIdentity identity, JdbcTableHandle handle, JdbcColumnHandle column, Optional<String> comment)\n+    {\n+        String sql = format(\n+                \"COMMENT ON COLUMN %s.%s IS '%s'\",\n+                quoted(handle.getRemoteTableName()),\n+                quoted(column.getColumnName()),\n+                comment.orElse(\"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5OTQxMg==", "bodyText": "PostgreSQL doesn't store empty comment\n\nThen maybe we should not allow users to set empty comments. Displaying nulls when empty string was set could be misleading.", "url": "https://github.com/trinodb/trino/pull/5307#discussion_r495599412", "createdAt": "2020-09-27T18:12:13Z", "author": {"login": "kokosing"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlIntegrationSmokeTest.java", "diffHunk": "@@ -393,12 +393,18 @@ public void testColumnComment()\n     {\n         try (AutoCloseable ignore = withTable(\"tpch.test_column_comment\",\n                 \"(col1 bigint, col2 bigint, col3 bigint)\")) {\n-            execute(\"COMMENT ON COLUMN tpch.test_column_comment.col1 IS 'test comment'\");\n-            execute(\"COMMENT ON COLUMN tpch.test_column_comment.col2 IS ''\"); // it will be NULL, PostgreSQL doesn't store empty comment\n+            assertUpdate(\"COMMENT ON COLUMN tpch.test_column_comment.col1 IS 'test comment'\");\n+            assertUpdate(\"COMMENT ON COLUMN tpch.test_column_comment.col2 IS ''\"); // it will be NULL, PostgreSQL doesn't store empty comment", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3ODkxMTkz", "url": "https://github.com/trinodb/trino/pull/5307#pullrequestreview-497891193", "createdAt": "2020-09-28T20:58:53Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3OTA3OTE5", "url": "https://github.com/trinodb/trino/pull/5307#pullrequestreview-497907919", "createdAt": "2020-09-28T21:26:38Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMToyNjozOFrOHZQOHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMToyNzowNlrOHZQO4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI0MjIwNQ==", "bodyText": "it'd be better to generate explicit COMMENT ... IS NULL when comment.isEmpty()", "url": "https://github.com/trinodb/trino/pull/5307#discussion_r496242205", "createdAt": "2020-09-28T21:26:38Z", "author": {"login": "findepi"}, "path": "presto-postgresql/src/main/java/io/prestosql/plugin/postgresql/PostgreSqlClient.java", "diffHunk": "@@ -510,6 +510,17 @@ private static LongWriteFunction timestampWriteFunction(TimestampType timestampT\n         };\n     }\n \n+    @Override\n+    public void setColumnComment(JdbcIdentity identity, JdbcTableHandle handle, JdbcColumnHandle column, Optional<String> comment)\n+    {\n+        String sql = format(\n+                \"COMMENT ON COLUMN %s.%s IS '%s'\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI0MjQwMA==", "bodyText": "Can you please define issues to cover other JDBC connectors?", "url": "https://github.com/trinodb/trino/pull/5307#discussion_r496242400", "createdAt": "2020-09-28T21:27:06Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcClient.java", "diffHunk": "@@ -85,6 +88,11 @@ PreparedStatement buildSql(ConnectorSession session, Connection connection, Jdbc\n \n     boolean isLimitGuaranteed(ConnectorSession session);\n \n+    default void setColumnComment(JdbcIdentity identity, JdbcTableHandle handle, JdbcColumnHandle column, Optional<String> comment)\n+    {\n+        throw new PrestoException(NOT_SUPPORTED, \"This connector does not support setting column comments\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fefef10197a66d1d5e980529c4a14e620d9060e2", "author": {"user": {"login": "ebyhr", "name": "Yuya Ebihara"}}, "url": "https://github.com/trinodb/trino/commit/fefef10197a66d1d5e980529c4a14e620d9060e2", "committedDate": "2020-09-29T01:24:42Z", "message": "Add support for setting column comment in PostgreSQL"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "fefef10197a66d1d5e980529c4a14e620d9060e2", "author": {"user": {"login": "ebyhr", "name": "Yuya Ebihara"}}, "url": "https://github.com/trinodb/trino/commit/fefef10197a66d1d5e980529c4a14e620d9060e2", "committedDate": "2020-09-29T01:24:42Z", "message": "Add support for setting column comment in PostgreSQL"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3799, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}