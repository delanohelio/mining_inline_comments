{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3ODA0MTkw", "number": 5181, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTozMDozOFrOEk7jTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOTozOTo0OFrOEvsGOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTU5ODg2OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTozMDozOFrOHUJO-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMTozNjowNlrOHk38nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg4NDg1OQ==", "bodyText": "This looks like a specialization of multiply(Slice left, Slice right, Slice result). Am I right?\nIf so can we somehow use specialization in the implementation of generic multiply(Slice left, Slice right, Slice result)?", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r490884859", "createdAt": "2020-09-18T11:30:38Z", "author": {"login": "kokosing"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -481,6 +495,108 @@ public static void multiply(Slice left, Slice right, Slice result)\n         pack(result, (int) z0, (int) z1, (int) z2, (int) z3, leftNegative != rightNegative);\n     }\n \n+    public static void multiply(Slice left, long right, Slice result)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg5ODIwOA==", "bodyText": "Am I right?\n\nYes you are\n\nIf so can we somehow use specialization in the implementation of generic multiply(Slice left, Slice right, Slice result)?\n\nNot really. The generic version is pretty optimized in terms of avoiding multiplying by 0. The biggest gain of this specialization is that it is not necessary to create a Slice object which is pretty costly.\nIt might make sense the other way around - generic version uses longs (or ints) and specialized version extracts those longs from slice. But this is for another occasion.", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r490898208", "createdAt": "2020-09-18T11:54:45Z", "author": {"login": "skrzypo987"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -481,6 +495,108 @@ public static void multiply(Slice left, Slice right, Slice result)\n         pack(result, (int) z0, (int) z1, (int) z2, (int) z3, leftNegative != rightNegative);\n     }\n \n+    public static void multiply(Slice left, long right, Slice result)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg4NDg1OQ=="}, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYzMjcxMA==", "bodyText": "Can we extract a method from public static void multiply(Slice left, Slice right, Slice result) which we could use in implementation of multiply(Slice left, long right, Slice result) and multiply(long left, long right, Slice result)?\nI am bit concerned of amount of complex code that was copied.", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r507632710", "createdAt": "2020-10-19T10:16:33Z", "author": {"login": "kokosing"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -481,6 +495,108 @@ public static void multiply(Slice left, Slice right, Slice result)\n         pack(result, (int) z0, (int) z1, (int) z2, (int) z3, leftNegative != rightNegative);\n     }\n \n+    public static void multiply(Slice left, long right, Slice result)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg4NDg1OQ=="}, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY2MzY1OQ==", "bodyText": "That can be done with many methods here. The question is how much do we want to do in this PR.\nBut let's agree on this particular method.\nI'm going to rewrite it to a common multiply(long left, long right, Slice result) method and see if this changes performance in any way.", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r507663659", "createdAt": "2020-10-19T11:12:19Z", "author": {"login": "skrzypo987"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -481,6 +495,108 @@ public static void multiply(Slice left, Slice right, Slice result)\n         pack(result, (int) z0, (int) z1, (int) z2, (int) z3, leftNegative != rightNegative);\n     }\n \n+    public static void multiply(Slice left, long right, Slice result)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg4NDg1OQ=="}, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY3ODAyNQ==", "bodyText": "That can be done with many methods here.\n\nCorrect, I took this one as an example. If it would work here, then it should work for others.", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r507678025", "createdAt": "2020-10-19T11:39:46Z", "author": {"login": "kokosing"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -481,6 +495,108 @@ public static void multiply(Slice left, Slice right, Slice result)\n         pack(result, (int) z0, (int) z1, (int) z2, (int) z3, leftNegative != rightNegative);\n     }\n \n+    public static void multiply(Slice left, long right, Slice result)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg4NDg1OQ=="}, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQyNzQyMA==", "bodyText": "If it would work here, then it should work for others\n\nWith JIT? Dream on.\nI made some tests with this approach. Results are interesting - out of 5 benchmarks 3 are the same, one is slightly faster(!) and one is terribly slower(~40%).\nI'm going to take care of that in another PR. I'll try to find a common ground between performance and code reusability.", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r508427420", "createdAt": "2020-10-20T11:36:06Z", "author": {"login": "skrzypo987"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -481,6 +495,108 @@ public static void multiply(Slice left, Slice right, Slice result)\n         pack(result, (int) z0, (int) z1, (int) z2, (int) z3, leftNegative != rightNegative);\n     }\n \n+    public static void multiply(Slice left, long right, Slice result)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg4NDg1OQ=="}, "originalCommit": null, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTYwMjMzOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/test/java/io/prestosql/spi/type/TestUnscaledDecimal128Arithmetic.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTozMTozOFrOHUJRRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjowMjowOVrOHUKQ_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg4NTQ0Nw==", "bodyText": "Do you you think it makes sense to extract refactors to separate preparatory commit before this one? That way it will be clear to see what kind of new tests case were added.", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r490885447", "createdAt": "2020-09-18T11:31:38Z", "author": {"login": "kokosing"}, "path": "presto-spi/src/test/java/io/prestosql/spi/type/TestUnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -768,4 +772,43 @@ private static Slice negate(Slice slice)\n         }\n         return ints;\n     }\n+\n+    private static boolean isShort(BigInteger value)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkwMTc1Ng==", "bodyText": "I did think about it.\nHowever those test will not work without the new methods and methods should not be commited without being properly tested. Refactor is strictly for the reason of testing new methods using existing test cases.\nExactly the same goes for assertRescale in later commit", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r490901756", "createdAt": "2020-09-18T12:02:09Z", "author": {"login": "skrzypo987"}, "path": "presto-spi/src/test/java/io/prestosql/spi/type/TestUnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -768,4 +772,43 @@ private static Slice negate(Slice slice)\n         }\n         return ints;\n     }\n+\n+    private static boolean isShort(BigInteger value)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg4NTQ0Nw=="}, "originalCommit": null, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTYwNzYxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/type/DecimalCasts.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTozMjo1N1rOHUJUgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjowMzoxMFrOHUKSqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg4NjI3NQ==", "bodyText": "why not multiply(tenToScale, value)?", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r490886275", "createdAt": "2020-09-18T11:32:57Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/type/DecimalCasts.java", "diffHunk": "@@ -223,7 +223,7 @@ public static long bigintToShortDecimal(long value, long precision, long scale,\n     public static Slice bigintToLongDecimal(long value, long precision, long scale, BigInteger tenToScale)\n     {\n         try {\n-            Slice decimal = multiply(unscaledDecimal(value), unscaledDecimal(tenToScale));\n+            Slice decimal = multiply(unscaledDecimal(tenToScale), value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkwMjE4NQ==", "bodyText": "tenToScale is a BigInteger", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r490902185", "createdAt": "2020-09-18T12:03:10Z", "author": {"login": "skrzypo987"}, "path": "presto-main/src/main/java/io/prestosql/type/DecimalCasts.java", "diffHunk": "@@ -223,7 +223,7 @@ public static long bigintToShortDecimal(long value, long precision, long scale,\n     public static Slice bigintToLongDecimal(long value, long precision, long scale, BigInteger tenToScale)\n     {\n         try {\n-            Slice decimal = multiply(unscaledDecimal(value), unscaledDecimal(tenToScale));\n+            Slice decimal = multiply(unscaledDecimal(tenToScale), value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg4NjI3NQ=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTYwOTk3OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/test/java/io/prestosql/spi/type/TestUnscaledDecimal128Arithmetic.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTozMzozNFrOHUJV8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjowNDo0NVrOHUKVkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg4NjY0Mg==", "bodyText": "refactor in separate commit?", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r490886642", "createdAt": "2020-09-18T11:33:34Z", "author": {"login": "kokosing"}, "path": "presto-spi/src/test/java/io/prestosql/spi/type/TestUnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -811,4 +811,13 @@ private static void assertMultiply(long a, long b, long result)\n     {\n         assertMultiply(a, b, BigInteger.valueOf(result));\n     }\n+\n+    private static void assertRescale(Slice decimal, int rescale, Slice expected)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkwMjkzMQ==", "bodyText": "same as assertMultiply", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r490902931", "createdAt": "2020-09-18T12:04:45Z", "author": {"login": "skrzypo987"}, "path": "presto-spi/src/test/java/io/prestosql/spi/type/TestUnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -811,4 +811,13 @@ private static void assertMultiply(long a, long b, long result)\n     {\n         assertMultiply(a, b, BigInteger.valueOf(result));\n     }\n+\n+    private static void assertRescale(Slice decimal, int rescale, Slice expected)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg4NjY0Mg=="}, "originalCommit": null, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjY2OTIwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/type/DecimalCasts.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjoxMjozM1rOHUTffA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNjoxMDozMFrOHUhqnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1MjkyNA==", "bodyText": "unscaledDecimal and others - method names should start with imperative", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r491052924", "createdAt": "2020-09-18T16:12:33Z", "author": {"login": "iirekm"}, "path": "presto-main/src/main/java/io/prestosql/type/DecimalCasts.java", "diffHunk": "@@ -339,7 +339,7 @@ public static long smallintToShortDecimal(long value, long precision, long scale\n     public static Slice smallintToLongDecimal(long value, long precision, long scale, BigInteger tenToScale)\n     {\n         try {\n-            Slice decimal = multiply(unscaledDecimal(value), unscaledDecimal(tenToScale));\n+            Slice decimal = multiply(unscaledDecimal(tenToScale), value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4NTE0OQ==", "bodyText": "Not changed in this PR", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r491285149", "createdAt": "2020-09-19T06:10:30Z", "author": {"login": "skrzypo987"}, "path": "presto-main/src/main/java/io/prestosql/type/DecimalCasts.java", "diffHunk": "@@ -339,7 +339,7 @@ public static long smallintToShortDecimal(long value, long precision, long scale\n     public static Slice smallintToLongDecimal(long value, long precision, long scale, BigInteger tenToScale)\n     {\n         try {\n-            Slice decimal = multiply(unscaledDecimal(value), unscaledDecimal(tenToScale));\n+            Slice decimal = multiply(unscaledDecimal(tenToScale), value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1MjkyNA=="}, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjY4OTAyOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjoxODoyMFrOHUTrgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNjowNTo0MlrOHUhk_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1NjAwMw==", "bodyText": "copy and paste, somebody fixes an issue in one place, forgets another and we have a bug; generalize the methods, or if not possible (eg would hurt performance), write a script which generates this copy and paste", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r491056003", "createdAt": "2020-09-18T16:18:20Z", "author": {"login": "iirekm"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -481,6 +562,172 @@ public static void multiply(Slice left, Slice right, Slice result)\n         pack(result, (int) z0, (int) z1, (int) z2, (int) z3, leftNegative != rightNegative);\n     }\n \n+    public static void multiply(Slice left, long right, Slice result)\n+    {\n+        checkArgument(result.length() == NUMBER_OF_LONGS * Long.BYTES);\n+\n+        long l0 = toUnsignedLong(getInt(left, 0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4MzcxMA==", "bodyText": "Scripting here is too much of a change for now, however seems like idea worth researching.\nThe whole point of this change is to ungeneralize and copy paste so that performance is increased.\nSee @kokosing comment about generalizing.", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r491283710", "createdAt": "2020-09-19T06:05:42Z", "author": {"login": "skrzypo987"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -481,6 +562,172 @@ public static void multiply(Slice left, Slice right, Slice result)\n         pack(result, (int) z0, (int) z1, (int) z2, (int) z3, leftNegative != rightNegative);\n     }\n \n+    public static void multiply(Slice left, long right, Slice result)\n+    {\n+        checkArgument(result.length() == NUMBER_OF_LONGS * Long.BYTES);\n+\n+        long l0 = toUnsignedLong(getInt(left, 0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1NjAwMw=="}, "originalCommit": null, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjY5MDIwOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjoxODo0NlrOHUTsWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNjowOTo1MVrOHUhp4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1NjIxNg==", "bodyText": "no explanation how it all works, it's very hard to decipher it from looking at code", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r491056216", "createdAt": "2020-09-18T16:18:46Z", "author": {"login": "iirekm"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -481,6 +562,172 @@ public static void multiply(Slice left, Slice right, Slice result)\n         pack(result, (int) z0, (int) z1, (int) z2, (int) z3, leftNegative != rightNegative);\n     }\n \n+    public static void multiply(Slice left, long right, Slice result)\n+    {\n+        checkArgument(result.length() == NUMBER_OF_LONGS * Long.BYTES);\n+\n+        long l0 = toUnsignedLong(getInt(left, 0));\n+        long l1 = toUnsignedLong(getInt(left, 1));\n+        long l2 = toUnsignedLong(getInt(left, 2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4NDk2Mw==", "bodyText": "The domain of this class is binary operations. With knowledge about it multiplication is trivial. Al the actually non-trivial methods seems clearly commented like divide-related methods.\nLet me give you an analogy - Math.sin method does not document what sin is, it assumes that if you use Math class, you probably know math on a basic/intermediate level.", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r491284963", "createdAt": "2020-09-19T06:09:51Z", "author": {"login": "skrzypo987"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -481,6 +562,172 @@ public static void multiply(Slice left, Slice right, Slice result)\n         pack(result, (int) z0, (int) z1, (int) z2, (int) z3, leftNegative != rightNegative);\n     }\n \n+    public static void multiply(Slice left, long right, Slice result)\n+    {\n+        checkArgument(result.length() == NUMBER_OF_LONGS * Long.BYTES);\n+\n+        long l0 = toUnsignedLong(getInt(left, 0));\n+        long l1 = toUnsignedLong(getInt(left, 1));\n+        long l2 = toUnsignedLong(getInt(left, 2));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1NjIxNg=="}, "originalCommit": null, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjcwMTEyOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjoyMTo1M1rOHUTzEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNjoxMzowNFrOHUhuNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1NzkzNg==", "bodyText": "why not javadoc?\n\nsimilarly - copy & paste to generalize or generate", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r491057936", "createdAt": "2020-09-18T16:21:53Z", "author": {"login": "iirekm"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -239,13 +271,41 @@ else if (rescaleFactor > 0) {\n             if (rescaleFactor >= POWERS_OF_TEN.length) {\n                 throwOverflowException();\n             }\n-            multiply(decimal, POWERS_OF_TEN[rescaleFactor], result);\n+            shiftLeftBy10(decimal, rescaleFactor, result);\n         }\n         else {\n             scaleDownTruncate(decimal, -rescaleFactor, result);\n         }\n     }\n \n+    // Multiplies by 10^rescaleFactor. Only positive rescaleFactor values are allowed\n+    private static void shiftLeftBy10(Slice decimal, int rescaleFactor, Slice result)\n+    {\n+        if (rescaleFactor <= MAX_POWER_OF_TEN_INT) {\n+            multiply(decimal, (int) longTenToNth(rescaleFactor), result);\n+        }\n+        else if (rescaleFactor <= MAX_POWER_OF_TEN_LONG) {\n+            multiply(decimal, longTenToNth(rescaleFactor), result);\n+        }\n+        else {\n+            multiply(POWERS_OF_TEN[rescaleFactor], decimal, result);\n+        }\n+    }\n+\n+    // Multiplies by 10^rescaleFactor. Only positive rescaleFactor values are allowed", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4NjA3MQ==", "bodyText": "It is a copy-paste. Javadoc is rarely used in this class.", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r491286071", "createdAt": "2020-09-19T06:13:04Z", "author": {"login": "skrzypo987"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -239,13 +271,41 @@ else if (rescaleFactor > 0) {\n             if (rescaleFactor >= POWERS_OF_TEN.length) {\n                 throwOverflowException();\n             }\n-            multiply(decimal, POWERS_OF_TEN[rescaleFactor], result);\n+            shiftLeftBy10(decimal, rescaleFactor, result);\n         }\n         else {\n             scaleDownTruncate(decimal, -rescaleFactor, result);\n         }\n     }\n \n+    // Multiplies by 10^rescaleFactor. Only positive rescaleFactor values are allowed\n+    private static void shiftLeftBy10(Slice decimal, int rescaleFactor, Slice result)\n+    {\n+        if (rescaleFactor <= MAX_POWER_OF_TEN_INT) {\n+            multiply(decimal, (int) longTenToNth(rescaleFactor), result);\n+        }\n+        else if (rescaleFactor <= MAX_POWER_OF_TEN_LONG) {\n+            multiply(decimal, longTenToNth(rescaleFactor), result);\n+        }\n+        else {\n+            multiply(POWERS_OF_TEN[rescaleFactor], decimal, result);\n+        }\n+    }\n+\n+    // Multiplies by 10^rescaleFactor. Only positive rescaleFactor values are allowed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1NzkzNg=="}, "originalCommit": null, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjcwNzAyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/type/DecimalOperators.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjoyMzozMlrOHUT2vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNjoxMjowNlrOHUhsyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1ODg3OA==", "bodyText": "according to \"clean code\" method should not have more than 3 params", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r491058878", "createdAt": "2020-09-18T16:23:32Z", "author": {"login": "iirekm"}, "path": "presto-main/src/main/java/io/prestosql/type/DecimalOperators.java", "diffHunk": "@@ -124,13 +124,32 @@ public static Slice addLongLongLong(Slice a, Slice b, int rescale, boolean left)\n     @UsedByGeneratedCode\n     public static Slice addShortLongLong(long a, Slice b, int rescale, boolean left)\n     {\n-        return internalAddLongLongLong(unscaledDecimal(a), b, rescale, left);\n+        return addLongShortLong(b, a, rescale, !left);\n     }\n \n     @UsedByGeneratedCode\n-    public static Slice addLongShortLong(Slice a, long b, int rescale, boolean left)\n+    public static Slice addLongShortLong(Slice a, long b, int rescale, boolean rescaleLeft)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4NTcwNg==", "bodyText": "1.Bytecode generator thinks otherwise (UsedByGeneratedCode annotation)\n2.Not changed in this PR", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r491285706", "createdAt": "2020-09-19T06:12:06Z", "author": {"login": "skrzypo987"}, "path": "presto-main/src/main/java/io/prestosql/type/DecimalOperators.java", "diffHunk": "@@ -124,13 +124,32 @@ public static Slice addLongLongLong(Slice a, Slice b, int rescale, boolean left)\n     @UsedByGeneratedCode\n     public static Slice addShortLongLong(long a, Slice b, int rescale, boolean left)\n     {\n-        return internalAddLongLongLong(unscaledDecimal(a), b, rescale, left);\n+        return addLongShortLong(b, a, rescale, !left);\n     }\n \n     @UsedByGeneratedCode\n-    public static Slice addLongShortLong(Slice a, long b, int rescale, boolean left)\n+    public static Slice addLongShortLong(Slice a, long b, int rescale, boolean rescaleLeft)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1ODg3OA=="}, "originalCommit": null, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjcxMjkwOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjoyNToxMFrOHUT6VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNjoxNjoyN1rOHUhyPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1OTc5Nw==", "bodyText": "missing blank line", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r491059797", "createdAt": "2020-09-18T16:25:10Z", "author": {"login": "iirekm"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -69,6 +69,14 @@\n      */\n     private static final int[] POWERS_OF_FIVES_INT = new int[MAX_POWER_OF_FIVE_INT + 1];\n \n+    /**\n+     * 5^27 fits in 2^31.\n+     */\n+    private static final int MAX_POWER_OF_FIVE_LONG = 27;\n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4NzEwMg==", "bodyText": "Why specifically here? Sometimes there is a blank line between constants and sometimes it is not.", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r491287102", "createdAt": "2020-09-19T06:16:27Z", "author": {"login": "skrzypo987"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -69,6 +69,14 @@\n      */\n     private static final int[] POWERS_OF_FIVES_INT = new int[MAX_POWER_OF_FIVE_INT + 1];\n \n+    /**\n+     * 5^27 fits in 2^31.\n+     */\n+    private static final int MAX_POWER_OF_FIVE_LONG = 27;\n+    /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1OTc5Nw=="}, "originalCommit": null, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjcxNDc1OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjoyNTozOVrOHUT7ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNjowMzowNVrOHUhh4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA2MDA2OQ==", "bodyText": "check not null", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r491060069", "createdAt": "2020-09-18T16:25:39Z", "author": {"login": "iirekm"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -481,6 +562,172 @@ public static void multiply(Slice left, Slice right, Slice result)\n         pack(result, (int) z0, (int) z1, (int) z2, (int) z3, leftNegative != rightNegative);\n     }\n \n+    public static void multiply(Slice left, long right, Slice result)\n+    {\n+        checkArgument(result.length() == NUMBER_OF_LONGS * Long.BYTES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4MjkxMw==", "bodyText": "This is a highly optimized code, checking for null for defensive purposes will harm performance.\nI plan to clean up this class in the future, e.g. clearly distinct methods that needs arg checking.", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r491282913", "createdAt": "2020-09-19T06:03:05Z", "author": {"login": "skrzypo987"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -481,6 +562,172 @@ public static void multiply(Slice left, Slice right, Slice result)\n         pack(result, (int) z0, (int) z1, (int) z2, (int) z3, leftNegative != rightNegative);\n     }\n \n+    public static void multiply(Slice left, long right, Slice result)\n+    {\n+        checkArgument(result.length() == NUMBER_OF_LONGS * Long.BYTES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA2MDA2OQ=="}, "originalCommit": null, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjcxNTcxOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjoyNTo1NlrOHUT7-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNjoxMzo1MlrOHUhvHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA2MDIxNg==", "bodyText": "check not null", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r491060216", "createdAt": "2020-09-18T16:25:56Z", "author": {"login": "iirekm"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -574,6 +821,115 @@ public static void multiply256(Slice left, Slice right, Slice result)\n         setRawInt(result, 7, (int) z7);\n     }\n \n+    public static void multiply256(Slice left, long right, Slice result)\n+    {\n+        checkArgument(result.length() >= NUMBER_OF_LONGS * Long.BYTES * 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 311}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4NjMwMg==", "bodyText": "not needed", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r491286302", "createdAt": "2020-09-19T06:13:52Z", "author": {"login": "skrzypo987"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -574,6 +821,115 @@ public static void multiply256(Slice left, Slice right, Slice result)\n         setRawInt(result, 7, (int) z7);\n     }\n \n+    public static void multiply256(Slice left, long right, Slice result)\n+    {\n+        checkArgument(result.length() >= NUMBER_OF_LONGS * Long.BYTES * 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA2MDIxNg=="}, "originalCommit": null, "originalPosition": 311}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3OTc2NzY4OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMDoyMzowMlrOHkHquA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMDoyMzowMlrOHkHquA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYzNjQwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static void shiftLeftBy5(int[] value, int shift)\n          \n          \n            \n                private static void shiftLeftBy5Desctrutive(int[] value, int shift)\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r507636408", "createdAt": "2020-10-19T10:23:02Z", "author": {"login": "kokosing"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -1441,16 +1437,16 @@ private static void divide(long dividendLow, long dividendHigh, int dividendScal\n     /**\n      * Value must be a 256-bit slice\n      */\n-    private static void shiftLeftBy5(Slice value, int shift)\n+    private static void shiftLeftBy5(int[] value, int shift)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDI3NDY0OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOTowODoxM1rOHkyV0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOTowODoxM1rOHkyV0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMzNTU2OA==", "bodyText": "static import?", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r508335568", "createdAt": "2020-10-20T09:08:13Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -480,6 +494,108 @@ public static void multiply(Slice left, Slice right, Slice result)\n         pack(result, (int) z0, (int) z1, (int) z2, (int) z3, leftNegative != rightNegative);\n     }\n \n+    public static void multiply(Slice left, long right, Slice result)\n+    {\n+        checkArgument(result.length() == NUMBER_OF_LONGS * Long.BYTES);\n+\n+        long l0 = toUnsignedLong(getInt(left, 0));\n+        long l1 = toUnsignedLong(getInt(left, 1));\n+        long l2 = toUnsignedLong(getInt(left, 2));\n+        int l3raw = getRawInt(left, 3);\n+        boolean leftNegative = isNegative(l3raw);\n+        long l3 = toUnsignedLong(unpackUnsignedInt(l3raw));\n+\n+        boolean rightNegative = right < 0;\n+        right = Math.abs(right);\n+        long r0 = right & LOW_32_BITS;\n+        long r1 = right >>> 32;\n+\n+        // the combinations below definitely result in an overflow\n+        if (r1 != 0 && l3 != 0) {\n+            throwOverflowException();\n+        }\n+\n+        long z0 = 0;\n+        long z1 = 0;\n+        long z2 = 0;\n+        long z3 = 0;\n+\n+        if (r0 != 0) {\n+            long accumulator = r0 * l0;\n+            z0 = accumulator & LOW_32_BITS;\n+            accumulator = (accumulator >>> 32) + l1 * r0;\n+\n+            z1 = accumulator & LOW_32_BITS;\n+            accumulator = (accumulator >>> 32) + l2 * r0;\n+\n+            z2 = accumulator & LOW_32_BITS;\n+            accumulator = (accumulator >>> 32) + l3 * r0;\n+\n+            z3 = accumulator & LOW_32_BITS;\n+\n+            if ((accumulator >>> 32) != 0) {\n+                throwOverflowException();\n+            }\n+        }\n+\n+        if (r1 != 0) {\n+            long accumulator = l0 * r1 + z1;\n+            z1 = accumulator & LOW_32_BITS;\n+            accumulator = (accumulator >>> 32) + l1 * r1 + z2;\n+\n+            z2 = accumulator & LOW_32_BITS;\n+            accumulator = (accumulator >>> 32) + l2 * r1 + z3;\n+\n+            z3 = accumulator & LOW_32_BITS;\n+\n+            if ((accumulator >>> 32) != 0) {\n+                throwOverflowException();\n+            }\n+        }\n+\n+        pack(result, (int) z0, (int) z1, (int) z2, (int) z3, leftNegative != rightNegative);\n+    }\n+\n+    public static void multiply(long left, long right, Slice result)\n+    {\n+        checkArgument(result.length() == NUMBER_OF_LONGS * Long.BYTES);\n+        boolean rightNegative = right < 0;\n+        boolean leftNegative = left < 0;\n+        left = Math.abs(left);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDMzMjU3OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/test/java/io/prestosql/spi/type/TestUnscaledDecimal128Arithmetic.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOToyMToyMFrOHky5LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOToyMToyMFrOHky5LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM0NDYyMA==", "bodyText": "move below usage (other assertMultiply methods)", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r508344620", "createdAt": "2020-10-20T09:21:20Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/test/java/io/prestosql/spi/type/TestUnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -759,4 +763,43 @@ private static Slice negate(Slice slice)\n         }\n         return ints;\n     }\n+\n+    private static boolean isShort(BigInteger value)\n+    {\n+        return value.abs().shiftRight(63).equals(BigInteger.ZERO);\n+    }\n+\n+    private static void assertMultiply(BigInteger a, BigInteger b, BigInteger result)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDMzOTAwOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/type/DecimalOperators.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOToyMjo1MFrOHky9QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOToyMjo1MFrOHky9QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM0NTY2NQ==", "bodyText": "static import?", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r508345665", "createdAt": "2020-10-20T09:22:50Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/type/DecimalOperators.java", "diffHunk": "@@ -260,7 +260,14 @@ public static long multiplyShortShortShort(long a, long b)\n     @UsedByGeneratedCode\n     public static Slice multiplyShortShortLong(long a, long b)\n     {\n-        return multiplyLongLongLong(encodeUnscaledValue(a), encodeUnscaledValue(b));\n+        try {\n+            Slice result = UnscaledDecimal128Arithmetic.multiply(a, b);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDM1NzMzOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOToyNzowMVrOHkzIfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOToyNzowMVrOHkzIfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM0ODU0MQ==", "bodyText": "call it r0", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r508348541", "createdAt": "2020-10-20T09:27:01Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -596,6 +688,32 @@ public static void multiply(long left, long right, Slice result)\n         pack(result, (int) z0, (int) z1, (int) z2, (int) z3, leftNegative != rightNegative);\n     }\n \n+    public static void multiply(long left, int right, Slice result)\n+    {\n+        checkArgument(result.length() == NUMBER_OF_LONGS * Long.BYTES);\n+        boolean rightNegative = right < 0;\n+        boolean leftNegative = left < 0;\n+        left = Math.abs(left);\n+        right = Math.abs(right);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDM2MDgyOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOToyNzo0NFrOHkzKjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOToyNzo0NFrOHkzKjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM0OTA2OA==", "bodyText": "call it r0", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r508349068", "createdAt": "2020-10-20T09:27:44Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -556,6 +610,44 @@ public static void multiply(Slice left, long right, Slice result)\n         pack(result, (int) z0, (int) z1, (int) z2, (int) z3, leftNegative != rightNegative);\n     }\n \n+    public static void multiply(Slice left, int right, Slice result)\n+    {\n+        checkArgument(result.length() == NUMBER_OF_LONGS * Long.BYTES);\n+\n+        long l0 = toUnsignedLong(getInt(left, 0));\n+        long l1 = toUnsignedLong(getInt(left, 1));\n+        long l2 = toUnsignedLong(getInt(left, 2));\n+        int l3raw = getRawInt(left, 3);\n+        boolean leftNegative = isNegative(l3raw);\n+        long l3 = toUnsignedLong(unpackUnsignedInt(l3raw));\n+\n+        boolean rightNegative = right < 0;\n+        right = Math.abs(right);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDM3MDMwOnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOToyOTo1NlrOHkzQaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOToyOTo1NlrOHkzQaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM1MDU2OA==", "bodyText": "what about negative decimal (+ add test)?", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r508350568", "createdAt": "2020-10-20T09:29:56Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -210,13 +210,32 @@ else if (rescaleFactor > 0) {\n             if (rescaleFactor >= POWERS_OF_TEN.length) {\n                 throwOverflowException();\n             }\n-            multiply(decimal, POWERS_OF_TEN[rescaleFactor], result);\n+            shiftLeftBy10(decimal, rescaleFactor, result);\n         }\n         else {\n             scaleDownRoundUp(decimal, -rescaleFactor, result);\n         }\n     }\n \n+    public static Slice rescale(long decimal, int rescaleFactor)\n+    {\n+        Slice result = unscaledDecimal();\n+        if (rescaleFactor == 0) {\n+            result.setLong(0, decimal);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDQxMDE5OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOTozOTo0OFrOHkzpwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOTozOTo0OFrOHkzpwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM1NzA1OA==", "bodyText": "call it r0", "url": "https://github.com/trinodb/trino/pull/5181#discussion_r508357058", "createdAt": "2020-10-20T09:39:48Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -807,6 +820,115 @@ public static void multiply256(Slice left, Slice right, Slice result)\n         setRawInt(result, 7, (int) z7);\n     }\n \n+    public static void multiply256(Slice left, long right, Slice result)\n+    {\n+        checkArgument(result.length() >= NUMBER_OF_LONGS * Long.BYTES * 2);\n+\n+        long l0 = toUnsignedLong(getInt(left, 0));\n+        long l1 = toUnsignedLong(getInt(left, 1));\n+        long l2 = toUnsignedLong(getInt(left, 2));\n+        long l3 = toUnsignedLong(getInt(left, 3));\n+\n+        right = Math.abs(right);\n+        long r0 = right & LOW_32_BITS;\n+        long r1 = right >>> 32;\n+\n+        long z0 = 0;\n+        long z1 = 0;\n+        long z2 = 0;\n+        long z3 = 0;\n+        long z4 = 0;\n+        long z5 = 0;\n+\n+        if (l0 != 0) {\n+            long accumulator = r0 * l0;\n+            z0 = accumulator & LOW_32_BITS;\n+            accumulator = (accumulator >>> 32) + r1 * l0;\n+\n+            z1 = accumulator & LOW_32_BITS;\n+            z2 = accumulator >>> 32;\n+        }\n+\n+        if (l1 != 0) {\n+            long accumulator = r0 * l1 + z1;\n+            z1 = accumulator & LOW_32_BITS;\n+            accumulator = (accumulator >>> 32) + r1 * l1 + z2;\n+\n+            z2 = accumulator & LOW_32_BITS;\n+            z3 = accumulator >>> 32;\n+        }\n+\n+        if (l2 != 0) {\n+            long accumulator = r0 * l2 + z2;\n+            z2 = accumulator & LOW_32_BITS;\n+            accumulator = (accumulator >>> 32) + r1 * l2 + z3;\n+\n+            z3 = accumulator & LOW_32_BITS;\n+            z4 = accumulator >>> 32;\n+        }\n+\n+        if (l3 != 0) {\n+            long accumulator = r0 * l3 + z3;\n+            z3 = accumulator & LOW_32_BITS;\n+            accumulator = (accumulator >>> 32) + r1 * l3 + z4;\n+\n+            z4 = accumulator & LOW_32_BITS;\n+            z5 = accumulator >>> 32;\n+        }\n+\n+        setRawInt(result, 0, (int) z0);\n+        setRawInt(result, 1, (int) z1);\n+        setRawInt(result, 2, (int) z2);\n+        setRawInt(result, 3, (int) z3);\n+        setRawInt(result, 4, (int) z4);\n+        setRawInt(result, 5, (int) z5);\n+        setRawInt(result, 6, 0);\n+        setRawInt(result, 7, 0);\n+    }\n+\n+    public static void multiply256(Slice left, int right, Slice result)\n+    {\n+        checkArgument(result.length() >= NUMBER_OF_LONGS * Long.BYTES * 2);\n+\n+        long l0 = toUnsignedLong(getInt(left, 0));\n+        long l1 = toUnsignedLong(getInt(left, 1));\n+        long l2 = toUnsignedLong(getInt(left, 2));\n+        long l3 = toUnsignedLong(getInt(left, 3));\n+\n+        right = Math.abs(right);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 106}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2968, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}