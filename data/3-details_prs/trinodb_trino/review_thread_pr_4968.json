{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczMTM1OTQ0", "number": 4968, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDo0NTowM1rOEdx1_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxMzowNjo1M1rOEeEUAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NjYwNzk5OnYy", "diffSide": "RIGHT", "path": "presto-bigquery/src/test/java/io/prestosql/plugin/bigquery/TestBigQueryIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDo0NTowM1rOHJJXPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDo0NTowM1rOHJJXPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM1MjYzOQ==", "bodyText": "I would rename to executeBigQuerySql or onBigQuery", "url": "https://github.com/trinodb/trino/pull/4968#discussion_r479352639", "createdAt": "2020-08-28T14:45:03Z", "author": {"login": "ebyhr"}, "path": "presto-bigquery/src/test/java/io/prestosql/plugin/bigquery/TestBigQueryIntegrationSmokeTest.java", "diffHunk": "@@ -51,4 +60,47 @@ public void testDescribeTable()\n         MaterializedResult actualColumns = computeActual(\"DESCRIBE orders\");\n         assertEquals(actualColumns, expectedColumns);\n     }\n+\n+    @Test(enabled = false)\n+    public void testSelectFromHourlyPartitionedTable()\n+    {\n+        BigQuery client = createBigQueryClient();\n+\n+        try {\n+            executeBigQuerySQL(client, \"CREATE TABLE test.hourly_partitioned (value INT64, ts TIMESTAMP) PARTITION BY TIMESTAMP_TRUNC(ts, HOUR)\");\n+            executeBigQuerySQL(client, \"INSERT INTO test.hourly_partitioned (value, ts) VALUES (1000, '2018-01-01 10:00:00')\");\n+\n+            MaterializedResult actualValues = computeActual(\"SELECT COUNT(1) FROM test.hourly_partitioned\");\n+\n+            assertEquals((long) actualValues.getOnlyValue(), 1L);\n+        }\n+        finally {\n+            executeBigQuerySQL(client, \"DROP TABLE test.hourly_partitioned\");\n+        }\n+    }\n+\n+    private static void executeBigQuerySQL(BigQuery bigquery, String query)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NjYyMjE1OnYy", "diffSide": "RIGHT", "path": "presto-bigquery/src/test/java/io/prestosql/plugin/bigquery/TestBigQueryIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDo0ODo0OVrOHJJf8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDo0ODo0OVrOHJJf8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM1NDg2NA==", "bodyText": "Argument of format is missing.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new RuntimeException(format(\"Job with uuid %s does not longer exists\"));\n          \n          \n            \n                            throw new RuntimeException(format(\"Job with uuid %s does not longer exists\", jobId.getJob()));", "url": "https://github.com/trinodb/trino/pull/4968#discussion_r479354864", "createdAt": "2020-08-28T14:48:49Z", "author": {"login": "ebyhr"}, "path": "presto-bigquery/src/test/java/io/prestosql/plugin/bigquery/TestBigQueryIntegrationSmokeTest.java", "diffHunk": "@@ -51,4 +60,47 @@ public void testDescribeTable()\n         MaterializedResult actualColumns = computeActual(\"DESCRIBE orders\");\n         assertEquals(actualColumns, expectedColumns);\n     }\n+\n+    @Test(enabled = false)\n+    public void testSelectFromHourlyPartitionedTable()\n+    {\n+        BigQuery client = createBigQueryClient();\n+\n+        try {\n+            executeBigQuerySQL(client, \"CREATE TABLE test.hourly_partitioned (value INT64, ts TIMESTAMP) PARTITION BY TIMESTAMP_TRUNC(ts, HOUR)\");\n+            executeBigQuerySQL(client, \"INSERT INTO test.hourly_partitioned (value, ts) VALUES (1000, '2018-01-01 10:00:00')\");\n+\n+            MaterializedResult actualValues = computeActual(\"SELECT COUNT(1) FROM test.hourly_partitioned\");\n+\n+            assertEquals((long) actualValues.getOnlyValue(), 1L);\n+        }\n+        finally {\n+            executeBigQuerySQL(client, \"DROP TABLE test.hourly_partitioned\");\n+        }\n+    }\n+\n+    private static void executeBigQuerySQL(BigQuery bigquery, String query)\n+    {\n+        QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(query)\n+                .setUseLegacySql(false)\n+                .build();\n+\n+        JobId jobId = JobId.of(UUID.randomUUID().toString());\n+        Job queryJob = bigquery.create(JobInfo.newBuilder(queryConfig).setJobId(jobId).build());\n+\n+        try {\n+            queryJob = queryJob.waitFor();\n+\n+            if (queryJob == null) {\n+                throw new RuntimeException(format(\"Job with uuid %s does not longer exists\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NjYyMzE0OnYy", "diffSide": "RIGHT", "path": "presto-bigquery/src/test/java/io/prestosql/plugin/bigquery/TestBigQueryIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDo0OTowNFrOHJJgkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDo0OTowNFrOHJJgkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM1NTAyNg==", "bodyText": "Redundant else. I know it comes from BIgQuery's javadoc though.", "url": "https://github.com/trinodb/trino/pull/4968#discussion_r479355026", "createdAt": "2020-08-28T14:49:04Z", "author": {"login": "ebyhr"}, "path": "presto-bigquery/src/test/java/io/prestosql/plugin/bigquery/TestBigQueryIntegrationSmokeTest.java", "diffHunk": "@@ -51,4 +60,47 @@ public void testDescribeTable()\n         MaterializedResult actualColumns = computeActual(\"DESCRIBE orders\");\n         assertEquals(actualColumns, expectedColumns);\n     }\n+\n+    @Test(enabled = false)\n+    public void testSelectFromHourlyPartitionedTable()\n+    {\n+        BigQuery client = createBigQueryClient();\n+\n+        try {\n+            executeBigQuerySQL(client, \"CREATE TABLE test.hourly_partitioned (value INT64, ts TIMESTAMP) PARTITION BY TIMESTAMP_TRUNC(ts, HOUR)\");\n+            executeBigQuerySQL(client, \"INSERT INTO test.hourly_partitioned (value, ts) VALUES (1000, '2018-01-01 10:00:00')\");\n+\n+            MaterializedResult actualValues = computeActual(\"SELECT COUNT(1) FROM test.hourly_partitioned\");\n+\n+            assertEquals((long) actualValues.getOnlyValue(), 1L);\n+        }\n+        finally {\n+            executeBigQuerySQL(client, \"DROP TABLE test.hourly_partitioned\");\n+        }\n+    }\n+\n+    private static void executeBigQuerySQL(BigQuery bigquery, String query)\n+    {\n+        QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(query)\n+                .setUseLegacySql(false)\n+                .build();\n+\n+        JobId jobId = JobId.of(UUID.randomUUID().toString());\n+        Job queryJob = bigquery.create(JobInfo.newBuilder(queryConfig).setJobId(jobId).build());\n+\n+        try {\n+            queryJob = queryJob.waitFor();\n+\n+            if (queryJob == null) {\n+                throw new RuntimeException(format(\"Job with uuid %s does not longer exists\"));\n+            }\n+            else if (queryJob.getStatus().getError() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5OTYyOTUxOnYy", "diffSide": "RIGHT", "path": "presto-bigquery/src/test/java/io/prestosql/plugin/bigquery/TestBigQueryIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxMzowMToxM1rOHJiquw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxMzowMToxM1rOHJiquw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc2NzIyNw==", "bodyText": "How about adding DROP TABLE IF EXISTS  before CREAT TABLE?", "url": "https://github.com/trinodb/trino/pull/4968#discussion_r479767227", "createdAt": "2020-08-30T13:01:13Z", "author": {"login": "ebyhr"}, "path": "presto-bigquery/src/test/java/io/prestosql/plugin/bigquery/TestBigQueryIntegrationSmokeTest.java", "diffHunk": "@@ -51,4 +60,47 @@ public void testDescribeTable()\n         MaterializedResult actualColumns = computeActual(\"DESCRIBE orders\");\n         assertEquals(actualColumns, expectedColumns);\n     }\n+\n+    @Test(enabled = false)\n+    public void testSelectFromHourlyPartitionedTable()\n+    {\n+        BigQuery client = createBigQueryClient();\n+\n+        try {\n+            executeBigQuerySQL(client, \"CREATE TABLE test.hourly_partitioned (value INT64, ts TIMESTAMP) PARTITION BY TIMESTAMP_TRUNC(ts, HOUR)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5OTYzMzkyOnYy", "diffSide": "RIGHT", "path": "presto-bigquery/src/test/java/io/prestosql/plugin/bigquery/TestBigQueryIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxMzowNjo1M1rOHJis1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxMzowNjo1M1rOHJis1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc2Nzc2NA==", "bodyText": "nit: JobId.of() does the same thing.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    JobId jobId = JobId.of(UUID.randomUUID().toString());\n          \n          \n            \n                    JobId jobId = JobId.of();", "url": "https://github.com/trinodb/trino/pull/4968#discussion_r479767764", "createdAt": "2020-08-30T13:06:53Z", "author": {"login": "ebyhr"}, "path": "presto-bigquery/src/test/java/io/prestosql/plugin/bigquery/TestBigQueryIntegrationSmokeTest.java", "diffHunk": "@@ -51,4 +60,47 @@ public void testDescribeTable()\n         MaterializedResult actualColumns = computeActual(\"DESCRIBE orders\");\n         assertEquals(actualColumns, expectedColumns);\n     }\n+\n+    @Test(enabled = false)\n+    public void testSelectFromHourlyPartitionedTable()\n+    {\n+        BigQuery client = createBigQueryClient();\n+\n+        try {\n+            executeBigQuerySQL(client, \"CREATE TABLE test.hourly_partitioned (value INT64, ts TIMESTAMP) PARTITION BY TIMESTAMP_TRUNC(ts, HOUR)\");\n+            executeBigQuerySQL(client, \"INSERT INTO test.hourly_partitioned (value, ts) VALUES (1000, '2018-01-01 10:00:00')\");\n+\n+            MaterializedResult actualValues = computeActual(\"SELECT COUNT(1) FROM test.hourly_partitioned\");\n+\n+            assertEquals((long) actualValues.getOnlyValue(), 1L);\n+        }\n+        finally {\n+            executeBigQuerySQL(client, \"DROP TABLE test.hourly_partitioned\");\n+        }\n+    }\n+\n+    private static void executeBigQuerySQL(BigQuery bigquery, String query)\n+    {\n+        QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(query)\n+                .setUseLegacySql(false)\n+                .build();\n+\n+        JobId jobId = JobId.of(UUID.randomUUID().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3302, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}