{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0NjMyNDI4", "number": 6256, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDo0MDo0NVrOFCld4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDo0MDo0NVrOFCld4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjU1MzI4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/metadata/FunctionResolver.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDo0MDo0NVrOIB1KNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzoyNjoyMFrOIB7CgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc5MDQ1NQ==", "bodyText": "Maybe wrap expected string into brackets too in case list is empty", "url": "https://github.com/trinodb/trino/pull/6256#discussion_r538790455", "createdAt": "2020-12-08T20:40:45Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/metadata/FunctionResolver.java", "diffHunk": "@@ -140,13 +144,10 @@ FunctionBinding resolveFunction(Collection<FunctionMetadata> allCandidates, Qual\n                     Joiner.on(\", \").join(function.getSignature().getArgumentTypes()),\n                     Joiner.on(\", \").join(function.getSignature().getTypeVariableConstraints())));\n         }\n-        String parameters = Joiner.on(\", \").join(parameterTypes);\n-        String message = format(\"Function '%s' not registered\", name);\n-        if (!expectedParameters.isEmpty()) {\n-            String expected = Joiner.on(\", \").join(expectedParameters);\n-            message = format(\"Unexpected parameters (%s) for function %s. Expected: %s\", parameters, name, expected);\n-        }\n \n+        String parameters = Joiner.on(\", \").join(parameterTypes);\n+        String expected = Joiner.on(\", \").join(expectedParameters);\n+        String message = format(\"Unexpected parameters (%s) for function %s. Expected: %s\", parameters, name, expected);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgwNjU1Mg==", "bodyText": "which list?  i don't think any can be empty at this point", "url": "https://github.com/trinodb/trino/pull/6256#discussion_r538806552", "createdAt": "2020-12-08T21:04:43Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/metadata/FunctionResolver.java", "diffHunk": "@@ -140,13 +144,10 @@ FunctionBinding resolveFunction(Collection<FunctionMetadata> allCandidates, Qual\n                     Joiner.on(\", \").join(function.getSignature().getArgumentTypes()),\n                     Joiner.on(\", \").join(function.getSignature().getTypeVariableConstraints())));\n         }\n-        String parameters = Joiner.on(\", \").join(parameterTypes);\n-        String message = format(\"Function '%s' not registered\", name);\n-        if (!expectedParameters.isEmpty()) {\n-            String expected = Joiner.on(\", \").join(expectedParameters);\n-            message = format(\"Unexpected parameters (%s) for function %s. Expected: %s\", parameters, name, expected);\n-        }\n \n+        String parameters = Joiner.on(\", \").join(parameterTypes);\n+        String expected = Joiner.on(\", \").join(expectedParameters);\n+        String message = format(\"Unexpected parameters (%s) for function %s. Expected: %s\", parameters, name, expected);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc5MDQ1NQ=="}, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgwNzI2MQ==", "bodyText": "Why not? Previous code assumed expectedParameters could be empty", "url": "https://github.com/trinodb/trino/pull/6256#discussion_r538807261", "createdAt": "2020-12-08T21:05:56Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/metadata/FunctionResolver.java", "diffHunk": "@@ -140,13 +144,10 @@ FunctionBinding resolveFunction(Collection<FunctionMetadata> allCandidates, Qual\n                     Joiner.on(\", \").join(function.getSignature().getArgumentTypes()),\n                     Joiner.on(\", \").join(function.getSignature().getTypeVariableConstraints())));\n         }\n-        String parameters = Joiner.on(\", \").join(parameterTypes);\n-        String message = format(\"Function '%s' not registered\", name);\n-        if (!expectedParameters.isEmpty()) {\n-            String expected = Joiner.on(\", \").join(expectedParameters);\n-            message = format(\"Unexpected parameters (%s) for function %s. Expected: %s\", parameters, name, expected);\n-        }\n \n+        String parameters = Joiner.on(\", \").join(parameterTypes);\n+        String expected = Joiner.on(\", \").join(expectedParameters);\n+        String message = format(\"Unexpected parameters (%s) for function %s. Expected: %s\", parameters, name, expected);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc5MDQ1NQ=="}, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg4Njc4NQ==", "bodyText": "Only when there allCandidates are empty, which is now filtered out at the top of the method.", "url": "https://github.com/trinodb/trino/pull/6256#discussion_r538886785", "createdAt": "2020-12-08T23:26:20Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/metadata/FunctionResolver.java", "diffHunk": "@@ -140,13 +144,10 @@ FunctionBinding resolveFunction(Collection<FunctionMetadata> allCandidates, Qual\n                     Joiner.on(\", \").join(function.getSignature().getArgumentTypes()),\n                     Joiner.on(\", \").join(function.getSignature().getTypeVariableConstraints())));\n         }\n-        String parameters = Joiner.on(\", \").join(parameterTypes);\n-        String message = format(\"Function '%s' not registered\", name);\n-        if (!expectedParameters.isEmpty()) {\n-            String expected = Joiner.on(\", \").join(expectedParameters);\n-            message = format(\"Unexpected parameters (%s) for function %s. Expected: %s\", parameters, name, expected);\n-        }\n \n+        String parameters = Joiner.on(\", \").join(parameterTypes);\n+        String expected = Joiner.on(\", \").join(expectedParameters);\n+        String message = format(\"Unexpected parameters (%s) for function %s. Expected: %s\", parameters, name, expected);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc5MDQ1NQ=="}, "originalCommit": null, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4516, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}