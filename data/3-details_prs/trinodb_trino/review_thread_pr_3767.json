{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5MDg1NjYx", "number": 3767, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxNDoyNDowMlrOFUh_Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QxOTowNzowMVrOFdtq3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3MDcyNjkwOnYy", "diffSide": "RIGHT", "path": "plugin/trino-bigquery/src/main/java/io/trino/plugin/bigquery/BigQueryClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxNDoyNDowMlrOIcmH4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNVQxMzowODoyOVrOIlfQbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njg1NTY0OA==", "bodyText": "The tableIds map in BigQueryClient doesn't actually store anything useful since both the keys and values are same.\nEach get on the map is also accompanied by an API call too so we should perform the API call directly.\nI've removed this map in #6748 in favour of a cache which maintains a mapping of lowercase name to remote name.", "url": "https://github.com/trinodb/trino/pull/3767#discussion_r566855648", "createdAt": "2021-01-29T14:24:02Z", "author": {"login": "hashhar"}, "path": "plugin/trino-bigquery/src/main/java/io/trino/plugin/bigquery/BigQueryClient.java", "diffHunk": "@@ -126,6 +126,18 @@ Table update(TableInfo table)\n         return bigQuery.update(table);\n     }\n \n+    public void createTable(TableInfo tableInfo)\n+    {\n+        bigQuery.create(tableInfo);\n+        tableIds.put(tableInfo.getTableId(), tableInfo.getTableId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzIzNjc1OQ==", "bodyText": "If #6748 is merged first, I would remove this. But, I think we should keep this line for now.", "url": "https://github.com/trinodb/trino/pull/3767#discussion_r567236759", "createdAt": "2021-01-30T11:54:14Z", "author": {"login": "ebyhr"}, "path": "plugin/trino-bigquery/src/main/java/io/trino/plugin/bigquery/BigQueryClient.java", "diffHunk": "@@ -126,6 +126,18 @@ Table update(TableInfo table)\n         return bigQuery.update(table);\n     }\n \n+    public void createTable(TableInfo tableInfo)\n+    {\n+        bigQuery.create(tableInfo);\n+        tableIds.put(tableInfo.getTableId(), tableInfo.getTableId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njg1NTY0OA=="}, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjE4MDMzMw==", "bodyText": "Removed relevant code.", "url": "https://github.com/trinodb/trino/pull/3767#discussion_r576180333", "createdAt": "2021-02-15T13:08:29Z", "author": {"login": "ebyhr"}, "path": "plugin/trino-bigquery/src/main/java/io/trino/plugin/bigquery/BigQueryClient.java", "diffHunk": "@@ -126,6 +126,18 @@ Table update(TableInfo table)\n         return bigQuery.update(table);\n     }\n \n+    public void createTable(TableInfo tableInfo)\n+    {\n+        bigQuery.create(tableInfo);\n+        tableIds.put(tableInfo.getTableId(), tableInfo.getTableId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njg1NTY0OA=="}, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3MDczODM2OnYy", "diffSide": "RIGHT", "path": "plugin/trino-bigquery/src/main/java/io/trino/plugin/bigquery/BigQueryType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxNDoyNjozMlrOIcmOpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxNDoyNjozMlrOIcmOpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njg1NzM4Mw==", "bodyText": "nit: static import Field.Mode.REPEATED.", "url": "https://github.com/trinodb/trino/pull/3767#discussion_r566857383", "createdAt": "2021-01-29T14:26:32Z", "author": {"login": "hashhar"}, "path": "plugin/trino-bigquery/src/main/java/io/trino/plugin/bigquery/BigQueryType.java", "diffHunk": "@@ -182,6 +191,70 @@ static String bytesToStringConverter(Object value)\n         return format(\"FROM_BASE64('%s')\", Base64.getEncoder().encodeToString(slice.getBytes()));\n     }\n \n+    public static Field toField(String name, Type type)\n+    {\n+        if (type instanceof ArrayType) {\n+            Type elementType = ((ArrayType) type).getElementType();\n+            if (elementType instanceof RowType) {\n+                return Field.newBuilder(name, StandardSQLTypeName.STRUCT, toFieldList((RowType) elementType)).setMode(Field.Mode.REPEATED).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3MDc0MzM2OnYy", "diffSide": "RIGHT", "path": "plugin/trino-bigquery/src/main/java/io/trino/plugin/bigquery/BigQueryType.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxNDoyNzo0M1rOIcmRsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxMDozMjo0N1rOIdatiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njg1ODE2Mg==", "bodyText": "Do we do this in any other connector? Naming anonymous fields in ROW types?", "url": "https://github.com/trinodb/trino/pull/3767#discussion_r566858162", "createdAt": "2021-01-29T14:27:43Z", "author": {"login": "hashhar"}, "path": "plugin/trino-bigquery/src/main/java/io/trino/plugin/bigquery/BigQueryType.java", "diffHunk": "@@ -182,6 +191,70 @@ static String bytesToStringConverter(Object value)\n         return format(\"FROM_BASE64('%s')\", Base64.getEncoder().encodeToString(slice.getBytes()));\n     }\n \n+    public static Field toField(String name, Type type)\n+    {\n+        if (type instanceof ArrayType) {\n+            Type elementType = ((ArrayType) type).getElementType();\n+            if (elementType instanceof RowType) {\n+                return Field.newBuilder(name, StandardSQLTypeName.STRUCT, toFieldList((RowType) elementType)).setMode(Field.Mode.REPEATED).build();\n+            }\n+            return Field.newBuilder(name, toStandardSqlTypeName(elementType)).setMode(Field.Mode.REPEATED).build();\n+        }\n+        if (type instanceof RowType) {\n+            return Field.of(name, StandardSQLTypeName.STRUCT, toFieldList((RowType) type));\n+        }\n+        return Field.of(name, toStandardSqlTypeName(type));\n+    }\n+\n+    private static FieldList toFieldList(RowType rowType)\n+    {\n+        List<Field> fields = rowType.getFields().stream()\n+                .map(field -> toField(field.getName().orElse(\"field\" + rowType.getFields().indexOf(field)), field.getType()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njg3MTQ4NQ==", "bodyText": "I think it depends on the connector. At least, this Field object in BigQuery doesn't allow empty name.", "url": "https://github.com/trinodb/trino/pull/3767#discussion_r566871485", "createdAt": "2021-01-29T14:47:06Z", "author": {"login": "ebyhr"}, "path": "plugin/trino-bigquery/src/main/java/io/trino/plugin/bigquery/BigQueryType.java", "diffHunk": "@@ -182,6 +191,70 @@ static String bytesToStringConverter(Object value)\n         return format(\"FROM_BASE64('%s')\", Base64.getEncoder().encodeToString(slice.getBytes()));\n     }\n \n+    public static Field toField(String name, Type type)\n+    {\n+        if (type instanceof ArrayType) {\n+            Type elementType = ((ArrayType) type).getElementType();\n+            if (elementType instanceof RowType) {\n+                return Field.newBuilder(name, StandardSQLTypeName.STRUCT, toFieldList((RowType) elementType)).setMode(Field.Mode.REPEATED).build();\n+            }\n+            return Field.newBuilder(name, toStandardSqlTypeName(elementType)).setMode(Field.Mode.REPEATED).build();\n+        }\n+        if (type instanceof RowType) {\n+            return Field.of(name, StandardSQLTypeName.STRUCT, toFieldList((RowType) type));\n+        }\n+        return Field.of(name, toStandardSqlTypeName(type));\n+    }\n+\n+    private static FieldList toFieldList(RowType rowType)\n+    {\n+        List<Field> fields = rowType.getFields().stream()\n+                .map(field -> toField(field.getName().orElse(\"field\" + rowType.getFields().indexOf(field)), field.getType()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njg1ODE2Mg=="}, "originalCommit": null, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzcxNzI1Ng==", "bodyText": "Maybe we should just fail create if name is not provided for all fields. It does not feel to me that auto-generating names for CREATED tables is useful thing.", "url": "https://github.com/trinodb/trino/pull/3767#discussion_r567717256", "createdAt": "2021-02-01T10:32:47Z", "author": {"login": "losipiuk"}, "path": "plugin/trino-bigquery/src/main/java/io/trino/plugin/bigquery/BigQueryType.java", "diffHunk": "@@ -182,6 +191,70 @@ static String bytesToStringConverter(Object value)\n         return format(\"FROM_BASE64('%s')\", Base64.getEncoder().encodeToString(slice.getBytes()));\n     }\n \n+    public static Field toField(String name, Type type)\n+    {\n+        if (type instanceof ArrayType) {\n+            Type elementType = ((ArrayType) type).getElementType();\n+            if (elementType instanceof RowType) {\n+                return Field.newBuilder(name, StandardSQLTypeName.STRUCT, toFieldList((RowType) elementType)).setMode(Field.Mode.REPEATED).build();\n+            }\n+            return Field.newBuilder(name, toStandardSqlTypeName(elementType)).setMode(Field.Mode.REPEATED).build();\n+        }\n+        if (type instanceof RowType) {\n+            return Field.of(name, StandardSQLTypeName.STRUCT, toFieldList((RowType) type));\n+        }\n+        return Field.of(name, toStandardSqlTypeName(type));\n+    }\n+\n+    private static FieldList toFieldList(RowType rowType)\n+    {\n+        List<Field> fields = rowType.getFields().stream()\n+                .map(field -> toField(field.getName().orElse(\"field\" + rowType.getFields().indexOf(field)), field.getType()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njg1ODE2Mg=="}, "originalCommit": null, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3MDc0NzU0OnYy", "diffSide": "RIGHT", "path": "plugin/trino-bigquery/src/main/java/io/trino/plugin/bigquery/BigQueryType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxNDoyODozNlrOIcmUQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxNDoyODozNlrOIcmUQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njg1ODgxNg==", "bodyText": "nit: static import and replace with toImmutableList since we aren't modifying it after return.", "url": "https://github.com/trinodb/trino/pull/3767#discussion_r566858816", "createdAt": "2021-01-29T14:28:36Z", "author": {"login": "hashhar"}, "path": "plugin/trino-bigquery/src/main/java/io/trino/plugin/bigquery/BigQueryType.java", "diffHunk": "@@ -182,6 +191,70 @@ static String bytesToStringConverter(Object value)\n         return format(\"FROM_BASE64('%s')\", Base64.getEncoder().encodeToString(slice.getBytes()));\n     }\n \n+    public static Field toField(String name, Type type)\n+    {\n+        if (type instanceof ArrayType) {\n+            Type elementType = ((ArrayType) type).getElementType();\n+            if (elementType instanceof RowType) {\n+                return Field.newBuilder(name, StandardSQLTypeName.STRUCT, toFieldList((RowType) elementType)).setMode(Field.Mode.REPEATED).build();\n+            }\n+            return Field.newBuilder(name, toStandardSqlTypeName(elementType)).setMode(Field.Mode.REPEATED).build();\n+        }\n+        if (type instanceof RowType) {\n+            return Field.of(name, StandardSQLTypeName.STRUCT, toFieldList((RowType) type));\n+        }\n+        return Field.of(name, toStandardSqlTypeName(type));\n+    }\n+\n+    private static FieldList toFieldList(RowType rowType)\n+    {\n+        List<Field> fields = rowType.getFields().stream()\n+                .map(field -> toField(field.getName().orElse(\"field\" + rowType.getFields().indexOf(field)), field.getType()))\n+                .collect(Collectors.toUnmodifiableList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3MDc1NjA0OnYy", "diffSide": "RIGHT", "path": "plugin/trino-bigquery/src/main/java/io/trino/plugin/bigquery/BigQueryType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxNDozMDoyN1rOIcmZVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxNDo1MDo1NFrOIcnQqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njg2MDExOQ==", "bodyText": "We will need to keep this in sync with the type mappings otherwise CTAS statement's schema might differ from the table that gets created.\nWould it be helpful to define a bi-directional map somewhere with this mapping and use it for both read type mappings and write mappings?", "url": "https://github.com/trinodb/trino/pull/3767#discussion_r566860119", "createdAt": "2021-01-29T14:30:27Z", "author": {"login": "hashhar"}, "path": "plugin/trino-bigquery/src/main/java/io/trino/plugin/bigquery/BigQueryType.java", "diffHunk": "@@ -182,6 +191,70 @@ static String bytesToStringConverter(Object value)\n         return format(\"FROM_BASE64('%s')\", Base64.getEncoder().encodeToString(slice.getBytes()));\n     }\n \n+    public static Field toField(String name, Type type)\n+    {\n+        if (type instanceof ArrayType) {\n+            Type elementType = ((ArrayType) type).getElementType();\n+            if (elementType instanceof RowType) {\n+                return Field.newBuilder(name, StandardSQLTypeName.STRUCT, toFieldList((RowType) elementType)).setMode(Field.Mode.REPEATED).build();\n+            }\n+            return Field.newBuilder(name, toStandardSqlTypeName(elementType)).setMode(Field.Mode.REPEATED).build();\n+        }\n+        if (type instanceof RowType) {\n+            return Field.of(name, StandardSQLTypeName.STRUCT, toFieldList((RowType) type));\n+        }\n+        return Field.of(name, toStandardSqlTypeName(type));\n+    }\n+\n+    private static FieldList toFieldList(RowType rowType)\n+    {\n+        List<Field> fields = rowType.getFields().stream()\n+                .map(field -> toField(field.getName().orElse(\"field\" + rowType.getFields().indexOf(field)), field.getType()))\n+                .collect(Collectors.toUnmodifiableList());\n+        return FieldList.of(fields);\n+    }\n+\n+    private static StandardSQLTypeName toStandardSqlTypeName(Type type)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njg3NDI4MQ==", "bodyText": "When we support CTAS, we will add BigQueryOutputTableHandle and the schema should be defined in same BigQueryMetadata.createTable(). So, such mismatch won't happen.", "url": "https://github.com/trinodb/trino/pull/3767#discussion_r566874281", "createdAt": "2021-01-29T14:50:54Z", "author": {"login": "ebyhr"}, "path": "plugin/trino-bigquery/src/main/java/io/trino/plugin/bigquery/BigQueryType.java", "diffHunk": "@@ -182,6 +191,70 @@ static String bytesToStringConverter(Object value)\n         return format(\"FROM_BASE64('%s')\", Base64.getEncoder().encodeToString(slice.getBytes()));\n     }\n \n+    public static Field toField(String name, Type type)\n+    {\n+        if (type instanceof ArrayType) {\n+            Type elementType = ((ArrayType) type).getElementType();\n+            if (elementType instanceof RowType) {\n+                return Field.newBuilder(name, StandardSQLTypeName.STRUCT, toFieldList((RowType) elementType)).setMode(Field.Mode.REPEATED).build();\n+            }\n+            return Field.newBuilder(name, toStandardSqlTypeName(elementType)).setMode(Field.Mode.REPEATED).build();\n+        }\n+        if (type instanceof RowType) {\n+            return Field.of(name, StandardSQLTypeName.STRUCT, toFieldList((RowType) type));\n+        }\n+        return Field.of(name, toStandardSqlTypeName(type));\n+    }\n+\n+    private static FieldList toFieldList(RowType rowType)\n+    {\n+        List<Field> fields = rowType.getFields().stream()\n+                .map(field -> toField(field.getName().orElse(\"field\" + rowType.getFields().indexOf(field)), field.getType()))\n+                .collect(Collectors.toUnmodifiableList());\n+        return FieldList.of(fields);\n+    }\n+\n+    private static StandardSQLTypeName toStandardSqlTypeName(Type type)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njg2MDExOQ=="}, "originalCommit": null, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3MDc2NDYxOnYy", "diffSide": "RIGHT", "path": "plugin/trino-bigquery/src/test/java/io/trino/plugin/bigquery/TestBigQueryIntegrationSmokeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxNDozMjozMVrOIcmeow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0zMFQxMjowMTo0OFrOIc9buw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njg2MTQ3NQ==", "bodyText": "Since CREATE TABLE is now supported we can add roundtrip tests for the data types to ensure our read and write mappings are in sync.", "url": "https://github.com/trinodb/trino/pull/3767#discussion_r566861475", "createdAt": "2021-01-29T14:32:31Z", "author": {"login": "hashhar"}, "path": "plugin/trino-bigquery/src/test/java/io/trino/plugin/bigquery/TestBigQueryIntegrationSmokeTest.java", "diffHunk": "@@ -61,6 +63,78 @@ public void testDescribeTable()\n         assertEquals(actualColumns, expectedColumns);\n     }\n \n+    @Test\n+    public void createTableWithEveryType()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzIzNzU2Mw==", "bodyText": "We are using SqlExecutor for roundtrip tests, so it depends on #6748.", "url": "https://github.com/trinodb/trino/pull/3767#discussion_r567237563", "createdAt": "2021-01-30T12:01:48Z", "author": {"login": "ebyhr"}, "path": "plugin/trino-bigquery/src/test/java/io/trino/plugin/bigquery/TestBigQueryIntegrationSmokeTest.java", "diffHunk": "@@ -61,6 +63,78 @@ public void testDescribeTable()\n         assertEquals(actualColumns, expectedColumns);\n     }\n \n+    @Test\n+    public void createTableWithEveryType()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njg2MTQ3NQ=="}, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3NjkyNjA5OnYy", "diffSide": "RIGHT", "path": "plugin/trino-bigquery/src/main/java/io/trino/plugin/bigquery/BigQueryMetadata.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxMDoyMjozNVrOIdaTBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxNDozMjoxOVrOIdj73g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzcxMDQ2OA==", "bodyText": "I assume that createTable would throw if table already exists. Can you determine if reason for an exception is that table was already in bigquery. And then ignore the exception if boolean ignoreExisting is true?", "url": "https://github.com/trinodb/trino/pull/3767#discussion_r567710468", "createdAt": "2021-02-01T10:22:35Z", "author": {"login": "losipiuk"}, "path": "plugin/trino-bigquery/src/main/java/io/trino/plugin/bigquery/BigQueryMetadata.java", "diffHunk": "@@ -238,6 +240,20 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         return new ConnectorTableProperties();\n     }\n \n+    @Override\n+    public void createTable(ConnectorSession session, ConnectorTableMetadata tableMetadata, boolean ignoreExisting)\n+    {\n+        createTable(tableMetadata);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg2ODM4Mg==", "bodyText": "We can determine by BigQueryException (code: 409, status: ALREADY_EXISTS). Let me change.", "url": "https://github.com/trinodb/trino/pull/3767#discussion_r567868382", "createdAt": "2021-02-01T14:32:19Z", "author": {"login": "ebyhr"}, "path": "plugin/trino-bigquery/src/main/java/io/trino/plugin/bigquery/BigQueryMetadata.java", "diffHunk": "@@ -238,6 +240,20 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         return new ConnectorTableProperties();\n     }\n \n+    @Override\n+    public void createTable(ConnectorSession session, ConnectorTableMetadata tableMetadata, boolean ignoreExisting)\n+    {\n+        createTable(tableMetadata);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzcxMDQ2OA=="}, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3Njk2MDM2OnYy", "diffSide": "RIGHT", "path": "plugin/trino-bigquery/src/main/java/io/trino/plugin/bigquery/BigQueryType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxMDozMDoyOFrOIdansA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxMDozMDoyOFrOIdansA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzcxNTc2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static Field toField(String name, Type type)\n          \n          \n            \n                {\n          \n          \n            \n                    if (type instanceof ArrayType) {\n          \n          \n            \n                        Type elementType = ((ArrayType) type).getElementType();\n          \n          \n            \n                        if (elementType instanceof RowType) {\n          \n          \n            \n                            return Field.newBuilder(name, StandardSQLTypeName.STRUCT, toFieldList((RowType) elementType)).setMode(REPEATED).build();\n          \n          \n            \n                        }\n          \n          \n            \n                        return Field.newBuilder(name, toStandardSqlTypeName(elementType)).setMode(REPEATED).build();\n          \n          \n            \n                    }\n          \n          \n            \n                    if (type instanceof RowType) {\n          \n          \n            \n                        return Field.of(name, StandardSQLTypeName.STRUCT, toFieldList((RowType) type));\n          \n          \n            \n                    }\n          \n          \n            \n                    return Field.of(name, toStandardSqlTypeName(type));\n          \n          \n            \n                }\n          \n          \n            \n                public static Field toField(String name, Type type)\n          \n          \n            \n                {\n          \n          \n            \n                    if (type instanceof ArrayType) {\n          \n          \n            \n                        Type elementType = ((ArrayType) type).getElementType();\n          \n          \n            \n                        return toInnerFieldBuilder(name, elementType).setMode(REPEATED).build();\n          \n          \n            \n                    }\n          \n          \n            \n                    return toInnerFieldBuilder(name, type).build();\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                private static Field.Builder toInnerFieldBuilder(String name, Type type)\n          \n          \n            \n                {\n          \n          \n            \n                    if (type instanceof RowType) {\n          \n          \n            \n                        return Field.newBuilder(name, StandardSQLTypeName.STRUCT, toFieldList((RowType) type));\n          \n          \n            \n                    }\n          \n          \n            \n                    return Field.newBuilder(name, toStandardSqlTypeName(type));\n          \n          \n            \n                }", "url": "https://github.com/trinodb/trino/pull/3767#discussion_r567715760", "createdAt": "2021-02-01T10:30:28Z", "author": {"login": "losipiuk"}, "path": "plugin/trino-bigquery/src/main/java/io/trino/plugin/bigquery/BigQueryType.java", "diffHunk": "@@ -182,6 +192,70 @@ static String bytesToStringConverter(Object value)\n         return format(\"FROM_BASE64('%s')\", Base64.getEncoder().encodeToString(slice.getBytes()));\n     }\n \n+    public static Field toField(String name, Type type)\n+    {\n+        if (type instanceof ArrayType) {\n+            Type elementType = ((ArrayType) type).getElementType();\n+            if (elementType instanceof RowType) {\n+                return Field.newBuilder(name, StandardSQLTypeName.STRUCT, toFieldList((RowType) elementType)).setMode(REPEATED).build();\n+            }\n+            return Field.newBuilder(name, toStandardSqlTypeName(elementType)).setMode(REPEATED).build();\n+        }\n+        if (type instanceof RowType) {\n+            return Field.of(name, StandardSQLTypeName.STRUCT, toFieldList((RowType) type));\n+        }\n+        return Field.of(name, toStandardSqlTypeName(type));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3Njk5NDYyOnYy", "diffSide": "RIGHT", "path": "plugin/trino-bigquery/src/test/java/io/trino/plugin/bigquery/TestBigQueryIntegrationSmokeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxMDozODo0MVrOIda8pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxMDozODo0MVrOIda8pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzcyMTEyNQ==", "bodyText": "nit: would it take much more test-execution time to provide type and expected type via test parameters and use @DataProvider to pass those. Then each test execution would create table with just one column. Having separate tests for each type can make investigating failures later on easier.", "url": "https://github.com/trinodb/trino/pull/3767#discussion_r567721125", "createdAt": "2021-02-01T10:38:41Z", "author": {"login": "losipiuk"}, "path": "plugin/trino-bigquery/src/test/java/io/trino/plugin/bigquery/TestBigQueryIntegrationSmokeTest.java", "diffHunk": "@@ -61,6 +63,78 @@ public void testDescribeTable()\n         assertEquals(actualColumns, expectedColumns);\n     }\n \n+    @Test\n+    public void createTableWithEveryType()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYzMzEyNTc0OnYy", "diffSide": "RIGHT", "path": "plugin/trino-bigquery/src/main/java/io/trino/plugin/bigquery/BigQueryMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNVQxMzowOTo1OFrOIlfTjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNVQxMzowOTo1OFrOIlfTjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjE4MTEzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    TableId tableId = TableId.of(projectId, bigQueryTable.getRemoteTableName().getDatasetName(), bigQueryTable.getRemoteTableName().getTableName());\n          \n          \n            \n                    TableId tableId = bigQueryTable.getRemoteTableName().toTableId();", "url": "https://github.com/trinodb/trino/pull/3767#discussion_r576181132", "createdAt": "2021-02-15T13:09:58Z", "author": {"login": "hashhar"}, "path": "plugin/trino-bigquery/src/main/java/io/trino/plugin/bigquery/BigQueryMetadata.java", "diffHunk": "@@ -286,6 +292,28 @@ public ConnectorTableProperties getTableProperties(ConnectorSession session, Con\n         return new ConnectorTableProperties();\n     }\n \n+    @Override\n+    public void createTable(ConnectorSession session, ConnectorTableMetadata tableMetadata, boolean ignoreExisting)\n+    {\n+        try {\n+            createTable(tableMetadata);\n+        }\n+        catch (BigQueryException e) {\n+            if (ignoreExisting && e.getCode() == 409) {\n+                return;\n+            }\n+            throw e;\n+        }\n+    }\n+\n+    @Override\n+    public void dropTable(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        BigQueryTableHandle bigQueryTable = (BigQueryTableHandle) tableHandle;\n+        TableId tableId = TableId.of(projectId, bigQueryTable.getRemoteTableName().getDatasetName(), bigQueryTable.getRemoteTableName().getTableName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY2NjkwMTY4OnYy", "diffSide": "RIGHT", "path": "plugin/trino-bigquery/src/main/java/io/trino/plugin/bigquery/BigQueryMetadata.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QxODozOTo1M1rOIqXaLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QxODozOTo1M1rOIqXaLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTI5NDYzNw==", "bodyText": "nit: put this one just below public craeteTable", "url": "https://github.com/trinodb/trino/pull/3767#discussion_r581294637", "createdAt": "2021-02-23T18:39:53Z", "author": {"login": "losipiuk"}, "path": "plugin/trino-bigquery/src/main/java/io/trino/plugin/bigquery/BigQueryMetadata.java", "diffHunk": "@@ -396,4 +424,20 @@ public RecordCursor cursor(ConnectorTransactionHandle transactionHandle, Connect\n             }\n         };\n     }\n+\n+    private void createTable(ConnectorTableMetadata tableMetadata)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY2Njk3NDA4OnYy", "diffSide": "RIGHT", "path": "plugin/trino-bigquery/src/main/java/io/trino/plugin/bigquery/BigQueryType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QxODo1Nzo0NVrOIqYH1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QxODo1Nzo0NVrOIqYH1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTMwNjMyNg==", "bodyText": "nit: IMO using Field as return type, passing repeated flag via parameter and using Builder only internally makes code a bit easier to read.\nWDYT:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static Field toField(String name, Type type)\n          \n          \n            \n                {\n          \n          \n            \n                    if (type instanceof ArrayType) {\n          \n          \n            \n                        Type elementType = ((ArrayType) type).getElementType();\n          \n          \n            \n                        return toInnerFieldBuilder(name, elementType).setMode(REPEATED).build();\n          \n          \n            \n                    }\n          \n          \n            \n                    return toInnerFieldBuilder(name, type).build();\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                private static Field.Builder toInnerFieldBuilder(String name, Type type)\n          \n          \n            \n                {\n          \n          \n            \n                    if (type instanceof RowType) {\n          \n          \n            \n                        return Field.newBuilder(name, StandardSQLTypeName.STRUCT, toFieldList((RowType) type));\n          \n          \n            \n                    }\n          \n          \n            \n                    return Field.newBuilder(name, toStandardSqlTypeName(type));\n          \n          \n            \n                }\n          \n          \n            \n                public static Field toField(String name, Type type)\n          \n          \n            \n                {\n          \n          \n            \n                    if (type instanceof ArrayType) {\n          \n          \n            \n                        Type elementType = ((ArrayType) type).getElementType();\n          \n          \n            \n                        return toInnerField(name, elementType, true);\n          \n          \n            \n                    }\n          \n          \n            \n                    return toInnerField(name, type, false);\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                private static Field toInnerField(String name, Type type, boolean repeated)\n          \n          \n            \n                {\n          \n          \n            \n                    Field.Builder builder;\n          \n          \n            \n                    if (type instanceof RowType) {\n          \n          \n            \n                        builder = Field.newBuilder(name, StandardSQLTypeName.STRUCT, toFieldList((RowType) type));\n          \n          \n            \n                    }\n          \n          \n            \n                    else {\n          \n          \n            \n                        builder = Field.newBuilder(name, toStandardSqlTypeName(type));\n          \n          \n            \n                    }\n          \n          \n            \n                    if (repeated) {\n          \n          \n            \n                        builder = builder.setMode(REPEATED);\n          \n          \n            \n                    }\n          \n          \n            \n                    return builder.build();\n          \n          \n            \n                }", "url": "https://github.com/trinodb/trino/pull/3767#discussion_r581306326", "createdAt": "2021-02-23T18:57:45Z", "author": {"login": "losipiuk"}, "path": "plugin/trino-bigquery/src/main/java/io/trino/plugin/bigquery/BigQueryType.java", "diffHunk": "@@ -182,6 +194,75 @@ static String bytesToStringConverter(Object value)\n         return format(\"FROM_BASE64('%s')\", Base64.getEncoder().encodeToString(slice.getBytes()));\n     }\n \n+    public static Field toField(String name, Type type)\n+    {\n+        if (type instanceof ArrayType) {\n+            Type elementType = ((ArrayType) type).getElementType();\n+            return toInnerFieldBuilder(name, elementType).setMode(REPEATED).build();\n+        }\n+        return toInnerFieldBuilder(name, type).build();\n+    }\n+\n+    private static Field.Builder toInnerFieldBuilder(String name, Type type)\n+    {\n+        if (type instanceof RowType) {\n+            return Field.newBuilder(name, StandardSQLTypeName.STRUCT, toFieldList((RowType) type));\n+        }\n+        return Field.newBuilder(name, toStandardSqlTypeName(type));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY2Njk4OTM4OnYy", "diffSide": "RIGHT", "path": "plugin/trino-bigquery/src/test/java/io/trino/plugin/bigquery/TestBigQueryIntegrationSmokeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QxOTowMToyM1rOIqYRUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QxOTowMToyM1rOIqYRUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTMwODc1Mw==", "bodyText": "let's not use random suffix here. In other tests we are not using that and we have perparatory  assertUpdate(\"DROP TABLE IF EXISTS \" + tableName); because of that.\nIf we use randomsuffixes we can pollute test environment and as far as I know we do not have any cleaner in place right now.", "url": "https://github.com/trinodb/trino/pull/3767#discussion_r581308753", "createdAt": "2021-02-23T19:01:23Z", "author": {"login": "losipiuk"}, "path": "plugin/trino-bigquery/src/test/java/io/trino/plugin/bigquery/TestBigQueryIntegrationSmokeTest.java", "diffHunk": "@@ -61,6 +64,76 @@ public void testDescribeTable()\n         assertEquals(actualColumns, expectedColumns);\n     }\n \n+    @Test(dataProvider = \"createTableColumnTypes\")\n+    public void testCreateTableWithEveryType(String createType, String expectedType)\n+    {\n+        String tableName = \"test_types_table_\" + randomTableSuffix();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY2Njk5MTA3OnYy", "diffSide": "RIGHT", "path": "plugin/trino-bigquery/src/test/java/io/trino/plugin/bigquery/TestBigQueryIntegrationSmokeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QxOTowMTo1MFrOIqYSZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QxOTowMTo1MFrOIqYSZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTMwOTAzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            computeScalar(\"SElECT data_type FROM information_schema.columns WHERE table_name = '\" + tableName + \"' AND column_name = 'col1'\"),\n          \n          \n            \n                            computeScalar(\"SELECT data_type FROM information_schema.columns WHERE table_name = '\" + tableName + \"' AND column_name = 'col1'\"),", "url": "https://github.com/trinodb/trino/pull/3767#discussion_r581309031", "createdAt": "2021-02-23T19:01:50Z", "author": {"login": "losipiuk"}, "path": "plugin/trino-bigquery/src/test/java/io/trino/plugin/bigquery/TestBigQueryIntegrationSmokeTest.java", "diffHunk": "@@ -61,6 +64,76 @@ public void testDescribeTable()\n         assertEquals(actualColumns, expectedColumns);\n     }\n \n+    @Test(dataProvider = \"createTableColumnTypes\")\n+    public void testCreateTableWithEveryType(String createType, String expectedType)\n+    {\n+        String tableName = \"test_types_table_\" + randomTableSuffix();\n+\n+        assertUpdate(\"DROP TABLE IF EXISTS \" + tableName);\n+\n+        assertUpdate(format(\"CREATE TABLE %s (col1 %s)\", tableName, createType));\n+\n+        assertEquals(\n+                computeScalar(\"SElECT data_type FROM information_schema.columns WHERE table_name = '\" + tableName + \"' AND column_name = 'col1'\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY2Njk5NzYzOnYy", "diffSide": "RIGHT", "path": "plugin/trino-bigquery/src/test/java/io/trino/plugin/bigquery/TestBigQueryIntegrationSmokeTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QxOTowMzoxN1rOIqYWcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNFQxNDo0NToxN1rOIrDkoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTMxMDA2NA==", "bodyText": "maybe some test for unsupported type?", "url": "https://github.com/trinodb/trino/pull/3767#discussion_r581310064", "createdAt": "2021-02-23T19:03:17Z", "author": {"login": "losipiuk"}, "path": "plugin/trino-bigquery/src/test/java/io/trino/plugin/bigquery/TestBigQueryIntegrationSmokeTest.java", "diffHunk": "@@ -61,6 +64,76 @@ public void testDescribeTable()\n         assertEquals(actualColumns, expectedColumns);\n     }\n \n+    @Test(dataProvider = \"createTableColumnTypes\")\n+    public void testCreateTableWithEveryType(String createType, String expectedType)\n+    {\n+        String tableName = \"test_types_table_\" + randomTableSuffix();\n+\n+        assertUpdate(\"DROP TABLE IF EXISTS \" + tableName);\n+\n+        assertUpdate(format(\"CREATE TABLE %s (col1 %s)\", tableName, createType));\n+\n+        assertEquals(\n+                computeScalar(\"SElECT data_type FROM information_schema.columns WHERE table_name = '\" + tableName + \"' AND column_name = 'col1'\"),\n+                expectedType);\n+\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @DataProvider\n+    public Object[][] createTableColumnTypes()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MjAxMjM3OA==", "bodyText": "@losipiuk Do you mean this provider contains unsupported types? Or we should add tests  for unsupported types?\nIt seems if we use a same table name in this tests, we may get below error:\n\njava.lang.RuntimeException: Exceeded rate limits: too many table update operations for this table. For more information, see https://cloud.google.com/bigquery/troubleshooting-errors\n\n\tat io.trino.testing.AbstractTestingTrinoClient.execute(AbstractTestingTrinoClient.java:120)\n\tat io.trino.testing.DistributedQueryRunner.execute(DistributedQueryRunner.java:491)\n\tat io.trino.testing.QueryAssertions.assertUpdate(QueryAssertions.java:71)\n\tat io.trino.testing.AbstractTestQueryFramework.assertUpdate(AbstractTestQueryFramework.java:215)\n\tat io.trino.testing.AbstractTestQueryFramework.assertUpdate(AbstractTestQueryFramework.java:210)\n\tat io.trino.plugin.bigquery.TestBigQueryIntegrationSmokeTest.testCreateTableSupportedType(TestBigQueryIntegrationSmokeTest.java:74)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:104)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:645)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:851)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1177)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:756)\n\tat org.testng.TestRunner.run(TestRunner.java:610)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:387)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:382)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:289)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1293)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1218)\n\tat org.testng.TestNG.runSuites(TestNG.java:1133)\n\tat org.testng.TestNG.run(TestNG.java:1104)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\nCaused by: com.google.cloud.bigquery.BigQueryException: Exceeded rate limits: too many table update operations for this table. For more information, see https://cloud.google.com/bigquery/troubleshooting-errors\n\tat com.google.cloud.bigquery.spi.v2.HttpBigQueryRpc.translate(HttpBigQueryRpc.java:115)\n\tat com.google.cloud.bigquery.spi.v2.HttpBigQueryRpc.create(HttpBigQueryRpc.java:187)\n\tat com.google.cloud.bigquery.BigQueryImpl$2.call(BigQueryImpl.java:292)\n\tat com.google.cloud.bigquery.BigQueryImpl$2.call(BigQueryImpl.java:289)\n\tat com.google.api.gax.retrying.DirectRetryingExecutor.submit(DirectRetryingExecutor.java:105)\n\tat com.google.cloud.RetryHelper.run(RetryHelper.java:76)\n\tat com.google.cloud.RetryHelper.runWithRetries(RetryHelper.java:50)\n\tat com.google.cloud.bigquery.BigQueryImpl.create(BigQueryImpl.java:288)\n\tat io.trino.plugin.bigquery.BigQueryClient.createTable(BigQueryClient.java:208)\n\tat io.trino.plugin.bigquery.BigQueryMetadata.createTable(BigQueryMetadata.java:322)\n\tat io.trino.plugin.bigquery.BigQueryMetadata.createTable(BigQueryMetadata.java:299)\n\tat io.trino.metadata.MetadataManager.createTable(MetadataManager.java:675)\n\tat io.trino.execution.CreateTableTask.internalExecute(CreateTableTask.java:227)\n\tat io.trino.execution.CreateTableTask.execute(CreateTableTask.java:91)\n\tat io.trino.execution.CreateTableTask.execute(CreateTableTask.java:73)\n\tat io.trino.execution.DataDefinitionExecution.start(DataDefinitionExecution.java:167)\n\tat io.trino.execution.SqlQueryManager.createQuery(SqlQueryManager.java:237)\n\tat io.trino.dispatcher.LocalDispatchQuery.lambda$startExecution$7(LocalDispatchQuery.java:143)\n\tat io.trino.$gen.Trino_testversion____20210224_143345_3.run(Unknown Source)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n\tat java.base/java.lang.Thread.run(Thread.java:834)\nCaused by: com.google.api.client.googleapis.json.GoogleJsonResponseException: 403 Forbidden\nPOST https://www.googleapis.com/bigquery/v2/projects/ivory-oarlock-268702/datasets/tpch/tables?prettyPrint=false\n{\n  \"code\" : 403,\n  \"errors\" : [ {\n    \"domain\" : \"usageLimits\",\n    \"message\" : \"Exceeded rate limits: too many table update operations for this table. For more information, see https://cloud.google.com/bigquery/troubleshooting-errors\",\n    \"reason\" : \"rateLimitExceeded\"\n  } ],\n  \"message\" : \"Exceeded rate limits: too many table update operations for this table. For more information, see https://cloud.google.com/bigquery/troubleshooting-errors\",\n  \"status\" : \"PERMISSION_DENIED\"\n}\n\tat com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:146)\n\tat com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:118)\n\tat com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest.newExceptionOnError(AbstractGoogleJsonClientRequest.java:37)\n\tat com.google.api.client.googleapis.services.AbstractGoogleClientRequest$1.interceptResponse(AbstractGoogleClientRequest.java:428)\n\tat com.google.api.client.http.HttpRequest.execute(HttpRequest.java:1108)\n\tat com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:514)\n\tat com.google.api.client.googleapis.services.AbstractGoogleClientRequest.executeUnparsed(AbstractGoogleClientRequest.java:455)\n\tat com.google.api.client.googleapis.services.AbstractGoogleClientRequest.execute(AbstractGoogleClientRequest.java:565)\n\tat com.google.cloud.bigquery.spi.v2.HttpBigQueryRpc.create(HttpBigQueryRpc.java:185)\n\t... 20 more", "url": "https://github.com/trinodb/trino/pull/3767#discussion_r582012378", "createdAt": "2021-02-24T14:38:17Z", "author": {"login": "ebyhr"}, "path": "plugin/trino-bigquery/src/test/java/io/trino/plugin/bigquery/TestBigQueryIntegrationSmokeTest.java", "diffHunk": "@@ -61,6 +64,76 @@ public void testDescribeTable()\n         assertEquals(actualColumns, expectedColumns);\n     }\n \n+    @Test(dataProvider = \"createTableColumnTypes\")\n+    public void testCreateTableWithEveryType(String createType, String expectedType)\n+    {\n+        String tableName = \"test_types_table_\" + randomTableSuffix();\n+\n+        assertUpdate(\"DROP TABLE IF EXISTS \" + tableName);\n+\n+        assertUpdate(format(\"CREATE TABLE %s (col1 %s)\", tableName, createType));\n+\n+        assertEquals(\n+                computeScalar(\"SElECT data_type FROM information_schema.columns WHERE table_name = '\" + tableName + \"' AND column_name = 'col1'\"),\n+                expectedType);\n+\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @DataProvider\n+    public Object[][] createTableColumnTypes()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTMxMDA2NA=="}, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MjAxODIwOA==", "bodyText": "@losipiuk Do you mean this provider contains unsupported types? Or we should add tests for unsupported types?\n\nI meant adding test for unsupported type. But this is optional. I do not think we do that for other connectors.\n\nIt seems if we use a same table name in this tests, we may get below error:\n\nWhat about using some deterministic table name generator (some_prefix_<tested_type>?)", "url": "https://github.com/trinodb/trino/pull/3767#discussion_r582018208", "createdAt": "2021-02-24T14:45:17Z", "author": {"login": "losipiuk"}, "path": "plugin/trino-bigquery/src/test/java/io/trino/plugin/bigquery/TestBigQueryIntegrationSmokeTest.java", "diffHunk": "@@ -61,6 +64,76 @@ public void testDescribeTable()\n         assertEquals(actualColumns, expectedColumns);\n     }\n \n+    @Test(dataProvider = \"createTableColumnTypes\")\n+    public void testCreateTableWithEveryType(String createType, String expectedType)\n+    {\n+        String tableName = \"test_types_table_\" + randomTableSuffix();\n+\n+        assertUpdate(\"DROP TABLE IF EXISTS \" + tableName);\n+\n+        assertUpdate(format(\"CREATE TABLE %s (col1 %s)\", tableName, createType));\n+\n+        assertEquals(\n+                computeScalar(\"SElECT data_type FROM information_schema.columns WHERE table_name = '\" + tableName + \"' AND column_name = 'col1'\"),\n+                expectedType);\n+\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @DataProvider\n+    public Object[][] createTableColumnTypes()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTMxMDA2NA=="}, "originalCommit": null, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY2NzAxMjc2OnYy", "diffSide": "RIGHT", "path": "plugin/trino-bigquery/src/test/java/io/trino/plugin/bigquery/TestBigQueryIntegrationSmokeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QxOTowNzowMVrOIqYfuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QxOTowNzowMVrOIqYfuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTMxMjQ0Mw==", "bodyText": "add test checking that CREATE TABLE fails if table already exists and CREATE TABLE IF NOT EXISTS works fine as a noop.", "url": "https://github.com/trinodb/trino/pull/3767#discussion_r581312443", "createdAt": "2021-02-23T19:07:01Z", "author": {"login": "losipiuk"}, "path": "plugin/trino-bigquery/src/test/java/io/trino/plugin/bigquery/TestBigQueryIntegrationSmokeTest.java", "diffHunk": "@@ -61,6 +64,76 @@ public void testDescribeTable()\n         assertEquals(actualColumns, expectedColumns);\n     }\n \n+    @Test(dataProvider = \"createTableColumnTypes\")\n+    public void testCreateTableWithEveryType(String createType, String expectedType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4853, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}