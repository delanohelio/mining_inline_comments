{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyNjI3NzIz", "number": 6208, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNzoxMjo0MVrOFB43qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNzo1NjoyOFrOFB6Jng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NTI0NjUxOnYy", "diffSide": "RIGHT", "path": "presto-test-jdbc-compatibility-old-driver/src/test/java/io/prestosql/TestJdbcCompatibility.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNzoxMjo0MVrOIAxRlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNzoxMjo0MVrOIAxRlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY3ODIyOQ==", "bodyText": "Use literal expected values in TestJdbcCompatibility LGTM", "url": "https://github.com/trinodb/trino/pull/6208#discussion_r537678229", "createdAt": "2020-12-07T17:12:41Z", "author": {"login": "losipiuk"}, "path": "presto-test-jdbc-compatibility-old-driver/src/test/java/io/prestosql/TestJdbcCompatibility.java", "diffHunk": "@@ -146,27 +139,53 @@ public void testSelectTimestampWithTimeZone()\n             throw new SkipException(\"This version reports PARAMETRIC_DATETIME client capability but TIMESTAMP WITH TIME ZONE is not supported\");\n         }\n \n-        String query = format(\"SELECT timestamp '2012-10-31 01:00 %s'\", TESTED_TZ);\n+        String query = \"SELECT timestamp '2012-10-31 01:00 Australia/Eucla'\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63fb3cbaa120579557c9424f42e59d7ef57a851"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NTI3NTIzOnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNzoxODoyNlrOIAxiTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMjowMDo1OVrOIBWfeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY4MjUwOA==", "bodyText": "Fix TIME/TIMESTAMP TZ column declaration for result set is backward incompatible. Do we care?", "url": "https://github.com/trinodb/trino/pull/6208#discussion_r537682508", "createdAt": "2020-12-07T17:18:26Z", "author": {"login": "losipiuk"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -562,9 +562,11 @@ public Object getObject(int columnIndex)\n                 // TODO (https://github.com/prestosql/presto/issues/6048) move to convertFromClientRepresentation\n                 return getDate(columnIndex);\n             case Types.TIME:\n+            case Types.TIME_WITH_TIMEZONE:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27dc861d21e7a47a58f16509dd7f76afd54bb368"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI4Nzk5NA==", "bodyText": "Yes, it is. I think it's just a bug. I reported this as #6251 for reference.", "url": "https://github.com/trinodb/trino/pull/6208#discussion_r538287994", "createdAt": "2020-12-08T12:00:59Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -562,9 +562,11 @@ public Object getObject(int columnIndex)\n                 // TODO (https://github.com/prestosql/presto/issues/6048) move to convertFromClientRepresentation\n                 return getDate(columnIndex);\n             case Types.TIME:\n+            case Types.TIME_WITH_TIMEZONE:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY4MjUwOA=="}, "originalCommit": {"oid": "27dc861d21e7a47a58f16509dd7f76afd54bb368"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NTMwNzY4OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNzoyNDo0NlrOIAx1Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMjoyMTowOFrOIBXing==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY4NzMwMg==", "bodyText": "can you mechanically change other assertEquals to assertThat.equalsTo?\nA thought - if we want such migration maybe we should create a series of good-first-issue issues to migrate individual modules.", "url": "https://github.com/trinodb/trino/pull/6208#discussion_r537687302", "createdAt": "2020-12-07T17:24:46Z", "author": {"login": "losipiuk"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -632,12 +633,12 @@ public void testArray()\n         try (ConnectedStatement connectedStatement = newStatement()) {\n             checkRepresentation(connectedStatement.getStatement(), \"ARRAY[1, 2]\", Types.ARRAY, (rs, column) -> {\n                 Array array = rs.getArray(column);\n-                assertEquals(array.getArray(), new int[] {1, 2});\n+                assertThat(array.getArray()).isEqualTo(new int[] {1, 2});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8193862a1e5d9bce7d18b8425dd30cb862d10ad"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY4ODUyNA==", "bodyText": "hmm: https://joel-costigliola.github.io/assertj/assertj-core-converting-testng-assertions-to-assertj.html", "url": "https://github.com/trinodb/trino/pull/6208#discussion_r537688524", "createdAt": "2020-12-07T17:26:34Z", "author": {"login": "losipiuk"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -632,12 +633,12 @@ public void testArray()\n         try (ConnectedStatement connectedStatement = newStatement()) {\n             checkRepresentation(connectedStatement.getStatement(), \"ARRAY[1, 2]\", Types.ARRAY, (rs, column) -> {\n                 Array array = rs.getArray(column);\n-                assertEquals(array.getArray(), new int[] {1, 2});\n+                assertThat(array.getArray()).isEqualTo(new int[] {1, 2});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY4NzMwMg=="}, "originalCommit": {"oid": "d8193862a1e5d9bce7d18b8425dd30cb862d10ad"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI4ODgxMA==", "bodyText": "Let's treat this as a follow up, ok? please file appropriate issues, if we want to go into that direction", "url": "https://github.com/trinodb/trino/pull/6208#discussion_r538288810", "createdAt": "2020-12-08T12:01:59Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -632,12 +633,12 @@ public void testArray()\n         try (ConnectedStatement connectedStatement = newStatement()) {\n             checkRepresentation(connectedStatement.getStatement(), \"ARRAY[1, 2]\", Types.ARRAY, (rs, column) -> {\n                 Array array = rs.getArray(column);\n-                assertEquals(array.getArray(), new int[] {1, 2});\n+                assertThat(array.getArray()).isEqualTo(new int[] {1, 2});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY4NzMwMg=="}, "originalCommit": {"oid": "d8193862a1e5d9bce7d18b8425dd30cb862d10ad"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMwNTE4Mg==", "bodyText": "Sure - let's discuss offline if that is direction to go.", "url": "https://github.com/trinodb/trino/pull/6208#discussion_r538305182", "createdAt": "2020-12-08T12:21:08Z", "author": {"login": "losipiuk"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -632,12 +633,12 @@ public void testArray()\n         try (ConnectedStatement connectedStatement = newStatement()) {\n             checkRepresentation(connectedStatement.getStatement(), \"ARRAY[1, 2]\", Types.ARRAY, (rs, column) -> {\n                 Array array = rs.getArray(column);\n-                assertEquals(array.getArray(), new int[] {1, 2});\n+                assertThat(array.getArray()).isEqualTo(new int[] {1, 2});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY4NzMwMg=="}, "originalCommit": {"oid": "d8193862a1e5d9bce7d18b8425dd30cb862d10ad"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NTM3OTkwOnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNzo0MDoyMVrOIAyf2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMjowMjoyOFrOIBWkPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY5ODI2NA==", "bodyText": "can you replace resultTimeZone field with constant and reference the constant also here?", "url": "https://github.com/trinodb/trino/pull/6208#discussion_r537698264", "createdAt": "2020-12-07T17:40:21Z", "author": {"login": "losipiuk"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -125,10 +125,36 @@\n     // Since January 1, 1900 UTC is still December 31, 1899 in other zones, we are adding a 1 year margin.\n     private static final long START_OF_MODERN_ERA_SECONDS = java.time.LocalDate.of(1901, 1, 1).toEpochDay() * SECONDS_PER_DAY;\n \n-    private static final TypeConversions TYPE_CONVERSIONS =\n+    @VisibleForTesting\n+    static final Map<String, Class<?>> DEFAULT_OBJECT_REPRESENTATION = ImmutableMap.<String, Class<?>>builder()\n+            .put(\"decimal\", BigDecimal.class)\n+            .put(\"date\", java.sql.Date.class)\n+            .put(\"time\", java.sql.Time.class)\n+            .put(\"time with time zone\", java.sql.Time.class)\n+            .put(\"timestamp\", java.sql.Timestamp.class)\n+            .put(\"timestamp with time zone\", java.sql.Timestamp.class)\n+            .put(\"interval year to month\", PrestoIntervalYearMonth.class)\n+            .put(\"interval day to second\", PrestoIntervalDayTime.class)\n+            .put(\"map\", Map.class)\n+            .put(\"row\", Row.class)\n+            .build();\n+\n+    @VisibleForTesting\n+    static final TypeConversions TYPE_CONVERSIONS =\n             TypeConversions.builder()\n-                    .add(\"array\", PrestoArray.class, List.class, array -> asList((Object[]) array.getArray()))\n-                    .add(\"row\", Row.class, Map.class, row -> {\n+                    .add(\"decimal\", String.class, BigDecimal.class, AbstractPrestoResultSet::parseBigDecimal)\n+                    .add(\"date\", String.class, Date.class, string -> parseDate(string, DateTimeZone.forID(ZoneId.systemDefault().getId())))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65936e719fd40adfc8342a3e7f0e94d8e97da742"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI4OTIxMg==", "bodyText": "resultTimeZone should not be constant because JVM time zone is settable", "url": "https://github.com/trinodb/trino/pull/6208#discussion_r538289212", "createdAt": "2020-12-08T12:02:28Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -125,10 +125,36 @@\n     // Since January 1, 1900 UTC is still December 31, 1899 in other zones, we are adding a 1 year margin.\n     private static final long START_OF_MODERN_ERA_SECONDS = java.time.LocalDate.of(1901, 1, 1).toEpochDay() * SECONDS_PER_DAY;\n \n-    private static final TypeConversions TYPE_CONVERSIONS =\n+    @VisibleForTesting\n+    static final Map<String, Class<?>> DEFAULT_OBJECT_REPRESENTATION = ImmutableMap.<String, Class<?>>builder()\n+            .put(\"decimal\", BigDecimal.class)\n+            .put(\"date\", java.sql.Date.class)\n+            .put(\"time\", java.sql.Time.class)\n+            .put(\"time with time zone\", java.sql.Time.class)\n+            .put(\"timestamp\", java.sql.Timestamp.class)\n+            .put(\"timestamp with time zone\", java.sql.Timestamp.class)\n+            .put(\"interval year to month\", PrestoIntervalYearMonth.class)\n+            .put(\"interval day to second\", PrestoIntervalDayTime.class)\n+            .put(\"map\", Map.class)\n+            .put(\"row\", Row.class)\n+            .build();\n+\n+    @VisibleForTesting\n+    static final TypeConversions TYPE_CONVERSIONS =\n             TypeConversions.builder()\n-                    .add(\"array\", PrestoArray.class, List.class, array -> asList((Object[]) array.getArray()))\n-                    .add(\"row\", Row.class, Map.class, row -> {\n+                    .add(\"decimal\", String.class, BigDecimal.class, AbstractPrestoResultSet::parseBigDecimal)\n+                    .add(\"date\", String.class, Date.class, string -> parseDate(string, DateTimeZone.forID(ZoneId.systemDefault().getId())))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY5ODI2NA=="}, "originalCommit": {"oid": "65936e719fd40adfc8342a3e7f0e94d8e97da742"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NTM4MzY4OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNzo0MTowOFrOIAyiHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNzo0MTowOFrOIAyiHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY5ODg0NA==", "bodyText": "same here", "url": "https://github.com/trinodb/trino/pull/6208#discussion_r537698844", "createdAt": "2020-12-07T17:41:08Z", "author": {"login": "losipiuk"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -125,10 +125,36 @@\n     // Since January 1, 1900 UTC is still December 31, 1899 in other zones, we are adding a 1 year margin.\n     private static final long START_OF_MODERN_ERA_SECONDS = java.time.LocalDate.of(1901, 1, 1).toEpochDay() * SECONDS_PER_DAY;\n \n-    private static final TypeConversions TYPE_CONVERSIONS =\n+    @VisibleForTesting\n+    static final Map<String, Class<?>> DEFAULT_OBJECT_REPRESENTATION = ImmutableMap.<String, Class<?>>builder()\n+            .put(\"decimal\", BigDecimal.class)\n+            .put(\"date\", java.sql.Date.class)\n+            .put(\"time\", java.sql.Time.class)\n+            .put(\"time with time zone\", java.sql.Time.class)\n+            .put(\"timestamp\", java.sql.Timestamp.class)\n+            .put(\"timestamp with time zone\", java.sql.Timestamp.class)\n+            .put(\"interval year to month\", PrestoIntervalYearMonth.class)\n+            .put(\"interval day to second\", PrestoIntervalDayTime.class)\n+            .put(\"map\", Map.class)\n+            .put(\"row\", Row.class)\n+            .build();\n+\n+    @VisibleForTesting\n+    static final TypeConversions TYPE_CONVERSIONS =\n             TypeConversions.builder()\n-                    .add(\"array\", PrestoArray.class, List.class, array -> asList((Object[]) array.getArray()))\n-                    .add(\"row\", Row.class, Map.class, row -> {\n+                    .add(\"decimal\", String.class, BigDecimal.class, AbstractPrestoResultSet::parseBigDecimal)\n+                    .add(\"date\", String.class, Date.class, string -> parseDate(string, DateTimeZone.forID(ZoneId.systemDefault().getId())))\n+                    .add(\"time\", String.class, Time.class, string -> parseTime(string, ZoneId.systemDefault()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65936e719fd40adfc8342a3e7f0e94d8e97da742"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NTM4NDc3OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNzo0MToyNFrOIAyi0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNzo0MToyNFrOIAyi0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY5OTAyNg==", "bodyText": "and here", "url": "https://github.com/trinodb/trino/pull/6208#discussion_r537699026", "createdAt": "2020-12-07T17:41:24Z", "author": {"login": "losipiuk"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -125,10 +125,36 @@\n     // Since January 1, 1900 UTC is still December 31, 1899 in other zones, we are adding a 1 year margin.\n     private static final long START_OF_MODERN_ERA_SECONDS = java.time.LocalDate.of(1901, 1, 1).toEpochDay() * SECONDS_PER_DAY;\n \n-    private static final TypeConversions TYPE_CONVERSIONS =\n+    @VisibleForTesting\n+    static final Map<String, Class<?>> DEFAULT_OBJECT_REPRESENTATION = ImmutableMap.<String, Class<?>>builder()\n+            .put(\"decimal\", BigDecimal.class)\n+            .put(\"date\", java.sql.Date.class)\n+            .put(\"time\", java.sql.Time.class)\n+            .put(\"time with time zone\", java.sql.Time.class)\n+            .put(\"timestamp\", java.sql.Timestamp.class)\n+            .put(\"timestamp with time zone\", java.sql.Timestamp.class)\n+            .put(\"interval year to month\", PrestoIntervalYearMonth.class)\n+            .put(\"interval day to second\", PrestoIntervalDayTime.class)\n+            .put(\"map\", Map.class)\n+            .put(\"row\", Row.class)\n+            .build();\n+\n+    @VisibleForTesting\n+    static final TypeConversions TYPE_CONVERSIONS =\n             TypeConversions.builder()\n-                    .add(\"array\", PrestoArray.class, List.class, array -> asList((Object[]) array.getArray()))\n-                    .add(\"row\", Row.class, Map.class, row -> {\n+                    .add(\"decimal\", String.class, BigDecimal.class, AbstractPrestoResultSet::parseBigDecimal)\n+                    .add(\"date\", String.class, Date.class, string -> parseDate(string, DateTimeZone.forID(ZoneId.systemDefault().getId())))\n+                    .add(\"time\", String.class, Time.class, string -> parseTime(string, ZoneId.systemDefault()))\n+                    .add(\"time with time zone\", String.class, Time.class, AbstractPrestoResultSet::parseTimeWithTimeZone)\n+                    .add(\"timestamp\", String.class, Timestamp.class, string -> parseTimestamp(string, ZoneId.systemDefault()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65936e719fd40adfc8342a3e7f0e94d8e97da742"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NTQzNzI0OnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNzo1MjoyOVrOIAzB0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNzo1MjoyOVrOIAzB0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzcwNjk2Mg==", "bodyText": "nit: extract", "url": "https://github.com/trinodb/trino/pull/6208#discussion_r537706962", "createdAt": "2020-12-07T17:52:29Z", "author": {"login": "losipiuk"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -610,21 +612,22 @@ private static Object convertFromClientRepresentation(ClientTypeSignature column\n         switch (columnType.getRawType()) {\n             case \"array\": {\n                 ClientTypeSignature elementType = getOnlyElement(columnType.getArgumentsAsTypeSignatures());\n-                return ((List<?>) value).stream()\n-                        .map(element -> convertFromClientRepresentation(elementType, element))\n-                        .collect(toList());\n+                List<Object> converted = Lists.newArrayListWithExpectedSize(((List<?>) value).size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0453aa9beb6fbcf0a2ba4c9b7375655bc4e9d07"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NTQ1NjMwOnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNzo1NjoyOFrOIAzM2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMjowNDozNlrOIBWrSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzcwOTc4NQ==", "bodyText": "is the \"else\" code path needed only for \"plugin types\" ?", "url": "https://github.com/trinodb/trino/pull/6208#discussion_r537709785", "createdAt": "2020-12-07T17:56:28Z", "author": {"login": "losipiuk"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -649,7 +649,10 @@ private static Object convertFromClientRepresentation(ClientTypeSignature column\n             }\n         }\n \n-        // TODO (https://github.com/prestosql/presto/issues/6048) add conversions for decimal, date, time, timestamp, interval\n+        Class<?> defaultRepresentation = DEFAULT_OBJECT_REPRESENTATION.get(columnType.getRawType());\n+        if (defaultRepresentation != null) {\n+            return TYPE_CONVERSIONS.convert(columnType, value, defaultRepresentation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89efdab6cfcb37eba3ed72ccae332cc50f9d1e5d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI5MTAxOA==", "bodyText": "No, i did not cover all the builtin types", "url": "https://github.com/trinodb/trino/pull/6208#discussion_r538291018", "createdAt": "2020-12-08T12:04:36Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -649,7 +649,10 @@ private static Object convertFromClientRepresentation(ClientTypeSignature column\n             }\n         }\n \n-        // TODO (https://github.com/prestosql/presto/issues/6048) add conversions for decimal, date, time, timestamp, interval\n+        Class<?> defaultRepresentation = DEFAULT_OBJECT_REPRESENTATION.get(columnType.getRawType());\n+        if (defaultRepresentation != null) {\n+            return TYPE_CONVERSIONS.convert(columnType, value, defaultRepresentation);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzcwOTc4NQ=="}, "originalCommit": {"oid": "89efdab6cfcb37eba3ed72ccae332cc50f9d1e5d"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4483, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}