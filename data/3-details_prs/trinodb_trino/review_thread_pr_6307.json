{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM3MDA3NjE3", "number": 6307, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNTozMjo1NVrOFEChFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNTozMjo1NVrOFEChFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5Nzc5ODYyOnYy", "diffSide": "RIGHT", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestPrestoDatabaseMetaData.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNTozMjo1NVrOID965w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjowNDo1M1rOID_Tvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzMTE0Mw==", "bodyText": "What is the meaning of columnSize here? It seem weird that increase by N in TIMESTAMP precision makes the columnSize increase by N.", "url": "https://github.com/trinodb/trino/pull/6307#discussion_r541031143", "createdAt": "2020-12-11T15:32:55Z", "author": {"login": "losipiuk"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestPrestoDatabaseMetaData.java", "diffHunk": "@@ -763,12 +783,30 @@ public void testGetColumns()\n                 assertColumnSpec(rs, Types.VARCHAR, (long) Integer.MAX_VALUE, null, null, (long) Integer.MAX_VALUE, createUnboundedVarcharType());\n                 assertColumnSpec(rs, Types.CHAR, 345L, null, null, 345L, createCharType(345));\n                 assertColumnSpec(rs, Types.VARBINARY, (long) Integer.MAX_VALUE, null, null, (long) Integer.MAX_VALUE, VarbinaryType.VARBINARY);\n-                assertColumnSpec(rs, Types.TIME, 12L, null, null, null, TimeType.TIME);\n-                assertColumnSpec(rs, Types.TIME_WITH_TIMEZONE, 18L, null, null, null, TimeWithTimeZoneType.TIME_WITH_TIME_ZONE);\n-                assertColumnSpec(rs, Types.TIMESTAMP, 25L, null, null, null, TimestampType.TIMESTAMP_MILLIS);\n-                assertColumnSpec(rs, Types.TIMESTAMP, 31L, null, null, null, createTimestampType(9));\n-                assertColumnSpec(rs, Types.TIMESTAMP_WITH_TIMEZONE, 59L, null, null, null, TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE);\n-                assertColumnSpec(rs, Types.TIMESTAMP_WITH_TIMEZONE, 65L, null, null, null, createTimestampWithTimeZoneType(9));\n+                assertColumnSpec(rs, Types.TIME, 12L, null, 3L, null, TimeType.TIME);\n+                assertColumnSpec(rs, Types.TIME, 8L, null, 0L, null, createTimeType(0));\n+                assertColumnSpec(rs, Types.TIME, 12L, null, 3L, null, createTimeType(3));\n+                assertColumnSpec(rs, Types.TIME, 15L, null, 6L, null, createTimeType(6));\n+                assertColumnSpec(rs, Types.TIME, 18L, null, 9L, null, createTimeType(9));\n+                assertColumnSpec(rs, Types.TIME, 21L, null, 12L, null, createTimeType(12));\n+                assertColumnSpec(rs, Types.TIME_WITH_TIMEZONE, 18L, null, 3L, null, TimeWithTimeZoneType.TIME_WITH_TIME_ZONE);\n+                assertColumnSpec(rs, Types.TIME_WITH_TIMEZONE, 14L, null, 0L, null, createTimeWithTimeZoneType(0));\n+                assertColumnSpec(rs, Types.TIME_WITH_TIMEZONE, 18L, null, 3L, null, createTimeWithTimeZoneType(3));\n+                assertColumnSpec(rs, Types.TIME_WITH_TIMEZONE, 21L, null, 6L, null, createTimeWithTimeZoneType(6));\n+                assertColumnSpec(rs, Types.TIME_WITH_TIMEZONE, 24L, null, 9L, null, createTimeWithTimeZoneType(9));\n+                assertColumnSpec(rs, Types.TIME_WITH_TIMEZONE, 27L, null, 12L, null, createTimeWithTimeZoneType(12));\n+                assertColumnSpec(rs, Types.TIMESTAMP, 25L, null, 3L, null, TimestampType.TIMESTAMP);\n+                assertColumnSpec(rs, Types.TIMESTAMP, 21L, null, 0L, null, createTimestampType(0));\n+                assertColumnSpec(rs, Types.TIMESTAMP, 25L, null, 3L, null, createTimestampType(3));\n+                assertColumnSpec(rs, Types.TIMESTAMP, 28L, null, 6L, null, createTimestampType(6));\n+                assertColumnSpec(rs, Types.TIMESTAMP, 31L, null, 9L, null, createTimestampType(9));\n+                assertColumnSpec(rs, Types.TIMESTAMP, 34L, null, 12L, null, createTimestampType(12));\n+                assertColumnSpec(rs, Types.TIMESTAMP_WITH_TIMEZONE, 59L, null, 3L, null, TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE);\n+                assertColumnSpec(rs, Types.TIMESTAMP_WITH_TIMEZONE, 55L, null, 0L, null, createTimestampWithTimeZoneType(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b480500b4f79764cd3663a3c053605afa7c718a"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzMjE4MA==", "bodyText": "It\u2019s the size of the rendered value, if I recall", "url": "https://github.com/trinodb/trino/pull/6307#discussion_r541032180", "createdAt": "2020-12-11T15:34:18Z", "author": {"login": "martint"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestPrestoDatabaseMetaData.java", "diffHunk": "@@ -763,12 +783,30 @@ public void testGetColumns()\n                 assertColumnSpec(rs, Types.VARCHAR, (long) Integer.MAX_VALUE, null, null, (long) Integer.MAX_VALUE, createUnboundedVarcharType());\n                 assertColumnSpec(rs, Types.CHAR, 345L, null, null, 345L, createCharType(345));\n                 assertColumnSpec(rs, Types.VARBINARY, (long) Integer.MAX_VALUE, null, null, (long) Integer.MAX_VALUE, VarbinaryType.VARBINARY);\n-                assertColumnSpec(rs, Types.TIME, 12L, null, null, null, TimeType.TIME);\n-                assertColumnSpec(rs, Types.TIME_WITH_TIMEZONE, 18L, null, null, null, TimeWithTimeZoneType.TIME_WITH_TIME_ZONE);\n-                assertColumnSpec(rs, Types.TIMESTAMP, 25L, null, null, null, TimestampType.TIMESTAMP_MILLIS);\n-                assertColumnSpec(rs, Types.TIMESTAMP, 31L, null, null, null, createTimestampType(9));\n-                assertColumnSpec(rs, Types.TIMESTAMP_WITH_TIMEZONE, 59L, null, null, null, TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE);\n-                assertColumnSpec(rs, Types.TIMESTAMP_WITH_TIMEZONE, 65L, null, null, null, createTimestampWithTimeZoneType(9));\n+                assertColumnSpec(rs, Types.TIME, 12L, null, 3L, null, TimeType.TIME);\n+                assertColumnSpec(rs, Types.TIME, 8L, null, 0L, null, createTimeType(0));\n+                assertColumnSpec(rs, Types.TIME, 12L, null, 3L, null, createTimeType(3));\n+                assertColumnSpec(rs, Types.TIME, 15L, null, 6L, null, createTimeType(6));\n+                assertColumnSpec(rs, Types.TIME, 18L, null, 9L, null, createTimeType(9));\n+                assertColumnSpec(rs, Types.TIME, 21L, null, 12L, null, createTimeType(12));\n+                assertColumnSpec(rs, Types.TIME_WITH_TIMEZONE, 18L, null, 3L, null, TimeWithTimeZoneType.TIME_WITH_TIME_ZONE);\n+                assertColumnSpec(rs, Types.TIME_WITH_TIMEZONE, 14L, null, 0L, null, createTimeWithTimeZoneType(0));\n+                assertColumnSpec(rs, Types.TIME_WITH_TIMEZONE, 18L, null, 3L, null, createTimeWithTimeZoneType(3));\n+                assertColumnSpec(rs, Types.TIME_WITH_TIMEZONE, 21L, null, 6L, null, createTimeWithTimeZoneType(6));\n+                assertColumnSpec(rs, Types.TIME_WITH_TIMEZONE, 24L, null, 9L, null, createTimeWithTimeZoneType(9));\n+                assertColumnSpec(rs, Types.TIME_WITH_TIMEZONE, 27L, null, 12L, null, createTimeWithTimeZoneType(12));\n+                assertColumnSpec(rs, Types.TIMESTAMP, 25L, null, 3L, null, TimestampType.TIMESTAMP);\n+                assertColumnSpec(rs, Types.TIMESTAMP, 21L, null, 0L, null, createTimestampType(0));\n+                assertColumnSpec(rs, Types.TIMESTAMP, 25L, null, 3L, null, createTimestampType(3));\n+                assertColumnSpec(rs, Types.TIMESTAMP, 28L, null, 6L, null, createTimestampType(6));\n+                assertColumnSpec(rs, Types.TIMESTAMP, 31L, null, 9L, null, createTimestampType(9));\n+                assertColumnSpec(rs, Types.TIMESTAMP, 34L, null, 12L, null, createTimestampType(12));\n+                assertColumnSpec(rs, Types.TIMESTAMP_WITH_TIMEZONE, 59L, null, 3L, null, TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE);\n+                assertColumnSpec(rs, Types.TIMESTAMP_WITH_TIMEZONE, 55L, null, 0L, null, createTimestampWithTimeZoneType(0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzMTE0Mw=="}, "originalCommit": {"oid": "2b480500b4f79764cd3663a3c053605afa7c718a"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA1Mzg4Ng==", "bodyText": "@losipiuk  see  https://github.com/prestosql/presto/blob/22717c61419c851b1c3814b60a3453b22d4a45ef/presto-main/src/main/java/io/prestosql/connector/system/jdbc/ColumnJdbcTable.java#L446-L455", "url": "https://github.com/trinodb/trino/pull/6307#discussion_r541053886", "createdAt": "2020-12-11T16:04:53Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestPrestoDatabaseMetaData.java", "diffHunk": "@@ -763,12 +783,30 @@ public void testGetColumns()\n                 assertColumnSpec(rs, Types.VARCHAR, (long) Integer.MAX_VALUE, null, null, (long) Integer.MAX_VALUE, createUnboundedVarcharType());\n                 assertColumnSpec(rs, Types.CHAR, 345L, null, null, 345L, createCharType(345));\n                 assertColumnSpec(rs, Types.VARBINARY, (long) Integer.MAX_VALUE, null, null, (long) Integer.MAX_VALUE, VarbinaryType.VARBINARY);\n-                assertColumnSpec(rs, Types.TIME, 12L, null, null, null, TimeType.TIME);\n-                assertColumnSpec(rs, Types.TIME_WITH_TIMEZONE, 18L, null, null, null, TimeWithTimeZoneType.TIME_WITH_TIME_ZONE);\n-                assertColumnSpec(rs, Types.TIMESTAMP, 25L, null, null, null, TimestampType.TIMESTAMP_MILLIS);\n-                assertColumnSpec(rs, Types.TIMESTAMP, 31L, null, null, null, createTimestampType(9));\n-                assertColumnSpec(rs, Types.TIMESTAMP_WITH_TIMEZONE, 59L, null, null, null, TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE);\n-                assertColumnSpec(rs, Types.TIMESTAMP_WITH_TIMEZONE, 65L, null, null, null, createTimestampWithTimeZoneType(9));\n+                assertColumnSpec(rs, Types.TIME, 12L, null, 3L, null, TimeType.TIME);\n+                assertColumnSpec(rs, Types.TIME, 8L, null, 0L, null, createTimeType(0));\n+                assertColumnSpec(rs, Types.TIME, 12L, null, 3L, null, createTimeType(3));\n+                assertColumnSpec(rs, Types.TIME, 15L, null, 6L, null, createTimeType(6));\n+                assertColumnSpec(rs, Types.TIME, 18L, null, 9L, null, createTimeType(9));\n+                assertColumnSpec(rs, Types.TIME, 21L, null, 12L, null, createTimeType(12));\n+                assertColumnSpec(rs, Types.TIME_WITH_TIMEZONE, 18L, null, 3L, null, TimeWithTimeZoneType.TIME_WITH_TIME_ZONE);\n+                assertColumnSpec(rs, Types.TIME_WITH_TIMEZONE, 14L, null, 0L, null, createTimeWithTimeZoneType(0));\n+                assertColumnSpec(rs, Types.TIME_WITH_TIMEZONE, 18L, null, 3L, null, createTimeWithTimeZoneType(3));\n+                assertColumnSpec(rs, Types.TIME_WITH_TIMEZONE, 21L, null, 6L, null, createTimeWithTimeZoneType(6));\n+                assertColumnSpec(rs, Types.TIME_WITH_TIMEZONE, 24L, null, 9L, null, createTimeWithTimeZoneType(9));\n+                assertColumnSpec(rs, Types.TIME_WITH_TIMEZONE, 27L, null, 12L, null, createTimeWithTimeZoneType(12));\n+                assertColumnSpec(rs, Types.TIMESTAMP, 25L, null, 3L, null, TimestampType.TIMESTAMP);\n+                assertColumnSpec(rs, Types.TIMESTAMP, 21L, null, 0L, null, createTimestampType(0));\n+                assertColumnSpec(rs, Types.TIMESTAMP, 25L, null, 3L, null, createTimestampType(3));\n+                assertColumnSpec(rs, Types.TIMESTAMP, 28L, null, 6L, null, createTimestampType(6));\n+                assertColumnSpec(rs, Types.TIMESTAMP, 31L, null, 9L, null, createTimestampType(9));\n+                assertColumnSpec(rs, Types.TIMESTAMP, 34L, null, 12L, null, createTimestampType(12));\n+                assertColumnSpec(rs, Types.TIMESTAMP_WITH_TIMEZONE, 59L, null, 3L, null, TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE);\n+                assertColumnSpec(rs, Types.TIMESTAMP_WITH_TIMEZONE, 55L, null, 0L, null, createTimestampWithTimeZoneType(0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzMTE0Mw=="}, "originalCommit": {"oid": "2b480500b4f79764cd3663a3c053605afa7c718a"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4574, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}