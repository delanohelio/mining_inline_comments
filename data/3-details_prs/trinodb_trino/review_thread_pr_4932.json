{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxOTE3MTg3", "number": 4932, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMzowMTozM1rOEl3nNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMToxOTo0OVrOE8ZpNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTQzOTI1OnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMzowMTozM1rOHVlS8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMzo1MzowN1rOHcxeig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM5MzIwMA==", "bodyText": "We can also handle the case when icebergTable.specs().values().stream().allMatch(spec -> spec.fields().containsAll(fields)) is false. Currently,\n        if (newDomain.equals(table.getPredicate().intersect(table.getEnforcedPredicate()))) {\n            return Optional.empty();\n        }\n\nEven in this case the pushed predicate can be used in table scans.", "url": "https://github.com/trinodb/trino/pull/4932#discussion_r492393200", "createdAt": "2020-09-21T23:01:33Z", "author": {"login": "lxynov"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergMetadata.java", "diffHunk": "@@ -613,7 +613,6 @@ public void rollback()\n     {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkzMjgxMA==", "bodyText": "Good point. Thinking more on this, I think there might be a better approach to this. I've updated the PR with this new approach.", "url": "https://github.com/trinodb/trino/pull/4932#discussion_r499932810", "createdAt": "2020-10-05T23:53:07Z", "author": {"login": "phd3"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergMetadata.java", "diffHunk": "@@ -613,7 +613,6 @@ public void rollback()\n     {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM5MzIwMA=="}, "originalCommit": null, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTQ1NDcyOnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergTableHandle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMzowODoyOVrOHVlb1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMzowODoyOVrOHVlb1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM5NTQ3OA==", "bodyText": "We should also make a change to the function call icebergTableHandle.getPredicate() in TableStatisticsMaker::makeTableStatistics?", "url": "https://github.com/trinodb/trino/pull/4932#discussion_r492395478", "createdAt": "2020-09-21T23:08:29Z", "author": {"login": "lxynov"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergTableHandle.java", "diffHunk": "@@ -90,6 +97,12 @@ public TableType getTableType()\n         return predicate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNDAyMjI3OnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxOToxOToxOVrOHpMwVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNDo1Nzo0MlrOHsH6Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk2MjY0NQ==", "bodyText": "This seems wrong to me. Shouldn't we return \"none\" to the engine?", "url": "https://github.com/trinodb/trino/pull/4932#discussion_r512962645", "createdAt": "2020-10-27T19:19:19Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergMetadata.java", "diffHunk": "@@ -612,47 +612,45 @@ public void rollback()\n     public Optional<ConstraintApplicationResult<ConnectorTableHandle>> applyFilter(ConnectorSession session, ConnectorTableHandle handle, Constraint constraint)\n     {\n         IcebergTableHandle table = (IcebergTableHandle) handle;\n+        org.apache.iceberg.Table icebergTable = getIcebergTable(metastore, hdfsEnvironment, session, table.getSchemaTableName());\n \n-        // TODO: Remove TupleDomain#simplify once Iceberg supports IN expression\n-        TupleDomain<IcebergColumnHandle> newDomain = constraint.getSummary()\n-                .transform(IcebergColumnHandle.class::cast)\n-                .intersect(table.getPredicate());\n-\n-        if (newDomain.isNone()) {\n-            return Optional.empty();\n-        }\n+        // Extract identity partition column source ids common to ALL specs\n+        Set<Integer> partitionSourceIds = icebergTable.spec().fields().stream()\n+                .filter(field -> field.transform().isIdentity())\n+                .filter(field -> icebergTable.specs().values().stream().allMatch(spec -> spec.fields().contains(field)))\n+                .map(PartitionField::sourceId)\n+                .collect(toImmutableSet());\n \n-        if (newDomain.equals(table.getPredicate())) {\n-            return Optional.empty();\n-        }\n+        BiPredicate<IcebergColumnHandle, Domain> isIdentityPartition = (column, domain) -> partitionSourceIds.contains(column.getId());\n \n-        org.apache.iceberg.Table icebergTable = getIcebergTable(metastore, hdfsEnvironment, session, table.getSchemaTableName());\n+        TupleDomain<IcebergColumnHandle> newEnforcedConstraint = constraint.getSummary()\n+                .transform(IcebergColumnHandle.class::cast)\n+                .filter(isIdentityPartition)\n+                .intersect(table.getEnforcedPredicate());\n \n-        List<PartitionField> fields = icebergTable.spec().fields().stream()\n-                .filter(field -> field.transform().isIdentity())\n-                .collect(toImmutableList());\n+        TupleDomain<IcebergColumnHandle> newUnenforcedConstraint = constraint.getSummary()\n+                .transform(IcebergColumnHandle.class::cast)\n+                .filter(isIdentityPartition.negate())\n+                .intersect(table.getPredicate());\n \n-        // Ensure partition specs in all manifests contain the identity fields from the predicate\n-        if (!icebergTable.specs().values().stream().allMatch(spec -> spec.fields().containsAll(fields))) {\n+        if (newEnforcedConstraint.equals(table.getEnforcedPredicate())\n+                && newUnenforcedConstraint.equals(table.getPredicate())) {\n             return Optional.empty();\n         }\n \n-        Set<Integer> partitionSourceIds = icebergTable.spec().fields().stream()\n-                .filter(field -> field.transform().isIdentity())\n-                .map(PartitionField::sourceId)\n-                .collect(toImmutableSet());\n-\n-        BiPredicate<IcebergColumnHandle, Domain> contains = (column, domain) -> partitionSourceIds.contains(column.getId());\n-        TupleDomain<ColumnHandle> remainingTupleDomain = newDomain.filter(contains.negate()).transform(ColumnHandle.class::cast);\n-        TupleDomain<IcebergColumnHandle> enforcedTupleDomain = newDomain.filter(contains);\n+        if (newEnforcedConstraint.isNone()) {\n+            // If no tuple satisfies the constraint, no need to do additional filtering in the engine\n+            newUnenforcedConstraint = TupleDomain.all();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAyODk4Nw==", "bodyText": "removed the special condition.", "url": "https://github.com/trinodb/trino/pull/4932#discussion_r516028987", "createdAt": "2020-11-02T14:57:42Z", "author": {"login": "phd3"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergMetadata.java", "diffHunk": "@@ -612,47 +612,45 @@ public void rollback()\n     public Optional<ConstraintApplicationResult<ConnectorTableHandle>> applyFilter(ConnectorSession session, ConnectorTableHandle handle, Constraint constraint)\n     {\n         IcebergTableHandle table = (IcebergTableHandle) handle;\n+        org.apache.iceberg.Table icebergTable = getIcebergTable(metastore, hdfsEnvironment, session, table.getSchemaTableName());\n \n-        // TODO: Remove TupleDomain#simplify once Iceberg supports IN expression\n-        TupleDomain<IcebergColumnHandle> newDomain = constraint.getSummary()\n-                .transform(IcebergColumnHandle.class::cast)\n-                .intersect(table.getPredicate());\n-\n-        if (newDomain.isNone()) {\n-            return Optional.empty();\n-        }\n+        // Extract identity partition column source ids common to ALL specs\n+        Set<Integer> partitionSourceIds = icebergTable.spec().fields().stream()\n+                .filter(field -> field.transform().isIdentity())\n+                .filter(field -> icebergTable.specs().values().stream().allMatch(spec -> spec.fields().contains(field)))\n+                .map(PartitionField::sourceId)\n+                .collect(toImmutableSet());\n \n-        if (newDomain.equals(table.getPredicate())) {\n-            return Optional.empty();\n-        }\n+        BiPredicate<IcebergColumnHandle, Domain> isIdentityPartition = (column, domain) -> partitionSourceIds.contains(column.getId());\n \n-        org.apache.iceberg.Table icebergTable = getIcebergTable(metastore, hdfsEnvironment, session, table.getSchemaTableName());\n+        TupleDomain<IcebergColumnHandle> newEnforcedConstraint = constraint.getSummary()\n+                .transform(IcebergColumnHandle.class::cast)\n+                .filter(isIdentityPartition)\n+                .intersect(table.getEnforcedPredicate());\n \n-        List<PartitionField> fields = icebergTable.spec().fields().stream()\n-                .filter(field -> field.transform().isIdentity())\n-                .collect(toImmutableList());\n+        TupleDomain<IcebergColumnHandle> newUnenforcedConstraint = constraint.getSummary()\n+                .transform(IcebergColumnHandle.class::cast)\n+                .filter(isIdentityPartition.negate())\n+                .intersect(table.getPredicate());\n \n-        // Ensure partition specs in all manifests contain the identity fields from the predicate\n-        if (!icebergTable.specs().values().stream().allMatch(spec -> spec.fields().containsAll(fields))) {\n+        if (newEnforcedConstraint.equals(table.getEnforcedPredicate())\n+                && newUnenforcedConstraint.equals(table.getPredicate())) {\n             return Optional.empty();\n         }\n \n-        Set<Integer> partitionSourceIds = icebergTable.spec().fields().stream()\n-                .filter(field -> field.transform().isIdentity())\n-                .map(PartitionField::sourceId)\n-                .collect(toImmutableSet());\n-\n-        BiPredicate<IcebergColumnHandle, Domain> contains = (column, domain) -> partitionSourceIds.contains(column.getId());\n-        TupleDomain<ColumnHandle> remainingTupleDomain = newDomain.filter(contains.negate()).transform(ColumnHandle.class::cast);\n-        TupleDomain<IcebergColumnHandle> enforcedTupleDomain = newDomain.filter(contains);\n+        if (newEnforcedConstraint.isNone()) {\n+            // If no tuple satisfies the constraint, no need to do additional filtering in the engine\n+            newUnenforcedConstraint = TupleDomain.all();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk2MjY0NQ=="}, "originalCommit": null, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNDAyODc5OnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergSplitManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxOToyMTowNFrOHpM0Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxOTo1MzowNFrOH1_h_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk2MzY0Nw==", "bodyText": "Should this move inside toIcebergExpression()?", "url": "https://github.com/trinodb/trino/pull/4932#discussion_r512963647", "createdAt": "2020-10-27T19:21:04Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergSplitManager.java", "diffHunk": "@@ -57,7 +57,12 @@ public ConnectorSplitSource getSplits(\n         HiveMetastore metastore = transactionManager.get(transaction).getMetastore();\n         Table icebergTable = getIcebergTable(metastore, hdfsEnvironment, session, table.getSchemaTableName());\n \n-        TableScan tableScan = getTableScan(table.getPredicate(), table.getSnapshotId(), icebergTable);\n+        TableScan tableScan = getTableScan(\n+                // TODO: Remove TupleDomain#simplify once Iceberg supports IN expression\n+                table.getEnforcedPredicate()\n+                        .intersect(table.getPredicate()).simplify(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM3NzQ2OA==", "bodyText": "simplify needs to be used cautiously only when required because it can change the predicate.\nFor example, it cannot be used for an \"enforced\" constraint. we may end up returning incorrect results for filters on partition columns for SELECT queries, or deleting undesired partitions in case of metadata delete.", "url": "https://github.com/trinodb/trino/pull/4932#discussion_r526377468", "createdAt": "2020-11-18T19:53:04Z", "author": {"login": "phd3"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergSplitManager.java", "diffHunk": "@@ -57,7 +57,12 @@ public ConnectorSplitSource getSplits(\n         HiveMetastore metastore = transactionManager.get(transaction).getMetastore();\n         Table icebergTable = getIcebergTable(metastore, hdfsEnvironment, session, table.getSchemaTableName());\n \n-        TableScan tableScan = getTableScan(table.getPredicate(), table.getSnapshotId(), icebergTable);\n+        TableScan tableScan = getTableScan(\n+                // TODO: Remove TupleDomain#simplify once Iceberg supports IN expression\n+                table.getEnforcedPredicate()\n+                        .intersect(table.getPredicate()).simplify(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk2MzY0Nw=="}, "originalCommit": null, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNDAzNjU3OnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/AbstractTestIcebergSmoke.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxOToyMjoyOFrOHpM5FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxOToyMjoyOFrOHpM5FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk2NDg4NA==", "bodyText": "This can use orElseThrow()", "url": "https://github.com/trinodb/trino/pull/4932#discussion_r512964884", "createdAt": "2020-10-27T19:22:28Z", "author": {"login": "electrum"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/AbstractTestIcebergSmoke.java", "diffHunk": "@@ -1204,6 +1209,72 @@ public void testStatisticsConstraints()\n         dropTable(tableName);\n     }\n \n+    @Test\n+    public void testPredicatePushdown()\n+    {\n+        QualifiedObjectName tableName = new QualifiedObjectName(\"iceberg\", \"tpch\", \"test_predicate\");\n+        assertUpdate(format(\"CREATE TABLE %s (col1 BIGINT, col2 BIGINT, col3 BIGINT) WITH (partitioning = ARRAY['col2', 'col3'])\", tableName));\n+        assertUpdate(format(\"INSERT INTO %s VALUES (1, 10, 100)\", tableName), 1L);\n+        assertUpdate(format(\"INSERT INTO %s VALUES (2, 20, 200)\", tableName), 1L);\n+\n+        assertFilterPushdown(tableName,\n+                ImmutableMap.of(\"col1\", NullableValue.of(BIGINT, 1L)),\n+                ImmutableMap.of(),\n+                ImmutableMap.of(\"col1\", NullableValue.of(BIGINT, 1L)));\n+\n+        assertFilterPushdown(tableName,\n+                ImmutableMap.of(\"col2\", NullableValue.of(BIGINT, 10L)),\n+                ImmutableMap.of(\"col2\", NullableValue.of(BIGINT, 10L)),\n+                ImmutableMap.of());\n+\n+        assertFilterPushdown(tableName,\n+                ImmutableMap.of(\"col1\", NullableValue.of(BIGINT, 1L), \"col2\", NullableValue.of(BIGINT, 10L)),\n+                ImmutableMap.of(\"col2\", NullableValue.of(BIGINT, 10L)),\n+                ImmutableMap.of(\"col1\", NullableValue.of(BIGINT, 1L)));\n+\n+        dropTable(tableName.getObjectName());\n+    }\n+\n+    private void assertFilterPushdown(\n+            QualifiedObjectName tableName,\n+            Map<String, NullableValue> filter,\n+            Map<String, NullableValue> expectedEnforcedPredicate,\n+            Map<String, NullableValue> expectedPredicate)\n+    {\n+        Metadata metadata = getQueryRunner().getMetadata();\n+\n+        newTransaction().execute(getSession(), session -> {\n+            Optional<TableHandle> table = metadata.getTableHandle(session, tableName);\n+            checkArgument(table.isPresent(), \"Could not create table handle for table %s\", tableName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzcwMTY3OnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergTableHandle.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMToxOTo0OVrOH4fz6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxOTo0MzowMFrOH-uaew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAwMzQ5Ng==", "bodyText": "What are the semantics of IcebergTableHandle.getEnforcedPredicate? Is it guaranteed to be a tight bound?", "url": "https://github.com/trinodb/trino/pull/4932#discussion_r529003496", "createdAt": "2020-11-23T21:19:49Z", "author": {"login": "martint"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergTableHandle.java", "diffHunk": "@@ -79,6 +86,12 @@ public TableType getTableType()\n         return predicate;\n     }\n \n+    @JsonProperty\n+    public TupleDomain<IcebergColumnHandle> getEnforcedPredicate()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAxMzY5Mg==", "bodyText": "In particular how do predicate and enforcedPredicate differ from each other. From my reading of the above code, this is just about whether the predicate is over the partition columns vs non-partition columns.\nMaybe it'd make more sense to model it as two complementary sets of predicates (partitionColumnPredicate vs nonPartitionColumnPredicate). It would also make it easier to interpret and understand all the places where they are referenced.", "url": "https://github.com/trinodb/trino/pull/4932#discussion_r529013692", "createdAt": "2020-11-23T21:40:13Z", "author": {"login": "martint"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergTableHandle.java", "diffHunk": "@@ -79,6 +86,12 @@ public TableType getTableType()\n         return predicate;\n     }\n \n+    @JsonProperty\n+    public TupleDomain<IcebergColumnHandle> getEnforcedPredicate()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAwMzQ5Ng=="}, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA4OTAyNg==", "bodyText": "@martint enforcedPredicate - predicates that can be enforced by the iceberg connector because they are over identity partition columns that are present in all partition specs. predicates on other columns are put in predicate. They're complementary currently.\nGiven the nuances mentioned above, didn't name them as \"partitionColumnPredicate\" as it's inaccurate.  should we rename predicate as unEnforcedPredicate instead? we can say unEnforcedPredicate are not guaranteed to be enforced, but still being used for split-generation and reader-level optimizations.", "url": "https://github.com/trinodb/trino/pull/4932#discussion_r529089026", "createdAt": "2020-11-24T00:43:52Z", "author": {"login": "phd3"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergTableHandle.java", "diffHunk": "@@ -79,6 +86,12 @@ public TableType getTableType()\n         return predicate;\n     }\n \n+    @JsonProperty\n+    public TupleDomain<IcebergColumnHandle> getEnforcedPredicate()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAwMzQ5Ng=="}, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUzNDIwMw==", "bodyText": "Yes, that would be better.", "url": "https://github.com/trinodb/trino/pull/4932#discussion_r535534203", "createdAt": "2020-12-03T19:43:00Z", "author": {"login": "martint"}, "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergTableHandle.java", "diffHunk": "@@ -79,6 +86,12 @@ public TableType getTableType()\n         return predicate;\n     }\n \n+    @JsonProperty\n+    public TupleDomain<IcebergColumnHandle> getEnforcedPredicate()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAwMzQ5Ng=="}, "originalCommit": null, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3256, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}