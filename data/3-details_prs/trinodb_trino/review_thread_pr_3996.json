{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyODA2NDY3", "number": 3996, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOTo1Mzo0M1rOEFeBSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOTo1Mzo0M1rOEFeBSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTcwMTg2OnYy", "diffSide": "RIGHT", "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListener.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOTo1Mzo0M1rOGjrOfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMDoxNDoxM1rOGk_QdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA2MTU2Nw==", "bodyText": "see: io/prestosql/execution/QueryStateMachine.java:120\n    // peak of the user + system + revocable memory reservation\n\nso getPeakTotalNonRevocableMemoryBytes() != getPeakTotalMemoryReservation\nWe don't track PeakTotalNonRevocableMemoryBytes in QueryStateMachine", "url": "https://github.com/trinodb/trino/pull/3996#discussion_r440061567", "createdAt": "2020-06-15T09:53:43Z", "author": {"login": "sopel39"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListener.java", "diffHunk": "@@ -377,8 +377,8 @@ public void testOutputStats()\n         assertEquals(statistics.getAnalysisTime().get().toMillis(), queryStats.getAnalysisTime().toMillis());\n         assertEquals(statistics.getExecutionTime().get().toMillis(), queryStats.getExecutionTime().toMillis());\n         assertEquals(statistics.getPeakUserMemoryBytes(), queryStats.getPeakUserMemoryReservation().toBytes());\n-        assertEquals(statistics.getPeakTotalNonRevocableMemoryBytes(), queryStats.getPeakTaskUserMemory().toBytes());\n-        assertEquals(statistics.getPeakTaskTotalMemory(), queryStats.getPeakTaskUserMemory().toBytes());\n+        assertEquals(statistics.getPeakTotalNonRevocableMemoryBytes(), queryStats.getPeakTotalMemoryReservation().toBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1656560a3eabc4fe39658b6482013c86153541c3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyMzc5Mg==", "bodyText": "I see. But we seem to set getPeakTotalNonRevocableMemoryBytes from getPeakTotalMemoryReservation. Is it contradicting with the comment in QueryStateMachine?\nhttps://github.com/prestosql/presto/blob/37c74ad15f5f0c9c770c2aa491e49ffe5146d4b1/presto-main/src/main/java/io/prestosql/event/QueryMonitor.java#L243", "url": "https://github.com/trinodb/trino/pull/3996#discussion_r440523792", "createdAt": "2020-06-16T00:47:51Z", "author": {"login": "Lewuathe"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListener.java", "diffHunk": "@@ -377,8 +377,8 @@ public void testOutputStats()\n         assertEquals(statistics.getAnalysisTime().get().toMillis(), queryStats.getAnalysisTime().toMillis());\n         assertEquals(statistics.getExecutionTime().get().toMillis(), queryStats.getExecutionTime().toMillis());\n         assertEquals(statistics.getPeakUserMemoryBytes(), queryStats.getPeakUserMemoryReservation().toBytes());\n-        assertEquals(statistics.getPeakTotalNonRevocableMemoryBytes(), queryStats.getPeakTaskUserMemory().toBytes());\n-        assertEquals(statistics.getPeakTaskTotalMemory(), queryStats.getPeakTaskUserMemory().toBytes());\n+        assertEquals(statistics.getPeakTotalNonRevocableMemoryBytes(), queryStats.getPeakTotalMemoryReservation().toBytes());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA2MTU2Nw=="}, "originalCommit": {"oid": "1656560a3eabc4fe39658b6482013c86153541c3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDczNTEzNw==", "bodyText": "This is a bug. We should either:\n\nhave a dedicated counter for non-revocable reservations\nChange field name in QueryStatistics\n\nI think we should do 1) for backward compatibility reason.", "url": "https://github.com/trinodb/trino/pull/3996#discussion_r440735137", "createdAt": "2020-06-16T10:03:25Z", "author": {"login": "sopel39"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListener.java", "diffHunk": "@@ -377,8 +377,8 @@ public void testOutputStats()\n         assertEquals(statistics.getAnalysisTime().get().toMillis(), queryStats.getAnalysisTime().toMillis());\n         assertEquals(statistics.getExecutionTime().get().toMillis(), queryStats.getExecutionTime().toMillis());\n         assertEquals(statistics.getPeakUserMemoryBytes(), queryStats.getPeakUserMemoryReservation().toBytes());\n-        assertEquals(statistics.getPeakTotalNonRevocableMemoryBytes(), queryStats.getPeakTaskUserMemory().toBytes());\n-        assertEquals(statistics.getPeakTaskTotalMemory(), queryStats.getPeakTaskUserMemory().toBytes());\n+        assertEquals(statistics.getPeakTotalNonRevocableMemoryBytes(), queryStats.getPeakTotalMemoryReservation().toBytes());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA2MTU2Nw=="}, "originalCommit": {"oid": "1656560a3eabc4fe39658b6482013c86153541c3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEzMDI5MQ==", "bodyText": "For the bug fix, it's worth creating a separate PR. (People tend to pay less attention to \"Fix flaky ...\" PRs.)", "url": "https://github.com/trinodb/trino/pull/3996#discussion_r441130291", "createdAt": "2020-06-16T20:43:30Z", "author": {"login": "findepi"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListener.java", "diffHunk": "@@ -377,8 +377,8 @@ public void testOutputStats()\n         assertEquals(statistics.getAnalysisTime().get().toMillis(), queryStats.getAnalysisTime().toMillis());\n         assertEquals(statistics.getExecutionTime().get().toMillis(), queryStats.getExecutionTime().toMillis());\n         assertEquals(statistics.getPeakUserMemoryBytes(), queryStats.getPeakUserMemoryReservation().toBytes());\n-        assertEquals(statistics.getPeakTotalNonRevocableMemoryBytes(), queryStats.getPeakTaskUserMemory().toBytes());\n-        assertEquals(statistics.getPeakTaskTotalMemory(), queryStats.getPeakTaskUserMemory().toBytes());\n+        assertEquals(statistics.getPeakTotalNonRevocableMemoryBytes(), queryStats.getPeakTotalMemoryReservation().toBytes());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA2MTU2Nw=="}, "originalCommit": {"oid": "1656560a3eabc4fe39658b6482013c86153541c3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMDgzNw==", "bodyText": "Okay, I'll work on that. But I think this test is okay because the fix will bring another count not to affect the current existing fields in QueryStatistics.", "url": "https://github.com/trinodb/trino/pull/3996#discussion_r441220837", "createdAt": "2020-06-17T00:55:02Z", "author": {"login": "Lewuathe"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListener.java", "diffHunk": "@@ -377,8 +377,8 @@ public void testOutputStats()\n         assertEquals(statistics.getAnalysisTime().get().toMillis(), queryStats.getAnalysisTime().toMillis());\n         assertEquals(statistics.getExecutionTime().get().toMillis(), queryStats.getExecutionTime().toMillis());\n         assertEquals(statistics.getPeakUserMemoryBytes(), queryStats.getPeakUserMemoryReservation().toBytes());\n-        assertEquals(statistics.getPeakTotalNonRevocableMemoryBytes(), queryStats.getPeakTaskUserMemory().toBytes());\n-        assertEquals(statistics.getPeakTaskTotalMemory(), queryStats.getPeakTaskUserMemory().toBytes());\n+        assertEquals(statistics.getPeakTotalNonRevocableMemoryBytes(), queryStats.getPeakTotalMemoryReservation().toBytes());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA2MTU2Nw=="}, "originalCommit": {"oid": "1656560a3eabc4fe39658b6482013c86153541c3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0NTAzOA==", "bodyText": "I would disable this particular assertion and add a TODO (possibly pointing to Github issue).", "url": "https://github.com/trinodb/trino/pull/3996#discussion_r441345038", "createdAt": "2020-06-17T07:41:30Z", "author": {"login": "sopel39"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListener.java", "diffHunk": "@@ -377,8 +377,8 @@ public void testOutputStats()\n         assertEquals(statistics.getAnalysisTime().get().toMillis(), queryStats.getAnalysisTime().toMillis());\n         assertEquals(statistics.getExecutionTime().get().toMillis(), queryStats.getExecutionTime().toMillis());\n         assertEquals(statistics.getPeakUserMemoryBytes(), queryStats.getPeakUserMemoryReservation().toBytes());\n-        assertEquals(statistics.getPeakTotalNonRevocableMemoryBytes(), queryStats.getPeakTaskUserMemory().toBytes());\n-        assertEquals(statistics.getPeakTaskTotalMemory(), queryStats.getPeakTaskUserMemory().toBytes());\n+        assertEquals(statistics.getPeakTotalNonRevocableMemoryBytes(), queryStats.getPeakTotalMemoryReservation().toBytes());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA2MTU2Nw=="}, "originalCommit": {"oid": "1656560a3eabc4fe39658b6482013c86153541c3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQzODMyNQ==", "bodyText": "Okay, I filed an issue #4060", "url": "https://github.com/trinodb/trino/pull/3996#discussion_r441438325", "createdAt": "2020-06-17T10:14:13Z", "author": {"login": "Lewuathe"}, "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListener.java", "diffHunk": "@@ -377,8 +377,8 @@ public void testOutputStats()\n         assertEquals(statistics.getAnalysisTime().get().toMillis(), queryStats.getAnalysisTime().toMillis());\n         assertEquals(statistics.getExecutionTime().get().toMillis(), queryStats.getExecutionTime().toMillis());\n         assertEquals(statistics.getPeakUserMemoryBytes(), queryStats.getPeakUserMemoryReservation().toBytes());\n-        assertEquals(statistics.getPeakTotalNonRevocableMemoryBytes(), queryStats.getPeakTaskUserMemory().toBytes());\n-        assertEquals(statistics.getPeakTaskTotalMemory(), queryStats.getPeakTaskUserMemory().toBytes());\n+        assertEquals(statistics.getPeakTotalNonRevocableMemoryBytes(), queryStats.getPeakTotalMemoryReservation().toBytes());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA2MTU2Nw=="}, "originalCommit": {"oid": "1656560a3eabc4fe39658b6482013c86153541c3"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4292, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}