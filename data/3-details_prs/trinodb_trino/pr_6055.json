{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1NzM4MzI1", "number": 6055, "title": "Tests for block encodings", "bodyText": "", "createdAt": "2020-11-23T13:38:47Z", "url": "https://github.com/trinodb/trino/pull/6055", "merged": true, "mergeCommit": {"oid": "152e3360ff97e835385288322a28275aec3d344d"}, "closed": true, "closedAt": "2020-11-30T20:18:58Z", "author": {"login": "skrzypo987"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfV3PhAFqTUzNjUwNjQzMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdhliZwABqjQwNTE5ODQ3Nzk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2NTA2NDMx", "url": "https://github.com/trinodb/trino/pull/6055#pullrequestreview-536506431", "createdAt": "2020-11-23T14:11:22Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNDoxMToyM1rOH4PFqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNDoxNjo1MFrOH4PURA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcyOTUxMg==", "bodyText": "make this array of T", "url": "https://github.com/trinodb/trino/pull/6055#discussion_r528729512", "createdAt": "2020-11-23T14:11:23Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/test/java/io/prestosql/spi/block/BaseBlockEncodingTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.block;\n+\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.prestosql.spi.type.Type;\n+\n+import static io.prestosql.spi.block.BlockTestUtils.assertBlockEquals;\n+\n+public abstract class BaseBlockEncodingTest<T>\n+{\n+    private final BlockEncodingSerde blockEncodingSerde = new TestingBlockEncodingSerde();\n+\n+    protected abstract Type getType();\n+\n+    protected abstract void write(BlockBuilder blockBuilder, T value);\n+\n+    protected final void roundTrip(Object... values)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODczMDY4NA==", "bodyText": "this was specifically testing null at beginning and end as it requires special treatment in optimized block encoding", "url": "https://github.com/trinodb/trino/pull/6055#discussion_r528730684", "createdAt": "2020-11-23T14:13:03Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/test/java/io/prestosql/spi/block/TestLongArrayBlockEncoding.java", "diffHunk": "@@ -14,29 +14,24 @@\n package io.prestosql.spi.block;\n \n import io.prestosql.spi.type.Type;\n-import org.testng.annotations.Test;\n+\n+import java.util.Random;\n \n import static io.prestosql.spi.type.BigintType.BIGINT;\n \n public class TestLongArrayBlockEncoding\n         extends BaseBlockEncodingTest<Long>\n {\n-    @Test\n-    public void testRoundTripNoNull()\n-    {\n-        roundTrip(1L, 2L, 3L, 4L);\n-    }\n-\n-    @Test\n-    public void testRoundTripWithNull()\n+    @Override\n+    protected void write(BlockBuilder blockBuilder, Long value)\n     {\n-        roundTrip(null, null, 1L, null, 3L, null, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODczMzI1Mg==", "bodyText": "Do we expect this randomized test to find any issues? Do we need all these size combinations? It seems that few purposefully designed cases are enough.", "url": "https://github.com/trinodb/trino/pull/6055#discussion_r528733252", "createdAt": "2020-11-23T14:16:50Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/test/java/io/prestosql/spi/block/BaseBlockEncodingTest.java", "diffHunk": "@@ -15,17 +15,80 @@\n \n import io.airlift.slice.DynamicSliceOutput;\n import io.prestosql.spi.type.Type;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.Arrays;\n+import java.util.Random;\n+import java.util.stream.IntStream;\n \n import static io.prestosql.spi.block.BlockTestUtils.assertBlockEquals;\n \n public abstract class BaseBlockEncodingTest<T>\n {\n+    private static final int[] RANDOM_BLOCK_SIZES = {2, 4, 8, 9, 16, 17, 32, 33, 64, 65, 1000, 1000000};\n+\n+    private final Random random = new Random(32167);\n     private final BlockEncodingSerde blockEncodingSerde = new TestingBlockEncodingSerde();\n \n     protected abstract Type getType();\n \n     protected abstract void write(BlockBuilder blockBuilder, T value);\n \n+    protected abstract T randomValue(Random random);\n+\n+    @Test\n+    public void testEmpty()\n+    {\n+        roundTrip();\n+    }\n+\n+    @Test\n+    public void testSingleNull()\n+    {\n+        roundTrip((T) null);\n+    }\n+\n+    @Test\n+    public void testSingleValue()\n+    {\n+        roundTrip(randomValue(random));\n+    }\n+\n+    @Test(dataProvider = \"testRandomDataDataProvider\")\n+    public void testRandomData(int size, BlockFill fill)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2NTI5MDIy", "url": "https://github.com/trinodb/trino/pull/6055#pullrequestreview-536529022", "createdAt": "2020-11-23T14:35:25Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNDozNToyNVrOH4QIKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNDozNjoxMVrOH4QKdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc0NjUzOA==", "bodyText": "We need to make tests to be single threaded, otherwise we might hit some issues with reproducing GHA tests execution flakiness.\nMaybe use rangom that is bound to method execution life cycle, not a field of the class", "url": "https://github.com/trinodb/trino/pull/6055#discussion_r528746538", "createdAt": "2020-11-23T14:35:25Z", "author": {"login": "kokosing"}, "path": "presto-spi/src/test/java/io/prestosql/spi/block/BaseBlockEncodingTest.java", "diffHunk": "@@ -15,17 +15,80 @@\n \n import io.airlift.slice.DynamicSliceOutput;\n import io.prestosql.spi.type.Type;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.Arrays;\n+import java.util.Random;\n+import java.util.stream.IntStream;\n \n import static io.prestosql.spi.block.BlockTestUtils.assertBlockEquals;\n \n public abstract class BaseBlockEncodingTest<T>\n {\n+    private static final int[] RANDOM_BLOCK_SIZES = {2, 4, 8, 9, 16, 17, 32, 33, 64, 65, 1000, 1000000};\n+\n+    private final Random random = new Random(32167);\n     private final BlockEncodingSerde blockEncodingSerde = new TestingBlockEncodingSerde();\n \n     protected abstract Type getType();\n \n     protected abstract void write(BlockBuilder blockBuilder, T value);\n \n+    protected abstract T randomValue(Random random);\n+\n+    @Test\n+    public void testEmpty()\n+    {\n+        roundTrip();\n+    }\n+\n+    @Test\n+    public void testSingleNull()\n+    {\n+        roundTrip((T) null);\n+    }\n+\n+    @Test\n+    public void testSingleValue()\n+    {\n+        roundTrip(randomValue(random));\n+    }\n+\n+    @Test(dataProvider = \"testRandomDataDataProvider\")\n+    public void testRandomData(int size, BlockFill fill)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODczMzI1Mg=="}, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc0NzEyNw==", "bodyText": "composition?", "url": "https://github.com/trinodb/trino/pull/6055#discussion_r528747127", "createdAt": "2020-11-23T14:36:11Z", "author": {"login": "kokosing"}, "path": "presto-spi/src/test/java/io/prestosql/spi/block/TestLongArrayBlockEncoding.java", "diffHunk": "@@ -13,48 +13,35 @@\n  */\n package io.prestosql.spi.block;\n \n-import io.airlift.slice.DynamicSliceOutput;\n+import io.prestosql.spi.type.Type;\n import org.testng.annotations.Test;\n \n-import static io.prestosql.spi.block.BlockTestUtils.assertBlockEquals;\n import static io.prestosql.spi.type.BigintType.BIGINT;\n \n public class TestLongArrayBlockEncoding\n+        extends BaseBlockEncodingTest<Long>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MzM2MjY1", "url": "https://github.com/trinodb/trino/pull/6055#pullrequestreview-538336265", "createdAt": "2020-11-25T10:06:03Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDowNjowM1rOH5r8tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDowNzoxM1rOH5r_zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI1MDkzMg==", "bodyText": "is (T) redundant here?", "url": "https://github.com/trinodb/trino/pull/6055#discussion_r530250932", "createdAt": "2020-11-25T10:06:03Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/test/java/io/prestosql/spi/block/BaseBlockEncodingTest.java", "diffHunk": "@@ -15,19 +15,87 @@\n \n import io.airlift.slice.DynamicSliceOutput;\n import io.prestosql.spi.type.Type;\n+import org.testng.annotations.DataProvider;\n import org.testng.annotations.Test;\n \n+import java.util.Arrays;\n+import java.util.Random;\n+import java.util.stream.IntStream;\n+\n import static io.prestosql.spi.block.BlockTestUtils.assertBlockEquals;\n \n @Test(singleThreaded = true)\n public abstract class BaseBlockEncodingTest<T>\n {\n+    private static final int[] RANDOM_BLOCK_SIZES = {2, 4, 8, 9, 16, 17, 32, 33, 64, 65, 1000, 1000000};\n+\n+    private final Random random = new Random(32167);\n     private final BlockEncodingSerde blockEncodingSerde = new TestingBlockEncodingSerde();\n \n     protected abstract Type getType();\n \n     protected abstract void write(BlockBuilder blockBuilder, T value);\n \n+    protected abstract T randomValue(Random random);\n+\n+    @Test\n+    public void testEmpty()\n+    {\n+        roundTrip();\n+    }\n+\n+    @Test\n+    public void testSingleNull()\n+    {\n+        roundTrip((T) null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI1MTcyNw==", "bodyText": "these annotations don't work in abstract classes in TestNG: cbeust/testng#144", "url": "https://github.com/trinodb/trino/pull/6055#discussion_r530251727", "createdAt": "2020-11-25T10:07:13Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/test/java/io/prestosql/spi/block/BaseBlockEncodingTest.java", "diffHunk": "@@ -15,19 +15,87 @@\n \n import io.airlift.slice.DynamicSliceOutput;\n import io.prestosql.spi.type.Type;\n+import org.testng.annotations.DataProvider;\n import org.testng.annotations.Test;\n \n+import java.util.Arrays;\n+import java.util.Random;\n+import java.util.stream.IntStream;\n+\n import static io.prestosql.spi.block.BlockTestUtils.assertBlockEquals;\n \n @Test(singleThreaded = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5OTQ1OTA2", "url": "https://github.com/trinodb/trino/pull/6055#pullrequestreview-539945906", "createdAt": "2020-11-27T12:31:54Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjozMTo1NVrOH68zzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjozMjo1NFrOH681ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU3NTc1Ng==", "bodyText": "remove this annotation here then", "url": "https://github.com/trinodb/trino/pull/6055#discussion_r531575756", "createdAt": "2020-11-27T12:31:55Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/test/java/io/prestosql/spi/block/BaseBlockEncodingTest.java", "diffHunk": "@@ -15,19 +15,87 @@\n \n import io.airlift.slice.DynamicSliceOutput;\n import io.prestosql.spi.type.Type;\n+import org.testng.annotations.DataProvider;\n import org.testng.annotations.Test;\n \n+import java.util.Arrays;\n+import java.util.Random;\n+import java.util.stream.IntStream;\n+\n import static io.prestosql.spi.block.BlockTestUtils.assertBlockEquals;\n \n @Test(singleThreaded = true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI1MTcyNw=="}, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU3NjE3MA==", "bodyText": "extract this to getRandom method", "url": "https://github.com/trinodb/trino/pull/6055#discussion_r531576170", "createdAt": "2020-11-27T12:32:54Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/test/java/io/prestosql/spi/block/BaseBlockEncodingTest.java", "diffHunk": "@@ -15,19 +15,88 @@\n \n import io.airlift.slice.DynamicSliceOutput;\n import io.prestosql.spi.type.Type;\n+import org.testng.annotations.DataProvider;\n import org.testng.annotations.Test;\n \n+import java.util.Arrays;\n+import java.util.Random;\n+import java.util.stream.IntStream;\n+\n import static io.prestosql.spi.block.BlockTestUtils.assertBlockEquals;\n \n-@Test(singleThreaded = true)\n public abstract class BaseBlockEncodingTest<T>\n {\n+    private static final int[] RANDOM_BLOCK_SIZES = {2, 4, 8, 9, 16, 17, 32, 33, 64, 65, 1000, 1000000};\n+    private static final int RANDOM_SEED = 32167;\n+\n     private final BlockEncodingSerde blockEncodingSerde = new TestingBlockEncodingSerde();\n \n     protected abstract Type getType();\n \n     protected abstract void write(BlockBuilder blockBuilder, T value);\n \n+    protected abstract T randomValue(Random random);\n+\n+    @Test\n+    public void testEmpty()\n+    {\n+        roundTrip();\n+    }\n+\n+    @Test\n+    public void testSingleNull()\n+    {\n+        roundTrip((T) null);\n+    }\n+\n+    @Test\n+    public void testSingleValue()\n+    {\n+        roundTrip(randomValue(new Random(RANDOM_SEED)));\n+    }\n+\n+    @Test\n+    public void testNullAtTheBeginningAndEnd()\n+    {\n+        Random random = new Random(32167);\n+        roundTrip(null, null, randomValue(random), null, randomValue(random), null, null);\n+    }\n+\n+    @Test(dataProvider = \"testRandomDataDataProvider\")\n+    public void testRandomData(int size, BlockFill fill)\n+    {\n+        Random random = new Random(32167);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMDA3ODYw", "url": "https://github.com/trinodb/trino/pull/6055#pullrequestreview-540007860", "createdAt": "2020-11-27T14:11:45Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNDoxMTo0NlrOH6_w5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNDoxMTo0NlrOH6_w5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYyNDE2Ng==", "bodyText": "Add a test with 0-length strings\nAdd a test with multibyte UTF\nAdd a test with 0 byte", "url": "https://github.com/trinodb/trino/pull/6055#discussion_r531624166", "createdAt": "2020-11-27T14:11:46Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/test/java/io/prestosql/spi/block/TestVariableWidthBlockEncoding.java", "diffHunk": "@@ -13,29 +13,34 @@\n  */\n package io.prestosql.spi.block;\n \n-import io.airlift.slice.DynamicSliceOutput;\n-import org.testng.annotations.Test;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.Random;\n \n-import static io.prestosql.spi.block.BlockTestUtils.assertBlockEquals;\n import static io.prestosql.spi.type.VarcharType.VARCHAR;\n \n public class TestVariableWidthBlockEncoding\n+        extends BaseBlockEncodingTest<String>\n {\n-    private final BlockEncodingSerde blockEncodingSerde = new TestingBlockEncodingSerde();\n+    @Override\n+    protected Type getType()\n+    {\n+        return VARCHAR;\n+    }\n \n-    @Test\n-    public void testRoundTrip()\n+    @Override\n+    protected void write(BlockBuilder blockBuilder, String value)\n     {\n-        BlockBuilder expectedBlockBuilder = VARCHAR.createBlockBuilder(null, 4);\n-        VARCHAR.writeString(expectedBlockBuilder, \"alice\");\n-        VARCHAR.writeString(expectedBlockBuilder, \"bob\");\n-        VARCHAR.writeString(expectedBlockBuilder, \"charlie\");\n-        VARCHAR.writeString(expectedBlockBuilder, \"dave\");\n-        Block expectedBlock = expectedBlockBuilder.build();\n+        VARCHAR.writeString(blockBuilder, value);\n+    }\n \n-        DynamicSliceOutput sliceOutput = new DynamicSliceOutput(1024);\n-        blockEncodingSerde.writeBlock(sliceOutput, expectedBlock);\n-        Block actualBlock = blockEncodingSerde.readBlock(sliceOutput.slice().getInput());\n-        assertBlockEquals(VARCHAR, actualBlock, expectedBlock);\n+    @Override\n+    protected String randomValue(Random random)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNzYxMTI3", "url": "https://github.com/trinodb/trino/pull/6055#pullrequestreview-540761127", "createdAt": "2020-11-30T10:09:00Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMDowOTowMFrOH7z9-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMDoxMDowMlrOH70AnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ3OTQ4MA==", "bodyText": "remove?", "url": "https://github.com/trinodb/trino/pull/6055#discussion_r532479480", "createdAt": "2020-11-30T10:09:00Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/test/java/io/prestosql/spi/block/BaseBlockEncodingTest.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.block;\n+\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.prestosql.spi.type.Type;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.Arrays;\n+import java.util.Random;\n+import java.util.stream.IntStream;\n+\n+import static io.prestosql.spi.block.BlockTestUtils.assertBlockEquals;\n+\n+public abstract class BaseBlockEncodingTest<T>\n+{\n+    private static final int[] RANDOM_BLOCK_SIZES = {2, 4, 8, 9, 16, 17, 32, 33, 64, 65, 1000, 1000000};\n+\n+    private final BlockEncodingSerde blockEncodingSerde = new TestingBlockEncodingSerde();\n+\n+    protected abstract Type getType();\n+\n+    protected abstract void write(BlockBuilder blockBuilder, T value);\n+\n+    protected abstract T randomValue(Random random);\n+\n+    protected abstract T emptyValue(Random random);\n+\n+    @Test\n+    public void testEmpty()\n+    {\n+        roundTrip();\n+    }\n+\n+    @Test\n+    public void testSingleNull()\n+    {\n+        roundTrip((T) null);\n+    }\n+\n+    @Test\n+    public void testSingleValue()\n+    {\n+        roundTrip(randomValue(getRandom()));\n+    }\n+\n+    @Test\n+    void testEmptyValue()\n+    {\n+        roundTrip(emptyValue(getRandom()));\n+    }\n+\n+    @Test\n+    public void testNullAtTheBeginningAndEnd()\n+    {\n+        Random random = getRandom();\n+        roundTrip(null, null, randomValue(random), null, randomValue(random), null, null);\n+    }\n+\n+    @Test(dataProvider = \"testRandomDataDataProvider\")\n+    public void testRandomData(int size, BlockFill fill)\n+    {\n+        Random random = getRandom();\n+        Object[] values = new Object[size];\n+        for (int i = 0; i < size; i++) {\n+            switch (fill) {\n+                case ONLY_NULLS:\n+                    values[i] = null;\n+                    break;\n+                case ONLY_VALUES:\n+                    values[i] = randomValue(random);\n+                    break;\n+                case MIXED:\n+                    if (random.nextBoolean()) {\n+                        values[i] = null;\n+                    }\n+                    else {\n+                        values[i] = randomValue(random);\n+                    }\n+                    break;\n+            }\n+        }\n+\n+        roundTrip(values);\n+    }\n+\n+    @DataProvider\n+    public static Object[][] testRandomDataDataProvider()\n+    {\n+        return Arrays.stream(BlockFill.values())\n+                .flatMap(fill -> IntStream.of(RANDOM_BLOCK_SIZES).mapToObj(size -> new Object[] {size, fill}))\n+                .toArray(Object[][]::new);\n+    }\n+\n+    protected final void roundTrip(Object... values)\n+    {\n+        BlockBuilder expectedBlockBuilder = createBlockBuilder(values.length);\n+\n+        for (Object value : values) {\n+            if (value == null) {\n+                expectedBlockBuilder.appendNull();\n+            }\n+            else {\n+                //noinspection unchecked\n+                write(expectedBlockBuilder, (T) value);\n+            }\n+        }\n+\n+        Block expectedBlock = expectedBlockBuilder.build();\n+        DynamicSliceOutput sliceOutput = new DynamicSliceOutput(1024);\n+        blockEncodingSerde.writeBlock(sliceOutput, expectedBlock);\n+        Block actualBlock = blockEncodingSerde.readBlock(sliceOutput.slice().getInput());\n+        assertBlockEquals(getType(), actualBlock, expectedBlock);\n+    }\n+\n+    private BlockBuilder createBlockBuilder(int length)\n+    {\n+        return getType().createBlockBuilder(null, length);\n+    }\n+\n+    private static Random getRandom()\n+    {\n+        return new Random(32167);\n+    }\n+\n+    private enum BlockFill\n+    {\n+        ONLY_NULLS,\n+        ONLY_VALUES,\n+        MIXED,\n+        /**/", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ3OTgxOQ==", "bodyText": "what is an empty value? Do we need this?", "url": "https://github.com/trinodb/trino/pull/6055#discussion_r532479819", "createdAt": "2020-11-30T10:09:30Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/test/java/io/prestosql/spi/block/BaseBlockEncodingTest.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.block;\n+\n+import io.airlift.slice.DynamicSliceOutput;\n+import io.prestosql.spi.type.Type;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.Arrays;\n+import java.util.Random;\n+import java.util.stream.IntStream;\n+\n+import static io.prestosql.spi.block.BlockTestUtils.assertBlockEquals;\n+\n+public abstract class BaseBlockEncodingTest<T>\n+{\n+    private static final int[] RANDOM_BLOCK_SIZES = {2, 4, 8, 9, 16, 17, 32, 33, 64, 65, 1000, 1000000};\n+\n+    private final BlockEncodingSerde blockEncodingSerde = new TestingBlockEncodingSerde();\n+\n+    protected abstract Type getType();\n+\n+    protected abstract void write(BlockBuilder blockBuilder, T value);\n+\n+    protected abstract T randomValue(Random random);\n+\n+    protected abstract T emptyValue(Random random);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ4MDA2MA==", "bodyText": "remove?", "url": "https://github.com/trinodb/trino/pull/6055#discussion_r532480060", "createdAt": "2020-11-30T10:09:53Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/test/java/io/prestosql/spi/block/TestShortArrayBlockEncoding.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.block;\n+\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.Random;\n+\n+import static io.prestosql.spi.type.SmallintType.SMALLINT;\n+\n+public class TestShortArrayBlockEncoding\n+        extends BaseBlockEncodingTest<Short>\n+{\n+    @Override\n+    protected void write(BlockBuilder blockBuilder, Short value)\n+    {\n+        blockBuilder.writeShort(value);\n+    }\n+\n+    @Override\n+    protected Short randomValue(Random random)\n+    {\n+        return (short) random.nextInt(0xFFFF);\n+    }\n+\n+    @Override\n+    protected Short emptyValue(Random random)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ4MDE1Nw==", "bodyText": "remove?", "url": "https://github.com/trinodb/trino/pull/6055#discussion_r532480157", "createdAt": "2020-11-30T10:10:02Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/test/java/io/prestosql/spi/block/TestInt96ArrayBlockEncoding.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.block;\n+\n+import io.prestosql.spi.type.LongTimestamp;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.Random;\n+\n+import static io.prestosql.spi.type.TimestampType.TIMESTAMP_PICOS;\n+import static io.prestosql.spi.type.Timestamps.PICOSECONDS_PER_MICROSECOND;\n+\n+public class TestInt96ArrayBlockEncoding\n+        extends BaseBlockEncodingTest<LongTimestamp>\n+{\n+    @Override\n+    protected void write(BlockBuilder blockBuilder, LongTimestamp value)\n+    {\n+        TIMESTAMP_PICOS.writeObject(blockBuilder, value);\n+    }\n+\n+    @Override\n+    protected LongTimestamp randomValue(Random random)\n+    {\n+        return new LongTimestamp(random.nextLong(), random.nextInt(PICOSECONDS_PER_MICROSECOND));\n+    }\n+\n+    @Override\n+    protected LongTimestamp emptyValue(Random random)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwOTA3NDQx", "url": "https://github.com/trinodb/trino/pull/6055#pullrequestreview-540907441", "createdAt": "2020-11-30T13:29:45Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzoyOTo0NVrOH77HtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzoyOTo0NVrOH77HtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5NjY2MA==", "bodyText": "nit: orders of methods should match order in BaseBlockEncodingTest", "url": "https://github.com/trinodb/trino/pull/6055#discussion_r532596660", "createdAt": "2020-11-30T13:29:45Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/test/java/io/prestosql/spi/block/TestLongArrayBlockEncoding.java", "diffHunk": "@@ -13,48 +13,30 @@\n  */\n package io.prestosql.spi.block;\n \n-import io.airlift.slice.DynamicSliceOutput;\n-import org.testng.annotations.Test;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.Random;\n \n-import static io.prestosql.spi.block.BlockTestUtils.assertBlockEquals;\n import static io.prestosql.spi.type.BigintType.BIGINT;\n \n public class TestLongArrayBlockEncoding\n+        extends BaseBlockEncodingTest<Long>\n {\n-    private final BlockEncodingSerde blockEncodingSerde = new TestingBlockEncodingSerde();\n-\n-    @Test\n-    public void testRoundTripNoNull()\n+    @Override\n+    protected void write(BlockBuilder blockBuilder, Long value)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12364018cc7e0ab34327274cfbfa66699a2e309f", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/12364018cc7e0ab34327274cfbfa66699a2e309f", "committedDate": "2020-11-30T13:37:50Z", "message": "Generify TestLongArrayBlockEncoding"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd6d42fdc5205e8fce6807772931b435a75aa6bb", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/dd6d42fdc5205e8fce6807772931b435a75aa6bb", "committedDate": "2020-11-30T13:37:52Z", "message": "Add more types to BaseBlockEncodingTest"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "dd6d42fdc5205e8fce6807772931b435a75aa6bb", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/dd6d42fdc5205e8fce6807772931b435a75aa6bb", "committedDate": "2020-11-30T13:37:52Z", "message": "Add more types to BaseBlockEncodingTest"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2254, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}