{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYxODQxNzky", "number": 4669, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwODo0Njo0NFrOEUhRyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNToxMTowMlrOEUpRAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTUyMjAzOnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/sql/planner/DomainTranslator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwODo0Njo0NFrOG6xL7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNDozODoxMlrOG68KBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI3NjQ2MA==", "bodyText": "please extarct args.get(0) and args.get(1) as separate variables", "url": "https://github.com/trinodb/trino/pull/4669#discussion_r464276460", "createdAt": "2020-08-03T08:46:44Z", "author": {"login": "sopel39"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/DomainTranslator.java", "diffHunk": "@@ -928,7 +931,55 @@ protected ExtractionResult visitLikePredicate(LikePredicate node, Boolean comple\n             }\n \n             Slice constantPrefix = LikeFunctions.unescapeLiteralLikePattern(pattern.slice(0, patternConstantPrefixBytes), escape);\n+            return createRangeDomain(type, constantPrefix).map(domain -> new ExtractionResult(TupleDomain.withColumnDomains(ImmutableMap.of(symbol, domain)), node));\n+        }\n+\n+        @Override\n+        protected ExtractionResult visitFunctionCall(FunctionCall node, Boolean complement)\n+        {\n+            String name = ResolvedFunction.extractFunctionName(node.getName());\n+            if (name.equals(\"starts_with\")) {\n+                Optional<ExtractionResult> result = tryVisitStartsWithFunction(node, complement);\n+                if (result.isPresent()) {\n+                    return result.get();\n+                }\n+            }\n+            return visitExpression(node, complement);\n+        }\n+\n+        private Optional<ExtractionResult> tryVisitStartsWithFunction(FunctionCall node, Boolean complement)\n+        {\n+            List<Expression> args = node.getArguments();\n+            if (args.size() != 2) {\n+                return Optional.empty();\n+            }\n+            if (!(args.get(0) instanceof SymbolReference)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ1NjE5OQ==", "bodyText": "fixed.", "url": "https://github.com/trinodb/trino/pull/4669#discussion_r464456199", "createdAt": "2020-08-03T14:38:12Z", "author": {"login": "takezoe"}, "path": "presto-main/src/main/java/io/prestosql/sql/planner/DomainTranslator.java", "diffHunk": "@@ -928,7 +931,55 @@ protected ExtractionResult visitLikePredicate(LikePredicate node, Boolean comple\n             }\n \n             Slice constantPrefix = LikeFunctions.unescapeLiteralLikePattern(pattern.slice(0, patternConstantPrefixBytes), escape);\n+            return createRangeDomain(type, constantPrefix).map(domain -> new ExtractionResult(TupleDomain.withColumnDomains(ImmutableMap.of(symbol, domain)), node));\n+        }\n+\n+        @Override\n+        protected ExtractionResult visitFunctionCall(FunctionCall node, Boolean complement)\n+        {\n+            String name = ResolvedFunction.extractFunctionName(node.getName());\n+            if (name.equals(\"starts_with\")) {\n+                Optional<ExtractionResult> result = tryVisitStartsWithFunction(node, complement);\n+                if (result.isPresent()) {\n+                    return result.get();\n+                }\n+            }\n+            return visitExpression(node, complement);\n+        }\n+\n+        private Optional<ExtractionResult> tryVisitStartsWithFunction(FunctionCall node, Boolean complement)\n+        {\n+            List<Expression> args = node.getArguments();\n+            if (args.size() != 2) {\n+                return Optional.empty();\n+            }\n+            if (!(args.get(0) instanceof SymbolReference)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI3NjQ2MA=="}, "originalCommit": null, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTUzMDg1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestDomainTranslator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwODo0OToxNFrOG6xRMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNTowODozMVrOG69Whg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI3NzgxMQ==", "bodyText": "add some edge cases like:\n\nempty pattern.\npattern with trailing spaces\npattern with escaped .* or /", "url": "https://github.com/trinodb/trino/pull/4669#discussion_r464277811", "createdAt": "2020-08-03T08:49:14Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestDomainTranslator.java", "diffHunk": "@@ -1582,6 +1582,30 @@ public void testLikePredicate()\n         assertUnsupportedPredicate(not(like(C_VARCHAR, stringLiteral(\"abc\\\\_def\"))));\n     }\n \n+    @Test\n+    public void testStartsWithFunction()\n+    {\n+        Type varcharType = createUnboundedVarcharType();\n+\n+        // constant\n+        testSimpleComparison(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ2MTQ5OA==", "bodyText": "Added empty pattern which is not supported in domain translation and _ prefix pattern which is treated as a constant string as different from LIKE.\n\n\npattern with trailing spaces\npattern with escaped .* or /\n\n\nWhat do these cases test? Unlike LIKE predicate, STARTS_WITH function always treats the second argument as  a constant string. It doesn't care whether characters are escaped or not.", "url": "https://github.com/trinodb/trino/pull/4669#discussion_r464461498", "createdAt": "2020-08-03T14:46:32Z", "author": {"login": "takezoe"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestDomainTranslator.java", "diffHunk": "@@ -1582,6 +1582,30 @@ public void testLikePredicate()\n         assertUnsupportedPredicate(not(like(C_VARCHAR, stringLiteral(\"abc\\\\_def\"))));\n     }\n \n+    @Test\n+    public void testStartsWithFunction()\n+    {\n+        Type varcharType = createUnboundedVarcharType();\n+\n+        // constant\n+        testSimpleComparison(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI3NzgxMQ=="}, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ3NTc4Mg==", "bodyText": "What do these cases test? Unlike LIKE predicate, STARTS_WITH function always treats the second argument as a constant string. It doesn't care whether characters are escaped or not.\n\nYou are right.", "url": "https://github.com/trinodb/trino/pull/4669#discussion_r464475782", "createdAt": "2020-08-03T15:08:31Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestDomainTranslator.java", "diffHunk": "@@ -1582,6 +1582,30 @@ public void testLikePredicate()\n         assertUnsupportedPredicate(not(like(C_VARCHAR, stringLiteral(\"abc\\\\_def\"))));\n     }\n \n+    @Test\n+    public void testStartsWithFunction()\n+    {\n+        Type varcharType = createUnboundedVarcharType();\n+\n+        // constant\n+        testSimpleComparison(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI3NzgxMQ=="}, "originalCommit": null, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMDgyMTc0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestDomainTranslator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNTowODo0OFrOG69XKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzowNTo0OFrOG7Bgjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ3NTk0Ng==", "bodyText": "Could you add test for complement case?", "url": "https://github.com/trinodb/trino/pull/4669#discussion_r464475946", "createdAt": "2020-08-03T15:08:48Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestDomainTranslator.java", "diffHunk": "@@ -1582,6 +1582,39 @@ public void testLikePredicate()\n         assertUnsupportedPredicate(not(like(C_VARCHAR, stringLiteral(\"abc\\\\_def\"))));\n     }\n \n+    @Test\n+    public void testStartsWithFunction()\n+    {\n+        Type varcharType = createUnboundedVarcharType();\n+\n+        // constant\n+        testSimpleComparison(\n+                startsWith(C_VARCHAR, stringLiteral(\"abc\")),\n+                C_VARCHAR,\n+                startsWith(C_VARCHAR, stringLiteral(\"abc\")),\n+                Domain.create(ValueSet.ofRanges(Range.range(varcharType, utf8Slice(\"abc\"), true, utf8Slice(\"abd\"), false)), false));\n+\n+        testSimpleComparison(\n+                startsWith(C_VARCHAR, stringLiteral(\"_abc\")),\n+                C_VARCHAR,\n+                startsWith(C_VARCHAR, stringLiteral(\"_abc\")),\n+                Domain.create(ValueSet.ofRanges(Range.range(varcharType, utf8Slice(\"_abc\"), true, utf8Slice(\"_abd\"), false)), false));\n+\n+        // empty\n+        assertUnsupportedPredicate(startsWith(C_VARCHAR, stringLiteral(\"\")));\n+\n+        // non-ASCII\n+        testSimpleComparison(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU0Mzg4Ng==", "bodyText": "Added.", "url": "https://github.com/trinodb/trino/pull/4669#discussion_r464543886", "createdAt": "2020-08-03T17:05:48Z", "author": {"login": "takezoe"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestDomainTranslator.java", "diffHunk": "@@ -1582,6 +1582,39 @@ public void testLikePredicate()\n         assertUnsupportedPredicate(not(like(C_VARCHAR, stringLiteral(\"abc\\\\_def\"))));\n     }\n \n+    @Test\n+    public void testStartsWithFunction()\n+    {\n+        Type varcharType = createUnboundedVarcharType();\n+\n+        // constant\n+        testSimpleComparison(\n+                startsWith(C_VARCHAR, stringLiteral(\"abc\")),\n+                C_VARCHAR,\n+                startsWith(C_VARCHAR, stringLiteral(\"abc\")),\n+                Domain.create(ValueSet.ofRanges(Range.range(varcharType, utf8Slice(\"abc\"), true, utf8Slice(\"abd\"), false)), false));\n+\n+        testSimpleComparison(\n+                startsWith(C_VARCHAR, stringLiteral(\"_abc\")),\n+                C_VARCHAR,\n+                startsWith(C_VARCHAR, stringLiteral(\"_abc\")),\n+                Domain.create(ValueSet.ofRanges(Range.range(varcharType, utf8Slice(\"_abc\"), true, utf8Slice(\"_abd\"), false)), false));\n+\n+        // empty\n+        assertUnsupportedPredicate(startsWith(C_VARCHAR, stringLiteral(\"\")));\n+\n+        // non-ASCII\n+        testSimpleComparison(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ3NTk0Ng=="}, "originalCommit": null, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMDgzMDc0OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestDomainTranslator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNToxMTowMlrOG69chg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzowNjoxOVrOG7BhdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ3NzMxOA==", "bodyText": "Could you add a test for generic function call (that it's not supported)?", "url": "https://github.com/trinodb/trino/pull/4669#discussion_r464477318", "createdAt": "2020-08-03T15:11:02Z", "author": {"login": "sopel39"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestDomainTranslator.java", "diffHunk": "@@ -1582,6 +1582,39 @@ public void testLikePredicate()\n         assertUnsupportedPredicate(not(like(C_VARCHAR, stringLiteral(\"abc\\\\_def\"))));\n     }\n \n+    @Test\n+    public void testStartsWithFunction()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU0NDExNg==", "bodyText": "Added testUnsupportedFunctions() which tests some unsupported functions.", "url": "https://github.com/trinodb/trino/pull/4669#discussion_r464544116", "createdAt": "2020-08-03T17:06:19Z", "author": {"login": "takezoe"}, "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestDomainTranslator.java", "diffHunk": "@@ -1582,6 +1582,39 @@ public void testLikePredicate()\n         assertUnsupportedPredicate(not(like(C_VARCHAR, stringLiteral(\"abc\\\\_def\"))));\n     }\n \n+    @Test\n+    public void testStartsWithFunction()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ3NzMxOA=="}, "originalCommit": null, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3578, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}