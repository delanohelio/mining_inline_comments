{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzNTY0NDA4", "number": 5769, "title": "Implement getRow for AbstractPrestoResultSet", "bodyText": "This PR fixed the issue #5745. It implements the getRow method in AbstractPrestoResultSet class which returns the current number of row in ResultSet (indexing from 1). The method specification can be found in this java doc.\nFixes #5745", "createdAt": "2020-11-01T06:14:29Z", "url": "https://github.com/trinodb/trino/pull/5769", "merged": true, "mergeCommit": {"oid": "f2a26a034c4ed9d7166076793432c195cf637c55"}, "closed": true, "closedAt": "2020-11-05T23:02:39Z", "author": {"login": "jasonyanwenl"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdYNgiBgFqTUyMTIxMDAzMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZjg-NABqjM5NjI3NzE5NDE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMjEwMDMx", "url": "https://github.com/trinodb/trino/pull/5769#pullrequestreview-521210031", "createdAt": "2020-11-01T10:13:14Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxMDoxMzoxNFrOHrt4Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxMDoyMjowMVrOHrt7ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYwMjQ4Nw==", "bodyText": "Let's use assertThatThrownBy instead of expectedExceptions and make sure the message as well.\n            assertThatThrownBy(rs::getRow)\n                    .isInstanceOf(SQLException.class)\n                    .hasMessage(\"ResultSet is closed\");", "url": "https://github.com/trinodb/trino/pull/5769#discussion_r515602487", "createdAt": "2020-11-01T10:13:14Z", "author": {"login": "ebyhr"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -751,6 +751,34 @@ public void testGetStatement()\n         }\n     }\n \n+    @Test\n+    public void testGetRow()\n+            throws Exception\n+    {\n+        try (ConnectedStatement connectedStatement = newStatement()) {\n+            try (ResultSet rs = connectedStatement.getStatement().executeQuery(\"SELECT * FROM (VALUES (1), (2), (3))\")) {\n+                assertEquals(rs.getRow(), 0);\n+                int currentRow = 0;\n+                while (rs.next()) {\n+                    currentRow++;\n+                    assertEquals(rs.getRow(), currentRow);\n+                }\n+                assertEquals(rs.getRow(), 0);\n+            }\n+        }\n+    }\n+\n+    @Test(expectedExceptions = SQLException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYwMzIzMw==", "bodyText": "There is a utility method.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (isClosed()) {\n          \n          \n            \n                        throw new SQLException(\"Result set is closed\");\n          \n          \n            \n                    }\n          \n          \n            \n                    checkOpen();", "url": "https://github.com/trinodb/trino/pull/5769#discussion_r515603233", "createdAt": "2020-11-01T10:20:30Z", "author": {"login": "ebyhr"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -684,7 +687,11 @@ public boolean last()\n     public int getRow()\n             throws SQLException\n     {\n-        throw new SQLFeatureNotSupportedException(\"getRow\");\n+        if (isClosed()) {\n+            throw new SQLException(\"Result set is closed\");\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYwMzM5NQ==", "bodyText": "Could you move to after AtomicReference<List<Object>> row? These variables related each other.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected int currentRow; // Index into 'rows' of our current row (1-based)\n          \n          \n            \n                private final AtomicInteger currentRow = new AtomicInteger(); // Index into 'rows' of our current row (1-based)", "url": "https://github.com/trinodb/trino/pull/5769#discussion_r515603395", "createdAt": "2020-11-01T10:22:01Z", "author": {"login": "ebyhr"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -126,6 +126,7 @@\n     private final AtomicBoolean wasNull = new AtomicBoolean();\n     protected final AtomicBoolean closed = new AtomicBoolean();\n     private final Optional<Statement> statement;\n+    protected int currentRow; // Index into 'rows' of our current row (1-based)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMjIzNjIz", "url": "https://github.com/trinodb/trino/pull/5769#pullrequestreview-521223623", "createdAt": "2020-11-01T13:14:49Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxMzoxNDo0OVrOHrvAog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxMzoxNDo0OVrOHrvAog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYyMTAyNg==", "bodyText": "What should be the expected behavior after reading 2^31 rows?", "url": "https://github.com/trinodb/trino/pull/5769#discussion_r515621026", "createdAt": "2020-11-01T13:14:49Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -148,9 +149,11 @@ public boolean next()\n         try {\n             if (!results.hasNext()) {\n                 row.set(null);\n+                currentRow = 0;\n                 return false;\n             }\n             row.set(results.next());\n+            currentRow++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzAwMzA4", "url": "https://github.com/trinodb/trino/pull/5769#pullrequestreview-523300308", "createdAt": "2020-11-04T12:07:06Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMjowNzowNlrOHtVVAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMjowNzowNlrOHtVVAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NzQxMA==", "bodyText": "Integer.MAX_VALUE should be allowed. Could you update like this? PrestoStatement#getMaxRows is similar method.\n    @Override\n    public int getRow()\n            throws SQLException\n    {\n        checkOpen();\n\n        long rowNumber = currentRowNumber.get();\n        if (rowNumber < 0 || rowNumber > Integer.MAX_VALUE) {\n            throw new SQLException(\"Rows exceed limit of 2147483647\");\n        }\n        return (int) rowNumber;\n    }", "url": "https://github.com/trinodb/trino/pull/5769#discussion_r517297410", "createdAt": "2020-11-04T12:07:06Z", "author": {"login": "ebyhr"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -684,7 +688,15 @@ public boolean last()\n     public int getRow()\n             throws SQLException\n     {\n-        throw new SQLFeatureNotSupportedException(\"getRow\");\n+        checkOpen();\n+\n+        long localCurrentRowNumber = currentRowNumber.get();\n+\n+        if (localCurrentRowNumber < 0 || localCurrentRowNumber >= Integer.MAX_VALUE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0MDg1ODk1", "url": "https://github.com/trinodb/trino/pull/5769#pullrequestreview-524085895", "createdAt": "2020-11-05T09:44:56Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwOTo0NDo1NlrOHt7KwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwOTo0NDo1NlrOHt7KwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkxNzM3Nw==", "bodyText": "\"Max rows\" looks incorrect. Could you change to \"Rows exceed ...\" or \"Current row exceed ...\"?", "url": "https://github.com/trinodb/trino/pull/5769#discussion_r517917377", "createdAt": "2020-11-05T09:44:56Z", "author": {"login": "ebyhr"}, "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -684,7 +688,14 @@ public boolean last()\n     public int getRow()\n             throws SQLException\n     {\n-        throw new SQLFeatureNotSupportedException(\"getRow\");\n+        checkOpen();\n+\n+        long rowNumber = currentRowNumber.get();\n+        if (rowNumber < 0 || rowNumber > Integer.MAX_VALUE) {\n+            throw new SQLException(\"Max rows exceeds limit of 2147483647\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "088972ffdcfb24e22a4eb87cb90fa0eff4a2bc76", "author": {"user": {"login": "jasonyanwenl", "name": "Yanwen(Jason) Lin"}}, "url": "https://github.com/trinodb/trino/commit/088972ffdcfb24e22a4eb87cb90fa0eff4a2bc76", "committedDate": "2020-11-05T14:47:54Z", "message": "Implement getRow for AbstractPrestoResultSet"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "088972ffdcfb24e22a4eb87cb90fa0eff4a2bc76", "author": {"user": {"login": "jasonyanwenl", "name": "Yanwen(Jason) Lin"}}, "url": "https://github.com/trinodb/trino/commit/088972ffdcfb24e22a4eb87cb90fa0eff4a2bc76", "committedDate": "2020-11-05T14:47:54Z", "message": "Implement getRow for AbstractPrestoResultSet"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2737, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}