{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzNTA3NTc5", "number": 5768, "title": "Fix Hive applyProjection performance issue", "bodyText": "Issue:\nA query of the form SELECT * FROM V, where V is a view flattenning out nested columns, exhausts the optimizer limit of 180s. The number of output columns in V is ~1.5k. (slack thread)\nCPU profiling and data in system.runtime.optimizer_rule_stats table show that HiveMetadata#applyProjection takes too long to complete. Within the method, most time is spent building maps and sets of ConnectorExpression.\n\n\nOne very obvious issue is building of the map repeatedly within the stream.\n\n\nSecondly, even a single build of a map/set (size ~1.5k) involving ConnectorExpressions takes too long. This is because ConnectorExpression subclasses use type field for hashcode/equals. The comparisons become quite expensive in case of nested types (RowType falls back to TypeSignature for hashcode and equals). Also, in case of FieldDereference, the # of comparisons blow up because target itself can be a ConnectorExpression.\n\n\nThe following table shows a comparison of the time taken to build a set of ConnectorExpressions for (1) different set-cardinalities and (2) lengths of field dereference objects.\n\n\n\nNumber of elements in the set\nExample elements in the set\nwalltime (ms)  Current master\nwalltime (ms)  Implement RowType  equals and hashCode (using \"fields\")\nwalltime (ms)  Remove Type usage  from equalsTo and hashCode\n\n\n\n\n2 (levels=1)\na.f0, a.f1\n0.114\n0.103\n0.002\n\n\n4 (levels=2)\na.f0.f0, a.f0.f1, a.f1.f0, f.f1.f1\n0.058\n0.037\n0.030\n\n\n8 (levels=3)\na.f0.f0.f0, a.f0.f0.f1, a.f0.f1.f0, a.f0.f1.f1, ...\n0.159\n0.059\n0.052\n\n\n16 (levels=4)\na.f0.f0.f0.f0, a.f0.f0.f0.f1, ....\n0.422\n0.165\n0.055\n\n\n32 (levels=5)\na.f0.f0.f0.f0.f0, a.f0.f0.f0.f0.f1, ...\n0.756\n0.444\n0.093\n\n\n64 (levels=6)\na.f0.f0.f0.f0.f0.f0, ...\n2.941\n0.718\n0.109\n\n\n128 (levels=7)\n...\n13.556\n4.308\n0.167\n\n\n256 (levels=8)\n...\n44.139\n16.475\n0.291\n\n\n512 (levels=9)\n...\n118.056\n54.680\n0.772\n\n\n1024 (levels=10)\n...\n484.896\n184.495\n0.894\n\n\n2048 (levels=11)\n...\n1874.596\n714.558\n2.675\n\n\n4096 (levels=12)\n...\n8909.578\n2780.157\n9.345\n\n\n\n** I haven't tried to differentiate between which one of equals and hashcode is problematic, and whether optimizing hashCode of them improves performance. (The hashcode values seem to be distinct, haven't looked into what buckets they fall in)\n** The numbers here are not generated through JMH, but just a simple script comparing walltimes. So while the results may not be accurate, they've been averaged over 100 runs each.\nHowever,, it'd be good to first have an agreement on whether it is okay to ignore type in context of equivalence of ConnectorExpression objects. @martint", "createdAt": "2020-10-31T22:45:04Z", "url": "https://github.com/trinodb/trino/pull/5768", "merged": true, "mergeCommit": {"oid": "11b17dba9b3dfbb56fd4a5dae2b9f3c744916deb"}, "closed": true, "closedAt": "2020-11-02T17:13:20Z", "author": {"login": "phd3"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdYD4gPgFqTUyMTE3ODg2Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdYmqwtgFqTUyMTc1ODYxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMTc4ODY3", "url": "https://github.com/trinodb/trino/pull/5768#pullrequestreview-521178867", "createdAt": "2020-10-31T23:22:50Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQyMzoyMjo1MVrOHrqzVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQyMzoyMjo1MVrOHrqzVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU1MjA4Nw==", "bodyText": "Value itself doesn't seem enough for comparison (e.g multiple types can be represented by long). Maybe we should precalculate has value (we do that in other classes where hash computation is expensive)", "url": "https://github.com/trinodb/trino/pull/5768#discussion_r515552087", "createdAt": "2020-10-31T23:22:51Z", "author": {"login": "sopel39"}, "path": "presto-spi/src/main/java/io/prestosql/spi/expression/Constant.java", "diffHunk": "@@ -48,7 +48,7 @@ public Object getValue()\n     @Override\n     public int hashCode()\n     {\n-        return Objects.hash(value, getType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd6a54354a86f976e78487bd59cbfa60364f5230", "author": {"user": {"login": "phd3", "name": "Pratham"}}, "url": "https://github.com/trinodb/trino/commit/bd6a54354a86f976e78487bd59cbfa60364f5230", "committedDate": "2020-11-02T15:03:16Z", "message": "Build variable mapping set only once outside of the stream"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "bd6a54354a86f976e78487bd59cbfa60364f5230", "author": {"user": {"login": "phd3", "name": "Pratham"}}, "url": "https://github.com/trinodb/trino/commit/bd6a54354a86f976e78487bd59cbfa60364f5230", "committedDate": "2020-11-02T15:03:16Z", "message": "Build variable mapping set only once outside of the stream"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNzU4NjE4", "url": "https://github.com/trinodb/trino/pull/5768#pullrequestreview-521758618", "createdAt": "2020-11-02T15:54:31Z", "commit": {"oid": "bd6a54354a86f976e78487bd59cbfa60364f5230"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2732, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}