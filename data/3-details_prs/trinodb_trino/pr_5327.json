{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0MTc5NzEz", "number": 5327, "title": "Eliminate pushed down filters above table scan in SQL Server connector", "bodyText": "Fixes: #4596", "createdAt": "2020-09-28T14:23:11Z", "url": "https://github.com/trinodb/trino/pull/5327", "merged": true, "mergeCommit": {"oid": "52a6319b6edab3cc762e71bd59f90631566f288b"}, "closed": true, "closedAt": "2020-09-30T11:41:47Z", "author": {"login": "losipiuk"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdNuSNBAFqTQ5ODg2ODg1Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdN5tUCABqjM4MjM2NTk2Mzg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4ODY4ODUz", "url": "https://github.com/trinodb/trino/pull/5327#pullrequestreview-498868853", "createdAt": "2020-09-29T20:33:01Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDozMzowMlrOHaAGmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDozMzoyMlrOHaAHSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyNjcxNQ==", "bodyText": "why ProjectNode and not, say, AggregationNode?", "url": "https://github.com/trinodb/trino/pull/5327#discussion_r497026715", "createdAt": "2020-09-29T20:33:02Z", "author": {"login": "findepi"}, "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -98,14 +100,40 @@ public void testAggregationPushdown()\n \n         assertThat(query(\"SELECT regionkey, avg(nationkey) FROM nation GROUP BY regionkey\")).isCorrectlyPushedDown();\n \n-        try (AutoCloseable ignoreTable = withTable(\"test_aggregation_pushdown\", \"(short_decimal decimal(9, 3), long_decimal decimal(30, 10))\")) {\n-            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (100.000, 100000000.000000000)\");\n-            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (123.321, 123456789.987654321)\");\n+        try (AutoCloseable ignoreTable = withTable(\"test_aggregation_pushdown\", \"(short_decimal decimal(9, 3), long_decimal decimal(30, 10), varchar_column varchar(10))\")) {\n+            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (100.000, 100000000.000000000, 'ala')\");\n+            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (123.321, 123456789.987654321, 'kot')\");\n \n             assertThat(query(\"SELECT min(short_decimal), min(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT max(short_decimal), max(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT sum(short_decimal), sum(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT avg(short_decimal), avg(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n+\n+            // smoke testing of more complex cases\n+            // WHERE on aggregation column\n+            assertThat(query(\"SELECT min(short_decimal), min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110 AND long_decimal < 124\")).isCorrectlyPushedDown();\n+            // WHERE on non-aggregation column\n+            assertThat(query(\"SELECT min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110\")).isCorrectlyPushedDown();\n+            // GROUP BY\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on both grouping and aggregation column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110 AND long_decimal < 124\" + \" GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on grouping column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE short_decimal < 110 GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on aggregation column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE long_decimal < 124 GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // GROUP BY with WHERE on neither grouping nor aggregation column\n+            assertThat(query(\"SELECT short_decimal, min(long_decimal) FROM test_aggregation_pushdown WHERE varchar_column = 'ala' GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // aggregation on varchar column\n+            assertThat(query(\"SELECT min(varchar_column) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n+            // aggregation on varchar column with GROUPING\n+            assertThat(query(\"SELECT short_decimal, min(varchar_column) FROM test_aggregation_pushdown GROUP BY short_decimal\")).isCorrectlyPushedDown();\n+            // aggregation on varchar column with WHERE\n+            assertThat(query(\"SELECT min(varchar_column) FROM test_aggregation_pushdown WHERE varchar_column ='ala'\")).isCorrectlyPushedDown();\n+\n+            // not supported yet\n+            assertThat(query(\"SELECT min(DISTINCT short_decimal) FROM test_aggregation_pushdown\")).isNotFullyPushedDown(AggregationNode.class);\n+            assertThat(query(\"SELECT DISTINCT short_decimal, min(long_decimal) FROM test_aggregation_pushdown GROUP BY short_decimal\")).isNotFullyPushedDown(ProjectNode.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyNjg4OQ==", "bodyText": "is the comment useful?", "url": "https://github.com/trinodb/trino/pull/5327#discussion_r497026889", "createdAt": "2020-09-29T20:33:22Z", "author": {"login": "findepi"}, "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -98,14 +100,40 @@ public void testAggregationPushdown()\n \n         assertThat(query(\"SELECT regionkey, avg(nationkey) FROM nation GROUP BY regionkey\")).isCorrectlyPushedDown();\n \n-        try (AutoCloseable ignoreTable = withTable(\"test_aggregation_pushdown\", \"(short_decimal decimal(9, 3), long_decimal decimal(30, 10))\")) {\n-            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (100.000, 100000000.000000000)\");\n-            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (123.321, 123456789.987654321)\");\n+        try (AutoCloseable ignoreTable = withTable(\"test_aggregation_pushdown\", \"(short_decimal decimal(9, 3), long_decimal decimal(30, 10), varchar_column varchar(10))\")) {\n+            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (100.000, 100000000.000000000, 'ala')\");\n+            sqlServer.execute(\"INSERT INTO test_aggregation_pushdown VALUES (123.321, 123456789.987654321, 'kot')\");\n \n             assertThat(query(\"SELECT min(short_decimal), min(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT max(short_decimal), max(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT sum(short_decimal), sum(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n             assertThat(query(\"SELECT avg(short_decimal), avg(long_decimal) FROM test_aggregation_pushdown\")).isCorrectlyPushedDown();\n+\n+            // smoke testing of more complex cases", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "08bc3f61c81816cd42176765ca6c430a2e0203de", "author": {"user": {"login": "losipiuk", "name": "\u0141ukasz Osipiuk"}}, "url": "https://github.com/trinodb/trino/commit/08bc3f61c81816cd42176765ca6c430a2e0203de", "committedDate": "2020-09-30T09:51:49Z", "message": "Eliminate pushed down filters above table scan in SQL Server connector"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e34aac00c9559ba41cccd7577d8e2c795a621d5", "author": {"user": {"login": "losipiuk", "name": "\u0141ukasz Osipiuk"}}, "url": "https://github.com/trinodb/trino/commit/6e34aac00c9559ba41cccd7577d8e2c795a621d5", "committedDate": "2020-09-30T09:52:02Z", "message": "Extend TestSqlServerIntegrationSmokeTest test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "6e34aac00c9559ba41cccd7577d8e2c795a621d5", "author": {"user": {"login": "losipiuk", "name": "\u0141ukasz Osipiuk"}}, "url": "https://github.com/trinodb/trino/commit/6e34aac00c9559ba41cccd7577d8e2c795a621d5", "committedDate": "2020-09-30T09:52:02Z", "message": "Extend TestSqlServerIntegrationSmokeTest test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3481, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}