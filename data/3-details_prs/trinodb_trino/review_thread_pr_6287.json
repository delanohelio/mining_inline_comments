{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1OTk0MDg4", "number": 6287, "reviewThreads": {"totalCount": 87, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNToxNjo1NVrOFFCMKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wNVQxMTozMzo1NVrOGSPlsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODIzMDgyOnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/QueryBuilder.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNToxNjo1NVrOIFVY8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xN1QyMTowNzo1MFrOIVVNcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ2NDI0Mw==", "bodyText": "What is additionalPredicate? Is it somehow connected with limit? If not, why don't you need it in delete?", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r542464243", "createdAt": "2020-12-14T15:16:55Z", "author": {"login": "ssheikin"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/QueryBuilder.java", "diffHunk": "@@ -102,7 +102,7 @@ public PreparedStatement buildSql(\n \n         List<TypeAndValue> accumulator = new ArrayList<>();\n \n-        List<String> clauses = toConjuncts(client, session, connection, tupleDomain, accumulator);\n+        List<String> clauses = toConjuncts(session, connection, tupleDomain, accumulator);\n         if (additionalPredicate.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE5Njc1Nw==", "bodyText": "It is not. Connector when creates a splits then it can use additionalPredicate so it can run JDBC queries in parallel. One split where key_column % 2 = 0 and other when key_column % 2 = 1 where you have 2 splits.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r543196757", "createdAt": "2020-12-15T09:49:15Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/QueryBuilder.java", "diffHunk": "@@ -102,7 +102,7 @@ public PreparedStatement buildSql(\n \n         List<TypeAndValue> accumulator = new ArrayList<>();\n \n-        List<String> clauses = toConjuncts(client, session, connection, tupleDomain, accumulator);\n+        List<String> clauses = toConjuncts(session, connection, tupleDomain, accumulator);\n         if (additionalPredicate.isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ2NDI0Mw=="}, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI3MTQ5OA==", "bodyText": "In this case you cannot delete something which does not exist (or can because it could somehow exist?), and it safe not to provide additionalPredicate for delete. However consider situation if you can not match indexes in underlying systems which had been created with such additionalPredicate conditions.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r543271498", "createdAt": "2020-12-15T11:40:18Z", "author": {"login": "ssheikin"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/QueryBuilder.java", "diffHunk": "@@ -102,7 +102,7 @@ public PreparedStatement buildSql(\n \n         List<TypeAndValue> accumulator = new ArrayList<>();\n \n-        List<String> clauses = toConjuncts(client, session, connection, tupleDomain, accumulator);\n+        List<String> clauses = toConjuncts(session, connection, tupleDomain, accumulator);\n         if (additionalPredicate.isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ2NDI0Mw=="}, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI5MzY4NA==", "bodyText": "This code is not executed for delete. buildSql is called only for SELECT. DELETE is using buildDeleteSql there is no additionalPredicate", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r543293684", "createdAt": "2020-12-15T12:16:54Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/QueryBuilder.java", "diffHunk": "@@ -102,7 +102,7 @@ public PreparedStatement buildSql(\n \n         List<TypeAndValue> accumulator = new ArrayList<>();\n \n-        List<String> clauses = toConjuncts(client, session, connection, tupleDomain, accumulator);\n+        List<String> clauses = toConjuncts(session, connection, tupleDomain, accumulator);\n         if (additionalPredicate.isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ2NDI0Mw=="}, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQwOTEyOQ==", "bodyText": "Yeah, I meant exactly that place (I started this discussion here because there is no additionalPredicate in code you added for DELETE).\nLet me please clarify my comment.\nImagine situation when you have some data (key_column, year, name) in table A.\nAnd there are 2 splits: key_column % 2 = 0 and other when key_column % 2 = 1.\nUsually user executes selects on A: select name from A where year = <year> which translates to two with splits:\nselect name from A where key_column % 2 = 0 and year = <year>\nselect name from A where key_column % 2 = 1 and year = <year>\n\nTo optimize these queries downstream system has CREATE INDEX a_idx ON a (key_column, year)\nIf you don't propagate additionalPredicate to DELETE this could end up with a_idx is not used for DELETE.\nCould you please check if such scenario is covered?", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r543409129", "createdAt": "2020-12-15T14:47:07Z", "author": {"login": "ssheikin"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/QueryBuilder.java", "diffHunk": "@@ -102,7 +102,7 @@ public PreparedStatement buildSql(\n \n         List<TypeAndValue> accumulator = new ArrayList<>();\n \n-        List<String> clauses = toConjuncts(client, session, connection, tupleDomain, accumulator);\n+        List<String> clauses = toConjuncts(session, connection, tupleDomain, accumulator);\n         if (additionalPredicate.isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ2NDI0Mw=="}, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODU2MTY3Mw==", "bodyText": "If you don't propagate additionalPredicate to DELETE this could end up with a_idx is not used for DELETE.\n\nI don't care about it. It does not have to be well performant.\nNotice that for this metadata delete there are no splits generated, hence there is no additional predicate nor even actual query execution in Presto. It all happens during the \"planning\".", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r558561673", "createdAt": "2021-01-15T19:57:52Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/QueryBuilder.java", "diffHunk": "@@ -102,7 +102,7 @@ public PreparedStatement buildSql(\n \n         List<TypeAndValue> accumulator = new ArrayList<>();\n \n-        List<String> clauses = toConjuncts(client, session, connection, tupleDomain, accumulator);\n+        List<String> clauses = toConjuncts(session, connection, tupleDomain, accumulator);\n         if (additionalPredicate.isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ2NDI0Mw=="}, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTIzODUxMg==", "bodyText": "additionalPredicate is not about performance, but about correctness.\nanyway, this is split's attribute, and no splits are involved at this point yet, afaict", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r559238512", "createdAt": "2021-01-17T21:07:50Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/QueryBuilder.java", "diffHunk": "@@ -102,7 +102,7 @@ public PreparedStatement buildSql(\n \n         List<TypeAndValue> accumulator = new ArrayList<>();\n \n-        List<String> clauses = toConjuncts(client, session, connection, tupleDomain, accumulator);\n+        List<String> clauses = toConjuncts(session, connection, tupleDomain, accumulator);\n         if (additionalPredicate.isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ2NDI0Mw=="}, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODI4ODkyOnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNToyNzoyNVrOIFV7bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxMjoxNjo0MVrOIVmwqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ3MzA3MA==", "bodyText": "Seems like magic constant. Is it used somewhere? Maybe tests are needed?", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r542473070", "createdAt": "2020-12-14T15:27:25Z", "author": {"login": "ssheikin"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -458,6 +462,39 @@ public boolean supportsMissingColumnsOnInsert()\n         return Optional.empty();\n     }\n \n+    @Override\n+    public ColumnHandle getUpdateRowIdColumnHandle(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        return new JdbcColumnHandle(\n+                \"$update_row_id\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTUyNjA1Ng==", "bodyText": "It is used, see the comment above.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r559526056", "createdAt": "2021-01-18T12:16:41Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -458,6 +462,39 @@ public boolean supportsMissingColumnsOnInsert()\n         return Optional.empty();\n     }\n \n+    @Override\n+    public ColumnHandle getUpdateRowIdColumnHandle(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        return new JdbcColumnHandle(\n+                \"$update_row_id\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ3MzA3MA=="}, "originalCommit": null, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODMwNTAzOnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTozMDoyNlrOIFWE1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxMjozNTozNFrOIVnY-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ3NTQ3Ng==", "bodyText": "Can it be not null when beginDelete throws an exception?", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r542475476", "createdAt": "2020-12-14T15:30:26Z", "author": {"login": "ssheikin"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -458,6 +462,39 @@ public boolean supportsMissingColumnsOnInsert()\n         return Optional.empty();\n     }\n \n+    @Override\n+    public ColumnHandle getUpdateRowIdColumnHandle(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        return new JdbcColumnHandle(\n+                \"$update_row_id\",\n+                new JdbcTypeHandle(Types.BIGINT, Optional.of(\"bigint\"), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty()),\n+                BIGINT);\n+    }\n+\n+    @Override\n+    public ConnectorTableHandle beginDelete(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        throw new PrestoException(NOT_SUPPORTED, \"Not supported delete\");\n+    }\n+\n+    @Override\n+    public boolean supportsMetadataDelete(ConnectorSession session, ConnectorTableHandle tableHandle, ConnectorTableLayoutHandle tableLayoutHandle)\n+    {\n+        return true;\n+    }\n+\n+    @Override\n+    public Optional<ConnectorTableHandle> applyDelete(ConnectorSession session, ConnectorTableHandle handle)\n+    {\n+        return Optional.of(handle);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTUzNjM3OA==", "bodyText": "beginDelete is not called if this can be done by metadata delete (applyDelete)", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r559536378", "createdAt": "2021-01-18T12:35:34Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -458,6 +462,39 @@ public boolean supportsMissingColumnsOnInsert()\n         return Optional.empty();\n     }\n \n+    @Override\n+    public ColumnHandle getUpdateRowIdColumnHandle(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        return new JdbcColumnHandle(\n+                \"$update_row_id\",\n+                new JdbcTypeHandle(Types.BIGINT, Optional.of(\"bigint\"), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty()),\n+                BIGINT);\n+    }\n+\n+    @Override\n+    public ConnectorTableHandle beginDelete(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        throw new PrestoException(NOT_SUPPORTED, \"Not supported delete\");\n+    }\n+\n+    @Override\n+    public boolean supportsMetadataDelete(ConnectorSession session, ConnectorTableHandle tableHandle, ConnectorTableLayoutHandle tableLayoutHandle)\n+    {\n+        return true;\n+    }\n+\n+    @Override\n+    public Optional<ConnectorTableHandle> applyDelete(ConnectorSession session, ConnectorTableHandle handle)\n+    {\n+        return Optional.of(handle);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ3NTQ3Ng=="}, "originalCommit": null, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODM0NjY0OnYy", "diffSide": "RIGHT", "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlDistributedQueries.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTozNzo1MVrOIFWdDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDowMzo0NVrOIGMdFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ4MTY3OQ==", "bodyText": "if supportsDelete=true why this test never assertQuerySucceeds(\"DELETE FROM \"?\nCould you please add such scenario? The same is for other connectors.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r542481679", "createdAt": "2020-12-14T15:37:51Z", "author": {"login": "ssheikin"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlDistributedQueries.java", "diffHunk": "@@ -85,5 +82,15 @@ protected TestTable createTableWithDefaultColumns()\n                         \"col_required2 BIGINT NOT NULL)\");\n     }\n \n+    @Test\n+    @Override\n+    public void testDelete()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI5MzkzMA==", "bodyText": "Added a comment below, which should answer your question", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r543293930", "createdAt": "2020-12-15T12:17:19Z", "author": {"login": "kokosing"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlDistributedQueries.java", "diffHunk": "@@ -85,5 +82,15 @@ protected TestTable createTableWithDefaultColumns()\n                         \"col_required2 BIGINT NOT NULL)\");\n     }\n \n+    @Test\n+    @Override\n+    public void testDelete()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ4MTY3OQ=="}, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM2NjQyMg==", "bodyText": "// PostgreSql connector currently does not support row-by-row delete\n\nThanks for comment.\nSo if supportsDelete=true and connector currently does not support row-by-row delete I'd expect that this connector supports some other type of delete. I see you added testDeleteWithSimplePredicate and testDeleteEntireTable. Maybe it worth to rename this method to something like testDeleteRowByRow?", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r543366422", "createdAt": "2020-12-15T14:03:45Z", "author": {"login": "ssheikin"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlDistributedQueries.java", "diffHunk": "@@ -85,5 +82,15 @@ protected TestTable createTableWithDefaultColumns()\n                         \"col_required2 BIGINT NOT NULL)\");\n     }\n \n+    @Test\n+    @Override\n+    public void testDelete()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ4MTY3OQ=="}, "originalCommit": null, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDEzMjI4OnYy", "diffSide": "RIGHT", "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerDistributedQueries.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzo0ODo0N1rOIGLwhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzo0ODo0N1rOIGLwhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1NTAxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertQueryFails(\"DELETE FROM \" + tableName + \" WHERE orderkey % 2 = 0\", \"Not supported delete\");\n          \n          \n            \n                    // SqlServer connector currently does not support row-by-row delete\n          \n          \n            \n                    assertQueryFails(\"DELETE FROM \" + tableName + \" WHERE orderkey % 2 = 0\", \"Not supported delete\");", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r543355014", "createdAt": "2020-12-15T13:48:47Z", "author": {"login": "ssheikin"}, "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerDistributedQueries.java", "diffHunk": "@@ -116,5 +111,15 @@ protected TestTable createTableWithDefaultColumns()\n         return Optional.of(dataMappingTestSetup);\n     }\n \n+    @Test\n+    @Override\n+    public void testDelete()\n+    {\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM orders WITH NO DATA\", 0);\n+        assertQueryFails(\"DELETE FROM \" + tableName + \" WHERE orderkey % 2 = 0\", \"Not supported delete\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDEzNzUzOnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/BaseTestOracleDistributedQueries.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzo0OTo1MlrOIGLzpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzo0OTo1MlrOIGLzpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1NTgxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertQueryFails(\"DELETE FROM \" + tableName + \" WHERE orderkey % 2 = 0\", \"Not supported delete\");\n          \n          \n            \n                    // Oracle connector currently does not support row-by-row delete\n          \n          \n            \n                    assertQueryFails(\"DELETE FROM \" + tableName + \" WHERE orderkey % 2 = 0\", \"Not supported delete\");", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r543355813", "createdAt": "2020-12-15T13:49:52Z", "author": {"login": "ssheikin"}, "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/BaseTestOracleDistributedQueries.java", "diffHunk": "@@ -328,5 +322,15 @@ public void testInsertWithCoercion()\n         return Optional.empty();\n     }\n \n+    @Test\n+    @Override\n+    public void testDelete()\n+    {\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM orders WITH NO DATA\", 0);\n+        assertQueryFails(\"DELETE FROM \" + tableName + \" WHERE orderkey % 2 = 0\", \"Not supported delete\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzk3Mzg4OnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/BaseJdbcClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQyMTowODo1NFrOII-emA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQyMTowODo1NFrOII-emA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI4MzE2MA==", "bodyText": "int executeUpdate -> int updatedCount or something", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r546283160", "createdAt": "2020-12-19T21:08:54Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -977,6 +978,22 @@ public String quoted(RemoteTableName remoteTableName)\n         return emptyMap();\n     }\n \n+    @Override\n+    public OptionalLong delete(ConnectorSession session, ConnectorTableHandle handle)\n+    {\n+        QueryBuilder queryBuilder = new QueryBuilder(this);\n+        JdbcTableHandle tableHandle = (JdbcTableHandle) handle;\n+        try (Connection connection = connectionFactory.openConnection(session);\n+                PreparedStatement preparedStatement = queryBuilder.buildDeleteSql(session, connection, tableHandle.getRemoteTableName(), tableHandle.getConstraint())) {\n+            int executeUpdate = preparedStatement.executeUpdate();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzk3NjA4OnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/QueryBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQyMToxMjo1MFrOII-fpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxMjoyMjowNVrOIVm8RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI4MzQzMA==", "bodyText": "This looks like common code which could be unified. Thoughts?", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r546283430", "createdAt": "2020-12-19T21:12:50Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/QueryBuilder.java", "diffHunk": "@@ -121,6 +121,36 @@ public PreparedStatement buildSql(\n         log.debug(\"Preparing query: %s\", query);\n         PreparedStatement statement = client.getPreparedStatement(connection, query);\n \n+        applyParameters(session, connection, accumulator, statement);\n+\n+        return statement;\n+    }\n+\n+    public PreparedStatement buildDeleteSql(\n+            ConnectorSession session,\n+            Connection connection,\n+            RemoteTableName remoteTableName,\n+            TupleDomain<ColumnHandle> tupleDomain)\n+            throws SQLException\n+    {\n+        String sql = \"DELETE FROM \" + getRelation(remoteTableName);\n+\n+        List<TypeAndValue> accumulator = new ArrayList<>();\n+\n+        List<String> clauses = toConjuncts(session, connection, tupleDomain, accumulator);\n+        if (!clauses.isEmpty()) {\n+            sql += \" WHERE \" + Joiner.on(\" AND \").join(clauses);\n+        }\n+\n+        log.debug(\"Preparing query: %s\", sql);\n+        PreparedStatement statement = client.getPreparedStatement(connection, sql);\n+        applyParameters(session, connection, accumulator, statement);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTUyOTAyOA==", "bodyText": "I thought that I have already unified this by extracting applyParameters method. Do you have any idea what else could be done here?", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r559529028", "createdAt": "2021-01-18T12:22:05Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/QueryBuilder.java", "diffHunk": "@@ -121,6 +121,36 @@ public PreparedStatement buildSql(\n         log.debug(\"Preparing query: %s\", query);\n         PreparedStatement statement = client.getPreparedStatement(connection, query);\n \n+        applyParameters(session, connection, accumulator, statement);\n+\n+        return statement;\n+    }\n+\n+    public PreparedStatement buildDeleteSql(\n+            ConnectorSession session,\n+            Connection connection,\n+            RemoteTableName remoteTableName,\n+            TupleDomain<ColumnHandle> tupleDomain)\n+            throws SQLException\n+    {\n+        String sql = \"DELETE FROM \" + getRelation(remoteTableName);\n+\n+        List<TypeAndValue> accumulator = new ArrayList<>();\n+\n+        List<String> clauses = toConjuncts(session, connection, tupleDomain, accumulator);\n+        if (!clauses.isEmpty()) {\n+            sql += \" WHERE \" + Joiner.on(\" AND \").join(clauses);\n+        }\n+\n+        log.debug(\"Preparing query: %s\", sql);\n+        PreparedStatement statement = client.getPreparedStatement(connection, sql);\n+        applyParameters(session, connection, accumulator, statement);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI4MzQzMA=="}, "originalCommit": null, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzk3NzEzOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveDistributedQueries.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQyMToxMzo1MVrOII-gFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxMjoyMzowOVrOIVm-oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI4MzU0MQ==", "bodyText": "It does (for ORC ACID tables)", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r546283541", "createdAt": "2020-12-19T21:13:51Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveDistributedQueries.java", "diffHunk": "@@ -58,6 +59,22 @@ public void testDelete()\n         // Hive connector currently does not support row-by-row delete\n     }\n \n+    @Override\n+    public void testDeleteEntireTable()\n+    {\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM orders\", 15000);\n+        assertUpdate(\"DELETE FROM \" + tableName);\n+        assertQuery(\"SELECT count(*) FROM \" + tableName, \"SELECT 0\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @Override\n+    public void testDeleteWithSimplePredicate()\n+    {\n+        // Hive connector currently does not support row-by-row delete", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTUyOTYzMg==", "bodyText": "This is copied from testDelete() from above.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r559529632", "createdAt": "2021-01-18T12:23:09Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveDistributedQueries.java", "diffHunk": "@@ -58,6 +59,22 @@ public void testDelete()\n         // Hive connector currently does not support row-by-row delete\n     }\n \n+    @Override\n+    public void testDeleteEntireTable()\n+    {\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM orders\", 15000);\n+        assertUpdate(\"DELETE FROM \" + tableName);\n+        assertQuery(\"SELECT count(*) FROM \" + tableName, \"SELECT 0\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @Override\n+    public void testDeleteWithSimplePredicate()\n+    {\n+        // Hive connector currently does not support row-by-row delete", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI4MzU0MQ=="}, "originalCommit": null, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzk3NzM0OnYy", "diffSide": "RIGHT", "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergDistributed.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQyMToxNDowNVrOII-gLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQyMToxNDowNVrOII-gLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI4MzU2NA==", "bodyText": "revert", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r546283564", "createdAt": "2020-12-19T21:14:05Z", "author": {"login": "findepi"}, "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergDistributed.java", "diffHunk": "@@ -69,6 +89,7 @@ public void testInsertWithCoercion()\n         // Iceberg does not support parameterized varchar\n     }\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzk3OTIyOnYy", "diffSide": "RIGHT", "path": "presto-mysql/src/main/java/io/prestosql/plugin/mysql/MySqlClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQyMToxNjoxN1rOII-g-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQyMToxNjoxN1rOII-g-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI4Mzc3MQ==", "bodyText": "The only difference is the commit is missing. Why?", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r546283771", "createdAt": "2020-12-19T21:16:17Z", "author": {"login": "findepi"}, "path": "presto-mysql/src/main/java/io/prestosql/plugin/mysql/MySqlClient.java", "diffHunk": "@@ -457,6 +460,20 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n         return true;\n     }\n \n+    @Override\n+    public OptionalLong delete(ConnectorSession session, ConnectorTableHandle handle)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzk4MDMyOnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQyMToxNzozMVrOII-heQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxMjo1NToxMlrOIVoEBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI4Mzg5Nw==", "bodyText": "The only difference is the commit is missing. Why?", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r546283897", "createdAt": "2020-12-19T21:17:31Z", "author": {"login": "findepi"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "diffHunk": "@@ -237,6 +240,20 @@ public void createSchema(ConnectorSession session, String schemaName)\n         throw new PrestoException(NOT_SUPPORTED, \"This connector does not support creating schemas\");\n     }\n \n+    @Override\n+    public OptionalLong delete(ConnectorSession session, ConnectorTableHandle handle)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTU0NzM5Nw==", "bodyText": "It was falling that one cannot call commit when autocommit=true. Now I set autocommit explicitly so I can remove explicit commit.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r559547397", "createdAt": "2021-01-18T12:55:12Z", "author": {"login": "kokosing"}, "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "diffHunk": "@@ -237,6 +240,20 @@ public void createSchema(ConnectorSession session, String schemaName)\n         throw new PrestoException(NOT_SUPPORTED, \"This connector does not support creating schemas\");\n     }\n \n+    @Override\n+    public OptionalLong delete(ConnectorSession session, ConnectorTableHandle handle)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI4Mzg5Nw=="}, "originalCommit": null, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzk4MTA2OnYy", "diffSide": "RIGHT", "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestMySqlDistributedQueries.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQyMToxODoyN1rOII-hzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxMjo0NDozMlrOIVnsxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI4Mzk4MQ==", "bodyText": "Why?\n\nadd a test with an equality condition on a bigint column -- should work\nadd a test with a range condition on a bigint column -- should work\nadd a test with an equality condition on a varchar column -- should not work, since filter is not fully removed on Presto side", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r546283981", "createdAt": "2020-12-19T21:18:27Z", "author": {"login": "findepi"}, "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestMySqlDistributedQueries.java", "diffHunk": "@@ -156,5 +152,16 @@ protected boolean isColumnNameRejected(Exception exception, String columnName, b\n         return Optional.of(dataMappingTestSetup);\n     }\n \n+    @Test\n+    @Override\n+    public void testDelete()\n+    {\n+        // Mysql connector currently does not support row-by-row delete", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTU0MTQ0Ng==", "bodyText": "I added io.trino.testing.AbstractTestDistributedQueries#testDeleteWithSimplePredicate that is executed for mysql and covers very simple predicate pushdown.\nNotice that I added here predicate with random. I don't want to hardcode what is supported and what extend. Delete is supported if predicate pushdown is supported. Predicate pushdown support is changing over time, so such test would need to be updated frequently.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r559541446", "createdAt": "2021-01-18T12:44:32Z", "author": {"login": "kokosing"}, "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestMySqlDistributedQueries.java", "diffHunk": "@@ -156,5 +152,16 @@ protected boolean isColumnNameRejected(Exception exception, String columnName, b\n         return Optional.of(dataMappingTestSetup);\n     }\n \n+    @Test\n+    @Override\n+    public void testDelete()\n+    {\n+        // Mysql connector currently does not support row-by-row delete", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI4Mzk4MQ=="}, "originalCommit": null, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzk4MTY5OnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/BaseTestOracleDistributedQueries.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQyMToxOTowMVrOII-iEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxMjo1Mjo1NFrOIVn_Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI4NDA1MA==", "bodyText": "Why is this overridden?", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r546284050", "createdAt": "2020-12-19T21:19:01Z", "author": {"login": "findepi"}, "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/BaseTestOracleDistributedQueries.java", "diffHunk": "@@ -328,5 +322,15 @@ public void testInsertWithCoercion()\n         return Optional.empty();\n     }\n \n+    @Test\n+    @Override\n+    public void testDelete()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTU0NjE0Nw==", "bodyText": "It will have to be overriden for all JDBC connectors, test testDelete requires delete row by row which JDBC connector won't have for a while.\nMaybe I could add supportsRowByRowDelete()? (I don't like it)", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r559546147", "createdAt": "2021-01-18T12:52:54Z", "author": {"login": "kokosing"}, "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/BaseTestOracleDistributedQueries.java", "diffHunk": "@@ -328,5 +322,15 @@ public void testInsertWithCoercion()\n         return Optional.empty();\n     }\n \n+    @Test\n+    @Override\n+    public void testDelete()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI4NDA1MA=="}, "originalCommit": null, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzk4MjE2OnYy", "diffSide": "RIGHT", "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleDistributedQueries.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQyMToxOToyOVrOII-iRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQyMToxOToyOVrOII-iRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI4NDEwMw==", "bodyText": "Why this is overridden? Also, this is overridden twice for oracle", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r546284103", "createdAt": "2020-12-19T21:19:29Z", "author": {"login": "findepi"}, "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleDistributedQueries.java", "diffHunk": "@@ -58,6 +58,17 @@ public void testCommentColumn()\n         assertThat((String) computeActual(\"SHOW CREATE TABLE \" + tableName).getOnlyValue()).doesNotContain(\"COMMENT 'new comment'\");\n     }\n \n+    @Test\n+    @Override\n+    public void testDelete()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzk4MjM4OnYy", "diffSide": "RIGHT", "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQyMToxOTo0NlrOII-iXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQyMToxOTo0NlrOII-iXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI4NDEyNw==", "bodyText": "unused?", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r546284127", "createdAt": "2020-12-19T21:19:46Z", "author": {"login": "findepi"}, "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixMetadata.java", "diffHunk": "@@ -64,7 +65,7 @@\n     private final PhoenixClient phoenixClient;\n \n     @Inject\n-    public PhoenixMetadata(PhoenixClient phoenixClient, JdbcMetadataConfig metadataConfig)\n+    public PhoenixMetadata(PhoenixClient phoenixClient, ConnectionFactory connectionFactory, JdbcMetadataConfig metadataConfig)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzk4NDEzOnYy", "diffSide": "RIGHT", "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlDistributedQueries.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQyMToyMTozNVrOII-jJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxMzoxMDo0NVrOIVongw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI4NDMyNg==", "bodyText": "I am not getting this. If row-by-row is not supported for any of the connectors, then i do not understand why io.prestosql.plugin.jdbc.QueryBuilder#buildDeleteSql does tuple domain -> WHERE conversion", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r546284326", "createdAt": "2020-12-19T21:21:35Z", "author": {"login": "findepi"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlDistributedQueries.java", "diffHunk": "@@ -85,5 +81,16 @@ protected TestTable createTableWithDefaultColumns()\n                         \"col_required2 BIGINT NOT NULL)\");\n     }\n \n+    @Test\n+    @Override\n+    public void testDelete()\n+    {\n+        // PostgreSql connector currently does not support row-by-row delete", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTU1NjQ4Mw==", "bodyText": "tuple domain is not used to delete row-by-row, by rather to remove by predicate. By row-by-row I mean to delete query execution in Trino where we collect ids of rows to be deleted and then we remove them (beginDelete and finishDelete methods).", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r559556483", "createdAt": "2021-01-18T13:10:45Z", "author": {"login": "kokosing"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlDistributedQueries.java", "diffHunk": "@@ -85,5 +81,16 @@ protected TestTable createTableWithDefaultColumns()\n                         \"col_required2 BIGINT NOT NULL)\");\n     }\n \n+    @Test\n+    @Override\n+    public void testDelete()\n+    {\n+        // PostgreSql connector currently does not support row-by-row delete", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI4NDMyNg=="}, "originalCommit": null, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzk4NDI0OnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQyMToyMTo0OFrOII-jNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQyMToyMTo0OFrOII-jNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI4NDM0Mg==", "bodyText": "skip exception", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r546284342", "createdAt": "2020-12-19T21:21:48Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -634,17 +634,52 @@ public void testInsertArray()\n     }\n \n     @Test\n-    public void testDelete()\n+    public void testUnsupportedDelete()\n     {\n-        // delete half the table, then delete the rest\n+        if (supportsDelete()) {\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzk4NDk5OnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQyMToyMjo0OVrOII-jjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQyMToyMjo0OVrOII-jjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI4NDQyOQ==", "bodyText": "testDeleteWithSimplePredicate -> testDeleteWithBigintEquality\n+ add a test for varchar equality. Ideally one that would show incorrect query results when the condition is applied case insensitively.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r546284429", "createdAt": "2020-12-19T21:22:49Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -634,17 +634,52 @@ public void testInsertArray()\n     }\n \n     @Test\n-    public void testDelete()\n+    public void testUnsupportedDelete()\n     {\n-        // delete half the table, then delete the rest\n+        if (supportsDelete()) {\n+            return;\n+        }\n+\n         String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM orders WITH NO DATA\", 0);\n+        assertQueryFails(\"DELETE FROM \" + tableName, \"This connector does not support updates or deletes\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n \n+    @Test\n+    public void testDeleteEntireTable()\n+    {\n+        if (!supportsDelete()) {\n+            return;\n+        }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM orders\", 15000);\n+        assertUpdate(\"DELETE FROM \" + tableName, 15000);\n+        assertQuery(\"SELECT count(*) FROM \" + tableName, \"SELECT 0\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @Test\n+    public void testDeleteWithSimplePredicate()\n+    {\n         if (!supportsDelete()) {\n-            assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM orders WITH NO DATA\", 0);\n-            assertQueryFails(\"DELETE FROM \" + tableName, \"This connector does not support updates or deletes\");\n-            assertUpdate(\"DROP TABLE \" + tableName);\n             return;\n         }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM orders\", 15000);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE orderkey = 1\", 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzk4NTA0OnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQyMToyMzowMFrOII-jlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQyMToyMzowMFrOII-jlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI4NDQzNg==", "bodyText": "skip exception", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r546284436", "createdAt": "2020-12-19T21:23:00Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -634,17 +634,52 @@ public void testInsertArray()\n     }\n \n     @Test\n-    public void testDelete()\n+    public void testUnsupportedDelete()\n     {\n-        // delete half the table, then delete the rest\n+        if (supportsDelete()) {\n+            return;\n+        }\n+\n         String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM orders WITH NO DATA\", 0);\n+        assertQueryFails(\"DELETE FROM \" + tableName, \"This connector does not support updates or deletes\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n \n+    @Test\n+    public void testDeleteEntireTable()\n+    {\n+        if (!supportsDelete()) {\n+            return;\n+        }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM orders\", 15000);\n+        assertUpdate(\"DELETE FROM \" + tableName, 15000);\n+        assertQuery(\"SELECT count(*) FROM \" + tableName, \"SELECT 0\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @Test\n+    public void testDeleteWithSimplePredicate()\n+    {\n         if (!supportsDelete()) {\n-            assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM orders WITH NO DATA\", 0);\n-            assertQueryFails(\"DELETE FROM \" + tableName, \"This connector does not support updates or deletes\");\n-            assertUpdate(\"DROP TABLE \" + tableName);\n             return;\n         }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM orders\", 15000);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE orderkey = 1\", 1);\n+        assertQuery(\"SELECT count(*) FROM \" + tableName, \"SELECT 15000 - 1\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @Test\n+    public void testDelete()\n+    {\n+        if (!supportsDelete()) {\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzk4NTM5OnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQyMToyMzoxNFrOII-jug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQyMToyMzoxNFrOII-jug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI4NDQ3NA==", "bodyText": "skip exception", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r546284474", "createdAt": "2020-12-19T21:23:14Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -634,17 +634,52 @@ public void testInsertArray()\n     }\n \n     @Test\n-    public void testDelete()\n+    public void testUnsupportedDelete()\n     {\n-        // delete half the table, then delete the rest\n+        if (supportsDelete()) {\n+            return;\n+        }\n+\n         String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM orders WITH NO DATA\", 0);\n+        assertQueryFails(\"DELETE FROM \" + tableName, \"This connector does not support updates or deletes\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n \n+    @Test\n+    public void testDeleteEntireTable()\n+    {\n+        if (!supportsDelete()) {\n+            return;\n+        }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM orders\", 15000);\n+        assertUpdate(\"DELETE FROM \" + tableName, 15000);\n+        assertQuery(\"SELECT count(*) FROM \" + tableName, \"SELECT 0\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @Test\n+    public void testDeleteWithSimplePredicate()\n+    {\n         if (!supportsDelete()) {\n-            assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM orders WITH NO DATA\", 0);\n-            assertQueryFails(\"DELETE FROM \" + tableName, \"This connector does not support updates or deletes\");\n-            assertUpdate(\"DROP TABLE \" + tableName);\n             return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzk4NTQ2OnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQyMToyMzoyMVrOII-jwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQyMToyMzoyMVrOII-jwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI4NDQ4Mg==", "bodyText": "skip exception", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r546284482", "createdAt": "2020-12-19T21:23:21Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -634,17 +634,52 @@ public void testInsertArray()\n     }\n \n     @Test\n-    public void testDelete()\n+    public void testUnsupportedDelete()\n     {\n-        // delete half the table, then delete the rest\n+        if (supportsDelete()) {\n+            return;\n+        }\n+\n         String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM orders WITH NO DATA\", 0);\n+        assertQueryFails(\"DELETE FROM \" + tableName, \"This connector does not support updates or deletes\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n \n+    @Test\n+    public void testDeleteEntireTable()\n+    {\n+        if (!supportsDelete()) {\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzk4Njg0OnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/BaseJdbcClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQyMToyNDo1NVrOII-kXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQyMToyNDo1NVrOII-kXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI4NDYzOQ==", "bodyText": "make sure the table handle does not have any unexpected attributes, like grouping sets or synthetic columns.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r546284639", "createdAt": "2020-12-19T21:24:55Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -977,6 +978,22 @@ public String quoted(RemoteTableName remoteTableName)\n         return emptyMap();\n     }\n \n+    @Override\n+    public OptionalLong delete(ConnectorSession session, ConnectorTableHandle handle)\n+    {\n+        QueryBuilder queryBuilder = new QueryBuilder(this);\n+        JdbcTableHandle tableHandle = (JdbcTableHandle) handle;\n+        try (Connection connection = connectionFactory.openConnection(session);\n+                PreparedStatement preparedStatement = queryBuilder.buildDeleteSql(session, connection, tableHandle.getRemoteTableName(), tableHandle.getConstraint())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMjMzMDIxOnYy", "diffSide": "RIGHT", "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/BaseJdbcClient.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMzowOTo0NlrOIW9ggQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxNDo0MTo1MVrOJYQtLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk0NzMyOQ==", "bodyText": "isn't it default for JDBC?", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r560947329", "createdAt": "2021-01-20T13:09:46Z", "author": {"login": "findepi"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -979,6 +980,22 @@ public String quoted(RemoteTableName remoteTableName)\n         return emptyMap();\n     }\n \n+    @Override\n+    public OptionalLong delete(ConnectorSession session, ConnectorTableHandle handle)\n+    {\n+        QueryBuilder queryBuilder = new QueryBuilder(this);\n+        JdbcTableHandle tableHandle = (JdbcTableHandle) handle;\n+        checkArgument(tableHandle.getGroupingSets().isEmpty() && tableHandle.getLimit().isEmpty(), \"Unable to delete from synthetic table: %s\", tableHandle);\n+        try (Connection connection = connectionFactory.openConnection(session);\n+                PreparedStatement preparedStatement = queryBuilder.buildDeleteSql(session, connection, tableHandle.getRemoteTableName(), tableHandle.getConstraint())) {\n+            connection.setAutoCommit(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDUzMDM2OA==", "bodyText": "It looks it is not.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r564530368", "createdAt": "2021-01-26T13:59:59Z", "author": {"login": "kokosing"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -979,6 +980,22 @@ public String quoted(RemoteTableName remoteTableName)\n         return emptyMap();\n     }\n \n+    @Override\n+    public OptionalLong delete(ConnectorSession session, ConnectorTableHandle handle)\n+    {\n+        QueryBuilder queryBuilder = new QueryBuilder(this);\n+        JdbcTableHandle tableHandle = (JdbcTableHandle) handle;\n+        checkArgument(tableHandle.getGroupingSets().isEmpty() && tableHandle.getLimit().isEmpty(), \"Unable to delete from synthetic table: %s\", tableHandle);\n+        try (Connection connection = connectionFactory.openConnection(session);\n+                PreparedStatement preparedStatement = queryBuilder.buildDeleteSql(session, connection, tableHandle.getRemoteTableName(), tableHandle.getConstraint())) {\n+            connection.setAutoCommit(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk0NzMyOQ=="}, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDYxMjI1Nw==", "bodyText": "I think we have to separate openConnection to two methods: openReadOnlyConnection(readonly=true, autocommit=false) and openConnectionForWrite(readonly=false, autocommit=true). But not in this PR.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r564612257", "createdAt": "2021-01-26T15:42:30Z", "author": {"login": "ssheikin"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -979,6 +980,22 @@ public String quoted(RemoteTableName remoteTableName)\n         return emptyMap();\n     }\n \n+    @Override\n+    public OptionalLong delete(ConnectorSession session, ConnectorTableHandle handle)\n+    {\n+        QueryBuilder queryBuilder = new QueryBuilder(this);\n+        JdbcTableHandle tableHandle = (JdbcTableHandle) handle;\n+        checkArgument(tableHandle.getGroupingSets().isEmpty() && tableHandle.getLimit().isEmpty(), \"Unable to delete from synthetic table: %s\", tableHandle);\n+        try (Connection connection = connectionFactory.openConnection(session);\n+                PreparedStatement preparedStatement = queryBuilder.buildDeleteSql(session, connection, tableHandle.getRemoteTableName(), tableHandle.getConstraint())) {\n+            connection.setAutoCommit(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk0NzMyOQ=="}, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTQxOTMwOQ==", "bodyText": "isn't it default for JDBC?\n\n\nIt looks it is not.\n\nit actually is, but Phoenix and ClickHouse have it wrong. Addressed in #7875", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r629419309", "createdAt": "2021-05-10T14:41:51Z", "author": {"login": "findepi"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -979,6 +980,22 @@ public String quoted(RemoteTableName remoteTableName)\n         return emptyMap();\n     }\n \n+    @Override\n+    public OptionalLong delete(ConnectorSession session, ConnectorTableHandle handle)\n+    {\n+        QueryBuilder queryBuilder = new QueryBuilder(this);\n+        JdbcTableHandle tableHandle = (JdbcTableHandle) handle;\n+        checkArgument(tableHandle.getGroupingSets().isEmpty() && tableHandle.getLimit().isEmpty(), \"Unable to delete from synthetic table: %s\", tableHandle);\n+        try (Connection connection = connectionFactory.openConnection(session);\n+                PreparedStatement preparedStatement = queryBuilder.buildDeleteSql(session, connection, tableHandle.getRemoteTableName(), tableHandle.getConstraint())) {\n+            connection.setAutoCommit(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk0NzMyOQ=="}, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMjMzNTU2OnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/test/java/io/trino/plugin/hive/TestHiveDistributedQueries.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMzoxMToxM1rOIW9j4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMzoxMToxM1rOIW9j4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk0ODE5NA==", "bodyText": "DeleteEntireTable -> DeleteAllRows", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r560948194", "createdAt": "2021-01-20T13:11:13Z", "author": {"login": "findepi"}, "path": "plugin/trino-hive/src/test/java/io/trino/plugin/hive/TestHiveDistributedQueries.java", "diffHunk": "@@ -58,6 +59,28 @@ public void testDelete()\n         // Hive connector supports row-by-row delete only for ACID tables\n     }\n \n+    @Override\n+    public void testDeleteEntireTable()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMjMzODM2OnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/test/java/io/trino/plugin/hive/TestHiveDistributedQueries.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMzoxMjowM1rOIW9lvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxNDoyMzoyNVrOIXAkfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk0ODY3MQ==", "bodyText": "Can this test set up an ACID table?\ni guess file metastore is not supported for ACID, right? cc @djsstarburst", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r560948671", "createdAt": "2021-01-20T13:12:03Z", "author": {"login": "findepi"}, "path": "plugin/trino-hive/src/test/java/io/trino/plugin/hive/TestHiveDistributedQueries.java", "diffHunk": "@@ -58,6 +59,28 @@ public void testDelete()\n         // Hive connector supports row-by-row delete only for ACID tables\n     }\n \n+    @Override\n+    public void testDeleteEntireTable()\n+    {\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM orders\", 15000);\n+        assertUpdate(\"DELETE FROM \" + tableName);\n+        assertQuery(\"SELECT count(*) FROM \" + tableName, \"SELECT 0\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @Override\n+    public void testDeleteWithBigintEquality()\n+    {\n+        // Hive connector supports row-by-row delete only for ACID tables or when entire partition is deleted", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk5NzUwMQ==", "bodyText": "Sadly, that is correct @findepi", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r560997501", "createdAt": "2021-01-20T14:23:25Z", "author": {"login": "djsstarburst"}, "path": "plugin/trino-hive/src/test/java/io/trino/plugin/hive/TestHiveDistributedQueries.java", "diffHunk": "@@ -58,6 +59,28 @@ public void testDelete()\n         // Hive connector supports row-by-row delete only for ACID tables\n     }\n \n+    @Override\n+    public void testDeleteEntireTable()\n+    {\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM orders\", 15000);\n+        assertUpdate(\"DELETE FROM \" + tableName);\n+        assertQuery(\"SELECT count(*) FROM \" + tableName, \"SELECT 0\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @Override\n+    public void testDeleteWithBigintEquality()\n+    {\n+        // Hive connector supports row-by-row delete only for ACID tables or when entire partition is deleted", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk0ODY3MQ=="}, "originalCommit": null, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMjM0MTQ3OnYy", "diffSide": "RIGHT", "path": "plugin/trino-postgresql/src/test/java/io/trino/plugin/postgresql/TestPostgreSqlDistributedQueries.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMzoxMjo1OFrOIW9nvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMzoxMjo1OFrOIW9nvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk0OTE4MQ==", "bodyText": "PostgreSql -> PostgreSQL\nbut, why is that? didn't you add support for it?", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r560949181", "createdAt": "2021-01-20T13:12:58Z", "author": {"login": "findepi"}, "path": "plugin/trino-postgresql/src/test/java/io/trino/plugin/postgresql/TestPostgreSqlDistributedQueries.java", "diffHunk": "@@ -85,5 +81,16 @@ protected TestTable createTableWithDefaultColumns()\n                         \"col_required2 BIGINT NOT NULL)\");\n     }\n \n+    @Test\n+    @Override\n+    public void testDelete()\n+    {\n+        // PostgreSql connector currently does not support row-by-row delete", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMjM0MjE0OnYy", "diffSide": "RIGHT", "path": "plugin/trino-sqlserver/src/test/java/io/trino/plugin/sqlserver/TestSqlServerDistributedQueries.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMzoxMzowN1rOIW9oGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMzoxMzowN1rOIW9oGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk0OTI3Mw==", "bodyText": "SqlServer -> SQL Server", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r560949273", "createdAt": "2021-01-20T13:13:07Z", "author": {"login": "findepi"}, "path": "plugin/trino-sqlserver/src/test/java/io/trino/plugin/sqlserver/TestSqlServerDistributedQueries.java", "diffHunk": "@@ -116,5 +111,16 @@ protected TestTable createTableWithDefaultColumns()\n         return Optional.of(dataMappingTestSetup);\n     }\n \n+    @Test\n+    @Override\n+    public void testDelete()\n+    {\n+        // SqlServer connector currently does not support row-by-row delete", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMjM0ODE5OnYy", "diffSide": "RIGHT", "path": "plugin/trino-mysql/src/test/java/io/trino/plugin/mysql/TestMySqlDistributedQueries.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMzoxNDo0OVrOIW9r7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMzoxNDo0OVrOIW9r7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk1MDI1NA==", "bodyText": "Mysql -> MySQL", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r560950254", "createdAt": "2021-01-20T13:14:49Z", "author": {"login": "findepi"}, "path": "plugin/trino-mysql/src/test/java/io/trino/plugin/mysql/TestMySqlDistributedQueries.java", "diffHunk": "@@ -150,5 +146,16 @@ protected boolean isColumnNameRejected(Exception exception, String columnName, b\n         return Optional.of(dataMappingTestSetup);\n     }\n \n+    @Test\n+    @Override\n+    public void testDelete()\n+    {\n+        // Mysql connector currently does not support row-by-row delete", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMjM0OTk2OnYy", "diffSide": "RIGHT", "path": "plugin/trino-mysql/src/test/java/io/trino/plugin/mysql/TestMySqlDistributedQueries.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMzoxNToxNFrOIW9s9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMzoxNToxNFrOIW9s9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk1MDUxOA==", "bodyText": "i'd expect varchar-based delete to be special, since MySQL connector doesn't enforce varchar predicates (case sensitiviness). Why is it not special?", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r560950518", "createdAt": "2021-01-20T13:15:14Z", "author": {"login": "findepi"}, "path": "plugin/trino-mysql/src/test/java/io/trino/plugin/mysql/TestMySqlDistributedQueries.java", "diffHunk": "@@ -150,5 +146,16 @@ protected boolean isColumnNameRejected(Exception exception, String columnName, b\n         return Optional.of(dataMappingTestSetup);\n     }\n \n+    @Test\n+    @Override\n+    public void testDelete()\n+    {\n+        // Mysql connector currently does not support row-by-row delete\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM orders WITH NO DATA\", 0);\n+        assertQueryFails(\"DELETE FROM \" + tableName + \" WHERE random(orderkey) =  0\", \"Not supported delete\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMjU2MzQwOnYy", "diffSide": "RIGHT", "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/JdbcMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxNDowNTozM1rOIW_vLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMlQxNTowMjowNlrOI1wX5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk4Mzg1Mg==", "bodyText": "This method is not needed, since base class method ConnectorMetadata.beginDelete() raises the same exception.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r560983852", "createdAt": "2021-01-20T14:05:33Z", "author": {"login": "djsstarburst"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -457,6 +461,40 @@ public boolean supportsMissingColumnsOnInsert()\n         return Optional.empty();\n     }\n \n+    @Override\n+    public ColumnHandle getUpdateRowIdColumnHandle(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        // This column is not actually used, but Presto engine requires this during analysis\n+        return new JdbcColumnHandle(\n+                \"$update_row_id\",\n+                new JdbcTypeHandle(Types.BIGINT, Optional.of(\"bigint\"), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty()),\n+                BIGINT);\n+    }\n+\n+    @Override\n+    public ConnectorTableHandle beginDelete(ConnectorSession session, ConnectorTableHandle tableHandle)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MzIzNzk4OA==", "bodyText": "I use it to raise different error message.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r593237988", "createdAt": "2021-03-12T15:02:06Z", "author": {"login": "kokosing"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -457,6 +461,40 @@ public boolean supportsMissingColumnsOnInsert()\n         return Optional.empty();\n     }\n \n+    @Override\n+    public ColumnHandle getUpdateRowIdColumnHandle(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        // This column is not actually used, but Presto engine requires this during analysis\n+        return new JdbcColumnHandle(\n+                \"$update_row_id\",\n+                new JdbcTypeHandle(Types.BIGINT, Optional.of(\"bigint\"), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty()),\n+                BIGINT);\n+    }\n+\n+    @Override\n+    public ConnectorTableHandle beginDelete(ConnectorSession session, ConnectorTableHandle tableHandle)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk4Mzg1Mg=="}, "originalCommit": null, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1NTc4ODI0OnYy", "diffSide": "RIGHT", "path": "plugin/trino-sqlserver/src/main/java/io/trino/plugin/sqlserver/SqlServerClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQxNDoxMzozM1rOIaYyww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQxNDoxMzozM1rOIaYyww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDU0MDA5OQ==", "bodyText": "is this comment still actual? If yes, it's hard to find where it belongs.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r564540099", "createdAt": "2021-01-26T14:13:33Z", "author": {"login": "ssheikin"}, "path": "plugin/trino-sqlserver/src/main/java/io/trino/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -248,7 +252,11 @@ protected void copyTableSchema(Connection connection, String catalogName, String\n \n             case Types.VARCHAR:\n             case Types.NVARCHAR:\n-                return Optional.of(defaultVarcharColumnMapping(typeHandle.getRequiredColumnSize()));\n+                int varcharLength = typeHandle.getRequiredColumnSize();\n+                VarcharType varcharType = (varcharLength <= VarcharType.MAX_LENGTH) ? createVarcharType(varcharLength) : createUnboundedVarcharType();\n+                // Remote database can be case insensitive.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1NTc5NDc0OnYy", "diffSide": "RIGHT", "path": "plugin/trino-sqlserver/src/main/java/io/trino/plugin/sqlserver/SqlServerClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQxNDoxNDo1MVrOIaY2hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQxNDoxNDo1MVrOIaY2hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDU0MTA2MQ==", "bodyText": "static import", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r564541061", "createdAt": "2021-01-26T14:14:51Z", "author": {"login": "ssheikin"}, "path": "plugin/trino-sqlserver/src/main/java/io/trino/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -248,7 +252,11 @@ protected void copyTableSchema(Connection connection, String catalogName, String\n \n             case Types.VARCHAR:\n             case Types.NVARCHAR:\n-                return Optional.of(defaultVarcharColumnMapping(typeHandle.getRequiredColumnSize()));\n+                int varcharLength = typeHandle.getRequiredColumnSize();\n+                VarcharType varcharType = (varcharLength <= VarcharType.MAX_LENGTH) ? createVarcharType(varcharLength) : createUnboundedVarcharType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1NTc5NTYxOnYy", "diffSide": "RIGHT", "path": "plugin/trino-sqlserver/src/main/java/io/trino/plugin/sqlserver/SqlServerClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQxNDoxNTowMlrOIaY3DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQxNDoxNTowMlrOIaY3DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDU0MTE5Nw==", "bodyText": "consider static import", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r564541197", "createdAt": "2021-01-26T14:15:02Z", "author": {"login": "ssheikin"}, "path": "plugin/trino-sqlserver/src/main/java/io/trino/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -248,7 +252,11 @@ protected void copyTableSchema(Connection connection, String catalogName, String\n \n             case Types.VARCHAR:\n             case Types.NVARCHAR:\n-                return Optional.of(defaultVarcharColumnMapping(typeHandle.getRequiredColumnSize()));\n+                int varcharLength = typeHandle.getRequiredColumnSize();\n+                VarcharType varcharType = (varcharLength <= VarcharType.MAX_LENGTH) ? createVarcharType(varcharLength) : createUnboundedVarcharType();\n+                // Remote database can be case insensitive.\n+                PredicatePushdownController predicatePushdownController = PUSHDOWN_AND_KEEP;\n+                return Optional.of(ColumnMapping.sliceMapping(varcharType, varcharReadFunction(varcharType), varcharWriteFunction(), predicatePushdownController));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1NTg0NTg5OnYy", "diffSide": "RIGHT", "path": "plugin/trino-iceberg/src/test/java/io/trino/plugin/iceberg/TestIcebergDistributed.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQxNDoyNDo1OVrOIaZV5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQxNDoyNDo1OVrOIaZV5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDU0OTA5Mg==", "bodyText": "Is this branch dead?", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r564549092", "createdAt": "2021-01-26T14:24:59Z", "author": {"login": "ssheikin"}, "path": "plugin/trino-iceberg/src/test/java/io/trino/plugin/iceberg/TestIcebergDistributed.java", "diffHunk": "@@ -57,6 +58,31 @@ public void testDelete()\n         // TODO (https://github.com/trinodb/trino/pull/4639#issuecomment-700737583)\n     }\n \n+    @Override\n+    public void testDeleteAllTable()\n+    {\n+        if (!supportsDelete()) {\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1NzExNzIyOnYy", "diffSide": "RIGHT", "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/CachingJdbcClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQxODo1MjozMVrOIaltuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNlQxOTo0MTozMVrOIxo-TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDc1MTgwMw==", "bodyText": "why is this invalidation needed?", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r564751803", "createdAt": "2021-01-26T18:52:31Z", "author": {"login": "ssheikin"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/CachingJdbcClient.java", "diffHunk": "@@ -388,6 +390,14 @@ public String quoted(RemoteTableName remoteTableName)\n         return delegate.getTableScanRedirection(session, tableHandle);\n     }\n \n+    @Override\n+    public OptionalLong delete(ConnectorSession session, ConnectorTableHandle handle)\n+    {\n+        OptionalLong updateCount = delegate.delete(session, handle);\n+        invalidateTableCaches(((JdbcTableHandle) handle).getSchemaTableName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTA0MTcxMg==", "bodyText": "I guess we might need to drop only the metadata/statistics if it exists. Other cache related to table meta need not be invalidated.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r565041712", "createdAt": "2021-01-27T05:41:05Z", "author": {"login": "Praveen2112"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/CachingJdbcClient.java", "diffHunk": "@@ -388,6 +390,14 @@ public String quoted(RemoteTableName remoteTableName)\n         return delegate.getTableScanRedirection(session, tableHandle);\n     }\n \n+    @Override\n+    public OptionalLong delete(ConnectorSession session, ConnectorTableHandle handle)\n+    {\n+        OptionalLong updateCount = delegate.delete(session, handle);\n+        invalidateTableCaches(((JdbcTableHandle) handle).getSchemaTableName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDc1MTgwMw=="}, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MjMyOTIzMQ==", "bodyText": "We already do it this way for insert. So this is coherent.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r582329231", "createdAt": "2021-02-24T21:48:35Z", "author": {"login": "kokosing"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/CachingJdbcClient.java", "diffHunk": "@@ -388,6 +390,14 @@ public String quoted(RemoteTableName remoteTableName)\n         return delegate.getTableScanRedirection(session, tableHandle);\n     }\n \n+    @Override\n+    public OptionalLong delete(ConnectorSession session, ConnectorTableHandle handle)\n+    {\n+        OptionalLong updateCount = delegate.delete(session, handle);\n+        invalidateTableCaches(((JdbcTableHandle) handle).getSchemaTableName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDc1MTgwMw=="}, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODkyMjQ0NA==", "bodyText": "We invalidate table statistics with this.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r588922444", "createdAt": "2021-03-06T19:41:31Z", "author": {"login": "kokosing"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/CachingJdbcClient.java", "diffHunk": "@@ -388,6 +390,14 @@ public String quoted(RemoteTableName remoteTableName)\n         return delegate.getTableScanRedirection(session, tableHandle);\n     }\n \n+    @Override\n+    public OptionalLong delete(ConnectorSession session, ConnectorTableHandle handle)\n+    {\n+        OptionalLong updateCount = delegate.delete(session, handle);\n+        invalidateTableCaches(((JdbcTableHandle) handle).getSchemaTableName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDc1MTgwMw=="}, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1OTAwOTM3OnYy", "diffSide": "RIGHT", "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/JdbcMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QwNTo0MTozOVrOIa3ayA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QwNTo0MTozOVrOIa3ayA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTA0MTg2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // This column is not actually used, but Presto engine requires this during analysis\n          \n          \n            \n                    // This column is not actually used, but Trino engine requires this during analysis", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r565041864", "createdAt": "2021-01-27T05:41:39Z", "author": {"login": "Praveen2112"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -460,6 +463,34 @@ public boolean supportsMissingColumnsOnInsert()\n         return Optional.empty();\n     }\n \n+    @Override\n+    public ColumnHandle getUpdateRowIdColumnHandle(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        // This column is not actually used, but Presto engine requires this during analysis", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1OTAzNjI5OnYy", "diffSide": "RIGHT", "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/QueryBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QwNTo1NDoyNlrOIa3qnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QwNTo1NDoyNlrOIa3qnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTA0NTkxNg==", "bodyText": "Can we add a check before casting it to JdbcNamedRelationHandle ?", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r565045916", "createdAt": "2021-01-27T05:54:26Z", "author": {"login": "Praveen2112"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/QueryBuilder.java", "diffHunk": "@@ -143,6 +143,23 @@ else if (baseRelation instanceof JdbcQueryRelationHandle) {\n         return new PreparedQuery(sql, accumulator.build());\n     }\n \n+    public PreparedQuery prepareDelete(\n+            ConnectorSession session,\n+            Connection connection,\n+            JdbcRelationHandle baseRelation,\n+            TupleDomain<ColumnHandle> tupleDomain)\n+    {\n+        String sql = \"DELETE FROM \" + getRelation(((JdbcNamedRelationHandle) baseRelation).getRemoteTableName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1OTAzNzc3OnYy", "diffSide": "RIGHT", "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/QueryBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QwNTo1NToxMFrOIa3rkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNFQyMTo1MTo0NFrOIrWqOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTA0NjE2MA==", "bodyText": "Can we extract it for both SELECT and DELETE ?", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r565046160", "createdAt": "2021-01-27T05:55:10Z", "author": {"login": "Praveen2112"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/QueryBuilder.java", "diffHunk": "@@ -143,6 +143,23 @@ else if (baseRelation instanceof JdbcQueryRelationHandle) {\n         return new PreparedQuery(sql, accumulator.build());\n     }\n \n+    public PreparedQuery prepareDelete(\n+            ConnectorSession session,\n+            Connection connection,\n+            JdbcRelationHandle baseRelation,\n+            TupleDomain<ColumnHandle> tupleDomain)\n+    {\n+        String sql = \"DELETE FROM \" + getRelation(((JdbcNamedRelationHandle) baseRelation).getRemoteTableName());\n+\n+        ImmutableList.Builder<QueryParameter> accumulator = ImmutableList.builder();\n+\n+        List<String> clauses = toConjuncts(session, connection, tupleDomain, accumulator::add);\n+        if (!clauses.isEmpty()) {\n+            sql += \" WHERE \" + Joiner.on(\" AND \").join(clauses);\n+        }\n+        return new PreparedQuery(sql, accumulator.build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MjMzMDkzNw==", "bodyText": "I don't think it is useful.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r582330937", "createdAt": "2021-02-24T21:51:44Z", "author": {"login": "kokosing"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/QueryBuilder.java", "diffHunk": "@@ -143,6 +143,23 @@ else if (baseRelation instanceof JdbcQueryRelationHandle) {\n         return new PreparedQuery(sql, accumulator.build());\n     }\n \n+    public PreparedQuery prepareDelete(\n+            ConnectorSession session,\n+            Connection connection,\n+            JdbcRelationHandle baseRelation,\n+            TupleDomain<ColumnHandle> tupleDomain)\n+    {\n+        String sql = \"DELETE FROM \" + getRelation(((JdbcNamedRelationHandle) baseRelation).getRemoteTableName());\n+\n+        ImmutableList.Builder<QueryParameter> accumulator = ImmutableList.builder();\n+\n+        List<String> clauses = toConjuncts(session, connection, tupleDomain, accumulator::add);\n+        if (!clauses.isEmpty()) {\n+            sql += \" WHERE \" + Joiner.on(\" AND \").join(clauses);\n+        }\n+        return new PreparedQuery(sql, accumulator.build());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTA0NjE2MA=="}, "originalCommit": null, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY3MzY2NDMwOnYy", "diffSide": "RIGHT", "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/JdbcMetadata.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNFQyMjo1NjowMFrOIrYwWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNVQwODoyNTo1NlrOIrpAyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MjM2NTI3NA==", "bodyText": "Sorry, this method got renamed when support for SQL UPDATE was merged.  The new name of the method you were thinking of is getDeleteRowIdColumnHandle(ConnectorSession session, ConnectorTableHandle tableHandle).\nHowever, for metadata delete, I don't believe either method will ever be called, so I think it can/should be omitted until row-by-row DELETE is supported in the JDBC connector.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r582365274", "createdAt": "2021-02-24T22:56:00Z", "author": {"login": "djsstarburst"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -454,6 +457,34 @@ public boolean supportsMissingColumnsOnInsert()\n         return Optional.empty();\n     }\n \n+    @Override\n+    public ColumnHandle getUpdateRowIdColumnHandle(ConnectorSession session, ConnectorTableHandle tableHandle, List<ColumnHandle> updatedColumns)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MjYzMTYyNg==", "bodyText": "Thanks, will try to remove this method then.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r582631626", "createdAt": "2021-02-25T08:25:56Z", "author": {"login": "kokosing"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -454,6 +457,34 @@ public boolean supportsMissingColumnsOnInsert()\n         return Optional.empty();\n     }\n \n+    @Override\n+    public ColumnHandle getUpdateRowIdColumnHandle(ConnectorSession session, ConnectorTableHandle tableHandle, List<ColumnHandle> updatedColumns)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MjM2NTI3NA=="}, "originalCommit": null, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc4NDg0OTA2OnYy", "diffSide": "RIGHT", "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/BaseJdbcClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yMlQyMDo0NToxOVrOI7T1Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yMlQyMToxODoyOVrOI7VDOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTA2MTg0Mw==", "bodyText": "will it return null if try fails?", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r599061843", "createdAt": "2021-03-22T20:45:19Z", "author": {"login": "ssheikin"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -1091,6 +1093,27 @@ public String quoted(RemoteTableName remoteTableName)\n         return emptyMap();\n     }\n \n+    @Override\n+    public OptionalLong delete(ConnectorSession session, ConnectorTableHandle handle)\n+    {\n+        QueryBuilder queryBuilder = new QueryBuilder(this);\n+        JdbcTableHandle tableHandle = (JdbcTableHandle) handle;\n+        checkArgument(tableHandle.isNamedRelation(), \"Unable to delete from synthetic table: %s\", tableHandle);\n+        try (Connection connection = connectionFactory.openConnection(session)) {\n+            connection.setAutoCommit(false);\n+            PreparedQuery preparedQuery = queryBuilder.prepareDelete(session, connection, tableHandle.getRequiredNamedRelation(), tableHandle.getConstraint());\n+            OptionalLong update;\n+            try (PreparedStatement preparedStatement = queryBuilder.prepareStatement(session, connection, preparedQuery)) {\n+                update = OptionalLong.of(preparedStatement.executeUpdate());\n+            }\n+            connection.commit();\n+            return update;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTA4MTc4NQ==", "bodyText": "No. You won't get here as exception would be thrown.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r599081785", "createdAt": "2021-03-22T21:18:29Z", "author": {"login": "kokosing"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -1091,6 +1093,27 @@ public String quoted(RemoteTableName remoteTableName)\n         return emptyMap();\n     }\n \n+    @Override\n+    public OptionalLong delete(ConnectorSession session, ConnectorTableHandle handle)\n+    {\n+        QueryBuilder queryBuilder = new QueryBuilder(this);\n+        JdbcTableHandle tableHandle = (JdbcTableHandle) handle;\n+        checkArgument(tableHandle.isNamedRelation(), \"Unable to delete from synthetic table: %s\", tableHandle);\n+        try (Connection connection = connectionFactory.openConnection(session)) {\n+            connection.setAutoCommit(false);\n+            PreparedQuery preparedQuery = queryBuilder.prepareDelete(session, connection, tableHandle.getRequiredNamedRelation(), tableHandle.getConstraint());\n+            OptionalLong update;\n+            try (PreparedStatement preparedStatement = queryBuilder.prepareStatement(session, connection, preparedQuery)) {\n+                update = OptionalLong.of(preparedStatement.executeUpdate());\n+            }\n+            connection.commit();\n+            return update;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTA2MTg0Mw=="}, "originalCommit": null, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkyNTc4NTk0OnYy", "diffSide": "RIGHT", "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/BaseJdbcClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQwOToyMzozNFrOJPZRTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQwOToyMzozNFrOJPZRTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDEyMjQ0NA==", "bodyText": "please make this statement the first one in the method.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r620122444", "createdAt": "2021-04-26T09:23:34Z", "author": {"login": "ssheikin"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -1114,6 +1115,26 @@ public String quoted(RemoteTableName remoteTableName)\n         return emptyMap();\n     }\n \n+    @Override\n+    public OptionalLong delete(ConnectorSession session, JdbcTableHandle handle)\n+    {\n+        QueryBuilder queryBuilder = new QueryBuilder(this);\n+        checkArgument(handle.isNamedRelation(), \"Unable to delete from synthetic table: %s\", handle);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkyNTgxODIyOnYy", "diffSide": "RIGHT", "path": "plugin/trino-druid/pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQwOToyOTo1NVrOJPZkJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxMDozOToxOFrOJYGkCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDEyNzI3MA==", "bodyText": "why is this dependency needed?", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r620127270", "createdAt": "2021-04-26T09:29:55Z", "author": {"login": "ssheikin"}, "path": "plugin/trino-druid/pom.xml", "diffHunk": "@@ -98,6 +98,13 @@\n         </dependency>\n \n         <!-- for testing -->\n+        <dependency>\n+            <groupId>io.trino</groupId>\n+            <artifactId>trino-base-jdbc</artifactId>\n+            <type>test-jar</type>\n+            <scope>test</scope>\n+        </dependency>\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTIyNTYxMw==", "bodyText": "Because druid tests are using BaseJdbcConnectorTest", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r629225613", "createdAt": "2021-05-10T09:54:06Z", "author": {"login": "kokosing"}, "path": "plugin/trino-druid/pom.xml", "diffHunk": "@@ -98,6 +98,13 @@\n         </dependency>\n \n         <!-- for testing -->\n+        <dependency>\n+            <groupId>io.trino</groupId>\n+            <artifactId>trino-base-jdbc</artifactId>\n+            <type>test-jar</type>\n+            <scope>test</scope>\n+        </dependency>\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDEyNzI3MA=="}, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTI1MzEzMA==", "bodyText": "Doesn't seem to belong to Invalidate only table statistics on insert commit", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r629253130", "createdAt": "2021-05-10T10:39:18Z", "author": {"login": "findepi"}, "path": "plugin/trino-druid/pom.xml", "diffHunk": "@@ -98,6 +98,13 @@\n         </dependency>\n \n         <!-- for testing -->\n+        <dependency>\n+            <groupId>io.trino</groupId>\n+            <artifactId>trino-base-jdbc</artifactId>\n+            <type>test-jar</type>\n+            <scope>test</scope>\n+        </dependency>\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDEyNzI3MA=="}, "originalCommit": null, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkyNTkxNzE3OnYy", "diffSide": "RIGHT", "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/BaseJdbcClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQwOTo0OTowNFrOJPadUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQwOTo1Nzo0M1rOJYFBew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDE0MTkwNQ==", "bodyText": "If connectionFactory preserves state of connections it manages connection.setAutoCommit(false); could be too invasive. Please make sure that state of each new connection obtained by subsequent openConnection invocations is not affected. Maybe it worth to reset this property back in finally block?", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r620141905", "createdAt": "2021-04-26T09:49:04Z", "author": {"login": "ssheikin"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -1114,6 +1115,26 @@ public String quoted(RemoteTableName remoteTableName)\n         return emptyMap();\n     }\n \n+    @Override\n+    public OptionalLong delete(ConnectorSession session, JdbcTableHandle handle)\n+    {\n+        QueryBuilder queryBuilder = new QueryBuilder(this);\n+        checkArgument(handle.isNamedRelation(), \"Unable to delete from synthetic table: %s\", handle);\n+        try (Connection connection = connectionFactory.openConnection(session)) {\n+            connection.setAutoCommit(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTIyNzg5OQ==", "bodyText": "It is a responsiblity connectionFactory to provide \"fresh\" connection. Also we are already doing this for insert.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r629227899", "createdAt": "2021-05-10T09:57:43Z", "author": {"login": "kokosing"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -1114,6 +1115,26 @@ public String quoted(RemoteTableName remoteTableName)\n         return emptyMap();\n     }\n \n+    @Override\n+    public OptionalLong delete(ConnectorSession session, JdbcTableHandle handle)\n+    {\n+        QueryBuilder queryBuilder = new QueryBuilder(this);\n+        checkArgument(handle.isNamedRelation(), \"Unable to delete from synthetic table: %s\", handle);\n+        try (Connection connection = connectionFactory.openConnection(session)) {\n+            connection.setAutoCommit(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDE0MTkwNQ=="}, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkyNTkzMTE5OnYy", "diffSide": "RIGHT", "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/JdbcMetadata.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQwOTo1MTo0OFrOJPalnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQwOTo1MTo0OFrOJPalnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDE0NDAyOA==", "bodyText": "Seems this suggestion can be implemented: b8152a2#r565041864", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r620144028", "createdAt": "2021-04-26T09:51:48Z", "author": {"login": "ssheikin"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -658,6 +662,40 @@ public boolean supportsMissingColumnsOnInsert()\n         return Optional.empty();\n     }\n \n+    @Override\n+    public ColumnHandle getDeleteRowIdColumnHandle(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        // This column is not actually used, but Presto engine requires this during analysis", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkyNTk2MTk0OnYy", "diffSide": "RIGHT", "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQwOTo1Nzo0OFrOJPa3KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQwOTo1Nzo0OFrOJPa3KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDE0ODUyMQ==", "bodyText": "please add assertQueryFails test for\n\nAndLower", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r620148521", "createdAt": "2021-04-26T09:57:48Z", "author": {"login": "ssheikin"}, "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorTest.java", "diffHunk": "@@ -648,4 +662,74 @@ protected TestView createSleepingView(Duration minimalSleepDuration)\n     {\n         throw new UnsupportedOperationException();\n     }\n+\n+    @Test\n+    public void testMetadataDeleteWithBigintEquality()\n+    {\n+        if (!hasBehavior(SUPPORTS_METADATA_DELETE)) {\n+            assertQueryFails(\"DELETE FROM region WHERE regionkey = 1\", \"This connector does not support deletes\");\n+            return;\n+        }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM region\", 5);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE regionkey = 1\", 1);\n+        assertQuery(\"SELECT count(*) FROM \" + tableName, \"VALUES 4\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @Test\n+    public void testMetadataDeleteWithVarcharEquality()\n+    {\n+        if (!hasBehavior(SUPPORTS_METADATA_DELETE) || !hasBehavior(SUPPORTS_PREDICATE_PUSHDOWN_WITH_VARCHAR_EQUALITY)) {\n+            assertQueryFails(\n+                    \"DELETE FROM nation WHERE name = 'ALBANIA'\",\n+                    \"(.*[Dd]elet(e|ing).*(not |un)supported.*)\" +\n+                            \"|(This connector does not support deletes)\" +\n+                            \"|(Unsupported delete)\");\n+            return;\n+        }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \"(col) AS VALUES 'a', 'A', null\", 3);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE col = 'A'\", 1);\n+        assertQuery(\"SELECT * FROM \" + tableName, \"VALUES 'a', null\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @Test\n+    public void testMetadataDeleteWithVarcharInequality()\n+    {\n+        if (!hasBehavior(SUPPORTS_METADATA_DELETE) || !hasBehavior(SUPPORTS_PREDICATE_PUSHDOWN_WITH_VARCHAR_INEQUALITY)) {\n+            assertQueryFails(\n+                    \"DELETE FROM nation WHERE name != 'ALBANIA'\",\n+                    \"(.*[Dd]elet(e|ing).*(not |un)supported.*)\" +\n+                            \"|(This connector does not support deletes)\" +\n+                            \"|(Unsupported delete)\");\n+            return;\n+        }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \"(col) AS VALUES 'a', 'A', 'b', null\", 4);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE col != 'A'\", 2);\n+        assertQuery(\"SELECT * FROM \" + tableName, \"VALUES 'A', null\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @Test\n+    public void testMetadataDeleteWithVarcharGreaterAndLower()\n+    {\n+        if (!hasBehavior(SUPPORTS_METADATA_DELETE) || !hasBehavior(SUPPORTS_PREDICATE_PUSHDOWN_WITH_VARCHAR_INEQUALITY)) {\n+            assertQueryFails(\n+                    \"DELETE FROM nation WHERE name > 'ALBANIA'\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkyNjAxNjU2OnYy", "diffSide": "RIGHT", "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQxMDowODo0NFrOJPbWow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxMDoxOToxOVrOJYF2sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDE1NjU3OQ==", "bodyText": ", 0);\n\nIt tests that A < a but does not test delete.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r620156579", "createdAt": "2021-04-26T10:08:44Z", "author": {"login": "ssheikin"}, "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorTest.java", "diffHunk": "@@ -648,4 +662,74 @@ protected TestView createSleepingView(Duration minimalSleepDuration)\n     {\n         throw new UnsupportedOperationException();\n     }\n+\n+    @Test\n+    public void testMetadataDeleteWithBigintEquality()\n+    {\n+        if (!hasBehavior(SUPPORTS_METADATA_DELETE)) {\n+            assertQueryFails(\"DELETE FROM region WHERE regionkey = 1\", \"This connector does not support deletes\");\n+            return;\n+        }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM region\", 5);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE regionkey = 1\", 1);\n+        assertQuery(\"SELECT count(*) FROM \" + tableName, \"VALUES 4\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @Test\n+    public void testMetadataDeleteWithVarcharEquality()\n+    {\n+        if (!hasBehavior(SUPPORTS_METADATA_DELETE) || !hasBehavior(SUPPORTS_PREDICATE_PUSHDOWN_WITH_VARCHAR_EQUALITY)) {\n+            assertQueryFails(\n+                    \"DELETE FROM nation WHERE name = 'ALBANIA'\",\n+                    \"(.*[Dd]elet(e|ing).*(not |un)supported.*)\" +\n+                            \"|(This connector does not support deletes)\" +\n+                            \"|(Unsupported delete)\");\n+            return;\n+        }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \"(col) AS VALUES 'a', 'A', null\", 3);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE col = 'A'\", 1);\n+        assertQuery(\"SELECT * FROM \" + tableName, \"VALUES 'a', null\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @Test\n+    public void testMetadataDeleteWithVarcharInequality()\n+    {\n+        if (!hasBehavior(SUPPORTS_METADATA_DELETE) || !hasBehavior(SUPPORTS_PREDICATE_PUSHDOWN_WITH_VARCHAR_INEQUALITY)) {\n+            assertQueryFails(\n+                    \"DELETE FROM nation WHERE name != 'ALBANIA'\",\n+                    \"(.*[Dd]elet(e|ing).*(not |un)supported.*)\" +\n+                            \"|(This connector does not support deletes)\" +\n+                            \"|(Unsupported delete)\");\n+            return;\n+        }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \"(col) AS VALUES 'a', 'A', 'b', null\", 4);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE col != 'A'\", 2);\n+        assertQuery(\"SELECT * FROM \" + tableName, \"VALUES 'A', null\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @Test\n+    public void testMetadataDeleteWithVarcharGreaterAndLower()\n+    {\n+        if (!hasBehavior(SUPPORTS_METADATA_DELETE) || !hasBehavior(SUPPORTS_PREDICATE_PUSHDOWN_WITH_VARCHAR_INEQUALITY)) {\n+            assertQueryFails(\n+                    \"DELETE FROM nation WHERE name > 'ALBANIA'\",\n+                    \"(.*[Dd]elet(e|ing).*(not |un)supported.*)\" +\n+                            \"|(This connector does not support deletes)\" +\n+                            \"|(Unsupported delete)\");\n+            return;\n+        }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \"(col) AS VALUES 'a', 'A', 'b', null\", 4);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE col < 'A'\", 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTIzMDM2NQ==", "bodyText": "this is an empty delete. Below there is non empty.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r629230365", "createdAt": "2021-05-10T10:01:26Z", "author": {"login": "kokosing"}, "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorTest.java", "diffHunk": "@@ -648,4 +662,74 @@ protected TestView createSleepingView(Duration minimalSleepDuration)\n     {\n         throw new UnsupportedOperationException();\n     }\n+\n+    @Test\n+    public void testMetadataDeleteWithBigintEquality()\n+    {\n+        if (!hasBehavior(SUPPORTS_METADATA_DELETE)) {\n+            assertQueryFails(\"DELETE FROM region WHERE regionkey = 1\", \"This connector does not support deletes\");\n+            return;\n+        }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM region\", 5);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE regionkey = 1\", 1);\n+        assertQuery(\"SELECT count(*) FROM \" + tableName, \"VALUES 4\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @Test\n+    public void testMetadataDeleteWithVarcharEquality()\n+    {\n+        if (!hasBehavior(SUPPORTS_METADATA_DELETE) || !hasBehavior(SUPPORTS_PREDICATE_PUSHDOWN_WITH_VARCHAR_EQUALITY)) {\n+            assertQueryFails(\n+                    \"DELETE FROM nation WHERE name = 'ALBANIA'\",\n+                    \"(.*[Dd]elet(e|ing).*(not |un)supported.*)\" +\n+                            \"|(This connector does not support deletes)\" +\n+                            \"|(Unsupported delete)\");\n+            return;\n+        }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \"(col) AS VALUES 'a', 'A', null\", 3);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE col = 'A'\", 1);\n+        assertQuery(\"SELECT * FROM \" + tableName, \"VALUES 'a', null\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @Test\n+    public void testMetadataDeleteWithVarcharInequality()\n+    {\n+        if (!hasBehavior(SUPPORTS_METADATA_DELETE) || !hasBehavior(SUPPORTS_PREDICATE_PUSHDOWN_WITH_VARCHAR_INEQUALITY)) {\n+            assertQueryFails(\n+                    \"DELETE FROM nation WHERE name != 'ALBANIA'\",\n+                    \"(.*[Dd]elet(e|ing).*(not |un)supported.*)\" +\n+                            \"|(This connector does not support deletes)\" +\n+                            \"|(Unsupported delete)\");\n+            return;\n+        }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \"(col) AS VALUES 'a', 'A', 'b', null\", 4);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE col != 'A'\", 2);\n+        assertQuery(\"SELECT * FROM \" + tableName, \"VALUES 'A', null\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @Test\n+    public void testMetadataDeleteWithVarcharGreaterAndLower()\n+    {\n+        if (!hasBehavior(SUPPORTS_METADATA_DELETE) || !hasBehavior(SUPPORTS_PREDICATE_PUSHDOWN_WITH_VARCHAR_INEQUALITY)) {\n+            assertQueryFails(\n+                    \"DELETE FROM nation WHERE name > 'ALBANIA'\",\n+                    \"(.*[Dd]elet(e|ing).*(not |un)supported.*)\" +\n+                            \"|(This connector does not support deletes)\" +\n+                            \"|(Unsupported delete)\");\n+            return;\n+        }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \"(col) AS VALUES 'a', 'A', 'b', null\", 4);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE col < 'A'\", 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDE1NjU3OQ=="}, "originalCommit": null, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTIzOTEzMw==", "bodyText": "It's not possible to distinguish empty delete from non implemented delete.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertUpdate(\"DELETE FROM \" + tableName + \" WHERE col < 'A'\", 0);\n          \n          \n            \n                    assertUpdate(\"DELETE FROM \" + tableName + \" WHERE col < 'a'\", 1);", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r629239133", "createdAt": "2021-05-10T10:15:25Z", "author": {"login": "ssheikin"}, "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorTest.java", "diffHunk": "@@ -648,4 +662,74 @@ protected TestView createSleepingView(Duration minimalSleepDuration)\n     {\n         throw new UnsupportedOperationException();\n     }\n+\n+    @Test\n+    public void testMetadataDeleteWithBigintEquality()\n+    {\n+        if (!hasBehavior(SUPPORTS_METADATA_DELETE)) {\n+            assertQueryFails(\"DELETE FROM region WHERE regionkey = 1\", \"This connector does not support deletes\");\n+            return;\n+        }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM region\", 5);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE regionkey = 1\", 1);\n+        assertQuery(\"SELECT count(*) FROM \" + tableName, \"VALUES 4\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @Test\n+    public void testMetadataDeleteWithVarcharEquality()\n+    {\n+        if (!hasBehavior(SUPPORTS_METADATA_DELETE) || !hasBehavior(SUPPORTS_PREDICATE_PUSHDOWN_WITH_VARCHAR_EQUALITY)) {\n+            assertQueryFails(\n+                    \"DELETE FROM nation WHERE name = 'ALBANIA'\",\n+                    \"(.*[Dd]elet(e|ing).*(not |un)supported.*)\" +\n+                            \"|(This connector does not support deletes)\" +\n+                            \"|(Unsupported delete)\");\n+            return;\n+        }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \"(col) AS VALUES 'a', 'A', null\", 3);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE col = 'A'\", 1);\n+        assertQuery(\"SELECT * FROM \" + tableName, \"VALUES 'a', null\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @Test\n+    public void testMetadataDeleteWithVarcharInequality()\n+    {\n+        if (!hasBehavior(SUPPORTS_METADATA_DELETE) || !hasBehavior(SUPPORTS_PREDICATE_PUSHDOWN_WITH_VARCHAR_INEQUALITY)) {\n+            assertQueryFails(\n+                    \"DELETE FROM nation WHERE name != 'ALBANIA'\",\n+                    \"(.*[Dd]elet(e|ing).*(not |un)supported.*)\" +\n+                            \"|(This connector does not support deletes)\" +\n+                            \"|(Unsupported delete)\");\n+            return;\n+        }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \"(col) AS VALUES 'a', 'A', 'b', null\", 4);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE col != 'A'\", 2);\n+        assertQuery(\"SELECT * FROM \" + tableName, \"VALUES 'A', null\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @Test\n+    public void testMetadataDeleteWithVarcharGreaterAndLower()\n+    {\n+        if (!hasBehavior(SUPPORTS_METADATA_DELETE) || !hasBehavior(SUPPORTS_PREDICATE_PUSHDOWN_WITH_VARCHAR_INEQUALITY)) {\n+            assertQueryFails(\n+                    \"DELETE FROM nation WHERE name > 'ALBANIA'\",\n+                    \"(.*[Dd]elet(e|ing).*(not |un)supported.*)\" +\n+                            \"|(This connector does not support deletes)\" +\n+                            \"|(Unsupported delete)\");\n+            return;\n+        }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \"(col) AS VALUES 'a', 'A', 'b', null\", 4);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE col < 'A'\", 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDE1NjU3OQ=="}, "originalCommit": null, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTI0MTUyMA==", "bodyText": "It is. Non implemented will raise an error. While empty delete was executed in remote data source and it didn't remove anything.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r629241520", "createdAt": "2021-05-10T10:19:19Z", "author": {"login": "kokosing"}, "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorTest.java", "diffHunk": "@@ -648,4 +662,74 @@ protected TestView createSleepingView(Duration minimalSleepDuration)\n     {\n         throw new UnsupportedOperationException();\n     }\n+\n+    @Test\n+    public void testMetadataDeleteWithBigintEquality()\n+    {\n+        if (!hasBehavior(SUPPORTS_METADATA_DELETE)) {\n+            assertQueryFails(\"DELETE FROM region WHERE regionkey = 1\", \"This connector does not support deletes\");\n+            return;\n+        }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM region\", 5);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE regionkey = 1\", 1);\n+        assertQuery(\"SELECT count(*) FROM \" + tableName, \"VALUES 4\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @Test\n+    public void testMetadataDeleteWithVarcharEquality()\n+    {\n+        if (!hasBehavior(SUPPORTS_METADATA_DELETE) || !hasBehavior(SUPPORTS_PREDICATE_PUSHDOWN_WITH_VARCHAR_EQUALITY)) {\n+            assertQueryFails(\n+                    \"DELETE FROM nation WHERE name = 'ALBANIA'\",\n+                    \"(.*[Dd]elet(e|ing).*(not |un)supported.*)\" +\n+                            \"|(This connector does not support deletes)\" +\n+                            \"|(Unsupported delete)\");\n+            return;\n+        }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \"(col) AS VALUES 'a', 'A', null\", 3);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE col = 'A'\", 1);\n+        assertQuery(\"SELECT * FROM \" + tableName, \"VALUES 'a', null\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @Test\n+    public void testMetadataDeleteWithVarcharInequality()\n+    {\n+        if (!hasBehavior(SUPPORTS_METADATA_DELETE) || !hasBehavior(SUPPORTS_PREDICATE_PUSHDOWN_WITH_VARCHAR_INEQUALITY)) {\n+            assertQueryFails(\n+                    \"DELETE FROM nation WHERE name != 'ALBANIA'\",\n+                    \"(.*[Dd]elet(e|ing).*(not |un)supported.*)\" +\n+                            \"|(This connector does not support deletes)\" +\n+                            \"|(Unsupported delete)\");\n+            return;\n+        }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \"(col) AS VALUES 'a', 'A', 'b', null\", 4);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE col != 'A'\", 2);\n+        assertQuery(\"SELECT * FROM \" + tableName, \"VALUES 'A', null\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @Test\n+    public void testMetadataDeleteWithVarcharGreaterAndLower()\n+    {\n+        if (!hasBehavior(SUPPORTS_METADATA_DELETE) || !hasBehavior(SUPPORTS_PREDICATE_PUSHDOWN_WITH_VARCHAR_INEQUALITY)) {\n+            assertQueryFails(\n+                    \"DELETE FROM nation WHERE name > 'ALBANIA'\",\n+                    \"(.*[Dd]elet(e|ing).*(not |un)supported.*)\" +\n+                            \"|(This connector does not support deletes)\" +\n+                            \"|(Unsupported delete)\");\n+            return;\n+        }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \"(col) AS VALUES 'a', 'A', 'b', null\", 4);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE col < 'A'\", 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDE1NjU3OQ=="}, "originalCommit": null, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkyNjA1NzczOnYy", "diffSide": "RIGHT", "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQxMDoxNzozM1rOJPbulA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQxMDoxNzozM1rOJPbulA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDE2MjcwOA==", "bodyText": "isn't col != 'A' Inequality belong to SUPPORTS_ROW_LEVEL_DELETE ?", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r620162708", "createdAt": "2021-04-26T10:17:33Z", "author": {"login": "ssheikin"}, "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorTest.java", "diffHunk": "@@ -648,4 +662,74 @@ protected TestView createSleepingView(Duration minimalSleepDuration)\n     {\n         throw new UnsupportedOperationException();\n     }\n+\n+    @Test\n+    public void testMetadataDeleteWithBigintEquality()\n+    {\n+        if (!hasBehavior(SUPPORTS_METADATA_DELETE)) {\n+            assertQueryFails(\"DELETE FROM region WHERE regionkey = 1\", \"This connector does not support deletes\");\n+            return;\n+        }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM region\", 5);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE regionkey = 1\", 1);\n+        assertQuery(\"SELECT count(*) FROM \" + tableName, \"VALUES 4\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @Test\n+    public void testMetadataDeleteWithVarcharEquality()\n+    {\n+        if (!hasBehavior(SUPPORTS_METADATA_DELETE) || !hasBehavior(SUPPORTS_PREDICATE_PUSHDOWN_WITH_VARCHAR_EQUALITY)) {\n+            assertQueryFails(\n+                    \"DELETE FROM nation WHERE name = 'ALBANIA'\",\n+                    \"(.*[Dd]elet(e|ing).*(not |un)supported.*)\" +\n+                            \"|(This connector does not support deletes)\" +\n+                            \"|(Unsupported delete)\");\n+            return;\n+        }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \"(col) AS VALUES 'a', 'A', null\", 3);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE col = 'A'\", 1);\n+        assertQuery(\"SELECT * FROM \" + tableName, \"VALUES 'a', null\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @Test\n+    public void testMetadataDeleteWithVarcharInequality()\n+    {\n+        if (!hasBehavior(SUPPORTS_METADATA_DELETE) || !hasBehavior(SUPPORTS_PREDICATE_PUSHDOWN_WITH_VARCHAR_INEQUALITY)) {\n+            assertQueryFails(\n+                    \"DELETE FROM nation WHERE name != 'ALBANIA'\",\n+                    \"(.*[Dd]elet(e|ing).*(not |un)supported.*)\" +\n+                            \"|(This connector does not support deletes)\" +\n+                            \"|(Unsupported delete)\");\n+            return;\n+        }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \"(col) AS VALUES 'a', 'A', 'b', null\", 4);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE col != 'A'\", 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkyNjA2NzkxOnYy", "diffSide": "RIGHT", "path": "testing/trino-testing/src/main/java/io/trino/testing/TestingConnectorBehavior.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQxMDoxOTozOFrOJPb0WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQxMDoxOTozOFrOJPb0WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDE2NDE4NA==", "bodyText": "Could you please briefly describe relation between them as comment in code?", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r620164184", "createdAt": "2021-04-26T10:19:38Z", "author": {"login": "ssheikin"}, "path": "testing/trino-testing/src/main/java/io/trino/testing/TestingConnectorBehavior.java", "diffHunk": "@@ -54,6 +54,7 @@\n \n     SUPPORTS_DELETE(false),\n     SUPPORTS_ROW_LEVEL_DELETE(SUPPORTS_DELETE),\n+    SUPPORTS_METADATA_DELETE(SUPPORTS_DELETE),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkyNjA5NjY1OnYy", "diffSide": "RIGHT", "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yNlQxMDoyNjowMVrOJPcFMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQwOTo1OToyMVrOJYFFsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDE2ODQ5OQ==", "bodyText": "isn't col = 'A' equality belong to SUPPORTS_ROW_LEVEL_DELETE ?\nThis could be metadata condition for some kind of Skip Indexes (e.g. https://github.com/citusdata/cstore_fdw#using-skip-indexes) but i'm not sure this is a SUPPORTS_METADATA_DELETE by default.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r620168499", "createdAt": "2021-04-26T10:26:01Z", "author": {"login": "ssheikin"}, "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorTest.java", "diffHunk": "@@ -648,4 +662,74 @@ protected TestView createSleepingView(Duration minimalSleepDuration)\n     {\n         throw new UnsupportedOperationException();\n     }\n+\n+    @Test\n+    public void testMetadataDeleteWithBigintEquality()\n+    {\n+        if (!hasBehavior(SUPPORTS_METADATA_DELETE)) {\n+            assertQueryFails(\"DELETE FROM region WHERE regionkey = 1\", \"This connector does not support deletes\");\n+            return;\n+        }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM region\", 5);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE regionkey = 1\", 1);\n+        assertQuery(\"SELECT count(*) FROM \" + tableName, \"VALUES 4\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @Test\n+    public void testMetadataDeleteWithVarcharEquality()\n+    {\n+        if (!hasBehavior(SUPPORTS_METADATA_DELETE) || !hasBehavior(SUPPORTS_PREDICATE_PUSHDOWN_WITH_VARCHAR_EQUALITY)) {\n+            assertQueryFails(\n+                    \"DELETE FROM nation WHERE name = 'ALBANIA'\",\n+                    \"(.*[Dd]elet(e|ing).*(not |un)supported.*)\" +\n+                            \"|(This connector does not support deletes)\" +\n+                            \"|(Unsupported delete)\");\n+            return;\n+        }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \"(col) AS VALUES 'a', 'A', null\", 3);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE col = 'A'\", 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTIyODk3OA==", "bodyText": "No. Discussed this offline.\nSUPPORTS_METADATA_DELETE is a Trino codebase concept, where no actual Trino statement is executed and the entire statement is handled by interactions with ConnectorMetadata on coordinator.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r629228978", "createdAt": "2021-05-10T09:59:21Z", "author": {"login": "kokosing"}, "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorTest.java", "diffHunk": "@@ -648,4 +662,74 @@ protected TestView createSleepingView(Duration minimalSleepDuration)\n     {\n         throw new UnsupportedOperationException();\n     }\n+\n+    @Test\n+    public void testMetadataDeleteWithBigintEquality()\n+    {\n+        if (!hasBehavior(SUPPORTS_METADATA_DELETE)) {\n+            assertQueryFails(\"DELETE FROM region WHERE regionkey = 1\", \"This connector does not support deletes\");\n+            return;\n+        }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM region\", 5);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE regionkey = 1\", 1);\n+        assertQuery(\"SELECT count(*) FROM \" + tableName, \"VALUES 4\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @Test\n+    public void testMetadataDeleteWithVarcharEquality()\n+    {\n+        if (!hasBehavior(SUPPORTS_METADATA_DELETE) || !hasBehavior(SUPPORTS_PREDICATE_PUSHDOWN_WITH_VARCHAR_EQUALITY)) {\n+            assertQueryFails(\n+                    \"DELETE FROM nation WHERE name = 'ALBANIA'\",\n+                    \"(.*[Dd]elet(e|ing).*(not |un)supported.*)\" +\n+                            \"|(This connector does not support deletes)\" +\n+                            \"|(Unsupported delete)\");\n+            return;\n+        }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \"(col) AS VALUES 'a', 'A', null\", 3);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE col = 'A'\", 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDE2ODQ5OQ=="}, "originalCommit": null, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk4NzkwODQyOnYy", "diffSide": "RIGHT", "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/CachingJdbcClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxMDozNzozMFrOJYGgRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxMDozNzozMFrOJYGgRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTI1MjE2Nw==", "bodyText": "you can use onDataChanged here", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r629252167", "createdAt": "2021-05-10T10:37:30Z", "author": {"login": "findepi"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/CachingJdbcClient.java", "diffHunk": "@@ -289,7 +289,7 @@ public JdbcOutputTableHandle beginInsertTable(ConnectorSession session, JdbcTabl\n     public void finishInsertTable(ConnectorSession session, JdbcOutputTableHandle handle)\n     {\n         delegate.finishInsertTable(session, handle);\n-        invalidateTableCaches(new SchemaTableName(handle.getSchemaName(), handle.getTableName()));\n+        invalidateTableStatistics(new SchemaTableName(handle.getSchemaName(), handle.getTableName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk4NzkxMjg0OnYy", "diffSide": "RIGHT", "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/CachingJdbcClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxMDozODo0OVrOJYGjBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxMDozODo0OVrOJYGjBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTI1Mjg2OA==", "bodyText": "onDataChanged should use the new method too.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r629252868", "createdAt": "2021-05-10T10:38:49Z", "author": {"login": "findepi"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/CachingJdbcClient.java", "diffHunk": "@@ -462,6 +462,11 @@ private void invalidateTableCaches(SchemaTableName schemaTableName)\n         invalidateColumnsCache(schemaTableName);\n         invalidateCache(tableHandleCache, key -> key.tableName.equals(schemaTableName));\n         invalidateCache(tableNamesCache, key -> key.schemaName.equals(Optional.of(schemaTableName.getSchemaName())));\n+        invalidateTableStatistics(schemaTableName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk4NzkxNDUwOnYy", "diffSide": "RIGHT", "path": "plugin/trino-druid/src/test/java/io/trino/plugin/druid/BaseDruidConnectorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxMDozOToyMVrOJYGkIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxMToyNjowNFrOJYIJxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTI1MzE1Mw==", "bodyText": "Doesn't seem to belong to Invalidate only table statistics on insert commit", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r629253153", "createdAt": "2021-05-10T10:39:21Z", "author": {"login": "findepi"}, "path": "plugin/trino-druid/src/test/java/io/trino/plugin/druid/BaseDruidConnectorTest.java", "diffHunk": "@@ -40,7 +40,7 @@\n import static org.assertj.core.api.Assertions.assertThat;\n \n public abstract class BaseDruidConnectorTest\n-        extends BaseConnectorTest\n+        extends BaseJdbcConnectorTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTI3OTE3NQ==", "bodyText": "Can this be extracted into preparatory commit?", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r629279175", "createdAt": "2021-05-10T11:26:04Z", "author": {"login": "findepi"}, "path": "plugin/trino-druid/src/test/java/io/trino/plugin/druid/BaseDruidConnectorTest.java", "diffHunk": "@@ -40,7 +40,7 @@\n import static org.assertj.core.api.Assertions.assertThat;\n \n public abstract class BaseDruidConnectorTest\n-        extends BaseConnectorTest\n+        extends BaseJdbcConnectorTest", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTI1MzE1Mw=="}, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk4NzkxOTE2OnYy", "diffSide": "RIGHT", "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/BaseJdbcClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxMDo0MDo0MFrOJYGm-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yNFQxMToxMDo0NlrOJzYDxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTI1Mzg4MA==", "bodyText": "This is not the right condition. For example, you cannot delete when there is a LIMIT or TopN applied onto JdbcTableHandle as well.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r629253880", "createdAt": "2021-05-10T10:40:40Z", "author": {"login": "findepi"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -1114,6 +1115,26 @@ public String quoted(RemoteTableName remoteTableName)\n         return emptyMap();\n     }\n \n+    @Override\n+    public OptionalLong delete(ConnectorSession session, JdbcTableHandle handle)\n+    {\n+        checkArgument(handle.isNamedRelation(), \"Unable to delete from synthetic table: %s\", handle);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MjQwMzIzMw==", "bodyText": "This is a bit pointless as DELETE does not support LIMIT.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r642403233", "createdAt": "2021-05-31T10:57:30Z", "author": {"login": "kokosing"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -1114,6 +1115,26 @@ public String quoted(RemoteTableName remoteTableName)\n         return emptyMap();\n     }\n \n+    @Override\n+    public OptionalLong delete(ConnectorSession session, JdbcTableHandle handle)\n+    {\n+        checkArgument(handle.isNamedRelation(), \"Unable to delete from synthetic table: %s\", handle);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTI1Mzg4MA=="}, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1Nzg1MTMzMw==", "bodyText": "it does not, but this code should not require understanding SQL to reason about it's correctness.\nIt takes a JdbcTableHandle so it should validate JdbcTableHandle shape", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r657851333", "createdAt": "2021-06-24T11:10:46Z", "author": {"login": "findepi"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -1114,6 +1115,26 @@ public String quoted(RemoteTableName remoteTableName)\n         return emptyMap();\n     }\n \n+    @Override\n+    public OptionalLong delete(ConnectorSession session, JdbcTableHandle handle)\n+    {\n+        checkArgument(handle.isNamedRelation(), \"Unable to delete from synthetic table: %s\", handle);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTI1Mzg4MA=="}, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk4NzkyNDQ0OnYy", "diffSide": "RIGHT", "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/BaseJdbcClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxMDo0MTo1OFrOJYGqBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0zMVQxMDo1NTo0MFrOJkpHiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTI1NDY2MQ==", "bodyText": "it's useless, since we're making exactly one statement within this connection.\nalso, #7875", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r629254661", "createdAt": "2021-05-10T10:41:58Z", "author": {"login": "findepi"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -1114,6 +1115,26 @@ public String quoted(RemoteTableName remoteTableName)\n         return emptyMap();\n     }\n \n+    @Override\n+    public OptionalLong delete(ConnectorSession session, JdbcTableHandle handle)\n+    {\n+        checkArgument(handle.isNamedRelation(), \"Unable to delete from synthetic table: %s\", handle);\n+        QueryBuilder queryBuilder = new QueryBuilder(this);\n+        try (Connection connection = connectionFactory.openConnection(session)) {\n+            connection.setAutoCommit(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTQyMDQ2OQ==", "bodyText": "Actually, please have a verify(connection.getAutoCommit(), as some drivers are not following spec.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r629420469", "createdAt": "2021-05-10T14:43:08Z", "author": {"login": "findepi"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -1114,6 +1115,26 @@ public String quoted(RemoteTableName remoteTableName)\n         return emptyMap();\n     }\n \n+    @Override\n+    public OptionalLong delete(ConnectorSession session, JdbcTableHandle handle)\n+    {\n+        checkArgument(handle.isNamedRelation(), \"Unable to delete from synthetic table: %s\", handle);\n+        QueryBuilder queryBuilder = new QueryBuilder(this);\n+        try (Connection connection = connectionFactory.openConnection(session)) {\n+            connection.setAutoCommit(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTI1NDY2MQ=="}, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MjQwMjE4Nw==", "bodyText": "This was written in a way you want. And it was failing for certain connectors. Now I don't remember the exact problem. Will do it suggested way and try to capture differences in connectors.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r642402187", "createdAt": "2021-05-31T10:55:40Z", "author": {"login": "kokosing"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -1114,6 +1115,26 @@ public String quoted(RemoteTableName remoteTableName)\n         return emptyMap();\n     }\n \n+    @Override\n+    public OptionalLong delete(ConnectorSession session, JdbcTableHandle handle)\n+    {\n+        checkArgument(handle.isNamedRelation(), \"Unable to delete from synthetic table: %s\", handle);\n+        QueryBuilder queryBuilder = new QueryBuilder(this);\n+        try (Connection connection = connectionFactory.openConnection(session)) {\n+            connection.setAutoCommit(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTI1NDY2MQ=="}, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk4ODAyNjUxOnYy", "diffSide": "RIGHT", "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/BaseJdbcClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxMToxMDoxM1rOJYHnIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxMToxMDoxM1rOJYHnIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTI3MDMwNw==", "bodyText": "just return ... once you remove commit below", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r629270307", "createdAt": "2021-05-10T11:10:13Z", "author": {"login": "findepi"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -1114,6 +1115,26 @@ public String quoted(RemoteTableName remoteTableName)\n         return emptyMap();\n     }\n \n+    @Override\n+    public OptionalLong delete(ConnectorSession session, JdbcTableHandle handle)\n+    {\n+        checkArgument(handle.isNamedRelation(), \"Unable to delete from synthetic table: %s\", handle);\n+        QueryBuilder queryBuilder = new QueryBuilder(this);\n+        try (Connection connection = connectionFactory.openConnection(session)) {\n+            connection.setAutoCommit(false);\n+            PreparedQuery preparedQuery = queryBuilder.prepareDelete(session, connection, handle.getRequiredNamedRelation(), handle.getConstraint());\n+            OptionalLong update;\n+            try (PreparedStatement preparedStatement = queryBuilder.prepareStatement(session, connection, preparedQuery)) {\n+                update = OptionalLong.of(preparedStatement.executeUpdate());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk4ODAyNzQzOnYy", "diffSide": "RIGHT", "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/CachingJdbcClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxMToxMDoyN1rOJYHnsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxMToxMDoyN1rOJYHnsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTI3MDQ0OQ==", "bodyText": "onDataChange", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r629270449", "createdAt": "2021-05-10T11:10:27Z", "author": {"login": "findepi"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/CachingJdbcClient.java", "diffHunk": "@@ -435,6 +436,14 @@ public String quoted(RemoteTableName remoteTableName)\n         return delegate.getTableScanRedirection(session, tableHandle);\n     }\n \n+    @Override\n+    public OptionalLong delete(ConnectorSession session, JdbcTableHandle handle)\n+    {\n+        OptionalLong deletedRowsCount = delegate.delete(session, handle);\n+        invalidateTableStatistics(handle.getRequiredNamedRelation().getSchemaTableName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk4ODAyOTA1OnYy", "diffSide": "RIGHT", "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/CachingJdbcClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxMToxMDo1MVrOJYHopQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0zMVQxMDo1MjowNVrOJko_2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTI3MDY5Mw==", "bodyText": "Drop the change, see other comments", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r629270693", "createdAt": "2021-05-10T11:10:51Z", "author": {"login": "findepi"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/CachingJdbcClient.java", "diffHunk": "@@ -497,6 +497,7 @@ CacheStats getStatisticsCacheStats()\n         cache.invalidateAll(cacheKeys);\n     }\n \n+    @SuppressWarnings(\"unused\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MjQwMDIxOA==", "bodyText": "I cannot, as the other method is using SchemaTableName and this is using JdbcTableHandle.\nUsing always version with SchemaTableName is suboptimal when data change event does not affect entire table.\nI think that onDataChanged is too ambitious. It does not fit well with parameter JdbcTableHandle as it does not invalidate data for entire table like one could expect when data is changed. Unless \"data\" term also refers to \"metadata\"? I think the easiest is to rename it is to invalidateTableStatistics and do not pretend it is anything more than that.\nWDYT?", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r642400218", "createdAt": "2021-05-31T10:52:05Z", "author": {"login": "kokosing"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/CachingJdbcClient.java", "diffHunk": "@@ -497,6 +497,7 @@ CacheStats getStatisticsCacheStats()\n         cache.invalidateAll(cacheKeys);\n     }\n \n+    @SuppressWarnings(\"unused\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTI3MDY5Mw=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk4ODAzMDUzOnYy", "diffSide": "RIGHT", "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/DefaultJdbcMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxMToxMTowOVrOJYHpdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0zMVQxMTowMzoxOFrOJkpXOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTI3MDkwMA==", "bodyText": "Trino;\nmaybe\n// The column is used for row-level delete, which is not supported, but it's required during analysis anyway.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r629270900", "createdAt": "2021-05-10T11:11:09Z", "author": {"login": "findepi"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/DefaultJdbcMetadata.java", "diffHunk": "@@ -658,6 +662,40 @@ public boolean supportsMissingColumnsOnInsert()\n         return Optional.empty();\n     }\n \n+    @Override\n+    public ColumnHandle getDeleteRowIdColumnHandle(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        // This column is not actually used, but Presto engine requires this during analysis", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MjQwNjIwMw==", "bodyText": "Thanks.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r642406203", "createdAt": "2021-05-31T11:03:18Z", "author": {"login": "kokosing"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/DefaultJdbcMetadata.java", "diffHunk": "@@ -658,6 +662,40 @@ public boolean supportsMissingColumnsOnInsert()\n         return Optional.empty();\n     }\n \n+    @Override\n+    public ColumnHandle getDeleteRowIdColumnHandle(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        // This column is not actually used, but Presto engine requires this during analysis", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTI3MDkwMA=="}, "originalCommit": null, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk4ODAzODE1OnYy", "diffSide": "RIGHT", "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/JdbcTableHandle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxMToxMzoxM1rOJYHt9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxMToxMzoxM1rOJYHt9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTI3MjA1NQ==", "bodyText": "revert", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r629272055", "createdAt": "2021-05-10T11:13:13Z", "author": {"login": "findepi"}, "path": "plugin/trino-base-jdbc/src/main/java/io/trino/plugin/jdbc/JdbcTableHandle.java", "diffHunk": "@@ -100,6 +100,7 @@ public JdbcTableHandle(\n \n     /**\n      * @deprecated Use {@code asPlainTable().getSchemaTableName()} instead, but see those methods for more information, as this is not a drop-in replacement.\n+     * @return", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk4ODA1MDIzOnYy", "diffSide": "RIGHT", "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorSmokeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxMToxNjoyOFrOJYH1Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0zMVQxMTo0MjoyMFrOJkqjUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTI3MzkzMA==", "bodyText": "Why no SUPPORTS_DELETE, SUPPORTS_CREATE_VIEW as in BaseJdbcConnectorTest?\nDoes it indicate haps in the smoke test?", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r629273930", "createdAt": "2021-05-10T11:16:28Z", "author": {"login": "findepi"}, "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorSmokeTest.java", "diffHunk": "@@ -14,6 +14,20 @@\n package io.trino.plugin.jdbc;\n \n import io.trino.testing.BaseConnectorSmokeTest;\n+import io.trino.testing.TestingConnectorBehavior;\n \n public abstract class BaseJdbcConnectorSmokeTest\n-        extends BaseConnectorSmokeTest {}\n+        extends BaseConnectorSmokeTest\n+{\n+    @Override\n+    protected boolean hasBehavior(TestingConnectorBehavior connectorBehavior)\n+    {\n+        switch (connectorBehavior) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MjQyNTY4MA==", "bodyText": "The question should be: Why SUPPORTS_DELETE, SUPPORTS_CREATE_VIEW is in BaseJdbcConnectorTest given that it is set to defaults?", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r642425680", "createdAt": "2021-05-31T11:42:20Z", "author": {"login": "kokosing"}, "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorSmokeTest.java", "diffHunk": "@@ -14,6 +14,20 @@\n package io.trino.plugin.jdbc;\n \n import io.trino.testing.BaseConnectorSmokeTest;\n+import io.trino.testing.TestingConnectorBehavior;\n \n public abstract class BaseJdbcConnectorSmokeTest\n-        extends BaseConnectorSmokeTest {}\n+        extends BaseConnectorSmokeTest\n+{\n+    @Override\n+    protected boolean hasBehavior(TestingConnectorBehavior connectorBehavior)\n+    {\n+        switch (connectorBehavior) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTI3MzkzMA=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk4ODA1Mjg3OnYy", "diffSide": "RIGHT", "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxMToxNzoxN1rOJYH3Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxMToxNzoxN1rOJYH3Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTI3NDM3NQ==", "bodyText": "Don't skip the test. Instead, add proper conditions to the test (based on the declared hasBehavior)", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r629274375", "createdAt": "2021-05-10T11:17:17Z", "author": {"login": "findepi"}, "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorTest.java", "diffHunk": "@@ -125,6 +130,15 @@ protected TestTable createTableWithUnsupportedColumn()\n \n     // TODO move common tests from connector-specific classes here\n \n+    @Override\n+    public void testDelete()\n+    {\n+        // This test is covered by BaseConnectorTest.\n+        // testDelete is very broad test that tests all kinds of delete operation,\n+        // it assumes that either connector supports delete fully or not at all.\n+        throw new SkipException(\"This connector supports metadata delete only\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk4ODA1NDU3OnYy", "diffSide": "RIGHT", "path": "plugin/trino-clickhouse/src/test/java/io/trino/plugin/clickhouse/TestClickHouseConnectorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxMToxNzo1MVrOJYH4Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxMToxNzo1MVrOJYH4Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTI3NDYzOA==", "bodyText": "is it related?", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r629274638", "createdAt": "2021-05-10T11:17:51Z", "author": {"login": "findepi"}, "path": "plugin/trino-clickhouse/src/test/java/io/trino/plugin/clickhouse/TestClickHouseConnectorTest.java", "diffHunk": "@@ -70,6 +70,9 @@ protected boolean hasBehavior(TestingConnectorBehavior connectorBehavior)\n             case SUPPORTS_ARRAY:\n                 return false;\n \n+            case SUPPORTS_TOPN_PUSHDOWN:\n+                return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk4ODA1NDg3OnYy", "diffSide": "RIGHT", "path": "plugin/trino-clickhouse/src/main/java/io/trino/plugin/clickhouse/ClickHouseClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxMToxNzo1N1rOJYH4OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxMToxNzo1N1rOJYH4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTI3NDY4MQ==", "bodyText": "Document why", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r629274681", "createdAt": "2021-05-10T11:17:57Z", "author": {"login": "findepi"}, "path": "plugin/trino-clickhouse/src/main/java/io/trino/plugin/clickhouse/ClickHouseClient.java", "diffHunk": "@@ -266,6 +267,12 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n         return true;\n     }\n \n+    @Override\n+    public OptionalLong delete(ConnectorSession session, JdbcTableHandle handle)\n+    {\n+        throw new TrinoException(NOT_SUPPORTED, \"This connector does not support deletes\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk4ODA1NTM3OnYy", "diffSide": "RIGHT", "path": "plugin/trino-druid/src/main/java/io/trino/plugin/druid/DruidJdbcClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxMToxODowNlrOJYH4hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxMToxODowNlrOJYH4hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTI3NDc1OA==", "bodyText": "Document why", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r629274758", "createdAt": "2021-05-10T11:18:06Z", "author": {"login": "findepi"}, "path": "plugin/trino-druid/src/main/java/io/trino/plugin/druid/DruidJdbcClient.java", "diffHunk": "@@ -221,6 +222,12 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n         return true;\n     }\n \n+    @Override\n+    public OptionalLong delete(ConnectorSession session, JdbcTableHandle handle)\n+    {\n+        throw new TrinoException(NOT_SUPPORTED, \"This connector does not support deletes\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk4ODA2NjkyOnYy", "diffSide": "RIGHT", "path": "testing/trino-testing/src/main/java/io/trino/testing/TestingConnectorBehavior.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxMToyMToxOVrOJYH_UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxMToyMToxOVrOJYH_UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTI3NjQ5Ng==", "bodyText": "Sadly, this is a wrong name. It's hive-ism. \"metadata delete\" doesn't make any sense for JDBC connectors and that's not what implemented.\nWhat we're looking for here is \"delete delegation\" (or \"delete 'pushdown'\", but i think delegation is a better term).\n(Fortunately, there is nothing in testing connector behavior that requires us to reuse naming from SPI, and we already leverage that.)", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r629276496", "createdAt": "2021-05-10T11:21:19Z", "author": {"login": "findepi"}, "path": "testing/trino-testing/src/main/java/io/trino/testing/TestingConnectorBehavior.java", "diffHunk": "@@ -54,6 +54,8 @@\n \n     SUPPORTS_DELETE(false),\n     SUPPORTS_ROW_LEVEL_DELETE(SUPPORTS_DELETE),\n+    // See io.trino.spi.connector.ConnectorMetadata.supportsMetadataDelete\n+    SUPPORTS_METADATA_DELETE(SUPPORTS_DELETE),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk4ODA3MjE3OnYy", "diffSide": "RIGHT", "path": "testing/trino-testing/src/main/java/io/trino/testing/BaseConnectorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxMToyMjoyMlrOJYICFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxMToyMjoyMlrOJYICFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTI3NzIwNg==", "bodyText": "You cannot expect this. The connector may and up doing row-level delete.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r629277206", "createdAt": "2021-05-10T11:22:22Z", "author": {"login": "findepi"}, "path": "testing/trino-testing/src/main/java/io/trino/testing/BaseConnectorTest.java", "diffHunk": "@@ -577,4 +579,37 @@ public void testRenameTableAcrossSchema()\n         assertFalse(getQueryRunner().tableExists(getSession(), tableName));\n         assertFalse(getQueryRunner().tableExists(getSession(), renamedTable));\n     }\n+\n+    @Test\n+    public void testDeleteAllTable()\n+    {\n+        if (!hasBehavior(SUPPORTS_METADATA_DELETE)) {\n+            assertQueryFails(\"DELETE FROM region\", \"This connector does not support deletes\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk4ODA3NDg2OnYy", "diffSide": "LEFT", "path": "testing/trino-testing/src/main/java/io/trino/testing/BaseConnectorSmokeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxMToyMzoxMVrOJYIDsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxMToyMzoxMVrOJYIDsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTI3NzYxNw==", "bodyText": "Please bring this back. This check was verifying whether ! hasBehavior(SUPPORTS_DELETE)  is declared correctly.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r629277617", "createdAt": "2021-05-10T11:23:11Z", "author": {"login": "findepi"}, "path": "testing/trino-testing/src/main/java/io/trino/testing/BaseConnectorSmokeTest.java", "diffHunk": "@@ -165,26 +164,24 @@ public void testInsert()\n     }\n \n     @Test\n-    public void testDelete()\n+    public void testRowLevelDelete()\n     {\n-        if (!hasBehavior(SUPPORTS_DELETE)) {\n-            assertQueryFails(\"DELETE FROM region\", \"This connector does not support deletes\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk4ODA4MDM4OnYy", "diffSide": "RIGHT", "path": "testing/trino-testing/src/main/java/io/trino/testing/BaseConnectorSmokeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxMToyNDo0M1rOJYIG8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0xMFQxMToyNDo0M1rOJYIG8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTI3ODQ1MA==", "bodyText": "i'd suggest reverting this change.\nhasBehavior should allow us to drive the reusable test without need to split it up.\nthe need to split up the test indicates that testing behaviors are not defined/plugged ideally yet", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r629278450", "createdAt": "2021-05-10T11:24:43Z", "author": {"login": "findepi"}, "path": "testing/trino-testing/src/main/java/io/trino/testing/BaseConnectorSmokeTest.java", "diffHunk": "@@ -165,26 +164,24 @@ public void testInsert()\n     }\n \n     @Test\n-    public void testDelete()\n+    public void testRowLevelDelete()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDE3NzQ2NjY4OnYy", "diffSide": "RIGHT", "path": "testing/trino-testing/src/main/java/io/trino/testing/BaseConnectorSmokeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yNFQxMTowNzozNlrOJzX8gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yNFQxMToyMTozMVrOJzYeEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1Nzg0OTQ3Mw==", "bodyText": "specify actual expected rows.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r657849473", "createdAt": "2021-06-24T11:07:36Z", "author": {"login": "findepi"}, "path": "testing/trino-testing/src/main/java/io/trino/testing/BaseConnectorSmokeTest.java", "diffHunk": "@@ -183,9 +183,10 @@ public void testDelete()\n         assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM region\", 5);\n \n         assertUpdate(\"DELETE FROM \" + tableName + \" WHERE regionkey = 2\", 1);\n-        assertThat(query(\"SELECT regionkey FROM \" + tableName))\n-                .skippingTypesCheck()\n-                .matches(\"VALUES 0, 1, 3, 4\");\n+        assertThat(query(\"SELECT * FROM \" + tableName + \" WHERE regionkey = 2\"))\n+                .returnsRowsCount(0);\n+        assertThat(query(\"SELECT * FROM \" + tableName))\n+                .returnsRowsCount(4);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1Nzg1ODA2NQ==", "bodyText": "actaully -- revert the change here", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r657858065", "createdAt": "2021-06-24T11:21:31Z", "author": {"login": "findepi"}, "path": "testing/trino-testing/src/main/java/io/trino/testing/BaseConnectorSmokeTest.java", "diffHunk": "@@ -183,9 +183,10 @@ public void testDelete()\n         assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM region\", 5);\n \n         assertUpdate(\"DELETE FROM \" + tableName + \" WHERE regionkey = 2\", 1);\n-        assertThat(query(\"SELECT regionkey FROM \" + tableName))\n-                .skippingTypesCheck()\n-                .matches(\"VALUES 0, 1, 3, 4\");\n+        assertThat(query(\"SELECT * FROM \" + tableName + \" WHERE regionkey = 2\"))\n+                .returnsRowsCount(0);\n+        assertThat(query(\"SELECT * FROM \" + tableName))\n+                .returnsRowsCount(4);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1Nzg0OTQ3Mw=="}, "originalCommit": null, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDE3NzQ2OTQ4OnYy", "diffSide": "RIGHT", "path": "core/trino-main/src/test/java/io/trino/sql/query/QueryAssertions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yNFQxMTowODoyMFrOJzX-JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yNFQxMTowODoyMFrOJzX-JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1Nzg0OTg5Mw==", "bodyText": "i think this method is not necessary -- at least not in this PR, since the only two usages should be better served with returnsEmptyResult and exact result check respectively.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r657849893", "createdAt": "2021-06-24T11:08:20Z", "author": {"login": "findepi"}, "path": "core/trino-main/src/test/java/io/trino/sql/query/QueryAssertions.java", "diffHunk": "@@ -385,9 +385,14 @@ private static void assertTypes(MaterializedResult actual, List<Type> expectedTy\n         }\n \n         public QueryAssert returnsEmptyResult()\n+        {\n+            return returnsRowsCount(0);\n+        }\n+\n+        public QueryAssert returnsRowsCount(int expected)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDE3NzQ4OTgxOnYy", "diffSide": "RIGHT", "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yNFQxMToxMzoyOFrOJzYKUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yNFQxMToxMzoyOFrOJzYKUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1Nzg1MzAxMQ==", "bodyText": "revert", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r657853011", "createdAt": "2021-06-24T11:13:28Z", "author": {"login": "findepi"}, "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorTest.java", "diffHunk": "@@ -1034,7 +1049,7 @@ private void assertConditionallyOrderedPushedDown(\n \n     private boolean expectJoinPushdown(String operator)\n     {\n-        if (\"IS NOT DISTINCT FROM\".equals(operator)) {\n+        if (\"IS NOT DISTINCT FROM\" .equals(operator)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDE3NzQ5MDE0OnYy", "diffSide": "RIGHT", "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yNFQxMToxMzozMlrOJzYKhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yNFQxMToxMzozMlrOJzYKhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1Nzg1MzA2MA==", "bodyText": "revert", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r657853060", "createdAt": "2021-06-24T11:13:32Z", "author": {"login": "findepi"}, "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorTest.java", "diffHunk": "@@ -1054,7 +1069,7 @@ private boolean expectJoinPushdown(String operator)\n \n     private boolean expectVarcharJoinPushdown(String operator)\n     {\n-        if (\"IS NOT DISTINCT FROM\".equals(operator)) {\n+        if (\"IS NOT DISTINCT FROM\" .equals(operator)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDE3NzQ5ODIxOnYy", "diffSide": "RIGHT", "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yNFQxMToxNToyN1rOJzYPSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yNFQxMToxNToyN1rOJzYPSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1Nzg1NDI4MQ==", "bodyText": "the expected message should be exact, since it's about a well defined case where predicate is not subsumed.\nif (!hasBehavior(SUPPORTS_DELETE)) {\n // handled in other test\n // OR assertQueryFails(\"DELETE FROM nation\", \"This connector does not support deletes\");\n return;\n}\nif (!hasBehavior(SUPPORTS_PREDICATE_PUSHDOWN_WITH_VARCHAR_EQUALITY)) {\n  ... this assertion, but with exact expected message ...\n}", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r657854281", "createdAt": "2021-06-24T11:15:27Z", "author": {"login": "findepi"}, "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorTest.java", "diffHunk": "@@ -1146,4 +1161,118 @@ protected TestView createSleepingView(Duration minimalSleepDuration)\n     {\n         throw new UnsupportedOperationException();\n     }\n+\n+    @Test\n+    public void testMetadataDeleteWithBigintEquality()\n+    {\n+        if (!hasBehavior(SUPPORTS_DELETE)) {\n+            assertQueryFails(\"DELETE FROM region WHERE regionkey = 1\", \"This connector does not support deletes\");\n+            return;\n+        }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM region\", 5);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE regionkey = 1\", 1);\n+        assertQuery(\"SELECT count(*) FROM \" + tableName, \"VALUES 4\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @Test\n+    public void testMetadataDeleteWithVarcharEquality()\n+    {\n+        if (!hasBehavior(SUPPORTS_DELETE) || !hasBehavior(SUPPORTS_PREDICATE_PUSHDOWN_WITH_VARCHAR_EQUALITY)) {\n+            assertQueryFails(\n+                    \"DELETE FROM nation WHERE name = 'ALBANIA'\",\n+                    \"(.*[Dd]elet(e|ing).*(not |un)supported.*)\" +\n+                            \"|(This connector does not support deletes)\" +\n+                            \"|(Unsupported delete)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDE3NzUwMTIzOnYy", "diffSide": "RIGHT", "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yNFQxMToxNjowNlrOJzYREQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yNFQxMToxNjowNlrOJzYREQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1Nzg1NDczNw==", "bodyText": "assert exact rows, eg with regionkey, name projection", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r657854737", "createdAt": "2021-06-24T11:16:06Z", "author": {"login": "findepi"}, "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorTest.java", "diffHunk": "@@ -1146,4 +1161,118 @@ protected TestView createSleepingView(Duration minimalSleepDuration)\n     {\n         throw new UnsupportedOperationException();\n     }\n+\n+    @Test\n+    public void testMetadataDeleteWithBigintEquality()\n+    {\n+        if (!hasBehavior(SUPPORTS_DELETE)) {\n+            assertQueryFails(\"DELETE FROM region WHERE regionkey = 1\", \"This connector does not support deletes\");\n+            return;\n+        }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM region\", 5);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE regionkey = 1\", 1);\n+        assertQuery(\"SELECT count(*) FROM \" + tableName, \"VALUES 4\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDE3NzUxMTMzOnYy", "diffSide": "RIGHT", "path": "plugin/trino-druid/src/main/java/io/trino/plugin/druid/DruidJdbcClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yNFQxMToxODozOVrOJzYXKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yNFQxMToxODozOVrOJzYXKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1Nzg1NjI5OA==", "bodyText": "any link to an issue we could include here?", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r657856298", "createdAt": "2021-06-24T11:18:39Z", "author": {"login": "findepi"}, "path": "plugin/trino-druid/src/main/java/io/trino/plugin/druid/DruidJdbcClient.java", "diffHunk": "@@ -222,6 +223,13 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n         return true;\n     }\n \n+    @Override\n+    public OptionalLong delete(ConnectorSession session, JdbcTableHandle handle)\n+    {\n+        // DELETE statement is not yet support in Druid (Avatica JDBC)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDE3NzUxNjMxOnYy", "diffSide": "RIGHT", "path": "plugin/trino-postgresql/src/main/java/io/trino/plugin/postgresql/PostgreSqlClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yNFQxMToxOTo0OFrOJzYaDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yNVQxMDozNzozOFrOJ0J6kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1Nzg1NzAzNw==", "bodyText": "redundant, because we did not disable autocommit\nsince this is the only different between this & super, remove override", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r657857037", "createdAt": "2021-06-24T11:19:48Z", "author": {"login": "findepi"}, "path": "plugin/trino-postgresql/src/main/java/io/trino/plugin/postgresql/PostgreSqlClient.java", "diffHunk": "@@ -748,6 +751,25 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n         return true;\n     }\n \n+    @Override\n+    public OptionalLong delete(ConnectorSession session, JdbcTableHandle handle)\n+    {\n+        checkArgument(handle.isNamedRelation(), \"Unable to delete from synthetic table: %s\", handle);\n+        checkArgument(handle.getLimit().isEmpty(), \"Unable to delete when limit is set: %s\", handle);\n+        try (Connection connection = connectionFactory.openConnection(session)) {\n+            QueryBuilder queryBuilder = new QueryBuilder(this);\n+            PreparedQuery preparedQuery = queryBuilder.prepareDelete(session, connection, handle.getRequiredNamedRelation(), handle.getConstraint());\n+            try (PreparedStatement preparedStatement = queryBuilder.prepareStatement(session, connection, preparedQuery)) {\n+                int affectedRowsCount = preparedStatement.executeUpdate();\n+                connection.commit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1ODY2ODE3OA==", "bodyText": "I will add a comment, it is required. Otherwise PSQL does not commit the delete.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r658668178", "createdAt": "2021-06-25T10:37:38Z", "author": {"login": "kokosing"}, "path": "plugin/trino-postgresql/src/main/java/io/trino/plugin/postgresql/PostgreSqlClient.java", "diffHunk": "@@ -748,6 +751,25 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n         return true;\n     }\n \n+    @Override\n+    public OptionalLong delete(ConnectorSession session, JdbcTableHandle handle)\n+    {\n+        checkArgument(handle.isNamedRelation(), \"Unable to delete from synthetic table: %s\", handle);\n+        checkArgument(handle.getLimit().isEmpty(), \"Unable to delete when limit is set: %s\", handle);\n+        try (Connection connection = connectionFactory.openConnection(session)) {\n+            QueryBuilder queryBuilder = new QueryBuilder(this);\n+            PreparedQuery preparedQuery = queryBuilder.prepareDelete(session, connection, handle.getRequiredNamedRelation(), handle.getConstraint());\n+            try (PreparedStatement preparedStatement = queryBuilder.prepareStatement(session, connection, preparedQuery)) {\n+                int affectedRowsCount = preparedStatement.executeUpdate();\n+                connection.commit();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1Nzg1NzAzNw=="}, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDE3NzUxOTQ0OnYy", "diffSide": "LEFT", "path": "testing/trino-testing/src/main/java/io/trino/testing/AbstractTestDistributedQueries.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yNFQxMToyMDozN1rOJzYb8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yNFQxMToyMDozN1rOJzYb8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1Nzg1NzUyMQ==", "bodyText": "is it only reorg of test cases?\nmove to separate commit", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r657857521", "createdAt": "2021-06-24T11:20:37Z", "author": {"login": "findepi"}, "path": "testing/trino-testing/src/main/java/io/trino/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -616,19 +616,8 @@ public void testDelete()\n         }\n \n         String tableName = \"test_delete_\" + randomTableSuffix();\n-        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM orders\", \"SELECT count(*) FROM orders\");\n-\n-        // delete half the table, then delete the rest\n-        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE orderkey % 2 = 0\", \"SELECT count(*) FROM orders WHERE orderkey % 2 = 0\");\n-        assertQuery(\"SELECT * FROM \" + tableName, \"SELECT * FROM orders WHERE orderkey % 2 <> 0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDE3NzUyNjA1OnYy", "diffSide": "RIGHT", "path": "testing/trino-testing/src/main/java/io/trino/testing/BaseConnectorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yNFQxMToyMjoxNFrOJzYf6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yNFQxMToyMjoxNFrOJzYf6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1Nzg1ODUzNg==", "bodyText": "Let's make it exact (without |), i hope it is possible", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r657858536", "createdAt": "2021-06-24T11:22:14Z", "author": {"login": "findepi"}, "path": "testing/trino-testing/src/main/java/io/trino/testing/BaseConnectorTest.java", "diffHunk": "@@ -725,4 +726,42 @@ public void testRenameTableAcrossSchema()\n         assertFalse(getQueryRunner().tableExists(getSession(), tableName));\n         assertFalse(getQueryRunner().tableExists(getSession(), renamedTable));\n     }\n+\n+    @Test\n+    public void testDeleteAllTable()\n+    {\n+        if (!hasBehavior(SUPPORTS_DELETE)) {\n+            assertQueryFails(\"DELETE FROM region\", \"This connector does not support deletes\");\n+            return;\n+        }\n+\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM nation\", 25);\n+        // not using assertUpdate as some connectors provide update count and some not\n+        getQueryRunner().execute(\"DELETE FROM \" + tableName);\n+        assertQuery(\"SELECT count(*) FROM \" + tableName, \"VALUES 0\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @Test\n+    public void testRowLevelDelete()\n+    {\n+        if (!hasBehavior(SUPPORTS_DELETE)) {\n+            assertQueryFails(\"DELETE FROM region\", \"This connector does not support deletes\");\n+            return;\n+        }\n+        if (!hasBehavior(SUPPORTS_ROW_LEVEL_DELETE)) {\n+            assertQueryFails(\n+                    \"DELETE FROM nation WHERE nationkey = 2\",\n+                    \"(.*[Dd]elet(e|ing).*(not |un)supported.*)\" +\n+                            \"|(This connector does not support deletes)\" +\n+                            \"|(Unsupported delete)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDE3NzUyODE2OnYy", "diffSide": "RIGHT", "path": "plugin/trino-iceberg/src/test/java/io/trino/plugin/iceberg/AbstractTestIcebergConnectorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yNFQxMToyMjo0NlrOJzYhKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yNFQxMToyMjo0NlrOJzYhKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1Nzg1ODg1OA==", "bodyText": "move out new tests / test refactor to a commit separate from JDBC delete", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r657858858", "createdAt": "2021-06-24T11:22:46Z", "author": {"login": "findepi"}, "path": "plugin/trino-iceberg/src/test/java/io/trino/plugin/iceberg/AbstractTestIcebergConnectorTest.java", "diffHunk": "@@ -141,6 +141,54 @@ public void testDelete()\n                 .hasStackTraceContaining(\"This connector only supports delete where one or more partitions are deleted entirely\");\n     }\n \n+    @Override\n+    public void testDeleteWithComplexPredicate()\n+    {\n+        // Deletes are covered with testMetadata*Delete test methods\n+        assertThatThrownBy(super::testDeleteWithComplexPredicate)\n+                .hasStackTraceContaining(\"This connector only supports delete where one or more partitions are deleted entirely\");\n+    }\n+\n+    @Override\n+    public void testDeleteWithSemiJoin()\n+    {\n+        // Deletes are covered with testMetadata*Delete test methods\n+        assertThatThrownBy(super::testDeleteWithSemiJoin)\n+                .hasStackTraceContaining(\"This connector only supports delete where one or more partitions are deleted entirely\");\n+    }\n+\n+    @Override\n+    public void testDeleteWithSubquery()\n+    {\n+        // Deletes are covered with testMetadata*Delete test methods\n+        assertThatThrownBy(super::testDeleteWithSubquery)\n+                .hasStackTraceContaining(\"This connector only supports delete where one or more partitions are deleted entirely\");\n+    }\n+\n+    @Override\n+    public void testDeleteWithVarcharPredicate()\n+    {\n+        // Deletes are covered with testMetadata*Delete test methods\n+        assertThatThrownBy(super::testDeleteWithVarcharPredicate)\n+                .hasStackTraceContaining(\"This connector only supports delete where one or more partitions are deleted entirely\");\n+    }\n+\n+    @Override\n+    public void testDeleteAllTable()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDE5MDgzMzMyOnYy", "diffSide": "RIGHT", "path": "plugin/trino-iceberg/src/test/java/io/trino/plugin/iceberg/AbstractTestIcebergConnectorTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yOFQxMzo1Njo1OVrOJ1PpLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yOVQwOToxNTo0NlrOJ11oog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTgxMDYwNA==", "bodyText": "Outdated comments?\nmaybe just remove them?", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r659810604", "createdAt": "2021-06-28T13:56:59Z", "author": {"login": "ssheikin"}, "path": "plugin/trino-iceberg/src/test/java/io/trino/plugin/iceberg/AbstractTestIcebergConnectorTest.java", "diffHunk": "@@ -141,6 +141,46 @@ public void testDelete()\n                 .hasStackTraceContaining(\"This connector only supports delete where one or more partitions are deleted entirely\");\n     }\n \n+    @Override\n+    public void testDeleteWithComplexPredicate()\n+    {\n+        // Deletes are covered with testMetadata*Delete test methods", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDM3OTk5Mg==", "bodyText": "No. It is copied from other not supported test for deletes. Delete in Iceberg is special.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r660379992", "createdAt": "2021-06-29T08:07:24Z", "author": {"login": "kokosing"}, "path": "plugin/trino-iceberg/src/test/java/io/trino/plugin/iceberg/AbstractTestIcebergConnectorTest.java", "diffHunk": "@@ -141,6 +141,46 @@ public void testDelete()\n                 .hasStackTraceContaining(\"This connector only supports delete where one or more partitions are deleted entirely\");\n     }\n \n+    @Override\n+    public void testDeleteWithComplexPredicate()\n+    {\n+        // Deletes are covered with testMetadata*Delete test methods", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTgxMDYwNA=="}, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDQzMzA1OA==", "bodyText": "I see only testMetadataDelete (without star) in codebase and in this pr.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r660433058", "createdAt": "2021-06-29T09:15:46Z", "author": {"login": "ssheikin"}, "path": "plugin/trino-iceberg/src/test/java/io/trino/plugin/iceberg/AbstractTestIcebergConnectorTest.java", "diffHunk": "@@ -141,6 +141,46 @@ public void testDelete()\n                 .hasStackTraceContaining(\"This connector only supports delete where one or more partitions are deleted entirely\");\n     }\n \n+    @Override\n+    public void testDeleteWithComplexPredicate()\n+    {\n+        // Deletes are covered with testMetadata*Delete test methods", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTgxMDYwNA=="}, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDE5MDg0MzcxOnYy", "diffSide": "RIGHT", "path": "plugin/trino-hive/src/test/java/io/trino/plugin/hive/TestHiveConnectorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yOFQxMzo1ODo1MFrOJ1Pvpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yOFQxMzo1ODo1MFrOJ1Pvpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTgxMjI2Mw==", "bodyText": "testDeleteWithSubquery -> testDeleteWithVarcharPredicate", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r659812263", "createdAt": "2021-06-28T13:58:50Z", "author": {"login": "ssheikin"}, "path": "plugin/trino-hive/src/test/java/io/trino/plugin/hive/TestHiveConnectorTest.java", "diffHunk": "@@ -222,6 +222,41 @@ public void testDelete()\n                 .hasStackTraceContaining(\"Deletes must match whole partitions for non-transactional tables\");\n     }\n \n+    @Override\n+    public void testDeleteWithComplexPredicate()\n+    {\n+        assertThatThrownBy(super::testDeleteWithComplexPredicate)\n+                .hasStackTraceContaining(\"Deletes must match whole partitions for non-transactional tables\");\n+    }\n+\n+    @Override\n+    public void testDeleteWithSemiJoin()\n+    {\n+        assertThatThrownBy(super::testDeleteWithSemiJoin)\n+                .hasStackTraceContaining(\"Deletes must match whole partitions for non-transactional tables\");\n+    }\n+\n+    @Override\n+    public void testDeleteWithSubquery()\n+    {\n+        assertThatThrownBy(super::testDeleteWithSubquery)\n+                .hasStackTraceContaining(\"Deletes must match whole partitions for non-transactional tables\");\n+    }\n+\n+    @Override\n+    public void testDeleteWithVarcharPredicate()\n+    {\n+        assertThatThrownBy(super::testDeleteWithSubquery)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDE5MDk3NzMzOnYy", "diffSide": "RIGHT", "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yOFQxNDoyMzozMVrOJ1RC_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yOFQxNDoyMzozMVrOJ1RC_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTgzMzU5OQ==", "bodyText": "I know we already discussed it before, but I'm still not convinced to a check where the result is compared with 0.\nUp to you.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r659833599", "createdAt": "2021-06-28T14:23:31Z", "author": {"login": "ssheikin"}, "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorTest.java", "diffHunk": "@@ -1146,4 +1162,121 @@ protected TestView createSleepingView(Duration minimalSleepDuration)\n     {\n         throw new UnsupportedOperationException();\n     }\n+\n+    @Test\n+    public void testDeleteWithBigintEqualityPredicate()\n+    {\n+        if (!hasBehavior(SUPPORTS_DELETE)) {\n+            assertQueryFails(\"DELETE FROM region WHERE regionkey = 1\", \"This connector does not support deletes\");\n+            return;\n+        }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM region\", 5);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE regionkey = 1\", 1);\n+        assertQuery(\n+                \"SELECT regionkey, name FROM \" + tableName,\n+                \"VALUES \"\n+                        + \"(0, 'AFRICA'),\"\n+                        + \"(2, 'ASIA'),\"\n+                        + \"(3, 'EUROPE'),\"\n+                        + \"(4, 'MIDDLE EAST')\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @Test\n+    public void testDeleteWithVarcharEqualityPredicate()\n+    {\n+        try (TestTable table = new TestTable(getQueryRunner()::execute, \"test_delete\", \"(col varchar(1))\", ImmutableList.of(\"'a'\", \"'A'\", \"null\"))) {\n+            if (!hasBehavior(SUPPORTS_DELETE)) {\n+                assertQueryFails(\"DELETE FROM \" + table.getName(), \"This connector does not support deletes\");\n+                return;\n+            }\n+            if (!hasBehavior(SUPPORTS_PREDICATE_PUSHDOWN_WITH_VARCHAR_EQUALITY)) {\n+                assertQueryFails(\"DELETE FROM \" + table.getName() + \" WHERE col = 'A'\", \"Unsupported delete\");\n+                return;\n+            }\n+\n+            assertUpdate(\"DELETE FROM \" + table.getName() + \" WHERE col = 'A'\", 1);\n+            assertQuery(\"SELECT * FROM \" + table.getName(), \"VALUES 'a', null\");\n+        }\n+    }\n+\n+    @Test\n+    public void testDeleteWithVarcharInequalityPredicate()\n+    {\n+        try (TestTable table = new TestTable(getQueryRunner()::execute, \"test_delete\", \"(col varchar(1))\", ImmutableList.of(\"'a'\", \"'A'\", \"null\"))) {\n+            if (!hasBehavior(SUPPORTS_DELETE)) {\n+                assertQueryFails(\"DELETE FROM \" + table.getName(), \"This connector does not support deletes\");\n+                return;\n+            }\n+            if (!hasBehavior(SUPPORTS_PREDICATE_PUSHDOWN_WITH_VARCHAR_INEQUALITY)) {\n+                assertQueryFails(\"DELETE FROM \" + table.getName() + \" WHERE col != 'A'\", \"Unsupported delete\");\n+                return;\n+            }\n+\n+            assertUpdate(\"DELETE FROM \" + table.getName() + \" WHERE col != 'A'\", 1);\n+            assertQuery(\"SELECT * FROM \" + table.getName(), \"VALUES 'A', null\");\n+        }\n+    }\n+\n+    @Test\n+    public void testDeleteWithVarcharGreaterAndLowerPredicate()\n+    {\n+        try (TestTable table = new TestTable(getQueryRunner()::execute, \"test_delete\", \"(col varchar(1))\", ImmutableList.of(\"'a'\", \"'A'\", \"'b'\", \"null\"))) {\n+            if (!hasBehavior(SUPPORTS_DELETE)) {\n+                assertQueryFails(\"DELETE FROM \" + table.getName(), \"This connector does not support deletes\");\n+                return;\n+            }\n+            if (!hasBehavior(SUPPORTS_PREDICATE_PUSHDOWN_WITH_VARCHAR_INEQUALITY)) {\n+                assertQueryFails(\"DELETE FROM \" + table.getName() + \" WHERE col < 'A'\", \"Unsupported delete\");\n+                assertQueryFails(\"DELETE FROM \" + table.getName() + \" WHERE col > 'A'\", \"Unsupported delete\");\n+                return;\n+            }\n+\n+            assertUpdate(\"DELETE FROM \" + table.getName() + \" WHERE col < 'A'\", 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDE5MTAwNDk3OnYy", "diffSide": "RIGHT", "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yOFQxNDoyODoyNFrOJ1RTtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yOFQxNDoyODoyNFrOJ1RTtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTgzNzg3OA==", "bodyText": "unnecessary comment", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r659837878", "createdAt": "2021-06-28T14:28:24Z", "author": {"login": "ssheikin"}, "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorTest.java", "diffHunk": "@@ -1146,4 +1162,121 @@ protected TestView createSleepingView(Duration minimalSleepDuration)\n     {\n         throw new UnsupportedOperationException();\n     }\n+\n+    @Test\n+    public void testDeleteWithBigintEqualityPredicate()\n+    {\n+        if (!hasBehavior(SUPPORTS_DELETE)) {\n+            assertQueryFails(\"DELETE FROM region WHERE regionkey = 1\", \"This connector does not support deletes\");\n+            return;\n+        }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM region\", 5);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE regionkey = 1\", 1);\n+        assertQuery(\n+                \"SELECT regionkey, name FROM \" + tableName,\n+                \"VALUES \"\n+                        + \"(0, 'AFRICA'),\"\n+                        + \"(2, 'ASIA'),\"\n+                        + \"(3, 'EUROPE'),\"\n+                        + \"(4, 'MIDDLE EAST')\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @Test\n+    public void testDeleteWithVarcharEqualityPredicate()\n+    {\n+        try (TestTable table = new TestTable(getQueryRunner()::execute, \"test_delete\", \"(col varchar(1))\", ImmutableList.of(\"'a'\", \"'A'\", \"null\"))) {\n+            if (!hasBehavior(SUPPORTS_DELETE)) {\n+                assertQueryFails(\"DELETE FROM \" + table.getName(), \"This connector does not support deletes\");\n+                return;\n+            }\n+            if (!hasBehavior(SUPPORTS_PREDICATE_PUSHDOWN_WITH_VARCHAR_EQUALITY)) {\n+                assertQueryFails(\"DELETE FROM \" + table.getName() + \" WHERE col = 'A'\", \"Unsupported delete\");\n+                return;\n+            }\n+\n+            assertUpdate(\"DELETE FROM \" + table.getName() + \" WHERE col = 'A'\", 1);\n+            assertQuery(\"SELECT * FROM \" + table.getName(), \"VALUES 'a', null\");\n+        }\n+    }\n+\n+    @Test\n+    public void testDeleteWithVarcharInequalityPredicate()\n+    {\n+        try (TestTable table = new TestTable(getQueryRunner()::execute, \"test_delete\", \"(col varchar(1))\", ImmutableList.of(\"'a'\", \"'A'\", \"null\"))) {\n+            if (!hasBehavior(SUPPORTS_DELETE)) {\n+                assertQueryFails(\"DELETE FROM \" + table.getName(), \"This connector does not support deletes\");\n+                return;\n+            }\n+            if (!hasBehavior(SUPPORTS_PREDICATE_PUSHDOWN_WITH_VARCHAR_INEQUALITY)) {\n+                assertQueryFails(\"DELETE FROM \" + table.getName() + \" WHERE col != 'A'\", \"Unsupported delete\");\n+                return;\n+            }\n+\n+            assertUpdate(\"DELETE FROM \" + table.getName() + \" WHERE col != 'A'\", 1);\n+            assertQuery(\"SELECT * FROM \" + table.getName(), \"VALUES 'A', null\");\n+        }\n+    }\n+\n+    @Test\n+    public void testDeleteWithVarcharGreaterAndLowerPredicate()\n+    {\n+        try (TestTable table = new TestTable(getQueryRunner()::execute, \"test_delete\", \"(col varchar(1))\", ImmutableList.of(\"'a'\", \"'A'\", \"'b'\", \"null\"))) {\n+            if (!hasBehavior(SUPPORTS_DELETE)) {\n+                assertQueryFails(\"DELETE FROM \" + table.getName(), \"This connector does not support deletes\");\n+                return;\n+            }\n+            if (!hasBehavior(SUPPORTS_PREDICATE_PUSHDOWN_WITH_VARCHAR_INEQUALITY)) {\n+                assertQueryFails(\"DELETE FROM \" + table.getName() + \" WHERE col < 'A'\", \"Unsupported delete\");\n+                assertQueryFails(\"DELETE FROM \" + table.getName() + \" WHERE col > 'A'\", \"Unsupported delete\");\n+                return;\n+            }\n+\n+            assertUpdate(\"DELETE FROM \" + table.getName() + \" WHERE col < 'A'\", 0);\n+            assertQuery(\"SELECT * FROM \" + table.getName(), \"VALUES 'a', 'A', 'b', null\");\n+            assertUpdate(\"DELETE FROM \" + table.getName() + \" WHERE col > 'A'\", 2);\n+            assertQuery(\"SELECT * FROM \" + table.getName(), \"VALUES 'A', null\");\n+        }\n+    }\n+\n+    @Override\n+    public void testDeleteWithComplexPredicate()\n+    {\n+        if (!hasBehavior(SUPPORTS_DELETE)) {\n+            assertQueryFails(\"DELETE FROM nation\", \"This connector does not support deletes\");\n+            return;\n+        }\n+        assertThatThrownBy(() -> super.testDeleteWithComplexPredicate())\n+                .hasStackTraceContaining(\"TrinoException: Unsupported delete\");\n+    }\n+\n+    @Override\n+    public void testDeleteWithSubquery()\n+    {\n+        if (!hasBehavior(SUPPORTS_DELETE)) {\n+            assertQueryFails(\"DELETE FROM nation\", \"This connector does not support deletes\");\n+            return;\n+        }\n+        assertThatThrownBy(() -> super.testDeleteWithSubquery())\n+                .hasStackTraceContaining(\"TrinoException: Unsupported delete\");\n+    }\n+\n+    @Override\n+    public void testDeleteWithSemiJoin()\n+    {\n+        if (!hasBehavior(SUPPORTS_DELETE)) {\n+            assertQueryFails(\"DELETE FROM nation\", \"This connector does not support deletes\");\n+            return;\n+        }\n+        assertThatThrownBy(() -> super.testDeleteWithSemiJoin())\n+                .hasStackTraceContaining(\"TrinoException: Unsupported delete\");\n+    }\n+\n+    @Override\n+    public void testDeleteWithVarcharPredicate()\n+    {\n+        // testMetadataDeleteWithVarcharEquality", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDE5NDU4MTA3OnYy", "diffSide": "RIGHT", "path": "testing/trino-testing/src/main/java/io/trino/testing/AbstractTestDistributedQueries.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yOVQwODoxMTo1MFrOJ1ymeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yOVQwODoxNjoxNVrOJ1yzRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDM4MzM1Mw==", "bodyText": "Can we add support for correlated sub query ... So that we could ensure it works for corelated joins too.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r660383353", "createdAt": "2021-06-29T08:11:50Z", "author": {"login": "Praveen2112"}, "path": "testing/trino-testing/src/main/java/io/trino/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -675,8 +696,26 @@ public void testDelete()\n \n         assertUpdate(\"DROP TABLE \" + tableName);\n \n-        // delete with multiple SemiJoin\n+        // delete using a scalar and EXISTS subquery\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM orders\", \"SELECT count(*) FROM orders\");\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE orderkey = (SELECT orderkey FROM orders ORDER BY orderkey LIMIT 1)\", 1);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE orderkey = (SELECT orderkey FROM orders WHERE false)\", 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDM4NjYyOA==", "bodyText": "It is out of the scope of this PR. Surely it won't be supported for jdbc connectors.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r660386628", "createdAt": "2021-06-29T08:16:15Z", "author": {"login": "kokosing"}, "path": "testing/trino-testing/src/main/java/io/trino/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -675,8 +696,26 @@ public void testDelete()\n \n         assertUpdate(\"DROP TABLE \" + tableName);\n \n-        // delete with multiple SemiJoin\n+        // delete using a scalar and EXISTS subquery\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM orders\", \"SELECT count(*) FROM orders\");\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE orderkey = (SELECT orderkey FROM orders ORDER BY orderkey LIMIT 1)\", 1);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE orderkey = (SELECT orderkey FROM orders WHERE false)\", 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDM4MzM1Mw=="}, "originalCommit": null, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDE5NDg3OTEzOnYy", "diffSide": "RIGHT", "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yOVQwOToxMToyMVrOJ11bQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yOVQwOTozNzo0MVrOJ12qeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDQyOTYzMg==", "bodyText": "Where does testMetadataDeleteWithVarcharEquality live?", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r660429632", "createdAt": "2021-06-29T09:11:21Z", "author": {"login": "ssheikin"}, "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorTest.java", "diffHunk": "@@ -1146,4 +1162,120 @@ protected TestView createSleepingView(Duration minimalSleepDuration)\n     {\n         throw new UnsupportedOperationException();\n     }\n+\n+    @Test\n+    public void testDeleteWithBigintEqualityPredicate()\n+    {\n+        if (!hasBehavior(SUPPORTS_DELETE)) {\n+            assertQueryFails(\"DELETE FROM region WHERE regionkey = 1\", \"This connector does not support deletes\");\n+            return;\n+        }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM region\", 5);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE regionkey = 1\", 1);\n+        assertQuery(\n+                \"SELECT regionkey, name FROM \" + tableName,\n+                \"VALUES \"\n+                        + \"(0, 'AFRICA'),\"\n+                        + \"(2, 'ASIA'),\"\n+                        + \"(3, 'EUROPE'),\"\n+                        + \"(4, 'MIDDLE EAST')\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @Test\n+    public void testDeleteWithVarcharEqualityPredicate()\n+    {\n+        try (TestTable table = new TestTable(getQueryRunner()::execute, \"test_delete\", \"(col varchar(1))\", ImmutableList.of(\"'a'\", \"'A'\", \"null\"))) {\n+            if (!hasBehavior(SUPPORTS_DELETE)) {\n+                assertQueryFails(\"DELETE FROM \" + table.getName(), \"This connector does not support deletes\");\n+                return;\n+            }\n+            if (!hasBehavior(SUPPORTS_PREDICATE_PUSHDOWN_WITH_VARCHAR_EQUALITY)) {\n+                assertQueryFails(\"DELETE FROM \" + table.getName() + \" WHERE col = 'A'\", \"Unsupported delete\");\n+                return;\n+            }\n+\n+            assertUpdate(\"DELETE FROM \" + table.getName() + \" WHERE col = 'A'\", 1);\n+            assertQuery(\"SELECT * FROM \" + table.getName(), \"VALUES 'a', null\");\n+        }\n+    }\n+\n+    @Test\n+    public void testDeleteWithVarcharInequalityPredicate()\n+    {\n+        try (TestTable table = new TestTable(getQueryRunner()::execute, \"test_delete\", \"(col varchar(1))\", ImmutableList.of(\"'a'\", \"'A'\", \"null\"))) {\n+            if (!hasBehavior(SUPPORTS_DELETE)) {\n+                assertQueryFails(\"DELETE FROM \" + table.getName(), \"This connector does not support deletes\");\n+                return;\n+            }\n+            if (!hasBehavior(SUPPORTS_PREDICATE_PUSHDOWN_WITH_VARCHAR_INEQUALITY)) {\n+                assertQueryFails(\"DELETE FROM \" + table.getName() + \" WHERE col != 'A'\", \"Unsupported delete\");\n+                return;\n+            }\n+\n+            assertUpdate(\"DELETE FROM \" + table.getName() + \" WHERE col != 'A'\", 1);\n+            assertQuery(\"SELECT * FROM \" + table.getName(), \"VALUES 'A', null\");\n+        }\n+    }\n+\n+    @Test\n+    public void testDeleteWithVarcharGreaterAndLowerPredicate()\n+    {\n+        try (TestTable table = new TestTable(getQueryRunner()::execute, \"test_delete\", \"(col varchar(1))\", ImmutableList.of(\"'0'\", \"'a'\", \"'A'\", \"'b'\", \"null\"))) {\n+            if (!hasBehavior(SUPPORTS_DELETE)) {\n+                assertQueryFails(\"DELETE FROM \" + table.getName(), \"This connector does not support deletes\");\n+                return;\n+            }\n+            if (!hasBehavior(SUPPORTS_PREDICATE_PUSHDOWN_WITH_VARCHAR_INEQUALITY)) {\n+                assertQueryFails(\"DELETE FROM \" + table.getName() + \" WHERE col < 'A'\", \"Unsupported delete\");\n+                assertQueryFails(\"DELETE FROM \" + table.getName() + \" WHERE col > 'A'\", \"Unsupported delete\");\n+                return;\n+            }\n+\n+            assertUpdate(\"DELETE FROM \" + table.getName() + \" WHERE col < 'A'\", 1);\n+            assertQuery(\"SELECT * FROM \" + table.getName(), \"VALUES 'a', 'A', 'b', null\");\n+            assertUpdate(\"DELETE FROM \" + table.getName() + \" WHERE col > 'A'\", 2);\n+            assertQuery(\"SELECT * FROM \" + table.getName(), \"VALUES 'A', null\");\n+        }\n+    }\n+\n+    @Override\n+    public void testDeleteWithComplexPredicate()\n+    {\n+        if (!hasBehavior(SUPPORTS_DELETE)) {\n+            assertQueryFails(\"DELETE FROM nation\", \"This connector does not support deletes\");\n+            return;\n+        }\n+        assertThatThrownBy(() -> super.testDeleteWithComplexPredicate())\n+                .hasStackTraceContaining(\"TrinoException: Unsupported delete\");\n+    }\n+\n+    @Override\n+    public void testDeleteWithSubquery()\n+    {\n+        if (!hasBehavior(SUPPORTS_DELETE)) {\n+            assertQueryFails(\"DELETE FROM nation\", \"This connector does not support deletes\");\n+            return;\n+        }\n+        assertThatThrownBy(() -> super.testDeleteWithSubquery())\n+                .hasStackTraceContaining(\"TrinoException: Unsupported delete\");\n+    }\n+\n+    @Override\n+    public void testDeleteWithSemiJoin()\n+    {\n+        if (!hasBehavior(SUPPORTS_DELETE)) {\n+            assertQueryFails(\"DELETE FROM nation\", \"This connector does not support deletes\");\n+            return;\n+        }\n+        assertThatThrownBy(() -> super.testDeleteWithSemiJoin())\n+                .hasStackTraceContaining(\"TrinoException: Unsupported delete\");\n+    }\n+\n+    @Override\n+    public void testDeleteWithVarcharPredicate()\n+    {\n+        throw new SkipException(\"This is implemented by testMetadataDeleteWithVarcharEquality\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDQ0OTkxMw==", "bodyText": "It should be testDeleteWithVarcharEqualityPredicate", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r660449913", "createdAt": "2021-06-29T09:37:41Z", "author": {"login": "kokosing"}, "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorTest.java", "diffHunk": "@@ -1146,4 +1162,120 @@ protected TestView createSleepingView(Duration minimalSleepDuration)\n     {\n         throw new UnsupportedOperationException();\n     }\n+\n+    @Test\n+    public void testDeleteWithBigintEqualityPredicate()\n+    {\n+        if (!hasBehavior(SUPPORTS_DELETE)) {\n+            assertQueryFails(\"DELETE FROM region WHERE regionkey = 1\", \"This connector does not support deletes\");\n+            return;\n+        }\n+        String tableName = \"test_delete_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT * FROM region\", 5);\n+        assertUpdate(\"DELETE FROM \" + tableName + \" WHERE regionkey = 1\", 1);\n+        assertQuery(\n+                \"SELECT regionkey, name FROM \" + tableName,\n+                \"VALUES \"\n+                        + \"(0, 'AFRICA'),\"\n+                        + \"(2, 'ASIA'),\"\n+                        + \"(3, 'EUROPE'),\"\n+                        + \"(4, 'MIDDLE EAST')\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+    }\n+\n+    @Test\n+    public void testDeleteWithVarcharEqualityPredicate()\n+    {\n+        try (TestTable table = new TestTable(getQueryRunner()::execute, \"test_delete\", \"(col varchar(1))\", ImmutableList.of(\"'a'\", \"'A'\", \"null\"))) {\n+            if (!hasBehavior(SUPPORTS_DELETE)) {\n+                assertQueryFails(\"DELETE FROM \" + table.getName(), \"This connector does not support deletes\");\n+                return;\n+            }\n+            if (!hasBehavior(SUPPORTS_PREDICATE_PUSHDOWN_WITH_VARCHAR_EQUALITY)) {\n+                assertQueryFails(\"DELETE FROM \" + table.getName() + \" WHERE col = 'A'\", \"Unsupported delete\");\n+                return;\n+            }\n+\n+            assertUpdate(\"DELETE FROM \" + table.getName() + \" WHERE col = 'A'\", 1);\n+            assertQuery(\"SELECT * FROM \" + table.getName(), \"VALUES 'a', null\");\n+        }\n+    }\n+\n+    @Test\n+    public void testDeleteWithVarcharInequalityPredicate()\n+    {\n+        try (TestTable table = new TestTable(getQueryRunner()::execute, \"test_delete\", \"(col varchar(1))\", ImmutableList.of(\"'a'\", \"'A'\", \"null\"))) {\n+            if (!hasBehavior(SUPPORTS_DELETE)) {\n+                assertQueryFails(\"DELETE FROM \" + table.getName(), \"This connector does not support deletes\");\n+                return;\n+            }\n+            if (!hasBehavior(SUPPORTS_PREDICATE_PUSHDOWN_WITH_VARCHAR_INEQUALITY)) {\n+                assertQueryFails(\"DELETE FROM \" + table.getName() + \" WHERE col != 'A'\", \"Unsupported delete\");\n+                return;\n+            }\n+\n+            assertUpdate(\"DELETE FROM \" + table.getName() + \" WHERE col != 'A'\", 1);\n+            assertQuery(\"SELECT * FROM \" + table.getName(), \"VALUES 'A', null\");\n+        }\n+    }\n+\n+    @Test\n+    public void testDeleteWithVarcharGreaterAndLowerPredicate()\n+    {\n+        try (TestTable table = new TestTable(getQueryRunner()::execute, \"test_delete\", \"(col varchar(1))\", ImmutableList.of(\"'0'\", \"'a'\", \"'A'\", \"'b'\", \"null\"))) {\n+            if (!hasBehavior(SUPPORTS_DELETE)) {\n+                assertQueryFails(\"DELETE FROM \" + table.getName(), \"This connector does not support deletes\");\n+                return;\n+            }\n+            if (!hasBehavior(SUPPORTS_PREDICATE_PUSHDOWN_WITH_VARCHAR_INEQUALITY)) {\n+                assertQueryFails(\"DELETE FROM \" + table.getName() + \" WHERE col < 'A'\", \"Unsupported delete\");\n+                assertQueryFails(\"DELETE FROM \" + table.getName() + \" WHERE col > 'A'\", \"Unsupported delete\");\n+                return;\n+            }\n+\n+            assertUpdate(\"DELETE FROM \" + table.getName() + \" WHERE col < 'A'\", 1);\n+            assertQuery(\"SELECT * FROM \" + table.getName(), \"VALUES 'a', 'A', 'b', null\");\n+            assertUpdate(\"DELETE FROM \" + table.getName() + \" WHERE col > 'A'\", 2);\n+            assertQuery(\"SELECT * FROM \" + table.getName(), \"VALUES 'A', null\");\n+        }\n+    }\n+\n+    @Override\n+    public void testDeleteWithComplexPredicate()\n+    {\n+        if (!hasBehavior(SUPPORTS_DELETE)) {\n+            assertQueryFails(\"DELETE FROM nation\", \"This connector does not support deletes\");\n+            return;\n+        }\n+        assertThatThrownBy(() -> super.testDeleteWithComplexPredicate())\n+                .hasStackTraceContaining(\"TrinoException: Unsupported delete\");\n+    }\n+\n+    @Override\n+    public void testDeleteWithSubquery()\n+    {\n+        if (!hasBehavior(SUPPORTS_DELETE)) {\n+            assertQueryFails(\"DELETE FROM nation\", \"This connector does not support deletes\");\n+            return;\n+        }\n+        assertThatThrownBy(() -> super.testDeleteWithSubquery())\n+                .hasStackTraceContaining(\"TrinoException: Unsupported delete\");\n+    }\n+\n+    @Override\n+    public void testDeleteWithSemiJoin()\n+    {\n+        if (!hasBehavior(SUPPORTS_DELETE)) {\n+            assertQueryFails(\"DELETE FROM nation\", \"This connector does not support deletes\");\n+            return;\n+        }\n+        assertThatThrownBy(() -> super.testDeleteWithSemiJoin())\n+                .hasStackTraceContaining(\"TrinoException: Unsupported delete\");\n+    }\n+\n+    @Override\n+    public void testDeleteWithVarcharPredicate()\n+    {\n+        throw new SkipException(\"This is implemented by testMetadataDeleteWithVarcharEquality\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDQyOTYzMg=="}, "originalCommit": null, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDIxNzgyOTYxOnYy", "diffSide": "RIGHT", "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorTest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wNVQxMTozMzo1NVrOJ5G1Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xMlQxNToyNjo1NFrOJ9FbYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2Mzg2MDUyNg==", "bodyText": "@kokosing In case of connectors where the test infra is shared this can lead to test data being deleted.\nOr is the assumption that if the hasBehavior is implemented correctly it shouldn't matter since the actual test performs deletions against copies of tables?", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r663860526", "createdAt": "2021-07-05T11:33:55Z", "author": {"login": "hashhar"}, "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorTest.java", "diffHunk": "@@ -1146,4 +1162,120 @@ protected TestView createSleepingView(Duration minimalSleepDuration)\n     {\n         throw new UnsupportedOperationException();\n     }\n+\n+    @Test\n+    public void testDeleteWithBigintEqualityPredicate()\n+    {\n+        if (!hasBehavior(SUPPORTS_DELETE)) {\n+            assertQueryFails(\"DELETE FROM region WHERE regionkey = 1\", \"This connector does not support deletes\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d9a11362385b1b8624c0efaa1ca252a82a4113c"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2Mzg2MTA0OQ==", "bodyText": "I'm submitting a PR to change this to follow the approach in testDeleteWithVarcharEqualityPredicate where an explicit TestTable is created for the negative test case.", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r663861049", "createdAt": "2021-07-05T11:34:48Z", "author": {"login": "hashhar"}, "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorTest.java", "diffHunk": "@@ -1146,4 +1162,120 @@ protected TestView createSleepingView(Duration minimalSleepDuration)\n     {\n         throw new UnsupportedOperationException();\n     }\n+\n+    @Test\n+    public void testDeleteWithBigintEqualityPredicate()\n+    {\n+        if (!hasBehavior(SUPPORTS_DELETE)) {\n+            assertQueryFails(\"DELETE FROM region WHERE regionkey = 1\", \"This connector does not support deletes\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2Mzg2MDUyNg=="}, "originalCommit": {"oid": "2d9a11362385b1b8624c0efaa1ca252a82a4113c"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2Mzg4ODA2Nw==", "bodyText": "Thanks!", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r663888067", "createdAt": "2021-07-05T12:20:51Z", "author": {"login": "kokosing"}, "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorTest.java", "diffHunk": "@@ -1146,4 +1162,120 @@ protected TestView createSleepingView(Duration minimalSleepDuration)\n     {\n         throw new UnsupportedOperationException();\n     }\n+\n+    @Test\n+    public void testDeleteWithBigintEqualityPredicate()\n+    {\n+        if (!hasBehavior(SUPPORTS_DELETE)) {\n+            assertQueryFails(\"DELETE FROM region WHERE regionkey = 1\", \"This connector does not support deletes\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2Mzg2MDUyNg=="}, "originalCommit": {"oid": "2d9a11362385b1b8624c0efaa1ca252a82a4113c"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODAwODE0NA==", "bodyText": "@hashhar if you're concerned about that, there are other cases like that in tests, where negative test cases are \"dangerous\".\n(i was not concerned as much as you are ...)", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r668008144", "createdAt": "2021-07-12T14:58:39Z", "author": {"login": "findepi"}, "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorTest.java", "diffHunk": "@@ -1146,4 +1162,120 @@ protected TestView createSleepingView(Duration minimalSleepDuration)\n     {\n         throw new UnsupportedOperationException();\n     }\n+\n+    @Test\n+    public void testDeleteWithBigintEqualityPredicate()\n+    {\n+        if (!hasBehavior(SUPPORTS_DELETE)) {\n+            assertQueryFails(\"DELETE FROM region WHERE regionkey = 1\", \"This connector does not support deletes\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2Mzg2MDUyNg=="}, "originalCommit": {"oid": "2d9a11362385b1b8624c0efaa1ca252a82a4113c"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODAzMTg0MA==", "bodyText": "eg \n  \n    \n      trino/testing/trino-testing/src/main/java/io/trino/testing/BaseConnectorTest.java\n    \n    \n         Line 700\n      in\n      96be8f2\n    \n    \n    \n    \n\n        \n          \n           assertQueryFails(\"ALTER TABLE nation RENAME TO other_schema.yyyy\", \"This connector does not support renaming tables across schemas\");", "url": "https://github.com/trinodb/trino/pull/6287#discussion_r668031840", "createdAt": "2021-07-12T15:26:54Z", "author": {"login": "findepi"}, "path": "plugin/trino-base-jdbc/src/test/java/io/trino/plugin/jdbc/BaseJdbcConnectorTest.java", "diffHunk": "@@ -1146,4 +1162,120 @@ protected TestView createSleepingView(Duration minimalSleepDuration)\n     {\n         throw new UnsupportedOperationException();\n     }\n+\n+    @Test\n+    public void testDeleteWithBigintEqualityPredicate()\n+    {\n+        if (!hasBehavior(SUPPORTS_DELETE)) {\n+            assertQueryFails(\"DELETE FROM region WHERE regionkey = 1\", \"This connector does not support deletes\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2Mzg2MDUyNg=="}, "originalCommit": {"oid": "2d9a11362385b1b8624c0efaa1ca252a82a4113c"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4554, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}