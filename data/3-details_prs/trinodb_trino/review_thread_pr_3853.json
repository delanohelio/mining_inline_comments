{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMTcyMjUx", "number": 3853, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDoxODowMlrOEABnLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDoyMToxMlrOEBUI-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDYxODY4OnYy", "diffSide": "RIGHT", "path": "presto-main/src/main/java/io/prestosql/execution/CreateSchemaTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDoxODowMlrOGbC0cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDoxODowMlrOGbC0cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAxMDkzMQ==", "bodyText": "default visibility will be enough. Drop public.", "url": "https://github.com/trinodb/trino/pull/3853#discussion_r431010931", "createdAt": "2020-05-27T10:18:02Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/main/java/io/prestosql/execution/CreateSchemaTask.java", "diffHunk": "@@ -59,7 +61,12 @@ public String explain(CreateSchema statement, List<Expression> parameters)\n     @Override\n     public ListenableFuture<?> execute(CreateSchema statement, TransactionManager transactionManager, Metadata metadata, AccessControl accessControl, QueryStateMachine stateMachine, List<Expression> parameters)\n     {\n-        Session session = stateMachine.getSession();\n+        return internalExecute(statement, metadata, accessControl, stateMachine.getSession(), parameters);\n+    }\n+\n+    @VisibleForTesting\n+    public ListenableFuture<?> internalExecute(CreateSchema statement, Metadata metadata, AccessControl accessControl, Session session, List<Expression> parameters)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDY0MjcyOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/TestCreateSchemaTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDoyNToxN1rOGbDD3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDoyNToxN1rOGbDD3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAxNDg3Nw==", "bodyText": "No need to create two CreateSchema objects. Those are immutable.", "url": "https://github.com/trinodb/trino/pull/3853#discussion_r431014877", "createdAt": "2020-05-27T10:25:17Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCreateSchemaTask.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.metadata.AbstractMockMetadata;\n+import io.prestosql.metadata.Catalog;\n+import io.prestosql.metadata.CatalogManager;\n+import io.prestosql.metadata.SchemaPropertyManager;\n+import io.prestosql.security.AllowAllAccessControl;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.connector.CatalogSchemaName;\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.sql.tree.CreateSchema;\n+import io.prestosql.sql.tree.QualifiedName;\n+import io.prestosql.transaction.TransactionManager;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import static io.airlift.concurrent.MoreFutures.getFutureValue;\n+import static io.prestosql.spi.StandardErrorCode.ALREADY_EXISTS;\n+import static io.prestosql.testing.TestingSession.createBogusTestingCatalog;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static io.prestosql.transaction.InMemoryTransactionManager.createTestTransactionManager;\n+import static java.util.Collections.emptyList;\n+import static java.util.Objects.requireNonNull;\n+import static org.testng.Assert.assertEquals;\n+\n+@Test(singleThreaded = true)\n+public class TestCreateSchemaTask\n+{\n+    private static final String CATALOG_NAME = \"catalog\";\n+    private Session testSession;\n+    TestCreateSchemaTask.MockMetadata metadata;\n+\n+    @BeforeMethod\n+    public void setUp()\n+    {\n+        CatalogManager catalogManager = new CatalogManager();\n+        TransactionManager transactionManager = createTestTransactionManager(catalogManager);\n+        Catalog testCatalog = createBogusTestingCatalog(CATALOG_NAME);\n+        catalogManager.registerCatalog(testCatalog);\n+        SchemaPropertyManager schemaPropertyManager = new SchemaPropertyManager();\n+        schemaPropertyManager.addProperties(testCatalog.getConnectorCatalogName(), ImmutableList.of());\n+        testSession = testSessionBuilder()\n+                .setTransactionId(transactionManager.beginTransaction(false))\n+                .build();\n+        metadata = new TestCreateSchemaTask.MockMetadata(\n+            schemaPropertyManager,\n+            testCatalog.getConnectorCatalogName());\n+    }\n+\n+    @Test(expectedExceptions = PrestoException.class)\n+    public void testDuplicatedCreateSchema()\n+    {\n+        duplicatedCreateSchema(\"test_db\", false);\n+    }\n+\n+    @Test\n+    public void testDuplicatedCreateSchemaIfNotExists()\n+    {\n+        duplicatedCreateSchema(\"test_db\", true);\n+    }\n+\n+    private void duplicatedCreateSchema(String schemaName, boolean notExists)\n+    {\n+        CreateSchema statement1 = new CreateSchema(QualifiedName.of(schemaName), notExists, ImmutableList.of());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDY3OTAxOnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/TestCreateSchemaTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDozNTo0MVrOGbDaPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDozNTo0MVrOGbDaPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAyMDYwNw==", "bodyText": "Please move the assertions to test methods. And be more specific where we expect an exception.\nWhat about getting rid of duplicateCreateSchema and having createSchema method instead which just executes the statement.\nThen this test method would look like this:\n   createSchema(\"test_db\", false);\n   assertEquals(metadata.getCreateSchemaCount(), 1);\n   assertThatExceptionOfType(PrestoException.class)\n            .isThrownBy(() -> crateSchema(\"test_db\", false))\n            .withMessage(\".....\")", "url": "https://github.com/trinodb/trino/pull/3853#discussion_r431020607", "createdAt": "2020-05-27T10:35:41Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCreateSchemaTask.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.metadata.AbstractMockMetadata;\n+import io.prestosql.metadata.Catalog;\n+import io.prestosql.metadata.CatalogManager;\n+import io.prestosql.metadata.SchemaPropertyManager;\n+import io.prestosql.security.AllowAllAccessControl;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.connector.CatalogSchemaName;\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.sql.tree.CreateSchema;\n+import io.prestosql.sql.tree.QualifiedName;\n+import io.prestosql.transaction.TransactionManager;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import static io.airlift.concurrent.MoreFutures.getFutureValue;\n+import static io.prestosql.spi.StandardErrorCode.ALREADY_EXISTS;\n+import static io.prestosql.testing.TestingSession.createBogusTestingCatalog;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static io.prestosql.transaction.InMemoryTransactionManager.createTestTransactionManager;\n+import static java.util.Collections.emptyList;\n+import static java.util.Objects.requireNonNull;\n+import static org.testng.Assert.assertEquals;\n+\n+@Test(singleThreaded = true)\n+public class TestCreateSchemaTask\n+{\n+    private static final String CATALOG_NAME = \"catalog\";\n+    private Session testSession;\n+    TestCreateSchemaTask.MockMetadata metadata;\n+\n+    @BeforeMethod\n+    public void setUp()\n+    {\n+        CatalogManager catalogManager = new CatalogManager();\n+        TransactionManager transactionManager = createTestTransactionManager(catalogManager);\n+        Catalog testCatalog = createBogusTestingCatalog(CATALOG_NAME);\n+        catalogManager.registerCatalog(testCatalog);\n+        SchemaPropertyManager schemaPropertyManager = new SchemaPropertyManager();\n+        schemaPropertyManager.addProperties(testCatalog.getConnectorCatalogName(), ImmutableList.of());\n+        testSession = testSessionBuilder()\n+                .setTransactionId(transactionManager.beginTransaction(false))\n+                .build();\n+        metadata = new TestCreateSchemaTask.MockMetadata(\n+            schemaPropertyManager,\n+            testCatalog.getConnectorCatalogName());\n+    }\n+\n+    @Test(expectedExceptions = PrestoException.class)\n+    public void testDuplicatedCreateSchema()\n+    {\n+        duplicatedCreateSchema(\"test_db\", false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDY4MDU2OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/TestCreateSchemaTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDozNjowOFrOGbDbPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDozNjowOFrOGbDbPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAyMDg2Mw==", "bodyText": "Explicityl call createSchema twice here and have assertions here.", "url": "https://github.com/trinodb/trino/pull/3853#discussion_r431020863", "createdAt": "2020-05-27T10:36:08Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCreateSchemaTask.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.metadata.AbstractMockMetadata;\n+import io.prestosql.metadata.Catalog;\n+import io.prestosql.metadata.CatalogManager;\n+import io.prestosql.metadata.SchemaPropertyManager;\n+import io.prestosql.security.AllowAllAccessControl;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.connector.CatalogSchemaName;\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.sql.tree.CreateSchema;\n+import io.prestosql.sql.tree.QualifiedName;\n+import io.prestosql.transaction.TransactionManager;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import static io.airlift.concurrent.MoreFutures.getFutureValue;\n+import static io.prestosql.spi.StandardErrorCode.ALREADY_EXISTS;\n+import static io.prestosql.testing.TestingSession.createBogusTestingCatalog;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static io.prestosql.transaction.InMemoryTransactionManager.createTestTransactionManager;\n+import static java.util.Collections.emptyList;\n+import static java.util.Objects.requireNonNull;\n+import static org.testng.Assert.assertEquals;\n+\n+@Test(singleThreaded = true)\n+public class TestCreateSchemaTask\n+{\n+    private static final String CATALOG_NAME = \"catalog\";\n+    private Session testSession;\n+    TestCreateSchemaTask.MockMetadata metadata;\n+\n+    @BeforeMethod\n+    public void setUp()\n+    {\n+        CatalogManager catalogManager = new CatalogManager();\n+        TransactionManager transactionManager = createTestTransactionManager(catalogManager);\n+        Catalog testCatalog = createBogusTestingCatalog(CATALOG_NAME);\n+        catalogManager.registerCatalog(testCatalog);\n+        SchemaPropertyManager schemaPropertyManager = new SchemaPropertyManager();\n+        schemaPropertyManager.addProperties(testCatalog.getConnectorCatalogName(), ImmutableList.of());\n+        testSession = testSessionBuilder()\n+                .setTransactionId(transactionManager.beginTransaction(false))\n+                .build();\n+        metadata = new TestCreateSchemaTask.MockMetadata(\n+            schemaPropertyManager,\n+            testCatalog.getConnectorCatalogName());\n+    }\n+\n+    @Test(expectedExceptions = PrestoException.class)\n+    public void testDuplicatedCreateSchema()\n+    {\n+        duplicatedCreateSchema(\"test_db\", false);\n+    }\n+\n+    @Test\n+    public void testDuplicatedCreateSchemaIfNotExists()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzcwNTY1OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/TestCreateSchemaTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzo0MDoxNFrOGdBguw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNzo0MDoxNFrOGdBguw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA4NjY1MQ==", "bodyText": "Please change it to use AssertJ assertion and validate that exception message actually says about duplicate schema.\nHere is an example: https://github.com/prestosql/presto/blob/7d2d9db8130f76a1d9f7814c1ce61d810fdc6864/presto-parquet/src/test/java/io/prestosql/parquet/TestTupleDomainParquetPredicate.java#L137", "url": "https://github.com/trinodb/trino/pull/3853#discussion_r433086651", "createdAt": "2020-06-01T07:40:14Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCreateSchemaTask.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.metadata.AbstractMockMetadata;\n+import io.prestosql.metadata.Catalog;\n+import io.prestosql.metadata.CatalogManager;\n+import io.prestosql.metadata.SchemaPropertyManager;\n+import io.prestosql.security.AllowAllAccessControl;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.connector.CatalogSchemaName;\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.sql.tree.CreateSchema;\n+import io.prestosql.sql.tree.QualifiedName;\n+import io.prestosql.transaction.TransactionManager;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import static io.airlift.concurrent.MoreFutures.getFutureValue;\n+import static io.prestosql.spi.StandardErrorCode.ALREADY_EXISTS;\n+import static io.prestosql.testing.TestingSession.createBogusTestingCatalog;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static io.prestosql.transaction.InMemoryTransactionManager.createTestTransactionManager;\n+import static java.util.Collections.emptyList;\n+import static java.util.Objects.requireNonNull;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertThrows;\n+\n+@Test(singleThreaded = true)\n+public class TestCreateSchemaTask\n+{\n+    private static final String CATALOG_NAME = \"catalog\";\n+    private Session testSession;\n+    TestCreateSchemaTask.MockMetadata metadata;\n+\n+    @BeforeMethod\n+    public void setUp()\n+    {\n+        CatalogManager catalogManager = new CatalogManager();\n+        TransactionManager transactionManager = createTestTransactionManager(catalogManager);\n+        Catalog testCatalog = createBogusTestingCatalog(CATALOG_NAME);\n+        catalogManager.registerCatalog(testCatalog);\n+        SchemaPropertyManager schemaPropertyManager = new SchemaPropertyManager();\n+        schemaPropertyManager.addProperties(testCatalog.getConnectorCatalogName(), ImmutableList.of());\n+        testSession = testSessionBuilder()\n+                .setTransactionId(transactionManager.beginTransaction(false))\n+                .build();\n+        metadata = new TestCreateSchemaTask.MockMetadata(\n+            schemaPropertyManager,\n+            testCatalog.getConnectorCatalogName());\n+    }\n+\n+    @Test\n+    public void testDuplicatedCreateSchema()\n+    {\n+        String schemaName = \"test_db\";\n+        CreateSchema statement = new CreateSchema(QualifiedName.of(schemaName), false, ImmutableList.of());\n+        getFutureValue(new CreateSchemaTask().internalExecute(statement, metadata, new AllowAllAccessControl(), testSession, emptyList()));\n+        assertEquals(metadata.getCreateSchemaCount(), 1);\n+        assertThrows(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODE0MDA5OnYy", "diffSide": "RIGHT", "path": "presto-main/src/test/java/io/prestosql/execution/TestCreateSchemaTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDoyMToxMlrOGdFp6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDoyMToxMlrOGdFp6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1NDUzNw==", "bodyText": "Reformat to:\n        assertThatExceptionOfType(PrestoException.class)\n                .isThrownBy(() -> getFutureValue(new CreateSchemaTask().internalExecute(statement, metadata, new AllowAllAccessControl(), testSession, emptyList())))\n                .withMessage(\"Schema already exists\");", "url": "https://github.com/trinodb/trino/pull/3853#discussion_r433154537", "createdAt": "2020-06-01T10:21:12Z", "author": {"login": "losipiuk"}, "path": "presto-main/src/test/java/io/prestosql/execution/TestCreateSchemaTask.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.metadata.AbstractMockMetadata;\n+import io.prestosql.metadata.Catalog;\n+import io.prestosql.metadata.CatalogManager;\n+import io.prestosql.metadata.SchemaPropertyManager;\n+import io.prestosql.security.AllowAllAccessControl;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.connector.CatalogSchemaName;\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.sql.tree.CreateSchema;\n+import io.prestosql.sql.tree.QualifiedName;\n+import io.prestosql.transaction.TransactionManager;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import static io.airlift.concurrent.MoreFutures.getFutureValue;\n+import static io.prestosql.spi.StandardErrorCode.ALREADY_EXISTS;\n+import static io.prestosql.testing.TestingSession.createBogusTestingCatalog;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static io.prestosql.transaction.InMemoryTransactionManager.createTestTransactionManager;\n+import static java.util.Collections.emptyList;\n+import static java.util.Objects.requireNonNull;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.testng.Assert.assertEquals;\n+\n+@Test(singleThreaded = true)\n+public class TestCreateSchemaTask\n+{\n+    private static final String CATALOG_NAME = \"catalog\";\n+    private Session testSession;\n+    TestCreateSchemaTask.MockMetadata metadata;\n+\n+    @BeforeMethod\n+    public void setUp()\n+    {\n+        CatalogManager catalogManager = new CatalogManager();\n+        TransactionManager transactionManager = createTestTransactionManager(catalogManager);\n+        Catalog testCatalog = createBogusTestingCatalog(CATALOG_NAME);\n+        catalogManager.registerCatalog(testCatalog);\n+        SchemaPropertyManager schemaPropertyManager = new SchemaPropertyManager();\n+        schemaPropertyManager.addProperties(testCatalog.getConnectorCatalogName(), ImmutableList.of());\n+        testSession = testSessionBuilder()\n+                .setTransactionId(transactionManager.beginTransaction(false))\n+                .build();\n+        metadata = new TestCreateSchemaTask.MockMetadata(\n+            schemaPropertyManager,\n+            testCatalog.getConnectorCatalogName());\n+    }\n+\n+    @Test\n+    public void testDuplicatedCreateSchema()\n+    {\n+        String schemaName = \"test_db\";\n+        CreateSchema statement = new CreateSchema(QualifiedName.of(schemaName), false, ImmutableList.of());\n+        getFutureValue(new CreateSchemaTask().internalExecute(statement, metadata, new AllowAllAccessControl(), testSession, emptyList()));\n+        assertEquals(metadata.getCreateSchemaCount(), 1);\n+        assertThatExceptionOfType(PrestoException.class).isThrownBy(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4952, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}