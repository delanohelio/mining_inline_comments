{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxOTgyMTIx", "number": 6195, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoxODowNFrOFAZQcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODo1MDoyMFrOFAaHxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1OTU4MTMxOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/BaseTestHiveViews.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoxODowNFrOH-qnpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODo1MDo0OFrOH-r9fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3MjAzOA==", "bodyText": "I am not super convinced that we need this base class.\nMaybe just leave TestHiveViews as is, and use it for testing default configuration (with Coral).\nAnd add TestHiveViewsLegacy based on how TestHiveViews looked before Coral was introduced.", "url": "https://github.com/trinodb/trino/pull/6195#discussion_r535472038", "createdAt": "2020-12-03T18:18:04Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/BaseTestHiveViews.java", "diffHunk": "@@ -38,7 +38,7 @@\n         ImmutableNationTable.class,\n         ImmutableOrdersTable.class,\n })\n-public class TestHiveViews\n+public abstract class BaseTestHiveViews", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ5NDAxNQ==", "bodyText": "That would work too.", "url": "https://github.com/trinodb/trino/pull/6195#discussion_r535494015", "createdAt": "2020-12-03T18:50:48Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/BaseTestHiveViews.java", "diffHunk": "@@ -38,7 +38,7 @@\n         ImmutableNationTable.class,\n         ImmutableOrdersTable.class,\n })\n-public class TestHiveViews\n+public abstract class BaseTestHiveViews", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3MjAzOA=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1OTcxNzU0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/ViewReaderUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODo0OTowNFrOH-r5VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODo0OTowNFrOH-r5VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ5Mjk0OQ==", "bodyText": "static import", "url": "https://github.com/trinodb/trino/pull/6195#discussion_r535492949", "createdAt": "2020-12-03T18:49:04Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/ViewReaderUtil.java", "diffHunk": "@@ -65,6 +68,10 @@ public static ViewReader createViewReader(SemiTransactionalHiveMetastore metasto\n         if (isPrestoView(table)) {\n             return new PrestoViewReader();\n         }\n+        if (HiveSessionProperties.isLegacyHiveViewTranslation(session)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1OTcyMjkyOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViewsLegacy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODo1MDoyMFrOH-r8eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxOToyODozNlrOH-tn0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ5Mzc1Mw==", "bodyText": "Did you mean to inherit these tests from the base class?", "url": "https://github.com/trinodb/trino/pull/6195#discussion_r535493753", "createdAt": "2020-12-03T18:50:20Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViewsLegacy.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import io.prestosql.tempto.BeforeTestWithContext;\n+import io.prestosql.tests.utils.QueryExecutors;\n+import org.testng.annotations.Test;\n+\n+import java.math.BigDecimal;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.tests.TestGroups.HIVE_VIEWS;\n+import static io.prestosql.tests.utils.QueryExecutors.onHive;\n+import static io.prestosql.tests.utils.QueryExecutors.onPresto;\n+\n+public class TestHiveViewsLegacy\n+        extends BaseTestHiveViews\n+{\n+    @BeforeTestWithContext\n+    public void setup()\n+    {\n+        // We need to setup sessions for both \"presto\" and \"default\" executors in tempto\n+        onPresto().executeQuery(\"SET SESSION hive.legacy_hive_view_translation = true\");\n+        query(\"SET SESSION hive.legacy_hive_view_translation = true\");\n+    }\n+\n+    @Test(groups = HIVE_VIEWS)\n+    public void testShowCreateView()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUyMTIzMg==", "bodyText": "Those are slightly differnt actually.\nOn the second though I decided to just have separate test classes and drop common base.", "url": "https://github.com/trinodb/trino/pull/6195#discussion_r535521232", "createdAt": "2020-12-03T19:28:36Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViewsLegacy.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import io.prestosql.tempto.BeforeTestWithContext;\n+import io.prestosql.tests.utils.QueryExecutors;\n+import org.testng.annotations.Test;\n+\n+import java.math.BigDecimal;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tempto.query.QueryExecutor.query;\n+import static io.prestosql.tests.TestGroups.HIVE_VIEWS;\n+import static io.prestosql.tests.utils.QueryExecutors.onHive;\n+import static io.prestosql.tests.utils.QueryExecutors.onPresto;\n+\n+public class TestHiveViewsLegacy\n+        extends BaseTestHiveViews\n+{\n+    @BeforeTestWithContext\n+    public void setup()\n+    {\n+        // We need to setup sessions for both \"presto\" and \"default\" executors in tempto\n+        onPresto().executeQuery(\"SET SESSION hive.legacy_hive_view_translation = true\");\n+        query(\"SET SESSION hive.legacy_hive_view_translation = true\");\n+    }\n+\n+    @Test(groups = HIVE_VIEWS)\n+    public void testShowCreateView()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ5Mzc1Mw=="}, "originalCommit": null, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4478, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}