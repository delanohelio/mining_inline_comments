{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4Njk3NzU5", "number": 6126, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzoxNzowMFrOE-phcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzoxNzowMFrOE-phcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTI3NDc1OnYy", "diffSide": "RIGHT", "path": "presto-spi/src/main/java/io/prestosql/spi/block/Int96ArrayBlockEncoding.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzoxNzowMFrOH76oug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwODozMTo0OVrOH8dH7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4ODczMA==", "bodyText": "Do I remember correctly that this check before previous two lines performs worse?", "url": "https://github.com/trinodb/trino/pull/6126#discussion_r532588730", "createdAt": "2020-11-30T13:17:00Z", "author": {"login": "ssheikin"}, "path": "presto-spi/src/main/java/io/prestosql/spi/block/Int96ArrayBlockEncoding.java", "diffHunk": "@@ -38,11 +40,25 @@ public void writeBlock(BlockEncodingSerde blockEncodingSerde, SliceOutput sliceO\n \n         encodeNullsAsBits(sliceOutput, block);\n \n-        for (int position = 0; position < positionCount; position++) {\n-            if (!block.isNull(position)) {\n-                sliceOutput.writeLong(block.getLong(position, 0));\n-                sliceOutput.writeInt(block.getInt(position, 8));\n+        if (!block.mayHaveNull()) {\n+            sliceOutput.writeBytes(getHighSlice(block));\n+            sliceOutput.writeBytes(getLowSlice(block));\n+        }\n+        else {\n+            long[] high = new long[positionCount];\n+            int[] low = new int[positionCount];\n+            int nonNullPositionCount = 0;\n+            for (int i = 0; i < positionCount; i++) {\n+                high[nonNullPositionCount] = block.getLong(i, 0);\n+                low[nonNullPositionCount] = block.getInt(i, 8);\n+                if (!block.isNull(i)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE1Mzc3NQ==", "bodyText": "Mostly yes. It is a bit faster for datasets with a lot of nulls (>81% to be precise), but other than that it is much slower", "url": "https://github.com/trinodb/trino/pull/6126#discussion_r533153775", "createdAt": "2020-12-01T08:31:49Z", "author": {"login": "skrzypo987"}, "path": "presto-spi/src/main/java/io/prestosql/spi/block/Int96ArrayBlockEncoding.java", "diffHunk": "@@ -38,11 +40,25 @@ public void writeBlock(BlockEncodingSerde blockEncodingSerde, SliceOutput sliceO\n \n         encodeNullsAsBits(sliceOutput, block);\n \n-        for (int position = 0; position < positionCount; position++) {\n-            if (!block.isNull(position)) {\n-                sliceOutput.writeLong(block.getLong(position, 0));\n-                sliceOutput.writeInt(block.getInt(position, 8));\n+        if (!block.mayHaveNull()) {\n+            sliceOutput.writeBytes(getHighSlice(block));\n+            sliceOutput.writeBytes(getLowSlice(block));\n+        }\n+        else {\n+            long[] high = new long[positionCount];\n+            int[] low = new int[positionCount];\n+            int nonNullPositionCount = 0;\n+            for (int i = 0; i < positionCount; i++) {\n+                high[nonNullPositionCount] = block.getLong(i, 0);\n+                low[nonNullPositionCount] = block.getInt(i, 8);\n+                if (!block.isNull(i)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4ODczMA=="}, "originalCommit": null, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4699, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}