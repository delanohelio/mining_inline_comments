{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0MTI0ODg3", "number": 5778, "title": " Add FlakyAnnotationVerifier", "bodyText": "", "createdAt": "2020-11-02T15:11:30Z", "url": "https://github.com/trinodb/trino/pull/5778", "merged": true, "mergeCommit": {"oid": "70c4f5c655fad673716062db98ed51baf58c6424"}, "closed": true, "closedAt": "2020-11-03T11:02:11Z", "author": {"login": "losipiuk"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdYlldKgH2gAyNTE0MTI0ODg3OjIyYWNmNTUwNjA3MmE2OTUxZmQzYjIyYjBiM2NiYzNlZjQzZmZhYjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdY1m4HgFqTUyMjMwMTE0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "22acf5506072a6951fd3b22b0b3cbc3ef43ffab9", "author": {"user": {"login": "losipiuk", "name": "\u0141ukasz Osipiuk"}}, "url": "https://github.com/trinodb/trino/commit/22acf5506072a6951fd3b22b0b3cbc3ef43ffab9", "committedDate": "2020-11-02T14:38:49Z", "message": "Do not call static method via instance"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "39f5636d60e616276d52b6e365207365bd203a38", "author": {"user": {"login": "losipiuk", "name": "\u0141ukasz Osipiuk"}}, "url": "https://github.com/trinodb/trino/commit/39f5636d60e616276d52b6e365207365bd203a38", "committedDate": "2020-11-02T15:56:07Z", "message": "Add missing @Test annotation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMDA4MTU5", "url": "https://github.com/trinodb/trino/pull/5778#pullrequestreview-522008159", "createdAt": "2020-11-02T21:33:07Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd728bb6cf3fb9ea05cba07a7198bd7d9bd87702", "author": {"user": {"login": "losipiuk", "name": "\u0141ukasz Osipiuk"}}, "url": "https://github.com/trinodb/trino/commit/fd728bb6cf3fb9ea05cba07a7198bd7d9bd87702", "committedDate": "2020-11-03T08:17:01Z", "message": "Add FlakyAnnotationVerifier"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "fd728bb6cf3fb9ea05cba07a7198bd7d9bd87702", "author": {"user": {"login": "losipiuk", "name": "\u0141ukasz Osipiuk"}}, "url": "https://github.com/trinodb/trino/commit/fd728bb6cf3fb9ea05cba07a7198bd7d9bd87702", "committedDate": "2020-11-03T08:17:01Z", "message": "Add FlakyAnnotationVerifier"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMzAxMTQ5", "url": "https://github.com/trinodb/trino/pull/5778#pullrequestreview-522301149", "createdAt": "2020-11-03T09:12:48Z", "commit": {"oid": "fd728bb6cf3fb9ea05cba07a7198bd7d9bd87702"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwOToxMjo0OVrOHslr8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwOToxODo0MVrOHsl5aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxNjg0OQ==", "bodyText": "Why?\ni think it's reasonable to feel offended when @Flaky is put on a non-@Test method too", "url": "https://github.com/trinodb/trino/pull/5778#discussion_r516516849", "createdAt": "2020-11-03T09:12:49Z", "author": {"login": "findepi"}, "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/FlakyAnnotationVerifier.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.testng.services;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.testng.IClassListener;\n+import org.testng.ITestClass;\n+import org.testng.annotations.Test;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Throwables.getStackTraceAsString;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.testng.services.Listeners.reportListenerFailure;\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Detects test methods which are annotaded with @Flaky annotation but are\n+ * missing explicit @Test annotation\n+ */\n+public class FlakyAnnotationVerifier\n+        implements IClassListener\n+{\n+    @Override\n+    public void onBeforeClass(ITestClass testClass)\n+    {\n+        try {\n+            reportMethodsWithFlakyAndNoTestAnnotation(testClass);\n+        }\n+        catch (RuntimeException | Error e) {\n+            reportListenerFailure(\n+                    FlakyAnnotationVerifier.class,\n+                    \"Failed to process %s: \\n%s\",\n+                    testClass,\n+                    getStackTraceAsString(e));\n+        }\n+    }\n+\n+    private void reportMethodsWithFlakyAndNoTestAnnotation(ITestClass testClass)\n+    {\n+        Class<?> realClass = testClass.getRealClass();\n+\n+        if (realClass.getSuperclass() != null &&\n+                \"io.prestosql.tempto.internal.convention.ConventionBasedTestProxyGenerator$ConventionBasedTestProxy\".equals(realClass.getSuperclass().getName())) {\n+            // Ignore tempto generated convention tests.\n+            return;\n+        }\n+\n+        if (realClass.getName().startsWith(\"io.prestosql.testng.services.TestFlakyAnnotationVerifier\")) {\n+            // ignore test of FlakyAnnotationVerifier and internal classes\n+            return;\n+        }\n+\n+        List<Method> unannotatedTestMethods = findMethodsWithFlakyAndNoTestAnnotation(realClass);\n+        if (!unannotatedTestMethods.isEmpty()) {\n+            reportListenerFailure(\n+                    FlakyAnnotationVerifier.class,\n+                    \"Test class %s has methods which are marked as @Flaky but are not explicitly annotated with @Test:%s\",\n+                    realClass.getName(),\n+                    unannotatedTestMethods.stream()\n+                            .map(Method::toString)\n+                            .collect(joining(\"\\n\\t\\t\", \"\\n\\t\\t\", \"\")));\n+        }\n+    }\n+\n+    @VisibleForTesting\n+    static List<Method> findMethodsWithFlakyAndNoTestAnnotation(Class<?> realClass)\n+    {\n+        return Arrays.stream(realClass.getMethods())\n+                .filter(method -> hasOrInheritsAnnotation(method, Flaky.class))\n+                .filter(method -> !hasAnnotation(method, Test.class))\n+                .filter(method -> hasOrInheritsAnnotation(method, Test.class))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd728bb6cf3fb9ea05cba07a7198bd7d9bd87702"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxNzE4NQ==", "bodyText": "method.isAnnotationPresent & inine", "url": "https://github.com/trinodb/trino/pull/5778#discussion_r516517185", "createdAt": "2020-11-03T09:13:22Z", "author": {"login": "findepi"}, "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/FlakyAnnotationVerifier.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.testng.services;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.testng.IClassListener;\n+import org.testng.ITestClass;\n+import org.testng.annotations.Test;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Throwables.getStackTraceAsString;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.testng.services.Listeners.reportListenerFailure;\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Detects test methods which are annotaded with @Flaky annotation but are\n+ * missing explicit @Test annotation\n+ */\n+public class FlakyAnnotationVerifier\n+        implements IClassListener\n+{\n+    @Override\n+    public void onBeforeClass(ITestClass testClass)\n+    {\n+        try {\n+            reportMethodsWithFlakyAndNoTestAnnotation(testClass);\n+        }\n+        catch (RuntimeException | Error e) {\n+            reportListenerFailure(\n+                    FlakyAnnotationVerifier.class,\n+                    \"Failed to process %s: \\n%s\",\n+                    testClass,\n+                    getStackTraceAsString(e));\n+        }\n+    }\n+\n+    private void reportMethodsWithFlakyAndNoTestAnnotation(ITestClass testClass)\n+    {\n+        Class<?> realClass = testClass.getRealClass();\n+\n+        if (realClass.getSuperclass() != null &&\n+                \"io.prestosql.tempto.internal.convention.ConventionBasedTestProxyGenerator$ConventionBasedTestProxy\".equals(realClass.getSuperclass().getName())) {\n+            // Ignore tempto generated convention tests.\n+            return;\n+        }\n+\n+        if (realClass.getName().startsWith(\"io.prestosql.testng.services.TestFlakyAnnotationVerifier\")) {\n+            // ignore test of FlakyAnnotationVerifier and internal classes\n+            return;\n+        }\n+\n+        List<Method> unannotatedTestMethods = findMethodsWithFlakyAndNoTestAnnotation(realClass);\n+        if (!unannotatedTestMethods.isEmpty()) {\n+            reportListenerFailure(\n+                    FlakyAnnotationVerifier.class,\n+                    \"Test class %s has methods which are marked as @Flaky but are not explicitly annotated with @Test:%s\",\n+                    realClass.getName(),\n+                    unannotatedTestMethods.stream()\n+                            .map(Method::toString)\n+                            .collect(joining(\"\\n\\t\\t\", \"\\n\\t\\t\", \"\")));\n+        }\n+    }\n+\n+    @VisibleForTesting\n+    static List<Method> findMethodsWithFlakyAndNoTestAnnotation(Class<?> realClass)\n+    {\n+        return Arrays.stream(realClass.getMethods())\n+                .filter(method -> hasOrInheritsAnnotation(method, Flaky.class))\n+                .filter(method -> !hasAnnotation(method, Test.class))\n+                .filter(method -> hasOrInheritsAnnotation(method, Test.class))\n+                .collect(toImmutableList());\n+    }\n+\n+    @Override\n+    public void onAfterClass(ITestClass testClass) {}\n+\n+    private static boolean hasAnnotation(Method method, Class<? extends Annotation> annotationClass)\n+    {\n+        return method.getAnnotation(annotationClass) != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd728bb6cf3fb9ea05cba07a7198bd7d9bd87702"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxNzcwNw==", "bodyText": "Using Optional for loop control is IMO an overkill. Using plain old reference yields to a more readable code.", "url": "https://github.com/trinodb/trino/pull/5778#discussion_r516517707", "createdAt": "2020-11-03T09:14:14Z", "author": {"login": "findepi"}, "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/FlakyAnnotationVerifier.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.testng.services;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.testng.IClassListener;\n+import org.testng.ITestClass;\n+import org.testng.annotations.Test;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Throwables.getStackTraceAsString;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.testng.services.Listeners.reportListenerFailure;\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Detects test methods which are annotaded with @Flaky annotation but are\n+ * missing explicit @Test annotation\n+ */\n+public class FlakyAnnotationVerifier\n+        implements IClassListener\n+{\n+    @Override\n+    public void onBeforeClass(ITestClass testClass)\n+    {\n+        try {\n+            reportMethodsWithFlakyAndNoTestAnnotation(testClass);\n+        }\n+        catch (RuntimeException | Error e) {\n+            reportListenerFailure(\n+                    FlakyAnnotationVerifier.class,\n+                    \"Failed to process %s: \\n%s\",\n+                    testClass,\n+                    getStackTraceAsString(e));\n+        }\n+    }\n+\n+    private void reportMethodsWithFlakyAndNoTestAnnotation(ITestClass testClass)\n+    {\n+        Class<?> realClass = testClass.getRealClass();\n+\n+        if (realClass.getSuperclass() != null &&\n+                \"io.prestosql.tempto.internal.convention.ConventionBasedTestProxyGenerator$ConventionBasedTestProxy\".equals(realClass.getSuperclass().getName())) {\n+            // Ignore tempto generated convention tests.\n+            return;\n+        }\n+\n+        if (realClass.getName().startsWith(\"io.prestosql.testng.services.TestFlakyAnnotationVerifier\")) {\n+            // ignore test of FlakyAnnotationVerifier and internal classes\n+            return;\n+        }\n+\n+        List<Method> unannotatedTestMethods = findMethodsWithFlakyAndNoTestAnnotation(realClass);\n+        if (!unannotatedTestMethods.isEmpty()) {\n+            reportListenerFailure(\n+                    FlakyAnnotationVerifier.class,\n+                    \"Test class %s has methods which are marked as @Flaky but are not explicitly annotated with @Test:%s\",\n+                    realClass.getName(),\n+                    unannotatedTestMethods.stream()\n+                            .map(Method::toString)\n+                            .collect(joining(\"\\n\\t\\t\", \"\\n\\t\\t\", \"\")));\n+        }\n+    }\n+\n+    @VisibleForTesting\n+    static List<Method> findMethodsWithFlakyAndNoTestAnnotation(Class<?> realClass)\n+    {\n+        return Arrays.stream(realClass.getMethods())\n+                .filter(method -> hasOrInheritsAnnotation(method, Flaky.class))\n+                .filter(method -> !hasAnnotation(method, Test.class))\n+                .filter(method -> hasOrInheritsAnnotation(method, Test.class))\n+                .collect(toImmutableList());\n+    }\n+\n+    @Override\n+    public void onAfterClass(ITestClass testClass) {}\n+\n+    private static boolean hasAnnotation(Method method, Class<? extends Annotation> annotationClass)\n+    {\n+        return method.getAnnotation(annotationClass) != null;\n+    }\n+\n+    private static boolean hasOrInheritsAnnotation(Method method, Class<? extends Annotation> annotationClass)\n+    {\n+        Optional<Method> currentMethod = Optional.of(method);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd728bb6cf3fb9ea05cba07a7198bd7d9bd87702"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxOTg2NQ==", "bodyText": "If we limit our imagination to public methods only (which is already the case, as you start the search from realClass.getMethods()), then you don't need while + getDeclaredMethod here.\nCalling superclass.getMethod will be equally effective.\nNote however, that this whole approach deserves as disclaimer like\nhttps://github.com/prestosql/presto/blob/24153e75240ceda178951a80f9670f431e733292/presto-testng-services/src/main/java/io/prestosql/testng/services/ReportUnannotatedMethods.java#L125\n-- this is not correct in presence of generics and bridge methods.", "url": "https://github.com/trinodb/trino/pull/5778#discussion_r516519865", "createdAt": "2020-11-03T09:17:55Z", "author": {"login": "findepi"}, "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/FlakyAnnotationVerifier.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.testng.services;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.testng.IClassListener;\n+import org.testng.ITestClass;\n+import org.testng.annotations.Test;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Throwables.getStackTraceAsString;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.testng.services.Listeners.reportListenerFailure;\n+import static java.util.stream.Collectors.joining;\n+\n+/**\n+ * Detects test methods which are annotaded with @Flaky annotation but are\n+ * missing explicit @Test annotation\n+ */\n+public class FlakyAnnotationVerifier\n+        implements IClassListener\n+{\n+    @Override\n+    public void onBeforeClass(ITestClass testClass)\n+    {\n+        try {\n+            reportMethodsWithFlakyAndNoTestAnnotation(testClass);\n+        }\n+        catch (RuntimeException | Error e) {\n+            reportListenerFailure(\n+                    FlakyAnnotationVerifier.class,\n+                    \"Failed to process %s: \\n%s\",\n+                    testClass,\n+                    getStackTraceAsString(e));\n+        }\n+    }\n+\n+    private void reportMethodsWithFlakyAndNoTestAnnotation(ITestClass testClass)\n+    {\n+        Class<?> realClass = testClass.getRealClass();\n+\n+        if (realClass.getSuperclass() != null &&\n+                \"io.prestosql.tempto.internal.convention.ConventionBasedTestProxyGenerator$ConventionBasedTestProxy\".equals(realClass.getSuperclass().getName())) {\n+            // Ignore tempto generated convention tests.\n+            return;\n+        }\n+\n+        if (realClass.getName().startsWith(\"io.prestosql.testng.services.TestFlakyAnnotationVerifier\")) {\n+            // ignore test of FlakyAnnotationVerifier and internal classes\n+            return;\n+        }\n+\n+        List<Method> unannotatedTestMethods = findMethodsWithFlakyAndNoTestAnnotation(realClass);\n+        if (!unannotatedTestMethods.isEmpty()) {\n+            reportListenerFailure(\n+                    FlakyAnnotationVerifier.class,\n+                    \"Test class %s has methods which are marked as @Flaky but are not explicitly annotated with @Test:%s\",\n+                    realClass.getName(),\n+                    unannotatedTestMethods.stream()\n+                            .map(Method::toString)\n+                            .collect(joining(\"\\n\\t\\t\", \"\\n\\t\\t\", \"\")));\n+        }\n+    }\n+\n+    @VisibleForTesting\n+    static List<Method> findMethodsWithFlakyAndNoTestAnnotation(Class<?> realClass)\n+    {\n+        return Arrays.stream(realClass.getMethods())\n+                .filter(method -> hasOrInheritsAnnotation(method, Flaky.class))\n+                .filter(method -> !hasAnnotation(method, Test.class))\n+                .filter(method -> hasOrInheritsAnnotation(method, Test.class))\n+                .collect(toImmutableList());\n+    }\n+\n+    @Override\n+    public void onAfterClass(ITestClass testClass) {}\n+\n+    private static boolean hasAnnotation(Method method, Class<? extends Annotation> annotationClass)\n+    {\n+        return method.getAnnotation(annotationClass) != null;\n+    }\n+\n+    private static boolean hasOrInheritsAnnotation(Method method, Class<? extends Annotation> annotationClass)\n+    {\n+        Optional<Method> currentMethod = Optional.of(method);\n+        while (currentMethod.isPresent()) {\n+            if (hasAnnotation(currentMethod.get(), annotationClass)) {\n+                return true;\n+            }\n+            currentMethod = getSuperMethod(currentMethod.get());\n+        }\n+        return false;\n+    }\n+\n+    private static Optional<Method> getSuperMethod(Method method)\n+    {\n+        Class<?> declaringClass = method.getDeclaringClass().getSuperclass();\n+        while (declaringClass != null) {\n+            try {\n+                return Optional.of(declaringClass.getDeclaredMethod(method.getName(), method.getParameterTypes()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd728bb6cf3fb9ea05cba07a7198bd7d9bd87702"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUyMDI5Ng==", "bodyText": "Add missing @test annotation\n\nsquash the commit with the next one, since otherwise the annotation is not really missing here.", "url": "https://github.com/trinodb/trino/pull/5778#discussion_r516520296", "createdAt": "2020-11-03T09:18:41Z", "author": {"login": "findepi"}, "path": "presto-kudu/src/test/java/io/prestosql/plugin/kudu/TestKuduDistributedQueries.java", "diffHunk": "@@ -148,6 +149,7 @@ public void testShowColumns()\n     }\n \n     @Override\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39f5636d60e616276d52b6e365207365bd203a38"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2751, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}