{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3NzI3OTc0", "number": 5634, "title": "Implement node local dynamic bucket pruning", "bodyText": "Fixes #4921", "createdAt": "2020-10-21T17:23:19Z", "url": "https://github.com/trinodb/trino/pull/5634", "merged": true, "mergeCommit": {"oid": "06c8ef80721159b8118666297771cd22598e1ddd"}, "closed": true, "closedAt": "2020-10-27T08:53:23Z", "author": {"login": "raunaqmorarka"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdU6mi7gBqjM5MDcwMzUyNzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWlC0SAFqTUxNzQ2ODA4Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0NjI0NDMz", "url": "https://github.com/trinodb/trino/pull/5634#pullrequestreview-514624433", "createdAt": "2020-10-22T11:28:50Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMToyODo1MFrOHmdKKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMToyODo1MFrOHmdKKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA4NTY3NA==", "bodyText": "check effectivePredicate.isAll() should go to the method below", "url": "https://github.com/trinodb/trino/pull/5634#discussion_r510085674", "createdAt": "2020-10-22T11:28:50Z", "author": {"login": "sopel39"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveBucketing.java", "diffHunk": "@@ -203,21 +204,35 @@ static int getBucketNumber(int hashCode, int bucketCount)\n         return Optional.of(new HiveBucketHandle(bucketColumns.build(), bucketingVersion, bucketCount, bucketCount));\n     }\n \n-    public static Optional<HiveBucketFilter> getHiveBucketFilter(Table table, TupleDomain<ColumnHandle> effectivePredicate)\n+    public static Optional<HiveBucketFilter> getHiveBucketFilter(HiveTableHandle hiveTable, TupleDomain<ColumnHandle> effectivePredicate)\n     {\n-        if (table.getStorage().getBucketProperty().isEmpty()) {\n+        if (hiveTable.getBucketHandle().isEmpty() || effectivePredicate.isAll()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1Njg5NDM3", "url": "https://github.com/trinodb/trino/pull/5634#pullrequestreview-515689437", "createdAt": "2020-10-23T13:54:36Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMzo1NDozNlrOHnO5NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMzo1ODowMlrOHnPC0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkwMDUzMg==", "bodyText": "add getColumns to HiveColumnHandle that would return both partition and data columns", "url": "https://github.com/trinodb/trino/pull/5634#discussion_r510900532", "createdAt": "2020-10-23T13:54:36Z", "author": {"login": "sopel39"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveBucketing.java", "diffHunk": "@@ -203,21 +204,24 @@ static int getBucketNumber(int hashCode, int bucketCount)\n         return Optional.of(new HiveBucketHandle(bucketColumns.build(), bucketingVersion, bucketCount, bucketCount));\n     }\n \n-    public static Optional<HiveBucketFilter> getHiveBucketFilter(Table table, TupleDomain<ColumnHandle> effectivePredicate)\n+    public static Optional<HiveBucketFilter> getHiveBucketFilter(HiveTableHandle hiveTable, TupleDomain<ColumnHandle> effectivePredicate)\n     {\n-        if (table.getStorage().getBucketProperty().isEmpty()) {\n+        if (hiveTable.getBucketHandle().isEmpty()) {\n             return Optional.empty();\n         }\n-\n-        if (bucketedOnTimestamp(table.getStorage().getBucketProperty().get(), table)) {\n+        HiveBucketProperty hiveBucketProperty = hiveTable.getBucketHandle().get().toTableBucketProperty();\n+        List<Column> dataColumns = hiveTable.getDataColumns().stream()\n+                .map(column -> new Column(column.getName(), column.getHiveType(), column.getComment()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkwMTkwMw==", "bodyText": "add override with HiveTableHandle as argument", "url": "https://github.com/trinodb/trino/pull/5634#discussion_r510901903", "createdAt": "2020-10-23T13:56:28Z", "author": {"login": "sopel39"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveBucketing.java", "diffHunk": "@@ -307,10 +311,15 @@ public static BucketingVersion getBucketingVersion(Map<String, String> tableProp\n     }\n \n     public static boolean bucketedOnTimestamp(HiveBucketProperty bucketProperty, Table table)\n+    {\n+        return bucketedOnTimestamp(bucketProperty, table.getDataColumns(), table.getTableName());\n+    }\n+\n+    public static boolean bucketedOnTimestamp(HiveBucketProperty bucketProperty, List<Column> dataColumns, String tableName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkwMjk5Mw==", "bodyText": "you can just pass HiveTableHandle hiveTable, no need for hiveBucketProperty", "url": "https://github.com/trinodb/trino/pull/5634#discussion_r510902993", "createdAt": "2020-10-23T13:58:02Z", "author": {"login": "sopel39"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveBucketing.java", "diffHunk": "@@ -241,19 +245,19 @@ static int getBucketNumber(int hashCode, int bucketCount)\n         return Optional.of(new HiveBucketFilter(builder.build()));\n     }\n \n-    private static Optional<Set<Integer>> getHiveBuckets(Table table, Map<ColumnHandle, List<NullableValue>> bindings)\n+    private static Optional<Set<Integer>> getHiveBuckets(HiveBucketProperty hiveBucketProperty, HiveTableHandle hiveTable, Map<ColumnHandle, List<NullableValue>> bindings)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NTk1MzU2", "url": "https://github.com/trinodb/trino/pull/5634#pullrequestreview-516595356", "createdAt": "2020-10-26T09:27:23Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOToyNzoyNFrOHoHDlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOTozMTo0NlrOHoHPTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyMDY5Mw==", "bodyText": "make this single line.", "url": "https://github.com/trinodb/trino/pull/5634#discussion_r511820693", "createdAt": "2020-10-26T09:27:24Z", "author": {"login": "sopel39"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/alluxio/ProtoUtils.java", "diffHunk": "@@ -151,7 +153,8 @@ static SortingColumn fromProto(alluxio.grpc.table.layout.hive.SortingColumn colu\n         List<SortingColumn> sortedBy = property.getSortedByList().stream()\n                 .map(ProtoUtils::fromProto)\n                 .collect(toImmutableList());\n-        return Optional.of(new HiveBucketProperty(property.getBucketedByList(), HiveBucketing.BucketingVersion.BUCKETING_V1,\n+        HiveBucketing.BucketingVersion bucketingVersion = HiveBucketing.getBucketingVersion(tableParameters);\n+        return Optional.of(new HiveBucketProperty(property.getBucketedByList(), bucketingVersion,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyMzY5Mw==", "bodyText": "Right, but I've seen similar pattern:\nnew Column(column.getName(), column.getHiveType(), column.getComment()))\nin many places.\nWe should at leas have HiveColumnHandle#toMetastoreColumn", "url": "https://github.com/trinodb/trino/pull/5634#discussion_r511823693", "createdAt": "2020-10-26T09:31:46Z", "author": {"login": "sopel39"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveBucketing.java", "diffHunk": "@@ -203,21 +204,24 @@ static int getBucketNumber(int hashCode, int bucketCount)\n         return Optional.of(new HiveBucketHandle(bucketColumns.build(), bucketingVersion, bucketCount, bucketCount));\n     }\n \n-    public static Optional<HiveBucketFilter> getHiveBucketFilter(Table table, TupleDomain<ColumnHandle> effectivePredicate)\n+    public static Optional<HiveBucketFilter> getHiveBucketFilter(HiveTableHandle hiveTable, TupleDomain<ColumnHandle> effectivePredicate)\n     {\n-        if (table.getStorage().getBucketProperty().isEmpty()) {\n+        if (hiveTable.getBucketHandle().isEmpty()) {\n             return Optional.empty();\n         }\n-\n-        if (bucketedOnTimestamp(table.getStorage().getBucketProperty().get(), table)) {\n+        HiveBucketProperty hiveBucketProperty = hiveTable.getBucketHandle().get().toTableBucketProperty();\n+        List<Column> dataColumns = hiveTable.getDataColumns().stream()\n+                .map(column -> new Column(column.getName(), column.getHiveType(), column.getComment()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkwMDUzMg=="}, "originalCommit": null, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ff2f2009338470bc83da67e4214179e069c1e0f", "author": {"user": {"login": "raunaqmorarka", "name": "Raunaq Morarka"}}, "url": "https://github.com/trinodb/trino/commit/3ff2f2009338470bc83da67e4214179e069c1e0f", "committedDate": "2020-10-26T10:02:33Z", "message": "Fix reading bucket version for Alluxio"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ba06c5eda97d93f8250c08162f814b71a17dd7c", "author": {"user": {"login": "raunaqmorarka", "name": "Raunaq Morarka"}}, "url": "https://github.com/trinodb/trino/commit/3ba06c5eda97d93f8250c08162f814b71a17dd7c", "committedDate": "2020-10-26T18:00:32Z", "message": "Add HiveColumnHandle#toMetastoreColumn"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8ec128c0f80cd674a51a87d4ded7393dc898081", "author": {"user": {"login": "raunaqmorarka", "name": "Raunaq Morarka"}}, "url": "https://github.com/trinodb/trino/commit/c8ec128c0f80cd674a51a87d4ded7393dc898081", "committedDate": "2020-10-26T18:00:38Z", "message": "Implement node local dynamic bucket pruning"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "c8ec128c0f80cd674a51a87d4ded7393dc898081", "author": {"user": {"login": "raunaqmorarka", "name": "Raunaq Morarka"}}, "url": "https://github.com/trinodb/trino/commit/c8ec128c0f80cd674a51a87d4ded7393dc898081", "committedDate": "2020-10-26T18:00:38Z", "message": "Implement node local dynamic bucket pruning"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NDY4MDgz", "url": "https://github.com/trinodb/trino/pull/5634#pullrequestreview-517468083", "createdAt": "2020-10-27T08:53:08Z", "commit": {"oid": "c8ec128c0f80cd674a51a87d4ded7393dc898081"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3061, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}