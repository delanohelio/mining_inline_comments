{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNTQ2ODE0", "number": 3601, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxOTozNzo0MFrOD4zm0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTo0ODoyN1rOEJuJHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODkyMzY4OnYy", "diffSide": "RIGHT", "path": "presto-phoenix/src/test/java/io/prestosql/plugin/phoenix/TestPhoenixDistributedQueries.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxOTozNzo0MFrOGPu2Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMzoxMjozOVrOGQosjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE0OTMzNQ==", "bodyText": "That's incorrect error message. We didn't ask to create a column of type quote.\nThis is because getEscapedArgument doesn't support escaping \" within the name.\nIf Phoenix does not support this, we need to filter this out on our side.\nThen, the correct way to exclude this test case would be like here\nhttps://github.com/prestosql/presto/blob/329a48592ecb6c628712ef3648f2e8da7eb33d38/presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestMySqlDistributedQueries.java#L123-L127", "url": "https://github.com/trinodb/trino/pull/3601#discussion_r419149335", "createdAt": "2020-05-03T19:37:40Z", "author": {"login": "findepi"}, "path": "presto-phoenix/src/test/java/io/prestosql/plugin/phoenix/TestPhoenixDistributedQueries.java", "diffHunk": "@@ -136,8 +137,13 @@ public void testCreateSchema()\n     @Override\n     public void testColumnName(String columnName)\n     {\n-        // TODO (https://github.com/prestosql/presto/issues/3466) Phoenix generally lacks quoting in underlying queries\n-        throw new SkipException(\"TODO\");\n+        if (columnName.equals(\"a\\\"quote\")) {\n+            assertThatThrownBy(() -> super.testColumnName(columnName))\n+                    .hasMessageContaining(\"Illegal data. Unsupported sql type: QUOTE\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4NjM2MQ==", "bodyText": "@findepi Replaced with isColumnNameRejected. As far as I confirmed, we cannot use double-quotation for column name.", "url": "https://github.com/trinodb/trino/pull/3601#discussion_r420086361", "createdAt": "2020-05-05T12:55:58Z", "author": {"login": "ebyhr"}, "path": "presto-phoenix/src/test/java/io/prestosql/plugin/phoenix/TestPhoenixDistributedQueries.java", "diffHunk": "@@ -136,8 +137,13 @@ public void testCreateSchema()\n     @Override\n     public void testColumnName(String columnName)\n     {\n-        // TODO (https://github.com/prestosql/presto/issues/3466) Phoenix generally lacks quoting in underlying queries\n-        throw new SkipException(\"TODO\");\n+        if (columnName.equals(\"a\\\"quote\")) {\n+            assertThatThrownBy(() -> super.testColumnName(columnName))\n+                    .hasMessageContaining(\"Illegal data. Unsupported sql type: QUOTE\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE0OTMzNQ=="}, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA5NzE2NA==", "bodyText": "@ebyhr thanks!\nplease make sure the column name is cleanly rejected at some point, so that user knows this is illegal column name, not something else.\neg io.prestosql.plugin.mysql.TestMySqlDistributedQueries#isColumnNameRejected verifies the actual exception message contains \"Incorrect column name\"", "url": "https://github.com/trinodb/trino/pull/3601#discussion_r420097164", "createdAt": "2020-05-05T13:12:39Z", "author": {"login": "findepi"}, "path": "presto-phoenix/src/test/java/io/prestosql/plugin/phoenix/TestPhoenixDistributedQueries.java", "diffHunk": "@@ -136,8 +137,13 @@ public void testCreateSchema()\n     @Override\n     public void testColumnName(String columnName)\n     {\n-        // TODO (https://github.com/prestosql/presto/issues/3466) Phoenix generally lacks quoting in underlying queries\n-        throw new SkipException(\"TODO\");\n+        if (columnName.equals(\"a\\\"quote\")) {\n+            assertThatThrownBy(() -> super.testColumnName(columnName))\n+                    .hasMessageContaining(\"Illegal data. Unsupported sql type: QUOTE\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE0OTMzNQ=="}, "originalCommit": null, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjI2NzA4OnYy", "diffSide": "RIGHT", "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixMetadata.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTo0Mzo1NlrOGqW-cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDo0NDoyN1rOGqhhWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2OTgxMQ==", "bodyText": "@vincentpoon should we go thru toMetadataCasing here before calling getEscapedArgument?", "url": "https://github.com/trinodb/trino/pull/3601#discussion_r447069811", "createdAt": "2020-06-29T15:43:56Z", "author": {"login": "findepi"}, "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixMetadata.java", "diffHunk": "@@ -351,7 +351,7 @@ private JdbcOutputTableHandle createTable(ConnectorSession session, ConnectorTab\n                     typeStatement += \" not null\";\n                     pkNames.add(columnName);\n                 }\n-                columnList.add(format(\"%s %s\", columnName, typeStatement));\n+                columnList.add(format(\"%s %s\", getEscapedArgument(columnName), typeStatement));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd1cfa40465b9a34f434e822bc0249722d6915c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE3NzQzOA==", "bodyText": "Hmm this code doesn't look right to me (I think it was from another PR I based my original one off of).  Firstly, connection.getMetaData().storesUpperCaseIdentifiers() would always return true, so the method toMetadataCasing isn't really needed.\nPhoenix uppercases identifiers if they aren't quoted.\nIf they are quoted, then it's case sensitive.\nIs there a way for us to tell in Presto whether the user quoted the identifier or not?  Because it seems we should base the uppercase decision off that.", "url": "https://github.com/trinodb/trino/pull/3601#discussion_r447177438", "createdAt": "2020-06-29T18:43:03Z", "author": {"login": "vincentpoon"}, "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixMetadata.java", "diffHunk": "@@ -351,7 +351,7 @@ private JdbcOutputTableHandle createTable(ConnectorSession session, ConnectorTab\n                     typeStatement += \" not null\";\n                     pkNames.add(columnName);\n                 }\n-                columnList.add(format(\"%s %s\", columnName, typeStatement));\n+                columnList.add(format(\"%s %s\", getEscapedArgument(columnName), typeStatement));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2OTgxMQ=="}, "originalCommit": {"oid": "acd1cfa40465b9a34f434e822bc0249722d6915c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI0MjU4NQ==", "bodyText": "Is there a way for us to tell in Presto whether the user quoted the identifier or not? Because it seems we should base the uppercase decision off that.\n\nnot yet,  working on that -- #17", "url": "https://github.com/trinodb/trino/pull/3601#discussion_r447242585", "createdAt": "2020-06-29T20:44:27Z", "author": {"login": "findepi"}, "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixMetadata.java", "diffHunk": "@@ -351,7 +351,7 @@ private JdbcOutputTableHandle createTable(ConnectorSession session, ConnectorTab\n                     typeStatement += \" not null\";\n                     pkNames.add(columnName);\n                 }\n-                columnList.add(format(\"%s %s\", columnName, typeStatement));\n+                columnList.add(format(\"%s %s\", getEscapedArgument(columnName), typeStatement));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2OTgxMQ=="}, "originalCommit": {"oid": "acd1cfa40465b9a34f434e822bc0249722d6915c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjI4NjM5OnYy", "diffSide": "RIGHT", "path": "presto-phoenix/src/test/java/io/prestosql/plugin/phoenix/TestPhoenixDistributedQueries.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTo0ODoyN1rOGqXKXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTo0ODoyN1rOGqXKXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA3Mjg2MA==", "bodyText": "Leave some TODO comment still.\nCurrently the \" in column name leads to SQL injection.\nUse of a\"quote column should produce a reasonable exception message like \"Invalid column name\" or \"Column name cannot contain a quotation sign\".  Then, here you should verify the actual exception message.", "url": "https://github.com/trinodb/trino/pull/3601#discussion_r447072860", "createdAt": "2020-06-29T15:48:27Z", "author": {"login": "findepi"}, "path": "presto-phoenix/src/test/java/io/prestosql/plugin/phoenix/TestPhoenixDistributedQueries.java", "diffHunk": "@@ -134,10 +134,9 @@ public void testCreateSchema()\n     }\n \n     @Override\n-    public void testColumnName(String columnName)\n+    protected boolean isColumnNameRejected(Exception exception, String columnName, boolean delimited)\n     {\n-        // TODO (https://github.com/prestosql/presto/issues/3466) Phoenix generally lacks quoting in underlying queries\n-        throw new SkipException(\"TODO\");\n+        return columnName.equals(\"a\\\"quote\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd1cfa40465b9a34f434e822bc0249722d6915c"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 7, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}