{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0MzE0OTEz", "number": 6243, "title": "Test ResultSet.getString for a DATE", "bodyText": "", "createdAt": "2020-12-08T09:35:35Z", "url": "https://github.com/trinodb/trino/pull/6243", "merged": true, "mergeCommit": {"oid": "853a236adb7d6191b22e9609f1dfb82c5a78e029"}, "closed": true, "closedAt": "2020-12-09T11:06:22Z", "author": {"login": "findepi"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdkG1BNgFqTU0Njk1MDUyMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkMXKQABqjQwODU1MDgyMDg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2OTUwNTIy", "url": "https://github.com/trinodb/trino/pull/6243#pullrequestreview-546950522", "createdAt": "2020-12-08T09:35:50Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwOTozNTo1MVrOIBP63w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwOTozNTo1MVrOIBP63w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE4MDMxOQ==", "bodyText": "#6242", "url": "https://github.com/trinodb/trino/pull/6243#discussion_r538180319", "createdAt": "2020-12-08T09:35:51Z", "author": {"login": "findepi"}, "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -173,63 +173,130 @@ public void testDate()\n     {\n         try (ConnectedStatement connectedStatement = newStatement()) {\n             checkRepresentation(connectedStatement.getStatement(), \"DATE '2018-02-13'\", Types.DATE, (rs, column) -> {\n-                assertEquals(rs.getObject(column), Date.valueOf(LocalDate.of(2018, 2, 13)));\n-                assertEquals(rs.getObject(column, Date.class), Date.valueOf(LocalDate.of(2018, 2, 13)));\n-                assertEquals(rs.getDate(column), Date.valueOf(LocalDate.of(2018, 2, 13)));\n+                LocalDate localDate = LocalDate.of(2018, 2, 13);\n+                Date sqlDate = Date.valueOf(localDate);\n+\n+                assertEquals(rs.getObject(column), sqlDate);\n+                assertEquals(rs.getObject(column, Date.class), sqlDate);\n+                // TODO assertEquals(rs.getObject(column, LocalDate.class), localDate);\n+\n+                assertEquals(rs.getDate(column), sqlDate);\n                 assertThatThrownBy(() -> rs.getTime(column))\n                         .isInstanceOf(IllegalArgumentException.class)\n                         .hasMessage(\"Expected column to be a time type but is date\");\n                 assertThatThrownBy(() -> rs.getTimestamp(column))\n                         .isInstanceOf(IllegalArgumentException.class)\n                         .hasMessage(\"Expected column to be a timestamp type but is date\");\n+\n+                assertEquals(rs.getString(column), localDate.toString());\n             });\n \n             // distant past, but apparently not an uncommon value in practice\n             checkRepresentation(connectedStatement.getStatement(), \"DATE '0001-01-01'\", Types.DATE, (rs, column) -> {\n-                assertEquals(rs.getObject(column), Date.valueOf(LocalDate.of(1, 1, 1)));\n-                assertEquals(rs.getDate(column), Date.valueOf(LocalDate.of(1, 1, 1)));\n+                LocalDate localDate = LocalDate.of(1, 1, 1);\n+                Date sqlDate = Date.valueOf(localDate);\n+\n+                assertEquals(rs.getObject(column), sqlDate);\n+                assertEquals(rs.getObject(column, Date.class), sqlDate);\n+                // TODO assertEquals(rs.getObject(column, LocalDate.class), localDate);\n+\n+                assertEquals(rs.getDate(column), sqlDate);\n+                assertThatThrownBy(() -> rs.getTime(column))\n+                        .isInstanceOf(IllegalArgumentException.class)\n+                        .hasMessage(\"Expected column to be a time type but is date\");\n+                assertThatThrownBy(() -> rs.getTimestamp(column))\n+                        .isInstanceOf(IllegalArgumentException.class)\n+                        .hasMessage(\"Expected column to be a timestamp type but is date\");\n+\n+                assertEquals(rs.getString(column), localDate.toString());\n+            });\n+\n+            // date which midnight does not exist in test JVM zone\n+            checkRepresentation(connectedStatement.getStatement(), \"DATE '1970-01-01'\", Types.DATE, (rs, column) -> {\n+                LocalDate localDate = LocalDate.of(1970, 1, 1);\n+\n+                // TODO (https://github.com/prestosql/presto/issues/6242) this should not fail\n+                assertThatThrownBy(() -> rs.getObject(column))\n+                        .isInstanceOf(SQLException.class)\n+                        .hasMessage(\"Expected value to be a date but is: 1970-01-01\");\n+                // TODO (https://github.com/prestosql/presto/issues/6242) this should not fail\n+                assertThatThrownBy(() -> rs.getObject(column, Date.class))\n+                        .isInstanceOf(SQLException.class)\n+                        .hasMessage(\"Expected value to be a date but is: 1970-01-01\");\n+                // TODO assertEquals(rs.getObject(column, LocalDate.class), localDate);\n+\n+                // TODO (https://github.com/prestosql/presto/issues/6242) this should not fail", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3MjA3NDU1", "url": "https://github.com/trinodb/trino/pull/6243#pullrequestreview-547207455", "createdAt": "2020-12-08T12:56:38Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "8496ae47a92eda8e1c7c112d63721daf54b2ec4f", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/8496ae47a92eda8e1c7c112d63721daf54b2ec4f", "committedDate": "2020-12-08T15:58:59Z", "message": "Extract common expressions in assertions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47d31b9b63aeb5b42cec12d628711a1d8075e424", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/47d31b9b63aeb5b42cec12d628711a1d8075e424", "committedDate": "2020-12-08T15:58:59Z", "message": "Test ResultSet.getString for a DATE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61606115c942b3f165ba5a964d7a1ece5f79af42", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/61606115c942b3f165ba5a964d7a1ece5f79af42", "committedDate": "2020-12-08T16:02:04Z", "message": "Report proper SQLException for ResultSet.getObject on an unrepresentable DATE"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "61606115c942b3f165ba5a964d7a1ece5f79af42", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/61606115c942b3f165ba5a964d7a1ece5f79af42", "committedDate": "2020-12-08T16:02:04Z", "message": "Report proper SQLException for ResultSet.getObject on an unrepresentable DATE"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2091, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}