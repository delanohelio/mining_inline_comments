{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0Nzc5MzM1", "number": 5342, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjo1NToyN1rOEoiSyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDoyOTo0NVrOEo09fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTQwMzYwOnYy", "diffSide": "RIGHT", "path": "presto-postgresql/src/main/java/io/prestosql/plugin/postgresql/PostgreSqlClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjo1NToyN1rOHZru4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjo1NToyN1rOHZru4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY5Mjk2Mg==", "bodyText": "The commit message should say about timestamp with time zone\nNVM. I cant read", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r496692962", "createdAt": "2020-09-29T12:55:27Z", "author": {"login": "losipiuk"}, "path": "presto-postgresql/src/main/java/io/prestosql/plugin/postgresql/PostgreSqlClient.java", "diffHunk": "@@ -463,15 +463,16 @@ public WriteMapping toWriteMapping(ConnectorSession session, Type type)\n             verify(timestampType.getPrecision() > TimestampType.MAX_SHORT_PRECISION);\n             return WriteMapping.objectMapping(format(\"timestamp(%s)\", MAX_SUPPORTED_TIMESTAMP_PRECISION), longTimestampWriteFunction());\n         }\n-        if (type instanceof TimestampWithTimeZoneType && ((TimestampWithTimeZoneType) type).getPrecision() <= MAX_SUPPORTED_TIMESTAMP_PRECISION) {\n-            int precision = ((TimestampWithTimeZoneType) type).getPrecision();\n-            String postgresType = format(\"timestamptz(%d)\", precision);\n-            if (precision <= TimestampWithTimeZoneType.MAX_SHORT_PRECISION) {\n-                return WriteMapping.longMapping(postgresType, shortTimestampWithTimeZoneWriteFunction());\n-            }\n-            else {\n-                return WriteMapping.objectMapping(postgresType, longTimestampWithTimeZoneWriteFunction());\n+        if (type instanceof TimestampWithTimeZoneType) {\n+            TimestampWithTimeZoneType timestampWithTimeZoneType = (TimestampWithTimeZoneType) type;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTY3OTE3OnYy", "diffSide": "RIGHT", "path": "presto-postgresql/src/main/java/io/prestosql/plugin/postgresql/PostgreSqlClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzo1NDoxNlrOHZuZqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNTo0NjoxN1rOHZ0UOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjczNjY4MA==", "bodyText": "Use a constant?", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r496736680", "createdAt": "2020-09-29T13:54:16Z", "author": {"login": "aalbu"}, "path": "presto-postgresql/src/main/java/io/prestosql/plugin/postgresql/PostgreSqlClient.java", "diffHunk": "@@ -499,15 +515,68 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n         return true;\n     }\n \n+    private static ColumnMapping timeColumnMapping(int precision)\n+    {\n+        verify(precision <= 6);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgzMzU5NQ==", "bodyText": "There is no constant to be used here. The verify guards certain assumptions within the method body, so using eg MAX_SUPPORTED_TIMESTAMP_PRECISION would not be correct.\nWill add\n// PostgreSQL limit but also assumption within this method", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r496833595", "createdAt": "2020-09-29T15:46:17Z", "author": {"login": "findepi"}, "path": "presto-postgresql/src/main/java/io/prestosql/plugin/postgresql/PostgreSqlClient.java", "diffHunk": "@@ -499,15 +515,68 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n         return true;\n     }\n \n+    private static ColumnMapping timeColumnMapping(int precision)\n+    {\n+        verify(precision <= 6);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjczNjY4MA=="}, "originalCommit": null, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTcwNjk0OnYy", "diffSide": "RIGHT", "path": "presto-postgresql/src/main/java/io/prestosql/plugin/postgresql/PostgreSqlClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzo1OTozM1rOHZuqcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjoxMToxMlrOHaxHyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc0MDk3OQ==", "bodyText": "Why not nanosOfDay = 0 (since in Presto 24:00:00 == 00:00:00)?", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r496740979", "createdAt": "2020-09-29T13:59:33Z", "author": {"login": "aalbu"}, "path": "presto-postgresql/src/main/java/io/prestosql/plugin/postgresql/PostgreSqlClient.java", "diffHunk": "@@ -499,15 +515,68 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n         return true;\n     }\n \n+    private static ColumnMapping timeColumnMapping(int precision)\n+    {\n+        verify(precision <= 6);\n+        return ColumnMapping.longMapping(\n+                createTimeType(precision),\n+                (resultSet, columnIndex) -> {\n+                    LocalTime time = resultSet.getObject(columnIndex, LocalTime.class);\n+                    long nanosOfDay = time.toNanoOfDay();\n+                    if (nanosOfDay == NANOSECONDS_PER_DAY - 1) {\n+                        // PostgreSQL's 24:00:00 is returned as 23:59:59.999999999, regardless of column precision\n+                        nanosOfDay = NANOSECONDS_PER_DAY - LongMath.pow(10, 9 - precision);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgzNTI5Ng==", "bodyText": "I am preserving existing behavior here (as documented by Add explicit test for PostgreSQL TIME 24 commit which goes before the actual change), which, i think was reviewed by @martint when he did time(p). I am open to suggestions or a change. Maybe an issue?", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r496835296", "createdAt": "2020-09-29T15:47:50Z", "author": {"login": "findepi"}, "path": "presto-postgresql/src/main/java/io/prestosql/plugin/postgresql/PostgreSqlClient.java", "diffHunk": "@@ -499,15 +515,68 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n         return true;\n     }\n \n+    private static ColumnMapping timeColumnMapping(int precision)\n+    {\n+        verify(precision <= 6);\n+        return ColumnMapping.longMapping(\n+                createTimeType(precision),\n+                (resultSet, columnIndex) -> {\n+                    LocalTime time = resultSet.getObject(columnIndex, LocalTime.class);\n+                    long nanosOfDay = time.toNanoOfDay();\n+                    if (nanosOfDay == NANOSECONDS_PER_DAY - 1) {\n+                        // PostgreSQL's 24:00:00 is returned as 23:59:59.999999999, regardless of column precision\n+                        nanosOfDay = NANOSECONDS_PER_DAY - LongMath.pow(10, 9 - precision);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc0MDk3OQ=="}, "originalCommit": null, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgyOTgzNA==", "bodyText": "No, I think what you did is safer.", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r497829834", "createdAt": "2020-09-30T22:11:12Z", "author": {"login": "aalbu"}, "path": "presto-postgresql/src/main/java/io/prestosql/plugin/postgresql/PostgreSqlClient.java", "diffHunk": "@@ -499,15 +515,68 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n         return true;\n     }\n \n+    private static ColumnMapping timeColumnMapping(int precision)\n+    {\n+        verify(precision <= 6);\n+        return ColumnMapping.longMapping(\n+                createTimeType(precision),\n+                (resultSet, columnIndex) -> {\n+                    LocalTime time = resultSet.getObject(columnIndex, LocalTime.class);\n+                    long nanosOfDay = time.toNanoOfDay();\n+                    if (nanosOfDay == NANOSECONDS_PER_DAY - 1) {\n+                        // PostgreSQL's 24:00:00 is returned as 23:59:59.999999999, regardless of column precision\n+                        nanosOfDay = NANOSECONDS_PER_DAY - LongMath.pow(10, 9 - precision);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc0MDk3OQ=="}, "originalCommit": null, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTcyODkxOnYy", "diffSide": "RIGHT", "path": "presto-postgresql/src/main/java/io/prestosql/plugin/postgresql/PostgreSqlClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDowNDowMVrOHZu4Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNTo0ODoyMlrOHZ0dHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc0NDU0Mw==", "bodyText": "Constant?", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r496744543", "createdAt": "2020-09-29T14:04:01Z", "author": {"login": "aalbu"}, "path": "presto-postgresql/src/main/java/io/prestosql/plugin/postgresql/PostgreSqlClient.java", "diffHunk": "@@ -499,15 +515,68 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n         return true;\n     }\n \n+    private static ColumnMapping timeColumnMapping(int precision)\n+    {\n+        verify(precision <= 6);\n+        return ColumnMapping.longMapping(\n+                createTimeType(precision),\n+                (resultSet, columnIndex) -> {\n+                    LocalTime time = resultSet.getObject(columnIndex, LocalTime.class);\n+                    long nanosOfDay = time.toNanoOfDay();\n+                    if (nanosOfDay == NANOSECONDS_PER_DAY - 1) {\n+                        // PostgreSQL's 24:00:00 is returned as 23:59:59.999999999, regardless of column precision\n+                        nanosOfDay = NANOSECONDS_PER_DAY - LongMath.pow(10, 9 - precision);\n+                    }\n+\n+                    long picosOfDay = nanosOfDay * PICOSECONDS_PER_NANOSECOND;\n+                    return round(picosOfDay, 12 - precision);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgzNTg2OQ==", "bodyText": "\"12\" refers to \"picos\" (a variable name on the same line), so i do not think a constant would actually improve the code here", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r496835869", "createdAt": "2020-09-29T15:48:22Z", "author": {"login": "findepi"}, "path": "presto-postgresql/src/main/java/io/prestosql/plugin/postgresql/PostgreSqlClient.java", "diffHunk": "@@ -499,15 +515,68 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n         return true;\n     }\n \n+    private static ColumnMapping timeColumnMapping(int precision)\n+    {\n+        verify(precision <= 6);\n+        return ColumnMapping.longMapping(\n+                createTimeType(precision),\n+                (resultSet, columnIndex) -> {\n+                    LocalTime time = resultSet.getObject(columnIndex, LocalTime.class);\n+                    long nanosOfDay = time.toNanoOfDay();\n+                    if (nanosOfDay == NANOSECONDS_PER_DAY - 1) {\n+                        // PostgreSQL's 24:00:00 is returned as 23:59:59.999999999, regardless of column precision\n+                        nanosOfDay = NANOSECONDS_PER_DAY - LongMath.pow(10, 9 - precision);\n+                    }\n+\n+                    long picosOfDay = nanosOfDay * PICOSECONDS_PER_NANOSECOND;\n+                    return round(picosOfDay, 12 - precision);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc0NDU0Mw=="}, "originalCommit": null, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjI3MjYyOnYy", "diffSide": "RIGHT", "path": "presto-postgresql/src/main/java/io/prestosql/plugin/postgresql/PostgreSqlClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMzo0MjoxM1rOHaHeCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOTozODo1OFrOHasjLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE0NzQwMA==", "bodyText": "I'm confused by this. This ensures that precision is no larger than the max supported precision, but the else branch proceeds to handle timestamps with larger precision than that. Are the supported or not?", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r497147400", "createdAt": "2020-09-29T23:42:13Z", "author": {"login": "martint"}, "path": "presto-postgresql/src/main/java/io/prestosql/plugin/postgresql/PostgreSqlClient.java", "diffHunk": "@@ -444,9 +446,14 @@ public WriteMapping toWriteMapping(ConnectorSession session, Type type)\n         if (TIME.equals(type)) {\n             return WriteMapping.longMapping(\"time\", timeWriteFunction());\n         }\n-        if (type instanceof TimestampType && ((TimestampType) type).getPrecision() <= MAX_SUPPORTED_TIMESTAMP_PRECISION) {\n+        if (type instanceof TimestampType) {\n             TimestampType timestampType = (TimestampType) type;\n-            return WriteMapping.longMapping(format(\"timestamp(%s)\", timestampType.getPrecision()), timestampWriteFunction(timestampType));\n+            if (timestampType.getPrecision() <= MAX_SUPPORTED_TIMESTAMP_PRECISION) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc1NDkyNQ==", "bodyText": "I will rename the const MAX_SUPPORTED_TIMESTAMP_PRECISION to POSTGRESQL_MAX_SUPPORTED_TIMESTAMP_PRECISION", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r497754925", "createdAt": "2020-09-30T19:38:58Z", "author": {"login": "findepi"}, "path": "presto-postgresql/src/main/java/io/prestosql/plugin/postgresql/PostgreSqlClient.java", "diffHunk": "@@ -444,9 +446,14 @@ public WriteMapping toWriteMapping(ConnectorSession session, Type type)\n         if (TIME.equals(type)) {\n             return WriteMapping.longMapping(\"time\", timeWriteFunction());\n         }\n-        if (type instanceof TimestampType && ((TimestampType) type).getPrecision() <= MAX_SUPPORTED_TIMESTAMP_PRECISION) {\n+        if (type instanceof TimestampType) {\n             TimestampType timestampType = (TimestampType) type;\n-            return WriteMapping.longMapping(format(\"timestamp(%s)\", timestampType.getPrecision()), timestampWriteFunction(timestampType));\n+            if (timestampType.getPrecision() <= MAX_SUPPORTED_TIMESTAMP_PRECISION) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE0NzQwMA=="}, "originalCommit": null, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjMxMjk3OnYy", "diffSide": "RIGHT", "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMzo1MTozMVrOHaH3yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOTo0Mzo1OVrOHastjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE1Mzk5Mg==", "bodyText": "with timestamp precision higher than expressible with {@code LocalDateTime}.\n\nInaccurate comment? Most of the tests below use precisions that fit within LocalDateTime precision.", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r497153992", "createdAt": "2020-09-29T23:51:31Z", "author": {"login": "martint"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -1052,6 +1058,59 @@ public void testTimestamp(boolean insertWithPresto, ZoneId sessionZone)\n         }\n     }\n \n+    /**\n+     * Additional test supplementing {@link #testTimestamp} with timestamp precision higher than expressible with {@code LocalDateTime}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc1NzU4MA==", "bodyText": "reworded", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r497757580", "createdAt": "2020-09-30T19:43:59Z", "author": {"login": "findepi"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -1052,6 +1058,59 @@ public void testTimestamp(boolean insertWithPresto, ZoneId sessionZone)\n         }\n     }\n \n+    /**\n+     * Additional test supplementing {@link #testTimestamp} with timestamp precision higher than expressible with {@code LocalDateTime}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE1Mzk5Mg=="}, "originalCommit": null, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjM2NTExOnYy", "diffSide": "RIGHT", "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDowNDoyNlrOHaIZ4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMDowMzoyOVrOHatVng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE2MjcyMg==", "bodyText": "Is this the value returned by PostgresSQL's JDBC driver or are we somehow changing it on the connector side?", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r497162722", "createdAt": "2020-09-30T00:04:26Z", "author": {"login": "martint"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -1010,6 +1011,51 @@ public void testTime(boolean insertWithPresto, ZoneId sessionZone)\n         }\n     }\n \n+    @Test\n+    public void testTime24()\n+    {\n+        try (TestTable testTable = new TestTable(\n+                new JdbcSqlExecutor(postgreSqlServer.getJdbcUrl()),\n+                \"tpch.test_time_24\",\n+                \"(a time(0), b time(3), c time(6))\",\n+                List.of(\n+                        // \"zero\" row\n+                        \"TIME '00:00:00', TIME '00:00:00.000', TIME '00:00:00.000000'\",\n+                        // \"max\" row\n+                        \"TIME '23:59:59', TIME '23:59:59.999', TIME '23:59:59.999999'\",\n+                        // \"24\" row\n+                        \"TIME '24:00:00', TIME '24:00:00.000', TIME '24:00:00.000000'\"))) {\n+            // select\n+            assertThat(query(\"SELECT a, b, c FROM \" + testTable.getName()))\n+                    .matches(\"VALUES \" +\n+                            \"(TIME '00:00:00.000', TIME '00:00:00.000', TIME '00:00:00.000'), \" +\n+                            \"(TIME '23:59:59.000', TIME '23:59:59.999', TIME '23:59:59.999'), \" +\n+                            \"(TIME '23:59:59.999', TIME '23:59:59.999', TIME '23:59:59.999')\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2MzA0MA==", "bodyText": "This is what PostgreSQL JDBC returns upon rs.getObject(column) or rs.getObject(column, LocalTime.class) call.\nFor setup\ntest=# create table test_time_24(a time(0), b time(3), c time(6));\nCREATE TABLE\ntest=# insert into test_time_24 values (TIME '00:00:00', TIME '00:00:00.000', TIME '00:00:00.000000');\nINSERT 0 1\ntest=# insert into test_time_24 values (TIME '23:59:59', TIME '23:59:59.999', TIME '23:59:59.999999');\nINSERT 0 1\ntest=# insert into test_time_24 values (TIME '24:00:00', TIME '24:00:00.000', TIME '24:00:00.000000');\nINSERT 0 1\ntest=# select * from test_time_24;\n    a     |      b       |        c\n----------+--------------+-----------------\n 00:00:00 | 00:00:00     | 00:00:00\n 23:59:59 | 23:59:59.999 | 23:59:59.999999\n 24:00:00 | 24:00:00     | 24:00:00\n(3 rows)\n\n-----------------\nrs.getObject(1) = 00:00:00\nrs.getString(1) = 00:00:00\nrs.getObject(1, LocalTime.class) = 00:00\nrs.getObject(2) = 00:00:00\nrs.getString(2) = 00:00:00\nrs.getObject(2, LocalTime.class) = 00:00\nrs.getObject(3) = 00:00:00\nrs.getString(3) = 00:00:00\nrs.getObject(3, LocalTime.class) = 00:00\n-----------------\nrs.getObject(1) = 23:59:59\nrs.getString(1) = 23:59:59\nrs.getObject(1, LocalTime.class) = 23:59:59\nrs.getObject(2) = 23:59:59\nrs.getString(2) = 23:59:59.999\nrs.getObject(2, LocalTime.class) = 23:59:59.999\nrs.getObject(3) = 23:59:59\nrs.getString(3) = 23:59:59.999999\nrs.getObject(3, LocalTime.class) = 23:59:59.999999\n-----------------\nrs.getObject(1) = 00:00:00\nrs.getString(1) = 24:00:00\nrs.getObject(1, LocalTime.class) = 23:59:59.999999999\nrs.getObject(2) = 00:00:00\nrs.getString(2) = 24:00:00\nrs.getObject(2, LocalTime.class) = 23:59:59.999999999\nrs.getObject(3) = 00:00:00\nrs.getString(3) = 24:00:00\nrs.getObject(3, LocalTime.class) = 23:59:59.999999999\n\nThus, as you see, we can tell apart 24:00:00 case using getString.\nHowever, my PR does not substantially change treatment of 24:00:00 values, so\nif you want to change treatment of those values, I'd suggest a followup issue.", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r497763040", "createdAt": "2020-09-30T19:54:21Z", "author": {"login": "findepi"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -1010,6 +1011,51 @@ public void testTime(boolean insertWithPresto, ZoneId sessionZone)\n         }\n     }\n \n+    @Test\n+    public void testTime24()\n+    {\n+        try (TestTable testTable = new TestTable(\n+                new JdbcSqlExecutor(postgreSqlServer.getJdbcUrl()),\n+                \"tpch.test_time_24\",\n+                \"(a time(0), b time(3), c time(6))\",\n+                List.of(\n+                        // \"zero\" row\n+                        \"TIME '00:00:00', TIME '00:00:00.000', TIME '00:00:00.000000'\",\n+                        // \"max\" row\n+                        \"TIME '23:59:59', TIME '23:59:59.999', TIME '23:59:59.999999'\",\n+                        // \"24\" row\n+                        \"TIME '24:00:00', TIME '24:00:00.000', TIME '24:00:00.000000'\"))) {\n+            // select\n+            assertThat(query(\"SELECT a, b, c FROM \" + testTable.getName()))\n+                    .matches(\"VALUES \" +\n+                            \"(TIME '00:00:00.000', TIME '00:00:00.000', TIME '00:00:00.000'), \" +\n+                            \"(TIME '23:59:59.000', TIME '23:59:59.999', TIME '23:59:59.999'), \" +\n+                            \"(TIME '23:59:59.999', TIME '23:59:59.999', TIME '23:59:59.999')\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE2MjcyMg=="}, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2NzgzOA==", "bodyText": "No, I was just curious about the behavior. It seems very broken on PostgreSQL's part ;)", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r497767838", "createdAt": "2020-09-30T20:03:29Z", "author": {"login": "martint"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -1010,6 +1011,51 @@ public void testTime(boolean insertWithPresto, ZoneId sessionZone)\n         }\n     }\n \n+    @Test\n+    public void testTime24()\n+    {\n+        try (TestTable testTable = new TestTable(\n+                new JdbcSqlExecutor(postgreSqlServer.getJdbcUrl()),\n+                \"tpch.test_time_24\",\n+                \"(a time(0), b time(3), c time(6))\",\n+                List.of(\n+                        // \"zero\" row\n+                        \"TIME '00:00:00', TIME '00:00:00.000', TIME '00:00:00.000000'\",\n+                        // \"max\" row\n+                        \"TIME '23:59:59', TIME '23:59:59.999', TIME '23:59:59.999999'\",\n+                        // \"24\" row\n+                        \"TIME '24:00:00', TIME '24:00:00.000', TIME '24:00:00.000000'\"))) {\n+            // select\n+            assertThat(query(\"SELECT a, b, c FROM \" + testTable.getName()))\n+                    .matches(\"VALUES \" +\n+                            \"(TIME '00:00:00.000', TIME '00:00:00.000', TIME '00:00:00.000'), \" +\n+                            \"(TIME '23:59:59.000', TIME '23:59:59.999', TIME '23:59:59.999'), \" +\n+                            \"(TIME '23:59:59.999', TIME '23:59:59.999', TIME '23:59:59.999')\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE2MjcyMg=="}, "originalCommit": null, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjM3MTM5OnYy", "diffSide": "RIGHT", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/StandardColumnMappings.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDowNTo1NFrOHaIeFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOTo1NTowNVrOHatETA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE2Mzc5OQ==", "bodyText": "checkArgument?", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r497163799", "createdAt": "2020-09-30T00:05:54Z", "author": {"login": "martint"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/StandardColumnMappings.java", "diffHunk": "@@ -350,36 +351,31 @@ private static Time toSqlTime(LocalTime localTime)\n         return new Time(Time.valueOf(localTime).getTime() + NANOSECONDS.toMillis(localTime.getNano()));\n     }\n \n-    public static ColumnMapping timeColumnMapping()\n+    public static ColumnMapping timeColumnMapping(TimeType timeType)\n     {\n+        verify(timeType.getPrecision() <= 9, \"Unsupported type precision: %s\", timeType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2MzQwNA==", "bodyText": "Fixed", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r497763404", "createdAt": "2020-09-30T19:55:05Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/StandardColumnMappings.java", "diffHunk": "@@ -350,36 +351,31 @@ private static Time toSqlTime(LocalTime localTime)\n         return new Time(Time.valueOf(localTime).getTime() + NANOSECONDS.toMillis(localTime.getNano()));\n     }\n \n-    public static ColumnMapping timeColumnMapping()\n+    public static ColumnMapping timeColumnMapping(TimeType timeType)\n     {\n+        verify(timeType.getPrecision() <= 9, \"Unsupported type precision: %s\", timeType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE2Mzc5OQ=="}, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjQyNDc3OnYy", "diffSide": "RIGHT", "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDoxODo1NlrOHaJAuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMDozODo0NVrOHauczA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE3MjY2Nw==", "bodyText": "For later... we should fix this test to not use testTimestampDataProvider. Timezones don't play a role in TIME type, so we don't need to do any checks for gaps or different timezones.", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r497172667", "createdAt": "2020-09-30T00:18:56Z", "author": {"login": "martint"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -974,28 +974,35 @@ public void testEnum()\n         }\n     }\n \n+    /**\n+     * @see #testTimeCoercion\n+     */\n     @Test(dataProvider = \"testTimestampDataProvider\")\n     public void testTime(boolean insertWithPresto, ZoneId sessionZone)\n     {\n         LocalTime timeGapInJvmZone = LocalTime.of(0, 12, 34, 567_000_000);\n         checkIsGap(jvmZone, timeGapInJvmZone.atDate(EPOCH_DAY));\n \n         DataTypeTest tests = DataTypeTest.create()\n-                .addRoundTrip(timeDataType(), LocalTime.of(1, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(2, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(2, 12, 34, 1_000_000))\n-                .addRoundTrip(timeDataType(), LocalTime.of(3, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(4, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(5, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(6, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(9, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(10, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(15, 12, 34, 567_000_000))\n-                .addRoundTrip(timeDataType(), LocalTime.of(23, 59, 59, 999_000_000));\n-\n-        // epoch is also a gap in JVM zone\n-        tests.addRoundTrip(timeDataType(), epoch.toLocalTime());\n-        tests.addRoundTrip(timeDataType(), timeGapInJvmZone);\n+                .addRoundTrip(timeDataType(0), LocalTime.of(1, 12, 34, 0))\n+                .addRoundTrip(timeDataType(1), LocalTime.of(2, 12, 34, 100_000_000))\n+                .addRoundTrip(timeDataType(2), LocalTime.of(2, 12, 34, 10_000_000))\n+                .addRoundTrip(timeDataType(3), LocalTime.of(2, 12, 34, 1_000_000))\n+                .addRoundTrip(timeDataType(3), LocalTime.of(3, 12, 34, 0))\n+                .addRoundTrip(timeDataType(4), LocalTime.of(4, 12, 34, 0))\n+                .addRoundTrip(timeDataType(5), LocalTime.of(5, 12, 34, 0))\n+                .addRoundTrip(timeDataType(5), LocalTime.of(6, 12, 34, 0))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(9, 12, 34, 0))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(10, 12, 34, 0))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(15, 12, 34, 567_000_000))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(23, 59, 59, 0))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(23, 59, 59, 999_000_000))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(23, 59, 59, 999_900_000))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(23, 59, 59, 999_990_000))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(23, 59, 59, 999_999_000))\n+                // epoch is also a gap in JVM zone", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2NDE4Mg==", "bodyText": "Yes, the do not play anymore, but i think testing with more than one session zone is still valuable from blackbox testing perspective.\n(This is why testDate loops over time zones, even though date handling never dependent on a zone)\nJust my point of view.", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r497764182", "createdAt": "2020-09-30T19:56:34Z", "author": {"login": "findepi"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -974,28 +974,35 @@ public void testEnum()\n         }\n     }\n \n+    /**\n+     * @see #testTimeCoercion\n+     */\n     @Test(dataProvider = \"testTimestampDataProvider\")\n     public void testTime(boolean insertWithPresto, ZoneId sessionZone)\n     {\n         LocalTime timeGapInJvmZone = LocalTime.of(0, 12, 34, 567_000_000);\n         checkIsGap(jvmZone, timeGapInJvmZone.atDate(EPOCH_DAY));\n \n         DataTypeTest tests = DataTypeTest.create()\n-                .addRoundTrip(timeDataType(), LocalTime.of(1, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(2, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(2, 12, 34, 1_000_000))\n-                .addRoundTrip(timeDataType(), LocalTime.of(3, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(4, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(5, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(6, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(9, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(10, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(15, 12, 34, 567_000_000))\n-                .addRoundTrip(timeDataType(), LocalTime.of(23, 59, 59, 999_000_000));\n-\n-        // epoch is also a gap in JVM zone\n-        tests.addRoundTrip(timeDataType(), epoch.toLocalTime());\n-        tests.addRoundTrip(timeDataType(), timeGapInJvmZone);\n+                .addRoundTrip(timeDataType(0), LocalTime.of(1, 12, 34, 0))\n+                .addRoundTrip(timeDataType(1), LocalTime.of(2, 12, 34, 100_000_000))\n+                .addRoundTrip(timeDataType(2), LocalTime.of(2, 12, 34, 10_000_000))\n+                .addRoundTrip(timeDataType(3), LocalTime.of(2, 12, 34, 1_000_000))\n+                .addRoundTrip(timeDataType(3), LocalTime.of(3, 12, 34, 0))\n+                .addRoundTrip(timeDataType(4), LocalTime.of(4, 12, 34, 0))\n+                .addRoundTrip(timeDataType(5), LocalTime.of(5, 12, 34, 0))\n+                .addRoundTrip(timeDataType(5), LocalTime.of(6, 12, 34, 0))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(9, 12, 34, 0))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(10, 12, 34, 0))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(15, 12, 34, 567_000_000))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(23, 59, 59, 0))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(23, 59, 59, 999_000_000))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(23, 59, 59, 999_900_000))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(23, 59, 59, 999_990_000))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(23, 59, 59, 999_999_000))\n+                // epoch is also a gap in JVM zone", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE3MjY2Nw=="}, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2OTY3Mw==", "bodyText": "That makes the tests misleading. Just because TIME used to be sensitive to timezones, it doesn't mean that we should continue to treat them that way, just like we don't think about or test other types such as decimal, bigint, etc, that way.", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r497769673", "createdAt": "2020-09-30T20:07:11Z", "author": {"login": "martint"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -974,28 +974,35 @@ public void testEnum()\n         }\n     }\n \n+    /**\n+     * @see #testTimeCoercion\n+     */\n     @Test(dataProvider = \"testTimestampDataProvider\")\n     public void testTime(boolean insertWithPresto, ZoneId sessionZone)\n     {\n         LocalTime timeGapInJvmZone = LocalTime.of(0, 12, 34, 567_000_000);\n         checkIsGap(jvmZone, timeGapInJvmZone.atDate(EPOCH_DAY));\n \n         DataTypeTest tests = DataTypeTest.create()\n-                .addRoundTrip(timeDataType(), LocalTime.of(1, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(2, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(2, 12, 34, 1_000_000))\n-                .addRoundTrip(timeDataType(), LocalTime.of(3, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(4, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(5, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(6, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(9, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(10, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(15, 12, 34, 567_000_000))\n-                .addRoundTrip(timeDataType(), LocalTime.of(23, 59, 59, 999_000_000));\n-\n-        // epoch is also a gap in JVM zone\n-        tests.addRoundTrip(timeDataType(), epoch.toLocalTime());\n-        tests.addRoundTrip(timeDataType(), timeGapInJvmZone);\n+                .addRoundTrip(timeDataType(0), LocalTime.of(1, 12, 34, 0))\n+                .addRoundTrip(timeDataType(1), LocalTime.of(2, 12, 34, 100_000_000))\n+                .addRoundTrip(timeDataType(2), LocalTime.of(2, 12, 34, 10_000_000))\n+                .addRoundTrip(timeDataType(3), LocalTime.of(2, 12, 34, 1_000_000))\n+                .addRoundTrip(timeDataType(3), LocalTime.of(3, 12, 34, 0))\n+                .addRoundTrip(timeDataType(4), LocalTime.of(4, 12, 34, 0))\n+                .addRoundTrip(timeDataType(5), LocalTime.of(5, 12, 34, 0))\n+                .addRoundTrip(timeDataType(5), LocalTime.of(6, 12, 34, 0))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(9, 12, 34, 0))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(10, 12, 34, 0))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(15, 12, 34, 567_000_000))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(23, 59, 59, 0))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(23, 59, 59, 999_000_000))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(23, 59, 59, 999_900_000))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(23, 59, 59, 999_990_000))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(23, 59, 59, 999_999_000))\n+                // epoch is also a gap in JVM zone", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE3MjY2Nw=="}, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc4Mzc0NA==", "bodyText": "You could same way argue that since we're using java.time (let's assume we do uniformly) we do not need to set non-UTC as test JVM zone -- the result does not depend on the zone. Yet, it was important in the past to test with non-UTC zone and thus it remains important even after the code is fixed, as a regression testing measures.\nSimilarly, testing date/time with session zones is reasonable from regression testing perspective.\nTesting bigint or decimal cannot be argued the same way.", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r497783744", "createdAt": "2020-09-30T20:34:08Z", "author": {"login": "findepi"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -974,28 +974,35 @@ public void testEnum()\n         }\n     }\n \n+    /**\n+     * @see #testTimeCoercion\n+     */\n     @Test(dataProvider = \"testTimestampDataProvider\")\n     public void testTime(boolean insertWithPresto, ZoneId sessionZone)\n     {\n         LocalTime timeGapInJvmZone = LocalTime.of(0, 12, 34, 567_000_000);\n         checkIsGap(jvmZone, timeGapInJvmZone.atDate(EPOCH_DAY));\n \n         DataTypeTest tests = DataTypeTest.create()\n-                .addRoundTrip(timeDataType(), LocalTime.of(1, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(2, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(2, 12, 34, 1_000_000))\n-                .addRoundTrip(timeDataType(), LocalTime.of(3, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(4, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(5, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(6, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(9, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(10, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(15, 12, 34, 567_000_000))\n-                .addRoundTrip(timeDataType(), LocalTime.of(23, 59, 59, 999_000_000));\n-\n-        // epoch is also a gap in JVM zone\n-        tests.addRoundTrip(timeDataType(), epoch.toLocalTime());\n-        tests.addRoundTrip(timeDataType(), timeGapInJvmZone);\n+                .addRoundTrip(timeDataType(0), LocalTime.of(1, 12, 34, 0))\n+                .addRoundTrip(timeDataType(1), LocalTime.of(2, 12, 34, 100_000_000))\n+                .addRoundTrip(timeDataType(2), LocalTime.of(2, 12, 34, 10_000_000))\n+                .addRoundTrip(timeDataType(3), LocalTime.of(2, 12, 34, 1_000_000))\n+                .addRoundTrip(timeDataType(3), LocalTime.of(3, 12, 34, 0))\n+                .addRoundTrip(timeDataType(4), LocalTime.of(4, 12, 34, 0))\n+                .addRoundTrip(timeDataType(5), LocalTime.of(5, 12, 34, 0))\n+                .addRoundTrip(timeDataType(5), LocalTime.of(6, 12, 34, 0))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(9, 12, 34, 0))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(10, 12, 34, 0))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(15, 12, 34, 567_000_000))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(23, 59, 59, 0))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(23, 59, 59, 999_000_000))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(23, 59, 59, 999_900_000))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(23, 59, 59, 999_990_000))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(23, 59, 59, 999_999_000))\n+                // epoch is also a gap in JVM zone", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE3MjY2Nw=="}, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc4NjA2MA==", "bodyText": "If we had implemented TIMESTAMP and TIME right from the start, we would've never added these tests, just saying. Of course it makes sense for TIMESTAMP W/ TZ and TIME W/ TZ, but those are different types with different semantics.", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r497786060", "createdAt": "2020-09-30T20:38:45Z", "author": {"login": "martint"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -974,28 +974,35 @@ public void testEnum()\n         }\n     }\n \n+    /**\n+     * @see #testTimeCoercion\n+     */\n     @Test(dataProvider = \"testTimestampDataProvider\")\n     public void testTime(boolean insertWithPresto, ZoneId sessionZone)\n     {\n         LocalTime timeGapInJvmZone = LocalTime.of(0, 12, 34, 567_000_000);\n         checkIsGap(jvmZone, timeGapInJvmZone.atDate(EPOCH_DAY));\n \n         DataTypeTest tests = DataTypeTest.create()\n-                .addRoundTrip(timeDataType(), LocalTime.of(1, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(2, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(2, 12, 34, 1_000_000))\n-                .addRoundTrip(timeDataType(), LocalTime.of(3, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(4, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(5, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(6, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(9, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(10, 12, 34, 0))\n-                .addRoundTrip(timeDataType(), LocalTime.of(15, 12, 34, 567_000_000))\n-                .addRoundTrip(timeDataType(), LocalTime.of(23, 59, 59, 999_000_000));\n-\n-        // epoch is also a gap in JVM zone\n-        tests.addRoundTrip(timeDataType(), epoch.toLocalTime());\n-        tests.addRoundTrip(timeDataType(), timeGapInJvmZone);\n+                .addRoundTrip(timeDataType(0), LocalTime.of(1, 12, 34, 0))\n+                .addRoundTrip(timeDataType(1), LocalTime.of(2, 12, 34, 100_000_000))\n+                .addRoundTrip(timeDataType(2), LocalTime.of(2, 12, 34, 10_000_000))\n+                .addRoundTrip(timeDataType(3), LocalTime.of(2, 12, 34, 1_000_000))\n+                .addRoundTrip(timeDataType(3), LocalTime.of(3, 12, 34, 0))\n+                .addRoundTrip(timeDataType(4), LocalTime.of(4, 12, 34, 0))\n+                .addRoundTrip(timeDataType(5), LocalTime.of(5, 12, 34, 0))\n+                .addRoundTrip(timeDataType(5), LocalTime.of(6, 12, 34, 0))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(9, 12, 34, 0))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(10, 12, 34, 0))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(15, 12, 34, 567_000_000))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(23, 59, 59, 0))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(23, 59, 59, 999_000_000))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(23, 59, 59, 999_900_000))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(23, 59, 59, 999_990_000))\n+                .addRoundTrip(timeDataType(6), LocalTime.of(23, 59, 59, 999_999_000))\n+                // epoch is also a gap in JVM zone", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE3MjY2Nw=="}, "originalCommit": null, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjQ0MjE1OnYy", "diffSide": "RIGHT", "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDoyMjo1NlrOHaJLmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOTo1NzoxOFrOHatI4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE3NTQ1MA==", "bodyText": "\"instead of\". Also, are PgObject and PGobject different things? I couldn't find any class named PgObject", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r497175450", "createdAt": "2020-09-30T00:22:56Z", "author": {"login": "martint"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -1011,6 +1018,86 @@ public void testTime(boolean insertWithPresto, ZoneId sessionZone)\n         }\n     }\n \n+    /**\n+     * Additional test supplementing {@link #testTime} with timestamp precision higher than expressible with {@code LocalTime}.\n+     *\n+     * @see #testTime\n+     */\n+    @Test\n+    public void testTimeCoercion()\n+            throws SQLException\n+    {\n+        testCreateTableAsAndInsertConsistency(\"TIME '00:00:00'\", \"TIME '00:00:00'\");\n+        testCreateTableAsAndInsertConsistency(\"TIME '00:00:00.000000'\", \"TIME '00:00:00.000000'\");\n+        testCreateTableAsAndInsertConsistency(\"TIME '00:00:00.123456'\", \"TIME '00:00:00.123456'\");\n+        testCreateTableAsAndInsertConsistency(\"TIME '12:34:56'\", \"TIME '12:34:56'\");\n+        testCreateTableAsAndInsertConsistency(\"TIME '12:34:56.123456'\", \"TIME '12:34:56.123456'\");\n+\n+        // Cases which require using PgObject instead if PGobject with PostgreSQL JDBC driver", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2NDU3Ng==", "bodyText": "fixed", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r497764576", "createdAt": "2020-09-30T19:57:18Z", "author": {"login": "findepi"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -1011,6 +1018,86 @@ public void testTime(boolean insertWithPresto, ZoneId sessionZone)\n         }\n     }\n \n+    /**\n+     * Additional test supplementing {@link #testTime} with timestamp precision higher than expressible with {@code LocalTime}.\n+     *\n+     * @see #testTime\n+     */\n+    @Test\n+    public void testTimeCoercion()\n+            throws SQLException\n+    {\n+        testCreateTableAsAndInsertConsistency(\"TIME '00:00:00'\", \"TIME '00:00:00'\");\n+        testCreateTableAsAndInsertConsistency(\"TIME '00:00:00.000000'\", \"TIME '00:00:00.000000'\");\n+        testCreateTableAsAndInsertConsistency(\"TIME '00:00:00.123456'\", \"TIME '00:00:00.123456'\");\n+        testCreateTableAsAndInsertConsistency(\"TIME '12:34:56'\", \"TIME '12:34:56'\");\n+        testCreateTableAsAndInsertConsistency(\"TIME '12:34:56.123456'\", \"TIME '12:34:56.123456'\");\n+\n+        // Cases which require using PgObject instead if PGobject with PostgreSQL JDBC driver", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE3NTQ1MA=="}, "originalCommit": null, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjQ1MjU3OnYy", "diffSide": "RIGHT", "path": "presto-testing/src/test/java/io/prestosql/testing/datatype/TestDataType.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDoyNToyNlrOHaJSXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMDo0MToyMFrOHauh7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE3NzE4MQ==", "bodyText": "This seems unrelated to supporting time(p) in postgresql", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r497177181", "createdAt": "2020-09-30T00:25:26Z", "author": {"login": "martint"}, "path": "presto-testing/src/test/java/io/prestosql/testing/datatype/TestDataType.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.testing.datatype;\n+\n+import org.testng.annotations.Test;\n+\n+import java.time.LocalTime;\n+\n+import static io.prestosql.testing.datatype.DataType.timeDataType;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestDataType\n+{\n+    @Test\n+    public void testTimeDataType()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2NjMyOQ==", "bodyText": "it was valuable to me, as i initially forgot to add SSSSSS to the pattern. I can throw it away if you want me, but otherwise I would keep it.\n(note that \"time(p) in postgresql\" commit changes DataType.timeDataType... that can be seen frivolous, but postgres's tests were the only user of that method)", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r497766329", "createdAt": "2020-09-30T20:00:31Z", "author": {"login": "findepi"}, "path": "presto-testing/src/test/java/io/prestosql/testing/datatype/TestDataType.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.testing.datatype;\n+\n+import org.testng.annotations.Test;\n+\n+import java.time.LocalTime;\n+\n+import static io.prestosql.testing.datatype.DataType.timeDataType;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestDataType\n+{\n+    @Test\n+    public void testTimeDataType()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE3NzE4MQ=="}, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc3MDA1Mg==", "bodyText": "Fine to keep, but move to a separate commit.", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r497770052", "createdAt": "2020-09-30T20:07:53Z", "author": {"login": "martint"}, "path": "presto-testing/src/test/java/io/prestosql/testing/datatype/TestDataType.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.testing.datatype;\n+\n+import org.testng.annotations.Test;\n+\n+import java.time.LocalTime;\n+\n+import static io.prestosql.testing.datatype.DataType.timeDataType;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestDataType\n+{\n+    @Test\n+    public void testTimeDataType()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE3NzE4MQ=="}, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc4NDUyMQ==", "bodyText": "It is in the commit which changes the impl of the feature under test. I cannot move to separate, that would not be logical separation.\nSince this seems like a tiny detail, i will choose to keep it where it is.", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r497784521", "createdAt": "2020-09-30T20:35:40Z", "author": {"login": "findepi"}, "path": "presto-testing/src/test/java/io/prestosql/testing/datatype/TestDataType.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.testing.datatype;\n+\n+import org.testng.annotations.Test;\n+\n+import java.time.LocalTime;\n+\n+import static io.prestosql.testing.datatype.DataType.timeDataType;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestDataType\n+{\n+    @Test\n+    public void testTimeDataType()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE3NzE4MQ=="}, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc4NzM3Mw==", "bodyText": "Ah, I missed that the timeDataType method was being changed in this same commit.", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r497787373", "createdAt": "2020-09-30T20:41:20Z", "author": {"login": "martint"}, "path": "presto-testing/src/test/java/io/prestosql/testing/datatype/TestDataType.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.testing.datatype;\n+\n+import org.testng.annotations.Test;\n+\n+import java.time.LocalTime;\n+\n+import static io.prestosql.testing.datatype.DataType.timeDataType;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestDataType\n+{\n+    @Test\n+    public void testTimeDataType()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE3NzE4MQ=="}, "originalCommit": null, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjQ2MjA3OnYy", "diffSide": "RIGHT", "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDoyOTo0NVrOHaJYZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDoyOTo0NVrOHaJYZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE3ODcyNw==", "bodyText": "Same comment as elsewhere regarding accuracy of this text.", "url": "https://github.com/trinodb/trino/pull/5342#discussion_r497178727", "createdAt": "2020-09-30T00:29:45Z", "author": {"login": "martint"}, "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -1368,13 +1371,56 @@ public void testTimestampWithTimeZone(boolean insertWithPresto)\n         }\n     }\n \n+    /**\n+     * Additional test supplementing {@link #testTimestampWithTimeZone} with timestamp with time zone precision higher than expressible with {@code LocalDateTime}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4732, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}