{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0OTMwMjA3", "number": 6035, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMDoyMDo1MFrOE7svsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNzozODowMFrOE8GK7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDM0NTQ1OnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMDoyMDo1MFrOH3fgOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMDoyMDo1MFrOH3fgOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk0OTg4MQ==", "bodyText": "Forgot to add to commit message:\nThere is no point to run tests against access control for each connector.", "url": "https://github.com/trinodb/trino/pull/6035#discussion_r527949881", "createdAt": "2020-11-20T20:20:50Z", "author": {"login": "kokosing"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -785,12 +785,6 @@ public void testDelete()\n         assertExplainAnalyze(\"EXPLAIN ANALYZE DELETE FROM \" + tableName + \" WHERE TRUE\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDUxMTE4OnYy", "diffSide": "RIGHT", "path": "presto-tests/src/test/java/io/prestosql/security/TestAccessControl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNzozODowMFrOH4ByCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNzozODowMFrOH4ByCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUxMTQ5Ng==", "bodyText": "You can extract many assertions to separate tests. As this test handles only access control the local variables may be changed  to fields and it will still be readable.\nThere won't be a better occasion to do it.", "url": "https://github.com/trinodb/trino/pull/6035#discussion_r528511496", "createdAt": "2020-11-23T07:38:00Z", "author": {"login": "skrzypo987"}, "path": "presto-tests/src/test/java/io/prestosql/security/TestAccessControl.java", "diffHunk": "@@ -0,0 +1,320 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.security;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import io.airlift.testing.Assertions;\n+import io.prestosql.Session;\n+import io.prestosql.plugin.blackhole.BlackHolePlugin;\n+import io.prestosql.plugin.tpch.TpchPlugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.testing.AbstractTestQueryFramework;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import io.prestosql.testing.QueryRunner;\n+import io.prestosql.testing.TestingSession;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.SystemSessionProperties.QUERY_MAX_MEMORY;\n+import static io.prestosql.testing.TestingAccessControlManager.TestingPrivilegeType.ADD_COLUMN;\n+import static io.prestosql.testing.TestingAccessControlManager.TestingPrivilegeType.CREATE_TABLE;\n+import static io.prestosql.testing.TestingAccessControlManager.TestingPrivilegeType.CREATE_VIEW;\n+import static io.prestosql.testing.TestingAccessControlManager.TestingPrivilegeType.CREATE_VIEW_WITH_SELECT_COLUMNS;\n+import static io.prestosql.testing.TestingAccessControlManager.TestingPrivilegeType.DELETE_TABLE;\n+import static io.prestosql.testing.TestingAccessControlManager.TestingPrivilegeType.DROP_COLUMN;\n+import static io.prestosql.testing.TestingAccessControlManager.TestingPrivilegeType.DROP_TABLE;\n+import static io.prestosql.testing.TestingAccessControlManager.TestingPrivilegeType.EXECUTE_FUNCTION;\n+import static io.prestosql.testing.TestingAccessControlManager.TestingPrivilegeType.EXECUTE_QUERY;\n+import static io.prestosql.testing.TestingAccessControlManager.TestingPrivilegeType.GRANT_EXECUTE_FUNCTION;\n+import static io.prestosql.testing.TestingAccessControlManager.TestingPrivilegeType.INSERT_TABLE;\n+import static io.prestosql.testing.TestingAccessControlManager.TestingPrivilegeType.RENAME_COLUMN;\n+import static io.prestosql.testing.TestingAccessControlManager.TestingPrivilegeType.RENAME_TABLE;\n+import static io.prestosql.testing.TestingAccessControlManager.TestingPrivilegeType.SELECT_COLUMN;\n+import static io.prestosql.testing.TestingAccessControlManager.TestingPrivilegeType.SET_SESSION;\n+import static io.prestosql.testing.TestingAccessControlManager.TestingPrivilegeType.SET_USER;\n+import static io.prestosql.testing.TestingAccessControlManager.TestingPrivilegeType.SHOW_CREATE_TABLE;\n+import static io.prestosql.testing.TestingAccessControlManager.privilege;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static io.prestosql.testing.sql.TestTable.randomTableSuffix;\n+import static java.lang.String.format;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+public class TestAccessControl\n+        extends AbstractTestQueryFramework\n+{\n+    @Override\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        Session session = testSessionBuilder()\n+                .setCatalog(\"blackhole\")\n+                .setSchema(\"default\")\n+                .build();\n+        DistributedQueryRunner queryRunner = DistributedQueryRunner.builder(session)\n+                .setNodeCount(1)\n+                .build();\n+        queryRunner.installPlugin(new BlackHolePlugin());\n+        queryRunner.createCatalog(\"blackhole\", \"blackhole\");\n+        queryRunner.installPlugin(new TpchPlugin());\n+        queryRunner.createCatalog(\"tpch\", \"tpch\");\n+        for (String tableName : ImmutableList.of(\"orders\", \"nation\", \"region\", \"lineitem\")) {\n+            queryRunner.execute(format(\"CREATE TABLE %1$s AS SELECT * FROM tpch.tiny.%1$s WITH NO DATA\", tableName));\n+        }\n+        return queryRunner;\n+    }\n+\n+    @Test\n+    public void testAccessControl()\n+    {\n+        assertAccessDenied(\"SELECT * FROM orders\", \"Cannot execute query\", privilege(\"query\", EXECUTE_QUERY));\n+        assertAccessDenied(\"INSERT INTO orders SELECT * FROM orders\", \"Cannot insert into table .*.orders.*\", privilege(\"orders\", INSERT_TABLE));\n+        assertAccessDenied(\"DELETE FROM orders\", \"Cannot delete from table .*.orders.*\", privilege(\"orders\", DELETE_TABLE));\n+        assertAccessDenied(\"CREATE TABLE foo AS SELECT * FROM orders\", \"Cannot create table .*.foo.*\", privilege(\"foo\", CREATE_TABLE));\n+        assertAccessDenied(\"SELECT * FROM nation\", \"Cannot select from columns \\\\[nationkey, regionkey, name, comment] in table .*.nation.*\", privilege(\"nation.nationkey\", SELECT_COLUMN));\n+        assertAccessDenied(\"SELECT * FROM (SELECT * FROM nation)\", \"Cannot select from columns \\\\[nationkey, regionkey, name, comment] in table .*.nation.*\", privilege(\"nation.nationkey\", SELECT_COLUMN));\n+        assertAccessDenied(\"SELECT name FROM (SELECT * FROM nation)\", \"Cannot select from columns \\\\[nationkey, regionkey, name, comment] in table .*.nation.*\", privilege(\"nation.nationkey\", SELECT_COLUMN));\n+        assertAccessAllowed(\"SELECT name FROM nation\", privilege(\"nationkey\", SELECT_COLUMN));\n+        assertAccessDenied(\"SELECT n1.nationkey, n2.regionkey FROM nation n1, nation n2\", \"Cannot select from columns \\\\[nationkey, regionkey] in table .*.nation.*\", privilege(\"nation.nationkey\", SELECT_COLUMN));\n+        assertAccessDenied(\"SELECT count(name) as c FROM nation where comment > 'abc' GROUP BY regionkey having max(nationkey) > 10\", \"Cannot select from columns \\\\[nationkey, regionkey, name, comment] in table .*.nation.*\", privilege(\"nation.nationkey\", SELECT_COLUMN));\n+        assertAccessDenied(\"SELECT 1 FROM region, nation where region.regionkey = nation.nationkey\", \"Cannot select from columns \\\\[nationkey] in table .*.nation.*\", privilege(\"nation.nationkey\", SELECT_COLUMN));\n+        assertAccessDenied(\"SELECT count(*) FROM nation\", \"Cannot select from columns \\\\[] in table .*.nation.*\", privilege(\"nation\", SELECT_COLUMN));\n+        assertAccessDenied(\"WITH t1 AS (SELECT * FROM nation) SELECT * FROM t1\", \"Cannot select from columns \\\\[nationkey, regionkey, name, comment] in table .*.nation.*\", privilege(\"nation.nationkey\", SELECT_COLUMN));\n+        assertAccessAllowed(\"SELECT name AS my_alias FROM nation\", privilege(\"my_alias\", SELECT_COLUMN));\n+        assertAccessAllowed(\"SELECT my_alias from (SELECT name AS my_alias FROM nation)\", privilege(\"my_alias\", SELECT_COLUMN));\n+        assertAccessDenied(\"SELECT name AS my_alias FROM nation\", \"Cannot select from columns \\\\[name] in table .*.nation.*\", privilege(\"nation.name\", SELECT_COLUMN));\n+\n+        assertAccessDenied(\n+                \"SELECT orders.custkey, lineitem.quantity FROM orders JOIN lineitem USING (orderkey)\",\n+                \"Cannot select from columns \\\\[orderkey, custkey] in table .*\",\n+                privilege(\"orders.orderkey\", SELECT_COLUMN));\n+\n+        assertAccessDenied(\n+                \"SELECT orders.custkey, lineitem.quantity FROM orders JOIN lineitem USING (orderkey)\",\n+                \"Cannot select from columns \\\\[orderkey, quantity] in table .*\",\n+                privilege(\"lineitem.orderkey\", SELECT_COLUMN));\n+\n+        assertAccessDenied(\"SHOW CREATE TABLE orders\", \"Cannot show create table for .*.orders.*\", privilege(\"orders\", SHOW_CREATE_TABLE));\n+        assertAccessAllowed(\"SHOW CREATE TABLE lineitem\", privilege(\"orders\", SHOW_CREATE_TABLE));\n+        assertAccessDenied(\"SELECT abs(1)\", \"Cannot execute function abs\", privilege(\"abs\", EXECUTE_FUNCTION));\n+        assertAccessAllowed(\"SELECT abs(1)\", privilege(\"max\", EXECUTE_FUNCTION));\n+        assertAccessAllowed(\"SHOW STATS FOR lineitem\");\n+        assertAccessAllowed(\"SHOW STATS FOR lineitem\", privilege(\"orders\", SELECT_COLUMN));\n+        assertAccessAllowed(\"SHOW STATS FOR (SELECT * FROM lineitem)\");\n+        assertAccessAllowed(\"SHOW STATS FOR (SELECT * FROM lineitem)\", privilege(\"orders\", SELECT_COLUMN));\n+        assertAccessDenied(\"SHOW STATS FOR (SELECT * FROM nation)\", \"Cannot show stats for columns \\\\[nationkey, regionkey, name, comment] in table or view .*.nation\", privilege(\"nation\", SELECT_COLUMN));\n+        assertAccessDenied(\"SHOW STATS FOR (SELECT nationkey FROM nation)\", \"Cannot show stats for columns \\\\[nationkey] in table or view .*.nation\", privilege(\"nation\", SELECT_COLUMN));\n+        assertAccessDenied(\"SHOW STATS FOR (SELECT nationkey FROM nation)\", \"Cannot show stats for columns \\\\[nationkey] in table or view .*.nation\", privilege(\"nation.nationkey\", SELECT_COLUMN));\n+        assertAccessDenied(\"SHOW STATS FOR (SELECT *, nationkey FROM nation)\", \"Cannot show stats for columns \\\\[nationkey, regionkey, name, comment] in table or view .*.nation\", privilege(\"nation.nationkey\", SELECT_COLUMN));\n+        assertAccessDenied(\"SHOW STATS FOR (SELECT *, * FROM nation)\", \"Cannot show stats for columns \\\\[nationkey, regionkey, name, comment] in table or view .*.nation\", privilege(\"nation.nationkey\", SELECT_COLUMN));\n+        assertAccessDenied(\"SHOW STATS FOR (SELECT linenumber, orderkey FROM lineitem)\", \"Cannot show stats for columns \\\\[linenumber, orderkey] in table or view .*.lineitem.*\", privilege(\"lineitem\", SELECT_COLUMN));\n+        assertAccessDenied(\"SHOW STATS FOR (SELECT linenumber, orderkey, quantity FROM lineitem)\", \"Cannot show stats for columns \\\\[linenumber, orderkey, quantity] in table or view .*.lineitem.*\", privilege(\"lineitem.linenumber\", SELECT_COLUMN), privilege(\"lineitem.orderkey\", SELECT_COLUMN));\n+        assertAccessDenied(\"SHOW STATS FOR (SELECT nationkey FROM nation)\", \"Cannot show stats for columns \\\\[nationkey] in table or view .*.nation.*\", privilege(\"nation\", SELECT_COLUMN));\n+        assertAccessDenied(\"SHOW STATS FOR (SELECT * FROM nation)\", \"Cannot show stats for columns \\\\[nationkey, regionkey, name, comment] in table or view .*.nation.*\", privilege(\"nation\", SELECT_COLUMN));\n+    }\n+\n+    @Test\n+    public void testViewColumnAccessControl()\n+    {\n+        Session viewOwnerSession = TestingSession.testSessionBuilder()\n+                .setIdentity(Identity.ofUser(\"test_view_access_owner\"))\n+                .setCatalog(getSession().getCatalog().orElseThrow())\n+                .setSchema(getSession().getSchema().orElseThrow())\n+                .build();\n+\n+        String columnAccessViewName = \"test_view_column_access_\" + randomTableSuffix();\n+\n+        // TEST COLUMN-LEVEL PRIVILEGES", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31b1e75d156058707473fdd3353c8e2e128b3de3"}, "originalPosition": 138}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4584, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}