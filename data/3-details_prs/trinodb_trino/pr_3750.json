{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4NjU4MTk0", "number": 3750, "title": "Add large file test for Rubix", "bodyText": "", "createdAt": "2020-05-15T15:30:53Z", "url": "https://github.com/trinodb/trino/pull/3750", "merged": true, "mergeCommit": {"oid": "6fbf2d94aa09b28ce6ed1c5fdbdacfe0318310e3"}, "closed": true, "closedAt": "2020-05-18T10:45:23Z", "author": {"login": "sopel39"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchj3JrABqjMzNDE0MjU0ODc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcidiX9AFqTQxMzQ3NzE5Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNzUzNDUz", "url": "https://github.com/trinodb/trino/pull/3750#pullrequestreview-412753453", "createdAt": "2020-05-15T15:33:02Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNTozMzoyMFrOGWJy7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNTo0MDo1MVrOGWKEeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg4MjM1MA==", "bodyText": "Do we always have to wait 1s? Would polling for stats in shorter intervals (like 100ms) make sense?", "url": "https://github.com/trinodb/trino/pull/3750#discussion_r425882350", "createdAt": "2020-05-15T15:33:20Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/rubix/TestRubixCaching.java", "diffHunk": "@@ -196,6 +207,71 @@ public void testCacheRead()\n         assertEquals(getCacheStats().getRemoteReads(), intermittentRemoteReads);\n     }\n \n+    @Test\n+    public void testLargeFile()\n+            throws Exception\n+    {\n+        byte[] randomData = new byte[(int) LARGE_FILE_SIZE.toBytes()];\n+        new Random().nextBytes(randomData);\n+\n+        Path file = getStoragePath(\"large_file\");\n+        try (FSDataOutputStream outputStream = nonCachingFileSystem.create(file)) {\n+            outputStream.write(randomData);\n+        }\n+\n+        long beforeRemoteReads = getCacheStats().getRemoteReads();\n+        long beforeCachedReads = getCacheStats().getCachedReads();\n+\n+        assertTrue(Arrays.equals(randomData, readFileBytes(cachingFileSystem.open(file))));\n+\n+        // stats are propagated asynchronously, wait for them\n+        sleep(1000L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg4NTM4Nw==", "bodyText": "intermittent and after name prefixes are poor. Use something more explicit. firstReadCachedRead, secondReadCachedReads?", "url": "https://github.com/trinodb/trino/pull/3750#discussion_r425885387", "createdAt": "2020-05-15T15:38:26Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/rubix/TestRubixCaching.java", "diffHunk": "@@ -196,6 +207,71 @@ public void testCacheRead()\n         assertEquals(getCacheStats().getRemoteReads(), intermittentRemoteReads);\n     }\n \n+    @Test\n+    public void testLargeFile()\n+            throws Exception\n+    {\n+        byte[] randomData = new byte[(int) LARGE_FILE_SIZE.toBytes()];\n+        new Random().nextBytes(randomData);\n+\n+        Path file = getStoragePath(\"large_file\");\n+        try (FSDataOutputStream outputStream = nonCachingFileSystem.create(file)) {\n+            outputStream.write(randomData);\n+        }\n+\n+        long beforeRemoteReads = getCacheStats().getRemoteReads();\n+        long beforeCachedReads = getCacheStats().getCachedReads();\n+\n+        assertTrue(Arrays.equals(randomData, readFileBytes(cachingFileSystem.open(file))));\n+\n+        // stats are propagated asynchronously, wait for them\n+        sleep(1000L);\n+        long intermittentRemoteReads = getCacheStats().getRemoteReads();\n+        assertGreaterThan(intermittentRemoteReads, beforeRemoteReads);\n+\n+        assertTrue(Arrays.equals(randomData, readFileBytes(cachingFileSystem.open(file))));\n+\n+        // stats are propagated asynchronously, wait for them\n+        sleep(1000L);\n+        long afterCachedReads = getCacheStats().getCachedReads();\n+        long afterRemoteReads = getCacheStats().getRemoteReads();\n+        assertGreaterThan(afterCachedReads, beforeCachedReads);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg4NTgzNA==", "bodyText": "add comments to assertions so one does not have to reverse engineer the code.", "url": "https://github.com/trinodb/trino/pull/3750#discussion_r425885834", "createdAt": "2020-05-15T15:39:13Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/rubix/TestRubixCaching.java", "diffHunk": "@@ -196,6 +207,71 @@ public void testCacheRead()\n         assertEquals(getCacheStats().getRemoteReads(), intermittentRemoteReads);\n     }\n \n+    @Test\n+    public void testLargeFile()\n+            throws Exception\n+    {\n+        byte[] randomData = new byte[(int) LARGE_FILE_SIZE.toBytes()];\n+        new Random().nextBytes(randomData);\n+\n+        Path file = getStoragePath(\"large_file\");\n+        try (FSDataOutputStream outputStream = nonCachingFileSystem.create(file)) {\n+            outputStream.write(randomData);\n+        }\n+\n+        long beforeRemoteReads = getCacheStats().getRemoteReads();\n+        long beforeCachedReads = getCacheStats().getCachedReads();\n+\n+        assertTrue(Arrays.equals(randomData, readFileBytes(cachingFileSystem.open(file))));\n+\n+        // stats are propagated asynchronously, wait for them\n+        sleep(1000L);\n+        long intermittentRemoteReads = getCacheStats().getRemoteReads();\n+        assertGreaterThan(intermittentRemoteReads, beforeRemoteReads);\n+\n+        assertTrue(Arrays.equals(randomData, readFileBytes(cachingFileSystem.open(file))));\n+\n+        // stats are propagated asynchronously, wait for them\n+        sleep(1000L);\n+        long afterCachedReads = getCacheStats().getCachedReads();\n+        long afterRemoteReads = getCacheStats().getRemoteReads();\n+        assertGreaterThan(afterCachedReads, beforeCachedReads);\n+        assertEquals(afterRemoteReads, intermittentRemoteReads);\n+\n+        // make sure parallel reading of large file works\n+        ExecutorService executorService = newFixedThreadPool(10);\n+        try {\n+            List<Runnable> reads = nCopies(\n+                    10,\n+                    () -> {\n+                        try {\n+                            assertTrue(Arrays.equals(randomData, readFileBytes(cachingFileSystem.open(file))));\n+                        }\n+                        catch (IOException e) {\n+                            throw new RuntimeException(e);\n+                        }\n+                    });\n+            reads.stream()\n+                    .map(executorService::submit)\n+                    .forEach(future -> {\n+                        try {\n+                            future.get();\n+                        }\n+                        catch (Exception e) {\n+                            throw new RuntimeException(e);\n+                        }\n+                    });\n+        }\n+        finally {\n+            executorService.shutdownNow();\n+        }\n+\n+        // stats are propagated asynchronously, wait for them\n+        sleep(1000L);\n+        assertGreaterThan(getCacheStats().getCachedReads(), afterCachedReads);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg4Njg0MQ==", "bodyText": "Callable? No need for exception handling.", "url": "https://github.com/trinodb/trino/pull/3750#discussion_r425886841", "createdAt": "2020-05-15T15:40:51Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/rubix/TestRubixCaching.java", "diffHunk": "@@ -196,6 +207,71 @@ public void testCacheRead()\n         assertEquals(getCacheStats().getRemoteReads(), intermittentRemoteReads);\n     }\n \n+    @Test\n+    public void testLargeFile()\n+            throws Exception\n+    {\n+        byte[] randomData = new byte[(int) LARGE_FILE_SIZE.toBytes()];\n+        new Random().nextBytes(randomData);\n+\n+        Path file = getStoragePath(\"large_file\");\n+        try (FSDataOutputStream outputStream = nonCachingFileSystem.create(file)) {\n+            outputStream.write(randomData);\n+        }\n+\n+        long beforeRemoteReads = getCacheStats().getRemoteReads();\n+        long beforeCachedReads = getCacheStats().getCachedReads();\n+\n+        assertTrue(Arrays.equals(randomData, readFileBytes(cachingFileSystem.open(file))));\n+\n+        // stats are propagated asynchronously, wait for them\n+        sleep(1000L);\n+        long intermittentRemoteReads = getCacheStats().getRemoteReads();\n+        assertGreaterThan(intermittentRemoteReads, beforeRemoteReads);\n+\n+        assertTrue(Arrays.equals(randomData, readFileBytes(cachingFileSystem.open(file))));\n+\n+        // stats are propagated asynchronously, wait for them\n+        sleep(1000L);\n+        long afterCachedReads = getCacheStats().getCachedReads();\n+        long afterRemoteReads = getCacheStats().getRemoteReads();\n+        assertGreaterThan(afterCachedReads, beforeCachedReads);\n+        assertEquals(afterRemoteReads, intermittentRemoteReads);\n+\n+        // make sure parallel reading of large file works\n+        ExecutorService executorService = newFixedThreadPool(10);\n+        try {\n+            List<Runnable> reads = nCopies(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 88}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyODU4NDEw", "url": "https://github.com/trinodb/trino/pull/3750#pullrequestreview-412858410", "createdAt": "2020-05-15T18:02:33Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d02a3891d9d206c08158a985ff7640478c21530", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/9d02a3891d9d206c08158a985ff7640478c21530", "committedDate": "2020-05-15T19:57:23Z", "message": "Add large file test for Rubix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7041c5c4c76818d12cbeaeb34f84001debf1be33", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/7041c5c4c76818d12cbeaeb34f84001debf1be33", "committedDate": "2020-05-15T19:57:23Z", "message": "Improve testCacheRead test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "7041c5c4c76818d12cbeaeb34f84001debf1be33", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/7041c5c4c76818d12cbeaeb34f84001debf1be33", "committedDate": "2020-05-15T19:57:23Z", "message": "Improve testCacheRead test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNDc3MTky", "url": "https://github.com/trinodb/trino/pull/3750#pullrequestreview-413477192", "createdAt": "2020-05-18T10:44:18Z", "commit": {"oid": "7041c5c4c76818d12cbeaeb34f84001debf1be33"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1117, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}