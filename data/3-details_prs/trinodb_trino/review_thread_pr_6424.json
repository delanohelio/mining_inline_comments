{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0MTY2MjY4", "number": 6424, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDo1ODoxNFrOFIL_qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMjozNjoxNFrOFIUnzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTI5NDUwOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/resources/docker/presto-product-tests/common/hadoop/hive_timestamp_nanos.properties", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDo1ODoxNFrOIJ-Byg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwOTo1Nzo0OVrOIKfoTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyNDM2Mg==", "bodyText": "Are this not relevant? Most of it?", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547324362", "createdAt": "2020-12-22T14:58:14Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/resources/docker/presto-product-tests/common/hadoop/hive_timestamp_nanos.properties", "diffHunk": "@@ -0,0 +1,16 @@\n+connector.name=hive-hadoop2\n+hive.metastore.uri=thrift://hadoop-master:9083\n+hive.config.resources=/docker/presto-product-tests/conf/presto/etc/hive-default-fs-site.xml\n+hive.allow-add-column=true\n+hive.allow-drop-column=true\n+hive.allow-rename-column=true\n+hive.allow-comment-table=true\n+hive.allow-comment-column=true\n+hive.allow-drop-table=true\n+hive.allow-rename-table=true\n+hive.allow-register-partition-procedure=true\n+hive.metastore-cache-ttl=0s\n+hive.fs.cache.max-size=10\n+hive.max-partitions-per-scan=100", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzNjAyMQ==", "bodyText": "I guess. I took the defautl file and added last line.", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547336021", "createdAt": "2020-12-22T15:18:59Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/resources/docker/presto-product-tests/common/hadoop/hive_timestamp_nanos.properties", "diffHunk": "@@ -0,0 +1,16 @@\n+connector.name=hive-hadoop2\n+hive.metastore.uri=thrift://hadoop-master:9083\n+hive.config.resources=/docker/presto-product-tests/conf/presto/etc/hive-default-fs-site.xml\n+hive.allow-add-column=true\n+hive.allow-drop-column=true\n+hive.allow-rename-column=true\n+hive.allow-comment-table=true\n+hive.allow-comment-column=true\n+hive.allow-drop-table=true\n+hive.allow-rename-table=true\n+hive.allow-register-partition-procedure=true\n+hive.metastore-cache-ttl=0s\n+hive.fs.cache.max-size=10\n+hive.max-partitions-per-scan=100", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyNDM2Mg=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM0MTYzMg==", "bodyText": "i figured.\nthe default hive.properties is not all-defaults, because we made it accommodate  all the many different tests we want to run on it\nyour new catalog can have -- and IMO should have -- as little configuration as possible", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547341632", "createdAt": "2020-12-22T15:28:55Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/resources/docker/presto-product-tests/common/hadoop/hive_timestamp_nanos.properties", "diffHunk": "@@ -0,0 +1,16 @@\n+connector.name=hive-hadoop2\n+hive.metastore.uri=thrift://hadoop-master:9083\n+hive.config.resources=/docker/presto-product-tests/conf/presto/etc/hive-default-fs-site.xml\n+hive.allow-add-column=true\n+hive.allow-drop-column=true\n+hive.allow-rename-column=true\n+hive.allow-comment-table=true\n+hive.allow-comment-column=true\n+hive.allow-drop-table=true\n+hive.allow-rename-table=true\n+hive.allow-register-partition-procedure=true\n+hive.metastore-cache-ttl=0s\n+hive.fs.cache.max-size=10\n+hive.max-partitions-per-scan=100", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyNDM2Mg=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM4MTgzOA==", "bodyText": "I changed that. The catalog is now defined in test class.", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547381838", "createdAt": "2020-12-22T16:42:07Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/resources/docker/presto-product-tests/common/hadoop/hive_timestamp_nanos.properties", "diffHunk": "@@ -0,0 +1,16 @@\n+connector.name=hive-hadoop2\n+hive.metastore.uri=thrift://hadoop-master:9083\n+hive.config.resources=/docker/presto-product-tests/conf/presto/etc/hive-default-fs-site.xml\n+hive.allow-add-column=true\n+hive.allow-drop-column=true\n+hive.allow-rename-column=true\n+hive.allow-comment-table=true\n+hive.allow-comment-column=true\n+hive.allow-drop-table=true\n+hive.allow-rename-table=true\n+hive.allow-register-partition-procedure=true\n+hive.metastore-cache-ttl=0s\n+hive.fs.cache.max-size=10\n+hive.max-partitions-per-scan=100", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyNDM2Mg=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0MDYzMw==", "bodyText": "I changed that. The catalog is now defined in test class.\n\nit is still here, right?\n(that's OK, i just don't understand)", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547540633", "createdAt": "2020-12-22T22:37:38Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/resources/docker/presto-product-tests/common/hadoop/hive_timestamp_nanos.properties", "diffHunk": "@@ -0,0 +1,16 @@\n+connector.name=hive-hadoop2\n+hive.metastore.uri=thrift://hadoop-master:9083\n+hive.config.resources=/docker/presto-product-tests/conf/presto/etc/hive-default-fs-site.xml\n+hive.allow-add-column=true\n+hive.allow-drop-column=true\n+hive.allow-rename-column=true\n+hive.allow-comment-table=true\n+hive.allow-comment-column=true\n+hive.allow-drop-table=true\n+hive.allow-rename-table=true\n+hive.allow-register-partition-procedure=true\n+hive.metastore-cache-ttl=0s\n+hive.fs.cache.max-size=10\n+hive.max-partitions-per-scan=100", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyNDM2Mg=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg3MzMwMA==", "bodyText": "It was meant to be reply to #6424 (comment). Sorry.", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547873300", "createdAt": "2020-12-23T09:54:45Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/resources/docker/presto-product-tests/common/hadoop/hive_timestamp_nanos.properties", "diffHunk": "@@ -0,0 +1,16 @@\n+connector.name=hive-hadoop2\n+hive.metastore.uri=thrift://hadoop-master:9083\n+hive.config.resources=/docker/presto-product-tests/conf/presto/etc/hive-default-fs-site.xml\n+hive.allow-add-column=true\n+hive.allow-drop-column=true\n+hive.allow-rename-column=true\n+hive.allow-comment-table=true\n+hive.allow-comment-column=true\n+hive.allow-drop-table=true\n+hive.allow-rename-table=true\n+hive.allow-register-partition-procedure=true\n+hive.metastore-cache-ttl=0s\n+hive.fs.cache.max-size=10\n+hive.max-partitions-per-scan=100", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyNDM2Mg=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg3MzU1Mg==", "bodyText": "As for this one, I will get rid of as many properties as I can.", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547873552", "createdAt": "2020-12-23T09:55:20Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/resources/docker/presto-product-tests/common/hadoop/hive_timestamp_nanos.properties", "diffHunk": "@@ -0,0 +1,16 @@\n+connector.name=hive-hadoop2\n+hive.metastore.uri=thrift://hadoop-master:9083\n+hive.config.resources=/docker/presto-product-tests/conf/presto/etc/hive-default-fs-site.xml\n+hive.allow-add-column=true\n+hive.allow-drop-column=true\n+hive.allow-rename-column=true\n+hive.allow-comment-table=true\n+hive.allow-comment-column=true\n+hive.allow-drop-table=true\n+hive.allow-rename-table=true\n+hive.allow-register-partition-procedure=true\n+hive.metastore-cache-ttl=0s\n+hive.fs.cache.max-size=10\n+hive.max-partitions-per-scan=100", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyNDM2Mg=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg3NDg5Mw==", "bodyText": "connector.name=hive-hadoop2\nhive.metastore.uri=thrift://hadoop-master:9083\nhive.config.resources=/docker/presto-product-tests/conf/presto/etc/hive-default-fs-site.xml\nhive.allow-drop-table=true\nhive.metastore-cache-ttl=0s\nhive.translate-hive-views=true\nhive.timestamp-precision=NANOSECONDS\n\nseems a safe subset", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547874893", "createdAt": "2020-12-23T09:57:49Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests-launcher/src/main/resources/docker/presto-product-tests/common/hadoop/hive_timestamp_nanos.properties", "diffHunk": "@@ -0,0 +1,16 @@\n+connector.name=hive-hadoop2\n+hive.metastore.uri=thrift://hadoop-master:9083\n+hive.config.resources=/docker/presto-product-tests/conf/presto/etc/hive-default-fs-site.xml\n+hive.allow-add-column=true\n+hive.allow-drop-column=true\n+hive.allow-rename-column=true\n+hive.allow-comment-table=true\n+hive.allow-comment-column=true\n+hive.allow-drop-table=true\n+hive.allow-rename-table=true\n+hive.allow-register-partition-procedure=true\n+hive.metastore-cache-ttl=0s\n+hive.fs.cache.max-size=10\n+hive.max-partitions-per-scan=100", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyNDM2Mg=="}, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTI5OTIzOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViews.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDo1OTozMlrOIJ-ErQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNToxOTozMlrOIJ-wlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyNTEwMQ==", "bodyText": "\"not set\" \"UNSET\" -- choose one\nBTW we could explicitly reset session property here with RESET SESSION\nhttps://prestosql.io/docs/current/sql/reset-session.html", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547325101", "createdAt": "2020-12-22T14:59:32Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViews.java", "diffHunk": "@@ -295,6 +297,40 @@ public void testSelectFromHiveViewWithoutDefaultCatalogAndSchema()\n                 .containsExactly(row(1L));\n     }\n \n+    @Test\n+    public void testTimestampHiveView() {\n+        onHive().executeQuery(\"DROP TABLE IF EXISTS timestamp_hive_table\");\n+        onHive().executeQuery(\"CREATE TABLE timestamp_hive_table AS SELECT cast('1990-01-02 12:13:14.123456789' AS timestamp) ts\");\n+        onHive().executeQuery(\"DROP VIEW IF EXISTS timestamp_hive_view\");\n+        onHive().executeQuery(\"CREATE VIEW timestamp_hive_view AS SELECT * FROM timestamp_hive_table\");\n+\n+        // timestamp_precision not set UNSET", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzNjM0Mg==", "bodyText": "Good Idea. I did not know the syntax.", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547336342", "createdAt": "2020-12-22T15:19:32Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViews.java", "diffHunk": "@@ -295,6 +297,40 @@ public void testSelectFromHiveViewWithoutDefaultCatalogAndSchema()\n                 .containsExactly(row(1L));\n     }\n \n+    @Test\n+    public void testTimestampHiveView() {\n+        onHive().executeQuery(\"DROP TABLE IF EXISTS timestamp_hive_table\");\n+        onHive().executeQuery(\"CREATE TABLE timestamp_hive_table AS SELECT cast('1990-01-02 12:13:14.123456789' AS timestamp) ts\");\n+        onHive().executeQuery(\"DROP VIEW IF EXISTS timestamp_hive_view\");\n+        onHive().executeQuery(\"CREATE VIEW timestamp_hive_view AS SELECT * FROM timestamp_hive_table\");\n+\n+        // timestamp_precision not set UNSET", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyNTEwMQ=="}, "originalCommit": null, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTMwNDY2OnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViews.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTowMTowMVrOIJ-H3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTowMTowMVrOIJ-H3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyNTkxOA==", "bodyText": "as -> AS\nVARCHAR -> varchar\n(we tend to write SQL keywords in uppercase and identifiers in lowercase)", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547325918", "createdAt": "2020-12-22T15:01:01Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViews.java", "diffHunk": "@@ -295,6 +297,40 @@ public void testSelectFromHiveViewWithoutDefaultCatalogAndSchema()\n                 .containsExactly(row(1L));\n     }\n \n+    @Test\n+    public void testTimestampHiveView() {\n+        onHive().executeQuery(\"DROP TABLE IF EXISTS timestamp_hive_table\");\n+        onHive().executeQuery(\"CREATE TABLE timestamp_hive_table AS SELECT cast('1990-01-02 12:13:14.123456789' AS timestamp) ts\");\n+        onHive().executeQuery(\"DROP VIEW IF EXISTS timestamp_hive_view\");\n+        onHive().executeQuery(\"CREATE VIEW timestamp_hive_view AS SELECT * FROM timestamp_hive_table\");\n+\n+        // timestamp_precision not set UNSET\n+        assertThat(query(\"SELECT CAST(ts as VARCHAR) FROM timestamp_hive_view\")).containsExactly(row(\"1990-01-02 12:13:14.123\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTMxODIxOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViews.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTowNDozOVrOIJ-P4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTo0MDoxMlrOIJ_egg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyNzk3MA==", "bodyText": "#6295 is worded as an enhancement (\"support this with that\"), but the failure looks more like a bug. Maybe we do not need to create separate bug issue, but would be worth adding a comment in this issue, sth like \"Currently this fails: \u00abstacktrace\u00bb\"", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547327970", "createdAt": "2020-12-22T15:04:39Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViews.java", "diffHunk": "@@ -295,6 +297,40 @@ public void testSelectFromHiveViewWithoutDefaultCatalogAndSchema()\n                 .containsExactly(row(1L));\n     }\n \n+    @Test\n+    public void testTimestampHiveView() {\n+        onHive().executeQuery(\"DROP TABLE IF EXISTS timestamp_hive_table\");\n+        onHive().executeQuery(\"CREATE TABLE timestamp_hive_table AS SELECT cast('1990-01-02 12:13:14.123456789' AS timestamp) ts\");\n+        onHive().executeQuery(\"DROP VIEW IF EXISTS timestamp_hive_view\");\n+        onHive().executeQuery(\"CREATE VIEW timestamp_hive_view AS SELECT * FROM timestamp_hive_table\");\n+\n+        // timestamp_precision not set UNSET\n+        assertThat(query(\"SELECT CAST(ts as VARCHAR) FROM timestamp_hive_view\")).containsExactly(row(\"1990-01-02 12:13:14.123\"));\n+        assertThatThrownBy(\n+                // TODO it is not possible to query Hive view with timestamps if hive.timestamp-precision=NANOSECONDS\n+                () -> assertThat(query(\"SELECT CAST(ts as VARCHAR) FROM hive_timestamp_nanos.default.timestamp_hive_view\")).containsExactly(row(\"1990-01-02 12:13:14.123456789\"))\n+        ).hasMessageContaining(\"timestamp(9) projected from query view at position 0 cannot be coerced to column [ts] of type timestamp(3) stored in view definition\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM0ODA5OA==", "bodyText": "#6295 (comment)", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547348098", "createdAt": "2020-12-22T15:40:12Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViews.java", "diffHunk": "@@ -295,6 +297,40 @@ public void testSelectFromHiveViewWithoutDefaultCatalogAndSchema()\n                 .containsExactly(row(1L));\n     }\n \n+    @Test\n+    public void testTimestampHiveView() {\n+        onHive().executeQuery(\"DROP TABLE IF EXISTS timestamp_hive_table\");\n+        onHive().executeQuery(\"CREATE TABLE timestamp_hive_table AS SELECT cast('1990-01-02 12:13:14.123456789' AS timestamp) ts\");\n+        onHive().executeQuery(\"DROP VIEW IF EXISTS timestamp_hive_view\");\n+        onHive().executeQuery(\"CREATE VIEW timestamp_hive_view AS SELECT * FROM timestamp_hive_table\");\n+\n+        // timestamp_precision not set UNSET\n+        assertThat(query(\"SELECT CAST(ts as VARCHAR) FROM timestamp_hive_view\")).containsExactly(row(\"1990-01-02 12:13:14.123\"));\n+        assertThatThrownBy(\n+                // TODO it is not possible to query Hive view with timestamps if hive.timestamp-precision=NANOSECONDS\n+                () -> assertThat(query(\"SELECT CAST(ts as VARCHAR) FROM hive_timestamp_nanos.default.timestamp_hive_view\")).containsExactly(row(\"1990-01-02 12:13:14.123456789\"))\n+        ).hasMessageContaining(\"timestamp(9) projected from query view at position 0 cannot be coerced to column [ts] of type timestamp(3) stored in view definition\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyNzk3MA=="}, "originalCommit": null, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTMyNTMwOnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViews.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTowNjozNVrOIJ-USA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTowNjozNVrOIJ-USA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyOTA5Ng==", "bodyText": "link to #6295 ?", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547329096", "createdAt": "2020-12-22T15:06:35Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViews.java", "diffHunk": "@@ -295,6 +297,40 @@ public void testSelectFromHiveViewWithoutDefaultCatalogAndSchema()\n                 .containsExactly(row(1L));\n     }\n \n+    @Test\n+    public void testTimestampHiveView() {\n+        onHive().executeQuery(\"DROP TABLE IF EXISTS timestamp_hive_table\");\n+        onHive().executeQuery(\"CREATE TABLE timestamp_hive_table AS SELECT cast('1990-01-02 12:13:14.123456789' AS timestamp) ts\");\n+        onHive().executeQuery(\"DROP VIEW IF EXISTS timestamp_hive_view\");\n+        onHive().executeQuery(\"CREATE VIEW timestamp_hive_view AS SELECT * FROM timestamp_hive_table\");\n+\n+        // timestamp_precision not set UNSET\n+        assertThat(query(\"SELECT CAST(ts as VARCHAR) FROM timestamp_hive_view\")).containsExactly(row(\"1990-01-02 12:13:14.123\"));\n+        assertThatThrownBy(\n+                // TODO it is not possible to query Hive view with timestamps if hive.timestamp-precision=NANOSECONDS", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTMzMDg3OnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViews.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTowODoxMVrOIJ-Xpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNjo0Njo1M1rOIKBsDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyOTk1OA==", "bodyText": "include both \"actual\" and \"expect\" in this message.\nor, change to plan not-nested asssertion and use the actual wrong value in assertion, and put the expected value in a TODO comment", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547329958", "createdAt": "2020-12-22T15:08:11Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViews.java", "diffHunk": "@@ -295,6 +297,40 @@ public void testSelectFromHiveViewWithoutDefaultCatalogAndSchema()\n                 .containsExactly(row(1L));\n     }\n \n+    @Test\n+    public void testTimestampHiveView() {\n+        onHive().executeQuery(\"DROP TABLE IF EXISTS timestamp_hive_table\");\n+        onHive().executeQuery(\"CREATE TABLE timestamp_hive_table AS SELECT cast('1990-01-02 12:13:14.123456789' AS timestamp) ts\");\n+        onHive().executeQuery(\"DROP VIEW IF EXISTS timestamp_hive_view\");\n+        onHive().executeQuery(\"CREATE VIEW timestamp_hive_view AS SELECT * FROM timestamp_hive_table\");\n+\n+        // timestamp_precision not set UNSET\n+        assertThat(query(\"SELECT CAST(ts as VARCHAR) FROM timestamp_hive_view\")).containsExactly(row(\"1990-01-02 12:13:14.123\"));\n+        assertThatThrownBy(\n+                // TODO it is not possible to query Hive view with timestamps if hive.timestamp-precision=NANOSECONDS\n+                () -> assertThat(query(\"SELECT CAST(ts as VARCHAR) FROM hive_timestamp_nanos.default.timestamp_hive_view\")).containsExactly(row(\"1990-01-02 12:13:14.123456789\"))\n+        ).hasMessageContaining(\"timestamp(9) projected from query view at position 0 cannot be coerced to column [ts] of type timestamp(3) stored in view definition\");\n+\n+        setSessionProperty(\"hive.timestamp_precision\", \"'MILLISECONDS'\");\n+        setSessionProperty(\"hive_timestamp_nanos.timestamp_precision\", \"'MILLISECONDS'\");\n+        assertThat(query(\"SELECT CAST(ts as VARCHAR) FROM timestamp_hive_view\")).containsExactly(row(\"1990-01-02 12:13:14.123\"));\n+        assertThatThrownBy(\n+                // TODO it is not possible to query Hive view with timestamps if hive.timestamp-precision=NANOSECONDS\n+                () -> assertThat(query(\"SELECT CAST(ts as VARCHAR) FROM hive_timestamp_nanos.default.timestamp_hive_view\")).containsExactly(row(\"1990-01-02 12:13:14.123\"))\n+        ).hasMessageContaining(\"timestamp(9) projected from query view at position 0 cannot be coerced to column [ts] of type timestamp(3) stored in view definition\");\n+\n+        setSessionProperty(\"hive.timestamp_precision\", \"'NANOSECONDS'\");\n+        setSessionProperty(\"hive_timestamp_nanos.timestamp_precision\", \"'NANOSECONDS'\");\n+        assertThatThrownBy(\n+                // TODO timestamp_precision has no effect on Hive views\n+                () -> assertThat(query(\"SELECT CAST(ts as VARCHAR) FROM timestamp_hive_view\")).containsExactly(row(\"1990-01-02 12:13:14.123456789\"))\n+        ).hasMessageContaining(\"0 - actual:   1990-01-02 12:13:14.123|\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1MTAzOA==", "bodyText": "Actually I like this one more. I would rather assert for what it feels should happen and only wrap it in temporary assertThatThrownBy.\nAs for putting 1990-01-02 12:13:14.123456789 in expected message it does not give us much. There is only one row expected anyway. And we will just make test definition longer by adding that. Do you insist?", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547351038", "createdAt": "2020-12-22T15:45:26Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViews.java", "diffHunk": "@@ -295,6 +297,40 @@ public void testSelectFromHiveViewWithoutDefaultCatalogAndSchema()\n                 .containsExactly(row(1L));\n     }\n \n+    @Test\n+    public void testTimestampHiveView() {\n+        onHive().executeQuery(\"DROP TABLE IF EXISTS timestamp_hive_table\");\n+        onHive().executeQuery(\"CREATE TABLE timestamp_hive_table AS SELECT cast('1990-01-02 12:13:14.123456789' AS timestamp) ts\");\n+        onHive().executeQuery(\"DROP VIEW IF EXISTS timestamp_hive_view\");\n+        onHive().executeQuery(\"CREATE VIEW timestamp_hive_view AS SELECT * FROM timestamp_hive_table\");\n+\n+        // timestamp_precision not set UNSET\n+        assertThat(query(\"SELECT CAST(ts as VARCHAR) FROM timestamp_hive_view\")).containsExactly(row(\"1990-01-02 12:13:14.123\"));\n+        assertThatThrownBy(\n+                // TODO it is not possible to query Hive view with timestamps if hive.timestamp-precision=NANOSECONDS\n+                () -> assertThat(query(\"SELECT CAST(ts as VARCHAR) FROM hive_timestamp_nanos.default.timestamp_hive_view\")).containsExactly(row(\"1990-01-02 12:13:14.123456789\"))\n+        ).hasMessageContaining(\"timestamp(9) projected from query view at position 0 cannot be coerced to column [ts] of type timestamp(3) stored in view definition\");\n+\n+        setSessionProperty(\"hive.timestamp_precision\", \"'MILLISECONDS'\");\n+        setSessionProperty(\"hive_timestamp_nanos.timestamp_precision\", \"'MILLISECONDS'\");\n+        assertThat(query(\"SELECT CAST(ts as VARCHAR) FROM timestamp_hive_view\")).containsExactly(row(\"1990-01-02 12:13:14.123\"));\n+        assertThatThrownBy(\n+                // TODO it is not possible to query Hive view with timestamps if hive.timestamp-precision=NANOSECONDS\n+                () -> assertThat(query(\"SELECT CAST(ts as VARCHAR) FROM hive_timestamp_nanos.default.timestamp_hive_view\")).containsExactly(row(\"1990-01-02 12:13:14.123\"))\n+        ).hasMessageContaining(\"timestamp(9) projected from query view at position 0 cannot be coerced to column [ts] of type timestamp(3) stored in view definition\");\n+\n+        setSessionProperty(\"hive.timestamp_precision\", \"'NANOSECONDS'\");\n+        setSessionProperty(\"hive_timestamp_nanos.timestamp_precision\", \"'NANOSECONDS'\");\n+        assertThatThrownBy(\n+                // TODO timestamp_precision has no effect on Hive views\n+                () -> assertThat(query(\"SELECT CAST(ts as VARCHAR) FROM timestamp_hive_view\")).containsExactly(row(\"1990-01-02 12:13:14.123456789\"))\n+        ).hasMessageContaining(\"0 - actual:   1990-01-02 12:13:14.123|\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyOTk1OA=="}, "originalCommit": null, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM4NDMzMw==", "bodyText": "NVM. Changed.", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547384333", "createdAt": "2020-12-22T16:46:53Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViews.java", "diffHunk": "@@ -295,6 +297,40 @@ public void testSelectFromHiveViewWithoutDefaultCatalogAndSchema()\n                 .containsExactly(row(1L));\n     }\n \n+    @Test\n+    public void testTimestampHiveView() {\n+        onHive().executeQuery(\"DROP TABLE IF EXISTS timestamp_hive_table\");\n+        onHive().executeQuery(\"CREATE TABLE timestamp_hive_table AS SELECT cast('1990-01-02 12:13:14.123456789' AS timestamp) ts\");\n+        onHive().executeQuery(\"DROP VIEW IF EXISTS timestamp_hive_view\");\n+        onHive().executeQuery(\"CREATE VIEW timestamp_hive_view AS SELECT * FROM timestamp_hive_table\");\n+\n+        // timestamp_precision not set UNSET\n+        assertThat(query(\"SELECT CAST(ts as VARCHAR) FROM timestamp_hive_view\")).containsExactly(row(\"1990-01-02 12:13:14.123\"));\n+        assertThatThrownBy(\n+                // TODO it is not possible to query Hive view with timestamps if hive.timestamp-precision=NANOSECONDS\n+                () -> assertThat(query(\"SELECT CAST(ts as VARCHAR) FROM hive_timestamp_nanos.default.timestamp_hive_view\")).containsExactly(row(\"1990-01-02 12:13:14.123456789\"))\n+        ).hasMessageContaining(\"timestamp(9) projected from query view at position 0 cannot be coerced to column [ts] of type timestamp(3) stored in view definition\");\n+\n+        setSessionProperty(\"hive.timestamp_precision\", \"'MILLISECONDS'\");\n+        setSessionProperty(\"hive_timestamp_nanos.timestamp_precision\", \"'MILLISECONDS'\");\n+        assertThat(query(\"SELECT CAST(ts as VARCHAR) FROM timestamp_hive_view\")).containsExactly(row(\"1990-01-02 12:13:14.123\"));\n+        assertThatThrownBy(\n+                // TODO it is not possible to query Hive view with timestamps if hive.timestamp-precision=NANOSECONDS\n+                () -> assertThat(query(\"SELECT CAST(ts as VARCHAR) FROM hive_timestamp_nanos.default.timestamp_hive_view\")).containsExactly(row(\"1990-01-02 12:13:14.123\"))\n+        ).hasMessageContaining(\"timestamp(9) projected from query view at position 0 cannot be coerced to column [ts] of type timestamp(3) stored in view definition\");\n+\n+        setSessionProperty(\"hive.timestamp_precision\", \"'NANOSECONDS'\");\n+        setSessionProperty(\"hive_timestamp_nanos.timestamp_precision\", \"'NANOSECONDS'\");\n+        assertThatThrownBy(\n+                // TODO timestamp_precision has no effect on Hive views\n+                () -> assertThat(query(\"SELECT CAST(ts as VARCHAR) FROM timestamp_hive_view\")).containsExactly(row(\"1990-01-02 12:13:14.123456789\"))\n+        ).hasMessageContaining(\"0 - actual:   1990-01-02 12:13:14.123|\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyOTk1OA=="}, "originalCommit": null, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTM0Mzg3OnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViewsLegacy.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNToxMTo0NFrOIJ-fZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMDo1ODowNlrOIMB5PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzMTk0Mw==", "bodyText": "Is the behavior exactly the same for both legacy and non-legacy?", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547331943", "createdAt": "2020-12-22T15:11:44Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViewsLegacy.java", "diffHunk": "@@ -241,6 +243,40 @@ public void testSelectFromHiveViewWithoutDefaultCatalogAndSchema()\n                 .containsExactly(row(1L));\n     }\n \n+    @Test\n+    public void testTimestampHiveView() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM0ODkzMw==", "bodyText": "Yes. From what I have seen.", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547348933", "createdAt": "2020-12-22T15:41:42Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViewsLegacy.java", "diffHunk": "@@ -241,6 +243,40 @@ public void testSelectFromHiveViewWithoutDefaultCatalogAndSchema()\n                 .containsExactly(row(1L));\n     }\n \n+    @Test\n+    public void testTimestampHiveView() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzMTk0Mw=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzODY2NA==", "bodyText": "can we have a common test code for them then? would it make sense?", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547538664", "createdAt": "2020-12-22T22:31:51Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViewsLegacy.java", "diffHunk": "@@ -241,6 +243,40 @@ public void testSelectFromHiveViewWithoutDefaultCatalogAndSchema()\n                 .containsExactly(row(1L));\n     }\n \n+    @Test\n+    public void testTimestampHiveView() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzMTk0Mw=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg4MDIwMQ==", "bodyText": "I would rather not, not a huge benefit imo. TestHiveViewsLegacy is not here to stay for a long time. For that reason, I originally decided to not tangle it with Coral test and just have a copy.", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547880201", "createdAt": "2020-12-23T10:09:41Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViewsLegacy.java", "diffHunk": "@@ -241,6 +243,40 @@ public void testSelectFromHiveViewWithoutDefaultCatalogAndSchema()\n                 .containsExactly(row(1L));\n     }\n \n+    @Test\n+    public void testTimestampHiveView() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzMTk0Mw=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTMzMTgxOA==", "bodyText": "TestHiveViewsLegacy is not here to stay for a long time.\n\nI hope too, but the list in #5606 is only growing so far, so it seems fair to assume the legacy mode isn't going away any time soon.", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r549331818", "createdAt": "2020-12-28T12:33:14Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViewsLegacy.java", "diffHunk": "@@ -241,6 +243,40 @@ public void testSelectFromHiveViewWithoutDefaultCatalogAndSchema()\n                 .containsExactly(row(1L));\n     }\n \n+    @Test\n+    public void testTimestampHiveView() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzMTk0Mw=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ4NDg2MQ==", "bodyText": "I will consider extracting common superclass as a followup.", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r549484861", "createdAt": "2020-12-28T20:58:06Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViewsLegacy.java", "diffHunk": "@@ -241,6 +243,40 @@ public void testSelectFromHiveViewWithoutDefaultCatalogAndSchema()\n                 .containsExactly(row(1L));\n     }\n \n+    @Test\n+    public void testTimestampHiveView() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzMTk0Mw=="}, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTM1MTE0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/HiveQueryRunner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNToxMzo0NVrOIJ-jvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTo0NzoyMFrOIJ_uJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzMzA1Mg==", "bodyText": "Is the bucketed catalog guaranteed to always exist?\nMaybe, instead, apply the necessary setup within the test where you need this?", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547333052", "createdAt": "2020-12-22T15:13:45Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/HiveQueryRunner.java", "diffHunk": "@@ -226,7 +226,9 @@ private static Session createSession(Optional<SelectedRole> role)\n     {\n         return testSessionBuilder()\n                 .setIdentity(Identity.forUser(\"hive\")\n-                        .withRoles(role.map(selectedRole -> ImmutableMap.of(\"hive\", selectedRole))\n+                        .withRoles(role.map(selectedRole -> ImmutableMap.of(\n+                                HIVE_CATALOG, selectedRole,\n+                                HIVE_BUCKETED_CATALOG, selectedRole))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1MjEwMA==", "bodyText": "It is defined here. So I think it should exist always. I can move this to test, but I do not see feel it is better. The proposed change seem like a decent default to me.", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547352100", "createdAt": "2020-12-22T15:47:20Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/HiveQueryRunner.java", "diffHunk": "@@ -226,7 +226,9 @@ private static Session createSession(Optional<SelectedRole> role)\n     {\n         return testSessionBuilder()\n                 .setIdentity(Identity.forUser(\"hive\")\n-                        .withRoles(role.map(selectedRole -> ImmutableMap.of(\"hive\", selectedRole))\n+                        .withRoles(role.map(selectedRole -> ImmutableMap.of(\n+                                HIVE_CATALOG, selectedRole,\n+                                HIVE_BUCKETED_CATALOG, selectedRole))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzMzA1Mg=="}, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTM2MTUxOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/HiveQueryRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNToxNjoxOVrOIJ-prQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNToxNjoxOVrOIJ-prQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzNDU3Mw==", "bodyText": "good catch;\nthere is a  problem though that this is not actually \"hive connector's name\" (the latter being hive-hadoop2). It's TestingHiveConnectorFactory's name.\nyou can inline the constant avoiding the naming problem", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547334573", "createdAt": "2020-12-22T15:16:19Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/HiveQueryRunner.java", "diffHunk": "@@ -177,8 +178,8 @@ public DistributedQueryRunner build()\n                         .put(\"hive.storage-format\", \"TEXTFILE\") // so that there's no minimum split size for the file\n                         .put(\"hive.compression-codec\", \"NONE\") // so that the file is splittable\n                         .build();\n-                queryRunner.createCatalog(HIVE_CATALOG, HIVE_CATALOG, hiveProperties);\n-                queryRunner.createCatalog(HIVE_BUCKETED_CATALOG, HIVE_CATALOG, hiveBucketedProperties);\n+                queryRunner.createCatalog(HIVE_CATALOG, HIVE_CONNECTOR_NAME, hiveProperties);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTM2NTkzOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/HiveQueryRunner.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNToxNzozMVrOIJ-sPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMjozMzo1NFrOIKLJhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzNTIzMQ==", "bodyText": "It would be better to create this catalog only in these tests where it's used.", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547335231", "createdAt": "2020-12-22T15:17:31Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/HiveQueryRunner.java", "diffHunk": "@@ -178,8 +179,14 @@ public DistributedQueryRunner build()\n                         .put(\"hive.storage-format\", \"TEXTFILE\") // so that there's no minimum split size for the file\n                         .put(\"hive.compression-codec\", \"NONE\") // so that the file is splittable\n                         .build();\n+\n+                Map<String, String> hiveTimestampNanosProperties = ImmutableMap.<String, String>builder()\n+                        .putAll(hiveProperties)\n+                        .put(\"hive.timestamp-precision\", \"NANOSECONDS\")\n+                        .build();\n                 queryRunner.createCatalog(HIVE_CATALOG, HIVE_CONNECTOR_NAME, hiveProperties);\n                 queryRunner.createCatalog(HIVE_BUCKETED_CATALOG, HIVE_CONNECTOR_NAME, hiveBucketedProperties);\n+                queryRunner.createCatalog(HIVE_TIMESTAMP_NANOS_CATALOG, HIVE_CONNECTOR_NAME, hiveTimestampNanosProperties);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1NTE0MA==", "bodyText": "I do not have access to common properties in the tests, and would need to clone those. Are you worried about extra test runtime it implies?", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547355140", "createdAt": "2020-12-22T15:52:57Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/HiveQueryRunner.java", "diffHunk": "@@ -178,8 +179,14 @@ public DistributedQueryRunner build()\n                         .put(\"hive.storage-format\", \"TEXTFILE\") // so that there's no minimum split size for the file\n                         .put(\"hive.compression-codec\", \"NONE\") // so that the file is splittable\n                         .build();\n+\n+                Map<String, String> hiveTimestampNanosProperties = ImmutableMap.<String, String>builder()\n+                        .putAll(hiveProperties)\n+                        .put(\"hive.timestamp-precision\", \"NANOSECONDS\")\n+                        .build();\n                 queryRunner.createCatalog(HIVE_CATALOG, HIVE_CONNECTOR_NAME, hiveProperties);\n                 queryRunner.createCatalog(HIVE_BUCKETED_CATALOG, HIVE_CONNECTOR_NAME, hiveBucketedProperties);\n+                queryRunner.createCatalog(HIVE_TIMESTAMP_NANOS_CATALOG, HIVE_CONNECTOR_NAME, hiveTimestampNanosProperties);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzNTIzMQ=="}, "originalCommit": null, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUzOTMzMw==", "bodyText": "I am concerned about two things\n\nstartup time\nwe always test with two, now three, catalogs, so we cannot be sure a single catalog works on its own\n\nfeel free to disregard", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547539333", "createdAt": "2020-12-22T22:33:54Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/HiveQueryRunner.java", "diffHunk": "@@ -178,8 +179,14 @@ public DistributedQueryRunner build()\n                         .put(\"hive.storage-format\", \"TEXTFILE\") // so that there's no minimum split size for the file\n                         .put(\"hive.compression-codec\", \"NONE\") // so that the file is splittable\n                         .build();\n+\n+                Map<String, String> hiveTimestampNanosProperties = ImmutableMap.<String, String>builder()\n+                        .putAll(hiveProperties)\n+                        .put(\"hive.timestamp-precision\", \"NANOSECONDS\")\n+                        .build();\n                 queryRunner.createCatalog(HIVE_CATALOG, HIVE_CONNECTOR_NAME, hiveProperties);\n                 queryRunner.createCatalog(HIVE_BUCKETED_CATALOG, HIVE_CONNECTOR_NAME, hiveBucketedProperties);\n+                queryRunner.createCatalog(HIVE_TIMESTAMP_NANOS_CATALOG, HIVE_CONNECTOR_NAME, hiveTimestampNanosProperties);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzNTIzMQ=="}, "originalCommit": null, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTM2Njc5OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNToxNzo0N1rOIJ-sww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNToxNzo0N1rOIJ-sww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzNTM2Mw==", "bodyText": "100 -> 1", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547335363", "createdAt": "2020-12-22T15:17:47Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -7549,6 +7549,80 @@ public void testSelectFromViewWithoutDefaultCatalogAndSchema()\n         assertQuery(sessionNoCatalog, \"SELECT count(*) FROM hive.tpch.\" + viewName, \"VALUES 1\");\n     }\n \n+    @Test(invocationCount = 100)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTM2NzMwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNToxNzo1NlrOIJ-tCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNToxNzo1NlrOIJ-tCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzNTQzMw==", "bodyText": "{ next line", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547335433", "createdAt": "2020-12-22T15:17:56Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -7549,6 +7549,80 @@ public void testSelectFromViewWithoutDefaultCatalogAndSchema()\n         assertQuery(sessionNoCatalog, \"SELECT count(*) FROM hive.tpch.\" + viewName, \"VALUES 1\");\n     }\n \n+    @Test(invocationCount = 100)\n+    public void testSelectFromPrestoViewReferencingHiveTableWithTimestamps() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTM2OTQ2OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNToxODozNVrOIJ-uXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTo1NjoxN1rOIKABng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzNTc3NA==", "bodyText": "hiveTableName -> tableName\nselect_from_presto_view_hive_table_timestamps_table_ -> table_with_timestamp ?", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547335774", "createdAt": "2020-12-22T15:18:35Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -7549,6 +7549,80 @@ public void testSelectFromViewWithoutDefaultCatalogAndSchema()\n         assertQuery(sessionNoCatalog, \"SELECT count(*) FROM hive.tpch.\" + viewName, \"VALUES 1\");\n     }\n \n+    @Test(invocationCount = 100)\n+    public void testSelectFromPrestoViewReferencingHiveTableWithTimestamps() {\n+        // Hive views tests covered in TestHiveViews.testTimestampHiveView and TestHiveViesLegacy.testTimestampHiveView\n+        String hiveTableName = \"select_from_presto_view_hive_table_timestamps_table_\" + randomTableSuffix();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1NzA4Ng==", "bodyText": "I used ts_hive_table_", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547357086", "createdAt": "2020-12-22T15:56:17Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -7549,6 +7549,80 @@ public void testSelectFromViewWithoutDefaultCatalogAndSchema()\n         assertQuery(sessionNoCatalog, \"SELECT count(*) FROM hive.tpch.\" + viewName, \"VALUES 1\");\n     }\n \n+    @Test(invocationCount = 100)\n+    public void testSelectFromPrestoViewReferencingHiveTableWithTimestamps() {\n+        // Hive views tests covered in TestHiveViews.testTimestampHiveView and TestHiveViesLegacy.testTimestampHiveView\n+        String hiveTableName = \"select_from_presto_view_hive_table_timestamps_table_\" + randomTableSuffix();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzNTc3NA=="}, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTM3Njg4OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNToyMDozNFrOIJ-ytg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNToyMDozNFrOIJ-ytg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzNjg4Ng==", "bodyText": "getSession -> defaultSession (decared below)", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547336886", "createdAt": "2020-12-22T15:20:34Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -7549,6 +7549,80 @@ public void testSelectFromViewWithoutDefaultCatalogAndSchema()\n         assertQuery(sessionNoCatalog, \"SELECT count(*) FROM hive.tpch.\" + viewName, \"VALUES 1\");\n     }\n \n+    @Test(invocationCount = 100)\n+    public void testSelectFromPrestoViewReferencingHiveTableWithTimestamps() {\n+        // Hive views tests covered in TestHiveViews.testTimestampHiveView and TestHiveViesLegacy.testTimestampHiveView\n+        String hiveTableName = \"select_from_presto_view_hive_table_timestamps_table_\" + randomTableSuffix();\n+        assertUpdate(\n+                withTimestampPrecision(getSession(), HiveTimestampPrecision.NANOSECONDS),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTM3NzcwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNToyMDo1MVrOIJ-zSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNToyMDo1MVrOIJ-zSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzNzAzNA==", "bodyText": "defaultSession -> defaultSession\n(& below)", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547337034", "createdAt": "2020-12-22T15:20:51Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -7549,6 +7549,80 @@ public void testSelectFromViewWithoutDefaultCatalogAndSchema()\n         assertQuery(sessionNoCatalog, \"SELECT count(*) FROM hive.tpch.\" + viewName, \"VALUES 1\");\n     }\n \n+    @Test(invocationCount = 100)\n+    public void testSelectFromPrestoViewReferencingHiveTableWithTimestamps() {\n+        // Hive views tests covered in TestHiveViews.testTimestampHiveView and TestHiveViesLegacy.testTimestampHiveView\n+        String hiveTableName = \"select_from_presto_view_hive_table_timestamps_table_\" + randomTableSuffix();\n+        assertUpdate(\n+                withTimestampPrecision(getSession(), HiveTimestampPrecision.NANOSECONDS),\n+                \"CREATE TABLE \" + hiveTableName + \" AS SELECT TIMESTAMP '1990-01-02 12:13:14.123456789' ts\",\n+                1);\n+\n+        Session defaultSession = getSession();\n+        Session millisSession = Session.builder(getSession())", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTM4MDg0OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNToyMTo0OVrOIJ-1NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNToyMTo0OVrOIJ-1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzNzUyNQ==", "bodyText": "select_from_presto_view_hive_table_timestamps_default_view_ -> presto_view_ts_default ?", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547337525", "createdAt": "2020-12-22T15:21:49Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -7549,6 +7549,80 @@ public void testSelectFromViewWithoutDefaultCatalogAndSchema()\n         assertQuery(sessionNoCatalog, \"SELECT count(*) FROM hive.tpch.\" + viewName, \"VALUES 1\");\n     }\n \n+    @Test(invocationCount = 100)\n+    public void testSelectFromPrestoViewReferencingHiveTableWithTimestamps() {\n+        // Hive views tests covered in TestHiveViews.testTimestampHiveView and TestHiveViesLegacy.testTimestampHiveView\n+        String hiveTableName = \"select_from_presto_view_hive_table_timestamps_table_\" + randomTableSuffix();\n+        assertUpdate(\n+                withTimestampPrecision(getSession(), HiveTimestampPrecision.NANOSECONDS),\n+                \"CREATE TABLE \" + hiveTableName + \" AS SELECT TIMESTAMP '1990-01-02 12:13:14.123456789' ts\",\n+                1);\n+\n+        Session defaultSession = getSession();\n+        Session millisSession = Session.builder(getSession())\n+                .setCatalogSessionProperty(\"hive\", \"timestamp_precision\", \"MILLISECONDS\")\n+                .setCatalogSessionProperty(\"hive_timestamp_nanos\", \"timestamp_precision\", \"MILLISECONDS\")\n+                .build();\n+        Session nanosSessions = Session.builder(getSession())\n+                .setCatalogSessionProperty(\"hive\", \"timestamp_precision\", \"NANOSECONDS\")\n+                .setCatalogSessionProperty(\"hive_timestamp_nanos\", \"timestamp_precision\", \"NANOSECONDS\")\n+                .build();\n+\n+        // Presto view created with config property set to MILLIS and session property not set\n+        String prestoViewNameDefault = \"select_from_presto_view_hive_table_timestamps_default_view_\" + randomTableSuffix();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTM4NjQyOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNToyMzozMFrOIJ-4fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNjowMjoyNlrOIKAO7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzODM2Nw==", "bodyText": "if you use assertThat(query(...))  you become free of H2 and then you can use TIMESTAMP literals in the expected query. This would avoid need for CAST AS varchar) altogether.\n(here we don't have JDBC, and we have more trust implicit trust in our internal APIs; all engine timestamp tests depend on them anyway)", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547338367", "createdAt": "2020-12-22T15:23:30Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -7549,6 +7549,80 @@ public void testSelectFromViewWithoutDefaultCatalogAndSchema()\n         assertQuery(sessionNoCatalog, \"SELECT count(*) FROM hive.tpch.\" + viewName, \"VALUES 1\");\n     }\n \n+    @Test(invocationCount = 100)\n+    public void testSelectFromPrestoViewReferencingHiveTableWithTimestamps() {\n+        // Hive views tests covered in TestHiveViews.testTimestampHiveView and TestHiveViesLegacy.testTimestampHiveView\n+        String hiveTableName = \"select_from_presto_view_hive_table_timestamps_table_\" + randomTableSuffix();\n+        assertUpdate(\n+                withTimestampPrecision(getSession(), HiveTimestampPrecision.NANOSECONDS),\n+                \"CREATE TABLE \" + hiveTableName + \" AS SELECT TIMESTAMP '1990-01-02 12:13:14.123456789' ts\",\n+                1);\n+\n+        Session defaultSession = getSession();\n+        Session millisSession = Session.builder(getSession())\n+                .setCatalogSessionProperty(\"hive\", \"timestamp_precision\", \"MILLISECONDS\")\n+                .setCatalogSessionProperty(\"hive_timestamp_nanos\", \"timestamp_precision\", \"MILLISECONDS\")\n+                .build();\n+        Session nanosSessions = Session.builder(getSession())\n+                .setCatalogSessionProperty(\"hive\", \"timestamp_precision\", \"NANOSECONDS\")\n+                .setCatalogSessionProperty(\"hive_timestamp_nanos\", \"timestamp_precision\", \"NANOSECONDS\")\n+                .build();\n+\n+        // Presto view created with config property set to MILLIS and session property not set\n+        String prestoViewNameDefault = \"select_from_presto_view_hive_table_timestamps_default_view_\" + randomTableSuffix();\n+        assertUpdate(defaultSession, \"CREATE VIEW \" + prestoViewNameDefault + \" AS SELECT *  FROM \" + hiveTableName);\n+\n+        assertQuery(defaultSession, \"SELECT CAST(ts as VARCHAR) FROM \" + prestoViewNameDefault, \"VALUES ('1990-01-02 12:13:14.123')\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM2MDQ5NQ==", "bodyText": "Like that?\nassertThat(query(defaultSession, \"SELECT ts FROM \" + prestoViewNameDefault)).matches(\"VALUES TIMESTAMP '1990-01-02 12:13:14.123'\");", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547360495", "createdAt": "2020-12-22T16:02:26Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -7549,6 +7549,80 @@ public void testSelectFromViewWithoutDefaultCatalogAndSchema()\n         assertQuery(sessionNoCatalog, \"SELECT count(*) FROM hive.tpch.\" + viewName, \"VALUES 1\");\n     }\n \n+    @Test(invocationCount = 100)\n+    public void testSelectFromPrestoViewReferencingHiveTableWithTimestamps() {\n+        // Hive views tests covered in TestHiveViews.testTimestampHiveView and TestHiveViesLegacy.testTimestampHiveView\n+        String hiveTableName = \"select_from_presto_view_hive_table_timestamps_table_\" + randomTableSuffix();\n+        assertUpdate(\n+                withTimestampPrecision(getSession(), HiveTimestampPrecision.NANOSECONDS),\n+                \"CREATE TABLE \" + hiveTableName + \" AS SELECT TIMESTAMP '1990-01-02 12:13:14.123456789' ts\",\n+                1);\n+\n+        Session defaultSession = getSession();\n+        Session millisSession = Session.builder(getSession())\n+                .setCatalogSessionProperty(\"hive\", \"timestamp_precision\", \"MILLISECONDS\")\n+                .setCatalogSessionProperty(\"hive_timestamp_nanos\", \"timestamp_precision\", \"MILLISECONDS\")\n+                .build();\n+        Session nanosSessions = Session.builder(getSession())\n+                .setCatalogSessionProperty(\"hive\", \"timestamp_precision\", \"NANOSECONDS\")\n+                .setCatalogSessionProperty(\"hive_timestamp_nanos\", \"timestamp_precision\", \"NANOSECONDS\")\n+                .build();\n+\n+        // Presto view created with config property set to MILLIS and session property not set\n+        String prestoViewNameDefault = \"select_from_presto_view_hive_table_timestamps_default_view_\" + randomTableSuffix();\n+        assertUpdate(defaultSession, \"CREATE VIEW \" + prestoViewNameDefault + \" AS SELECT *  FROM \" + hiveTableName);\n+\n+        assertQuery(defaultSession, \"SELECT CAST(ts as VARCHAR) FROM \" + prestoViewNameDefault, \"VALUES ('1990-01-02 12:13:14.123')\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzODM2Nw=="}, "originalCommit": null, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTM4NzcwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNToyMzo0OFrOIJ-5OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNjoxMzoxMlrOIKAlpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzODU1Mw==", "bodyText": "nit: no space after arrow (did checkstyle catch this?)", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547338553", "createdAt": "2020-12-22T15:23:48Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -7549,6 +7549,80 @@ public void testSelectFromViewWithoutDefaultCatalogAndSchema()\n         assertQuery(sessionNoCatalog, \"SELECT count(*) FROM hive.tpch.\" + viewName, \"VALUES 1\");\n     }\n \n+    @Test(invocationCount = 100)\n+    public void testSelectFromPrestoViewReferencingHiveTableWithTimestamps() {\n+        // Hive views tests covered in TestHiveViews.testTimestampHiveView and TestHiveViesLegacy.testTimestampHiveView\n+        String hiveTableName = \"select_from_presto_view_hive_table_timestamps_table_\" + randomTableSuffix();\n+        assertUpdate(\n+                withTimestampPrecision(getSession(), HiveTimestampPrecision.NANOSECONDS),\n+                \"CREATE TABLE \" + hiveTableName + \" AS SELECT TIMESTAMP '1990-01-02 12:13:14.123456789' ts\",\n+                1);\n+\n+        Session defaultSession = getSession();\n+        Session millisSession = Session.builder(getSession())\n+                .setCatalogSessionProperty(\"hive\", \"timestamp_precision\", \"MILLISECONDS\")\n+                .setCatalogSessionProperty(\"hive_timestamp_nanos\", \"timestamp_precision\", \"MILLISECONDS\")\n+                .build();\n+        Session nanosSessions = Session.builder(getSession())\n+                .setCatalogSessionProperty(\"hive\", \"timestamp_precision\", \"NANOSECONDS\")\n+                .setCatalogSessionProperty(\"hive_timestamp_nanos\", \"timestamp_precision\", \"NANOSECONDS\")\n+                .build();\n+\n+        // Presto view created with config property set to MILLIS and session property not set\n+        String prestoViewNameDefault = \"select_from_presto_view_hive_table_timestamps_default_view_\" + randomTableSuffix();\n+        assertUpdate(defaultSession, \"CREATE VIEW \" + prestoViewNameDefault + \" AS SELECT *  FROM \" + hiveTableName);\n+\n+        assertQuery(defaultSession, \"SELECT CAST(ts as VARCHAR) FROM \" + prestoViewNameDefault, \"VALUES ('1990-01-02 12:13:14.123')\");\n+        assertThatThrownBy(\n+                // TODO Presto view schema is fixed on creation\n+                () ->assertQuery(defaultSession, \"SELECT CAST(ts as VARCHAR) FROM hive_timestamp_nanos.tpch.\" + prestoViewNameDefault, \"VALUES ('1990-01-02 12:13:14.123456789')\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM2NjMxMA==", "bodyText": "Yeah - checkstyle fails on that one", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547366310", "createdAt": "2020-12-22T16:13:12Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -7549,6 +7549,80 @@ public void testSelectFromViewWithoutDefaultCatalogAndSchema()\n         assertQuery(sessionNoCatalog, \"SELECT count(*) FROM hive.tpch.\" + viewName, \"VALUES 1\");\n     }\n \n+    @Test(invocationCount = 100)\n+    public void testSelectFromPrestoViewReferencingHiveTableWithTimestamps() {\n+        // Hive views tests covered in TestHiveViews.testTimestampHiveView and TestHiveViesLegacy.testTimestampHiveView\n+        String hiveTableName = \"select_from_presto_view_hive_table_timestamps_table_\" + randomTableSuffix();\n+        assertUpdate(\n+                withTimestampPrecision(getSession(), HiveTimestampPrecision.NANOSECONDS),\n+                \"CREATE TABLE \" + hiveTableName + \" AS SELECT TIMESTAMP '1990-01-02 12:13:14.123456789' ts\",\n+                1);\n+\n+        Session defaultSession = getSession();\n+        Session millisSession = Session.builder(getSession())\n+                .setCatalogSessionProperty(\"hive\", \"timestamp_precision\", \"MILLISECONDS\")\n+                .setCatalogSessionProperty(\"hive_timestamp_nanos\", \"timestamp_precision\", \"MILLISECONDS\")\n+                .build();\n+        Session nanosSessions = Session.builder(getSession())\n+                .setCatalogSessionProperty(\"hive\", \"timestamp_precision\", \"NANOSECONDS\")\n+                .setCatalogSessionProperty(\"hive_timestamp_nanos\", \"timestamp_precision\", \"NANOSECONDS\")\n+                .build();\n+\n+        // Presto view created with config property set to MILLIS and session property not set\n+        String prestoViewNameDefault = \"select_from_presto_view_hive_table_timestamps_default_view_\" + randomTableSuffix();\n+        assertUpdate(defaultSession, \"CREATE VIEW \" + prestoViewNameDefault + \" AS SELECT *  FROM \" + hiveTableName);\n+\n+        assertQuery(defaultSession, \"SELECT CAST(ts as VARCHAR) FROM \" + prestoViewNameDefault, \"VALUES ('1990-01-02 12:13:14.123')\");\n+        assertThatThrownBy(\n+                // TODO Presto view schema is fixed on creation\n+                () ->assertQuery(defaultSession, \"SELECT CAST(ts as VARCHAR) FROM hive_timestamp_nanos.tpch.\" + prestoViewNameDefault, \"VALUES ('1990-01-02 12:13:14.123456789')\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzODU1Mw=="}, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTM4ODcwOnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNToyNDowM1rOIJ-5zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNToyNDowM1rOIJ-5zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzODcwMA==", "bodyText": "link to an issue", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547338700", "createdAt": "2020-12-22T15:24:03Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -7549,6 +7549,80 @@ public void testSelectFromViewWithoutDefaultCatalogAndSchema()\n         assertQuery(sessionNoCatalog, \"SELECT count(*) FROM hive.tpch.\" + viewName, \"VALUES 1\");\n     }\n \n+    @Test(invocationCount = 100)\n+    public void testSelectFromPrestoViewReferencingHiveTableWithTimestamps() {\n+        // Hive views tests covered in TestHiveViews.testTimestampHiveView and TestHiveViesLegacy.testTimestampHiveView\n+        String hiveTableName = \"select_from_presto_view_hive_table_timestamps_table_\" + randomTableSuffix();\n+        assertUpdate(\n+                withTimestampPrecision(getSession(), HiveTimestampPrecision.NANOSECONDS),\n+                \"CREATE TABLE \" + hiveTableName + \" AS SELECT TIMESTAMP '1990-01-02 12:13:14.123456789' ts\",\n+                1);\n+\n+        Session defaultSession = getSession();\n+        Session millisSession = Session.builder(getSession())\n+                .setCatalogSessionProperty(\"hive\", \"timestamp_precision\", \"MILLISECONDS\")\n+                .setCatalogSessionProperty(\"hive_timestamp_nanos\", \"timestamp_precision\", \"MILLISECONDS\")\n+                .build();\n+        Session nanosSessions = Session.builder(getSession())\n+                .setCatalogSessionProperty(\"hive\", \"timestamp_precision\", \"NANOSECONDS\")\n+                .setCatalogSessionProperty(\"hive_timestamp_nanos\", \"timestamp_precision\", \"NANOSECONDS\")\n+                .build();\n+\n+        // Presto view created with config property set to MILLIS and session property not set\n+        String prestoViewNameDefault = \"select_from_presto_view_hive_table_timestamps_default_view_\" + randomTableSuffix();\n+        assertUpdate(defaultSession, \"CREATE VIEW \" + prestoViewNameDefault + \" AS SELECT *  FROM \" + hiveTableName);\n+\n+        assertQuery(defaultSession, \"SELECT CAST(ts as VARCHAR) FROM \" + prestoViewNameDefault, \"VALUES ('1990-01-02 12:13:14.123')\");\n+        assertThatThrownBy(\n+                // TODO Presto view schema is fixed on creation\n+                () ->assertQuery(defaultSession, \"SELECT CAST(ts as VARCHAR) FROM hive_timestamp_nanos.tpch.\" + prestoViewNameDefault, \"VALUES ('1990-01-02 12:13:14.123456789')\")\n+        ).hasMessageContaining(\"Actual rows (up to 100 of 1 extra rows shown, 1 rows in total):\\n    [1990-01-02 12:13:14.123]\");\n+\n+        assertQuery(millisSession, \"SELECT CAST(ts as VARCHAR) FROM \" + prestoViewNameDefault, \"VALUES ('1990-01-02 12:13:14.123')\");\n+        assertQuery(millisSession, \"SELECT CAST(ts as VARCHAR) FROM hive_timestamp_nanos.tpch.\" + prestoViewNameDefault, \"VALUES ('1990-01-02 12:13:14.123')\");\n+\n+        assertThatThrownBy(\n+                // TODO Presto view schema is fixed on creation\n+                () -> assertQuery(nanosSessions, \"SELECT CAST(ts as VARCHAR) FROM \" + prestoViewNameDefault, \"VALUES ('1990-01-02 12:13:14.123456789')\")\n+        ).hasMessageContaining(\"Actual rows (up to 100 of 1 extra rows shown, 1 rows in total):\\n    [1990-01-02 12:13:14.123]\");\n+\n+        assertThatThrownBy(\n+                // TODO Presto view schema is fixed on creation\n+                () -> assertQuery(nanosSessions, \"SELECT CAST(ts as VARCHAR) FROM hive_timestamp_nanos.tpch.\" + prestoViewNameDefault, \"VALUES ('1990-01-02 12:13:14.123456789')\")\n+        ).hasMessageContaining(\"Actual rows (up to 100 of 1 extra rows shown, 1 rows in total):\\n    [1990-01-02 12:13:14.123]\");\n+\n+        // Presto view created with config property set to MILLIS and session property set to NANOS\n+        String prestoViewNameNanos = \"select_from_presto_view_hive_table_timestamps_millis_view_\" + randomTableSuffix();\n+        assertUpdate(nanosSessions, \"CREATE VIEW \" + prestoViewNameNanos + \" AS SELECT *  FROM \" + hiveTableName);\n+\n+        assertThatThrownBy(\n+                // TODO Presto view schema is fixed on creation\n+                () -> assertQuery(defaultSession, \"SELECT CAST(ts as VARCHAR) FROM \" + prestoViewNameNanos, \"VALUES ('1990-01-02 12:13:14.123')\")\n+        ).hasMessageContaining(\"Actual rows (up to 100 of 1 extra rows shown, 1 rows in total):\\n    [1990-01-02 12:13:14.123000000]\");\n+        assertThatThrownBy(\n+                // TODO Presto view schema is fixed on creation", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTM5MzI1OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNToyNTowOFrOIJ-8ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNjozNDo0OVrOIKBSyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzOTM2NQ==", "bodyText": "Quote both expected and actual within hasMessageContaining\nor, use the actual wrong value in assertion and put the correct value in a TODO comment", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547339365", "createdAt": "2020-12-22T15:25:08Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -7549,6 +7549,80 @@ public void testSelectFromViewWithoutDefaultCatalogAndSchema()\n         assertQuery(sessionNoCatalog, \"SELECT count(*) FROM hive.tpch.\" + viewName, \"VALUES 1\");\n     }\n \n+    @Test(invocationCount = 100)\n+    public void testSelectFromPrestoViewReferencingHiveTableWithTimestamps() {\n+        // Hive views tests covered in TestHiveViews.testTimestampHiveView and TestHiveViesLegacy.testTimestampHiveView\n+        String hiveTableName = \"select_from_presto_view_hive_table_timestamps_table_\" + randomTableSuffix();\n+        assertUpdate(\n+                withTimestampPrecision(getSession(), HiveTimestampPrecision.NANOSECONDS),\n+                \"CREATE TABLE \" + hiveTableName + \" AS SELECT TIMESTAMP '1990-01-02 12:13:14.123456789' ts\",\n+                1);\n+\n+        Session defaultSession = getSession();\n+        Session millisSession = Session.builder(getSession())\n+                .setCatalogSessionProperty(\"hive\", \"timestamp_precision\", \"MILLISECONDS\")\n+                .setCatalogSessionProperty(\"hive_timestamp_nanos\", \"timestamp_precision\", \"MILLISECONDS\")\n+                .build();\n+        Session nanosSessions = Session.builder(getSession())\n+                .setCatalogSessionProperty(\"hive\", \"timestamp_precision\", \"NANOSECONDS\")\n+                .setCatalogSessionProperty(\"hive_timestamp_nanos\", \"timestamp_precision\", \"NANOSECONDS\")\n+                .build();\n+\n+        // Presto view created with config property set to MILLIS and session property not set\n+        String prestoViewNameDefault = \"select_from_presto_view_hive_table_timestamps_default_view_\" + randomTableSuffix();\n+        assertUpdate(defaultSession, \"CREATE VIEW \" + prestoViewNameDefault + \" AS SELECT *  FROM \" + hiveTableName);\n+\n+        assertQuery(defaultSession, \"SELECT CAST(ts as VARCHAR) FROM \" + prestoViewNameDefault, \"VALUES ('1990-01-02 12:13:14.123')\");\n+        assertThatThrownBy(\n+                // TODO Presto view schema is fixed on creation\n+                () ->assertQuery(defaultSession, \"SELECT CAST(ts as VARCHAR) FROM hive_timestamp_nanos.tpch.\" + prestoViewNameDefault, \"VALUES ('1990-01-02 12:13:14.123456789')\")\n+        ).hasMessageContaining(\"Actual rows (up to 100 of 1 extra rows shown, 1 rows in total):\\n    [1990-01-02 12:13:14.123]\");\n+\n+        assertQuery(millisSession, \"SELECT CAST(ts as VARCHAR) FROM \" + prestoViewNameDefault, \"VALUES ('1990-01-02 12:13:14.123')\");\n+        assertQuery(millisSession, \"SELECT CAST(ts as VARCHAR) FROM hive_timestamp_nanos.tpch.\" + prestoViewNameDefault, \"VALUES ('1990-01-02 12:13:14.123')\");\n+\n+        assertThatThrownBy(\n+                // TODO Presto view schema is fixed on creation\n+                () -> assertQuery(nanosSessions, \"SELECT CAST(ts as VARCHAR) FROM \" + prestoViewNameDefault, \"VALUES ('1990-01-02 12:13:14.123456789')\")\n+        ).hasMessageContaining(\"Actual rows (up to 100 of 1 extra rows shown, 1 rows in total):\\n    [1990-01-02 12:13:14.123]\");\n+\n+        assertThatThrownBy(\n+                // TODO Presto view schema is fixed on creation\n+                () -> assertQuery(nanosSessions, \"SELECT CAST(ts as VARCHAR) FROM hive_timestamp_nanos.tpch.\" + prestoViewNameDefault, \"VALUES ('1990-01-02 12:13:14.123456789')\")\n+        ).hasMessageContaining(\"Actual rows (up to 100 of 1 extra rows shown, 1 rows in total):\\n    [1990-01-02 12:13:14.123]\");\n+\n+        // Presto view created with config property set to MILLIS and session property set to NANOS\n+        String prestoViewNameNanos = \"select_from_presto_view_hive_table_timestamps_millis_view_\" + randomTableSuffix();\n+        assertUpdate(nanosSessions, \"CREATE VIEW \" + prestoViewNameNanos + \" AS SELECT *  FROM \" + hiveTableName);\n+\n+        assertThatThrownBy(\n+                // TODO Presto view schema is fixed on creation\n+                () -> assertQuery(defaultSession, \"SELECT CAST(ts as VARCHAR) FROM \" + prestoViewNameNanos, \"VALUES ('1990-01-02 12:13:14.123')\")\n+        ).hasMessageContaining(\"Actual rows (up to 100 of 1 extra rows shown, 1 rows in total):\\n    [1990-01-02 12:13:14.123000000]\");\n+        assertThatThrownBy(\n+                // TODO Presto view schema is fixed on creation\n+                () ->assertQuery(defaultSession, \"SELECT CAST(ts as VARCHAR) FROM hive_timestamp_nanos.tpch.\" + prestoViewNameNanos, \"VALUES ('1990-01-02 12:13:14.123456789')\")\n+        ).hasMessageContaining(\"Actual rows (up to 100 of 1 extra rows shown, 1 rows in total):\\n    [1990-01-02 12:13:14.123000000]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM2NDAwNQ==", "bodyText": "Same question as above", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547364005", "createdAt": "2020-12-22T16:08:44Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -7549,6 +7549,80 @@ public void testSelectFromViewWithoutDefaultCatalogAndSchema()\n         assertQuery(sessionNoCatalog, \"SELECT count(*) FROM hive.tpch.\" + viewName, \"VALUES 1\");\n     }\n \n+    @Test(invocationCount = 100)\n+    public void testSelectFromPrestoViewReferencingHiveTableWithTimestamps() {\n+        // Hive views tests covered in TestHiveViews.testTimestampHiveView and TestHiveViesLegacy.testTimestampHiveView\n+        String hiveTableName = \"select_from_presto_view_hive_table_timestamps_table_\" + randomTableSuffix();\n+        assertUpdate(\n+                withTimestampPrecision(getSession(), HiveTimestampPrecision.NANOSECONDS),\n+                \"CREATE TABLE \" + hiveTableName + \" AS SELECT TIMESTAMP '1990-01-02 12:13:14.123456789' ts\",\n+                1);\n+\n+        Session defaultSession = getSession();\n+        Session millisSession = Session.builder(getSession())\n+                .setCatalogSessionProperty(\"hive\", \"timestamp_precision\", \"MILLISECONDS\")\n+                .setCatalogSessionProperty(\"hive_timestamp_nanos\", \"timestamp_precision\", \"MILLISECONDS\")\n+                .build();\n+        Session nanosSessions = Session.builder(getSession())\n+                .setCatalogSessionProperty(\"hive\", \"timestamp_precision\", \"NANOSECONDS\")\n+                .setCatalogSessionProperty(\"hive_timestamp_nanos\", \"timestamp_precision\", \"NANOSECONDS\")\n+                .build();\n+\n+        // Presto view created with config property set to MILLIS and session property not set\n+        String prestoViewNameDefault = \"select_from_presto_view_hive_table_timestamps_default_view_\" + randomTableSuffix();\n+        assertUpdate(defaultSession, \"CREATE VIEW \" + prestoViewNameDefault + \" AS SELECT *  FROM \" + hiveTableName);\n+\n+        assertQuery(defaultSession, \"SELECT CAST(ts as VARCHAR) FROM \" + prestoViewNameDefault, \"VALUES ('1990-01-02 12:13:14.123')\");\n+        assertThatThrownBy(\n+                // TODO Presto view schema is fixed on creation\n+                () ->assertQuery(defaultSession, \"SELECT CAST(ts as VARCHAR) FROM hive_timestamp_nanos.tpch.\" + prestoViewNameDefault, \"VALUES ('1990-01-02 12:13:14.123456789')\")\n+        ).hasMessageContaining(\"Actual rows (up to 100 of 1 extra rows shown, 1 rows in total):\\n    [1990-01-02 12:13:14.123]\");\n+\n+        assertQuery(millisSession, \"SELECT CAST(ts as VARCHAR) FROM \" + prestoViewNameDefault, \"VALUES ('1990-01-02 12:13:14.123')\");\n+        assertQuery(millisSession, \"SELECT CAST(ts as VARCHAR) FROM hive_timestamp_nanos.tpch.\" + prestoViewNameDefault, \"VALUES ('1990-01-02 12:13:14.123')\");\n+\n+        assertThatThrownBy(\n+                // TODO Presto view schema is fixed on creation\n+                () -> assertQuery(nanosSessions, \"SELECT CAST(ts as VARCHAR) FROM \" + prestoViewNameDefault, \"VALUES ('1990-01-02 12:13:14.123456789')\")\n+        ).hasMessageContaining(\"Actual rows (up to 100 of 1 extra rows shown, 1 rows in total):\\n    [1990-01-02 12:13:14.123]\");\n+\n+        assertThatThrownBy(\n+                // TODO Presto view schema is fixed on creation\n+                () -> assertQuery(nanosSessions, \"SELECT CAST(ts as VARCHAR) FROM hive_timestamp_nanos.tpch.\" + prestoViewNameDefault, \"VALUES ('1990-01-02 12:13:14.123456789')\")\n+        ).hasMessageContaining(\"Actual rows (up to 100 of 1 extra rows shown, 1 rows in total):\\n    [1990-01-02 12:13:14.123]\");\n+\n+        // Presto view created with config property set to MILLIS and session property set to NANOS\n+        String prestoViewNameNanos = \"select_from_presto_view_hive_table_timestamps_millis_view_\" + randomTableSuffix();\n+        assertUpdate(nanosSessions, \"CREATE VIEW \" + prestoViewNameNanos + \" AS SELECT *  FROM \" + hiveTableName);\n+\n+        assertThatThrownBy(\n+                // TODO Presto view schema is fixed on creation\n+                () -> assertQuery(defaultSession, \"SELECT CAST(ts as VARCHAR) FROM \" + prestoViewNameNanos, \"VALUES ('1990-01-02 12:13:14.123')\")\n+        ).hasMessageContaining(\"Actual rows (up to 100 of 1 extra rows shown, 1 rows in total):\\n    [1990-01-02 12:13:14.123000000]\");\n+        assertThatThrownBy(\n+                // TODO Presto view schema is fixed on creation\n+                () ->assertQuery(defaultSession, \"SELECT CAST(ts as VARCHAR) FROM hive_timestamp_nanos.tpch.\" + prestoViewNameNanos, \"VALUES ('1990-01-02 12:13:14.123456789')\")\n+        ).hasMessageContaining(\"Actual rows (up to 100 of 1 extra rows shown, 1 rows in total):\\n    [1990-01-02 12:13:14.123000000]\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzOTM2NQ=="}, "originalCommit": null, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM3Nzg2NA==", "bodyText": "Migrated to \"correct value in TODO\". After migration to assertThat and getting rid fo varchar the assertion started complaining about type mismatch, not value mismatch, which was not informative enough.", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547377864", "createdAt": "2020-12-22T16:34:49Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -7549,6 +7549,80 @@ public void testSelectFromViewWithoutDefaultCatalogAndSchema()\n         assertQuery(sessionNoCatalog, \"SELECT count(*) FROM hive.tpch.\" + viewName, \"VALUES 1\");\n     }\n \n+    @Test(invocationCount = 100)\n+    public void testSelectFromPrestoViewReferencingHiveTableWithTimestamps() {\n+        // Hive views tests covered in TestHiveViews.testTimestampHiveView and TestHiveViesLegacy.testTimestampHiveView\n+        String hiveTableName = \"select_from_presto_view_hive_table_timestamps_table_\" + randomTableSuffix();\n+        assertUpdate(\n+                withTimestampPrecision(getSession(), HiveTimestampPrecision.NANOSECONDS),\n+                \"CREATE TABLE \" + hiveTableName + \" AS SELECT TIMESTAMP '1990-01-02 12:13:14.123456789' ts\",\n+                1);\n+\n+        Session defaultSession = getSession();\n+        Session millisSession = Session.builder(getSession())\n+                .setCatalogSessionProperty(\"hive\", \"timestamp_precision\", \"MILLISECONDS\")\n+                .setCatalogSessionProperty(\"hive_timestamp_nanos\", \"timestamp_precision\", \"MILLISECONDS\")\n+                .build();\n+        Session nanosSessions = Session.builder(getSession())\n+                .setCatalogSessionProperty(\"hive\", \"timestamp_precision\", \"NANOSECONDS\")\n+                .setCatalogSessionProperty(\"hive_timestamp_nanos\", \"timestamp_precision\", \"NANOSECONDS\")\n+                .build();\n+\n+        // Presto view created with config property set to MILLIS and session property not set\n+        String prestoViewNameDefault = \"select_from_presto_view_hive_table_timestamps_default_view_\" + randomTableSuffix();\n+        assertUpdate(defaultSession, \"CREATE VIEW \" + prestoViewNameDefault + \" AS SELECT *  FROM \" + hiveTableName);\n+\n+        assertQuery(defaultSession, \"SELECT CAST(ts as VARCHAR) FROM \" + prestoViewNameDefault, \"VALUES ('1990-01-02 12:13:14.123')\");\n+        assertThatThrownBy(\n+                // TODO Presto view schema is fixed on creation\n+                () ->assertQuery(defaultSession, \"SELECT CAST(ts as VARCHAR) FROM hive_timestamp_nanos.tpch.\" + prestoViewNameDefault, \"VALUES ('1990-01-02 12:13:14.123456789')\")\n+        ).hasMessageContaining(\"Actual rows (up to 100 of 1 extra rows shown, 1 rows in total):\\n    [1990-01-02 12:13:14.123]\");\n+\n+        assertQuery(millisSession, \"SELECT CAST(ts as VARCHAR) FROM \" + prestoViewNameDefault, \"VALUES ('1990-01-02 12:13:14.123')\");\n+        assertQuery(millisSession, \"SELECT CAST(ts as VARCHAR) FROM hive_timestamp_nanos.tpch.\" + prestoViewNameDefault, \"VALUES ('1990-01-02 12:13:14.123')\");\n+\n+        assertThatThrownBy(\n+                // TODO Presto view schema is fixed on creation\n+                () -> assertQuery(nanosSessions, \"SELECT CAST(ts as VARCHAR) FROM \" + prestoViewNameDefault, \"VALUES ('1990-01-02 12:13:14.123456789')\")\n+        ).hasMessageContaining(\"Actual rows (up to 100 of 1 extra rows shown, 1 rows in total):\\n    [1990-01-02 12:13:14.123]\");\n+\n+        assertThatThrownBy(\n+                // TODO Presto view schema is fixed on creation\n+                () -> assertQuery(nanosSessions, \"SELECT CAST(ts as VARCHAR) FROM hive_timestamp_nanos.tpch.\" + prestoViewNameDefault, \"VALUES ('1990-01-02 12:13:14.123456789')\")\n+        ).hasMessageContaining(\"Actual rows (up to 100 of 1 extra rows shown, 1 rows in total):\\n    [1990-01-02 12:13:14.123]\");\n+\n+        // Presto view created with config property set to MILLIS and session property set to NANOS\n+        String prestoViewNameNanos = \"select_from_presto_view_hive_table_timestamps_millis_view_\" + randomTableSuffix();\n+        assertUpdate(nanosSessions, \"CREATE VIEW \" + prestoViewNameNanos + \" AS SELECT *  FROM \" + hiveTableName);\n+\n+        assertThatThrownBy(\n+                // TODO Presto view schema is fixed on creation\n+                () -> assertQuery(defaultSession, \"SELECT CAST(ts as VARCHAR) FROM \" + prestoViewNameNanos, \"VALUES ('1990-01-02 12:13:14.123')\")\n+        ).hasMessageContaining(\"Actual rows (up to 100 of 1 extra rows shown, 1 rows in total):\\n    [1990-01-02 12:13:14.123000000]\");\n+        assertThatThrownBy(\n+                // TODO Presto view schema is fixed on creation\n+                () ->assertQuery(defaultSession, \"SELECT CAST(ts as VARCHAR) FROM hive_timestamp_nanos.tpch.\" + prestoViewNameNanos, \"VALUES ('1990-01-02 12:13:14.123456789')\")\n+        ).hasMessageContaining(\"Actual rows (up to 100 of 1 extra rows shown, 1 rows in total):\\n    [1990-01-02 12:13:14.123000000]\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzOTM2NQ=="}, "originalCommit": null, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjcwNzk4OnYy", "diffSide": "RIGHT", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViews.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMjozNjoxNVrOIKLM3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMDoxNDo1NlrOIKgFuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0MDE4OA==", "bodyText": "i guess code style (& checkstyle) expects ) to be on prev line", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547540188", "createdAt": "2020-12-22T22:36:15Z", "author": {"login": "findepi"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViews.java", "diffHunk": "@@ -295,6 +297,45 @@ public void testSelectFromHiveViewWithoutDefaultCatalogAndSchema()\n                 .containsExactly(row(1L));\n     }\n \n+    @Test\n+    public void testTimestampHiveView()\n+    {\n+        onHive().executeQuery(\"DROP TABLE IF EXISTS timestamp_hive_table\");\n+        onHive().executeQuery(\"CREATE TABLE timestamp_hive_table AS SELECT cast('1990-01-02 12:13:14.123456789' AS timestamp) ts\");\n+        onHive().executeQuery(\"DROP VIEW IF EXISTS timestamp_hive_view\");\n+        onHive().executeQuery(\"CREATE VIEW timestamp_hive_view AS SELECT * FROM timestamp_hive_table\");\n+\n+        // timestamp_precision not set\n+        unsetSessionProperty(\"hive.timestamp_precision\");\n+        unsetSessionProperty(\"hive_timestamp_nanos.timestamp_precision\");\n+\n+        assertThat(query(\"SELECT CAST(ts AS varchar) FROM timestamp_hive_view\")).containsExactly(row(\"1990-01-02 12:13:14.123\"));\n+        assertThatThrownBy(\n+                // TODO(https://github.com/prestosql/presto/issues/6295) it is not possible to query Hive view with timestamps if hive.timestamp-precision=NANOSECONDS\n+                () -> assertThat(query(\"SELECT CAST(ts AS varchar) FROM hive_timestamp_nanos.default.timestamp_hive_view\")).containsExactly(row(\"1990-01-02 12:13:14.123456789\"))\n+        ).hasMessageContaining(\"timestamp(9) projected from query view at position 0 cannot be coerced to column [ts] of type timestamp(3) stored in view definition\");\n+\n+        setSessionProperty(\"hive.timestamp_precision\", \"'MILLISECONDS'\");\n+        setSessionProperty(\"hive_timestamp_nanos.timestamp_precision\", \"'MILLISECONDS'\");\n+\n+        assertThat(query(\"SELECT CAST(ts AS varchar) FROM timestamp_hive_view\")).containsExactly(row(\"1990-01-02 12:13:14.123\"));\n+        assertThatThrownBy(\n+                // TODO(https://github.com/prestosql/presto/issues/6295) it is not possible to query Hive view with timestamps if hive.timestamp-precision=NANOSECONDS\n+                () -> assertThat(query(\"SELECT CAST(ts AS varchar) FROM hive_timestamp_nanos.default.timestamp_hive_view\")).containsExactly(row(\"1990-01-02 12:13:14.123\"))\n+        ).hasMessageContaining(\"timestamp(9) projected from query view at position 0 cannot be coerced to column [ts] of type timestamp(3) stored in view definition\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg4MjQyNA==", "bodyText": "Acually no (at least for checkstyle).\nAs for the codestyle:\n        assertThatThrownBy(\n                // TODO(https://github.com/prestosql/presto/issues/6295) it is not possible to query Hive view with timestamps if hive.timestamp-precision=NANOSECONDS\n                () -> assertThat(query(\"SELECT CAST(ts AS varchar) FROM hive_timestamp_nanos.default.timestamp_hive_view\")).containsExactly(row(\"1990-01-02 12:13:14.123456789\")))\n                .hasMessageContaining(\"timestamp(9) projected from query view at position 0 cannot be coerced to column [ts] of type timestamp(3) stored in view definition\");\n\nlooks terrible IMO", "url": "https://github.com/trinodb/trino/pull/6424#discussion_r547882424", "createdAt": "2020-12-23T10:14:56Z", "author": {"login": "losipiuk"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViews.java", "diffHunk": "@@ -295,6 +297,45 @@ public void testSelectFromHiveViewWithoutDefaultCatalogAndSchema()\n                 .containsExactly(row(1L));\n     }\n \n+    @Test\n+    public void testTimestampHiveView()\n+    {\n+        onHive().executeQuery(\"DROP TABLE IF EXISTS timestamp_hive_table\");\n+        onHive().executeQuery(\"CREATE TABLE timestamp_hive_table AS SELECT cast('1990-01-02 12:13:14.123456789' AS timestamp) ts\");\n+        onHive().executeQuery(\"DROP VIEW IF EXISTS timestamp_hive_view\");\n+        onHive().executeQuery(\"CREATE VIEW timestamp_hive_view AS SELECT * FROM timestamp_hive_table\");\n+\n+        // timestamp_precision not set\n+        unsetSessionProperty(\"hive.timestamp_precision\");\n+        unsetSessionProperty(\"hive_timestamp_nanos.timestamp_precision\");\n+\n+        assertThat(query(\"SELECT CAST(ts AS varchar) FROM timestamp_hive_view\")).containsExactly(row(\"1990-01-02 12:13:14.123\"));\n+        assertThatThrownBy(\n+                // TODO(https://github.com/prestosql/presto/issues/6295) it is not possible to query Hive view with timestamps if hive.timestamp-precision=NANOSECONDS\n+                () -> assertThat(query(\"SELECT CAST(ts AS varchar) FROM hive_timestamp_nanos.default.timestamp_hive_view\")).containsExactly(row(\"1990-01-02 12:13:14.123456789\"))\n+        ).hasMessageContaining(\"timestamp(9) projected from query view at position 0 cannot be coerced to column [ts] of type timestamp(3) stored in view definition\");\n+\n+        setSessionProperty(\"hive.timestamp_precision\", \"'MILLISECONDS'\");\n+        setSessionProperty(\"hive_timestamp_nanos.timestamp_precision\", \"'MILLISECONDS'\");\n+\n+        assertThat(query(\"SELECT CAST(ts AS varchar) FROM timestamp_hive_view\")).containsExactly(row(\"1990-01-02 12:13:14.123\"));\n+        assertThatThrownBy(\n+                // TODO(https://github.com/prestosql/presto/issues/6295) it is not possible to query Hive view with timestamps if hive.timestamp-precision=NANOSECONDS\n+                () -> assertThat(query(\"SELECT CAST(ts AS varchar) FROM hive_timestamp_nanos.default.timestamp_hive_view\")).containsExactly(row(\"1990-01-02 12:13:14.123\"))\n+        ).hasMessageContaining(\"timestamp(9) projected from query view at position 0 cannot be coerced to column [ts] of type timestamp(3) stored in view definition\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0MDE4OA=="}, "originalCommit": null, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4408, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}