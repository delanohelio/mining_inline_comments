{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwNTIyMDQy", "number": 5704, "title": "Simplify 128 bit operations", "bodyText": "", "createdAt": "2020-10-27T06:56:09Z", "url": "https://github.com/trinodb/trino/pull/5704", "merged": true, "mergeCommit": {"oid": "9701d235184efb81230e2d5c5b7411527c660291"}, "closed": true, "closedAt": "2020-11-10T13:18:27Z", "author": {"login": "skrzypo987"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWjVs4gH2gAyNTEwNTIyMDQyOmYzOTgxMzkxOTRhMzkyMzYwMzVhYjM4OTJkM2ZmMzk3M2ZmYTljM2E=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdYkYqIAFqTUyMTYxNjUwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f398139194a39236035ab3892d3ff3973ffa9c3a", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/f398139194a39236035ab3892d3ff3973ffa9c3a", "committedDate": "2020-10-27T06:53:57Z", "message": "Extract simple bit operations to methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8261784b6e6d7bb72995afccca0887bf7c4b3b96", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/8261784b6e6d7bb72995afccca0887bf7c4b3b96", "committedDate": "2020-10-27T06:53:57Z", "message": "Generify 128-bit multiplication\n\nMake both 128x64 and 128x128 multiplications use one generic method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d44acf0a7642b5c75722a11929e74db5cc4cd7ca", "author": {"user": {"login": "skrzypo987", "name": null}}, "url": "https://github.com/trinodb/trino/commit/d44acf0a7642b5c75722a11929e74db5cc4cd7ca", "committedDate": "2020-10-27T06:53:57Z", "message": "Simplify and speed-up 128-bit multiplication\n\nRemove conditional statements from 64x64 -> 128 bit multiplication"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNTY1Njk3", "url": "https://github.com/trinodb/trino/pull/5704#pullrequestreview-521565697", "createdAt": "2020-11-02T11:57:07Z", "commit": {"oid": "8261784b6e6d7bb72995afccca0887bf7c4b3b96"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMTo1NzowOFrOHsBeEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMjowOToyM1rOHsBz9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyMzQ3Mw==", "bodyText": "Please add reverse comment (to other method), to suggest what could be written better. Now you say how it can be done worse.\nExample:\n// Consider x to increase performance by ~y%", "url": "https://github.com/trinodb/trino/pull/5704#discussion_r515923473", "createdAt": "2020-11-02T11:57:08Z", "author": {"login": "kokosing"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -655,6 +610,7 @@ public static void multiply(Slice left, int right, Slice result)\n         pack(result, (int) z0, (int) z1, (int) z2, (int) z3, leftNegative != rightNegative);\n     }\n \n+    // Using multiply(long, long, long, long, Slice) here decreases performance by ~40%", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8261784b6e6d7bb72995afccca0887bf7c4b3b96"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyNzQ5MQ==", "bodyText": "toUnsignedLong(getInt(left, 0)) is different than getRawLong(left, 0).\nOne expect 32 bits storage space, while other expects 64 bits.\nHow does it work?", "url": "https://github.com/trinodb/trino/pull/5704#discussion_r515927491", "createdAt": "2020-11-02T12:05:54Z", "author": {"login": "kokosing"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -474,19 +474,24 @@ public static void multiply(Slice left, Slice right, Slice result)\n     {\n         checkArgument(result.length() == NUMBER_OF_LONGS * Long.BYTES);\n \n-        long l0 = toUnsignedLong(getInt(left, 0));\n-        long l1 = toUnsignedLong(getInt(left, 1));\n-        long l2 = toUnsignedLong(getInt(left, 2));\n-        int l3raw = getRawInt(left, 3);\n-        boolean leftNegative = isNegative(l3raw);\n-        long l3 = toUnsignedLong(unpackUnsignedInt(l3raw));\n+        multiply(getRawLong(left, 0), getRawLong(left, 1), getRawLong(right, 0), getRawLong(right, 1), result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8261784b6e6d7bb72995afccca0887bf7c4b3b96"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyOTA3Ng==", "bodyText": "I guess this if supposed to be an optimization. Do you say that it is opposite?", "url": "https://github.com/trinodb/trino/pull/5704#discussion_r515929076", "createdAt": "2020-11-02T12:09:23Z", "author": {"login": "kokosing"}, "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -630,23 +630,19 @@ public static void multiply(long left, long right, Slice result)\n         long z2 = 0;\n         long z3 = 0;\n \n-        if (l0 != 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d44acf0a7642b5c75722a11929e74db5cc4cd7ca"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNjE2NTAz", "url": "https://github.com/trinodb/trino/pull/5704#pullrequestreview-521616503", "createdAt": "2020-11-02T13:14:57Z", "commit": {"oid": "d44acf0a7642b5c75722a11929e74db5cc4cd7ca"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3171, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}