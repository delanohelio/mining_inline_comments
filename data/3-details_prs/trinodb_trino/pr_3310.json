{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MzkwNjY3", "number": 3310, "title": "Cleanup delegation for JdbcClient statistics and caching", "bodyText": "", "createdAt": "2020-04-02T06:54:08Z", "url": "https://github.com/trinodb/trino/pull/3310", "merged": true, "mergeCommit": {"oid": "bcea275371c914f9f081592dfb729577d2615865"}, "closed": true, "closedAt": "2020-04-05T19:57:33Z", "author": {"login": "electrum"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcT6acKgFqTM4Njk1MTQwMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcUvrUIgBqjMyMDI5MTE5MDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2OTUxNDAz", "url": "https://github.com/trinodb/trino/pull/3310#pullrequestreview-386951403", "createdAt": "2020-04-03T05:49:09Z", "commit": null, "state": "DISMISSED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNTo0OTowOVrOGAF41A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNTo1MzoxOVrOGAF9IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0OTY1Mg==", "bodyText": "if you keep delegate (as private), the diff will be small & nice", "url": "https://github.com/trinodb/trino/pull/3310#discussion_r402749652", "createdAt": "2020-04-03T05:49:09Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/jmx/StatisticsAwareJdbcClient.java", "diffHunk": "@@ -56,12 +55,6 @@ public StatisticsAwareJdbcClient(JdbcClient delegate)\n         this.delegate = requireNonNull(delegate, \"delegate is null\");\n     }\n \n-    @Override\n-    protected JdbcClient delegate()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1MDM5Ng==", "bodyText": "I would rather delegate explicitly. And ensure it delegates everything with testEverythingImplemented.\nThis will ensure that if we add a new method (like schemaexists(ConnectorSesson, String) overload), this class will get updated properly.\nSo IMO this class should be impl the same way the StatisticsAware class is -- it has the same design principles of overriding everything except handed-picked exceptions (if any)", "url": "https://github.com/trinodb/trino/pull/3310#discussion_r402750396", "createdAt": "2020-04-03T05:52:01Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/CachingJdbcClient.java", "diffHunk": "@@ -46,7 +38,7 @@\n import static java.util.Objects.requireNonNull;\n \n public class CachingJdbcClient\n-        implements JdbcClient\n+        extends ForwardingJdbcClient", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1MDcxMA==", "bodyText": "isLimitGuaranteed stats are not useful\nthis method does not take any args, so it is not possible that it is not O(1) call\ni would rather not have these stats, not to litter the JMX state", "url": "https://github.com/trinodb/trino/pull/3310#discussion_r402750710", "createdAt": "2020-04-03T05:53:08Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/jmx/StatisticsAwareJdbcClient.java", "diffHunk": "@@ -229,6 +230,18 @@ public TableStatistics getTableStatistics(ConnectorSession session, JdbcTableHan\n         return stats.getGetTableStatistics().wrap(() -> delegate().getTableStatistics(session, handle, tupleDomain));\n     }\n \n+    @Override\n+    public boolean supportsLimit()\n+    {\n+        return stats.getSupportsLimit().wrap(() -> delegate().supportsLimit());\n+    }\n+\n+    @Override\n+    public boolean isLimitGuaranteed()\n+    {\n+        return stats.getIsLimitGuaranteed().wrap(() -> delegate().isLimitGuaranteed());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1MDc1Mw==", "bodyText": "supportsLimit stats are not useful\nthis method does not take any args, so it is not possible that it is not O(1) call\ni would rather not have these stats, not to litter the JMX state", "url": "https://github.com/trinodb/trino/pull/3310#discussion_r402750753", "createdAt": "2020-04-03T05:53:19Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/jmx/StatisticsAwareJdbcClient.java", "diffHunk": "@@ -229,6 +230,18 @@ public TableStatistics getTableStatistics(ConnectorSession session, JdbcTableHan\n         return stats.getGetTableStatistics().wrap(() -> delegate().getTableStatistics(session, handle, tupleDomain));\n     }\n \n+    @Override\n+    public boolean supportsLimit()\n+    {\n+        return stats.getSupportsLimit().wrap(() -> delegate().supportsLimit());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MDMxNjA5", "url": "https://github.com/trinodb/trino/pull/3310#pullrequestreview-387031609", "createdAt": "2020-04-03T07:50:39Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzo1MDo0MFrOGAI1-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzo1Mzo0OFrOGAI-6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc5ODA3NQ==", "bodyText": "I haven't added them in purpose. Such methods do not need to be measured.", "url": "https://github.com/trinodb/trino/pull/3310#discussion_r402798075", "createdAt": "2020-04-03T07:50:40Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/jmx/JdbcClientStats.java", "diffHunk": "@@ -37,13 +37,16 @@\n     private final JdbcApiStats getPreparedStatement = new JdbcApiStats();\n     private final JdbcApiStats getSchemaNames = new JdbcApiStats();\n     private final JdbcApiStats getSplits = new JdbcApiStats();\n+    private final JdbcApiStats getSystemTable = new JdbcApiStats();\n     private final JdbcApiStats getTableHandle = new JdbcApiStats();\n     private final JdbcApiStats getTableNames = new JdbcApiStats();\n     private final JdbcApiStats getTableStatistics = new JdbcApiStats();\n+    private final JdbcApiStats isLimitGuaranteed = new JdbcApiStats();\n     private final JdbcApiStats renameColumn = new JdbcApiStats();\n     private final JdbcApiStats renameTable = new JdbcApiStats();\n     private final JdbcApiStats rollbackCreateTable = new JdbcApiStats();\n     private final JdbcApiStats schemaExists = new JdbcApiStats();\n+    private final JdbcApiStats supportsLimit = new JdbcApiStats();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwMDM2MA==", "bodyText": "This was done this way in purpose. Please undo this commit.", "url": "https://github.com/trinodb/trino/pull/3310#discussion_r402800360", "createdAt": "2020-04-03T07:53:48Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/CachingJdbcClient.java", "diffHunk": "@@ -46,7 +38,7 @@\n import static java.util.Objects.requireNonNull;\n \n public class CachingJdbcClient\n-        implements JdbcClient\n+        extends ForwardingJdbcClient", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1MDM5Ng=="}, "originalCommit": null, "originalPosition": 27}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3Njg3MTQz", "url": "https://github.com/trinodb/trino/pull/3310#pullrequestreview-387687143", "createdAt": "2020-04-04T10:21:16Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxMDoyMToxNlrOGAw1BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxMDoyMToxNlrOGAw1BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ1MzE4OA==", "bodyText": "nonOverridenMethods?", "url": "https://github.com/trinodb/trino/pull/3310#discussion_r403453188", "createdAt": "2020-04-04T10:21:16Z", "author": {"login": "kokosing"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestCachingJdbcClient.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.jdbc;\n+\n+import com.google.common.collect.ImmutableSet;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.Method;\n+import java.util.Set;\n+\n+import static io.prestosql.spi.testing.InterfaceTestUtils.assertAllMethodsOverridden;\n+\n+public class TestCachingJdbcClient\n+{\n+    @Test\n+    public void testEverythingImplemented()\n+    {\n+        assertAllMethodsOverridden(JdbcClient.class, CachingJdbcClient.class, exclusions());\n+    }\n+\n+    private static Set<Method> exclusions()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c984f64ed9cb591e14aaa9e69208e8d971ad5fdc", "author": {"user": {"login": "electrum", "name": "David Phillips"}}, "url": "https://github.com/trinodb/trino/commit/c984f64ed9cb591e14aaa9e69208e8d971ad5fdc", "committedDate": "2020-04-05T19:57:20Z", "message": "Support exclusions in InterfaceTestUtils"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e7bbc7f6a0aafdeb1862b5fa5ee9f6df9595a63", "author": {"user": {"login": "electrum", "name": "David Phillips"}}, "url": "https://github.com/trinodb/trino/commit/7e7bbc7f6a0aafdeb1862b5fa5ee9f6df9595a63", "committedDate": "2020-04-05T19:57:21Z", "message": "Move JdbcClientStats to upper level"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e466fb5e62b12b2c08d28b779c8b7666cc756f0", "author": {"user": {"login": "electrum", "name": "David Phillips"}}, "url": "https://github.com/trinodb/trino/commit/5e466fb5e62b12b2c08d28b779c8b7666cc756f0", "committedDate": "2020-04-05T19:57:21Z", "message": "Ensure StatisticsAwareJdbcClient implements all methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcea275371c914f9f081592dfb729577d2615865", "author": {"user": {"login": "electrum", "name": "David Phillips"}}, "url": "https://github.com/trinodb/trino/commit/bcea275371c914f9f081592dfb729577d2615865", "committedDate": "2020-04-05T19:57:21Z", "message": "Ensure CachingJdbcClient delegates all unhandled methods"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "bcea275371c914f9f081592dfb729577d2615865", "author": {"user": {"login": "electrum", "name": "David Phillips"}}, "url": "https://github.com/trinodb/trino/commit/bcea275371c914f9f081592dfb729577d2615865", "committedDate": "2020-04-05T19:57:21Z", "message": "Ensure CachingJdbcClient delegates all unhandled methods"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1707, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}