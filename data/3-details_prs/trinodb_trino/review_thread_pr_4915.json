{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNjIyNTk2", "number": 4915, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjoyMDozN1rOEbBz5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjoyMToxMVrOEbB0og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Nzc2Njc4OnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestIntegrationSmokeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjoyMDozN1rOHEzY1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjoyMDozN1rOHEzY1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc5ODI5NA==", "bodyText": "You should also disable join reordering.", "url": "https://github.com/trinodb/trino/pull/4915#discussion_r474798294", "createdAt": "2020-08-21T16:20:37Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestIntegrationSmokeTest.java", "diffHunk": "@@ -196,6 +198,21 @@ public void testSelectAll()\n         assertQuery(\"SELECT * FROM orders\");\n     }\n \n+    /**\n+     * Test interactions between optimizer (including CBO), scheduling and connector metadata APIs.\n+     */\n+    @Test(timeOut = 300_000)\n+    public void testJoinWithEmptyBuildSide()\n+    {\n+        for (JoinDistributionType joinDistributionType : JoinDistributionType.values()) {\n+            Session session = Session.builder(getSession())\n+                    .setSystemProperty(JOIN_DISTRIBUTION_TYPE, joinDistributionType.toString())", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Nzc2ODY2OnYy", "diffSide": "RIGHT", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestIntegrationSmokeTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjoyMToxMVrOHEzaEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMToyNDozM1rOHE-Q-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc5ODYxMQ==", "bodyText": "can we test with empty proble side as well?\njust in case eg quick termination of the source stage (of the build side) does not leave things lingering?", "url": "https://github.com/trinodb/trino/pull/4915#discussion_r474798611", "createdAt": "2020-08-21T16:21:11Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestIntegrationSmokeTest.java", "diffHunk": "@@ -196,6 +198,21 @@ public void testSelectAll()\n         assertQuery(\"SELECT * FROM orders\");\n     }\n \n+    /**\n+     * Test interactions between optimizer (including CBO), scheduling and connector metadata APIs.\n+     */\n+    @Test(timeOut = 300_000)\n+    public void testJoinWithEmptyBuildSide()\n+    {\n+        for (JoinDistributionType joinDistributionType : JoinDistributionType.values()) {\n+            Session session = Session.builder(getSession())\n+                    .setSystemProperty(JOIN_DISTRIBUTION_TYPE, joinDistributionType.toString())\n+                    .build();\n+            assertQuery(session, \"SELECT count(*) FROM nation JOIN region ON nation.regionkey = region.regionkey AND region.name = ''\", \"VALUES 0\");\n+            assertQuery(session, \"SELECT count(*) FROM nation JOIN region ON nation.regionkey = region.regionkey AND region.regionkey < 0\", \"VALUES 0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxMTE5OQ==", "bodyText": "Note that we have similar tests on AbstractTestJoinQueries, but I don't think these tests are executed in connectors", "url": "https://github.com/trinodb/trino/pull/4915#discussion_r474811199", "createdAt": "2020-08-21T16:46:32Z", "author": {"login": "sopel39"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestIntegrationSmokeTest.java", "diffHunk": "@@ -196,6 +198,21 @@ public void testSelectAll()\n         assertQuery(\"SELECT * FROM orders\");\n     }\n \n+    /**\n+     * Test interactions between optimizer (including CBO), scheduling and connector metadata APIs.\n+     */\n+    @Test(timeOut = 300_000)\n+    public void testJoinWithEmptyBuildSide()\n+    {\n+        for (JoinDistributionType joinDistributionType : JoinDistributionType.values()) {\n+            Session session = Session.builder(getSession())\n+                    .setSystemProperty(JOIN_DISTRIBUTION_TYPE, joinDistributionType.toString())\n+                    .build();\n+            assertQuery(session, \"SELECT count(*) FROM nation JOIN region ON nation.regionkey = region.regionkey AND region.name = ''\", \"VALUES 0\");\n+            assertQuery(session, \"SELECT count(*) FROM nation JOIN region ON nation.regionkey = region.regionkey AND region.regionkey < 0\", \"VALUES 0\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc5ODYxMQ=="}, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk3NjUwNA==", "bodyText": "they are not", "url": "https://github.com/trinodb/trino/pull/4915#discussion_r474976504", "createdAt": "2020-08-21T21:24:33Z", "author": {"login": "findepi"}, "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestIntegrationSmokeTest.java", "diffHunk": "@@ -196,6 +198,21 @@ public void testSelectAll()\n         assertQuery(\"SELECT * FROM orders\");\n     }\n \n+    /**\n+     * Test interactions between optimizer (including CBO), scheduling and connector metadata APIs.\n+     */\n+    @Test(timeOut = 300_000)\n+    public void testJoinWithEmptyBuildSide()\n+    {\n+        for (JoinDistributionType joinDistributionType : JoinDistributionType.values()) {\n+            Session session = Session.builder(getSession())\n+                    .setSystemProperty(JOIN_DISTRIBUTION_TYPE, joinDistributionType.toString())\n+                    .build();\n+            assertQuery(session, \"SELECT count(*) FROM nation JOIN region ON nation.regionkey = region.regionkey AND region.name = ''\", \"VALUES 0\");\n+            assertQuery(session, \"SELECT count(*) FROM nation JOIN region ON nation.regionkey = region.regionkey AND region.regionkey < 0\", \"VALUES 0\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc5ODYxMQ=="}, "originalCommit": null, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3235, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}