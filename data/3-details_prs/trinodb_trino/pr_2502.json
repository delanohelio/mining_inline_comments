{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNjE2OTgx", "number": 2502, "title": "Launch product tests using Java", "bodyText": "Among other things, this addresses Bash compatibility issues (#2270 (comment)), by removing most of the need for Bash.", "createdAt": "2020-01-14T12:48:26Z", "url": "https://github.com/trinodb/trino/pull/2502", "merged": true, "mergeCommit": {"oid": "0d65e68110b7abea124ff5bd51a25021a2736e9b"}, "closed": true, "closedAt": "2020-01-17T13:15:04Z", "author": {"login": "findepi"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6RXIHgBqjI5NDcxNDgxMjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb7MLFrABqjI5NTc2NTE5MTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyNTk1NTg2", "url": "https://github.com/trinodb/trino/pull/2502#pullrequestreview-342595586", "createdAt": "2020-01-14T14:59:28Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNDo1OToyOFrOFdaeAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNTowNjoyOFrOFdat2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM4NjY4OA==", "bodyText": "Can we simply use Module ? There are plenty utilities that work on top of Module", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r366386688", "createdAt": "2020-01-14T14:59:28Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/Extensions.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher;\n+\n+import com.google.inject.Module;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public final class Extensions", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM4NzQ4Nw==", "bodyText": "How does it work? Where do inject? Into EnvironmentUp or EnvironmentOptions?", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r366387487", "createdAt": "2020-01-14T15:00:40Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/EnvironmentUp.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.cli;\n+\n+import com.github.dockerjava.api.DockerClient;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Module;\n+import io.airlift.airline.Command;\n+import io.airlift.log.Logger;\n+import io.prestosql.tests.product.launcher.Extensions;\n+import io.prestosql.tests.product.launcher.LauncherModule;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentModule;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.env.Environments;\n+import io.prestosql.tests.product.launcher.env.SelectedEnvironmentProvider;\n+import org.testcontainers.DockerClientFactory;\n+\n+import javax.inject.Inject;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+\n+import static io.prestosql.tests.product.launcher.cli.Commands.runCommand;\n+import static io.prestosql.tests.product.launcher.testcontainers.TestcontainersUtil.killContainersReaperContainer;\n+import static java.util.Objects.requireNonNull;\n+\n+@Command(name = \"up\", description = \"start an environment\")\n+public final class EnvironmentUp\n+        implements Runnable\n+{\n+    private static final Logger log = Logger.get(EnvironmentUp.class);\n+\n+    @Inject", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM4ODkwMg==", "bodyText": "Can we have a regular plugin like in Presto or Tempto?", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r366388902", "createdAt": "2020-01-14T15:03:14Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/ExtensionsProvidingCommandFactory.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.cli;\n+\n+import io.airlift.airline.DefaultCommandFactory;\n+import io.prestosql.tests.product.launcher.Extensions;\n+\n+import java.lang.reflect.Constructor;\n+\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class ExtensionsProvidingCommandFactory<T>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM4OTUzNA==", "bodyText": "TemptoTestRun?", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r366389534", "createdAt": "2020-01-14T15:04:21Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/TestRun.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.cli;\n+\n+import com.github.dockerjava.api.command.InspectContainerResponse;\n+import com.github.dockerjava.api.command.InspectContainerResponse.ContainerState;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Module;\n+import io.airlift.airline.Arguments;\n+import io.airlift.airline.Command;\n+import io.airlift.airline.Option;\n+import io.airlift.log.Logger;\n+import io.prestosql.tests.product.launcher.Extensions;\n+import io.prestosql.tests.product.launcher.LauncherModule;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentModule;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.env.Environments;\n+import io.prestosql.tests.product.launcher.env.SelectedEnvironmentProvider;\n+import org.testcontainers.containers.Container;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.net.Socket;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.prestosql.tests.product.launcher.cli.Commands.runCommand;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.containers.BindMode.READ_ONLY;\n+\n+@Command(name = \"run\", description = \"Presto product test launcher\")\n+public final class TestRun", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM5MDE2OQ==", "bodyText": "what about volumes?", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r366390169", "createdAt": "2020-01-14T15:05:29Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environments.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env;\n+\n+import com.github.dockerjava.api.DockerClient;\n+import io.airlift.log.Logger;\n+import io.prestosql.tests.product.launcher.docker.DockerUtil;\n+import org.testcontainers.DockerClientFactory;\n+import org.testcontainers.shaded.com.google.common.collect.ImmutableMap;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+\n+import static io.prestosql.tests.product.launcher.env.Environment.PRODUCT_TEST_LAUNCHER_NETWORK;\n+import static io.prestosql.tests.product.launcher.env.Environment.PRODUCT_TEST_LAUNCHER_STARTED_LABEL_NAME;\n+import static io.prestosql.tests.product.launcher.env.Environment.PRODUCT_TEST_LAUNCHER_STARTED_LABEL_VALUE;\n+\n+public final class Environments\n+{\n+    private Environments() {}\n+\n+    private static final Logger log = Logger.get(Environments.class);\n+\n+    public static void pruneEnvironment()\n+    {\n+        log.info(\"Shutting down previous containers\");\n+        try (DockerClient dockerClient = DockerClientFactory.lazyClient()) {\n+            DockerUtil.killContainers(\n+                    dockerClient,\n+                    listContainersCmd -> listContainersCmd.withLabelFilter(ImmutableMap.of(PRODUCT_TEST_LAUNCHER_STARTED_LABEL_NAME, PRODUCT_TEST_LAUNCHER_STARTED_LABEL_VALUE)));\n+            DockerUtil.removeNetworks(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM5MDc0NQ==", "bodyText": "Presto?", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r366390745", "createdAt": "2020-01-14T15:06:28Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/shared/Standard.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.shared;\n+\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.containers.wait.strategy.WaitAllStrategy;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.time.Duration;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.prestosql.tests.product.launcher.testcontainers.TestcontainersUtil.exposePort;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.containers.BindMode.READ_ONLY;\n+\n+public final class Standard", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNzI4MTUz", "url": "https://github.com/trinodb/trino/pull/2502#pullrequestreview-343728153", "createdAt": "2020-01-16T08:02:11Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwODowMjoxMlrOFeQw4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTowNTo1NVrOFeSTxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI3NjI1Ng==", "bodyText": "verify version is not empty", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367276256", "createdAt": "2020-01-16T08:02:12Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/PathResolver.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher;\n+\n+import com.google.common.base.Suppliers;\n+import com.google.common.io.Resources;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.function.Supplier;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+public final class PathResolver\n+{\n+    public static final String PROJECT_VERSION_PLACEHOLDER = \"${project.version}\";\n+\n+    private final Supplier<String> projectVersion = Suppliers.memoize(this::readProjectVersion);\n+\n+    public File resolvePlaceholders(File path)\n+    {\n+        String result = path.toString();\n+        if (result.contains(PROJECT_VERSION_PLACEHOLDER)) {\n+            result = result.replace(PROJECT_VERSION_PLACEHOLDER, projectVersion.get());\n+        }\n+        return new File(result);\n+    }\n+\n+    private String readProjectVersion()\n+    {\n+        try {\n+            return Resources.toString(Resources.getResource(\"presto-product-tests-launcher-version.txt\"), UTF_8)\n+                    .trim();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI3Nzg2OQ==", "bodyText": "I would divide this environment into two: presto (or even singlenode-presto) and tests. Standard is meaningless name. Also I would extract constants for presto-master and tests. Or you could could create Standard out of Presto and Tests?", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367277869", "createdAt": "2020-01-16T08:07:26Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/Standard.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.common;\n+\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.containers.wait.strategy.WaitAllStrategy;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.time.Duration;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.prestosql.tests.product.launcher.testcontainers.TestcontainersUtil.exposePort;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.containers.BindMode.READ_ONLY;\n+\n+public final class Standard\n+        implements EnvironmentExtender\n+{\n+    private final PathResolver pathResolver;\n+    private final DockerFiles dockerFiles;\n+\n+    private final String imagesVersion;\n+    private final File serverPackage;\n+\n+    @Inject\n+    public Standard(\n+            PathResolver pathResolver,\n+            DockerFiles dockerFiles,\n+            EnvironmentOptions environmentOptions)\n+    {\n+        this.pathResolver = requireNonNull(pathResolver, \"pathResolver is null\");\n+        this.dockerFiles = requireNonNull(dockerFiles, \"dockerFiles is null\");\n+        requireNonNull(environmentOptions, \"environmentOptions is null\");\n+        imagesVersion = requireNonNull(environmentOptions.imagesVersion, \"environmentOptions.imagesVersion is null\");\n+        serverPackage = requireNonNull(environmentOptions.serverPackage, \"environmentOptions.serverPackage is null\");\n+        checkArgument(serverPackage.getName().endsWith(\".tar.gz\"), \"Currently only server .tar.gz package is supported\");\n+    }\n+\n+    @Override\n+    public void extendEnvironment(Environment.Builder builder)\n+    {\n+        builder.addContainer(\"presto-master\", createPrestoMaster());\n+        builder.addContainer(\"tests\", createTestsContainer());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI3ODU2NQ==", "bodyText": "Please extract constant for \"/docker/presto-product-tests/conf/presto/etc/config.properties\" as this is going to be a path for all config properties for all presto environments.\nAlso I would move common/standard/config.properties to conf/environment/singlenode/config.properties. It seems to be common, but it is like extending multinode envirnoment where multinode presto config properties is specific to multinode and is stored in docker/presto-product-tests/conf/environment/multinode/multinode-master-config.properties", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367278565", "createdAt": "2020-01-16T08:09:33Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/Standard.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.common;\n+\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.containers.wait.strategy.WaitAllStrategy;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.time.Duration;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.prestosql.tests.product.launcher.testcontainers.TestcontainersUtil.exposePort;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.containers.BindMode.READ_ONLY;\n+\n+public final class Standard\n+        implements EnvironmentExtender\n+{\n+    private final PathResolver pathResolver;\n+    private final DockerFiles dockerFiles;\n+\n+    private final String imagesVersion;\n+    private final File serverPackage;\n+\n+    @Inject\n+    public Standard(\n+            PathResolver pathResolver,\n+            DockerFiles dockerFiles,\n+            EnvironmentOptions environmentOptions)\n+    {\n+        this.pathResolver = requireNonNull(pathResolver, \"pathResolver is null\");\n+        this.dockerFiles = requireNonNull(dockerFiles, \"dockerFiles is null\");\n+        requireNonNull(environmentOptions, \"environmentOptions is null\");\n+        imagesVersion = requireNonNull(environmentOptions.imagesVersion, \"environmentOptions.imagesVersion is null\");\n+        serverPackage = requireNonNull(environmentOptions.serverPackage, \"environmentOptions.serverPackage is null\");\n+        checkArgument(serverPackage.getName().endsWith(\".tar.gz\"), \"Currently only server .tar.gz package is supported\");\n+    }\n+\n+    @Override\n+    public void extendEnvironment(Environment.Builder builder)\n+    {\n+        builder.addContainer(\"presto-master\", createPrestoMaster());\n+        builder.addContainer(\"tests\", createTestsContainer());\n+    }\n+\n+    @SuppressWarnings(\"resource\")\n+    private DockerContainer createPrestoMaster()\n+    {\n+        DockerContainer container = new DockerContainer(\"prestodev/centos7-oj11:\" + imagesVersion)\n+                .withFileSystemBind(dockerFiles.getDockerFilesHostPath(), \"/docker/presto-product-tests\", READ_ONLY)\n+                .withFileSystemBind(pathResolver.resolvePlaceholders(serverPackage).toString(), \"/docker/presto-server.tar.gz\", READ_ONLY)\n+                .withFileSystemBind(dockerFiles.getDockerFilesHostPath(\"common/standard/config.properties\"), \"/docker/presto-product-tests/conf/presto/etc/config.properties\", READ_ONLY)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4MTU1OQ==", "bodyText": "Resources?", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367281559", "createdAt": "2020-01-16T08:17:55Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/docker/DockerFiles.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.docker;\n+\n+import com.google.common.reflect.ClassPath;\n+import io.airlift.log.Logger;\n+\n+import javax.annotation.PreDestroy;\n+import javax.annotation.concurrent.GuardedBy;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.PosixFilePermissions;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.io.MoreFiles.deleteRecursively;\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static java.nio.file.Files.copy;\n+import static java.util.UUID.randomUUID;\n+\n+public final class DockerFiles", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4MTg2Nw==", "bodyText": "Maybe you could use supplier for dockerFilesHostPath that would memoize unpackDockerFilesFromClasspath", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367281867", "createdAt": "2020-01-16T08:18:44Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/docker/DockerFiles.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.docker;\n+\n+import com.google.common.reflect.ClassPath;\n+import io.airlift.log.Logger;\n+\n+import javax.annotation.PreDestroy;\n+import javax.annotation.concurrent.GuardedBy;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.PosixFilePermissions;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.io.MoreFiles.deleteRecursively;\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static java.nio.file.Files.copy;\n+import static java.util.UUID.randomUUID;\n+\n+public final class DockerFiles\n+        implements AutoCloseable\n+{\n+    private static final Logger log = Logger.get(DockerFiles.class);\n+\n+    @GuardedBy(\"this\")\n+    private Path dockerFilesHostPath;\n+    @GuardedBy(\"this\")\n+    private boolean closed;\n+\n+    @PreDestroy\n+    @Override\n+    public synchronized void close()\n+            throws IOException\n+    {\n+        if (closed) {\n+            return;\n+        }\n+        if (dockerFilesHostPath != null) {\n+            deleteRecursively(dockerFilesHostPath, ALLOW_INSECURE);\n+            dockerFilesHostPath = null;\n+        }\n+        closed = true;\n+    }\n+\n+    public synchronized String getDockerFilesHostPath()\n+    {\n+        checkState(!closed, \"Already closed\");\n+        if (dockerFilesHostPath == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4MjEyNg==", "bodyText": "I would use something time based instead of randomUUID so it is easier to find these files manually (just in case).", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367282126", "createdAt": "2020-01-16T08:19:28Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/docker/DockerFiles.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.docker;\n+\n+import com.google.common.reflect.ClassPath;\n+import io.airlift.log.Logger;\n+\n+import javax.annotation.PreDestroy;\n+import javax.annotation.concurrent.GuardedBy;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.PosixFilePermissions;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.io.MoreFiles.deleteRecursively;\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static java.nio.file.Files.copy;\n+import static java.util.UUID.randomUUID;\n+\n+public final class DockerFiles\n+        implements AutoCloseable\n+{\n+    private static final Logger log = Logger.get(DockerFiles.class);\n+\n+    @GuardedBy(\"this\")\n+    private Path dockerFilesHostPath;\n+    @GuardedBy(\"this\")\n+    private boolean closed;\n+\n+    @PreDestroy\n+    @Override\n+    public synchronized void close()\n+            throws IOException\n+    {\n+        if (closed) {\n+            return;\n+        }\n+        if (dockerFilesHostPath != null) {\n+            deleteRecursively(dockerFilesHostPath, ALLOW_INSECURE);\n+            dockerFilesHostPath = null;\n+        }\n+        closed = true;\n+    }\n+\n+    public synchronized String getDockerFilesHostPath()\n+    {\n+        checkState(!closed, \"Already closed\");\n+        if (dockerFilesHostPath == null) {\n+            dockerFilesHostPath = unpackDockerFilesFromClasspath();\n+            verify(dockerFilesHostPath != null);\n+        }\n+        return dockerFilesHostPath.toString();\n+    }\n+\n+    public String getDockerFilesHostPath(String file)\n+    {\n+        checkArgument(file != null && !file.isEmpty() && !file.startsWith(\"/\"), \"Invalid file: %s\", file);\n+        Path filePath = Paths.get(getDockerFilesHostPath()).resolve(file);\n+        checkArgument(Files.exists(filePath), \"'%s' resolves to '%s', but it does not exist\", file, filePath);\n+        return filePath.toString();\n+    }\n+\n+    private static Path unpackDockerFilesFromClasspath()\n+    {\n+        try {\n+            // Cannot use Files.createTempDirectory() because on Mac by default it uses /var/folders/ which is not visible to Docker for Mac\n+            Path dockerFilesHostPath = Files.createDirectory(Paths.get(\"/tmp/docker-files-\" + randomUUID().toString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4MjQ5Mw==", "bodyText": "just call close or something static that close would call also", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367282493", "createdAt": "2020-01-16T08:20:28Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/docker/DockerFiles.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.docker;\n+\n+import com.google.common.reflect.ClassPath;\n+import io.airlift.log.Logger;\n+\n+import javax.annotation.PreDestroy;\n+import javax.annotation.concurrent.GuardedBy;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.PosixFilePermissions;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.io.MoreFiles.deleteRecursively;\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static java.nio.file.Files.copy;\n+import static java.util.UUID.randomUUID;\n+\n+public final class DockerFiles\n+        implements AutoCloseable\n+{\n+    private static final Logger log = Logger.get(DockerFiles.class);\n+\n+    @GuardedBy(\"this\")\n+    private Path dockerFilesHostPath;\n+    @GuardedBy(\"this\")\n+    private boolean closed;\n+\n+    @PreDestroy\n+    @Override\n+    public synchronized void close()\n+            throws IOException\n+    {\n+        if (closed) {\n+            return;\n+        }\n+        if (dockerFilesHostPath != null) {\n+            deleteRecursively(dockerFilesHostPath, ALLOW_INSECURE);\n+            dockerFilesHostPath = null;\n+        }\n+        closed = true;\n+    }\n+\n+    public synchronized String getDockerFilesHostPath()\n+    {\n+        checkState(!closed, \"Already closed\");\n+        if (dockerFilesHostPath == null) {\n+            dockerFilesHostPath = unpackDockerFilesFromClasspath();\n+            verify(dockerFilesHostPath != null);\n+        }\n+        return dockerFilesHostPath.toString();\n+    }\n+\n+    public String getDockerFilesHostPath(String file)\n+    {\n+        checkArgument(file != null && !file.isEmpty() && !file.startsWith(\"/\"), \"Invalid file: %s\", file);\n+        Path filePath = Paths.get(getDockerFilesHostPath()).resolve(file);\n+        checkArgument(Files.exists(filePath), \"'%s' resolves to '%s', but it does not exist\", file, filePath);\n+        return filePath.toString();\n+    }\n+\n+    private static Path unpackDockerFilesFromClasspath()\n+    {\n+        try {\n+            // Cannot use Files.createTempDirectory() because on Mac by default it uses /var/folders/ which is not visible to Docker for Mac\n+            Path dockerFilesHostPath = Files.createDirectory(Paths.get(\"/tmp/docker-files-\" + randomUUID().toString()));\n+\n+            // Best-effort cleanup\n+            Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n+                try {\n+                    deleteRecursively(dockerFilesHostPath, ALLOW_INSECURE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4Mjk5MQ==", "bodyText": "just docker? or even without anything. I often modify such files manually (with vim) shorter paths are easier.", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367282991", "createdAt": "2020-01-16T08:21:54Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/docker/DockerFiles.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.docker;\n+\n+import com.google.common.reflect.ClassPath;\n+import io.airlift.log.Logger;\n+\n+import javax.annotation.PreDestroy;\n+import javax.annotation.concurrent.GuardedBy;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.PosixFilePermissions;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.io.MoreFiles.deleteRecursively;\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static java.nio.file.Files.copy;\n+import static java.util.UUID.randomUUID;\n+\n+public final class DockerFiles\n+        implements AutoCloseable\n+{\n+    private static final Logger log = Logger.get(DockerFiles.class);\n+\n+    @GuardedBy(\"this\")\n+    private Path dockerFilesHostPath;\n+    @GuardedBy(\"this\")\n+    private boolean closed;\n+\n+    @PreDestroy\n+    @Override\n+    public synchronized void close()\n+            throws IOException\n+    {\n+        if (closed) {\n+            return;\n+        }\n+        if (dockerFilesHostPath != null) {\n+            deleteRecursively(dockerFilesHostPath, ALLOW_INSECURE);\n+            dockerFilesHostPath = null;\n+        }\n+        closed = true;\n+    }\n+\n+    public synchronized String getDockerFilesHostPath()\n+    {\n+        checkState(!closed, \"Already closed\");\n+        if (dockerFilesHostPath == null) {\n+            dockerFilesHostPath = unpackDockerFilesFromClasspath();\n+            verify(dockerFilesHostPath != null);\n+        }\n+        return dockerFilesHostPath.toString();\n+    }\n+\n+    public String getDockerFilesHostPath(String file)\n+    {\n+        checkArgument(file != null && !file.isEmpty() && !file.startsWith(\"/\"), \"Invalid file: %s\", file);\n+        Path filePath = Paths.get(getDockerFilesHostPath()).resolve(file);\n+        checkArgument(Files.exists(filePath), \"'%s' resolves to '%s', but it does not exist\", file, filePath);\n+        return filePath.toString();\n+    }\n+\n+    private static Path unpackDockerFilesFromClasspath()\n+    {\n+        try {\n+            // Cannot use Files.createTempDirectory() because on Mac by default it uses /var/folders/ which is not visible to Docker for Mac\n+            Path dockerFilesHostPath = Files.createDirectory(Paths.get(\"/tmp/docker-files-\" + randomUUID().toString()));\n+\n+            // Best-effort cleanup\n+            Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n+                try {\n+                    deleteRecursively(dockerFilesHostPath, ALLOW_INSECURE);\n+                }\n+                catch (IOException e) {\n+                    log.warn(e, \"Failed to clean up docker files temporary directory '%s'\", dockerFilesHostPath);\n+                }\n+            }));\n+\n+            ClassPath.from(Thread.currentThread().getContextClassLoader())\n+                    .getResources().stream()\n+                    .filter(resourceInfo -> resourceInfo.getResourceName().startsWith(\"docker/presto-product-tests/\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4NTk0OQ==", "bodyText": "Is it expensive to open and close DockerClient? Maybe we could have a singleton for that and we would inject dockerClient into DockerUtil or ContainterManager? Instead of passing this variable around.", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367285949", "createdAt": "2020-01-16T08:28:51Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/docker/DockerUtil.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.docker;\n+\n+import com.github.dockerjava.api.DockerClient;\n+import com.github.dockerjava.api.command.ListContainersCmd;\n+import com.github.dockerjava.api.command.ListNetworksCmd;\n+import com.github.dockerjava.api.exception.ConflictException;\n+import com.github.dockerjava.api.exception.NotFoundException;\n+import com.github.dockerjava.api.model.Container;\n+import com.github.dockerjava.api.model.Network;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+public final class DockerUtil\n+{\n+    private DockerUtil() {}\n+\n+    public static void killContainers(DockerClient dockerClient, Function<ListContainersCmd, ListContainersCmd> filter)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4NjExNg==", "bodyText": "log warning?", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367286116", "createdAt": "2020-01-16T08:29:16Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/docker/DockerUtil.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.docker;\n+\n+import com.github.dockerjava.api.DockerClient;\n+import com.github.dockerjava.api.command.ListContainersCmd;\n+import com.github.dockerjava.api.command.ListNetworksCmd;\n+import com.github.dockerjava.api.exception.ConflictException;\n+import com.github.dockerjava.api.exception.NotFoundException;\n+import com.github.dockerjava.api.model.Container;\n+import com.github.dockerjava.api.model.Network;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+public final class DockerUtil\n+{\n+    private DockerUtil() {}\n+\n+    public static void killContainers(DockerClient dockerClient, Function<ListContainersCmd, ListContainersCmd> filter)\n+    {\n+        while (true) {\n+            ListContainersCmd listContainersCmd = filter.apply(dockerClient.listContainersCmd()\n+                    .withShowAll(true));\n+\n+            List<Container> containers = listContainersCmd.exec();\n+            if (containers.isEmpty()) {\n+                break;\n+            }\n+            for (Container container : containers) {\n+                try {\n+                    dockerClient.removeContainerCmd(container.getId())\n+                            .withForce(true)\n+                            .exec();\n+                }\n+                catch (ConflictException | NotFoundException ignored) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4ODA4OQ==", "bodyText": "I think you could expose something else that is used for CLI handling. Something where you would use getters and have an option for validation or to inject a logic.", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367288089", "createdAt": "2020-01-16T08:34:11Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentOptions.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env;\n+\n+import com.google.inject.Module;\n+import io.airlift.airline.Option;\n+\n+import java.io.File;\n+\n+public final class EnvironmentOptions\n+{\n+    @Option(name = \"--hadoop-base-image\", title = \"image\", description = \"Hadoop base image\")\n+    public String hadoopBaseImage = System.getenv().getOrDefault(\"HADOOP_BASE_IMAGE\", \"prestodev/hdp2.6-hive\");\n+\n+    @Option(name = \"--image-version\", title = \"version\", description = \"docker images version\")\n+    public String imagesVersion = System.getenv().getOrDefault(\"DOCKER_IMAGES_VERSION\", \"25\");\n+\n+    @Option(name = \"--server-package\", title = \"server-package\", description = \"path to Presto server package\")\n+    public File serverPackage = new File(\"presto-server/target/presto-server-${project.version}.tar.gz\");\n+\n+    @Option(name = \"--jdbc-jar\", title = \"JDBC jar\", description = \"path to Presto JDBC jar\")\n+    public File jdbcJar = new File(\"presto-jdbc/target/presto-jdbc-${project.version}.jar\");\n+\n+    @Option(name = \"--cli-jar\", title = \"CLI jar\", description = \"path to Presto CLI jar\")\n+    public File cliJar = new File(\"presto-cli/target/presto-cli-${project.version}-executable.jar\");\n+\n+    @Option(name = \"--environment\", title = \"environment\", description = \"the name of the environment to start\", required = true)\n+    public String environment;\n+\n+    public Module toModule()\n+    {\n+        return binder -> {\n+            binder.bind(EnvironmentOptions.class).toInstance(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4ODQyNA==", "bodyText": "EnvironmentsModule? Because it is not specific to any environments but exposes all environment related objects. WDYT?", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367288424", "createdAt": "2020-01-16T08:35:04Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentModule.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Module;\n+import com.google.inject.multibindings.MapBinder;\n+import io.prestosql.tests.product.launcher.env.common.Hadoop;\n+import io.prestosql.tests.product.launcher.env.common.Standard;\n+\n+import static com.google.inject.multibindings.MapBinder.newMapBinder;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class EnvironmentModule", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5MDg3Ng==", "bodyText": "extract list containers method", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367290876", "createdAt": "2020-01-16T08:41:06Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environments.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env;\n+\n+import com.github.dockerjava.api.DockerClient;\n+import io.airlift.log.Logger;\n+import io.prestosql.tests.product.launcher.docker.DockerUtil;\n+import org.testcontainers.DockerClientFactory;\n+import org.testcontainers.shaded.com.google.common.collect.ImmutableMap;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+\n+import static io.prestosql.tests.product.launcher.env.Environment.PRODUCT_TEST_LAUNCHER_NETWORK;\n+import static io.prestosql.tests.product.launcher.env.Environment.PRODUCT_TEST_LAUNCHER_STARTED_LABEL_NAME;\n+import static io.prestosql.tests.product.launcher.env.Environment.PRODUCT_TEST_LAUNCHER_STARTED_LABEL_VALUE;\n+\n+public final class Environments\n+{\n+    private Environments() {}\n+\n+    private static final Logger log = Logger.get(Environments.class);\n+\n+    public static void pruneEnvironment()\n+    {\n+        log.info(\"Shutting down previous containers\");\n+        try (DockerClient dockerClient = DockerClientFactory.lazyClient()) {\n+            DockerUtil.killContainers(\n+                    dockerClient,\n+                    listContainersCmd -> listContainersCmd.withLabelFilter(ImmutableMap.of(PRODUCT_TEST_LAUNCHER_STARTED_LABEL_NAME, PRODUCT_TEST_LAUNCHER_STARTED_LABEL_VALUE)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5MDk5Mw==", "bodyText": "extract list networks method", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367290993", "createdAt": "2020-01-16T08:41:26Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environments.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env;\n+\n+import com.github.dockerjava.api.DockerClient;\n+import io.airlift.log.Logger;\n+import io.prestosql.tests.product.launcher.docker.DockerUtil;\n+import org.testcontainers.DockerClientFactory;\n+import org.testcontainers.shaded.com.google.common.collect.ImmutableMap;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+\n+import static io.prestosql.tests.product.launcher.env.Environment.PRODUCT_TEST_LAUNCHER_NETWORK;\n+import static io.prestosql.tests.product.launcher.env.Environment.PRODUCT_TEST_LAUNCHER_STARTED_LABEL_NAME;\n+import static io.prestosql.tests.product.launcher.env.Environment.PRODUCT_TEST_LAUNCHER_STARTED_LABEL_VALUE;\n+\n+public final class Environments\n+{\n+    private Environments() {}\n+\n+    private static final Logger log = Logger.get(Environments.class);\n+\n+    public static void pruneEnvironment()\n+    {\n+        log.info(\"Shutting down previous containers\");\n+        try (DockerClient dockerClient = DockerClientFactory.lazyClient()) {\n+            DockerUtil.killContainers(\n+                    dockerClient,\n+                    listContainersCmd -> listContainersCmd.withLabelFilter(ImmutableMap.of(PRODUCT_TEST_LAUNCHER_STARTED_LABEL_NAME, PRODUCT_TEST_LAUNCHER_STARTED_LABEL_VALUE)));\n+            DockerUtil.removeNetworks(\n+                    dockerClient,\n+                    listNetworksCmd -> listNetworksCmd.withNameFilter(PRODUCT_TEST_LAUNCHER_NETWORK));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5MTcyMw==", "bodyText": "It should be more user friendly.  Or did do some kind of validation and we should not hit the case where there is no environment here.", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367291723", "createdAt": "2020-01-16T08:43:08Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentFactory.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env;\n+\n+import javax.inject.Inject;\n+\n+import java.util.Map;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class EnvironmentFactory\n+{\n+    private final Map<String, EnvironmentProvider> environmentProviders;\n+\n+    @Inject\n+    public EnvironmentFactory(Map<String, EnvironmentProvider> environmentProviders)\n+    {\n+        this.environmentProviders = requireNonNull(environmentProviders, \"environmentProviders is null\");\n+    }\n+\n+    public Environment.Builder get(String environmentName)\n+    {\n+        checkArgument(environmentProviders.containsKey(environmentName), \"No environment with name '%s'\", environmentName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5MjA5MQ==", "bodyText": "\u2764\ufe0f", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367292091", "createdAt": "2020-01-16T08:44:07Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/Hadoop.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.common;\n+\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.testcontainers.SelectedPortWaitStrategy;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+\n+import javax.inject.Inject;\n+\n+import java.time.Duration;\n+\n+import static io.prestosql.tests.product.launcher.testcontainers.TestcontainersUtil.exposePort;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.containers.BindMode.READ_ONLY;\n+\n+public final class Hadoop\n+        implements EnvironmentExtender\n+{\n+    private final DockerFiles dockerFiles;\n+\n+    private final String hadoopBaseImage;\n+    private final String imagesVersion;\n+\n+    @Inject\n+    public Hadoop(\n+            DockerFiles dockerFiles,\n+            EnvironmentOptions environmentOptions)\n+    {\n+        this.dockerFiles = requireNonNull(dockerFiles, \"dockerFiles is null\");\n+        requireNonNull(environmentOptions, \"environmentOptions is null\");\n+        hadoopBaseImage = requireNonNull(environmentOptions.hadoopBaseImage, \"environmentOptions.hadoopBaseImage is null\");\n+        imagesVersion = requireNonNull(environmentOptions.imagesVersion, \"environmentOptions.imagesVersion is null\");\n+    }\n+\n+    @Override\n+    public void extendEnvironment(Environment.Builder builder)\n+    {\n+        builder.addContainer(\"hadoop-master\", createHadoopMaster());\n+\n+        builder.configureContainer(\"presto-master\", container -> container\n+                .withFileSystemBind(\n+                        dockerFiles.getDockerFilesHostPath(\"common/hadoop/hive.properties\"),\n+                        \"/docker/presto-product-tests/conf/presto/etc/catalog/hive.properties\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5Mzc1Mw==", "bodyText": "what do you think with enabling this by default? I know it was causing some issues with running benchmarks couple years back, but maybe it is not going to make some tests flaky. WDYT?", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367293753", "createdAt": "2020-01-16T08:47:58Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/resources/docker/presto-product-tests/conf/presto/etc/jvm.config", "diffHunk": "@@ -0,0 +1,17 @@\n+-server\n+-Xmx2G\n+-XX:-UseBiasedLocking\n+-XX:+UseG1GC\n+-XX:G1HeapRegionSize=32M\n+-XX:+ExplicitGCInvokesConcurrent\n+-XX:+ExitOnOutOfMemoryError\n+-XX:+UseGCOverheadLimit\n+-XX:+HeapDumpOnOutOfMemoryError\n+-XX:ReservedCodeCacheSize=150M\n+-Djdk.attach.allowAttachSelf=true\n+# jdk.nio.maxCachedBufferSize controls what buffers can be allocated in per-thread \"temporary buffer cache\" (sun.nio.ch.Util). Value of 0 disables the cache.\n+-Djdk.nio.maxCachedBufferSize=0\n+-DHADOOP_USER_NAME=hive\n+-Duser.timezone=Asia/Kathmandu\n+#-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5NDcwNw==", "bodyText": "Maybe we should file an issue to test containers to make possible to disable this container at all.", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367294707", "createdAt": "2020-01-16T08:50:27Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/testcontainers/TestcontainersUtil.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.testcontainers;\n+\n+import com.github.dockerjava.api.DockerClient;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import org.testcontainers.DockerClientFactory;\n+\n+public final class TestcontainersUtil\n+{\n+    private TestcontainersUtil() {}\n+\n+    public static void killContainersReaperContainer(DockerClient dockerClient)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5NTEwOA==", "bodyText": "ptl -> presto? or presto-test? or prestodev?", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367295108", "createdAt": "2020-01-16T08:51:22Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environment.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env;\n+\n+import com.github.dockerjava.api.model.Bind;\n+import io.airlift.log.Logger;\n+import io.prestosql.tests.product.launcher.testcontainers.PrintingLogConsumer;\n+import org.testcontainers.containers.Container;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.lifecycle.Startables;\n+import org.testcontainers.shaded.com.google.common.collect.ImmutableList;\n+import org.testcontainers.shaded.com.google.common.collect.ImmutableMap;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Consumer;\n+\n+import static com.google.common.base.MoreObjects.firstNonNull;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.shaded.com.google.common.base.Preconditions.checkState;\n+\n+public final class Environment\n+{\n+    private static final Logger log = Logger.get(Environment.class);\n+\n+    public static final String PRODUCT_TEST_LAUNCHER_STARTED_LABEL_NAME = Environment.class.getName() + \".ptl-started\";\n+    public static final String PRODUCT_TEST_LAUNCHER_STARTED_LABEL_VALUE = \"true\";\n+    public static final String PRODUCT_TEST_LAUNCHER_NETWORK = \"ptl-network\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5NTU5OA==", "bodyText": "this seems unused.", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367295598", "createdAt": "2020-01-16T08:52:31Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environment.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env;\n+\n+import com.github.dockerjava.api.model.Bind;\n+import io.airlift.log.Logger;\n+import io.prestosql.tests.product.launcher.testcontainers.PrintingLogConsumer;\n+import org.testcontainers.containers.Container;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.lifecycle.Startables;\n+import org.testcontainers.shaded.com.google.common.collect.ImmutableList;\n+import org.testcontainers.shaded.com.google.common.collect.ImmutableMap;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Consumer;\n+\n+import static com.google.common.base.MoreObjects.firstNonNull;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.shaded.com.google.common.base.Preconditions.checkState;\n+\n+public final class Environment\n+{\n+    private static final Logger log = Logger.get(Environment.class);\n+\n+    public static final String PRODUCT_TEST_LAUNCHER_STARTED_LABEL_NAME = Environment.class.getName() + \".ptl-started\";\n+    public static final String PRODUCT_TEST_LAUNCHER_STARTED_LABEL_VALUE = \"true\";\n+    public static final String PRODUCT_TEST_LAUNCHER_NETWORK = \"ptl-network\";\n+\n+    private final Network network;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5NzQ1NA==", "bodyText": "Do you need that?  What is wrong with having dead container? Would it be possible to do launcher up <environment> and then launcher tempto <environemnt> <tempto options>? could we then use such container or could we add a new one to environment? or completely new container that could only use same network?", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367297454", "createdAt": "2020-01-16T08:56:35Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/EnvironmentUp.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.cli;\n+\n+import com.github.dockerjava.api.DockerClient;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Module;\n+import io.airlift.airline.Command;\n+import io.airlift.log.Logger;\n+import io.prestosql.tests.product.launcher.Extensions;\n+import io.prestosql.tests.product.launcher.LauncherModule;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentModule;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.env.Environments;\n+import io.prestosql.tests.product.launcher.env.SelectedEnvironmentProvider;\n+import org.testcontainers.DockerClientFactory;\n+\n+import javax.inject.Inject;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+\n+import static io.prestosql.tests.product.launcher.cli.Commands.runCommand;\n+import static io.prestosql.tests.product.launcher.testcontainers.TestcontainersUtil.killContainersReaperContainer;\n+import static java.util.Objects.requireNonNull;\n+\n+@Command(name = \"up\", description = \"start an environment\")\n+public final class EnvironmentUp\n+        implements Runnable\n+{\n+    private static final Logger log = Logger.get(EnvironmentUp.class);\n+\n+    @Inject\n+    public EnvironmentOptions environmentOptions = new EnvironmentOptions();\n+\n+    private Module additionalEnvironments;\n+\n+    public EnvironmentUp(Extensions extensions)\n+    {\n+        this.additionalEnvironments = requireNonNull(extensions, \"extensions is null\").getAdditionalEnvironments();\n+    }\n+\n+    @Override\n+    public void run()\n+    {\n+        runCommand(\n+                ImmutableList.<Module>builder()\n+                        .add(new LauncherModule())\n+                        .add(new EnvironmentModule(additionalEnvironments))\n+                        .add(environmentOptions.toModule())\n+                        .build(),\n+                EnvironmentUp.Execution.class);\n+    }\n+\n+    public static class Execution\n+            implements Runnable\n+    {\n+        private final SelectedEnvironmentProvider selectedEnvironmentProvider;\n+\n+        @Inject\n+        public Execution(SelectedEnvironmentProvider selectedEnvironmentProvider)\n+        {\n+            this.selectedEnvironmentProvider = requireNonNull(selectedEnvironmentProvider, \"selectedEnvironmentProvider is null\");\n+        }\n+\n+        @Override\n+        public void run()\n+        {\n+            log.info(\"Pruning old environment(s)\");\n+            Environments.pruneEnvironment();\n+\n+            Environment environment = selectedEnvironmentProvider.getEnvironment()\n+                    .removeContainer(\"tests\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMwMTU0OQ==", "bodyText": "just worker-jvm/ or worker/jvm.config?", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367301549", "createdAt": "2020-01-16T09:05:51Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/Multinode.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.environment;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.env.common.AbstractEnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.common.Hadoop;\n+import io.prestosql.tests.product.launcher.env.common.Standard;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.time.Duration;\n+\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.containers.BindMode.READ_ONLY;\n+\n+public final class Multinode\n+        extends AbstractEnvironmentProvider\n+{\n+    private final PathResolver pathResolver;\n+    private final DockerFiles dockerFiles;\n+\n+    private final String imagesVersion;\n+    private final File serverPackage;\n+\n+    @Inject\n+    public Multinode(\n+            PathResolver pathResolver,\n+            DockerFiles dockerFiles,\n+            Standard standard,\n+            Hadoop hadoop,\n+            EnvironmentOptions environmentOptions)\n+    {\n+        super(ImmutableList.of(standard, hadoop));\n+        this.pathResolver = requireNonNull(pathResolver, \"pathResolver is null\");\n+        this.dockerFiles = requireNonNull(dockerFiles, \"dockerFiles is null\");\n+        imagesVersion = requireNonNull(environmentOptions.imagesVersion, \"environmentOptions.imagesVersion is null\");\n+        serverPackage = requireNonNull(environmentOptions.serverPackage, \"environmentOptions.serverPackage is null\");\n+    }\n+\n+    @Override\n+    protected void extendEnvironment(Environment.Builder builder)\n+    {\n+        super.extendEnvironment(builder);\n+\n+        builder.configureContainer(\"presto-master\", container -> {\n+            container\n+                    .withFileSystemBind(\n+                            dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode/multinode-master-jvm.config\"),\n+                            \"/docker/presto-product-tests/conf/presto/etc/jvm.config\",\n+                            READ_ONLY)\n+                    .withFileSystemBind(\n+                            dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode/multinode-master-config.properties\"),\n+                            \"/docker/presto-product-tests/conf/presto/etc/config.properties\",\n+                            READ_ONLY);\n+        });\n+\n+        builder.addContainer(\"presto-worker\", createPrestoWorker());\n+    }\n+\n+    @SuppressWarnings(\"resource\")\n+    private DockerContainer createPrestoWorker()\n+    {\n+        DockerContainer container = new DockerContainer(\"prestodev/centos6-oj8:\" + imagesVersion)\n+                .withFileSystemBind(dockerFiles.getDockerFilesHostPath(), \"/docker/presto-product-tests\", READ_ONLY)\n+                .withFileSystemBind(pathResolver.resolvePlaceholders(serverPackage).toString(), \"/docker/presto-server.tar.gz\", READ_ONLY)\n+                .withFileSystemBind(\n+                        dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode/multinode-worker-jvm.config\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMwMTU3NA==", "bodyText": "just worker-config?", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367301574", "createdAt": "2020-01-16T09:05:55Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/Multinode.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.environment;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.env.common.AbstractEnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.common.Hadoop;\n+import io.prestosql.tests.product.launcher.env.common.Standard;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.time.Duration;\n+\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.containers.BindMode.READ_ONLY;\n+\n+public final class Multinode\n+        extends AbstractEnvironmentProvider\n+{\n+    private final PathResolver pathResolver;\n+    private final DockerFiles dockerFiles;\n+\n+    private final String imagesVersion;\n+    private final File serverPackage;\n+\n+    @Inject\n+    public Multinode(\n+            PathResolver pathResolver,\n+            DockerFiles dockerFiles,\n+            Standard standard,\n+            Hadoop hadoop,\n+            EnvironmentOptions environmentOptions)\n+    {\n+        super(ImmutableList.of(standard, hadoop));\n+        this.pathResolver = requireNonNull(pathResolver, \"pathResolver is null\");\n+        this.dockerFiles = requireNonNull(dockerFiles, \"dockerFiles is null\");\n+        imagesVersion = requireNonNull(environmentOptions.imagesVersion, \"environmentOptions.imagesVersion is null\");\n+        serverPackage = requireNonNull(environmentOptions.serverPackage, \"environmentOptions.serverPackage is null\");\n+    }\n+\n+    @Override\n+    protected void extendEnvironment(Environment.Builder builder)\n+    {\n+        super.extendEnvironment(builder);\n+\n+        builder.configureContainer(\"presto-master\", container -> {\n+            container\n+                    .withFileSystemBind(\n+                            dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode/multinode-master-jvm.config\"),\n+                            \"/docker/presto-product-tests/conf/presto/etc/jvm.config\",\n+                            READ_ONLY)\n+                    .withFileSystemBind(\n+                            dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode/multinode-master-config.properties\"),\n+                            \"/docker/presto-product-tests/conf/presto/etc/config.properties\",\n+                            READ_ONLY);\n+        });\n+\n+        builder.addContainer(\"presto-worker\", createPrestoWorker());\n+    }\n+\n+    @SuppressWarnings(\"resource\")\n+    private DockerContainer createPrestoWorker()\n+    {\n+        DockerContainer container = new DockerContainer(\"prestodev/centos6-oj8:\" + imagesVersion)\n+                .withFileSystemBind(dockerFiles.getDockerFilesHostPath(), \"/docker/presto-product-tests\", READ_ONLY)\n+                .withFileSystemBind(pathResolver.resolvePlaceholders(serverPackage).toString(), \"/docker/presto-server.tar.gz\", READ_ONLY)\n+                .withFileSystemBind(\n+                        dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode/multinode-worker-jvm.config\"),\n+                        \"/docker/presto-product-tests/conf/presto/etc/jvm.config\",\n+                        READ_ONLY)\n+                .withFileSystemBind(\n+                        dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode/multinode-worker-config.properties\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 91}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NDI1NTY4", "url": "https://github.com/trinodb/trino/pull/2502#pullrequestreview-344425568", "createdAt": "2020-01-17T08:32:43Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwODozMjo0M1rOFex39A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwODo1MTozOFrOFeyRmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgxODc0MA==", "bodyText": "So if you are passing things explicitly why do you need reflection then?", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367818740", "createdAt": "2020-01-17T08:32:43Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/ExtensionsProvidingCommandFactory.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.cli;\n+\n+import io.airlift.airline.DefaultCommandFactory;\n+import io.prestosql.tests.product.launcher.Extensions;\n+\n+import java.lang.reflect.Constructor;\n+\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class ExtensionsProvidingCommandFactory<T>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM4ODkwMg=="}, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgyMDA1MA==", "bodyText": "Nevermind... it is minor.", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367820050", "createdAt": "2020-01-17T08:36:42Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/docker/DockerFiles.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.docker;\n+\n+import com.google.common.reflect.ClassPath;\n+import io.airlift.log.Logger;\n+\n+import javax.annotation.PreDestroy;\n+import javax.annotation.concurrent.GuardedBy;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.PosixFilePermissions;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.io.MoreFiles.deleteRecursively;\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static java.nio.file.Files.copy;\n+import static java.util.UUID.randomUUID;\n+\n+public final class DockerFiles\n+        implements AutoCloseable\n+{\n+    private static final Logger log = Logger.get(DockerFiles.class);\n+\n+    @GuardedBy(\"this\")\n+    private Path dockerFilesHostPath;\n+    @GuardedBy(\"this\")\n+    private boolean closed;\n+\n+    @PreDestroy\n+    @Override\n+    public synchronized void close()\n+            throws IOException\n+    {\n+        if (closed) {\n+            return;\n+        }\n+        if (dockerFilesHostPath != null) {\n+            deleteRecursively(dockerFilesHostPath, ALLOW_INSECURE);\n+            dockerFilesHostPath = null;\n+        }\n+        closed = true;\n+    }\n+\n+    public synchronized String getDockerFilesHostPath()\n+    {\n+        checkState(!closed, \"Already closed\");\n+        if (dockerFilesHostPath == null) {\n+            dockerFilesHostPath = unpackDockerFilesFromClasspath();\n+            verify(dockerFilesHostPath != null);\n+        }\n+        return dockerFilesHostPath.toString();\n+    }\n+\n+    public String getDockerFilesHostPath(String file)\n+    {\n+        checkArgument(file != null && !file.isEmpty() && !file.startsWith(\"/\"), \"Invalid file: %s\", file);\n+        Path filePath = Paths.get(getDockerFilesHostPath()).resolve(file);\n+        checkArgument(Files.exists(filePath), \"'%s' resolves to '%s', but it does not exist\", file, filePath);\n+        return filePath.toString();\n+    }\n+\n+    private static Path unpackDockerFilesFromClasspath()\n+    {\n+        try {\n+            // Cannot use Files.createTempDirectory() because on Mac by default it uses /var/folders/ which is not visible to Docker for Mac\n+            Path dockerFilesHostPath = Files.createDirectory(Paths.get(\"/tmp/docker-files-\" + randomUUID().toString()));\n+\n+            // Best-effort cleanup\n+            Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n+                try {\n+                    deleteRecursively(dockerFilesHostPath, ALLOW_INSECURE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4MjQ5Mw=="}, "originalCommit": null, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgyMDYzOA==", "bodyText": "It's utility function\n\nMy idea was to replace utility class with regular component class (with @Inject constructor etc).", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367820638", "createdAt": "2020-01-17T08:38:28Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/docker/DockerUtil.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.docker;\n+\n+import com.github.dockerjava.api.DockerClient;\n+import com.github.dockerjava.api.command.ListContainersCmd;\n+import com.github.dockerjava.api.command.ListNetworksCmd;\n+import com.github.dockerjava.api.exception.ConflictException;\n+import com.github.dockerjava.api.exception.NotFoundException;\n+import com.github.dockerjava.api.model.Container;\n+import com.github.dockerjava.api.model.Network;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+public final class DockerUtil\n+{\n+    private DockerUtil() {}\n+\n+    public static void killContainers(DockerClient dockerClient, Function<ListContainersCmd, ListContainersCmd> filter)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4NTk0OQ=="}, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgyMDg4NA==", "bodyText": "Anyway debug logging just in case would nice. Swallowed exceptions are hard to track.", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367820884", "createdAt": "2020-01-17T08:39:13Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/docker/DockerUtil.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.docker;\n+\n+import com.github.dockerjava.api.DockerClient;\n+import com.github.dockerjava.api.command.ListContainersCmd;\n+import com.github.dockerjava.api.command.ListNetworksCmd;\n+import com.github.dockerjava.api.exception.ConflictException;\n+import com.github.dockerjava.api.exception.NotFoundException;\n+import com.github.dockerjava.api.model.Container;\n+import com.github.dockerjava.api.model.Network;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+public final class DockerUtil\n+{\n+    private DockerUtil() {}\n+\n+    public static void killContainers(DockerClient dockerClient, Function<ListContainersCmd, ListContainersCmd> filter)\n+    {\n+        while (true) {\n+            ListContainersCmd listContainersCmd = filter.apply(dockerClient.listContainersCmd()\n+                    .withShowAll(true));\n+\n+            List<Container> containers = listContainersCmd.exec();\n+            if (containers.isEmpty()) {\n+                break;\n+            }\n+            for (Container container : containers) {\n+                try {\n+                    dockerClient.removeContainerCmd(container.getId())\n+                            .withForce(true)\n+                            .exec();\n+                }\n+                catch (ConflictException | NotFoundException ignored) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4NjExNg=="}, "originalCommit": null, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgyMTM3Ng==", "bodyText": "ptl is meaningless. Please prestodev instead. prestodev-presto-master looks good.", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367821376", "createdAt": "2020-01-17T08:40:45Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environment.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env;\n+\n+import com.github.dockerjava.api.model.Bind;\n+import io.airlift.log.Logger;\n+import io.prestosql.tests.product.launcher.testcontainers.PrintingLogConsumer;\n+import org.testcontainers.containers.Container;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.lifecycle.Startables;\n+import org.testcontainers.shaded.com.google.common.collect.ImmutableList;\n+import org.testcontainers.shaded.com.google.common.collect.ImmutableMap;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Consumer;\n+\n+import static com.google.common.base.MoreObjects.firstNonNull;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.shaded.com.google.common.base.Preconditions.checkState;\n+\n+public final class Environment\n+{\n+    private static final Logger log = Logger.get(Environment.class);\n+\n+    public static final String PRODUCT_TEST_LAUNCHER_STARTED_LABEL_NAME = Environment.class.getName() + \".ptl-started\";\n+    public static final String PRODUCT_TEST_LAUNCHER_STARTED_LABEL_VALUE = \"true\";\n+    public static final String PRODUCT_TEST_LAUNCHER_NETWORK = \"ptl-network\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5NTEwOA=="}, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgyMjUzNQ==", "bodyText": "binder.bind(EnvironmentConfiguration.class).toInstance(new EnvironmentConfiguration() {\n   String getImageVersion() \n   {\n          return imagesVersion;\n   }\n....\n});", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367822535", "createdAt": "2020-01-17T08:44:02Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentOptions.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env;\n+\n+import com.google.inject.Module;\n+import io.airlift.airline.Option;\n+\n+import java.io.File;\n+\n+public final class EnvironmentOptions\n+{\n+    @Option(name = \"--hadoop-base-image\", title = \"image\", description = \"Hadoop base image\")\n+    public String hadoopBaseImage = System.getenv().getOrDefault(\"HADOOP_BASE_IMAGE\", \"prestodev/hdp2.6-hive\");\n+\n+    @Option(name = \"--image-version\", title = \"version\", description = \"docker images version\")\n+    public String imagesVersion = System.getenv().getOrDefault(\"DOCKER_IMAGES_VERSION\", \"25\");\n+\n+    @Option(name = \"--server-package\", title = \"server-package\", description = \"path to Presto server package\")\n+    public File serverPackage = new File(\"presto-server/target/presto-server-${project.version}.tar.gz\");\n+\n+    @Option(name = \"--jdbc-jar\", title = \"JDBC jar\", description = \"path to Presto JDBC jar\")\n+    public File jdbcJar = new File(\"presto-jdbc/target/presto-jdbc-${project.version}.jar\");\n+\n+    @Option(name = \"--cli-jar\", title = \"CLI jar\", description = \"path to Presto CLI jar\")\n+    public File cliJar = new File(\"presto-cli/target/presto-cli-${project.version}-executable.jar\");\n+\n+    @Option(name = \"--environment\", title = \"environment\", description = \"the name of the environment to start\", required = true)\n+    public String environment;\n+\n+    public Module toModule()\n+    {\n+        return binder -> {\n+            binder.bind(EnvironmentOptions.class).toInstance(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4ODA4OQ=="}, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgyMjkxMg==", "bodyText": "nevermind.... it is minor", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367822912", "createdAt": "2020-01-17T08:45:06Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environments.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env;\n+\n+import com.github.dockerjava.api.DockerClient;\n+import io.airlift.log.Logger;\n+import io.prestosql.tests.product.launcher.docker.DockerUtil;\n+import org.testcontainers.DockerClientFactory;\n+import org.testcontainers.shaded.com.google.common.collect.ImmutableMap;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+\n+import static io.prestosql.tests.product.launcher.env.Environment.PRODUCT_TEST_LAUNCHER_NETWORK;\n+import static io.prestosql.tests.product.launcher.env.Environment.PRODUCT_TEST_LAUNCHER_STARTED_LABEL_NAME;\n+import static io.prestosql.tests.product.launcher.env.Environment.PRODUCT_TEST_LAUNCHER_STARTED_LABEL_VALUE;\n+\n+public final class Environments\n+{\n+    private Environments() {}\n+\n+    private static final Logger log = Logger.get(Environments.class);\n+\n+    public static void pruneEnvironment()\n+    {\n+        log.info(\"Shutting down previous containers\");\n+        try (DockerClient dockerClient = DockerClientFactory.lazyClient()) {\n+            DockerUtil.killContainers(\n+                    dockerClient,\n+                    listContainersCmd -> listContainersCmd.withLabelFilter(ImmutableMap.of(PRODUCT_TEST_LAUNCHER_STARTED_LABEL_NAME, PRODUCT_TEST_LAUNCHER_STARTED_LABEL_VALUE)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5MDg3Ng=="}, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgyMjk4MA==", "bodyText": "nevermind.... it is minor", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367822980", "createdAt": "2020-01-17T08:45:19Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environments.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env;\n+\n+import com.github.dockerjava.api.DockerClient;\n+import io.airlift.log.Logger;\n+import io.prestosql.tests.product.launcher.docker.DockerUtil;\n+import org.testcontainers.DockerClientFactory;\n+import org.testcontainers.shaded.com.google.common.collect.ImmutableMap;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+\n+import static io.prestosql.tests.product.launcher.env.Environment.PRODUCT_TEST_LAUNCHER_NETWORK;\n+import static io.prestosql.tests.product.launcher.env.Environment.PRODUCT_TEST_LAUNCHER_STARTED_LABEL_NAME;\n+import static io.prestosql.tests.product.launcher.env.Environment.PRODUCT_TEST_LAUNCHER_STARTED_LABEL_VALUE;\n+\n+public final class Environments\n+{\n+    private Environments() {}\n+\n+    private static final Logger log = Logger.get(Environments.class);\n+\n+    public static void pruneEnvironment()\n+    {\n+        log.info(\"Shutting down previous containers\");\n+        try (DockerClient dockerClient = DockerClientFactory.lazyClient()) {\n+            DockerUtil.killContainers(\n+                    dockerClient,\n+                    listContainersCmd -> listContainersCmd.withLabelFilter(ImmutableMap.of(PRODUCT_TEST_LAUNCHER_STARTED_LABEL_NAME, PRODUCT_TEST_LAUNCHER_STARTED_LABEL_VALUE)));\n+            DockerUtil.removeNetworks(\n+                    dockerClient,\n+                    listNetworksCmd -> listNetworksCmd.withNameFilter(PRODUCT_TEST_LAUNCHER_NETWORK));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5MDk5Mw=="}, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgyMzM0Mg==", "bodyText": "common/hadoop/hive.properties\"\n\nwhy not just hadoop or env/hadoop or environment/hadoop?", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367823342", "createdAt": "2020-01-17T08:46:22Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/Hadoop.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.common;\n+\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.testcontainers.SelectedPortWaitStrategy;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+\n+import javax.inject.Inject;\n+\n+import java.time.Duration;\n+\n+import static io.prestosql.tests.product.launcher.testcontainers.TestcontainersUtil.exposePort;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.containers.BindMode.READ_ONLY;\n+\n+public final class Hadoop\n+        implements EnvironmentExtender\n+{\n+    public static final String CONTAINER_PRESTO_HIVE_PROPERTIES = \"/docker/presto-product-tests/conf/presto/etc/catalog/hive.properties\";\n+\n+    private final DockerFiles dockerFiles;\n+\n+    private final String hadoopBaseImage;\n+    private final String imagesVersion;\n+\n+    @Inject\n+    public Hadoop(\n+            DockerFiles dockerFiles,\n+            EnvironmentOptions environmentOptions)\n+    {\n+        this.dockerFiles = requireNonNull(dockerFiles, \"dockerFiles is null\");\n+        requireNonNull(environmentOptions, \"environmentOptions is null\");\n+        hadoopBaseImage = requireNonNull(environmentOptions.hadoopBaseImage, \"environmentOptions.hadoopBaseImage is null\");\n+        imagesVersion = requireNonNull(environmentOptions.imagesVersion, \"environmentOptions.imagesVersion is null\");\n+    }\n+\n+    @Override\n+    public void extendEnvironment(Environment.Builder builder)\n+    {\n+        builder.addContainer(\"hadoop-master\", createHadoopMaster());\n+\n+        builder.configureContainer(\"presto-master\", container -> container\n+                .withFileSystemBind(dockerFiles.getDockerFilesHostPath(\"common/hadoop/hive.properties\"), CONTAINER_PRESTO_HIVE_PROPERTIES, READ_ONLY));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgyNDYyNQ==", "bodyText": "Please see:\n\nhttps://www.testcontainers.org/features/configuration/#disabling-ryuk\ntestcontainers/testcontainers-java#1023", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367824625", "createdAt": "2020-01-17T08:49:53Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/testcontainers/TestcontainersUtil.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.testcontainers;\n+\n+import com.github.dockerjava.api.DockerClient;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import org.testcontainers.DockerClientFactory;\n+\n+public final class TestcontainersUtil\n+{\n+    private TestcontainersUtil() {}\n+\n+    public static void killContainersReaperContainer(DockerClient dockerClient)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5NDcwNw=="}, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgyNDkzMw==", "bodyText": "cmt msg is a bit too long", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367824933", "createdAt": "2020-01-17T08:50:46Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentModule.java", "diffHunk": "@@ -17,8 +17,10 @@\n import com.google.inject.Module;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgyNTMwNg==", "bodyText": "KerberizedHadoop\nAt some point we should extract Kerberos from Hadoop as it is very useful for other connectors that might have support for Kerberos authentication", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367825306", "createdAt": "2020-01-17T08:51:38Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/Kerberos.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.common;\n+\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+\n+import javax.inject.Inject;\n+\n+import static io.prestosql.tests.product.launcher.env.common.Standard.CONTAINER_PRESTO_CONFIG_PROPERTIES;\n+import static io.prestosql.tests.product.launcher.env.common.Standard.CONTAINER_TEMPTO_PROFILE_CONFIG;\n+import static io.prestosql.tests.product.launcher.testcontainers.TestcontainersUtil.exposePort;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.containers.BindMode.READ_ONLY;\n+\n+public class Kerberos", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d29b02c7dc98a3bd9c5e7eb40ba86f1c97e12dfa", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/d29b02c7dc98a3bd9c5e7eb40ba86f1c97e12dfa", "committedDate": "2020-01-17T10:14:35Z", "message": "Add product tests Java Launcher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4752bc13fdd7abd73c58ea81216b7be3d0a4b8d9", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/4752bc13fdd7abd73c58ea81216b7be3d0a4b8d9", "committedDate": "2020-01-17T10:14:35Z", "message": "Convert singlenode environment to Launcher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "413308dcd00376c7ba445f1d84dc3fb7021fdc44", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/413308dcd00376c7ba445f1d84dc3fb7021fdc44", "committedDate": "2020-01-17T10:14:35Z", "message": "Convert singlenode-kerberos-hdfs-no-impersonation environment to Launcher"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "413308dcd00376c7ba445f1d84dc3fb7021fdc44", "author": {"user": {"login": "findepi", "name": "Piotr Findeisen"}}, "url": "https://github.com/trinodb/trino/commit/413308dcd00376c7ba445f1d84dc3fb7021fdc44", "committedDate": "2020-01-17T10:14:35Z", "message": "Convert singlenode-kerberos-hdfs-no-impersonation environment to Launcher"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 862, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}