{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMTc2MDQx", "number": 3805, "title": "Improve error message for missing operators", "bodyText": "", "createdAt": "2020-05-21T06:29:23Z", "url": "https://github.com/trinodb/trino/pull/3805", "merged": true, "mergeCommit": {"oid": "5943307181b67412c20127454f2d163170538ccc"}, "closed": true, "closedAt": "2020-06-30T01:18:28Z", "author": {"login": "electrum"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjaAhaAFqTQxNTk5NDY4OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcujebtgBqjM0Nzk4NTg0NDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1OTk0Njg4", "url": "https://github.com/trinodb/trino/pull/3805#pullrequestreview-415994688", "createdAt": "2020-05-21T09:11:32Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwOToxMTozMlrOGYr2fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwOToxMTozMlrOGYr2fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzNzQ3MA==", "bodyText": "Wasn't the original wording more readable?", "url": "https://github.com/trinodb/trino/pull/3805#discussion_r428537470", "createdAt": "2020-05-21T09:11:32Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/type/TestRowOperators.java", "diffHunk": "@@ -481,7 +481,7 @@ public void testRowComparison()\n         assertFunction(\"row(2, CAST(NULL AS INTEGER)) = row(1, 2)\", BOOLEAN, false);\n         assertFunction(\"row(2, CAST(NULL AS INTEGER)) != row(1, 2)\", BOOLEAN, true);\n         assertInvalidFunction(\"row(TRUE, ARRAY [1, 2], MAP(ARRAY[1, 3], ARRAY[2.0E0, 4.0E0])) > row(TRUE, ARRAY [1, 2], MAP(ARRAY[1, 3], ARRAY[2.0E0, 4.0E0]))\",\n-                TYPE_MISMATCH, \"line 1:64: '>' cannot be applied to row(boolean, array(integer), map(integer, double)), row(boolean, array(integer), map(integer, double))\");\n+                TYPE_MISMATCH, \"line 1:64: Operator does not exist: row(boolean, array(integer), map(integer, double)) > row(boolean, array(integer), map(integer, double))\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NDk0ODQ1", "url": "https://github.com/trinodb/trino/pull/3805#pullrequestreview-416494845", "createdAt": "2020-05-21T21:10:27Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMToxMDoyN1rOGZC_CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMToxMjo1N1rOGZDDcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkxNjQ4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return format(\"Operator '%s'%s cannot be applied to %s\",\n          \n          \n            \n                    return format(\n          \n          \n            \n                        \"Operator '%s'%s cannot be applied to %s\",", "url": "https://github.com/trinodb/trino/pull/3805#discussion_r428916489", "createdAt": "2020-05-21T21:10:27Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/metadata/OperatorNotFoundException.java", "diffHunk": "@@ -52,17 +52,34 @@ public OperatorNotFoundException(OperatorType operatorType, List<? extends Type>\n \n     private static String formatErrorMessage(OperatorType operatorType, List<? extends Type> argumentTypes, Optional<TypeSignature> returnType)\n     {\n-        String operatorString;\n         switch (operatorType) {\n+            case ADD:\n+            case SUBTRACT:\n+            case MULTIPLY:\n+            case DIVIDE:\n+            case MODULUS:\n+            case EQUAL:\n+            case NOT_EQUAL:\n+            case LESS_THAN:\n+            case LESS_THAN_OR_EQUAL:\n+            case GREATER_THAN:\n+            case GREATER_THAN_OR_EQUAL:\n+                return format(\"Cannot apply operator: %s %s %s\", argumentTypes.get(0), operatorType.getOperator(), argumentTypes.get(1));\n+            case NEGATION:\n+                return format(\"Cannot negate %s\", argumentTypes.get(0));\n             case BETWEEN:\n                 return format(\"Cannot check if %s is BETWEEN %s and %s\", argumentTypes.get(0), argumentTypes.get(1), argumentTypes.get(2));\n+            case IS_DISTINCT_FROM:\n+                return format(\"Cannot check if %s IS DISTINCT FROM %s\", argumentTypes.get(0), argumentTypes.get(1));\n             case CAST:\n-                operatorString = format(\"%s%s\", operatorType.getOperator(), returnType.map(value -> \" to \" + value).orElse(\"\"));\n-                break;\n-            default:\n-                operatorString = format(\"'%s'%s\", operatorType.getOperator(), returnType.map(value -> \":\" + value).orElse(\"\"));\n+                return format(\"Cannot cast %s to %s\", argumentTypes.get(0), returnType.orElseThrow());\n+            case SUBSCRIPT:\n+                return format(\"Cannot use %s for subscript of %s\", argumentTypes.get(1), argumentTypes.get(0));\n         }\n-        return format(\"%s cannot be applied to %s\", operatorString, Joiner.on(\", \").join(argumentTypes));\n+        return format(\"Operator '%s'%s cannot be applied to %s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkxNjk2MA==", "bodyText": "Do we have a test case which would hit the returnType.isPresent() case?", "url": "https://github.com/trinodb/trino/pull/3805#discussion_r428916960", "createdAt": "2020-05-21T21:11:26Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/metadata/OperatorNotFoundException.java", "diffHunk": "@@ -52,17 +52,34 @@ public OperatorNotFoundException(OperatorType operatorType, List<? extends Type>\n \n     private static String formatErrorMessage(OperatorType operatorType, List<? extends Type> argumentTypes, Optional<TypeSignature> returnType)\n     {\n-        String operatorString;\n         switch (operatorType) {\n+            case ADD:\n+            case SUBTRACT:\n+            case MULTIPLY:\n+            case DIVIDE:\n+            case MODULUS:\n+            case EQUAL:\n+            case NOT_EQUAL:\n+            case LESS_THAN:\n+            case LESS_THAN_OR_EQUAL:\n+            case GREATER_THAN:\n+            case GREATER_THAN_OR_EQUAL:\n+                return format(\"Cannot apply operator: %s %s %s\", argumentTypes.get(0), operatorType.getOperator(), argumentTypes.get(1));\n+            case NEGATION:\n+                return format(\"Cannot negate %s\", argumentTypes.get(0));\n             case BETWEEN:\n                 return format(\"Cannot check if %s is BETWEEN %s and %s\", argumentTypes.get(0), argumentTypes.get(1), argumentTypes.get(2));\n+            case IS_DISTINCT_FROM:\n+                return format(\"Cannot check if %s IS DISTINCT FROM %s\", argumentTypes.get(0), argumentTypes.get(1));\n             case CAST:\n-                operatorString = format(\"%s%s\", operatorType.getOperator(), returnType.map(value -> \" to \" + value).orElse(\"\"));\n-                break;\n-            default:\n-                operatorString = format(\"'%s'%s\", operatorType.getOperator(), returnType.map(value -> \":\" + value).orElse(\"\"));\n+                return format(\"Cannot cast %s to %s\", argumentTypes.get(0), returnType.orElseThrow());\n+            case SUBSCRIPT:\n+                return format(\"Cannot use %s for subscript of %s\", argumentTypes.get(1), argumentTypes.get(0));\n         }\n-        return format(\"%s cannot be applied to %s\", operatorString, Joiner.on(\", \").join(argumentTypes));\n+        return format(\"Operator '%s'%s cannot be applied to %s\",\n+                operatorType.getOperator(),\n+                returnType.map(value -> \":\" + value).orElse(\"\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkxNzYxNg==", "bodyText": "lowercase IS DISTINCT FROM ?\n(you didn't upper cast in the CAST case; and the sentence is still a sentence when you treat \"is distinct from\" as just words)", "url": "https://github.com/trinodb/trino/pull/3805#discussion_r428917616", "createdAt": "2020-05-21T21:12:57Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/metadata/OperatorNotFoundException.java", "diffHunk": "@@ -52,17 +52,34 @@ public OperatorNotFoundException(OperatorType operatorType, List<? extends Type>\n \n     private static String formatErrorMessage(OperatorType operatorType, List<? extends Type> argumentTypes, Optional<TypeSignature> returnType)\n     {\n-        String operatorString;\n         switch (operatorType) {\n+            case ADD:\n+            case SUBTRACT:\n+            case MULTIPLY:\n+            case DIVIDE:\n+            case MODULUS:\n+            case EQUAL:\n+            case NOT_EQUAL:\n+            case LESS_THAN:\n+            case LESS_THAN_OR_EQUAL:\n+            case GREATER_THAN:\n+            case GREATER_THAN_OR_EQUAL:\n+                return format(\"Cannot apply operator: %s %s %s\", argumentTypes.get(0), operatorType.getOperator(), argumentTypes.get(1));\n+            case NEGATION:\n+                return format(\"Cannot negate %s\", argumentTypes.get(0));\n             case BETWEEN:\n                 return format(\"Cannot check if %s is BETWEEN %s and %s\", argumentTypes.get(0), argumentTypes.get(1), argumentTypes.get(2));\n+            case IS_DISTINCT_FROM:\n+                return format(\"Cannot check if %s IS DISTINCT FROM %s\", argumentTypes.get(0), argumentTypes.get(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ba7514e4eb4b8ef6815e1f3771b4bfa248cc2bd", "author": {"user": {"login": "electrum", "name": "David Phillips"}}, "url": "https://github.com/trinodb/trino/commit/8ba7514e4eb4b8ef6815e1f3771b4bfa248cc2bd", "committedDate": "2020-06-25T00:26:11Z", "message": "Improve error message for missing operators"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "8ba7514e4eb4b8ef6815e1f3771b4bfa248cc2bd", "author": {"user": {"login": "electrum", "name": "David Phillips"}}, "url": "https://github.com/trinodb/trino/commit/8ba7514e4eb4b8ef6815e1f3771b4bfa248cc2bd", "committedDate": "2020-06-25T00:26:11Z", "message": "Improve error message for missing operators"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1214, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}