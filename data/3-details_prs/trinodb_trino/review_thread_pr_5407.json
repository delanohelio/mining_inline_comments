{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3NDc1MjM5", "number": 5407, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxOTowMjozMFrOEqHVQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxOTowMjozMFrOEqHVQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTk1Nzc3OnYy", "diffSide": "RIGHT", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestReentrantBoundedExecutor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxOTowMjozMFrOHcJgPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwODozMDo0NFrOHcSo5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3Nzg4Nw==", "bodyText": "why exception is swallowed?", "url": "https://github.com/trinodb/trino/pull/5407#discussion_r499277887", "createdAt": "2020-10-04T19:02:30Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestReentrantBoundedExecutor.java", "diffHunk": "@@ -31,25 +32,31 @@ public void testReentrantBoundedExecutor()\n     {\n         AtomicInteger callCounter = new AtomicInteger();\n         SettableFuture<Object> future = SettableFuture.create();\n-        Executor reentrantExecutor = new ReentrantBoundedExecutor(newCachedThreadPool(), 1);\n-        reentrantExecutor.execute(() -> {\n-            callCounter.incrementAndGet();\n+        ExecutorService executor = newCachedThreadPool();\n+        try {\n+            Executor reentrantExecutor = new ReentrantBoundedExecutor(executor, 1);\n             reentrantExecutor.execute(() -> {\n                 callCounter.incrementAndGet();\n-                future.set(null);\n+                reentrantExecutor.execute(() -> {\n+                    callCounter.incrementAndGet();\n+                    future.set(null);\n+                });\n+                try {\n+                    future.get();\n+                }\n+                catch (Exception ignored) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7318bb54237314caf67431f4419c4d9ee108683"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI4MjMyOQ==", "bodyText": "pre-existing, i have only added try-finally here.\nwould need to ask test's author, @sopel39", "url": "https://github.com/trinodb/trino/pull/5407#discussion_r499282329", "createdAt": "2020-10-04T19:51:06Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestReentrantBoundedExecutor.java", "diffHunk": "@@ -31,25 +32,31 @@ public void testReentrantBoundedExecutor()\n     {\n         AtomicInteger callCounter = new AtomicInteger();\n         SettableFuture<Object> future = SettableFuture.create();\n-        Executor reentrantExecutor = new ReentrantBoundedExecutor(newCachedThreadPool(), 1);\n-        reentrantExecutor.execute(() -> {\n-            callCounter.incrementAndGet();\n+        ExecutorService executor = newCachedThreadPool();\n+        try {\n+            Executor reentrantExecutor = new ReentrantBoundedExecutor(executor, 1);\n             reentrantExecutor.execute(() -> {\n                 callCounter.incrementAndGet();\n-                future.set(null);\n+                reentrantExecutor.execute(() -> {\n+                    callCounter.incrementAndGet();\n+                    future.set(null);\n+                });\n+                try {\n+                    future.get();\n+                }\n+                catch (Exception ignored) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3Nzg4Nw=="}, "originalCommit": {"oid": "b7318bb54237314caf67431f4419c4d9ee108683"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQyNzU1Nw==", "bodyText": "It's settable future used only in test. It cannot throw", "url": "https://github.com/trinodb/trino/pull/5407#discussion_r499427557", "createdAt": "2020-10-05T08:30:44Z", "author": {"login": "sopel39"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/metastore/cache/TestReentrantBoundedExecutor.java", "diffHunk": "@@ -31,25 +32,31 @@ public void testReentrantBoundedExecutor()\n     {\n         AtomicInteger callCounter = new AtomicInteger();\n         SettableFuture<Object> future = SettableFuture.create();\n-        Executor reentrantExecutor = new ReentrantBoundedExecutor(newCachedThreadPool(), 1);\n-        reentrantExecutor.execute(() -> {\n-            callCounter.incrementAndGet();\n+        ExecutorService executor = newCachedThreadPool();\n+        try {\n+            Executor reentrantExecutor = new ReentrantBoundedExecutor(executor, 1);\n             reentrantExecutor.execute(() -> {\n                 callCounter.incrementAndGet();\n-                future.set(null);\n+                reentrantExecutor.execute(() -> {\n+                    callCounter.incrementAndGet();\n+                    future.set(null);\n+                });\n+                try {\n+                    future.get();\n+                }\n+                catch (Exception ignored) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3Nzg4Nw=="}, "originalCommit": {"oid": "b7318bb54237314caf67431f4419c4d9ee108683"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4576, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}