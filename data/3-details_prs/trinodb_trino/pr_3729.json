{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3OTIwMzg1", "number": 3729, "title": "Refactor RubixConfigurationInitializer into dynamic provider", "bodyText": "Previously there was a race condition between first\nFileSystem request and Rubix cache initialization.\nNow RubixConfigurationInitializer is dynamic provider so\nRubix cache should start being used once Rubix is initialized.", "createdAt": "2020-05-14T11:03:52Z", "url": "https://github.com/trinodb/trino/pull/3729", "merged": true, "mergeCommit": {"oid": "315f567940ee4634b3b39377e973e74e67f42284"}, "closed": true, "closedAt": "2020-05-14T13:05:02Z", "author": {"login": "sopel39"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchLhgOAFqTQxMTcwMDIwOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABchNJBOAFqTQxMTc4MDgxMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNzAwMjA5", "url": "https://github.com/trinodb/trino/pull/3729#pullrequestreview-411700209", "createdAt": "2020-05-14T11:11:08Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMToxMTowOFrOGVXZxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMToxMTowOFrOGVXZxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA1NjcxMQ==", "bodyText": "Are we in control over ordering of DynamicConfigurationProviders. This check makes sense only if we know RubixConfigurationInitializer will run last. Right?", "url": "https://github.com/trinodb/trino/pull/3729#discussion_r425056711", "createdAt": "2020-05-14T11:11:08Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixConfigurationInitializer.java", "diffHunk": "@@ -69,17 +74,20 @@ public RubixConfigurationInitializer(RubixConfig config)\n     }\n \n     @Override\n-    public void initializeConfiguration(Configuration config)\n+    public void updateConfiguration(Configuration config, HdfsContext context, URI uri)\n     {\n+        checkState(getCacheKey(config) == null, \"Rubix does not support dynamic FileSystems\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNzAxNzUy", "url": "https://github.com/trinodb/trino/pull/3729#pullrequestreview-411701752", "createdAt": "2020-05-14T11:13:36Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMToxMzozNlrOGVXekw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMToxMzozNlrOGVXekw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA1NzkzOQ==", "bodyText": "private", "url": "https://github.com/trinodb/trino/pull/3729#discussion_r425057939", "createdAt": "2020-05-14T11:13:36Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixConfigurationInitializer.java", "diffHunk": "@@ -69,17 +74,20 @@ public RubixConfigurationInitializer(RubixConfig config)\n     }\n \n     @Override\n-    public void initializeConfiguration(Configuration config)\n+    public void updateConfiguration(Configuration config, HdfsContext context, URI uri)\n     {\n+        checkState(getCacheKey(config) == null, \"Rubix does not support dynamic FileSystems\");\n+\n         if (!cacheReady) {\n             setCacheDataEnabled(config, false);\n+            setCacheKey(config, \"rubix_disabled\");\n             return;\n         }\n \n         updateConfiguration(config);\n     }\n \n-    public Configuration updateConfiguration(Configuration config)\n+    public void updateConfiguration(Configuration config)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNzc1NDk5", "url": "https://github.com/trinodb/trino/pull/3729#pullrequestreview-411775499", "createdAt": "2020-05-14T12:58:13Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMjo1ODoxNFrOGVa9hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMjo1ODoxNFrOGVa9hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTExNTAxMw==", "bodyText": "not needed any more", "url": "https://github.com/trinodb/trino/pull/3729#discussion_r425115013", "createdAt": "2020-05-14T12:58:14Z", "author": {"login": "losipiuk"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/DynamicConfigurationProvider.java", "diffHunk": "@@ -24,6 +24,11 @@\n {\n     void updateConfiguration(Configuration configuration, HdfsContext context, URI uri);\n \n+    static String getCacheKey(Configuration configuration)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52d4b6c16b30a26bf13574af8e44448bebe44b20", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/52d4b6c16b30a26bf13574af8e44448bebe44b20", "committedDate": "2020-05-14T13:02:59Z", "message": "Refactor RubixConfigurationInitializer into dynamic provider\n\nPreviously there was a race condition between first\nFileSystem request and Rubix cache initialization.\nNow RubixConfigurationInitializer is dynamic provider so\nRubix cache should start being used once Rubix is initialized."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "52d4b6c16b30a26bf13574af8e44448bebe44b20", "author": {"user": {"login": "sopel39", "name": "Karol Sobczak"}}, "url": "https://github.com/trinodb/trino/commit/52d4b6c16b30a26bf13574af8e44448bebe44b20", "committedDate": "2020-05-14T13:02:59Z", "message": "Refactor RubixConfigurationInitializer into dynamic provider\n\nPreviously there was a race condition between first\nFileSystem request and Rubix cache initialization.\nNow RubixConfigurationInitializer is dynamic provider so\nRubix cache should start being used once Rubix is initialized."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNzgwODEy", "url": "https://github.com/trinodb/trino/pull/3729#pullrequestreview-411780812", "createdAt": "2020-05-14T13:04:12Z", "commit": {"oid": "52d4b6c16b30a26bf13574af8e44448bebe44b20"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1096, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}