{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNDg4Nzcw", "number": 3376, "reviewThreads": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMDoyNTowNVrODw5FEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzo0MTo0NVrODxwOUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTkzNDI2OnYy", "diffSide": "RIGHT", "path": "presto-bigquery/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMDoyNTowNVrOGEI0sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMDoyNTowNVrOGEI0sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MjA1MQ==", "bodyText": "Indentation is off", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r406992051", "createdAt": "2020-04-11T00:25:05Z", "author": {"login": "martint"}, "path": "presto-bigquery/pom.xml", "diffHunk": "@@ -14,25 +14,40 @@\n \n     <properties>\n         <air.main.basedir>${project.parent.basedir}</air.main.basedir>\n-        <dep.gax.version>1.49.1</dep.gax.version>\n-        <dep.google-auth-library.version>0.18.0</dep.google-auth-library.version>\n-        <dep.google-cloud-core.version>1.91.3</dep.google-cloud-core.version>\n     </properties>\n \n     <dependencyManagement>\n         <dependencies>\n             <dependency>\n-                <groupId>com.google.api.grpc</groupId>\n-                <artifactId>proto-google-common-protos</artifactId>\n-                <version>1.17.0</version>\n+                <groupId>com.google.cloud</groupId>\n+                    <artifactId>libraries-bom</artifactId>\n+                    <version>4.4.1</version>\n+                    <type>pom</type>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTkzNTI0OnYy", "diffSide": "RIGHT", "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryColumnHandle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMDoyNjoyN1rOGEI1WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMDoyNjoyN1rOGEI1WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MjIxNg==", "bodyText": "Remove the leading _ from the field name. We don't generally name fields and variables that way.", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r406992216", "createdAt": "2020-04-11T00:26:27Z", "author": {"login": "martint"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryColumnHandle.java", "diffHunk": "@@ -33,25 +33,53 @@\n public class BigQueryColumnHandle\n         implements ColumnHandle, BigQueryType.Adaptor\n {\n+    protected static final BigQueryColumnHandle _PARTITIONTIME = new BigQueryColumnHandle(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTkzNzI1OnYy", "diffSide": "RIGHT", "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryConnectorModule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMDoyODoyOFrOGEI2aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzozMjoyMFrOGFZdgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MjQ5MQ==", "bodyText": "Did this method just move or something changed? Please pull the change to move it around into a separate commit so that it's easier to see what the logical changes associated with this commit are.", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r406992491", "createdAt": "2020-04-11T00:28:28Z", "author": {"login": "martint"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryConnectorModule.java", "diffHunk": "@@ -46,6 +46,22 @@ public static HeaderProvider createHeaderProvider(NodeManager nodeManager)\n         return FixedHeaderProvider.create(\"user-agent\", \"prestosql/\" + nodeManager.getCurrentNode().getVersion());\n     }\n \n+    // Note that at this point the config has been validated, which means that option 2 or option 3 will always be valid", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxMzIxNw==", "bodyText": "Is this resolved?", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r408313217", "createdAt": "2020-04-14T17:32:20Z", "author": {"login": "martint"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryConnectorModule.java", "diffHunk": "@@ -46,6 +46,22 @@ public static HeaderProvider createHeaderProvider(NodeManager nodeManager)\n         return FixedHeaderProvider.create(\"user-agent\", \"prestosql/\" + nodeManager.getCurrentNode().getVersion());\n     }\n \n+    // Note that at this point the config has been validated, which means that option 2 or option 3 will always be valid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MjQ5MQ=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTkzOTk2OnYy", "diffSide": "RIGHT", "path": "presto-bigquery/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMDozMTowNFrOGEI30Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMDozMTowNFrOGEI30Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5Mjg0OQ==", "bodyText": "Are these changes related to supporting filter pushdown? If not, please pull them out into another commit to keep the unrelated logical changes separate.", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r406992849", "createdAt": "2020-04-11T00:31:04Z", "author": {"login": "martint"}, "path": "presto-bigquery/pom.xml", "diffHunk": "@@ -14,25 +14,40 @@\n \n     <properties>\n         <air.main.basedir>${project.parent.basedir}</air.main.basedir>\n-        <dep.gax.version>1.49.1</dep.gax.version>\n-        <dep.google-auth-library.version>0.18.0</dep.google-auth-library.version>\n-        <dep.google-cloud-core.version>1.91.3</dep.google-cloud-core.version>\n     </properties>\n \n     <dependencyManagement>\n         <dependencies>\n             <dependency>\n-                <groupId>com.google.api.grpc</groupId>\n-                <artifactId>proto-google-common-protos</artifactId>\n-                <version>1.17.0</version>\n+                <groupId>com.google.cloud</groupId>\n+                    <artifactId>libraries-bom</artifactId>\n+                    <version>4.4.1</version>\n+                    <type>pom</type>\n+                <scope>import</scope>\n             </dependency>\n \n             <dependency>\n-                <groupId>io.grpc</groupId>\n-                <artifactId>grpc-bom</artifactId>\n-                <version>1.24.1</version>\n-                <type>pom</type>\n-                <scope>import</scope>\n+                <groupId>com.google.errorprone</groupId>\n+                <artifactId>error_prone_annotations</artifactId>\n+                <version>2.3.4</version>\n+            </dependency>\n+\n+            <dependency>\n+                <groupId>com.google.guava</groupId>\n+                <artifactId>guava</artifactId>\n+                <version>28.2-jre</version>\n+            </dependency>\n+\n+            <dependency>\n+                <groupId>org.checkerframework</groupId>\n+                <artifactId>checker-qual</artifactId>\n+                <version>2.10.0</version>\n+            </dependency>\n+\n+            <dependency>\n+                <groupId>org.threeten</groupId>\n+                <artifactId>threetenbp</artifactId>\n+                <version>1.4.2</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTk0MDg2OnYy", "diffSide": "RIGHT", "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMDozMjoxM1rOGEI4Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMToyMToyNlrOGEYyjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5Mjk3OQ==", "bodyText": "This is part of the public interface of this class, so make it public.", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r406992979", "createdAt": "2020-04-11T00:32:13Z", "author": {"login": "martint"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.bigquery;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.predicate.Domain;\n+import io.prestosql.spi.predicate.Range;\n+import io.prestosql.spi.predicate.TupleDomain;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONDATE;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONTIME;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.Collectors.toList;\n+\n+class BigQueryFilterQueryBuilder\n+{\n+    private static final String QUOTE = \"`\";\n+    private static final String ESCAPED_QUOTE = \"``\";\n+    private TupleDomain<ColumnHandle> tupleDomain;\n+\n+    BigQueryFilterQueryBuilder(TupleDomain<ColumnHandle> tupleDomain)\n+    {\n+        this.tupleDomain = tupleDomain;\n+    }\n+\n+    Optional<String> buildFilter()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1MzY0Nw==", "bodyText": "Even for package protected class?", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r407253647", "createdAt": "2020-04-12T21:21:26Z", "author": {"login": "davidrabinowitz"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.bigquery;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.predicate.Domain;\n+import io.prestosql.spi.predicate.Range;\n+import io.prestosql.spi.predicate.TupleDomain;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONDATE;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONTIME;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.Collectors.toList;\n+\n+class BigQueryFilterQueryBuilder\n+{\n+    private static final String QUOTE = \"`\";\n+    private static final String ESCAPED_QUOTE = \"``\";\n+    private TupleDomain<ColumnHandle> tupleDomain;\n+\n+    BigQueryFilterQueryBuilder(TupleDomain<ColumnHandle> tupleDomain)\n+    {\n+        this.tupleDomain = tupleDomain;\n+    }\n+\n+    Optional<String> buildFilter()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5Mjk3OQ=="}, "originalCommit": null, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTk0MTIwOnYy", "diffSide": "RIGHT", "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMDozMjoyNlrOGEI4fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMTo0OTozN1rOGEY9Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MzAyMQ==", "bodyText": "This is part of the public interface of this class, so make it public.", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r406993021", "createdAt": "2020-04-11T00:32:26Z", "author": {"login": "martint"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.bigquery;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.predicate.Domain;\n+import io.prestosql.spi.predicate.Range;\n+import io.prestosql.spi.predicate.TupleDomain;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONDATE;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONTIME;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.Collectors.toList;\n+\n+class BigQueryFilterQueryBuilder\n+{\n+    private static final String QUOTE = \"`\";\n+    private static final String ESCAPED_QUOTE = \"``\";\n+    private TupleDomain<ColumnHandle> tupleDomain;\n+\n+    BigQueryFilterQueryBuilder(TupleDomain<ColumnHandle> tupleDomain)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1MzYxMQ==", "bodyText": "This class is package protected. I any case, the constructor was changed to private", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r407253611", "createdAt": "2020-04-12T21:20:49Z", "author": {"login": "davidrabinowitz"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.bigquery;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.predicate.Domain;\n+import io.prestosql.spi.predicate.Range;\n+import io.prestosql.spi.predicate.TupleDomain;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONDATE;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONTIME;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.Collectors.toList;\n+\n+class BigQueryFilterQueryBuilder\n+{\n+    private static final String QUOTE = \"`\";\n+    private static final String ESCAPED_QUOTE = \"``\";\n+    private TupleDomain<ColumnHandle> tupleDomain;\n+\n+    BigQueryFilterQueryBuilder(TupleDomain<ColumnHandle> tupleDomain)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MzAyMQ=="}, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1NjM1NA==", "bodyText": "Yes. Please see #3302 (comment)", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r407256354", "createdAt": "2020-04-12T21:49:37Z", "author": {"login": "martint"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.bigquery;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.predicate.Domain;\n+import io.prestosql.spi.predicate.Range;\n+import io.prestosql.spi.predicate.TupleDomain;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONDATE;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONTIME;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.Collectors.toList;\n+\n+class BigQueryFilterQueryBuilder\n+{\n+    private static final String QUOTE = \"`\";\n+    private static final String ESCAPED_QUOTE = \"``\";\n+    private TupleDomain<ColumnHandle> tupleDomain;\n+\n+    BigQueryFilterQueryBuilder(TupleDomain<ColumnHandle> tupleDomain)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MzAyMQ=="}, "originalCommit": null, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTk0MzAwOnYy", "diffSide": "RIGHT", "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMDozNDowMlrOGEI5cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMDozNDowMlrOGEI5cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MzI2NQ==", "bodyText": "We generally don't use final in local variables. Also, the variable is unnecessary. Just do return toConjuncts(columns)", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r406993265", "createdAt": "2020-04-11T00:34:02Z", "author": {"login": "martint"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.bigquery;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.predicate.Domain;\n+import io.prestosql.spi.predicate.Range;\n+import io.prestosql.spi.predicate.TupleDomain;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONDATE;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONTIME;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.Collectors.toList;\n+\n+class BigQueryFilterQueryBuilder\n+{\n+    private static final String QUOTE = \"`\";\n+    private static final String ESCAPED_QUOTE = \"``\";\n+    private TupleDomain<ColumnHandle> tupleDomain;\n+\n+    BigQueryFilterQueryBuilder(TupleDomain<ColumnHandle> tupleDomain)\n+    {\n+        this.tupleDomain = tupleDomain;\n+    }\n+\n+    Optional<String> buildFilter()\n+    {\n+        Optional<Map<ColumnHandle, Domain>> domains = tupleDomain.getDomains();\n+        return domains.map(this::toConjuncts)\n+                .map(this::concat)\n+                .map(filter -> filter\n+                        .replace(_PARTITIONDATE.getName(), _PARTITIONDATE.getName().toUpperCase())\n+                        .replace(_PARTITIONTIME.getName(), _PARTITIONTIME.getName().toUpperCase()));\n+    }\n+\n+    private String concat(List<String> clauses)\n+    {\n+        return clauses.isEmpty() ? null : clauses.stream().collect(joining(\" AND \"));\n+    }\n+\n+    private List<String> toConjuncts(Map<ColumnHandle, Domain> domains)\n+    {\n+        List<BigQueryColumnHandle> columns = domains.keySet().stream().map(BigQueryColumnHandle.class::cast).collect(toList());\n+        final List<String> conjuncts = toConjuncts(columns);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTk0OTIyOnYy", "diffSide": "RIGHT", "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMDozOTo1NlrOGEI8vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMToyMjo1N1rOGEYzHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5NDEwOA==", "bodyText": "I'm not sure I understand what this is supposed to do. _PARTITIONDATE.getName() returns _PARTITIONDATE, so calling toUpperCase() is a no-op.\nRegardless, this is brittle. What if the name of the field appears in the middle of a value? The replacement should be done before the domain is converted into a string.", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r406994108", "createdAt": "2020-04-11T00:39:56Z", "author": {"login": "martint"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.bigquery;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.predicate.Domain;\n+import io.prestosql.spi.predicate.Range;\n+import io.prestosql.spi.predicate.TupleDomain;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONDATE;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONTIME;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.Collectors.toList;\n+\n+class BigQueryFilterQueryBuilder\n+{\n+    private static final String QUOTE = \"`\";\n+    private static final String ESCAPED_QUOTE = \"``\";\n+    private TupleDomain<ColumnHandle> tupleDomain;\n+\n+    BigQueryFilterQueryBuilder(TupleDomain<ColumnHandle> tupleDomain)\n+    {\n+        this.tupleDomain = tupleDomain;\n+    }\n+\n+    Optional<String> buildFilter()\n+    {\n+        Optional<Map<ColumnHandle, Domain>> domains = tupleDomain.getDomains();\n+        return domains.map(this::toConjuncts)\n+                .map(this::concat)\n+                .map(filter -> filter\n+                        .replace(_PARTITIONDATE.getName(), _PARTITIONDATE.getName().toUpperCase())\n+                        .replace(_PARTITIONTIME.getName(), _PARTITIONTIME.getName().toUpperCase()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1Mzc5MQ==", "bodyText": "I had issues with those two fields, as they are pseudo columns of insert time partitioned tables, and the fact that Presto change all the column names to lower case.", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r407253791", "createdAt": "2020-04-12T21:22:57Z", "author": {"login": "davidrabinowitz"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.bigquery;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.predicate.Domain;\n+import io.prestosql.spi.predicate.Range;\n+import io.prestosql.spi.predicate.TupleDomain;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONDATE;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONTIME;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.Collectors.toList;\n+\n+class BigQueryFilterQueryBuilder\n+{\n+    private static final String QUOTE = \"`\";\n+    private static final String ESCAPED_QUOTE = \"``\";\n+    private TupleDomain<ColumnHandle> tupleDomain;\n+\n+    BigQueryFilterQueryBuilder(TupleDomain<ColumnHandle> tupleDomain)\n+    {\n+        this.tupleDomain = tupleDomain;\n+    }\n+\n+    Optional<String> buildFilter()\n+    {\n+        Optional<Map<ColumnHandle, Domain>> domains = tupleDomain.getDomains();\n+        return domains.map(this::toConjuncts)\n+                .map(this::concat)\n+                .map(filter -> filter\n+                        .replace(_PARTITIONDATE.getName(), _PARTITIONDATE.getName().toUpperCase())\n+                        .replace(_PARTITIONTIME.getName(), _PARTITIONTIME.getName().toUpperCase()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5NDEwOA=="}, "originalCommit": null, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTk0OTMyOnYy", "diffSide": "RIGHT", "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMDo0MDowNlrOGEI8zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMDo0MDowNlrOGEI8zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5NDEyNQ==", "bodyText": "This can be final", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r406994125", "createdAt": "2020-04-11T00:40:06Z", "author": {"login": "martint"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.bigquery;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.predicate.Domain;\n+import io.prestosql.spi.predicate.Range;\n+import io.prestosql.spi.predicate.TupleDomain;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONDATE;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONTIME;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.Collectors.toList;\n+\n+class BigQueryFilterQueryBuilder\n+{\n+    private static final String QUOTE = \"`\";\n+    private static final String ESCAPED_QUOTE = \"``\";\n+    private TupleDomain<ColumnHandle> tupleDomain;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTk1MDI4OnYy", "diffSide": "RIGHT", "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMDo0MDo1OFrOGEI9TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMDo0MDo1OFrOGEI9TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5NDI1Mw==", "bodyText": "Remove this commented out code", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r406994253", "createdAt": "2020-04-11T00:40:58Z", "author": {"login": "martint"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.bigquery;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.predicate.Domain;\n+import io.prestosql.spi.predicate.Range;\n+import io.prestosql.spi.predicate.TupleDomain;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONDATE;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONTIME;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.Collectors.toList;\n+\n+class BigQueryFilterQueryBuilder\n+{\n+    private static final String QUOTE = \"`\";\n+    private static final String ESCAPED_QUOTE = \"``\";\n+    private TupleDomain<ColumnHandle> tupleDomain;\n+\n+    BigQueryFilterQueryBuilder(TupleDomain<ColumnHandle> tupleDomain)\n+    {\n+        this.tupleDomain = tupleDomain;\n+    }\n+\n+    Optional<String> buildFilter()\n+    {\n+        Optional<Map<ColumnHandle, Domain>> domains = tupleDomain.getDomains();\n+        return domains.map(this::toConjuncts)\n+                .map(this::concat)\n+                .map(filter -> filter\n+                        .replace(_PARTITIONDATE.getName(), _PARTITIONDATE.getName().toUpperCase())\n+                        .replace(_PARTITIONTIME.getName(), _PARTITIONTIME.getName().toUpperCase()));\n+    }\n+\n+    private String concat(List<String> clauses)\n+    {\n+        return clauses.isEmpty() ? null : clauses.stream().collect(joining(\" AND \"));\n+    }\n+\n+    private List<String> toConjuncts(Map<ColumnHandle, Domain> domains)\n+    {\n+        List<BigQueryColumnHandle> columns = domains.keySet().stream().map(BigQueryColumnHandle.class::cast).collect(toList());\n+        final List<String> conjuncts = toConjuncts(columns);\n+        return conjuncts;\n+    }\n+\n+    private List<String> toConjuncts(List<BigQueryColumnHandle> columns)\n+    {\n+        if (tupleDomain.isNone()) {\n+            return ImmutableList.of(\"FALSE\");\n+        }\n+        ImmutableList.Builder<String> clauses = ImmutableList.builder();\n+        for (BigQueryColumnHandle column : columns) {\n+            Domain domain = tupleDomain.getDomains().get().get(column);\n+            if (domain != null) {\n+                //domain = pushDownDomain(column, domain);\n+                clauses.add(toPredicate(column.getName(), domain, column));\n+            }\n+        }\n+        return clauses.build();\n+    }\n+\n+    private String toPredicate(String columnName, Domain domain, BigQueryColumnHandle column)\n+    {\n+        if (domain.getValues().isNone()) {\n+            return domain.isNullAllowed() ? quote(columnName) + \" IS NULL\" : \"FALSE\";\n+        }\n+\n+        if (domain.getValues().isAll()) {\n+            return domain.isNullAllowed() ? \"TRUE\" : quote(columnName) + \" IS NOT NULL\";\n+        }\n+\n+        List<String> disjuncts = new ArrayList<>();\n+        List<Object> singleValues = new ArrayList<>();\n+        for (Range range : domain.getValues().getRanges().getOrderedRanges()) {\n+            checkState(!range.isAll()); // Already checked\n+            if (range.isSingleValue()) {\n+                singleValues.add(range.getLow().getValue());\n+            }\n+            else {\n+                List<String> rangeConjuncts = new ArrayList<>();\n+                if (!range.getLow().isLowerUnbounded()) {\n+                    switch (range.getLow().getBound()) {\n+                        case ABOVE:\n+                            rangeConjuncts.add(toPredicate(columnName, \">\", range.getLow().getValue(), column));\n+                            break;\n+                        case EXACTLY:\n+                            rangeConjuncts.add(toPredicate(columnName, \">=\", range.getLow().getValue(), column));\n+                            break;\n+                        case BELOW:\n+                            throw new IllegalArgumentException(\"Low marker should never use BELOW bound\");\n+                        default:\n+                            throw new AssertionError(\"Unhandled bound: \" + range.getLow().getBound());\n+                    }\n+                }\n+                if (!range.getHigh().isUpperUnbounded()) {\n+                    switch (range.getHigh().getBound()) {\n+                        case ABOVE:\n+                            throw new IllegalArgumentException(\"High marker should never use ABOVE bound\");\n+                        case EXACTLY:\n+                            rangeConjuncts.add(toPredicate(columnName, \"<=\", range.getHigh().getValue(), column));\n+                            break;\n+                        case BELOW:\n+                            rangeConjuncts.add(toPredicate(columnName, \"<\", range.getHigh().getValue(), column));\n+                            break;\n+                        default:\n+                            throw new AssertionError(\"Unhandled bound: \" + range.getHigh().getBound());\n+                    }\n+                }\n+                // If rangeConjuncts is null, then the range was ALL, which should already have been checked for\n+                checkState(!rangeConjuncts.isEmpty());\n+                disjuncts.add(\"(\" + Joiner.on(\" AND \").join(rangeConjuncts) + \")\");\n+            }\n+        }\n+\n+        // Add back all of the possible single values either as an equality or an IN predicate\n+        if (singleValues.size() == 1) {\n+            disjuncts.add(toPredicate(columnName, \"=\", getOnlyElement(singleValues), column));\n+        }\n+        else if (singleValues.size() > 1) {\n+            String values = singleValues.stream()\n+                    .map(value -> column.getBigQueryType().convertToString(value))\n+                    .collect(joining(\",\"));\n+            disjuncts.add(quote(columnName) + \" IN (\" + values + \")\");\n+        }\n+\n+        // Add nullability disjuncts\n+        checkState(!disjuncts.isEmpty());\n+        if (domain.isNullAllowed()) {\n+            disjuncts.add(quote(columnName) + \" IS NULL\");\n+        }\n+\n+        return disjuncts.stream().collect(joining(\" OR \", \"(\", \")\"));\n+    }\n+\n+    private String toPredicate(String columnName, String operator, Object value, BigQueryColumnHandle column)\n+    {\n+        String valueAsString = column.getBigQueryType().convertToString(value);\n+        return quote(columnName) + \" \" + operator + \" \" + valueAsString;\n+    }\n+\n+    private String quote(String name)\n+    {\n+        return QUOTE + name.replace(QUOTE, ESCAPED_QUOTE) + QUOTE;\n+    }\n+\n+    private static class TypeAndValue\n+    {\n+        private final Type type;\n+        private final Object value;\n+\n+        public TypeAndValue(Type type, Object value)\n+        {\n+            this.type = requireNonNull(type, \"type is null\");\n+            this.value = requireNonNull(value, \"value is null\");\n+        }\n+\n+        public Type getType()\n+        {\n+            return type;\n+        }\n+\n+        public Object getValue()\n+        {\n+            return value;\n+        }\n+    }\n+\n+//    private static Domain pushDownDomain(BigQueryColumnHandle column, Domain domain)\n+//    {\n+//        return column.get())\n+//                .orElseThrow(() -> new IllegalStateException(format(\"Unsupported type %s with handle %s\", column.getColumnType(), column.getJdbcTypeHandle())))\n+//            .getPushdownConverter().apply(domain);\n+//    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTk1MDM3OnYy", "diffSide": "RIGHT", "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMDo0MTowOVrOGEI9XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMDo0MTowOVrOGEI9XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5NDI2OQ==", "bodyText": "This class is unused", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r406994269", "createdAt": "2020-04-11T00:41:09Z", "author": {"login": "martint"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.bigquery;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.predicate.Domain;\n+import io.prestosql.spi.predicate.Range;\n+import io.prestosql.spi.predicate.TupleDomain;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONDATE;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONTIME;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.Collectors.toList;\n+\n+class BigQueryFilterQueryBuilder\n+{\n+    private static final String QUOTE = \"`\";\n+    private static final String ESCAPED_QUOTE = \"``\";\n+    private TupleDomain<ColumnHandle> tupleDomain;\n+\n+    BigQueryFilterQueryBuilder(TupleDomain<ColumnHandle> tupleDomain)\n+    {\n+        this.tupleDomain = tupleDomain;\n+    }\n+\n+    Optional<String> buildFilter()\n+    {\n+        Optional<Map<ColumnHandle, Domain>> domains = tupleDomain.getDomains();\n+        return domains.map(this::toConjuncts)\n+                .map(this::concat)\n+                .map(filter -> filter\n+                        .replace(_PARTITIONDATE.getName(), _PARTITIONDATE.getName().toUpperCase())\n+                        .replace(_PARTITIONTIME.getName(), _PARTITIONTIME.getName().toUpperCase()));\n+    }\n+\n+    private String concat(List<String> clauses)\n+    {\n+        return clauses.isEmpty() ? null : clauses.stream().collect(joining(\" AND \"));\n+    }\n+\n+    private List<String> toConjuncts(Map<ColumnHandle, Domain> domains)\n+    {\n+        List<BigQueryColumnHandle> columns = domains.keySet().stream().map(BigQueryColumnHandle.class::cast).collect(toList());\n+        final List<String> conjuncts = toConjuncts(columns);\n+        return conjuncts;\n+    }\n+\n+    private List<String> toConjuncts(List<BigQueryColumnHandle> columns)\n+    {\n+        if (tupleDomain.isNone()) {\n+            return ImmutableList.of(\"FALSE\");\n+        }\n+        ImmutableList.Builder<String> clauses = ImmutableList.builder();\n+        for (BigQueryColumnHandle column : columns) {\n+            Domain domain = tupleDomain.getDomains().get().get(column);\n+            if (domain != null) {\n+                //domain = pushDownDomain(column, domain);\n+                clauses.add(toPredicate(column.getName(), domain, column));\n+            }\n+        }\n+        return clauses.build();\n+    }\n+\n+    private String toPredicate(String columnName, Domain domain, BigQueryColumnHandle column)\n+    {\n+        if (domain.getValues().isNone()) {\n+            return domain.isNullAllowed() ? quote(columnName) + \" IS NULL\" : \"FALSE\";\n+        }\n+\n+        if (domain.getValues().isAll()) {\n+            return domain.isNullAllowed() ? \"TRUE\" : quote(columnName) + \" IS NOT NULL\";\n+        }\n+\n+        List<String> disjuncts = new ArrayList<>();\n+        List<Object> singleValues = new ArrayList<>();\n+        for (Range range : domain.getValues().getRanges().getOrderedRanges()) {\n+            checkState(!range.isAll()); // Already checked\n+            if (range.isSingleValue()) {\n+                singleValues.add(range.getLow().getValue());\n+            }\n+            else {\n+                List<String> rangeConjuncts = new ArrayList<>();\n+                if (!range.getLow().isLowerUnbounded()) {\n+                    switch (range.getLow().getBound()) {\n+                        case ABOVE:\n+                            rangeConjuncts.add(toPredicate(columnName, \">\", range.getLow().getValue(), column));\n+                            break;\n+                        case EXACTLY:\n+                            rangeConjuncts.add(toPredicate(columnName, \">=\", range.getLow().getValue(), column));\n+                            break;\n+                        case BELOW:\n+                            throw new IllegalArgumentException(\"Low marker should never use BELOW bound\");\n+                        default:\n+                            throw new AssertionError(\"Unhandled bound: \" + range.getLow().getBound());\n+                    }\n+                }\n+                if (!range.getHigh().isUpperUnbounded()) {\n+                    switch (range.getHigh().getBound()) {\n+                        case ABOVE:\n+                            throw new IllegalArgumentException(\"High marker should never use ABOVE bound\");\n+                        case EXACTLY:\n+                            rangeConjuncts.add(toPredicate(columnName, \"<=\", range.getHigh().getValue(), column));\n+                            break;\n+                        case BELOW:\n+                            rangeConjuncts.add(toPredicate(columnName, \"<\", range.getHigh().getValue(), column));\n+                            break;\n+                        default:\n+                            throw new AssertionError(\"Unhandled bound: \" + range.getHigh().getBound());\n+                    }\n+                }\n+                // If rangeConjuncts is null, then the range was ALL, which should already have been checked for\n+                checkState(!rangeConjuncts.isEmpty());\n+                disjuncts.add(\"(\" + Joiner.on(\" AND \").join(rangeConjuncts) + \")\");\n+            }\n+        }\n+\n+        // Add back all of the possible single values either as an equality or an IN predicate\n+        if (singleValues.size() == 1) {\n+            disjuncts.add(toPredicate(columnName, \"=\", getOnlyElement(singleValues), column));\n+        }\n+        else if (singleValues.size() > 1) {\n+            String values = singleValues.stream()\n+                    .map(value -> column.getBigQueryType().convertToString(value))\n+                    .collect(joining(\",\"));\n+            disjuncts.add(quote(columnName) + \" IN (\" + values + \")\");\n+        }\n+\n+        // Add nullability disjuncts\n+        checkState(!disjuncts.isEmpty());\n+        if (domain.isNullAllowed()) {\n+            disjuncts.add(quote(columnName) + \" IS NULL\");\n+        }\n+\n+        return disjuncts.stream().collect(joining(\" OR \", \"(\", \")\"));\n+    }\n+\n+    private String toPredicate(String columnName, String operator, Object value, BigQueryColumnHandle column)\n+    {\n+        String valueAsString = column.getBigQueryType().convertToString(value);\n+        return quote(columnName) + \" \" + operator + \" \" + valueAsString;\n+    }\n+\n+    private String quote(String name)\n+    {\n+        return QUOTE + name.replace(QUOTE, ESCAPED_QUOTE) + QUOTE;\n+    }\n+\n+    private static class TypeAndValue", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTk1MzI1OnYy", "diffSide": "RIGHT", "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMDo0Mzo1NVrOGEI-5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMToxOTo1MVrOGEYyIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5NDY2Mg==", "bodyText": "Based on how this class is used, I don't think it should be instantiable. There's no benefit from having instances or holding state internally. Instead of:\nOptional<String> filter = new BigQueryFilterQueryBuilder(constraint).buildFilter();\nI would change it so that the caller does:\nOptional<String> filter = BigQueryFilterQueryBuilder.buildFilter(constraint);", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r406994662", "createdAt": "2020-04-11T00:43:55Z", "author": {"login": "martint"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.bigquery;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.predicate.Domain;\n+import io.prestosql.spi.predicate.Range;\n+import io.prestosql.spi.predicate.TupleDomain;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONDATE;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONTIME;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.Collectors.toList;\n+\n+class BigQueryFilterQueryBuilder", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1MzUzNg==", "bodyText": "Having an helper object actually helps the implementation in my perspective, but I've changed the interface", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r407253536", "createdAt": "2020-04-12T21:19:51Z", "author": {"login": "davidrabinowitz"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.bigquery;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.predicate.Domain;\n+import io.prestosql.spi.predicate.Range;\n+import io.prestosql.spi.predicate.TupleDomain;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONDATE;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONTIME;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.Collectors.toList;\n+\n+class BigQueryFilterQueryBuilder", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5NDY2Mg=="}, "originalCommit": null, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTk1NjM2OnYy", "diffSide": "RIGHT", "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMDo0NzoxNVrOGEJAlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMTo1MzowNFrOGEY-Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5NTA5Mw==", "bodyText": "If this method returns null, it will cause a NullPointerException in the buildFilter method due to:\n.map(this::concat)\n.map(filter -> filter.replace(...))\n\nIf an empty list of clauses is an invalid condition, just add a checkArgument call that verifies that and reports a proper error.", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r406995093", "createdAt": "2020-04-11T00:47:15Z", "author": {"login": "martint"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.bigquery;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.predicate.Domain;\n+import io.prestosql.spi.predicate.Range;\n+import io.prestosql.spi.predicate.TupleDomain;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONDATE;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONTIME;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.Collectors.toList;\n+\n+class BigQueryFilterQueryBuilder\n+{\n+    private static final String QUOTE = \"`\";\n+    private static final String ESCAPED_QUOTE = \"``\";\n+    private TupleDomain<ColumnHandle> tupleDomain;\n+\n+    BigQueryFilterQueryBuilder(TupleDomain<ColumnHandle> tupleDomain)\n+    {\n+        this.tupleDomain = tupleDomain;\n+    }\n+\n+    Optional<String> buildFilter()\n+    {\n+        Optional<Map<ColumnHandle, Domain>> domains = tupleDomain.getDomains();\n+        return domains.map(this::toConjuncts)\n+                .map(this::concat)\n+                .map(filter -> filter\n+                        .replace(_PARTITIONDATE.getName(), _PARTITIONDATE.getName().toUpperCase())\n+                        .replace(_PARTITIONTIME.getName(), _PARTITIONTIME.getName().toUpperCase()));\n+    }\n+\n+    private String concat(List<String> clauses)\n+    {\n+        return clauses.isEmpty() ? null : clauses.stream().collect(joining(\" AND \"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5NzE1NA==", "bodyText": "Instead of\nclauses.stream().collect(joining(\" AND \"))\ndo\nString.join(\" AND \", clauses)", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r406997154", "createdAt": "2020-04-11T01:02:58Z", "author": {"login": "martint"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.bigquery;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.predicate.Domain;\n+import io.prestosql.spi.predicate.Range;\n+import io.prestosql.spi.predicate.TupleDomain;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONDATE;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONTIME;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.Collectors.toList;\n+\n+class BigQueryFilterQueryBuilder\n+{\n+    private static final String QUOTE = \"`\";\n+    private static final String ESCAPED_QUOTE = \"``\";\n+    private TupleDomain<ColumnHandle> tupleDomain;\n+\n+    BigQueryFilterQueryBuilder(TupleDomain<ColumnHandle> tupleDomain)\n+    {\n+        this.tupleDomain = tupleDomain;\n+    }\n+\n+    Optional<String> buildFilter()\n+    {\n+        Optional<Map<ColumnHandle, Domain>> domains = tupleDomain.getDomains();\n+        return domains.map(this::toConjuncts)\n+                .map(this::concat)\n+                .map(filter -> filter\n+                        .replace(_PARTITIONDATE.getName(), _PARTITIONDATE.getName().toUpperCase())\n+                        .replace(_PARTITIONTIME.getName(), _PARTITIONTIME.getName().toUpperCase()));\n+    }\n+\n+    private String concat(List<String> clauses)\n+    {\n+        return clauses.isEmpty() ? null : clauses.stream().collect(joining(\" AND \"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5NTA5Mw=="}, "originalCommit": null, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1NDU0NA==", "bodyText": "Can you please have a second look? Optional.map() returns Optional.empty() if the mapper function returns a null value, not Optional.of(null).", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r407254544", "createdAt": "2020-04-12T21:30:33Z", "author": {"login": "davidrabinowitz"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.bigquery;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.predicate.Domain;\n+import io.prestosql.spi.predicate.Range;\n+import io.prestosql.spi.predicate.TupleDomain;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONDATE;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONTIME;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.Collectors.toList;\n+\n+class BigQueryFilterQueryBuilder\n+{\n+    private static final String QUOTE = \"`\";\n+    private static final String ESCAPED_QUOTE = \"``\";\n+    private TupleDomain<ColumnHandle> tupleDomain;\n+\n+    BigQueryFilterQueryBuilder(TupleDomain<ColumnHandle> tupleDomain)\n+    {\n+        this.tupleDomain = tupleDomain;\n+    }\n+\n+    Optional<String> buildFilter()\n+    {\n+        Optional<Map<ColumnHandle, Domain>> domains = tupleDomain.getDomains();\n+        return domains.map(this::toConjuncts)\n+                .map(this::concat)\n+                .map(filter -> filter\n+                        .replace(_PARTITIONDATE.getName(), _PARTITIONDATE.getName().toUpperCase())\n+                        .replace(_PARTITIONTIME.getName(), _PARTITIONTIME.getName().toUpperCase()));\n+    }\n+\n+    private String concat(List<String> clauses)\n+    {\n+        return clauses.isEmpty() ? null : clauses.stream().collect(joining(\" AND \"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5NTA5Mw=="}, "originalCommit": null, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1NjY2Mw==", "bodyText": "Yes, you're right!", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r407256663", "createdAt": "2020-04-12T21:53:04Z", "author": {"login": "martint"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.bigquery;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.predicate.Domain;\n+import io.prestosql.spi.predicate.Range;\n+import io.prestosql.spi.predicate.TupleDomain;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONDATE;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONTIME;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.Collectors.toList;\n+\n+class BigQueryFilterQueryBuilder\n+{\n+    private static final String QUOTE = \"`\";\n+    private static final String ESCAPED_QUOTE = \"``\";\n+    private TupleDomain<ColumnHandle> tupleDomain;\n+\n+    BigQueryFilterQueryBuilder(TupleDomain<ColumnHandle> tupleDomain)\n+    {\n+        this.tupleDomain = tupleDomain;\n+    }\n+\n+    Optional<String> buildFilter()\n+    {\n+        Optional<Map<ColumnHandle, Domain>> domains = tupleDomain.getDomains();\n+        return domains.map(this::toConjuncts)\n+                .map(this::concat)\n+                .map(filter -> filter\n+                        .replace(_PARTITIONDATE.getName(), _PARTITIONDATE.getName().toUpperCase())\n+                        .replace(_PARTITIONTIME.getName(), _PARTITIONTIME.getName().toUpperCase()));\n+    }\n+\n+    private String concat(List<String> clauses)\n+    {\n+        return clauses.isEmpty() ? null : clauses.stream().collect(joining(\" AND \"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5NTA5Mw=="}, "originalCommit": null, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTk1Njc1OnYy", "diffSide": "RIGHT", "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMDo0NzozOFrOGEJAxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMDo0NzozOFrOGEJAxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5NTE0Mw==", "bodyText": "Remove commented out code", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r406995143", "createdAt": "2020-04-11T00:47:38Z", "author": {"login": "martint"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.bigquery;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.predicate.Domain;\n+import io.prestosql.spi.predicate.Range;\n+import io.prestosql.spi.predicate.TupleDomain;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONDATE;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONTIME;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.Collectors.toList;\n+\n+class BigQueryFilterQueryBuilder\n+{\n+    private static final String QUOTE = \"`\";\n+    private static final String ESCAPED_QUOTE = \"``\";\n+    private TupleDomain<ColumnHandle> tupleDomain;\n+\n+    BigQueryFilterQueryBuilder(TupleDomain<ColumnHandle> tupleDomain)\n+    {\n+        this.tupleDomain = tupleDomain;\n+    }\n+\n+    Optional<String> buildFilter()\n+    {\n+        Optional<Map<ColumnHandle, Domain>> domains = tupleDomain.getDomains();\n+        return domains.map(this::toConjuncts)\n+                .map(this::concat)\n+                .map(filter -> filter\n+                        .replace(_PARTITIONDATE.getName(), _PARTITIONDATE.getName().toUpperCase())\n+                        .replace(_PARTITIONTIME.getName(), _PARTITIONTIME.getName().toUpperCase()));\n+    }\n+\n+    private String concat(List<String> clauses)\n+    {\n+        return clauses.isEmpty() ? null : clauses.stream().collect(joining(\" AND \"));\n+    }\n+\n+    private List<String> toConjuncts(Map<ColumnHandle, Domain> domains)\n+    {\n+        List<BigQueryColumnHandle> columns = domains.keySet().stream().map(BigQueryColumnHandle.class::cast).collect(toList());\n+        final List<String> conjuncts = toConjuncts(columns);\n+        return conjuncts;\n+    }\n+\n+    private List<String> toConjuncts(List<BigQueryColumnHandle> columns)\n+    {\n+        if (tupleDomain.isNone()) {\n+            return ImmutableList.of(\"FALSE\");\n+        }\n+        ImmutableList.Builder<String> clauses = ImmutableList.builder();\n+        for (BigQueryColumnHandle column : columns) {\n+            Domain domain = tupleDomain.getDomains().get().get(column);\n+            if (domain != null) {\n+                //domain = pushDownDomain(column, domain);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTk2OTg0OnYy", "diffSide": "RIGHT", "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMTowMDo0N1rOGEJHqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMTowMDo0N1rOGEJHqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5NjkwNA==", "bodyText": "Use concat() to join the conjuncts?", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r406996904", "createdAt": "2020-04-11T01:00:47Z", "author": {"login": "martint"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.bigquery;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.predicate.Domain;\n+import io.prestosql.spi.predicate.Range;\n+import io.prestosql.spi.predicate.TupleDomain;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONDATE;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONTIME;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.Collectors.toList;\n+\n+class BigQueryFilterQueryBuilder\n+{\n+    private static final String QUOTE = \"`\";\n+    private static final String ESCAPED_QUOTE = \"``\";\n+    private TupleDomain<ColumnHandle> tupleDomain;\n+\n+    BigQueryFilterQueryBuilder(TupleDomain<ColumnHandle> tupleDomain)\n+    {\n+        this.tupleDomain = tupleDomain;\n+    }\n+\n+    Optional<String> buildFilter()\n+    {\n+        Optional<Map<ColumnHandle, Domain>> domains = tupleDomain.getDomains();\n+        return domains.map(this::toConjuncts)\n+                .map(this::concat)\n+                .map(filter -> filter\n+                        .replace(_PARTITIONDATE.getName(), _PARTITIONDATE.getName().toUpperCase())\n+                        .replace(_PARTITIONTIME.getName(), _PARTITIONTIME.getName().toUpperCase()));\n+    }\n+\n+    private String concat(List<String> clauses)\n+    {\n+        return clauses.isEmpty() ? null : clauses.stream().collect(joining(\" AND \"));\n+    }\n+\n+    private List<String> toConjuncts(Map<ColumnHandle, Domain> domains)\n+    {\n+        List<BigQueryColumnHandle> columns = domains.keySet().stream().map(BigQueryColumnHandle.class::cast).collect(toList());\n+        final List<String> conjuncts = toConjuncts(columns);\n+        return conjuncts;\n+    }\n+\n+    private List<String> toConjuncts(List<BigQueryColumnHandle> columns)\n+    {\n+        if (tupleDomain.isNone()) {\n+            return ImmutableList.of(\"FALSE\");\n+        }\n+        ImmutableList.Builder<String> clauses = ImmutableList.builder();\n+        for (BigQueryColumnHandle column : columns) {\n+            Domain domain = tupleDomain.getDomains().get().get(column);\n+            if (domain != null) {\n+                //domain = pushDownDomain(column, domain);\n+                clauses.add(toPredicate(column.getName(), domain, column));\n+            }\n+        }\n+        return clauses.build();\n+    }\n+\n+    private String toPredicate(String columnName, Domain domain, BigQueryColumnHandle column)\n+    {\n+        if (domain.getValues().isNone()) {\n+            return domain.isNullAllowed() ? quote(columnName) + \" IS NULL\" : \"FALSE\";\n+        }\n+\n+        if (domain.getValues().isAll()) {\n+            return domain.isNullAllowed() ? \"TRUE\" : quote(columnName) + \" IS NOT NULL\";\n+        }\n+\n+        List<String> disjuncts = new ArrayList<>();\n+        List<Object> singleValues = new ArrayList<>();\n+        for (Range range : domain.getValues().getRanges().getOrderedRanges()) {\n+            checkState(!range.isAll()); // Already checked\n+            if (range.isSingleValue()) {\n+                singleValues.add(range.getLow().getValue());\n+            }\n+            else {\n+                List<String> rangeConjuncts = new ArrayList<>();\n+                if (!range.getLow().isLowerUnbounded()) {\n+                    switch (range.getLow().getBound()) {\n+                        case ABOVE:\n+                            rangeConjuncts.add(toPredicate(columnName, \">\", range.getLow().getValue(), column));\n+                            break;\n+                        case EXACTLY:\n+                            rangeConjuncts.add(toPredicate(columnName, \">=\", range.getLow().getValue(), column));\n+                            break;\n+                        case BELOW:\n+                            throw new IllegalArgumentException(\"Low marker should never use BELOW bound\");\n+                        default:\n+                            throw new AssertionError(\"Unhandled bound: \" + range.getLow().getBound());\n+                    }\n+                }\n+                if (!range.getHigh().isUpperUnbounded()) {\n+                    switch (range.getHigh().getBound()) {\n+                        case ABOVE:\n+                            throw new IllegalArgumentException(\"High marker should never use ABOVE bound\");\n+                        case EXACTLY:\n+                            rangeConjuncts.add(toPredicate(columnName, \"<=\", range.getHigh().getValue(), column));\n+                            break;\n+                        case BELOW:\n+                            rangeConjuncts.add(toPredicate(columnName, \"<\", range.getHigh().getValue(), column));\n+                            break;\n+                        default:\n+                            throw new AssertionError(\"Unhandled bound: \" + range.getHigh().getBound());\n+                    }\n+                }\n+                // If rangeConjuncts is null, then the range was ALL, which should already have been checked for\n+                checkState(!rangeConjuncts.isEmpty());\n+                disjuncts.add(\"(\" + Joiner.on(\" AND \").join(rangeConjuncts) + \")\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTk3MzAxOnYy", "diffSide": "RIGHT", "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMTowNDo0MFrOGEJJUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMTowNDo0MFrOGEJJUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5NzMyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .map(value -> column.getBigQueryType().convertToString(value))\n          \n          \n            \n                                .map(column.getBigQueryType()::convertToString)", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r406997329", "createdAt": "2020-04-11T01:04:40Z", "author": {"login": "martint"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.bigquery;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.predicate.Domain;\n+import io.prestosql.spi.predicate.Range;\n+import io.prestosql.spi.predicate.TupleDomain;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONDATE;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONTIME;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.Collectors.toList;\n+\n+class BigQueryFilterQueryBuilder\n+{\n+    private static final String QUOTE = \"`\";\n+    private static final String ESCAPED_QUOTE = \"``\";\n+    private TupleDomain<ColumnHandle> tupleDomain;\n+\n+    BigQueryFilterQueryBuilder(TupleDomain<ColumnHandle> tupleDomain)\n+    {\n+        this.tupleDomain = tupleDomain;\n+    }\n+\n+    Optional<String> buildFilter()\n+    {\n+        Optional<Map<ColumnHandle, Domain>> domains = tupleDomain.getDomains();\n+        return domains.map(this::toConjuncts)\n+                .map(this::concat)\n+                .map(filter -> filter\n+                        .replace(_PARTITIONDATE.getName(), _PARTITIONDATE.getName().toUpperCase())\n+                        .replace(_PARTITIONTIME.getName(), _PARTITIONTIME.getName().toUpperCase()));\n+    }\n+\n+    private String concat(List<String> clauses)\n+    {\n+        return clauses.isEmpty() ? null : clauses.stream().collect(joining(\" AND \"));\n+    }\n+\n+    private List<String> toConjuncts(Map<ColumnHandle, Domain> domains)\n+    {\n+        List<BigQueryColumnHandle> columns = domains.keySet().stream().map(BigQueryColumnHandle.class::cast).collect(toList());\n+        final List<String> conjuncts = toConjuncts(columns);\n+        return conjuncts;\n+    }\n+\n+    private List<String> toConjuncts(List<BigQueryColumnHandle> columns)\n+    {\n+        if (tupleDomain.isNone()) {\n+            return ImmutableList.of(\"FALSE\");\n+        }\n+        ImmutableList.Builder<String> clauses = ImmutableList.builder();\n+        for (BigQueryColumnHandle column : columns) {\n+            Domain domain = tupleDomain.getDomains().get().get(column);\n+            if (domain != null) {\n+                //domain = pushDownDomain(column, domain);\n+                clauses.add(toPredicate(column.getName(), domain, column));\n+            }\n+        }\n+        return clauses.build();\n+    }\n+\n+    private String toPredicate(String columnName, Domain domain, BigQueryColumnHandle column)\n+    {\n+        if (domain.getValues().isNone()) {\n+            return domain.isNullAllowed() ? quote(columnName) + \" IS NULL\" : \"FALSE\";\n+        }\n+\n+        if (domain.getValues().isAll()) {\n+            return domain.isNullAllowed() ? \"TRUE\" : quote(columnName) + \" IS NOT NULL\";\n+        }\n+\n+        List<String> disjuncts = new ArrayList<>();\n+        List<Object> singleValues = new ArrayList<>();\n+        for (Range range : domain.getValues().getRanges().getOrderedRanges()) {\n+            checkState(!range.isAll()); // Already checked\n+            if (range.isSingleValue()) {\n+                singleValues.add(range.getLow().getValue());\n+            }\n+            else {\n+                List<String> rangeConjuncts = new ArrayList<>();\n+                if (!range.getLow().isLowerUnbounded()) {\n+                    switch (range.getLow().getBound()) {\n+                        case ABOVE:\n+                            rangeConjuncts.add(toPredicate(columnName, \">\", range.getLow().getValue(), column));\n+                            break;\n+                        case EXACTLY:\n+                            rangeConjuncts.add(toPredicate(columnName, \">=\", range.getLow().getValue(), column));\n+                            break;\n+                        case BELOW:\n+                            throw new IllegalArgumentException(\"Low marker should never use BELOW bound\");\n+                        default:\n+                            throw new AssertionError(\"Unhandled bound: \" + range.getLow().getBound());\n+                    }\n+                }\n+                if (!range.getHigh().isUpperUnbounded()) {\n+                    switch (range.getHigh().getBound()) {\n+                        case ABOVE:\n+                            throw new IllegalArgumentException(\"High marker should never use ABOVE bound\");\n+                        case EXACTLY:\n+                            rangeConjuncts.add(toPredicate(columnName, \"<=\", range.getHigh().getValue(), column));\n+                            break;\n+                        case BELOW:\n+                            rangeConjuncts.add(toPredicate(columnName, \"<\", range.getHigh().getValue(), column));\n+                            break;\n+                        default:\n+                            throw new AssertionError(\"Unhandled bound: \" + range.getHigh().getBound());\n+                    }\n+                }\n+                // If rangeConjuncts is null, then the range was ALL, which should already have been checked for\n+                checkState(!rangeConjuncts.isEmpty());\n+                disjuncts.add(\"(\" + Joiner.on(\" AND \").join(rangeConjuncts) + \")\");\n+            }\n+        }\n+\n+        // Add back all of the possible single values either as an equality or an IN predicate\n+        if (singleValues.size() == 1) {\n+            disjuncts.add(toPredicate(columnName, \"=\", getOnlyElement(singleValues), column));\n+        }\n+        else if (singleValues.size() > 1) {\n+            String values = singleValues.stream()\n+                    .map(value -> column.getBigQueryType().convertToString(value))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTk3NDUwOnYy", "diffSide": "RIGHT", "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMTowNjozNlrOGEJKFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMTowNjozNlrOGEJKFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5NzUyNA==", "bodyText": "Maybe:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return disjuncts.stream().collect(joining(\" OR \", \"(\", \")\"));\n          \n          \n            \n                    return \"(\" + String.join(\" OR \", disjuncts) + \")\";", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r406997524", "createdAt": "2020-04-11T01:06:36Z", "author": {"login": "martint"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.bigquery;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.predicate.Domain;\n+import io.prestosql.spi.predicate.Range;\n+import io.prestosql.spi.predicate.TupleDomain;\n+import io.prestosql.spi.type.Type;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONDATE;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle._PARTITIONTIME;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.Collectors.toList;\n+\n+class BigQueryFilterQueryBuilder\n+{\n+    private static final String QUOTE = \"`\";\n+    private static final String ESCAPED_QUOTE = \"``\";\n+    private TupleDomain<ColumnHandle> tupleDomain;\n+\n+    BigQueryFilterQueryBuilder(TupleDomain<ColumnHandle> tupleDomain)\n+    {\n+        this.tupleDomain = tupleDomain;\n+    }\n+\n+    Optional<String> buildFilter()\n+    {\n+        Optional<Map<ColumnHandle, Domain>> domains = tupleDomain.getDomains();\n+        return domains.map(this::toConjuncts)\n+                .map(this::concat)\n+                .map(filter -> filter\n+                        .replace(_PARTITIONDATE.getName(), _PARTITIONDATE.getName().toUpperCase())\n+                        .replace(_PARTITIONTIME.getName(), _PARTITIONTIME.getName().toUpperCase()));\n+    }\n+\n+    private String concat(List<String> clauses)\n+    {\n+        return clauses.isEmpty() ? null : clauses.stream().collect(joining(\" AND \"));\n+    }\n+\n+    private List<String> toConjuncts(Map<ColumnHandle, Domain> domains)\n+    {\n+        List<BigQueryColumnHandle> columns = domains.keySet().stream().map(BigQueryColumnHandle.class::cast).collect(toList());\n+        final List<String> conjuncts = toConjuncts(columns);\n+        return conjuncts;\n+    }\n+\n+    private List<String> toConjuncts(List<BigQueryColumnHandle> columns)\n+    {\n+        if (tupleDomain.isNone()) {\n+            return ImmutableList.of(\"FALSE\");\n+        }\n+        ImmutableList.Builder<String> clauses = ImmutableList.builder();\n+        for (BigQueryColumnHandle column : columns) {\n+            Domain domain = tupleDomain.getDomains().get().get(column);\n+            if (domain != null) {\n+                //domain = pushDownDomain(column, domain);\n+                clauses.add(toPredicate(column.getName(), domain, column));\n+            }\n+        }\n+        return clauses.build();\n+    }\n+\n+    private String toPredicate(String columnName, Domain domain, BigQueryColumnHandle column)\n+    {\n+        if (domain.getValues().isNone()) {\n+            return domain.isNullAllowed() ? quote(columnName) + \" IS NULL\" : \"FALSE\";\n+        }\n+\n+        if (domain.getValues().isAll()) {\n+            return domain.isNullAllowed() ? \"TRUE\" : quote(columnName) + \" IS NOT NULL\";\n+        }\n+\n+        List<String> disjuncts = new ArrayList<>();\n+        List<Object> singleValues = new ArrayList<>();\n+        for (Range range : domain.getValues().getRanges().getOrderedRanges()) {\n+            checkState(!range.isAll()); // Already checked\n+            if (range.isSingleValue()) {\n+                singleValues.add(range.getLow().getValue());\n+            }\n+            else {\n+                List<String> rangeConjuncts = new ArrayList<>();\n+                if (!range.getLow().isLowerUnbounded()) {\n+                    switch (range.getLow().getBound()) {\n+                        case ABOVE:\n+                            rangeConjuncts.add(toPredicate(columnName, \">\", range.getLow().getValue(), column));\n+                            break;\n+                        case EXACTLY:\n+                            rangeConjuncts.add(toPredicate(columnName, \">=\", range.getLow().getValue(), column));\n+                            break;\n+                        case BELOW:\n+                            throw new IllegalArgumentException(\"Low marker should never use BELOW bound\");\n+                        default:\n+                            throw new AssertionError(\"Unhandled bound: \" + range.getLow().getBound());\n+                    }\n+                }\n+                if (!range.getHigh().isUpperUnbounded()) {\n+                    switch (range.getHigh().getBound()) {\n+                        case ABOVE:\n+                            throw new IllegalArgumentException(\"High marker should never use ABOVE bound\");\n+                        case EXACTLY:\n+                            rangeConjuncts.add(toPredicate(columnName, \"<=\", range.getHigh().getValue(), column));\n+                            break;\n+                        case BELOW:\n+                            rangeConjuncts.add(toPredicate(columnName, \"<\", range.getHigh().getValue(), column));\n+                            break;\n+                        default:\n+                            throw new AssertionError(\"Unhandled bound: \" + range.getHigh().getBound());\n+                    }\n+                }\n+                // If rangeConjuncts is null, then the range was ALL, which should already have been checked for\n+                checkState(!rangeConjuncts.isEmpty());\n+                disjuncts.add(\"(\" + Joiner.on(\" AND \").join(rangeConjuncts) + \")\");\n+            }\n+        }\n+\n+        // Add back all of the possible single values either as an equality or an IN predicate\n+        if (singleValues.size() == 1) {\n+            disjuncts.add(toPredicate(columnName, \"=\", getOnlyElement(singleValues), column));\n+        }\n+        else if (singleValues.size() > 1) {\n+            String values = singleValues.stream()\n+                    .map(value -> column.getBigQueryType().convertToString(value))\n+                    .collect(joining(\",\"));\n+            disjuncts.add(quote(columnName) + \" IN (\" + values + \")\");\n+        }\n+\n+        // Add nullability disjuncts\n+        checkState(!disjuncts.isEmpty());\n+        if (domain.isNullAllowed()) {\n+            disjuncts.add(quote(columnName) + \" IS NULL\");\n+        }\n+\n+        return disjuncts.stream().collect(joining(\" OR \", \"(\", \")\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTk3NTc1OnYy", "diffSide": "RIGHT", "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMTowODowMlrOGEJKtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMTowODowMlrOGEJKtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5NzY4Ng==", "bodyText": "Remove this", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r406997686", "createdAt": "2020-04-11T01:08:02Z", "author": {"login": "martint"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryMetadata.java", "diffHunk": "@@ -138,6 +146,7 @@ private TableInfo getBigQueryTable(SchemaTableName tableName)\n \n     public ConnectorTableMetadata getTableMetadata(ConnectorSession session, SchemaTableName schemaTableName)\n     {\n+        log.debug(\"getTableMetadata(session=%s, schemaTableName=%s)\", session, schemaTableName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTk3NjU3OnYy", "diffSide": "RIGHT", "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMTowODozOVrOGEJLFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMTowODozOVrOGEJLFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5Nzc4MQ==", "bodyText": "Is this related to filter pushdown? If not, pull it out into a separate commit.", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r406997781", "createdAt": "2020-04-11T01:08:39Z", "author": {"login": "martint"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryMetadata.java", "diffHunk": "@@ -151,24 +160,57 @@ public ConnectorTableMetadata getTableMetadata(ConnectorSession session, Connect\n         log.debug(\"getTableMetadata(session=%s, tableHandle=%s)\", session, tableHandle);\n         TableInfo table = bigQueryClient.getTable(((BigQueryTableHandle) tableHandle).getTableId());\n         SchemaTableName schemaTableName = new SchemaTableName(table.getTableId().getDataset(), table.getTableId().getTable());\n-        Schema schema = table.getDefinition().getSchema();\n-        List<ColumnMetadata> columns = schema == null ?\n-                ImmutableList.of() :\n-                schema.getFields().stream()\n-                        .map(Conversions::toColumnMetadata)\n-                        .collect(toImmutableList());\n-        return new ConnectorTableMetadata(schemaTableName, columns);\n+        List<ColumnMetadata> columns = getTableColumns(table).stream()\n+                .map(BigQueryColumnHandle::getColumnMetadata)\n+                .collect(toList());\n+        ImmutableMap.Builder<String, Object> properties = ImmutableMap.builder();\n+        TableDefinition tableDefinition = table.getDefinition();\n+        if (tableDefinition instanceof StandardTableDefinition) {\n+            StandardTableDefinition standardTableDefinition = (StandardTableDefinition) tableDefinition;\n+            if (standardTableDefinition.getClustering() != null) {\n+                properties.put(\"clustering\", standardTableDefinition.getClustering().getFields());\n+            }\n+            if (standardTableDefinition.getRangePartitioning() != null) {\n+                properties.put(\"range_partitioning\", standardTableDefinition.getRangePartitioning().getField());\n+            }\n+            TimePartitioning timePartitioning = standardTableDefinition.getTimePartitioning();\n+            if (timePartitioning != null) {\n+                if (timePartitioning.getField() != null) {\n+                    properties.put(\"time_partitioning\", timePartitioning.getField());\n+                }\n+                else {\n+                    properties.put(\"time_partitioning\", _PARTITIONTIME.getName());\n+                }\n+            }\n+        }\n+        Optional<String> comment = Optional.ofNullable(table.getDescription());\n+        return new ConnectorTableMetadata(schemaTableName, columns, properties.build(), comment);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTk3OTY2OnYy", "diffSide": "RIGHT", "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/ReadSessionCreator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMToxMjoyMFrOGEJMsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMToxMjoyMFrOGEJMsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5ODE5Mw==", "bodyText": "Formatting:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<String> filteredSelectedFields = selectedFields.stream().filter(BigQueryUtil::validColumnName).collect(toList());\n          \n          \n            \n                    List<String> filteredSelectedFields = selectedFields.stream()\n          \n          \n            \n                            .filter(BigQueryUtil::validColumnName)\n          \n          \n            \n                            .collect(toList());", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r406998193", "createdAt": "2020-04-11T01:12:20Z", "author": {"login": "martint"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/ReadSessionCreator.java", "diffHunk": "@@ -73,9 +75,11 @@ public ReadSessionCreator(\n \n         TableInfo actualTable = getActualTable(tableDetails, selectedFields, new String[] {});\n \n+        List<String> filteredSelectedFields = selectedFields.stream().filter(BigQueryUtil::validColumnName).collect(toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDg1OTM4OnYy", "diffSide": "RIGHT", "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/ReadRowsHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzoxMzozNFrOGFYvQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzoxMzozNFrOGFYvQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMwMTM3Nw==", "bodyText": "Remove commented out code", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r408301377", "createdAt": "2020-04-14T17:13:34Z", "author": {"login": "martint"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/ReadRowsHelper.java", "diffHunk": "@@ -73,4 +49,59 @@ public ReadRowsHelper(BigQueryStorageClient client, ReadRowsRequest.Builder requ\n                 .call(readRowsRequest.build())\n                 .iterator();\n     }\n+\n+    // Ported from https://github.com/GoogleCloudDataproc/spark-bigquery-connector/pull/150\n+    static class ReadRowsIterator\n+            implements Iterator<ReadRowsResponse>\n+    {\n+        ReadRowsHelper helper;\n+        Storage.StreamPosition.Builder readPosition;\n+        Iterator<ReadRowsResponse> serverResponses;\n+        long readRowsCount;\n+        int retries;\n+\n+        public ReadRowsIterator(\n+                ReadRowsHelper helper,\n+                Storage.StreamPosition.Builder readPosition,\n+                Iterator<ReadRowsResponse> serverResponses)\n+        {\n+            this.helper = helper;\n+            this.readPosition = readPosition;\n+            this.serverResponses = serverResponses;\n+        }\n+\n+        @Override\n+        public boolean hasNext()\n+        {\n+            return serverResponses.hasNext();\n+        }\n+\n+        @Override\n+        public ReadRowsResponse next()\n+        {\n+            do {\n+                try {\n+                    ReadRowsResponse response = serverResponses.next();\n+                    readRowsCount += response.getRowCount();\n+                    //logDebug(s\"read ${response.getSerializedSize} bytes\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDg3MzY0OnYy", "diffSide": "RIGHT", "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/ReadRowsHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzoxNzowNlrOGFY38g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzoxNzowNlrOGFY38g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMwMzYwMg==", "bodyText": "This can be private", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r408303602", "createdAt": "2020-04-14T17:17:06Z", "author": {"login": "martint"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/ReadRowsHelper.java", "diffHunk": "@@ -73,4 +49,59 @@ public ReadRowsHelper(BigQueryStorageClient client, ReadRowsRequest.Builder requ\n                 .call(readRowsRequest.build())\n                 .iterator();\n     }\n+\n+    // Ported from https://github.com/GoogleCloudDataproc/spark-bigquery-connector/pull/150\n+    static class ReadRowsIterator", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDg4MTI1OnYy", "diffSide": "RIGHT", "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/ReadRowsHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzoxODo1N1rOGFY8pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzoxODo1N1rOGFY8pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMwNDgwNQ==", "bodyText": "These can be private final", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r408304805", "createdAt": "2020-04-14T17:18:57Z", "author": {"login": "martint"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/ReadRowsHelper.java", "diffHunk": "@@ -73,4 +49,59 @@ public ReadRowsHelper(BigQueryStorageClient client, ReadRowsRequest.Builder requ\n                 .call(readRowsRequest.build())\n                 .iterator();\n     }\n+\n+    // Ported from https://github.com/GoogleCloudDataproc/spark-bigquery-connector/pull/150\n+    static class ReadRowsIterator\n+            implements Iterator<ReadRowsResponse>\n+    {\n+        ReadRowsHelper helper;\n+        Storage.StreamPosition.Builder readPosition;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDg4MTgyOnYy", "diffSide": "RIGHT", "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/ReadRowsHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzoxOTowNVrOGFY8_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzoxOTowNVrOGFY8_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMwNDg5Mw==", "bodyText": "These can be private", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r408304893", "createdAt": "2020-04-14T17:19:05Z", "author": {"login": "martint"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/ReadRowsHelper.java", "diffHunk": "@@ -73,4 +49,59 @@ public ReadRowsHelper(BigQueryStorageClient client, ReadRowsRequest.Builder requ\n                 .call(readRowsRequest.build())\n                 .iterator();\n     }\n+\n+    // Ported from https://github.com/GoogleCloudDataproc/spark-bigquery-connector/pull/150\n+    static class ReadRowsIterator\n+            implements Iterator<ReadRowsResponse>\n+    {\n+        ReadRowsHelper helper;\n+        Storage.StreamPosition.Builder readPosition;\n+        Iterator<ReadRowsResponse> serverResponses;\n+        long readRowsCount;\n+        int retries;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDkzMDEyOnYy", "diffSide": "RIGHT", "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/ReadRowsHelper.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzozMTozMlrOGFZbeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMDo0NTo0MVrOGFl5Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxMjY5OA==", "bodyText": "Change the commit message to \"Improve readRows performance\"\nAlso, explain in the commit message improves performance. I see a refactoring, but I can't figure out what's the difference between the two versions that will improve performance.", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r408312698", "createdAt": "2020-04-14T17:31:32Z", "author": {"login": "martint"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/ReadRowsHelper.java", "diffHunk": "@@ -14,12 +14,12 @@\n package io.prestosql.plugin.bigquery;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUxMzU1NQ==", "bodyText": "@martint This change is a port from the spark connector - instead of reading the entire stream as Avro and them converting it to Presto pages, the read from the server is done in a lazy fashion using the new Iterator. We have seen performance improvement especially when reading part of the data (for example when using LIMIT)", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r408513555", "createdAt": "2020-04-15T00:33:10Z", "author": {"login": "davidrabinowitz"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/ReadRowsHelper.java", "diffHunk": "@@ -14,12 +14,12 @@\n package io.prestosql.plugin.bigquery;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxMjY5OA=="}, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUxNTk5NA==", "bodyText": "Got it. Please add that explanation to the commit message", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r408515994", "createdAt": "2020-04-15T00:42:21Z", "author": {"login": "martint"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/ReadRowsHelper.java", "diffHunk": "@@ -14,12 +14,12 @@\n package io.prestosql.plugin.bigquery;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxMjY5OA=="}, "originalCommit": null, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUxNjg4Nw==", "bodyText": "Just did...", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r408516887", "createdAt": "2020-04-15T00:45:41Z", "author": {"login": "davidrabinowitz"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/ReadRowsHelper.java", "diffHunk": "@@ -14,12 +14,12 @@\n package io.prestosql.plugin.bigquery;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxMjY5OA=="}, "originalCommit": null, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDk0MzE0OnYy", "diffSide": "RIGHT", "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryColumnHandle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzozNDo1NFrOGFZjtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzozNDo1NFrOGFZjtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxNDgwNg==", "bodyText": "Annotate this with @VisibleForTesting", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r408314806", "createdAt": "2020-04-14T17:34:54Z", "author": {"login": "martint"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryColumnHandle.java", "diffHunk": "@@ -33,25 +33,53 @@\n public class BigQueryColumnHandle\n         implements ColumnHandle, BigQueryType.Adaptor\n {\n+    protected static final BigQueryColumnHandle PARTITIONTIME = new BigQueryColumnHandle(\n+            \"_PARTITIONTIME\",\n+            BigQueryType.TIMESTAMP,\n+            Field.Mode.NULLABLE,\n+            ImmutableList.of(),\n+            \"Partition column\",\n+            true);\n+    protected static final BigQueryColumnHandle PARTITIONDATE = new BigQueryColumnHandle(\n+            \"_PARTITIONDATE\",\n+            BigQueryType.DATE,\n+            Field.Mode.NULLABLE,\n+            ImmutableList.of(),\n+            \"Partition column\",\n+            true);\n+\n     private final String name;\n     private final BigQueryType bigQueryType;\n     private final Field.Mode mode;\n     private final List<BigQueryColumnHandle> subColumns;\n     private final String description;\n+    private final boolean hidden;\n \n     @JsonCreator\n     public BigQueryColumnHandle(\n             @JsonProperty(\"name\") String name,\n             @JsonProperty(\"bigQueryType\") BigQueryType bigQueryType,\n             @JsonProperty(\"mode\") Field.Mode mode,\n             @JsonProperty(\"subColumns\") List<BigQueryColumnHandle> subColumns,\n-            @JsonProperty(\"description\") String description)\n+            @JsonProperty(\"description\") String description,\n+            @JsonProperty(\"hidden\") boolean hidden)\n     {\n         this.name = requireNonNull(name, \"column name cannot be null\");\n         this.bigQueryType = requireNonNull(bigQueryType, () -> format(\"column type cannot be null for column [%s]\", name));\n         this.mode = requireNonNull(mode, \"Field mode cannot be null\");\n         this.subColumns = ImmutableList.copyOf(requireNonNull(subColumns, \"subColumns is null\"));\n         this.description = description;\n+        this.hidden = hidden;\n+    }\n+\n+    BigQueryColumnHandle(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDk1NDcyOnYy", "diffSide": "RIGHT", "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzozODoxM1rOGFZrSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzozODoxM1rOGFZrSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxNjc0NA==", "bodyText": "I still don't understand how this is anything other than a no-op in its current form.", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r408316744", "createdAt": "2020-04-14T17:38:13Z", "author": {"login": "martint"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryFilterQueryBuilder.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.bigquery;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.predicate.Domain;\n+import io.prestosql.spi.predicate.Range;\n+import io.prestosql.spi.predicate.TupleDomain;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle.PARTITIONDATE;\n+import static io.prestosql.plugin.bigquery.BigQueryColumnHandle.PARTITIONTIME;\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.Collectors.toList;\n+\n+class BigQueryFilterQueryBuilder\n+{\n+    private static final String QUOTE = \"`\";\n+    private static final String ESCAPED_QUOTE = \"``\";\n+    private final TupleDomain<ColumnHandle> tupleDomain;\n+\n+    public static Optional<String> buildFilter(TupleDomain<ColumnHandle> tupleDomain)\n+    {\n+        return new BigQueryFilterQueryBuilder(tupleDomain).buildFilter();\n+    }\n+\n+    private BigQueryFilterQueryBuilder(TupleDomain<ColumnHandle> tupleDomain)\n+    {\n+        this.tupleDomain = tupleDomain;\n+    }\n+\n+    private Optional<String> buildFilter()\n+    {\n+        Optional<Map<ColumnHandle, Domain>> domains = tupleDomain.getDomains();\n+        return domains.map(this::toConjuncts)\n+                .map(this::concat)\n+                .map(filter -> filter\n+                        .replace(PARTITIONDATE.getName(), PARTITIONDATE.getName())\n+                        .replace(PARTITIONTIME.getName(), PARTITIONTIME.getName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDk1OTA2OnYy", "diffSide": "RIGHT", "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzozOToxM1rOGFZt1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzozOToxM1rOGFZt1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxNzM5OA==", "bodyText": "Don't abbreviate variable name. Rename it to value", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r408317398", "createdAt": "2020-04-14T17:39:13Z", "author": {"login": "martint"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryType.java", "diffHunk": "@@ -133,6 +148,77 @@ static long toPrestoTimestamp(String datetime)\n         return toLocalDateTime(datetime).atZone(systemDefault()).toInstant().toEpochMilli();\n     }\n \n+    static String simpleToStringConverter(Object value)\n+    {\n+        return String.valueOf(value);\n+    }\n+\n+    static String dateToStringConverter(Object value)\n+    {\n+        LocalDate date = LocalDate.ofEpochDay(((Long) value).longValue());\n+        return quote(date.toString());\n+    }\n+\n+    static String datetimeToStringConverter(Object value)\n+    {\n+        return formatTimestamp(((Long) value).longValue(), systemDefault());\n+    }\n+\n+    static String timeToStringConverter(Object value)\n+    {\n+        long longValue = ((Long) value).longValue();\n+        long millisUtc = DateTimeEncoding.unpackMillisUtc(longValue);\n+        ZoneId zoneId = ZoneId.of(DateTimeEncoding.unpackZoneKey(longValue).getId());\n+        LocalTime time = toZonedDateTime(millisUtc, zoneId).toLocalTime();\n+        return quote(time.toString());\n+    }\n+\n+    static String timestampToStringConverter(Object value)\n+    {\n+        long longValue = ((Long) value).longValue();\n+        long millisUtc = DateTimeEncoding.unpackMillisUtc(longValue);\n+        ZoneId zoneId = ZoneId.of(DateTimeEncoding.unpackZoneKey(longValue).getId());\n+        return formatTimestamp(millisUtc, zoneId);\n+    }\n+\n+    private static String formatTimestamp(long millisUtc, ZoneId zoneId)\n+    {\n+        return DATETIME_FORMATTER.format(toZonedDateTime(millisUtc, zoneId));\n+    }\n+\n+    private static ZonedDateTime toZonedDateTime(long millisUtc, ZoneId zoneId)\n+    {\n+        return ZonedDateTime.ofInstant(Instant.ofEpochMilli(millisUtc), zoneId);\n+    }\n+\n+    static String stringToStringConverter(Object value)\n+    {\n+        Slice slice = (Slice) value;\n+        return quote(new String(slice.getBytes(), UTF_8));\n+    }\n+\n+    static String numericToStringConverter(Object value)\n+    {\n+        Slice slice = (Slice) value;\n+        return Decimals.toString(slice, NUMERIC_DATA_TYPE_SCALE);\n+    }\n+\n+    static String bytesToStringConverter(Object value)\n+    {\n+        Slice slice = (Slice) value;\n+        return format(\"FROM_BASE64('%s')\", Base64.getEncoder().encodeToString(slice.getBytes()));\n+    }\n+\n+    private static String quote(String s)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDk2MzYzOnYy", "diffSide": "RIGHT", "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzo0MDoyM1rOGFZwhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzo0MDoyM1rOGFZwhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxODA4NQ==", "bodyText": "This is not used", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r408318085", "createdAt": "2020-04-14T17:40:23Z", "author": {"login": "martint"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryUtil.java", "diffHunk": "@@ -51,4 +56,14 @@ static BigQueryException convertToBigQueryException(BigQueryError error)\n     {\n         return new BigQueryException(UNKNOWN_CODE, error.getMessage(), error);\n     }\n+\n+    static <T> Function<T, T> identity()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDk2Njg4OnYy", "diffSide": "RIGHT", "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzo0MToxNlrOGFZykw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzo0MToxNlrOGFZykw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxODYxMQ==", "bodyText": "Make it private. Also, use Set as the declared type.", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r408318611", "createdAt": "2020-04-14T17:41:16Z", "author": {"login": "martint"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryUtil.java", "diffHunk": "@@ -29,6 +31,9 @@\n             \"Connection closed with unknown cause\",\n             \"Received unexpected EOS on DATA frame from server\");\n \n+    static final ImmutableSet<String> INVALID_COLUMN_NAMES = ImmutableSet.<String>builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDk2OTEzOnYy", "diffSide": "RIGHT", "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzo0MTo0NVrOGFZz-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzo0MTo0NVrOGFZz-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxODk3MQ==", "bodyText": "public", "url": "https://github.com/trinodb/trino/pull/3376#discussion_r408318971", "createdAt": "2020-04-14T17:41:45Z", "author": {"login": "martint"}, "path": "presto-bigquery/src/main/java/io/prestosql/plugin/bigquery/BigQueryUtil.java", "diffHunk": "@@ -51,4 +56,14 @@ static BigQueryException convertToBigQueryException(BigQueryError error)\n     {\n         return new BigQueryException(UNKNOWN_CODE, error.getMessage(), error);\n     }\n+\n+    static <T> Function<T, T> identity()\n+    {\n+        return t -> t;\n+    }\n+\n+    static boolean validColumnName(String columnName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 370, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}