{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NDQ0NDc3", "number": 2933, "title": "Support partition schema evolution for ORC and Parquet", "bodyText": "", "createdAt": "2020-02-25T08:52:20Z", "url": "https://github.com/trinodb/trino/pull/2933", "merged": true, "mergeCommit": {"oid": "a93b3b849a4af803e932000d4bfff0dc9691a0c9"}, "closed": true, "closedAt": "2020-03-26T08:58:49Z", "author": {"login": "kokosing"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcO_dhMgFqTM2NTM2NzU1OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRYQmhgBqjMxNjcyNzIzMjM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MzY3NTU4", "url": "https://github.com/trinodb/trino/pull/2933#pullrequestreview-365367558", "createdAt": "2020-02-27T01:52:45Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMTo1Mjo0NVrOFvCusw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxOToxNjo0NFrOFwPreg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg3MjExNQ==", "bodyText": "Let's make these boolean and call this partition_use_column_names which matches orc_use_column_names and parquet_use_column_names.", "url": "https://github.com/trinodb/trino/pull/2933#discussion_r384872115", "createdAt": "2020-02-27T01:52:45Z", "author": {"login": "dain"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveSessionProperties.java", "diffHunk": "@@ -66,6 +66,7 @@\n     private static final String ORC_USE_COLUMN_NAME = \"orc_use_column_names\";\n     private static final String HIVE_STORAGE_FORMAT = \"hive_storage_format\";\n     private static final String COMPRESSION_CODEC = \"compression_codec\";\n+    private static final String PARTITION_SCHEMA_EVOLUTION = \"partition_schema_evolution\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5MTE5Mg==", "bodyText": "I don't think we need equals and hashCode.  The only use I see is in a test, which can just test on getColumnCoercions", "url": "https://github.com/trinodb/trino/pull/2933#discussion_r384891192", "createdAt": "2020-02-27T03:08:44Z", "author": {"login": "dain"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/TableToPartitionMapping.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableMap;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static io.airlift.slice.SizeOf.sizeOfObjectArray;\n+import static java.util.Objects.requireNonNull;\n+\n+public class TableToPartitionMapping\n+{\n+    public static TableToPartitionMapping empty()\n+    {\n+        return new TableToPartitionMapping(ImmutableMap.of());\n+    }\n+\n+    // Overhead of ImmutableMap is not accounted because of its complexity.\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(TableToPartitionMapping.class).instanceSize();\n+    private static final int INTEGER_INSTANCE_SIZE = ClassLayout.parseClass(Integer.class).instanceSize();\n+\n+    private final Map<Integer, HiveTypeName> columnCoercions;\n+\n+    @JsonCreator\n+    public TableToPartitionMapping(\n+            @JsonProperty(\"columnCoercions\") Map<Integer, HiveTypeName> columnCoercions)\n+    {\n+        this.columnCoercions = ImmutableMap.copyOf(requireNonNull(columnCoercions, \"columnCoercions is null\"));\n+    }\n+\n+    @JsonProperty\n+    public Map<Integer, HiveTypeName> getColumnCoercions()\n+    {\n+        return columnCoercions;\n+    }\n+\n+    public Optional<HiveType> getCoercion(int columnIndex)\n+    {\n+        return Optional.ofNullable(columnCoercions.get(columnIndex))\n+                .map(HiveTypeName::toHiveType);\n+    }\n+\n+    public int getEstimatedSizeInBytes()\n+    {\n+        int result = INSTANCE_SIZE;\n+        result += sizeOfObjectArray(columnCoercions.size());\n+        for (HiveTypeName hiveTypeName : columnCoercions.values()) {\n+            result += INTEGER_INSTANCE_SIZE + hiveTypeName.getEstimatedSizeInBytes();\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzMTcwMA==", "bodyText": "Maybe parquet_use_column_names must be set when is set partition_use_column_names", "url": "https://github.com/trinodb/trino/pull/2933#discussion_r386131700", "createdAt": "2020-03-01T18:59:53Z", "author": {"login": "dain"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveSessionProperties.java", "diffHunk": "@@ -481,7 +493,21 @@ public static boolean isCreateEmptyBucketFiles(ConnectorSession session)\n \n     public static boolean isUseParquetColumnNames(ConnectorSession session)\n     {\n-        return session.getProperty(PARQUET_USE_COLUMN_NAME, Boolean.class);\n+        boolean useParquetColumnNames = session.getProperty(PARQUET_USE_COLUMN_NAME, Boolean.class);\n+        PartitionSchemaEvolution partitionSchemaEvolution = getPartitionSchemaEvolution(session);\n+        switch (partitionSchemaEvolution) {\n+            case BY_NAME:\n+                if (!useParquetColumnNames) {\n+                    throw new PrestoException(\n+                            INVALID_SESSION_PROPERTY,\n+                            format(\"Require %s=true when %s=%s\", PARQUET_USE_COLUMN_NAME, PARTITION_SCHEMA_EVOLUTION, partitionSchemaEvolution));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzMTkyMg==", "bodyText": "If not to difficult, I would split this into two commits: \"Add table to partition schema evolution by name\" and then the parquet part separately.", "url": "https://github.com/trinodb/trino/pull/2933#discussion_r386131922", "createdAt": "2020-03-01T19:02:50Z", "author": {"login": "dain"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveSplitManager.java", "diffHunk": "@@ -360,30 +365,71 @@ public CounterStat getHighMemorySplitSource()\n         return concat(partitionBatches);\n     }\n \n-    private TableToPartitionMapping getTableToPartitionMapping(SchemaTableName tableName, String partName, List<Column> tableColumns, List<Column> partitionColumns)\n+    private TableToPartitionMapping getTableToPartitionMapping(ConnectorSession session, SchemaTableName tableName, String partName, List<Column> tableColumns, List<Column> partitionColumns)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzMTk1Ng==", "bodyText": "Static import", "url": "https://github.com/trinodb/trino/pull/2933#discussion_r386131956", "createdAt": "2020-03-01T19:03:16Z", "author": {"login": "dain"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveSplitManager.java", "diffHunk": "@@ -360,30 +365,71 @@ public CounterStat getHighMemorySplitSource()\n         return concat(partitionBatches);\n     }\n \n-    private TableToPartitionMapping getTableToPartitionMapping(SchemaTableName tableName, String partName, List<Column> tableColumns, List<Column> partitionColumns)\n+    private TableToPartitionMapping getTableToPartitionMapping(ConnectorSession session, SchemaTableName tableName, String partName, List<Column> tableColumns, List<Column> partitionColumns)\n     {\n+        PartitionSchemaEvolution partitionSchemaEvolution = getPartitionSchemaEvolution(session);\n+        if (partitionSchemaEvolution == BY_NAME) {\n+            return getTableToPartitionMappingByColumnNames(tableName, partName, tableColumns, partitionColumns);\n+        }\n+        checkState(partitionSchemaEvolution == BY_INDEX, \"Unsupported partition schema evolution: %s\", partitionSchemaEvolution);\n         ImmutableMap.Builder<Integer, HiveTypeName> columnCoercions = ImmutableMap.builder();\n         for (int i = 0; i < min(partitionColumns.size(), tableColumns.size()); i++) {\n             HiveType tableType = tableColumns.get(i).getType();\n             HiveType partitionType = partitionColumns.get(i).getType();\n             if (!tableType.equals(partitionType)) {\n                 if (!coercionPolicy.canCoerce(partitionType, tableType)) {\n-                    throw new PrestoException(HIVE_PARTITION_SCHEMA_MISMATCH, format(\"\" +\n-                                    \"There is a mismatch between the table and partition schemas. \" +\n-                                    \"The types are incompatible and cannot be coerced. \" +\n-                                    \"The column '%s' in table '%s' is declared as type '%s', \" +\n-                                    \"but partition '%s' declared column '%s' as type '%s'.\",\n-                            tableColumns.get(i).getName(),\n-                            tableName,\n-                            tableType,\n-                            partName,\n-                            partitionColumns.get(i).getName(),\n-                            partitionType));\n+                    throw tablePartitionColumnMismatchException(tableName, partName, tableColumns.get(i).getName(), tableType, partitionColumns.get(i).getName(), partitionType);\n                 }\n                 columnCoercions.put(i, partitionType.getHiveTypeName());\n             }\n         }\n-        return new TableToPartitionMapping(columnCoercions.build());\n+        return TableToPartitionMapping.mapColumnsByIndex(columnCoercions.build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzMjg1OA==", "bodyText": "This would be easier to read as a builder.", "url": "https://github.com/trinodb/trino/pull/2933#discussion_r386132858", "createdAt": "2020-03-01T19:16:44Z", "author": {"login": "dain"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestTableToPartitionMapping.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.plugin.hive.TableToPartitionMapping.isOneToOneMapping;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestTableToPartitionMapping\n+{\n+    @Test\n+    public void testIsOneToOneMapping()\n+    {\n+        assertTrue(isOneToOneMapping(ImmutableMap.of(0, 0, 1, 1, 2, 2, 3, 3)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3ODE4OTU3", "url": "https://github.com/trinodb/trino/pull/2933#pullrequestreview-377818957", "createdAt": "2020-03-19T15:14:59Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNToxNDo1OVrOF4zNjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNToxNDo1OVrOF4zNjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEwMzYyOQ==", "bodyText": "I would leave it as it is. It is quite simple code.", "url": "https://github.com/trinodb/trino/pull/2933#discussion_r395103629", "createdAt": "2020-03-19T15:14:59Z", "author": {"login": "kokosing"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveSplitManager.java", "diffHunk": "@@ -360,30 +365,71 @@ public CounterStat getHighMemorySplitSource()\n         return concat(partitionBatches);\n     }\n \n-    private TableToPartitionMapping getTableToPartitionMapping(SchemaTableName tableName, String partName, List<Column> tableColumns, List<Column> partitionColumns)\n+    private TableToPartitionMapping getTableToPartitionMapping(ConnectorSession session, SchemaTableName tableName, String partName, List<Column> tableColumns, List<Column> partitionColumns)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzMTkyMg=="}, "originalCommit": null, "originalPosition": 41}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MDAyMjU1", "url": "https://github.com/trinodb/trino/pull/2933#pullrequestreview-374002255", "createdAt": "2020-03-13T01:55:39Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMTo1NTozOVrOF11PXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjoxMzoxNVrOF5CLng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk5MTEzNA==", "bodyText": "may be isIdentityMapping is more descriptive?", "url": "https://github.com/trinodb/trino/pull/2933#discussion_r391991134", "createdAt": "2020-03-13T01:55:39Z", "author": {"login": "phd3"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/TableToPartitionMapping.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableMap;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static io.airlift.slice.SizeOf.sizeOfObjectArray;\n+import static java.util.Objects.requireNonNull;\n+\n+public class TableToPartitionMapping\n+{\n+    public static TableToPartitionMapping empty()\n+    {\n+        return new TableToPartitionMapping(Optional.empty(), ImmutableMap.of());\n+    }\n+\n+    public static TableToPartitionMapping mapColumnsByIndex(Map<Integer, HiveTypeName> columnCoercions)\n+    {\n+        return new TableToPartitionMapping(Optional.empty(), columnCoercions);\n+    }\n+\n+    // Overhead of ImmutableMap is not accounted because of its complexity.\n+    private static final int INSTANCE_SIZE = ClassLayout.parseClass(TableToPartitionMapping.class).instanceSize();\n+    private static final int INTEGER_INSTANCE_SIZE = ClassLayout.parseClass(Integer.class).instanceSize();\n+    private static final int OPTIONAL_INSTANCE_SIZE = ClassLayout.parseClass(Optional.class).instanceSize();\n+\n+    private final Optional<Map<Integer, Integer>> tableToPartitionColumns;\n+    private final Map<Integer, HiveTypeName> partitionColumnCoercions;\n+\n+    @JsonCreator\n+    public TableToPartitionMapping(\n+            @JsonProperty(\"tableToPartitionColumns\") Optional<Map<Integer, Integer>> tableToPartitionColumns,\n+            @JsonProperty(\"partitionColumnCoercions\") Map<Integer, HiveTypeName> partitionColumnCoercions)\n+    {\n+        if (tableToPartitionColumns.map(TableToPartitionMapping::isOneToOneMapping).orElse(true)) {\n+            this.tableToPartitionColumns = Optional.empty();\n+        }\n+        else {\n+            this.tableToPartitionColumns = requireNonNull(tableToPartitionColumns, \"tableToPartitionColumns is null\")\n+                    .map(ImmutableMap::copyOf);\n+        }\n+        this.partitionColumnCoercions = ImmutableMap.copyOf(requireNonNull(partitionColumnCoercions, \"partitionColumnCoercions is null\"));\n+    }\n+\n+    @VisibleForTesting\n+    static boolean isOneToOneMapping(Map<Integer, Integer> map)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0ODYyMg==", "bodyText": "redundant comment", "url": "https://github.com/trinodb/trino/pull/2933#discussion_r395348622", "createdAt": "2020-03-19T22:12:43Z", "author": {"login": "phd3"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHivePartitionSchemaEvolution.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import io.airlift.log.Logger;\n+import io.prestosql.tempto.BeforeTestWithContext;\n+import io.prestosql.tempto.assertions.QueryAssert;\n+import io.prestosql.tempto.query.QueryExecutionException;\n+import io.prestosql.tests.hive.util.TemporaryHiveTable;\n+import org.testng.annotations.Test;\n+\n+import java.sql.SQLException;\n+import java.util.function.Supplier;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tests.hive.util.TemporaryHiveTable.randomTableSuffix;\n+import static io.prestosql.tests.hive.util.TemporaryHiveTable.temporaryHiveTable;\n+import static io.prestosql.tests.utils.JdbcDriverUtils.setSessionProperty;\n+import static io.prestosql.tests.utils.QueryExecutors.onHive;\n+import static io.prestosql.tests.utils.QueryExecutors.onPresto;\n+import static java.lang.String.format;\n+\n+public class TestHivePartitionSchemaEvolution\n+        extends HiveProductTest\n+{\n+    private static final Logger log = Logger.get(TestHivePartitionSchemaEvolution.class);\n+\n+    @BeforeTestWithContext\n+    public void useColumnMappingByName()\n+            throws SQLException\n+    {\n+        setSessionProperty(onPresto().getConnection(), \"hive.parquet_use_column_names\", \"true\");\n+        setSessionProperty(onPresto().getConnection(), \"hive.orc_use_column_names\", \"true\");\n+        setSessionProperty(onPresto().getConnection(), \"hive.partition_schema_evolution\", \"BY_NAME\");\n+    }\n+\n+    @Test\n+    public void testParquet()\n+    {\n+        test(() -> createTable(\"PARQUET\"));\n+    }\n+\n+    @Test\n+    public void testOrc()\n+    {\n+        test(() -> createTable(\"ORC\"));\n+    }\n+\n+    private void test(Supplier<TemporaryHiveTable> temporaryHiveTableSupplier)\n+    {\n+        try (TemporaryHiveTable table = temporaryHiveTableSupplier.get()) {\n+            // dropping column on table, simulates creating a column on partition\n+            // adding column on table, simulates dropping a column on partition\n+\n+            // partition is adding a column at the start\n+            testEvolution(table, \"ALTER TABLE %s REPLACE COLUMNS (float_column float, varchar_column varchar(20))\", row(1.1, \"jeden\", 1));\n+\n+            // partition is adding a column in the middle\n+            testEvolution(table, \"ALTER TABLE %s REPLACE COLUMNS (int_column int, varchar_column varchar(20))\", row(1, \"jeden\", 1));\n+\n+            // partition is adding a column at the end\n+            testEvolution(table, \"ALTER TABLE %s REPLACE COLUMNS (int_column int, float_column float)\", row(1, 1.1, 1));\n+\n+            // partition is dropping a column at the start\n+            testEvolution(table, \"ALTER TABLE %s REPLACE COLUMNS (tiny_column tinyint, int_column int, float_column float, varchar_column varchar(20))\", row(null, 1, 1.1, \"jeden\", 1));\n+\n+            // partition is dropping a column in the middle\n+            testEvolution(table, \"ALTER TABLE %s REPLACE COLUMNS (int_column int, tiny_column tinyint, float_column float, varchar_column varchar(20))\", row(1, null, 1.1, \"jeden\", 1));\n+\n+            // partition is dropping a column at the end\n+            testEvolution(table, \"ALTER TABLE %s REPLACE COLUMNS (int_column int, float_column float, varchar_column varchar(20), tiny_column tinyint)\", row(1, 1.1, \"jeden\", null, 1));\n+\n+            // partition is dropping a column at the start", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0ODg5NA==", "bodyText": "use format instead of parquet for tableName", "url": "https://github.com/trinodb/trino/pull/2933#discussion_r395348894", "createdAt": "2020-03-19T22:13:15Z", "author": {"login": "phd3"}, "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHivePartitionSchemaEvolution.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import io.airlift.log.Logger;\n+import io.prestosql.tempto.BeforeTestWithContext;\n+import io.prestosql.tempto.assertions.QueryAssert;\n+import io.prestosql.tempto.query.QueryExecutionException;\n+import io.prestosql.tests.hive.util.TemporaryHiveTable;\n+import org.testng.annotations.Test;\n+\n+import java.sql.SQLException;\n+import java.util.function.Supplier;\n+\n+import static io.prestosql.tempto.assertions.QueryAssert.Row.row;\n+import static io.prestosql.tempto.assertions.QueryAssert.assertThat;\n+import static io.prestosql.tests.hive.util.TemporaryHiveTable.randomTableSuffix;\n+import static io.prestosql.tests.hive.util.TemporaryHiveTable.temporaryHiveTable;\n+import static io.prestosql.tests.utils.JdbcDriverUtils.setSessionProperty;\n+import static io.prestosql.tests.utils.QueryExecutors.onHive;\n+import static io.prestosql.tests.utils.QueryExecutors.onPresto;\n+import static java.lang.String.format;\n+\n+public class TestHivePartitionSchemaEvolution\n+        extends HiveProductTest\n+{\n+    private static final Logger log = Logger.get(TestHivePartitionSchemaEvolution.class);\n+\n+    @BeforeTestWithContext\n+    public void useColumnMappingByName()\n+            throws SQLException\n+    {\n+        setSessionProperty(onPresto().getConnection(), \"hive.parquet_use_column_names\", \"true\");\n+        setSessionProperty(onPresto().getConnection(), \"hive.orc_use_column_names\", \"true\");\n+        setSessionProperty(onPresto().getConnection(), \"hive.partition_schema_evolution\", \"BY_NAME\");\n+    }\n+\n+    @Test\n+    public void testParquet()\n+    {\n+        test(() -> createTable(\"PARQUET\"));\n+    }\n+\n+    @Test\n+    public void testOrc()\n+    {\n+        test(() -> createTable(\"ORC\"));\n+    }\n+\n+    private void test(Supplier<TemporaryHiveTable> temporaryHiveTableSupplier)\n+    {\n+        try (TemporaryHiveTable table = temporaryHiveTableSupplier.get()) {\n+            // dropping column on table, simulates creating a column on partition\n+            // adding column on table, simulates dropping a column on partition\n+\n+            // partition is adding a column at the start\n+            testEvolution(table, \"ALTER TABLE %s REPLACE COLUMNS (float_column float, varchar_column varchar(20))\", row(1.1, \"jeden\", 1));\n+\n+            // partition is adding a column in the middle\n+            testEvolution(table, \"ALTER TABLE %s REPLACE COLUMNS (int_column int, varchar_column varchar(20))\", row(1, \"jeden\", 1));\n+\n+            // partition is adding a column at the end\n+            testEvolution(table, \"ALTER TABLE %s REPLACE COLUMNS (int_column int, float_column float)\", row(1, 1.1, 1));\n+\n+            // partition is dropping a column at the start\n+            testEvolution(table, \"ALTER TABLE %s REPLACE COLUMNS (tiny_column tinyint, int_column int, float_column float, varchar_column varchar(20))\", row(null, 1, 1.1, \"jeden\", 1));\n+\n+            // partition is dropping a column in the middle\n+            testEvolution(table, \"ALTER TABLE %s REPLACE COLUMNS (int_column int, tiny_column tinyint, float_column float, varchar_column varchar(20))\", row(1, null, 1.1, \"jeden\", 1));\n+\n+            // partition is dropping a column at the end\n+            testEvolution(table, \"ALTER TABLE %s REPLACE COLUMNS (int_column int, float_column float, varchar_column varchar(20), tiny_column tinyint)\", row(1, 1.1, \"jeden\", null, 1));\n+\n+            // partition is dropping a column at the start\n+            // partition is dropping and adding column in the middle\n+            testEvolution(table, \"ALTER TABLE %s REPLACE COLUMNS (int_column int, tiny_column tinyint, varchar_column varchar(20))\", row(1, null, \"jeden\", 1));\n+\n+            // partition is adding coercions\n+            testEvolution(table, \"ALTER TABLE %s REPLACE COLUMNS (int_column bigint, float_column double, varchar_column varchar(20))\", row(1, 1.1, \"jeden\", 1));\n+\n+            // partition is swapping columns with coercions\n+            testEvolution(table, \"ALTER TABLE %s REPLACE COLUMNS (varchar_column varchar(20), float_column double, int_column bigint)\", row(\"jeden\", 1.1, 1, 1));\n+\n+            // partition is swapping columns and partition with coercions and is adding a column\n+            testEvolution(table, \"ALTER TABLE %s REPLACE COLUMNS (float_column double, int_column bigint)\", row(1.1, 1, 1));\n+\n+            // partition is swapping columns and partition with coercions and is removing a column\n+            testEvolution(table, \"ALTER TABLE %s REPLACE COLUMNS (varchar_column varchar(20), tiny_column tinyint, float_column double, int_column bigint)\", row(\"jeden\", null, 1.1, 1, 1));\n+        }\n+    }\n+\n+    private void testEvolution(TemporaryHiveTable table, String sql, QueryAssert.Row row)\n+    {\n+        if (tryExecuteOnHive(format(sql, table.getName()))) {\n+            assertThat(onPresto().executeQuery(\"SELECT * FROM \" + table.getName()))\n+                    .contains(row);\n+        }\n+    }\n+\n+    private static boolean tryExecuteOnHive(String sql)\n+    {\n+        try {\n+            onHive().executeQuery(sql);\n+            return true;\n+        }\n+        catch (QueryExecutionException e) {\n+            String message = e.getMessage();\n+            if (message.contains(\"Unable to alter table. The following columns have types incompatible with the existing columns in their respective positions\")\n+                    || message.contains(\"Replacing columns cannot drop columns\")\n+                    || message.contains(\"Replace columns is not supported for\")) {\n+                log.warn(\"Unable to execute: %s, due: %s\", sql, message);\n+                return false;\n+            }\n+            throw e;\n+        }\n+    }\n+\n+    private static TemporaryHiveTable createTable(String format)\n+    {\n+        String tableName = \"parquet_schema_evolution_\" + randomTableSuffix();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 131}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5OTIwNDUz", "url": "https://github.com/trinodb/trino/pull/2933#pullrequestreview-379920453", "createdAt": "2020-03-24T00:20:31Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "d30260f88ddfc381624daa3c5c4d0efdf306d744", "author": {"user": {"login": "kokosing", "name": "Grzegorz Kokosi\u0144ski"}}, "url": "https://github.com/trinodb/trino/commit/d30260f88ddfc381624daa3c5c4d0efdf306d744", "committedDate": "2020-03-26T08:55:52Z", "message": "Introduce TableToPartitionMapping"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5790ed02c008d0e5ce18b21bb71f216fb44b8f3d", "author": {"user": {"login": "kokosing", "name": "Grzegorz Kokosi\u0144ski"}}, "url": "https://github.com/trinodb/trino/commit/5790ed02c008d0e5ce18b21bb71f216fb44b8f3d", "committedDate": "2020-03-26T08:55:52Z", "message": "Extract getTableToPartitionMapping method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "385d826b15c005d3b16a9070eb342860aee86161", "author": {"user": {"login": "kokosing", "name": "Grzegorz Kokosi\u0144ski"}}, "url": "https://github.com/trinodb/trino/commit/385d826b15c005d3b16a9070eb342860aee86161", "committedDate": "2020-03-26T08:55:52Z", "message": "Support schema evolution in partition schema for Parquet"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a93b3b849a4af803e932000d4bfff0dc9691a0c9", "author": {"user": {"login": "kokosing", "name": "Grzegorz Kokosi\u0144ski"}}, "url": "https://github.com/trinodb/trino/commit/a93b3b849a4af803e932000d4bfff0dc9691a0c9", "committedDate": "2020-03-26T08:55:52Z", "message": "Support partition schema evolution for ORC"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "a93b3b849a4af803e932000d4bfff0dc9691a0c9", "author": {"user": {"login": "kokosing", "name": "Grzegorz Kokosi\u0144ski"}}, "url": "https://github.com/trinodb/trino/commit/a93b3b849a4af803e932000d4bfff0dc9691a0c9", "committedDate": "2020-03-26T08:55:52Z", "message": "Support partition schema evolution for ORC"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1608, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}