{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2ODY0Mzcx", "number": 6475, "title": "Allow JDBC connectors to control aggregation pushdown for individual tables", "bodyText": "This change allows implementations of JdbcClient to control aggregation pushdown per-table.", "createdAt": "2020-12-30T09:11:57Z", "url": "https://github.com/trinodb/trino/pull/6475", "merged": true, "mergeCommit": {"oid": "216180031bc630cdbcba4522cce8ffae7eda5e31"}, "closed": true, "closedAt": "2021-01-05T15:54:49Z", "author": {"login": "hashhar"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdrMn2bAFqTU1OTk4ODE2NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABds27XOgBqjQxNjUxMjgwOTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5OTg4MTY0", "url": "https://github.com/trinodb/trino/pull/6475#pullrequestreview-559988164", "createdAt": "2020-12-30T10:17:55Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMDoxNzo1NVrOIMoUSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMDoxNzo1NVrOIMoUSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDExNDM3OA==", "bodyText": "nit\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ConnectorTableHandle baseTableHandle = metadata.getTableHandle(session, new SchemaTableName(\"example\", \"numbers\"));\n          \n          \n            \n                    Optional<AggregationApplicationResult<ConnectorTableHandle>> aggResult = metadata.applyAggregation(\n          \n          \n            \n                            session,\n          \n          \n            \n                            baseTableHandle,\n          \n          \n            \n                            ImmutableList.of(new AggregateFunction(\"count\", BIGINT, List.of(), List.of(), false, Optional.empty())),\n          \n          \n            \n                            ImmutableMap.of(),\n          \n          \n            \n                            ImmutableList.of(ImmutableList.of(groupByColumn)));\n          \n          \n            \n                    assertThat(aggResult).isPresent();\n          \n          \n            \n            \n          \n          \n            \n                    SchemaTableName noAggregationPushdownTable = new SchemaTableName(\"example\", \"no_aggregation_pushdown\");\n          \n          \n            \n                    metadata.createTable(SESSION, new ConnectorTableMetadata(noAggregationPushdownTable, ImmutableList.of(new ColumnMetadata(\"text\", VARCHAR))), false);\n          \n          \n            \n                    ConnectorTableHandle noAggregationPushdownTableHandle = metadata.getTableHandle(session, noAggregationPushdownTable);\n          \n          \n            \n                    aggResult = metadata.applyAggregation(\n          \n          \n            \n                            session,\n          \n          \n            \n                            noAggregationPushdownTableHandle,\n          \n          \n            \n                            ImmutableList.of(new AggregateFunction(\"count\", BIGINT, List.of(), List.of(), false, Optional.empty())),\n          \n          \n            \n                            ImmutableMap.of(),\n          \n          \n            \n                            ImmutableList.of(ImmutableList.of(groupByColumn)));\n          \n          \n            \n                    assertThat(aggResult).isEmpty();\n          \n          \n            \n                    Function<ConnectorTableHandle, Optional<AggregationApplicationResult<ConnectorTableHandle>>> applyAggregation = handle -> metadata.applyAggregation(\n          \n          \n            \n                            session,\n          \n          \n            \n                            handle,\n          \n          \n            \n                            ImmutableList.of(new AggregateFunction(\"count\", BIGINT, List.of(), List.of(), false, Optional.empty())),\n          \n          \n            \n                            ImmutableMap.of(),\n          \n          \n            \n                            ImmutableList.of(ImmutableList.of(groupByColumn)))\n          \n          \n            \n            \n          \n          \n            \n                    ConnectorTableHandle baseTableHandle = metadata.getTableHandle(session, new SchemaTableName(\"example\", \"numbers\"));\n          \n          \n            \n                    Optional<AggregationApplicationResult<ConnectorTableHandle>> aggResult = applyAggregation.apply(baseTableHandle);\n          \n          \n            \n                    assertThat(aggResult).isPresent();\n          \n          \n            \n            \n          \n          \n            \n                    SchemaTableName noAggregationPushdownTable = new SchemaTableName(\"example\", \"no_aggregation_pushdown\");\n          \n          \n            \n                    metadata.createTable(SESSION, new ConnectorTableMetadata(noAggregationPushdownTable, ImmutableList.of(new ColumnMetadata(\"text\", VARCHAR))), false);\n          \n          \n            \n                    ConnectorTableHandle noAggregationPushdownTableHandle = metadata.getTableHandle(session, noAggregationPushdownTable);\n          \n          \n            \n                    aggResult = applyAggregation.apply(noAggregationPushdownTableHandle);\n          \n          \n            \n                    assertThat(aggResult).isEmpty();", "url": "https://github.com/trinodb/trino/pull/6475#discussion_r550114378", "createdAt": "2020-12-30T10:17:55Z", "author": {"login": "losipiuk"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestJdbcMetadata.java", "diffHunk": "@@ -247,6 +247,35 @@ public void testDropTableTable()\n         }\n     }\n \n+    @Test\n+    public void testAggregationPushdownForTableHandle()\n+    {\n+        ConnectorSession session = TestingConnectorSession.builder()\n+                .setPropertyMetadata(new JdbcMetadataSessionProperties(new JdbcMetadataConfig().setAggregationPushdownEnabled(true), Optional.empty()).getSessionProperties())\n+                .build();\n+        ColumnHandle groupByColumn = metadata.getColumnHandles(session, tableHandle).get(\"text\");\n+\n+        ConnectorTableHandle baseTableHandle = metadata.getTableHandle(session, new SchemaTableName(\"example\", \"numbers\"));\n+        Optional<AggregationApplicationResult<ConnectorTableHandle>> aggResult = metadata.applyAggregation(\n+                session,\n+                baseTableHandle,\n+                ImmutableList.of(new AggregateFunction(\"count\", BIGINT, List.of(), List.of(), false, Optional.empty())),\n+                ImmutableMap.of(),\n+                ImmutableList.of(ImmutableList.of(groupByColumn)));\n+        assertThat(aggResult).isPresent();\n+\n+        SchemaTableName noAggregationPushdownTable = new SchemaTableName(\"example\", \"no_aggregation_pushdown\");\n+        metadata.createTable(SESSION, new ConnectorTableMetadata(noAggregationPushdownTable, ImmutableList.of(new ColumnMetadata(\"text\", VARCHAR))), false);\n+        ConnectorTableHandle noAggregationPushdownTableHandle = metadata.getTableHandle(session, noAggregationPushdownTable);\n+        aggResult = metadata.applyAggregation(\n+                session,\n+                noAggregationPushdownTableHandle,\n+                ImmutableList.of(new AggregateFunction(\"count\", BIGINT, List.of(), List.of(), false, Optional.empty())),\n+                ImmutableMap.of(),\n+                ImmutableList.of(ImmutableList.of(groupByColumn)));\n+        assertThat(aggResult).isEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwMDUxMjQ4", "url": "https://github.com/trinodb/trino/pull/6475#pullrequestreview-560051248", "createdAt": "2020-12-30T13:38:29Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMzozODoyOVrOIMta5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMzo0MToxMVrOIMtdzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE5Nzk5MA==", "bodyText": "We can also add those additional parameters later, when needed.", "url": "https://github.com/trinodb/trino/pull/6475#discussion_r550197990", "createdAt": "2020-12-30T13:38:29Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcClient.java", "diffHunk": "@@ -66,7 +66,7 @@ default boolean supportsGroupingSets()\n         return true;\n     }\n \n-    default boolean supportsAggregationPushdown(ConnectorSession session, JdbcTableHandle table)\n+    default boolean supportsAggregationPushdown(ConnectorSession session, JdbcTableHandle table, List<AggregateFunction> aggregates, Map<String, ColumnHandle> assignments, List<List<ColumnHandle>> groupingSets)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE5ODQzNg==", "bodyText": "You can put this after hard limits (after if (handle.getGroupingSets().isPresent()) { condition)", "url": "https://github.com/trinodb/trino/pull/6475#discussion_r550198436", "createdAt": "2020-12-30T13:40:05Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -224,6 +224,11 @@ public JdbcTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n \n         JdbcTableHandle handle = (JdbcTableHandle) table;\n \n+        if (!jdbcClient.supportsAggregationPushdown(session, handle, aggregates, assignments, groupingSets)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE5ODczMg==", "bodyText": "avoid agg abbrev\naggResult -> result or aggregationResult", "url": "https://github.com/trinodb/trino/pull/6475#discussion_r550198732", "createdAt": "2020-12-30T13:41:11Z", "author": {"login": "findepi"}, "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestJdbcMetadata.java", "diffHunk": "@@ -247,6 +248,31 @@ public void testDropTableTable()\n         }\n     }\n \n+    @Test\n+    public void testAggregationPushdownForTableHandle()\n+    {\n+        ConnectorSession session = TestingConnectorSession.builder()\n+                .setPropertyMetadata(new JdbcMetadataSessionProperties(new JdbcMetadataConfig().setAggregationPushdownEnabled(true), Optional.empty()).getSessionProperties())\n+                .build();\n+        ColumnHandle groupByColumn = metadata.getColumnHandles(session, tableHandle).get(\"text\");\n+        Function<ConnectorTableHandle, Optional<AggregationApplicationResult<ConnectorTableHandle>>> applyAggregation = handle -> metadata.applyAggregation(\n+                session,\n+                handle,\n+                ImmutableList.of(new AggregateFunction(\"count\", BIGINT, List.of(), List.of(), false, Optional.empty())),\n+                ImmutableMap.of(),\n+                ImmutableList.of(ImmutableList.of(groupByColumn)));\n+\n+        ConnectorTableHandle baseTableHandle = metadata.getTableHandle(session, new SchemaTableName(\"example\", \"numbers\"));\n+        Optional<AggregationApplicationResult<ConnectorTableHandle>> aggResult = applyAggregation.apply(baseTableHandle);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "45681c9b7461c4cda766fc243cbd50bb169b0dae", "author": {"user": {"login": "hashhar", "name": "Ashhar Hasan"}}, "url": "https://github.com/trinodb/trino/commit/45681c9b7461c4cda766fc243cbd50bb169b0dae", "committedDate": "2021-01-04T14:08:53Z", "message": "Allow JDBC connector to control aggregation pushdown for tables"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "45681c9b7461c4cda766fc243cbd50bb169b0dae", "author": {"user": {"login": "hashhar", "name": "Ashhar Hasan"}}, "url": "https://github.com/trinodb/trino/commit/45681c9b7461c4cda766fc243cbd50bb169b0dae", "committedDate": "2021-01-04T14:08:53Z", "message": "Allow JDBC connector to control aggregation pushdown for tables"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1788, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}