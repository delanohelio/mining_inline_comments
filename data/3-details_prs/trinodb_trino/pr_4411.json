{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MDcyODIz", "number": 4411, "title": "Fix JDBC metadata for timestamp types", "bodyText": "", "createdAt": "2020-07-09T20:18:12Z", "url": "https://github.com/trinodb/trino/pull/4411", "merged": true, "mergeCommit": {"oid": "a0252e2192cbd4e3dfc1d79b15daaa160f3c0c2c"}, "closed": true, "closedAt": "2020-07-21T15:13:38Z", "author": {"login": "martint"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABczVcCXgBqjM1MzE0MTM3MDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc27phugBqjM1Njg1MDM0MDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MjUzNzY1", "url": "https://github.com/trinodb/trino/pull/4411#pullrequestreview-446253765", "createdAt": "2020-07-10T09:21:08Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOToyMTowOVrOGvwWGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOToyMTowOVrOGvwWGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcyODM0Ng==", "bodyText": "Is TIMESTAMP_WITH_TIME_ZONE deprecated? Are there there any other usages of this? I think we should remove these contants.", "url": "https://github.com/trinodb/trino/pull/4411#discussion_r452728346", "createdAt": "2020-07-10T09:21:09Z", "author": {"login": "kokosing"}, "path": "presto-main/src/main/java/io/prestosql/connector/system/jdbc/ColumnJdbcTable.java", "diffHunk": "@@ -372,10 +370,10 @@ static int jdbcDataType(Type type)\n         if (type.equals(TIME_WITH_TIME_ZONE)) {\n             return Types.TIME_WITH_TIMEZONE;\n         }\n-        if (type.equals(TIMESTAMP)) {\n+        if (type instanceof TimestampType) {\n             return Types.TIMESTAMP;\n         }\n-        if (type.equals(TIMESTAMP_WITH_TIME_ZONE)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NzIxMzUz", "url": "https://github.com/trinodb/trino/pull/4411#pullrequestreview-446721353", "createdAt": "2020-07-10T21:55:37Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMTo1NTozN1rOGwGsIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMTo1NjoyMFrOGwGtJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA5NDQzNA==", "bodyText": "i think 5 may be actual max", "url": "https://github.com/trinodb/trino/pull/4411#discussion_r453094434", "createdAt": "2020-07-10T21:55:37Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/connector/system/jdbc/ColumnJdbcTable.java", "diffHunk": "@@ -428,11 +426,24 @@ static Integer columnSize(Type type)\n         if (type.equals(DATE)) {\n             return 14; // +5881580-07-11 (2**31-1 days)\n         }\n-        if (type.equals(TIMESTAMP)) {\n-            return 15 + 8;\n-        }\n-        if (type.equals(TIMESTAMP_WITH_TIME_ZONE)) {\n-            return 15 + 8 + 6;\n+        if (type instanceof TimestampType) {\n+            // 1 digit for year sign\n+            // 6 digits for year\n+            // 15 digits for \"-MM-DD HH:MM:SS\"\n+            // min(p, 1) for the fractional second period (i.e., no period if p == 0)\n+            // p for the fractional digits\n+            int precision = ((TimestampType) type).getPrecision();\n+            return 1 + 6 + 15 + Math.min(precision, 1) + precision;\n+        }\n+        if (type instanceof TimestampWithTimeZoneType) {\n+            // 1 digit for year sign\n+            // 6 digits for year", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA5NDYxMQ==", "bodyText": "static import", "url": "https://github.com/trinodb/trino/pull/4411#discussion_r453094611", "createdAt": "2020-07-10T21:56:06Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/connector/system/jdbc/ColumnJdbcTable.java", "diffHunk": "@@ -428,11 +426,24 @@ static Integer columnSize(Type type)\n         if (type.equals(DATE)) {\n             return 14; // +5881580-07-11 (2**31-1 days)\n         }\n-        if (type.equals(TIMESTAMP)) {\n-            return 15 + 8;\n-        }\n-        if (type.equals(TIMESTAMP_WITH_TIME_ZONE)) {\n-            return 15 + 8 + 6;\n+        if (type instanceof TimestampType) {\n+            // 1 digit for year sign\n+            // 6 digits for year\n+            // 15 digits for \"-MM-DD HH:MM:SS\"\n+            // min(p, 1) for the fractional second period (i.e., no period if p == 0)\n+            // p for the fractional digits\n+            int precision = ((TimestampType) type).getPrecision();\n+            return 1 + 6 + 15 + Math.min(precision, 1) + precision;\n+        }\n+        if (type instanceof TimestampWithTimeZoneType) {\n+            // 1 digit for year sign\n+            // 6 digits for year\n+            // 15 digits for \"-MM-DD HH:MM:SS\"\n+            // min(p, 1) for the fractional second period (i.e., no period if p == 0)\n+            // p for the fractional digits\n+            // 6 for timezone offset\n+            int precision = ((TimestampWithTimeZoneType) type).getPrecision();\n+            return 1 + 6 + 15 + Math.min(precision, 1) + precision + 6;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA5NDY5Mg==", "bodyText": "this can be a named zone", "url": "https://github.com/trinodb/trino/pull/4411#discussion_r453094692", "createdAt": "2020-07-10T21:56:20Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/connector/system/jdbc/ColumnJdbcTable.java", "diffHunk": "@@ -428,11 +426,24 @@ static Integer columnSize(Type type)\n         if (type.equals(DATE)) {\n             return 14; // +5881580-07-11 (2**31-1 days)\n         }\n-        if (type.equals(TIMESTAMP)) {\n-            return 15 + 8;\n-        }\n-        if (type.equals(TIMESTAMP_WITH_TIME_ZONE)) {\n-            return 15 + 8 + 6;\n+        if (type instanceof TimestampType) {\n+            // 1 digit for year sign\n+            // 6 digits for year\n+            // 15 digits for \"-MM-DD HH:MM:SS\"\n+            // min(p, 1) for the fractional second period (i.e., no period if p == 0)\n+            // p for the fractional digits\n+            int precision = ((TimestampType) type).getPrecision();\n+            return 1 + 6 + 15 + Math.min(precision, 1) + precision;\n+        }\n+        if (type instanceof TimestampWithTimeZoneType) {\n+            // 1 digit for year sign\n+            // 6 digits for year\n+            // 15 digits for \"-MM-DD HH:MM:SS\"\n+            // min(p, 1) for the fractional second period (i.e., no period if p == 0)\n+            // p for the fractional digits\n+            // 6 for timezone offset", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NzgwNzY0", "url": "https://github.com/trinodb/trino/pull/4411#pullrequestreview-446780764", "createdAt": "2020-07-11T05:47:58Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwNTo0Nzo1OVrOGwKr6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwNTo0OTo0MVrOGwKsag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE1OTkxNQ==", "bodyText": "Looks reasonable to me. Is it what eg Oracle does? they support named zones as well.\nThe assumption is that SystemV zones do not have long names, right?", "url": "https://github.com/trinodb/trino/pull/4411#discussion_r453159915", "createdAt": "2020-07-11T05:47:59Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/connector/system/jdbc/ColumnJdbcTable.java", "diffHunk": "@@ -94,6 +94,10 @@\n     public static final SchemaTableName NAME = new SchemaTableName(\"jdbc\", \"columns\");\n \n     private static final int MAX_DOMAIN_SIZE = 100;\n+    private static final int MAX_TIMEZONE_LENGTH = ZoneId.getAvailableZoneIds().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE1OTk4Ng==", "bodyText": "6", "url": "https://github.com/trinodb/trino/pull/4411#discussion_r453159986", "createdAt": "2020-07-11T05:48:51Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/connector/system/jdbc/ColumnJdbcTable.java", "diffHunk": "@@ -428,11 +432,25 @@ static Integer columnSize(Type type)\n         if (type.equals(DATE)) {\n             return 14; // +5881580-07-11 (2**31-1 days)\n         }\n-        if (type.equals(TIMESTAMP)) {\n-            return 15 + 8;\n-        }\n-        if (type.equals(TIMESTAMP_WITH_TIME_ZONE)) {\n-            return 15 + 8 + 6;\n+        if (type instanceof TimestampType) {\n+            // 1 digit for year sign\n+            // 5 digits for year", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2MDAwOQ==", "bodyText": "I believe it's 5, but please check", "url": "https://github.com/trinodb/trino/pull/4411#discussion_r453160009", "createdAt": "2020-07-11T05:49:13Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/connector/system/jdbc/ColumnJdbcTable.java", "diffHunk": "@@ -428,11 +432,25 @@ static Integer columnSize(Type type)\n         if (type.equals(DATE)) {\n             return 14; // +5881580-07-11 (2**31-1 days)\n         }\n-        if (type.equals(TIMESTAMP)) {\n-            return 15 + 8;\n-        }\n-        if (type.equals(TIMESTAMP_WITH_TIME_ZONE)) {\n-            return 15 + 8 + 6;\n+        if (type instanceof TimestampType) {\n+            // 1 digit for year sign\n+            // 5 digits for year\n+            // 15 digits for \"-MM-DD HH:MM:SS\"\n+            // min(p, 1) for the fractional second period (i.e., no period if p == 0)\n+            // p for the fractional digits\n+            int precision = ((TimestampType) type).getPrecision();\n+            return 1 + 5 + 15 + min(precision, 1) + precision;\n+        }\n+        if (type instanceof TimestampWithTimeZoneType) {\n+            // 1 digit for year sign\n+            // 5 digits for year", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2MDA0MA==", "bodyText": "digits -> characters", "url": "https://github.com/trinodb/trino/pull/4411#discussion_r453160040", "createdAt": "2020-07-11T05:49:36Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/connector/system/jdbc/ColumnJdbcTable.java", "diffHunk": "@@ -428,11 +432,25 @@ static Integer columnSize(Type type)\n         if (type.equals(DATE)) {\n             return 14; // +5881580-07-11 (2**31-1 days)\n         }\n-        if (type.equals(TIMESTAMP)) {\n-            return 15 + 8;\n-        }\n-        if (type.equals(TIMESTAMP_WITH_TIME_ZONE)) {\n-            return 15 + 8 + 6;\n+        if (type instanceof TimestampType) {\n+            // 1 digit for year sign\n+            // 5 digits for year\n+            // 15 digits for \"-MM-DD HH:MM:SS\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2MDA0Mg==", "bodyText": "digits -> characters", "url": "https://github.com/trinodb/trino/pull/4411#discussion_r453160042", "createdAt": "2020-07-11T05:49:41Z", "author": {"login": "findepi"}, "path": "presto-main/src/main/java/io/prestosql/connector/system/jdbc/ColumnJdbcTable.java", "diffHunk": "@@ -428,11 +432,25 @@ static Integer columnSize(Type type)\n         if (type.equals(DATE)) {\n             return 14; // +5881580-07-11 (2**31-1 days)\n         }\n-        if (type.equals(TIMESTAMP)) {\n-            return 15 + 8;\n-        }\n-        if (type.equals(TIMESTAMP_WITH_TIME_ZONE)) {\n-            return 15 + 8 + 6;\n+        if (type instanceof TimestampType) {\n+            // 1 digit for year sign\n+            // 5 digits for year\n+            // 15 digits for \"-MM-DD HH:MM:SS\"\n+            // min(p, 1) for the fractional second period (i.e., no period if p == 0)\n+            // p for the fractional digits\n+            int precision = ((TimestampType) type).getPrecision();\n+            return 1 + 5 + 15 + min(precision, 1) + precision;\n+        }\n+        if (type instanceof TimestampWithTimeZoneType) {\n+            // 1 digit for year sign\n+            // 5 digits for year\n+            // 15 digits for \"-MM-DD HH:MM:SS\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 67}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a6bdfe6e237d41012e9e04fe7fdb98b3affe201", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/9a6bdfe6e237d41012e9e04fe7fdb98b3affe201", "committedDate": "2020-07-21T01:07:36Z", "message": "Fix JDBC metadata for timestamp types"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "9a6bdfe6e237d41012e9e04fe7fdb98b3affe201", "author": {"user": {"login": "martint", "name": "Martin Traverso"}}, "url": "https://github.com/trinodb/trino/commit/9a6bdfe6e237d41012e9e04fe7fdb98b3affe201", "committedDate": "2020-07-21T01:07:36Z", "message": "Fix JDBC metadata for timestamp types"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 50, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}