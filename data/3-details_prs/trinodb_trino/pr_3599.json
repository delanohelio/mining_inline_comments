{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNDI4MTcz", "number": 3599, "title": "Return varchar type for substr function with char argument", "bodyText": "Fixes #3456", "createdAt": "2020-05-02T09:51:55Z", "url": "https://github.com/trinodb/trino/pull/3599", "merged": true, "mergeCommit": {"oid": "fbc313e1bbdb0dbf3d0be04b445cd7a5b4fdc176"}, "closed": true, "closedAt": "2020-06-07T10:18:02Z", "author": {"login": "ebyhr"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcdT2PwAFqTQwNDUxNzgyMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABco2cLJABqjM0MTU5NzgyMTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NTE3ODIz", "url": "https://github.com/trinodb/trino/pull/3599#pullrequestreview-404517823", "createdAt": "2020-05-02T10:37:20Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMDozNzoyMFrOGPiNog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMDozNzoyMFrOGPiNog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MjM3MA==", "bodyText": "do we have a test ensuring trailing space is preserved?\nlike\nassertFunction(\"SUBSTR(CAST('keep trailing' AS CHAR(14)), 1, 14)\", createVarcharType(14), \"keep trailing \");", "url": "https://github.com/trinodb/trino/pull/3599#discussion_r418942370", "createdAt": "2020-05-02T10:37:20Z", "author": {"login": "findepi"}, "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestStringFunctions.java", "diffHunk": "@@ -390,41 +390,41 @@ public void testSubstring()\n     @Test\n     public void testCharSubstring()\n     {\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5)\", createCharType(13), padRight(\"ratically\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 50)\", createCharType(13), padRight(\"\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -5)\", createCharType(13), padRight(\"cally\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -50)\", createCharType(13), padRight(\"\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 0)\", createCharType(13), padRight(\"\", 13));\n-\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5, 6)\", createCharType(13), padRight(\"ratica\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5, 10)\", createCharType(13), padRight(\"ratically\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5, 50)\", createCharType(13), padRight(\"ratically\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 50, 10)\", createCharType(13), padRight(\"\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -5, 4)\", createCharType(13), padRight(\"call\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -5, 40)\", createCharType(13), padRight(\"cally\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -50, 4)\", createCharType(13), padRight(\"\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 0, 4)\", createCharType(13), padRight(\"\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5, 0)\", createCharType(13), padRight(\"\", 13));\n-\n-        assertFunction(\"SUBSTR(CAST('abc def' AS CHAR(7)), 1, 4)\", createCharType(7), padRight(\"abc\", 7));\n-\n-        assertFunction(\"SUBSTRING(CAST('Quadratically' AS CHAR(13)) FROM 5)\", createCharType(13), padRight(\"ratically\", 13));\n-        assertFunction(\"SUBSTRING(CAST('Quadratically' AS CHAR(13)) FROM 50)\", createCharType(13), padRight(\"\", 13));\n-        assertFunction(\"SUBSTRING(CAST('Quadratically' AS CHAR(13)) FROM -5)\", createCharType(13), padRight(\"cally\", 13));\n-        assertFunction(\"SUBSTRING(CAST('Quadratically' AS CHAR(13)) FROM -50)\", createCharType(13), padRight(\"\", 13));\n-        assertFunction(\"SUBSTRING(CAST('Quadratically' AS CHAR(13)) FROM 0)\", createCharType(13), padRight(\"\", 13));\n-\n-        assertFunction(\"SUBSTRING(CAST('Quadratically' AS CHAR(13)) FROM 5 FOR 6)\", createCharType(13), padRight(\"ratica\", 13));\n-        assertFunction(\"SUBSTRING(CAST('Quadratically' AS CHAR(13)) FROM 5 FOR 50)\", createCharType(13), padRight(\"ratically\", 13));\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5)\", createVarcharType(13), \"ratically\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 50)\", createVarcharType(13), \"\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -5)\", createVarcharType(13), \"cally\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -50)\", createVarcharType(13), \"\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 0)\", createVarcharType(13), \"\");\n+\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5, 6)\", createVarcharType(13), \"ratica\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5, 10)\", createVarcharType(13), \"ratically\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5, 50)\", createVarcharType(13), \"ratically\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 50, 10)\", createVarcharType(13), \"\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -5, 4)\", createVarcharType(13), \"call\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -5, 40)\", createVarcharType(13), \"cally\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -50, 4)\", createVarcharType(13), \"\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 0, 4)\", createVarcharType(13), \"\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5, 0)\", createVarcharType(13), \"\");\n+\n+        assertFunction(\"SUBSTR(CAST('abc def' AS CHAR(7)), 1, 4)\", createVarcharType(7), \"abc \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NjEzMDI2", "url": "https://github.com/trinodb/trino/pull/3599#pullrequestreview-417613026", "createdAt": "2020-05-25T10:18:14Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "c997deeb8f416c733fc029b06373bfda5e766bde", "author": {"user": {"login": "ebyhr", "name": "Yuya Ebihara"}}, "url": "https://github.com/trinodb/trino/commit/c997deeb8f416c733fc029b06373bfda5e766bde", "committedDate": "2020-06-07T07:08:32Z", "message": "Return varchar type for substr function with char argument"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "c997deeb8f416c733fc029b06373bfda5e766bde", "author": {"user": {"login": "ebyhr", "name": "Yuya Ebihara"}}, "url": "https://github.com/trinodb/trino/commit/c997deeb8f416c733fc029b06373bfda5e766bde", "committedDate": "2020-06-07T07:08:32Z", "message": "Return varchar type for substr function with char argument"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1346, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}