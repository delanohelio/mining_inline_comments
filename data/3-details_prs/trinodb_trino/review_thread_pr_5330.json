{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0MjgzMjE1", "number": 5330, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwODoyNzo1NlrOEob2xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODo0NToyOFrOEq4Euw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODM0ODg0OnYy", "diffSide": "RIGHT", "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/AbstractSessionPropertyManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwODoyNzo1NlrOHZhjIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwOTozNTo1NVrOHaVXjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUyNjExMg==", "bodyText": "Please extract AbstractSessionPropertyManager extraction as separate commit. So logical changes are separated from refactors. Now it is more difficult to track how it changed.", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r496526112", "createdAt": "2020-09-29T08:27:56Z", "author": {"login": "kokosing"}, "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/AbstractSessionPropertyManager.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.session;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.spi.session.SessionConfigurationContext;\n+import io.prestosql.spi.session.SessionPropertyConfigurationManager;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+public abstract class AbstractSessionPropertyManager\n+        implements SessionPropertyConfigurationManager", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc3MzUxNg==", "bodyText": "Cut the change in 4 commits to ease the review", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r496773516", "createdAt": "2020-09-29T14:39:59Z", "author": {"login": "rclaude"}, "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/AbstractSessionPropertyManager.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.session;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.spi.session.SessionConfigurationContext;\n+import io.prestosql.spi.session.SessionPropertyConfigurationManager;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+public abstract class AbstractSessionPropertyManager\n+        implements SessionPropertyConfigurationManager", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUyNjExMg=="}, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM3NTExNg==", "bodyText": "Thanks!", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r497375116", "createdAt": "2020-09-30T09:35:55Z", "author": {"login": "kokosing"}, "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/AbstractSessionPropertyManager.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.session;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.spi.session.SessionConfigurationContext;\n+import io.prestosql.spi.session.SessionPropertyConfigurationManager;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+public abstract class AbstractSessionPropertyManager\n+        implements SessionPropertyConfigurationManager", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUyNjExMg=="}, "originalCommit": null, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODM1NTU5OnYy", "diffSide": "RIGHT", "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/AbstractSessionPropertyManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwODoyOTowMVrOHZhnvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDozNjoyMVrOHZwePg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUyNzI5NA==", "bodyText": "collect to immutable map directly", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r496527294", "createdAt": "2020-09-29T08:29:01Z", "author": {"login": "kokosing"}, "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/AbstractSessionPropertyManager.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.session;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.spi.session.SessionConfigurationContext;\n+import io.prestosql.spi.session.SessionPropertyConfigurationManager;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+public abstract class AbstractSessionPropertyManager\n+        implements SessionPropertyConfigurationManager\n+{\n+    protected abstract List<SessionMatchSpec> getSessionMatchSpecs();\n+\n+    private Map<String, String> getSessionProperties(SessionConfigurationContext context)\n+    {\n+        // later properties override earlier properties\n+        Map<String, String> combinedProperties = new HashMap<>();\n+        for (SessionMatchSpec sessionMatchSpec : getSessionMatchSpecs()) {\n+            combinedProperties.putAll(sessionMatchSpec.match(context));\n+        }\n+        return ImmutableMap.copyOf(combinedProperties);\n+    }\n+\n+    @Override\n+    public Map<String, String> getSystemSessionProperties(SessionConfigurationContext context)\n+    {\n+        Map<String, String> combinedSystemSessionProperties = getSessionProperties(context)\n+                .entrySet()\n+                .stream()\n+                .filter(entry -> !entry.getKey().contains(\".\"))\n+                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc3MDYyMg==", "bodyText": "Done\nThanks! didn't knew about ImmutableMap collectors", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r496770622", "createdAt": "2020-09-29T14:36:21Z", "author": {"login": "rclaude"}, "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/AbstractSessionPropertyManager.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.session;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.spi.session.SessionConfigurationContext;\n+import io.prestosql.spi.session.SessionPropertyConfigurationManager;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+public abstract class AbstractSessionPropertyManager\n+        implements SessionPropertyConfigurationManager\n+{\n+    protected abstract List<SessionMatchSpec> getSessionMatchSpecs();\n+\n+    private Map<String, String> getSessionProperties(SessionConfigurationContext context)\n+    {\n+        // later properties override earlier properties\n+        Map<String, String> combinedProperties = new HashMap<>();\n+        for (SessionMatchSpec sessionMatchSpec : getSessionMatchSpecs()) {\n+            combinedProperties.putAll(sessionMatchSpec.match(context));\n+        }\n+        return ImmutableMap.copyOf(combinedProperties);\n+    }\n+\n+    @Override\n+    public Map<String, String> getSystemSessionProperties(SessionConfigurationContext context)\n+    {\n+        Map<String, String> combinedSystemSessionProperties = getSessionProperties(context)\n+                .entrySet()\n+                .stream()\n+                .filter(entry -> !entry.getKey().contains(\".\"))\n+                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUyNzI5NA=="}, "originalCommit": null, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzc1MDczOnYy", "diffSide": "RIGHT", "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/AbstractSessionPropertyManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwOTozNjo1N1rOHaVZ8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOTo0MzoxOFrOHassJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM3NTczMA==", "bodyText": "extract this condition as method: !isCatalogSessionProperty()", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r497375730", "createdAt": "2020-09-30T09:36:57Z", "author": {"login": "kokosing"}, "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/AbstractSessionPropertyManager.java", "diffHunk": "@@ -26,15 +26,24 @@\n {\n     protected abstract List<SessionMatchSpec> getSessionMatchSpecs();\n \n-    @Override\n-    public Map<String, String> getSystemSessionProperties(SessionConfigurationContext context)\n+    private Map<String, String> getSessionProperties(SessionConfigurationContext context)\n     {\n         // later properties override earlier properties\n         Map<String, String> combinedProperties = new HashMap<>();\n         for (SessionMatchSpec sessionMatchSpec : getSessionMatchSpecs()) {\n             combinedProperties.putAll(sessionMatchSpec.match(context));\n         }\n-        return ImmutableMap.copyOf(combinedProperties);\n+        return combinedProperties;\n+    }\n+\n+    @Override\n+    public Map<String, String> getSystemSessionProperties(SessionConfigurationContext context)\n+    {\n+        return getSessionProperties(context)\n+                .entrySet()\n+                .stream()\n+                .filter(entry -> !entry.getKey().contains(\".\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc1NzIyMQ==", "bodyText": "Done", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r497757221", "createdAt": "2020-09-30T19:43:18Z", "author": {"login": "rclaude"}, "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/AbstractSessionPropertyManager.java", "diffHunk": "@@ -26,15 +26,24 @@\n {\n     protected abstract List<SessionMatchSpec> getSessionMatchSpecs();\n \n-    @Override\n-    public Map<String, String> getSystemSessionProperties(SessionConfigurationContext context)\n+    private Map<String, String> getSessionProperties(SessionConfigurationContext context)\n     {\n         // later properties override earlier properties\n         Map<String, String> combinedProperties = new HashMap<>();\n         for (SessionMatchSpec sessionMatchSpec : getSessionMatchSpecs()) {\n             combinedProperties.putAll(sessionMatchSpec.match(context));\n         }\n-        return ImmutableMap.copyOf(combinedProperties);\n+        return combinedProperties;\n+    }\n+\n+    @Override\n+    public Map<String, String> getSystemSessionProperties(SessionConfigurationContext context)\n+    {\n+        return getSessionProperties(context)\n+                .entrySet()\n+                .stream()\n+                .filter(entry -> !entry.getKey().contains(\".\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM3NTczMA=="}, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzc1MTIwOnYy", "diffSide": "RIGHT", "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/AbstractSessionPropertyManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwOTozNzowNVrOHaVaOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOTo0Mzo0OVrOHastNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM3NTgwMA==", "bodyText": "static import", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r497375800", "createdAt": "2020-09-30T09:37:05Z", "author": {"login": "kokosing"}, "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/AbstractSessionPropertyManager.java", "diffHunk": "@@ -26,15 +26,24 @@\n {\n     protected abstract List<SessionMatchSpec> getSessionMatchSpecs();\n \n-    @Override\n-    public Map<String, String> getSystemSessionProperties(SessionConfigurationContext context)\n+    private Map<String, String> getSessionProperties(SessionConfigurationContext context)\n     {\n         // later properties override earlier properties\n         Map<String, String> combinedProperties = new HashMap<>();\n         for (SessionMatchSpec sessionMatchSpec : getSessionMatchSpecs()) {\n             combinedProperties.putAll(sessionMatchSpec.match(context));\n         }\n-        return ImmutableMap.copyOf(combinedProperties);\n+        return combinedProperties;\n+    }\n+\n+    @Override\n+    public Map<String, String> getSystemSessionProperties(SessionConfigurationContext context)\n+    {\n+        return getSessionProperties(context)\n+                .entrySet()\n+                .stream()\n+                .filter(entry -> !entry.getKey().contains(\".\"))\n+                .collect(ImmutableMap.toImmutableMap(Map.Entry::getKey, Map.Entry::getValue));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc1NzQ5Mw==", "bodyText": "Done", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r497757493", "createdAt": "2020-09-30T19:43:49Z", "author": {"login": "rclaude"}, "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/AbstractSessionPropertyManager.java", "diffHunk": "@@ -26,15 +26,24 @@\n {\n     protected abstract List<SessionMatchSpec> getSessionMatchSpecs();\n \n-    @Override\n-    public Map<String, String> getSystemSessionProperties(SessionConfigurationContext context)\n+    private Map<String, String> getSessionProperties(SessionConfigurationContext context)\n     {\n         // later properties override earlier properties\n         Map<String, String> combinedProperties = new HashMap<>();\n         for (SessionMatchSpec sessionMatchSpec : getSessionMatchSpecs()) {\n             combinedProperties.putAll(sessionMatchSpec.match(context));\n         }\n-        return ImmutableMap.copyOf(combinedProperties);\n+        return combinedProperties;\n+    }\n+\n+    @Override\n+    public Map<String, String> getSystemSessionProperties(SessionConfigurationContext context)\n+    {\n+        return getSessionProperties(context)\n+                .entrySet()\n+                .stream()\n+                .filter(entry -> !entry.getKey().contains(\".\"))\n+                .collect(ImmutableMap.toImmutableMap(Map.Entry::getKey, Map.Entry::getValue));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM3NTgwMA=="}, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzc1NTU2OnYy", "diffSide": "RIGHT", "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/AbstractSessionPropertyManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwOTozODoxM1rOHaVc1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMDowNToxNVrOHatZGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM3NjQ3MA==", "bodyText": "Use ImmutableMap.Builder", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r497376470", "createdAt": "2020-09-30T09:38:13Z", "author": {"login": "kokosing"}, "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/AbstractSessionPropertyManager.java", "diffHunk": "@@ -49,7 +50,22 @@\n     @Override\n     public Map<String, Map<String, String>> getCatalogSessionProperties(SessionConfigurationContext context)\n     {\n-        // NOT IMPLEMENTED YET\n-        return ImmutableMap.of();\n+        Map<String, Map<String, String>> catalogsSessionProperties = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2ODcyOA==", "bodyText": "Partially done\nTried using groupingby collector or a custom collector to do it in a single path but only came up with more verbose & harder to grasp implementations.", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r497768728", "createdAt": "2020-09-30T20:05:15Z", "author": {"login": "rclaude"}, "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/AbstractSessionPropertyManager.java", "diffHunk": "@@ -49,7 +50,22 @@\n     @Override\n     public Map<String, Map<String, String>> getCatalogSessionProperties(SessionConfigurationContext context)\n     {\n-        // NOT IMPLEMENTED YET\n-        return ImmutableMap.of();\n+        Map<String, Map<String, String>> catalogsSessionProperties = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM3NjQ3MA=="}, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNTU3Mjc3OnYy", "diffSide": "RIGHT", "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/file/FileSessionPropertyManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzowNDo1OVrOHanMgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOTo1MjoxMVrOHas-Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY2NzIwMA==", "bodyText": "We could just use interface type in the declaration", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r497667200", "createdAt": "2020-09-30T17:04:59Z", "author": {"login": "phd3"}, "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/file/FileSessionPropertyManager.java", "diffHunk": "@@ -15,36 +15,33 @@\n \n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException;\n-import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableList;\n import io.airlift.json.JsonCodec;\n import io.airlift.json.JsonCodecFactory;\n import io.airlift.json.ObjectMapperProvider;\n+import io.prestosql.plugin.session.AbstractSessionPropertyManager;\n import io.prestosql.plugin.session.SessionMatchSpec;\n-import io.prestosql.spi.session.SessionConfigurationContext;\n-import io.prestosql.spi.session.SessionPropertyConfigurationManager;\n \n import javax.inject.Inject;\n \n import java.io.IOException;\n import java.io.UncheckedIOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;\n \n import static com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;\n import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n public class FileSessionPropertyManager\n-        implements SessionPropertyConfigurationManager\n+        extends AbstractSessionPropertyManager\n {\n     public static final JsonCodec<List<SessionMatchSpec>> CODEC = new JsonCodecFactory(\n             () -> new ObjectMapperProvider().get().enable(FAIL_ON_UNKNOWN_PROPERTIES))\n             .listJsonCodec(SessionMatchSpec.class);\n \n-    private final List<SessionMatchSpec> sessionMatchSpecs;\n+    private final ImmutableList<SessionMatchSpec> sessionMatchSpecs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2MTg5MQ==", "bodyText": "Made it explicit in the type so we can rely on it in getSessionMatchSpecs() and return the list without doing a ImmutableList.copyOf().", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r497761891", "createdAt": "2020-09-30T19:52:11Z", "author": {"login": "rclaude"}, "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/file/FileSessionPropertyManager.java", "diffHunk": "@@ -15,36 +15,33 @@\n \n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException;\n-import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableList;\n import io.airlift.json.JsonCodec;\n import io.airlift.json.JsonCodecFactory;\n import io.airlift.json.ObjectMapperProvider;\n+import io.prestosql.plugin.session.AbstractSessionPropertyManager;\n import io.prestosql.plugin.session.SessionMatchSpec;\n-import io.prestosql.spi.session.SessionConfigurationContext;\n-import io.prestosql.spi.session.SessionPropertyConfigurationManager;\n \n import javax.inject.Inject;\n \n import java.io.IOException;\n import java.io.UncheckedIOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;\n \n import static com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;\n import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n public class FileSessionPropertyManager\n-        implements SessionPropertyConfigurationManager\n+        extends AbstractSessionPropertyManager\n {\n     public static final JsonCodec<List<SessionMatchSpec>> CODEC = new JsonCodecFactory(\n             () -> new ObjectMapperProvider().get().enable(FAIL_ON_UNKNOWN_PROPERTIES))\n             .listJsonCodec(SessionMatchSpec.class);\n \n-    private final List<SessionMatchSpec> sessionMatchSpecs;\n+    private final ImmutableList<SessionMatchSpec> sessionMatchSpecs;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY2NzIwMA=="}, "originalCommit": null, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNTYzNjY4OnYy", "diffSide": "RIGHT", "path": "presto-docs/src/main/sphinx/admin/session-property-managers.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzoyMDoyOFrOHan1Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOTo0NTozNlrOHasw1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY3NzYxNA==", "bodyText": "It'll be good to modify the Limitations section in this file to be consistent with the new behavior.", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r497677614", "createdAt": "2020-09-30T17:20:28Z", "author": {"login": "phd3"}, "path": "presto-docs/src/main/sphinx/admin/session-property-managers.rst", "diffHunk": "@@ -60,7 +60,7 @@ Consider the following set of requirements:\n   limit of 1 hour (tighter than the constraint on ``global``).\n \n * All ETL queries (tagged with 'etl') are routed to subgroups under the ``global.pipeline`` group, and must be\n-  configured with certain properties to control writer behavior.\n+  configured with certain properties to control writer behavior and a hive catalog property.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc1ODQyMA==", "bodyText": "Done", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r497758420", "createdAt": "2020-09-30T19:45:36Z", "author": {"login": "rclaude"}, "path": "presto-docs/src/main/sphinx/admin/session-property-managers.rst", "diffHunk": "@@ -60,7 +60,7 @@ Consider the following set of requirements:\n   limit of 1 hour (tighter than the constraint on ``global``).\n \n * All ETL queries (tagged with 'etl') are routed to subgroups under the ``global.pipeline`` group, and must be\n-  configured with certain properties to control writer behavior.\n+  configured with certain properties to control writer behavior and a hive catalog property.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY3NzYxNA=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNTY2NzQ2OnYy", "diffSide": "RIGHT", "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/AbstractSessionPropertyManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzoyOTowMFrOHaoIxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOTo1NDoxNVrOHatCpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY4MjYyOA==", "bodyText": "I think we may want to getSystemSessionProperties and getCatalogSessionProperties final in this class to future-proof against possible subclasses that may try to override them. @kokosing what do you think?", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r497682628", "createdAt": "2020-09-30T17:29:00Z", "author": {"login": "phd3"}, "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/AbstractSessionPropertyManager.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.session;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.spi.session.SessionConfigurationContext;\n+import io.prestosql.spi.session.SessionPropertyConfigurationManager;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public abstract class AbstractSessionPropertyManager\n+        implements SessionPropertyConfigurationManager\n+{\n+    protected abstract List<SessionMatchSpec> getSessionMatchSpecs();\n+\n+    @Override\n+    public Map<String, String> getSystemSessionProperties(SessionConfigurationContext context)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2Mjk4Mg==", "bodyText": "Done", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r497762982", "createdAt": "2020-09-30T19:54:15Z", "author": {"login": "rclaude"}, "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/AbstractSessionPropertyManager.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.session;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.spi.session.SessionConfigurationContext;\n+import io.prestosql.spi.session.SessionPropertyConfigurationManager;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public abstract class AbstractSessionPropertyManager\n+        implements SessionPropertyConfigurationManager\n+{\n+    protected abstract List<SessionMatchSpec> getSessionMatchSpecs();\n+\n+    @Override\n+    public Map<String, String> getSystemSessionProperties(SessionConfigurationContext context)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY4MjYyOA=="}, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNTY5MDk1OnYy", "diffSide": "RIGHT", "path": "presto-session-property-managers/src/test/java/io/prestosql/plugin/session/db/TestDbSessionPropertyManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzozNTozM1rOHaoXYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOTo1MzoyM1rOHatAxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY4NjM3MQ==", "bodyText": "nit: indent", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r497686371", "createdAt": "2020-09-30T17:35:33Z", "author": {"login": "phd3"}, "path": "presto-session-property-managers/src/test/java/io/prestosql/plugin/session/db/TestDbSessionPropertyManager.java", "diffHunk": "@@ -82,14 +83,15 @@ public void destroy()\n     }\n \n     @Override\n-    protected void assertProperties(Map<String, String> properties, SessionMatchSpec... specs)\n+        protected void assertProperties(Map<String, String> systemProperties, Map<String, Map<String, String>> catalogProperties, SessionMatchSpec... specs)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2MjUwMA==", "bodyText": "Fixed", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r497762500", "createdAt": "2020-09-30T19:53:23Z", "author": {"login": "rclaude"}, "path": "presto-session-property-managers/src/test/java/io/prestosql/plugin/session/db/TestDbSessionPropertyManager.java", "diffHunk": "@@ -82,14 +83,15 @@ public void destroy()\n     }\n \n     @Override\n-    protected void assertProperties(Map<String, String> properties, SessionMatchSpec... specs)\n+        protected void assertProperties(Map<String, String> systemProperties, Map<String, Map<String, String>> catalogProperties, SessionMatchSpec... specs)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY4NjM3MQ=="}, "originalCommit": null, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExODA0Mjc4OnYy", "diffSide": "RIGHT", "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/AbstractSessionPropertyManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwODowMDozMVrOHa-4Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMzoyODoyN1rOHbKZRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA1NTE3OA==", "bodyText": "move it to the bottom, is less interesting than public API", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r498055178", "createdAt": "2020-10-01T08:00:31Z", "author": {"login": "kokosing"}, "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/AbstractSessionPropertyManager.java", "diffHunk": "@@ -20,21 +20,38 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n \n public abstract class AbstractSessionPropertyManager\n         implements SessionPropertyConfigurationManager\n {\n     protected abstract List<SessionMatchSpec> getSessionMatchSpecs();\n \n-    @Override\n-    public final Map<String, String> getSystemSessionProperties(SessionConfigurationContext context)\n+    private Map<String, String> getSessionProperties(SessionConfigurationContext context)\n     {\n         // later properties override earlier properties\n         Map<String, String> combinedProperties = new HashMap<>();\n         for (SessionMatchSpec sessionMatchSpec : getSessionMatchSpecs()) {\n             combinedProperties.putAll(sessionMatchSpec.match(context));\n         }\n-        return ImmutableMap.copyOf(combinedProperties);\n+        return combinedProperties;\n+    }\n+\n+    private static boolean isCatalogSessionProperty(Entry<String, String> property)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI0MzkxMQ==", "bodyText": "Done", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r498243911", "createdAt": "2020-10-01T13:28:27Z", "author": {"login": "rclaude"}, "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/AbstractSessionPropertyManager.java", "diffHunk": "@@ -20,21 +20,38 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n \n public abstract class AbstractSessionPropertyManager\n         implements SessionPropertyConfigurationManager\n {\n     protected abstract List<SessionMatchSpec> getSessionMatchSpecs();\n \n-    @Override\n-    public final Map<String, String> getSystemSessionProperties(SessionConfigurationContext context)\n+    private Map<String, String> getSessionProperties(SessionConfigurationContext context)\n     {\n         // later properties override earlier properties\n         Map<String, String> combinedProperties = new HashMap<>();\n         for (SessionMatchSpec sessionMatchSpec : getSessionMatchSpecs()) {\n             combinedProperties.putAll(sessionMatchSpec.match(context));\n         }\n-        return ImmutableMap.copyOf(combinedProperties);\n+        return combinedProperties;\n+    }\n+\n+    private static boolean isCatalogSessionProperty(Entry<String, String> property)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA1NTE3OA=="}, "originalCommit": null, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExODA1NTQ1OnYy", "diffSide": "RIGHT", "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/AbstractSessionPropertyManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwODowNDozMlrOHa_AAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMzoyODo0N1rOHbKaWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA1NzIxOA==", "bodyText": "put private methods below public. Put method definitions under their usage.", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r498057218", "createdAt": "2020-10-01T08:04:32Z", "author": {"login": "kokosing"}, "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/AbstractSessionPropertyManager.java", "diffHunk": "@@ -20,21 +20,38 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n \n public abstract class AbstractSessionPropertyManager\n         implements SessionPropertyConfigurationManager\n {\n     protected abstract List<SessionMatchSpec> getSessionMatchSpecs();\n \n-    @Override\n-    public final Map<String, String> getSystemSessionProperties(SessionConfigurationContext context)\n+    private Map<String, String> getSessionProperties(SessionConfigurationContext context)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI0NDE4Nw==", "bodyText": "Done", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r498244187", "createdAt": "2020-10-01T13:28:47Z", "author": {"login": "rclaude"}, "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/AbstractSessionPropertyManager.java", "diffHunk": "@@ -20,21 +20,38 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n \n public abstract class AbstractSessionPropertyManager\n         implements SessionPropertyConfigurationManager\n {\n     protected abstract List<SessionMatchSpec> getSessionMatchSpecs();\n \n-    @Override\n-    public final Map<String, String> getSystemSessionProperties(SessionConfigurationContext context)\n+    private Map<String, String> getSessionProperties(SessionConfigurationContext context)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA1NzIxOA=="}, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExODA2MDY1OnYy", "diffSide": "RIGHT", "path": "presto-session-property-managers/src/test/java/io/prestosql/plugin/session/db/TestDbSessionPropertyManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwODowNTo1N1rOHa_DKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMzoyODowNFrOHbKYPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA1ODAyNw==", "bodyText": "can you please add more tests. Where are two catalogs, where the are no. When the are some system session properties. Where input is empty etc.", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r498058027", "createdAt": "2020-10-01T08:05:57Z", "author": {"login": "kokosing"}, "path": "presto-session-property-managers/src/test/java/io/prestosql/plugin/session/db/TestDbSessionPropertyManager.java", "diffHunk": "@@ -211,4 +213,25 @@ public void testOrderingOfSpecs()\n         assertEquals(sessionProperties.get(\"prop_3\"), \"val_3_1\");\n         assertEquals(sessionProperties.size(), 3);\n     }\n+\n+    /**\n+     * A basic test for catalog session properties overrides with the {@link DbSessionPropertyManager}\n+     */\n+    @Test\n+    public void testCatalogSessionProperties()\n+    {\n+        dao.insertSpecRow(1, \".*\", null, null, null, 0);\n+        dao.insertSessionProperty(1, \"catalog_1.prop_1\", \"val_1\");\n+        dao.insertSessionProperty(1, \"catalog_1.prop_2\", \"val_2\");\n+\n+        dao.insertSpecRow(2, \".*\", null, null, null, 1);\n+        dao.insertSessionProperty(2, \"catalog_1.prop_1\", \"val_1_bis\");\n+        dao.insertSessionProperty(2, \"catalog_1.prop_3\", \"val_3\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI0MzY0Ng==", "bodyText": "Added test for empty tables, empty strings and dots handling edge cases.\nFor 2 catalogs, no catalog, those are covered by the shared tests in AbstractTestSessionPropertyManager.", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r498243646", "createdAt": "2020-10-01T13:28:04Z", "author": {"login": "rclaude"}, "path": "presto-session-property-managers/src/test/java/io/prestosql/plugin/session/db/TestDbSessionPropertyManager.java", "diffHunk": "@@ -211,4 +213,25 @@ public void testOrderingOfSpecs()\n         assertEquals(sessionProperties.get(\"prop_3\"), \"val_3_1\");\n         assertEquals(sessionProperties.size(), 3);\n     }\n+\n+    /**\n+     * A basic test for catalog session properties overrides with the {@link DbSessionPropertyManager}\n+     */\n+    @Test\n+    public void testCatalogSessionProperties()\n+    {\n+        dao.insertSpecRow(1, \".*\", null, null, null, 0);\n+        dao.insertSessionProperty(1, \"catalog_1.prop_1\", \"val_1\");\n+        dao.insertSessionProperty(1, \"catalog_1.prop_2\", \"val_2\");\n+\n+        dao.insertSpecRow(2, \".*\", null, null, null, 1);\n+        dao.insertSessionProperty(2, \"catalog_1.prop_1\", \"val_1_bis\");\n+        dao.insertSessionProperty(2, \"catalog_1.prop_3\", \"val_3\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA1ODAyNw=="}, "originalCommit": null, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzk0MzIxOnYy", "diffSide": "RIGHT", "path": "presto-session-property-managers/src/test/java/io/prestosql/plugin/session/db/TestDbSessionPropertyManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODo0NToyMVrOHdVVWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODo0NToyMVrOHdVVWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyMDI4MQ==", "bodyText": "This comment is not needed.", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r500520281", "createdAt": "2020-10-06T18:45:21Z", "author": {"login": "kokosing"}, "path": "presto-session-property-managers/src/test/java/io/prestosql/plugin/session/db/TestDbSessionPropertyManager.java", "diffHunk": "@@ -211,4 +213,37 @@ public void testOrderingOfSpecs()\n         assertEquals(sessionProperties.get(\"prop_3\"), \"val_3_1\");\n         assertEquals(sessionProperties.size(), 3);\n     }\n+\n+    /**\n+     * A basic test for catalog session properties overrides with the {@link DbSessionPropertyManager}\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzk0MzYzOnYy", "diffSide": "RIGHT", "path": "presto-session-property-managers/src/test/java/io/prestosql/plugin/session/db/TestDbSessionPropertyManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODo0NToyOFrOHdVVlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODo0NToyOFrOHdVVlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyMDM0MA==", "bodyText": "This comment is not needed.", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r500520340", "createdAt": "2020-10-06T18:45:28Z", "author": {"login": "kokosing"}, "path": "presto-session-property-managers/src/test/java/io/prestosql/plugin/session/db/TestDbSessionPropertyManager.java", "diffHunk": "@@ -211,4 +213,37 @@ public void testOrderingOfSpecs()\n         assertEquals(sessionProperties.get(\"prop_3\"), \"val_3_1\");\n         assertEquals(sessionProperties.size(), 3);\n     }\n+\n+    /**\n+     * A basic test for catalog session properties overrides with the {@link DbSessionPropertyManager}\n+     */\n+    @Test\n+    public void testCatalogSessionProperties()\n+    {\n+        dao.insertSpecRow(1, \".*\", null, null, null, 0);\n+        dao.insertSessionProperty(1, \"catalog_1.prop_1\", \"val_1\");\n+        dao.insertSessionProperty(1, \"catalog_1.prop_2\", \"val_2\");\n+\n+        dao.insertSpecRow(2, \".*\", null, null, null, 1);\n+        dao.insertSessionProperty(2, \"catalog_1.prop_1\", \"val_1_bis\");\n+        dao.insertSessionProperty(2, \"catalog_1.prop_3\", \"val_3\");\n+\n+        specsProvider.refresh();\n+        SessionConfigurationContext context1 = new SessionConfigurationContext(\"foo\", Optional.empty(), ImmutableSet.of(), Optional.empty(), TEST_RG);\n+        assertEquals(manager.getCatalogSessionProperties(context1),\n+                ImmutableMap.of(\"catalog_1\",\n+                        ImmutableMap.of(\"prop_1\", \"val_1_bis\", \"prop_2\", \"val_2\", \"prop_3\", \"val_3\")));\n+    }\n+\n+    /**\n+     * Test empty tables\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4726, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}