{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4Njk3MDEz", "number": 2669, "title": "Allow for CTAS  table creation to external tables when write are enabled", "bodyText": "Duplicates #2556 with tests added.\nWhen hive.non-managed-table-writes-enabled and hive.non-managed-table-creates-enabled\nare both set to true, external tables can be created and inserted into. This change\nallows for that to be done in one step using the CREATE TABLE AS syntax.", "createdAt": "2020-01-29T18:13:28Z", "url": "https://github.com/trinodb/trino/pull/2669", "merged": true, "mergeCommit": {"oid": "7197160803620aac0724f860ba5d3dcbbec4dc1e"}, "closed": true, "closedAt": "2020-02-03T11:36:34Z", "author": {"login": "alexjo2144"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_PLJ1gFqTM1MDUxMTY1Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_xe0TAFqTM1MTYxMTIxOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNTExNjU2", "url": "https://github.com/trinodb/trino/pull/2669#pullrequestreview-350511656", "createdAt": "2020-01-30T00:12:55Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMDoxMjo1NVrOFjb0yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMDoxMjo1NVrOFjb0yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcwMDM2MA==", "bodyText": "Perhaps you could have just one test in TestHiveIntegrationSmokeTest that runs the CTAS with both the default/custom query runner and asserts failure or success depending on the configuration. assertUpdate() and assertQuery() both have signatures that accept a session argument and that session could be obtained from different query runners.", "url": "https://github.com/trinodb/trino/pull/2669#discussion_r372700360", "createdAt": "2020-01-30T00:12:55Z", "author": {"login": "aalbu"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveCreateExternalTables.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.testing.AbstractTestQueryFramework;\n+import io.prestosql.testing.QueryRunner;\n+import org.apache.hadoop.fs.Path;\n+import org.intellij.lang.annotations.Language;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static com.google.common.io.Files.createTempDir;\n+import static com.google.common.io.MoreFiles.deleteRecursively;\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static io.prestosql.tpch.TpchTable.CUSTOMER;\n+import static io.prestosql.tpch.TpchTable.ORDERS;\n+import static java.lang.String.format;\n+\n+public class TestHiveCreateExternalTables\n+        extends AbstractTestQueryFramework\n+{\n+    @Override\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        return HiveQueryRunner.createQueryRunner(\n+                ImmutableList.of(ORDERS, CUSTOMER),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(\"hive.non-managed-table-writes-enabled\", \"true\"),\n+                Optional.empty());\n+    }\n+\n+    @Test\n+    public void testCreateExternalTableWithCTASWritesEnabled()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNjQ2MDQ4", "url": "https://github.com/trinodb/trino/pull/2669#pullrequestreview-350646048", "createdAt": "2020-01-30T08:25:33Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwODoyNTozM1rOFjioRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwODo0NjoyNlrOFjjJZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgxMTg0NA==", "bodyText": "testCreateExternalTableWithDataNotAllowed", "url": "https://github.com/trinodb/trino/pull/2669#discussion_r372811844", "createdAt": "2020-01-30T08:25:33Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -2285,6 +2286,29 @@ public void testCreateExternalTableTextFileFieldSeparatorEscape()\n         deleteRecursively(tempDir.toPath(), ALLOW_INSECURE);\n     }\n \n+    @Test\n+    public void testCreateExternalTableWithCTASWritesDisabled()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgxMzQ5Mg==", "bodyText": "format and textfile_field_separator are redundant from this test's point of view, so you can wrap this as:\n\"WITH (external_location = '%s') AS \" +", "url": "https://github.com/trinodb/trino/pull/2669#discussion_r372813492", "createdAt": "2020-01-30T08:29:44Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -2285,6 +2286,29 @@ public void testCreateExternalTableTextFileFieldSeparatorEscape()\n         deleteRecursively(tempDir.toPath(), ALLOW_INSECURE);\n     }\n \n+    @Test\n+    public void testCreateExternalTableWithCTASWritesDisabled()\n+            throws IOException\n+    {\n+        File tempDir = createTempDir();\n+        File dataFile = new File(tempDir, \"test.txt\");\n+\n+        @Language(\"SQL\") String createTableSql = format(\"\" +\n+                        \"CREATE TABLE %s.%s.test_create_external \" +\n+                        \"WITH (\\n\" +\n+                        \"   external_location = '%s',\\n\" +\n+                        \"   format = 'TEXTFILE',\\n\" +\n+                        \"   textfile_field_separator = U&'\\\\0001'\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgxMzgzOA==", "bodyText": "unused", "url": "https://github.com/trinodb/trino/pull/2669#discussion_r372813838", "createdAt": "2020-01-30T08:30:35Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -2285,6 +2286,29 @@ public void testCreateExternalTableTextFileFieldSeparatorEscape()\n         deleteRecursively(tempDir.toPath(), ALLOW_INSECURE);\n     }\n \n+    @Test\n+    public void testCreateExternalTableWithCTASWritesDisabled()\n+            throws IOException\n+    {\n+        File tempDir = createTempDir();\n+        File dataFile = new File(tempDir, \"test.txt\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgxNDEwNQ==", "bodyText": "I think %s.%s. is redundant -- since this is session's default, it's implict in SQL.\n(i know other tests are doing this, but... hm .... let's not do this here)", "url": "https://github.com/trinodb/trino/pull/2669#discussion_r372814105", "createdAt": "2020-01-30T08:31:14Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -2285,6 +2286,29 @@ public void testCreateExternalTableTextFileFieldSeparatorEscape()\n         deleteRecursively(tempDir.toPath(), ALLOW_INSECURE);\n     }\n \n+    @Test\n+    public void testCreateExternalTableWithCTASWritesDisabled()\n+            throws IOException\n+    {\n+        File tempDir = createTempDir();\n+        File dataFile = new File(tempDir, \"test.txt\");\n+\n+        @Language(\"SQL\") String createTableSql = format(\"\" +\n+                        \"CREATE TABLE %s.%s.test_create_external \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgxNjA0Mw==", "bodyText": "since this ends up being formatted into string anyway, it should be enough to:\ntempDir.toURI().toASCIIString()", "url": "https://github.com/trinodb/trino/pull/2669#discussion_r372816043", "createdAt": "2020-01-30T08:36:07Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -2285,6 +2286,29 @@ public void testCreateExternalTableTextFileFieldSeparatorEscape()\n         deleteRecursively(tempDir.toPath(), ALLOW_INSECURE);\n     }\n \n+    @Test\n+    public void testCreateExternalTableWithCTASWritesDisabled()\n+            throws IOException\n+    {\n+        File tempDir = createTempDir();\n+        File dataFile = new File(tempDir, \"test.txt\");\n+\n+        @Language(\"SQL\") String createTableSql = format(\"\" +\n+                        \"CREATE TABLE %s.%s.test_create_external \" +\n+                        \"WITH (\\n\" +\n+                        \"   external_location = '%s',\\n\" +\n+                        \"   format = 'TEXTFILE',\\n\" +\n+                        \"   textfile_field_separator = U&'\\\\0001'\\n\" +\n+                        \") AS \" +\n+                        \"SELECT * FROM orders LIMIT 5\",\n+                getSession().getCatalog().get(),\n+                getSession().getSchema().get(),\n+                new Path(tempDir.toURI().toASCIIString()).toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgxNzEzNw==", "bodyText": "use nation and without LIMIT 5.\nnation has 25 rows only", "url": "https://github.com/trinodb/trino/pull/2669#discussion_r372817137", "createdAt": "2020-01-30T08:38:42Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -2285,6 +2286,29 @@ public void testCreateExternalTableTextFileFieldSeparatorEscape()\n         deleteRecursively(tempDir.toPath(), ALLOW_INSECURE);\n     }\n \n+    @Test\n+    public void testCreateExternalTableWithCTASWritesDisabled()\n+            throws IOException\n+    {\n+        File tempDir = createTempDir();\n+        File dataFile = new File(tempDir, \"test.txt\");\n+\n+        @Language(\"SQL\") String createTableSql = format(\"\" +\n+                        \"CREATE TABLE %s.%s.test_create_external \" +\n+                        \"WITH (\\n\" +\n+                        \"   external_location = '%s',\\n\" +\n+                        \"   format = 'TEXTFILE',\\n\" +\n+                        \"   textfile_field_separator = U&'\\\\0001'\\n\" +\n+                        \") AS \" +\n+                        \"SELECT * FROM orders LIMIT 5\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgxODE2Mw==", "bodyText": "I think we should also update the message, to indicate that this is not a permanent condition and may be subject to configuration change\nie change\nExternal tables cannot be created using CREATE TABLE AS\n\nto\nCannot create a non-managed Hive table using CREATE TABLE AS", "url": "https://github.com/trinodb/trino/pull/2669#discussion_r372818163", "createdAt": "2020-01-30T08:41:17Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -2285,6 +2286,29 @@ public void testCreateExternalTableTextFileFieldSeparatorEscape()\n         deleteRecursively(tempDir.toPath(), ALLOW_INSECURE);\n     }\n \n+    @Test\n+    public void testCreateExternalTableWithCTASWritesDisabled()\n+            throws IOException\n+    {\n+        File tempDir = createTempDir();\n+        File dataFile = new File(tempDir, \"test.txt\");\n+\n+        @Language(\"SQL\") String createTableSql = format(\"\" +\n+                        \"CREATE TABLE %s.%s.test_create_external \" +\n+                        \"WITH (\\n\" +\n+                        \"   external_location = '%s',\\n\" +\n+                        \"   format = 'TEXTFILE',\\n\" +\n+                        \"   textfile_field_separator = U&'\\\\0001'\\n\" +\n+                        \") AS \" +\n+                        \"SELECT * FROM orders LIMIT 5\",\n+                getSession().getCatalog().get(),\n+                getSession().getSchema().get(),\n+                new Path(tempDir.toURI().toASCIIString()).toString());\n+\n+        assertQueryFails(createTableSql, \"External tables cannot be created using CREATE TABLE AS\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgxOTM1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class TestHiveCreateExternalTables\n          \n          \n            \n            public class TestHiveCreateExternalTable", "url": "https://github.com/trinodb/trino/pull/2669#discussion_r372819355", "createdAt": "2020-01-30T08:44:11Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveCreateExternalTables.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package io.prestosql.plugin.hive;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.testing.AbstractTestQueryFramework;\n+import io.prestosql.testing.QueryRunner;\n+import org.apache.hadoop.fs.Path;\n+import org.intellij.lang.annotations.Language;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static com.google.common.io.Files.createTempDir;\n+import static com.google.common.io.MoreFiles.deleteRecursively;\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static io.prestosql.tpch.TpchTable.CUSTOMER;\n+import static io.prestosql.tpch.TpchTable.ORDERS;\n+import static java.lang.String.format;\n+\n+public class TestHiveCreateExternalTables", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgxOTk2Nw==", "bodyText": "This may be confusing, especially since the new query runner would be independent from class-level query runner.\nI am leaning towards keeping the test classes separate", "url": "https://github.com/trinodb/trino/pull/2669#discussion_r372819967", "createdAt": "2020-01-30T08:45:42Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveCreateExternalTables.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.testing.AbstractTestQueryFramework;\n+import io.prestosql.testing.QueryRunner;\n+import org.apache.hadoop.fs.Path;\n+import org.intellij.lang.annotations.Language;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static com.google.common.io.Files.createTempDir;\n+import static com.google.common.io.MoreFiles.deleteRecursively;\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static io.prestosql.tpch.TpchTable.CUSTOMER;\n+import static io.prestosql.tpch.TpchTable.ORDERS;\n+import static java.lang.String.format;\n+\n+public class TestHiveCreateExternalTables\n+        extends AbstractTestQueryFramework\n+{\n+    @Override\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        return HiveQueryRunner.createQueryRunner(\n+                ImmutableList.of(ORDERS, CUSTOMER),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(\"hive.non-managed-table-writes-enabled\", \"true\"),\n+                Optional.empty());\n+    }\n+\n+    @Test\n+    public void testCreateExternalTableWithCTASWritesEnabled()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcwMDM2MA=="}, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgyMDA3NA==", "bodyText": "all the comments from the other test method apply here", "url": "https://github.com/trinodb/trino/pull/2669#discussion_r372820074", "createdAt": "2020-01-30T08:45:55Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveCreateExternalTables.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package io.prestosql.plugin.hive;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.testing.AbstractTestQueryFramework;\n+import io.prestosql.testing.QueryRunner;\n+import org.apache.hadoop.fs.Path;\n+import org.intellij.lang.annotations.Language;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static com.google.common.io.Files.createTempDir;\n+import static com.google.common.io.MoreFiles.deleteRecursively;\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static io.prestosql.tpch.TpchTable.CUSTOMER;\n+import static io.prestosql.tpch.TpchTable.ORDERS;\n+import static java.lang.String.format;\n+\n+public class TestHiveCreateExternalTables\n+        extends AbstractTestQueryFramework\n+{\n+    @Override\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        return HiveQueryRunner.createQueryRunner(\n+                ImmutableList.of(ORDERS, CUSTOMER),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(\"hive.non-managed-table-writes-enabled\", \"true\"),\n+                Optional.empty());\n+    }\n+\n+    @Test\n+    public void testCreateExternalTableWithCTASWritesEnabled()\n+            throws IOException\n+    {\n+        File tempDir = createTempDir();\n+        File dataFile = new File(tempDir, \"test.txt\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgyMDMyNg==", "bodyText": "testCreateExternalTableWithData", "url": "https://github.com/trinodb/trino/pull/2669#discussion_r372820326", "createdAt": "2020-01-30T08:46:26Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveCreateExternalTables.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package io.prestosql.plugin.hive;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.testing.AbstractTestQueryFramework;\n+import io.prestosql.testing.QueryRunner;\n+import org.apache.hadoop.fs.Path;\n+import org.intellij.lang.annotations.Language;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static com.google.common.io.Files.createTempDir;\n+import static com.google.common.io.MoreFiles.deleteRecursively;\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static io.prestosql.tpch.TpchTable.CUSTOMER;\n+import static io.prestosql.tpch.TpchTable.ORDERS;\n+import static java.lang.String.format;\n+\n+public class TestHiveCreateExternalTables\n+        extends AbstractTestQueryFramework\n+{\n+    @Override\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        return HiveQueryRunner.createQueryRunner(\n+                ImmutableList.of(ORDERS, CUSTOMER),\n+                ImmutableMap.of(),\n+                \"sql-standard\",\n+                ImmutableMap.of(\"hive.non-managed-table-writes-enabled\", \"true\"),\n+                Optional.empty());\n+    }\n+\n+    @Test\n+    public void testCreateExternalTableWithCTASWritesEnabled()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMzQ4NjU4", "url": "https://github.com/trinodb/trino/pull/2669#pullrequestreview-351348658", "createdAt": "2020-01-31T08:21:33Z", "commit": null, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwODoyMTozM1rOFkEILw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwODoyMTozM1rOFkEILw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM2MDY4Nw==", "bodyText": "nit: we would typically static import a method like assertEqualsIgnoreOrder", "url": "https://github.com/trinodb/trino/pull/2669#discussion_r373360687", "createdAt": "2020-01-31T08:21:33Z", "author": {"login": "findepi"}, "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveCreateExternalTable.java", "diffHunk": "@@ -48,29 +49,24 @@ protected QueryRunner createQueryRunner()\n     }\n \n     @Test\n-    public void testCreateExternalTableWithCTASWritesEnabled()\n+    public void testCreateExternalTableWithData()\n             throws IOException\n     {\n         File tempDir = createTempDir();\n-        File dataFile = new File(tempDir, \"test.txt\");\n \n         @Language(\"SQL\") String createTableSql = format(\"\" +\n-                        \"CREATE TABLE %s.%s.test_create_external \" +\n-                        \"WITH (\\n\" +\n-                        \"   external_location = '%s',\\n\" +\n-                        \"   format = 'TEXTFILE',\\n\" +\n-                        \"   textfile_field_separator = U&'\\\\0001'\\n\" +\n-                        \") AS \" +\n-                        \"SELECT * FROM orders LIMIT 5\",\n-                getSession().getCatalog().get(),\n-                getSession().getSchema().get(),\n-                new Path(tempDir.toURI().toASCIIString()).toString());\n+                        \"CREATE TABLE test_create_external \" +\n+                        \"WITH (external_location = '%s') AS \" +\n+                        \"SELECT * FROM tpch.tiny.nation\",\n+                tempDir.toURI().toASCIIString());\n \n-        assertUpdate(createTableSql, 5);\n+        assertUpdate(createTableSql, 25);\n \n-        assertQuery(\"SELECT count(*) FROM test_create_external\", \"VALUES (5)\");\n-        assertUpdate(\"DROP TABLE test_create_external\");\n+        MaterializedResult expected = computeActual(\"SELECT * FROM tpch.tiny.nation\");\n+        MaterializedResult actual = computeActual(\"SELECT * FROM test_create_external\");\n+        Assertions.assertEqualsIgnoreOrder(actual.getMaterializedRows(), expected.getMaterializedRows());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMzUxNDc4", "url": "https://github.com/trinodb/trino/pull/2669#pullrequestreview-351351478", "createdAt": "2020-01-31T08:28:22Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwODoyODoyMlrOFkEQuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwODoyODoyMlrOFkEQuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM2Mjg3Mg==", "bodyText": "One more thing, I think here we should check both: writesToNonManagedTablesEnabled and createsOfNonManagedTablesEnabled", "url": "https://github.com/trinodb/trino/pull/2669#discussion_r373362872", "createdAt": "2020-01-31T08:28:22Z", "author": {"login": "findepi"}, "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1173,8 +1173,8 @@ public HiveOutputTableHandle beginCreateTable(ConnectorSession session, Connecto\n     {\n         verifyJvmTimeZone();\n \n-        if (getExternalLocation(tableMetadata.getProperties()) != null) {\n-            throw new PrestoException(NOT_SUPPORTED, \"External tables cannot be created using CREATE TABLE AS\");\n+        if (!writesToNonManagedTablesEnabled && getExternalLocation(tableMetadata.getProperties()) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "855a9d2df6fec0c7930033071532b2c42f6ed8d9", "author": {"user": {"login": "alexjo2144", "name": "Alexander Jo"}}, "url": "https://github.com/trinodb/trino/commit/855a9d2df6fec0c7930033071532b2c42f6ed8d9", "committedDate": "2020-01-31T16:10:12Z", "message": "Allow for CTAS  table creation to external tables when writes and creates are enabled.\n\nWhen hive.non-managed-table-writes-enabled and hive.non-managed-table-creates-enabled\nare both set to true, external tables can be created and inserted into. This change\nallows for that to be done in one step using the `CREATE TABLE AS` syntax."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "855a9d2df6fec0c7930033071532b2c42f6ed8d9", "author": {"user": {"login": "alexjo2144", "name": "Alexander Jo"}}, "url": "https://github.com/trinodb/trino/commit/855a9d2df6fec0c7930033071532b2c42f6ed8d9", "committedDate": "2020-01-31T16:10:12Z", "message": "Allow for CTAS  table creation to external tables when writes and creates are enabled.\n\nWhen hive.non-managed-table-writes-enabled and hive.non-managed-table-creates-enabled\nare both set to true, external tables can be created and inserted into. This change\nallows for that to be done in one step using the `CREATE TABLE AS` syntax."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNjExMjE5", "url": "https://github.com/trinodb/trino/pull/2669#pullrequestreview-351611219", "createdAt": "2020-01-31T16:11:10Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1725, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}