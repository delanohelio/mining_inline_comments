{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0NDcyMTAz", "number": 4996, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNjowOToyMlrOEdEWxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMToxMzoxNlrOEgV87w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4OTE1NTI0OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/TestRun.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNjowOToyMlrOHIA2hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNjowOToyMlrOHIA2hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE2NDYxMw==", "bodyText": "Of course this needs some cleanup yet.", "url": "https://github.com/trinodb/trino/pull/4996#discussion_r478164613", "createdAt": "2020-08-27T06:09:22Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/TestRun.java", "diffHunk": "@@ -167,20 +176,48 @@ public void run()\n \n         private Environment tryStartEnvironment()\n         {\n-            log.info(\"Pruning old environment(s)\");\n-            Environments.pruneEnvironment();\n-\n             Environment environment = getEnvironment();\n-            log.info(\"Starting the environment '%s'\", environment);\n-            environment.start();\n+\n+            if (!attach) {\n+                log.info(\"Pruning old environment(s)\");\n+                Environments.pruneEnvironment();\n+\n+                log.info(\"Starting the environment '%s'\", environment);\n+                environment.start();\n+            }\n+            else {\n+                DockerContainer tests = (DockerContainer) environment.getContainer(\"tests\");\n+                tests.clearDependencies();\n+                tests.setNetwork(new Network()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzcxMjc5OnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/TestRun.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMToyNToyOVrOHLqr8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMTowNzowN1rOHNJePQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5NTc2Mg==", "bodyText": "you can also enumerate networks using DockerClient: DockerClientFactory.instance().client().listNetworksCmd().withIdFilter(PRODUCT_TEST_LAUNCHER_NETWORK).exec()", "url": "https://github.com/trinodb/trino/pull/4996#discussion_r481995762", "createdAt": "2020-09-02T11:25:29Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/TestRun.java", "diffHunk": "@@ -168,21 +175,32 @@ public void run()\n \n         private Environment tryStartEnvironment()\n         {\n-            log.info(\"Pruning old environment(s)\");\n-            Environments.pruneEnvironment();\n-\n-            log.info(\"Creating environment '%s' with configuration %s\", environment, environmentConfig);\n             Environment environment = getEnvironment();\n-            log.info(\"Starting the environment '%s'\", environment);\n-            environment.start();\n+\n+            if (!attach) {\n+                log.info(\"Pruning old environment(s)\");\n+                Environments.pruneEnvironment();\n+\n+                log.info(\"Starting the environment '%s' with configuration %s\", this.environment, environmentConfig);\n+                environment.start();\n+            }\n+            else {\n+                DockerContainer tests = (DockerContainer) environment.getContainer(\"tests\");\n+                tests.clearDependencies();\n+                tests.setNetwork(new ExistingNetwork(Environment.PRODUCT_TEST_LAUNCHER_NETWORK));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5NTk2NA==", "bodyText": "That way you will be sure that network exists", "url": "https://github.com/trinodb/trino/pull/4996#discussion_r481995964", "createdAt": "2020-09-02T11:25:51Z", "author": {"login": "wendigo"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/TestRun.java", "diffHunk": "@@ -168,21 +175,32 @@ public void run()\n \n         private Environment tryStartEnvironment()\n         {\n-            log.info(\"Pruning old environment(s)\");\n-            Environments.pruneEnvironment();\n-\n-            log.info(\"Creating environment '%s' with configuration %s\", environment, environmentConfig);\n             Environment environment = getEnvironment();\n-            log.info(\"Starting the environment '%s'\", environment);\n-            environment.start();\n+\n+            if (!attach) {\n+                log.info(\"Pruning old environment(s)\");\n+                Environments.pruneEnvironment();\n+\n+                log.info(\"Starting the environment '%s' with configuration %s\", this.environment, environmentConfig);\n+                environment.start();\n+            }\n+            else {\n+                DockerContainer tests = (DockerContainer) environment.getContainer(\"tests\");\n+                tests.clearDependencies();\n+                tests.setNetwork(new ExistingNetwork(Environment.PRODUCT_TEST_LAUNCHER_NETWORK));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5NTc2Mg=="}, "originalCommit": null, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU0ODczMw==", "bodyText": "This adds validation (partial - network may exist but nothing else), but i won't free me from having ExistingNetwork class.\nI need org.testcontainers.containers.Network and not com.github.dockerjava.api.model.Network\ni am tempted to leave as is", "url": "https://github.com/trinodb/trino/pull/4996#discussion_r483548733", "createdAt": "2020-09-04T11:07:07Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/TestRun.java", "diffHunk": "@@ -168,21 +175,32 @@ public void run()\n \n         private Environment tryStartEnvironment()\n         {\n-            log.info(\"Pruning old environment(s)\");\n-            Environments.pruneEnvironment();\n-\n-            log.info(\"Creating environment '%s' with configuration %s\", environment, environmentConfig);\n             Environment environment = getEnvironment();\n-            log.info(\"Starting the environment '%s'\", environment);\n-            environment.start();\n+\n+            if (!attach) {\n+                log.info(\"Pruning old environment(s)\");\n+                Environments.pruneEnvironment();\n+\n+                log.info(\"Starting the environment '%s' with configuration %s\", this.environment, environmentConfig);\n+                environment.start();\n+            }\n+            else {\n+                DockerContainer tests = (DockerContainer) environment.getContainer(\"tests\");\n+                tests.clearDependencies();\n+                tests.setNetwork(new ExistingNetwork(Environment.PRODUCT_TEST_LAUNCHER_NETWORK));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5NTc2Mg=="}, "originalCommit": null, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzQ5NTUxOnYy", "diffSide": "RIGHT", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/testcontainers/ExistingNetwork.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMToxMzoxNlrOHNJn_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjoyMTowMVrOHNLatQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU1MTIzMA==", "bodyText": "maybe use it as message to the exception", "url": "https://github.com/trinodb/trino/pull/4996#discussion_r483551230", "createdAt": "2020-09-04T11:13:16Z", "author": {"login": "kokosing"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/testcontainers/ExistingNetwork.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.testcontainers;\n+\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+import org.testcontainers.containers.Network;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public final class ExistingNetwork\n+        implements Network\n+{\n+    private final String networkId;\n+\n+    public ExistingNetwork(String networkId)\n+    {\n+        this.networkId = requireNonNull(networkId, \"networkId is null\");\n+    }\n+\n+    @Override\n+    public String getId()\n+    {\n+        return networkId;\n+    }\n+\n+    @Override\n+    public void close() {}\n+\n+    @Override\n+    public Statement apply(Statement statement, Description description)\n+    {\n+        // junit4 integration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8360813e5133e79d90810722115755505b799d1"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4MDU5Nw==", "bodyText": "i tend to disagree with this.\nif someone uses this w junit4, they should just get unsupported exc", "url": "https://github.com/trinodb/trino/pull/4996#discussion_r483580597", "createdAt": "2020-09-04T12:21:01Z", "author": {"login": "findepi"}, "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/testcontainers/ExistingNetwork.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.testcontainers;\n+\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+import org.testcontainers.containers.Network;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public final class ExistingNetwork\n+        implements Network\n+{\n+    private final String networkId;\n+\n+    public ExistingNetwork(String networkId)\n+    {\n+        this.networkId = requireNonNull(networkId, \"networkId is null\");\n+    }\n+\n+    @Override\n+    public String getId()\n+    {\n+        return networkId;\n+    }\n+\n+    @Override\n+    public void close() {}\n+\n+    @Override\n+    public Statement apply(Statement statement, Description description)\n+    {\n+        // junit4 integration", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU1MTIzMA=="}, "originalCommit": {"oid": "a8360813e5133e79d90810722115755505b799d1"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3347, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}