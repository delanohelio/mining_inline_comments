{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0NjY1MTkz", "number": 3901, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMzoxOToxN1rOE8t8lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMzoxOToxN1rOE8t8lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTAyODA0OnYy", "diffSide": "RIGHT", "path": "languagetool-core/src/main/java/org/languagetool/rules/spelling/hunspell/HunspellRule.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMzoxOToxN1rOH5Ac1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMzo0NTo1OVrOH5BhSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUzODI2Mg==", "bodyText": "Do you know when this can happen? I wonder whether it makes sense to give out the error. in general, we tend to throw an exception instead.", "url": "https://github.com/languagetool-org/languagetool/pull/3901#discussion_r529538262", "createdAt": "2020-11-24T13:19:17Z", "author": {"login": "danielnaber"}, "path": "languagetool-core/src/main/java/org/languagetool/rules/spelling/hunspell/HunspellRule.java", "diffHunk": "@@ -181,59 +181,16 @@ protected boolean isQuotedCompound (AnalyzedSentence analyzedSentence, int idx,\n             messages.getString(\"desc_spelling_short\"));\n           ruleMatch.setType(RuleMatch.Type.UnknownWord);\n           if (userConfig == null || userConfig.getMaxSpellingSuggestions() == 0 || ruleMatches.size() <= userConfig.getMaxSpellingSuggestions()) {\n-            List<SuggestedReplacement> suggestions = SuggestedReplacement.convert(getSuggestions(cleanWord));\n-            if (word.endsWith(\".\")) {\n-              int pos = 1;\n-              for (String suggestion : getSuggestions(word)) {\n-                if (!suggestions.contains(suggestion)) {\n-                  suggestions.add(Math.min(pos, suggestions.size()), new SuggestedReplacement(suggestion.substring(0, suggestion.length()-1)));\n-                  pos += 2;  // we mix the lists, as we don't know which one is the better one\n+            ruleMatch.setLazySuggestedReplacements(() -> {\n+              try {\n+                synchronized (this) { // some getSuggestions overrides are thread-unsafe\n+                  return calcSuggestions(word, cleanWord);\n                 }\n+              } catch (IOException e) {\n+                logger.error(\"Error while calculating speller suggestions\", e);\n+                return Collections.singletonList(new SuggestedReplacement(\"Internal error: \" + e.getMessage()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b7270895577d7c042fce8f4f813c5273ce05f24"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1MzgxMg==", "bodyText": "The exception can be thrown from init(), but it seems init should be already done by the time getSuggestions is called (at least in the current codebase, I can imagine someone calling getSuggestions explicitly without preceding match). So if you believe it's safe, I can remove needsInit checks from getSuggestions.\nMy idea with message was to give users indication that something went wrong. I can rethrow a RuntimeException if you think it's better. MorfologikSpellerRule#appendLazySuggestions would need to be changed as well.", "url": "https://github.com/languagetool-org/languagetool/pull/3901#discussion_r529553812", "createdAt": "2020-11-24T13:43:02Z", "author": {"login": "donnerpeter"}, "path": "languagetool-core/src/main/java/org/languagetool/rules/spelling/hunspell/HunspellRule.java", "diffHunk": "@@ -181,59 +181,16 @@ protected boolean isQuotedCompound (AnalyzedSentence analyzedSentence, int idx,\n             messages.getString(\"desc_spelling_short\"));\n           ruleMatch.setType(RuleMatch.Type.UnknownWord);\n           if (userConfig == null || userConfig.getMaxSpellingSuggestions() == 0 || ruleMatches.size() <= userConfig.getMaxSpellingSuggestions()) {\n-            List<SuggestedReplacement> suggestions = SuggestedReplacement.convert(getSuggestions(cleanWord));\n-            if (word.endsWith(\".\")) {\n-              int pos = 1;\n-              for (String suggestion : getSuggestions(word)) {\n-                if (!suggestions.contains(suggestion)) {\n-                  suggestions.add(Math.min(pos, suggestions.size()), new SuggestedReplacement(suggestion.substring(0, suggestion.length()-1)));\n-                  pos += 2;  // we mix the lists, as we don't know which one is the better one\n+            ruleMatch.setLazySuggestedReplacements(() -> {\n+              try {\n+                synchronized (this) { // some getSuggestions overrides are thread-unsafe\n+                  return calcSuggestions(word, cleanWord);\n                 }\n+              } catch (IOException e) {\n+                logger.error(\"Error while calculating speller suggestions\", e);\n+                return Collections.singletonList(new SuggestedReplacement(\"Internal error: \" + e.getMessage()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUzODI2Mg=="}, "originalCommit": {"oid": "1b7270895577d7c042fce8f4f813c5273ce05f24"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1NTc4Nw==", "bodyText": "I can rethrow a RuntimeException if you think it's better.\n\nYes, I think it's better to go with the \"fail early\" approach that serves us well so far.", "url": "https://github.com/languagetool-org/languagetool/pull/3901#discussion_r529555787", "createdAt": "2020-11-24T13:45:59Z", "author": {"login": "danielnaber"}, "path": "languagetool-core/src/main/java/org/languagetool/rules/spelling/hunspell/HunspellRule.java", "diffHunk": "@@ -181,59 +181,16 @@ protected boolean isQuotedCompound (AnalyzedSentence analyzedSentence, int idx,\n             messages.getString(\"desc_spelling_short\"));\n           ruleMatch.setType(RuleMatch.Type.UnknownWord);\n           if (userConfig == null || userConfig.getMaxSpellingSuggestions() == 0 || ruleMatches.size() <= userConfig.getMaxSpellingSuggestions()) {\n-            List<SuggestedReplacement> suggestions = SuggestedReplacement.convert(getSuggestions(cleanWord));\n-            if (word.endsWith(\".\")) {\n-              int pos = 1;\n-              for (String suggestion : getSuggestions(word)) {\n-                if (!suggestions.contains(suggestion)) {\n-                  suggestions.add(Math.min(pos, suggestions.size()), new SuggestedReplacement(suggestion.substring(0, suggestion.length()-1)));\n-                  pos += 2;  // we mix the lists, as we don't know which one is the better one\n+            ruleMatch.setLazySuggestedReplacements(() -> {\n+              try {\n+                synchronized (this) { // some getSuggestions overrides are thread-unsafe\n+                  return calcSuggestions(word, cleanWord);\n                 }\n+              } catch (IOException e) {\n+                logger.error(\"Error while calculating speller suggestions\", e);\n+                return Collections.singletonList(new SuggestedReplacement(\"Internal error: \" + e.getMessage()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUzODI2Mg=="}, "originalCommit": {"oid": "1b7270895577d7c042fce8f4f813c5273ce05f24"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3667, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}