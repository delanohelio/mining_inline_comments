{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MjAzOTk1", "number": 2287, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQxMTowMTozM1rODVy-jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQxMTowMTozM1rODVy-jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MTgxOTAxOnYy", "diffSide": "RIGHT", "path": "languagetool-language-modules/ga/src/main/java/org/languagetool/rules/ga/SpecificCaseRule.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQxMTowMTozM1rOFaNitw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQxMTowNDo0NlrOFaNjNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAyOTE3NQ==", "bodyText": "Is this a 1:1 copy? In that case, we should introduce a class in core that all languages can derive from, to avoid duplication.", "url": "https://github.com/languagetool-org/languagetool/pull/2287#discussion_r363029175", "createdAt": "2020-01-04T11:01:33Z", "author": {"login": "danielnaber"}, "path": "languagetool-language-modules/ga/src/main/java/org/languagetool/rules/ga/SpecificCaseRule.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/* LanguageTool, a natural language style checker \n+ * Copyright (C) 2019 Daniel Naber (http://www.danielnaber.de)\n+ * \n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 2.1 of the License, or (at your option) any later version.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301\n+ * USA\n+ */\n+package org.languagetool.rules.ga;\n+\n+import org.languagetool.AnalyzedSentence;\n+import org.languagetool.AnalyzedTokenReadings;\n+import org.languagetool.JLanguageTool;\n+import org.languagetool.rules.*;\n+import org.languagetool.tagging.ga.Utils;\n+\n+import java.io.InputStream;\n+import java.util.*;\n+\n+/**\n+ * A rule that matches words which are complex and suggests easier to understand alternatives. \n+ * @since 4.8\n+ */\n+public class SpecificCaseRule extends Rule {\n+  \n+  private static final Set<String> phrases = new HashSet<>(loadPhrases(\"/ga/specific_case.txt\"));\n+  private static int maxLen;\n+\n+  private static List<String> loadPhrases(String path) {\n+    List<String> l = new ArrayList<>();\n+    InputStream file = JLanguageTool.getDataBroker().getFromResourceDirAsStream(path);\n+    try (Scanner scanner = new Scanner(file, \"UTF-8\")) {\n+      while (scanner.hasNextLine()) {\n+        String line = scanner.nextLine().trim();\n+        if (line.isEmpty() || line.startsWith(\"#\")) {\n+          continue;\n+        }\n+        int parts = line.split(\" \").length;\n+        maxLen = Math.max(parts, maxLen);\n+        l.add(line.trim());\n+      }\n+    }\n+    return l;\n+  }\n+\n+  private static final Map<String,String> lcToProperSpelling = new HashMap<>();\n+  static {\n+    for (String phrase : phrases) {\n+      lcToProperSpelling.put(phrase.toLowerCase(), phrase);\n+    }\n+  }\n+\n+  public SpecificCaseRule(ResourceBundle messages) {\n+    super(messages);\n+    super.setCategory(Categories.CASING.getCategory(messages));\n+    setLocQualityIssueType(ITSIssueType.Misspelling);\n+    addExamplePair(Example.wrong(\"Rugadh agus t\u00f3gadh i <marker>mb\u00e9al Feirste</marker> \u00e9.\"),\n+                   Example.fixed(\"Rugadh agus t\u00f3gadh i <marker>mB\u00e9al Feirste</marker> \u00e9.\"));\n+  }\n+\n+  @Override\n+  public final String getId() {\n+    return \"GA_SPECIFIC_CASE\";\n+  }\n+\n+  @Override\n+  public String getDescription() {\n+    return \"Checks upper/lower case spelling of some proper nouns\";\n+  }\n+\n+  @Override\n+  public RuleMatch[] match(AnalyzedSentence sentence) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6ac9f81d56145b35d108b71a67607f59652d594"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAyOTMwMQ==", "bodyText": "Not exactly, because the case checking for Irish is weird. For languages with normal casing, I think you could go with a class in core.", "url": "https://github.com/languagetool-org/languagetool/pull/2287#discussion_r363029301", "createdAt": "2020-01-04T11:04:46Z", "author": {"login": "jimregan"}, "path": "languagetool-language-modules/ga/src/main/java/org/languagetool/rules/ga/SpecificCaseRule.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/* LanguageTool, a natural language style checker \n+ * Copyright (C) 2019 Daniel Naber (http://www.danielnaber.de)\n+ * \n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 2.1 of the License, or (at your option) any later version.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301\n+ * USA\n+ */\n+package org.languagetool.rules.ga;\n+\n+import org.languagetool.AnalyzedSentence;\n+import org.languagetool.AnalyzedTokenReadings;\n+import org.languagetool.JLanguageTool;\n+import org.languagetool.rules.*;\n+import org.languagetool.tagging.ga.Utils;\n+\n+import java.io.InputStream;\n+import java.util.*;\n+\n+/**\n+ * A rule that matches words which are complex and suggests easier to understand alternatives. \n+ * @since 4.8\n+ */\n+public class SpecificCaseRule extends Rule {\n+  \n+  private static final Set<String> phrases = new HashSet<>(loadPhrases(\"/ga/specific_case.txt\"));\n+  private static int maxLen;\n+\n+  private static List<String> loadPhrases(String path) {\n+    List<String> l = new ArrayList<>();\n+    InputStream file = JLanguageTool.getDataBroker().getFromResourceDirAsStream(path);\n+    try (Scanner scanner = new Scanner(file, \"UTF-8\")) {\n+      while (scanner.hasNextLine()) {\n+        String line = scanner.nextLine().trim();\n+        if (line.isEmpty() || line.startsWith(\"#\")) {\n+          continue;\n+        }\n+        int parts = line.split(\" \").length;\n+        maxLen = Math.max(parts, maxLen);\n+        l.add(line.trim());\n+      }\n+    }\n+    return l;\n+  }\n+\n+  private static final Map<String,String> lcToProperSpelling = new HashMap<>();\n+  static {\n+    for (String phrase : phrases) {\n+      lcToProperSpelling.put(phrase.toLowerCase(), phrase);\n+    }\n+  }\n+\n+  public SpecificCaseRule(ResourceBundle messages) {\n+    super(messages);\n+    super.setCategory(Categories.CASING.getCategory(messages));\n+    setLocQualityIssueType(ITSIssueType.Misspelling);\n+    addExamplePair(Example.wrong(\"Rugadh agus t\u00f3gadh i <marker>mb\u00e9al Feirste</marker> \u00e9.\"),\n+                   Example.fixed(\"Rugadh agus t\u00f3gadh i <marker>mB\u00e9al Feirste</marker> \u00e9.\"));\n+  }\n+\n+  @Override\n+  public final String getId() {\n+    return \"GA_SPECIFIC_CASE\";\n+  }\n+\n+  @Override\n+  public String getDescription() {\n+    return \"Checks upper/lower case spelling of some proper nouns\";\n+  }\n+\n+  @Override\n+  public RuleMatch[] match(AnalyzedSentence sentence) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAyOTE3NQ=="}, "originalCommit": {"oid": "b6ac9f81d56145b35d108b71a67607f59652d594"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3752, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}