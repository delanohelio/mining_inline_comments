{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4Njg5MDk1", "number": 3834, "title": "decrease the number of line/column calculations", "bodyText": "precompute them just once for all sentences, not for each rule afresh\nuse this data to speedup text-level match anchoring\nThis gives me some 5-10% speedup for English", "createdAt": "2020-11-10T18:37:16Z", "url": "https://github.com/languagetool-org/languagetool/pull/3834", "merged": true, "mergeCommit": {"oid": "e25789fa35a62179a3f61810c5545ebec2a731a1"}, "closed": true, "closedAt": "2020-11-12T07:50:12Z", "author": {"login": "donnerpeter"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbKpFbgH2gAyNTE4Njg5MDk1OjU0YmFmYjM1N2E2MmYzODc2ZDg2NjU3ZjY3NTIxZTVjMTkyNTFkOTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbPqscAH2gAyNTE4Njg5MDk1OjcwYzRkZTY4N2JkY2Q1NmIxYzRjMjgxNzQ1ZGM0MzQyNjQxOWFjNWE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "54bafb357a62f3876d86657f67521e5c19251d91", "author": {"user": {"login": "donnerpeter", "name": "Peter Gromov"}}, "url": "https://github.com/languagetool-org/languagetool/commit/54bafb357a62f3876d86657f67521e5c19251d91", "committedDate": "2020-11-10T14:57:07Z", "message": "decrease the number of line/column calculations\n\nprecompute them just once for all sentences, not for each rule afresh\nuse this data to speedup text-level match anchoring"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NTcwNjM2", "url": "https://github.com/languagetool-org/languagetool/pull/3834#pullrequestreview-527570636", "createdAt": "2020-11-10T20:13:10Z", "commit": {"oid": "54bafb357a62f3876d86657f67521e5c19251d91"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDoxMzoxMFrOHwt6lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDoxMzoxMFrOHwt6lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg0NTk3Mg==", "bodyText": "This operator is not very common, could you add a comment?", "url": "https://github.com/languagetool-org/languagetool/pull/3834#discussion_r520845972", "createdAt": "2020-11-10T20:13:10Z", "author": {"login": "danielnaber"}, "path": "languagetool-core/src/main/java/org/languagetool/JLanguageTool.java", "diffHunk": "@@ -1772,56 +1806,37 @@ public static void removeTemporaryFiles() {\n                     \", text length: \" + annotatedText.getPlainText().length());\n             //        \", text length: \" + annotatedText.getPlainText().length() + \", common word count: \" + commonWords.getKnownWordsPerLanguage(annotatedText.getPlainText()));\n           }\n-          charCount += sentence.length();\n-          lineCount += countLineBreaks(sentence);\n-\n-          // calculate matching column:\n-          int lineBreakPos = sentence.lastIndexOf('\\n');\n-          if (lineBreakPos == -1) {\n-            columnCount += sentence.length();\n-          } else {\n-            if (lineBreakPos == 0) {\n-              columnCount = sentence.length();\n-              if (!language.getSentenceTokenizer().singleLineBreaksMarksPara()) {\n-                columnCount--;\n-              }\n-            } else {\n-              columnCount = sentence.length() - lineBreakPos;\n-            }\n-          }\n         } catch (ErrorRateTooHighException e) {\n           throw e;\n         } catch (Exception e) {\n           throw new RuntimeException(\"Could not check sentence (language: \" + language + \"): <sentcontent>\"\n-                  + StringUtils.abbreviate(analyzedSentence.toTextString(), 500) + \"</sentcontent>\", e);\n+                  + StringUtils.abbreviate(sentence.analyzed.toTextString(), 500) + \"</sentcontent>\", e);\n         }\n       }\n       return ruleMatches;\n     }\n \n-    private LineColumnRange getLineColumnRange(RuleMatch match) {\n-      LineColumnPosition fromPos = new LineColumnPosition(-1, -1);\n-      LineColumnPosition toPos = new LineColumnPosition(-1, -1);\n-      LineColumnPosition pos = new LineColumnPosition(0, 0);\n-      int charCount = 0;\n-      for (AnalyzedSentence analyzedSentence : analyzedSentences) {\n-        for (AnalyzedTokenReadings readings : analyzedSentence.getTokens()) {\n-          String token = readings.getToken();\n-          if (\"\\n\".equals(token)) {\n-            pos.line++;\n-            pos.column = 0;\n-          }\n-          pos.column += token.length();\n-          charCount += token.length();\n-          if (charCount == match.getFromPos()) {\n-            fromPos = new LineColumnPosition(pos.line, pos.column);\n-          }\n-          if (charCount == match.getToPos()) {\n-            toPos = new LineColumnPosition(pos.line, pos.column);\n-          }\n-        }\n+    private LineColumnPosition findLineColumn(int offset) {\n+      if (sentences.isEmpty()) return new LineColumnPosition(0, 0);\n+\n+      SentenceData sentence = findSentenceContaining(offset);\n+      String prefix = sentence.text.substring(0, offset - sentence.startOffset);\n+      return new LineColumnPosition(\n+        sentence.startLine + countLineBreaks(prefix),\n+        processColumnChange(sentence.startColumn, prefix));\n+    }\n+\n+    private SentenceData findSentenceContaining(int offset) {\n+      int low = 0;\n+      int high = sentences.size() - 1;\n+      while (low <= high) {\n+        int mid = (low + high) >>> 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54bafb357a62f3876d86657f67521e5c19251d91"}, "originalPosition": 269}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NTkyOTM1", "url": "https://github.com/languagetool-org/languagetool/pull/3834#pullrequestreview-527592935", "createdAt": "2020-11-10T20:45:47Z", "commit": {"oid": "54bafb357a62f3876d86657f67521e5c19251d91"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDo0NTo0N1rOHwu8_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDo0NTo0N1rOHwu8_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg2Mjk3Mg==", "bodyText": "Here's an inconsistency. Some clients expect column to be 0-based (as in javadoc) and some \u2014 1-based. From the history I've seen that the similar condition in the previous version of code was a hack to make some tests happy (since they're using deprecated API anyway), so I've decided to create an equivalent.", "url": "https://github.com/languagetool-org/languagetool/pull/3834#discussion_r520862972", "createdAt": "2020-11-10T20:45:47Z", "author": {"login": "donnerpeter"}, "path": "languagetool-core/src/main/java/org/languagetool/JLanguageTool.java", "diffHunk": "@@ -1703,14 +1743,10 @@ public static void removeTemporaryFiles() {\n             }\n             RuleMatch newMatch = new RuleMatch(match);\n             newMatch.setOffsetPosition(newFromPos, newToPos);\n-            newMatch.setLine(range.from.line);\n-            newMatch.setEndLine(range.to.line);\n-            if (match.getLine() == 0) {\n-              newMatch.setColumn(range.from.column + 1);\n-            } else {\n-              newMatch.setColumn(range.from.column);\n-            }\n-            newMatch.setEndColumn(range.to.column);\n+            newMatch.setLine(from.line);\n+            newMatch.setEndLine(to.line);\n+            newMatch.setColumn(from.column - (from.line == 0 ? 1 : 0));\n+            newMatch.setEndColumn(to.column - (to.line == 0 ? 1 : 0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54bafb357a62f3876d86657f67521e5c19251d91"}, "originalPosition": 145}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70c4de687bdcd56b1c4c281745dc43426419ac5a", "author": {"user": {"login": "donnerpeter", "name": "Peter Gromov"}}, "url": "https://github.com/languagetool-org/languagetool/commit/70c4de687bdcd56b1c4c281745dc43426419ac5a", "committedDate": "2020-11-10T20:48:24Z", "message": "binary search: make division by 2 more obvious"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2463, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}