{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5NjAzNjIx", "number": 584, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTowMzowM1rOEltI-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMTo0NTozMlrOEnnlgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTcyMzQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/twilio/rest/api/v2010/account/CallReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTowMzowM1rOHVUz2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzoyMDozOFrOHVa8-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEyMzA5OA==", "bodyText": "\"Range\" is not correct. Where is this coming from?", "url": "https://github.com/twilio/twilio-java/pull/584#discussion_r492123098", "createdAt": "2020-09-21T15:03:03Z", "author": {"login": "childish-sambino"}, "path": "src/main/java/com/twilio/rest/api/v2010/account/CallReader.java", "diffHunk": "@@ -321,20 +285,12 @@ private void addQueryParams(final Request request) {\n             request.addQueryParam(\"Status\", status.toString());\n         }\n \n-        if (absoluteStartTime != null) {\n-            request.addQueryParam(\"StartTime\", absoluteStartTime.toString(Request.QUERY_STRING_DATE_TIME_FORMAT));\n-        } else if (rangeStartTime != null) {\n-            request.addQueryDateTimeRange(\"StartTime\", rangeStartTime);\n-        }\n-\n-        if (absoluteEndTime != null) {\n-            request.addQueryParam(\"EndTime\", absoluteEndTime.toString(Request.QUERY_STRING_DATE_TIME_FORMAT));\n-        } else if (rangeEndTime != null) {\n-            request.addQueryDateTimeRange(\"EndTime\", rangeEndTime);\n+        if (startTime != null || endTime != null) {\n+            request.addQueryDateTimeRange(\"Range\", startTime, endTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fd848fb876640dfa04dfcad5460ffd3caf302ef"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyMzczNg==", "bodyText": "This was a mistake, should be \"EndTime\", will fix.", "url": "https://github.com/twilio/twilio-java/pull/584#discussion_r492223736", "createdAt": "2020-09-21T17:20:38Z", "author": {"login": "thinkingserious"}, "path": "src/main/java/com/twilio/rest/api/v2010/account/CallReader.java", "diffHunk": "@@ -321,20 +285,12 @@ private void addQueryParams(final Request request) {\n             request.addQueryParam(\"Status\", status.toString());\n         }\n \n-        if (absoluteStartTime != null) {\n-            request.addQueryParam(\"StartTime\", absoluteStartTime.toString(Request.QUERY_STRING_DATE_TIME_FORMAT));\n-        } else if (rangeStartTime != null) {\n-            request.addQueryDateTimeRange(\"StartTime\", rangeStartTime);\n-        }\n-\n-        if (absoluteEndTime != null) {\n-            request.addQueryParam(\"EndTime\", absoluteEndTime.toString(Request.QUERY_STRING_DATE_TIME_FORMAT));\n-        } else if (rangeEndTime != null) {\n-            request.addQueryDateTimeRange(\"EndTime\", rangeEndTime);\n+        if (startTime != null || endTime != null) {\n+            request.addQueryDateTimeRange(\"Range\", startTime, endTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEyMzA5OA=="}, "originalCommit": {"oid": "3fd848fb876640dfa04dfcad5460ffd3caf302ef"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTczMzI5OnYy", "diffSide": "LEFT", "path": "src/main/java/com/twilio/rest/api/v2010/account/CallReader.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTowNDo0NlrOHVU6HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMTozMDozNFrOHVjHqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEyNDcwMQ==", "bodyText": "This removes functionality where I could before provide a single EndTime rather than needing to provide both upper and lower bound on the end time.", "url": "https://github.com/twilio/twilio-java/pull/584#discussion_r492124701", "createdAt": "2020-09-21T15:04:46Z", "author": {"login": "childish-sambino"}, "path": "src/main/java/com/twilio/rest/api/v2010/account/CallReader.java", "diffHunk": "@@ -321,20 +285,12 @@ private void addQueryParams(final Request request) {\n             request.addQueryParam(\"Status\", status.toString());\n         }\n \n-        if (absoluteStartTime != null) {\n-            request.addQueryParam(\"StartTime\", absoluteStartTime.toString(Request.QUERY_STRING_DATE_TIME_FORMAT));\n-        } else if (rangeStartTime != null) {\n-            request.addQueryDateTimeRange(\"StartTime\", rangeStartTime);\n-        }\n-\n-        if (absoluteEndTime != null) {\n-            request.addQueryParam(\"EndTime\", absoluteEndTime.toString(Request.QUERY_STRING_DATE_TIME_FORMAT));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fd848fb876640dfa04dfcad5460ffd3caf302ef"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIzODQzOA==", "bodyText": "You can still call addQueryParam as above; however, calling addQueryDateTimeRange should be transparent to the caller since if only endTime is defined, we achieve the same effect as calling addQueryParam.\nAre you proposing that we create an additional function that sits on top of addQueryParam, something along the lines of addQueryEndDateTime? Or in these cases, just use addQueryParam as before?", "url": "https://github.com/twilio/twilio-java/pull/584#discussion_r492238438", "createdAt": "2020-09-21T17:45:08Z", "author": {"login": "thinkingserious"}, "path": "src/main/java/com/twilio/rest/api/v2010/account/CallReader.java", "diffHunk": "@@ -321,20 +285,12 @@ private void addQueryParams(final Request request) {\n             request.addQueryParam(\"Status\", status.toString());\n         }\n \n-        if (absoluteStartTime != null) {\n-            request.addQueryParam(\"StartTime\", absoluteStartTime.toString(Request.QUERY_STRING_DATE_TIME_FORMAT));\n-        } else if (rangeStartTime != null) {\n-            request.addQueryDateTimeRange(\"StartTime\", rangeStartTime);\n-        }\n-\n-        if (absoluteEndTime != null) {\n-            request.addQueryParam(\"EndTime\", absoluteEndTime.toString(Request.QUERY_STRING_DATE_TIME_FORMAT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEyNDcwMQ=="}, "originalCommit": {"oid": "3fd848fb876640dfa04dfcad5460ffd3caf302ef"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2NDM1OA==", "bodyText": "No, I'm saying I used to be able to call setStartTime and it would add the query param StartTime=. Now it does EndTime>= I'm guessing?", "url": "https://github.com/twilio/twilio-java/pull/584#discussion_r492264358", "createdAt": "2020-09-21T18:31:04Z", "author": {"login": "childish-sambino"}, "path": "src/main/java/com/twilio/rest/api/v2010/account/CallReader.java", "diffHunk": "@@ -321,20 +285,12 @@ private void addQueryParams(final Request request) {\n             request.addQueryParam(\"Status\", status.toString());\n         }\n \n-        if (absoluteStartTime != null) {\n-            request.addQueryParam(\"StartTime\", absoluteStartTime.toString(Request.QUERY_STRING_DATE_TIME_FORMAT));\n-        } else if (rangeStartTime != null) {\n-            request.addQueryDateTimeRange(\"StartTime\", rangeStartTime);\n-        }\n-\n-        if (absoluteEndTime != null) {\n-            request.addQueryParam(\"EndTime\", absoluteEndTime.toString(Request.QUERY_STRING_DATE_TIME_FORMAT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEyNDcwMQ=="}, "originalCommit": {"oid": "3fd848fb876640dfa04dfcad5460ffd3caf302ef"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI4NTIyOQ==", "bodyText": "This is the current behavior when we just set the startTime and this example for setting just the endTime. And here is how we did it before.", "url": "https://github.com/twilio/twilio-java/pull/584#discussion_r492285229", "createdAt": "2020-09-21T19:09:02Z", "author": {"login": "thinkingserious"}, "path": "src/main/java/com/twilio/rest/api/v2010/account/CallReader.java", "diffHunk": "@@ -321,20 +285,12 @@ private void addQueryParams(final Request request) {\n             request.addQueryParam(\"Status\", status.toString());\n         }\n \n-        if (absoluteStartTime != null) {\n-            request.addQueryParam(\"StartTime\", absoluteStartTime.toString(Request.QUERY_STRING_DATE_TIME_FORMAT));\n-        } else if (rangeStartTime != null) {\n-            request.addQueryDateTimeRange(\"StartTime\", rangeStartTime);\n-        }\n-\n-        if (absoluteEndTime != null) {\n-            request.addQueryParam(\"EndTime\", absoluteEndTime.toString(Request.QUERY_STRING_DATE_TIME_FORMAT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEyNDcwMQ=="}, "originalCommit": {"oid": "3fd848fb876640dfa04dfcad5460ffd3caf302ef"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMwNTQ1NQ==", "bodyText": "Those are Request examples. I'm talking about the CallReader interface.", "url": "https://github.com/twilio/twilio-java/pull/584#discussion_r492305455", "createdAt": "2020-09-21T19:46:44Z", "author": {"login": "childish-sambino"}, "path": "src/main/java/com/twilio/rest/api/v2010/account/CallReader.java", "diffHunk": "@@ -321,20 +285,12 @@ private void addQueryParams(final Request request) {\n             request.addQueryParam(\"Status\", status.toString());\n         }\n \n-        if (absoluteStartTime != null) {\n-            request.addQueryParam(\"StartTime\", absoluteStartTime.toString(Request.QUERY_STRING_DATE_TIME_FORMAT));\n-        } else if (rangeStartTime != null) {\n-            request.addQueryDateTimeRange(\"StartTime\", rangeStartTime);\n-        }\n-\n-        if (absoluteEndTime != null) {\n-            request.addQueryParam(\"EndTime\", absoluteEndTime.toString(Request.QUERY_STRING_DATE_TIME_FORMAT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEyNDcwMQ=="}, "originalCommit": {"oid": "3fd848fb876640dfa04dfcad5460ffd3caf302ef"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMzOTkyMQ==", "bodyText": "Ah, how about replacing setStartTime() and setEndTime() with setAbsoluteStartTime(), setAbsoluteEndTime(), setRangeStartTime() and setRangeEndTime()?", "url": "https://github.com/twilio/twilio-java/pull/584#discussion_r492339921", "createdAt": "2020-09-21T20:53:51Z", "author": {"login": "thinkingserious"}, "path": "src/main/java/com/twilio/rest/api/v2010/account/CallReader.java", "diffHunk": "@@ -321,20 +285,12 @@ private void addQueryParams(final Request request) {\n             request.addQueryParam(\"Status\", status.toString());\n         }\n \n-        if (absoluteStartTime != null) {\n-            request.addQueryParam(\"StartTime\", absoluteStartTime.toString(Request.QUERY_STRING_DATE_TIME_FORMAT));\n-        } else if (rangeStartTime != null) {\n-            request.addQueryDateTimeRange(\"StartTime\", rangeStartTime);\n-        }\n-\n-        if (absoluteEndTime != null) {\n-            request.addQueryParam(\"EndTime\", absoluteEndTime.toString(Request.QUERY_STRING_DATE_TIME_FORMAT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEyNDcwMQ=="}, "originalCommit": {"oid": "3fd848fb876640dfa04dfcad5460ffd3caf302ef"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0NDM5OQ==", "bodyText": "Why can't we use what all the other languages use? Examples: https://www.twilio.com/docs/sms/api/message-resource?code-sample=code-read-list-messages-filter-by-before-sent-date&code-language=Ruby&code-sdk-version=5.x\nsetStartTime, setStartTimeBefore, setStartTimeAfter.", "url": "https://github.com/twilio/twilio-java/pull/584#discussion_r492344399", "createdAt": "2020-09-21T21:02:49Z", "author": {"login": "childish-sambino"}, "path": "src/main/java/com/twilio/rest/api/v2010/account/CallReader.java", "diffHunk": "@@ -321,20 +285,12 @@ private void addQueryParams(final Request request) {\n             request.addQueryParam(\"Status\", status.toString());\n         }\n \n-        if (absoluteStartTime != null) {\n-            request.addQueryParam(\"StartTime\", absoluteStartTime.toString(Request.QUERY_STRING_DATE_TIME_FORMAT));\n-        } else if (rangeStartTime != null) {\n-            request.addQueryDateTimeRange(\"StartTime\", rangeStartTime);\n-        }\n-\n-        if (absoluteEndTime != null) {\n-            request.addQueryParam(\"EndTime\", absoluteEndTime.toString(Request.QUERY_STRING_DATE_TIME_FORMAT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEyNDcwMQ=="}, "originalCommit": {"oid": "3fd848fb876640dfa04dfcad5460ffd3caf302ef"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM1NjUwMA==", "bodyText": "The biggest difference is that in other languages we can pass named parameters. In the closest implementation (C#), we have a builder that sorts the date/time stuff.\nIn the Java case, we can keep the building of the query params in addQueryParams and then add the variables startTime, startTimeBefore, startTimeAfter, endTimeBefore, endTime and endTimeAfter along with their getters & setters. How does that implementation sound?", "url": "https://github.com/twilio/twilio-java/pull/584#discussion_r492356500", "createdAt": "2020-09-21T21:28:26Z", "author": {"login": "thinkingserious"}, "path": "src/main/java/com/twilio/rest/api/v2010/account/CallReader.java", "diffHunk": "@@ -321,20 +285,12 @@ private void addQueryParams(final Request request) {\n             request.addQueryParam(\"Status\", status.toString());\n         }\n \n-        if (absoluteStartTime != null) {\n-            request.addQueryParam(\"StartTime\", absoluteStartTime.toString(Request.QUERY_STRING_DATE_TIME_FORMAT));\n-        } else if (rangeStartTime != null) {\n-            request.addQueryDateTimeRange(\"StartTime\", rangeStartTime);\n-        }\n-\n-        if (absoluteEndTime != null) {\n-            request.addQueryParam(\"EndTime\", absoluteEndTime.toString(Request.QUERY_STRING_DATE_TIME_FORMAT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEyNDcwMQ=="}, "originalCommit": {"oid": "3fd848fb876640dfa04dfcad5460ffd3caf302ef"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM1NzU0Nw==", "bodyText": "That's fine. As long as users can still individually provide startTime, startTimeBefore, and startTimeAfter.", "url": "https://github.com/twilio/twilio-java/pull/584#discussion_r492357547", "createdAt": "2020-09-21T21:30:34Z", "author": {"login": "childish-sambino"}, "path": "src/main/java/com/twilio/rest/api/v2010/account/CallReader.java", "diffHunk": "@@ -321,20 +285,12 @@ private void addQueryParams(final Request request) {\n             request.addQueryParam(\"Status\", status.toString());\n         }\n \n-        if (absoluteStartTime != null) {\n-            request.addQueryParam(\"StartTime\", absoluteStartTime.toString(Request.QUERY_STRING_DATE_TIME_FORMAT));\n-        } else if (rangeStartTime != null) {\n-            request.addQueryDateTimeRange(\"StartTime\", rangeStartTime);\n-        }\n-\n-        if (absoluteEndTime != null) {\n-            request.addQueryParam(\"EndTime\", absoluteEndTime.toString(Request.QUERY_STRING_DATE_TIME_FORMAT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEyNDcwMQ=="}, "originalCommit": {"oid": "3fd848fb876640dfa04dfcad5460ffd3caf302ef"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NDkzMjI3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/twilio/rest/api/v2010/account/CallReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNzo1OTowN1rOHWGC6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMDozNDozOFrOHWLXIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkyOTc3MQ==", "bodyText": "This should nullify this.startTime, and setStartTime should nullify this.startTimeBefore/After.", "url": "https://github.com/twilio/twilio-java/pull/584#discussion_r492929771", "createdAt": "2020-09-22T17:59:07Z", "author": {"login": "childish-sambino"}, "path": "src/main/java/com/twilio/rest/api/v2010/account/CallReader.java", "diffHunk": "@@ -127,46 +131,21 @@ public CallReader setStatus(final Call.Status status) {\n      * `StartTime&gt;=YYYY-MM-DD` to read calls that started on or after midnight of\n      * this date..\n      *\n-     * @param absoluteStartTime Only include calls that started on this date\n+     * @param startTime Only include calls that started on this date\n      * @return this\n      */\n-    public CallReader setStartTime(final DateTime absoluteStartTime) {\n-        this.rangeStartTime = null;\n-        this.absoluteStartTime = absoluteStartTime;\n+    public CallReader setStartTime(final ZonedDateTime startTime) {\n+        this.startTime = startTime;\n         return this;\n     }\n \n-    /**\n-     * Only include calls that started on this date. Specify a date as `YYYY-MM-DD`\n-     * in GMT, for example: `2009-07-06`, to read only calls that started on this\n-     * date. You can also specify an inequality, such as `StartTime&lt;=YYYY-MM-DD`,\n-     * to read calls that started on or before midnight of this date, and\n-     * `StartTime&gt;=YYYY-MM-DD` to read calls that started on or after midnight of\n-     * this date..\n-     *\n-     * @param rangeStartTime Only include calls that started on this date\n-     * @return this\n-     */\n-    public CallReader setStartTime(final Range<DateTime> rangeStartTime) {\n-        this.absoluteStartTime = null;\n-        this.rangeStartTime = rangeStartTime;\n+    public CallReader setStartTimeBefore(final ZonedDateTime startTimeBefore) {\n+        this.startTimeBefore = startTimeBefore;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2f66d69668af4389122d53f79e9eb0bb87faf5f"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxNjg2Ng==", "bodyText": "Ah, same for the other methods too, correct? I'll add some tests to verify this functionality.", "url": "https://github.com/twilio/twilio-java/pull/584#discussion_r493016866", "createdAt": "2020-09-22T20:34:38Z", "author": {"login": "thinkingserious"}, "path": "src/main/java/com/twilio/rest/api/v2010/account/CallReader.java", "diffHunk": "@@ -127,46 +131,21 @@ public CallReader setStatus(final Call.Status status) {\n      * `StartTime&gt;=YYYY-MM-DD` to read calls that started on or after midnight of\n      * this date..\n      *\n-     * @param absoluteStartTime Only include calls that started on this date\n+     * @param startTime Only include calls that started on this date\n      * @return this\n      */\n-    public CallReader setStartTime(final DateTime absoluteStartTime) {\n-        this.rangeStartTime = null;\n-        this.absoluteStartTime = absoluteStartTime;\n+    public CallReader setStartTime(final ZonedDateTime startTime) {\n+        this.startTime = startTime;\n         return this;\n     }\n \n-    /**\n-     * Only include calls that started on this date. Specify a date as `YYYY-MM-DD`\n-     * in GMT, for example: `2009-07-06`, to read only calls that started on this\n-     * date. You can also specify an inequality, such as `StartTime&lt;=YYYY-MM-DD`,\n-     * to read calls that started on or before midnight of this date, and\n-     * `StartTime&gt;=YYYY-MM-DD` to read calls that started on or after midnight of\n-     * this date..\n-     *\n-     * @param rangeStartTime Only include calls that started on this date\n-     * @return this\n-     */\n-    public CallReader setStartTime(final Range<DateTime> rangeStartTime) {\n-        this.absoluteStartTime = null;\n-        this.rangeStartTime = rangeStartTime;\n+    public CallReader setStartTimeBefore(final ZonedDateTime startTimeBefore) {\n+        this.startTimeBefore = startTimeBefore;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkyOTc3MQ=="}, "originalCommit": {"oid": "b2f66d69668af4389122d53f79e9eb0bb87faf5f"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTEzNDE2OnYy", "diffSide": "LEFT", "path": "src/main/java/com/twilio/rest/api/v2010/account/CallReader.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODo1MjowNFrOHWH-5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMToyMzo0MlrOHWM52g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk2MTUxMQ==", "bodyText": "What happened to these docs? They provide context for the difference between startTime and startTimeBefore, etc.", "url": "https://github.com/twilio/twilio-java/pull/584#discussion_r492961511", "createdAt": "2020-09-22T18:52:04Z", "author": {"login": "eshanholtz"}, "path": "src/main/java/com/twilio/rest/api/v2010/account/CallReader.java", "diffHunk": "@@ -127,46 +131,21 @@ public CallReader setStatus(final Call.Status status) {\n      * `StartTime&gt;=YYYY-MM-DD` to read calls that started on or after midnight of\n      * this date..\n      *\n-     * @param absoluteStartTime Only include calls that started on this date\n+     * @param startTime Only include calls that started on this date\n      * @return this\n      */\n-    public CallReader setStartTime(final DateTime absoluteStartTime) {\n-        this.rangeStartTime = null;\n-        this.absoluteStartTime = absoluteStartTime;\n+    public CallReader setStartTime(final ZonedDateTime startTime) {\n+        this.startTime = startTime;\n         return this;\n     }\n \n-    /**\n-     * Only include calls that started on this date. Specify a date as `YYYY-MM-DD`\n-     * in GMT, for example: `2009-07-06`, to read only calls that started on this\n-     * date. You can also specify an inequality, such as `StartTime&lt;=YYYY-MM-DD`,\n-     * to read calls that started on or before midnight of this date, and\n-     * `StartTime&gt;=YYYY-MM-DD` to read calls that started on or after midnight of\n-     * this date..", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2f66d69668af4389122d53f79e9eb0bb87faf5f"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk2MzA3Ng==", "bodyText": "They're up above on setStartTime. It doesn't really make sense on any of these methods specifically since it's talking about StartTime&gt;=YYYY-MM-DD and the like.", "url": "https://github.com/twilio/twilio-java/pull/584#discussion_r492963076", "createdAt": "2020-09-22T18:54:39Z", "author": {"login": "childish-sambino"}, "path": "src/main/java/com/twilio/rest/api/v2010/account/CallReader.java", "diffHunk": "@@ -127,46 +131,21 @@ public CallReader setStatus(final Call.Status status) {\n      * `StartTime&gt;=YYYY-MM-DD` to read calls that started on or after midnight of\n      * this date..\n      *\n-     * @param absoluteStartTime Only include calls that started on this date\n+     * @param startTime Only include calls that started on this date\n      * @return this\n      */\n-    public CallReader setStartTime(final DateTime absoluteStartTime) {\n-        this.rangeStartTime = null;\n-        this.absoluteStartTime = absoluteStartTime;\n+    public CallReader setStartTime(final ZonedDateTime startTime) {\n+        this.startTime = startTime;\n         return this;\n     }\n \n-    /**\n-     * Only include calls that started on this date. Specify a date as `YYYY-MM-DD`\n-     * in GMT, for example: `2009-07-06`, to read only calls that started on this\n-     * date. You can also specify an inequality, such as `StartTime&lt;=YYYY-MM-DD`,\n-     * to read calls that started on or before midnight of this date, and\n-     * `StartTime&gt;=YYYY-MM-DD` to read calls that started on or after midnight of\n-     * this date..", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk2MTUxMQ=="}, "originalCommit": {"oid": "b2f66d69668af4389122d53f79e9eb0bb87faf5f"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwNzg0OA==", "bodyText": "I think some clarification that the Before() maps to StartTime&lt;=YYYY-MM-DD and After maps to StartTime&gt;=YYYY-MM-DD would be helpful in these situations. Yes the docs say that you can specify the inequality, but they're not on the methods that actually allow you to use that functionality.", "url": "https://github.com/twilio/twilio-java/pull/584#discussion_r493007848", "createdAt": "2020-09-22T20:18:01Z", "author": {"login": "eshanholtz"}, "path": "src/main/java/com/twilio/rest/api/v2010/account/CallReader.java", "diffHunk": "@@ -127,46 +131,21 @@ public CallReader setStatus(final Call.Status status) {\n      * `StartTime&gt;=YYYY-MM-DD` to read calls that started on or after midnight of\n      * this date..\n      *\n-     * @param absoluteStartTime Only include calls that started on this date\n+     * @param startTime Only include calls that started on this date\n      * @return this\n      */\n-    public CallReader setStartTime(final DateTime absoluteStartTime) {\n-        this.rangeStartTime = null;\n-        this.absoluteStartTime = absoluteStartTime;\n+    public CallReader setStartTime(final ZonedDateTime startTime) {\n+        this.startTime = startTime;\n         return this;\n     }\n \n-    /**\n-     * Only include calls that started on this date. Specify a date as `YYYY-MM-DD`\n-     * in GMT, for example: `2009-07-06`, to read only calls that started on this\n-     * date. You can also specify an inequality, such as `StartTime&lt;=YYYY-MM-DD`,\n-     * to read calls that started on or before midnight of this date, and\n-     * `StartTime&gt;=YYYY-MM-DD` to read calls that started on or after midnight of\n-     * this date..", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk2MTUxMQ=="}, "originalCommit": {"oid": "b2f66d69668af4389122d53f79e9eb0bb87faf5f"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwODQyOA==", "bodyText": "The doc string is coming from the api definition.", "url": "https://github.com/twilio/twilio-java/pull/584#discussion_r493008428", "createdAt": "2020-09-22T20:19:14Z", "author": {"login": "childish-sambino"}, "path": "src/main/java/com/twilio/rest/api/v2010/account/CallReader.java", "diffHunk": "@@ -127,46 +131,21 @@ public CallReader setStatus(final Call.Status status) {\n      * `StartTime&gt;=YYYY-MM-DD` to read calls that started on or after midnight of\n      * this date..\n      *\n-     * @param absoluteStartTime Only include calls that started on this date\n+     * @param startTime Only include calls that started on this date\n      * @return this\n      */\n-    public CallReader setStartTime(final DateTime absoluteStartTime) {\n-        this.rangeStartTime = null;\n-        this.absoluteStartTime = absoluteStartTime;\n+    public CallReader setStartTime(final ZonedDateTime startTime) {\n+        this.startTime = startTime;\n         return this;\n     }\n \n-    /**\n-     * Only include calls that started on this date. Specify a date as `YYYY-MM-DD`\n-     * in GMT, for example: `2009-07-06`, to read only calls that started on this\n-     * date. You can also specify an inequality, such as `StartTime&lt;=YYYY-MM-DD`,\n-     * to read calls that started on or before midnight of this date, and\n-     * `StartTime&gt;=YYYY-MM-DD` to read calls that started on or after midnight of\n-     * this date..", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk2MTUxMQ=="}, "originalCommit": {"oid": "b2f66d69668af4389122d53f79e9eb0bb87faf5f"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxMTY1MQ==", "bodyText": "Yeah, but we control the building of these additional functions. We can make the inequality setter builders render a clarifying function docstring ourselves that is independent of api-defs", "url": "https://github.com/twilio/twilio-java/pull/584#discussion_r493011651", "createdAt": "2020-09-22T20:25:09Z", "author": {"login": "eshanholtz"}, "path": "src/main/java/com/twilio/rest/api/v2010/account/CallReader.java", "diffHunk": "@@ -127,46 +131,21 @@ public CallReader setStatus(final Call.Status status) {\n      * `StartTime&gt;=YYYY-MM-DD` to read calls that started on or after midnight of\n      * this date..\n      *\n-     * @param absoluteStartTime Only include calls that started on this date\n+     * @param startTime Only include calls that started on this date\n      * @return this\n      */\n-    public CallReader setStartTime(final DateTime absoluteStartTime) {\n-        this.rangeStartTime = null;\n-        this.absoluteStartTime = absoluteStartTime;\n+    public CallReader setStartTime(final ZonedDateTime startTime) {\n+        this.startTime = startTime;\n         return this;\n     }\n \n-    /**\n-     * Only include calls that started on this date. Specify a date as `YYYY-MM-DD`\n-     * in GMT, for example: `2009-07-06`, to read only calls that started on this\n-     * date. You can also specify an inequality, such as `StartTime&lt;=YYYY-MM-DD`,\n-     * to read calls that started on or before midnight of this date, and\n-     * `StartTime&gt;=YYYY-MM-DD` to read calls that started on or after midnight of\n-     * this date..", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk2MTUxMQ=="}, "originalCommit": {"oid": "b2f66d69668af4389122d53f79e9eb0bb87faf5f"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA0MjEzOA==", "bodyText": "I will be looking at these comments again after implementing the Yoyodyne changes to ensure they make sense in context.", "url": "https://github.com/twilio/twilio-java/pull/584#discussion_r493042138", "createdAt": "2020-09-22T21:23:42Z", "author": {"login": "thinkingserious"}, "path": "src/main/java/com/twilio/rest/api/v2010/account/CallReader.java", "diffHunk": "@@ -127,46 +131,21 @@ public CallReader setStatus(final Call.Status status) {\n      * `StartTime&gt;=YYYY-MM-DD` to read calls that started on or after midnight of\n      * this date..\n      *\n-     * @param absoluteStartTime Only include calls that started on this date\n+     * @param startTime Only include calls that started on this date\n      * @return this\n      */\n-    public CallReader setStartTime(final DateTime absoluteStartTime) {\n-        this.rangeStartTime = null;\n-        this.absoluteStartTime = absoluteStartTime;\n+    public CallReader setStartTime(final ZonedDateTime startTime) {\n+        this.startTime = startTime;\n         return this;\n     }\n \n-    /**\n-     * Only include calls that started on this date. Specify a date as `YYYY-MM-DD`\n-     * in GMT, for example: `2009-07-06`, to read only calls that started on this\n-     * date. You can also specify an inequality, such as `StartTime&lt;=YYYY-MM-DD`,\n-     * to read calls that started on or before midnight of this date, and\n-     * `StartTime&gt;=YYYY-MM-DD` to read calls that started on or after midnight of\n-     * this date..", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk2MTUxMQ=="}, "originalCommit": {"oid": "b2f66d69668af4389122d53f79e9eb0bb87faf5f"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTQwNDU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/twilio/rest/api/v2010/account/MessageReader.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMDoxMToyN1rOHWKmbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMToxNDo1MVrOHWMo6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwNDM5Nw==", "bodyText": "Why is this a LocalDate type when it previously had date_time precision?", "url": "https://github.com/twilio/twilio-java/pull/584#discussion_r493004397", "createdAt": "2020-09-22T20:11:27Z", "author": {"login": "eshanholtz"}, "path": "src/main/java/com/twilio/rest/api/v2010/account/MessageReader.java", "diffHunk": "@@ -95,31 +98,23 @@ public MessageReader setFrom(final String from) {\n      * sent on or before midnight on a date, and `DateSent&gt;=YYYY-MM-DD` to read\n      * messages sent on or after midnight on a date..\n      *\n-     * @param absoluteDateSent Filter by date sent\n+     * @param dateSent Filter by date sent\n      * @return this\n      */\n-    public MessageReader setDateSent(final DateTime absoluteDateSent) {\n-        this.rangeDateSent = null;\n-        this.absoluteDateSent = absoluteDateSent;\n+    public MessageReader setDateSent(final LocalDate dateSent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2f66d69668af4389122d53f79e9eb0bb87faf5f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAyMDQ4NQ==", "bodyText": "Great catch! I'm going to double check all of these mappings. This particular one should be a ZonedDateTime.\nReference:\norg.joda.time.DateTime ~> java.time.ZonedDateTime\norg.joda.time.LocalDate ~> java.time.LocalDate", "url": "https://github.com/twilio/twilio-java/pull/584#discussion_r493020485", "createdAt": "2020-09-22T20:41:24Z", "author": {"login": "thinkingserious"}, "path": "src/main/java/com/twilio/rest/api/v2010/account/MessageReader.java", "diffHunk": "@@ -95,31 +98,23 @@ public MessageReader setFrom(final String from) {\n      * sent on or before midnight on a date, and `DateSent&gt;=YYYY-MM-DD` to read\n      * messages sent on or after midnight on a date..\n      *\n-     * @param absoluteDateSent Filter by date sent\n+     * @param dateSent Filter by date sent\n      * @return this\n      */\n-    public MessageReader setDateSent(final DateTime absoluteDateSent) {\n-        this.rangeDateSent = null;\n-        this.absoluteDateSent = absoluteDateSent;\n+    public MessageReader setDateSent(final LocalDate dateSent) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwNDM5Nw=="}, "originalCommit": {"oid": "b2f66d69668af4389122d53f79e9eb0bb87faf5f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAyMzAyMQ==", "bodyText": "Are you making use of/updating the type mappings defined in api-defs? https://code.hq.twilio.com/twilio/api-definitions/blob/master/types/java.json", "url": "https://github.com/twilio/twilio-java/pull/584#discussion_r493023021", "createdAt": "2020-09-22T20:45:59Z", "author": {"login": "eshanholtz"}, "path": "src/main/java/com/twilio/rest/api/v2010/account/MessageReader.java", "diffHunk": "@@ -95,31 +98,23 @@ public MessageReader setFrom(final String from) {\n      * sent on or before midnight on a date, and `DateSent&gt;=YYYY-MM-DD` to read\n      * messages sent on or after midnight on a date..\n      *\n-     * @param absoluteDateSent Filter by date sent\n+     * @param dateSent Filter by date sent\n      * @return this\n      */\n-    public MessageReader setDateSent(final DateTime absoluteDateSent) {\n-        this.rangeDateSent = null;\n-        this.absoluteDateSent = absoluteDateSent;\n+    public MessageReader setDateSent(final LocalDate dateSent) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwNDM5Nw=="}, "originalCommit": {"oid": "b2f66d69668af4389122d53f79e9eb0bb87faf5f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAzNzgwMQ==", "bodyText": "Yes: https://code.hq.twilio.com/twilio/api-definitions/pull/2068/files\nThis will also be updated as part of this PR to remove the Range type.", "url": "https://github.com/twilio/twilio-java/pull/584#discussion_r493037801", "createdAt": "2020-09-22T21:14:51Z", "author": {"login": "thinkingserious"}, "path": "src/main/java/com/twilio/rest/api/v2010/account/MessageReader.java", "diffHunk": "@@ -95,31 +98,23 @@ public MessageReader setFrom(final String from) {\n      * sent on or before midnight on a date, and `DateSent&gt;=YYYY-MM-DD` to read\n      * messages sent on or after midnight on a date..\n      *\n-     * @param absoluteDateSent Filter by date sent\n+     * @param dateSent Filter by date sent\n      * @return this\n      */\n-    public MessageReader setDateSent(final DateTime absoluteDateSent) {\n-        this.rangeDateSent = null;\n-        this.absoluteDateSent = absoluteDateSent;\n+    public MessageReader setDateSent(final LocalDate dateSent) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwNDM5Nw=="}, "originalCommit": {"oid": "b2f66d69668af4389122d53f79e9eb0bb87faf5f"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDAzMDY3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/twilio/rest/api/v2010/account/Recording.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDoyMjoyMVrOHXdYnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDozMjo1MFrOHXd5UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2MDczNQ==", "bodyText": "Lots of trivial whitespace changes cluttering up the PR should be removed (to files where there are no other changes).", "url": "https://github.com/twilio/twilio-java/pull/584#discussion_r494360735", "createdAt": "2020-09-24T14:22:21Z", "author": {"login": "childish-sambino"}, "path": "src/main/java/com/twilio/rest/api/v2010/account/Recording.java", "diffHunk": "@@ -27,6 +27,7 @@\n import com.twilio.rest.Domains;\n import lombok.ToString;\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee4b0c9158b5c1201042aa712f2faec1cf5535d1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2OTEwNA==", "bodyText": "Fixing these with the Yoyodyne generation.", "url": "https://github.com/twilio/twilio-java/pull/584#discussion_r494369104", "createdAt": "2020-09-24T14:32:50Z", "author": {"login": "thinkingserious"}, "path": "src/main/java/com/twilio/rest/api/v2010/account/Recording.java", "diffHunk": "@@ -27,6 +27,7 @@\n import com.twilio.rest.Domains;\n import lombok.ToString;\n \n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2MDczNQ=="}, "originalCommit": {"oid": "ee4b0c9158b5c1201042aa712f2faec1cf5535d1"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDAzNDM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/twilio/type/PhoneNumberPrice.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDoyMzowN1rOHXda3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDozMjo1N1rOHXd5oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2MTMxMQ==", "bodyText": "Duplicate imports in several files.", "url": "https://github.com/twilio/twilio-java/pull/584#discussion_r494361311", "createdAt": "2020-09-24T14:23:07Z", "author": {"login": "childish-sambino"}, "path": "src/main/java/com/twilio/type/PhoneNumberPrice.java", "diffHunk": "@@ -8,6 +8,8 @@\n \n import java.util.Objects;\n \n+import lombok.ToString;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee4b0c9158b5c1201042aa712f2faec1cf5535d1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2OTE4NA==", "bodyText": "Fixing these with the Yoyodyne generation.", "url": "https://github.com/twilio/twilio-java/pull/584#discussion_r494369184", "createdAt": "2020-09-24T14:32:57Z", "author": {"login": "thinkingserious"}, "path": "src/main/java/com/twilio/type/PhoneNumberPrice.java", "diffHunk": "@@ -8,6 +8,8 @@\n \n import java.util.Objects;\n \n+import lombok.ToString;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2MTMxMQ=="}, "originalCommit": {"oid": "ee4b0c9158b5c1201042aa712f2faec1cf5535d1"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDAzOTE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/twilio/rest/events/v1/Schema.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDoyNDowMVrOHXddyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNzoyMDo1NlrOHYMOqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2MjA1Nw==", "bodyText": "This should be in a separate PR.", "url": "https://github.com/twilio/twilio-java/pull/584#discussion_r494362057", "createdAt": "2020-09-24T14:24:01Z", "author": {"login": "childish-sambino"}, "path": "src/main/java/com/twilio/rest/events/v1/Schema.java", "diffHunk": "@@ -109,7 +111,7 @@ private Schema(@JsonProperty(\"id\")\n         this.id = id;\n         this.url = url;\n         this.links = links;\n-        this.lastCreated = DateConverter.iso8601DateTimeFromString(lastCreated);\n+        this.lastCreated = ZonedDateTime.parse(lastCreated);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee4b0c9158b5c1201042aa712f2faec1cf5535d1"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEyODIzMg==", "bodyText": "Thought I caught that one ...", "url": "https://github.com/twilio/twilio-java/pull/584#discussion_r495128232", "createdAt": "2020-09-25T17:20:56Z", "author": {"login": "thinkingserious"}, "path": "src/main/java/com/twilio/rest/events/v1/Schema.java", "diffHunk": "@@ -109,7 +111,7 @@ private Schema(@JsonProperty(\"id\")\n         this.id = id;\n         this.url = url;\n         this.links = links;\n-        this.lastCreated = DateConverter.iso8601DateTimeFromString(lastCreated);\n+        this.lastCreated = ZonedDateTime.parse(lastCreated);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2MjA1Nw=="}, "originalCommit": {"oid": "ee4b0c9158b5c1201042aa712f2faec1cf5535d1"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDA1MzYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/twilio/rest/api/v2010/account/call/NotificationReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDoyNjo1NVrOHXdmyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDozNDozM1rOHXd-PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2NDM2MA==", "bodyText": "Why is there no messageDate here? Was this not generated by yoyodyne?", "url": "https://github.com/twilio/twilio-java/pull/584#discussion_r494364360", "createdAt": "2020-09-24T14:26:55Z", "author": {"login": "childish-sambino"}, "path": "src/main/java/com/twilio/rest/api/v2010/account/call/NotificationReader.java", "diffHunk": "@@ -218,14 +215,12 @@ private void addQueryParams(final Request request) {\n             request.addQueryParam(\"Log\", log.toString());\n         }\n \n-        if (absoluteMessageDate != null) {\n-            request.addQueryParam(\"MessageDate\", absoluteMessageDate.format(DateTimeFormatter.ofPattern(Request.QUERY_STRING_DATE_FORMAT)));\n-        } else if (rangeMessageDate != null) {\n-            request.addQueryDateRange(\"MessageDate\", rangeMessageDate);\n+        if (startMessageDate != null || endMessageDate != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee4b0c9158b5c1201042aa712f2faec1cf5535d1"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM3MDM2NQ==", "bodyText": "This is a manual mistake, fixing.", "url": "https://github.com/twilio/twilio-java/pull/584#discussion_r494370365", "createdAt": "2020-09-24T14:34:33Z", "author": {"login": "thinkingserious"}, "path": "src/main/java/com/twilio/rest/api/v2010/account/call/NotificationReader.java", "diffHunk": "@@ -218,14 +215,12 @@ private void addQueryParams(final Request request) {\n             request.addQueryParam(\"Log\", log.toString());\n         }\n \n-        if (absoluteMessageDate != null) {\n-            request.addQueryParam(\"MessageDate\", absoluteMessageDate.format(DateTimeFormatter.ofPattern(Request.QUERY_STRING_DATE_FORMAT)));\n-        } else if (rangeMessageDate != null) {\n-            request.addQueryDateRange(\"MessageDate\", rangeMessageDate);\n+        if (startMessageDate != null || endMessageDate != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2NDM2MA=="}, "originalCommit": {"oid": "ee4b0c9158b5c1201042aa712f2faec1cf5535d1"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDA1NjUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/twilio/rest/api/v2010/account/RecordingReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDoyNzoyOVrOHXdogg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDoyNzoyOVrOHXdogg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2NDgwMg==", "bodyText": "nit: Combine into else if.", "url": "https://github.com/twilio/twilio-java/pull/584#discussion_r494364802", "createdAt": "2020-09-24T14:27:29Z", "author": {"login": "childish-sambino"}, "path": "src/main/java/com/twilio/rest/api/v2010/account/RecordingReader.java", "diffHunk": "@@ -225,10 +220,12 @@ public RecordingReader setConferenceSid(final String conferenceSid) {\n      * @param request Request to add query string arguments to\n      */\n     private void addQueryParams(final Request request) {\n-        if (absoluteDateCreated != null) {\n-            request.addQueryParam(\"DateCreated\", absoluteDateCreated.format(DateTimeFormatter.ofPattern(Request.QUERY_STRING_DATE_TIME_FORMAT)));\n-        } else if (rangeDateCreated != null) {\n-            request.addQueryDateTimeRange(\"DateCreated\", rangeDateCreated);\n+        if (dateCreated != null) {\n+            request.addQueryParam(\"DateCreated\", dateCreated.format(DateTimeFormatter.ofPattern(Request.QUERY_STRING_DATE_TIME_FORMAT)));\n+        } else {\n+            if (dateCreatedBefore != null || dateCreatedAfter != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee4b0c9158b5c1201042aa712f2faec1cf5535d1"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5ODM0MDM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/twilio/http/Request.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNDozMDoyM1rOHYGI2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNzoyMToxMFrOHYMPOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTAyODQ0MQ==", "bodyText": "This is being called as request.addQueryDateTimeRange(\"StartTime\", startTimeBefore, startTimeAfter);, but startTimeBefore is really an upper bound.\nGiven that this was able to pass without any tests breaking, tests need to be updated to catch this.", "url": "https://github.com/twilio/twilio-java/pull/584#discussion_r495028441", "createdAt": "2020-09-25T14:30:23Z", "author": {"login": "childish-sambino"}, "path": "src/main/java/com/twilio/http/Request.java", "diffHunk": "@@ -216,16 +216,17 @@ public void addQueryDateRange(final String name, final Range<LocalDate> range) {\n      * Add query parameters for date ranges.\n      *\n      * @param name  name of query parameter\n-     * @param range date range\n+     * @param lowerBound date lowerBound\n+     * @param upperBound date upperBound\n      */\n-    public void addQueryDateTimeRange(final String name, final Range<ZonedDateTime> range) {\n-        if (range.hasLowerBound()) {\n-            String value = range.lowerEndpoint().withZoneSameInstant(ZoneOffset.UTC).format(DateTimeFormatter.ofPattern(QUERY_STRING_DATE_TIME_FORMAT));\n+    public void addQueryDateTimeRange(final String name, final ZonedDateTime lowerBound, final ZonedDateTime upperBound) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c76b2221358f315fd1975db795e342124f0a8623"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEyODM3Nw==", "bodyText": "Nice catch! Will fix.", "url": "https://github.com/twilio/twilio-java/pull/584#discussion_r495128377", "createdAt": "2020-09-25T17:21:10Z", "author": {"login": "thinkingserious"}, "path": "src/main/java/com/twilio/http/Request.java", "diffHunk": "@@ -216,16 +216,17 @@ public void addQueryDateRange(final String name, final Range<LocalDate> range) {\n      * Add query parameters for date ranges.\n      *\n      * @param name  name of query parameter\n-     * @param range date range\n+     * @param lowerBound date lowerBound\n+     * @param upperBound date upperBound\n      */\n-    public void addQueryDateTimeRange(final String name, final Range<ZonedDateTime> range) {\n-        if (range.hasLowerBound()) {\n-            String value = range.lowerEndpoint().withZoneSameInstant(ZoneOffset.UTC).format(DateTimeFormatter.ofPattern(QUERY_STRING_DATE_TIME_FORMAT));\n+    public void addQueryDateTimeRange(final String name, final ZonedDateTime lowerBound, final ZonedDateTime upperBound) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTAyODQ0MQ=="}, "originalCommit": {"oid": "c76b2221358f315fd1975db795e342124f0a8623"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTc4NDk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/twilio/http/Request.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMTo0NTozMlrOHYUEmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMTo0NTozMlrOHYUEmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI1NjczMA==", "bodyText": "We don't do this in other languages. I'm against doing it here.", "url": "https://github.com/twilio/twilio-java/pull/584#discussion_r495256730", "createdAt": "2020-09-25T21:45:32Z", "author": {"login": "childish-sambino"}, "path": "src/main/java/com/twilio/http/Request.java", "diffHunk": "@@ -198,16 +197,27 @@ private String buildURL() {\n      * Add query parameters for date ranges.\n      *\n      * @param name  name of query parameter\n-     * @param range date range\n+     * @param lowerBound lower bound of LocalDate range\n+     * @param upperBound upper bound of LocalDate range\n      */\n-    public void addQueryDateRange(final String name, final Range<LocalDate> range) {\n-        if (range.hasLowerBound()) {\n-            String value = range.lowerEndpoint().format(DateTimeFormatter.ofPattern(QUERY_STRING_DATE_FORMAT));\n+    public void addQueryDateRange(final String name, LocalDate lowerBound, LocalDate upperBound) {\n+        // automatically switch bounds if they were passed in backwards\n+        if (lowerBound != null && upperBound != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21def15726e4afb5cc984e5bca8d3329024a97ea"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1947, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}