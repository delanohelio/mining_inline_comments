{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4MjI4ODcw", "number": 573, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMTo1MzoxNFrOEh3ztQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOToxMzoyMlrOEtL5kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTUyODIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/twilio/type/RecordingRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMTo1MzoxNFrOHPbnZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMTo1MzoxNFrOHPbnZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk0MzE0Mg==", "bodyText": "Please add a short description for this class, similar to this example.", "url": "https://github.com/twilio/twilio-java/pull/573#discussion_r485943142", "createdAt": "2020-09-09T21:53:14Z", "author": {"login": "thinkingserious"}, "path": "src/main/java/com/twilio/type/RecordingRule.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package com.twilio.type;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonValue;\n+import com.google.common.base.MoreObjects;\n+import com.twilio.converter.Promoter;\n+\n+import java.util.Objects;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb97202f5870068c47b898b5053f4e3c51f85cd"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTU0NjIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/twilio/type/RecordingRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMTo1OTo1NVrOHPbybA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjowMzoyMVrOHPb3kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk0NTk2NA==", "bodyText": "This is duplicated in the SubscribeRule class. Perhaps it's time for a base class.", "url": "https://github.com/twilio/twilio-java/pull/573#discussion_r485945964", "createdAt": "2020-09-09T21:59:55Z", "author": {"login": "thinkingserious"}, "path": "src/main/java/com/twilio/type/RecordingRule.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package com.twilio.type;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonValue;\n+import com.google.common.base.MoreObjects;\n+import com.twilio.converter.Promoter;\n+\n+import java.util.Objects;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class RecordingRule {\n+\n+    public enum Type {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb97202f5870068c47b898b5053f4e3c51f85cd"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk0NzI4Mw==", "bodyText": "There are other duplications with the SubscribeRule class that might make sense to refactor too.", "url": "https://github.com/twilio/twilio-java/pull/573#discussion_r485947283", "createdAt": "2020-09-09T22:03:21Z", "author": {"login": "thinkingserious"}, "path": "src/main/java/com/twilio/type/RecordingRule.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package com.twilio.type;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonValue;\n+import com.google.common.base.MoreObjects;\n+import com.twilio.converter.Promoter;\n+\n+import java.util.Objects;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class RecordingRule {\n+\n+    public enum Type {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk0NTk2NA=="}, "originalCommit": {"oid": "deb97202f5870068c47b898b5053f4e3c51f85cd"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTU1OTYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/twilio/type/RecordingRulesUpdate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjowNToyNFrOHPb6pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjowNToyNFrOHPb6pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk0ODA2OA==", "bodyText": "Please add a short description here as noted in the RecordingRule class.", "url": "https://github.com/twilio/twilio-java/pull/573#discussion_r485948068", "createdAt": "2020-09-09T22:05:24Z", "author": {"login": "thinkingserious"}, "path": "src/main/java/com/twilio/type/RecordingRulesUpdate.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.twilio.type;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.MoreObjects;\n+\n+import java.util.List;\n+import java.util.Objects;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb97202f5870068c47b898b5053f4e3c51f85cd"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTU2NTI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/twilio/type/RecordingRulesUpdate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjowNzozNlrOHPb-KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjoyMzowOVrOHgvHmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk0ODk2OA==", "bodyText": "There are many similarities to the SubscribeRulesUpdate.java class. Similar to the SubscribeRule and RecordingRule classes, we can simplify with a base class.", "url": "https://github.com/twilio/twilio-java/pull/573#discussion_r485948968", "createdAt": "2020-09-09T22:07:36Z", "author": {"login": "thinkingserious"}, "path": "src/main/java/com/twilio/type/RecordingRulesUpdate.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.twilio.type;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb97202f5870068c47b898b5053f4e3c51f85cd"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA4ODQ3NQ==", "bodyText": "Done", "url": "https://github.com/twilio/twilio-java/pull/573#discussion_r504088475", "createdAt": "2020-10-13T16:23:09Z", "author": {"login": "FMV1491"}, "path": "src/main/java/com/twilio/type/RecordingRulesUpdate.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.twilio.type;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk0ODk2OA=="}, "originalCommit": {"oid": "deb97202f5870068c47b898b5053f4e3c51f85cd"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODE2MzM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/twilio/type/RecordingRule.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOToxMzoyMlrOHg1ofA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOTo0NjozN1rOHg2u4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5NTE5Ng==", "bodyText": "I don't understand the need for these additional interfaces. And one is returning the type of the other.", "url": "https://github.com/twilio/twilio-java/pull/573#discussion_r504195196", "createdAt": "2020-10-13T19:13:22Z", "author": {"login": "childish-sambino"}, "path": "src/main/java/com/twilio/type/RecordingRule.java", "diffHunk": "@@ -0,0 +1,195 @@\n+package com.twilio.type;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.ToString;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Recording Rule\n+ *\n+ * <p>\n+ * For more information see:\n+ * <a href=https://www.twilio.com/docs/video/api/recording-start/stop#specifying-sr>Specifying Recording Rules</a>\n+ * </p>\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@ToString\n+public class RecordingRule implements Rule {\n+\n+    private static final RecordingRule recordAll = builder().withType(Type.INCLUDE).withAll().build();\n+    private static final RecordingRule recordNone = builder().withType(Type.EXCLUDE).withAll().build();\n+\n+    @JsonProperty(\"type\")\n+    private final Type type;\n+\n+    @JsonProperty(\"all\")\n+    private final Boolean all;\n+\n+    @JsonProperty(\"publisher\")\n+    private final String publisher;\n+\n+    @JsonProperty(\"track\")\n+    private final String track;\n+\n+    @JsonProperty(\"kind\")\n+    private final Kind kind;\n+\n+    public RecordingRule(@JsonProperty(\"type\") final Type type,\n+            @JsonProperty(\"all\") final Boolean all,\n+            @JsonProperty(\"publisher\") final String publisher,\n+            @JsonProperty(\"track\") final String track,\n+            @JsonProperty(\"kind\") final Kind kind) {\n+        this.type = type;\n+        this.all = all;\n+        this.publisher = publisher;\n+        this.track = track;\n+        this.kind = kind;\n+    }\n+\n+    public RecordingRule() {\n+        this.type = null;\n+        this.all = null;\n+        this.publisher = null;\n+        this.track = null;\n+        this.kind = null;\n+    }\n+\n+    public static BuilderStart builder() {\n+        return new Builder();\n+    }\n+\n+    public interface BuilderStart {\n+        BuilderMiddle withType(final Type type);\n+    }\n+\n+    public interface BuilderMiddle {\n+        BuilderMiddleBuild withPublisher(final String publisher);\n+        BuilderMiddleBuild withKind(final Kind kind);\n+        BuilderMiddleBuild withTrack(final String track);\n+        BuilderBuild withAll();\n+    }\n+\n+    public interface BuilderMiddleBuild {\n+        BuilderMiddleBuild withPublisher(final String publisher);\n+        BuilderMiddleBuild withKind(final Kind kind);\n+        BuilderMiddleBuild withTrack(final String track);\n+        RecordingRule build();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c29e2a2564cb5231a0368586a59991ebf756c14b"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIwOTczMA==", "bodyText": "They help build rules that make sense - for example, if you have a rule that has \"all\" or \"none\" it doesn't make sense to have a kind/publisher/track in the same rule.", "url": "https://github.com/twilio/twilio-java/pull/573#discussion_r504209730", "createdAt": "2020-10-13T19:40:06Z", "author": {"login": "innerverse"}, "path": "src/main/java/com/twilio/type/RecordingRule.java", "diffHunk": "@@ -0,0 +1,195 @@\n+package com.twilio.type;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.ToString;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Recording Rule\n+ *\n+ * <p>\n+ * For more information see:\n+ * <a href=https://www.twilio.com/docs/video/api/recording-start/stop#specifying-sr>Specifying Recording Rules</a>\n+ * </p>\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@ToString\n+public class RecordingRule implements Rule {\n+\n+    private static final RecordingRule recordAll = builder().withType(Type.INCLUDE).withAll().build();\n+    private static final RecordingRule recordNone = builder().withType(Type.EXCLUDE).withAll().build();\n+\n+    @JsonProperty(\"type\")\n+    private final Type type;\n+\n+    @JsonProperty(\"all\")\n+    private final Boolean all;\n+\n+    @JsonProperty(\"publisher\")\n+    private final String publisher;\n+\n+    @JsonProperty(\"track\")\n+    private final String track;\n+\n+    @JsonProperty(\"kind\")\n+    private final Kind kind;\n+\n+    public RecordingRule(@JsonProperty(\"type\") final Type type,\n+            @JsonProperty(\"all\") final Boolean all,\n+            @JsonProperty(\"publisher\") final String publisher,\n+            @JsonProperty(\"track\") final String track,\n+            @JsonProperty(\"kind\") final Kind kind) {\n+        this.type = type;\n+        this.all = all;\n+        this.publisher = publisher;\n+        this.track = track;\n+        this.kind = kind;\n+    }\n+\n+    public RecordingRule() {\n+        this.type = null;\n+        this.all = null;\n+        this.publisher = null;\n+        this.track = null;\n+        this.kind = null;\n+    }\n+\n+    public static BuilderStart builder() {\n+        return new Builder();\n+    }\n+\n+    public interface BuilderStart {\n+        BuilderMiddle withType(final Type type);\n+    }\n+\n+    public interface BuilderMiddle {\n+        BuilderMiddleBuild withPublisher(final String publisher);\n+        BuilderMiddleBuild withKind(final Kind kind);\n+        BuilderMiddleBuild withTrack(final String track);\n+        BuilderBuild withAll();\n+    }\n+\n+    public interface BuilderMiddleBuild {\n+        BuilderMiddleBuild withPublisher(final String publisher);\n+        BuilderMiddleBuild withKind(final Kind kind);\n+        BuilderMiddleBuild withTrack(final String track);\n+        RecordingRule build();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5NTE5Ng=="}, "originalCommit": {"oid": "c29e2a2564cb5231a0368586a59991ebf756c14b"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIxMzIxOA==", "bodyText": "Ah, I see the progression now.", "url": "https://github.com/twilio/twilio-java/pull/573#discussion_r504213218", "createdAt": "2020-10-13T19:46:37Z", "author": {"login": "childish-sambino"}, "path": "src/main/java/com/twilio/type/RecordingRule.java", "diffHunk": "@@ -0,0 +1,195 @@\n+package com.twilio.type;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.ToString;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Recording Rule\n+ *\n+ * <p>\n+ * For more information see:\n+ * <a href=https://www.twilio.com/docs/video/api/recording-start/stop#specifying-sr>Specifying Recording Rules</a>\n+ * </p>\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@ToString\n+public class RecordingRule implements Rule {\n+\n+    private static final RecordingRule recordAll = builder().withType(Type.INCLUDE).withAll().build();\n+    private static final RecordingRule recordNone = builder().withType(Type.EXCLUDE).withAll().build();\n+\n+    @JsonProperty(\"type\")\n+    private final Type type;\n+\n+    @JsonProperty(\"all\")\n+    private final Boolean all;\n+\n+    @JsonProperty(\"publisher\")\n+    private final String publisher;\n+\n+    @JsonProperty(\"track\")\n+    private final String track;\n+\n+    @JsonProperty(\"kind\")\n+    private final Kind kind;\n+\n+    public RecordingRule(@JsonProperty(\"type\") final Type type,\n+            @JsonProperty(\"all\") final Boolean all,\n+            @JsonProperty(\"publisher\") final String publisher,\n+            @JsonProperty(\"track\") final String track,\n+            @JsonProperty(\"kind\") final Kind kind) {\n+        this.type = type;\n+        this.all = all;\n+        this.publisher = publisher;\n+        this.track = track;\n+        this.kind = kind;\n+    }\n+\n+    public RecordingRule() {\n+        this.type = null;\n+        this.all = null;\n+        this.publisher = null;\n+        this.track = null;\n+        this.kind = null;\n+    }\n+\n+    public static BuilderStart builder() {\n+        return new Builder();\n+    }\n+\n+    public interface BuilderStart {\n+        BuilderMiddle withType(final Type type);\n+    }\n+\n+    public interface BuilderMiddle {\n+        BuilderMiddleBuild withPublisher(final String publisher);\n+        BuilderMiddleBuild withKind(final Kind kind);\n+        BuilderMiddleBuild withTrack(final String track);\n+        BuilderBuild withAll();\n+    }\n+\n+    public interface BuilderMiddleBuild {\n+        BuilderMiddleBuild withPublisher(final String publisher);\n+        BuilderMiddleBuild withKind(final Kind kind);\n+        BuilderMiddleBuild withTrack(final String track);\n+        RecordingRule build();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5NTE5Ng=="}, "originalCommit": {"oid": "c29e2a2564cb5231a0368586a59991ebf756c14b"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1931, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}