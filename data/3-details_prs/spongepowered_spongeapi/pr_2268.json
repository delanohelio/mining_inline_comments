{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5NDczNDk1", "number": 2268, "title": "ResourceKey improvements", "bodyText": "SpongeAPI | SpongeCommon\n\nCleaned up and added more javadocs\nAdded new resolve methods that let you specify a custom default namespace\n\nEDIT: Also keep in mind now that ResourceKey.Builder#namespace must always be set.", "createdAt": "2020-11-30T11:10:46Z", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2268", "merged": true, "mergeCommit": {"oid": "3e22d54c25e74a16aa9455e35e89597e3c41572f"}, "closed": true, "closedAt": "2020-12-04T05:16:45Z", "author": {"login": "ItsDoot"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdhlJPZgFqTU0MDg5MTA2MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdiCf22AFqTU0MjM4MTM0OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwODkxMDYw", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2268#pullrequestreview-540891060", "createdAt": "2020-11-30T13:08:40Z", "commit": {"oid": "3a21944042a95bd125e30c9ab20691aab1e57ea1"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzowODo0MFrOH76VMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzoxMDowM1rOH76YZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4MzczMA==", "bodyText": "I don't agree with this. Either you have the namespace in the formatted string (use resolve(String)) or you don't (use resolve(String namespace, String value) or resolve(PluginContainer container, String value)).\nThis method is just going to encourage lazy programming. Unless there is a compelling reason, this method should not exist.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2268#discussion_r532583730", "createdAt": "2020-11-30T13:08:40Z", "author": {"login": "dualspiral"}, "path": "src/main/java/org/spongepowered/api/ResourceKey.java", "diffHunk": "@@ -95,38 +95,66 @@ static Builder builder() {\n     }\n \n     /**\n-     * Creates a catalog key.\n+     * Creates a resource key.\n      *\n      * @param namespace The namespace\n      * @param value The value\n-     * @return A new catalog key\n+     * @return A new resource key\n      */\n     static ResourceKey of(final String namespace, final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).namespace(namespace).value(value).build();\n+        return builder().namespace(namespace).value(value).build();\n     }\n \n     /**\n-     * Creates a catalog key\n+     * Creates a resource key.\n      *\n      * @param container The container\n      * @param value The value\n-     * @return A new catalog key\n+     * @return A new resource key\n      */\n     static ResourceKey of(final PluginContainer container, final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).namespace(container).value(value).build();\n+        return builder().namespace(container).value(value).build();\n     }\n \n     /**\n-     * Resolves a catalog key from a string.\n+     * Resolves a resource key from a string.\n      *\n      * <p>If no namespace is found in {@code string} then\n      * {@link #MINECRAFT_NAMESPACE} will be the namespace.</p>\n      *\n-     * @param value The value\n-     * @return A new catalog key\n+     * @param formatted The formatted string to parse\n+     * @return A new resource key\n      */\n-    static ResourceKey resolve(final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).value(value).build();\n+    static ResourceKey resolve(final String formatted) {\n+        return resolve(formatted, MINECRAFT_NAMESPACE);\n+    }\n+\n+    /**\n+     * Resolves a resource key from a string.\n+     *\n+     * <p>If no namespace is found in {@code formatted} then\n+     * the specified default namespace will be used.</p>\n+     *\n+     * @param formatted The formatted string to parse\n+     * @param defaultNamespace The default namespace to use\n+     * @return A new resource key\n+     */\n+    static ResourceKey resolve(final String formatted, final PluginContainer defaultNamespace) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a21944042a95bd125e30c9ab20691aab1e57ea1"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4Mzg2OQ==", "bodyText": "As above.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2268#discussion_r532583869", "createdAt": "2020-11-30T13:08:54Z", "author": {"login": "dualspiral"}, "path": "src/main/java/org/spongepowered/api/ResourceKey.java", "diffHunk": "@@ -95,38 +95,66 @@ static Builder builder() {\n     }\n \n     /**\n-     * Creates a catalog key.\n+     * Creates a resource key.\n      *\n      * @param namespace The namespace\n      * @param value The value\n-     * @return A new catalog key\n+     * @return A new resource key\n      */\n     static ResourceKey of(final String namespace, final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).namespace(namespace).value(value).build();\n+        return builder().namespace(namespace).value(value).build();\n     }\n \n     /**\n-     * Creates a catalog key\n+     * Creates a resource key.\n      *\n      * @param container The container\n      * @param value The value\n-     * @return A new catalog key\n+     * @return A new resource key\n      */\n     static ResourceKey of(final PluginContainer container, final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).namespace(container).value(value).build();\n+        return builder().namespace(container).value(value).build();\n     }\n \n     /**\n-     * Resolves a catalog key from a string.\n+     * Resolves a resource key from a string.\n      *\n      * <p>If no namespace is found in {@code string} then\n      * {@link #MINECRAFT_NAMESPACE} will be the namespace.</p>\n      *\n-     * @param value The value\n-     * @return A new catalog key\n+     * @param formatted The formatted string to parse\n+     * @return A new resource key\n      */\n-    static ResourceKey resolve(final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).value(value).build();\n+    static ResourceKey resolve(final String formatted) {\n+        return resolve(formatted, MINECRAFT_NAMESPACE);\n+    }\n+\n+    /**\n+     * Resolves a resource key from a string.\n+     *\n+     * <p>If no namespace is found in {@code formatted} then\n+     * the specified default namespace will be used.</p>\n+     *\n+     * @param formatted The formatted string to parse\n+     * @param defaultNamespace The default namespace to use\n+     * @return A new resource key\n+     */\n+    static ResourceKey resolve(final String formatted, final PluginContainer defaultNamespace) {\n+        return resolve(formatted, defaultNamespace.getMetadata().getId());\n+    }\n+\n+    /**\n+     * Resolves a resource key from a string.\n+     *\n+     * <p>If no namespace is found in {@code formatted} then\n+     * the specified default namespace will be used.</p>\n+     *\n+     * @param formatted The formatted string to parse\n+     * @param defaultNamespace The default namespace to use\n+     * @return A new resource key\n+     */\n+    static ResourceKey resolve(final String formatted, final String defaultNamespace) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a21944042a95bd125e30c9ab20691aab1e57ea1"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4NDU1MA==", "bodyText": "Prefix static methods with the class name, even if it is the same class.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2268#discussion_r532584550", "createdAt": "2020-11-30T13:10:03Z", "author": {"login": "dualspiral"}, "path": "src/main/java/org/spongepowered/api/ResourceKey.java", "diffHunk": "@@ -95,38 +95,66 @@ static Builder builder() {\n     }\n \n     /**\n-     * Creates a catalog key.\n+     * Creates a resource key.\n      *\n      * @param namespace The namespace\n      * @param value The value\n-     * @return A new catalog key\n+     * @return A new resource key\n      */\n     static ResourceKey of(final String namespace, final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).namespace(namespace).value(value).build();\n+        return builder().namespace(namespace).value(value).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a21944042a95bd125e30c9ab20691aab1e57ea1"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxODg0Mjcz", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2268#pullrequestreview-541884273", "createdAt": "2020-12-01T13:18:40Z", "commit": {"oid": "8f2c9143ec35b4f4c2dc9dc252047da0e443dd5b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMzoxODo0MFrOH8sJPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMzoxODo0MFrOH8sJPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM5OTg3MA==", "bodyText": "\ud83d\udc4d with @dualspiral's comment: This method should not exist on ResourceKey itself", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2268#discussion_r533399870", "createdAt": "2020-12-01T13:18:40Z", "author": {"login": "kashike"}, "path": "src/main/java/org/spongepowered/api/ResourceKey.java", "diffHunk": "@@ -95,38 +95,66 @@ static Builder builder() {\n     }\n \n     /**\n-     * Creates a catalog key.\n+     * Creates a resource key.\n      *\n      * @param namespace The namespace\n      * @param value The value\n-     * @return A new catalog key\n+     * @return A new resource key\n      */\n     static ResourceKey of(final String namespace, final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).namespace(namespace).value(value).build();\n+        return builder().namespace(namespace).value(value).build();\n     }\n \n     /**\n-     * Creates a catalog key\n+     * Creates a resource key.\n      *\n      * @param container The container\n      * @param value The value\n-     * @return A new catalog key\n+     * @return A new resource key\n      */\n     static ResourceKey of(final PluginContainer container, final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).namespace(container).value(value).build();\n+        return builder().namespace(container).value(value).build();\n     }\n \n     /**\n-     * Resolves a catalog key from a string.\n+     * Resolves a resource key from a string.\n      *\n      * <p>If no namespace is found in {@code string} then\n      * {@link #MINECRAFT_NAMESPACE} will be the namespace.</p>\n      *\n-     * @param value The value\n-     * @return A new catalog key\n+     * @param formatted The formatted string to parse\n+     * @return A new resource key\n      */\n-    static ResourceKey resolve(final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).value(value).build();\n+    static ResourceKey resolve(final String formatted) {\n+        return resolve(formatted, MINECRAFT_NAMESPACE);\n+    }\n+\n+    /**\n+     * Resolves a resource key from a string.\n+     *\n+     * <p>If no namespace is found in {@code formatted} then\n+     * the specified default namespace will be used.</p>\n+     *\n+     * @param formatted The formatted string to parse\n+     * @param defaultNamespace The default namespace to use\n+     * @return A new resource key\n+     */\n+    static ResourceKey resolve(final String formatted, final PluginContainer defaultNamespace) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4MzczMA=="}, "originalCommit": {"oid": "3a21944042a95bd125e30c9ab20691aab1e57ea1"}, "originalPosition": 84}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05fdf83926b79a09989389486e128496a7858f74", "author": {"user": {"login": "ItsDoot", "name": "Christian Hughes"}}, "url": "https://github.com/SpongePowered/SpongeAPI/commit/05fdf83926b79a09989389486e128496a7858f74", "committedDate": "2020-12-01T23:15:22Z", "message": "Improve ResourceKey javadocs, and add additional resolve methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4b67982b6fa49fb6fa4e2351e5a3347a3108177", "author": {"user": {"login": "ItsDoot", "name": "Christian Hughes"}}, "url": "https://github.com/SpongePowered/SpongeAPI/commit/e4b67982b6fa49fb6fa4e2351e5a3347a3108177", "committedDate": "2020-12-01T23:15:23Z", "message": "Prefix static methods with class name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdb4c978ec52d06f6be5fcbe65b60eeeb9184f77", "author": {"user": {"login": "ItsDoot", "name": "Christian Hughes"}}, "url": "https://github.com/SpongePowered/SpongeAPI/commit/fdb4c978ec52d06f6be5fcbe65b60eeeb9184f77", "committedDate": "2020-12-01T23:16:27Z", "message": "Update ResourceKey for requested changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f2c9143ec35b4f4c2dc9dc252047da0e443dd5b", "author": {"user": {"login": "ItsDoot", "name": "Christian Hughes"}}, "url": "https://github.com/SpongePowered/SpongeAPI/commit/8f2c9143ec35b4f4c2dc9dc252047da0e443dd5b", "committedDate": "2020-11-30T21:06:32Z", "message": "Prefix static methods with class name"}, "afterCommit": {"oid": "fdb4c978ec52d06f6be5fcbe65b60eeeb9184f77", "author": {"user": {"login": "ItsDoot", "name": "Christian Hughes"}}, "url": "https://github.com/SpongePowered/SpongeAPI/commit/fdb4c978ec52d06f6be5fcbe65b60eeeb9184f77", "committedDate": "2020-12-01T23:16:27Z", "message": "Update ResourceKey for requested changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMzgxMzQ4", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2268#pullrequestreview-542381348", "createdAt": "2020-12-01T23:25:17Z", "commit": {"oid": "fdb4c978ec52d06f6be5fcbe65b60eeeb9184f77"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 630, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}