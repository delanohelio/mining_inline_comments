{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5NDczNDk1", "number": 2268, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzowODo0MFrOE-pU4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzoxMDowM1rOE-pW_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTI0MjU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/api/ResourceKey.java", "isResolved": false, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzowODo0MFrOH76VMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMzoxODo0MFrOH8sJPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4MzczMA==", "bodyText": "I don't agree with this. Either you have the namespace in the formatted string (use resolve(String)) or you don't (use resolve(String namespace, String value) or resolve(PluginContainer container, String value)).\nThis method is just going to encourage lazy programming. Unless there is a compelling reason, this method should not exist.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2268#discussion_r532583730", "createdAt": "2020-11-30T13:08:40Z", "author": {"login": "dualspiral"}, "path": "src/main/java/org/spongepowered/api/ResourceKey.java", "diffHunk": "@@ -95,38 +95,66 @@ static Builder builder() {\n     }\n \n     /**\n-     * Creates a catalog key.\n+     * Creates a resource key.\n      *\n      * @param namespace The namespace\n      * @param value The value\n-     * @return A new catalog key\n+     * @return A new resource key\n      */\n     static ResourceKey of(final String namespace, final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).namespace(namespace).value(value).build();\n+        return builder().namespace(namespace).value(value).build();\n     }\n \n     /**\n-     * Creates a catalog key\n+     * Creates a resource key.\n      *\n      * @param container The container\n      * @param value The value\n-     * @return A new catalog key\n+     * @return A new resource key\n      */\n     static ResourceKey of(final PluginContainer container, final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).namespace(container).value(value).build();\n+        return builder().namespace(container).value(value).build();\n     }\n \n     /**\n-     * Resolves a catalog key from a string.\n+     * Resolves a resource key from a string.\n      *\n      * <p>If no namespace is found in {@code string} then\n      * {@link #MINECRAFT_NAMESPACE} will be the namespace.</p>\n      *\n-     * @param value The value\n-     * @return A new catalog key\n+     * @param formatted The formatted string to parse\n+     * @return A new resource key\n      */\n-    static ResourceKey resolve(final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).value(value).build();\n+    static ResourceKey resolve(final String formatted) {\n+        return resolve(formatted, MINECRAFT_NAMESPACE);\n+    }\n+\n+    /**\n+     * Resolves a resource key from a string.\n+     *\n+     * <p>If no namespace is found in {@code formatted} then\n+     * the specified default namespace will be used.</p>\n+     *\n+     * @param formatted The formatted string to parse\n+     * @param defaultNamespace The default namespace to use\n+     * @return A new resource key\n+     */\n+    static ResourceKey resolve(final String formatted, final PluginContainer defaultNamespace) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a21944042a95bd125e30c9ab20691aab1e57ea1"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY2NjkyMw==", "bodyText": "I agree - this should not exist.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2268#discussion_r532666923", "createdAt": "2020-11-30T15:09:11Z", "author": {"login": "kashike"}, "path": "src/main/java/org/spongepowered/api/ResourceKey.java", "diffHunk": "@@ -95,38 +95,66 @@ static Builder builder() {\n     }\n \n     /**\n-     * Creates a catalog key.\n+     * Creates a resource key.\n      *\n      * @param namespace The namespace\n      * @param value The value\n-     * @return A new catalog key\n+     * @return A new resource key\n      */\n     static ResourceKey of(final String namespace, final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).namespace(namespace).value(value).build();\n+        return builder().namespace(namespace).value(value).build();\n     }\n \n     /**\n-     * Creates a catalog key\n+     * Creates a resource key.\n      *\n      * @param container The container\n      * @param value The value\n-     * @return A new catalog key\n+     * @return A new resource key\n      */\n     static ResourceKey of(final PluginContainer container, final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).namespace(container).value(value).build();\n+        return builder().namespace(container).value(value).build();\n     }\n \n     /**\n-     * Resolves a catalog key from a string.\n+     * Resolves a resource key from a string.\n      *\n      * <p>If no namespace is found in {@code string} then\n      * {@link #MINECRAFT_NAMESPACE} will be the namespace.</p>\n      *\n-     * @param value The value\n-     * @return A new catalog key\n+     * @param formatted The formatted string to parse\n+     * @return A new resource key\n      */\n-    static ResourceKey resolve(final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).value(value).build();\n+    static ResourceKey resolve(final String formatted) {\n+        return resolve(formatted, MINECRAFT_NAMESPACE);\n+    }\n+\n+    /**\n+     * Resolves a resource key from a string.\n+     *\n+     * <p>If no namespace is found in {@code formatted} then\n+     * the specified default namespace will be used.</p>\n+     *\n+     * @param formatted The formatted string to parse\n+     * @param defaultNamespace The default namespace to use\n+     * @return A new resource key\n+     */\n+    static ResourceKey resolve(final String formatted, final PluginContainer defaultNamespace) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4MzczMA=="}, "originalCommit": {"oid": "3a21944042a95bd125e30c9ab20691aab1e57ea1"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkwMzA4Nw==", "bodyText": "These resolve methods would exist to make user input parsing easier.\nFor example, my Bending plugin has abilities that players can equip via a command: /bending bind <some-ability>.\nWith a usage being something like /bending bind bending:air_blast.\nIt would be nice if players could type plainly /bending bind air_blast, instead, without the namespace.\nIf I were to use the current existing resolve method, I could only get minecraft:air_blast, which is incorrect.\nTherefore, these new resolve methods would make it a single line to be able to parse both bending:air_blast and air_blast correctly.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2268#discussion_r532903087", "createdAt": "2020-11-30T21:05:50Z", "author": {"login": "ItsDoot"}, "path": "src/main/java/org/spongepowered/api/ResourceKey.java", "diffHunk": "@@ -95,38 +95,66 @@ static Builder builder() {\n     }\n \n     /**\n-     * Creates a catalog key.\n+     * Creates a resource key.\n      *\n      * @param namespace The namespace\n      * @param value The value\n-     * @return A new catalog key\n+     * @return A new resource key\n      */\n     static ResourceKey of(final String namespace, final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).namespace(namespace).value(value).build();\n+        return builder().namespace(namespace).value(value).build();\n     }\n \n     /**\n-     * Creates a catalog key\n+     * Creates a resource key.\n      *\n      * @param container The container\n      * @param value The value\n-     * @return A new catalog key\n+     * @return A new resource key\n      */\n     static ResourceKey of(final PluginContainer container, final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).namespace(container).value(value).build();\n+        return builder().namespace(container).value(value).build();\n     }\n \n     /**\n-     * Resolves a catalog key from a string.\n+     * Resolves a resource key from a string.\n      *\n      * <p>If no namespace is found in {@code string} then\n      * {@link #MINECRAFT_NAMESPACE} will be the namespace.</p>\n      *\n-     * @param value The value\n-     * @return A new catalog key\n+     * @param formatted The formatted string to parse\n+     * @return A new resource key\n      */\n-    static ResourceKey resolve(final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).value(value).build();\n+    static ResourceKey resolve(final String formatted) {\n+        return resolve(formatted, MINECRAFT_NAMESPACE);\n+    }\n+\n+    /**\n+     * Resolves a resource key from a string.\n+     *\n+     * <p>If no namespace is found in {@code formatted} then\n+     * the specified default namespace will be used.</p>\n+     *\n+     * @param formatted The formatted string to parse\n+     * @param defaultNamespace The default namespace to use\n+     * @return A new resource key\n+     */\n+    static ResourceKey resolve(final String formatted, final PluginContainer defaultNamespace) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4MzczMA=="}, "originalCommit": {"oid": "3a21944042a95bd125e30c9ab20691aab1e57ea1"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkwNDk4OQ==", "bodyText": "@dualspiral @kashike\nI respectfully agree with @ItsDoot on the exact point he made.\nIn preparing for state of sponge, all the catalogs added originated from the Royale plugin. I can't tell you how annoying it was to type out the namespaces constantly, even with tab complete.\nMaybe it isn't realistic to do it due to how the command system functions but it would sure be nice to parse a value string as something not always minecraft", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2268#discussion_r532904989", "createdAt": "2020-11-30T21:09:42Z", "author": {"login": "Zidane"}, "path": "src/main/java/org/spongepowered/api/ResourceKey.java", "diffHunk": "@@ -95,38 +95,66 @@ static Builder builder() {\n     }\n \n     /**\n-     * Creates a catalog key.\n+     * Creates a resource key.\n      *\n      * @param namespace The namespace\n      * @param value The value\n-     * @return A new catalog key\n+     * @return A new resource key\n      */\n     static ResourceKey of(final String namespace, final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).namespace(namespace).value(value).build();\n+        return builder().namespace(namespace).value(value).build();\n     }\n \n     /**\n-     * Creates a catalog key\n+     * Creates a resource key.\n      *\n      * @param container The container\n      * @param value The value\n-     * @return A new catalog key\n+     * @return A new resource key\n      */\n     static ResourceKey of(final PluginContainer container, final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).namespace(container).value(value).build();\n+        return builder().namespace(container).value(value).build();\n     }\n \n     /**\n-     * Resolves a catalog key from a string.\n+     * Resolves a resource key from a string.\n      *\n      * <p>If no namespace is found in {@code string} then\n      * {@link #MINECRAFT_NAMESPACE} will be the namespace.</p>\n      *\n-     * @param value The value\n-     * @return A new catalog key\n+     * @param formatted The formatted string to parse\n+     * @return A new resource key\n      */\n-    static ResourceKey resolve(final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).value(value).build();\n+    static ResourceKey resolve(final String formatted) {\n+        return resolve(formatted, MINECRAFT_NAMESPACE);\n+    }\n+\n+    /**\n+     * Resolves a resource key from a string.\n+     *\n+     * <p>If no namespace is found in {@code formatted} then\n+     * the specified default namespace will be used.</p>\n+     *\n+     * @param formatted The formatted string to parse\n+     * @param defaultNamespace The default namespace to use\n+     * @return A new resource key\n+     */\n+    static ResourceKey resolve(final String formatted, final PluginContainer defaultNamespace) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4MzczMA=="}, "originalCommit": {"oid": "3a21944042a95bd125e30c9ab20691aab1e57ea1"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkxMTAzNA==", "bodyText": "I definitely don't like resolve as the name for this method, then.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2268#discussion_r532911034", "createdAt": "2020-11-30T21:20:30Z", "author": {"login": "kashike"}, "path": "src/main/java/org/spongepowered/api/ResourceKey.java", "diffHunk": "@@ -95,38 +95,66 @@ static Builder builder() {\n     }\n \n     /**\n-     * Creates a catalog key.\n+     * Creates a resource key.\n      *\n      * @param namespace The namespace\n      * @param value The value\n-     * @return A new catalog key\n+     * @return A new resource key\n      */\n     static ResourceKey of(final String namespace, final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).namespace(namespace).value(value).build();\n+        return builder().namespace(namespace).value(value).build();\n     }\n \n     /**\n-     * Creates a catalog key\n+     * Creates a resource key.\n      *\n      * @param container The container\n      * @param value The value\n-     * @return A new catalog key\n+     * @return A new resource key\n      */\n     static ResourceKey of(final PluginContainer container, final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).namespace(container).value(value).build();\n+        return builder().namespace(container).value(value).build();\n     }\n \n     /**\n-     * Resolves a catalog key from a string.\n+     * Resolves a resource key from a string.\n      *\n      * <p>If no namespace is found in {@code string} then\n      * {@link #MINECRAFT_NAMESPACE} will be the namespace.</p>\n      *\n-     * @param value The value\n-     * @return A new catalog key\n+     * @param formatted The formatted string to parse\n+     * @return A new resource key\n      */\n-    static ResourceKey resolve(final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).value(value).build();\n+    static ResourceKey resolve(final String formatted) {\n+        return resolve(formatted, MINECRAFT_NAMESPACE);\n+    }\n+\n+    /**\n+     * Resolves a resource key from a string.\n+     *\n+     * <p>If no namespace is found in {@code formatted} then\n+     * the specified default namespace will be used.</p>\n+     *\n+     * @param formatted The formatted string to parse\n+     * @param defaultNamespace The default namespace to use\n+     * @return A new resource key\n+     */\n+    static ResourceKey resolve(final String formatted, final PluginContainer defaultNamespace) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4MzczMA=="}, "originalCommit": {"oid": "3a21944042a95bd125e30c9ab20691aab1e57ea1"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkxMzgxNQ==", "bodyText": "Yeah, imo this functionality is most useful for commands, and it would work but client completions would be tricky without falling back to requesting from the server.\nIf you aren't doing this in commands, you might as well just have a\n@Plugin\npublic class MyPlugin {\n    // [...]\n    public static ResourceKey key(final String value) {\n        return ResourceKey.of(ProjectData.ID, value);\n    }\n    // [...]\n}\nstyle method in your plugin class -- that's what I use on a few platforms.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2268#discussion_r532913815", "createdAt": "2020-11-30T21:25:51Z", "author": {"login": "zml2008"}, "path": "src/main/java/org/spongepowered/api/ResourceKey.java", "diffHunk": "@@ -95,38 +95,66 @@ static Builder builder() {\n     }\n \n     /**\n-     * Creates a catalog key.\n+     * Creates a resource key.\n      *\n      * @param namespace The namespace\n      * @param value The value\n-     * @return A new catalog key\n+     * @return A new resource key\n      */\n     static ResourceKey of(final String namespace, final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).namespace(namespace).value(value).build();\n+        return builder().namespace(namespace).value(value).build();\n     }\n \n     /**\n-     * Creates a catalog key\n+     * Creates a resource key.\n      *\n      * @param container The container\n      * @param value The value\n-     * @return A new catalog key\n+     * @return A new resource key\n      */\n     static ResourceKey of(final PluginContainer container, final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).namespace(container).value(value).build();\n+        return builder().namespace(container).value(value).build();\n     }\n \n     /**\n-     * Resolves a catalog key from a string.\n+     * Resolves a resource key from a string.\n      *\n      * <p>If no namespace is found in {@code string} then\n      * {@link #MINECRAFT_NAMESPACE} will be the namespace.</p>\n      *\n-     * @param value The value\n-     * @return A new catalog key\n+     * @param formatted The formatted string to parse\n+     * @return A new resource key\n      */\n-    static ResourceKey resolve(final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).value(value).build();\n+    static ResourceKey resolve(final String formatted) {\n+        return resolve(formatted, MINECRAFT_NAMESPACE);\n+    }\n+\n+    /**\n+     * Resolves a resource key from a string.\n+     *\n+     * <p>If no namespace is found in {@code formatted} then\n+     * the specified default namespace will be used.</p>\n+     *\n+     * @param formatted The formatted string to parse\n+     * @param defaultNamespace The default namespace to use\n+     * @return A new resource key\n+     */\n+    static ResourceKey resolve(final String formatted, final PluginContainer defaultNamespace) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4MzczMA=="}, "originalCommit": {"oid": "3a21944042a95bd125e30c9ab20691aab1e57ea1"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk2NjE3Nw==", "bodyText": "I can't tell you how annoying it was to type out the namespaces constantly, even with tab complete.\n\nI actually have a way to default the namespace for catalogs for this exact use case..", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2268#discussion_r532966177", "createdAt": "2020-11-30T23:17:41Z", "author": {"login": "dualspiral"}, "path": "src/main/java/org/spongepowered/api/ResourceKey.java", "diffHunk": "@@ -95,38 +95,66 @@ static Builder builder() {\n     }\n \n     /**\n-     * Creates a catalog key.\n+     * Creates a resource key.\n      *\n      * @param namespace The namespace\n      * @param value The value\n-     * @return A new catalog key\n+     * @return A new resource key\n      */\n     static ResourceKey of(final String namespace, final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).namespace(namespace).value(value).build();\n+        return builder().namespace(namespace).value(value).build();\n     }\n \n     /**\n-     * Creates a catalog key\n+     * Creates a resource key.\n      *\n      * @param container The container\n      * @param value The value\n-     * @return A new catalog key\n+     * @return A new resource key\n      */\n     static ResourceKey of(final PluginContainer container, final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).namespace(container).value(value).build();\n+        return builder().namespace(container).value(value).build();\n     }\n \n     /**\n-     * Resolves a catalog key from a string.\n+     * Resolves a resource key from a string.\n      *\n      * <p>If no namespace is found in {@code string} then\n      * {@link #MINECRAFT_NAMESPACE} will be the namespace.</p>\n      *\n-     * @param value The value\n-     * @return A new catalog key\n+     * @param formatted The formatted string to parse\n+     * @return A new resource key\n      */\n-    static ResourceKey resolve(final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).value(value).build();\n+    static ResourceKey resolve(final String formatted) {\n+        return resolve(formatted, MINECRAFT_NAMESPACE);\n+    }\n+\n+    /**\n+     * Resolves a resource key from a string.\n+     *\n+     * <p>If no namespace is found in {@code formatted} then\n+     * the specified default namespace will be used.</p>\n+     *\n+     * @param formatted The formatted string to parse\n+     * @param defaultNamespace The default namespace to use\n+     * @return A new resource key\n+     */\n+    static ResourceKey resolve(final String formatted, final PluginContainer defaultNamespace) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4MzczMA=="}, "originalCommit": {"oid": "3a21944042a95bd125e30c9ab20691aab1e57ea1"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk4NDM2OA==", "bodyText": "I have made it easier to specify a default namespace and re-added completions for non-namespaces values. That covers the use case here and is the right place for it to go - this sort of fuzzy-ish matching for commands belongs on a command parser. It was always intended that commands could forgo default namespaces. I agree, and always have done, that you should be able to specify default namespaces for commands - that has always existed.\nThis method should not exist on ResourceKey itself, and I stand firm on that. As it turned out, this PR is an XY problem, the solution was presented without the problem it was trying to solve. This has now been solved in the correct way.\n(zml: It already went to the server due to custom registries that the client doesn't know about, so it was trivial to fix)", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2268#discussion_r532984368", "createdAt": "2020-12-01T00:04:50Z", "author": {"login": "dualspiral"}, "path": "src/main/java/org/spongepowered/api/ResourceKey.java", "diffHunk": "@@ -95,38 +95,66 @@ static Builder builder() {\n     }\n \n     /**\n-     * Creates a catalog key.\n+     * Creates a resource key.\n      *\n      * @param namespace The namespace\n      * @param value The value\n-     * @return A new catalog key\n+     * @return A new resource key\n      */\n     static ResourceKey of(final String namespace, final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).namespace(namespace).value(value).build();\n+        return builder().namespace(namespace).value(value).build();\n     }\n \n     /**\n-     * Creates a catalog key\n+     * Creates a resource key.\n      *\n      * @param container The container\n      * @param value The value\n-     * @return A new catalog key\n+     * @return A new resource key\n      */\n     static ResourceKey of(final PluginContainer container, final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).namespace(container).value(value).build();\n+        return builder().namespace(container).value(value).build();\n     }\n \n     /**\n-     * Resolves a catalog key from a string.\n+     * Resolves a resource key from a string.\n      *\n      * <p>If no namespace is found in {@code string} then\n      * {@link #MINECRAFT_NAMESPACE} will be the namespace.</p>\n      *\n-     * @param value The value\n-     * @return A new catalog key\n+     * @param formatted The formatted string to parse\n+     * @return A new resource key\n      */\n-    static ResourceKey resolve(final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).value(value).build();\n+    static ResourceKey resolve(final String formatted) {\n+        return resolve(formatted, MINECRAFT_NAMESPACE);\n+    }\n+\n+    /**\n+     * Resolves a resource key from a string.\n+     *\n+     * <p>If no namespace is found in {@code formatted} then\n+     * the specified default namespace will be used.</p>\n+     *\n+     * @param formatted The formatted string to parse\n+     * @param defaultNamespace The default namespace to use\n+     * @return A new resource key\n+     */\n+    static ResourceKey resolve(final String formatted, final PluginContainer defaultNamespace) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4MzczMA=="}, "originalCommit": {"oid": "3a21944042a95bd125e30c9ab20691aab1e57ea1"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk4OTEyMw==", "bodyText": "Ah perfect -- then I'm with dual here, the style tweaks are good but let's not add the custom default namespace methods here.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2268#discussion_r532989123", "createdAt": "2020-12-01T00:18:09Z", "author": {"login": "zml2008"}, "path": "src/main/java/org/spongepowered/api/ResourceKey.java", "diffHunk": "@@ -95,38 +95,66 @@ static Builder builder() {\n     }\n \n     /**\n-     * Creates a catalog key.\n+     * Creates a resource key.\n      *\n      * @param namespace The namespace\n      * @param value The value\n-     * @return A new catalog key\n+     * @return A new resource key\n      */\n     static ResourceKey of(final String namespace, final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).namespace(namespace).value(value).build();\n+        return builder().namespace(namespace).value(value).build();\n     }\n \n     /**\n-     * Creates a catalog key\n+     * Creates a resource key.\n      *\n      * @param container The container\n      * @param value The value\n-     * @return A new catalog key\n+     * @return A new resource key\n      */\n     static ResourceKey of(final PluginContainer container, final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).namespace(container).value(value).build();\n+        return builder().namespace(container).value(value).build();\n     }\n \n     /**\n-     * Resolves a catalog key from a string.\n+     * Resolves a resource key from a string.\n      *\n      * <p>If no namespace is found in {@code string} then\n      * {@link #MINECRAFT_NAMESPACE} will be the namespace.</p>\n      *\n-     * @param value The value\n-     * @return A new catalog key\n+     * @param formatted The formatted string to parse\n+     * @return A new resource key\n      */\n-    static ResourceKey resolve(final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).value(value).build();\n+    static ResourceKey resolve(final String formatted) {\n+        return resolve(formatted, MINECRAFT_NAMESPACE);\n+    }\n+\n+    /**\n+     * Resolves a resource key from a string.\n+     *\n+     * <p>If no namespace is found in {@code formatted} then\n+     * the specified default namespace will be used.</p>\n+     *\n+     * @param formatted The formatted string to parse\n+     * @param defaultNamespace The default namespace to use\n+     * @return A new resource key\n+     */\n+    static ResourceKey resolve(final String formatted, final PluginContainer defaultNamespace) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4MzczMA=="}, "originalCommit": {"oid": "3a21944042a95bd125e30c9ab20691aab1e57ea1"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM5OTg3MA==", "bodyText": "\ud83d\udc4d with @dualspiral's comment: This method should not exist on ResourceKey itself", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2268#discussion_r533399870", "createdAt": "2020-12-01T13:18:40Z", "author": {"login": "kashike"}, "path": "src/main/java/org/spongepowered/api/ResourceKey.java", "diffHunk": "@@ -95,38 +95,66 @@ static Builder builder() {\n     }\n \n     /**\n-     * Creates a catalog key.\n+     * Creates a resource key.\n      *\n      * @param namespace The namespace\n      * @param value The value\n-     * @return A new catalog key\n+     * @return A new resource key\n      */\n     static ResourceKey of(final String namespace, final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).namespace(namespace).value(value).build();\n+        return builder().namespace(namespace).value(value).build();\n     }\n \n     /**\n-     * Creates a catalog key\n+     * Creates a resource key.\n      *\n      * @param container The container\n      * @param value The value\n-     * @return A new catalog key\n+     * @return A new resource key\n      */\n     static ResourceKey of(final PluginContainer container, final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).namespace(container).value(value).build();\n+        return builder().namespace(container).value(value).build();\n     }\n \n     /**\n-     * Resolves a catalog key from a string.\n+     * Resolves a resource key from a string.\n      *\n      * <p>If no namespace is found in {@code string} then\n      * {@link #MINECRAFT_NAMESPACE} will be the namespace.</p>\n      *\n-     * @param value The value\n-     * @return A new catalog key\n+     * @param formatted The formatted string to parse\n+     * @return A new resource key\n      */\n-    static ResourceKey resolve(final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).value(value).build();\n+    static ResourceKey resolve(final String formatted) {\n+        return resolve(formatted, MINECRAFT_NAMESPACE);\n+    }\n+\n+    /**\n+     * Resolves a resource key from a string.\n+     *\n+     * <p>If no namespace is found in {@code formatted} then\n+     * the specified default namespace will be used.</p>\n+     *\n+     * @param formatted The formatted string to parse\n+     * @param defaultNamespace The default namespace to use\n+     * @return A new resource key\n+     */\n+    static ResourceKey resolve(final String formatted, final PluginContainer defaultNamespace) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4MzczMA=="}, "originalCommit": {"oid": "3a21944042a95bd125e30c9ab20691aab1e57ea1"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTI0MzQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/api/ResourceKey.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzowODo1NFrOH76VvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzowODo1NFrOH76VvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4Mzg2OQ==", "bodyText": "As above.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2268#discussion_r532583869", "createdAt": "2020-11-30T13:08:54Z", "author": {"login": "dualspiral"}, "path": "src/main/java/org/spongepowered/api/ResourceKey.java", "diffHunk": "@@ -95,38 +95,66 @@ static Builder builder() {\n     }\n \n     /**\n-     * Creates a catalog key.\n+     * Creates a resource key.\n      *\n      * @param namespace The namespace\n      * @param value The value\n-     * @return A new catalog key\n+     * @return A new resource key\n      */\n     static ResourceKey of(final String namespace, final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).namespace(namespace).value(value).build();\n+        return builder().namespace(namespace).value(value).build();\n     }\n \n     /**\n-     * Creates a catalog key\n+     * Creates a resource key.\n      *\n      * @param container The container\n      * @param value The value\n-     * @return A new catalog key\n+     * @return A new resource key\n      */\n     static ResourceKey of(final PluginContainer container, final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).namespace(container).value(value).build();\n+        return builder().namespace(container).value(value).build();\n     }\n \n     /**\n-     * Resolves a catalog key from a string.\n+     * Resolves a resource key from a string.\n      *\n      * <p>If no namespace is found in {@code string} then\n      * {@link #MINECRAFT_NAMESPACE} will be the namespace.</p>\n      *\n-     * @param value The value\n-     * @return A new catalog key\n+     * @param formatted The formatted string to parse\n+     * @return A new resource key\n      */\n-    static ResourceKey resolve(final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).value(value).build();\n+    static ResourceKey resolve(final String formatted) {\n+        return resolve(formatted, MINECRAFT_NAMESPACE);\n+    }\n+\n+    /**\n+     * Resolves a resource key from a string.\n+     *\n+     * <p>If no namespace is found in {@code formatted} then\n+     * the specified default namespace will be used.</p>\n+     *\n+     * @param formatted The formatted string to parse\n+     * @param defaultNamespace The default namespace to use\n+     * @return A new resource key\n+     */\n+    static ResourceKey resolve(final String formatted, final PluginContainer defaultNamespace) {\n+        return resolve(formatted, defaultNamespace.getMetadata().getId());\n+    }\n+\n+    /**\n+     * Resolves a resource key from a string.\n+     *\n+     * <p>If no namespace is found in {@code formatted} then\n+     * the specified default namespace will be used.</p>\n+     *\n+     * @param formatted The formatted string to parse\n+     * @param defaultNamespace The default namespace to use\n+     * @return A new resource key\n+     */\n+    static ResourceKey resolve(final String formatted, final String defaultNamespace) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a21944042a95bd125e30c9ab20691aab1e57ea1"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTI0Nzk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/api/ResourceKey.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzoxMDowM1rOH76YZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzoxMDowM1rOH76YZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4NDU1MA==", "bodyText": "Prefix static methods with the class name, even if it is the same class.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2268#discussion_r532584550", "createdAt": "2020-11-30T13:10:03Z", "author": {"login": "dualspiral"}, "path": "src/main/java/org/spongepowered/api/ResourceKey.java", "diffHunk": "@@ -95,38 +95,66 @@ static Builder builder() {\n     }\n \n     /**\n-     * Creates a catalog key.\n+     * Creates a resource key.\n      *\n      * @param namespace The namespace\n      * @param value The value\n-     * @return A new catalog key\n+     * @return A new resource key\n      */\n     static ResourceKey of(final String namespace, final String value) {\n-        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class).namespace(namespace).value(value).build();\n+        return builder().namespace(namespace).value(value).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a21944042a95bd125e30c9ab20691aab1e57ea1"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2380, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}