{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4Nzk4NDA5", "number": 2091, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMzo0NDoyOVrODijnEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjo1MDo1MFrODjRZ-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTYxNjE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMzo0NDoyOVrOFt3xFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNzowMjozNlrOFt6oHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0MzkyNw==", "bodyText": "Can this be a double instead? And can you javadoc it?", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2091#discussion_r383643927", "createdAt": "2020-02-25T03:44:29Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java", "diffHunk": "@@ -128,6 +128,10 @@ static Builder builder() {\n      */\n     boolean doesGrantExperience();\n \n+    float getPriceGrowthRate();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e1e5ef1ddd419f9ed93368f55e0bb26f20f2c2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0NTI1OQ==", "bodyText": "Oh yeah forgot to mention that these are to compensate for the new properties of trade offers. Also thought it would be best not do have a 4 line PR just for that", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2091#discussion_r383645259", "createdAt": "2020-02-25T03:50:36Z", "author": {"login": "i509VCB"}, "path": "src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java", "diffHunk": "@@ -128,6 +128,10 @@ static Builder builder() {\n      */\n     boolean doesGrantExperience();\n \n+    float getPriceGrowthRate();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0MzkyNw=="}, "originalCommit": {"oid": "b7e1e5ef1ddd419f9ed93368f55e0bb26f20f2c2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY5MDc4MA==", "bodyText": "Need to java doc/link to mc wiki for information imo if you're doing that then.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2091#discussion_r383690780", "createdAt": "2020-02-25T07:02:36Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java", "diffHunk": "@@ -128,6 +128,10 @@ static Builder builder() {\n      */\n     boolean doesGrantExperience();\n \n+    float getPriceGrowthRate();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0MzkyNw=="}, "originalCommit": {"oid": "b7e1e5ef1ddd419f9ed93368f55e0bb26f20f2c2"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTYxNjgxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMzo0NDo1N1rOFt3xbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMzo0NDo1N1rOFt3xbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0NDAxNQ==", "bodyText": "Extra .", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2091#discussion_r383644015", "createdAt": "2020-02-25T03:44:57Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java", "diffHunk": "@@ -186,6 +190,24 @@ static Builder builder() {\n          */\n         Builder canGrantExperience(boolean experience);\n \n+        /**\n+         * Sets how much experience the trade offer will grant upon use.\n+         *\n+         * @param experience The amount of experience.\n+         * @return This builder\n+         */\n+        Builder grantsExperience(int experience);\n+\n+        /**\n+         * Sets the rate at which this trade offer's price will grow by when used.\n+         *\n+         * <p>By default this multiplier is 0.05</p>\n+         *\n+         * @param priceGrowthRate The offer's rate of price growth.\n+         * @return This builder.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e1e5ef1ddd419f9ed93368f55e0bb26f20f2c2"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTYxNjg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMzo0NTowM1rOFt3xew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMzo0NTowM1rOFt3xew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0NDAyNw==", "bodyText": "Extra .", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2091#discussion_r383644027", "createdAt": "2020-02-25T03:45:03Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java", "diffHunk": "@@ -186,6 +190,24 @@ static Builder builder() {\n          */\n         Builder canGrantExperience(boolean experience);\n \n+        /**\n+         * Sets how much experience the trade offer will grant upon use.\n+         *\n+         * @param experience The amount of experience.\n+         * @return This builder\n+         */\n+        Builder grantsExperience(int experience);\n+\n+        /**\n+         * Sets the rate at which this trade offer's price will grow by when used.\n+         *\n+         * <p>By default this multiplier is 0.05</p>\n+         *\n+         * @param priceGrowthRate The offer's rate of price growth.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e1e5ef1ddd419f9ed93368f55e0bb26f20f2c2"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTYxNzUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMzo0NTozM1rOFt3x2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMzo0NTozM1rOFt3x2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0NDEyMw==", "bodyText": "If you're going to link modifiers like this, complete the sentence, and possibly link the MC wiki where they explain this.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2091#discussion_r383644123", "createdAt": "2020-02-25T03:45:33Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java", "diffHunk": "@@ -186,6 +190,24 @@ static Builder builder() {\n          */\n         Builder canGrantExperience(boolean experience);\n \n+        /**\n+         * Sets how much experience the trade offer will grant upon use.\n+         *\n+         * @param experience The amount of experience.\n+         * @return This builder\n+         */\n+        Builder grantsExperience(int experience);\n+\n+        /**\n+         * Sets the rate at which this trade offer's price will grow by when used.\n+         *\n+         * <p>By default this multiplier is 0.05</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e1e5ef1ddd419f9ed93368f55e0bb26f20f2c2"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTYxOTc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/api/fluid/FluidState.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMzo0Njo1M1rOFt3zGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMzo0Njo1M1rOFt3zGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0NDQ0MQ==", "bodyText": "There's no more manipulators, if there are, they are missed to be removed.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2091#discussion_r383644441", "createdAt": "2020-02-25T03:46:53Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/api/fluid/FluidState.java", "diffHunk": "@@ -85,6 +87,21 @@ static Builder builder() {\n      */\n     interface Builder extends SerializableDataHolderBuilder.Immutable<FluidState, Builder> {\n \n+        /**\n+         * Sets the {@link FluidType} for the {@link FluidState} to build.\n+         *\n+         * <p>The {@link FluidType} is used for some pre-validation on addition of\n+         * {@link DataManipulator}s through {@link #add(DataManipulator)}. It is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e1e5ef1ddd419f9ed93368f55e0bb26f20f2c2"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDgyNTM2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/api/block/BlockStateMatcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMjoxNTowNFrOFupQtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMDo0MjowMlrOFvBiaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ1NDgzNw==", "bodyText": "trait should be renamed to property or stateProperty", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2091#discussion_r384454837", "createdAt": "2020-02-26T12:15:04Z", "author": {"login": "Cybermaxke"}, "path": "src/main/java/org/spongepowered/api/block/BlockStateMatcher.java", "diffHunk": "@@ -92,6 +105,26 @@ default boolean test(BlockState blockState) {\n          */\n         Builder type(BlockType type);\n \n+        /**\n+         * Adds the desired {@link StateProperty} and {code value} to this\n+         * builder, if the desired {@link StateProperty} does not belong to the\n+         * original {@link BlockType} as provided by {@link #type(BlockType)},\n+         * an exception is thrown. Likewise, if a {@code value} is not within\n+         * the possible values for the desired trait of the desired type, an\n+         * exception is thrown.\n+         *\n+         * @param trait The desired block trait\n+         * @param value the desired value\n+         * @param <T> The type of comparable\n+         * @return This builder\n+         * @throws IllegalArgumentException If the block trait does not match\n+         *     the block type, or if the value does not belong to the trait\n+         *     with the desired block type\n+         */\n+        default <T extends Comparable<T>> Builder trait(Supplier<? extends StateProperty<T>> trait, T value) throws IllegalArgumentException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e1e5ef1ddd419f9ed93368f55e0bb26f20f2c2"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1MjU4Nw==", "bodyText": "I'll look around the api and include those renames with this pr EDIT: (I went for property).", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2091#discussion_r384852587", "createdAt": "2020-02-27T00:42:02Z", "author": {"login": "i509VCB"}, "path": "src/main/java/org/spongepowered/api/block/BlockStateMatcher.java", "diffHunk": "@@ -92,6 +105,26 @@ default boolean test(BlockState blockState) {\n          */\n         Builder type(BlockType type);\n \n+        /**\n+         * Adds the desired {@link StateProperty} and {code value} to this\n+         * builder, if the desired {@link StateProperty} does not belong to the\n+         * original {@link BlockType} as provided by {@link #type(BlockType)},\n+         * an exception is thrown. Likewise, if a {@code value} is not within\n+         * the possible values for the desired trait of the desired type, an\n+         * exception is thrown.\n+         *\n+         * @param trait The desired block trait\n+         * @param value the desired value\n+         * @param <T> The type of comparable\n+         * @return This builder\n+         * @throws IllegalArgumentException If the block trait does not match\n+         *     the block type, or if the value does not belong to the trait\n+         *     with the desired block type\n+         */\n+        default <T extends Comparable<T>> Builder trait(Supplier<? extends StateProperty<T>> trait, T value) throws IllegalArgumentException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ1NDgzNw=="}, "originalCommit": {"oid": "b7e1e5ef1ddd419f9ed93368f55e0bb26f20f2c2"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDgyODUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/api/advancement/DisplayInfo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMjoxNjoxMlrOFupSsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMjoxNjoxMlrOFupSsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ1NTM0Ng==", "bodyText": "this.icon", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2091#discussion_r384455346", "createdAt": "2020-02-26T12:16:12Z", "author": {"login": "Cybermaxke"}, "path": "src/main/java/org/spongepowered/api/advancement/DisplayInfo.java", "diffHunk": "@@ -128,6 +141,17 @@ static Builder builder() {\n          */\n         Builder title(Text title);\n \n+        /**\n+         * Sets the icon of the advancement with the\n+         * specified {@link ItemType}.\n+         *\n+         * @param itemType The item type\n+         * @return This builder, for chaining\n+         */\n+        default Builder icon(Supplier<? extends ItemType> itemType) {\n+            return icon(itemType.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e1e5ef1ddd419f9ed93368f55e0bb26f20f2c2"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzExOTI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjo1MDo1MFrOFu_TQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNjozNTo0M1rOF0qpOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgxNTkzNw==", "bodyText": "@gabizou Do you have a better name for this? It's the experience granted to the merchant when a trade offer is used.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2091#discussion_r384815937", "createdAt": "2020-02-26T22:50:50Z", "author": {"login": "i509VCB"}, "path": "src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java", "diffHunk": "@@ -122,12 +122,29 @@ static Builder builder() {\n     boolean hasExpired();\n \n     /**\n-     * Gets whether this trade offer will grant experience upon usage or not.\n+     * Gets whether this trade offer will grant experience to the customer upon usage or not.\n      *\n-     * @return True if using this trade offer will grant experience\n+     * @return True if using this trade offer will grant experience to the customer\n      */\n     boolean doesGrantExperience();\n \n+    /**\n+     * Gets the amount of experience granted to the merchant when this trade offer is used.\n+     *\n+     * @return The experience to be granted to the merchant\n+     */\n+    int getMerchantExperience();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db9ecaab0371d994a8c9756790d0e6ed65952d16"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc2ODk1NQ==", "bodyText": "I'd say it's fine. It's the experience granted to the merchant on use. just maybe getExperienceGrantedToMerchantOnUse but that's verbose.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2091#discussion_r390768955", "createdAt": "2020-03-11T06:35:43Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java", "diffHunk": "@@ -122,12 +122,29 @@ static Builder builder() {\n     boolean hasExpired();\n \n     /**\n-     * Gets whether this trade offer will grant experience upon usage or not.\n+     * Gets whether this trade offer will grant experience to the customer upon usage or not.\n      *\n-     * @return True if using this trade offer will grant experience\n+     * @return True if using this trade offer will grant experience to the customer\n      */\n     boolean doesGrantExperience();\n \n+    /**\n+     * Gets the amount of experience granted to the merchant when this trade offer is used.\n+     *\n+     * @return The experience to be granted to the merchant\n+     */\n+    int getMerchantExperience();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgxNTkzNw=="}, "originalCommit": {"oid": "db9ecaab0371d994a8c9756790d0e6ed65952d16"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2460, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}