{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5NTM5MTgy", "number": 2194, "title": "Add ability to programmatically create selectors", "bodyText": "This isn't for creating new selector types (i.e. @a alternatives), this is simply for if you want a selector outside of commands. I chose to ditch the ArgumentTypes system because really that seemed to be a reimplementation of selectors and I'd prefer to sit on top of what Vanilla has.\nI did actually start trying to redo the ArgumentTypes system, but it was a rabbit hole. I'm open to doing so in the future, but for now, this should cover most (if not all) of the current options.\nAlso added Range utility. Might be useful in advancements because of the MinMaxBounds in the advancement package.", "createdAt": "2020-07-30T19:42:05Z", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2194", "merged": true, "mergeCommit": {"oid": "9015cab86d86bd18900006bc66ee99f3f4f80756"}, "closed": true, "closedAt": "2020-07-31T23:18:46Z", "author": {"login": "dualspiral"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc6EWUIgH2gAyNDU5NTM5MTgyOjg4MmM2YjJiOGY0NTJlOTgwODQ4YmNkY2I1NTU1Yjk3NzE5OWY5NjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc6XJ3egH2gAyNDU5NTM5MTgyOjgwNjk5YmZhMzEyNGNlYzZmYWE5YTMzM2MxYzUyNjA3ODc2NTdjMzI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "882c6b2b8f452e980848bcdcb5555b977199f960", "author": {"user": {"login": "dualspiral", "name": "Daniel Naylor"}}, "url": "https://github.com/SpongePowered/SpongeAPI/commit/882c6b2b8f452e980848bcdcb5555b977199f960", "committedDate": "2020-07-30T18:57:41Z", "message": "Replace current selector system with selector builder\n\n* Add Range utility class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75688cd4f0a16228eef2dd749628d734be9dbb4a", "author": {"user": {"login": "dualspiral", "name": "Daniel Naylor"}}, "url": "https://github.com/SpongePowered/SpongeAPI/commit/75688cd4f0a16228eef2dd749628d734be9dbb4a", "committedDate": "2020-07-30T19:35:10Z", "message": "Update for comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36eea18eb477a8f1ea78c628b4f0b636f944340a", "author": {"user": {"login": "dualspiral", "name": "Daniel Naylor"}}, "url": "https://github.com/SpongePowered/SpongeAPI/commit/36eea18eb477a8f1ea78c628b4f0b636f944340a", "committedDate": "2020-07-30T19:56:27Z", "message": "Add custom filter method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4ODE2Nzky", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2194#pullrequestreview-458816792", "createdAt": "2020-07-30T22:53:49Z", "commit": {"oid": "36eea18eb477a8f1ea78c628b4f0b636f944340a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMjo1Mzo0OVrOG52hkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMjo1Mzo0OVrOG52hkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMxNTM0NQ==", "bodyText": "gameMode", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2194#discussion_r463315345", "createdAt": "2020-07-30T22:53:49Z", "author": {"login": "Cybermaxke"}, "path": "src/main/java/org/spongepowered/api/command/selector/Selector.java", "diffHunk": "@@ -0,0 +1,474 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.command.selector;\n+\n+import org.spongepowered.api.Sponge;\n+import org.spongepowered.api.advancement.Advancement;\n+import org.spongepowered.api.advancement.criteria.AdvancementCriterion;\n+import org.spongepowered.api.command.CommandCause;\n+import org.spongepowered.api.data.persistence.DataView;\n+import org.spongepowered.api.entity.Entity;\n+import org.spongepowered.api.entity.EntityType;\n+import org.spongepowered.api.entity.living.player.gamemode.GameMode;\n+import org.spongepowered.api.scoreboard.Score;\n+import org.spongepowered.api.scoreboard.Team;\n+import org.spongepowered.api.util.Range;\n+import org.spongepowered.api.util.ResettableBuilder;\n+import org.spongepowered.api.world.ServerLocation;\n+import org.spongepowered.math.vector.Vector3d;\n+\n+import java.util.Collection;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Allows for the selection of {@link Entity entities} in a world based on given\n+ * criteria.\n+ */\n+public interface Selector {\n+\n+    /**\n+     * Attempts to parse the given string into a selector. It must start with an\n+     * @ symbol.\n+     *\n+     * @param string The string to parse\n+     * @return The {@link Selector}\n+     * @throws IllegalArgumentException if the string could not be parsed.\n+     */\n+    static Selector parse(final String string) throws IllegalArgumentException {\n+        return Sponge.getRegistry().getFactoryRegistry().provideFactory(Factory.class).parse(string);\n+    }\n+\n+    /**\n+     * Provides a {@link Builder} to build a {@link Selector}.\n+     *\n+     * <p>If you wish to create a selector based on a provided string, use\n+     * {@link Selector#parse(String)} instead.\n+     *\n+     * @return The builder\n+     */\n+    static Selector.Builder builder() {\n+        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class);\n+    }\n+\n+    /**\n+     * Select entities based on the criteria of this selector and a given\n+     * {@link ServerLocation}\n+     *\n+     * @param location The {@link ServerLocation}\n+     * @return A {@link Collection} of selected {@link Entity entities}\n+     * @throws IllegalStateException if this selector cannot select based on a\n+     *                               {@link ServerLocation}\n+     */\n+    Collection<Entity> select(ServerLocation location) throws IllegalStateException;\n+\n+    /**\n+     * Select entities based on the criteria of this selector and a given\n+     * {@link Entity}\n+     *\n+     * @param entity The {@link Entity}\n+     * @return A {@link Collection} of selected {@link Entity entities}\n+     * @throws IllegalStateException if this selector cannot select based on a\n+     *                               {@link Entity}\n+     */\n+    Collection<Entity> select(Entity entity) throws IllegalStateException;\n+\n+    /**\n+     * Select entities based on the criteria of this selector and a given\n+     * {@link CommandCause}\n+     *\n+     * @param cause The {@link CommandCause}\n+     * @return A {@link Collection} of selected {@link Entity entities}\n+     */\n+    Collection<Entity> select(CommandCause cause);\n+\n+    /**\n+     * Creates a {@link Selector} based on the provided criteria.\n+     */\n+    interface Builder extends ResettableBuilder<Selector, Builder> {\n+\n+        /**\n+         * Applies the defaults associated with a given {@link SelectorType}\n+         *\n+         * @param selectorType The {@link SelectorType}\n+         * @return This builder, for chaining\n+         */\n+        Builder applySelectorType(Supplier<SelectorType> selectorType);\n+\n+        /**\n+         * Applies the defaults associated with a given {@link SelectorType}\n+         *\n+         * @param selectorType The {@link SelectorType}\n+         * @return This builder, for chaining\n+         */\n+        Builder applySelectorType(SelectorType selectorType);\n+\n+        /**\n+         * If the selector's source is an {@link Entity} and this is called,\n+         * the source is eligible to be selected if all other criteria are\n+         * met.\n+         *\n+         * @return This builder, for chaining.\n+         */\n+        Builder includeSelf();\n+\n+        /**\n+         * Limits the number of {@link Entity entities} returned by the\n+         * selector.\n+         *\n+         * @param limit The maximum number of entities to return\n+         * @return This builder, for chaining\n+         */\n+        Builder setLimit(int limit);\n+\n+        /**\n+         * Sets the minimum and/or maximum distance from the target location\n+         * that this selector will look.\n+         *\n+         * @param range The range\n+         * @return This builder, for chaining\n+         */\n+        Builder setDistance(Range<Double> range);\n+\n+        /**\n+         * Sets the volume that entities can be selected from. Entities that\n+         * have any part of their hitbox within this two specified corners\n+         * will be eligible to be selected.\n+         *\n+         * @param corner1 The first corner\n+         * @param corner2 The second corner (may be equal to the first to select\n+         *                entities at a specific point instead)\n+         * @return This builder, for chaining\n+         */\n+        Builder setVolume(Vector3d corner1, Vector3d corner2);\n+\n+        /**\n+         * Sets the sorting algorithm to use when returning entities from the\n+         * selector.\n+         *\n+         * @param algorithm The {@link SelectorSortAlgorithm}\n+         * @return This builder, for chaining\n+         */\n+        Builder setSortAlgorithm(Supplier<SelectorSortAlgorithm> algorithm);\n+\n+        /**\n+         * Sets the sorting algorithm to use when returning entities from the\n+         * selector.\n+         *\n+         * @param algorithm The {@link SelectorSortAlgorithm}\n+         * @return This builder, for chaining\n+         */\n+        Builder setSortAlgorithm(SelectorSortAlgorithm algorithm);\n+\n+        /**\n+         * Adds an {@link Advancement} constraint to this selector, requiring\n+         * that the advancement must be granted to be selected.\n+         *\n+         * @param advancement The advancement that players must have.\n+         * @return This builder, for chaining\n+         */\n+        Builder advancement(Advancement advancement);\n+\n+        /**\n+         * Adds an {@link Advancement} constraint to this selector, requiring\n+         * that the advancement must NOT be granted to be selected.\n+         *\n+         * @param advancement The advancement that players must not have.\n+         * @return This builder, for chaining\n+         */\n+        Builder notAdvancement(Advancement advancement);\n+\n+        /**\n+         * Adds an {@link AdvancementCriterion} constraint to this selector,\n+         * requiring that the criterion on the given {@link Advancement} must\n+         * be granted to be selected.\n+         *\n+         * @param advancement The advancement\n+         * @param criterion The criterion the player must have\n+         * @return This builder, for chaining\n+         */\n+        Builder advancementCriterion(Advancement advancement, AdvancementCriterion criterion);\n+\n+        /**\n+         * Adds an {@link AdvancementCriterion} constraint to this selector,\n+         * requiring that the criterion on the given {@link Advancement} must\n+         * not be granted to be selected.\n+         *\n+         * @param advancement The advancement\n+         * @param criterion The criterion the player must not have\n+         * @return This builder, for chaining\n+         */\n+        Builder notAdvancementCriterion(Advancement advancement, AdvancementCriterion criterion);\n+\n+        /**\n+         * Adds an {@link DataView} as an NBT style constraint.\n+         *\n+         * @param view The data view\n+         * @return This builder, for chaining\n+         */\n+        Builder setDataView(DataView view);\n+\n+        /**\n+         * Adds an {@link EntityType} constraint to this selector, requiring\n+         * that all selected entities must be of the given type.\n+         *\n+         * <p>If {@code inherit} is true, entities may also be a subtype of the\n+         * given type.</p>\n+         *\n+         * @param type The type\n+         * @param inherit Whether subtypes will also be selected\n+         * @return This builder, for chaining\n+         */\n+        Builder entityType(Supplier<EntityType<?>> type, boolean inherit);\n+\n+        /**\n+         * Adds an {@link EntityType} constraint to this selector, requiring\n+         * that all selected entities must be of the given type.\n+         *\n+         * <p>If {@code inherit} is true, entities may also be a subtype of the\n+         * given type.</p>\n+         *\n+         * @param type The type\n+         * @param inherit Whether subtypes will also be selected\n+         * @return This builder, for chaining\n+         */\n+        Builder entityType(EntityType<?> type, boolean inherit);\n+\n+        /**\n+         * Adds an {@link EntityType} constraint to this selector, requiring\n+         * that all selected entities must not be of the given type.\n+         *\n+         * @param type The type\n+         * @return This builder, for chaining\n+         */\n+        Builder notEntityType(Supplier<EntityType<?>> type);\n+\n+        /**\n+         * Adds an {@link EntityType} constraint to this selector, requiring\n+         * that all selected entities must not be of the given type.\n+         *\n+         * @param type The type\n+         * @return This builder, for chaining\n+         */\n+        Builder notEntityType(EntityType<?> type);\n+\n+        /**\n+         * Adds an experience level constraint to the selector, specifying that\n+         * a player's level must be in the provided range (inclusive).\n+         *\n+         * @param range The range\n+         * @return This builder, for chaining\n+         */\n+        Builder setExperienceLevel(Range<Integer> range);\n+\n+        /**\n+         * Adds a {@link GameMode} constraint to the selector, requiring players\n+         * be in the given game mode.\n+         *\n+         * <p>Cannot be used with {@link #notGamemode(GameMode)}.</p>\n+         *\n+         * @param mode The gamemode\n+         * @return This builder, for chaining\n+         */\n+        Builder gamemode(Supplier<GameMode> mode);\n+\n+        /**\n+         * Adds a {@link GameMode} constraint to the selector, requiring players\n+         * be in the given game mode\n+         *\n+         * <p>Cannot be used with {@link #notGamemode(GameMode)}.</p>\n+         *\n+         * @param mode The gamemode\n+         * @return This builder, for chaining\n+         */\n+        Builder gamemode(GameMode mode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36eea18eb477a8f1ea78c628b4f0b636f944340a"}, "originalPosition": 306}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4ODE2OTMx", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2194#pullrequestreview-458816931", "createdAt": "2020-07-30T22:54:12Z", "commit": {"oid": "36eea18eb477a8f1ea78c628b4f0b636f944340a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMjo1NDoxMlrOG52h-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMjo1NDoxMlrOG52h-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMxNTQ1MQ==", "bodyText": "notGameMode", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2194#discussion_r463315451", "createdAt": "2020-07-30T22:54:12Z", "author": {"login": "Cybermaxke"}, "path": "src/main/java/org/spongepowered/api/command/selector/Selector.java", "diffHunk": "@@ -0,0 +1,474 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.command.selector;\n+\n+import org.spongepowered.api.Sponge;\n+import org.spongepowered.api.advancement.Advancement;\n+import org.spongepowered.api.advancement.criteria.AdvancementCriterion;\n+import org.spongepowered.api.command.CommandCause;\n+import org.spongepowered.api.data.persistence.DataView;\n+import org.spongepowered.api.entity.Entity;\n+import org.spongepowered.api.entity.EntityType;\n+import org.spongepowered.api.entity.living.player.gamemode.GameMode;\n+import org.spongepowered.api.scoreboard.Score;\n+import org.spongepowered.api.scoreboard.Team;\n+import org.spongepowered.api.util.Range;\n+import org.spongepowered.api.util.ResettableBuilder;\n+import org.spongepowered.api.world.ServerLocation;\n+import org.spongepowered.math.vector.Vector3d;\n+\n+import java.util.Collection;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Allows for the selection of {@link Entity entities} in a world based on given\n+ * criteria.\n+ */\n+public interface Selector {\n+\n+    /**\n+     * Attempts to parse the given string into a selector. It must start with an\n+     * @ symbol.\n+     *\n+     * @param string The string to parse\n+     * @return The {@link Selector}\n+     * @throws IllegalArgumentException if the string could not be parsed.\n+     */\n+    static Selector parse(final String string) throws IllegalArgumentException {\n+        return Sponge.getRegistry().getFactoryRegistry().provideFactory(Factory.class).parse(string);\n+    }\n+\n+    /**\n+     * Provides a {@link Builder} to build a {@link Selector}.\n+     *\n+     * <p>If you wish to create a selector based on a provided string, use\n+     * {@link Selector#parse(String)} instead.\n+     *\n+     * @return The builder\n+     */\n+    static Selector.Builder builder() {\n+        return Sponge.getRegistry().getBuilderRegistry().provideBuilder(Builder.class);\n+    }\n+\n+    /**\n+     * Select entities based on the criteria of this selector and a given\n+     * {@link ServerLocation}\n+     *\n+     * @param location The {@link ServerLocation}\n+     * @return A {@link Collection} of selected {@link Entity entities}\n+     * @throws IllegalStateException if this selector cannot select based on a\n+     *                               {@link ServerLocation}\n+     */\n+    Collection<Entity> select(ServerLocation location) throws IllegalStateException;\n+\n+    /**\n+     * Select entities based on the criteria of this selector and a given\n+     * {@link Entity}\n+     *\n+     * @param entity The {@link Entity}\n+     * @return A {@link Collection} of selected {@link Entity entities}\n+     * @throws IllegalStateException if this selector cannot select based on a\n+     *                               {@link Entity}\n+     */\n+    Collection<Entity> select(Entity entity) throws IllegalStateException;\n+\n+    /**\n+     * Select entities based on the criteria of this selector and a given\n+     * {@link CommandCause}\n+     *\n+     * @param cause The {@link CommandCause}\n+     * @return A {@link Collection} of selected {@link Entity entities}\n+     */\n+    Collection<Entity> select(CommandCause cause);\n+\n+    /**\n+     * Creates a {@link Selector} based on the provided criteria.\n+     */\n+    interface Builder extends ResettableBuilder<Selector, Builder> {\n+\n+        /**\n+         * Applies the defaults associated with a given {@link SelectorType}\n+         *\n+         * @param selectorType The {@link SelectorType}\n+         * @return This builder, for chaining\n+         */\n+        Builder applySelectorType(Supplier<SelectorType> selectorType);\n+\n+        /**\n+         * Applies the defaults associated with a given {@link SelectorType}\n+         *\n+         * @param selectorType The {@link SelectorType}\n+         * @return This builder, for chaining\n+         */\n+        Builder applySelectorType(SelectorType selectorType);\n+\n+        /**\n+         * If the selector's source is an {@link Entity} and this is called,\n+         * the source is eligible to be selected if all other criteria are\n+         * met.\n+         *\n+         * @return This builder, for chaining.\n+         */\n+        Builder includeSelf();\n+\n+        /**\n+         * Limits the number of {@link Entity entities} returned by the\n+         * selector.\n+         *\n+         * @param limit The maximum number of entities to return\n+         * @return This builder, for chaining\n+         */\n+        Builder setLimit(int limit);\n+\n+        /**\n+         * Sets the minimum and/or maximum distance from the target location\n+         * that this selector will look.\n+         *\n+         * @param range The range\n+         * @return This builder, for chaining\n+         */\n+        Builder setDistance(Range<Double> range);\n+\n+        /**\n+         * Sets the volume that entities can be selected from. Entities that\n+         * have any part of their hitbox within this two specified corners\n+         * will be eligible to be selected.\n+         *\n+         * @param corner1 The first corner\n+         * @param corner2 The second corner (may be equal to the first to select\n+         *                entities at a specific point instead)\n+         * @return This builder, for chaining\n+         */\n+        Builder setVolume(Vector3d corner1, Vector3d corner2);\n+\n+        /**\n+         * Sets the sorting algorithm to use when returning entities from the\n+         * selector.\n+         *\n+         * @param algorithm The {@link SelectorSortAlgorithm}\n+         * @return This builder, for chaining\n+         */\n+        Builder setSortAlgorithm(Supplier<SelectorSortAlgorithm> algorithm);\n+\n+        /**\n+         * Sets the sorting algorithm to use when returning entities from the\n+         * selector.\n+         *\n+         * @param algorithm The {@link SelectorSortAlgorithm}\n+         * @return This builder, for chaining\n+         */\n+        Builder setSortAlgorithm(SelectorSortAlgorithm algorithm);\n+\n+        /**\n+         * Adds an {@link Advancement} constraint to this selector, requiring\n+         * that the advancement must be granted to be selected.\n+         *\n+         * @param advancement The advancement that players must have.\n+         * @return This builder, for chaining\n+         */\n+        Builder advancement(Advancement advancement);\n+\n+        /**\n+         * Adds an {@link Advancement} constraint to this selector, requiring\n+         * that the advancement must NOT be granted to be selected.\n+         *\n+         * @param advancement The advancement that players must not have.\n+         * @return This builder, for chaining\n+         */\n+        Builder notAdvancement(Advancement advancement);\n+\n+        /**\n+         * Adds an {@link AdvancementCriterion} constraint to this selector,\n+         * requiring that the criterion on the given {@link Advancement} must\n+         * be granted to be selected.\n+         *\n+         * @param advancement The advancement\n+         * @param criterion The criterion the player must have\n+         * @return This builder, for chaining\n+         */\n+        Builder advancementCriterion(Advancement advancement, AdvancementCriterion criterion);\n+\n+        /**\n+         * Adds an {@link AdvancementCriterion} constraint to this selector,\n+         * requiring that the criterion on the given {@link Advancement} must\n+         * not be granted to be selected.\n+         *\n+         * @param advancement The advancement\n+         * @param criterion The criterion the player must not have\n+         * @return This builder, for chaining\n+         */\n+        Builder notAdvancementCriterion(Advancement advancement, AdvancementCriterion criterion);\n+\n+        /**\n+         * Adds an {@link DataView} as an NBT style constraint.\n+         *\n+         * @param view The data view\n+         * @return This builder, for chaining\n+         */\n+        Builder setDataView(DataView view);\n+\n+        /**\n+         * Adds an {@link EntityType} constraint to this selector, requiring\n+         * that all selected entities must be of the given type.\n+         *\n+         * <p>If {@code inherit} is true, entities may also be a subtype of the\n+         * given type.</p>\n+         *\n+         * @param type The type\n+         * @param inherit Whether subtypes will also be selected\n+         * @return This builder, for chaining\n+         */\n+        Builder entityType(Supplier<EntityType<?>> type, boolean inherit);\n+\n+        /**\n+         * Adds an {@link EntityType} constraint to this selector, requiring\n+         * that all selected entities must be of the given type.\n+         *\n+         * <p>If {@code inherit} is true, entities may also be a subtype of the\n+         * given type.</p>\n+         *\n+         * @param type The type\n+         * @param inherit Whether subtypes will also be selected\n+         * @return This builder, for chaining\n+         */\n+        Builder entityType(EntityType<?> type, boolean inherit);\n+\n+        /**\n+         * Adds an {@link EntityType} constraint to this selector, requiring\n+         * that all selected entities must not be of the given type.\n+         *\n+         * @param type The type\n+         * @return This builder, for chaining\n+         */\n+        Builder notEntityType(Supplier<EntityType<?>> type);\n+\n+        /**\n+         * Adds an {@link EntityType} constraint to this selector, requiring\n+         * that all selected entities must not be of the given type.\n+         *\n+         * @param type The type\n+         * @return This builder, for chaining\n+         */\n+        Builder notEntityType(EntityType<?> type);\n+\n+        /**\n+         * Adds an experience level constraint to the selector, specifying that\n+         * a player's level must be in the provided range (inclusive).\n+         *\n+         * @param range The range\n+         * @return This builder, for chaining\n+         */\n+        Builder setExperienceLevel(Range<Integer> range);\n+\n+        /**\n+         * Adds a {@link GameMode} constraint to the selector, requiring players\n+         * be in the given game mode.\n+         *\n+         * <p>Cannot be used with {@link #notGamemode(GameMode)}.</p>\n+         *\n+         * @param mode The gamemode\n+         * @return This builder, for chaining\n+         */\n+        Builder gamemode(Supplier<GameMode> mode);\n+\n+        /**\n+         * Adds a {@link GameMode} constraint to the selector, requiring players\n+         * be in the given game mode\n+         *\n+         * <p>Cannot be used with {@link #notGamemode(GameMode)}.</p>\n+         *\n+         * @param mode The gamemode\n+         * @return This builder, for chaining\n+         */\n+        Builder gamemode(GameMode mode);\n+\n+        /**\n+         * Adds a {@link GameMode} constraint to the selector, requiring that\n+         * players are not in the given game mode\n+         *\n+         * <p>Cannot be used with {@link #gamemode(GameMode)}.</p>\n+         *\n+         * @param mode The gamemode\n+         * @return This builder, for chaining\n+         */\n+        Builder notGamemode(Supplier<GameMode> mode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36eea18eb477a8f1ea78c628b4f0b636f944340a"}, "originalPosition": 317}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80699bfa3124cec6faa9a333c1c5260787657c32", "author": {"user": {"login": "dualspiral", "name": "Daniel Naylor"}}, "url": "https://github.com/SpongePowered/SpongeAPI/commit/80699bfa3124cec6faa9a333c1c5260787657c32", "committedDate": "2020-07-31T16:52:17Z", "message": "Rename"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 684, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}