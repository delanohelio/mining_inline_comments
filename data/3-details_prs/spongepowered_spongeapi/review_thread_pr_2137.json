{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMDYzMjAy", "number": 2137, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDoxODo1MFrOEKHq7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo1NTo0MVrOEKPEFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDQ2ODkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/api/util/Tristate.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDoxODo1MFrOGq-qCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNToxMjoyM1rOGrBOfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcxOTk0Nw==", "bodyText": "Maybe call it negate?", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2137#discussion_r447719947", "createdAt": "2020-06-30T14:18:50Z", "author": {"login": "Zidane"}, "path": "src/main/java/org/spongepowered/api/util/Tristate.java", "diffHunk": "@@ -94,6 +126,13 @@ public static Tristate fromBoolean(boolean val) {\n      */\n     public abstract Tristate or(Tristate other);\n \n+    /**\n+     * NOTs this tristate.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0426575e3c6197363550a072f2a7c80b5d384d1"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcyNTI3OA==", "bodyText": "Edited", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2137#discussion_r447725278", "createdAt": "2020-06-30T14:25:36Z", "author": {"login": "ItsDoot"}, "path": "src/main/java/org/spongepowered/api/util/Tristate.java", "diffHunk": "@@ -94,6 +126,13 @@ public static Tristate fromBoolean(boolean val) {\n      */\n     public abstract Tristate or(Tristate other);\n \n+    /**\n+     * NOTs this tristate.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcxOTk0Nw=="}, "originalCommit": {"oid": "d0426575e3c6197363550a072f2a7c80b5d384d1"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczNTg1OA==", "bodyText": "Maybe also change the method name accordingly?", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2137#discussion_r447735858", "createdAt": "2020-06-30T14:39:00Z", "author": {"login": "ST-DDT"}, "path": "src/main/java/org/spongepowered/api/util/Tristate.java", "diffHunk": "@@ -94,6 +126,13 @@ public static Tristate fromBoolean(boolean val) {\n      */\n     public abstract Tristate or(Tristate other);\n \n+    /**\n+     * NOTs this tristate.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcxOTk0Nw=="}, "originalCommit": {"oid": "d0426575e3c6197363550a072f2a7c80b5d384d1"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2MjA0NQ==", "bodyText": "IMO not lines up better with and/or than negate does.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2137#discussion_r447762045", "createdAt": "2020-06-30T15:12:23Z", "author": {"login": "ItsDoot"}, "path": "src/main/java/org/spongepowered/api/util/Tristate.java", "diffHunk": "@@ -94,6 +126,13 @@ public static Tristate fromBoolean(boolean val) {\n      */\n     public abstract Tristate or(Tristate other);\n \n+    /**\n+     * NOTs this tristate.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcxOTk0Nw=="}, "originalCommit": {"oid": "d0426575e3c6197363550a072f2a7c80b5d384d1"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDQ3NTQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/api/util/Tristate.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDoyMDoxNFrOGq-uNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODoxOTo1OFrOGrI_PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcyMTAxNA==", "bodyText": "I feel like this should be named fromNullableBoolean.\nIf we have this, should we also have an asNullableBoolean analogue?", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2137#discussion_r447721014", "createdAt": "2020-06-30T14:20:14Z", "author": {"login": "dualspiral"}, "path": "src/main/java/org/spongepowered/api/util/Tristate.java", "diffHunk": "@@ -78,6 +95,21 @@ public static Tristate fromBoolean(boolean val) {\n         return val ? TRUE : FALSE;\n     }\n \n+    /**\n+     * Returns the appropriate tristate for a given nullable boolean value,\n+     * where null equates to {@link Tristate#UNDEFINED}.\n+     *\n+     * @param val The nullable boolean value\n+     * @return The appropriate tristate\n+     */\n+    public static Tristate fromNullable(@Nullable Boolean val) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0426575e3c6197363550a072f2a7c80b5d384d1"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcyNDEyNQ==", "bodyText": "See, I was thinking about doing asNullableBoolean, but what should it return? Returning an actual nullable boolean would make sense, but Sponge prefers Optionals... which to me would feel a little weird.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2137#discussion_r447724125", "createdAt": "2020-06-30T14:24:14Z", "author": {"login": "ItsDoot"}, "path": "src/main/java/org/spongepowered/api/util/Tristate.java", "diffHunk": "@@ -78,6 +95,21 @@ public static Tristate fromBoolean(boolean val) {\n         return val ? TRUE : FALSE;\n     }\n \n+    /**\n+     * Returns the appropriate tristate for a given nullable boolean value,\n+     * where null equates to {@link Tristate#UNDEFINED}.\n+     *\n+     * @param val The nullable boolean value\n+     * @return The appropriate tristate\n+     */\n+    public static Tristate fromNullable(@Nullable Boolean val) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcyMTAxNA=="}, "originalCommit": {"oid": "d0426575e3c6197363550a072f2a7c80b5d384d1"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcyOTk2OQ==", "bodyText": "This is one of those rare cases I'd have a nullable return type as a one-to-one mapping of Boolean<->Tristate - if you can get a Tristate from a Boolean, it stands to reason that you should be able to go the other way just as simply.\nI'll let @Zidane call this one, but I think it should just be a @Nullable Boolean return type. There is an extra clue in the name of the method here, if you're not expecting the possibility of it being null if you grab the Boolean then that's really your lookout.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2137#discussion_r447729969", "createdAt": "2020-06-30T14:31:30Z", "author": {"login": "dualspiral"}, "path": "src/main/java/org/spongepowered/api/util/Tristate.java", "diffHunk": "@@ -78,6 +95,21 @@ public static Tristate fromBoolean(boolean val) {\n         return val ? TRUE : FALSE;\n     }\n \n+    /**\n+     * Returns the appropriate tristate for a given nullable boolean value,\n+     * where null equates to {@link Tristate#UNDEFINED}.\n+     *\n+     * @param val The nullable boolean value\n+     * @return The appropriate tristate\n+     */\n+    public static Tristate fromNullable(@Nullable Boolean val) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcyMTAxNA=="}, "originalCommit": {"oid": "d0426575e3c6197363550a072f2a7c80b5d384d1"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczMTkzOA==", "bodyText": "I would prefer, not to have a asNullableBoolean, because this class is the replacement for the nullable/unset boolean.\nAs for the fromX methods, I would rather name them both from (or fromBoolean) with just different parameters. Let the compiler decide which one it should use.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2137#discussion_r447731938", "createdAt": "2020-06-30T14:33:56Z", "author": {"login": "ST-DDT"}, "path": "src/main/java/org/spongepowered/api/util/Tristate.java", "diffHunk": "@@ -78,6 +95,21 @@ public static Tristate fromBoolean(boolean val) {\n         return val ? TRUE : FALSE;\n     }\n \n+    /**\n+     * Returns the appropriate tristate for a given nullable boolean value,\n+     * where null equates to {@link Tristate#UNDEFINED}.\n+     *\n+     * @param val The nullable boolean value\n+     * @return The appropriate tristate\n+     */\n+    public static Tristate fromNullable(@Nullable Boolean val) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcyMTAxNA=="}, "originalCommit": {"oid": "d0426575e3c6197363550a072f2a7c80b5d384d1"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc1MDg4OQ==", "bodyText": "because this class is the replacement for the nullable/unset boolean.\n\nThat doesn't change my argument at all. I'm saying the mapping should work both ways in case you then interact with some system that isn't Tristate aware - plugins can (and often do) work with third party libraries.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2137#discussion_r447750889", "createdAt": "2020-06-30T14:57:47Z", "author": {"login": "dualspiral"}, "path": "src/main/java/org/spongepowered/api/util/Tristate.java", "diffHunk": "@@ -78,6 +95,21 @@ public static Tristate fromBoolean(boolean val) {\n         return val ? TRUE : FALSE;\n     }\n \n+    /**\n+     * Returns the appropriate tristate for a given nullable boolean value,\n+     * where null equates to {@link Tristate#UNDEFINED}.\n+     *\n+     * @param val The nullable boolean value\n+     * @return The appropriate tristate\n+     */\n+    public static Tristate fromNullable(@Nullable Boolean val) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcyMTAxNA=="}, "originalCommit": {"oid": "d0426575e3c6197363550a072f2a7c80b5d384d1"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4OTIxMw==", "bodyText": "Changed fromNullable to fromNullableBoolean, and added asNullableBoolean.\n\nAs for the fromX methods, I would rather name them both from (or fromBoolean) with just different parameters. Let the compiler decide which one it should use.\n\n@ST-DDT I'd rather users explicitly opt-in to using the nullable boolean conversions. Then it's clear when someone else is reading your code, for example.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2137#discussion_r447889213", "createdAt": "2020-06-30T18:19:58Z", "author": {"login": "ItsDoot"}, "path": "src/main/java/org/spongepowered/api/util/Tristate.java", "diffHunk": "@@ -78,6 +95,21 @@ public static Tristate fromBoolean(boolean val) {\n         return val ? TRUE : FALSE;\n     }\n \n+    /**\n+     * Returns the appropriate tristate for a given nullable boolean value,\n+     * where null equates to {@link Tristate#UNDEFINED}.\n+     *\n+     * @param val The nullable boolean value\n+     * @return The appropriate tristate\n+     */\n+    public static Tristate fromNullable(@Nullable Boolean val) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcyMTAxNA=="}, "originalCommit": {"oid": "d0426575e3c6197363550a072f2a7c80b5d384d1"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTY4MDIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/api/util/Tristate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo1NTo0MVrOGrKQsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOToxMToxOVrOGrKzfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxMDA2Ng==", "bodyText": "may return? I see no Optional return so state it will.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2137#discussion_r447910066", "createdAt": "2020-06-30T18:55:41Z", "author": {"login": "Zidane"}, "path": "src/main/java/org/spongepowered/api/util/Tristate.java", "diffHunk": "@@ -102,4 +141,23 @@ public static Tristate fromBoolean(boolean val) {\n     public boolean asBoolean() {\n         return this.val;\n     }\n+\n+    /**\n+     * Returns the nullable boolean representation of this tristate,\n+     * where {@link Tristate#UNDEFINED} equates to null.\n+     *\n+     * <p>Note: To ensure that there is a one-to-one mapping of nullable\n+     * booleans to and from {@link Tristate}, this method may return null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "818b463bf67c836dfb6cc6dddb897f06cb5e9efd"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxODk3Mg==", "bodyText": "Fixed", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2137#discussion_r447918972", "createdAt": "2020-06-30T19:11:19Z", "author": {"login": "ItsDoot"}, "path": "src/main/java/org/spongepowered/api/util/Tristate.java", "diffHunk": "@@ -102,4 +141,23 @@ public static Tristate fromBoolean(boolean val) {\n     public boolean asBoolean() {\n         return this.val;\n     }\n+\n+    /**\n+     * Returns the nullable boolean representation of this tristate,\n+     * where {@link Tristate#UNDEFINED} equates to null.\n+     *\n+     * <p>Note: To ensure that there is a one-to-one mapping of nullable\n+     * booleans to and from {@link Tristate}, this method may return null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxMDA2Ng=="}, "originalCommit": {"oid": "818b463bf67c836dfb6cc6dddb897f06cb5e9efd"}, "originalPosition": 108}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2401, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}