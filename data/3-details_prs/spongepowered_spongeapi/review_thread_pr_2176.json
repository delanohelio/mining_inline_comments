{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUxNTMzMTc3", "number": 2176, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQyMToxNDo1MFrOESFbOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxNDozNTo0NVrOEd-kFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Mzk4NzEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/api/placeholder/PlaceholderParsers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQyMToxNDo1MFrOG3HegQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQyMjowNToxOFrOG3HtTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ0NzM2MQ==", "bodyText": "Should turn into Suppliers, DummyObjectProvider is gonna be nuked.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2176#discussion_r460447361", "createdAt": "2020-07-25T21:14:50Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/api/placeholder/PlaceholderParsers.java", "diffHunk": "@@ -22,47 +22,32 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package org.spongepowered.api.event.entity.living;\n+package org.spongepowered.api.placeholder;\n \n-import org.spongepowered.api.entity.living.Humanoid;\n-import org.spongepowered.api.event.Cancellable;\n-import org.spongepowered.api.event.Event;\n-import org.spongepowered.api.util.annotation.eventgen.GenerateFactoryMethod;\n+import org.spongepowered.api.util.generator.dummy.DummyObjectProvider;\n \n /**\n- * Called when a human's level is changed.\n+ * Contains Sponge provided {@link PlaceholderParser}s.\n  */\n-@GenerateFactoryMethod\n-public interface ChangeLevelEvent extends Event, Cancellable {\n+public class PlaceholderParsers {\n \n-    /**\n-     * Gets the {@link Humanoid}.\n-     *\n-     * @return The humanoid\n-     */\n-    Humanoid getHumanoid();\n+    // SORTFIELDS: ON\n \n     /**\n-     * Gets the original level of the human.\n-     *\n-     * @return The original level of the human\n+     * A parser that returns the associated source's current world, if\n+     * applicable, else the default world.\n      */\n-    int getOriginalLevel();\n+    static PlaceholderParser CURRENT_WORLD = DummyObjectProvider.createFor(PlaceholderParser.class, \"CURRENT_WORLD\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eb0e31eecea8287c39b041a599986ba2a1a4b34"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ1MTE0OA==", "bodyText": "Done", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2176#discussion_r460451148", "createdAt": "2020-07-25T22:05:18Z", "author": {"login": "ImMorpheus"}, "path": "src/main/java/org/spongepowered/api/placeholder/PlaceholderParsers.java", "diffHunk": "@@ -22,47 +22,32 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package org.spongepowered.api.event.entity.living;\n+package org.spongepowered.api.placeholder;\n \n-import org.spongepowered.api.entity.living.Humanoid;\n-import org.spongepowered.api.event.Cancellable;\n-import org.spongepowered.api.event.Event;\n-import org.spongepowered.api.util.annotation.eventgen.GenerateFactoryMethod;\n+import org.spongepowered.api.util.generator.dummy.DummyObjectProvider;\n \n /**\n- * Called when a human's level is changed.\n+ * Contains Sponge provided {@link PlaceholderParser}s.\n  */\n-@GenerateFactoryMethod\n-public interface ChangeLevelEvent extends Event, Cancellable {\n+public class PlaceholderParsers {\n \n-    /**\n-     * Gets the {@link Humanoid}.\n-     *\n-     * @return The humanoid\n-     */\n-    Humanoid getHumanoid();\n+    // SORTFIELDS: ON\n \n     /**\n-     * Gets the original level of the human.\n-     *\n-     * @return The original level of the human\n+     * A parser that returns the associated source's current world, if\n+     * applicable, else the default world.\n      */\n-    int getOriginalLevel();\n+    static PlaceholderParser CURRENT_WORLD = DummyObjectProvider.createFor(PlaceholderParser.class, \"CURRENT_WORLD\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ0NzM2MQ=="}, "originalCommit": {"oid": "0eb0e31eecea8287c39b041a599986ba2a1a4b34"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODY5MTMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/api/CatalogTypes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxNDozNDo1N1rOHJb2OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxNDozNDo1N1rOHJb2OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1NTQ4MQ==", "bodyText": "Extra lines", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2176#discussion_r479655481", "createdAt": "2020-08-29T14:34:57Z", "author": {"login": "Zidane"}, "path": "src/main/java/org/spongepowered/api/CatalogTypes.java", "diffHunk": "@@ -220,6 +221,9 @@\n \n     public static final Class<PortalType> PORTAL_TYPE = PortalType.class;\n \n+    public static final Class<PlaceholderParser> PLACEHOLDER_PARSER = PlaceholderParser.class;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3643edede0bf63c6f3fb8696963a3b91fe8e1901"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODY5MTc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/api/placeholder/PlaceholderParsers.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxNDozNToyM1rOHJb2Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxNDozNToyM1rOHJb2Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1NTUyNw==", "bodyText": "finalize", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2176#discussion_r479655527", "createdAt": "2020-08-29T14:35:23Z", "author": {"login": "Zidane"}, "path": "src/main/java/org/spongepowered/api/placeholder/PlaceholderParsers.java", "diffHunk": "@@ -22,47 +22,34 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package org.spongepowered.api.event.entity.living;\n+package org.spongepowered.api.text.placeholder;\n \n-import org.spongepowered.api.entity.living.Humanoid;\n-import org.spongepowered.api.event.Cancellable;\n-import org.spongepowered.api.event.Event;\n-import org.spongepowered.api.util.annotation.eventgen.GenerateFactoryMethod;\n+import org.spongepowered.api.Sponge;\n+\n+import java.util.function.Supplier;\n \n /**\n- * Called when a human's level is changed.\n+ * Contains Sponge provided {@link PlaceholderParser}s.\n  */\n-@GenerateFactoryMethod\n-public interface ChangeLevelEvent extends Event, Cancellable {\n+public class PlaceholderParsers {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3643edede0bf63c6f3fb8696963a3b91fe8e1901"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODY5MjA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/api/placeholder/PlaceholderText.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxNDozNTo0NVrOHJb2iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxNDozNTo0NVrOHJb2iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1NTU2MA==", "bodyText": "PlaceholderComponent", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2176#discussion_r479655560", "createdAt": "2020-08-29T14:35:45Z", "author": {"login": "Zidane"}, "path": "src/main/java/org/spongepowered/api/placeholder/PlaceholderText.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.text.placeholder;\n+\n+import net.kyori.adventure.text.Component;\n+import net.kyori.adventure.text.ComponentLike;\n+import net.kyori.adventure.text.TextComponent;\n+import org.checkerframework.checker.nullness.qual.NonNull;\n+import org.spongepowered.api.Sponge;\n+import org.spongepowered.api.util.ResettableBuilder;\n+\n+/**\n+ * A {@link ComponentLike} that can be used in {@link Component} building methods\n+ * that represents a placeholder in text.\n+ *\n+ * <p>A {@link PlaceholderText} is the collection of a {@link PlaceholderParser}\n+ * along with contextual data in the supplied {@link PlaceholderContext},\n+ * enabling its use in a {@link TextComponent} object.</p>\n+ *\n+ * <p>Such placeholders will generally be built from tokenized strings, however\n+ * these objects make no assumption about the format of text templating. Such a\n+ * system can therefore be used by other templating engines without conforming\n+ * to a particular standard.</p>\n+ *\n+ * <p>The {@link PlaceholderContext} is fixed when this object is created, but\n+ * {@link PlaceholderParser#parse(PlaceholderContext)} is not called until\n+ * {@link #asComponent()} is called. Thus, any {@link TextComponent} object that is created\n+ * will reflect the time that the {@link TextComponent} object was requested, and not when\n+ * this object itself was created. It therefore follows that implementations must\n+ * not cache the result of {@link #asComponent()} unless it is known that the supplied\n+ * parser is <strong>not</strong> sensitive to the time of invocation.</p>\n+ */\n+public interface PlaceholderText extends ComponentLike {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3643edede0bf63c6f3fb8696963a3b91fe8e1901"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2428, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}