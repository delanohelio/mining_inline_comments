{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyMjI3MDkw", "number": 2116, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNzo0Nzo0M1rOD4b4WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMzoyMzo0M1rOEFQQIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTAzNjQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/api/service/placeholder/PlaceholderService.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNzo0Nzo0M1rOGPQsOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODozMTozOVrOGPR6Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY1NTI5MQ==", "bodyText": "I dislike API methods where a parameter may come at them as null. It would be far cleaner to do separated methods that make the intent clear.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2116#discussion_r418655291", "createdAt": "2020-05-01T17:47:43Z", "author": {"login": "Zidane"}, "path": "src/main/java/org/spongepowered/api/service/placeholder/PlaceholderService.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.service.placeholder;\n+\n+import org.spongepowered.api.CatalogType;\n+import org.spongepowered.api.GameRegistry;\n+import org.spongepowered.api.event.game.GameRegistryEvent;\n+import org.spongepowered.api.service.ServiceManager;\n+import org.spongepowered.api.text.Text;\n+import org.spongepowered.api.text.TextRepresentable;\n+import org.spongepowered.api.text.channel.MessageReceiver;\n+\n+import java.util.Optional;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A service that handles the parsing of placeholder tokens. This service is\n+ * replaceable in the {@link ServiceManager}.\n+ *\n+ * <p>Plugins requesting the use of a placeholder should use the methods\n+ * supplied by this service to construct {@link PlaceholderText} which can\n+ * be used in {@link Text}.</p>\n+ *\n+ * <p>Plugins wishing to supply placeholders should supply them via the\n+ * appropriate {@link GameRegistryEvent.Register} event or via\n+ * {@link GameRegistry#register(Class, CatalogType)}.</p>\n+ *\n+ * <p>This service makes no assumption about how a plugin parses/tokenizes a\n+ * string in order to determine what placeholders to use.</p>\n+ */\n+public interface PlaceholderService {\n+\n+    /**\n+     * Parses a string on behalf of a {@link MessageReceiver}.\n+     *\n+     * <p>It is entirely up to the implementation of the service to determine\n+     * how to select a placeholder if the supplied {@code token} is not a\n+     * known ID for a registered {@link PlaceholderParser}.</p>\n+     *\n+     * @param messageReceiver The source that tokens should use as a context.\n+     *  May be {@code null}, but some tokens may not parse without this\n+     *  supplied.\n+     * @param token The token to obtain.\n+     * @return The parsed {@link Text}.\n+     */\n+    default Optional<PlaceholderText> parse(@Nullable MessageReceiver messageReceiver, String token) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e9a6bcc37654949d9ab8f8a0c2375e16eada17f"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY1Nzg0Ng==", "bodyText": "Normally, I'd agree, and don't mind the idea of making more overloads. However, this is inteded to be plugin implemented, and as a group of methods that do the same thing with different conditions I opted to have a \"master\" method that has two nullable parameters.\n\nIf we want plugins to do as little as needed by using default methods, we're going to need to have a @Nullable source somewhere in one of the methods.\nAlternatively, we just do away with default methods as this is a totally new interface, which I admit, I am tempted to do.\n\nThat said, I do need to alter the order of the parameters anyway. The \"token\" should come first, as that's the most important part of the call.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2116#discussion_r418657846", "createdAt": "2020-05-01T17:53:05Z", "author": {"login": "dualspiral"}, "path": "src/main/java/org/spongepowered/api/service/placeholder/PlaceholderService.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.service.placeholder;\n+\n+import org.spongepowered.api.CatalogType;\n+import org.spongepowered.api.GameRegistry;\n+import org.spongepowered.api.event.game.GameRegistryEvent;\n+import org.spongepowered.api.service.ServiceManager;\n+import org.spongepowered.api.text.Text;\n+import org.spongepowered.api.text.TextRepresentable;\n+import org.spongepowered.api.text.channel.MessageReceiver;\n+\n+import java.util.Optional;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A service that handles the parsing of placeholder tokens. This service is\n+ * replaceable in the {@link ServiceManager}.\n+ *\n+ * <p>Plugins requesting the use of a placeholder should use the methods\n+ * supplied by this service to construct {@link PlaceholderText} which can\n+ * be used in {@link Text}.</p>\n+ *\n+ * <p>Plugins wishing to supply placeholders should supply them via the\n+ * appropriate {@link GameRegistryEvent.Register} event or via\n+ * {@link GameRegistry#register(Class, CatalogType)}.</p>\n+ *\n+ * <p>This service makes no assumption about how a plugin parses/tokenizes a\n+ * string in order to determine what placeholders to use.</p>\n+ */\n+public interface PlaceholderService {\n+\n+    /**\n+     * Parses a string on behalf of a {@link MessageReceiver}.\n+     *\n+     * <p>It is entirely up to the implementation of the service to determine\n+     * how to select a placeholder if the supplied {@code token} is not a\n+     * known ID for a registered {@link PlaceholderParser}.</p>\n+     *\n+     * @param messageReceiver The source that tokens should use as a context.\n+     *  May be {@code null}, but some tokens may not parse without this\n+     *  supplied.\n+     * @param token The token to obtain.\n+     * @return The parsed {@link Text}.\n+     */\n+    default Optional<PlaceholderText> parse(@Nullable MessageReceiver messageReceiver, String token) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY1NTI5MQ=="}, "originalCommit": {"oid": "9e9a6bcc37654949d9ab8f8a0c2375e16eada17f"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY2NzQ4MQ==", "bodyText": "I'd do away with the default methods. That way we don't muddy the contract.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2116#discussion_r418667481", "createdAt": "2020-05-01T18:14:31Z", "author": {"login": "Zidane"}, "path": "src/main/java/org/spongepowered/api/service/placeholder/PlaceholderService.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.service.placeholder;\n+\n+import org.spongepowered.api.CatalogType;\n+import org.spongepowered.api.GameRegistry;\n+import org.spongepowered.api.event.game.GameRegistryEvent;\n+import org.spongepowered.api.service.ServiceManager;\n+import org.spongepowered.api.text.Text;\n+import org.spongepowered.api.text.TextRepresentable;\n+import org.spongepowered.api.text.channel.MessageReceiver;\n+\n+import java.util.Optional;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A service that handles the parsing of placeholder tokens. This service is\n+ * replaceable in the {@link ServiceManager}.\n+ *\n+ * <p>Plugins requesting the use of a placeholder should use the methods\n+ * supplied by this service to construct {@link PlaceholderText} which can\n+ * be used in {@link Text}.</p>\n+ *\n+ * <p>Plugins wishing to supply placeholders should supply them via the\n+ * appropriate {@link GameRegistryEvent.Register} event or via\n+ * {@link GameRegistry#register(Class, CatalogType)}.</p>\n+ *\n+ * <p>This service makes no assumption about how a plugin parses/tokenizes a\n+ * string in order to determine what placeholders to use.</p>\n+ */\n+public interface PlaceholderService {\n+\n+    /**\n+     * Parses a string on behalf of a {@link MessageReceiver}.\n+     *\n+     * <p>It is entirely up to the implementation of the service to determine\n+     * how to select a placeholder if the supplied {@code token} is not a\n+     * known ID for a registered {@link PlaceholderParser}.</p>\n+     *\n+     * @param messageReceiver The source that tokens should use as a context.\n+     *  May be {@code null}, but some tokens may not parse without this\n+     *  supplied.\n+     * @param token The token to obtain.\n+     * @return The parsed {@link Text}.\n+     */\n+    default Optional<PlaceholderText> parse(@Nullable MessageReceiver messageReceiver, String token) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY1NTI5MQ=="}, "originalCommit": {"oid": "9e9a6bcc37654949d9ab8f8a0c2375e16eada17f"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NTI5NA==", "bodyText": "Okie doke, all sorted.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2116#discussion_r418675294", "createdAt": "2020-05-01T18:31:39Z", "author": {"login": "dualspiral"}, "path": "src/main/java/org/spongepowered/api/service/placeholder/PlaceholderService.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.service.placeholder;\n+\n+import org.spongepowered.api.CatalogType;\n+import org.spongepowered.api.GameRegistry;\n+import org.spongepowered.api.event.game.GameRegistryEvent;\n+import org.spongepowered.api.service.ServiceManager;\n+import org.spongepowered.api.text.Text;\n+import org.spongepowered.api.text.TextRepresentable;\n+import org.spongepowered.api.text.channel.MessageReceiver;\n+\n+import java.util.Optional;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A service that handles the parsing of placeholder tokens. This service is\n+ * replaceable in the {@link ServiceManager}.\n+ *\n+ * <p>Plugins requesting the use of a placeholder should use the methods\n+ * supplied by this service to construct {@link PlaceholderText} which can\n+ * be used in {@link Text}.</p>\n+ *\n+ * <p>Plugins wishing to supply placeholders should supply them via the\n+ * appropriate {@link GameRegistryEvent.Register} event or via\n+ * {@link GameRegistry#register(Class, CatalogType)}.</p>\n+ *\n+ * <p>This service makes no assumption about how a plugin parses/tokenizes a\n+ * string in order to determine what placeholders to use.</p>\n+ */\n+public interface PlaceholderService {\n+\n+    /**\n+     * Parses a string on behalf of a {@link MessageReceiver}.\n+     *\n+     * <p>It is entirely up to the implementation of the service to determine\n+     * how to select a placeholder if the supplied {@code token} is not a\n+     * known ID for a registered {@link PlaceholderParser}.</p>\n+     *\n+     * @param messageReceiver The source that tokens should use as a context.\n+     *  May be {@code null}, but some tokens may not parse without this\n+     *  supplied.\n+     * @param token The token to obtain.\n+     * @return The parsed {@link Text}.\n+     */\n+    default Optional<PlaceholderText> parse(@Nullable MessageReceiver messageReceiver, String token) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY1NTI5MQ=="}, "originalCommit": {"oid": "9e9a6bcc37654949d9ab8f8a0c2375e16eada17f"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTUyMzE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/api/service/placeholder/PlaceholderService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMDo1MzozOVrOGPVdUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMDo1MzozOVrOGPVdUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczMzM5Mg==", "bodyText": "arguments  sounds like there are many, but there is only a single string.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2116#discussion_r418733392", "createdAt": "2020-05-01T20:53:39Z", "author": {"login": "ST-DDT"}, "path": "src/main/java/org/spongepowered/api/service/placeholder/PlaceholderService.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.service.placeholder;\n+\n+import org.spongepowered.api.event.game.GameRegistryEvent;\n+import org.spongepowered.api.service.ServiceManager;\n+import org.spongepowered.api.text.Text;\n+import org.spongepowered.api.text.TextRepresentable;\n+import org.spongepowered.api.text.channel.MessageReceiver;\n+\n+import java.util.Optional;\n+\n+/**\n+ * A service that handles the parsing of placeholder tokens. This service is\n+ * replaceable in the {@link ServiceManager}.\n+ *\n+ * <p>Plugins requesting the use of a placeholder should use the methods\n+ * supplied by this service to construct {@link PlaceholderText} which can\n+ * be used in {@link Text}.</p>\n+ *\n+ * <p>Plugins wishing to supply placeholders should supply them via the\n+ * appropriate {@link GameRegistryEvent.Register} event.</p>\n+ *\n+ * <p>This service makes no assumption about how a plugin parses/tokenizes a\n+ * string in order to determine what placeholders to use.</p>\n+ */\n+public interface PlaceholderService {\n+\n+    /**\n+     * Gets a {@link PlaceholderText} based on the provided token.\n+     *\n+     * <p>It is entirely up to the implementation of the service to determine\n+     * how to select a placeholder if the supplied {@code token} is not a\n+     * known ID for a registered {@link PlaceholderParser}.</p>\n+     *\n+     * @param token The token to obtain.\n+     * @return The parsed {@link Text}.\n+     */\n+    Optional<PlaceholderText> parse(String token);\n+\n+    /**\n+     * Gets a {@link PlaceholderText} based on the provided token,\n+     * using the provided {@link MessageReceiver} for context.\n+     *\n+     * <p>It is entirely up to the implementation of the service to determine\n+     * how to select a placeholder if the supplied {@code token} is not a\n+     * known ID for a registered {@link PlaceholderParser}.</p>\n+     *\n+     * @param token The token to obtain.\n+     * @param messageReceiver The source that tokens should use as a context.\n+     * @return The parsed {@link Text}.\n+     */\n+    Optional<PlaceholderText> parse(String token, MessageReceiver messageReceiver);\n+\n+    /**\n+     * Gets a {@link PlaceholderText} based on the provided token,\n+     * using the provided {@link MessageReceiver} and supplied argument string\n+     * for context.\n+     *\n+     * <p>It is entirely up to the implementation of the service to determine\n+     * how to select a placeholder if the supplied {@code token} is not a\n+     * known ID for a registered {@link PlaceholderParser}.</p>\n+     *\n+     * @param token The token name.\n+     * @param arguments The arguments for the token.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec0e674b0eba5e0e7f8e7919a8047a7880b8588e"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzEwMDgxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/api/service/placeholder/PlaceholderText.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwNzo1MzowMlrOGPhTwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwOToyNTo0NlrOGPh0fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkyNzU1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Optional<String> getArgument();\n          \n          \n            \n                Optional<String> getArguments();\n          \n      \n    \n    \n  \n\nSince the argument in PlaceholderService was modified from argument to argumentString, it'd likely be best to make that modification here as well.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2116#discussion_r418927552", "createdAt": "2020-05-02T07:53:02Z", "author": {"login": "NickImpact"}, "path": "src/main/java/org/spongepowered/api/service/placeholder/PlaceholderText.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.service.placeholder;\n+\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.spongepowered.api.Sponge;\n+import org.spongepowered.api.entity.living.player.Player;\n+import org.spongepowered.api.text.Text;\n+import org.spongepowered.api.text.TextRepresentable;\n+import org.spongepowered.api.text.channel.MessageReceiver;\n+import org.spongepowered.api.util.ResettableBuilder;\n+\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.function.Supplier;\n+\n+/**\n+ * A {@link TextRepresentable} that can be used in {@link Text} building methods\n+ * that represents a placeholder in text.\n+ *\n+ * <p>A {@link PlaceholderText} is the collection of a {@link PlaceholderParser}\n+ * along with contextual data, enabling its use in a {@link Text} object.</p>\n+ *\n+ * <p>While such placeholders will generally be built from tokenised strings,\n+ * these objects make no assumption about the format of text templating. Such a\n+ * system can therefore be used by other templating engines without conforming\n+ * to a particular standard.</p>\n+ */\n+public interface PlaceholderText extends TextRepresentable {\n+\n+    /**\n+     * Gets a builder for creating {@link PlaceholderText}.\n+     *\n+     * @return A {@link Builder}\n+     */\n+    static PlaceholderText.Builder builder() {\n+        return Sponge.getServiceManager().provideUnchecked(PlaceholderService.class).placeholderBuilder();\n+    }\n+\n+    /**\n+     * Gets the {@link PlaceholderParser} that handles this\n+     * placeholder.\n+     *\n+     * @return The {@link PlaceholderParser}\n+     */\n+    PlaceholderParser getParser();\n+\n+    /**\n+     * If provided, the {@link MessageReceiver} which to pull information\n+     * from when building the placeholder text.\n+     *\n+     * <p>Examples of how this might affect a placeholder are:</p>\n+     *\n+     * <ul>\n+     *     <li>\n+     *         For a \"name\" placeholder that prints out the source's name,\n+     *         the name would be selected from this source.\n+     *     </li>\n+     *     <li>\n+     *         For a \"current world\" placeholder that returns a player's\n+     *         monetary current world, this would pull the balance from the\n+     *         player.\n+     *     </li>\n+     * </ul>\n+     *\n+     * <p>It is important to note that the associated source does not\n+     * necessarily have to be the sender/invoker of a message, nor does it\n+     * have to be the recipient. The source is selected by the context of\n+     * builder. It is up to plugins that use such placeholders to be aware\n+     * of the context of which the placeholder is used.</p>\n+     *\n+     * <p>If an invalid {@link MessageReceiver} is provided for the context\n+     * of the placeholder, then the associated {@link PlaceholderParser} must\n+     * return a {@link Text#EMPTY}.</p>\n+     *\n+     * @return The associated {@link MessageReceiver}, if any.\n+     */\n+    Optional<MessageReceiver> getAssociatedReceiver();\n+\n+    /**\n+     * The variable string passed to this token to provide contextual\n+     * information.\n+     *\n+     * @return The argument, if any\n+     */\n+    Optional<String> getArgument();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b48c9fdc25ee2945fc10fe7405bd269155452ff"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzNTkzNQ==", "bodyText": "Gone for getArgumentString instead.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2116#discussion_r418935935", "createdAt": "2020-05-02T09:25:46Z", "author": {"login": "dualspiral"}, "path": "src/main/java/org/spongepowered/api/service/placeholder/PlaceholderText.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.service.placeholder;\n+\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.spongepowered.api.Sponge;\n+import org.spongepowered.api.entity.living.player.Player;\n+import org.spongepowered.api.text.Text;\n+import org.spongepowered.api.text.TextRepresentable;\n+import org.spongepowered.api.text.channel.MessageReceiver;\n+import org.spongepowered.api.util.ResettableBuilder;\n+\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.function.Supplier;\n+\n+/**\n+ * A {@link TextRepresentable} that can be used in {@link Text} building methods\n+ * that represents a placeholder in text.\n+ *\n+ * <p>A {@link PlaceholderText} is the collection of a {@link PlaceholderParser}\n+ * along with contextual data, enabling its use in a {@link Text} object.</p>\n+ *\n+ * <p>While such placeholders will generally be built from tokenised strings,\n+ * these objects make no assumption about the format of text templating. Such a\n+ * system can therefore be used by other templating engines without conforming\n+ * to a particular standard.</p>\n+ */\n+public interface PlaceholderText extends TextRepresentable {\n+\n+    /**\n+     * Gets a builder for creating {@link PlaceholderText}.\n+     *\n+     * @return A {@link Builder}\n+     */\n+    static PlaceholderText.Builder builder() {\n+        return Sponge.getServiceManager().provideUnchecked(PlaceholderService.class).placeholderBuilder();\n+    }\n+\n+    /**\n+     * Gets the {@link PlaceholderParser} that handles this\n+     * placeholder.\n+     *\n+     * @return The {@link PlaceholderParser}\n+     */\n+    PlaceholderParser getParser();\n+\n+    /**\n+     * If provided, the {@link MessageReceiver} which to pull information\n+     * from when building the placeholder text.\n+     *\n+     * <p>Examples of how this might affect a placeholder are:</p>\n+     *\n+     * <ul>\n+     *     <li>\n+     *         For a \"name\" placeholder that prints out the source's name,\n+     *         the name would be selected from this source.\n+     *     </li>\n+     *     <li>\n+     *         For a \"current world\" placeholder that returns a player's\n+     *         monetary current world, this would pull the balance from the\n+     *         player.\n+     *     </li>\n+     * </ul>\n+     *\n+     * <p>It is important to note that the associated source does not\n+     * necessarily have to be the sender/invoker of a message, nor does it\n+     * have to be the recipient. The source is selected by the context of\n+     * builder. It is up to plugins that use such placeholders to be aware\n+     * of the context of which the placeholder is used.</p>\n+     *\n+     * <p>If an invalid {@link MessageReceiver} is provided for the context\n+     * of the placeholder, then the associated {@link PlaceholderParser} must\n+     * return a {@link Text#EMPTY}.</p>\n+     *\n+     * @return The associated {@link MessageReceiver}, if any.\n+     */\n+    Optional<MessageReceiver> getAssociatedReceiver();\n+\n+    /**\n+     * The variable string passed to this token to provide contextual\n+     * information.\n+     *\n+     * @return The argument, if any\n+     */\n+    Optional<String> getArgument();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkyNzU1Mg=="}, "originalCommit": {"oid": "2b48c9fdc25ee2945fc10fe7405bd269155452ff"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzEwMTY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/api/service/placeholder/PlaceholderText.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwNzo1NDowMFrOGPhUKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwOToyNTo1M1rOGPh0nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkyNzY1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Builder setArgument(@Nullable String string);\n          \n          \n            \n                    Builder setArguments(@Nullable String string);\n          \n      \n    \n    \n  \n\nLike the above thought, probably want to update this builder function to be plural rather than singular", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2116#discussion_r418927657", "createdAt": "2020-05-02T07:54:00Z", "author": {"login": "NickImpact"}, "path": "src/main/java/org/spongepowered/api/service/placeholder/PlaceholderText.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.service.placeholder;\n+\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.spongepowered.api.Sponge;\n+import org.spongepowered.api.entity.living.player.Player;\n+import org.spongepowered.api.text.Text;\n+import org.spongepowered.api.text.TextRepresentable;\n+import org.spongepowered.api.text.channel.MessageReceiver;\n+import org.spongepowered.api.util.ResettableBuilder;\n+\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.function.Supplier;\n+\n+/**\n+ * A {@link TextRepresentable} that can be used in {@link Text} building methods\n+ * that represents a placeholder in text.\n+ *\n+ * <p>A {@link PlaceholderText} is the collection of a {@link PlaceholderParser}\n+ * along with contextual data, enabling its use in a {@link Text} object.</p>\n+ *\n+ * <p>While such placeholders will generally be built from tokenised strings,\n+ * these objects make no assumption about the format of text templating. Such a\n+ * system can therefore be used by other templating engines without conforming\n+ * to a particular standard.</p>\n+ */\n+public interface PlaceholderText extends TextRepresentable {\n+\n+    /**\n+     * Gets a builder for creating {@link PlaceholderText}.\n+     *\n+     * @return A {@link Builder}\n+     */\n+    static PlaceholderText.Builder builder() {\n+        return Sponge.getServiceManager().provideUnchecked(PlaceholderService.class).placeholderBuilder();\n+    }\n+\n+    /**\n+     * Gets the {@link PlaceholderParser} that handles this\n+     * placeholder.\n+     *\n+     * @return The {@link PlaceholderParser}\n+     */\n+    PlaceholderParser getParser();\n+\n+    /**\n+     * If provided, the {@link MessageReceiver} which to pull information\n+     * from when building the placeholder text.\n+     *\n+     * <p>Examples of how this might affect a placeholder are:</p>\n+     *\n+     * <ul>\n+     *     <li>\n+     *         For a \"name\" placeholder that prints out the source's name,\n+     *         the name would be selected from this source.\n+     *     </li>\n+     *     <li>\n+     *         For a \"current world\" placeholder that returns a player's\n+     *         monetary current world, this would pull the balance from the\n+     *         player.\n+     *     </li>\n+     * </ul>\n+     *\n+     * <p>It is important to note that the associated source does not\n+     * necessarily have to be the sender/invoker of a message, nor does it\n+     * have to be the recipient. The source is selected by the context of\n+     * builder. It is up to plugins that use such placeholders to be aware\n+     * of the context of which the placeholder is used.</p>\n+     *\n+     * <p>If an invalid {@link MessageReceiver} is provided for the context\n+     * of the placeholder, then the associated {@link PlaceholderParser} must\n+     * return a {@link Text#EMPTY}.</p>\n+     *\n+     * @return The associated {@link MessageReceiver}, if any.\n+     */\n+    Optional<MessageReceiver> getAssociatedReceiver();\n+\n+    /**\n+     * The variable string passed to this token to provide contextual\n+     * information.\n+     *\n+     * @return The argument, if any\n+     */\n+    Optional<String> getArgument();\n+\n+    /**\n+     * A builder for {@link PlaceholderText} objects.\n+     */\n+    interface Builder extends ResettableBuilder<PlaceholderText, Builder> {\n+\n+        /**\n+         * Sets the token that represents a {@link PlaceholderParser} for use\n+         * in this {@link PlaceholderText}.\n+         *\n+         * @param parser The {@link PlaceholderParser} to use\n+         * @return This, for chaining\n+         */\n+        Builder setParser(PlaceholderParser parser);\n+\n+        /**\n+         * Sets the {@link MessageReceiver} to use as a source of information\n+         * for this {@link PlaceholderText} to the supplied {@link Player}.\n+         *\n+         * @param player The player to associate this text with.\n+         * @return This, for chaining\n+         *\n+         * @see PlaceholderText#getAssociatedReceiver()\n+         */\n+        default Builder setAssociatedSource(Player player) {\n+            UUID uuid = player.getUniqueId();\n+            return setAssociatedSource(() -> Sponge.getServer().getPlayer(uuid).orElse(null));\n+        }\n+\n+        /**\n+         * Sets the {@link MessageReceiver} to use as a source of information\n+         * for this {@link PlaceholderText}. If {@code null}, removes this source.\n+         *\n+         * @param supplier A {@link Supplier} that provides the\n+         *      {@link MessageReceiver}\n+         * @return This, for chaining\n+         *\n+         * @see PlaceholderText#getAssociatedReceiver()\n+         */\n+        Builder setAssociatedSource(@Nullable Supplier<MessageReceiver> supplier);\n+\n+        /**\n+         * Sets a string that represents variables for the supplied token.\n+         * The format of this argument string is dependent on the parser\n+         * supplied to {@link #setParser(PlaceholderParser)} and thus is\n+         * not prescribed here.\n+         *\n+         * @param string The argument string, may be null to reset to\n+         *      the default argument string\n+         * @return This, for chaining\n+         *\n+         * @see PlaceholderText#getArgument()\n+         */\n+        Builder setArgument(@Nullable String string);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b48c9fdc25ee2945fc10fe7405bd269155452ff"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzNTk2NQ==", "bodyText": "As above.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2116#discussion_r418935965", "createdAt": "2020-05-02T09:25:53Z", "author": {"login": "dualspiral"}, "path": "src/main/java/org/spongepowered/api/service/placeholder/PlaceholderText.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.service.placeholder;\n+\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.spongepowered.api.Sponge;\n+import org.spongepowered.api.entity.living.player.Player;\n+import org.spongepowered.api.text.Text;\n+import org.spongepowered.api.text.TextRepresentable;\n+import org.spongepowered.api.text.channel.MessageReceiver;\n+import org.spongepowered.api.util.ResettableBuilder;\n+\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.function.Supplier;\n+\n+/**\n+ * A {@link TextRepresentable} that can be used in {@link Text} building methods\n+ * that represents a placeholder in text.\n+ *\n+ * <p>A {@link PlaceholderText} is the collection of a {@link PlaceholderParser}\n+ * along with contextual data, enabling its use in a {@link Text} object.</p>\n+ *\n+ * <p>While such placeholders will generally be built from tokenised strings,\n+ * these objects make no assumption about the format of text templating. Such a\n+ * system can therefore be used by other templating engines without conforming\n+ * to a particular standard.</p>\n+ */\n+public interface PlaceholderText extends TextRepresentable {\n+\n+    /**\n+     * Gets a builder for creating {@link PlaceholderText}.\n+     *\n+     * @return A {@link Builder}\n+     */\n+    static PlaceholderText.Builder builder() {\n+        return Sponge.getServiceManager().provideUnchecked(PlaceholderService.class).placeholderBuilder();\n+    }\n+\n+    /**\n+     * Gets the {@link PlaceholderParser} that handles this\n+     * placeholder.\n+     *\n+     * @return The {@link PlaceholderParser}\n+     */\n+    PlaceholderParser getParser();\n+\n+    /**\n+     * If provided, the {@link MessageReceiver} which to pull information\n+     * from when building the placeholder text.\n+     *\n+     * <p>Examples of how this might affect a placeholder are:</p>\n+     *\n+     * <ul>\n+     *     <li>\n+     *         For a \"name\" placeholder that prints out the source's name,\n+     *         the name would be selected from this source.\n+     *     </li>\n+     *     <li>\n+     *         For a \"current world\" placeholder that returns a player's\n+     *         monetary current world, this would pull the balance from the\n+     *         player.\n+     *     </li>\n+     * </ul>\n+     *\n+     * <p>It is important to note that the associated source does not\n+     * necessarily have to be the sender/invoker of a message, nor does it\n+     * have to be the recipient. The source is selected by the context of\n+     * builder. It is up to plugins that use such placeholders to be aware\n+     * of the context of which the placeholder is used.</p>\n+     *\n+     * <p>If an invalid {@link MessageReceiver} is provided for the context\n+     * of the placeholder, then the associated {@link PlaceholderParser} must\n+     * return a {@link Text#EMPTY}.</p>\n+     *\n+     * @return The associated {@link MessageReceiver}, if any.\n+     */\n+    Optional<MessageReceiver> getAssociatedReceiver();\n+\n+    /**\n+     * The variable string passed to this token to provide contextual\n+     * information.\n+     *\n+     * @return The argument, if any\n+     */\n+    Optional<String> getArgument();\n+\n+    /**\n+     * A builder for {@link PlaceholderText} objects.\n+     */\n+    interface Builder extends ResettableBuilder<PlaceholderText, Builder> {\n+\n+        /**\n+         * Sets the token that represents a {@link PlaceholderParser} for use\n+         * in this {@link PlaceholderText}.\n+         *\n+         * @param parser The {@link PlaceholderParser} to use\n+         * @return This, for chaining\n+         */\n+        Builder setParser(PlaceholderParser parser);\n+\n+        /**\n+         * Sets the {@link MessageReceiver} to use as a source of information\n+         * for this {@link PlaceholderText} to the supplied {@link Player}.\n+         *\n+         * @param player The player to associate this text with.\n+         * @return This, for chaining\n+         *\n+         * @see PlaceholderText#getAssociatedReceiver()\n+         */\n+        default Builder setAssociatedSource(Player player) {\n+            UUID uuid = player.getUniqueId();\n+            return setAssociatedSource(() -> Sponge.getServer().getPlayer(uuid).orElse(null));\n+        }\n+\n+        /**\n+         * Sets the {@link MessageReceiver} to use as a source of information\n+         * for this {@link PlaceholderText}. If {@code null}, removes this source.\n+         *\n+         * @param supplier A {@link Supplier} that provides the\n+         *      {@link MessageReceiver}\n+         * @return This, for chaining\n+         *\n+         * @see PlaceholderText#getAssociatedReceiver()\n+         */\n+        Builder setAssociatedSource(@Nullable Supplier<MessageReceiver> supplier);\n+\n+        /**\n+         * Sets a string that represents variables for the supplied token.\n+         * The format of this argument string is dependent on the parser\n+         * supplied to {@link #setParser(PlaceholderParser)} and thus is\n+         * not prescribed here.\n+         *\n+         * @param string The argument string, may be null to reset to\n+         *      the default argument string\n+         * @return This, for chaining\n+         *\n+         * @see PlaceholderText#getArgument()\n+         */\n+        Builder setArgument(@Nullable String string);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkyNzY1Nw=="}, "originalCommit": {"oid": "2b48c9fdc25ee2945fc10fe7405bd269155452ff"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzQyMTAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/api/service/placeholder/PlaceholderText.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzoyNjowM1rOGQ_N5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzoyNjowM1rOGQ_N5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2NjE0OQ==", "bodyText": "I like final things.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2116#discussion_r420466149", "createdAt": "2020-05-05T23:26:03Z", "author": {"login": "Zidane"}, "path": "src/main/java/org/spongepowered/api/service/placeholder/PlaceholderText.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.service.placeholder;\n+\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.spongepowered.api.Sponge;\n+import org.spongepowered.api.entity.living.player.Player;\n+import org.spongepowered.api.text.Text;\n+import org.spongepowered.api.text.TextRepresentable;\n+import org.spongepowered.api.text.channel.MessageReceiver;\n+import org.spongepowered.api.util.ResettableBuilder;\n+\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.function.Supplier;\n+\n+/**\n+ * A {@link TextRepresentable} that can be used in {@link Text} building methods\n+ * that represents a placeholder in text.\n+ *\n+ * <p>A {@link PlaceholderText} is the collection of a {@link PlaceholderParser}\n+ * along with contextual data, enabling its use in a {@link Text} object.</p>\n+ *\n+ * <p>While such placeholders will generally be built from tokenised strings,\n+ * these objects make no assumption about the format of text templating. Such a\n+ * system can therefore be used by other templating engines without conforming\n+ * to a particular standard.</p>\n+ */\n+public interface PlaceholderText extends TextRepresentable {\n+\n+    /**\n+     * Gets a builder for creating {@link PlaceholderText}.\n+     *\n+     * @return A {@link Builder}\n+     */\n+    static PlaceholderText.Builder builder() {\n+        return Sponge.getServiceManager().provideUnchecked(PlaceholderService.class).placeholderBuilder();\n+    }\n+\n+    /**\n+     * Gets the {@link PlaceholderParser} that handles this\n+     * placeholder.\n+     *\n+     * @return The {@link PlaceholderParser}\n+     */\n+    PlaceholderParser getParser();\n+\n+    /**\n+     * If provided, the {@link MessageReceiver} which to pull information\n+     * from when building the placeholder text.\n+     *\n+     * <p>Examples of how this might affect a placeholder are:</p>\n+     *\n+     * <ul>\n+     *     <li>\n+     *         For a \"name\" placeholder that prints out the source's name,\n+     *         the name would be selected from this source.\n+     *     </li>\n+     *     <li>\n+     *         For a \"current world\" placeholder that returns a player's\n+     *         monetary current world, this would pull the balance from the\n+     *         player.\n+     *     </li>\n+     * </ul>\n+     *\n+     * <p>It is important to note that the associated source does not\n+     * necessarily have to be the sender/invoker of a message, nor does it\n+     * have to be the recipient. The source is selected by the context of\n+     * builder. It is up to plugins that use such placeholders to be aware\n+     * of the context of which the placeholder is used.</p>\n+     *\n+     * <p>If an invalid {@link MessageReceiver} is provided for the context\n+     * of the placeholder, then the associated {@link PlaceholderParser} must\n+     * return a {@link Text#EMPTY}.</p>\n+     *\n+     * @return The associated {@link MessageReceiver}, if any.\n+     */\n+    Optional<MessageReceiver> getAssociatedReceiver();\n+\n+    /**\n+     * The variable string passed to this token to provide contextual\n+     * information.\n+     *\n+     * @return The argument, if any\n+     */\n+    Optional<String> getArgumentString();\n+\n+    /**\n+     * A builder for {@link PlaceholderText} objects.\n+     */\n+    interface Builder extends ResettableBuilder<PlaceholderText, Builder> {\n+\n+        /**\n+         * Sets the token that represents a {@link PlaceholderParser} for use\n+         * in this {@link PlaceholderText}.\n+         *\n+         * @param parser The {@link PlaceholderParser} to use\n+         * @return This, for chaining\n+         */\n+        Builder setParser(PlaceholderParser parser);\n+\n+        /**\n+         * Sets the {@link MessageReceiver} to use as a source of information\n+         * for this {@link PlaceholderText} to the supplied {@link Player}.\n+         *\n+         * @param player The player to associate this text with.\n+         * @return This, for chaining\n+         *\n+         * @see PlaceholderText#getAssociatedReceiver()\n+         */\n+        default Builder setAssociatedSource(Player player) {\n+            UUID uuid = player.getUniqueId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3576f75377f9e92cf8211423f88f0df76370f717"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTA3NDYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/api/service/placeholder/PlaceholderText.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozMjozOVrOGROxcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTozMjozOVrOGROxcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyMTAxMQ==", "bodyText": "Another current world vs balance issue", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2116#discussion_r420721011", "createdAt": "2020-05-06T11:32:39Z", "author": {"login": "ST-DDT"}, "path": "src/main/java/org/spongepowered/api/service/placeholder/PlaceholderText.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.service.placeholder;\n+\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.spongepowered.api.Sponge;\n+import org.spongepowered.api.entity.living.player.Player;\n+import org.spongepowered.api.text.Text;\n+import org.spongepowered.api.text.TextRepresentable;\n+import org.spongepowered.api.text.channel.MessageReceiver;\n+import org.spongepowered.api.util.ResettableBuilder;\n+\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.function.Supplier;\n+\n+/**\n+ * A {@link TextRepresentable} that can be used in {@link Text} building methods\n+ * that represents a placeholder in text.\n+ *\n+ * <p>A {@link PlaceholderText} is the collection of a {@link PlaceholderParser}\n+ * along with contextual data, enabling its use in a {@link Text} object.</p>\n+ *\n+ * <p>While such placeholders will generally be built from tokenised strings,\n+ * these objects make no assumption about the format of text templating. Such a\n+ * system can therefore be used by other templating engines without conforming\n+ * to a particular standard.</p>\n+ */\n+public interface PlaceholderText extends TextRepresentable {\n+\n+    /**\n+     * Gets a builder for creating {@link PlaceholderText}.\n+     *\n+     * @return A {@link Builder}\n+     */\n+    static PlaceholderText.Builder builder() {\n+        return Sponge.getServiceManager().provideUnchecked(PlaceholderService.class).placeholderBuilder();\n+    }\n+\n+    /**\n+     * Gets the {@link PlaceholderParser} that handles this\n+     * placeholder.\n+     *\n+     * @return The {@link PlaceholderParser}\n+     */\n+    PlaceholderParser getParser();\n+\n+    /**\n+     * If provided, the {@link MessageReceiver} which to pull information from\n+     * when building the placeholder text.\n+     *\n+     * <p>Examples of how this might affect a placeholder are:</p>\n+     *\n+     * <ul>\n+     *     <li>\n+     *         For a \"name\" placeholder that prints out the source's name,\n+     *         the name would be selected from this source.\n+     *     </li>\n+     *     <li>\n+     *         For a \"current world\" placeholder that returns a player's\n+     *         monetary current world, this would pull the balance from the\n+     *         player.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bcac8912055ae516f4127827410da0d3d09eb10"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTM1NTk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/api/service/placeholder/PlaceholderText.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMjozODoyMFrOGiImIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMjozODoyMFrOGiImIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ0NTYwMg==", "bodyText": "This one does not state its nullability.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2116#discussion_r438445602", "createdAt": "2020-06-10T22:38:20Z", "author": {"login": "ST-DDT"}, "path": "src/main/java/org/spongepowered/api/service/placeholder/PlaceholderText.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.service.placeholder;\n+\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.spongepowered.api.Sponge;\n+import org.spongepowered.api.entity.living.player.Player;\n+import org.spongepowered.api.text.Text;\n+import org.spongepowered.api.text.TextRepresentable;\n+import org.spongepowered.api.text.channel.MessageReceiver;\n+import org.spongepowered.api.util.ResettableBuilder;\n+\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.function.Supplier;\n+\n+/**\n+ * A {@link TextRepresentable} that can be used in {@link Text} building methods\n+ * that represents a placeholder in text.\n+ *\n+ * <p>A {@link PlaceholderText} is the collection of a {@link PlaceholderParser}\n+ * along with contextual data, enabling its use in a {@link Text} object.</p>\n+ *\n+ * <p>While such placeholders will generally be built from tokenised strings,\n+ * these objects make no assumption about the format of text templating. Such a\n+ * system can therefore be used by other templating engines without conforming\n+ * to a particular standard.</p>\n+ */\n+public interface PlaceholderText extends TextRepresentable {\n+\n+    /**\n+     * Gets a builder for creating {@link PlaceholderText}.\n+     *\n+     * @return A {@link Builder}\n+     */\n+    static PlaceholderText.Builder builder() {\n+        return Sponge.getServiceManager().provideUnchecked(PlaceholderService.class).placeholderBuilder();\n+    }\n+\n+    /**\n+     * Gets the {@link PlaceholderParser} that handles this\n+     * placeholder.\n+     *\n+     * @return The {@link PlaceholderParser}\n+     */\n+    PlaceholderParser getParser();\n+\n+    /**\n+     * If provided, the {@link Object} which to pull information from\n+     * when building the placeholder text.\n+     *\n+     * <p>Examples of how this might affect a placeholder are:</p>\n+     *\n+     * <ul>\n+     *     <li>\n+     *         For a \"name\" placeholder that prints out the source's name,\n+     *         the name would be selected from this source.\n+     *     </li>\n+     *     <li>\n+     *         For a \"current world\" placeholder that returns a player's current\n+     *         world, this would pull the name of that current world from the\n+     *         player.\n+     *     </li>\n+     * </ul>\n+     *\n+     * <p>It is important to note that the associated context does not\n+     * necessarily have to be the sender/invoker of a message, nor does it\n+     * have to be the recipient. The source is selected by the context of\n+     * builder. It is up to plugins that use such placeholders to be aware\n+     * of the context of which the placeholder is used.\n+     * {@link PlaceholderParser}s should make no assumption about the origin of\n+     * the context.</p>\n+     *\n+     * <p>If an invalid {@link Object} is provided for the context\n+     * of the placeholder, then the associated {@link PlaceholderParser} must\n+     * return a {@link Text#EMPTY}.</p>\n+     *\n+     * @return The associated {@link Object}, if any.\n+     */\n+    Optional<Object> getAssociatedObject();\n+\n+    /**\n+     * The variable string passed to this token to provide contextual\n+     * information.\n+     *\n+     * @return The argument, if any\n+     */\n+    Optional<String> getArgumentString();\n+\n+    /**\n+     * A builder for {@link PlaceholderText} objects.\n+     */\n+    interface Builder extends ResettableBuilder<PlaceholderText, Builder> {\n+\n+        /**\n+         * Sets the token that represents a {@link PlaceholderParser} for use\n+         * in this {@link PlaceholderText}.\n+         *\n+         * @param parser The {@link PlaceholderParser} to use\n+         * @return This, for chaining\n+         */\n+        Builder setParser(PlaceholderParser parser);\n+\n+        /**\n+         * Sets the {@link Object} to use as a source of information\n+         * for this {@link PlaceholderText} to the supplied {@link Player}.\n+         *\n+         * @param player The player to associate this text with.\n+         * @return This, for chaining\n+         *\n+         * @see PlaceholderText#getAssociatedObject()\n+         */\n+        default Builder setAssociatedObject(Player player) {\n+            final UUID uuid = player.getUniqueId();\n+            return setAssociatedObject(() -> Sponge.getServer().getPlayer(uuid).orElse(null));\n+        }\n+\n+        /**\n+         * Sets the {@link Object} to use as a source of information\n+         * for this {@link PlaceholderText}. If {@code null}, removes this\n+         * source.\n+         *\n+         * <p>If you are intending to keep the associated\n+         * {@link PlaceholderText} for any period of time and that you wish to\n+         * associate a game object with the placeholder, use\n+         * {@link #setAssociatedObject(Supplier)} instead, supplying a function\n+         * that can recreate the object if necessary.</p>\n+         *\n+         * <p>If supplying a {@link Player}, use\n+         * {@link #setAssociatedObject(Player)}, which will handle creating the\n+         * correct supplier for you.</p>\n+         *\n+         * @param object The {@link Object} to associate this text with.\n+         * @return This, for chaining\n+         *\n+         * @see PlaceholderText#getAssociatedObject()\n+         */\n+        Builder setAssociatedObject(Object object);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aac9c466b67127803668232868306ca5a5034619"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTQ0NjEwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/api/text/placeholder/PlaceholderText.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMzoyMzo0M1rOGjXjIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMzoyMzo0M1rOGjXjIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczOTE2OA==", "bodyText": "Maybe add a note, that the placeholder will be resolved when converting it to a Text and not during the creation of the PlaceholderText instance.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2116#discussion_r439739168", "createdAt": "2020-06-13T13:23:43Z", "author": {"login": "ST-DDT"}, "path": "src/main/java/org/spongepowered/api/text/placeholder/PlaceholderText.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.text.placeholder;\n+\n+import org.spongepowered.api.Sponge;\n+import org.spongepowered.api.text.Text;\n+import org.spongepowered.api.text.TextRepresentable;\n+import org.spongepowered.api.util.ResettableBuilder;\n+\n+/**\n+ * A {@link TextRepresentable} that can be used in {@link Text} building methods\n+ * that represents a placeholder in text.\n+ *\n+ * <p>A {@link PlaceholderText} is the collection of a {@link PlaceholderParser}\n+ * along with contextual data in the supplied {@link PlaceholderContext},\n+ * enabling its use in a {@link Text} object.</p>\n+ *\n+ * <p>While such placeholders will generally be built from tokenised strings,\n+ * these objects make no assumption about the format of text templating. Such a\n+ * system can therefore be used by other templating engines without conforming\n+ * to a particular standard.</p>\n+ */\n+public interface PlaceholderText extends TextRepresentable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cb9efdaee6138190b0cbcbe4c1519190754c5a4"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2482, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}