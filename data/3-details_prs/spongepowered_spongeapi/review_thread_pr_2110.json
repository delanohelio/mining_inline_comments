{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzOTYyNjQ1", "number": 2110, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxNDo1MjoxMlrOEBL7xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxNDo1MjoxMlrOEBL7xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Njc5NTU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/api/util/blockray/BlockRay.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxNDo1MjoxMlrOGc5deA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxNTozMToxN1rOGc5quA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk1NDc0NA==", "bodyText": "Move lastHit.getExtent().getBlockType(lastHit.getBlockX(), lastHit.getBlockY(), lastHit.getBlockZ()) outside the loop", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2110#discussion_r432954744", "createdAt": "2020-05-31T14:52:12Z", "author": {"login": "ImMorpheus"}, "path": "src/main/java/org/spongepowered/api/util/blockray/BlockRay.java", "diffHunk": "@@ -790,8 +927,32 @@ public Vector3d position() {\n     }\n \n     /**\n-     * Extends a filter by a number of blocks, regardless of what the extended\n-     * filter does.\n+     * A filter that will return {@code true} when the {@link BlockRayHit}\n+     * represents <strong>any</strong> of the supplied {@link BlockType}s.\n+     *\n+     * @param types The type of block to allow\n+     * @param <E> The extent to be applied in\n+     * @return The filter instance\n+     */\n+    public static <E extends Extent> Predicate<BlockRayHit<E>> blockTypeFilter(final BlockType... types) {\n+        return lastHit -> {\n+            for (BlockType type : types) {\n+                if (lastHit.getExtent().getBlockType(lastHit.getBlockX(), lastHit.getBlockY(), lastHit.getBlockZ()).equals(type)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be2a675d15f2bc442e1e5224c54c5d768a62370b"}, "originalPosition": 418}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk1ODEzNg==", "bodyText": "Good spot.", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2110#discussion_r432958136", "createdAt": "2020-05-31T15:31:17Z", "author": {"login": "dualspiral"}, "path": "src/main/java/org/spongepowered/api/util/blockray/BlockRay.java", "diffHunk": "@@ -790,8 +927,32 @@ public Vector3d position() {\n     }\n \n     /**\n-     * Extends a filter by a number of blocks, regardless of what the extended\n-     * filter does.\n+     * A filter that will return {@code true} when the {@link BlockRayHit}\n+     * represents <strong>any</strong> of the supplied {@link BlockType}s.\n+     *\n+     * @param types The type of block to allow\n+     * @param <E> The extent to be applied in\n+     * @return The filter instance\n+     */\n+    public static <E extends Extent> Predicate<BlockRayHit<E>> blockTypeFilter(final BlockType... types) {\n+        return lastHit -> {\n+            for (BlockType type : types) {\n+                if (lastHit.getExtent().getBlockType(lastHit.getBlockX(), lastHit.getBlockY(), lastHit.getBlockZ()).equals(type)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk1NDc0NA=="}, "originalCommit": {"oid": "be2a675d15f2bc442e1e5224c54c5d768a62370b"}, "originalPosition": 418}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2479, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}