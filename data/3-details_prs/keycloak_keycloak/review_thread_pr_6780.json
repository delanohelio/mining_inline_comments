{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0ODI2MTEy", "number": 6780, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwOTowOToyNVrODiQA-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMTowOToyNlrODiemtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjQwNTcxOnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/SigningInTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwOTowOToyNVrOFtZTzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMDowNjozOVrOFtbB7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE0NDkwOQ==", "bodyText": "I believe we don't need to enable WebAuthn for the whole test class. This affects only:\n\n  \n    \n      keycloak/testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/SigningInTest.java\n    \n    \n        Lines 246 to 254\n      in\n      26a78a1\n    \n    \n    \n    \n\n        \n          \n           @Test \n        \n\n        \n          \n           public void twoFactorWebAuthnTest() { \n        \n\n        \n          \n               testWebAuthn(false); \n        \n\n        \n          \n           } \n        \n\n        \n          \n            \n        \n\n        \n          \n           @Test \n        \n\n        \n          \n           public void passwordlessWebAuthnTest() { \n        \n\n        \n          \n               testWebAuthn(true); \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nIf I understand it correctly, the annotation should work for test methods as well, shouldn't it?", "url": "https://github.com/keycloak/keycloak/pull/6780#discussion_r383144909", "createdAt": "2020-02-24T09:09:25Z", "author": {"login": "vmuzikar"}, "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/SigningInTest.java", "diffHunk": "@@ -62,6 +64,9 @@\n /**\n  * @author Vaclav Muzikar <vmuzikar@redhat.com>\n  */\n+@EnableFeature(value = Profile.Feature.ACCOUNT2, skipRestart = true)\n+@EnableFeature(value = Profile.Feature.ACCOUNT_API, skipRestart = true)\n+@EnableFeature(value = Profile.Feature.WEB_AUTHN, skipRestart = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26a78a1eb61b4e2b293bcf98d06fe78713492b70"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE2MDI5MA==", "bodyText": "Scratch that! I completely forgot we configure WebAuthn before running the whole test class. This approach is therefore correct.", "url": "https://github.com/keycloak/keycloak/pull/6780#discussion_r383160290", "createdAt": "2020-02-24T09:42:06Z", "author": {"login": "vmuzikar"}, "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/SigningInTest.java", "diffHunk": "@@ -62,6 +64,9 @@\n /**\n  * @author Vaclav Muzikar <vmuzikar@redhat.com>\n  */\n+@EnableFeature(value = Profile.Feature.ACCOUNT2, skipRestart = true)\n+@EnableFeature(value = Profile.Feature.ACCOUNT_API, skipRestart = true)\n+@EnableFeature(value = Profile.Feature.WEB_AUTHN, skipRestart = true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE0NDkwOQ=="}, "originalCommit": {"oid": "26a78a1eb61b4e2b293bcf98d06fe78713492b70"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE3MDg1Mw==", "bodyText": "There are more tests, which depend on the WebAuthn feature. So, I think, it would be better to keep that for whole class.\nf.e. categoriesTest,setUpLinksTest,...", "url": "https://github.com/keycloak/keycloak/pull/6780#discussion_r383170853", "createdAt": "2020-02-24T10:02:05Z", "author": {"login": "mabartos"}, "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/SigningInTest.java", "diffHunk": "@@ -62,6 +64,9 @@\n /**\n  * @author Vaclav Muzikar <vmuzikar@redhat.com>\n  */\n+@EnableFeature(value = Profile.Feature.ACCOUNT2, skipRestart = true)\n+@EnableFeature(value = Profile.Feature.ACCOUNT_API, skipRestart = true)\n+@EnableFeature(value = Profile.Feature.WEB_AUTHN, skipRestart = true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE0NDkwOQ=="}, "originalCommit": {"oid": "26a78a1eb61b4e2b293bcf98d06fe78713492b70"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE3MzEwMA==", "bodyText": "@mabartos You're, of course, correct. I almost forgot what's in the test I wrote. I guess it's monday... :D", "url": "https://github.com/keycloak/keycloak/pull/6780#discussion_r383173100", "createdAt": "2020-02-24T10:06:39Z", "author": {"login": "vmuzikar"}, "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/SigningInTest.java", "diffHunk": "@@ -62,6 +64,9 @@\n /**\n  * @author Vaclav Muzikar <vmuzikar@redhat.com>\n  */\n+@EnableFeature(value = Profile.Feature.ACCOUNT2, skipRestart = true)\n+@EnableFeature(value = Profile.Feature.ACCOUNT_API, skipRestart = true)\n+@EnableFeature(value = Profile.Feature.WEB_AUTHN, skipRestart = true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE0NDkwOQ=="}, "originalCommit": {"oid": "26a78a1eb61b4e2b293bcf98d06fe78713492b70"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjQwOTg1OnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/SigningInTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwOToxMDo0NVrOFtZWPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMTo0MjozMFrOFtdzIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE0NTUzMw==", "bodyText": "Is there any reason why to put here the account profile features? Seems a bit redundant, there are already present in the parent class.", "url": "https://github.com/keycloak/keycloak/pull/6780#discussion_r383145533", "createdAt": "2020-02-24T09:10:45Z", "author": {"login": "vmuzikar"}, "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/SigningInTest.java", "diffHunk": "@@ -62,6 +64,9 @@\n /**\n  * @author Vaclav Muzikar <vmuzikar@redhat.com>\n  */\n+@EnableFeature(value = Profile.Feature.ACCOUNT2, skipRestart = true)\n+@EnableFeature(value = Profile.Feature.ACCOUNT_API, skipRestart = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26a78a1eb61b4e2b293bcf98d06fe78713492b70"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE3Njc4NA==", "bodyText": "AFAIK, the problem is with KeycloakContainerFeaturesController, which manage and prepare all environments to enabling/disabling feature. The controller enable a feature only for specific class, therefore, it doesn't allow inheritance of the enabling/disabling feature from parent. So, the account features should be again explicitly specified.\nI don't know, if it's a good approach, but it's not \"target\" of this PR :)", "url": "https://github.com/keycloak/keycloak/pull/6780#discussion_r383176784", "createdAt": "2020-02-24T10:13:37Z", "author": {"login": "mabartos"}, "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/SigningInTest.java", "diffHunk": "@@ -62,6 +64,9 @@\n /**\n  * @author Vaclav Muzikar <vmuzikar@redhat.com>\n  */\n+@EnableFeature(value = Profile.Feature.ACCOUNT2, skipRestart = true)\n+@EnableFeature(value = Profile.Feature.ACCOUNT_API, skipRestart = true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE0NTUzMw=="}, "originalCommit": {"oid": "26a78a1eb61b4e2b293bcf98d06fe78713492b70"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE3Nzk2Ng==", "bodyText": "Maybe @mposolda knows more details.", "url": "https://github.com/keycloak/keycloak/pull/6780#discussion_r383177966", "createdAt": "2020-02-24T10:15:56Z", "author": {"login": "mabartos"}, "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/SigningInTest.java", "diffHunk": "@@ -62,6 +64,9 @@\n /**\n  * @author Vaclav Muzikar <vmuzikar@redhat.com>\n  */\n+@EnableFeature(value = Profile.Feature.ACCOUNT2, skipRestart = true)\n+@EnableFeature(value = Profile.Feature.ACCOUNT_API, skipRestart = true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE0NTUzMw=="}, "originalCommit": {"oid": "26a78a1eb61b4e2b293bcf98d06fe78713492b70"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIxODQ2Ng==", "bodyText": "Ok, makes sense. Even though I don't like this redundancy too much, we don't have much options right now. And rewriting KeycloakContainerFeaturesController is really out of scope of this PR.\nCreated KEYCLOAK-13078 for that.", "url": "https://github.com/keycloak/keycloak/pull/6780#discussion_r383218466", "createdAt": "2020-02-24T11:42:30Z", "author": {"login": "vmuzikar"}, "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/SigningInTest.java", "diffHunk": "@@ -62,6 +64,9 @@\n /**\n  * @author Vaclav Muzikar <vmuzikar@redhat.com>\n  */\n+@EnableFeature(value = Profile.Feature.ACCOUNT2, skipRestart = true)\n+@EnableFeature(value = Profile.Feature.ACCOUNT_API, skipRestart = true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE0NTUzMw=="}, "originalCommit": {"oid": "26a78a1eb61b4e2b293bcf98d06fe78713492b70"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDc3MDA3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/org/keycloak/common/Profile.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMTowMDoyMVrOFtvqxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMTo1ODo0M1rOFtxZ_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxMTIzNw==", "bodyText": "Is it possible to remove field \"defaultType\" and methods \"setDefaultType\" and \"getType\" from the Feature enum? AFAIK the mutable enums is the antipattern - see for example https://rules.sonarsource.com/java/RSPEC-3066 . Hopefully all occurences of \"f.getType()\" in the further code can be replaced simply with the \"type\", which was retrieved on line 122? For exampe:\nswitch (type) {\n\ninstead of:\nswitch (f.getType()) {\n\netc", "url": "https://github.com/keycloak/keycloak/pull/6780#discussion_r383511237", "createdAt": "2020-02-24T21:00:21Z", "author": {"login": "mposolda"}, "path": "common/src/main/java/org/keycloak/common/Profile.java", "diffHunk": "@@ -95,6 +119,8 @@ private Profile() {\n \n         for (Feature f : Feature.values()) {\n             Boolean enabled = config.getConfig(f);\n+            Type type = product.equals(ProductValue.RHSSO) ? f.getTypeProduct() : f.getTypeProject();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "516cf5dc8b1f4749cbf21101572780a4eb11e1a7"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzOTcxMA==", "bodyText": "@mposolda I see, it's good to know that. I've just wanted to ensure the getType() method really works. Thanks!", "url": "https://github.com/keycloak/keycloak/pull/6780#discussion_r383539710", "createdAt": "2020-02-24T21:58:43Z", "author": {"login": "mabartos"}, "path": "common/src/main/java/org/keycloak/common/Profile.java", "diffHunk": "@@ -95,6 +119,8 @@ private Profile() {\n \n         for (Feature f : Feature.values()) {\n             Boolean enabled = config.getConfig(f);\n+            Type type = product.equals(ProductValue.RHSSO) ? f.getTypeProduct() : f.getTypeProject();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxMTIzNw=="}, "originalCommit": {"oid": "516cf5dc8b1f4749cbf21101572780a4eb11e1a7"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDc5NjA1OnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakContainerFeaturesController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMTowOToyNlrOFtv7XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjowMzo1MVrOFtxjPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxNTQ4NA==", "bodyText": "I see there are failing tests on travis. Maybe the check for \"Profile.getName().equals(\"product\")\" should be removed from this line and the check should be always disabled to have the tests passing?", "url": "https://github.com/keycloak/keycloak/pull/6780#discussion_r383515484", "createdAt": "2020-02-24T21:09:26Z", "author": {"login": "mposolda"}, "path": "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakContainerFeaturesController.java", "diffHunk": "@@ -86,20 +86,32 @@ public UpdateFeature(Profile.Feature feature, boolean skipRestart, FeatureAction\n          *\n          */\n         private void assertValid() {\n+            if (shouldSkipValidation())\n+                return;\n+\n             assertThat(\"An annotation requested to \" + action.name()\n                             + \" feature \" + feature.name() + \" however it was already in that state\" ,\n                     ProfileAssume.isFeatureEnabled(feature),\n                     is(!(action == FeatureAction.ENABLE)));\n         }\n \n         private void assertPerformed() {\n+            if (shouldSkipValidation())\n+                return;\n+\n             assertThat(\"An annotation requested to \" + action.name() +\n                             \" feature \" + feature.name() + \", however after performing this operation \" +\n                             \"the feature is not in desired state\" ,\n                     ProfileAssume.isFeatureEnabled(feature),\n                     is(action == FeatureAction.ENABLE));\n         }\n \n+        private boolean shouldSkipValidation() {\n+            // KEYCLOAK-12895 - Some features might be in product disabled and in project enabled.\n+            // In this case, the current state of the feature can be different.\n+            return feature.hasDifferentProductType() && Profile.getName().equals(\"product\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "516cf5dc8b1f4749cbf21101572780a4eb11e1a7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU0MjA3OQ==", "bodyText": "Ok, at this time, it could be removed.", "url": "https://github.com/keycloak/keycloak/pull/6780#discussion_r383542079", "createdAt": "2020-02-24T22:03:51Z", "author": {"login": "mabartos"}, "path": "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakContainerFeaturesController.java", "diffHunk": "@@ -86,20 +86,32 @@ public UpdateFeature(Profile.Feature feature, boolean skipRestart, FeatureAction\n          *\n          */\n         private void assertValid() {\n+            if (shouldSkipValidation())\n+                return;\n+\n             assertThat(\"An annotation requested to \" + action.name()\n                             + \" feature \" + feature.name() + \" however it was already in that state\" ,\n                     ProfileAssume.isFeatureEnabled(feature),\n                     is(!(action == FeatureAction.ENABLE)));\n         }\n \n         private void assertPerformed() {\n+            if (shouldSkipValidation())\n+                return;\n+\n             assertThat(\"An annotation requested to \" + action.name() +\n                             \" feature \" + feature.name() + \", however after performing this operation \" +\n                             \"the feature is not in desired state\" ,\n                     ProfileAssume.isFeatureEnabled(feature),\n                     is(action == FeatureAction.ENABLE));\n         }\n \n+        private boolean shouldSkipValidation() {\n+            // KEYCLOAK-12895 - Some features might be in product disabled and in project enabled.\n+            // In this case, the current state of the feature can be different.\n+            return feature.hasDifferentProductType() && Profile.getName().equals(\"product\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxNTQ4NA=="}, "originalCommit": {"oid": "516cf5dc8b1f4749cbf21101572780a4eb11e1a7"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3907, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}