{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNzY5OTY0", "number": 6668, "title": "KEYCLOAK-12340 KEYCLOAK-12386 Regression in credential handling when \u2026", "bodyText": "\u2026using userStorage providers", "createdAt": "2020-01-16T17:48:20Z", "url": "https://github.com/keycloak/keycloak/pull/6668", "merged": true, "mergeCommit": {"oid": "154bce5693b8f3589ece7aa5880755705afc511b"}, "closed": true, "closedAt": "2020-02-03T18:23:31Z", "author": {"login": "mposolda"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb7No5lAH2gAyMzYzNzY5OTY0OmE3ZTllMTRkMjY5NzhlMWNkNWY1MjQ1ZmU0MzM0MjQ0Y2I3YzczOTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcAsOmRgFqTM1MjIyMjQwNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a7e9e14d26978e1cd5f5245fe4334244cb7c7398", "author": {"user": {"login": "mposolda", "name": "Marek Posolda"}}, "url": "https://github.com/keycloak/keycloak/commit/a7e9e14d26978e1cd5f5245fe4334244cb7c7398", "committedDate": "2020-01-17T12:09:54Z", "message": "KEYCLOAK-12340 KEYCLOAK-12386 Regression in credential handling when using userStorage providers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9bfd45855743abff9d1ef832c427d88ae490cb8b", "author": {"user": {"login": "mposolda", "name": "Marek Posolda"}}, "url": "https://github.com/keycloak/keycloak/commit/9bfd45855743abff9d1ef832c427d88ae490cb8b", "committedDate": "2020-01-16T17:44:48Z", "message": "KEYCLOAK-12340 KEYCLOAK-12386 Regression in credential handling when using userStorage providers"}, "afterCommit": {"oid": "a7e9e14d26978e1cd5f5245fe4334244cb7c7398", "author": {"user": {"login": "mposolda", "name": "Marek Posolda"}}, "url": "https://github.com/keycloak/keycloak/commit/a7e9e14d26978e1cd5f5245fe4334244cb7c7398", "committedDate": "2020-01-17T12:09:54Z", "message": "KEYCLOAK-12340 KEYCLOAK-12386 Regression in credential handling when using userStorage providers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NDMwMDk5", "url": "https://github.com/keycloak/keycloak/pull/6668#pullrequestreview-349430099", "createdAt": "2020-01-28T14:45:53Z", "commit": {"oid": "a7e9e14d26978e1cd5f5245fe4334244cb7c7398"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDo0NTo1NFrOFino4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDo0NTo1NFrOFino4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg0NTM0Ng==", "bodyText": "This looks redundant.", "url": "https://github.com/keycloak/keycloak/pull/6668#discussion_r371845346", "createdAt": "2020-01-28T14:45:54Z", "author": {"login": "tkyjovsk"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/federation/storage/UserStorageOTPTest.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.keycloak.testsuite.federation.storage;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+\n+import org.jboss.arquillian.graphene.page.Page;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.keycloak.OAuth2Constants;\n+import org.keycloak.admin.client.resource.UserResource;\n+import org.keycloak.common.util.MultivaluedHashMap;\n+import org.keycloak.models.UserModel;\n+import org.keycloak.models.credential.OTPCredentialModel;\n+import org.keycloak.models.credential.PasswordCredentialModel;\n+import org.keycloak.models.utils.TimeBasedOTP;\n+import org.keycloak.representations.idm.ComponentRepresentation;\n+import org.keycloak.representations.idm.RealmRepresentation;\n+import org.keycloak.representations.idm.UserRepresentation;\n+import org.keycloak.storage.UserStorageProvider;\n+import org.keycloak.testsuite.AbstractTestRealmKeycloakTest;\n+import org.keycloak.testsuite.Assert;\n+import org.keycloak.testsuite.admin.ApiUtil;\n+import org.keycloak.testsuite.federation.DummyUserFederationProvider;\n+import org.keycloak.testsuite.federation.DummyUserFederationProviderFactory;\n+import org.keycloak.testsuite.pages.AppPage;\n+import org.keycloak.testsuite.pages.LoginConfigTotpPage;\n+import org.keycloak.testsuite.pages.LoginPage;\n+import org.keycloak.testsuite.pages.LoginTotpPage;\n+import org.keycloak.testsuite.util.UserBuilder;\n+\n+import static org.keycloak.storage.UserStorageProviderModel.IMPORT_ENABLED;\n+import static org.keycloak.testsuite.federation.storage.UserStorageTest.addComponent;\n+\n+/**\n+ * @author <a href=\"mailto:mposolda@redhat.com\">Marek Posolda</a>\n+ */\n+public class UserStorageOTPTest extends AbstractTestRealmKeycloakTest {\n+\n+    private String dummyProviderId;\n+    private String testUserId;\n+\n+\n+    @Page\n+    protected LoginPage loginPage;\n+\n+    @Page\n+    protected LoginTotpPage loginTotpPage;\n+\n+    @Page\n+    protected LoginConfigTotpPage loginConfigTotpPage;\n+\n+    @Page\n+    protected AppPage appPage;\n+\n+    protected TimeBasedOTP totp = new TimeBasedOTP();\n+\n+\n+\n+    @Override\n+    public void configureTestRealm(RealmRepresentation testRealm) {\n+\n+    }\n+\n+    @Before\n+    public void addProvidersBeforeTest() throws URISyntaxException, IOException {\n+        ComponentRepresentation dummyProvider = new ComponentRepresentation();\n+        dummyProvider.setName(\"dummy\");\n+        dummyProvider.setId(DummyUserFederationProviderFactory.PROVIDER_NAME);\n+        dummyProvider.setProviderId(DummyUserFederationProviderFactory.PROVIDER_NAME);\n+        dummyProvider.setProviderType(UserStorageProvider.class.getName());\n+        dummyProvider.setConfig(new MultivaluedHashMap<>());\n+        dummyProvider.getConfig().putSingle(\"priority\", Integer.toString(0));\n+        dummyProvider.getConfig().putSingle(IMPORT_ENABLED, Boolean.toString(false));\n+\n+        dummyProviderId = addComponent(testRealm(), getCleanup(), dummyProvider);\n+\n+        UserRepresentation user = UserBuilder.create()\n+                .username(\"test-user\")\n+                .email(\"test-user@something.org\")\n+                .build();\n+        String testUserId = ApiUtil.createUserWithAdminClient(testRealm(), user);\n+\n+        getCleanup().addUserId(testUserId);\n+    }\n+\n+\n+    @Test\n+    public void testCredentialsThroughRESTAPI() {\n+        // Test that test-user has federation link on him\n+        UserResource user = ApiUtil.findUserByUsernameId(testRealm(), \"test-user\");\n+        Assert.assertEquals(DummyUserFederationProviderFactory.PROVIDER_NAME, user.toRepresentation().getFederationLink());\n+\n+        // Test that both \"password\" and \"otp\" are configured for the test-user\n+        List<String> userStorageCredentialTypes = user.getConfiguredUserStorageCredentialTypes();\n+        Assert.assertNames(userStorageCredentialTypes, PasswordCredentialModel.TYPE, OTPCredentialModel.TYPE);\n+    }\n+\n+\n+    @Test\n+    public void testAuthentication() {\n+        // Test that user is required to provide OTP credential during authentication\n+        loginPage.open();\n+        loginPage.login(\"test-user\", DummyUserFederationProvider.HARDCODED_PASSWORD);\n+\n+        loginTotpPage.assertCurrent();\n+\n+        loginTotpPage.login(\"654321\");\n+        loginTotpPage.assertCurrent();\n+        Assert.assertEquals(\"Invalid authenticator code.\", loginPage.getError());\n+\n+        loginTotpPage.login(DummyUserFederationProvider.HARDCODED_OTP);\n+\n+        appPage.assertCurrent();\n+        Assert.assertEquals(AppPage.RequestType.AUTH_RESPONSE, appPage.getRequestType());\n+        Assert.assertNotNull(oauth.getCurrentQuery().get(OAuth2Constants.CODE));\n+    }\n+\n+\n+    private void authenticateUser() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7e9e14d26978e1cd5f5245fe4334244cb7c7398"}, "originalPosition": 140}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e2026e2e0c09d9a8fb820cb3d144d4ac241ae00", "author": {"user": {"login": "mposolda", "name": "Marek Posolda"}}, "url": "https://github.com/keycloak/keycloak/commit/9e2026e2e0c09d9a8fb820cb3d144d4ac241ae00", "committedDate": "2020-01-30T07:46:39Z", "message": "KEYCLOAK-12340 KEYCLOAK-12386 Minor cleanup in UserStorageOTPTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MzUwMTM2", "url": "https://github.com/keycloak/keycloak/pull/6668#pullrequestreview-349350136", "createdAt": "2020-01-28T12:54:02Z", "commit": {"oid": "a7e9e14d26978e1cd5f5245fe4334244cb7c7398"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMjo1NDowMlrOFij5IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMjo1NDowMlrOFij5IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4Mzk2OA==", "bodyText": "Is this change intentional?", "url": "https://github.com/keycloak/keycloak/pull/6668#discussion_r371783968", "createdAt": "2020-01-28T12:54:02Z", "author": {"login": "hmlnarik"}, "path": "services/src/main/java/org/keycloak/services/resources/admin/UserResource.java", "diffHunk": "@@ -620,13 +617,29 @@ public void resetPassword(CredentialRepresentation cred) {\n     @NoCache\n     @Produces(MediaType.APPLICATION_JSON)\n     public List<CredentialRepresentation> credentials(){\n-        auth.users().requireManage(user);\n+        auth.users().requireView(user);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7e9e14d26978e1cd5f5245fe4334244cb7c7398"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "588e1b55d1f76b1be7bf1be27402746e438b53cc", "author": {"user": {"login": "mposolda", "name": "Marek Posolda"}}, "url": "https://github.com/keycloak/keycloak/commit/588e1b55d1f76b1be7bf1be27402746e438b53cc", "committedDate": "2020-01-31T09:58:46Z", "message": "KEYCLOAK-12340 Revert change for USerResource.credentials() permissions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "89fa328417777b145216607caa8f526093badb52", "author": {"user": {"login": "mposolda", "name": "Marek Posolda"}}, "url": "https://github.com/keycloak/keycloak/commit/89fa328417777b145216607caa8f526093badb52", "committedDate": "2020-01-31T09:32:50Z", "message": "KEYCLOAK-12340 Revert change for USerResource.credentials() permissions"}, "afterCommit": {"oid": "588e1b55d1f76b1be7bf1be27402746e438b53cc", "author": {"user": {"login": "mposolda", "name": "Marek Posolda"}}, "url": "https://github.com/keycloak/keycloak/commit/588e1b55d1f76b1be7bf1be27402746e438b53cc", "committedDate": "2020-01-31T09:58:46Z", "message": "KEYCLOAK-12340 Revert change for USerResource.credentials() permissions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMjIyNDA0", "url": "https://github.com/keycloak/keycloak/pull/6668#pullrequestreview-352222404", "createdAt": "2020-02-03T12:37:51Z", "commit": {"oid": "588e1b55d1f76b1be7bf1be27402746e438b53cc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2719, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}