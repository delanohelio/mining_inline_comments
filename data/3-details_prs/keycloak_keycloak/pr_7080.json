{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMDU3MDAw", "number": 7080, "title": "KEYCLOAK-14536 UserModel preparation for UserProfile", "bodyText": "This PR is a preparation for adding the user model soon.\nAs discussed in several threads (e.g. here: keycloak/keycloak-community#104), it would be nice to no longer store attributes such as \"firstName\" or \"lastName\" as fields in the user model so that they are not mandatory in a future user profile. I believe this is also in line with how you are planning to evolve the Keacloak model\nIn addition, it was suggested to also change the name from firstName/lastName to the OIDC naming convention (i.e. given_name/family_name).\nThis PR outlines how we would approach this change:\n\nInitially, we would leave the various representations in the GUI as they are (this would be changed later on when introducing the user profile)\nWe would also leave the database as is and provide the mapping in the corresponding database adapter. How and if to do a database migration can then be decided later on (and we don't break users having indices on those fields in their db)\nIn this PR, I initially only migrate firstName and lastName. According to the discussion, we'd also think about migration email. I think username is too special to merit migration.\n\nThere are a few things I noticed when preparing this migration:\n\nThis will break those policy evaluations in fine grained permissions using lastName/firstName and/or the amount of attributes (see the test change in \n  \n    \n      keycloak/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/authz/PolicyEvaluationTest.java\n    \n    \n         Line 616\n      in\n      419d9c6\n    \n    \n    \n    \n\n        \n          \n           builder.append(\"if (attributes.size() == 2 && attributes.containsKey('a1') && attributes.containsKey('a2') && attributes.get('a1').size() == 2 && attributes.get('a2').get(0).equals('3') && resource.getAttribute('a1').size() == 2 && resource.getSingleAttribute('a2').equals('3')) { $evaluation.grant(); }\"); \n        \n    \n  \n\n) - checking against the amount of attributes would also break somewhat silently because the evaluation would be semantically correct\nWe probably have to do a migration for the realm model: Mappers from user federation or OIDC flow mappers (SAML too probably?) need to be updated to reflect the change from a field called \"lastName\" in the UserModel to an attribute called \"family_name\", etc. Does anybody have a hint on how best to achieve this?\nWe probably also break JSON imports for the same reason\nThere are some conversions back and forth between attributes and a few (necessary copies). While I don't believe it should impact performance a lot, it might so we probably need to be careful\n\nWhat do you thing about those?\nRegarding the breaking change with built in mappers, as far as I can see this should be avoidable if we do not rename the attribute from lastName to family_name but keep the old name and just migrate it from a field to an attribute.\nFinally, it's difficult to assess how well the tests cover that no real functionality change happened here. I went through all code changes and to me there are the following areas of interest:\n\nUser Federation: This is handled by mappers from the server to Keycloak and by writing to LDAP if possible - this should be covered, but I'm not particularly familiar with the user federation code, yet\nIdentity Brokering: This is basically the contexts and then just filling the user model from the context (should be covered)\n(OIDC) client: There are protocol mappers mapping from Keycloak to the oidc claims (adapted). On the SAML side I'm unsure whether I need to do anything except for potential user mapper changes (see above)\nKeycloak <-> Frontend (e.g. Profile update): There are the two UserRepresentation classes and the ProfileBeans - should be covered\n\nFinally, what I believe remains to be done before merging this once there is an agreement on whether this is a viable strategy:\n\n run (and potentially fix compilation and tests) for other test suites than base\n decide and implement migration strategy if necessary\n create JIRA ticket for this subtask\n squash to one commit", "createdAt": "2020-05-19T11:28:41Z", "url": "https://github.com/keycloak/keycloak/pull/7080", "merged": true, "mergeCommit": {"oid": "05b6ef832742b526439f01879d6d4a5f73140f57"}, "closed": true, "closedAt": "2020-06-25T12:50:58Z", "author": {"login": "Martin-Idel-SI"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjwzTtgFqTQxNjg0ODM2NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuuHwNAFqTQzNzQ1OTQ2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2ODQ4MzY0", "url": "https://github.com/keycloak/keycloak/pull/7080#pullrequestreview-416848364", "createdAt": "2020-05-22T11:44:55Z", "commit": {"oid": "a44782583d7c3c727df41a2a853301d42fd6acfe"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2OTQ5MjQ0", "url": "https://github.com/keycloak/keycloak/pull/7080#pullrequestreview-416949244", "createdAt": "2020-05-22T14:20:34Z", "commit": {"oid": "a44782583d7c3c727df41a2a853301d42fd6acfe"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a44782583d7c3c727df41a2a853301d42fd6acfe", "author": {"user": {"login": "Martin-Idel-SI", "name": "Martin Idel"}}, "url": "https://github.com/keycloak/keycloak/commit/a44782583d7c3c727df41a2a853301d42fd6acfe", "committedDate": "2020-05-19T09:32:48Z", "message": "Fix tests with logic changes\n\n- PolicyEvaluationTest: We need to take new user attributes into account\n- UserTest: We need to take into account new user attributes"}, "afterCommit": {"oid": "c4cebdcc503465fc0a16ccd6b39bc3638bdb5db4", "author": {"user": {"login": "Martin-Idel-SI", "name": "Martin Idel"}}, "url": "https://github.com/keycloak/keycloak/commit/c4cebdcc503465fc0a16ccd6b39bc3638bdb5db4", "committedDate": "2020-06-02T11:45:47Z", "message": "Rewrite userdelegate for ldap mapper"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c4cebdcc503465fc0a16ccd6b39bc3638bdb5db4", "author": {"user": {"login": "Martin-Idel-SI", "name": "Martin Idel"}}, "url": "https://github.com/keycloak/keycloak/commit/c4cebdcc503465fc0a16ccd6b39bc3638bdb5db4", "committedDate": "2020-06-02T11:45:47Z", "message": "Rewrite userdelegate for ldap mapper"}, "afterCommit": {"oid": "88b555108181a1fff34adf29d8d7d082e8852e9b", "author": {"user": {"login": "Martin-Idel-SI", "name": "Martin Idel"}}, "url": "https://github.com/keycloak/keycloak/commit/88b555108181a1fff34adf29d8d7d082e8852e9b", "committedDate": "2020-06-08T08:13:00Z", "message": "Rewrite userdelegate for ldap mapper"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4Njg1MzQ1", "url": "https://github.com/keycloak/keycloak/pull/7080#pullrequestreview-428685345", "createdAt": "2020-06-11T08:09:36Z", "commit": {"oid": "88b555108181a1fff34adf29d8d7d082e8852e9b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwODowOTozN1rOGiS8ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjo0MTozNFrOGil0Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYxNTE0MA==", "bodyText": "I think it it not very good to remove those methods from UserModelDelegate? IMO you always want to call delegate rather than rely on default implementations from UserModel. In some cases, the methods on the delegate can do something different that call \"setAttribute/getAttribute\" . I hope it is possible to revert changes in UserModelDelegate class entirely.", "url": "https://github.com/keycloak/keycloak/pull/7080#discussion_r438615140", "createdAt": "2020-06-11T08:09:37Z", "author": {"login": "mposolda"}, "path": "server-spi/src/main/java/org/keycloak/models/utils/UserModelDelegate.java", "diffHunk": "@@ -44,16 +44,6 @@ public String getId() {\n         return delegate.getId();\n     }\n \n-    @Override\n-    public String getUsername() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b555108181a1fff34adf29d8d7d082e8852e9b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkxNzUzNw==", "bodyText": "The UserStorage SPI needs to be backwards compatible. It means that UserStorage providers developed in the previous Keycloak versions must still work with the newest version without any changes needed in their sources. So the BackwardsCompatibilityUserStorage provider should still work without this change needed... The similar will be good for other user storage providers - will be nice if no changes are required in them", "url": "https://github.com/keycloak/keycloak/pull/7080#discussion_r438917537", "createdAt": "2020-06-11T16:29:54Z", "author": {"login": "mposolda"}, "path": "testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/federation/BackwardsCompatibilityUserStorage.java", "diffHunk": "@@ -87,12 +87,12 @@ public UserModel getUserById(String id, RealmModel realm) {\n     private UserModel createUser(RealmModel realm, String username) {\n         return new AbstractUserAdapterFederatedStorage(session, realm,  model) {\n             @Override\n-            public String getUsername() {\n+            public String doGetUsername() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b555108181a1fff34adf29d8d7d082e8852e9b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkxOTkxNg==", "bodyText": "@stianst Is this change ok or do you see any issues with that? More details in this comment : #7080 (comment)", "url": "https://github.com/keycloak/keycloak/pull/7080#discussion_r438919916", "createdAt": "2020-06-11T16:33:56Z", "author": {"login": "mposolda"}, "path": "services/src/main/java/org/keycloak/theme/FreeMarkerUtil.java", "diffHunk": "@@ -73,8 +73,8 @@ public String processTemplate(Object data, String templateName, Theme theme) thr\n     }\n \n     private Template getTemplate(String templateName, Theme theme) throws IOException {\n-        Configuration cfg = new Configuration();\n-        \n+        Configuration cfg = new Configuration(Configuration.VERSION_2_3_26);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b555108181a1fff34adf29d8d7d082e8852e9b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkyMzg4NQ==", "bodyText": "I hope it will be possible to make the things working without this change. Introducing method \"doGetUsername\" on the UserStorage SPI seems like a workaround to me and doesn't improve the usability of UserStorage SPI. See my other comment for the class BackwardsCompatibilityUserStorage\nMaybe if you re-add the methods to UserModelDelegate back, then this change is not needed? In ideal case, if no changes are needed in AbstractUserAdapter class, it will be ideal :)", "url": "https://github.com/keycloak/keycloak/pull/7080#discussion_r438923885", "createdAt": "2020-06-11T16:40:45Z", "author": {"login": "mposolda"}, "path": "server-spi/src/main/java/org/keycloak/storage/adapter/AbstractUserAdapter.java", "diffHunk": "@@ -60,6 +60,13 @@ public AbstractUserAdapter(KeycloakSession session, RealmModel realm, ComponentM\n         this.storageProviderModel = storageProviderModel;\n     }\n \n+    abstract protected String doGetUsername();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b555108181a1fff34adf29d8d7d082e8852e9b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkyNDM3NA==", "bodyText": "See my comment for AbstractUserAdapter class. I think this applies here as well - for both doGetUsername and doSetUsername methods.", "url": "https://github.com/keycloak/keycloak/pull/7080#discussion_r438924374", "createdAt": "2020-06-11T16:41:34Z", "author": {"login": "mposolda"}, "path": "server-spi/src/main/java/org/keycloak/storage/adapter/AbstractUserAdapterFederatedStorage.java", "diffHunk": "@@ -64,6 +65,20 @@ public AbstractUserAdapterFederatedStorage(KeycloakSession session, RealmModel r\n         this.storageProviderModel = storageProviderModel;\n     }\n \n+    protected abstract String doGetUsername();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b555108181a1fff34adf29d8d7d082e8852e9b"}, "originalPosition": 12}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "88b555108181a1fff34adf29d8d7d082e8852e9b", "author": {"user": {"login": "Martin-Idel-SI", "name": "Martin Idel"}}, "url": "https://github.com/keycloak/keycloak/commit/88b555108181a1fff34adf29d8d7d082e8852e9b", "committedDate": "2020-06-08T08:13:00Z", "message": "Rewrite userdelegate for ldap mapper"}, "afterCommit": {"oid": "26074c8ace676f30385282306adf10abbbfad5d1", "author": {"user": {"login": "Martin-Idel-SI", "name": "Martin Idel"}}, "url": "https://github.com/keycloak/keycloak/commit/26074c8ace676f30385282306adf10abbbfad5d1", "committedDate": "2020-06-15T10:35:52Z", "message": "Let UserModel getUserName/setUserName be abstract"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2be3fc1c1b6c06aa720d6b4df462c9fc42bc1a96", "author": {"user": {"login": "Martin-Idel-SI", "name": "Martin Idel"}}, "url": "https://github.com/keycloak/keycloak/commit/2be3fc1c1b6c06aa720d6b4df462c9fc42bc1a96", "committedDate": "2020-06-17T07:11:23Z", "message": "Revert compatibility change"}, "afterCommit": {"oid": "f8f27017b32d390853114f1380cb59700ec532f5", "author": {"user": {"login": "Martin-Idel-SI", "name": "Martin Idel"}}, "url": "https://github.com/keycloak/keycloak/commit/f8f27017b32d390853114f1380cb59700ec532f5", "committedDate": "2020-06-18T15:47:07Z", "message": "Use class hierarchy to avoid default methods"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f8f27017b32d390853114f1380cb59700ec532f5", "author": {"user": {"login": "Martin-Idel-SI", "name": "Martin Idel"}}, "url": "https://github.com/keycloak/keycloak/commit/f8f27017b32d390853114f1380cb59700ec532f5", "committedDate": "2020-06-18T15:47:07Z", "message": "Use class hierarchy to avoid default methods"}, "afterCommit": {"oid": "caaa04ce09883a1d0d9b63e1878f81591b667b44", "author": {"user": {"login": "Martin-Idel-SI", "name": "Martin Idel"}}, "url": "https://github.com/keycloak/keycloak/commit/caaa04ce09883a1d0d9b63e1878f81591b667b44", "committedDate": "2020-06-18T15:55:30Z", "message": "Use class hierarchy to avoid default methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzOTA1MTMz", "url": "https://github.com/keycloak/keycloak/pull/7080#pullrequestreview-433905133", "createdAt": "2020-06-19T08:40:43Z", "commit": {"oid": "caaa04ce09883a1d0d9b63e1878f81591b667b44"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwODo0MDo0M1rOGmNDhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwODo0MDo0M1rOGmNDhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcxMjk2NQ==", "bodyText": "I am not sure why the constants are needed here? Also not sure why FIRST_NAME is set to the \"lastName\"? It seems this is typo? Is it possible to remove all changes in IdpReviewProfileAuthenticator?", "url": "https://github.com/keycloak/keycloak/pull/7080#discussion_r442712965", "createdAt": "2020-06-19T08:40:43Z", "author": {"login": "mposolda"}, "path": "services/src/main/java/org/keycloak/authentication/authenticators/broker/IdpReviewProfileAuthenticator.java", "diffHunk": "@@ -46,6 +46,10 @@\n public class IdpReviewProfileAuthenticator extends AbstractIdpAuthenticator {\n \n     private static final Logger logger = Logger.getLogger(IdpReviewProfileAuthenticator.class);\n+    private static final String FIRST_NAME = \"lastName\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caaa04ce09883a1d0d9b63e1878f81591b667b44"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed6e7916383275769942a4e3ea9bdf40a289d41b", "author": {"user": {"login": "Martin-Idel-SI", "name": "Martin Idel"}}, "url": "https://github.com/keycloak/keycloak/commit/ed6e7916383275769942a4e3ea9bdf40a289d41b", "committedDate": "2020-06-22T09:53:35Z", "message": "KEYCLOAK-14536 Migrate UserModel fields to attributes\n\n- In order to make lastName/firstName/email/username field\n  configurable in profile\n  we need to store it as an attribute\n- Keep database as is for now (no impact on performance, schema)\n- Keep field names and getters and setters (no impact on FTL files)\n\nFix tests with logic changes\n\n- PolicyEvaluationTest: We need to take new user attributes into account\n- UserTest: We need to take into account new user attributes\n\nPotential impact on users:\n\n- When subclassing UserModel, consistency issues may occur since one can\n  now set e.g. username via setSingleAttribute also\n- When using PolicyEvaluations, the number of attributes has changed"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2a098e6a80c2cc52bb957626d0f128c201d3b266", "author": {"user": {"login": "Martin-Idel-SI", "name": "Martin Idel"}}, "url": "https://github.com/keycloak/keycloak/commit/2a098e6a80c2cc52bb957626d0f128c201d3b266", "committedDate": "2020-06-19T13:29:23Z", "message": "Revert IDP review profile authenticator changes"}, "afterCommit": {"oid": "ed6e7916383275769942a4e3ea9bdf40a289d41b", "author": {"user": {"login": "Martin-Idel-SI", "name": "Martin Idel"}}, "url": "https://github.com/keycloak/keycloak/commit/ed6e7916383275769942a4e3ea9bdf40a289d41b", "committedDate": "2020-06-22T09:53:35Z", "message": "KEYCLOAK-14536 Migrate UserModel fields to attributes\n\n- In order to make lastName/firstName/email/username field\n  configurable in profile\n  we need to store it as an attribute\n- Keep database as is for now (no impact on performance, schema)\n- Keep field names and getters and setters (no impact on FTL files)\n\nFix tests with logic changes\n\n- PolicyEvaluationTest: We need to take new user attributes into account\n- UserTest: We need to take into account new user attributes\n\nPotential impact on users:\n\n- When subclassing UserModel, consistency issues may occur since one can\n  now set e.g. username via setSingleAttribute also\n- When using PolicyEvaluations, the number of attributes has changed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NDU5NDYx", "url": "https://github.com/keycloak/keycloak/pull/7080#pullrequestreview-437459461", "createdAt": "2020-06-25T12:50:42Z", "commit": {"oid": "ed6e7916383275769942a4e3ea9bdf40a289d41b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3067, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}