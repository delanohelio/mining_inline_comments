{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0MDI0NTY4", "number": 7408, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNTo1ODowM1rOEi-P_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODozMzowOVrOEjQ8dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTA2OTQzOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/protocol/oidc/endpoints/UserInfoEndpoint.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNTo1ODowM1rOHRE3IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNzo1MDoxNFrOHRH39g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY2NzQ4OA==", "bodyText": "Looks like a workaround to me and not a proper fix. Roles should be added by protocol mappers and not hardcoded here.", "url": "https://github.com/keycloak/keycloak/pull/7408#discussion_r487667488", "createdAt": "2020-09-14T05:58:03Z", "author": {"login": "stianst"}, "path": "services/src/main/java/org/keycloak/protocol/oidc/endpoints/UserInfoEndpoint.java", "diffHunk": "@@ -225,6 +226,24 @@ private Response issueUserInfo(String tokenString) {\n         // any attempt to customize the value of this field should be done through a different claim\n         claims.put(\"sub\", userInfo.getSubject());\n \n+        if (userInfo.getRealmAccess() != null) {\n+            Map<String, Set<String>> realmAccess = new HashMap<>();\n+            realmAccess.put(\"roles\", userInfo.getRealmAccess().getRoles());\n+            claims.put(\"realm_access\", realmAccess);\n+        }\n+\n+        if (userInfo.getResourceAccess() != null && !userInfo.getResourceAccess().isEmpty()) {\n+            Map<String, Map<String, Set<String>>> resourceAccessMap = new HashMap<>();\n+\n+            for (Map.Entry<String, AccessToken.Access> resourceAccessMapEntry : userInfo.getResourceAccess()\n+                    .entrySet()) {\n+                Map<String, Set<String>> resourceAccess = new HashMap<>();\n+                resourceAccess.put(\"roles\", resourceAccessMapEntry.getValue().getRoles());\n+                resourceAccessMap.put(resourceAccessMapEntry.getKey(), resourceAccess);\n+            }\n+            claims.put(\"resource_access\", resourceAccessMap);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d354f4cc52657568808016811bb8ae6a3a57b7a"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcxNjg1NA==", "bodyText": "The current mechanism is the following:\nSome lines above in \n  \n    \n      keycloak/services/src/main/java/org/keycloak/protocol/oidc/endpoints/UserInfoEndpoint.java\n    \n    \n        Lines 215 to 219\n      in\n      3186f1b\n    \n    \n    \n    \n\n        \n          \n           AccessToken userInfo = new AccessToken(); \n        \n\n        \n          \n            \n        \n\n        \n          \n           userInfo.subject(userModel.getId()); \n        \n\n        \n          \n            \n        \n\n        \n          \n           tokenManager.transformUserInfoAccessToken(session, userInfo, userSession, clientSessionCtx); \n        \n    \n  \n\n\nthe protocol mappers are used to create an access token with all the information that should be available in the user info endpoint. This is done in a generic way that applies to the access token, id token and user info.\nIf the default claim name for realm roles/client roles are not modified the roles are stored in a separate field in the access token, see \n  \n    \n      keycloak/services/src/main/java/org/keycloak/protocol/oidc/mappers/AbstractUserRoleMappingMapper.java\n    \n    \n        Lines 139 to 169\n      in\n      3186f1b\n    \n    \n    \n    \n\n        \n          \n           private static boolean checkAccessToken(IDToken idToken, List<String> path, Object attributeValue) { \n        \n\n        \n          \n               if (!(idToken instanceof AccessToken)) { \n        \n\n        \n          \n                   return false; \n        \n\n        \n          \n               } \n        \n\n        \n          \n            \n        \n\n        \n          \n               if (!(attributeValue instanceof Collection)) { \n        \n\n        \n          \n                   return false; \n        \n\n        \n          \n               } \n        \n\n        \n          \n            \n        \n\n        \n          \n               Collection<String> roles = (Collection<String>) attributeValue; \n        \n\n        \n          \n            \n        \n\n        \n          \n               AccessToken token = (AccessToken) idToken; \n        \n\n        \n          \n               AccessToken.Access access = null; \n        \n\n        \n          \n               if (path.size() == 2 && \"realm_access\".equals(path.get(0)) && \"roles\".equals(path.get(1))) { \n        \n\n        \n          \n                   access = token.getRealmAccess(); \n        \n\n        \n          \n                   if (access == null) { \n        \n\n        \n          \n                       access = new AccessToken.Access(); \n        \n\n        \n          \n                       token.setRealmAccess(access); \n        \n\n        \n          \n                   } \n        \n\n        \n          \n               } else if (path.size() == 3 && \"resource_access\".equals(path.get(0)) && \"roles\".equals(path.get(2))) { \n        \n\n        \n          \n                   String clientId = path.get(1); \n        \n\n        \n          \n                   access = token.addAccess(clientId); \n        \n\n        \n          \n               } else { \n        \n\n        \n          \n                   return false; \n        \n\n        \n          \n               } \n        \n\n        \n          \n            \n        \n\n        \n          \n               for (String role : roles) { \n        \n\n        \n          \n                   access.addRole(role); \n        \n\n        \n          \n               } \n        \n\n        \n          \n               return true; \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nSince only otherClaims field is used to put info to the user info endpoint the bug occurs.\nWhich way would you suggest to properly fix this bug? I see the following options\n\nUse the realmAccess and resourceAccess properties in the access token that the protocol mappers provided. Just fetch the information of them and put it in the user info right here. That's the current version of the PR.\nAdd the information to the protocol mappers that they should map the roles in a \"user info endpoint\" way. In this case just put the roles in otherClaims field of the token.\nDon't use a special field for realmAccess and resourceAccess anymore such that the values are always provided in otherClaims.", "url": "https://github.com/keycloak/keycloak/pull/7408#discussion_r487716854", "createdAt": "2020-09-14T07:50:14Z", "author": {"login": "benjamin37"}, "path": "services/src/main/java/org/keycloak/protocol/oidc/endpoints/UserInfoEndpoint.java", "diffHunk": "@@ -225,6 +226,24 @@ private Response issueUserInfo(String tokenString) {\n         // any attempt to customize the value of this field should be done through a different claim\n         claims.put(\"sub\", userInfo.getSubject());\n \n+        if (userInfo.getRealmAccess() != null) {\n+            Map<String, Set<String>> realmAccess = new HashMap<>();\n+            realmAccess.put(\"roles\", userInfo.getRealmAccess().getRoles());\n+            claims.put(\"realm_access\", realmAccess);\n+        }\n+\n+        if (userInfo.getResourceAccess() != null && !userInfo.getResourceAccess().isEmpty()) {\n+            Map<String, Map<String, Set<String>>> resourceAccessMap = new HashMap<>();\n+\n+            for (Map.Entry<String, AccessToken.Access> resourceAccessMapEntry : userInfo.getResourceAccess()\n+                    .entrySet()) {\n+                Map<String, Set<String>> resourceAccess = new HashMap<>();\n+                resourceAccess.put(\"roles\", resourceAccessMapEntry.getValue().getRoles());\n+                resourceAccessMap.put(resourceAccessMapEntry.getKey(), resourceAccess);\n+            }\n+            claims.put(\"resource_access\", resourceAccessMap);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY2NzQ4OA=="}, "originalCommit": {"oid": "1d354f4cc52657568808016811bb8ae6a3a57b7a"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDEzMjM3OnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oidc/UserInfoTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODozMzowOVrOHRhrxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNjoyNDo1M1rOHRygRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzOTcxOA==", "bodyText": "Is it possible to merge methods includeRolesInUserInfoEndpoint and excludeRolesInUserInfoEndpoint into single method with the boolean parameter? Something like:\nprivate void switchIncludeRolesInUserInfoEndpoint(boolean includeRoles)\n\nThis should avoid some code duplications as both methods are quite similar (with the exception of true/false when switching INCLUDE_IN_USERINFO flag).", "url": "https://github.com/keycloak/keycloak/pull/7408#discussion_r488139718", "createdAt": "2020-09-14T18:33:09Z", "author": {"login": "mposolda"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oidc/UserInfoTest.java", "diffHunk": "@@ -675,4 +703,73 @@ private void testSuccessSignedResponse(Algorithm sigAlg) throws Exception {\n \n         return tokenResponse;\n     }\n+\n+    private void includeRolesInUserInfoEndpoint() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed0b29f9054a3911e862f32fd2f6c2d56e18c5d6"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQxNTMwMQ==", "bodyText": "sure, I changed that.", "url": "https://github.com/keycloak/keycloak/pull/7408#discussion_r488415301", "createdAt": "2020-09-15T06:24:53Z", "author": {"login": "benjamin37"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oidc/UserInfoTest.java", "diffHunk": "@@ -675,4 +703,73 @@ private void testSuccessSignedResponse(Algorithm sigAlg) throws Exception {\n \n         return tokenResponse;\n     }\n+\n+    private void includeRolesInUserInfoEndpoint() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzOTcxOA=="}, "originalCommit": {"oid": "ed0b29f9054a3911e862f32fd2f6c2d56e18c5d6"}, "originalPosition": 98}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3437, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}