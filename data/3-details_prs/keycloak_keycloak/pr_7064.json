{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MDgyODI1", "number": 7064, "title": "KEYCLOAK-14113 Support for exchanging to SAML 2.0 token", "bodyText": "Fix for https://issues.redhat.com/browse/KEYCLOAK-14113.", "createdAt": "2020-05-13T02:54:57Z", "url": "https://github.com/keycloak/keycloak/pull/7064", "merged": true, "mergeCommit": {"oid": "f73b51818b9cb92ed4f9888722d0f920c928dad2"}, "closed": true, "closedAt": "2020-06-19T20:08:44Z", "author": {"login": "wadahiro"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgxg6CgBqjMzMzAzMDE3NjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcskfAcAFqTQzMzYyMzY2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cb7153bb8a952b69c3c4cbe1df0cf33bb9e98f3f", "author": {"user": {"login": "wadahiro", "name": "Hiroyuki Wada"}}, "url": "https://github.com/keycloak/keycloak/commit/cb7153bb8a952b69c3c4cbe1df0cf33bb9e98f3f", "committedDate": "2020-05-13T02:38:29Z", "message": "KEYCLOAK-14113 Support for exchanging to SAML 2.0 token"}, "afterCommit": {"oid": "bc85cee4301524811233e148cf2ff5fdfe070d4b", "author": {"user": {"login": "wadahiro", "name": "Hiroyuki Wada"}}, "url": "https://github.com/keycloak/keycloak/commit/bc85cee4301524811233e148cf2ff5fdfe070d4b", "committedDate": "2020-05-13T04:44:13Z", "message": "KEYCLOAK-14113 Support for exchanging to SAML 2.0 token"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxODY3Nzg3", "url": "https://github.com/keycloak/keycloak/pull/7064#pullrequestreview-431867787", "createdAt": "2020-06-16T20:30:25Z", "commit": {"oid": "bc85cee4301524811233e148cf2ff5fdfe070d4b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bc85cee4301524811233e148cf2ff5fdfe070d4b", "author": {"user": {"login": "wadahiro", "name": "Hiroyuki Wada"}}, "url": "https://github.com/keycloak/keycloak/commit/bc85cee4301524811233e148cf2ff5fdfe070d4b", "committedDate": "2020-05-13T04:44:13Z", "message": "KEYCLOAK-14113 Support for exchanging to SAML 2.0 token"}, "afterCommit": {"oid": "51d9c68ba1677e29ffe88d4b5ab71f5ae726f536", "author": {"user": {"login": "wadahiro", "name": "Hiroyuki Wada"}}, "url": "https://github.com/keycloak/keycloak/commit/51d9c68ba1677e29ffe88d4b5ab71f5ae726f536", "committedDate": "2020-06-17T05:54:38Z", "message": "KEYCLOAK-14113 Support for exchanging to SAML 2.0 token"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNTQ0OTgy", "url": "https://github.com/keycloak/keycloak/pull/7064#pullrequestreview-432544982", "createdAt": "2020-06-17T15:55:22Z", "commit": {"oid": "51d9c68ba1677e29ffe88d4b5ab71f5ae726f536"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNzM5MDUw", "url": "https://github.com/keycloak/keycloak/pull/7064#pullrequestreview-432739050", "createdAt": "2020-06-17T20:12:44Z", "commit": {"oid": "51d9c68ba1677e29ffe88d4b5ab71f5ae726f536"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDoxMjo0NVrOGlVsUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDoyMjoyMVrOGlV-2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwNTkwNw==", "bodyText": "I just noticed that this method org.keycloak.saml.common.util.DocumentUtil#getDocumentAsString does the same thing.\nDoes it work for you?", "url": "https://github.com/keycloak/keycloak/pull/7064#discussion_r441805907", "createdAt": "2020-06-17T20:12:45Z", "author": {"login": "pedroigor"}, "path": "saml-core/src/main/java/org/keycloak/saml/common/util/DocumentUtil.java", "diffHunk": "@@ -299,6 +299,33 @@ public static InputStream getSourceAsStream(Source source) throws ConfigurationE\n         return new ByteArrayInputStream(baos.toByteArray());\n     }\n \n+    /**\n+     * Stream a DOM Node as a String\n+     *\n+     * @param node\n+     *\n+     * @return\n+     *\n+     * @throws ProcessingException\n+     * @throws TransformerFactoryConfigurationError\n+     * @throws TransformerException\n+     */\n+    public static String getNodeAsString(Node node) throws ConfigurationException, ProcessingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51d9c68ba1677e29ffe88d4b5ab71f5ae726f536"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxMDY1MA==", "bodyText": "Could you include issued_token_type and set it to urn:ietf:params:oauth:token-type:saml2. See https://tools.ietf.org/id/draft-ietf-oauth-token-exchange-19.html#rfc.section.3.\nI guess that would mean creating a TokenExchangeResponse extending AccessTokenResponse ? Reason being that we use that new class only for token exchange and don't touch the oauth2 part. Also easier to support additional parameters in the future that could be specific of exchange.", "url": "https://github.com/keycloak/keycloak/pull/7064#discussion_r441810650", "createdAt": "2020-06-17T20:22:21Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java", "diffHunk": "@@ -945,6 +976,56 @@ protected Response exchangeClientToClient(UserModel targetUser, UserSessionModel\n         return cors.builder(Response.ok(res, MediaType.APPLICATION_JSON_TYPE)).build();\n     }\n \n+    protected Response exchangeClientToSAML2Client(UserModel targetUser, UserSessionModel targetUserSession, String requestedTokenType,\n+                                                  ClientModel targetClient, String audience, String scope) {\n+        // Create authSession with target SAML 2.0 client and authenticated user\n+        LoginProtocolFactory factory = (LoginProtocolFactory) session.getKeycloakSessionFactory()\n+                .getProviderFactory(LoginProtocol.class, SamlProtocol.LOGIN_PROTOCOL);\n+        SamlService samlService = (SamlService) factory.createProtocolEndpoint(realm, event);\n+        ResteasyProviderFactory.getInstance().injectProperties(samlService);\n+        AuthenticationSessionModel authSession = samlService.getOrCreateLoginSessionForIdpInitiatedSso(session, realm,\n+                targetClient, null);\n+        if (authSession == null) {\n+            logger.error(\"SAML assertion consumer url not set up\");\n+            throw new CorsErrorResponseException(cors, OAuthErrorException.INVALID_CLIENT, \"Client requires assertion consumer url set up\", Response.Status.BAD_REQUEST);\n+        }\n+\n+        authSession.setAuthenticatedUser(targetUser);\n+\n+        event.session(targetUserSession);\n+\n+        AuthenticationManager.setClientScopesInSession(authSession);\n+        ClientSessionContext clientSessionCtx = TokenManager.attachAuthenticationSession(this.session, targetUserSession,\n+                authSession);\n+\n+        updateUserSessionFromClientAuth(targetUserSession);\n+\n+        // Create SAML 2.0 Assertion Response\n+        SamlClient samlClient = new SamlClient(targetClient);\n+        SamlProtocol samlProtocol = new TokenExchangeSamlProtocol(samlClient).setEventBuilder(event).setHttpHeaders(headers).setRealm(realm)\n+                .setSession(session).setUriInfo(session.getContext().getUri());\n+\n+        Response samlAssertion = samlProtocol.authenticated(authSession, targetUserSession, clientSessionCtx);\n+        if (samlAssertion.getStatus() != 200) {\n+            throw new CorsErrorResponseException(cors, OAuthErrorException.INVALID_REQUEST, \"Can not get SAML 2.0 token\", Response.Status.BAD_REQUEST);\n+        }\n+        String xmlString = (String) samlAssertion.getEntity();\n+        String encodedXML = Base64Url.encode(xmlString.getBytes(GeneralConstants.SAML_CHARSET));\n+\n+        int assertionLifespan = samlClient.getAssertionLifespan();\n+\n+        AccessTokenResponse res = new AccessTokenResponse();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51d9c68ba1677e29ffe88d4b5ab71f5ae726f536"}, "originalPosition": 118}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e88442431b8742e4bd359f44e5b994ae0751c974", "author": {"user": {"login": "wadahiro", "name": "Hiroyuki Wada"}}, "url": "https://github.com/keycloak/keycloak/commit/e88442431b8742e4bd359f44e5b994ae0751c974", "committedDate": "2020-06-18T15:29:33Z", "message": "KEYCLOAK-14113 Support for exchanging to SAML 2.0 token"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "51d9c68ba1677e29ffe88d4b5ab71f5ae726f536", "author": {"user": {"login": "wadahiro", "name": "Hiroyuki Wada"}}, "url": "https://github.com/keycloak/keycloak/commit/51d9c68ba1677e29ffe88d4b5ab71f5ae726f536", "committedDate": "2020-06-17T05:54:38Z", "message": "KEYCLOAK-14113 Support for exchanging to SAML 2.0 token"}, "afterCommit": {"oid": "e88442431b8742e4bd359f44e5b994ae0751c974", "author": {"user": {"login": "wadahiro", "name": "Hiroyuki Wada"}}, "url": "https://github.com/keycloak/keycloak/commit/e88442431b8742e4bd359f44e5b994ae0751c974", "committedDate": "2020-06-18T15:29:33Z", "message": "KEYCLOAK-14113 Support for exchanging to SAML 2.0 token"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNjIzNjY3", "url": "https://github.com/keycloak/keycloak/pull/7064#pullrequestreview-433623667", "createdAt": "2020-06-18T20:29:12Z", "commit": {"oid": "e88442431b8742e4bd359f44e5b994ae0751c974"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3044, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}