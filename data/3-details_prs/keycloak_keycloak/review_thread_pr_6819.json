{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4Mjg4OTk3", "number": 6819, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNToyNDowM1rODh6ijw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNjoxNzo1MFrODixCPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODg4NzE5OnYy", "diffSide": "RIGHT", "path": "authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/permission/ScopePolicyProviderFactory.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNToyNDowM1rOFs6kzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNToxMDoxN1rOFuvVCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY0MTM1Nw==", "bodyText": "Is this if statement really necessary ?", "url": "https://github.com/keycloak/keycloak/pull/6819#discussion_r382641357", "createdAt": "2020-02-21T15:24:03Z", "author": {"login": "pedroigor"}, "path": "authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/permission/ScopePolicyProviderFactory.java", "diffHunk": "@@ -62,6 +66,33 @@ public ScopePermissionRepresentation toRepresentation(Policy policy, Authorizati\n         return new ScopePermissionRepresentation();\n     }\n \n+    @Override\n+    public void onCreate(Policy policy, ScopePermissionRepresentation representation, AuthorizationProvider authorization) {\n+        updateResourceType(policy, representation);\n+    }\n+\n+    @Override\n+    public void onUpdate(Policy policy, ScopePermissionRepresentation representation, AuthorizationProvider authorization) {\n+        updateResourceType(policy, representation);\n+    }\n+\n+    private void updateResourceType(Policy policy, ScopePermissionRepresentation representation) {\n+        if (representation != null) {\n+            //TODO: remove this check once we migrate to new API\n+            if (ScopePermissionRepresentation.class.equals(representation.getClass())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9181663f157d6e4f661a6237b60381ad2d8ff306"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk3MDI5MQ==", "bodyText": "We duplicated this if from:\n\n  \n    \n      keycloak/authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/permission/ResourcePolicyProviderFactory.java\n    \n    \n         Line 83\n      in\n      8436a88\n    \n    \n    \n    \n\n        \n          \n           if (ResourcePermissionRepresentation.class.equals(representation.getClass())) { \n        \n    \n  \n\n\nSince the API now specifies the representation type (ResourcePermissionRepresentation and  ScopePermissionRepresentation) maybe we could remove the if and the class.cast from both ResourcePolicyProviderFactory and ScopePolicyProviderFactory. Do you agree with this change?", "url": "https://github.com/keycloak/keycloak/pull/6819#discussion_r383970291", "createdAt": "2020-02-25T15:55:46Z", "author": {"login": "alvarogimenez"}, "path": "authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/permission/ScopePolicyProviderFactory.java", "diffHunk": "@@ -62,6 +66,33 @@ public ScopePermissionRepresentation toRepresentation(Policy policy, Authorizati\n         return new ScopePermissionRepresentation();\n     }\n \n+    @Override\n+    public void onCreate(Policy policy, ScopePermissionRepresentation representation, AuthorizationProvider authorization) {\n+        updateResourceType(policy, representation);\n+    }\n+\n+    @Override\n+    public void onUpdate(Policy policy, ScopePermissionRepresentation representation, AuthorizationProvider authorization) {\n+        updateResourceType(policy, representation);\n+    }\n+\n+    private void updateResourceType(Policy policy, ScopePermissionRepresentation representation) {\n+        if (representation != null) {\n+            //TODO: remove this check once we migrate to new API\n+            if (ScopePermissionRepresentation.class.equals(representation.getClass())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY0MTM1Nw=="}, "originalCommit": {"oid": "9181663f157d6e4f661a6237b60381ad2d8ff306"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ3NDk4MA==", "bodyText": "Yes, I agree.", "url": "https://github.com/keycloak/keycloak/pull/6819#discussion_r384474980", "createdAt": "2020-02-26T12:57:53Z", "author": {"login": "pedroigor"}, "path": "authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/permission/ScopePolicyProviderFactory.java", "diffHunk": "@@ -62,6 +66,33 @@ public ScopePermissionRepresentation toRepresentation(Policy policy, Authorizati\n         return new ScopePermissionRepresentation();\n     }\n \n+    @Override\n+    public void onCreate(Policy policy, ScopePermissionRepresentation representation, AuthorizationProvider authorization) {\n+        updateResourceType(policy, representation);\n+    }\n+\n+    @Override\n+    public void onUpdate(Policy policy, ScopePermissionRepresentation representation, AuthorizationProvider authorization) {\n+        updateResourceType(policy, representation);\n+    }\n+\n+    private void updateResourceType(Policy policy, ScopePermissionRepresentation representation) {\n+        if (representation != null) {\n+            //TODO: remove this check once we migrate to new API\n+            if (ScopePermissionRepresentation.class.equals(representation.getClass())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY0MTM1Nw=="}, "originalCommit": {"oid": "9181663f157d6e4f661a6237b60381ad2d8ff306"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU1NDI1MA==", "bodyText": "Done!", "url": "https://github.com/keycloak/keycloak/pull/6819#discussion_r384554250", "createdAt": "2020-02-26T15:10:17Z", "author": {"login": "alvarogimenez"}, "path": "authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/permission/ScopePolicyProviderFactory.java", "diffHunk": "@@ -62,6 +66,33 @@ public ScopePermissionRepresentation toRepresentation(Policy policy, Authorizati\n         return new ScopePermissionRepresentation();\n     }\n \n+    @Override\n+    public void onCreate(Policy policy, ScopePermissionRepresentation representation, AuthorizationProvider authorization) {\n+        updateResourceType(policy, representation);\n+    }\n+\n+    @Override\n+    public void onUpdate(Policy policy, ScopePermissionRepresentation representation, AuthorizationProvider authorization) {\n+        updateResourceType(policy, representation);\n+    }\n+\n+    private void updateResourceType(Policy policy, ScopePermissionRepresentation representation) {\n+        if (representation != null) {\n+            //TODO: remove this check once we migrate to new API\n+            if (ScopePermissionRepresentation.class.equals(representation.getClass())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY0MTM1Nw=="}, "originalCommit": {"oid": "9181663f157d6e4f661a6237b60381ad2d8ff306"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODkwNzAyOnYy", "diffSide": "RIGHT", "path": "authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/permission/ScopePolicyProviderFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNToyOTowMVrOFs6wfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNTo0OTo1NFrOFuLb-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY0NDM1MQ==", "bodyText": "In addition to onCreate|Update you should also make sure the representation is set with the defaultResorceType setting by implementing org.keycloak.authorization.policy.provider.permission.ScopePolicyProviderFactory#toRepresentation.\nPlease, take a look at ResourcePolicyProviderFactory.", "url": "https://github.com/keycloak/keycloak/pull/6819#discussion_r382644351", "createdAt": "2020-02-21T15:29:01Z", "author": {"login": "pedroigor"}, "path": "authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/permission/ScopePolicyProviderFactory.java", "diffHunk": "@@ -62,6 +66,33 @@ public ScopePermissionRepresentation toRepresentation(Policy policy, Authorizati\n         return new ScopePermissionRepresentation();\n     }\n \n+    @Override\n+    public void onCreate(Policy policy, ScopePermissionRepresentation representation, AuthorizationProvider authorization) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9181663f157d6e4f661a6237b60381ad2d8ff306"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk2NjIwMQ==", "bodyText": "Done!", "url": "https://github.com/keycloak/keycloak/pull/6819#discussion_r383966201", "createdAt": "2020-02-25T15:49:54Z", "author": {"login": "alvarogimenez"}, "path": "authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/permission/ScopePolicyProviderFactory.java", "diffHunk": "@@ -62,6 +66,33 @@ public ScopePermissionRepresentation toRepresentation(Policy policy, Authorizati\n         return new ScopePermissionRepresentation();\n     }\n \n+    @Override\n+    public void onCreate(Policy policy, ScopePermissionRepresentation representation, AuthorizationProvider authorization) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY0NDM1MQ=="}, "originalCommit": {"oid": "9181663f157d6e4f661a6237b60381ad2d8ff306"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzgxNTY0OnYy", "diffSide": "RIGHT", "path": "model/jpa/src/main/java/org/keycloak/authorization/jpa/entities/PolicyEntity.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNjoxNzo1MFrOFuMmhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODoxOTo1NFrOGT7ZyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4NTI4Nw==", "bodyText": "We realized that, by adding a resourceType to ScopePermissionRepresentation, we are implying that such Permissions refer to a set of resources. Scope permissions which do not reference an specific resource are involved in all Resource Permission Evaluation requesting the specified scope.  The query findPolicyIdByNullResourceScope looks for Scope Permissions which do not refer to specific resources. When a ScopePermission has a defaultResourceType defined, it should not be retrieved by this query. E.g.:\n\nResources:\n\nt1 (Scopes=read,write, Type=t)\nt2 (Scopes=read,write, Type=t)\nx1 (Scopes=read,write, Type=x)\nx2 (Scopes=read,write, Type=x)\n\n\nPermissions:\n\nScopePermission -> t:read (Scope=read, ResourceType=t)\nScopePermission -> any:read (Scope=read, ResourceType=null)\n\n\n\nWithout the proposed changes, the permission t:read would be retrieved by the DefaultPolicyEvaluator when evaluating permissions for the resource x1 since it doesn't reference an specific resource (It references a resourceType instead). Only the permission any:read should be involved in the x1 permission evaluation since t:readonly applies to resources of type t.\nWe've included a new field configKeys since JPA does not support queries like 'defaultResourceType' not member of pe.config being pe.config a Map collection. This could also be achieved with an in-memory filtering but we think the JPA approach is a better solution. Do you think is there a better approach?", "url": "https://github.com/keycloak/keycloak/pull/6819#discussion_r383985287", "createdAt": "2020-02-25T16:17:50Z", "author": {"login": "alvarogimenez"}, "path": "model/jpa/src/main/java/org/keycloak/authorization/jpa/entities/PolicyEntity.java", "diffHunk": "@@ -59,7 +56,7 @@\n                 @NamedQuery(name=\"findPolicyIdByResource\", query=\"select p from PolicyEntity p inner join fetch p.resources r left join fetch p.scopes s inner join fetch p.associatedPolicies a where p.resourceServer.id = :serverId and (r.resourceServer.id = :serverId and r.id = :resourceId)\"),\n                 @NamedQuery(name=\"findPolicyIdByScope\", query=\"select pe from PolicyEntity pe left join fetch pe.resources r inner join fetch pe.scopes s inner join fetch pe.associatedPolicies a where pe.resourceServer.id = :serverId and exists (select p.id from ScopeEntity s inner join s.policies p where s.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.type = 'scope' and s.id in (:scopeIds) and p.id = pe.id))\"),\n                 @NamedQuery(name=\"findPolicyIdByResourceScope\", query=\"select pe from PolicyEntity pe inner join fetch pe.resources r inner join fetch pe.scopes s inner join fetch pe.associatedPolicies a where pe.resourceServer.id = :serverId and exists (select p.id from ScopeEntity s inner join s.policies p where s.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.type = 'scope' and s.id in (:scopeIds) and p.id = pe.id)) and exists (select p.id from ResourceEntity r inner join r.policies p where r.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.id = pe.id and p.type = 'scope' and r.id in (:resourceId)))\"),\n-                @NamedQuery(name=\"findPolicyIdByNullResourceScope\", query=\"select pe from PolicyEntity pe left join fetch pe.resources r inner join fetch pe.scopes s inner join fetch pe.associatedPolicies a where pe.resourceServer.id = :serverId and exists (select p.id from ScopeEntity s inner join s.policies p where s.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.id = pe.id and p.type = 'scope' and s.id in (:scopeIds))) and pe.resources is empty\"),\n+                @NamedQuery(name=\"findPolicyIdByNullResourceScope\", query=\"select pe from PolicyEntity pe left join fetch pe.resources r left join fetch pe.configKeys ck inner join fetch pe.scopes s inner join fetch pe.associatedPolicies a where pe.resourceServer.id = :serverId and exists (select p.id from ScopeEntity s inner join s.policies p where s.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.id = pe.id and p.type = 'scope' and s.id in (:scopeIds))) and pe.resources is empty and 'defaultResourceType' not member of pe.configKeys\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "825e17d71c70029020ec2663b2419293a3e8c325"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4ODk3MA==", "bodyText": "This scenario is covered in the test we provided", "url": "https://github.com/keycloak/keycloak/pull/6819#discussion_r383988970", "createdAt": "2020-02-25T16:23:12Z", "author": {"login": "alvarogimenez"}, "path": "model/jpa/src/main/java/org/keycloak/authorization/jpa/entities/PolicyEntity.java", "diffHunk": "@@ -59,7 +56,7 @@\n                 @NamedQuery(name=\"findPolicyIdByResource\", query=\"select p from PolicyEntity p inner join fetch p.resources r left join fetch p.scopes s inner join fetch p.associatedPolicies a where p.resourceServer.id = :serverId and (r.resourceServer.id = :serverId and r.id = :resourceId)\"),\n                 @NamedQuery(name=\"findPolicyIdByScope\", query=\"select pe from PolicyEntity pe left join fetch pe.resources r inner join fetch pe.scopes s inner join fetch pe.associatedPolicies a where pe.resourceServer.id = :serverId and exists (select p.id from ScopeEntity s inner join s.policies p where s.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.type = 'scope' and s.id in (:scopeIds) and p.id = pe.id))\"),\n                 @NamedQuery(name=\"findPolicyIdByResourceScope\", query=\"select pe from PolicyEntity pe inner join fetch pe.resources r inner join fetch pe.scopes s inner join fetch pe.associatedPolicies a where pe.resourceServer.id = :serverId and exists (select p.id from ScopeEntity s inner join s.policies p where s.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.type = 'scope' and s.id in (:scopeIds) and p.id = pe.id)) and exists (select p.id from ResourceEntity r inner join r.policies p where r.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.id = pe.id and p.type = 'scope' and r.id in (:resourceId)))\"),\n-                @NamedQuery(name=\"findPolicyIdByNullResourceScope\", query=\"select pe from PolicyEntity pe left join fetch pe.resources r inner join fetch pe.scopes s inner join fetch pe.associatedPolicies a where pe.resourceServer.id = :serverId and exists (select p.id from ScopeEntity s inner join s.policies p where s.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.id = pe.id and p.type = 'scope' and s.id in (:scopeIds))) and pe.resources is empty\"),\n+                @NamedQuery(name=\"findPolicyIdByNullResourceScope\", query=\"select pe from PolicyEntity pe left join fetch pe.resources r left join fetch pe.configKeys ck inner join fetch pe.scopes s inner join fetch pe.associatedPolicies a where pe.resourceServer.id = :serverId and exists (select p.id from ScopeEntity s inner join s.policies p where s.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.id = pe.id and p.type = 'scope' and s.id in (:scopeIds))) and pe.resources is empty and 'defaultResourceType' not member of pe.configKeys\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4NTI4Nw=="}, "originalCommit": {"oid": "825e17d71c70029020ec2663b2419293a3e8c325"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4Mjg0NQ==", "bodyText": "I'm a bit concerned about this change. I'm afraid it could impact performance?\nIt is indeed better than filtering the results once they are fetched from the database. Really not sure ...", "url": "https://github.com/keycloak/keycloak/pull/6819#discussion_r384482845", "createdAt": "2020-02-26T13:13:37Z", "author": {"login": "pedroigor"}, "path": "model/jpa/src/main/java/org/keycloak/authorization/jpa/entities/PolicyEntity.java", "diffHunk": "@@ -59,7 +56,7 @@\n                 @NamedQuery(name=\"findPolicyIdByResource\", query=\"select p from PolicyEntity p inner join fetch p.resources r left join fetch p.scopes s inner join fetch p.associatedPolicies a where p.resourceServer.id = :serverId and (r.resourceServer.id = :serverId and r.id = :resourceId)\"),\n                 @NamedQuery(name=\"findPolicyIdByScope\", query=\"select pe from PolicyEntity pe left join fetch pe.resources r inner join fetch pe.scopes s inner join fetch pe.associatedPolicies a where pe.resourceServer.id = :serverId and exists (select p.id from ScopeEntity s inner join s.policies p where s.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.type = 'scope' and s.id in (:scopeIds) and p.id = pe.id))\"),\n                 @NamedQuery(name=\"findPolicyIdByResourceScope\", query=\"select pe from PolicyEntity pe inner join fetch pe.resources r inner join fetch pe.scopes s inner join fetch pe.associatedPolicies a where pe.resourceServer.id = :serverId and exists (select p.id from ScopeEntity s inner join s.policies p where s.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.type = 'scope' and s.id in (:scopeIds) and p.id = pe.id)) and exists (select p.id from ResourceEntity r inner join r.policies p where r.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.id = pe.id and p.type = 'scope' and r.id in (:resourceId)))\"),\n-                @NamedQuery(name=\"findPolicyIdByNullResourceScope\", query=\"select pe from PolicyEntity pe left join fetch pe.resources r inner join fetch pe.scopes s inner join fetch pe.associatedPolicies a where pe.resourceServer.id = :serverId and exists (select p.id from ScopeEntity s inner join s.policies p where s.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.id = pe.id and p.type = 'scope' and s.id in (:scopeIds))) and pe.resources is empty\"),\n+                @NamedQuery(name=\"findPolicyIdByNullResourceScope\", query=\"select pe from PolicyEntity pe left join fetch pe.resources r left join fetch pe.configKeys ck inner join fetch pe.scopes s inner join fetch pe.associatedPolicies a where pe.resourceServer.id = :serverId and exists (select p.id from ScopeEntity s inner join s.policies p where s.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.id = pe.id and p.type = 'scope' and s.id in (:scopeIds))) and pe.resources is empty and 'defaultResourceType' not member of pe.configKeys\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4NTI4Nw=="}, "originalCommit": {"oid": "825e17d71c70029020ec2663b2419293a3e8c325"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU4NDc1NQ==", "bodyText": "We found a better approach to this query which doesn't need the addition of the configKeys  field and only uses the existing config map. We could leave the query as follows:\nselect pe from PolicyEntity pe\n\u00a0\u00a0\u00a0left join fetch pe.resources r\n\u00a0\u00a0\u00a0left join fetch pe.config c\n\u00a0\u00a0\u00a0inner join fetch pe.scopes s\n\u00a0\u00a0\u00a0inner join fetch pe.associatedPolicies a\nwhere pe.resourceServer.id = :serverId\n\u00a0\u00a0\u00a0and exists (select p.id from ScopeEntity s inner join s.policies p where s.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.id = pe.id and p.type = 'scope' and s.id in (:scopeIds)))\n\u00a0\u00a0\u00a0and pe.resources is empty\n\u00a0\u00a0\u00a0and not exists (select pec from pe.config pec where KEY(pec) = 'defaultResourceType')\nwhat do you think?", "url": "https://github.com/keycloak/keycloak/pull/6819#discussion_r384584755", "createdAt": "2020-02-26T15:52:57Z", "author": {"login": "alvarogimenez"}, "path": "model/jpa/src/main/java/org/keycloak/authorization/jpa/entities/PolicyEntity.java", "diffHunk": "@@ -59,7 +56,7 @@\n                 @NamedQuery(name=\"findPolicyIdByResource\", query=\"select p from PolicyEntity p inner join fetch p.resources r left join fetch p.scopes s inner join fetch p.associatedPolicies a where p.resourceServer.id = :serverId and (r.resourceServer.id = :serverId and r.id = :resourceId)\"),\n                 @NamedQuery(name=\"findPolicyIdByScope\", query=\"select pe from PolicyEntity pe left join fetch pe.resources r inner join fetch pe.scopes s inner join fetch pe.associatedPolicies a where pe.resourceServer.id = :serverId and exists (select p.id from ScopeEntity s inner join s.policies p where s.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.type = 'scope' and s.id in (:scopeIds) and p.id = pe.id))\"),\n                 @NamedQuery(name=\"findPolicyIdByResourceScope\", query=\"select pe from PolicyEntity pe inner join fetch pe.resources r inner join fetch pe.scopes s inner join fetch pe.associatedPolicies a where pe.resourceServer.id = :serverId and exists (select p.id from ScopeEntity s inner join s.policies p where s.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.type = 'scope' and s.id in (:scopeIds) and p.id = pe.id)) and exists (select p.id from ResourceEntity r inner join r.policies p where r.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.id = pe.id and p.type = 'scope' and r.id in (:resourceId)))\"),\n-                @NamedQuery(name=\"findPolicyIdByNullResourceScope\", query=\"select pe from PolicyEntity pe left join fetch pe.resources r inner join fetch pe.scopes s inner join fetch pe.associatedPolicies a where pe.resourceServer.id = :serverId and exists (select p.id from ScopeEntity s inner join s.policies p where s.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.id = pe.id and p.type = 'scope' and s.id in (:scopeIds))) and pe.resources is empty\"),\n+                @NamedQuery(name=\"findPolicyIdByNullResourceScope\", query=\"select pe from PolicyEntity pe left join fetch pe.resources r left join fetch pe.configKeys ck inner join fetch pe.scopes s inner join fetch pe.associatedPolicies a where pe.resourceServer.id = :serverId and exists (select p.id from ScopeEntity s inner join s.policies p where s.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.id = pe.id and p.type = 'scope' and s.id in (:scopeIds))) and pe.resources is empty and 'defaultResourceType' not member of pe.configKeys\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4NTI4Nw=="}, "originalCommit": {"oid": "825e17d71c70029020ec2663b2419293a3e8c325"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM2MjgyOA==", "bodyText": "Hi @pedroigor, we've seen that you resolved this conversation. Do you have any thoughts about the change proposal we made related to this query? Maybe we could update the PR with the proposed changes (the ones which do not require the configKeys field)?\nI reopened the conversation, let me know if you want to continue this conversation in the main thread of the PR :)", "url": "https://github.com/keycloak/keycloak/pull/6819#discussion_r386362828", "createdAt": "2020-03-02T12:26:21Z", "author": {"login": "alvarogimenez"}, "path": "model/jpa/src/main/java/org/keycloak/authorization/jpa/entities/PolicyEntity.java", "diffHunk": "@@ -59,7 +56,7 @@\n                 @NamedQuery(name=\"findPolicyIdByResource\", query=\"select p from PolicyEntity p inner join fetch p.resources r left join fetch p.scopes s inner join fetch p.associatedPolicies a where p.resourceServer.id = :serverId and (r.resourceServer.id = :serverId and r.id = :resourceId)\"),\n                 @NamedQuery(name=\"findPolicyIdByScope\", query=\"select pe from PolicyEntity pe left join fetch pe.resources r inner join fetch pe.scopes s inner join fetch pe.associatedPolicies a where pe.resourceServer.id = :serverId and exists (select p.id from ScopeEntity s inner join s.policies p where s.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.type = 'scope' and s.id in (:scopeIds) and p.id = pe.id))\"),\n                 @NamedQuery(name=\"findPolicyIdByResourceScope\", query=\"select pe from PolicyEntity pe inner join fetch pe.resources r inner join fetch pe.scopes s inner join fetch pe.associatedPolicies a where pe.resourceServer.id = :serverId and exists (select p.id from ScopeEntity s inner join s.policies p where s.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.type = 'scope' and s.id in (:scopeIds) and p.id = pe.id)) and exists (select p.id from ResourceEntity r inner join r.policies p where r.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.id = pe.id and p.type = 'scope' and r.id in (:resourceId)))\"),\n-                @NamedQuery(name=\"findPolicyIdByNullResourceScope\", query=\"select pe from PolicyEntity pe left join fetch pe.resources r inner join fetch pe.scopes s inner join fetch pe.associatedPolicies a where pe.resourceServer.id = :serverId and exists (select p.id from ScopeEntity s inner join s.policies p where s.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.id = pe.id and p.type = 'scope' and s.id in (:scopeIds))) and pe.resources is empty\"),\n+                @NamedQuery(name=\"findPolicyIdByNullResourceScope\", query=\"select pe from PolicyEntity pe left join fetch pe.resources r left join fetch pe.configKeys ck inner join fetch pe.scopes s inner join fetch pe.associatedPolicies a where pe.resourceServer.id = :serverId and exists (select p.id from ScopeEntity s inner join s.policies p where s.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.id = pe.id and p.type = 'scope' and s.id in (:scopeIds))) and pe.resources is empty and 'defaultResourceType' not member of pe.configKeys\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4NTI4Nw=="}, "originalCommit": {"oid": "825e17d71c70029020ec2663b2419293a3e8c325"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4MDgzNA==", "bodyText": "@alvarogimenez Sorry, back to this one now. I think we can start without the configKeys field.", "url": "https://github.com/keycloak/keycloak/pull/6819#discussion_r421480834", "createdAt": "2020-05-07T12:55:02Z", "author": {"login": "pedroigor"}, "path": "model/jpa/src/main/java/org/keycloak/authorization/jpa/entities/PolicyEntity.java", "diffHunk": "@@ -59,7 +56,7 @@\n                 @NamedQuery(name=\"findPolicyIdByResource\", query=\"select p from PolicyEntity p inner join fetch p.resources r left join fetch p.scopes s inner join fetch p.associatedPolicies a where p.resourceServer.id = :serverId and (r.resourceServer.id = :serverId and r.id = :resourceId)\"),\n                 @NamedQuery(name=\"findPolicyIdByScope\", query=\"select pe from PolicyEntity pe left join fetch pe.resources r inner join fetch pe.scopes s inner join fetch pe.associatedPolicies a where pe.resourceServer.id = :serverId and exists (select p.id from ScopeEntity s inner join s.policies p where s.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.type = 'scope' and s.id in (:scopeIds) and p.id = pe.id))\"),\n                 @NamedQuery(name=\"findPolicyIdByResourceScope\", query=\"select pe from PolicyEntity pe inner join fetch pe.resources r inner join fetch pe.scopes s inner join fetch pe.associatedPolicies a where pe.resourceServer.id = :serverId and exists (select p.id from ScopeEntity s inner join s.policies p where s.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.type = 'scope' and s.id in (:scopeIds) and p.id = pe.id)) and exists (select p.id from ResourceEntity r inner join r.policies p where r.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.id = pe.id and p.type = 'scope' and r.id in (:resourceId)))\"),\n-                @NamedQuery(name=\"findPolicyIdByNullResourceScope\", query=\"select pe from PolicyEntity pe left join fetch pe.resources r inner join fetch pe.scopes s inner join fetch pe.associatedPolicies a where pe.resourceServer.id = :serverId and exists (select p.id from ScopeEntity s inner join s.policies p where s.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.id = pe.id and p.type = 'scope' and s.id in (:scopeIds))) and pe.resources is empty\"),\n+                @NamedQuery(name=\"findPolicyIdByNullResourceScope\", query=\"select pe from PolicyEntity pe left join fetch pe.resources r left join fetch pe.configKeys ck inner join fetch pe.scopes s inner join fetch pe.associatedPolicies a where pe.resourceServer.id = :serverId and exists (select p.id from ScopeEntity s inner join s.policies p where s.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.id = pe.id and p.type = 'scope' and s.id in (:scopeIds))) and pe.resources is empty and 'defaultResourceType' not member of pe.configKeys\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4NTI4Nw=="}, "originalCommit": {"oid": "825e17d71c70029020ec2663b2419293a3e8c325"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU0OTM4NQ==", "bodyText": "Done :)", "url": "https://github.com/keycloak/keycloak/pull/6819#discussion_r423549385", "createdAt": "2020-05-12T08:19:54Z", "author": {"login": "alvarogimenez"}, "path": "model/jpa/src/main/java/org/keycloak/authorization/jpa/entities/PolicyEntity.java", "diffHunk": "@@ -59,7 +56,7 @@\n                 @NamedQuery(name=\"findPolicyIdByResource\", query=\"select p from PolicyEntity p inner join fetch p.resources r left join fetch p.scopes s inner join fetch p.associatedPolicies a where p.resourceServer.id = :serverId and (r.resourceServer.id = :serverId and r.id = :resourceId)\"),\n                 @NamedQuery(name=\"findPolicyIdByScope\", query=\"select pe from PolicyEntity pe left join fetch pe.resources r inner join fetch pe.scopes s inner join fetch pe.associatedPolicies a where pe.resourceServer.id = :serverId and exists (select p.id from ScopeEntity s inner join s.policies p where s.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.type = 'scope' and s.id in (:scopeIds) and p.id = pe.id))\"),\n                 @NamedQuery(name=\"findPolicyIdByResourceScope\", query=\"select pe from PolicyEntity pe inner join fetch pe.resources r inner join fetch pe.scopes s inner join fetch pe.associatedPolicies a where pe.resourceServer.id = :serverId and exists (select p.id from ScopeEntity s inner join s.policies p where s.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.type = 'scope' and s.id in (:scopeIds) and p.id = pe.id)) and exists (select p.id from ResourceEntity r inner join r.policies p where r.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.id = pe.id and p.type = 'scope' and r.id in (:resourceId)))\"),\n-                @NamedQuery(name=\"findPolicyIdByNullResourceScope\", query=\"select pe from PolicyEntity pe left join fetch pe.resources r inner join fetch pe.scopes s inner join fetch pe.associatedPolicies a where pe.resourceServer.id = :serverId and exists (select p.id from ScopeEntity s inner join s.policies p where s.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.id = pe.id and p.type = 'scope' and s.id in (:scopeIds))) and pe.resources is empty\"),\n+                @NamedQuery(name=\"findPolicyIdByNullResourceScope\", query=\"select pe from PolicyEntity pe left join fetch pe.resources r left join fetch pe.configKeys ck inner join fetch pe.scopes s inner join fetch pe.associatedPolicies a where pe.resourceServer.id = :serverId and exists (select p.id from ScopeEntity s inner join s.policies p where s.resourceServer.id = :serverId and (p.resourceServer.id = :serverId and p.id = pe.id and p.type = 'scope' and s.id in (:scopeIds))) and pe.resources is empty and 'defaultResourceType' not member of pe.configKeys\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4NTI4Nw=="}, "originalCommit": {"oid": "825e17d71c70029020ec2663b2419293a3e8c325"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3778, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}