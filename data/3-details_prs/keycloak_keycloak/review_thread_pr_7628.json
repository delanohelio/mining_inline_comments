{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzNjM2ODY1", "number": 7628, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDoxOTowMlrOE7j3iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDoxOTowMlrOE7j3iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODg5MDk3OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientUpdateSourceHostsCondition.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDoxOTowMlrOH3RlpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMTowNDo1N1rOH4Im1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcyMTg5Mw==", "bodyText": "I think that \"Host\" headers refers to the server host, rather than the host of the client.\nI think you can take a look for the inspiration to the TrustedHostClientRegistrationPolicy . That one also provides some additional flexibility (EG. checking the domains instead of the pure hosts) and hence I suggest to just re-use some code from it to have similar flexibility here (also considering that we're going to replace \"Client Registration Policies\" by \"Client Policies\", we may need at least same flexibility, which is provided by the existing client registration policies)", "url": "https://github.com/keycloak/keycloak/pull/7628#discussion_r527721893", "createdAt": "2020-11-20T14:19:02Z", "author": {"login": "mposolda"}, "path": "services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientUpdateSourceHostsCondition.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.services.clientpolicy.condition;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.component.ComponentModel;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.services.clientpolicy.ClientPolicyContext;\n+import org.keycloak.services.clientpolicy.ClientPolicyException;\n+import org.keycloak.services.clientpolicy.ClientPolicyLogger;\n+import org.keycloak.services.clientpolicy.ClientPolicyVote;\n+\n+public class ClientUpdateSourceHostsCondition implements ClientPolicyConditionProvider {\n+\n+    private static final Logger logger = Logger.getLogger(ClientUpdateSourceHostsCondition.class);\n+\n+    private final KeycloakSession session;\n+    private final ComponentModel componentModel;\n+\n+    public ClientUpdateSourceHostsCondition(KeycloakSession session, ComponentModel componentModel) {\n+        this.session = session;\n+        this.componentModel = componentModel;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return componentModel.getName();\n+    }\n+\n+    @Override\n+    public String getProviderId() {\n+        return componentModel.getProviderId();\n+    }\n+\n+    @Override\n+    public ClientPolicyVote applyPolicy(ClientPolicyContext context) throws ClientPolicyException {\n+        switch (context.getEvent()) {\n+        case REGISTER:\n+        case UPDATE:\n+            if (isHostMatched()) return ClientPolicyVote.YES;\n+            return ClientPolicyVote.NO;\n+        default:\n+            return ClientPolicyVote.ABSTAIN;\n+        }\n+    }\n+\n+    private boolean isHostMatched() {\n+        String host = session.getContext().getRequestHeaders().getHeaderString(\"Host\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55dd7befde196ffd5e83403d2ca477e7f91324f7"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczMDQwNg==", "bodyText": "Also question is, if to \"merge\" this with the existing \"Client IP\" condition and just have same condition for both? So that admin can choose if he wants to use IP Address or the hostname? AFAIR this is supported by the TrustedHostClientRegistrationPolicy", "url": "https://github.com/keycloak/keycloak/pull/7628#discussion_r527730406", "createdAt": "2020-11-20T14:31:28Z", "author": {"login": "mposolda"}, "path": "services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientUpdateSourceHostsCondition.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.services.clientpolicy.condition;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.component.ComponentModel;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.services.clientpolicy.ClientPolicyContext;\n+import org.keycloak.services.clientpolicy.ClientPolicyException;\n+import org.keycloak.services.clientpolicy.ClientPolicyLogger;\n+import org.keycloak.services.clientpolicy.ClientPolicyVote;\n+\n+public class ClientUpdateSourceHostsCondition implements ClientPolicyConditionProvider {\n+\n+    private static final Logger logger = Logger.getLogger(ClientUpdateSourceHostsCondition.class);\n+\n+    private final KeycloakSession session;\n+    private final ComponentModel componentModel;\n+\n+    public ClientUpdateSourceHostsCondition(KeycloakSession session, ComponentModel componentModel) {\n+        this.session = session;\n+        this.componentModel = componentModel;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return componentModel.getName();\n+    }\n+\n+    @Override\n+    public String getProviderId() {\n+        return componentModel.getProviderId();\n+    }\n+\n+    @Override\n+    public ClientPolicyVote applyPolicy(ClientPolicyContext context) throws ClientPolicyException {\n+        switch (context.getEvent()) {\n+        case REGISTER:\n+        case UPDATE:\n+            if (isHostMatched()) return ClientPolicyVote.YES;\n+            return ClientPolicyVote.NO;\n+        default:\n+            return ClientPolicyVote.ABSTAIN;\n+        }\n+    }\n+\n+    private boolean isHostMatched() {\n+        String host = session.getContext().getRequestHeaders().getHeaderString(\"Host\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcyMTg5Mw=="}, "originalCommit": {"oid": "55dd7befde196ffd5e83403d2ca477e7f91324f7"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzMDA2OA==", "bodyText": "@mposolda I see, I agree with you. I would like to re-implement this condition to integrate the following 3 condition that has been planned originally.\n\nKEYCLOAK-14197 Client Policy - Condition : Client - Client Host\nKEYCLOAK-14198 Client Policy - Condition : Client - Client IP (I'll delete already merged this condition)\nKEYCLOAK-14194 Client Policy - Condition : Client - Client Domain Name\n\nWhen re-implementing this condition, I will re-use codes from TrustedHostClientRegistrationPolicy.\nWDYT?", "url": "https://github.com/keycloak/keycloak/pull/7628#discussion_r528430068", "createdAt": "2020-11-23T00:31:56Z", "author": {"login": "tnorimat"}, "path": "services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientUpdateSourceHostsCondition.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.services.clientpolicy.condition;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.component.ComponentModel;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.services.clientpolicy.ClientPolicyContext;\n+import org.keycloak.services.clientpolicy.ClientPolicyException;\n+import org.keycloak.services.clientpolicy.ClientPolicyLogger;\n+import org.keycloak.services.clientpolicy.ClientPolicyVote;\n+\n+public class ClientUpdateSourceHostsCondition implements ClientPolicyConditionProvider {\n+\n+    private static final Logger logger = Logger.getLogger(ClientUpdateSourceHostsCondition.class);\n+\n+    private final KeycloakSession session;\n+    private final ComponentModel componentModel;\n+\n+    public ClientUpdateSourceHostsCondition(KeycloakSession session, ComponentModel componentModel) {\n+        this.session = session;\n+        this.componentModel = componentModel;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return componentModel.getName();\n+    }\n+\n+    @Override\n+    public String getProviderId() {\n+        return componentModel.getProviderId();\n+    }\n+\n+    @Override\n+    public ClientPolicyVote applyPolicy(ClientPolicyContext context) throws ClientPolicyException {\n+        switch (context.getEvent()) {\n+        case REGISTER:\n+        case UPDATE:\n+            if (isHostMatched()) return ClientPolicyVote.YES;\n+            return ClientPolicyVote.NO;\n+        default:\n+            return ClientPolicyVote.ABSTAIN;\n+        }\n+    }\n+\n+    private boolean isHostMatched() {\n+        String host = session.getContext().getRequestHeaders().getHeaderString(\"Host\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcyMTg5Mw=="}, "originalCommit": {"oid": "55dd7befde196ffd5e83403d2ca477e7f91324f7"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyMzMxOA==", "bodyText": "@tnorimat +1, Thanks!", "url": "https://github.com/keycloak/keycloak/pull/7628#discussion_r528623318", "createdAt": "2020-11-23T11:04:57Z", "author": {"login": "mposolda"}, "path": "services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientUpdateSourceHostsCondition.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.services.clientpolicy.condition;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.component.ComponentModel;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.services.clientpolicy.ClientPolicyContext;\n+import org.keycloak.services.clientpolicy.ClientPolicyException;\n+import org.keycloak.services.clientpolicy.ClientPolicyLogger;\n+import org.keycloak.services.clientpolicy.ClientPolicyVote;\n+\n+public class ClientUpdateSourceHostsCondition implements ClientPolicyConditionProvider {\n+\n+    private static final Logger logger = Logger.getLogger(ClientUpdateSourceHostsCondition.class);\n+\n+    private final KeycloakSession session;\n+    private final ComponentModel componentModel;\n+\n+    public ClientUpdateSourceHostsCondition(KeycloakSession session, ComponentModel componentModel) {\n+        this.session = session;\n+        this.componentModel = componentModel;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return componentModel.getName();\n+    }\n+\n+    @Override\n+    public String getProviderId() {\n+        return componentModel.getProviderId();\n+    }\n+\n+    @Override\n+    public ClientPolicyVote applyPolicy(ClientPolicyContext context) throws ClientPolicyException {\n+        switch (context.getEvent()) {\n+        case REGISTER:\n+        case UPDATE:\n+            if (isHostMatched()) return ClientPolicyVote.YES;\n+            return ClientPolicyVote.NO;\n+        default:\n+            return ClientPolicyVote.ABSTAIN;\n+        }\n+    }\n+\n+    private boolean isHostMatched() {\n+        String host = session.getContext().getRequestHeaders().getHeaderString(\"Host\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcyMTg5Mw=="}, "originalCommit": {"oid": "55dd7befde196ffd5e83403d2ca477e7f91324f7"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3194, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}