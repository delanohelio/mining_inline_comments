{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4Njk2NDMx", "number": 7263, "title": "KEYCLOAK-14220 Complement methods for accessing clients with Stream v\u2026", "bodyText": "\u2026ariants", "createdAt": "2020-07-14T07:19:16Z", "url": "https://github.com/keycloak/keycloak/pull/7263", "merged": true, "mergeCommit": {"oid": "feef5b4db2add4d583630674afe778b9fdc551e0"}, "closed": true, "closedAt": "2020-07-27T08:38:40Z", "author": {"login": "martin-kanis"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc0yCw6gBqjM1NDMxNTA3OTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc49sW3AFqTQ1NTU4NDEzOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e7fc30d83bfebbbc9b57d5628336dfb16af8f176", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/e7fc30d83bfebbbc9b57d5628336dfb16af8f176", "committedDate": "2020-07-14T07:12:34Z", "message": "KEYCLOAK-14220 Complement methods for accessing clients with Stream variants"}, "afterCommit": {"oid": "8a5c1403c6d219abf19855660b55ca5d93cf5c62", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/8a5c1403c6d219abf19855660b55ca5d93cf5c62", "committedDate": "2020-07-14T08:48:07Z", "message": "KEYCLOAK-14220 Complement methods for accessing clients with Stream variants"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8a5c1403c6d219abf19855660b55ca5d93cf5c62", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/8a5c1403c6d219abf19855660b55ca5d93cf5c62", "committedDate": "2020-07-14T08:48:07Z", "message": "KEYCLOAK-14220 Complement methods for accessing clients with Stream variants"}, "afterCommit": {"oid": "ded3ef8a5a5953a710780e11ffa985c02771de1f", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/ded3ef8a5a5953a710780e11ffa985c02771de1f", "committedDate": "2020-07-14T11:03:45Z", "message": "KEYCLOAK-14220 Complement methods for accessing clients with Stream variants"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4ODc2Nzgy", "url": "https://github.com/keycloak/keycloak/pull/7263#pullrequestreview-448876782", "createdAt": "2020-07-15T11:48:55Z", "commit": {"oid": "ded3ef8a5a5953a710780e11ffa985c02771de1f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTo0ODo1NlrOGx6fpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTo0ODo1NlrOGx6fpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5MTc4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected Stream<RoleModel> getRoles(TypedQuery<RoleEntity> query, RealmModel realm, Integer first, Integer max) {\n          \n          \n            \n                protected Stream<RoleModel> getRolesStream(TypedQuery<RoleEntity> query, RealmModel realm, Integer first, Integer max) {", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r454991780", "createdAt": "2020-07-15T11:48:56Z", "author": {"login": "hmlnarik"}, "path": "model/jpa/src/main/java/org/keycloak/models/jpa/JpaRealmProvider.java", "diffHunk": "@@ -284,76 +281,67 @@ public RoleModel getClientRole(RealmModel realm, ClientModel client, String name\n \n \n     @Override\n-    public Set<RoleModel> getClientRoles(RealmModel realm, ClientModel client) {\n-        Set<RoleModel> list = new HashSet<>();\n+    public Stream<RoleModel> getClientRolesStream(RealmModel realm, ClientModel client) {\n         TypedQuery<String> query = em.createNamedQuery(\"getClientRoleIds\", String.class);\n         query.setParameter(\"client\", client.getId());\n-        List<String> roles = query.getResultList();\n-        for (String id : roles) {\n-            list.add(session.realms().getRoleById(id, realm));\n-        }\n-        return list;\n+        Stream<String> roles = query.getResultStream();\n+\n+        return roles.map(realm::getRoleById);\n     }\n     \n     @Override\n-    public Set<RoleModel> getRealmRoles(RealmModel realm, Integer first, Integer max) {\n+    public Stream<RoleModel> getRealmRolesStream(RealmModel realm, Integer first, Integer max) {\n         TypedQuery<RoleEntity> query = em.createNamedQuery(\"getRealmRoles\", RoleEntity.class);\n         query.setParameter(\"realm\", realm.getId());\n         \n         return getRoles(query, realm, first, max);\n     }\n \n     @Override\n-    public Set<RoleModel> getClientRoles(RealmModel realm, ClientModel client, Integer first, Integer max) {\n+    public Stream<RoleModel> getClientRolesStream(RealmModel realm, ClientModel client, Integer first, Integer max) {\n         TypedQuery<RoleEntity> query = em.createNamedQuery(\"getClientRoles\", RoleEntity.class);\n         query.setParameter(\"client\", client.getId());\n         \n         return getRoles(query, realm, first, max);\n     }\n     \n-    protected Set<RoleModel> getRoles(TypedQuery<RoleEntity> query, RealmModel realm, Integer first, Integer max) {\n+    protected Stream<RoleModel> getRoles(TypedQuery<RoleEntity> query, RealmModel realm, Integer first, Integer max) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ded3ef8a5a5953a710780e11ffa985c02771de1f"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4ODc3ODcw", "url": "https://github.com/keycloak/keycloak/pull/7263#pullrequestreview-448877870", "createdAt": "2020-07-15T11:50:35Z", "commit": {"oid": "ded3ef8a5a5953a710780e11ffa985c02771de1f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTo1MDozNVrOGx6jLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTo1MDozNVrOGx6jLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5MjY4NA==", "bodyText": "StackOverflowException", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r454992684", "createdAt": "2020-07-15T11:50:35Z", "author": {"login": "hmlnarik"}, "path": "server-spi/src/main/java/org/keycloak/models/ClientProvider.java", "diffHunk": "@@ -41,9 +57,23 @@\n \n     RoleModel getClientRole(RealmModel realm, ClientModel client, String name);\n \n-    Set<RoleModel> getClientRoles(RealmModel realm, ClientModel client);\n+    @Deprecated\n+    default Set<RoleModel> getClientRoles(RealmModel realm, ClientModel client) {\n+        return getClientRolesStream(realm, client).collect(Collectors.toSet());\n+    }\n+\n+    default Stream<RoleModel> getClientRolesStream(RealmModel realm, ClientModel client) {\n+        return getClientRolesStream(realm, client);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ded3ef8a5a5953a710780e11ffa985c02771de1f"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4ODc4MTM2", "url": "https://github.com/keycloak/keycloak/pull/7263#pullrequestreview-448878136", "createdAt": "2020-07-15T11:50:47Z", "commit": {"oid": "ded3ef8a5a5953a710780e11ffa985c02771de1f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTo1MDo0OFrOGx6kGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTo1MDo0OFrOGx6kGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5MjkyMQ==", "bodyText": "StackOverflowException", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r454992921", "createdAt": "2020-07-15T11:50:48Z", "author": {"login": "hmlnarik"}, "path": "server-spi/src/main/java/org/keycloak/models/ClientProvider.java", "diffHunk": "@@ -41,9 +57,23 @@\n \n     RoleModel getClientRole(RealmModel realm, ClientModel client, String name);\n \n-    Set<RoleModel> getClientRoles(RealmModel realm, ClientModel client);\n+    @Deprecated\n+    default Set<RoleModel> getClientRoles(RealmModel realm, ClientModel client) {\n+        return getClientRolesStream(realm, client).collect(Collectors.toSet());\n+    }\n+\n+    default Stream<RoleModel> getClientRolesStream(RealmModel realm, ClientModel client) {\n+        return getClientRolesStream(realm, client);\n+    }\n+\n+    @Deprecated\n+    default List<ClientModel> getAlwaysDisplayInConsoleClients(RealmModel realm) {\n+        return getAlwaysDisplayInConsoleClientsStream(realm).collect(Collectors.toList());\n+    }\n \n-    List<ClientModel> getAlwaysDisplayInConsoleClients(RealmModel realm);\n+    default Stream<ClientModel> getAlwaysDisplayInConsoleClientsStream(RealmModel realm) {\n+        return getAlwaysDisplayInConsoleClientsStream(realm);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ded3ef8a5a5953a710780e11ffa985c02771de1f"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4ODg0ODI2", "url": "https://github.com/keycloak/keycloak/pull/7263#pullrequestreview-448884826", "createdAt": "2020-07-15T12:01:37Z", "commit": {"oid": "ded3ef8a5a5953a710780e11ffa985c02771de1f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjowMTozN1rOGx65cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjowMTozN1rOGx65cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5ODM4Ng==", "bodyText": "Could be perhaps like this:\nStream<ClientModel> local = session.clientLocalStorage().searchClientsByClientIdStream(clientId,  firstResult, maxResults, realm);\nStream<ClientModel> ext = getEnabledStorageProviders(session, realm, ClientLookupProvider.class).stream()\n    .map(p -> p.searchClientsByClientIdStream(clientId,  firstResult, maxResults, realm))\n    .flatMap(Function.identity());\nreturn Stream.concat(local, ext);", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r454998386", "createdAt": "2020-07-15T12:01:37Z", "author": {"login": "hmlnarik"}, "path": "services/src/main/java/org/keycloak/storage/ClientStorageManager.java", "diffHunk": "@@ -151,14 +153,18 @@ public ClientModel getClientByClientId(String clientId, RealmModel realm) {\n     }\n \n     @Override\n-    public List<ClientModel> searchClientsByClientId(String clientId, Integer firstResult, Integer maxResults, RealmModel realm) {\n-        List<ClientModel> clients = session.clientLocalStorage().searchClientsByClientId(clientId,  firstResult, maxResults, realm);\n-        if (clients != null) {\n-            return clients;\n+    public Stream<ClientModel> searchClientsByClientIdStream(String clientId, Integer firstResult, Integer maxResults, RealmModel realm) {\n+        Stream<ClientModel> clients = session.clientLocalStorage().searchClientsByClientIdStream(clientId,  firstResult, maxResults, realm);\n+        Iterator<ClientModel> iterator = clients.iterator();\n+        if (iterator.hasNext()) {\n+            return StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator, 0), false);\n         }\n         for (ClientLookupProvider provider : getEnabledStorageProviders(session, realm, ClientLookupProvider.class)) {\n-            clients = provider.searchClientsByClientId(clientId, firstResult, maxResults, realm);\n-            if (clients != null) return clients;\n+            clients = provider.searchClientsByClientIdStream(clientId, firstResult, maxResults, realm);\n+            iterator = clients.iterator();\n+            if (iterator.hasNext()) {\n+                return StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator, 0), false);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ded3ef8a5a5953a710780e11ffa985c02771de1f"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4OTM4NDUx", "url": "https://github.com/keycloak/keycloak/pull/7263#pullrequestreview-448938451", "createdAt": "2020-07-15T13:13:05Z", "commit": {"oid": "ded3ef8a5a5953a710780e11ffa985c02771de1f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzoxMzowNVrOGx9cRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzoxMzowNVrOGx9cRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0MDA3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Set<RoleModel> model = getRealmDelegate().getRealmRolesStream(realm).collect(Collectors.toSet());\n          \n          \n            \n                        if (model == null) return null;\n          \n          \n            \n                        Set<String> ids = new HashSet<>();\n          \n          \n            \n                        for (RoleModel role : model) ids.add(role.getId());\n          \n          \n            \n                        query = new RoleListQuery(loaded, cacheKey, realm, ids);\n          \n          \n            \n                        logger.tracev(\"adding realm roles cache miss: realm {0} key {1}\", realm.getName(), cacheKey);\n          \n          \n            \n                        cache.addRevisioned(query, startupRevision);\n          \n          \n            \n                        return model;\n          \n          \n            \n                        return model.stream();\n          \n          \n            \n                        Set<RoleModel> model = getRealmDelegate().getRealmRoles(realm);\n          \n          \n            \n                        if (model == null) return null;\n          \n          \n            \n                        Set<String> ids = model.stream().map(RoleModel::getId).collect(Collectors.toSet());\n          \n          \n            \n                        query = new RoleListQuery(loaded, cacheKey, realm, ids);\n          \n          \n            \n                        logger.tracev(\"adding realm roles cache miss: realm {0} key {1}\", realm.getName(), cacheKey);\n          \n          \n            \n                        cache.addRevisioned(query, startupRevision);\n          \n          \n            \n                        return model.stream();", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r455040070", "createdAt": "2020-07-15T13:13:05Z", "author": {"login": "hmlnarik"}, "path": "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java", "diffHunk": "@@ -612,33 +614,33 @@ public RoleModel addRealmRole(RealmModel realm, String id, String name) {\n \n         if (query == null) {\n             Long loaded = cache.getCurrentRevision(cacheKey);\n-            Set<RoleModel> model = getRealmDelegate().getRealmRoles(realm);\n+            Set<RoleModel> model = getRealmDelegate().getRealmRolesStream(realm).collect(Collectors.toSet());\n             if (model == null) return null;\n             Set<String> ids = new HashSet<>();\n             for (RoleModel role : model) ids.add(role.getId());\n             query = new RoleListQuery(loaded, cacheKey, realm, ids);\n             logger.tracev(\"adding realm roles cache miss: realm {0} key {1}\", realm.getName(), cacheKey);\n             cache.addRevisioned(query, startupRevision);\n-            return model;\n+            return model.stream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ded3ef8a5a5953a710780e11ffa985c02771de1f"}, "originalPosition": 61}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ded3ef8a5a5953a710780e11ffa985c02771de1f", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/ded3ef8a5a5953a710780e11ffa985c02771de1f", "committedDate": "2020-07-14T11:03:45Z", "message": "KEYCLOAK-14220 Complement methods for accessing clients with Stream variants"}, "afterCommit": {"oid": "7de0e66f85338e39139fe0cc8e76a3dc1d99a5a8", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/7de0e66f85338e39139fe0cc8e76a3dc1d99a5a8", "committedDate": "2020-07-21T09:47:26Z", "message": "KEYCLOAK-14220 Complement methods for accessing clients with Stream variants"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7de0e66f85338e39139fe0cc8e76a3dc1d99a5a8", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/7de0e66f85338e39139fe0cc8e76a3dc1d99a5a8", "committedDate": "2020-07-21T09:47:26Z", "message": "KEYCLOAK-14220 Complement methods for accessing clients with Stream variants"}, "afterCommit": {"oid": "cb2e2e930122c511f80cece3eeb79c518a0a308b", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/cb2e2e930122c511f80cece3eeb79c518a0a308b", "committedDate": "2020-07-22T13:09:13Z", "message": "KEYCLOAK-14220 Complement methods for accessing clients with Stream variants"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cb2e2e930122c511f80cece3eeb79c518a0a308b", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/cb2e2e930122c511f80cece3eeb79c518a0a308b", "committedDate": "2020-07-22T13:09:13Z", "message": "KEYCLOAK-14220 Complement methods for accessing clients with Stream variants"}, "afterCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/40ea3e6b7cf3637006813ad9712be177890f2687", "committedDate": "2020-07-22T15:57:31Z", "message": "KEYCLOAK-14220 Complement methods for accessing clients with Stream variants"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MDE1Mzcx", "url": "https://github.com/keycloak/keycloak/pull/7263#pullrequestreview-454015371", "createdAt": "2020-07-23T10:41:50Z", "commit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMDo0MTo1MFrOG2FLPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMDo0MTo1MFrOG2FLPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2MTA4NA==", "bodyText": "Should also be methods for accessing roles within scope of this work?", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459361084", "createdAt": "2020-07-23T10:41:50Z", "author": {"login": "vramik"}, "path": "server-spi/src/main/java/org/keycloak/models/RealmProvider.java", "diffHunk": "@@ -81,16 +83,42 @@ default GroupModel createGroup(RealmModel realm, String name, GroupModel toParen\n \n     RoleModel getRealmRole(RealmModel realm, String name);\n \n-    Set<RoleModel> getRealmRoles(RealmModel realm);\n-    \n-    Set<RoleModel> getRealmRoles(RealmModel realm, Integer first, Integer max);\n-    \n-    Set<RoleModel> getClientRoles(RealmModel realm, ClientModel client, Integer first, Integer max);\n-    \n-    Set<RoleModel> searchForClientRoles(RealmModel realm, ClientModel client, String search, Integer first,\n-            Integer max);\n-    \n-    Set<RoleModel> searchForRoles(RealmModel realm, String search, Integer first, Integer max);\n+    @Deprecated\n+    default Set<RoleModel> getRealmRoles(RealmModel realm) {\n+        return getRealmRolesStream(realm).collect(Collectors.toSet());\n+    }\n+\n+    Stream<RoleModel> getRealmRolesStream(RealmModel realm);\n+\n+    @Deprecated\n+    default Set<RoleModel> getRealmRoles(RealmModel realm, Integer first, Integer max) {\n+        return getRealmRolesStream(realm, first, max).collect(Collectors.toSet());\n+    }\n+\n+    Stream<RoleModel> getRealmRolesStream(RealmModel realm, Integer first, Integer max);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MDY3MTIw", "url": "https://github.com/keycloak/keycloak/pull/7263#pullrequestreview-454067120", "createdAt": "2020-07-23T12:09:48Z", "commit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMjowOTo0OFrOG2HoBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMjowOTo0OFrOG2HoBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQwMTIyMA==", "bodyText": "These calls should be time-bound.", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459401220", "createdAt": "2020-07-23T12:09:48Z", "author": {"login": "hmlnarik"}, "path": "services/src/main/java/org/keycloak/storage/ClientStorageManager.java", "diffHunk": "@@ -148,16 +149,11 @@ public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n     }\n \n     @Override\n-    public List<ClientModel> searchClientsByClientId(RealmModel realm, String clientId, Integer firstResult, Integer maxResults) {\n-        List<ClientModel> clients = session.clientLocalStorage().searchClientsByClientId(realm, clientId,  firstResult, maxResults);\n-        if (clients != null) {\n-            return clients;\n-        }\n-        for (ClientLookupProvider provider : getEnabledStorageProviders(session, realm, ClientLookupProvider.class)) {\n-            clients = provider.searchClientsByClientId(realm, clientId, firstResult, maxResults);\n-            if (clients != null) return clients;\n-        }\n-        return null;\n+    public Stream<ClientModel> searchClientsByClientIdStream(RealmModel realm, String clientId, Integer firstResult, Integer maxResults) {\n+        Stream<ClientModel> local = session.clientLocalStorage().searchClientsByClientIdStream(realm, clientId,  firstResult, maxResults);\n+        Stream<ClientModel> ext = getEnabledStorageProviders(session, realm, ClientLookupProvider.class).stream()\n+                .flatMap(p -> p.searchClientsByClientIdStream(realm, clientId,  firstResult, maxResults));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NTE2Mjcz", "url": "https://github.com/keycloak/keycloak/pull/7263#pullrequestreview-454516273", "createdAt": "2020-07-23T21:43:25Z", "commit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTo0MzoyNVrOG2cm0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjozMjowN1rOG2dyyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0NDk3Nw==", "bodyText": "getRealmRoles(realm) is now deprecated so I guess we shouldn't use it, right?", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459744977", "createdAt": "2020-07-23T21:43:25Z", "author": {"login": "vramik"}, "path": "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java", "diffHunk": "@@ -620,31 +622,30 @@ public RoleModel addRealmRole(RealmModel realm, String id, String name) {\n             Long loaded = cache.getCurrentRevision(cacheKey);\n             Set<RoleModel> model = getRealmDelegate().getRealmRoles(realm);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0NjU3NA==", "bodyText": "the same here, getClientRoles(realm, client, null, null) is now deprecated.", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459746574", "createdAt": "2020-07-23T21:46:51Z", "author": {"login": "vramik"}, "path": "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java", "diffHunk": "@@ -654,46 +655,45 @@ public RoleModel addRealmRole(RealmModel realm, String id, String name) {\n \n         if (query == null) {\n             Long loaded = cache.getCurrentRevision(cacheKey);\n-            Set<RoleModel> model = getRealmDelegate().getClientRoles(realm, client);\n+            Set<RoleModel> model = getRealmDelegate().getClientRoles(realm, client, null, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0OTExMg==", "bodyText": "Why is new method getClientsStream added here in RealmProvider? I think we should leave original methods here as deprecated and add the new 'Stream' ones into ClientProvider.", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459749112", "createdAt": "2020-07-23T21:53:02Z", "author": {"login": "vramik"}, "path": "server-spi/src/main/java/org/keycloak/models/RealmProvider.java", "diffHunk": "@@ -147,14 +177,14 @@ default ClientModel addClient(RealmModel realm, String clientId) {\n     /**\n      * @deprecated Use the corresponding method from {@link ClientProvider}. */\n     @Override\n-    default List<ClientModel> getClients(RealmModel realm) {\n-        return this.getClients(realm, null, null);\n+    default Stream<ClientModel> getClientsStream(RealmModel realm) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0OTQzNQ==", "bodyText": "dtto", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459749435", "createdAt": "2020-07-23T21:53:45Z", "author": {"login": "vramik"}, "path": "server-spi/src/main/java/org/keycloak/models/RealmProvider.java", "diffHunk": "@@ -147,14 +177,14 @@ default ClientModel addClient(RealmModel realm, String clientId) {\n     /**\n      * @deprecated Use the corresponding method from {@link ClientProvider}. */\n     @Override\n-    default List<ClientModel> getClients(RealmModel realm) {\n-        return this.getClients(realm, null, null);\n+    default Stream<ClientModel> getClientsStream(RealmModel realm) {\n+        return this.getClientsStream(realm, null, null);\n     }\n \n     /**\n      * @deprecated Use the corresponding method from {@link ClientProvider}. */\n     @Override\n-    public List<ClientModel> getClients(RealmModel realm, Integer firstResult, Integer maxResults);\n+    public Stream<ClientModel> getClientsStream(RealmModel realm, Integer firstResult, Integer maxResults);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0OTUwOQ==", "bodyText": "dtto", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459749509", "createdAt": "2020-07-23T21:53:56Z", "author": {"login": "vramik"}, "path": "server-spi/src/main/java/org/keycloak/models/RealmProvider.java", "diffHunk": "@@ -176,7 +206,7 @@ default ClientModel addClient(RealmModel realm, String clientId) {\n     /**\n      * @deprecated Use the corresponding method from {@link ClientProvider}. */\n     @Override\n-    public List<ClientModel> searchClientsByClientId(RealmModel realm, String clientId, Integer firstResult, Integer maxResults);\n+    public Stream<ClientModel> searchClientsByClientIdStream(RealmModel realm, String clientId, Integer firstResult, Integer maxResults);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0OTU5MQ==", "bodyText": "dtto", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459749591", "createdAt": "2020-07-23T21:54:06Z", "author": {"login": "vramik"}, "path": "server-spi/src/main/java/org/keycloak/models/RealmProvider.java", "diffHunk": "@@ -200,6 +230,6 @@ default ClientModel addClient(RealmModel realm, String clientId) {\n     /**\n      * @deprecated Use the corresponding method from {@link ClientProvider}. */\n     @Override\n-    public List<ClientModel> getAlwaysDisplayInConsoleClients(RealmModel realm);\n+    public Stream<ClientModel> getAlwaysDisplayInConsoleClientsStream(RealmModel realm);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc1MzEwMQ==", "bodyText": "This method is now deprecated but still used across the codebase.", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459753101", "createdAt": "2020-07-23T22:02:18Z", "author": {"login": "vramik"}, "path": "server-spi/src/main/java/org/keycloak/models/RoleContainerModel.java", "diffHunk": "@@ -47,12 +49,27 @@\n \n     boolean removeRole(RoleModel role);\n \n-    Set<RoleModel> getRoles();\n-    \n-    Set<RoleModel> getRoles(Integer firstResult, Integer maxResults);\n+    @Deprecated\n+    default Set<RoleModel> getRoles() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc1MzMxNw==", "bodyText": "the same here", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459753317", "createdAt": "2020-07-23T22:02:51Z", "author": {"login": "vramik"}, "path": "server-spi/src/main/java/org/keycloak/models/RoleContainerModel.java", "diffHunk": "@@ -47,12 +49,27 @@\n \n     boolean removeRole(RoleModel role);\n \n-    Set<RoleModel> getRoles();\n-    \n-    Set<RoleModel> getRoles(Integer firstResult, Integer maxResults);\n+    @Deprecated\n+    default Set<RoleModel> getRoles() {\n+        return getRolesStream().collect(Collectors.toSet());\n+    }\n+\n+    Stream<RoleModel> getRolesStream();\n+\n+    @Deprecated\n+    default Set<RoleModel> getRoles(Integer firstResult, Integer maxResults) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc1MzU0Mg==", "bodyText": "the same here", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459753542", "createdAt": "2020-07-23T22:03:27Z", "author": {"login": "vramik"}, "path": "server-spi/src/main/java/org/keycloak/models/RoleContainerModel.java", "diffHunk": "@@ -47,12 +49,27 @@\n \n     boolean removeRole(RoleModel role);\n \n-    Set<RoleModel> getRoles();\n-    \n-    Set<RoleModel> getRoles(Integer firstResult, Integer maxResults);\n+    @Deprecated\n+    default Set<RoleModel> getRoles() {\n+        return getRolesStream().collect(Collectors.toSet());\n+    }\n+\n+    Stream<RoleModel> getRolesStream();\n+\n+    @Deprecated\n+    default Set<RoleModel> getRoles(Integer firstResult, Integer maxResults) {\n+        return getRolesStream(firstResult, maxResults).collect(Collectors.toSet());\n+    }\n+\n+    Stream<RoleModel> getRolesStream(Integer firstResult, Integer maxResults);\n+\n+    @Deprecated\n+    default Set<RoleModel> searchForRoles(String search, Integer first, Integer max) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc1NzgzMQ==", "bodyText": "Line 164-167: public List<ClientModel> getClients(RealmModel realm) doesn't have to be implemented here, right? It's deprecated and it's used nowhere.", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459757831", "createdAt": "2020-07-23T22:14:20Z", "author": {"login": "vramik"}, "path": "model/map/src/main/java/org/keycloak/models/map/client/MapClientProvider.java", "diffHunk": "@@ -152,7 +152,7 @@ public void unregisterNode(String nodeHost) {\n         return Stream.concat(tx.createdValuesStream(clientStore.keySet()), updatedAndNotRemovedClientsStream);\n     }\n \n-//    @Override\n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2NDQyNQ==", "bodyText": "This method wasn't declared in previous version of Keycloak, so I believe we don't have to deprecate it and we can remove it instead.", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459764425", "createdAt": "2020-07-23T22:32:07Z", "author": {"login": "vramik"}, "path": "server-spi/src/main/java/org/keycloak/storage/client/ClientLookupProvider.java", "diffHunk": "@@ -71,22 +73,38 @@\n      * @param clientId Searched substring of the public client\n      *   identifier ({@code client_id} in OIDC or {@code entityID} in SAML.)\n      * @param firstResult First result to return. Ignored if negative or {@code null}.\n-     * @param maxResults Maximim number of results to return. Ignored if negative or {@code null}.\n-     * @return Model of the client, or {@code null} if no client is found.\n+     * @param maxResults Maximum number of results to return. Ignored if negative or {@code null}.\n+     * @return List of ClientModel or an empty list if no client is found.\n+     * @deprecated Use {@link #searchClientsByClientIdStream(org.keycloak.models.RealmModel, java.lang.String, java.lang.Integer, java.lang.Integer)} instead.\n      */\n-    List<ClientModel> searchClientsByClientId(RealmModel realm, String clientId, Integer firstResult, Integer maxResults);\n+    @Deprecated\n+    default List<ClientModel> searchClientsByClientId(RealmModel realm, String clientId, Integer firstResult, Integer maxResults) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/40ea3e6b7cf3637006813ad9712be177890f2687", "committedDate": "2020-07-22T15:57:31Z", "message": "KEYCLOAK-14220 Complement methods for accessing clients with Stream variants"}, "afterCommit": {"oid": "1ba4c9c574bfd95071e9a3dfc9c5cec9f65e5c01", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/1ba4c9c574bfd95071e9a3dfc9c5cec9f65e5c01", "committedDate": "2020-07-24T05:55:09Z", "message": "KEYCLOAK-14220 Complement methods for accessing clients with Stream variants"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NjUyMzg3", "url": "https://github.com/keycloak/keycloak/pull/7263#pullrequestreview-454652387", "createdAt": "2020-07-24T06:10:39Z", "commit": {"oid": "1ba4c9c574bfd95071e9a3dfc9c5cec9f65e5c01"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoxMDozOVrOG2kI2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoxOTozOVrOG2kRig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2ODM3OA==", "bodyText": "nit: not used", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459868378", "createdAt": "2020-07-24T06:10:39Z", "author": {"login": "vramik"}, "path": "services/src/main/java/org/keycloak/services/DefaultKeycloakSession.java", "diffHunk": "@@ -16,6 +16,7 @@\n  */\n package org.keycloak.services;\n \n+import org.keycloak.Config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ba4c9c574bfd95071e9a3dfc9c5cec9f65e5c01"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MDYwMg==", "bodyText": "We should add a javadoc for the timeout. What it does and in what units it's expected. Not sure where tha javadoc should be, whether in DefaultKeycloakSessionFactory or DefaultKeycloakSession or ClientStorageManager. Maybe  everywhere? :)", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459870602", "createdAt": "2020-07-24T06:19:39Z", "author": {"login": "vramik"}, "path": "services/src/main/java/org/keycloak/services/DefaultKeycloakSessionFactory.java", "diffHunk": "@@ -59,6 +59,8 @@\n     // TODO: Likely should be changed to int and use Time.currentTime() to be compatible with all our \"time\" reps\n     protected long serverStartupTimestamp;\n \n+    private long clientStorageProviderTimeout;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ba4c9c574bfd95071e9a3dfc9c5cec9f65e5c01"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NzYwODgy", "url": "https://github.com/keycloak/keycloak/pull/7263#pullrequestreview-454760882", "createdAt": "2020-07-24T09:48:01Z", "commit": {"oid": "1ba4c9c574bfd95071e9a3dfc9c5cec9f65e5c01"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwOTo0ODowMVrOG2pgdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwOTo0ODowMVrOG2pgdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk1NjM0Mw==", "bodyText": "This method IMO should have also javadoc which describes its behavior, because on the first look it's not so obvious.", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459956343", "createdAt": "2020-07-24T09:48:01Z", "author": {"login": "vramik"}, "path": "services/src/main/java/org/keycloak/storage/ClientStorageManager.java", "diffHunk": "@@ -148,16 +159,22 @@ public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n     }\n \n     @Override\n-    public List<ClientModel> searchClientsByClientId(RealmModel realm, String clientId, Integer firstResult, Integer maxResults) {\n-        List<ClientModel> clients = session.clientLocalStorage().searchClientsByClientId(realm, clientId,  firstResult, maxResults);\n-        if (clients != null) {\n-            return clients;\n-        }\n-        for (ClientLookupProvider provider : getEnabledStorageProviders(session, realm, ClientLookupProvider.class)) {\n-            clients = provider.searchClientsByClientId(realm, clientId, firstResult, maxResults);\n-            if (clients != null) return clients;\n+    public Stream<ClientModel> searchClientsByClientIdStream(RealmModel realm, String clientId, Integer firstResult, Integer maxResults) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ba4c9c574bfd95071e9a3dfc9c5cec9f65e5c01"}, "originalPosition": 54}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ba4c9c574bfd95071e9a3dfc9c5cec9f65e5c01", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/1ba4c9c574bfd95071e9a3dfc9c5cec9f65e5c01", "committedDate": "2020-07-24T05:55:09Z", "message": "KEYCLOAK-14220 Complement methods for accessing clients with Stream variants"}, "afterCommit": {"oid": "3d703b9c15f1450c9bdce7d296379c6bd8420c06", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/3d703b9c15f1450c9bdce7d296379c6bd8420c06", "committedDate": "2020-07-24T11:10:24Z", "message": "KEYCLOAK-14220 Complement methods for accessing clients with Stream variants"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3d703b9c15f1450c9bdce7d296379c6bd8420c06", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/3d703b9c15f1450c9bdce7d296379c6bd8420c06", "committedDate": "2020-07-24T11:10:24Z", "message": "KEYCLOAK-14220 Complement methods for accessing clients with Stream variants"}, "afterCommit": {"oid": "f953d1f6d54d06448e7d09a182d8d1e187fce80d", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/f953d1f6d54d06448e7d09a182d8d1e187fce80d", "committedDate": "2020-07-24T11:22:51Z", "message": "KEYCLOAK-14220 Complement methods for accessing clients with Stream variants"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MTU5NjY2", "url": "https://github.com/keycloak/keycloak/pull/7263#pullrequestreview-455159666", "createdAt": "2020-07-24T20:15:18Z", "commit": {"oid": "f953d1f6d54d06448e7d09a182d8d1e187fce80d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMDoxNToxOVrOG28enw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMDoxNToxOVrOG28enw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI2NzE2Nw==", "bodyText": "nit: copyright missing", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r460267167", "createdAt": "2020-07-24T20:15:19Z", "author": {"login": "vramik"}, "path": "services/src/main/java/org/keycloak/utils/ServicesUtils.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package org.keycloak.utils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f953d1f6d54d06448e7d09a182d8d1e187fce80d"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94b2c97d293459aed9789fbb3268fcc45f388ff3", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/94b2c97d293459aed9789fbb3268fcc45f388ff3", "committedDate": "2020-07-24T20:30:05Z", "message": "KEYCLOAK-14220 Complement methods for accessing clients with Stream variants"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MTY3NTk3", "url": "https://github.com/keycloak/keycloak/pull/7263#pullrequestreview-455167597", "createdAt": "2020-07-24T20:30:16Z", "commit": {"oid": "f953d1f6d54d06448e7d09a182d8d1e187fce80d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f953d1f6d54d06448e7d09a182d8d1e187fce80d", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/f953d1f6d54d06448e7d09a182d8d1e187fce80d", "committedDate": "2020-07-24T11:22:51Z", "message": "KEYCLOAK-14220 Complement methods for accessing clients with Stream variants"}, "afterCommit": {"oid": "94b2c97d293459aed9789fbb3268fcc45f388ff3", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/94b2c97d293459aed9789fbb3268fcc45f388ff3", "committedDate": "2020-07-24T20:30:05Z", "message": "KEYCLOAK-14220 Complement methods for accessing clients with Stream variants"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MTc5NTA3", "url": "https://github.com/keycloak/keycloak/pull/7263#pullrequestreview-455179507", "createdAt": "2020-07-24T20:53:30Z", "commit": {"oid": "94b2c97d293459aed9789fbb3268fcc45f388ff3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1NTg0MTM4", "url": "https://github.com/keycloak/keycloak/pull/7263#pullrequestreview-455584138", "createdAt": "2020-07-27T08:38:30Z", "commit": {"oid": "94b2c97d293459aed9789fbb3268fcc45f388ff3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2850, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}