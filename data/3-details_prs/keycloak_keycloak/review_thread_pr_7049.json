{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0NzAyMzYz", "number": 7049, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzozMjowMVrOD7hpSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMDoxMzo1OVrOD80HdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzQzODE5OnYy", "diffSide": "RIGHT", "path": "util/embedded-ldap/src/main/java/org/keycloak/util/ldap/LDAPEmbeddedServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzozMjowMVrOGT5rVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDo1ODowOFrOGU1yLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyMTEwOQ==", "bodyText": "If I understand correctly, the combination like enableAnonymousAccess==true && enableAccessControl==true is invalid. Will it makes sense to throw the exception if the attempt of such configuration is tried?\nI mean something like:\nif (enableAnonymousAccess && enableAccessControl) {\n    throw new IllegalStateException(\"Illegal to enableAnonymousAccess and enableAccessControl at the same time\");\n}", "url": "https://github.com/keycloak/keycloak/pull/7049#discussion_r423521109", "createdAt": "2020-05-12T07:32:01Z", "author": {"login": "mposolda"}, "path": "util/embedded-ldap/src/main/java/org/keycloak/util/ldap/LDAPEmbeddedServer.java", "diffHunk": "@@ -226,19 +251,52 @@ protected LdapServer createLdapServer() {\n         // Read the transports\n         Transport ldap = new TcpTransport(this.bindHost, this.bindPort, 3, 50);\n         ldapServer.addTransports( ldap );\n-        if (enableSSL) {\n-            Transport ldaps = new TcpTransport(this.bindHost, this.bindLdapsPort, 3, 50);\n-            ldaps.setEnableSSL(true);\n+        if (enableSSL || enableStartTLS) {\n             ldapServer.setKeystoreFile(keystoreFile);\n             ldapServer.setCertificatePassword(certPassword);\n-            ldapServer.addTransports( ldaps );\n+            if (enableSSL) {\n+                Transport ldaps = new TcpTransport(this.bindHost, this.bindLdapsPort, 3, 50);\n+                ldaps.setEnableSSL(true);\n+                ldapServer.addTransports( ldaps );\n+                if (ldaps.isSSLEnabled()) {\n+                    log.info(\"Enabled SSL support on the LDAP server.\");\n+                }\n+            }\n+            if (enableStartTLS) {\n+                try {\n+                    ldapServer.addExtendedOperationHandler(new StartTlsHandler());\n+                } catch (Exception e) {\n+                    throw new IllegalStateException(\"Cannot add the StartTLS extension handler: \", e);\n+                }\n+                for (ExtendedOperationHandler eoh : ldapServer.getExtendedOperationHandlers()) {\n+                    if (eoh.getOid().equals(StartTlsHandler.EXTENSION_OID)) {\n+                        log.info(\"Enabled StartTLS support on the LDAP server.\");\n+                        break;\n+                    }\n+                }\n+            }\n         }\n \n         // Associate the DS to this LdapServer\n         ldapServer.setDirectoryService( directoryService );\n \n-        // Propagate the anonymous flag to the DS\n-        directoryService.setAllowAnonymousAccess(false);\n+        if (enableAnonymousAccess && !enableAccessControl) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "023458e5dea6129093bae347f3ef3ddac6fc2bc9"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUwNTkwMQ==", "bodyText": "AFAIU it's not completely forbidden combination (per the Apache DS upstream docs), but once the access control subsystem is enabled, \"full\" anonymous binds / access might not work even if anonymous access is enabled (only root DSE would be allowed to be accessed directly, the child ones not, here the access control setting would apply).\nBut agree it will be better not to allow this combination (both access control & anonymous binds enabled @ the same time) to simplify the configuration for the test runs. This way anonymous binds are either fully enabled or disabled. There's nothing in between (the test writer won't need to find out / solve the nuisances between full & partial anonymous access allowed).\nFixed in 2nd commit", "url": "https://github.com/keycloak/keycloak/pull/7049#discussion_r424505901", "createdAt": "2020-05-13T14:58:08Z", "author": {"login": "iankko"}, "path": "util/embedded-ldap/src/main/java/org/keycloak/util/ldap/LDAPEmbeddedServer.java", "diffHunk": "@@ -226,19 +251,52 @@ protected LdapServer createLdapServer() {\n         // Read the transports\n         Transport ldap = new TcpTransport(this.bindHost, this.bindPort, 3, 50);\n         ldapServer.addTransports( ldap );\n-        if (enableSSL) {\n-            Transport ldaps = new TcpTransport(this.bindHost, this.bindLdapsPort, 3, 50);\n-            ldaps.setEnableSSL(true);\n+        if (enableSSL || enableStartTLS) {\n             ldapServer.setKeystoreFile(keystoreFile);\n             ldapServer.setCertificatePassword(certPassword);\n-            ldapServer.addTransports( ldaps );\n+            if (enableSSL) {\n+                Transport ldaps = new TcpTransport(this.bindHost, this.bindLdapsPort, 3, 50);\n+                ldaps.setEnableSSL(true);\n+                ldapServer.addTransports( ldaps );\n+                if (ldaps.isSSLEnabled()) {\n+                    log.info(\"Enabled SSL support on the LDAP server.\");\n+                }\n+            }\n+            if (enableStartTLS) {\n+                try {\n+                    ldapServer.addExtendedOperationHandler(new StartTlsHandler());\n+                } catch (Exception e) {\n+                    throw new IllegalStateException(\"Cannot add the StartTLS extension handler: \", e);\n+                }\n+                for (ExtendedOperationHandler eoh : ldapServer.getExtendedOperationHandlers()) {\n+                    if (eoh.getOid().equals(StartTlsHandler.EXTENSION_OID)) {\n+                        log.info(\"Enabled StartTLS support on the LDAP server.\");\n+                        break;\n+                    }\n+                }\n+            }\n         }\n \n         // Associate the DS to this LdapServer\n         ldapServer.setDirectoryService( directoryService );\n \n-        // Propagate the anonymous flag to the DS\n-        directoryService.setAllowAnonymousAccess(false);\n+        if (enableAnonymousAccess && !enableAccessControl) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyMTEwOQ=="}, "originalCommit": {"oid": "023458e5dea6129093bae347f3ef3ddac6fc2bc9"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODEyNzcwOnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/federation/ldap/LDAPUserLoginTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMDozNjoxMlrOGUAhZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDo1ODozMFrOGU1zXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYzMzI1NQ==", "bodyText": "nitpick: Will be slightly better to use constant Errors.USER_NOT_FOUND", "url": "https://github.com/keycloak/keycloak/pull/7049#discussion_r423633255", "createdAt": "2020-05-12T10:36:12Z", "author": {"login": "mposolda"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/federation/ldap/LDAPUserLoginTest.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.keycloak.testsuite.federation.ldap;\n+\n+import org.jboss.arquillian.graphene.page.Page;\n+import org.junit.FixMethodOrder;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExternalResource;\n+import org.junit.runners.MethodSorters;\n+import org.keycloak.events.EventType;\n+import org.keycloak.models.LDAPConstants;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.OAuth2Constants;\n+import org.keycloak.representations.idm.UserRepresentation;\n+import org.keycloak.storage.ldap.idm.model.LDAPObject;\n+import org.keycloak.testsuite.arquillian.annotation.EnableVault;\n+import org.keycloak.testsuite.Assert;\n+import org.keycloak.testsuite.AssertEvents;\n+import org.keycloak.testsuite.pages.AppPage;\n+import org.keycloak.testsuite.pages.LoginPage;\n+import org.keycloak.testsuite.util.LDAPRule;\n+import org.keycloak.testsuite.util.LDAPRule.LDAPConnectionParameters;\n+import org.keycloak.testsuite.util.LDAPTestUtils;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test user logins utilizing various LDAP authentication methods and different LDAP connection encryption mechanisms.\n+ *\n+ * @author <a href=\"mailto:jlieskov@redhat.com\">Jan Lieskovsky</a>\n+ */\n+@EnableVault\n+@FixMethodOrder(MethodSorters.NAME_ASCENDING)\n+public class LDAPUserLoginTest extends AbstractLDAPTest {\n+\n+    @Rule\n+    // Start an embedded LDAP server with configuration derived from test annotations before each test\n+    public LDAPRule ldapRule = new LDAPRule();\n+\n+    @Override\n+    protected LDAPRule getLDAPRule() {\n+        return ldapRule;\n+    }\n+\n+    @Rule\n+    // Recreate a new LDAP provider based on test annotations before each test\n+    public ExternalResource ldapProviderRule = new ExternalResource() {\n+\n+        @Override\n+        protected void after() {\n+            // Delete the previously imported realm(s) after each test. This forces\n+            // a new LDAP provider with custom configuration (derived from the test\n+            // annotations) to be created each time the next test is run\n+            if (getTestingClient() != null) {\n+                getTestContext().getTestRealmReps().clear();\n+            }\n+        }\n+\n+    };\n+\n+    @Rule\n+    public AssertEvents events = new AssertEvents(this);\n+\n+    protected static final Map<String, String> DEFAULT_TEST_USERS = new HashMap<String, String>();\n+    static {\n+        DEFAULT_TEST_USERS.put(\"EMPTY_USER_PASSWORD\", new String());\n+        DEFAULT_TEST_USERS.put(\"INVALID_USER_NAME\", \"userUnknown\");\n+        DEFAULT_TEST_USERS.put(\"INVALID_USER_EMAIL\", \"unknown@keycloak.org\");\n+        DEFAULT_TEST_USERS.put(\"INVALID_USER_PASSWORD\", \"1nval!D\");\n+        DEFAULT_TEST_USERS.put(\"VALID_USER_EMAIL\", \"jdoe@keycloak.org\");\n+        DEFAULT_TEST_USERS.put(\"VALID_USER_NAME\", \"jdoe\");\n+        DEFAULT_TEST_USERS.put(\"VALID_USER_FIRST_NAME\", \"John\");\n+        DEFAULT_TEST_USERS.put(\"VALID_USER_LAST_NAME\", \"Doe\");\n+        DEFAULT_TEST_USERS.put(\"VALID_USER_PASSWORD\", \"P@ssw0rd!\");\n+        DEFAULT_TEST_USERS.put(\"VALID_USER_POSTAL_CODE\", \"12345\");\n+        DEFAULT_TEST_USERS.put(\"VALID_USER_STREET\", \"1th Avenue\");\n+    }\n+\n+    @Override\n+    protected void afterImportTestRealm() {\n+        getTestingClient().server().run(session -> {\n+            LDAPTestContext ctx = LDAPTestContext.init(session);\n+            RealmModel appRealm = ctx.getRealm();\n+\n+            // Delete all LDAP users\n+            LDAPTestUtils.removeAllLDAPUsers(ctx.getLdapProvider(), appRealm);\n+            // Add some new LDAP users for testing\n+            LDAPObject john = LDAPTestUtils.addLDAPUser\n+            (\n+                ctx.getLdapProvider(),\n+                appRealm,\n+                DEFAULT_TEST_USERS.get(\"VALID_USER_NAME\"),\n+                DEFAULT_TEST_USERS.get(\"VALID_USER_FIRST_NAME\"),\n+                DEFAULT_TEST_USERS.get(\"VALID_USER_LAST_NAME\"),\n+                DEFAULT_TEST_USERS.get(\"VALID_USER_EMAIL\"),\n+                DEFAULT_TEST_USERS.get(\"VALID_USER_STREET\"),\n+                DEFAULT_TEST_USERS.get(\"VALID_USER_POSTAL_CODE\")\n+            );\n+            LDAPTestUtils.updateLDAPPassword(ctx.getLdapProvider(), john, DEFAULT_TEST_USERS.get(\"VALID_USER_PASSWORD\"));\n+        });\n+    }\n+\n+    @Page\n+    protected AppPage appPage;\n+\n+    @Page\n+    protected LoginPage loginPage;\n+\n+    // Helper methods\n+    private void verifyLoginSucceededAndLogout(String username, String password) {\n+        loginPage.open();\n+        loginPage.login(username, password);\n+        appPage.assertCurrent();\n+        Assert.assertEquals(AppPage.RequestType.AUTH_RESPONSE, appPage.getRequestType());\n+        Assert.assertNotNull(oauth.getCurrentQuery().get(OAuth2Constants.CODE));\n+        appPage.logout();\n+    }\n+\n+    private void verifyLoginFailed(String username, String password) {\n+        // Clear the events queue before the actual test to catch all errors properly\n+        events.clear();\n+        // Run the test actions\n+        loginPage.open();\n+        loginPage.login(username, password);\n+        Assert.assertEquals(\"Invalid username or password.\", loginPage.getError());\n+\n+        if (username.equals(DEFAULT_TEST_USERS.get(\"INVALID_USER_EMAIL\")) || username.equals(DEFAULT_TEST_USERS.get(\"INVALID_USER_NAME\"))) {\n+\n+            events.expect(EventType.LOGIN_ERROR).user((String) null).error(\"user_not_found\").assertEvent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "023458e5dea6129093bae347f3ef3ddac6fc2bc9"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUwNjIwNg==", "bodyText": "Fixed in 2nd commit", "url": "https://github.com/keycloak/keycloak/pull/7049#discussion_r424506206", "createdAt": "2020-05-13T14:58:30Z", "author": {"login": "iankko"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/federation/ldap/LDAPUserLoginTest.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.keycloak.testsuite.federation.ldap;\n+\n+import org.jboss.arquillian.graphene.page.Page;\n+import org.junit.FixMethodOrder;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExternalResource;\n+import org.junit.runners.MethodSorters;\n+import org.keycloak.events.EventType;\n+import org.keycloak.models.LDAPConstants;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.OAuth2Constants;\n+import org.keycloak.representations.idm.UserRepresentation;\n+import org.keycloak.storage.ldap.idm.model.LDAPObject;\n+import org.keycloak.testsuite.arquillian.annotation.EnableVault;\n+import org.keycloak.testsuite.Assert;\n+import org.keycloak.testsuite.AssertEvents;\n+import org.keycloak.testsuite.pages.AppPage;\n+import org.keycloak.testsuite.pages.LoginPage;\n+import org.keycloak.testsuite.util.LDAPRule;\n+import org.keycloak.testsuite.util.LDAPRule.LDAPConnectionParameters;\n+import org.keycloak.testsuite.util.LDAPTestUtils;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test user logins utilizing various LDAP authentication methods and different LDAP connection encryption mechanisms.\n+ *\n+ * @author <a href=\"mailto:jlieskov@redhat.com\">Jan Lieskovsky</a>\n+ */\n+@EnableVault\n+@FixMethodOrder(MethodSorters.NAME_ASCENDING)\n+public class LDAPUserLoginTest extends AbstractLDAPTest {\n+\n+    @Rule\n+    // Start an embedded LDAP server with configuration derived from test annotations before each test\n+    public LDAPRule ldapRule = new LDAPRule();\n+\n+    @Override\n+    protected LDAPRule getLDAPRule() {\n+        return ldapRule;\n+    }\n+\n+    @Rule\n+    // Recreate a new LDAP provider based on test annotations before each test\n+    public ExternalResource ldapProviderRule = new ExternalResource() {\n+\n+        @Override\n+        protected void after() {\n+            // Delete the previously imported realm(s) after each test. This forces\n+            // a new LDAP provider with custom configuration (derived from the test\n+            // annotations) to be created each time the next test is run\n+            if (getTestingClient() != null) {\n+                getTestContext().getTestRealmReps().clear();\n+            }\n+        }\n+\n+    };\n+\n+    @Rule\n+    public AssertEvents events = new AssertEvents(this);\n+\n+    protected static final Map<String, String> DEFAULT_TEST_USERS = new HashMap<String, String>();\n+    static {\n+        DEFAULT_TEST_USERS.put(\"EMPTY_USER_PASSWORD\", new String());\n+        DEFAULT_TEST_USERS.put(\"INVALID_USER_NAME\", \"userUnknown\");\n+        DEFAULT_TEST_USERS.put(\"INVALID_USER_EMAIL\", \"unknown@keycloak.org\");\n+        DEFAULT_TEST_USERS.put(\"INVALID_USER_PASSWORD\", \"1nval!D\");\n+        DEFAULT_TEST_USERS.put(\"VALID_USER_EMAIL\", \"jdoe@keycloak.org\");\n+        DEFAULT_TEST_USERS.put(\"VALID_USER_NAME\", \"jdoe\");\n+        DEFAULT_TEST_USERS.put(\"VALID_USER_FIRST_NAME\", \"John\");\n+        DEFAULT_TEST_USERS.put(\"VALID_USER_LAST_NAME\", \"Doe\");\n+        DEFAULT_TEST_USERS.put(\"VALID_USER_PASSWORD\", \"P@ssw0rd!\");\n+        DEFAULT_TEST_USERS.put(\"VALID_USER_POSTAL_CODE\", \"12345\");\n+        DEFAULT_TEST_USERS.put(\"VALID_USER_STREET\", \"1th Avenue\");\n+    }\n+\n+    @Override\n+    protected void afterImportTestRealm() {\n+        getTestingClient().server().run(session -> {\n+            LDAPTestContext ctx = LDAPTestContext.init(session);\n+            RealmModel appRealm = ctx.getRealm();\n+\n+            // Delete all LDAP users\n+            LDAPTestUtils.removeAllLDAPUsers(ctx.getLdapProvider(), appRealm);\n+            // Add some new LDAP users for testing\n+            LDAPObject john = LDAPTestUtils.addLDAPUser\n+            (\n+                ctx.getLdapProvider(),\n+                appRealm,\n+                DEFAULT_TEST_USERS.get(\"VALID_USER_NAME\"),\n+                DEFAULT_TEST_USERS.get(\"VALID_USER_FIRST_NAME\"),\n+                DEFAULT_TEST_USERS.get(\"VALID_USER_LAST_NAME\"),\n+                DEFAULT_TEST_USERS.get(\"VALID_USER_EMAIL\"),\n+                DEFAULT_TEST_USERS.get(\"VALID_USER_STREET\"),\n+                DEFAULT_TEST_USERS.get(\"VALID_USER_POSTAL_CODE\")\n+            );\n+            LDAPTestUtils.updateLDAPPassword(ctx.getLdapProvider(), john, DEFAULT_TEST_USERS.get(\"VALID_USER_PASSWORD\"));\n+        });\n+    }\n+\n+    @Page\n+    protected AppPage appPage;\n+\n+    @Page\n+    protected LoginPage loginPage;\n+\n+    // Helper methods\n+    private void verifyLoginSucceededAndLogout(String username, String password) {\n+        loginPage.open();\n+        loginPage.login(username, password);\n+        appPage.assertCurrent();\n+        Assert.assertEquals(AppPage.RequestType.AUTH_RESPONSE, appPage.getRequestType());\n+        Assert.assertNotNull(oauth.getCurrentQuery().get(OAuth2Constants.CODE));\n+        appPage.logout();\n+    }\n+\n+    private void verifyLoginFailed(String username, String password) {\n+        // Clear the events queue before the actual test to catch all errors properly\n+        events.clear();\n+        // Run the test actions\n+        loginPage.open();\n+        loginPage.login(username, password);\n+        Assert.assertEquals(\"Invalid username or password.\", loginPage.getError());\n+\n+        if (username.equals(DEFAULT_TEST_USERS.get(\"INVALID_USER_EMAIL\")) || username.equals(DEFAULT_TEST_USERS.get(\"INVALID_USER_NAME\"))) {\n+\n+            events.expect(EventType.LOGIN_ERROR).user((String) null).error(\"user_not_found\").assertEvent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYzMzI1NQ=="}, "originalCommit": {"oid": "023458e5dea6129093bae347f3ef3ddac6fc2bc9"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODEzMDQ5OnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/federation/ldap/LDAPUserLoginTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMDozNzowMVrOGUAjIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDo1ODo0MlrOGU10BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYzMzY5OA==", "bodyText": "nitpick: Will be slightly better to use constant Errors.INVALID_USER_CREDENTIALS", "url": "https://github.com/keycloak/keycloak/pull/7049#discussion_r423633698", "createdAt": "2020-05-12T10:37:01Z", "author": {"login": "mposolda"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/federation/ldap/LDAPUserLoginTest.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.keycloak.testsuite.federation.ldap;\n+\n+import org.jboss.arquillian.graphene.page.Page;\n+import org.junit.FixMethodOrder;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExternalResource;\n+import org.junit.runners.MethodSorters;\n+import org.keycloak.events.EventType;\n+import org.keycloak.models.LDAPConstants;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.OAuth2Constants;\n+import org.keycloak.representations.idm.UserRepresentation;\n+import org.keycloak.storage.ldap.idm.model.LDAPObject;\n+import org.keycloak.testsuite.arquillian.annotation.EnableVault;\n+import org.keycloak.testsuite.Assert;\n+import org.keycloak.testsuite.AssertEvents;\n+import org.keycloak.testsuite.pages.AppPage;\n+import org.keycloak.testsuite.pages.LoginPage;\n+import org.keycloak.testsuite.util.LDAPRule;\n+import org.keycloak.testsuite.util.LDAPRule.LDAPConnectionParameters;\n+import org.keycloak.testsuite.util.LDAPTestUtils;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test user logins utilizing various LDAP authentication methods and different LDAP connection encryption mechanisms.\n+ *\n+ * @author <a href=\"mailto:jlieskov@redhat.com\">Jan Lieskovsky</a>\n+ */\n+@EnableVault\n+@FixMethodOrder(MethodSorters.NAME_ASCENDING)\n+public class LDAPUserLoginTest extends AbstractLDAPTest {\n+\n+    @Rule\n+    // Start an embedded LDAP server with configuration derived from test annotations before each test\n+    public LDAPRule ldapRule = new LDAPRule();\n+\n+    @Override\n+    protected LDAPRule getLDAPRule() {\n+        return ldapRule;\n+    }\n+\n+    @Rule\n+    // Recreate a new LDAP provider based on test annotations before each test\n+    public ExternalResource ldapProviderRule = new ExternalResource() {\n+\n+        @Override\n+        protected void after() {\n+            // Delete the previously imported realm(s) after each test. This forces\n+            // a new LDAP provider with custom configuration (derived from the test\n+            // annotations) to be created each time the next test is run\n+            if (getTestingClient() != null) {\n+                getTestContext().getTestRealmReps().clear();\n+            }\n+        }\n+\n+    };\n+\n+    @Rule\n+    public AssertEvents events = new AssertEvents(this);\n+\n+    protected static final Map<String, String> DEFAULT_TEST_USERS = new HashMap<String, String>();\n+    static {\n+        DEFAULT_TEST_USERS.put(\"EMPTY_USER_PASSWORD\", new String());\n+        DEFAULT_TEST_USERS.put(\"INVALID_USER_NAME\", \"userUnknown\");\n+        DEFAULT_TEST_USERS.put(\"INVALID_USER_EMAIL\", \"unknown@keycloak.org\");\n+        DEFAULT_TEST_USERS.put(\"INVALID_USER_PASSWORD\", \"1nval!D\");\n+        DEFAULT_TEST_USERS.put(\"VALID_USER_EMAIL\", \"jdoe@keycloak.org\");\n+        DEFAULT_TEST_USERS.put(\"VALID_USER_NAME\", \"jdoe\");\n+        DEFAULT_TEST_USERS.put(\"VALID_USER_FIRST_NAME\", \"John\");\n+        DEFAULT_TEST_USERS.put(\"VALID_USER_LAST_NAME\", \"Doe\");\n+        DEFAULT_TEST_USERS.put(\"VALID_USER_PASSWORD\", \"P@ssw0rd!\");\n+        DEFAULT_TEST_USERS.put(\"VALID_USER_POSTAL_CODE\", \"12345\");\n+        DEFAULT_TEST_USERS.put(\"VALID_USER_STREET\", \"1th Avenue\");\n+    }\n+\n+    @Override\n+    protected void afterImportTestRealm() {\n+        getTestingClient().server().run(session -> {\n+            LDAPTestContext ctx = LDAPTestContext.init(session);\n+            RealmModel appRealm = ctx.getRealm();\n+\n+            // Delete all LDAP users\n+            LDAPTestUtils.removeAllLDAPUsers(ctx.getLdapProvider(), appRealm);\n+            // Add some new LDAP users for testing\n+            LDAPObject john = LDAPTestUtils.addLDAPUser\n+            (\n+                ctx.getLdapProvider(),\n+                appRealm,\n+                DEFAULT_TEST_USERS.get(\"VALID_USER_NAME\"),\n+                DEFAULT_TEST_USERS.get(\"VALID_USER_FIRST_NAME\"),\n+                DEFAULT_TEST_USERS.get(\"VALID_USER_LAST_NAME\"),\n+                DEFAULT_TEST_USERS.get(\"VALID_USER_EMAIL\"),\n+                DEFAULT_TEST_USERS.get(\"VALID_USER_STREET\"),\n+                DEFAULT_TEST_USERS.get(\"VALID_USER_POSTAL_CODE\")\n+            );\n+            LDAPTestUtils.updateLDAPPassword(ctx.getLdapProvider(), john, DEFAULT_TEST_USERS.get(\"VALID_USER_PASSWORD\"));\n+        });\n+    }\n+\n+    @Page\n+    protected AppPage appPage;\n+\n+    @Page\n+    protected LoginPage loginPage;\n+\n+    // Helper methods\n+    private void verifyLoginSucceededAndLogout(String username, String password) {\n+        loginPage.open();\n+        loginPage.login(username, password);\n+        appPage.assertCurrent();\n+        Assert.assertEquals(AppPage.RequestType.AUTH_RESPONSE, appPage.getRequestType());\n+        Assert.assertNotNull(oauth.getCurrentQuery().get(OAuth2Constants.CODE));\n+        appPage.logout();\n+    }\n+\n+    private void verifyLoginFailed(String username, String password) {\n+        // Clear the events queue before the actual test to catch all errors properly\n+        events.clear();\n+        // Run the test actions\n+        loginPage.open();\n+        loginPage.login(username, password);\n+        Assert.assertEquals(\"Invalid username or password.\", loginPage.getError());\n+\n+        if (username.equals(DEFAULT_TEST_USERS.get(\"INVALID_USER_EMAIL\")) || username.equals(DEFAULT_TEST_USERS.get(\"INVALID_USER_NAME\"))) {\n+\n+            events.expect(EventType.LOGIN_ERROR).user((String) null).error(\"user_not_found\").assertEvent();\n+\n+        } else if (username.equals(DEFAULT_TEST_USERS.get(\"VALID_USER_EMAIL\")) || username.equals(DEFAULT_TEST_USERS.get(\"VALID_USER_NAME\"))) {\n+\n+            List<UserRepresentation> knownUsers = getAdminClient().realm(TEST_REALM_NAME).users().search(DEFAULT_TEST_USERS.get(\"VALID_USER_NAME\"));\n+            Assert.assertTrue(!knownUsers.isEmpty());\n+            final String userId = knownUsers.get(0).getId();\n+            events.expect(EventType.LOGIN_ERROR).user(userId).error(\"invalid_user_credentials\").assertEvent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "023458e5dea6129093bae347f3ef3ddac6fc2bc9"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUwNjM3Mw==", "bodyText": "Fixed in 2nd commit", "url": "https://github.com/keycloak/keycloak/pull/7049#discussion_r424506373", "createdAt": "2020-05-13T14:58:42Z", "author": {"login": "iankko"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/federation/ldap/LDAPUserLoginTest.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.keycloak.testsuite.federation.ldap;\n+\n+import org.jboss.arquillian.graphene.page.Page;\n+import org.junit.FixMethodOrder;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExternalResource;\n+import org.junit.runners.MethodSorters;\n+import org.keycloak.events.EventType;\n+import org.keycloak.models.LDAPConstants;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.OAuth2Constants;\n+import org.keycloak.representations.idm.UserRepresentation;\n+import org.keycloak.storage.ldap.idm.model.LDAPObject;\n+import org.keycloak.testsuite.arquillian.annotation.EnableVault;\n+import org.keycloak.testsuite.Assert;\n+import org.keycloak.testsuite.AssertEvents;\n+import org.keycloak.testsuite.pages.AppPage;\n+import org.keycloak.testsuite.pages.LoginPage;\n+import org.keycloak.testsuite.util.LDAPRule;\n+import org.keycloak.testsuite.util.LDAPRule.LDAPConnectionParameters;\n+import org.keycloak.testsuite.util.LDAPTestUtils;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test user logins utilizing various LDAP authentication methods and different LDAP connection encryption mechanisms.\n+ *\n+ * @author <a href=\"mailto:jlieskov@redhat.com\">Jan Lieskovsky</a>\n+ */\n+@EnableVault\n+@FixMethodOrder(MethodSorters.NAME_ASCENDING)\n+public class LDAPUserLoginTest extends AbstractLDAPTest {\n+\n+    @Rule\n+    // Start an embedded LDAP server with configuration derived from test annotations before each test\n+    public LDAPRule ldapRule = new LDAPRule();\n+\n+    @Override\n+    protected LDAPRule getLDAPRule() {\n+        return ldapRule;\n+    }\n+\n+    @Rule\n+    // Recreate a new LDAP provider based on test annotations before each test\n+    public ExternalResource ldapProviderRule = new ExternalResource() {\n+\n+        @Override\n+        protected void after() {\n+            // Delete the previously imported realm(s) after each test. This forces\n+            // a new LDAP provider with custom configuration (derived from the test\n+            // annotations) to be created each time the next test is run\n+            if (getTestingClient() != null) {\n+                getTestContext().getTestRealmReps().clear();\n+            }\n+        }\n+\n+    };\n+\n+    @Rule\n+    public AssertEvents events = new AssertEvents(this);\n+\n+    protected static final Map<String, String> DEFAULT_TEST_USERS = new HashMap<String, String>();\n+    static {\n+        DEFAULT_TEST_USERS.put(\"EMPTY_USER_PASSWORD\", new String());\n+        DEFAULT_TEST_USERS.put(\"INVALID_USER_NAME\", \"userUnknown\");\n+        DEFAULT_TEST_USERS.put(\"INVALID_USER_EMAIL\", \"unknown@keycloak.org\");\n+        DEFAULT_TEST_USERS.put(\"INVALID_USER_PASSWORD\", \"1nval!D\");\n+        DEFAULT_TEST_USERS.put(\"VALID_USER_EMAIL\", \"jdoe@keycloak.org\");\n+        DEFAULT_TEST_USERS.put(\"VALID_USER_NAME\", \"jdoe\");\n+        DEFAULT_TEST_USERS.put(\"VALID_USER_FIRST_NAME\", \"John\");\n+        DEFAULT_TEST_USERS.put(\"VALID_USER_LAST_NAME\", \"Doe\");\n+        DEFAULT_TEST_USERS.put(\"VALID_USER_PASSWORD\", \"P@ssw0rd!\");\n+        DEFAULT_TEST_USERS.put(\"VALID_USER_POSTAL_CODE\", \"12345\");\n+        DEFAULT_TEST_USERS.put(\"VALID_USER_STREET\", \"1th Avenue\");\n+    }\n+\n+    @Override\n+    protected void afterImportTestRealm() {\n+        getTestingClient().server().run(session -> {\n+            LDAPTestContext ctx = LDAPTestContext.init(session);\n+            RealmModel appRealm = ctx.getRealm();\n+\n+            // Delete all LDAP users\n+            LDAPTestUtils.removeAllLDAPUsers(ctx.getLdapProvider(), appRealm);\n+            // Add some new LDAP users for testing\n+            LDAPObject john = LDAPTestUtils.addLDAPUser\n+            (\n+                ctx.getLdapProvider(),\n+                appRealm,\n+                DEFAULT_TEST_USERS.get(\"VALID_USER_NAME\"),\n+                DEFAULT_TEST_USERS.get(\"VALID_USER_FIRST_NAME\"),\n+                DEFAULT_TEST_USERS.get(\"VALID_USER_LAST_NAME\"),\n+                DEFAULT_TEST_USERS.get(\"VALID_USER_EMAIL\"),\n+                DEFAULT_TEST_USERS.get(\"VALID_USER_STREET\"),\n+                DEFAULT_TEST_USERS.get(\"VALID_USER_POSTAL_CODE\")\n+            );\n+            LDAPTestUtils.updateLDAPPassword(ctx.getLdapProvider(), john, DEFAULT_TEST_USERS.get(\"VALID_USER_PASSWORD\"));\n+        });\n+    }\n+\n+    @Page\n+    protected AppPage appPage;\n+\n+    @Page\n+    protected LoginPage loginPage;\n+\n+    // Helper methods\n+    private void verifyLoginSucceededAndLogout(String username, String password) {\n+        loginPage.open();\n+        loginPage.login(username, password);\n+        appPage.assertCurrent();\n+        Assert.assertEquals(AppPage.RequestType.AUTH_RESPONSE, appPage.getRequestType());\n+        Assert.assertNotNull(oauth.getCurrentQuery().get(OAuth2Constants.CODE));\n+        appPage.logout();\n+    }\n+\n+    private void verifyLoginFailed(String username, String password) {\n+        // Clear the events queue before the actual test to catch all errors properly\n+        events.clear();\n+        // Run the test actions\n+        loginPage.open();\n+        loginPage.login(username, password);\n+        Assert.assertEquals(\"Invalid username or password.\", loginPage.getError());\n+\n+        if (username.equals(DEFAULT_TEST_USERS.get(\"INVALID_USER_EMAIL\")) || username.equals(DEFAULT_TEST_USERS.get(\"INVALID_USER_NAME\"))) {\n+\n+            events.expect(EventType.LOGIN_ERROR).user((String) null).error(\"user_not_found\").assertEvent();\n+\n+        } else if (username.equals(DEFAULT_TEST_USERS.get(\"VALID_USER_EMAIL\")) || username.equals(DEFAULT_TEST_USERS.get(\"VALID_USER_NAME\"))) {\n+\n+            List<UserRepresentation> knownUsers = getAdminClient().realm(TEST_REALM_NAME).users().search(DEFAULT_TEST_USERS.get(\"VALID_USER_NAME\"));\n+            Assert.assertTrue(!knownUsers.isEmpty());\n+            final String userId = knownUsers.get(0).getId();\n+            events.expect(EventType.LOGIN_ERROR).user(userId).error(\"invalid_user_credentials\").assertEvent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYzMzY5OA=="}, "originalCommit": {"oid": "023458e5dea6129093bae347f3ef3ddac6fc2bc9"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODIxMjIyOnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/federation/ldap/LDAPUserLoginTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMTowMjowN1rOGUBW7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTowMDo0OFrOGU16aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0Njk1Ng==", "bodyText": "I think this test will work just with embedded ApacheDS server? It seems for other LDAP servers, test will need to be ignored. See for example LDAPLegacyImportTest for the inspiration.", "url": "https://github.com/keycloak/keycloak/pull/7049#discussion_r423646956", "createdAt": "2020-05-12T11:02:07Z", "author": {"login": "mposolda"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/federation/ldap/LDAPUserLoginTest.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.keycloak.testsuite.federation.ldap;\n+\n+import org.jboss.arquillian.graphene.page.Page;\n+import org.junit.FixMethodOrder;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExternalResource;\n+import org.junit.runners.MethodSorters;\n+import org.keycloak.events.EventType;\n+import org.keycloak.models.LDAPConstants;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.OAuth2Constants;\n+import org.keycloak.representations.idm.UserRepresentation;\n+import org.keycloak.storage.ldap.idm.model.LDAPObject;\n+import org.keycloak.testsuite.arquillian.annotation.EnableVault;\n+import org.keycloak.testsuite.Assert;\n+import org.keycloak.testsuite.AssertEvents;\n+import org.keycloak.testsuite.pages.AppPage;\n+import org.keycloak.testsuite.pages.LoginPage;\n+import org.keycloak.testsuite.util.LDAPRule;\n+import org.keycloak.testsuite.util.LDAPRule.LDAPConnectionParameters;\n+import org.keycloak.testsuite.util.LDAPTestUtils;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test user logins utilizing various LDAP authentication methods and different LDAP connection encryption mechanisms.\n+ *\n+ * @author <a href=\"mailto:jlieskov@redhat.com\">Jan Lieskovsky</a>\n+ */\n+@EnableVault\n+@FixMethodOrder(MethodSorters.NAME_ASCENDING)\n+public class LDAPUserLoginTest extends AbstractLDAPTest {\n+\n+    @Rule\n+    // Start an embedded LDAP server with configuration derived from test annotations before each test\n+    public LDAPRule ldapRule = new LDAPRule();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "023458e5dea6129093bae347f3ef3ddac6fc2bc9"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUwODAwOA==", "bodyText": "Fixed in 2nd commit (intentionally kept it separate, so the changes done are better visible) Will squash the commits later (since it's likely there will be conflicts with the Tero's one, I might need to up2date this one anyway). Thanks for the example test hint, utilizing that assumeTrue() condition!", "url": "https://github.com/keycloak/keycloak/pull/7049#discussion_r424508008", "createdAt": "2020-05-13T15:00:48Z", "author": {"login": "iankko"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/federation/ldap/LDAPUserLoginTest.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.keycloak.testsuite.federation.ldap;\n+\n+import org.jboss.arquillian.graphene.page.Page;\n+import org.junit.FixMethodOrder;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExternalResource;\n+import org.junit.runners.MethodSorters;\n+import org.keycloak.events.EventType;\n+import org.keycloak.models.LDAPConstants;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.OAuth2Constants;\n+import org.keycloak.representations.idm.UserRepresentation;\n+import org.keycloak.storage.ldap.idm.model.LDAPObject;\n+import org.keycloak.testsuite.arquillian.annotation.EnableVault;\n+import org.keycloak.testsuite.Assert;\n+import org.keycloak.testsuite.AssertEvents;\n+import org.keycloak.testsuite.pages.AppPage;\n+import org.keycloak.testsuite.pages.LoginPage;\n+import org.keycloak.testsuite.util.LDAPRule;\n+import org.keycloak.testsuite.util.LDAPRule.LDAPConnectionParameters;\n+import org.keycloak.testsuite.util.LDAPTestUtils;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test user logins utilizing various LDAP authentication methods and different LDAP connection encryption mechanisms.\n+ *\n+ * @author <a href=\"mailto:jlieskov@redhat.com\">Jan Lieskovsky</a>\n+ */\n+@EnableVault\n+@FixMethodOrder(MethodSorters.NAME_ASCENDING)\n+public class LDAPUserLoginTest extends AbstractLDAPTest {\n+\n+    @Rule\n+    // Start an embedded LDAP server with configuration derived from test annotations before each test\n+    public LDAPRule ldapRule = new LDAPRule();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0Njk1Ng=="}, "originalCommit": {"oid": "023458e5dea6129093bae347f3ef3ddac6fc2bc9"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDk1MDI4OnYy", "diffSide": "RIGHT", "path": "util/embedded-ldap/src/main/java/org/keycloak/util/ldap/LDAPEmbeddedServer.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMDoxMzo1OVrOGV-5xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNDo0MzozNlrOGWH1Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwMzg3OQ==", "bodyText": "I am not sure if this change is correct. IMO the StartTLS is something, which client can use or not. So perhaps it should be still possible to connect through the \"plain\" connection even if StartTLS support or \"enableSSL\" support is enabled.", "url": "https://github.com/keycloak/keycloak/pull/7049#discussion_r425703879", "createdAt": "2020-05-15T10:13:59Z", "author": {"login": "mposolda"}, "path": "util/embedded-ldap/src/main/java/org/keycloak/util/ldap/LDAPEmbeddedServer.java", "diffHunk": "@@ -240,23 +265,65 @@ protected LdapServer createLdapServer() {\n \n         ldapServer.setServiceName(\"DefaultLdapServer\");\n         ldapServer.setSearchBaseDn(this.baseDN);\n+        // Tolerate plaintext LDAP connections from clients by default\n+        ldapServer.setConfidentialityRequired(false);\n \n         // Read the transports\n         Transport ldap = new TcpTransport(this.bindHost, this.bindPort, 3, 50);\n         ldapServer.addTransports( ldap );\n-        if (enableSSL) {\n-            Transport ldaps = new TcpTransport(this.bindHost, this.bindLdapsPort, 3, 50);\n-            ldaps.setEnableSSL(true);\n+        if (enableSSL || enableStartTLS) {\n             ldapServer.setKeystoreFile(keystoreFile);\n             ldapServer.setCertificatePassword(certPassword);\n-            ldapServer.addTransports( ldaps );\n+            // Require the LDAP server to accept only encrypted connections in the case LDAP over SSL / StartTLS operation mode was requested\n+            ldapServer.setConfidentialityRequired(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35726dca866441c65f9ea1195cfab88696b545f3"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcxMTA4Nw==", "bodyText": "Ok, fair enough. I will redo it differently yet & retest yet. Mmt", "url": "https://github.com/keycloak/keycloak/pull/7049#discussion_r425711087", "createdAt": "2020-05-15T10:27:51Z", "author": {"login": "iankko"}, "path": "util/embedded-ldap/src/main/java/org/keycloak/util/ldap/LDAPEmbeddedServer.java", "diffHunk": "@@ -240,23 +265,65 @@ protected LdapServer createLdapServer() {\n \n         ldapServer.setServiceName(\"DefaultLdapServer\");\n         ldapServer.setSearchBaseDn(this.baseDN);\n+        // Tolerate plaintext LDAP connections from clients by default\n+        ldapServer.setConfidentialityRequired(false);\n \n         // Read the transports\n         Transport ldap = new TcpTransport(this.bindHost, this.bindPort, 3, 50);\n         ldapServer.addTransports( ldap );\n-        if (enableSSL) {\n-            Transport ldaps = new TcpTransport(this.bindHost, this.bindLdapsPort, 3, 50);\n-            ldaps.setEnableSSL(true);\n+        if (enableSSL || enableStartTLS) {\n             ldapServer.setKeystoreFile(keystoreFile);\n             ldapServer.setCertificatePassword(certPassword);\n-            ldapServer.addTransports( ldaps );\n+            // Require the LDAP server to accept only encrypted connections in the case LDAP over SSL / StartTLS operation mode was requested\n+            ldapServer.setConfidentialityRequired(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwMzg3OQ=="}, "originalCommit": {"oid": "35726dca866441c65f9ea1195cfab88696b545f3"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcyMDYxNA==", "bodyText": "Since StartTLS is opportunistic encryption there is of course an option to fallback to insecure connection - it becomes a policy question if that is acceptable or not.\nBut from the point of StartTLS test it is of course important to make sure that StartTLS was really used :)", "url": "https://github.com/keycloak/keycloak/pull/7049#discussion_r425720614", "createdAt": "2020-05-15T10:48:12Z", "author": {"login": "tsaarni"}, "path": "util/embedded-ldap/src/main/java/org/keycloak/util/ldap/LDAPEmbeddedServer.java", "diffHunk": "@@ -240,23 +265,65 @@ protected LdapServer createLdapServer() {\n \n         ldapServer.setServiceName(\"DefaultLdapServer\");\n         ldapServer.setSearchBaseDn(this.baseDN);\n+        // Tolerate plaintext LDAP connections from clients by default\n+        ldapServer.setConfidentialityRequired(false);\n \n         // Read the transports\n         Transport ldap = new TcpTransport(this.bindHost, this.bindPort, 3, 50);\n         ldapServer.addTransports( ldap );\n-        if (enableSSL) {\n-            Transport ldaps = new TcpTransport(this.bindHost, this.bindLdapsPort, 3, 50);\n-            ldaps.setEnableSSL(true);\n+        if (enableSSL || enableStartTLS) {\n             ldapServer.setKeystoreFile(keystoreFile);\n             ldapServer.setCertificatePassword(certPassword);\n-            ldapServer.addTransports( ldaps );\n+            // Require the LDAP server to accept only encrypted connections in the case LDAP over SSL / StartTLS operation mode was requested\n+            ldapServer.setConfidentialityRequired(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwMzg3OQ=="}, "originalCommit": {"oid": "35726dca866441c65f9ea1195cfab88696b545f3"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTczNDkyMQ==", "bodyText": "Right. Originally thought, if StartTLS is requested, confidentiality should be enforced for all tests. But will change the PR to be more tolerant (still require confidentiality == true for StartTLS & LDAPS for this set of newly added LDAP tests), but tolerate plaintext connections for the existing tests already. Hopefully that's reasonable compromise (otherwise we might need to rewrite those failing tests to truly support StartTLS).", "url": "https://github.com/keycloak/keycloak/pull/7049#discussion_r425734921", "createdAt": "2020-05-15T11:19:39Z", "author": {"login": "iankko"}, "path": "util/embedded-ldap/src/main/java/org/keycloak/util/ldap/LDAPEmbeddedServer.java", "diffHunk": "@@ -240,23 +265,65 @@ protected LdapServer createLdapServer() {\n \n         ldapServer.setServiceName(\"DefaultLdapServer\");\n         ldapServer.setSearchBaseDn(this.baseDN);\n+        // Tolerate plaintext LDAP connections from clients by default\n+        ldapServer.setConfidentialityRequired(false);\n \n         // Read the transports\n         Transport ldap = new TcpTransport(this.bindHost, this.bindPort, 3, 50);\n         ldapServer.addTransports( ldap );\n-        if (enableSSL) {\n-            Transport ldaps = new TcpTransport(this.bindHost, this.bindLdapsPort, 3, 50);\n-            ldaps.setEnableSSL(true);\n+        if (enableSSL || enableStartTLS) {\n             ldapServer.setKeystoreFile(keystoreFile);\n             ldapServer.setCertificatePassword(certPassword);\n-            ldapServer.addTransports( ldaps );\n+            // Require the LDAP server to accept only encrypted connections in the case LDAP over SSL / StartTLS operation mode was requested\n+            ldapServer.setConfidentialityRequired(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwMzg3OQ=="}, "originalCommit": {"oid": "35726dca866441c65f9ea1195cfab88696b545f3"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc0MzU4MA==", "bodyText": "+1 for require confidentiality==true just for the StartTLS tests (and eventually SSL tests if it is not additional headaches to cover). IMO other existing LDAP tests not related to StartTLS feature should not use StartTLS. Among other things, StartTLS connection is slower than the \"plaintext\" connection AFAIK.", "url": "https://github.com/keycloak/keycloak/pull/7049#discussion_r425743580", "createdAt": "2020-05-15T11:38:56Z", "author": {"login": "mposolda"}, "path": "util/embedded-ldap/src/main/java/org/keycloak/util/ldap/LDAPEmbeddedServer.java", "diffHunk": "@@ -240,23 +265,65 @@ protected LdapServer createLdapServer() {\n \n         ldapServer.setServiceName(\"DefaultLdapServer\");\n         ldapServer.setSearchBaseDn(this.baseDN);\n+        // Tolerate plaintext LDAP connections from clients by default\n+        ldapServer.setConfidentialityRequired(false);\n \n         // Read the transports\n         Transport ldap = new TcpTransport(this.bindHost, this.bindPort, 3, 50);\n         ldapServer.addTransports( ldap );\n-        if (enableSSL) {\n-            Transport ldaps = new TcpTransport(this.bindHost, this.bindLdapsPort, 3, 50);\n-            ldaps.setEnableSSL(true);\n+        if (enableSSL || enableStartTLS) {\n             ldapServer.setKeystoreFile(keystoreFile);\n             ldapServer.setCertificatePassword(certPassword);\n-            ldapServer.addTransports( ldaps );\n+            // Require the LDAP server to accept only encrypted connections in the case LDAP over SSL / StartTLS operation mode was requested\n+            ldapServer.setConfidentialityRequired(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwMzg3OQ=="}, "originalCommit": {"oid": "35726dca866441c65f9ea1195cfab88696b545f3"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg1MDE4Mw==", "bodyText": "@mposolda @tsaarni Updated, should be ready for re-review again past the Travis run finished. The logic was changed to require confidentiality with StartTLS / LDAPS connections if and only if the StartTLS / LDAPS mode on LDAPEmbeddedServer was requested via the test annotation. Otherwise it will default to false (allow also unencrypted connections)", "url": "https://github.com/keycloak/keycloak/pull/7049#discussion_r425850183", "createdAt": "2020-05-15T14:43:36Z", "author": {"login": "iankko"}, "path": "util/embedded-ldap/src/main/java/org/keycloak/util/ldap/LDAPEmbeddedServer.java", "diffHunk": "@@ -240,23 +265,65 @@ protected LdapServer createLdapServer() {\n \n         ldapServer.setServiceName(\"DefaultLdapServer\");\n         ldapServer.setSearchBaseDn(this.baseDN);\n+        // Tolerate plaintext LDAP connections from clients by default\n+        ldapServer.setConfidentialityRequired(false);\n \n         // Read the transports\n         Transport ldap = new TcpTransport(this.bindHost, this.bindPort, 3, 50);\n         ldapServer.addTransports( ldap );\n-        if (enableSSL) {\n-            Transport ldaps = new TcpTransport(this.bindHost, this.bindLdapsPort, 3, 50);\n-            ldaps.setEnableSSL(true);\n+        if (enableSSL || enableStartTLS) {\n             ldapServer.setKeystoreFile(keystoreFile);\n             ldapServer.setCertificatePassword(certPassword);\n-            ldapServer.addTransports( ldaps );\n+            // Require the LDAP server to accept only encrypted connections in the case LDAP over SSL / StartTLS operation mode was requested\n+            ldapServer.setConfidentialityRequired(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwMzg3OQ=="}, "originalCommit": {"oid": "35726dca866441c65f9ea1195cfab88696b545f3"}, "originalPosition": 117}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3616, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}