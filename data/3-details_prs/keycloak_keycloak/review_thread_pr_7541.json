{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExMDExMzIy", "number": 7541, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMjowNDoyOVrOE16vJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMjowNDoyOVrOE16vJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTcyMzI2OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/protocol/saml/SamlService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMjowNDozMFrOHudkRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODoxMzozMFrOHvjH5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ4MDk2NQ==", "bodyText": "Wouldn't it be better to map the keys to elements and then collect into a list at the end instead of populating the list as part of a forEach?", "url": "https://github.com/keycloak/keycloak/pull/7541#discussion_r518480965", "createdAt": "2020-11-06T02:04:30Z", "author": {"login": "sguilhen"}, "path": "services/src/main/java/org/keycloak/protocol/saml/SamlService.java", "diffHunk": "@@ -653,30 +654,39 @@ public String getDescriptor() throws Exception {\n     }\n \n     public static String getIDPMetadataDescriptor(UriInfo uriInfo, KeycloakSession session, RealmModel realm) {\n-        Set<KeyWrapper> keys = new TreeSet<>((o1, o2) -> o1.getStatus() == o2.getStatus() // Status can be only PASSIVE OR ACTIVE, push PASSIVE to end of list\n-          ? (int) (o2.getProviderPriority() - o1.getProviderPriority())\n-          : (o1.getStatus() == KeyStatus.PASSIVE ? 1 : -1));\n-        keys.addAll(session.keys().getKeys(realm, KeyUse.SIG, Algorithm.RS256));\n-\n         try {\n-            List<Element> signingKeys = new ArrayList<Element>();\n-            for (KeyWrapper key : keys) {\n-                signingKeys.add(IDPMetadataDescriptor.buildKeyInfoElement(key.getKid(), PemUtils.encodeCertificate(key.getCertificate())));\n-            }\n+            List<Element> signingKeys = new LinkedList<>();\n+            session.keys().getKeysStream(realm, KeyUse.SIG, Algorithm.RS256)\n+                    .sorted(SamlService::compareKeys)\n+                    .forEach(key -> {\n+                        try {\n+                            Element element = IDPMetadataDescriptor\n+                                    .buildKeyInfoElement(key.getKid(), PemUtils.encodeCertificate(key.getCertificate()));\n+                            signingKeys.add(element);\n+                        } catch (ParserConfigurationException e) {\n+                            throw new RuntimeException(e);\n+                        }\n+                    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b977de6fd4bfe6fab9b6ddf10a40615444a3b634"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ4MzI5Ng==", "bodyText": "@martin-kanis Overall this really looks good to me, thanks for the great work. Just one minor suggestion as you can see above.", "url": "https://github.com/keycloak/keycloak/pull/7541#discussion_r518483296", "createdAt": "2020-11-06T02:13:13Z", "author": {"login": "sguilhen"}, "path": "services/src/main/java/org/keycloak/protocol/saml/SamlService.java", "diffHunk": "@@ -653,30 +654,39 @@ public String getDescriptor() throws Exception {\n     }\n \n     public static String getIDPMetadataDescriptor(UriInfo uriInfo, KeycloakSession session, RealmModel realm) {\n-        Set<KeyWrapper> keys = new TreeSet<>((o1, o2) -> o1.getStatus() == o2.getStatus() // Status can be only PASSIVE OR ACTIVE, push PASSIVE to end of list\n-          ? (int) (o2.getProviderPriority() - o1.getProviderPriority())\n-          : (o1.getStatus() == KeyStatus.PASSIVE ? 1 : -1));\n-        keys.addAll(session.keys().getKeys(realm, KeyUse.SIG, Algorithm.RS256));\n-\n         try {\n-            List<Element> signingKeys = new ArrayList<Element>();\n-            for (KeyWrapper key : keys) {\n-                signingKeys.add(IDPMetadataDescriptor.buildKeyInfoElement(key.getKid(), PemUtils.encodeCertificate(key.getCertificate())));\n-            }\n+            List<Element> signingKeys = new LinkedList<>();\n+            session.keys().getKeysStream(realm, KeyUse.SIG, Algorithm.RS256)\n+                    .sorted(SamlService::compareKeys)\n+                    .forEach(key -> {\n+                        try {\n+                            Element element = IDPMetadataDescriptor\n+                                    .buildKeyInfoElement(key.getKid(), PemUtils.encodeCertificate(key.getCertificate()));\n+                            signingKeys.add(element);\n+                        } catch (ParserConfigurationException e) {\n+                            throw new RuntimeException(e);\n+                        }\n+                    });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ4MDk2NQ=="}, "originalCommit": {"oid": "b977de6fd4bfe6fab9b6ddf10a40615444a3b634"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYyMDU4MA==", "bodyText": "Right, changed to map + collect. Thank you Stefan for the review.", "url": "https://github.com/keycloak/keycloak/pull/7541#discussion_r519620580", "createdAt": "2020-11-09T08:13:30Z", "author": {"login": "martin-kanis"}, "path": "services/src/main/java/org/keycloak/protocol/saml/SamlService.java", "diffHunk": "@@ -653,30 +654,39 @@ public String getDescriptor() throws Exception {\n     }\n \n     public static String getIDPMetadataDescriptor(UriInfo uriInfo, KeycloakSession session, RealmModel realm) {\n-        Set<KeyWrapper> keys = new TreeSet<>((o1, o2) -> o1.getStatus() == o2.getStatus() // Status can be only PASSIVE OR ACTIVE, push PASSIVE to end of list\n-          ? (int) (o2.getProviderPriority() - o1.getProviderPriority())\n-          : (o1.getStatus() == KeyStatus.PASSIVE ? 1 : -1));\n-        keys.addAll(session.keys().getKeys(realm, KeyUse.SIG, Algorithm.RS256));\n-\n         try {\n-            List<Element> signingKeys = new ArrayList<Element>();\n-            for (KeyWrapper key : keys) {\n-                signingKeys.add(IDPMetadataDescriptor.buildKeyInfoElement(key.getKid(), PemUtils.encodeCertificate(key.getCertificate())));\n-            }\n+            List<Element> signingKeys = new LinkedList<>();\n+            session.keys().getKeysStream(realm, KeyUse.SIG, Algorithm.RS256)\n+                    .sorted(SamlService::compareKeys)\n+                    .forEach(key -> {\n+                        try {\n+                            Element element = IDPMetadataDescriptor\n+                                    .buildKeyInfoElement(key.getKid(), PemUtils.encodeCertificate(key.getCertificate()));\n+                            signingKeys.add(element);\n+                        } catch (ParserConfigurationException e) {\n+                            throw new RuntimeException(e);\n+                        }\n+                    });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ4MDk2NQ=="}, "originalCommit": {"oid": "b977de6fd4bfe6fab9b6ddf10a40615444a3b634"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3308, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}