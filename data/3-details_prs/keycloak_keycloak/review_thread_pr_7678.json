{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5NjYyNjI5", "number": 7678, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNzoyMjo0MFrOFNyY4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxNjozODoyNFrOFQFanw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMDAxMzc4OnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OIDCProtocolMappersTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNzoyMjo0MFrOISMJbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNzozNTozNVrOISMrCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk0NDMwMg==", "bodyText": "Ensure that this part is executed always, either by leveraging Creator in try-with-resources, or via try-finally block, or via test cleanup methods. The cleanup also needs to update directAccessGrant back to original value.", "url": "https://github.com/keycloak/keycloak/pull/7678#discussion_r555944302", "createdAt": "2021-01-12T17:22:40Z", "author": {"login": "hmlnarik"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OIDCProtocolMappersTest.java", "diffHunk": "@@ -784,6 +785,45 @@ public void testUserGroupRoleToAttributeMappersScopedClientNotSet() throws Excep\n         deleteMappers(protocolMappers);\n     }\n \n+    @Test\n+    public void testUserGroupRoleToAttributeMappersScopedWithDifferentClient() throws Exception {\n+        String clientId = \"test-app-scope\";\n+        String diffClient = \"test-app\";\n+\n+        ProtocolMapperRepresentation realmMapper = ProtocolMapperUtil.createUserRealmRoleMappingMapper(\"pref.\", \"Realm roles mapper\", \"roles-custom.realm\", true, true);\n+        ProtocolMapperRepresentation clientMapper = ProtocolMapperUtil.createUserClientRoleMappingMapper(diffClient, null, \"Client roles mapper\", \"roles-custom.test-app\", true, true);\n+\n+        ClientResource clientResource = ApiUtil.findClientResourceByClientId(adminClient.realm(\"test\"), clientId);\n+        assertThat(clientResource, notNullValue());\n+\n+        ProtocolMappersResource protocolMappers = clientResource.getProtocolMappers();\n+        protocolMappers.createMapper(Arrays.asList(realmMapper, clientMapper));\n+\n+        // Login user\n+        ClientManager.realm(adminClient.realm(\"test\")).clientId(clientId).directAccessGrant(true);\n+        oauth.clientId(clientId);\n+        OAuthClient.AccessTokenResponse response = browserLogin(\"password\", \"rich.roles@redhat.com\", \"password\");\n+        IDToken idToken = oauth.verifyIDToken(response.getIdToken());\n+\n+        // Verify attribute is filled\n+        Map<String, Object> roleMappings = (Map<String, Object>) idToken.getOtherClaims().get(\"roles-custom\");\n+        Assert.assertThat(roleMappings.keySet(), containsInAnyOrder(\"realm\", diffClient));\n+        String realmRoleMappings = (String) roleMappings.get(\"realm\");\n+        String testAppScopeMappings = (String) roleMappings.get(diffClient);\n+        assertRolesString(realmRoleMappings,\n+                \"pref.admin\",\n+                \"pref.user\",\n+                \"pref.customer-user-premium\"\n+        );\n+        assertRolesString(testAppScopeMappings,\n+                \"customer-admin-composite-role\",\n+                \"customer-admin\"\n+        );\n+\n+        // Revert\n+        deleteMappers(protocolMappers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f76a322457b006cbe0642fa8828047b2428111e"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk1MjkwNg==", "bodyText": "You're right. Thanks @hmlnarik !", "url": "https://github.com/keycloak/keycloak/pull/7678#discussion_r555952906", "createdAt": "2021-01-12T17:35:35Z", "author": {"login": "mabartos"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OIDCProtocolMappersTest.java", "diffHunk": "@@ -784,6 +785,45 @@ public void testUserGroupRoleToAttributeMappersScopedClientNotSet() throws Excep\n         deleteMappers(protocolMappers);\n     }\n \n+    @Test\n+    public void testUserGroupRoleToAttributeMappersScopedWithDifferentClient() throws Exception {\n+        String clientId = \"test-app-scope\";\n+        String diffClient = \"test-app\";\n+\n+        ProtocolMapperRepresentation realmMapper = ProtocolMapperUtil.createUserRealmRoleMappingMapper(\"pref.\", \"Realm roles mapper\", \"roles-custom.realm\", true, true);\n+        ProtocolMapperRepresentation clientMapper = ProtocolMapperUtil.createUserClientRoleMappingMapper(diffClient, null, \"Client roles mapper\", \"roles-custom.test-app\", true, true);\n+\n+        ClientResource clientResource = ApiUtil.findClientResourceByClientId(adminClient.realm(\"test\"), clientId);\n+        assertThat(clientResource, notNullValue());\n+\n+        ProtocolMappersResource protocolMappers = clientResource.getProtocolMappers();\n+        protocolMappers.createMapper(Arrays.asList(realmMapper, clientMapper));\n+\n+        // Login user\n+        ClientManager.realm(adminClient.realm(\"test\")).clientId(clientId).directAccessGrant(true);\n+        oauth.clientId(clientId);\n+        OAuthClient.AccessTokenResponse response = browserLogin(\"password\", \"rich.roles@redhat.com\", \"password\");\n+        IDToken idToken = oauth.verifyIDToken(response.getIdToken());\n+\n+        // Verify attribute is filled\n+        Map<String, Object> roleMappings = (Map<String, Object>) idToken.getOtherClaims().get(\"roles-custom\");\n+        Assert.assertThat(roleMappings.keySet(), containsInAnyOrder(\"realm\", diffClient));\n+        String realmRoleMappings = (String) roleMappings.get(\"realm\");\n+        String testAppScopeMappings = (String) roleMappings.get(diffClient);\n+        assertRolesString(realmRoleMappings,\n+                \"pref.admin\",\n+                \"pref.user\",\n+                \"pref.customer-user-premium\"\n+        );\n+        assertRolesString(testAppScopeMappings,\n+                \"customer-admin-composite-role\",\n+                \"customer-admin\"\n+        );\n+\n+        // Revert\n+        deleteMappers(protocolMappers);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk0NDMwMg=="}, "originalCommit": {"oid": "4f76a322457b006cbe0642fa8828047b2428111e"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwNTQwODc5OnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OIDCProtocolMappersTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxOTozMDo0OFrOIS-9cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxOTozMDo0OFrOIS-9cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc3NjgxNw==", "bodyText": "Thank you for the change. You can completely get rid of the clientResource this way:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ClientResource clientResource = ApiUtil.findClientResourceByClientId(adminClient.realm(realmName), clientId);\n          \n          \n            \n                    assertThat(clientResource, notNullValue());\n          \n          \n            \n            \n          \n          \n            \n                    try (ProtocolMappersUpdater protocolMappers = new ProtocolMappersUpdater(clientResource.getProtocolMappers());\n          \n          \n            \n                         ClientAttributeUpdater cau = ClientAttributeUpdater.forClient(adminClient, realmName, clientId).setDirectAccessGrantsEnabled(true)) {\n          \n          \n            \n                    try (ClientAttributeUpdater cau = ClientAttributeUpdater.forClient(adminClient, realmName, clientId).setDirectAccessGrantsEnabled(true);\n          \n          \n            \n                      ProtocolMappersUpdater protocolMappers = new ProtocolMappersUpdater(cau.getResource().getProtocolMappers())) {", "url": "https://github.com/keycloak/keycloak/pull/7678#discussion_r556776817", "createdAt": "2021-01-13T19:30:48Z", "author": {"login": "hmlnarik"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/OIDCProtocolMappersTest.java", "diffHunk": "@@ -784,6 +787,46 @@ public void testUserGroupRoleToAttributeMappersScopedClientNotSet() throws Excep\n         deleteMappers(protocolMappers);\n     }\n \n+    @Test\n+    public void testUserGroupRoleToAttributeMappersScopedWithDifferentClient() throws Exception {\n+        final String clientId = \"test-app-scope\";\n+        final String diffClient = \"test-app\";\n+        final String realmName = \"test\";\n+\n+        final ProtocolMapperRepresentation realmMapper = ProtocolMapperUtil.createUserRealmRoleMappingMapper(\"pref.\", \"Realm roles mapper\", \"roles-custom.realm\", true, true);\n+        final ProtocolMapperRepresentation clientMapper = ProtocolMapperUtil.createUserClientRoleMappingMapper(diffClient, null, \"Client roles mapper\", \"roles-custom.test-app\", true, true);\n+\n+        ClientResource clientResource = ApiUtil.findClientResourceByClientId(adminClient.realm(realmName), clientId);\n+        assertThat(clientResource, notNullValue());\n+\n+        try (ProtocolMappersUpdater protocolMappers = new ProtocolMappersUpdater(clientResource.getProtocolMappers());\n+             ClientAttributeUpdater cau = ClientAttributeUpdater.forClient(adminClient, realmName, clientId).setDirectAccessGrantsEnabled(true)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb833872a618d0843093e04ece303fa5dc0d3d25"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyNDEwMjcxOnYy", "diffSide": "RIGHT", "path": "themes/src/main/resources/theme/base/admin/messages/admin-messages_en.properties", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxNjozODoyNFrOIVwqmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxMzoyMDoxNFrOIWODtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY4ODM0Nw==", "bodyText": "Please revert to Client ID to be consistent with the rest of the code. Apologies I didn't spot this earlier - this is the very last change :)", "url": "https://github.com/keycloak/keycloak/pull/7678#discussion_r559688347", "createdAt": "2021-01-18T16:38:24Z", "author": {"login": "hmlnarik"}, "path": "themes/src/main/resources/theme/base/admin/messages/admin-messages_en.properties", "diffHunk": "@@ -254,7 +254,7 @@ includeInAccessToken.label=Add to access token\n includeInAccessToken.tooltip=Should the claim be added to the access token?\n includeInUserInfo.label=Add to userinfo\n includeInUserInfo.tooltip=Should the claim be added to the userinfo?\n-usermodel.clientRoleMapping.clientId.label=Client ID\n+usermodel.clientRoleMapping.clientId.label=Specific Client ID", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73ea6754e504b89614d48a6b4b0a2ee31441b2cb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTcwODU5Mg==", "bodyText": "Honestly, I'm not sure about that. I think this solution avoids some confusions about functionality as you can see in the JIRA ticket. IMO, the admin doesn't even read the tooltip when see the \"Client ID\" label. There is described purpose of the field in the tooltip which is different than normal Client ID. So, this should, at least, force the admins to read the tooltip and avoid confusions.", "url": "https://github.com/keycloak/keycloak/pull/7678#discussion_r559708592", "createdAt": "2021-01-18T17:16:25Z", "author": {"login": "mabartos"}, "path": "themes/src/main/resources/theme/base/admin/messages/admin-messages_en.properties", "diffHunk": "@@ -254,7 +254,7 @@ includeInAccessToken.label=Add to access token\n includeInAccessToken.tooltip=Should the claim be added to the access token?\n includeInUserInfo.label=Add to userinfo\n includeInUserInfo.tooltip=Should the claim be added to the userinfo?\n-usermodel.clientRoleMapping.clientId.label=Client ID\n+usermodel.clientRoleMapping.clientId.label=Specific Client ID", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY4ODM0Nw=="}, "originalCommit": {"oid": "73ea6754e504b89614d48a6b4b0a2ee31441b2cb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE2OTkxMA==", "bodyText": "There are many places across admin console where client role is chosen as a pair of Client ID / role name, not as Specific Client ID / role name. See e.g. authorization settings in clients.\nI am afraid that no label would help without reading documentation and proper understanding of what is the purpose of individual fields. Adding Specific makes this field inconsistent with the rest of the UI.\nPlease revert.", "url": "https://github.com/keycloak/keycloak/pull/7678#discussion_r560169910", "createdAt": "2021-01-19T13:20:14Z", "author": {"login": "hmlnarik"}, "path": "themes/src/main/resources/theme/base/admin/messages/admin-messages_en.properties", "diffHunk": "@@ -254,7 +254,7 @@ includeInAccessToken.label=Add to access token\n includeInAccessToken.tooltip=Should the claim be added to the access token?\n includeInUserInfo.label=Add to userinfo\n includeInUserInfo.tooltip=Should the claim be added to the userinfo?\n-usermodel.clientRoleMapping.clientId.label=Client ID\n+usermodel.clientRoleMapping.clientId.label=Specific Client ID", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY4ODM0Nw=="}, "originalCommit": {"oid": "73ea6754e504b89614d48a6b4b0a2ee31441b2cb"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3265, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}