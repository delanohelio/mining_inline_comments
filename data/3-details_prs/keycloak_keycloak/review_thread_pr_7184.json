{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NjQxNzc0", "number": 7184, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNDozOTowNVrOELRRvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwODoyNjo0OFrOEQCmBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjUyODYyOnYy", "diffSide": "RIGHT", "path": "adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/authorization/PathCache.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNDozOTowNlrOGsyUug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMDo0Njo0NlrOGtmkEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYxNTAzNA==", "bodyText": "Hello @pedroigor, is it correct, that this way all paths defined only in enforcerConfig are removed after cache expiration? I tried to play with ServletPolicyEnforcerTest and changed cache lifespan to 5ms.\nNow I tried to run ServletPolicyEnforcerTest#testPattern1 and it fails during the first login. I described behavior in comments here.", "url": "https://github.com/keycloak/keycloak/pull/7184#discussion_r449615034", "createdAt": "2020-07-03T14:39:06Z", "author": {"login": "mhajas"}, "path": "adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/authorization/PathCache.java", "diffHunk": "@@ -115,12 +123,19 @@ private PathConfig removeIfExpired(CacheEntry cached) {\n             return null;\n         }\n \n+        PathConfig config = cached.value();\n+\n         if (cached.isExpired()) {\n             remove(cached.key());\n+            \n+            if (config != null && config.getPath() != null) {\n+                // also remove from pre-defined paths map so that changes on the server are properly reflected\n+                paths.remove(config.getPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b04595f1467ce1a24fe1e2ba098ea20d8d41dea"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI3NzUxMQ==", "bodyText": "Yes, the idea is to remove from any reference to paths, including those defined in the deployment configuration. The reason is that without it, you'll never get the application reflecting the latest changes made to resources/paths from the server. I'll look your comments.", "url": "https://github.com/keycloak/keycloak/pull/7184#discussion_r450277511", "createdAt": "2020-07-06T14:52:53Z", "author": {"login": "pedroigor"}, "path": "adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/authorization/PathCache.java", "diffHunk": "@@ -115,12 +123,19 @@ private PathConfig removeIfExpired(CacheEntry cached) {\n             return null;\n         }\n \n+        PathConfig config = cached.value();\n+\n         if (cached.isExpired()) {\n             remove(cached.key());\n+            \n+            if (config != null && config.getPath() != null) {\n+                // also remove from pre-defined paths map so that changes on the server are properly reflected\n+                paths.remove(config.getPath());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYxNTAzNA=="}, "originalCommit": {"oid": "2b04595f1467ce1a24fe1e2ba098ea20d8d41dea"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI4Mzc0OQ==", "bodyText": "@mhajas I see your point in that comment. And the reason is that lazy-load-paths is set to false so the resource will never be fetched again.\nI guess we should only remove if that flag is marked as true so that the application can fetch again resources from server.\nBut your comment raises another question if you have paths with a specific configuration in your deployment configuration, they'll also be lost ... Let me create some tests based on your findings.", "url": "https://github.com/keycloak/keycloak/pull/7184#discussion_r450283749", "createdAt": "2020-07-06T15:01:35Z", "author": {"login": "pedroigor"}, "path": "adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/authorization/PathCache.java", "diffHunk": "@@ -115,12 +123,19 @@ private PathConfig removeIfExpired(CacheEntry cached) {\n             return null;\n         }\n \n+        PathConfig config = cached.value();\n+\n         if (cached.isExpired()) {\n             remove(cached.key());\n+            \n+            if (config != null && config.getPath() != null) {\n+                // also remove from pre-defined paths map so that changes on the server are properly reflected\n+                paths.remove(config.getPath());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYxNTAzNA=="}, "originalCommit": {"oid": "2b04595f1467ce1a24fe1e2ba098ea20d8d41dea"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ3MDkzMQ==", "bodyText": "@mhajas Could you check now ? I also updated tests.", "url": "https://github.com/keycloak/keycloak/pull/7184#discussion_r450470931", "createdAt": "2020-07-06T20:46:46Z", "author": {"login": "pedroigor"}, "path": "adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/authorization/PathCache.java", "diffHunk": "@@ -115,12 +123,19 @@ private PathConfig removeIfExpired(CacheEntry cached) {\n             return null;\n         }\n \n+        PathConfig config = cached.value();\n+\n         if (cached.isExpired()) {\n             remove(cached.key());\n+            \n+            if (config != null && config.getPath() != null) {\n+                // also remove from pre-defined paths map so that changes on the server are properly reflected\n+                paths.remove(config.getPath());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYxNTAzNA=="}, "originalCommit": {"oid": "2b04595f1467ce1a24fe1e2ba098ea20d8d41dea"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTY4Mjk4OnYy", "diffSide": "RIGHT", "path": "adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/authorization/PathCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjowMToyNVrOGuFWTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjowMToyNVrOGuFWTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3NTMwOQ==", "bodyText": "This is unused", "url": "https://github.com/keycloak/keycloak/pull/7184#discussion_r450975309", "createdAt": "2020-07-07T16:01:25Z", "author": {"login": "mhajas"}, "path": "adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/authorization/PathCache.java", "diffHunk": "@@ -42,14 +43,17 @@\n \n     private final long maxAge;\n     private final boolean enabled;\n+    private final Map<String, PathConfig> paths;\n+    private final PolicyEnforcerConfig config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51b3467752a18015fe411b5d4f2d89fad425a600"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTY5NTA3OnYy", "diffSide": "RIGHT", "path": "adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/authorization/PolicyEnforcer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjowNDozN1rOGuFeJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMDowOToyMVrOGu3g3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3NzMxNg==", "bodyText": "Why are we doing lazy loading even if lazy loading is disabled and cache is enabled?: || enforcerConfig.getPathCacheConfig() != null?", "url": "https://github.com/keycloak/keycloak/pull/7184#discussion_r450977316", "createdAt": "2020-07-07T16:04:37Z", "author": {"login": "mhajas"}, "path": "adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/authorization/PolicyEnforcer.java", "diffHunk": "@@ -263,20 +267,35 @@ public PathConfig matches(String targetUri) {\n             pathConfig = super.matches(targetUri);\n \n             if (enforcerConfig.getLazyLoadPaths() || enforcerConfig.getPathCacheConfig() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51b3467752a18015fe411b5d4f2d89fad425a600"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc5NzIxNA==", "bodyText": "To be honest, I don't know the exact reason. This is also something I would like to check and possibly remove so that we only fetch resources if lazy load is enabled. There must be some use case in test that relies on it.\nWe can create a JIRA and look at that more closely.", "url": "https://github.com/keycloak/keycloak/pull/7184#discussion_r451797214", "createdAt": "2020-07-08T20:09:21Z", "author": {"login": "pedroigor"}, "path": "adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/authorization/PolicyEnforcer.java", "diffHunk": "@@ -263,20 +267,35 @@ public PathConfig matches(String targetUri) {\n             pathConfig = super.matches(targetUri);\n \n             if (enforcerConfig.getLazyLoadPaths() || enforcerConfig.getPathCacheConfig() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3NzMxNg=="}, "originalCommit": {"oid": "51b3467752a18015fe411b5d4f2d89fad425a600"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTcxMDk2OnYy", "diffSide": "RIGHT", "path": "adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/authorization/PolicyEnforcer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjowODozMVrOGuFoBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMDowNzo0OFrOGu3d-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3OTg0NQ==", "bodyText": "Could you please elaborate a little bit more on why is this condition necessary? I would understand it without the exclamation mark in the last condition, but not with it. Maybe in some example situation when this happens.", "url": "https://github.com/keycloak/keycloak/pull/7184#discussion_r450979845", "createdAt": "2020-07-07T16:08:31Z", "author": {"login": "mhajas"}, "path": "adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/authorization/PolicyEnforcer.java", "diffHunk": "@@ -263,20 +267,35 @@ public PathConfig matches(String targetUri) {\n             pathConfig = super.matches(targetUri);\n \n             if (enforcerConfig.getLazyLoadPaths() || enforcerConfig.getPathCacheConfig() != null) {\n-                if ((pathConfig == null || (pathConfig.getPath().contains(\"*\")))) {\n+                if ((pathConfig == null || pathConfig.isInvalidated() || pathConfig.getPath().contains(\"*\"))) {\n                     try {\n                         List<ResourceRepresentation> matchingResources = authzClient.protection().resource().findByMatchingUri(targetUri);\n \n-                        if (!matchingResources.isEmpty()) {\n+                        if (matchingResources.isEmpty()) {\n+                            // if this config is invalidated (e.g.: due to cache expiration) we remove and return null\n+                            if (pathConfig != null && pathConfig.isInvalidated()) {\n+                                paths.remove(targetUri);\n+                                return null;\n+                            }\n+                        } else {\n                             Map<String, Map<String, Object>> cipConfig = null;\n                             PolicyEnforcerConfig.EnforcementMode enforcementMode = PolicyEnforcerConfig.EnforcementMode.ENFORCING;\n+                            ResourceRepresentation targetResource = matchingResources.get(0);\n \n                             if (pathConfig != null) {\n                                 cipConfig = pathConfig.getClaimInformationPointConfig();\n                                 enforcementMode = pathConfig.getEnforcementMode();\n+                            } else {\n+                                for (PathConfig existingPath : paths.values()) {\n+                                    if (existingPath.getId().equals(targetResource.getId()) \n+                                            && existingPath.isStatic()\n+                                            && !PolicyEnforcerConfig.EnforcementMode.DISABLED.equals(existingPath.getEnforcementMode())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51b3467752a18015fe411b5d4f2d89fad425a600"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc5NjQ3Mw==", "bodyText": "If the path definition is not explicitly disabled in the configuration (enforcing or permissive) then we go with the invalidation. Otherwise, paths disabled in the configuration are going to be overridden when re-fetched and not be disabled anymore.\nYou can see this flag in action by removing and running the adapter tests. I don't recall now the name of the test but one of them should fail because of this.", "url": "https://github.com/keycloak/keycloak/pull/7184#discussion_r451796473", "createdAt": "2020-07-08T20:07:48Z", "author": {"login": "pedroigor"}, "path": "adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/authorization/PolicyEnforcer.java", "diffHunk": "@@ -263,20 +267,35 @@ public PathConfig matches(String targetUri) {\n             pathConfig = super.matches(targetUri);\n \n             if (enforcerConfig.getLazyLoadPaths() || enforcerConfig.getPathCacheConfig() != null) {\n-                if ((pathConfig == null || (pathConfig.getPath().contains(\"*\")))) {\n+                if ((pathConfig == null || pathConfig.isInvalidated() || pathConfig.getPath().contains(\"*\"))) {\n                     try {\n                         List<ResourceRepresentation> matchingResources = authzClient.protection().resource().findByMatchingUri(targetUri);\n \n-                        if (!matchingResources.isEmpty()) {\n+                        if (matchingResources.isEmpty()) {\n+                            // if this config is invalidated (e.g.: due to cache expiration) we remove and return null\n+                            if (pathConfig != null && pathConfig.isInvalidated()) {\n+                                paths.remove(targetUri);\n+                                return null;\n+                            }\n+                        } else {\n                             Map<String, Map<String, Object>> cipConfig = null;\n                             PolicyEnforcerConfig.EnforcementMode enforcementMode = PolicyEnforcerConfig.EnforcementMode.ENFORCING;\n+                            ResourceRepresentation targetResource = matchingResources.get(0);\n \n                             if (pathConfig != null) {\n                                 cipConfig = pathConfig.getClaimInformationPointConfig();\n                                 enforcementMode = pathConfig.getEnforcementMode();\n+                            } else {\n+                                for (PathConfig existingPath : paths.values()) {\n+                                    if (existingPath.getId().equals(targetResource.getId()) \n+                                            && existingPath.isStatic()\n+                                            && !PolicyEnforcerConfig.EnforcementMode.DISABLED.equals(existingPath.getEnforcementMode())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3OTg0NQ=="}, "originalCommit": {"oid": "51b3467752a18015fe411b5d4f2d89fad425a600"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjU1MTczOnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/adapter/example/authorization/LifespanAdapterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwODoyNjo0OFrOGz_ftw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwODoyNjo0OFrOGz_ftw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE3MDg3MQ==", "bodyText": "Hey @pedroigor, this test is failing on this line.", "url": "https://github.com/keycloak/keycloak/pull/7184#discussion_r457170871", "createdAt": "2020-07-20T08:26:48Z", "author": {"login": "mhajas"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/adapter/example/authorization/LifespanAdapterTest.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Copyright 2018 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.testsuite.adapter.example.authorization;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import javax.ws.rs.core.Response;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.hamcrest.Matchers;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.Test;\n+import org.keycloak.admin.client.resource.AuthorizationResource;\n+import org.keycloak.admin.client.resource.RealmResource;\n+import org.keycloak.admin.client.resource.UserResource;\n+import org.keycloak.representations.idm.UserRepresentation;\n+import org.keycloak.representations.idm.authorization.PolicyRepresentation;\n+import org.keycloak.representations.idm.authorization.ResourceRepresentation;\n+import org.keycloak.testsuite.adapter.page.PhotozClientAuthzTestApp;\n+import org.keycloak.testsuite.arquillian.annotation.AppServerContainer;\n+import org.keycloak.testsuite.util.javascript.ResponseValidator;\n+import org.keycloak.testsuite.utils.arquillian.ContainerConstants;\n+import org.keycloak.util.JsonSerialization;\n+\n+/**\n+ * @author <a href=\"mailto:psilva@redhat.com\">Pedro Igor</a>\n+ */\n+@AppServerContainer(ContainerConstants.APP_SERVER_WILDFLY)\n+@AppServerContainer(ContainerConstants.APP_SERVER_WILDFLY_DEPRECATED)\n+@AppServerContainer(ContainerConstants.APP_SERVER_EAP)\n+@AppServerContainer(ContainerConstants.APP_SERVER_EAP6)\n+@AppServerContainer(ContainerConstants.APP_SERVER_EAP71)\n+@AppServerContainer(ContainerConstants.APP_SERVER_UNDERTOW)\n+public class LifespanAdapterTest extends AbstractPhotozExampleAdapterTest {\n+\n+    @Deployment(name = PhotozClientAuthzTestApp.DEPLOYMENT_NAME)\n+    public static WebArchive deploymentClient() throws IOException {\n+        return exampleDeployment(PhotozClientAuthzTestApp.DEPLOYMENT_NAME);\n+    }\n+\n+    @Deployment(name = RESOURCE_SERVER_ID, managed = false, testable = false)\n+    public static WebArchive deploymentResourceServer() throws IOException {\n+        return exampleDeployment(RESOURCE_SERVER_ID,\n+              webArchive -> webArchive.addAsWebInfResource(new File(TEST_APPS_HOME_DIR + \"/photoz/keycloak-cache-lifespan-authz-service.json\"), \"keycloak.json\"));\n+    }\n+\n+    @Test\n+    public void testPathConfigInvalidation() throws Exception {\n+        loginToClientPage(aliceUser);\n+        assertSuccess();\n+\n+        ResourceRepresentation resource = getAuthorizationResource().resources().findByName(\"Profile Resource\").get(0);\n+        AuthorizationResource authorizationResource = getAuthorizationResource();\n+\n+        authorizationResource.resources().resource(resource.getId()).remove();\n+\n+        loginToClientPage(aliceUser);\n+\n+        // should throw an error because the resource was removed and cache entry did not expire yet\n+        clientPage.viewProfile(new ResponseValidator() {\n+            @Override\n+            public void validate(Map<String, Object> response) {\n+                Object res = response.get(\"res\");\n+                assertThat(res, Matchers.notNullValue());\n+                assertThat(res.toString(), Matchers.not(Matchers.containsString(\"userName\")));\n+            }\n+        });\n+\n+        setTimeOffsetOfAdapter(20);\n+\n+        loginToClientPage(aliceUser);\n+        assertSuccess();\n+        setTimeOffsetOfAdapter(0);\n+\n+        try (Response response = authorizationResource.resources().create(resource)) {\n+            resource = response.readEntity(ResourceRepresentation.class);\n+        }\n+\n+        loginToClientPage(aliceUser);\n+        assertSuccess();\n+\n+        RealmResource realm = this.realmsResouce().realm(REALM_NAME);\n+        UserRepresentation userRepresentation = realm.users().search(aliceUser.getUsername()).get(0);\n+        UserResource userResource = realm.users().get(userRepresentation.getId());\n+        \n+        userRepresentation.setEmail(\"alice@anotherdomain.org\");\n+        \n+        userResource.update(userRepresentation);\n+        loginToClientPage(aliceUser);\n+        assertTicket();\n+\n+        try {\n+            PolicyRepresentation resourceInstancePermission = new PolicyRepresentation();\n+\n+            resourceInstancePermission.setName(\"View User Permission\");\n+            resourceInstancePermission.setType(\"resource\");\n+\n+            Map<String, String> config = new HashMap<>();\n+\n+            config.put(\"resources\", JsonSerialization.writeValueAsString(Arrays.asList(resource.getId())));\n+            config.put(\"applyPolicies\", JsonSerialization.writeValueAsString(Arrays.asList(\"Only From @keycloak.org or Admin\")));\n+\n+            resourceInstancePermission.setConfig(config);\n+            authorizationResource.policies().create(resourceInstancePermission);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Error creating policy.\", e);\n+        }\n+\n+        loginToClientPage(aliceUser);\n+        // should throw an error because the resource was removed and cache entry did not expire yet\n+        clientPage.viewProfile(new ResponseValidator() {\n+            @Override\n+            public void validate(Map<String, Object> response) {\n+                Object res = response.get(\"res\");\n+                assertThat(res, Matchers.notNullValue());\n+                assertThat(res.toString(), Matchers.not(Matchers.containsString(\"userName\")));\n+            }\n+        });\n+\n+        userRepresentation.setEmail(\"alice@keycloak.org\");\n+\n+        userResource.update(userRepresentation);\n+        loginToClientPage(aliceUser);\n+        assertSuccess();\n+    }\n+\n+    private void assertSuccess() {\n+        clientPage.viewProfile((ResponseValidator) response -> {\n+            Object res = response.get(\"res\");\n+            assertThat(res, Matchers.notNullValue());\n+            assertThat(res.toString(), Matchers.containsString(\"userName\"));\n+        });\n+    }\n+\n+    private void assertTicket() {\n+        clientPage.viewProfile((ResponseValidator) response -> {\n+            Object headers = response.get(\"responseHeaders\");\n+            assertThat(headers, Matchers.notNullValue());\n+            assertThat(headers.toString(), Matchers.containsString(\"WWW-Authenticate: UMA\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d095372c56a9f5f57b27ebb23ceb2dd81a938dd4"}, "originalPosition": 158}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3579, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}