{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0Njc0MTEy", "number": 7412, "title": "KEYCLOAK-15429 Add CORS origin on permission request with invalid access token", "bodyText": "This fetches Web Origins setting from the client to set access-control-allow-origin on token endpoint response in the case where grant type is urn:ietf:params:oauth:grant-type:uma-ticket, and the access token is invalid. This can happen if the token is expired, or if the user is disabled.", "createdAt": "2020-09-11T05:48:44Z", "url": "https://github.com/keycloak/keycloak/pull/7412", "merged": true, "mergeCommit": {"oid": "0a0b7da53e9c521c7008adb804c21eecac5cdfd2"}, "closed": true, "closedAt": "2020-09-22T11:56:22Z", "author": {"login": "FrodeI"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLEvT_AFqTQ5MjcwNTEyNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLWqe7gFqTQ5MzM4MDQ0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyNzA1MTI0", "url": "https://github.com/keycloak/keycloak/pull/7412#pullrequestreview-492705124", "createdAt": "2020-09-21T14:58:09Z", "commit": {"oid": "09ad2b240e3e79a389f3c8663307f8130d23692e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDo1ODowOVrOHVUc2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDo1ODowOVrOHVUc2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjExNzIwOA==", "bodyText": "You don't need to fake-verify the token just to parse it. You can do something like:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                TokenVerifier<AccessToken> verifier = TokenVerifier.create(accessTokenString, AccessToken.class)\n          \n          \n            \n                                        .withDefaultChecks()\n          \n          \n            \n                                        .realmUrl(Urls.realmIssuer(session.getContext().getUri().getBaseUri(), realm.getName()))\n          \n          \n            \n                                        .checkActive(false);\n          \n          \n            \n                                String kid = verifier.getHeader().getKeyId();\n          \n          \n            \n                                String algorithm = verifier.getHeader().getAlgorithm().name();\n          \n          \n            \n                                SignatureVerifierContext signatureVerifier = session.getProvider(SignatureProvider.class, algorithm).verifier(kid);\n          \n          \n            \n                                verifier.verifierContext(signatureVerifier);\n          \n          \n            \n                                AccessToken invalidToken = verifier.verify().getToken();\n          \n          \n            \n                                AccessToken invalidToken = new JWSInput(accessTokenString).readJsonContent(AccessToken.class);\n          \n      \n    \n    \n  \n\nMaybe there's even more efficient solution, I'm not sure.", "url": "https://github.com/keycloak/keycloak/pull/7412#discussion_r492117208", "createdAt": "2020-09-21T14:58:09Z", "author": {"login": "vmuzikar"}, "path": "services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java", "diffHunk": "@@ -1210,6 +1214,22 @@ public Response permissionGrant() {\n             AccessToken accessToken = Tokens.getAccessToken(session);\n \n             if (accessToken == null) {\n+                try {\n+                    // In case the access token is invalid because it's expired or the user is disabled, identify the client\n+                    // from the access token anyway in order to set correct CORS headers.\n+                    TokenVerifier<AccessToken> verifier = TokenVerifier.create(accessTokenString, AccessToken.class)\n+                            .withDefaultChecks()\n+                            .realmUrl(Urls.realmIssuer(session.getContext().getUri().getBaseUri(), realm.getName()))\n+                            .checkActive(false);\n+                    String kid = verifier.getHeader().getKeyId();\n+                    String algorithm = verifier.getHeader().getAlgorithm().name();\n+                    SignatureVerifierContext signatureVerifier = session.getProvider(SignatureProvider.class, algorithm).verifier(kid);\n+                    verifier.verifierContext(signatureVerifier);\n+                    AccessToken invalidToken = verifier.verify().getToken();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09ad2b240e3e79a389f3c8663307f8130d23692e"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyNzE3MTk1", "url": "https://github.com/keycloak/keycloak/pull/7412#pullrequestreview-492717195", "createdAt": "2020-09-21T15:10:27Z", "commit": {"oid": "09ad2b240e3e79a389f3c8663307f8130d23692e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c878b78ffafda3c4e952f676259c53b5e7f4bc24", "author": {"user": {"login": "FrodeI", "name": null}}, "url": "https://github.com/keycloak/keycloak/commit/c878b78ffafda3c4e952f676259c53b5e7f4bc24", "committedDate": "2020-09-22T06:42:04Z", "message": "KEYCLOAK-15429 Add CORS origin on permission request with invalid access token"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzMzgwNDQ5", "url": "https://github.com/keycloak/keycloak/pull/7412#pullrequestreview-493380449", "createdAt": "2020-09-22T11:54:43Z", "commit": {"oid": "c878b78ffafda3c4e952f676259c53b5e7f4bc24"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2812, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}