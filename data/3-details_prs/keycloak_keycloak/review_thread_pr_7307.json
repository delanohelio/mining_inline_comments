{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5NTk5MjQz", "number": 7307, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTo1NToyMFrOEec6ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTo1OTo1OFrOEec_yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzY2NDQyOnYy", "diffSide": "RIGHT", "path": "saml-core/src/main/java/org/keycloak/saml/SAML2RequestedAuthnContextBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTo1NToyMFrOHKHH9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTo1NToyMFrOHKHH9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM2NDUzMw==", "bodyText": "Nit: Use LinkedList instead.", "url": "https://github.com/keycloak/keycloak/pull/7307#discussion_r480364533", "createdAt": "2020-08-31T19:55:20Z", "author": {"login": "hmlnarik"}, "path": "saml-core/src/main/java/org/keycloak/saml/SAML2RequestedAuthnContextBuilder.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2016 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.saml;\n+\n+import org.keycloak.dom.saml.v2.protocol.AuthnContextComparisonType;\n+import org.keycloak.dom.saml.v2.protocol.RequestedAuthnContextType;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class SAML2RequestedAuthnContextBuilder {\n+    private final RequestedAuthnContextType requestedAuthnContextType;\n+    private AuthnContextComparisonType comparison;\n+    private List<String> requestedAuthnContextClassRefList;\n+    private List<String> requestedAuthnContextDeclRefList;\n+\n+    public SAML2RequestedAuthnContextBuilder() {\n+        this.requestedAuthnContextType = new RequestedAuthnContextType();\n+        this.requestedAuthnContextClassRefList = new ArrayList<String>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "402a7fab7ba809ba9b57ee6474aaf2f0d994aadb"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzY2NTIxOnYy", "diffSide": "RIGHT", "path": "saml-core/src/main/java/org/keycloak/saml/SAML2RequestedAuthnContextBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTo1NTozN1rOHKHIeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTo1NTozN1rOHKHIeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM2NDY2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (requestedAuthnContextClassRef != null && requestedAuthnContextClassRef.length() > 0)\n          \n          \n            \n                        if (requestedAuthnContextClassRef != null && ! requestedAuthnContextClassRef.isEmpty())", "url": "https://github.com/keycloak/keycloak/pull/7307#discussion_r480364664", "createdAt": "2020-08-31T19:55:37Z", "author": {"login": "hmlnarik"}, "path": "saml-core/src/main/java/org/keycloak/saml/SAML2RequestedAuthnContextBuilder.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2016 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.saml;\n+\n+import org.keycloak.dom.saml.v2.protocol.AuthnContextComparisonType;\n+import org.keycloak.dom.saml.v2.protocol.RequestedAuthnContextType;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class SAML2RequestedAuthnContextBuilder {\n+    private final RequestedAuthnContextType requestedAuthnContextType;\n+    private AuthnContextComparisonType comparison;\n+    private List<String> requestedAuthnContextClassRefList;\n+    private List<String> requestedAuthnContextDeclRefList;\n+\n+    public SAML2RequestedAuthnContextBuilder() {\n+        this.requestedAuthnContextType = new RequestedAuthnContextType();\n+        this.requestedAuthnContextClassRefList = new ArrayList<String>();\n+        this.requestedAuthnContextDeclRefList = new ArrayList<String>();\n+    }\n+\n+    public SAML2RequestedAuthnContextBuilder setComparison(AuthnContextComparisonType comparison) {\n+        this.comparison = comparison;\n+        return this;\n+    }\n+\n+    public SAML2RequestedAuthnContextBuilder addAuthnContextClassRef(String authnContextClassRef) {\n+        this.requestedAuthnContextClassRefList.add(authnContextClassRef);\n+        return this;\n+    }\n+\n+    public SAML2RequestedAuthnContextBuilder addAuthnContextDeclRef(String authnContextDeclRef) {\n+        this.requestedAuthnContextDeclRefList.add(authnContextDeclRef);\n+        return this;\n+    }\n+\n+    public RequestedAuthnContextType build() {\n+        if (this.comparison != null)\n+            this.requestedAuthnContextType.setComparison(this.comparison);\n+\n+        for (String requestedAuthnContextClassRef: this.requestedAuthnContextClassRefList)\n+            if (requestedAuthnContextClassRef != null && requestedAuthnContextClassRef.length() > 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "402a7fab7ba809ba9b57ee6474aaf2f0d994aadb"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzY2NTY5OnYy", "diffSide": "RIGHT", "path": "saml-core/src/main/java/org/keycloak/saml/SAML2RequestedAuthnContextBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTo1NTo1MVrOHKHI1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTo1NTo1MVrOHKHI1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM2NDc1Nw==", "bodyText": "Nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (requestedAuthnContextDeclRef != null && requestedAuthnContextDeclRef.length() > 0)\n          \n          \n            \n                        if (requestedAuthnContextDeclRef != null && ! requestedAuthnContextDeclRef.isEmpty())", "url": "https://github.com/keycloak/keycloak/pull/7307#discussion_r480364757", "createdAt": "2020-08-31T19:55:51Z", "author": {"login": "hmlnarik"}, "path": "saml-core/src/main/java/org/keycloak/saml/SAML2RequestedAuthnContextBuilder.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2016 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.saml;\n+\n+import org.keycloak.dom.saml.v2.protocol.AuthnContextComparisonType;\n+import org.keycloak.dom.saml.v2.protocol.RequestedAuthnContextType;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class SAML2RequestedAuthnContextBuilder {\n+    private final RequestedAuthnContextType requestedAuthnContextType;\n+    private AuthnContextComparisonType comparison;\n+    private List<String> requestedAuthnContextClassRefList;\n+    private List<String> requestedAuthnContextDeclRefList;\n+\n+    public SAML2RequestedAuthnContextBuilder() {\n+        this.requestedAuthnContextType = new RequestedAuthnContextType();\n+        this.requestedAuthnContextClassRefList = new ArrayList<String>();\n+        this.requestedAuthnContextDeclRefList = new ArrayList<String>();\n+    }\n+\n+    public SAML2RequestedAuthnContextBuilder setComparison(AuthnContextComparisonType comparison) {\n+        this.comparison = comparison;\n+        return this;\n+    }\n+\n+    public SAML2RequestedAuthnContextBuilder addAuthnContextClassRef(String authnContextClassRef) {\n+        this.requestedAuthnContextClassRefList.add(authnContextClassRef);\n+        return this;\n+    }\n+\n+    public SAML2RequestedAuthnContextBuilder addAuthnContextDeclRef(String authnContextDeclRef) {\n+        this.requestedAuthnContextDeclRefList.add(authnContextDeclRef);\n+        return this;\n+    }\n+\n+    public RequestedAuthnContextType build() {\n+        if (this.comparison != null)\n+            this.requestedAuthnContextType.setComparison(this.comparison);\n+\n+        for (String requestedAuthnContextClassRef: this.requestedAuthnContextClassRefList)\n+            if (requestedAuthnContextClassRef != null && requestedAuthnContextClassRef.length() > 0)\n+                this.requestedAuthnContextType.addAuthnContextClassRef(requestedAuthnContextClassRef);\n+\n+        for (String requestedAuthnContextDeclRef: this.requestedAuthnContextDeclRefList)\n+            if (requestedAuthnContextDeclRef != null && requestedAuthnContextDeclRef.length() > 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "402a7fab7ba809ba9b57ee6474aaf2f0d994aadb"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzY3NDAwOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTo1ODoyOVrOHKHN5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTo1ODoyOVrOHKHN5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM2NjA1Mw==", "bodyText": "Is this class necessary? Can the serialized form be just a list of Strings instead?\nNote: Changing this to String would have impact on themes as well.", "url": "https://github.com/keycloak/keycloak/pull/7307#discussion_r480366053", "createdAt": "2020-08-31T19:58:29Z", "author": {"login": "hmlnarik"}, "path": "services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProvider.java", "diffHunk": "@@ -148,6 +160,52 @@ private String getEntityId(UriInfo uriInfo, RealmModel realm) {\n         return UriBuilder.fromUri(uriInfo.getBaseUri()).path(\"realms\").path(realm.getName()).build().toString();\n     }\n \n+    static class AuthnContextClassRefJsonObject {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "402a7fab7ba809ba9b57ee6474aaf2f0d994aadb"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzY3Njk5OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTo1OTozM1rOHKHPzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTo1OTozM1rOHKHPzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM2NjU0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        AuthnContextClassRefJsonObject[] jsonObjects = JsonSerialization.readValue(authnContextClassRefs, AuthnContextClassRefJsonObject[].class);\n          \n          \n            \n                        return Arrays.asList(JsonSerialization.readValue(authnContextClassRefs, String[].class));", "url": "https://github.com/keycloak/keycloak/pull/7307#discussion_r480366540", "createdAt": "2020-08-31T19:59:33Z", "author": {"login": "hmlnarik"}, "path": "services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProvider.java", "diffHunk": "@@ -148,6 +160,52 @@ private String getEntityId(UriInfo uriInfo, RealmModel realm) {\n         return UriBuilder.fromUri(uriInfo.getBaseUri()).path(\"realms\").path(realm.getName()).build().toString();\n     }\n \n+    static class AuthnContextClassRefJsonObject {\n+        public String uri;\n+    }\n+\n+    private List<String> getAuthnContextClassRefUris() {\n+        ArrayList<String> output = new ArrayList<String>();\n+\n+        String authnContextClassRefs = getConfig().getAuthnContextClassRefs();\n+        if (authnContextClassRefs == null || authnContextClassRefs.length() == 0)\n+            return output;\n+\n+        try {\n+            AuthnContextClassRefJsonObject[] jsonObjects = JsonSerialization.readValue(authnContextClassRefs, AuthnContextClassRefJsonObject[].class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "402a7fab7ba809ba9b57ee6474aaf2f0d994aadb"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzY3ODE3OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTo1OTo1OFrOHKHQig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTo1OTo1OFrOHKHQig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM2NjczMA==", "bodyText": "same here", "url": "https://github.com/keycloak/keycloak/pull/7307#discussion_r480366730", "createdAt": "2020-08-31T19:59:58Z", "author": {"login": "hmlnarik"}, "path": "services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProvider.java", "diffHunk": "@@ -148,6 +160,52 @@ private String getEntityId(UriInfo uriInfo, RealmModel realm) {\n         return UriBuilder.fromUri(uriInfo.getBaseUri()).path(\"realms\").path(realm.getName()).build().toString();\n     }\n \n+    static class AuthnContextClassRefJsonObject {\n+        public String uri;\n+    }\n+\n+    private List<String> getAuthnContextClassRefUris() {\n+        ArrayList<String> output = new ArrayList<String>();\n+\n+        String authnContextClassRefs = getConfig().getAuthnContextClassRefs();\n+        if (authnContextClassRefs == null || authnContextClassRefs.length() == 0)\n+            return output;\n+\n+        try {\n+            AuthnContextClassRefJsonObject[] jsonObjects = JsonSerialization.readValue(authnContextClassRefs, AuthnContextClassRefJsonObject[].class);\n+\n+            for (AuthnContextClassRefJsonObject jsonObject: jsonObjects)\n+                output.add(jsonObject.uri);\n+        } catch (Exception e) {\n+            logger.warn(\"Could not json-deserialize AuthContextClassRefs config entry: \" + authnContextClassRefs, e);\n+        }\n+\n+        return output;\n+    }\n+\n+    static class AuthnContextDeclRefJsonObject {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "402a7fab7ba809ba9b57ee6474aaf2f0d994aadb"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3502, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}