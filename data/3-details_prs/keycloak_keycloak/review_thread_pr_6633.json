{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MzQ3OTI0", "number": 6633, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNDo1MDozNlrODXLNew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNDo1MDozNlrODXLNew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjI3NTE1OnYy", "diffSide": "RIGHT", "path": "adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/authentication/JWTClientSecretCredentialsProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNDo1MDozNlrOFcWSeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwODo1MDo0OFrOFdw3DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI2OTYyNA==", "bodyText": "You added some added code in JWTClientSecretCredentialProvider to support different algorithms, however it seems it is not possible to setup them in the adapter config. Will it make sense to add optional \"algorithm\" field to the adapter configuration? It may be then needed to be also documented somewhere in this chapter: https://www.keycloak.org/docs/latest/securing_apps/index.html#_client_authentication_adapter", "url": "https://github.com/keycloak/keycloak/pull/6633#discussion_r365269624", "createdAt": "2020-01-10T14:50:36Z", "author": {"login": "mposolda"}, "path": "adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/authentication/JWTClientSecretCredentialsProvider.java", "diffHunk": "@@ -11,70 +11,87 @@\n import org.keycloak.adapters.AdapterUtils;\n import org.keycloak.adapters.KeycloakDeployment;\n import org.keycloak.common.util.Time;\n+import org.keycloak.crypto.Algorithm;\n+import org.keycloak.crypto.JavaAlgorithm;\n import org.keycloak.jose.jws.JWSBuilder;\n import org.keycloak.representations.JsonWebToken;\n \n /**\n  * Client authentication based on JWT signed by client secret instead of private key .\n  * See <a href=\"http://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication\">specs</a> for more details.\n  *\n- * @author <a href=\"mailto:takashi.norimatsu.ws@hitachi.com\">Takashi Norimatsu</a>\n  */\n public class JWTClientSecretCredentialsProvider implements ClientCredentialsProvider {\n-    \n-\tprivate static final Logger logger = Logger.getLogger(JWTClientSecretCredentialsProvider.class);\n-\t\n+\n+    private static final Logger logger = Logger.getLogger(JWTClientSecretCredentialsProvider.class);\n+\n     public static final String PROVIDER_ID = \"secret-jwt\";\n-    \n+\n     private SecretKey clientSecret;\n-    \n+\n     @Override\n     public String getId() {\n         return PROVIDER_ID;\n     }\n-    \n+\n     @Override\n     public void init(KeycloakDeployment deployment, Object config) {\n         if (!(config instanceof Map)) {\n             throw new RuntimeException(\"Configuration of jwt credentials by client secret is missing or incorrect for client '\" + deployment.getResourceName() + \"'. Check your adapter configuration\");\n         }\n-        \n+\n         Map<String, Object> cfg = (Map<String, Object>) config;\n         String clientSecretString = (String) cfg.get(\"secret\");\n         if (clientSecretString == null) {\n             throw new RuntimeException(\"Missing parameter secret-jwt in configuration of jwt for client \" + deployment.getResourceName());\n         }\n         setClientSecret(clientSecretString); \n     }\n-    \n+\n     @Override\n     public void setClientCredentials(KeycloakDeployment deployment, Map<String, String> requestHeaders, Map<String, String> formParams) {\n         String signedToken = createSignedRequestToken(deployment.getResourceName(), deployment.getRealmInfoUrl());\n         formParams.put(OAuth2Constants.CLIENT_ASSERTION_TYPE, OAuth2Constants.CLIENT_ASSERTION_TYPE_JWT);\n         formParams.put(OAuth2Constants.CLIENT_ASSERTION, signedToken);\n     }\n-   \n+\n     public void setClientSecret(String clientSecretString) {\n         // Get client secret and validate signature\n         // According to <a href=\"http://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication\">OIDC's client authentication spec</a>,\n         // The HMAC (Hash-based Message Authentication Code) is calculated using the octets of the UTF-8 representation of the client_secret as the shared key. \n         // Use \"HmacSHA256\" consulting <a href=\"https://docs.oracle.com/javase/jp/8/docs/api/javax/crypto/Mac.html\">java8 api</a>\n         // because it must be implemented in every java platform.\n-        clientSecret = new SecretKeySpec(clientSecretString.getBytes(StandardCharsets.UTF_8), \"HmacSHA256\");\n+        setClientSecret(clientSecretString, Algorithm.HS256);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c9262c8eb473f6543ab97689399e766de61d7c5"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjExNDcyMg==", "bodyText": "I see, as for client adapter's new algorithm support about Client Signed JWT, I'll add codes treating them and also add documentation about it.", "url": "https://github.com/keycloak/keycloak/pull/6633#discussion_r366114722", "createdAt": "2020-01-14T01:31:34Z", "author": {"login": "tnorimat"}, "path": "adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/authentication/JWTClientSecretCredentialsProvider.java", "diffHunk": "@@ -11,70 +11,87 @@\n import org.keycloak.adapters.AdapterUtils;\n import org.keycloak.adapters.KeycloakDeployment;\n import org.keycloak.common.util.Time;\n+import org.keycloak.crypto.Algorithm;\n+import org.keycloak.crypto.JavaAlgorithm;\n import org.keycloak.jose.jws.JWSBuilder;\n import org.keycloak.representations.JsonWebToken;\n \n /**\n  * Client authentication based on JWT signed by client secret instead of private key .\n  * See <a href=\"http://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication\">specs</a> for more details.\n  *\n- * @author <a href=\"mailto:takashi.norimatsu.ws@hitachi.com\">Takashi Norimatsu</a>\n  */\n public class JWTClientSecretCredentialsProvider implements ClientCredentialsProvider {\n-    \n-\tprivate static final Logger logger = Logger.getLogger(JWTClientSecretCredentialsProvider.class);\n-\t\n+\n+    private static final Logger logger = Logger.getLogger(JWTClientSecretCredentialsProvider.class);\n+\n     public static final String PROVIDER_ID = \"secret-jwt\";\n-    \n+\n     private SecretKey clientSecret;\n-    \n+\n     @Override\n     public String getId() {\n         return PROVIDER_ID;\n     }\n-    \n+\n     @Override\n     public void init(KeycloakDeployment deployment, Object config) {\n         if (!(config instanceof Map)) {\n             throw new RuntimeException(\"Configuration of jwt credentials by client secret is missing or incorrect for client '\" + deployment.getResourceName() + \"'. Check your adapter configuration\");\n         }\n-        \n+\n         Map<String, Object> cfg = (Map<String, Object>) config;\n         String clientSecretString = (String) cfg.get(\"secret\");\n         if (clientSecretString == null) {\n             throw new RuntimeException(\"Missing parameter secret-jwt in configuration of jwt for client \" + deployment.getResourceName());\n         }\n         setClientSecret(clientSecretString); \n     }\n-    \n+\n     @Override\n     public void setClientCredentials(KeycloakDeployment deployment, Map<String, String> requestHeaders, Map<String, String> formParams) {\n         String signedToken = createSignedRequestToken(deployment.getResourceName(), deployment.getRealmInfoUrl());\n         formParams.put(OAuth2Constants.CLIENT_ASSERTION_TYPE, OAuth2Constants.CLIENT_ASSERTION_TYPE_JWT);\n         formParams.put(OAuth2Constants.CLIENT_ASSERTION, signedToken);\n     }\n-   \n+\n     public void setClientSecret(String clientSecretString) {\n         // Get client secret and validate signature\n         // According to <a href=\"http://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication\">OIDC's client authentication spec</a>,\n         // The HMAC (Hash-based Message Authentication Code) is calculated using the octets of the UTF-8 representation of the client_secret as the shared key. \n         // Use \"HmacSHA256\" consulting <a href=\"https://docs.oracle.com/javase/jp/8/docs/api/javax/crypto/Mac.html\">java8 api</a>\n         // because it must be implemented in every java platform.\n-        clientSecret = new SecretKeySpec(clientSecretString.getBytes(StandardCharsets.UTF_8), \"HmacSHA256\");\n+        setClientSecret(clientSecretString, Algorithm.HS256);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI2OTYyNA=="}, "originalCommit": {"oid": "3c9262c8eb473f6543ab97689399e766de61d7c5"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc1MzU0OA==", "bodyText": "Thanks!", "url": "https://github.com/keycloak/keycloak/pull/6633#discussion_r366753548", "createdAt": "2020-01-15T08:50:48Z", "author": {"login": "mposolda"}, "path": "adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/authentication/JWTClientSecretCredentialsProvider.java", "diffHunk": "@@ -11,70 +11,87 @@\n import org.keycloak.adapters.AdapterUtils;\n import org.keycloak.adapters.KeycloakDeployment;\n import org.keycloak.common.util.Time;\n+import org.keycloak.crypto.Algorithm;\n+import org.keycloak.crypto.JavaAlgorithm;\n import org.keycloak.jose.jws.JWSBuilder;\n import org.keycloak.representations.JsonWebToken;\n \n /**\n  * Client authentication based on JWT signed by client secret instead of private key .\n  * See <a href=\"http://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication\">specs</a> for more details.\n  *\n- * @author <a href=\"mailto:takashi.norimatsu.ws@hitachi.com\">Takashi Norimatsu</a>\n  */\n public class JWTClientSecretCredentialsProvider implements ClientCredentialsProvider {\n-    \n-\tprivate static final Logger logger = Logger.getLogger(JWTClientSecretCredentialsProvider.class);\n-\t\n+\n+    private static final Logger logger = Logger.getLogger(JWTClientSecretCredentialsProvider.class);\n+\n     public static final String PROVIDER_ID = \"secret-jwt\";\n-    \n+\n     private SecretKey clientSecret;\n-    \n+\n     @Override\n     public String getId() {\n         return PROVIDER_ID;\n     }\n-    \n+\n     @Override\n     public void init(KeycloakDeployment deployment, Object config) {\n         if (!(config instanceof Map)) {\n             throw new RuntimeException(\"Configuration of jwt credentials by client secret is missing or incorrect for client '\" + deployment.getResourceName() + \"'. Check your adapter configuration\");\n         }\n-        \n+\n         Map<String, Object> cfg = (Map<String, Object>) config;\n         String clientSecretString = (String) cfg.get(\"secret\");\n         if (clientSecretString == null) {\n             throw new RuntimeException(\"Missing parameter secret-jwt in configuration of jwt for client \" + deployment.getResourceName());\n         }\n         setClientSecret(clientSecretString); \n     }\n-    \n+\n     @Override\n     public void setClientCredentials(KeycloakDeployment deployment, Map<String, String> requestHeaders, Map<String, String> formParams) {\n         String signedToken = createSignedRequestToken(deployment.getResourceName(), deployment.getRealmInfoUrl());\n         formParams.put(OAuth2Constants.CLIENT_ASSERTION_TYPE, OAuth2Constants.CLIENT_ASSERTION_TYPE_JWT);\n         formParams.put(OAuth2Constants.CLIENT_ASSERTION, signedToken);\n     }\n-   \n+\n     public void setClientSecret(String clientSecretString) {\n         // Get client secret and validate signature\n         // According to <a href=\"http://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication\">OIDC's client authentication spec</a>,\n         // The HMAC (Hash-based Message Authentication Code) is calculated using the octets of the UTF-8 representation of the client_secret as the shared key. \n         // Use \"HmacSHA256\" consulting <a href=\"https://docs.oracle.com/javase/jp/8/docs/api/javax/crypto/Mac.html\">java8 api</a>\n         // because it must be implemented in every java platform.\n-        clientSecret = new SecretKeySpec(clientSecretString.getBytes(StandardCharsets.UTF_8), \"HmacSHA256\");\n+        setClientSecret(clientSecretString, Algorithm.HS256);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI2OTYyNA=="}, "originalCommit": {"oid": "3c9262c8eb473f6543ab97689399e766de61d7c5"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3916, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}