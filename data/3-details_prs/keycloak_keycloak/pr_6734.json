{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMzk3OTE0", "number": 6734, "title": "KEYCLOAK-12749 fix \"invalid state\" error due to IE requesting favicon", "bodyText": "Internet Explorer occasionally requests a favicon before doing the\nactual redirect to localhost. This commit adds Undertow to properly\nhandle those unwanted requests.\nRemarks:\n\nI tried to keep it as low-level as possible but miserably failed. I'm obviously not smart enough to implement the HTTP protocol properly.\nThe import statements have been auto-organized by the IDE, hope that's okay.\nHttpResponseWriter interface for customized login and logout responses has been removed. That might be a breaking change but I really doubt that's actually used out there.\nWe included this change in our product already and initial tests look good so far.\nThere're no unit tests, so I deliberately ignored to provide them here. I might need further support to add them if required.", "createdAt": "2020-02-05T14:18:17Z", "url": "https://github.com/keycloak/keycloak/pull/6734", "merged": true, "mergeCommit": {"oid": "8ed355a5fefb0d0b4097bc68ea81010e8aead8e2"}, "closed": true, "closedAt": "2020-03-03T15:39:20Z", "author": {"login": "thokuest"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBWsU2AH2gAyMzcxMzk3OTE0OjcwNWQ5MTJjYmZjM2U3YWZhMTc5MzU3MzZmNzBlNjQ0Zjg4ODI0ZmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKEHmngFqTM2ODA4MDY3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "705d912cbfc3e7afa17935736f70e644f88824fb", "author": {"user": {"login": "thokuest", "name": "Thomas K\u00fcstermann"}}, "url": "https://github.com/keycloak/keycloak/commit/705d912cbfc3e7afa17935736f70e644f88824fb", "committedDate": "2020-02-05T14:06:20Z", "message": "KEYCLOAK-12749 fix \"invalid state\" error due to IE requesting favicon\n\nInternet Explorer occasionally requests a favicon before doing the\nactual redirect to localhost. This commit adds Undertow to properly\nhandle those unwanted requests."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNjM1MjA0", "url": "https://github.com/keycloak/keycloak/pull/6734#pullrequestreview-362635204", "createdAt": "2020-02-21T13:42:05Z", "commit": {"oid": "705d912cbfc3e7afa17935736f70e644f88824fb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMzo0MjowNVrOFs3OKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDowOToxNlrOFs4CIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU4NjQxMQ==", "bodyText": "You can use org.keycloak.OAuth2Constants#ERROR_DESCRIPTION. The server should return OAuth2Constants#ERROR_DESCRIPTION and not \"error-description\".", "url": "https://github.com/keycloak/keycloak/pull/6734#discussion_r382586411", "createdAt": "2020-02-21T13:42:05Z", "author": {"login": "pedroigor"}, "path": "adapters/oidc/installed/src/main/java/org/keycloak/adapters/installed/KeycloakInstalled.java", "diffHunk": "@@ -613,96 +610,86 @@ private String readCode(Reader reader) throws IOException {\n         return sb.toString();\n     }\n \n+    KeycloakInstalled(int i) {\n \n-    public class CallbackListener extends Thread {\n+    }\n \n-        private ServerSocket server;\n+    class CallbackListener implements HttpHandler {\n+        private final CountDownLatch shutdownSignal = new CountDownLatch(1);\n \n         private String code;\n-\n         private String error;\n-\n         private String errorDescription;\n+        private String state;\n+        private Undertow server;\n \n-        private IOException errorException;\n+        private GracefulShutdownHandler gracefulShutdownHandler;\n \n-        private String state;\n+        public void start() {\n+            PathHandler pathHandler = Handlers.path().addExactPath(\"/\", this);\n+            AllowedMethodsHandler allowedMethodsHandler = new AllowedMethodsHandler(pathHandler, Methods.GET);\n+            gracefulShutdownHandler = Handlers.gracefulShutdown(allowedMethodsHandler);\n+\n+            server = Undertow.builder()\n+                    .addHttpListener(0, \"localhost\")\n+                    .setHandler(gracefulShutdownHandler).build();\n \n-        private Socket socket;\n+            server.start();\n+        }\n \n-        private HttpResponseWriter writer;\n+        public void stop() {\n+            server.stop();\n+        }\n \n-        public CallbackListener(HttpResponseWriter writer) throws IOException {\n-            this.writer = writer;\n-            server = new ServerSocket(0);\n+        public int getLocalPort() {\n+            return ((InetSocketAddress) server.getListenerInfo().get(0).getAddress()).getPort();\n+        }\n+\n+        public void await() throws InterruptedException {\n+            shutdownSignal.await();\n         }\n \n         @Override\n-        public void run() {\n-            try {\n-                socket = server.accept();\n-\n-                BufferedReader br = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n-                String request = br.readLine();\n-\n-                String url = request.split(\" \")[1];\n-                if (url.indexOf('?') >= 0) {\n-                    url = url.split(\"\\\\?\")[1];\n-                    String[] params = url.split(\"&\");\n-\n-                    for (String param : params) {\n-                        String[] p = param.split(\"=\");\n-                        if (p[0].equals(OAuth2Constants.CODE)) {\n-                            code = p[1];\n-                        } else if (p[0].equals(OAuth2Constants.ERROR)) {\n-                            error = p[1];\n-                        } else if (p[0].equals(\"error-description\")) {\n-                            errorDescription = p[1];\n-                        } else if (p[0].equals(OAuth2Constants.STATE)) {\n-                            state = p[1];\n-                        }\n-                    }\n-                }\n+        public void handleRequest(HttpServerExchange exchange) throws Exception {\n+            gracefulShutdownHandler.shutdown();\n \n-                OutputStreamWriter out = new OutputStreamWriter(socket.getOutputStream());\n-                PrintWriter pw = new PrintWriter(out);\n-                if (writer != null) {\n-                    System.err.println(\"Using a writer is deprecated.  Please remove its usage.  This is now handled by endpoint on server\");\n-                }\n+            if (!exchange.getQueryParameters().isEmpty()) {\n+                readQueryParameters(exchange);\n+            }\n \n-                if (error == null) {\n-                     if (writer != null) {\n-                         writer.success(pw, KeycloakInstalled.this);\n-                     } else {\n-                         pw.println(\"HTTP/1.1 302 Found\");\n-                         pw.println(\"Location: \" + deployment.getTokenUrl().replace(\"/token\", \"/delegated\"));\n+            exchange.setStatusCode(StatusCodes.FOUND);\n+            exchange.getResponseHeaders().add(Headers.LOCATION, getRedirectUrl());\n+            exchange.endExchange();\n \n-                     }\n-                } else {\n-                    if (writer != null) {\n-                        writer.failure(pw, KeycloakInstalled.this);\n-                    } else {\n-                        pw.println(\"HTTP/1.1 302 Found\");\n-                        pw.println(\"Location: \" + deployment.getTokenUrl().replace(\"/token\", \"/delegated?error=true\"));\n+            shutdownSignal.countDown();\n \n-                    }\n-                }\n-                pw.flush();\n-                socket.close();\n-            } catch (IOException e) {\n-                errorException = e;\n-            }\n+            ForkJoinPool.commonPool().execute(this::stop);\n+        }\n \n-            try {\n-                server.close();\n-            } catch (IOException e) {\n-            }\n+        private void readQueryParameters(HttpServerExchange exchange) {\n+            code = getQueryParameterIfPresent(exchange, OAuth2Constants.CODE);\n+            error = getQueryParameterIfPresent(exchange, OAuth2Constants.ERROR);\n+            errorDescription = getQueryParameterIfPresent(exchange, \"error-description\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "705d912cbfc3e7afa17935736f70e644f88824fb"}, "originalPosition": 326}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU5NDQxMA==", "bodyText": "Maybe you can set a single IO/Worker thread as follows:\n.setIoThreads(1)\n.setWorkerThreads(1)", "url": "https://github.com/keycloak/keycloak/pull/6734#discussion_r382594410", "createdAt": "2020-02-21T13:58:47Z", "author": {"login": "pedroigor"}, "path": "adapters/oidc/installed/src/main/java/org/keycloak/adapters/installed/KeycloakInstalled.java", "diffHunk": "@@ -613,96 +610,86 @@ private String readCode(Reader reader) throws IOException {\n         return sb.toString();\n     }\n \n+    KeycloakInstalled(int i) {\n \n-    public class CallbackListener extends Thread {\n+    }\n \n-        private ServerSocket server;\n+    class CallbackListener implements HttpHandler {\n+        private final CountDownLatch shutdownSignal = new CountDownLatch(1);\n \n         private String code;\n-\n         private String error;\n-\n         private String errorDescription;\n+        private String state;\n+        private Undertow server;\n \n-        private IOException errorException;\n+        private GracefulShutdownHandler gracefulShutdownHandler;\n \n-        private String state;\n+        public void start() {\n+            PathHandler pathHandler = Handlers.path().addExactPath(\"/\", this);\n+            AllowedMethodsHandler allowedMethodsHandler = new AllowedMethodsHandler(pathHandler, Methods.GET);\n+            gracefulShutdownHandler = Handlers.gracefulShutdown(allowedMethodsHandler);\n+\n+            server = Undertow.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "705d912cbfc3e7afa17935736f70e644f88824fb"}, "originalPosition": 228}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU5OTcxMw==", "bodyText": "We should probably advertise in our change notes the removal of HttpResponseWriter from the API?", "url": "https://github.com/keycloak/keycloak/pull/6734#discussion_r382599713", "createdAt": "2020-02-21T14:09:16Z", "author": {"login": "pedroigor"}, "path": "adapters/oidc/installed/src/main/java/org/keycloak/adapters/installed/KeycloakInstalled.java", "diffHunk": "@@ -613,96 +610,86 @@ private String readCode(Reader reader) throws IOException {\n         return sb.toString();\n     }\n \n+    KeycloakInstalled(int i) {\n \n-    public class CallbackListener extends Thread {\n+    }\n \n-        private ServerSocket server;\n+    class CallbackListener implements HttpHandler {\n+        private final CountDownLatch shutdownSignal = new CountDownLatch(1);\n \n         private String code;\n-\n         private String error;\n-\n         private String errorDescription;\n+        private String state;\n+        private Undertow server;\n \n-        private IOException errorException;\n+        private GracefulShutdownHandler gracefulShutdownHandler;\n \n-        private String state;\n+        public void start() {\n+            PathHandler pathHandler = Handlers.path().addExactPath(\"/\", this);\n+            AllowedMethodsHandler allowedMethodsHandler = new AllowedMethodsHandler(pathHandler, Methods.GET);\n+            gracefulShutdownHandler = Handlers.gracefulShutdown(allowedMethodsHandler);\n+\n+            server = Undertow.builder()\n+                    .addHttpListener(0, \"localhost\")\n+                    .setHandler(gracefulShutdownHandler).build();\n \n-        private Socket socket;\n+            server.start();\n+        }\n \n-        private HttpResponseWriter writer;\n+        public void stop() {\n+            server.stop();\n+        }\n \n-        public CallbackListener(HttpResponseWriter writer) throws IOException {\n-            this.writer = writer;\n-            server = new ServerSocket(0);\n+        public int getLocalPort() {\n+            return ((InetSocketAddress) server.getListenerInfo().get(0).getAddress()).getPort();\n+        }\n+\n+        public void await() throws InterruptedException {\n+            shutdownSignal.await();\n         }\n \n         @Override\n-        public void run() {\n-            try {\n-                socket = server.accept();\n-\n-                BufferedReader br = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n-                String request = br.readLine();\n-\n-                String url = request.split(\" \")[1];\n-                if (url.indexOf('?') >= 0) {\n-                    url = url.split(\"\\\\?\")[1];\n-                    String[] params = url.split(\"&\");\n-\n-                    for (String param : params) {\n-                        String[] p = param.split(\"=\");\n-                        if (p[0].equals(OAuth2Constants.CODE)) {\n-                            code = p[1];\n-                        } else if (p[0].equals(OAuth2Constants.ERROR)) {\n-                            error = p[1];\n-                        } else if (p[0].equals(\"error-description\")) {\n-                            errorDescription = p[1];\n-                        } else if (p[0].equals(OAuth2Constants.STATE)) {\n-                            state = p[1];\n-                        }\n-                    }\n-                }\n+        public void handleRequest(HttpServerExchange exchange) throws Exception {\n+            gracefulShutdownHandler.shutdown();\n \n-                OutputStreamWriter out = new OutputStreamWriter(socket.getOutputStream());\n-                PrintWriter pw = new PrintWriter(out);\n-                if (writer != null) {\n-                    System.err.println(\"Using a writer is deprecated.  Please remove its usage.  This is now handled by endpoint on server\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "705d912cbfc3e7afa17935736f70e644f88824fb"}, "originalPosition": 284}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbb54db1a1c134d2505240cba5c15c6d0b210338", "author": {"user": {"login": "thokuest", "name": "Thomas K\u00fcstermann"}}, "url": "https://github.com/keycloak/keycloak/commit/dbb54db1a1c134d2505240cba5c15c6d0b210338", "committedDate": "2020-02-21T16:39:19Z", "message": "KEYCLOAK-12749 single worker/IO thread, use OAUTH2 constants"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDgwNjcy", "url": "https://github.com/keycloak/keycloak/pull/6734#pullrequestreview-368080672", "createdAt": "2020-03-03T15:33:15Z", "commit": {"oid": "dbb54db1a1c134d2505240cba5c15c6d0b210338"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2627, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}