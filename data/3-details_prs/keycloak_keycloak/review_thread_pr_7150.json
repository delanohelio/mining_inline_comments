{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxMjQxMjA3", "number": 7150, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjowMDoxOFrOEDhKqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDo1MTozM1rOEGYrMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTI0NTg2OnYy", "diffSide": "RIGHT", "path": "adapters/oidc/js/src/main/resources/keycloak.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjowMDoxOFrOGglQpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjowMDoxOFrOGglQpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgxODA4NQ==", "bodyText": "If the current options already has a scope configured use that, otherwise use the scope that is configured on the kc (keycloak object) directly, if present.", "url": "https://github.com/keycloak/keycloak/pull/7150#discussion_r436818085", "createdAt": "2020-06-08T16:00:18Z", "author": {"login": "thomasdarimont"}, "path": "adapters/oidc/js/src/main/resources/keycloak.js", "diffHunk": "@@ -438,15 +438,13 @@\n                 baseUrl = kc.endpoints.authorize();\n             }\n \n-            var scope;\n-            if (options && options.scope) {\n-                if (options.scope.indexOf(\"openid\") != -1) {\n-                    scope = options.scope;\n-                } else {\n-                    scope = \"openid \" + options.scope;\n-                }\n-            } else {\n+            var scope = options && options.scope ? options.scope : kc.scope;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e8cad5ec62c12a7a36e2ac04842b5a61f05e309"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTI1MTE2OnYy", "diffSide": "RIGHT", "path": "adapters/oidc/js/src/main/resources/keycloak.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjowMTozMVrOGglT6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjowMTozMVrOGglT6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgxODkyMA==", "bodyText": "Store default scope from config object into keycloak instance as kc.scope", "url": "https://github.com/keycloak/keycloak/pull/7150#discussion_r436818920", "createdAt": "2020-06-08T16:01:31Z", "author": {"login": "thomasdarimont"}, "path": "adapters/oidc/js/src/main/resources/keycloak.js", "diffHunk": "@@ -825,6 +823,10 @@\n                 configUrl = 'keycloak.json';\n             } else if (typeof config === 'string') {\n                 configUrl = config;\n+            } else if (typeof config === \"object\") {\n+                if (config.scope) {\n+                    kc.scope = config.scope;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e8cad5ec62c12a7a36e2ac04842b5a61f05e309"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzkyOTM1OnYy", "diffSide": "RIGHT", "path": "adapters/oidc/js/src/main/resources/keycloak.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNToxNToxM1rOGih9Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxOToyMTozNVrOGjPMvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg2MTA3OQ==", "bodyText": "Be carefull here as typeof null === \"object\" as well.", "url": "https://github.com/keycloak/keycloak/pull/7150#discussion_r438861079", "createdAt": "2020-06-11T15:15:13Z", "author": {"login": "jonkoops"}, "path": "adapters/oidc/js/src/main/resources/keycloak.js", "diffHunk": "@@ -825,6 +823,10 @@\n                 configUrl = 'keycloak.json';\n             } else if (typeof config === 'string') {\n                 configUrl = config;\n+            } else if (typeof config === \"object\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce69d0a92478970609c53eaba79e9bb097e7ecf"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg2MzIzNQ==", "bodyText": "Good to know, but isn't this already handled by if (!config) { a few lines above?\nSee: \n  \n    \n      keycloak/adapters/oidc/js/src/main/resources/keycloak.js\n    \n    \n         Line 822\n      in\n      0ce69d0\n    \n    \n    \n    \n\n        \n          \n           if (!config) {", "url": "https://github.com/keycloak/keycloak/pull/7150#discussion_r438863235", "createdAt": "2020-06-11T15:18:17Z", "author": {"login": "thomasdarimont"}, "path": "adapters/oidc/js/src/main/resources/keycloak.js", "diffHunk": "@@ -825,6 +823,10 @@\n                 configUrl = 'keycloak.json';\n             } else if (typeof config === 'string') {\n                 configUrl = config;\n+            } else if (typeof config === \"object\") {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg2MTA3OQ=="}, "originalCommit": {"oid": "0ce69d0a92478970609c53eaba79e9bb097e7ecf"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYwMjM2Ng==", "bodyText": "Yeah, should be!", "url": "https://github.com/keycloak/keycloak/pull/7150#discussion_r439602366", "createdAt": "2020-06-12T19:21:35Z", "author": {"login": "jonkoops"}, "path": "adapters/oidc/js/src/main/resources/keycloak.js", "diffHunk": "@@ -825,6 +823,10 @@\n                 configUrl = 'keycloak.json';\n             } else if (typeof config === 'string') {\n                 configUrl = config;\n+            } else if (typeof config === \"object\") {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg2MTA3OQ=="}, "originalCommit": {"oid": "0ce69d0a92478970609c53eaba79e9bb097e7ecf"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTQ0OTQ0OnYy", "diffSide": "RIGHT", "path": "adapters/oidc/js/src/main/resources/keycloak.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMzozMjoyMlrOGjXk8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMzozMjoyMlrOGjXk8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczOTYzNA==", "bodyText": "I think this can do the same without using a ternary operation here.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        var scope = options && options.scope ? options.scope : kc.scope;\n          \n          \n            \n                        var scope = options && options.scope || kc.scope;\n          \n      \n    \n    \n  \n\nIt also looks like we can access the config passed into the constructor directly here so we don't need the kc.scope member.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        var scope = options && options.scope ? options.scope : kc.scope;\n          \n          \n            \n                        var scope = options && options.scope || config.scope;", "url": "https://github.com/keycloak/keycloak/pull/7150#discussion_r439739634", "createdAt": "2020-06-13T13:32:22Z", "author": {"login": "jonkoops"}, "path": "adapters/oidc/js/src/main/resources/keycloak.js", "diffHunk": "@@ -438,15 +438,13 @@\n                 baseUrl = kc.endpoints.authorize();\n             }\n \n-            var scope;\n-            if (options && options.scope) {\n-                if (options.scope.indexOf(\"openid\") != -1) {\n-                    scope = options.scope;\n-                } else {\n-                    scope = \"openid \" + options.scope;\n-                }\n-            } else {\n+            var scope = options && options.scope ? options.scope : kc.scope;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce69d0a92478970609c53eaba79e9bb097e7ecf"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTQ2ODYwOnYy", "diffSide": "RIGHT", "path": "adapters/oidc/js/src/main/resources/keycloak.js", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNDoxNDoxNlrOGjXu2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwOTowNToyOVrOHlh19g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0MjE2OQ==", "bodyText": "If we're going to make these changes we also need to make sure that the TypeScript definitions are updated.\nThe JSDoc on the scope field on the KeycloakLoginOptions interface must no longer be private and include some descriptive text for the field itself.\nAnd we'll have to add the same scope field to the KeycloakConfig interface which is used for the configuration passed into the constructor.", "url": "https://github.com/keycloak/keycloak/pull/7150#discussion_r439742169", "createdAt": "2020-06-13T14:14:16Z", "author": {"login": "jonkoops"}, "path": "adapters/oidc/js/src/main/resources/keycloak.js", "diffHunk": "@@ -438,15 +438,13 @@\n                 baseUrl = kc.endpoints.authorize();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce69d0a92478970609c53eaba79e9bb097e7ecf"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg4MzU1Mg==", "bodyText": "I eventually found some time to get back to this...\n@jonkoops can you point me to the TypeScript definitions that need to be changed for this?", "url": "https://github.com/keycloak/keycloak/pull/7150#discussion_r508883552", "createdAt": "2020-10-20T22:44:21Z", "author": {"login": "thomasdarimont"}, "path": "adapters/oidc/js/src/main/resources/keycloak.js", "diffHunk": "@@ -438,15 +438,13 @@\n                 baseUrl = kc.endpoints.authorize();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0MjE2OQ=="}, "originalCommit": {"oid": "0ce69d0a92478970609c53eaba79e9bb097e7ecf"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEwNjk0Mw==", "bodyText": "Sure, you can find them in the same directory right here.", "url": "https://github.com/keycloak/keycloak/pull/7150#discussion_r509106943", "createdAt": "2020-10-21T08:55:55Z", "author": {"login": "jonkoops"}, "path": "adapters/oidc/js/src/main/resources/keycloak.js", "diffHunk": "@@ -438,15 +438,13 @@\n                 baseUrl = kc.endpoints.authorize();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0MjE2OQ=="}, "originalCommit": {"oid": "0ce69d0a92478970609c53eaba79e9bb097e7ecf"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTExMzg0Ng==", "bodyText": "Hmm, I think this change perhaps has been removed? I don't remember the original code so I guess we can resolve this.", "url": "https://github.com/keycloak/keycloak/pull/7150#discussion_r509113846", "createdAt": "2020-10-21T09:05:29Z", "author": {"login": "jonkoops"}, "path": "adapters/oidc/js/src/main/resources/keycloak.js", "diffHunk": "@@ -438,15 +438,13 @@\n                 baseUrl = kc.endpoints.authorize();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0MjE2OQ=="}, "originalCommit": {"oid": "0ce69d0a92478970609c53eaba79e9bb097e7ecf"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDI1NzI3OnYy", "diffSide": "RIGHT", "path": "adapters/oidc/js/src/main/resources/keycloak.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMjowNjoxMFrOGkEXMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzozNzo0MFrOGlGIwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ3MzM5NA==", "bodyText": "we check the scope parameter for:\n\noptions are the login options\nkc.scope potentially derived from keycloak.json\nconfig.scope the explicit keycloak configuration.", "url": "https://github.com/keycloak/keycloak/pull/7150#discussion_r440473394", "createdAt": "2020-06-15T22:06:10Z", "author": {"login": "thomasdarimont"}, "path": "adapters/oidc/js/src/main/resources/keycloak.js", "diffHunk": "@@ -432,21 +436,19 @@\n             }\n \n             var baseUrl;\n-            if (options && options.action == 'register') {\n+            if (options && options.action === 'register') {\n                 baseUrl = kc.endpoints.register();\n             } else {\n                 baseUrl = kc.endpoints.authorize();\n             }\n \n-            var scope;\n-            if (options && options.scope) {\n-                if (options.scope.indexOf(\"openid\") != -1) {\n-                    scope = options.scope;\n-                } else {\n-                    scope = \"openid \" + options.scope;\n-                }\n-            } else {\n+            var scope = options && options.scope || kc.scope || config.scope;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b161a68c50908d8d2744d437430369f2565077cd"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ3NDc3Nw==", "bodyText": "It would be much better IMHO to create a dedicated config object from keycloak.json instead of \"parking\" the configuration in the kc keycloak instance, but this would require a larger refactoring...", "url": "https://github.com/keycloak/keycloak/pull/7150#discussion_r440474777", "createdAt": "2020-06-15T22:09:45Z", "author": {"login": "thomasdarimont"}, "path": "adapters/oidc/js/src/main/resources/keycloak.js", "diffHunk": "@@ -432,21 +436,19 @@\n             }\n \n             var baseUrl;\n-            if (options && options.action == 'register') {\n+            if (options && options.action === 'register') {\n                 baseUrl = kc.endpoints.register();\n             } else {\n                 baseUrl = kc.endpoints.authorize();\n             }\n \n-            var scope;\n-            if (options && options.scope) {\n-                if (options.scope.indexOf(\"openid\") != -1) {\n-                    scope = options.scope;\n-                } else {\n-                    scope = \"openid \" + options.scope;\n-                }\n-            } else {\n+            var scope = options && options.scope || kc.scope || config.scope;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ3MzM5NA=="}, "originalCommit": {"oid": "b161a68c50908d8d2744d437430369f2565077cd"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU1MTA0MA==", "bodyText": "Yeah, this is certainly something that is hard to follow as it is now. Should be re-factored in the future.", "url": "https://github.com/keycloak/keycloak/pull/7150#discussion_r441551040", "createdAt": "2020-06-17T13:37:40Z", "author": {"login": "jonkoops"}, "path": "adapters/oidc/js/src/main/resources/keycloak.js", "diffHunk": "@@ -432,21 +436,19 @@\n             }\n \n             var baseUrl;\n-            if (options && options.action == 'register') {\n+            if (options && options.action === 'register') {\n                 baseUrl = kc.endpoints.register();\n             } else {\n                 baseUrl = kc.endpoints.authorize();\n             }\n \n-            var scope;\n-            if (options && options.scope) {\n-                if (options.scope.indexOf(\"openid\") != -1) {\n-                    scope = options.scope;\n-                } else {\n-                    scope = \"openid \" + options.scope;\n-                }\n-            } else {\n+            var scope = options && options.scope || kc.scope || config.scope;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ3MzM5NA=="}, "originalCommit": {"oid": "b161a68c50908d8d2744d437430369f2565077cd"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzgzMDIxOnYy", "diffSide": "RIGHT", "path": "adapters/oidc/js/src/main/resources/keycloak.d.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODoxMzo1MVrOGknbXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMjozNDoxNlrOGkvd2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA0NzkwMw==", "bodyText": "Do we need the scope parameter in both KeycloakConfig and KeycloakInitOptions? KeycloakConfig is an equivalent of AdapterConfig class for Java adapters and it contains no scope parameter, so I would prefer to remove it, WDYT?", "url": "https://github.com/keycloak/keycloak/pull/7150#discussion_r441047903", "createdAt": "2020-06-16T18:13:51Z", "author": {"login": "mhajas"}, "path": "adapters/oidc/js/src/main/resources/keycloak.d.ts", "diffHunk": "@@ -49,9 +49,22 @@ declare namespace Keycloak {\n \t\t * Client identifier, example: 'myapp'\r\n \t\t */\r\n \t\tclientId: string;\r\n+\r\n+\t\t/**\r\n+\t\t * Scope to use for the 'scope' login url parameter.\r\n+\t\t * The scope 'openid' will be added to the scope if it is missing or undefined.\r\n+\t\t */\r\n+\t\tscope?: string;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b161a68c50908d8d2744d437430369f2565077cd"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE3OTYwOA==", "bodyText": "I didn't think of that - yes, you are right. I'll remove the prop again from Keycloak config.", "url": "https://github.com/keycloak/keycloak/pull/7150#discussion_r441179608", "createdAt": "2020-06-16T22:34:16Z", "author": {"login": "thomasdarimont"}, "path": "adapters/oidc/js/src/main/resources/keycloak.d.ts", "diffHunk": "@@ -49,9 +49,22 @@ declare namespace Keycloak {\n \t\t * Client identifier, example: 'myapp'\r\n \t\t */\r\n \t\tclientId: string;\r\n+\r\n+\t\t/**\r\n+\t\t * Scope to use for the 'scope' login url parameter.\r\n+\t\t * The scope 'openid' will be added to the scope if it is missing or undefined.\r\n+\t\t */\r\n+\t\tscope?: string;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA0NzkwMw=="}, "originalCommit": {"oid": "b161a68c50908d8d2744d437430369f2565077cd"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Nzg0OTcyOnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/javascript/JavascriptAdapterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODoxODoxNlrOGknntA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMjozMzoxOVrOGkvcbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1MTA2MA==", "bodyText": "If I am not mistaken, before this line, you can do also something like that.\nassertThat(jsDriver.getCurrentUrl(), constainsString(\"&scope=profile email phone\"))", "url": "https://github.com/keycloak/keycloak/pull/7150#discussion_r441051060", "createdAt": "2020-06-16T18:18:16Z", "author": {"login": "mhajas"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/javascript/JavascriptAdapterTest.java", "diffHunk": "@@ -400,6 +397,69 @@ public void loginRequiredAction() {\n                 .init(defaultArguments(), this::assertSuccessfullyLoggedIn);\n     }\n \n+    /**\n+     * Test for scope handling via explicit Keycloak configuration: <pre>{@code\n+     * new Keycloak({.... scope: \"profile email phone\"})\n+     * }</pre>\n+     * See KEYCLOAK-14412\n+     */\n+    @Test\n+    public void testOnLoadRequireLoginShouldHonorScopes() {\n+\n+        JSObjectBuilder config = JSObjectBuilder.create()\n+                .add(\"url\", authServerContextRootPage + \"/auth\")\n+                .add(\"realm\", REALM_NAME)\n+                .add(\"clientId\", CLIENT_ID)\n+                .add(\"scope\", \"profile email phone\") // phone is optional client scope\n+                ;\n+\n+        JSObjectBuilder initOptions = defaultArguments().loginRequiredOnLoad();\n+\n+        try {\n+            testExecutor.configure(config)\n+                        .init(initOptions);\n+            // This throws exception because when JavascriptExecutor waits for AsyncScript to finish\n+            // it is redirected to login page and executor gets no response\n+\n+            throw new RuntimeException(\"Probably the login-required OnLoad mode doesn't work, because testExecutor should fail with error that page was redirected.\");\n+        } catch (WebDriverException ex) {\n+            // should happen\n+        }\n+\n+        testExecutor.loginForm(testUser, this::assertOnTestAppUrl)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b161a68c50908d8d2744d437430369f2565077cd"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE3OTI0Ng==", "bodyText": "I gave this a try:\nassertThat(jsDriver.getCurrentUrl(), containsString(\"&scope=openid%20profile%20email%20phone\"));\nseems to work.", "url": "https://github.com/keycloak/keycloak/pull/7150#discussion_r441179246", "createdAt": "2020-06-16T22:33:19Z", "author": {"login": "thomasdarimont"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/javascript/JavascriptAdapterTest.java", "diffHunk": "@@ -400,6 +397,69 @@ public void loginRequiredAction() {\n                 .init(defaultArguments(), this::assertSuccessfullyLoggedIn);\n     }\n \n+    /**\n+     * Test for scope handling via explicit Keycloak configuration: <pre>{@code\n+     * new Keycloak({.... scope: \"profile email phone\"})\n+     * }</pre>\n+     * See KEYCLOAK-14412\n+     */\n+    @Test\n+    public void testOnLoadRequireLoginShouldHonorScopes() {\n+\n+        JSObjectBuilder config = JSObjectBuilder.create()\n+                .add(\"url\", authServerContextRootPage + \"/auth\")\n+                .add(\"realm\", REALM_NAME)\n+                .add(\"clientId\", CLIENT_ID)\n+                .add(\"scope\", \"profile email phone\") // phone is optional client scope\n+                ;\n+\n+        JSObjectBuilder initOptions = defaultArguments().loginRequiredOnLoad();\n+\n+        try {\n+            testExecutor.configure(config)\n+                        .init(initOptions);\n+            // This throws exception because when JavascriptExecutor waits for AsyncScript to finish\n+            // it is redirected to login page and executor gets no response\n+\n+            throw new RuntimeException(\"Probably the login-required OnLoad mode doesn't work, because testExecutor should fail with error that page was redirected.\");\n+        } catch (WebDriverException ex) {\n+            // should happen\n+        }\n+\n+        testExecutor.loginForm(testUser, this::assertOnTestAppUrl)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1MTA2MA=="}, "originalCommit": {"oid": "b161a68c50908d8d2744d437430369f2565077cd"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Nzg2ODA4OnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/javascript/JavascriptAdapterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODoyMTozNVrOGknzNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODoyMTozNVrOGknzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1NDAwNg==", "bodyText": "This doesn't need to be async script, it is used if we need an output from asynchronous function, in this case you can use simple return like this:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .executeAsyncScript(\"var callback = arguments[arguments.length - 1];\" +\n          \n          \n            \n                   .executeScript(\"return window.keycloak.tokenParsed.scope\", assertOutputContains(\"phone\"));", "url": "https://github.com/keycloak/keycloak/pull/7150#discussion_r441054006", "createdAt": "2020-06-16T18:21:35Z", "author": {"login": "mhajas"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/javascript/JavascriptAdapterTest.java", "diffHunk": "@@ -400,6 +397,69 @@ public void loginRequiredAction() {\n                 .init(defaultArguments(), this::assertSuccessfullyLoggedIn);\n     }\n \n+    /**\n+     * Test for scope handling via explicit Keycloak configuration: <pre>{@code\n+     * new Keycloak({.... scope: \"profile email phone\"})\n+     * }</pre>\n+     * See KEYCLOAK-14412\n+     */\n+    @Test\n+    public void testOnLoadRequireLoginShouldHonorScopes() {\n+\n+        JSObjectBuilder config = JSObjectBuilder.create()\n+                .add(\"url\", authServerContextRootPage + \"/auth\")\n+                .add(\"realm\", REALM_NAME)\n+                .add(\"clientId\", CLIENT_ID)\n+                .add(\"scope\", \"profile email phone\") // phone is optional client scope\n+                ;\n+\n+        JSObjectBuilder initOptions = defaultArguments().loginRequiredOnLoad();\n+\n+        try {\n+            testExecutor.configure(config)\n+                        .init(initOptions);\n+            // This throws exception because when JavascriptExecutor waits for AsyncScript to finish\n+            // it is redirected to login page and executor gets no response\n+\n+            throw new RuntimeException(\"Probably the login-required OnLoad mode doesn't work, because testExecutor should fail with error that page was redirected.\");\n+        } catch (WebDriverException ex) {\n+            // should happen\n+        }\n+\n+        testExecutor.loginForm(testUser, this::assertOnTestAppUrl)\n+                .init(initOptions, this::assertSuccessfullyLoggedIn)\n+        .executeAsyncScript(\"var callback = arguments[arguments.length - 1];\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b161a68c50908d8d2744d437430369f2565077cd"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Nzg3NzIxOnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/javascript/JavascriptAdapterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODoyMzoyNFrOGkn5LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNjo1MjoyOVrOGk3-cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1NTUzMg==", "bodyText": "Could you add a test also for the init function?", "url": "https://github.com/keycloak/keycloak/pull/7150#discussion_r441055532", "createdAt": "2020-06-16T18:23:24Z", "author": {"login": "mhajas"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/javascript/JavascriptAdapterTest.java", "diffHunk": "@@ -400,6 +397,69 @@ public void loginRequiredAction() {\n                 .init(defaultArguments(), this::assertSuccessfullyLoggedIn);\n     }\n \n+    /**\n+     * Test for scope handling via explicit Keycloak configuration: <pre>{@code\n+     * new Keycloak({.... scope: \"profile email phone\"})\n+     * }</pre>\n+     * See KEYCLOAK-14412\n+     */\n+    @Test\n+    public void testOnLoadRequireLoginShouldHonorScopes() {\n+\n+        JSObjectBuilder config = JSObjectBuilder.create()\n+                .add(\"url\", authServerContextRootPage + \"/auth\")\n+                .add(\"realm\", REALM_NAME)\n+                .add(\"clientId\", CLIENT_ID)\n+                .add(\"scope\", \"profile email phone\") // phone is optional client scope\n+                ;\n+\n+        JSObjectBuilder initOptions = defaultArguments().loginRequiredOnLoad();\n+\n+        try {\n+            testExecutor.configure(config)\n+                        .init(initOptions);\n+            // This throws exception because when JavascriptExecutor waits for AsyncScript to finish\n+            // it is redirected to login page and executor gets no response\n+\n+            throw new RuntimeException(\"Probably the login-required OnLoad mode doesn't work, because testExecutor should fail with error that page was redirected.\");\n+        } catch (WebDriverException ex) {\n+            // should happen\n+        }\n+\n+        testExecutor.loginForm(testUser, this::assertOnTestAppUrl)\n+                .init(initOptions, this::assertSuccessfullyLoggedIn)\n+        .executeAsyncScript(\"var callback = arguments[arguments.length - 1];\" +\n+                \"callback(window.keycloak.tokenParsed.scope)\", assertOutputContains(\"phone\"));\n+    }\n+\n+    /**\n+     * Test for scope handling via Keycloak configuration from {@code keycloak.json} : <pre>{@code\n+     * new Keycloak() -> keycloak.json {.... \"scope\": \"profile email phone\"}\n+     * }</pre>\n+     * See KEYCLOAK-14412\n+     */\n+    @Test // TODO findout why this test fails\n+    public void testConfigFromKeycloakJsonShouldHonorScopes() {\n+\n+        JSObjectBuilder initOptions = defaultArguments().loginRequiredOnLoad();\n+\n+        try {\n+            testExecutor.configure() // use keycloak.json from testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/resources/javascript/keycloak.json\n+                    .init(initOptions);\n+            // This throws exception because when JavascriptExecutor waits for AsyncScript to finish\n+            // it is redirected to login page and executor gets no response\n+\n+            throw new RuntimeException(\"Probably the login-required OnLoad mode doesn't work, because testExecutor should fail with error that page was redirected.\");\n+        } catch (WebDriverException ex) {\n+            // should happen\n+        }\n+\n+        testExecutor.loginForm(testUser, this::assertOnTestAppUrl)\n+                .init(initOptions, this::assertSuccessfullyLoggedIn)\n+                .executeAsyncScript(\"var callback = arguments[arguments.length - 1];\" +\n+                        \"callback(window.keycloak.tokenParsed.scope)\", assertOutputContains(\"phone\"));\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b161a68c50908d8d2744d437430369f2565077cd"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxOTAyNQ==", "bodyText": "There are now two tests, one for initOptions and another one loginOptions.", "url": "https://github.com/keycloak/keycloak/pull/7150#discussion_r441319025", "createdAt": "2020-06-17T06:52:29Z", "author": {"login": "thomasdarimont"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/javascript/JavascriptAdapterTest.java", "diffHunk": "@@ -400,6 +397,69 @@ public void loginRequiredAction() {\n                 .init(defaultArguments(), this::assertSuccessfullyLoggedIn);\n     }\n \n+    /**\n+     * Test for scope handling via explicit Keycloak configuration: <pre>{@code\n+     * new Keycloak({.... scope: \"profile email phone\"})\n+     * }</pre>\n+     * See KEYCLOAK-14412\n+     */\n+    @Test\n+    public void testOnLoadRequireLoginShouldHonorScopes() {\n+\n+        JSObjectBuilder config = JSObjectBuilder.create()\n+                .add(\"url\", authServerContextRootPage + \"/auth\")\n+                .add(\"realm\", REALM_NAME)\n+                .add(\"clientId\", CLIENT_ID)\n+                .add(\"scope\", \"profile email phone\") // phone is optional client scope\n+                ;\n+\n+        JSObjectBuilder initOptions = defaultArguments().loginRequiredOnLoad();\n+\n+        try {\n+            testExecutor.configure(config)\n+                        .init(initOptions);\n+            // This throws exception because when JavascriptExecutor waits for AsyncScript to finish\n+            // it is redirected to login page and executor gets no response\n+\n+            throw new RuntimeException(\"Probably the login-required OnLoad mode doesn't work, because testExecutor should fail with error that page was redirected.\");\n+        } catch (WebDriverException ex) {\n+            // should happen\n+        }\n+\n+        testExecutor.loginForm(testUser, this::assertOnTestAppUrl)\n+                .init(initOptions, this::assertSuccessfullyLoggedIn)\n+        .executeAsyncScript(\"var callback = arguments[arguments.length - 1];\" +\n+                \"callback(window.keycloak.tokenParsed.scope)\", assertOutputContains(\"phone\"));\n+    }\n+\n+    /**\n+     * Test for scope handling via Keycloak configuration from {@code keycloak.json} : <pre>{@code\n+     * new Keycloak() -> keycloak.json {.... \"scope\": \"profile email phone\"}\n+     * }</pre>\n+     * See KEYCLOAK-14412\n+     */\n+    @Test // TODO findout why this test fails\n+    public void testConfigFromKeycloakJsonShouldHonorScopes() {\n+\n+        JSObjectBuilder initOptions = defaultArguments().loginRequiredOnLoad();\n+\n+        try {\n+            testExecutor.configure() // use keycloak.json from testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/resources/javascript/keycloak.json\n+                    .init(initOptions);\n+            // This throws exception because when JavascriptExecutor waits for AsyncScript to finish\n+            // it is redirected to login page and executor gets no response\n+\n+            throw new RuntimeException(\"Probably the login-required OnLoad mode doesn't work, because testExecutor should fail with error that page was redirected.\");\n+        } catch (WebDriverException ex) {\n+            // should happen\n+        }\n+\n+        testExecutor.loginForm(testUser, this::assertOnTestAppUrl)\n+                .init(initOptions, this::assertSuccessfullyLoggedIn)\n+                .executeAsyncScript(\"var callback = arguments[arguments.length - 1];\" +\n+                        \"callback(window.keycloak.tokenParsed.scope)\", assertOutputContains(\"phone\"));\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1NTUzMg=="}, "originalCommit": {"oid": "b161a68c50908d8d2744d437430369f2565077cd"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTQ5MzIyOnYy", "diffSide": "RIGHT", "path": "adapters/oidc/js/src/main/resources/keycloak.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNjozNDoxOFrOGk3gLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNjo0OToxOFrOGk34rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxMTI3OA==", "bodyText": "I think this is not necessary. kc.skope will be used within the login function directly.", "url": "https://github.com/keycloak/keycloak/pull/7150#discussion_r441311278", "createdAt": "2020-06-17T06:34:18Z", "author": {"login": "mhajas"}, "path": "adapters/oidc/js/src/main/resources/keycloak.js", "diffHunk": "@@ -276,6 +280,7 @@\n                 };\n \n                 var options = {};\n+                options.scope = kc.scope;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8ead9df393e4656106ee31a9d49338db5562a2"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxNjg4OA==", "bodyText": "Yep, this was a left over from my experiments.", "url": "https://github.com/keycloak/keycloak/pull/7150#discussion_r441316888", "createdAt": "2020-06-17T06:47:50Z", "author": {"login": "thomasdarimont"}, "path": "adapters/oidc/js/src/main/resources/keycloak.js", "diffHunk": "@@ -276,6 +280,7 @@\n                 };\n \n                 var options = {};\n+                options.scope = kc.scope;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxMTI3OA=="}, "originalCommit": {"oid": "2c8ead9df393e4656106ee31a9d49338db5562a2"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxNzU1MQ==", "bodyText": "Just removed this line. Build is running.", "url": "https://github.com/keycloak/keycloak/pull/7150#discussion_r441317551", "createdAt": "2020-06-17T06:49:18Z", "author": {"login": "thomasdarimont"}, "path": "adapters/oidc/js/src/main/resources/keycloak.js", "diffHunk": "@@ -276,6 +280,7 @@\n                 };\n \n                 var options = {};\n+                options.scope = kc.scope;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxMTI3OA=="}, "originalCommit": {"oid": "2c8ead9df393e4656106ee31a9d49338db5562a2"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTU0Nzc3OnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/javascript/JavascriptAdapterTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNjo1NDoyN1rOGk4B6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzowMToxMFrOGk4PJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxOTkxMw==", "bodyText": "The JavascriptAdapter tests are a little bit confusing in this. They are mixing two variable names driver and jsDriver. Out testsuite has two browsers because JS adapter doesn't work in Htmlunit, which is the default browser for majority of tests (it is default because it is fast). So we added jsDriver as the second browser, which defaults to Phantomjs. This browser is able to work with JS adapter.\nNow the JavascriptStateValidator is there for checking the state after some Javascript piece of code was executed. It has three parameters (driver, output, events). At the moment, the driver parameter is maybe a little bit redundant here as we always use jsDriver, but this can change in the future. So it would be better to use it here like this:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        assertThat(jsDriver.getCurrentUrl(), containsString(\"&scope=openid%20profile%20email%20phone\"));\n          \n          \n            \n                        assertThat(driver.getCurrentUrl(), containsString(\"&scope=openid%20profile%20email%20phone\"));\n          \n      \n    \n    \n  \n\nthis way you use a webdriver provided by testExecutor and function (in this case login()) can decide what browser to use for validating the condition.\nOne more thing, you don't need to use the testExecutor for everything, the jsDriver (do not use driver outside of) is available even outside of testExecutor and it is perfectly ok to use it.", "url": "https://github.com/keycloak/keycloak/pull/7150#discussion_r441319913", "createdAt": "2020-06-17T06:54:27Z", "author": {"login": "mhajas"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/javascript/JavascriptAdapterTest.java", "diffHunk": "@@ -400,6 +398,58 @@ public void loginRequiredAction() {\n                 .init(defaultArguments(), this::assertSuccessfullyLoggedIn);\n     }\n \n+    /**\n+     * Test for scope handling via {@code initOptions}: <pre>{@code\n+     * Keycloak keycloak = new Keycloak(); keycloak.init({.... scope: \"profile email phone\"})\n+     * }</pre>\n+     * See KEYCLOAK-14412\n+     */\n+    @Test\n+    public void testScopeInInitOptionsShouldBeConsideredByLoginUrl() {\n+\n+        JSObjectBuilder initOptions = defaultArguments()\n+                .loginRequiredOnLoad()\n+                // phone is optional client scope\n+                .add(\"scope\", \"profile email phone\");\n+\n+        try {\n+            testExecutor.init(initOptions);\n+            // This throws exception because when JavascriptExecutor waits for AsyncScript to finish\n+            // it is redirected to login page and executor gets no response\n+\n+            throw new RuntimeException(\"Probably the login-required OnLoad mode doesn't work, because testExecutor should fail with error that page was redirected.\");\n+        } catch (WebDriverException ex) {\n+            // should happen\n+        }\n+\n+        testExecutor.loginForm(testUser, this::assertOnTestAppUrl)\n+                .init(initOptions, this::assertSuccessfullyLoggedIn)\n+        .executeScript(\"return window.keycloak.tokenParsed.scope\", assertOutputContains(\"phone\"));\n+    }\n+\n+    /**\n+     * Test for scope handling via {@code loginOptions}: <pre>{@code\n+     * Keycloak keycloak = new Keycloak(); keycloak.login({.... scope: \"profile email phone\"})\n+     * }</pre>\n+     * See KEYCLOAK-14412\n+     */\n+    @Test\n+    public void testScopeInLoginOptionsShouldBeConsideredByLoginUrl() {\n+\n+        try {\n+            testExecutor.configure()\n+                        .init(defaultArguments());\n+        } catch (WebDriverException ex) {\n+            // should happen\n+        }\n+\n+        JSObjectBuilder loginOptions = JSObjectBuilder.create().add(\"scope\", \"profile email phone\");\n+\n+        testExecutor.login(loginOptions.build(), (JavascriptStateValidator) (driver, output, events) -> {\n+            assertThat(jsDriver.getCurrentUrl(), containsString(\"&scope=openid%20profile%20email%20phone\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e29cc8dbe3b4fc7ec808fb2570cd34618d6270c"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMyMzMwMQ==", "bodyText": "Hopefully, it is understandable and I don't just confuse you more. I like our JS tests, but lots of people are struggling with them. It is almost done though,  just some nitpicks to fix", "url": "https://github.com/keycloak/keycloak/pull/7150#discussion_r441323301", "createdAt": "2020-06-17T07:01:10Z", "author": {"login": "mhajas"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/javascript/JavascriptAdapterTest.java", "diffHunk": "@@ -400,6 +398,58 @@ public void loginRequiredAction() {\n                 .init(defaultArguments(), this::assertSuccessfullyLoggedIn);\n     }\n \n+    /**\n+     * Test for scope handling via {@code initOptions}: <pre>{@code\n+     * Keycloak keycloak = new Keycloak(); keycloak.init({.... scope: \"profile email phone\"})\n+     * }</pre>\n+     * See KEYCLOAK-14412\n+     */\n+    @Test\n+    public void testScopeInInitOptionsShouldBeConsideredByLoginUrl() {\n+\n+        JSObjectBuilder initOptions = defaultArguments()\n+                .loginRequiredOnLoad()\n+                // phone is optional client scope\n+                .add(\"scope\", \"profile email phone\");\n+\n+        try {\n+            testExecutor.init(initOptions);\n+            // This throws exception because when JavascriptExecutor waits for AsyncScript to finish\n+            // it is redirected to login page and executor gets no response\n+\n+            throw new RuntimeException(\"Probably the login-required OnLoad mode doesn't work, because testExecutor should fail with error that page was redirected.\");\n+        } catch (WebDriverException ex) {\n+            // should happen\n+        }\n+\n+        testExecutor.loginForm(testUser, this::assertOnTestAppUrl)\n+                .init(initOptions, this::assertSuccessfullyLoggedIn)\n+        .executeScript(\"return window.keycloak.tokenParsed.scope\", assertOutputContains(\"phone\"));\n+    }\n+\n+    /**\n+     * Test for scope handling via {@code loginOptions}: <pre>{@code\n+     * Keycloak keycloak = new Keycloak(); keycloak.login({.... scope: \"profile email phone\"})\n+     * }</pre>\n+     * See KEYCLOAK-14412\n+     */\n+    @Test\n+    public void testScopeInLoginOptionsShouldBeConsideredByLoginUrl() {\n+\n+        try {\n+            testExecutor.configure()\n+                        .init(defaultArguments());\n+        } catch (WebDriverException ex) {\n+            // should happen\n+        }\n+\n+        JSObjectBuilder loginOptions = JSObjectBuilder.create().add(\"scope\", \"profile email phone\");\n+\n+        testExecutor.login(loginOptions.build(), (JavascriptStateValidator) (driver, output, events) -> {\n+            assertThat(jsDriver.getCurrentUrl(), containsString(\"&scope=openid%20profile%20email%20phone\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxOTkxMw=="}, "originalCommit": {"oid": "8e29cc8dbe3b4fc7ec808fb2570cd34618d6270c"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTU1MzQxOnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/javascript/JavascriptAdapterTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNjo1NTo1NVrOGk4FLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNToyNzoyNlrOGlLOqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMyMDc0OQ==", "bodyText": "You can put this here as well:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            assertThat(jsDriver.getCurrentUrl(), containsString(\"&scope=openid%20profile%20email%20phone\"));", "url": "https://github.com/keycloak/keycloak/pull/7150#discussion_r441320749", "createdAt": "2020-06-17T06:55:55Z", "author": {"login": "mhajas"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/javascript/JavascriptAdapterTest.java", "diffHunk": "@@ -400,6 +398,58 @@ public void loginRequiredAction() {\n                 .init(defaultArguments(), this::assertSuccessfullyLoggedIn);\n     }\n \n+    /**\n+     * Test for scope handling via {@code initOptions}: <pre>{@code\n+     * Keycloak keycloak = new Keycloak(); keycloak.init({.... scope: \"profile email phone\"})\n+     * }</pre>\n+     * See KEYCLOAK-14412\n+     */\n+    @Test\n+    public void testScopeInInitOptionsShouldBeConsideredByLoginUrl() {\n+\n+        JSObjectBuilder initOptions = defaultArguments()\n+                .loginRequiredOnLoad()\n+                // phone is optional client scope\n+                .add(\"scope\", \"profile email phone\");\n+\n+        try {\n+            testExecutor.init(initOptions);\n+            // This throws exception because when JavascriptExecutor waits for AsyncScript to finish\n+            // it is redirected to login page and executor gets no response\n+\n+            throw new RuntimeException(\"Probably the login-required OnLoad mode doesn't work, because testExecutor should fail with error that page was redirected.\");\n+        } catch (WebDriverException ex) {\n+            // should happen\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e29cc8dbe3b4fc7ec808fb2570cd34618d6270c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3OTUyMQ==", "bodyText": "This doesn't work here:\nExpected :a string containing \"&scope=openid%20profile%20email%20phone\"\nActual   :\"https://localhost:8543/auth/realms/test/protocol/openid-connect/auth?client_id=account&redirect_uri=https%3A%2F%2Flocalhost%3A8543%2Fauth%2Frealms%2Ftest%2Faccount%2Flogin-redirect&state=0%2F4c2c6895-ca59-491c-b874-2d440ee84732&response_type=code&scope=openid\"\n\nThe following test for the phone claim works though.", "url": "https://github.com/keycloak/keycloak/pull/7150#discussion_r441379521", "createdAt": "2020-06-17T08:39:06Z", "author": {"login": "thomasdarimont"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/javascript/JavascriptAdapterTest.java", "diffHunk": "@@ -400,6 +398,58 @@ public void loginRequiredAction() {\n                 .init(defaultArguments(), this::assertSuccessfullyLoggedIn);\n     }\n \n+    /**\n+     * Test for scope handling via {@code initOptions}: <pre>{@code\n+     * Keycloak keycloak = new Keycloak(); keycloak.init({.... scope: \"profile email phone\"})\n+     * }</pre>\n+     * See KEYCLOAK-14412\n+     */\n+    @Test\n+    public void testScopeInInitOptionsShouldBeConsideredByLoginUrl() {\n+\n+        JSObjectBuilder initOptions = defaultArguments()\n+                .loginRequiredOnLoad()\n+                // phone is optional client scope\n+                .add(\"scope\", \"profile email phone\");\n+\n+        try {\n+            testExecutor.init(initOptions);\n+            // This throws exception because when JavascriptExecutor waits for AsyncScript to finish\n+            // it is redirected to login page and executor gets no response\n+\n+            throw new RuntimeException(\"Probably the login-required OnLoad mode doesn't work, because testExecutor should fail with error that page was redirected.\");\n+        } catch (WebDriverException ex) {\n+            // should happen\n+        }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMyMDc0OQ=="}, "originalCommit": {"oid": "8e29cc8dbe3b4fc7ec808fb2570cd34618d6270c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYzNDQ3Mg==", "bodyText": "Weird. This works for me, are you sure you used the exact line I pasted here?", "url": "https://github.com/keycloak/keycloak/pull/7150#discussion_r441634472", "createdAt": "2020-06-17T15:27:26Z", "author": {"login": "mhajas"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/javascript/JavascriptAdapterTest.java", "diffHunk": "@@ -400,6 +398,58 @@ public void loginRequiredAction() {\n                 .init(defaultArguments(), this::assertSuccessfullyLoggedIn);\n     }\n \n+    /**\n+     * Test for scope handling via {@code initOptions}: <pre>{@code\n+     * Keycloak keycloak = new Keycloak(); keycloak.init({.... scope: \"profile email phone\"})\n+     * }</pre>\n+     * See KEYCLOAK-14412\n+     */\n+    @Test\n+    public void testScopeInInitOptionsShouldBeConsideredByLoginUrl() {\n+\n+        JSObjectBuilder initOptions = defaultArguments()\n+                .loginRequiredOnLoad()\n+                // phone is optional client scope\n+                .add(\"scope\", \"profile email phone\");\n+\n+        try {\n+            testExecutor.init(initOptions);\n+            // This throws exception because when JavascriptExecutor waits for AsyncScript to finish\n+            // it is redirected to login page and executor gets no response\n+\n+            throw new RuntimeException(\"Probably the login-required OnLoad mode doesn't work, because testExecutor should fail with error that page was redirected.\");\n+        } catch (WebDriverException ex) {\n+            // should happen\n+        }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMyMDc0OQ=="}, "originalCommit": {"oid": "8e29cc8dbe3b4fc7ec808fb2570cd34618d6270c"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTMwNjUwOnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/javascript/JavascriptTestExecutor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDo1MDoyMlrOGlJeJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzo0MDoxOVrOGlQQqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYwNTY3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return login((JSObjectBuilder)null, null);\n          \n          \n            \n                    return login((String)null, null);", "url": "https://github.com/keycloak/keycloak/pull/7150#discussion_r441605671", "createdAt": "2020-06-17T14:50:22Z", "author": {"login": "mhajas"}, "path": "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/javascript/JavascriptTestExecutor.java", "diffHunk": "@@ -39,13 +39,17 @@ protected JavascriptTestExecutor(WebDriver driver, OIDCLogin loginPage) {\n     }\n \n     public JavascriptTestExecutor login() {\n-        return login(null, null);\n+        return login((JSObjectBuilder)null, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "969c014001a9f239a8d10c3bdfc0733b24050729"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcxNjkwNQ==", "bodyText": "k", "url": "https://github.com/keycloak/keycloak/pull/7150#discussion_r441716905", "createdAt": "2020-06-17T17:40:19Z", "author": {"login": "thomasdarimont"}, "path": "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/javascript/JavascriptTestExecutor.java", "diffHunk": "@@ -39,13 +39,17 @@ protected JavascriptTestExecutor(WebDriver driver, OIDCLogin loginPage) {\n     }\n \n     public JavascriptTestExecutor login() {\n-        return login(null, null);\n+        return login((JSObjectBuilder)null, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYwNTY3MQ=="}, "originalCommit": {"oid": "969c014001a9f239a8d10c3bdfc0733b24050729"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTMwNzM1OnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/javascript/JavascriptTestExecutor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDo1MDozMlrOGlJerw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzo0MDoxN1rOGlQQhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYwNTgwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return login((JSObjectBuilder)null, validator);\n          \n          \n            \n                    return login((String)null, validator);", "url": "https://github.com/keycloak/keycloak/pull/7150#discussion_r441605807", "createdAt": "2020-06-17T14:50:32Z", "author": {"login": "mhajas"}, "path": "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/javascript/JavascriptTestExecutor.java", "diffHunk": "@@ -39,13 +39,17 @@ protected JavascriptTestExecutor(WebDriver driver, OIDCLogin loginPage) {\n     }\n \n     public JavascriptTestExecutor login() {\n-        return login(null, null);\n+        return login((JSObjectBuilder)null, null);\n     }\n     \n     public JavascriptTestExecutor login(JavascriptStateValidator validator) {\n-        return login(null, validator);\n+        return login((JSObjectBuilder)null, validator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "969c014001a9f239a8d10c3bdfc0733b24050729"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcxNjg3MA==", "bodyText": "k", "url": "https://github.com/keycloak/keycloak/pull/7150#discussion_r441716870", "createdAt": "2020-06-17T17:40:17Z", "author": {"login": "thomasdarimont"}, "path": "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/javascript/JavascriptTestExecutor.java", "diffHunk": "@@ -39,13 +39,17 @@ protected JavascriptTestExecutor(WebDriver driver, OIDCLogin loginPage) {\n     }\n \n     public JavascriptTestExecutor login() {\n-        return login(null, null);\n+        return login((JSObjectBuilder)null, null);\n     }\n     \n     public JavascriptTestExecutor login(JavascriptStateValidator validator) {\n-        return login(null, validator);\n+        return login((JSObjectBuilder)null, validator);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYwNTgwNw=="}, "originalCommit": {"oid": "969c014001a9f239a8d10c3bdfc0733b24050729"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTMxMTg3OnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/javascript/JavascriptAdapterTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDo1MTozM1rOGlJhow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzo0MDoxMlrOGlQQWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYwNjU2Mw==", "bodyText": "This try-catch block is not necessary. It is necessary only when you are using onLoad: login-required.", "url": "https://github.com/keycloak/keycloak/pull/7150#discussion_r441606563", "createdAt": "2020-06-17T14:51:33Z", "author": {"login": "mhajas"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/javascript/JavascriptAdapterTest.java", "diffHunk": "@@ -400,6 +398,58 @@ public void loginRequiredAction() {\n                 .init(defaultArguments(), this::assertSuccessfullyLoggedIn);\n     }\n \n+    /**\n+     * Test for scope handling via {@code initOptions}: <pre>{@code\n+     * Keycloak keycloak = new Keycloak(); keycloak.init({.... scope: \"profile email phone\"})\n+     * }</pre>\n+     * See KEYCLOAK-14412\n+     */\n+    @Test\n+    public void testScopeInInitOptionsShouldBeConsideredByLoginUrl() {\n+\n+        JSObjectBuilder initOptions = defaultArguments()\n+                .loginRequiredOnLoad()\n+                // phone is optional client scope\n+                .add(\"scope\", \"profile email phone\");\n+\n+        try {\n+            testExecutor.init(initOptions);\n+            // This throws exception because when JavascriptExecutor waits for AsyncScript to finish\n+            // it is redirected to login page and executor gets no response\n+\n+            throw new RuntimeException(\"Probably the login-required OnLoad mode doesn't work, because testExecutor should fail with error that page was redirected.\");\n+        } catch (WebDriverException ex) {\n+            // should happen\n+        }\n+\n+        testExecutor.loginForm(testUser, this::assertOnTestAppUrl)\n+                    .init(initOptions, this::assertSuccessfullyLoggedIn)\n+                    .executeScript(\"return window.keycloak.tokenParsed.scope\", assertOutputContains(\"phone\"));\n+    }\n+\n+    /**\n+     * Test for scope handling via {@code loginOptions}: <pre>{@code\n+     * Keycloak keycloak = new Keycloak(); keycloak.login({.... scope: \"profile email phone\"})\n+     * }</pre>\n+     * See KEYCLOAK-14412\n+     */\n+    @Test\n+    public void testScopeInLoginOptionsShouldBeConsideredByLoginUrl() {\n+\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "969c014001a9f239a8d10c3bdfc0733b24050729"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcxNjgyNQ==", "bodyText": "Okay, I'll remove the block.", "url": "https://github.com/keycloak/keycloak/pull/7150#discussion_r441716825", "createdAt": "2020-06-17T17:40:12Z", "author": {"login": "thomasdarimont"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/javascript/JavascriptAdapterTest.java", "diffHunk": "@@ -400,6 +398,58 @@ public void loginRequiredAction() {\n                 .init(defaultArguments(), this::assertSuccessfullyLoggedIn);\n     }\n \n+    /**\n+     * Test for scope handling via {@code initOptions}: <pre>{@code\n+     * Keycloak keycloak = new Keycloak(); keycloak.init({.... scope: \"profile email phone\"})\n+     * }</pre>\n+     * See KEYCLOAK-14412\n+     */\n+    @Test\n+    public void testScopeInInitOptionsShouldBeConsideredByLoginUrl() {\n+\n+        JSObjectBuilder initOptions = defaultArguments()\n+                .loginRequiredOnLoad()\n+                // phone is optional client scope\n+                .add(\"scope\", \"profile email phone\");\n+\n+        try {\n+            testExecutor.init(initOptions);\n+            // This throws exception because when JavascriptExecutor waits for AsyncScript to finish\n+            // it is redirected to login page and executor gets no response\n+\n+            throw new RuntimeException(\"Probably the login-required OnLoad mode doesn't work, because testExecutor should fail with error that page was redirected.\");\n+        } catch (WebDriverException ex) {\n+            // should happen\n+        }\n+\n+        testExecutor.loginForm(testUser, this::assertOnTestAppUrl)\n+                    .init(initOptions, this::assertSuccessfullyLoggedIn)\n+                    .executeScript(\"return window.keycloak.tokenParsed.scope\", assertOutputContains(\"phone\"));\n+    }\n+\n+    /**\n+     * Test for scope handling via {@code loginOptions}: <pre>{@code\n+     * Keycloak keycloak = new Keycloak(); keycloak.login({.... scope: \"profile email phone\"})\n+     * }</pre>\n+     * See KEYCLOAK-14412\n+     */\n+    @Test\n+    public void testScopeInLoginOptionsShouldBeConsideredByLoginUrl() {\n+\n+        try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYwNjU2Mw=="}, "originalCommit": {"oid": "969c014001a9f239a8d10c3bdfc0733b24050729"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3547, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}