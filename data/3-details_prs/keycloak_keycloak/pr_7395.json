{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwMzg0MDA0", "number": 7395, "title": "KEYCLOAK-14195 FAPI-RW Client Policy - Condition : Client - Client Role", "bodyText": "This PR is for KEYCLOAK-14195 Client Policy - Condition : Client - Client Role  that is a sub task of KEYCLOAK-13933 Client Policies whose design document is Client Policies .\nIt is also needed to pass FAPI-RW conformance tests (both FAPI-RW OP w/ MTLS and FAPI-RW OP w/ Private Key).", "createdAt": "2020-09-05T02:27:43Z", "url": "https://github.com/keycloak/keycloak/pull/7395", "merged": true, "mergeCommit": {"oid": "af2f18449b4ed287069f8eaeaa64a7c34004542a"}, "closed": true, "closedAt": "2020-09-10T16:34:21Z", "author": {"login": "tnorimat"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHLHixAFqTQ4NDk0Mjc5NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHjeC6AFqTQ4NjExNTU0NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0OTQyNzk1", "url": "https://github.com/keycloak/keycloak/pull/7395#pullrequestreview-484942795", "createdAt": "2020-09-09T12:11:20Z", "commit": {"oid": "e910adf76db84a5be75b068b789268de6790f709"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjoxMToyMFrOHPEUrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjoxMToyMFrOHPEUrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU2MTUxNg==", "bodyText": "Maybe it is possible to add the condition like \"if (log.isTraceEnabled()\" or something like that to save the iterations over the streams in case that logging is not enabled. Maybe very little performance improvement, but it will be probably there?", "url": "https://github.com/keycloak/keycloak/pull/7395#discussion_r485561516", "createdAt": "2020-09-09T12:11:20Z", "author": {"login": "mposolda"}, "path": "services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java", "diffHunk": "@@ -61,13 +60,10 @@ public ClientPolicyVote applyPolicy(ClientPolicyContext context) throws ClientPo\n     private boolean isRolesMatched(ClientModel client) {\n         if (client == null) return false;\n \n-        List<String> rolesForMatching = getRolesForMatching();\n+        Stream<String> rolesForMatching = getRolesStreamForMatching();\n         if (rolesForMatching == null) return false;\n \n-        client.getRoles().stream().forEach(i -> ClientPolicyLogger.log(logger, \"client role = \" + i.getName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e910adf76db84a5be75b068b789268de6790f709"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MTIxNjY4", "url": "https://github.com/keycloak/keycloak/pull/7395#pullrequestreview-485121668", "createdAt": "2020-09-09T15:19:38Z", "commit": {"oid": "e910adf76db84a5be75b068b789268de6790f709"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNToxOTozOFrOHPMkZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNTo0NTozMVrOHPNtug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY5NjYxNA==", "bodyText": "There is no need in else block here, one can do:\n if (roles == null) {\n      return null;\n}\nreturn roles.stream();", "url": "https://github.com/keycloak/keycloak/pull/7395#discussion_r485696614", "createdAt": "2020-09-09T15:19:38Z", "author": {"login": "valb3r"}, "path": "services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java", "diffHunk": "@@ -76,8 +72,14 @@ private boolean isRolesMatched(ClientModel client) {\n         return isMatched;\n     }\n \n-    private List<String> getRolesForMatching() {\n-        return componentModel.getConfig().get(TestClientRolesConditionFactory.ROLES);\n+    private Stream<String> getRolesStreamForMatching() {\n+        if (componentModel.getConfig() == null) return null;\n+        List<String> roles = componentModel.getConfig().get(ClientRolesConditionFactory.ROLES);\n+        if (roles == null) {\n+            return null;\n+        } else {\n+            return roles.stream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e910adf76db84a5be75b068b789268de6790f709"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcwOTQ3NA==", "bodyText": "This line seem to have performance bottleneck client.getRolesStream() stream is opened for each element of rolesForMatching\nI would propose something of (using Sets from Guava) as it may improve readabiliy - Sets.intersection instead of anyMatch(i -> anyMatch):\nprivate boolean isRolesMatched(ClientModel client) {\n        if (client == null) return false;\n\n        Set<String> rolesForMatching = getRolesStreamForMatching();\n        if (rolesForMatching == null) return false;\n\n        Set<String> clientRoles = client.getRolesStream().map(RoleModel::getName).collect(Collectors.toSet());\n        boolean isMatched = !Sets.intersection(clientRoles, rolesForMatching).isEmpty();\n        \n        if (isMatched) {\n            ClientPolicyLogger.log(logger, \"role matched.\");\n        } else {\n            ClientPolicyLogger.log(logger, \"role unmatched.\");\n        }\n        return isMatched;\n    }\n\n    private Set<String> getRolesStreamForMatching() {\n        if (componentModel.getConfig() == null) return null;\n        List<String> roles = componentModel.getConfig().get(ClientRolesConditionFactory.ROLES);\n        if (roles == null) {\n            return null;\n        }\n\n        return new HashSet<>(roles);\n    }\n\n@mposolda What do you think (gauva is already available in BOM)?", "url": "https://github.com/keycloak/keycloak/pull/7395#discussion_r485709474", "createdAt": "2020-09-09T15:37:27Z", "author": {"login": "valb3r"}, "path": "services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java", "diffHunk": "@@ -61,13 +60,10 @@ public ClientPolicyVote applyPolicy(ClientPolicyContext context) throws ClientPo\n     private boolean isRolesMatched(ClientModel client) {\n         if (client == null) return false;\n \n-        List<String> rolesForMatching = getRolesForMatching();\n+        Stream<String> rolesForMatching = getRolesStreamForMatching();\n         if (rolesForMatching == null) return false;\n \n-        client.getRoles().stream().forEach(i -> ClientPolicyLogger.log(logger, \"client role = \" + i.getName()));\n-        rolesForMatching.stream().forEach(i -> ClientPolicyLogger.log(logger, \"roles expected = \" + i));\n-\n-        boolean isMatched = rolesForMatching.stream().anyMatch(i->client.getRoles().stream().anyMatch(j->j.getName().equals(i)));\n+        boolean isMatched = rolesForMatching.anyMatch(i->client.getRolesStream().anyMatch(j->j.getName().equals(i)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e910adf76db84a5be75b068b789268de6790f709"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcxMDUwOA==", "bodyText": "ClientRolesCondition is duplicated many times, maybe we can introduce constant for it?", "url": "https://github.com/keycloak/keycloak/pull/7395#discussion_r485710508", "createdAt": "2020-09-09T15:38:53Z", "author": {"login": "valb3r"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java", "diffHunk": "@@ -399,21 +399,21 @@ public void testCreateUpdateDeleteConditionRuntime() throws ClientRegistrationEx\n         try {\n             successfulLoginAndLogout(clientId, clientSecret);\n  \n-            createCondition(\"TestClientRolesCondition\", TestClientRolesConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n+            createCondition(\"ClientRolesCondition\", ClientRolesConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e910adf76db84a5be75b068b789268de6790f709"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcxNTMxNQ==", "bodyText": "Suggest to introduce constant for \"ClientRolesCondition-alpha\"", "url": "https://github.com/keycloak/keycloak/pull/7395#discussion_r485715315", "createdAt": "2020-09-09T15:45:24Z", "author": {"login": "valb3r"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java", "diffHunk": "@@ -491,11 +491,11 @@ public void testMultiplePolicies() throws ClientRegistrationException, ClientPol\n         createPolicy(policyAlphaName, DefaultClientPolicyProviderFactory.PROVIDER_ID, null, null, null);\n         logger.info(\"... Created Policy : \" + policyAlphaName);\n \n-        createCondition(\"TestClientRolesCondition-alpha\", TestClientRolesConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n+        createCondition(\"ClientRolesCondition-alpha\", ClientRolesConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e910adf76db84a5be75b068b789268de6790f709"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcxNTM4Ng==", "bodyText": "Suggest to introduce constant for \"ClientRolesCondition-beta\"", "url": "https://github.com/keycloak/keycloak/pull/7395#discussion_r485715386", "createdAt": "2020-09-09T15:45:31Z", "author": {"login": "valb3r"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java", "diffHunk": "@@ -515,11 +515,11 @@ public void testMultiplePolicies() throws ClientRegistrationException, ClientPol\n         createPolicy(policyBetaName, DefaultClientPolicyProviderFactory.PROVIDER_ID, null, null, null);\n         logger.info(\"... Created Policy : \" + policyBetaName);\n \n-        createCondition(\"TestClientRolesCondition-beta\", TestClientRolesConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n+        createCondition(\"ClientRolesCondition-beta\", ClientRolesConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e910adf76db84a5be75b068b789268de6790f709"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ac107d0257f112eb780da79247cbd3d99106011", "author": {"user": {"login": "tnorimat", "name": "Takashi Norimatsu"}}, "url": "https://github.com/keycloak/keycloak/commit/6ac107d0257f112eb780da79247cbd3d99106011", "committedDate": "2020-09-10T10:07:33Z", "message": "KEYCLOAK-14195 FAPI-RW Client Policy - Condition : Client - Client Role"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e910adf76db84a5be75b068b789268de6790f709", "author": {"user": {"login": "tnorimat", "name": "Takashi Norimatsu"}}, "url": "https://github.com/keycloak/keycloak/commit/e910adf76db84a5be75b068b789268de6790f709", "committedDate": "2020-09-05T02:22:47Z", "message": "KEYCLOAK-14195 FAPI-RW Client Policy - Condition : Client - Client Role"}, "afterCommit": {"oid": "6ac107d0257f112eb780da79247cbd3d99106011", "author": {"user": {"login": "tnorimat", "name": "Takashi Norimatsu"}}, "url": "https://github.com/keycloak/keycloak/commit/6ac107d0257f112eb780da79247cbd3d99106011", "committedDate": "2020-09-10T10:07:33Z", "message": "KEYCLOAK-14195 FAPI-RW Client Policy - Condition : Client - Client Role"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MTE1NTQ1", "url": "https://github.com/keycloak/keycloak/pull/7395#pullrequestreview-486115545", "createdAt": "2020-09-10T16:34:12Z", "commit": {"oid": "6ac107d0257f112eb780da79247cbd3d99106011"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2795, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}