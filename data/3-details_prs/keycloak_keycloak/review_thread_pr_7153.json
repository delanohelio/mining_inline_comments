{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxMzkzNTk0", "number": 7153, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMTo0OTozNFrOED1fpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNjoyOTozMFrOEEKDQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDU3NjM2OnYy", "diffSide": "RIGHT", "path": "model/infinispan/src/main/java/org/keycloak/connections/infinispan/TopologyInfo.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMTo0OTozNVrOGhFj0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDo1Njo0OVrOGhOOwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM0NzI4MQ==", "bodyText": "@mposolda or @hmlnarik can you comment if this is okay?", "url": "https://github.com/keycloak/keycloak/pull/7153#discussion_r437347281", "createdAt": "2020-06-09T11:49:35Z", "author": {"login": "stianst"}, "path": "model/infinispan/src/main/java/org/keycloak/connections/infinispan/TopologyInfo.java", "diffHunk": "@@ -63,7 +63,7 @@ public TopologyInfo(EmbeddedCacheManager cacheManager, Config.Scope config, bool\n         if (!embedded) {\n             Transport transport = cacheManager.getTransport();\n             if (transport != null) {\n-                nodeName = transport.getAddress().toString();\n+                nodeName = cacheManager.getCacheManagerConfiguration().transport().nodeName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0d777354f8019b5ab8f2c3755c784090c15ee92"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ2MjkxOQ==", "bodyText": "I am not sure from the top of my head. Will be good to try to run server with/without property \"-Djboss.node.name=mynode1\" for the cluster/non-cluster configuration and check it behaves as expected. Also check the cluster/cross-dc tests are not broken by this change :)", "url": "https://github.com/keycloak/keycloak/pull/7153#discussion_r437462919", "createdAt": "2020-06-09T14:23:15Z", "author": {"login": "mposolda"}, "path": "model/infinispan/src/main/java/org/keycloak/connections/infinispan/TopologyInfo.java", "diffHunk": "@@ -63,7 +63,7 @@ public TopologyInfo(EmbeddedCacheManager cacheManager, Config.Scope config, bool\n         if (!embedded) {\n             Transport transport = cacheManager.getTransport();\n             if (transport != null) {\n-                nodeName = transport.getAddress().toString();\n+                nodeName = cacheManager.getCacheManagerConfiguration().transport().nodeName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM0NzI4MQ=="}, "originalCommit": {"oid": "f0d777354f8019b5ab8f2c3755c784090c15ee92"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4OTM0Ng==", "bodyText": "Cluster tests using the main dist are passing for me locally except for the AuthenticationSessionFailoverClusterTest, which is the one that makes more use of this change.\nI'm testing now without this change to see how it goes and try to find another approach to the problem if that is causing issues.\nBut CI is failing with \"failed to update database\", which is quite weird as this changeset is not supposed to cause that. Also investigating.", "url": "https://github.com/keycloak/keycloak/pull/7153#discussion_r437489346", "createdAt": "2020-06-09T14:56:49Z", "author": {"login": "pedroigor"}, "path": "model/infinispan/src/main/java/org/keycloak/connections/infinispan/TopologyInfo.java", "diffHunk": "@@ -63,7 +63,7 @@ public TopologyInfo(EmbeddedCacheManager cacheManager, Config.Scope config, bool\n         if (!embedded) {\n             Transport transport = cacheManager.getTransport();\n             if (transport != null) {\n-                nodeName = transport.getAddress().toString();\n+                nodeName = cacheManager.getCacheManagerConfiguration().transport().nodeName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM0NzI4MQ=="}, "originalCommit": {"oid": "f0d777354f8019b5ab8f2c3755c784090c15ee92"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzk0MTY3OnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/cluster/AuthenticationSessionFailoverClusterTest.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNjoyODoyNFrOGhmhbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOToyMzo0NVrOGiDJWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4NzM0Mg==", "bodyText": "Shouldn't we rather ignore this test for now and fix the problem properly instead of adding a work around to the test?", "url": "https://github.com/keycloak/keycloak/pull/7153#discussion_r437887342", "createdAt": "2020-06-10T06:28:24Z", "author": {"login": "stianst"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/cluster/AuthenticationSessionFailoverClusterTest.java", "diffHunk": "@@ -83,8 +84,17 @@ public void setup() {\n                 .build();\n \n         userId = ApiUtil.createUserAndResetPasswordWithAdminClient(adminClient.realm(\"test\"), user, \"password\");\n-        getCleanup().addUserId(userId);\n+        \n+        //TODO: weird behavior when doing Quarkus where only one of the required actions above are persisted, so we workaround by forcing an update to the user with the 2 actions we want\n+        UserResource userResource = adminClient.realm(testRealm.getRealm()).users().get(userId);\n+        UserRepresentation userRepresentation = userResource.toRepresentation();\n+        \n+        if (userRepresentation.getRequiredActions().size() < 2) {\n+            userRepresentation.setRequiredActions(user.getRequiredActions());\n+            userResource.update(userRepresentation);\n+        }\n \n+        getCleanup().addUserId(userId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a2703b3b5912c1f1528003071ffa11b2d612ff5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA0MjE1OQ==", "bodyText": "We could. But I would like to have this test running even though we didn't investigate further yet the reason for that issue. That is why I left that there.", "url": "https://github.com/keycloak/keycloak/pull/7153#discussion_r438042159", "createdAt": "2020-06-10T11:08:09Z", "author": {"login": "pedroigor"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/cluster/AuthenticationSessionFailoverClusterTest.java", "diffHunk": "@@ -83,8 +84,17 @@ public void setup() {\n                 .build();\n \n         userId = ApiUtil.createUserAndResetPasswordWithAdminClient(adminClient.realm(\"test\"), user, \"password\");\n-        getCleanup().addUserId(userId);\n+        \n+        //TODO: weird behavior when doing Quarkus where only one of the required actions above are persisted, so we workaround by forcing an update to the user with the 2 actions we want\n+        UserResource userResource = adminClient.realm(testRealm.getRealm()).users().get(userId);\n+        UserRepresentation userRepresentation = userResource.toRepresentation();\n+        \n+        if (userRepresentation.getRequiredActions().size() < 2) {\n+            userRepresentation.setRequiredActions(user.getRequiredActions());\n+            userResource.update(userRepresentation);\n+        }\n \n+        getCleanup().addUserId(userId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4NzM0Mg=="}, "originalCommit": {"oid": "8a2703b3b5912c1f1528003071ffa11b2d612ff5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIzMzkzMw==", "bodyText": "Not sure it is related, but it looks that AuthenticationSessionFailoverClusterTest is currently failing in master even for the default Wildfly distribution. Details in https://issues.redhat.com/browse/KEYCLOAK-14441", "url": "https://github.com/keycloak/keycloak/pull/7153#discussion_r438233933", "createdAt": "2020-06-10T15:57:11Z", "author": {"login": "mposolda"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/cluster/AuthenticationSessionFailoverClusterTest.java", "diffHunk": "@@ -83,8 +84,17 @@ public void setup() {\n                 .build();\n \n         userId = ApiUtil.createUserAndResetPasswordWithAdminClient(adminClient.realm(\"test\"), user, \"password\");\n-        getCleanup().addUserId(userId);\n+        \n+        //TODO: weird behavior when doing Quarkus where only one of the required actions above are persisted, so we workaround by forcing an update to the user with the 2 actions we want\n+        UserResource userResource = adminClient.realm(testRealm.getRealm()).users().get(userId);\n+        UserRepresentation userRepresentation = userResource.toRepresentation();\n+        \n+        if (userRepresentation.getRequiredActions().size() < 2) {\n+            userRepresentation.setRequiredActions(user.getRequiredActions());\n+            userResource.update(userRepresentation);\n+        }\n \n+        getCleanup().addUserId(userId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4NzM0Mg=="}, "originalCommit": {"oid": "8a2703b3b5912c1f1528003071ffa11b2d612ff5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI0Njk2Mw==", "bodyText": "Humm ... The same line and assertion. It seems to be related.\nWe had some related issues in Quarkus but they were fixed. So I was thinking it was Quarkus specific, but it seems to be a common issue.\nWe do have similar tests that perform the same initialization steps using required actions, so I'm pretty sure it is not an issue on the server.\nDo you have an idea when this issue started to happen? Or you just caught it?\nIt might be related to some changes I sent to the JPA model, although not sure because, as I said, some other tests perform the same steps and are working fine.", "url": "https://github.com/keycloak/keycloak/pull/7153#discussion_r438246963", "createdAt": "2020-06-10T16:13:52Z", "author": {"login": "pedroigor"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/cluster/AuthenticationSessionFailoverClusterTest.java", "diffHunk": "@@ -83,8 +84,17 @@ public void setup() {\n                 .build();\n \n         userId = ApiUtil.createUserAndResetPasswordWithAdminClient(adminClient.realm(\"test\"), user, \"password\");\n-        getCleanup().addUserId(userId);\n+        \n+        //TODO: weird behavior when doing Quarkus where only one of the required actions above are persisted, so we workaround by forcing an update to the user with the 2 actions we want\n+        UserResource userResource = adminClient.realm(testRealm.getRealm()).users().get(userId);\n+        UserRepresentation userRepresentation = userResource.toRepresentation();\n+        \n+        if (userRepresentation.getRequiredActions().size() < 2) {\n+            userRepresentation.setRequiredActions(user.getRequiredActions());\n+            userResource.update(userRepresentation);\n+        }\n \n+        getCleanup().addUserId(userId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4NzM0Mg=="}, "originalCommit": {"oid": "8a2703b3b5912c1f1528003071ffa11b2d612ff5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0MTg3Nw==", "bodyText": "@mposolda Found what the issue was. The test is creating the user from representation and resetting the password so that the UPDATE_PASSWORD RA is removed from the user.\nI've changed to set the password when creating the representation and avoid the reset password on create.\nDefinitely, not an issue on the server. But I'm not sure if something changed on the server that now has impacted this test in particular (or any other doing the same steps). Looks reasonable to me to remove required action if a reset password was done. So, the test is probably wrong.\nThis should also fixe https://issues.redhat.com/browse/KEYCLOAK-14441.", "url": "https://github.com/keycloak/keycloak/pull/7153#discussion_r438341877", "createdAt": "2020-06-10T18:55:43Z", "author": {"login": "pedroigor"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/cluster/AuthenticationSessionFailoverClusterTest.java", "diffHunk": "@@ -83,8 +84,17 @@ public void setup() {\n                 .build();\n \n         userId = ApiUtil.createUserAndResetPasswordWithAdminClient(adminClient.realm(\"test\"), user, \"password\");\n-        getCleanup().addUserId(userId);\n+        \n+        //TODO: weird behavior when doing Quarkus where only one of the required actions above are persisted, so we workaround by forcing an update to the user with the 2 actions we want\n+        UserResource userResource = adminClient.realm(testRealm.getRealm()).users().get(userId);\n+        UserRepresentation userRepresentation = userResource.toRepresentation();\n+        \n+        if (userRepresentation.getRequiredActions().size() < 2) {\n+            userRepresentation.setRequiredActions(user.getRequiredActions());\n+            userResource.update(userRepresentation);\n+        }\n \n+        getCleanup().addUserId(userId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4NzM0Mg=="}, "originalCommit": {"oid": "8a2703b3b5912c1f1528003071ffa11b2d612ff5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM1NjMxNA==", "bodyText": "+1 to remove required action from user after reset password was done. But it is strange that it didn't work like this before... Cool you figured where the issue is.", "url": "https://github.com/keycloak/keycloak/pull/7153#discussion_r438356314", "createdAt": "2020-06-10T19:23:45Z", "author": {"login": "mposolda"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/cluster/AuthenticationSessionFailoverClusterTest.java", "diffHunk": "@@ -83,8 +84,17 @@ public void setup() {\n                 .build();\n \n         userId = ApiUtil.createUserAndResetPasswordWithAdminClient(adminClient.realm(\"test\"), user, \"password\");\n-        getCleanup().addUserId(userId);\n+        \n+        //TODO: weird behavior when doing Quarkus where only one of the required actions above are persisted, so we workaround by forcing an update to the user with the 2 actions we want\n+        UserResource userResource = adminClient.realm(testRealm.getRealm()).users().get(userId);\n+        UserRepresentation userRepresentation = userResource.toRepresentation();\n+        \n+        if (userRepresentation.getRequiredActions().size() < 2) {\n+            userRepresentation.setRequiredActions(user.getRequiredActions());\n+            userResource.update(userRepresentation);\n+        }\n \n+        getCleanup().addUserId(userId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4NzM0Mg=="}, "originalCommit": {"oid": "8a2703b3b5912c1f1528003071ffa11b2d612ff5"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzk0MzcyOnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/cluster/ClientInvalidationClusterTest.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNjoyOTowN1rOGhmioQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMDowMTowOVrOGkAwww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4NzY0OQ==", "bodyText": "Not convinced about this change. Doesn't it suggest perhaps different behaviour on Quarkus?", "url": "https://github.com/keycloak/keycloak/pull/7153#discussion_r437887649", "createdAt": "2020-06-10T06:29:07Z", "author": {"login": "stianst"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/cluster/ClientInvalidationClusterTest.java", "diffHunk": "@@ -58,24 +59,38 @@ protected ClientRepresentation createEntity(ClientRepresentation client, Contain\n \n     @Override\n     protected ClientRepresentation readEntity(ClientRepresentation client, ContainerInfo node) {\n-        ClientRepresentation u = null;\n-        try {\n-            u = entityResource(client, node).toRepresentation();\n-        } catch (NotFoundException nfe) {\n-            // expected when client doesn't exist\n-        }\n+        ClientRepresentation u = Retry.call(new Retry.Supplier<ClientRepresentation>() {\n+            @Override\n+            public ClientRepresentation get(int iteration) {\n+                try {\n+                    return entityResource(client, node).toRepresentation();\n+                } catch (NotFoundException nfe) {\n+                    return null;\n+                }\n+            }\n+        }, 3, 5000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a2703b3b5912c1f1528003071ffa11b2d612ff5"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4Nzk3MA==", "bodyText": "Could it be as simple as async vs sync replication in Infinispan?", "url": "https://github.com/keycloak/keycloak/pull/7153#discussion_r437887970", "createdAt": "2020-06-10T06:29:58Z", "author": {"login": "stianst"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/cluster/ClientInvalidationClusterTest.java", "diffHunk": "@@ -58,24 +59,38 @@ protected ClientRepresentation createEntity(ClientRepresentation client, Contain\n \n     @Override\n     protected ClientRepresentation readEntity(ClientRepresentation client, ContainerInfo node) {\n-        ClientRepresentation u = null;\n-        try {\n-            u = entityResource(client, node).toRepresentation();\n-        } catch (NotFoundException nfe) {\n-            // expected when client doesn't exist\n-        }\n+        ClientRepresentation u = Retry.call(new Retry.Supplier<ClientRepresentation>() {\n+            @Override\n+            public ClientRepresentation get(int iteration) {\n+                try {\n+                    return entityResource(client, node).toRepresentation();\n+                } catch (NotFoundException nfe) {\n+                    return null;\n+                }\n+            }\n+        }, 3, 5000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4NzY0OQ=="}, "originalCommit": {"oid": "8a2703b3b5912c1f1528003071ffa11b2d612ff5"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA0MjU5Nw==", "bodyText": "Yes, SYNC seems to be better but yet not 100% stable.\nThis retry is not different than the pauses that are already there to wait for the cluster to rebalance.\nI can remove, but IMO it gives more stability.", "url": "https://github.com/keycloak/keycloak/pull/7153#discussion_r438042597", "createdAt": "2020-06-10T11:09:09Z", "author": {"login": "pedroigor"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/cluster/ClientInvalidationClusterTest.java", "diffHunk": "@@ -58,24 +59,38 @@ protected ClientRepresentation createEntity(ClientRepresentation client, Contain\n \n     @Override\n     protected ClientRepresentation readEntity(ClientRepresentation client, ContainerInfo node) {\n-        ClientRepresentation u = null;\n-        try {\n-            u = entityResource(client, node).toRepresentation();\n-        } catch (NotFoundException nfe) {\n-            // expected when client doesn't exist\n-        }\n+        ClientRepresentation u = Retry.call(new Retry.Supplier<ClientRepresentation>() {\n+            @Override\n+            public ClientRepresentation get(int iteration) {\n+                try {\n+                    return entityResource(client, node).toRepresentation();\n+                } catch (NotFoundException nfe) {\n+                    return null;\n+                }\n+            }\n+        }, 3, 5000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4NzY0OQ=="}, "originalCommit": {"oid": "8a2703b3b5912c1f1528003071ffa11b2d612ff5"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI0NTIxNQ==", "bodyText": "I think this change is fine. When there is some CRUD change of client on node1, it may take some small amount of time until the invalidation message arrives to node2 and hence for some small amount of time (few ms or so), the node2 can still contain the \"stale\" value.\nA bit related thing: when consider invalidation tests, the failover is not needed in them at all IMO. For the invalidation, you usually want to test that when you do some CRUD action on client (or other entity) on cluster node1, then you want to see that this change is visible on node2. Which means that cache was invalidated etc. This can be tested by directly accessing the nodes (node1 and node2) and don't use loadbalancer at all. In that case, failover of the nodes (killing/restarting etc) won't be needed at all. This approach is used in the cross-dc invalidation test InvalidationCrossDCTest and my vote would be to change cluster tests to alighn with this too. However this is likely out-of-scope of this PR and should be discussed elsewhere?", "url": "https://github.com/keycloak/keycloak/pull/7153#discussion_r438245215", "createdAt": "2020-06-10T16:11:42Z", "author": {"login": "mposolda"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/cluster/ClientInvalidationClusterTest.java", "diffHunk": "@@ -58,24 +59,38 @@ protected ClientRepresentation createEntity(ClientRepresentation client, Contain\n \n     @Override\n     protected ClientRepresentation readEntity(ClientRepresentation client, ContainerInfo node) {\n-        ClientRepresentation u = null;\n-        try {\n-            u = entityResource(client, node).toRepresentation();\n-        } catch (NotFoundException nfe) {\n-            // expected when client doesn't exist\n-        }\n+        ClientRepresentation u = Retry.call(new Retry.Supplier<ClientRepresentation>() {\n+            @Override\n+            public ClientRepresentation get(int iteration) {\n+                try {\n+                    return entityResource(client, node).toRepresentation();\n+                } catch (NotFoundException nfe) {\n+                    return null;\n+                }\n+            }\n+        }, 3, 5000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4NzY0OQ=="}, "originalCommit": {"oid": "8a2703b3b5912c1f1528003071ffa11b2d612ff5"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI0OTkwMg==", "bodyText": "I think so. I do like the way the test works because it is kind of reproducing a real-world scenario where you have an LB. Like most people are doing clustering, without cross-dc.", "url": "https://github.com/keycloak/keycloak/pull/7153#discussion_r438249902", "createdAt": "2020-06-10T16:18:25Z", "author": {"login": "pedroigor"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/cluster/ClientInvalidationClusterTest.java", "diffHunk": "@@ -58,24 +59,38 @@ protected ClientRepresentation createEntity(ClientRepresentation client, Contain\n \n     @Override\n     protected ClientRepresentation readEntity(ClientRepresentation client, ContainerInfo node) {\n-        ClientRepresentation u = null;\n-        try {\n-            u = entityResource(client, node).toRepresentation();\n-        } catch (NotFoundException nfe) {\n-            // expected when client doesn't exist\n-        }\n+        ClientRepresentation u = Retry.call(new Retry.Supplier<ClientRepresentation>() {\n+            @Override\n+            public ClientRepresentation get(int iteration) {\n+                try {\n+                    return entityResource(client, node).toRepresentation();\n+                } catch (NotFoundException nfe) {\n+                    return null;\n+                }\n+            }\n+        }, 3, 5000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4NzY0OQ=="}, "originalCommit": {"oid": "8a2703b3b5912c1f1528003071ffa11b2d612ff5"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM1OTM3MA==", "bodyText": "Well, for the invalidation you usually need to test that when you change something on node1, then the change is visible on node2 as the stuff was invalidated from the global cache.\nFor example when admin updates realm on node1, the other users connected in node2 should immediately see this update. This is real-world scenario and it doesn't use any failover (restart of the cluster nodes).\nIn general, I think the restart of server nodes is needed just when testing failover scenarios. For invalidation scenarios, restarting servers is uneccessary overhead, which increases the time of the test.", "url": "https://github.com/keycloak/keycloak/pull/7153#discussion_r438359370", "createdAt": "2020-06-10T19:29:53Z", "author": {"login": "mposolda"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/cluster/ClientInvalidationClusterTest.java", "diffHunk": "@@ -58,24 +59,38 @@ protected ClientRepresentation createEntity(ClientRepresentation client, Contain\n \n     @Override\n     protected ClientRepresentation readEntity(ClientRepresentation client, ContainerInfo node) {\n-        ClientRepresentation u = null;\n-        try {\n-            u = entityResource(client, node).toRepresentation();\n-        } catch (NotFoundException nfe) {\n-            // expected when client doesn't exist\n-        }\n+        ClientRepresentation u = Retry.call(new Retry.Supplier<ClientRepresentation>() {\n+            @Override\n+            public ClientRepresentation get(int iteration) {\n+                try {\n+                    return entityResource(client, node).toRepresentation();\n+                } catch (NotFoundException nfe) {\n+                    return null;\n+                }\n+            }\n+        }, 3, 5000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4NzY0OQ=="}, "originalCommit": {"oid": "8a2703b3b5912c1f1528003071ffa11b2d612ff5"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEyNzI4OA==", "bodyText": "I see that. My point is that it is related to HA and as such, you usually have an LB even though you don't need it to actually check invalidation.\nPlease, let me know if you want to remove it here or in a separate PR.", "url": "https://github.com/keycloak/keycloak/pull/7153#discussion_r440127288", "createdAt": "2020-06-15T12:04:37Z", "author": {"login": "pedroigor"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/cluster/ClientInvalidationClusterTest.java", "diffHunk": "@@ -58,24 +59,38 @@ protected ClientRepresentation createEntity(ClientRepresentation client, Contain\n \n     @Override\n     protected ClientRepresentation readEntity(ClientRepresentation client, ContainerInfo node) {\n-        ClientRepresentation u = null;\n-        try {\n-            u = entityResource(client, node).toRepresentation();\n-        } catch (NotFoundException nfe) {\n-            // expected when client doesn't exist\n-        }\n+        ClientRepresentation u = Retry.call(new Retry.Supplier<ClientRepresentation>() {\n+            @Override\n+            public ClientRepresentation get(int iteration) {\n+                try {\n+                    return entityResource(client, node).toRepresentation();\n+                } catch (NotFoundException nfe) {\n+                    return null;\n+                }\n+            }\n+        }, 3, 5000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4NzY0OQ=="}, "originalCommit": {"oid": "8a2703b3b5912c1f1528003071ffa11b2d612ff5"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM2MDgxNA==", "bodyText": "I think your change in this PR is fine.\nThe point I made is not directly related to your PR, but to the cluster invalidation tests in general - I think they don't need so much server restarts as they currently have. I would address this eventually in separate PR.", "url": "https://github.com/keycloak/keycloak/pull/7153#discussion_r440360814", "createdAt": "2020-06-15T18:19:12Z", "author": {"login": "mposolda"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/cluster/ClientInvalidationClusterTest.java", "diffHunk": "@@ -58,24 +59,38 @@ protected ClientRepresentation createEntity(ClientRepresentation client, Contain\n \n     @Override\n     protected ClientRepresentation readEntity(ClientRepresentation client, ContainerInfo node) {\n-        ClientRepresentation u = null;\n-        try {\n-            u = entityResource(client, node).toRepresentation();\n-        } catch (NotFoundException nfe) {\n-            // expected when client doesn't exist\n-        }\n+        ClientRepresentation u = Retry.call(new Retry.Supplier<ClientRepresentation>() {\n+            @Override\n+            public ClientRepresentation get(int iteration) {\n+                try {\n+                    return entityResource(client, node).toRepresentation();\n+                } catch (NotFoundException nfe) {\n+                    return null;\n+                }\n+            }\n+        }, 3, 5000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4NzY0OQ=="}, "originalCommit": {"oid": "8a2703b3b5912c1f1528003071ffa11b2d612ff5"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxNDQwMw==", "bodyText": "Cool. @stianst I think we have now a blessing from @mposolda !\nCreated https://issues.redhat.com/browse/KEYCLOAK-14480.", "url": "https://github.com/keycloak/keycloak/pull/7153#discussion_r440414403", "createdAt": "2020-06-15T20:01:09Z", "author": {"login": "pedroigor"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/cluster/ClientInvalidationClusterTest.java", "diffHunk": "@@ -58,24 +59,38 @@ protected ClientRepresentation createEntity(ClientRepresentation client, Contain\n \n     @Override\n     protected ClientRepresentation readEntity(ClientRepresentation client, ContainerInfo node) {\n-        ClientRepresentation u = null;\n-        try {\n-            u = entityResource(client, node).toRepresentation();\n-        } catch (NotFoundException nfe) {\n-            // expected when client doesn't exist\n-        }\n+        ClientRepresentation u = Retry.call(new Retry.Supplier<ClientRepresentation>() {\n+            @Override\n+            public ClientRepresentation get(int iteration) {\n+                try {\n+                    return entityResource(client, node).toRepresentation();\n+                } catch (NotFoundException nfe) {\n+                    return null;\n+                }\n+            }\n+        }, 3, 5000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4NzY0OQ=="}, "originalCommit": {"oid": "8a2703b3b5912c1f1528003071ffa11b2d612ff5"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzk0NDM1OnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/cluster/GroupInvalidationClusterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNjoyOTozMFrOGhmjFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNjoyOTozMFrOGhmjFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4Nzc2Ng==", "bodyText": "Same as above - this seems to indicate some strange behaviour on Quarkus", "url": "https://github.com/keycloak/keycloak/pull/7153#discussion_r437887766", "createdAt": "2020-06-10T06:29:30Z", "author": {"login": "stianst"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/cluster/GroupInvalidationClusterTest.java", "diffHunk": "@@ -66,24 +67,38 @@ protected GroupRepresentation createEntity(GroupRepresentation group, ContainerI\n \n     @Override\n     protected GroupRepresentation readEntity(GroupRepresentation group, ContainerInfo node) {\n-        GroupRepresentation u = null;\n-        try {\n-            u = entityResource(group, node).toRepresentation();\n-        } catch (NotFoundException nfe) {\n-            // expected when group doesn't exist\n-        }\n+        GroupRepresentation u = Retry.call(new Retry.Supplier<GroupRepresentation>() {\n+            @Override\n+            public GroupRepresentation get(int iteration) {\n+                try {\n+                    return entityResource(group, node).toRepresentation();\n+                } catch (NotFoundException nfe) {\n+                    return null;\n+                }\n+            }\n+        }, 3, 5000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a2703b3b5912c1f1528003071ffa11b2d612ff5"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3552, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}