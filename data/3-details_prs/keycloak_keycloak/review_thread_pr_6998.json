{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3MzI4Mzky", "number": 6998, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNzo0MTo0NFrOD14kUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNToxODowMlrOD2vZ8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODI3OTIwOnYy", "diffSide": "RIGHT", "path": "model/jpa/src/main/java/org/keycloak/models/jpa/entities/RealmEntity.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNzo0MTo0NFrOGLiXvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjoxMToxMFrOGMf4WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc1MDY1Mw==", "bodyText": "Is this change required for this PR?", "url": "https://github.com/keycloak/keycloak/pull/6998#discussion_r414750653", "createdAt": "2020-04-24T17:41:44Z", "author": {"login": "pedroigor"}, "path": "model/jpa/src/main/java/org/keycloak/models/jpa/entities/RealmEntity.java", "diffHunk": "@@ -137,7 +137,7 @@\n     @Column(name=\"EMAIL_THEME\")\n     protected String emailTheme;\n \n-    @OneToMany(cascade ={CascadeType.REMOVE}, orphanRemoval = true, mappedBy = \"realm\")\n+    @OneToMany(cascade ={CascadeType.REMOVE}, orphanRemoval = true, mappedBy = \"realm\", fetch = FetchType.EAGER)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d568717402e2226cc44bd2d157a218f98f56bf"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUzNTk2Nw==", "bodyText": "Yes, as otherwise I get a lazy load error in some tests. Would we ever load realms without attributes? I don't get why this is being lazy loaded in the first place.", "url": "https://github.com/keycloak/keycloak/pull/6998#discussion_r415535967", "createdAt": "2020-04-27T06:10:00Z", "author": {"login": "stianst"}, "path": "model/jpa/src/main/java/org/keycloak/models/jpa/entities/RealmEntity.java", "diffHunk": "@@ -137,7 +137,7 @@\n     @Column(name=\"EMAIL_THEME\")\n     protected String emailTheme;\n \n-    @OneToMany(cascade ={CascadeType.REMOVE}, orphanRemoval = true, mappedBy = \"realm\")\n+    @OneToMany(cascade ={CascadeType.REMOVE}, orphanRemoval = true, mappedBy = \"realm\", fetch = FetchType.EAGER)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc1MDY1Mw=="}, "originalCommit": {"oid": "a9d568717402e2226cc44bd2d157a218f98f56bf"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc1ODQyNQ==", "bodyText": "I'm just afraid that this can impact somehow performance when loading realms from the database. If we are sure that attributes are needed when loading a realm, that is OK.\nBut if this is not always true, I'm not sure about the impacts. We already have issues when having a lot of realms, so that could make things even worse?\nIf this was set to EAGER already and you were changing to LAZY, I would have the same considerations.\nSo, if you really think this is not a problem. I'm OK with it.", "url": "https://github.com/keycloak/keycloak/pull/6998#discussion_r415758425", "createdAt": "2020-04-27T12:11:10Z", "author": {"login": "pedroigor"}, "path": "model/jpa/src/main/java/org/keycloak/models/jpa/entities/RealmEntity.java", "diffHunk": "@@ -137,7 +137,7 @@\n     @Column(name=\"EMAIL_THEME\")\n     protected String emailTheme;\n \n-    @OneToMany(cascade ={CascadeType.REMOVE}, orphanRemoval = true, mappedBy = \"realm\")\n+    @OneToMany(cascade ={CascadeType.REMOVE}, orphanRemoval = true, mappedBy = \"realm\", fetch = FetchType.EAGER)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc1MDY1Mw=="}, "originalCommit": {"oid": "a9d568717402e2226cc44bd2d157a218f98f56bf"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODM0MTM1OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/headers/DefaultSecurityHeadersProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNzo1NzowMVrOGLi78Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjoxMDoyMFrOGMST-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc1OTkyMQ==", "bodyText": "I guess it is expected options set to null. Isn't better to always obtain it from the options method?", "url": "https://github.com/keycloak/keycloak/pull/6998#discussion_r414759921", "createdAt": "2020-04-24T17:57:01Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/headers/DefaultSecurityHeadersProvider.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.headers;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.models.BrowserSecurityHeaders;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+\n+import javax.ws.rs.InternalServerErrorException;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import java.util.Map;\n+\n+public class DefaultSecurityHeadersProvider implements SecurityHeadersProvider {\n+\n+    private static final Logger LOGGER = Logger.getLogger(DefaultSecurityHeadersProvider.class);\n+\n+    private final Map<String, String> headerValues;\n+    private final KeycloakSession session;\n+\n+    private DefaultSecurityHeadersOptions options;\n+\n+    public DefaultSecurityHeadersProvider(KeycloakSession session) {\n+        this.session = session;\n+\n+        RealmModel realm = session.getContext().getRealm();\n+        if (realm != null) {\n+            headerValues = realm.getBrowserSecurityHeaders();\n+        } else {\n+            headerValues = BrowserSecurityHeaders.defaultHeaders;\n+        }\n+    }\n+\n+    @Override\n+    public SecurityHeadersOptions options() {\n+        if (options == null) {\n+            options = new DefaultSecurityHeadersOptions();\n+        }\n+        return options;\n+    }\n+\n+    @Override\n+    public void addHeaders(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        if (options != null && options.isSkipHeaders()) {\n+            return;\n+        }\n+\n+        MediaType requestType = requestContext.getMediaType();\n+        MediaType responseType = responseContext.getMediaType();\n+        MultivaluedMap<String, Object> headers = responseContext.getHeaders();\n+\n+        if (responseType == null && !isEmptyMediaTypeAllowed(requestContext, responseContext)) {\n+            LOGGER.errorv(\"MediaType not set on path {0}, with response status {1}\", session.getContext().getUri().getRequestUri().getPath(), responseContext.getStatus());\n+            throw new InternalServerErrorException();\n+        }\n+\n+        if (isRest(requestType, responseType)) {\n+            addRestHeaders(headers);\n+        } else if (isHtml(requestType, responseType)) {\n+            addHtmlHeaders(headers);\n+        } else {\n+            addGenericHeaders(headers);\n+        }\n+    }\n+\n+    private void addGenericHeaders(MultivaluedMap<String, Object> headers) {\n+        addHeader(BrowserSecurityHeaders.STRICT_TRANSPORT_SECURITY_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_CONTENT_TYPE_OPTIONS_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_XSS_PROTECTION_KEY, headers);\n+    }\n+\n+    private void addRestHeaders(MultivaluedMap<String, Object> headers) {\n+        addHeader(BrowserSecurityHeaders.STRICT_TRANSPORT_SECURITY_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_FRAME_OPTIONS_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_CONTENT_TYPE_OPTIONS_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_XSS_PROTECTION_KEY, headers);\n+    }\n+\n+    private void addHtmlHeaders(MultivaluedMap<String, Object> headers) {\n+        BrowserSecurityHeaders.headerAttributeMap.keySet().forEach(k -> addHeader(k, headers));\n+\n+        // TODO This will be refactored as part of introducing a more strict CSP header\n+        if (options != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d568717402e2226cc44bd2d157a218f98f56bf"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUzNjEyMw==", "bodyText": "In 99% requests options is not set, so didn't want to create an extra object for all requests. Hence, doing null check instead.", "url": "https://github.com/keycloak/keycloak/pull/6998#discussion_r415536123", "createdAt": "2020-04-27T06:10:20Z", "author": {"login": "stianst"}, "path": "services/src/main/java/org/keycloak/headers/DefaultSecurityHeadersProvider.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.headers;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.models.BrowserSecurityHeaders;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+\n+import javax.ws.rs.InternalServerErrorException;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import java.util.Map;\n+\n+public class DefaultSecurityHeadersProvider implements SecurityHeadersProvider {\n+\n+    private static final Logger LOGGER = Logger.getLogger(DefaultSecurityHeadersProvider.class);\n+\n+    private final Map<String, String> headerValues;\n+    private final KeycloakSession session;\n+\n+    private DefaultSecurityHeadersOptions options;\n+\n+    public DefaultSecurityHeadersProvider(KeycloakSession session) {\n+        this.session = session;\n+\n+        RealmModel realm = session.getContext().getRealm();\n+        if (realm != null) {\n+            headerValues = realm.getBrowserSecurityHeaders();\n+        } else {\n+            headerValues = BrowserSecurityHeaders.defaultHeaders;\n+        }\n+    }\n+\n+    @Override\n+    public SecurityHeadersOptions options() {\n+        if (options == null) {\n+            options = new DefaultSecurityHeadersOptions();\n+        }\n+        return options;\n+    }\n+\n+    @Override\n+    public void addHeaders(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        if (options != null && options.isSkipHeaders()) {\n+            return;\n+        }\n+\n+        MediaType requestType = requestContext.getMediaType();\n+        MediaType responseType = responseContext.getMediaType();\n+        MultivaluedMap<String, Object> headers = responseContext.getHeaders();\n+\n+        if (responseType == null && !isEmptyMediaTypeAllowed(requestContext, responseContext)) {\n+            LOGGER.errorv(\"MediaType not set on path {0}, with response status {1}\", session.getContext().getUri().getRequestUri().getPath(), responseContext.getStatus());\n+            throw new InternalServerErrorException();\n+        }\n+\n+        if (isRest(requestType, responseType)) {\n+            addRestHeaders(headers);\n+        } else if (isHtml(requestType, responseType)) {\n+            addHtmlHeaders(headers);\n+        } else {\n+            addGenericHeaders(headers);\n+        }\n+    }\n+\n+    private void addGenericHeaders(MultivaluedMap<String, Object> headers) {\n+        addHeader(BrowserSecurityHeaders.STRICT_TRANSPORT_SECURITY_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_CONTENT_TYPE_OPTIONS_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_XSS_PROTECTION_KEY, headers);\n+    }\n+\n+    private void addRestHeaders(MultivaluedMap<String, Object> headers) {\n+        addHeader(BrowserSecurityHeaders.STRICT_TRANSPORT_SECURITY_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_FRAME_OPTIONS_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_CONTENT_TYPE_OPTIONS_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_XSS_PROTECTION_KEY, headers);\n+    }\n+\n+    private void addHtmlHeaders(MultivaluedMap<String, Object> headers) {\n+        BrowserSecurityHeaders.headerAttributeMap.keySet().forEach(k -> addHeader(k, headers));\n+\n+        // TODO This will be refactored as part of introducing a more strict CSP header\n+        if (options != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc1OTkyMQ=="}, "originalCommit": {"oid": "a9d568717402e2226cc44bd2d157a218f98f56bf"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODM5MDg4OnYy", "diffSide": "RIGHT", "path": "server-spi-private/src/main/java/org/keycloak/models/BrowserSecurityHeaders.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODowOToyMVrOGLjZBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjo0NToxNlrOGMTR2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc2NzM2Nw==", "bodyText": "I'm wondering if you really need to allow set object-src. Looking at the CSP header documentation, it seems to be recommended to always set as none as they are related to legacy HTML elements.", "url": "https://github.com/keycloak/keycloak/pull/6998#discussion_r414767367", "createdAt": "2020-04-24T18:09:21Z", "author": {"login": "pedroigor"}, "path": "server-spi-private/src/main/java/org/keycloak/models/BrowserSecurityHeaders.java", "diffHunk": "@@ -94,4 +94,57 @@\n         defaultHeaders = Collections.unmodifiableMap(dh);\n         headerAttributeMap = Collections.unmodifiableMap(headerMap);\n     }\n+\n+    public static class ContentSecurityPolicyBuilder {\n+\n+        private String frameSrc = \"self\";\n+        private String frameAncestors = \"self\";\n+        private String objectSrc = \"none\";\n+\n+        private boolean first;\n+        private StringBuilder sb;\n+\n+        public static ContentSecurityPolicyBuilder create() {\n+            return new ContentSecurityPolicyBuilder();\n+        }\n+\n+        public ContentSecurityPolicyBuilder frameSrc(String frameSrc) {\n+            this.frameSrc = frameSrc;\n+            return this;\n+        }\n+\n+        public ContentSecurityPolicyBuilder frameAncestors(String frameancestors) {\n+            this.frameAncestors = frameancestors;\n+            return this;\n+        }\n+\n+        public ContentSecurityPolicyBuilder objectSrc(String objectSrc) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d568717402e2226cc44bd2d157a218f98f56bf"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1MTk2Mg==", "bodyText": "Only included ability to modify object-src for completeness, but since it's not used (and probably won't be). I'll remove.", "url": "https://github.com/keycloak/keycloak/pull/6998#discussion_r415551962", "createdAt": "2020-04-27T06:45:16Z", "author": {"login": "stianst"}, "path": "server-spi-private/src/main/java/org/keycloak/models/BrowserSecurityHeaders.java", "diffHunk": "@@ -94,4 +94,57 @@\n         defaultHeaders = Collections.unmodifiableMap(dh);\n         headerAttributeMap = Collections.unmodifiableMap(headerMap);\n     }\n+\n+    public static class ContentSecurityPolicyBuilder {\n+\n+        private String frameSrc = \"self\";\n+        private String frameAncestors = \"self\";\n+        private String objectSrc = \"none\";\n+\n+        private boolean first;\n+        private StringBuilder sb;\n+\n+        public static ContentSecurityPolicyBuilder create() {\n+            return new ContentSecurityPolicyBuilder();\n+        }\n+\n+        public ContentSecurityPolicyBuilder frameSrc(String frameSrc) {\n+            this.frameSrc = frameSrc;\n+            return this;\n+        }\n+\n+        public ContentSecurityPolicyBuilder frameAncestors(String frameancestors) {\n+            this.frameAncestors = frameancestors;\n+            return this;\n+        }\n+\n+        public ContentSecurityPolicyBuilder objectSrc(String objectSrc) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc2NzM2Nw=="}, "originalCommit": {"oid": "a9d568717402e2226cc44bd2d157a218f98f56bf"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODU0Mzg1OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/headers/DefaultSecurityHeadersProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODo0ODoyN1rOGLkyLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODo0ODoyN1rOGLkyLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc5MDE4OA==", "bodyText": "Shouldn't this method change to allowIframeAnyAncestor?\nIf I understood it correctly, it servers to indicate that the iframe is allowed to be included regardless of the ancestor, like when redenring the login-status-iframe.html. It would make a bit more clear what is going on.", "url": "https://github.com/keycloak/keycloak/pull/6998#discussion_r414790188", "createdAt": "2020-04-24T18:48:27Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/headers/DefaultSecurityHeadersProvider.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.headers;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.models.BrowserSecurityHeaders;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+\n+import javax.ws.rs.InternalServerErrorException;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import java.util.Map;\n+\n+public class DefaultSecurityHeadersProvider implements SecurityHeadersProvider {\n+\n+    private static final Logger LOGGER = Logger.getLogger(DefaultSecurityHeadersProvider.class);\n+\n+    private final Map<String, String> headerValues;\n+    private final KeycloakSession session;\n+\n+    private DefaultSecurityHeadersOptions options;\n+\n+    public DefaultSecurityHeadersProvider(KeycloakSession session) {\n+        this.session = session;\n+\n+        RealmModel realm = session.getContext().getRealm();\n+        if (realm != null) {\n+            headerValues = realm.getBrowserSecurityHeaders();\n+        } else {\n+            headerValues = BrowserSecurityHeaders.defaultHeaders;\n+        }\n+    }\n+\n+    @Override\n+    public SecurityHeadersOptions options() {\n+        if (options == null) {\n+            options = new DefaultSecurityHeadersOptions();\n+        }\n+        return options;\n+    }\n+\n+    @Override\n+    public void addHeaders(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        if (options != null && options.isSkipHeaders()) {\n+            return;\n+        }\n+\n+        MediaType requestType = requestContext.getMediaType();\n+        MediaType responseType = responseContext.getMediaType();\n+        MultivaluedMap<String, Object> headers = responseContext.getHeaders();\n+\n+        if (responseType == null && !isEmptyMediaTypeAllowed(requestContext, responseContext)) {\n+            LOGGER.errorv(\"MediaType not set on path {0}, with response status {1}\", session.getContext().getUri().getRequestUri().getPath(), responseContext.getStatus());\n+            throw new InternalServerErrorException();\n+        }\n+\n+        if (isRest(requestType, responseType)) {\n+            addRestHeaders(headers);\n+        } else if (isHtml(requestType, responseType)) {\n+            addHtmlHeaders(headers);\n+        } else {\n+            addGenericHeaders(headers);\n+        }\n+    }\n+\n+    private void addGenericHeaders(MultivaluedMap<String, Object> headers) {\n+        addHeader(BrowserSecurityHeaders.STRICT_TRANSPORT_SECURITY_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_CONTENT_TYPE_OPTIONS_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_XSS_PROTECTION_KEY, headers);\n+    }\n+\n+    private void addRestHeaders(MultivaluedMap<String, Object> headers) {\n+        addHeader(BrowserSecurityHeaders.STRICT_TRANSPORT_SECURITY_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_FRAME_OPTIONS_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_CONTENT_TYPE_OPTIONS_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_XSS_PROTECTION_KEY, headers);\n+    }\n+\n+    private void addHtmlHeaders(MultivaluedMap<String, Object> headers) {\n+        BrowserSecurityHeaders.headerAttributeMap.keySet().forEach(k -> addHeader(k, headers));\n+\n+        // TODO This will be refactored as part of introducing a more strict CSP header\n+        if (options != null) {\n+            if (options.isAllowAsIframe()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d568717402e2226cc44bd2d157a218f98f56bf"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODU4MjkxOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/headers/DefaultSecurityHeadersProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODo1ODo0MFrOGLlJAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjo1Mjo0OVrOGMTgBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc5NjAzMw==", "bodyText": "If isAllowAsIframe is true you also don't want to have the frame-ancestor set to null too?", "url": "https://github.com/keycloak/keycloak/pull/6998#discussion_r414796033", "createdAt": "2020-04-24T18:58:40Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/headers/DefaultSecurityHeadersProvider.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.headers;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.models.BrowserSecurityHeaders;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+\n+import javax.ws.rs.InternalServerErrorException;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import java.util.Map;\n+\n+public class DefaultSecurityHeadersProvider implements SecurityHeadersProvider {\n+\n+    private static final Logger LOGGER = Logger.getLogger(DefaultSecurityHeadersProvider.class);\n+\n+    private final Map<String, String> headerValues;\n+    private final KeycloakSession session;\n+\n+    private DefaultSecurityHeadersOptions options;\n+\n+    public DefaultSecurityHeadersProvider(KeycloakSession session) {\n+        this.session = session;\n+\n+        RealmModel realm = session.getContext().getRealm();\n+        if (realm != null) {\n+            headerValues = realm.getBrowserSecurityHeaders();\n+        } else {\n+            headerValues = BrowserSecurityHeaders.defaultHeaders;\n+        }\n+    }\n+\n+    @Override\n+    public SecurityHeadersOptions options() {\n+        if (options == null) {\n+            options = new DefaultSecurityHeadersOptions();\n+        }\n+        return options;\n+    }\n+\n+    @Override\n+    public void addHeaders(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        if (options != null && options.isSkipHeaders()) {\n+            return;\n+        }\n+\n+        MediaType requestType = requestContext.getMediaType();\n+        MediaType responseType = responseContext.getMediaType();\n+        MultivaluedMap<String, Object> headers = responseContext.getHeaders();\n+\n+        if (responseType == null && !isEmptyMediaTypeAllowed(requestContext, responseContext)) {\n+            LOGGER.errorv(\"MediaType not set on path {0}, with response status {1}\", session.getContext().getUri().getRequestUri().getPath(), responseContext.getStatus());\n+            throw new InternalServerErrorException();\n+        }\n+\n+        if (isRest(requestType, responseType)) {\n+            addRestHeaders(headers);\n+        } else if (isHtml(requestType, responseType)) {\n+            addHtmlHeaders(headers);\n+        } else {\n+            addGenericHeaders(headers);\n+        }\n+    }\n+\n+    private void addGenericHeaders(MultivaluedMap<String, Object> headers) {\n+        addHeader(BrowserSecurityHeaders.STRICT_TRANSPORT_SECURITY_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_CONTENT_TYPE_OPTIONS_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_XSS_PROTECTION_KEY, headers);\n+    }\n+\n+    private void addRestHeaders(MultivaluedMap<String, Object> headers) {\n+        addHeader(BrowserSecurityHeaders.STRICT_TRANSPORT_SECURITY_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_FRAME_OPTIONS_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_CONTENT_TYPE_OPTIONS_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_XSS_PROTECTION_KEY, headers);\n+    }\n+\n+    private void addHtmlHeaders(MultivaluedMap<String, Object> headers) {\n+        BrowserSecurityHeaders.headerAttributeMap.keySet().forEach(k -> addHeader(k, headers));\n+\n+        // TODO This will be refactored as part of introducing a more strict CSP header\n+        if (options != null) {\n+            if (options.isAllowAsIframe()) {\n+                headers.remove(BrowserSecurityHeaders.X_FRAME_OPTIONS);\n+\n+                String value = BrowserSecurityHeaders.ContentSecurityPolicyBuilder.create().frameAncestors(null).build();\n+                headers.putSingle(BrowserSecurityHeaders.CONTENT_SECURITY_POLICY, value);\n+            }\n+\n+            String allowedFrameSrc = options.getAllowedFrameSrc();\n+            if (allowedFrameSrc != null) {\n+                if (BrowserSecurityHeaders.CONTENT_SECURITY_POLICY_DEFAULT.equals(headers.getFirst(BrowserSecurityHeaders.CONTENT_SECURITY_POLICY))) {\n+                    String value = BrowserSecurityHeaders.ContentSecurityPolicyBuilder.create().frameSrc(allowedFrameSrc).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d568717402e2226cc44bd2d157a218f98f56bf"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1NTU4OA==", "bodyText": "Changed the way this is handled.", "url": "https://github.com/keycloak/keycloak/pull/6998#discussion_r415555588", "createdAt": "2020-04-27T06:52:49Z", "author": {"login": "stianst"}, "path": "services/src/main/java/org/keycloak/headers/DefaultSecurityHeadersProvider.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.headers;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.models.BrowserSecurityHeaders;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+\n+import javax.ws.rs.InternalServerErrorException;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import java.util.Map;\n+\n+public class DefaultSecurityHeadersProvider implements SecurityHeadersProvider {\n+\n+    private static final Logger LOGGER = Logger.getLogger(DefaultSecurityHeadersProvider.class);\n+\n+    private final Map<String, String> headerValues;\n+    private final KeycloakSession session;\n+\n+    private DefaultSecurityHeadersOptions options;\n+\n+    public DefaultSecurityHeadersProvider(KeycloakSession session) {\n+        this.session = session;\n+\n+        RealmModel realm = session.getContext().getRealm();\n+        if (realm != null) {\n+            headerValues = realm.getBrowserSecurityHeaders();\n+        } else {\n+            headerValues = BrowserSecurityHeaders.defaultHeaders;\n+        }\n+    }\n+\n+    @Override\n+    public SecurityHeadersOptions options() {\n+        if (options == null) {\n+            options = new DefaultSecurityHeadersOptions();\n+        }\n+        return options;\n+    }\n+\n+    @Override\n+    public void addHeaders(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        if (options != null && options.isSkipHeaders()) {\n+            return;\n+        }\n+\n+        MediaType requestType = requestContext.getMediaType();\n+        MediaType responseType = responseContext.getMediaType();\n+        MultivaluedMap<String, Object> headers = responseContext.getHeaders();\n+\n+        if (responseType == null && !isEmptyMediaTypeAllowed(requestContext, responseContext)) {\n+            LOGGER.errorv(\"MediaType not set on path {0}, with response status {1}\", session.getContext().getUri().getRequestUri().getPath(), responseContext.getStatus());\n+            throw new InternalServerErrorException();\n+        }\n+\n+        if (isRest(requestType, responseType)) {\n+            addRestHeaders(headers);\n+        } else if (isHtml(requestType, responseType)) {\n+            addHtmlHeaders(headers);\n+        } else {\n+            addGenericHeaders(headers);\n+        }\n+    }\n+\n+    private void addGenericHeaders(MultivaluedMap<String, Object> headers) {\n+        addHeader(BrowserSecurityHeaders.STRICT_TRANSPORT_SECURITY_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_CONTENT_TYPE_OPTIONS_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_XSS_PROTECTION_KEY, headers);\n+    }\n+\n+    private void addRestHeaders(MultivaluedMap<String, Object> headers) {\n+        addHeader(BrowserSecurityHeaders.STRICT_TRANSPORT_SECURITY_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_FRAME_OPTIONS_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_CONTENT_TYPE_OPTIONS_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_XSS_PROTECTION_KEY, headers);\n+    }\n+\n+    private void addHtmlHeaders(MultivaluedMap<String, Object> headers) {\n+        BrowserSecurityHeaders.headerAttributeMap.keySet().forEach(k -> addHeader(k, headers));\n+\n+        // TODO This will be refactored as part of introducing a more strict CSP header\n+        if (options != null) {\n+            if (options.isAllowAsIframe()) {\n+                headers.remove(BrowserSecurityHeaders.X_FRAME_OPTIONS);\n+\n+                String value = BrowserSecurityHeaders.ContentSecurityPolicyBuilder.create().frameAncestors(null).build();\n+                headers.putSingle(BrowserSecurityHeaders.CONTENT_SECURITY_POLICY, value);\n+            }\n+\n+            String allowedFrameSrc = options.getAllowedFrameSrc();\n+            if (allowedFrameSrc != null) {\n+                if (BrowserSecurityHeaders.CONTENT_SECURITY_POLICY_DEFAULT.equals(headers.getFirst(BrowserSecurityHeaders.CONTENT_SECURITY_POLICY))) {\n+                    String value = BrowserSecurityHeaders.ContentSecurityPolicyBuilder.create().frameSrc(allowedFrameSrc).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc5NjAzMw=="}, "originalCommit": {"oid": "a9d568717402e2226cc44bd2d157a218f98f56bf"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NzA3NDkzOnYy", "diffSide": "RIGHT", "path": "server-spi-private/src/main/java/org/keycloak/models/BrowserSecurityHeaders.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDo0NToyMFrOGMm_7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNzo0NDo0MlrOGNHENw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg3NTA1NA==", "bodyText": "Is it intentional, that ability to set \"objectSrc\" is missing?", "url": "https://github.com/keycloak/keycloak/pull/6998#discussion_r415875054", "createdAt": "2020-04-27T14:45:20Z", "author": {"login": "mposolda"}, "path": "server-spi-private/src/main/java/org/keycloak/models/BrowserSecurityHeaders.java", "diffHunk": "@@ -94,4 +94,52 @@\n         defaultHeaders = Collections.unmodifiableMap(dh);\n         headerAttributeMap = Collections.unmodifiableMap(headerMap);\n     }\n+\n+    public static class ContentSecurityPolicyBuilder {\n+\n+        private String frameSrc = \"self\";\n+        private String frameAncestors = \"self\";\n+        private String objectSrc = \"none\";\n+\n+        private boolean first;\n+        private StringBuilder sb;\n+\n+        public static ContentSecurityPolicyBuilder create() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d0e9ad85eec5eca3e4104ad4e30f3a3328bee8b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM1OTUwMA==", "bodyText": "Yes, I added it initially, but @pedroigor mentioned that it probably isn't something folks will want to set, so removed it. We are planning on introducing stricter CSP header soon and I imagine this will need updating then, also if someone wants it, it's just a quick PR away ;)", "url": "https://github.com/keycloak/keycloak/pull/6998#discussion_r416359500", "createdAt": "2020-04-28T06:26:14Z", "author": {"login": "stianst"}, "path": "server-spi-private/src/main/java/org/keycloak/models/BrowserSecurityHeaders.java", "diffHunk": "@@ -94,4 +94,52 @@\n         defaultHeaders = Collections.unmodifiableMap(dh);\n         headerAttributeMap = Collections.unmodifiableMap(headerMap);\n     }\n+\n+    public static class ContentSecurityPolicyBuilder {\n+\n+        private String frameSrc = \"self\";\n+        private String frameAncestors = \"self\";\n+        private String objectSrc = \"none\";\n+\n+        private boolean first;\n+        private StringBuilder sb;\n+\n+        public static ContentSecurityPolicyBuilder create() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg3NTA1NA=="}, "originalCommit": {"oid": "3d0e9ad85eec5eca3e4104ad4e30f3a3328bee8b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwMDQzOQ==", "bodyText": "Ah Ok, Seeing Pedro's comment now :) Thanks for explain", "url": "https://github.com/keycloak/keycloak/pull/6998#discussion_r416400439", "createdAt": "2020-04-28T07:44:42Z", "author": {"login": "mposolda"}, "path": "server-spi-private/src/main/java/org/keycloak/models/BrowserSecurityHeaders.java", "diffHunk": "@@ -94,4 +94,52 @@\n         defaultHeaders = Collections.unmodifiableMap(dh);\n         headerAttributeMap = Collections.unmodifiableMap(headerMap);\n     }\n+\n+    public static class ContentSecurityPolicyBuilder {\n+\n+        private String frameSrc = \"self\";\n+        private String frameAncestors = \"self\";\n+        private String objectSrc = \"none\";\n+\n+        private boolean first;\n+        private StringBuilder sb;\n+\n+        public static ContentSecurityPolicyBuilder create() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg3NTA1NA=="}, "originalCommit": {"oid": "3d0e9ad85eec5eca3e4104ad4e30f3a3328bee8b"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NzI2Mzg3OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/headers/DefaultSecurityHeadersProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNToxODowMlrOGMovEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNzo0NTowMVrOGNHFHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkwMzUwNg==", "bodyText": "Not sure if it will be beneficial to have this method \"protected\" to allow easier overriding of this method in case that someone wants to have custom provider? Same question for \"addRestHeaders\", \"addHtmlHeaders\", \"addHeader\" .", "url": "https://github.com/keycloak/keycloak/pull/6998#discussion_r415903506", "createdAt": "2020-04-27T15:18:02Z", "author": {"login": "mposolda"}, "path": "services/src/main/java/org/keycloak/headers/DefaultSecurityHeadersProvider.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.headers;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.models.BrowserSecurityHeaders;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+\n+import javax.ws.rs.InternalServerErrorException;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import java.util.Map;\n+\n+public class DefaultSecurityHeadersProvider implements SecurityHeadersProvider {\n+\n+    private static final Logger LOGGER = Logger.getLogger(DefaultSecurityHeadersProvider.class);\n+\n+    private final Map<String, String> headerValues;\n+    private final KeycloakSession session;\n+\n+    private DefaultSecurityHeadersOptions options;\n+\n+    public DefaultSecurityHeadersProvider(KeycloakSession session) {\n+        this.session = session;\n+\n+        RealmModel realm = session.getContext().getRealm();\n+        if (realm != null) {\n+            headerValues = realm.getBrowserSecurityHeaders();\n+        } else {\n+            headerValues = BrowserSecurityHeaders.defaultHeaders;\n+        }\n+    }\n+\n+    @Override\n+    public SecurityHeadersOptions options() {\n+        if (options == null) {\n+            options = new DefaultSecurityHeadersOptions();\n+        }\n+        return options;\n+    }\n+\n+    @Override\n+    public void addHeaders(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        if (options != null && options.isSkipHeaders()) {\n+            return;\n+        }\n+\n+        MediaType requestType = requestContext.getMediaType();\n+        MediaType responseType = responseContext.getMediaType();\n+        MultivaluedMap<String, Object> headers = responseContext.getHeaders();\n+\n+        if (responseType == null && !isEmptyMediaTypeAllowed(requestContext, responseContext)) {\n+            LOGGER.errorv(\"MediaType not set on path {0}, with response status {1}\", session.getContext().getUri().getRequestUri().getPath(), responseContext.getStatus());\n+            throw new InternalServerErrorException();\n+        }\n+\n+        if (isRest(requestType, responseType)) {\n+            addRestHeaders(headers);\n+        } else if (isHtml(requestType, responseType)) {\n+            addHtmlHeaders(headers);\n+        } else {\n+            addGenericHeaders(headers);\n+        }\n+    }\n+\n+    private void addGenericHeaders(MultivaluedMap<String, Object> headers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d0e9ad85eec5eca3e4104ad4e30f3a3328bee8b"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM1OTA1OA==", "bodyText": "Don't like opening up internal classes too much. Someone can also extend be calling the default provider within their extended provider, to then modify the results. It's more likely that folks will want to change one or two headers and not implement all the headers for one \"type\".", "url": "https://github.com/keycloak/keycloak/pull/6998#discussion_r416359058", "createdAt": "2020-04-28T06:25:15Z", "author": {"login": "stianst"}, "path": "services/src/main/java/org/keycloak/headers/DefaultSecurityHeadersProvider.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.headers;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.models.BrowserSecurityHeaders;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+\n+import javax.ws.rs.InternalServerErrorException;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import java.util.Map;\n+\n+public class DefaultSecurityHeadersProvider implements SecurityHeadersProvider {\n+\n+    private static final Logger LOGGER = Logger.getLogger(DefaultSecurityHeadersProvider.class);\n+\n+    private final Map<String, String> headerValues;\n+    private final KeycloakSession session;\n+\n+    private DefaultSecurityHeadersOptions options;\n+\n+    public DefaultSecurityHeadersProvider(KeycloakSession session) {\n+        this.session = session;\n+\n+        RealmModel realm = session.getContext().getRealm();\n+        if (realm != null) {\n+            headerValues = realm.getBrowserSecurityHeaders();\n+        } else {\n+            headerValues = BrowserSecurityHeaders.defaultHeaders;\n+        }\n+    }\n+\n+    @Override\n+    public SecurityHeadersOptions options() {\n+        if (options == null) {\n+            options = new DefaultSecurityHeadersOptions();\n+        }\n+        return options;\n+    }\n+\n+    @Override\n+    public void addHeaders(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        if (options != null && options.isSkipHeaders()) {\n+            return;\n+        }\n+\n+        MediaType requestType = requestContext.getMediaType();\n+        MediaType responseType = responseContext.getMediaType();\n+        MultivaluedMap<String, Object> headers = responseContext.getHeaders();\n+\n+        if (responseType == null && !isEmptyMediaTypeAllowed(requestContext, responseContext)) {\n+            LOGGER.errorv(\"MediaType not set on path {0}, with response status {1}\", session.getContext().getUri().getRequestUri().getPath(), responseContext.getStatus());\n+            throw new InternalServerErrorException();\n+        }\n+\n+        if (isRest(requestType, responseType)) {\n+            addRestHeaders(headers);\n+        } else if (isHtml(requestType, responseType)) {\n+            addHtmlHeaders(headers);\n+        } else {\n+            addGenericHeaders(headers);\n+        }\n+    }\n+\n+    private void addGenericHeaders(MultivaluedMap<String, Object> headers) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkwMzUwNg=="}, "originalCommit": {"oid": "3d0e9ad85eec5eca3e4104ad4e30f3a3328bee8b"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwMDY3MQ==", "bodyText": "Sure, this is very minor thing. Just wanted to doublecheck.", "url": "https://github.com/keycloak/keycloak/pull/6998#discussion_r416400671", "createdAt": "2020-04-28T07:45:01Z", "author": {"login": "mposolda"}, "path": "services/src/main/java/org/keycloak/headers/DefaultSecurityHeadersProvider.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.headers;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.models.BrowserSecurityHeaders;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+\n+import javax.ws.rs.InternalServerErrorException;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import java.util.Map;\n+\n+public class DefaultSecurityHeadersProvider implements SecurityHeadersProvider {\n+\n+    private static final Logger LOGGER = Logger.getLogger(DefaultSecurityHeadersProvider.class);\n+\n+    private final Map<String, String> headerValues;\n+    private final KeycloakSession session;\n+\n+    private DefaultSecurityHeadersOptions options;\n+\n+    public DefaultSecurityHeadersProvider(KeycloakSession session) {\n+        this.session = session;\n+\n+        RealmModel realm = session.getContext().getRealm();\n+        if (realm != null) {\n+            headerValues = realm.getBrowserSecurityHeaders();\n+        } else {\n+            headerValues = BrowserSecurityHeaders.defaultHeaders;\n+        }\n+    }\n+\n+    @Override\n+    public SecurityHeadersOptions options() {\n+        if (options == null) {\n+            options = new DefaultSecurityHeadersOptions();\n+        }\n+        return options;\n+    }\n+\n+    @Override\n+    public void addHeaders(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        if (options != null && options.isSkipHeaders()) {\n+            return;\n+        }\n+\n+        MediaType requestType = requestContext.getMediaType();\n+        MediaType responseType = responseContext.getMediaType();\n+        MultivaluedMap<String, Object> headers = responseContext.getHeaders();\n+\n+        if (responseType == null && !isEmptyMediaTypeAllowed(requestContext, responseContext)) {\n+            LOGGER.errorv(\"MediaType not set on path {0}, with response status {1}\", session.getContext().getUri().getRequestUri().getPath(), responseContext.getStatus());\n+            throw new InternalServerErrorException();\n+        }\n+\n+        if (isRest(requestType, responseType)) {\n+            addRestHeaders(headers);\n+        } else if (isHtml(requestType, responseType)) {\n+            addHtmlHeaders(headers);\n+        } else {\n+            addGenericHeaders(headers);\n+        }\n+    }\n+\n+    private void addGenericHeaders(MultivaluedMap<String, Object> headers) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkwMzUwNg=="}, "originalCommit": {"oid": "3d0e9ad85eec5eca3e4104ad4e30f3a3328bee8b"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3726, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}