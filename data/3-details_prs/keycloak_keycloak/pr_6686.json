{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NDUxNzY3", "number": 6686, "title": "KEYCLOAK-11550: Single page to manage credentials", "bodyText": "", "createdAt": "2020-01-21T18:38:44Z", "url": "https://github.com/keycloak/keycloak/pull/6686", "merged": true, "mergeCommit": {"oid": "210fd92d2328b3d8173d7c07e2708e6d9544a396"}, "closed": true, "closedAt": "2020-01-23T12:35:10Z", "author": {"login": "ssilvert"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb8w1PhgFqTM0NjM4ODExNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb9F-XIgFqTM0NzEyMDE0MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2Mzg4MTE1", "url": "https://github.com/keycloak/keycloak/pull/6686#pullrequestreview-346388115", "createdAt": "2020-01-22T07:33:53Z", "commit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNzozMzo1M1rOFgSrZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNzozNzoxN1rOFgSvAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNDc3NQ==", "bodyText": "This will throw an exception in case that user doesn't have password? Also in case he doesn't have password and has 1 OTP credential, it can happen that \"models.get(0)\" won't return the password.\nI know we're going to rewrite this stuff and it is just \"dummy\" endpoint for now. So leaving to you whether to change this or not. I am fine with accept PR even without fixing it we all agree that some temporary \"bugs\" in this dummy endpoints are ok.", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369404775", "createdAt": "2020-01-22T07:33:53Z", "author": {"login": "mposolda"}, "path": "services/src/main/java/org/keycloak/services/resources/account/AccountCredentialResource.java", "diffHunk": "@@ -57,6 +57,139 @@ public AccountCredentialResource(KeycloakSession session, EventBuilder event, Us\n //        models.forEach(c -> c.setSecretData(null));\n //        return models.stream().map(ModelToRepresentation::toRepresentation).collect(Collectors.toList());\n //    }\n+    \n+    private static class CredentialContainer {\n+        private String category;\n+        private String type;\n+        private String tooltip;\n+        private boolean enabled;\n+        private String createAction;\n+        private String updateAction;\n+        private boolean removeable;\n+        private List<CredentialModel> userCredentials;\n+        \n+        public CredentialContainer(String category, String type, String tooltip, boolean enabled, String createAction, String updateAction, boolean removeable,List<CredentialModel> userCredentials) {\n+            this.category = category;\n+            this.type = type;\n+            this.tooltip = tooltip;\n+            this.enabled = enabled;\n+            this.createAction = createAction;\n+            this.updateAction = updateAction;\n+            this.removeable = removeable;\n+            this.userCredentials = userCredentials;\n+        }\n+\n+        public String getCategory() {\n+            return category;\n+        }\n+        \n+        public String getType() {\n+            return type;\n+        }\n+\n+        public String getTooltip() {\n+            return tooltip;\n+        }\n+\n+        public boolean isEnabled() {\n+            return enabled;\n+        }\n+\n+        public String getCreateAction() {\n+            return createAction;\n+        }\n+\n+        public String getUpdateAction() {\n+            return updateAction;\n+        }\n+\n+        public boolean isRemoveable() {\n+            return removeable;\n+        }\n+\n+        public List<CredentialModel> getUserCredentials() {\n+            return userCredentials;\n+        }\n+        \n+    }\n+    \n+    @GET\n+    @NoCache\n+    @Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON)\n+    public List<CredentialContainer> dummyCredentialTypes(){\n+        auth.requireOneOf(AccountRoles.MANAGE_ACCOUNT, AccountRoles.VIEW_PROFILE);\n+        List<CredentialModel> models = session.userCredentialManager().getStoredCredentials(realm, user);\n+        \n+        List<CredentialModel> passwordUserCreds = new java.util.ArrayList<>();\n+        passwordUserCreds.add(models.get(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNTY5Ng==", "bodyText": "The credential will be named \"Webauthn Passwordless\" instead of \"WebAuthn Strong\" . For more details, see the keycloak-dev thread \"Strong WebAuthn for passwordless authentication\" and the PR #6649 .", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369405696", "createdAt": "2020-01-22T07:37:17Z", "author": {"login": "mposolda"}, "path": "services/src/main/java/org/keycloak/services/resources/account/AccountCredentialResource.java", "diffHunk": "@@ -57,6 +57,139 @@ public AccountCredentialResource(KeycloakSession session, EventBuilder event, Us\n //        models.forEach(c -> c.setSecretData(null));\n //        return models.stream().map(ModelToRepresentation::toRepresentation).collect(Collectors.toList());\n //    }\n+    \n+    private static class CredentialContainer {\n+        private String category;\n+        private String type;\n+        private String tooltip;\n+        private boolean enabled;\n+        private String createAction;\n+        private String updateAction;\n+        private boolean removeable;\n+        private List<CredentialModel> userCredentials;\n+        \n+        public CredentialContainer(String category, String type, String tooltip, boolean enabled, String createAction, String updateAction, boolean removeable,List<CredentialModel> userCredentials) {\n+            this.category = category;\n+            this.type = type;\n+            this.tooltip = tooltip;\n+            this.enabled = enabled;\n+            this.createAction = createAction;\n+            this.updateAction = updateAction;\n+            this.removeable = removeable;\n+            this.userCredentials = userCredentials;\n+        }\n+\n+        public String getCategory() {\n+            return category;\n+        }\n+        \n+        public String getType() {\n+            return type;\n+        }\n+\n+        public String getTooltip() {\n+            return tooltip;\n+        }\n+\n+        public boolean isEnabled() {\n+            return enabled;\n+        }\n+\n+        public String getCreateAction() {\n+            return createAction;\n+        }\n+\n+        public String getUpdateAction() {\n+            return updateAction;\n+        }\n+\n+        public boolean isRemoveable() {\n+            return removeable;\n+        }\n+\n+        public List<CredentialModel> getUserCredentials() {\n+            return userCredentials;\n+        }\n+        \n+    }\n+    \n+    @GET\n+    @NoCache\n+    @Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON)\n+    public List<CredentialContainer> dummyCredentialTypes(){\n+        auth.requireOneOf(AccountRoles.MANAGE_ACCOUNT, AccountRoles.VIEW_PROFILE);\n+        List<CredentialModel> models = session.userCredentialManager().getStoredCredentials(realm, user);\n+        \n+        List<CredentialModel> passwordUserCreds = new java.util.ArrayList<>();\n+        passwordUserCreds.add(models.get(0));\n+        \n+        List<CredentialModel> otpUserCreds = new java.util.ArrayList<>();\n+        if (models.size() > 1) otpUserCreds.add(models.get(1));\n+        if (models.size() > 2) otpUserCreds.add(models.get(2));\n+        \n+        List<CredentialModel> webauthnUserCreds = new java.util.ArrayList<>();\n+        CredentialModel webauthnCred = new CredentialModel();\n+        webauthnCred.setId(\"bogus-id\");\n+        webauthnCred.setUserLabel(\"yubikey key\");\n+        webauthnCred.setCreatedDate(1579122652382L);\n+        webauthnUserCreds.add(webauthnCred);\n+        \n+        List<CredentialModel> webauthnStrongUserCreds = new java.util.ArrayList<>();\n+        CredentialModel webauthnStrongCred = new CredentialModel();\n+        webauthnStrongCred.setId(\"bogus-id-for-webauthnStrong\");\n+        webauthnStrongCred.setUserLabel(\"My very strong key with required PIN\");\n+        webauthnStrongCred.setCreatedDate(1579122652382L);\n+        webauthnUserCreds.add(webauthnStrongCred);\n+        \n+        CredentialContainer password = new CredentialContainer(\n+                                        \"password\",\n+                                        \"password\",\n+                                        \"passwordTooltip\",\n+                                        true,\n+                                        null, // no create action\n+                                        \"UPDATE_PASSWORD\",\n+                                        false,\n+                                        passwordUserCreds\n+                                        );\n+        CredentialContainer otp = new CredentialContainer(\n+                                        \"two-factor\",\n+                                        \"otp\",\n+                                        \"otpTooltip\",\n+                                        true,\n+                                        \"CONFIGURE_TOTP\", \n+                                        null, // no update action\n+                                        true,\n+                                        otpUserCreds\n+                                        );\n+        CredentialContainer webAuthn = new CredentialContainer(\n+                                        \"two-factor\",\n+                                        \"webauthn\",\n+                                        \"webauthntooltip\",\n+                                        true,\n+                                        \"CONFIGURE_WEBAUTHN\", \n+                                        null, // no update action\n+                                        true,\n+                                        webauthnUserCreds\n+                                        );\n+        CredentialContainer passwordless = new CredentialContainer(\n+                                        \"passwordless\",\n+                                        \"webauthn-strong\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "originalPosition": 120}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2NjMyOTM3", "url": "https://github.com/keycloak/keycloak/pull/6686#pullrequestreview-346632937", "createdAt": "2020-01-22T14:34:23Z", "commit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNDozNDoyNFrOFgeR1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzoxMzoxNVrOFgkKdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU5NDgzNw==", "bodyText": "Just a question. Why are we making this change? It's not related to the Credentials page, correct? This results in links no longer being opened in new browser tab.", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369594837", "createdAt": "2020-01-22T14:34:24Z", "author": {"login": "vmuzikar"}, "path": "themes/src/main/resources/theme/keycloak-preview/account/resources/app/content/applications-page/ApplicationsPage.tsx", "diffHunk": "@@ -132,7 +134,10 @@ export class ApplicationsPage extends React.Component<ApplicationsPageProps, App\n                         {application.inUse ? Msg.localize('inUse') : Msg.localize('notInUse')}\n                       </DataListCell>,\n                       <DataListCell width={4} key={'baseUrl-' + appIndex}>\n-                        <a href={application.userConsentRequired ? application.baseUrl : '/auth' + application.baseUrl} target=\"_blank\"><LinkIcon /> {application.baseUrl}</a>\n+                        <button className=\"pf-c-button pf-m-link\" type=\"button\" onClick={() => window.location.href = appUrl}>\n+                          <span className=\"pf-c-button__icon\">\n+                            <i className=\"fas fa-link\" aria-hidden=\"true\"></i>\n+                          </span>{application.baseUrl}</button>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU5NjIyNQ==", "bodyText": "Typo: removable", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369596225", "createdAt": "2020-01-22T14:36:48Z", "author": {"login": "vmuzikar"}, "path": "themes/src/main/resources/theme/keycloak-preview/account/resources/app/content/signingin-page/SigningInPage.tsx", "diffHunk": "@@ -47,15 +47,39 @@ interface PasswordDetails {\n     registered: boolean;\n     lastUpdate: number;\n }\n+\n+type CredCategory = 'password' | 'two-factor' | 'passwordless';\n+type CredType = string;\n+type CredTypeMap = Map<CredType, CredentialContainer>;\n+type CredContainerMap = Map<CredCategory, CredTypeMap>;\n+\n+interface UserCredential {\n+    id: string;\n+    type: string;\n+    userLabel: string;\n+    createdDate: number;\n+    strCreatedDate?: string;\n+}\n+\n+// A CredentialContainer is unique by combo of credential type and credential category\n+interface CredentialContainer {\n+    category: CredCategory;\n+    type: CredType;\n+    tooltip: string;\n+    createAction: string;\n+    updateAction: string;\n+    removeable: boolean;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY4NjY2MA==", "bodyText": "Just a suggestion. The two-factor authentication looks like it's an independent credential type. If I understand it correctly, it works only with password. Couldn't we somehow visually hint the user that it's not independent? E.g. somehow place it in the same box as password?\nOf course, for the tech preview it's ok as it is.", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369686660", "createdAt": "2020-01-22T17:04:33Z", "author": {"login": "vmuzikar"}, "path": "themes/src/main/resources/theme/keycloak-preview/account/resources/app/content/signingin-page/SigningInPage.tsx", "diffHunk": "@@ -68,116 +92,202 @@ class SigningInPage extends React.Component<SigningInPageProps, SigningInPageSta\n     public constructor(props: SigningInPageProps) {\n         super(props);\n         this.state = {\n-            twoFactorEnabled: true,\n-            twoFactorEnabledText: Msg.localize('twoFactorEnabled'),\n-            isTotpConfigured: features.isTotpConfigured,\n+            credentialContainers: new Map()\n         }\n-        this.setLastPwdUpdate();\n+\n+        this.getCredentialContainers();\n     }\n \n-    private setLastPwdUpdate(): void {\n-        AccountServiceClient.Instance.doGet(\"/credentials/password\")\n-            .then((response: AxiosResponse<PasswordDetails>) => {\n-                if (response.data.lastUpdate) {\n-                    const lastUpdate: number = response.data.lastUpdate;\n-                    this.setState({lastPasswordUpdate: lastUpdate});\n-                }\n+    private getCredentialContainers(): void {\n+        AccountServiceClient.Instance.doGet(\"/credentials\")\n+            .then((response: AxiosResponse<CredentialContainer[]>) => {\n+\n+                const allContainers: CredContainerMap = new Map();\n+                response.data.forEach(container => {\n+                    let categoryMap = allContainers.get(container.category);\n+                    if (!categoryMap) {\n+                        categoryMap = new Map();\n+                        allContainers.set(container.category, categoryMap);\n+                    }\n+                    categoryMap.set(container.type, container);\n+                });\n+\n+                this.setState({credentialContainers: allContainers});\n             });\n     }\n     \n-    private handleTwoFactorSwitch = () => {\n-        if (this.state.twoFactorEnabled) {\n-            this.setState({twoFactorEnabled: false, twoFactorEnabledText: Msg.localize('twoFactorDisabled')})\n-        } else {\n-            this.setState({twoFactorEnabled: true, twoFactorEnabledText:  Msg.localize('twoFactorEnabled')})\n-        }\n-    }\n-\n-    private handleRemoveTOTP = () => {\n-      AccountServiceClient.Instance.doDelete(\"/totp/remove\")\n+    private handleRemove = (credentialId: string, userLabel: string) => {\n+      AccountServiceClient.Instance.doDelete(\"/credentials/\" + credentialId)\n         .then(() => {\n-            this.setState({isTotpConfigured: false});\n-            ContentAlert.success('successTotpRemovedMessage');\n+            this.getCredentialContainers();\n+            ContentAlert.success('successRemovedMessage', [userLabel]);\n         });\n     }\n \n     public render(): React.ReactNode {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY5MDI3NA==", "bodyText": "It looks a bit weird, or maybe too technical, that there are two \"passwords\" on top of each other. Again, IMHO ok for tech preview.", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369690274", "createdAt": "2020-01-22T17:11:21Z", "author": {"login": "vmuzikar"}, "path": "themes/src/main/resources/theme/keycloak-preview/account/resources/app/content/signingin-page/SigningInPage.tsx", "diffHunk": "@@ -68,116 +92,202 @@ class SigningInPage extends React.Component<SigningInPageProps, SigningInPageSta\n     public constructor(props: SigningInPageProps) {\n         super(props);\n         this.state = {\n-            twoFactorEnabled: true,\n-            twoFactorEnabledText: Msg.localize('twoFactorEnabled'),\n-            isTotpConfigured: features.isTotpConfigured,\n+            credentialContainers: new Map()\n         }\n-        this.setLastPwdUpdate();\n+\n+        this.getCredentialContainers();\n     }\n \n-    private setLastPwdUpdate(): void {\n-        AccountServiceClient.Instance.doGet(\"/credentials/password\")\n-            .then((response: AxiosResponse<PasswordDetails>) => {\n-                if (response.data.lastUpdate) {\n-                    const lastUpdate: number = response.data.lastUpdate;\n-                    this.setState({lastPasswordUpdate: lastUpdate});\n-                }\n+    private getCredentialContainers(): void {\n+        AccountServiceClient.Instance.doGet(\"/credentials\")\n+            .then((response: AxiosResponse<CredentialContainer[]>) => {\n+\n+                const allContainers: CredContainerMap = new Map();\n+                response.data.forEach(container => {\n+                    let categoryMap = allContainers.get(container.category);\n+                    if (!categoryMap) {\n+                        categoryMap = new Map();\n+                        allContainers.set(container.category, categoryMap);\n+                    }\n+                    categoryMap.set(container.type, container);\n+                });\n+\n+                this.setState({credentialContainers: allContainers});\n             });\n     }\n     \n-    private handleTwoFactorSwitch = () => {\n-        if (this.state.twoFactorEnabled) {\n-            this.setState({twoFactorEnabled: false, twoFactorEnabledText: Msg.localize('twoFactorDisabled')})\n-        } else {\n-            this.setState({twoFactorEnabled: true, twoFactorEnabledText:  Msg.localize('twoFactorEnabled')})\n-        }\n-    }\n-\n-    private handleRemoveTOTP = () => {\n-      AccountServiceClient.Instance.doDelete(\"/totp/remove\")\n+    private handleRemove = (credentialId: string, userLabel: string) => {\n+      AccountServiceClient.Instance.doDelete(\"/credentials/\" + credentialId)\n         .then(() => {\n-            this.setState({isTotpConfigured: false});\n-            ContentAlert.success('successTotpRemovedMessage');\n+            this.getCredentialContainers();\n+            ContentAlert.success('successRemovedMessage', [userLabel]);\n         });\n     }\n \n     public render(): React.ReactNode {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY5MTI1NQ==", "bodyText": "When a credential is not set up, the info text is not vertically aligned.", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369691255", "createdAt": "2020-01-22T17:13:15Z", "author": {"login": "vmuzikar"}, "path": "themes/src/main/resources/theme/keycloak-preview/account/resources/app/content/signingin-page/SigningInPage.tsx", "diffHunk": "@@ -68,116 +92,202 @@ class SigningInPage extends React.Component<SigningInPageProps, SigningInPageSta\n     public constructor(props: SigningInPageProps) {\n         super(props);\n         this.state = {\n-            twoFactorEnabled: true,\n-            twoFactorEnabledText: Msg.localize('twoFactorEnabled'),\n-            isTotpConfigured: features.isTotpConfigured,\n+            credentialContainers: new Map()\n         }\n-        this.setLastPwdUpdate();\n+\n+        this.getCredentialContainers();\n     }\n \n-    private setLastPwdUpdate(): void {\n-        AccountServiceClient.Instance.doGet(\"/credentials/password\")\n-            .then((response: AxiosResponse<PasswordDetails>) => {\n-                if (response.data.lastUpdate) {\n-                    const lastUpdate: number = response.data.lastUpdate;\n-                    this.setState({lastPasswordUpdate: lastUpdate});\n-                }\n+    private getCredentialContainers(): void {\n+        AccountServiceClient.Instance.doGet(\"/credentials\")\n+            .then((response: AxiosResponse<CredentialContainer[]>) => {\n+\n+                const allContainers: CredContainerMap = new Map();\n+                response.data.forEach(container => {\n+                    let categoryMap = allContainers.get(container.category);\n+                    if (!categoryMap) {\n+                        categoryMap = new Map();\n+                        allContainers.set(container.category, categoryMap);\n+                    }\n+                    categoryMap.set(container.type, container);\n+                });\n+\n+                this.setState({credentialContainers: allContainers});\n             });\n     }\n     \n-    private handleTwoFactorSwitch = () => {\n-        if (this.state.twoFactorEnabled) {\n-            this.setState({twoFactorEnabled: false, twoFactorEnabledText: Msg.localize('twoFactorDisabled')})\n-        } else {\n-            this.setState({twoFactorEnabled: true, twoFactorEnabledText:  Msg.localize('twoFactorEnabled')})\n-        }\n-    }\n-\n-    private handleRemoveTOTP = () => {\n-      AccountServiceClient.Instance.doDelete(\"/totp/remove\")\n+    private handleRemove = (credentialId: string, userLabel: string) => {\n+      AccountServiceClient.Instance.doDelete(\"/credentials/\" + credentialId)\n         .then(() => {\n-            this.setState({isTotpConfigured: false});\n-            ContentAlert.success('successTotpRemovedMessage');\n+            this.getCredentialContainers();\n+            ContentAlert.success('successRemovedMessage', [userLabel]);\n         });\n     }\n \n     public render(): React.ReactNode {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "originalPosition": 115}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a700105c1e289c3bbfc95a455614e4eeff6ebfd", "author": {"user": {"login": "ssilvert", "name": "Stan Silvert"}}, "url": "https://github.com/keycloak/keycloak/commit/7a700105c1e289c3bbfc95a455614e4eeff6ebfd", "committedDate": "2020-01-22T21:41:41Z", "message": "KEYCLOAK-11550: Signing In page"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73", "author": {"user": {"login": "ssilvert", "name": "Stan Silvert"}}, "url": "https://github.com/keycloak/keycloak/commit/4ec5b50d3f18b2c87440e95f2a11fd38ff770f73", "committedDate": "2020-01-21T18:34:19Z", "message": "KEYCLOAK-11550: Single page to manage credentials"}, "afterCommit": {"oid": "7a700105c1e289c3bbfc95a455614e4eeff6ebfd", "author": {"user": {"login": "ssilvert", "name": "Stan Silvert"}}, "url": "https://github.com/keycloak/keycloak/commit/7a700105c1e289c3bbfc95a455614e4eeff6ebfd", "committedDate": "2020-01-22T21:41:41Z", "message": "KEYCLOAK-11550: Signing In page"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2OTQ0NDc2", "url": "https://github.com/keycloak/keycloak/pull/6686#pullrequestreview-346944476", "createdAt": "2020-01-22T22:20:01Z", "commit": {"oid": "7a700105c1e289c3bbfc95a455614e4eeff6ebfd"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3MTIwMTQw", "url": "https://github.com/keycloak/keycloak/pull/6686#pullrequestreview-347120140", "createdAt": "2020-01-23T08:21:57Z", "commit": {"oid": "7a700105c1e289c3bbfc95a455614e4eeff6ebfd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2726, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}