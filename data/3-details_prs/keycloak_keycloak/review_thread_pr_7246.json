{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2Mjk1OTIw", "number": 7246, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzoyNjoxNVrOEMxieA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNjoyODowM1rOENg2cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODMwMDA4OnYy", "diffSide": "RIGHT", "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/saml/v2/writers/BaseWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzoyNjoxNVrOGvE6Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODozNTozNVrOGvHQ9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAxNjY0Mg==", "bodyText": "Currently it is expected that attributeValue starts with AttributeValue element. Yet for the sake of consistency with the rest of the values and enforcing schema compliance, the attribute value should only be the value without AttributeValue. In other words, introduce a writeElementAttributeValue(Element attributeValue) method similar to e.g. writeNameIDTypeAttributeValue", "url": "https://github.com/keycloak/keycloak/pull/7246#discussion_r452016642", "createdAt": "2020-07-09T07:26:15Z", "author": {"login": "hmlnarik"}, "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/saml/v2/writers/BaseWriter.java", "diffHunk": "@@ -174,6 +175,8 @@ public void writeAttributeTypeWithoutRootTag(AttributeType attributeType) throws\n                     \twriteNameIDTypeAttributeValue((NameIDType) attributeValue);\n                     } else if (attributeValue instanceof XMLGregorianCalendar) {\n                         writeDateAttributeValue((XMLGregorianCalendar) attributeValue);\n+                    } else if (attributeValue instanceof Element) {\n+                        StaxUtil.writeDOMElement(writer, (Element) attributeValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74f1f43990d88ed904d198f24ca803eae5ffdc4b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA1NTI4NQ==", "bodyText": "Thanks for the suggestions - I changed the code in the proposed way. Because the type of the AttributeValue is variable, I created a new AttributeValueElementType class to contain both the type and the element.", "url": "https://github.com/keycloak/keycloak/pull/7246#discussion_r452055285", "createdAt": "2020-07-09T08:35:35Z", "author": {"login": "mwalliczek"}, "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/saml/v2/writers/BaseWriter.java", "diffHunk": "@@ -174,6 +175,8 @@ public void writeAttributeTypeWithoutRootTag(AttributeType attributeType) throws\n                     \twriteNameIDTypeAttributeValue((NameIDType) attributeValue);\n                     } else if (attributeValue instanceof XMLGregorianCalendar) {\n                         writeDateAttributeValue((XMLGregorianCalendar) attributeValue);\n+                    } else if (attributeValue instanceof Element) {\n+                        StaxUtil.writeDOMElement(writer, (Element) attributeValue);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAxNjY0Mg=="}, "originalCommit": {"oid": "74f1f43990d88ed904d198f24ca803eae5ffdc4b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODMwMjM5OnYy", "diffSide": "RIGHT", "path": "saml-core/src/test/java/org/keycloak/saml/processing/core/saml/v2/writers/XUATokenWriterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzoyNjo1MlrOGvE7UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzoyNjo1MlrOGvE7UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAxNjk3Nw==", "bodyText": "This element should be removed.", "url": "https://github.com/keycloak/keycloak/pull/7246#discussion_r452016977", "createdAt": "2020-07-09T07:26:52Z", "author": {"login": "hmlnarik"}, "path": "saml-core/src/test/java/org/keycloak/saml/processing/core/saml/v2/writers/XUATokenWriterTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package org.keycloak.saml.processing.core.saml.v2.writers;\n+\n+import java.io.ByteArrayOutputStream;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.keycloak.dom.saml.v2.assertion.AttributeStatementType;\n+import org.keycloak.dom.saml.v2.assertion.AttributeType;\n+import org.keycloak.saml.common.constants.GeneralConstants;\n+import org.keycloak.saml.common.constants.JBossSAMLURIConstants;\n+import org.keycloak.saml.common.exceptions.ConfigurationException;\n+import org.keycloak.saml.common.exceptions.ProcessingException;\n+import org.keycloak.saml.common.util.DocumentUtil;\n+import org.keycloak.saml.common.util.StaxUtil;\n+import org.w3c.dom.Attr;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+\n+public class XUATokenWriterTest {\n+\n+    @Test\n+    public void testXUAToken() throws ConfigurationException, ProcessingException {\n+        Document document = DocumentUtil.createDocument();\n+\n+        AttributeType roleAttr = new AttributeType(\"urn:oasis:names:tc:xacml:2.0:subject:role\");\n+        Element attributeValue =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74f1f43990d88ed904d198f24ca803eae5ffdc4b"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODMxMTc2OnYy", "diffSide": "RIGHT", "path": "saml-core/src/test/java/org/keycloak/saml/processing/core/saml/v2/writers/XUATokenWriterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzoyOTo1MVrOGvFBXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzoyOTo1MVrOGvFBXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAxODUyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    attributeValue.appendChild(role);\n          \n          \n            \n                    roleAttr.addAttributeValue(attributeValue);\n          \n          \n            \n                    roleAttr.addAttributeValue(role);", "url": "https://github.com/keycloak/keycloak/pull/7246#discussion_r452018524", "createdAt": "2020-07-09T07:29:51Z", "author": {"login": "hmlnarik"}, "path": "saml-core/src/test/java/org/keycloak/saml/processing/core/saml/v2/writers/XUATokenWriterTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package org.keycloak.saml.processing.core.saml.v2.writers;\n+\n+import java.io.ByteArrayOutputStream;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.keycloak.dom.saml.v2.assertion.AttributeStatementType;\n+import org.keycloak.dom.saml.v2.assertion.AttributeType;\n+import org.keycloak.saml.common.constants.GeneralConstants;\n+import org.keycloak.saml.common.constants.JBossSAMLURIConstants;\n+import org.keycloak.saml.common.exceptions.ConfigurationException;\n+import org.keycloak.saml.common.exceptions.ProcessingException;\n+import org.keycloak.saml.common.util.DocumentUtil;\n+import org.keycloak.saml.common.util.StaxUtil;\n+import org.w3c.dom.Attr;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+\n+public class XUATokenWriterTest {\n+\n+    @Test\n+    public void testXUAToken() throws ConfigurationException, ProcessingException {\n+        Document document = DocumentUtil.createDocument();\n+\n+        AttributeType roleAttr = new AttributeType(\"urn:oasis:names:tc:xacml:2.0:subject:role\");\n+        Element attributeValue =\n+                document.createElementNS(JBossSAMLURIConstants.ASSERTION_NSURI.get(), \"AttributeValue\");\n+        Attr attrRoleType = document.createAttributeNS(JBossSAMLURIConstants.XSI_NSURI.get(), \"type\");\n+        attrRoleType.setValue(\"Role\");\n+        attrRoleType.setPrefix(\"xsi\");\n+        attributeValue.setAttributeNodeNS(attrRoleType);\n+        Element role = document.createElementNS(\"urn:hl7-org:v3\", \"Role\");\n+        role.setAttributeNS(\"urn:hl7-org:v3\", \"code\", \"46255001\");\n+        role.setAttributeNS(\"urn:hl7-org:v3\", \"codeSystem\", \"2.16.840.1.113883.6.96\");\n+        role.setAttributeNS(\"urn:hl7-org:v3\", \"codeSystemName\", \"SNOMED_CT\");\n+        role.setAttributeNS(\"urn:hl7-org:v3\", \"displayName\", \"Pharmacist\");\n+        Attr attrCEType = document.createAttributeNS(JBossSAMLURIConstants.XSI_NSURI.get(), \"type\");\n+        attrCEType.setValue(\"CE\");\n+        attrCEType.setPrefix(\"xsi\");\n+        role.setAttributeNodeNS(attrCEType);\n+        attributeValue.appendChild(role);\n+        roleAttr.addAttributeValue(attributeValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74f1f43990d88ed904d198f24ca803eae5ffdc4b"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODMxNjU1OnYy", "diffSide": "RIGHT", "path": "saml-core/src/test/java/org/keycloak/saml/processing/core/saml/v2/writers/XUATokenWriterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzozMToxMlrOGvFEXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODozNzozM1rOGvHVeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAxOTI5NA==", "bodyText": "extra attribute in AttributeValue does not conform with SAML schema\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    + \"xsi:type=\\\"Role\\\"><Role xmlns=\\\"urn:hl7-org:v3\\\" code=\\\"46255001\\\" \"\n          \n          \n            \n                                    + \"><Role xmlns=\\\"urn:hl7-org:v3\\\" code=\\\"46255001\\\" \"", "url": "https://github.com/keycloak/keycloak/pull/7246#discussion_r452019294", "createdAt": "2020-07-09T07:31:12Z", "author": {"login": "hmlnarik"}, "path": "saml-core/src/test/java/org/keycloak/saml/processing/core/saml/v2/writers/XUATokenWriterTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package org.keycloak.saml.processing.core.saml.v2.writers;\n+\n+import java.io.ByteArrayOutputStream;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.keycloak.dom.saml.v2.assertion.AttributeStatementType;\n+import org.keycloak.dom.saml.v2.assertion.AttributeType;\n+import org.keycloak.saml.common.constants.GeneralConstants;\n+import org.keycloak.saml.common.constants.JBossSAMLURIConstants;\n+import org.keycloak.saml.common.exceptions.ConfigurationException;\n+import org.keycloak.saml.common.exceptions.ProcessingException;\n+import org.keycloak.saml.common.util.DocumentUtil;\n+import org.keycloak.saml.common.util.StaxUtil;\n+import org.w3c.dom.Attr;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+\n+public class XUATokenWriterTest {\n+\n+    @Test\n+    public void testXUAToken() throws ConfigurationException, ProcessingException {\n+        Document document = DocumentUtil.createDocument();\n+\n+        AttributeType roleAttr = new AttributeType(\"urn:oasis:names:tc:xacml:2.0:subject:role\");\n+        Element attributeValue =\n+                document.createElementNS(JBossSAMLURIConstants.ASSERTION_NSURI.get(), \"AttributeValue\");\n+        Attr attrRoleType = document.createAttributeNS(JBossSAMLURIConstants.XSI_NSURI.get(), \"type\");\n+        attrRoleType.setValue(\"Role\");\n+        attrRoleType.setPrefix(\"xsi\");\n+        attributeValue.setAttributeNodeNS(attrRoleType);\n+        Element role = document.createElementNS(\"urn:hl7-org:v3\", \"Role\");\n+        role.setAttributeNS(\"urn:hl7-org:v3\", \"code\", \"46255001\");\n+        role.setAttributeNS(\"urn:hl7-org:v3\", \"codeSystem\", \"2.16.840.1.113883.6.96\");\n+        role.setAttributeNS(\"urn:hl7-org:v3\", \"codeSystemName\", \"SNOMED_CT\");\n+        role.setAttributeNS(\"urn:hl7-org:v3\", \"displayName\", \"Pharmacist\");\n+        Attr attrCEType = document.createAttributeNS(JBossSAMLURIConstants.XSI_NSURI.get(), \"type\");\n+        attrCEType.setValue(\"CE\");\n+        attrCEType.setPrefix(\"xsi\");\n+        role.setAttributeNodeNS(attrCEType);\n+        attributeValue.appendChild(role);\n+        roleAttr.addAttributeValue(attributeValue);\n+\n+        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n+        SAMLAssertionWriter samlAssertionWriter =\n+                new SAMLAssertionWriter(StaxUtil.getXMLStreamWriter(byteArrayOutputStream));\n+\n+        AttributeStatementType attributeStatementType = new AttributeStatementType();\n+        attributeStatementType.addAttribute(new AttributeStatementType.ASTChoiceType(roleAttr));\n+\n+        samlAssertionWriter.write(attributeStatementType);\n+\n+        String serializedAssertion = new String(byteArrayOutputStream.toByteArray(), GeneralConstants.SAML_CHARSET);\n+        Assert.assertEquals(\"<saml:AttributeStatement><saml:Attribute Name=\\\"urn:oasis:names:tc:xacml:2\"\n+                        + \".0:subject:role\\\"><AttributeValue xmlns=\\\"urn:oasis:names:tc:SAML:2.0:assertion\\\" \"\n+                        + \"xsi:type=\\\"Role\\\"><Role xmlns=\\\"urn:hl7-org:v3\\\" code=\\\"46255001\\\" \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74f1f43990d88ed904d198f24ca803eae5ffdc4b"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA1NjQ0Mg==", "bodyText": "I think it does conform - because for String values xsi:type=\"xs:string\" is written.", "url": "https://github.com/keycloak/keycloak/pull/7246#discussion_r452056442", "createdAt": "2020-07-09T08:37:33Z", "author": {"login": "mwalliczek"}, "path": "saml-core/src/test/java/org/keycloak/saml/processing/core/saml/v2/writers/XUATokenWriterTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package org.keycloak.saml.processing.core.saml.v2.writers;\n+\n+import java.io.ByteArrayOutputStream;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.keycloak.dom.saml.v2.assertion.AttributeStatementType;\n+import org.keycloak.dom.saml.v2.assertion.AttributeType;\n+import org.keycloak.saml.common.constants.GeneralConstants;\n+import org.keycloak.saml.common.constants.JBossSAMLURIConstants;\n+import org.keycloak.saml.common.exceptions.ConfigurationException;\n+import org.keycloak.saml.common.exceptions.ProcessingException;\n+import org.keycloak.saml.common.util.DocumentUtil;\n+import org.keycloak.saml.common.util.StaxUtil;\n+import org.w3c.dom.Attr;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+\n+public class XUATokenWriterTest {\n+\n+    @Test\n+    public void testXUAToken() throws ConfigurationException, ProcessingException {\n+        Document document = DocumentUtil.createDocument();\n+\n+        AttributeType roleAttr = new AttributeType(\"urn:oasis:names:tc:xacml:2.0:subject:role\");\n+        Element attributeValue =\n+                document.createElementNS(JBossSAMLURIConstants.ASSERTION_NSURI.get(), \"AttributeValue\");\n+        Attr attrRoleType = document.createAttributeNS(JBossSAMLURIConstants.XSI_NSURI.get(), \"type\");\n+        attrRoleType.setValue(\"Role\");\n+        attrRoleType.setPrefix(\"xsi\");\n+        attributeValue.setAttributeNodeNS(attrRoleType);\n+        Element role = document.createElementNS(\"urn:hl7-org:v3\", \"Role\");\n+        role.setAttributeNS(\"urn:hl7-org:v3\", \"code\", \"46255001\");\n+        role.setAttributeNS(\"urn:hl7-org:v3\", \"codeSystem\", \"2.16.840.1.113883.6.96\");\n+        role.setAttributeNS(\"urn:hl7-org:v3\", \"codeSystemName\", \"SNOMED_CT\");\n+        role.setAttributeNS(\"urn:hl7-org:v3\", \"displayName\", \"Pharmacist\");\n+        Attr attrCEType = document.createAttributeNS(JBossSAMLURIConstants.XSI_NSURI.get(), \"type\");\n+        attrCEType.setValue(\"CE\");\n+        attrCEType.setPrefix(\"xsi\");\n+        role.setAttributeNodeNS(attrCEType);\n+        attributeValue.appendChild(role);\n+        roleAttr.addAttributeValue(attributeValue);\n+\n+        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n+        SAMLAssertionWriter samlAssertionWriter =\n+                new SAMLAssertionWriter(StaxUtil.getXMLStreamWriter(byteArrayOutputStream));\n+\n+        AttributeStatementType attributeStatementType = new AttributeStatementType();\n+        attributeStatementType.addAttribute(new AttributeStatementType.ASTChoiceType(roleAttr));\n+\n+        samlAssertionWriter.write(attributeStatementType);\n+\n+        String serializedAssertion = new String(byteArrayOutputStream.toByteArray(), GeneralConstants.SAML_CHARSET);\n+        Assert.assertEquals(\"<saml:AttributeStatement><saml:Attribute Name=\\\"urn:oasis:names:tc:xacml:2\"\n+                        + \".0:subject:role\\\"><AttributeValue xmlns=\\\"urn:oasis:names:tc:SAML:2.0:assertion\\\" \"\n+                        + \"xsi:type=\\\"Role\\\"><Role xmlns=\\\"urn:hl7-org:v3\\\" code=\\\"46255001\\\" \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAxOTI5NA=="}, "originalCommit": {"oid": "74f1f43990d88ed904d198f24ca803eae5ffdc4b"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjA1MTY4OnYy", "diffSide": "RIGHT", "path": "saml-core-api/src/main/java/org/keycloak/dom/saml/v2/assertion/AttributeValueElementType.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNjoyODowM1rOGwNzSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwODoxMDo1NFrOGwdxYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIxMDk1Mg==", "bodyText": "The type should be a QName to include namespace definition, to allow for schema validation (see xs or ns in the following example):\n        <saml:AttributeValue xsi:type=\"xs:string\">value</saml:AttributeValue>\n        <saml:AttributeValue xsi:type=\"ns:Role\" xmlns:ns=\"urn:my:resource:type\">value</saml:AttributeValue>\nIn the case of serialization of the type, if the namespace part of QName is defined, in needs to be declared in the AttributeValue attribute. If it is not, it would allow declarations from the PR like:\n        <saml:AttributeValue xsi:type=\"Role\">value</saml:AttributeValue>\nYet the namespace-less variants do not allow schema validation so should be not used.", "url": "https://github.com/keycloak/keycloak/pull/7246#discussion_r453210952", "createdAt": "2020-07-11T16:28:03Z", "author": {"login": "hmlnarik"}, "path": "saml-core-api/src/main/java/org/keycloak/dom/saml/v2/assertion/AttributeValueElementType.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package org.keycloak.dom.saml.v2.assertion;\n+\n+import java.io.Serializable;\n+\n+import org.w3c.dom.Element;\n+\n+public class AttributeValueElementType implements Serializable {\n+\n+    private String type;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "429bf337fbcd76e998a2ef2a7b563b403500008c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ2NTM5OQ==", "bodyText": "I implemented the changes as suggested.", "url": "https://github.com/keycloak/keycloak/pull/7246#discussion_r453465399", "createdAt": "2020-07-13T06:48:10Z", "author": {"login": "mwalliczek"}, "path": "saml-core-api/src/main/java/org/keycloak/dom/saml/v2/assertion/AttributeValueElementType.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package org.keycloak.dom.saml.v2.assertion;\n+\n+import java.io.Serializable;\n+\n+import org.w3c.dom.Element;\n+\n+public class AttributeValueElementType implements Serializable {\n+\n+    private String type;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIxMDk1Mg=="}, "originalCommit": {"oid": "429bf337fbcd76e998a2ef2a7b563b403500008c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ3MjYxMA==", "bodyText": "I just read the specification one more time and I think you were right with the first comment: The type attribute at attributeValue is obsolete, when the child is an element with its own type and namespace declaration.\nThe type is only necessary at simple elements like string and date, but not at complex elements.\nSo I removed the type and the AttributeValueType completly.\nSorry for the confusion.", "url": "https://github.com/keycloak/keycloak/pull/7246#discussion_r453472610", "createdAt": "2020-07-13T08:10:54Z", "author": {"login": "mwalliczek"}, "path": "saml-core-api/src/main/java/org/keycloak/dom/saml/v2/assertion/AttributeValueElementType.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package org.keycloak.dom.saml.v2.assertion;\n+\n+import java.io.Serializable;\n+\n+import org.w3c.dom.Element;\n+\n+public class AttributeValueElementType implements Serializable {\n+\n+    private String type;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIxMDk1Mg=="}, "originalCommit": {"oid": "429bf337fbcd76e998a2ef2a7b563b403500008c"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3467, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}