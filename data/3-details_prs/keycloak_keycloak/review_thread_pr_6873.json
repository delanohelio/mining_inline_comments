{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NjczOTU5", "number": 6873, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjoxNzoxN1rOD5YD0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjoxOTozOVrOD5YHJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDg5NjE5OnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/concurrency/ConcurrencyTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjoxNzoxN1rOGQmpiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwODo1OToyM1rOGTTJng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA2MzYyNQ==", "bodyText": "The response is never closed and causes connection leak.\nCreator relieves you from boilerplate code, see e.g. https://github.com/keycloak/keycloak/blob/master/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/UserTest.java#L2047.", "url": "https://github.com/keycloak/keycloak/pull/6873#discussion_r420063625", "createdAt": "2020-05-05T12:17:17Z", "author": {"login": "hmlnarik"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/concurrency/ConcurrencyTest.java", "diffHunk": "@@ -51,6 +62,38 @@ public void concurrentTest(KeycloakRunnable... tasks) throws Throwable {\n         System.out.println(\"took \" + end + \" ms\");\n     }\n \n+    // KEYCLOAK-8141 Verify that no attribute values are duplicated, and there are no locking exceptions when adding attributes in parallell\n+    @Test\n+    @Ignore\n+    public void createUserAttributes() throws Throwable {\n+        AtomicInteger c = new AtomicInteger();\n+\n+        UsersResource users = testRealm().users();\n+\n+        UserRepresentation u = UserBuilder.create().username(\"attributes\").build();\n+        Response response = users.create(u);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30e84c563620a50cd6302e8774f929f147f3dbe1"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAwOTAxOQ==", "bodyText": "Doesn't really save me anything - just closing the response. IMO the try with makes the code less readable and messy.", "url": "https://github.com/keycloak/keycloak/pull/6873#discussion_r422009019", "createdAt": "2020-05-08T08:11:43Z", "author": {"login": "stianst"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/concurrency/ConcurrencyTest.java", "diffHunk": "@@ -51,6 +62,38 @@ public void concurrentTest(KeycloakRunnable... tasks) throws Throwable {\n         System.out.println(\"took \" + end + \" ms\");\n     }\n \n+    // KEYCLOAK-8141 Verify that no attribute values are duplicated, and there are no locking exceptions when adding attributes in parallell\n+    @Test\n+    @Ignore\n+    public void createUserAttributes() throws Throwable {\n+        AtomicInteger c = new AtomicInteger();\n+\n+        UsersResource users = testRealm().users();\n+\n+        UserRepresentation u = UserBuilder.create().username(\"attributes\").build();\n+        Response response = users.create(u);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA2MzYyNQ=="}, "originalCommit": {"oid": "30e84c563620a50cd6302e8774f929f147f3dbe1"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg4OTg4Ng==", "bodyText": "It does. The try variant also ensures that the user is deleted after the block, and that even in case of failure of the test. This is not covered by the current code, thus complete realm delete is necessary before the next test", "url": "https://github.com/keycloak/keycloak/pull/6873#discussion_r422889886", "createdAt": "2020-05-11T08:59:23Z", "author": {"login": "hmlnarik"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/concurrency/ConcurrencyTest.java", "diffHunk": "@@ -51,6 +62,38 @@ public void concurrentTest(KeycloakRunnable... tasks) throws Throwable {\n         System.out.println(\"took \" + end + \" ms\");\n     }\n \n+    // KEYCLOAK-8141 Verify that no attribute values are duplicated, and there are no locking exceptions when adding attributes in parallell\n+    @Test\n+    @Ignore\n+    public void createUserAttributes() throws Throwable {\n+        AtomicInteger c = new AtomicInteger();\n+\n+        UsersResource users = testRealm().users();\n+\n+        UserRepresentation u = UserBuilder.create().username(\"attributes\").build();\n+        Response response = users.create(u);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA2MzYyNQ=="}, "originalCommit": {"oid": "30e84c563620a50cd6302e8774f929f147f3dbe1"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDkwMTY4OnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/concurrency/ConcurrencyTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjoxODo1MFrOGQms5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOTowMDo0MlrOGTTM6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA2NDQ4NQ==", "bodyText": "assertThat(rep.getAttributes(), Matchers.hasSize(lessThanOrEqualTo(c.get()) has better error reporting.", "url": "https://github.com/keycloak/keycloak/pull/6873#discussion_r420064485", "createdAt": "2020-05-05T12:18:50Z", "author": {"login": "hmlnarik"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/concurrency/ConcurrencyTest.java", "diffHunk": "@@ -51,6 +62,38 @@ public void concurrentTest(KeycloakRunnable... tasks) throws Throwable {\n         System.out.println(\"took \" + end + \" ms\");\n     }\n \n+    // KEYCLOAK-8141 Verify that no attribute values are duplicated, and there are no locking exceptions when adding attributes in parallell\n+    @Test\n+    @Ignore\n+    public void createUserAttributes() throws Throwable {\n+        AtomicInteger c = new AtomicInteger();\n+\n+        UsersResource users = testRealm().users();\n+\n+        UserRepresentation u = UserBuilder.create().username(\"attributes\").build();\n+        Response response = users.create(u);\n+        String userId = ApiUtil.getCreatedId(response);\n+\n+        UserResource user = users.get(userId);\n+\n+        concurrentTest((threadIndex, keycloak, realm) -> {\n+            UserRepresentation rep = user.toRepresentation();\n+            rep.singleAttribute(\"a-\" + c.getAndIncrement(), \"value\");\n+            user.update(rep);\n+        });\n+\n+        UserRepresentation rep = user.toRepresentation();\n+\n+        // Number of attributes should be equal to created attributes, or less (concurrent requests may drop attributes added by other threads)\n+        assertTrue(rep.getAttributes().size() <= c.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30e84c563620a50cd6302e8774f929f147f3dbe1"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAwNzEyOA==", "bodyText": "Nitpick - not changing", "url": "https://github.com/keycloak/keycloak/pull/6873#discussion_r422007128", "createdAt": "2020-05-08T08:07:12Z", "author": {"login": "stianst"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/concurrency/ConcurrencyTest.java", "diffHunk": "@@ -51,6 +62,38 @@ public void concurrentTest(KeycloakRunnable... tasks) throws Throwable {\n         System.out.println(\"took \" + end + \" ms\");\n     }\n \n+    // KEYCLOAK-8141 Verify that no attribute values are duplicated, and there are no locking exceptions when adding attributes in parallell\n+    @Test\n+    @Ignore\n+    public void createUserAttributes() throws Throwable {\n+        AtomicInteger c = new AtomicInteger();\n+\n+        UsersResource users = testRealm().users();\n+\n+        UserRepresentation u = UserBuilder.create().username(\"attributes\").build();\n+        Response response = users.create(u);\n+        String userId = ApiUtil.getCreatedId(response);\n+\n+        UserResource user = users.get(userId);\n+\n+        concurrentTest((threadIndex, keycloak, realm) -> {\n+            UserRepresentation rep = user.toRepresentation();\n+            rep.singleAttribute(\"a-\" + c.getAndIncrement(), \"value\");\n+            user.update(rep);\n+        });\n+\n+        UserRepresentation rep = user.toRepresentation();\n+\n+        // Number of attributes should be equal to created attributes, or less (concurrent requests may drop attributes added by other threads)\n+        assertTrue(rep.getAttributes().size() <= c.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA2NDQ4NQ=="}, "originalCommit": {"oid": "30e84c563620a50cd6302e8774f929f147f3dbe1"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg5MDczMQ==", "bodyText": "Not a nitpick.\nError reporting with assertThat shows the list items which is useful for bug investigation, especially in case of hard-to-reproduce concurrent tests.\nCurrent variant only fails without any further details", "url": "https://github.com/keycloak/keycloak/pull/6873#discussion_r422890731", "createdAt": "2020-05-11T09:00:42Z", "author": {"login": "hmlnarik"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/concurrency/ConcurrencyTest.java", "diffHunk": "@@ -51,6 +62,38 @@ public void concurrentTest(KeycloakRunnable... tasks) throws Throwable {\n         System.out.println(\"took \" + end + \" ms\");\n     }\n \n+    // KEYCLOAK-8141 Verify that no attribute values are duplicated, and there are no locking exceptions when adding attributes in parallell\n+    @Test\n+    @Ignore\n+    public void createUserAttributes() throws Throwable {\n+        AtomicInteger c = new AtomicInteger();\n+\n+        UsersResource users = testRealm().users();\n+\n+        UserRepresentation u = UserBuilder.create().username(\"attributes\").build();\n+        Response response = users.create(u);\n+        String userId = ApiUtil.getCreatedId(response);\n+\n+        UserResource user = users.get(userId);\n+\n+        concurrentTest((threadIndex, keycloak, realm) -> {\n+            UserRepresentation rep = user.toRepresentation();\n+            rep.singleAttribute(\"a-\" + c.getAndIncrement(), \"value\");\n+            user.update(rep);\n+        });\n+\n+        UserRepresentation rep = user.toRepresentation();\n+\n+        // Number of attributes should be equal to created attributes, or less (concurrent requests may drop attributes added by other threads)\n+        assertTrue(rep.getAttributes().size() <= c.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA2NDQ4NQ=="}, "originalCommit": {"oid": "30e84c563620a50cd6302e8774f929f147f3dbe1"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDkwNDcwOnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/concurrency/ConcurrencyTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjoxOTozOVrOGQmuvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwODo1ODozNlrOGTTHxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA2NDk1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        assertEquals(1, e.getValue().size());\n          \n          \n            \n                        assertThat(e.getValue(), Matchers.hasSize(1));\n          \n      \n    \n    \n  \n\nfor better error reporting.", "url": "https://github.com/keycloak/keycloak/pull/6873#discussion_r420064959", "createdAt": "2020-05-05T12:19:39Z", "author": {"login": "hmlnarik"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/concurrency/ConcurrencyTest.java", "diffHunk": "@@ -51,6 +62,38 @@ public void concurrentTest(KeycloakRunnable... tasks) throws Throwable {\n         System.out.println(\"took \" + end + \" ms\");\n     }\n \n+    // KEYCLOAK-8141 Verify that no attribute values are duplicated, and there are no locking exceptions when adding attributes in parallell\n+    @Test\n+    @Ignore\n+    public void createUserAttributes() throws Throwable {\n+        AtomicInteger c = new AtomicInteger();\n+\n+        UsersResource users = testRealm().users();\n+\n+        UserRepresentation u = UserBuilder.create().username(\"attributes\").build();\n+        Response response = users.create(u);\n+        String userId = ApiUtil.getCreatedId(response);\n+\n+        UserResource user = users.get(userId);\n+\n+        concurrentTest((threadIndex, keycloak, realm) -> {\n+            UserRepresentation rep = user.toRepresentation();\n+            rep.singleAttribute(\"a-\" + c.getAndIncrement(), \"value\");\n+            user.update(rep);\n+        });\n+\n+        UserRepresentation rep = user.toRepresentation();\n+\n+        // Number of attributes should be equal to created attributes, or less (concurrent requests may drop attributes added by other threads)\n+        assertTrue(rep.getAttributes().size() <= c.get());\n+\n+        // All attributes should have a single value\n+        for (Map.Entry<String, List<String>> e : rep.getAttributes().entrySet()) {\n+            assertEquals(1, e.getValue().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30e84c563620a50cd6302e8774f929f147f3dbe1"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAwNzE2Mw==", "bodyText": "Nitpick - not changing", "url": "https://github.com/keycloak/keycloak/pull/6873#discussion_r422007163", "createdAt": "2020-05-08T08:07:18Z", "author": {"login": "stianst"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/concurrency/ConcurrencyTest.java", "diffHunk": "@@ -51,6 +62,38 @@ public void concurrentTest(KeycloakRunnable... tasks) throws Throwable {\n         System.out.println(\"took \" + end + \" ms\");\n     }\n \n+    // KEYCLOAK-8141 Verify that no attribute values are duplicated, and there are no locking exceptions when adding attributes in parallell\n+    @Test\n+    @Ignore\n+    public void createUserAttributes() throws Throwable {\n+        AtomicInteger c = new AtomicInteger();\n+\n+        UsersResource users = testRealm().users();\n+\n+        UserRepresentation u = UserBuilder.create().username(\"attributes\").build();\n+        Response response = users.create(u);\n+        String userId = ApiUtil.getCreatedId(response);\n+\n+        UserResource user = users.get(userId);\n+\n+        concurrentTest((threadIndex, keycloak, realm) -> {\n+            UserRepresentation rep = user.toRepresentation();\n+            rep.singleAttribute(\"a-\" + c.getAndIncrement(), \"value\");\n+            user.update(rep);\n+        });\n+\n+        UserRepresentation rep = user.toRepresentation();\n+\n+        // Number of attributes should be equal to created attributes, or less (concurrent requests may drop attributes added by other threads)\n+        assertTrue(rep.getAttributes().size() <= c.get());\n+\n+        // All attributes should have a single value\n+        for (Map.Entry<String, List<String>> e : rep.getAttributes().entrySet()) {\n+            assertEquals(1, e.getValue().size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA2NDk1OQ=="}, "originalCommit": {"oid": "30e84c563620a50cd6302e8774f929f147f3dbe1"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg4OTQxMw==", "bodyText": "Not a nitpick.\nError reporting with assertThat shows the list items which is useful for bug investigation, especially in case of hard-to-reproduce concurrent tests.", "url": "https://github.com/keycloak/keycloak/pull/6873#discussion_r422889413", "createdAt": "2020-05-11T08:58:36Z", "author": {"login": "hmlnarik"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/concurrency/ConcurrencyTest.java", "diffHunk": "@@ -51,6 +62,38 @@ public void concurrentTest(KeycloakRunnable... tasks) throws Throwable {\n         System.out.println(\"took \" + end + \" ms\");\n     }\n \n+    // KEYCLOAK-8141 Verify that no attribute values are duplicated, and there are no locking exceptions when adding attributes in parallell\n+    @Test\n+    @Ignore\n+    public void createUserAttributes() throws Throwable {\n+        AtomicInteger c = new AtomicInteger();\n+\n+        UsersResource users = testRealm().users();\n+\n+        UserRepresentation u = UserBuilder.create().username(\"attributes\").build();\n+        Response response = users.create(u);\n+        String userId = ApiUtil.getCreatedId(response);\n+\n+        UserResource user = users.get(userId);\n+\n+        concurrentTest((threadIndex, keycloak, realm) -> {\n+            UserRepresentation rep = user.toRepresentation();\n+            rep.singleAttribute(\"a-\" + c.getAndIncrement(), \"value\");\n+            user.update(rep);\n+        });\n+\n+        UserRepresentation rep = user.toRepresentation();\n+\n+        // Number of attributes should be equal to created attributes, or less (concurrent requests may drop attributes added by other threads)\n+        assertTrue(rep.getAttributes().size() <= c.get());\n+\n+        // All attributes should have a single value\n+        for (Map.Entry<String, List<String>> e : rep.getAttributes().entrySet()) {\n+            assertEquals(1, e.getValue().size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA2NDk1OQ=="}, "originalCommit": {"oid": "30e84c563620a50cd6302e8774f929f147f3dbe1"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3816, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}