{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5NDkwNzcx", "number": 7649, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTo1MjoyNlrOE-0QkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMzo1ODoxNlrOFA0Ahg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzAzMzc3OnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/test/resources/log4j.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTo1MjoyNlrOH8LUqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTo1MjoyNlrOH8LUqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg2MjEyMg==", "bodyText": "GHA failed on out of memory because of these lines, better keep them commented out :-)", "url": "https://github.com/keycloak/keycloak/pull/7649#discussion_r532862122", "createdAt": "2020-11-30T19:52:26Z", "author": {"login": "hmlnarik"}, "path": "testsuite/integration-arquillian/tests/base/src/test/resources/log4j.properties", "diffHunk": "@@ -89,8 +89,8 @@ log4j.logger.org.keycloak.services.clientregistration.policy=debug\n # Enable logs the JDBC parameters passed to a query\n #log4j.logger.org.hibernate.type=trace\n \n-# log4j.logger.org.keycloak.models.map=trace\n-# log4j.logger.org.keycloak.models.map.transaction=debug\n+log4j.logger.org.keycloak.models.map=trace\n+log4j.logger.org.keycloak.models.map.transaction=debug\n \n # Enable to log short stack traces for log entries enabled with StackUtil.getShortStackTrace() calls\n-# log4j.logger.org.keycloak.STACK_TRACE=trace\n+log4j.logger.org.keycloak.STACK_TRACE=trace", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8e7c23853baac5f42d9ff9406fefcfddf3033dc"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2Mzk2MzA5OnYy", "diffSide": "RIGHT", "path": "server-spi/src/main/java/org/keycloak/sessions/AuthenticationSessionProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMzo1ODowMVrOH_SByA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTo1MjozOFrOH_W5wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjExNzcwNA==", "bodyText": "Why has this method been introduced?", "url": "https://github.com/keycloak/keycloak/pull/7649#discussion_r536117704", "createdAt": "2020-12-04T13:58:01Z", "author": {"login": "hmlnarik"}, "path": "server-spi/src/main/java/org/keycloak/sessions/AuthenticationSessionProvider.java", "diffHunk": "@@ -31,27 +31,87 @@\n     /**\n      * Creates and registers a new authentication session with random ID. Authentication session\n      * entity will be prefilled with current timestamp, the given realm and client.\n+     * @param realm {@code RealmModel}\n+     * @return Returns created {@code RootAuthenticationSessionModel}. Never returns {@code null}.\n      */\n     RootAuthenticationSessionModel createRootAuthenticationSession(RealmModel realm);\n \n-    RootAuthenticationSessionModel createRootAuthenticationSession(String id, RealmModel realm);\n+    /**\n+     * Creates a new root authentication session specified by the provided id and realm.\n+     * @param id {@code String}\n+     * @param realm {@code RealmModel}\n+     * @return Returns created {@code RootAuthenticationSessionModel}. Never returns {@code null}.\n+     * @deprecated Use {@link #createRootAuthenticationSession(RealmModel, String)} createRootAuthenticationSession} instead.\n+     */\n+    @Deprecated\n+    default RootAuthenticationSessionModel createRootAuthenticationSession(String id, RealmModel realm) {\n+        return createRootAuthenticationSession(realm, id);\n+    }\n \n+    /**\n+     * Creates a new root authentication session specified by the provided realm and id.\n+     * @param realm {@code RealmModel}\n+     * @param id {@code String}\n+     * @return Returns created {@code RootAuthenticationSessionModel}. Never returns {@code null}.\n+     */\n+    RootAuthenticationSessionModel createRootAuthenticationSession(RealmModel realm, String id);\n+\n+    /**\n+     * Returns the root authentication session specified by the provided realm and id.\n+     * @param realm {@code RealmModel}\n+     * @param authenticationSessionId {@code RootAuthenticationSessionModel}\n+     * @return Returns found {@code RootAuthenticationSessionModel} or {@code null} if no root authentication session is found.\n+     */\n     RootAuthenticationSessionModel getRootAuthenticationSession(RealmModel realm, String authenticationSessionId);\n \n-    void removeRootAuthenticationSession(RealmModel realm, RootAuthenticationSessionModel authenticationSession);\n+    /**\n+     * Removes provided root authentication session.\n+     * @param realm {@code RealmModel}\n+     * @param authenticationSession {@code RootAuthenticationSessionModel}\n+     * @deprecated Use {@link #removeRootAuthenticationSession(RootAuthenticationSessionModel)} removeRootAuthenticationSession} instead.\n+     */\n+    @Deprecated\n+    default void removeRootAuthenticationSession(RealmModel realm, RootAuthenticationSessionModel authenticationSession) {\n+        removeRootAuthenticationSession(authenticationSession);\n+    }\n+\n+    /**\n+     * Removes provided root authentication session.\n+     * @param authenticationSession {@code RootAuthenticationSessionModel}\n+     */\n+    void removeRootAuthenticationSession(RootAuthenticationSessionModel authenticationSession);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d80db29096f04c84e8ac4cbcf55d80a41c3d5cc"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzNjg3OA==", "bodyText": "Because I deprecated removeRootAuthenticationSession(RealmModel realm, RootAuthenticationSessionModel authenticationSession) as realm parameter is not used.", "url": "https://github.com/keycloak/keycloak/pull/7649#discussion_r536136878", "createdAt": "2020-12-04T14:26:48Z", "author": {"login": "martin-kanis"}, "path": "server-spi/src/main/java/org/keycloak/sessions/AuthenticationSessionProvider.java", "diffHunk": "@@ -31,27 +31,87 @@\n     /**\n      * Creates and registers a new authentication session with random ID. Authentication session\n      * entity will be prefilled with current timestamp, the given realm and client.\n+     * @param realm {@code RealmModel}\n+     * @return Returns created {@code RootAuthenticationSessionModel}. Never returns {@code null}.\n      */\n     RootAuthenticationSessionModel createRootAuthenticationSession(RealmModel realm);\n \n-    RootAuthenticationSessionModel createRootAuthenticationSession(String id, RealmModel realm);\n+    /**\n+     * Creates a new root authentication session specified by the provided id and realm.\n+     * @param id {@code String}\n+     * @param realm {@code RealmModel}\n+     * @return Returns created {@code RootAuthenticationSessionModel}. Never returns {@code null}.\n+     * @deprecated Use {@link #createRootAuthenticationSession(RealmModel, String)} createRootAuthenticationSession} instead.\n+     */\n+    @Deprecated\n+    default RootAuthenticationSessionModel createRootAuthenticationSession(String id, RealmModel realm) {\n+        return createRootAuthenticationSession(realm, id);\n+    }\n \n+    /**\n+     * Creates a new root authentication session specified by the provided realm and id.\n+     * @param realm {@code RealmModel}\n+     * @param id {@code String}\n+     * @return Returns created {@code RootAuthenticationSessionModel}. Never returns {@code null}.\n+     */\n+    RootAuthenticationSessionModel createRootAuthenticationSession(RealmModel realm, String id);\n+\n+    /**\n+     * Returns the root authentication session specified by the provided realm and id.\n+     * @param realm {@code RealmModel}\n+     * @param authenticationSessionId {@code RootAuthenticationSessionModel}\n+     * @return Returns found {@code RootAuthenticationSessionModel} or {@code null} if no root authentication session is found.\n+     */\n     RootAuthenticationSessionModel getRootAuthenticationSession(RealmModel realm, String authenticationSessionId);\n \n-    void removeRootAuthenticationSession(RealmModel realm, RootAuthenticationSessionModel authenticationSession);\n+    /**\n+     * Removes provided root authentication session.\n+     * @param realm {@code RealmModel}\n+     * @param authenticationSession {@code RootAuthenticationSessionModel}\n+     * @deprecated Use {@link #removeRootAuthenticationSession(RootAuthenticationSessionModel)} removeRootAuthenticationSession} instead.\n+     */\n+    @Deprecated\n+    default void removeRootAuthenticationSession(RealmModel realm, RootAuthenticationSessionModel authenticationSession) {\n+        removeRootAuthenticationSession(authenticationSession);\n+    }\n+\n+    /**\n+     * Removes provided root authentication session.\n+     * @param authenticationSession {@code RootAuthenticationSessionModel}\n+     */\n+    void removeRootAuthenticationSession(RootAuthenticationSessionModel authenticationSession);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjExNzcwNA=="}, "originalCommit": {"oid": "2d80db29096f04c84e8ac4cbcf55d80a41c3d5cc"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NzU2OQ==", "bodyText": "Realm parameter is not used in the current implementation but is necessary to be retained for larger deployments with different logic of distributing sessions could leverage it.", "url": "https://github.com/keycloak/keycloak/pull/7649#discussion_r536197569", "createdAt": "2020-12-04T15:52:38Z", "author": {"login": "hmlnarik"}, "path": "server-spi/src/main/java/org/keycloak/sessions/AuthenticationSessionProvider.java", "diffHunk": "@@ -31,27 +31,87 @@\n     /**\n      * Creates and registers a new authentication session with random ID. Authentication session\n      * entity will be prefilled with current timestamp, the given realm and client.\n+     * @param realm {@code RealmModel}\n+     * @return Returns created {@code RootAuthenticationSessionModel}. Never returns {@code null}.\n      */\n     RootAuthenticationSessionModel createRootAuthenticationSession(RealmModel realm);\n \n-    RootAuthenticationSessionModel createRootAuthenticationSession(String id, RealmModel realm);\n+    /**\n+     * Creates a new root authentication session specified by the provided id and realm.\n+     * @param id {@code String}\n+     * @param realm {@code RealmModel}\n+     * @return Returns created {@code RootAuthenticationSessionModel}. Never returns {@code null}.\n+     * @deprecated Use {@link #createRootAuthenticationSession(RealmModel, String)} createRootAuthenticationSession} instead.\n+     */\n+    @Deprecated\n+    default RootAuthenticationSessionModel createRootAuthenticationSession(String id, RealmModel realm) {\n+        return createRootAuthenticationSession(realm, id);\n+    }\n \n+    /**\n+     * Creates a new root authentication session specified by the provided realm and id.\n+     * @param realm {@code RealmModel}\n+     * @param id {@code String}\n+     * @return Returns created {@code RootAuthenticationSessionModel}. Never returns {@code null}.\n+     */\n+    RootAuthenticationSessionModel createRootAuthenticationSession(RealmModel realm, String id);\n+\n+    /**\n+     * Returns the root authentication session specified by the provided realm and id.\n+     * @param realm {@code RealmModel}\n+     * @param authenticationSessionId {@code RootAuthenticationSessionModel}\n+     * @return Returns found {@code RootAuthenticationSessionModel} or {@code null} if no root authentication session is found.\n+     */\n     RootAuthenticationSessionModel getRootAuthenticationSession(RealmModel realm, String authenticationSessionId);\n \n-    void removeRootAuthenticationSession(RealmModel realm, RootAuthenticationSessionModel authenticationSession);\n+    /**\n+     * Removes provided root authentication session.\n+     * @param realm {@code RealmModel}\n+     * @param authenticationSession {@code RootAuthenticationSessionModel}\n+     * @deprecated Use {@link #removeRootAuthenticationSession(RootAuthenticationSessionModel)} removeRootAuthenticationSession} instead.\n+     */\n+    @Deprecated\n+    default void removeRootAuthenticationSession(RealmModel realm, RootAuthenticationSessionModel authenticationSession) {\n+        removeRootAuthenticationSession(authenticationSession);\n+    }\n+\n+    /**\n+     * Removes provided root authentication session.\n+     * @param authenticationSession {@code RootAuthenticationSessionModel}\n+     */\n+    void removeRootAuthenticationSession(RootAuthenticationSessionModel authenticationSession);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjExNzcwNA=="}, "originalCommit": {"oid": "2d80db29096f04c84e8ac4cbcf55d80a41c3d5cc"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2Mzk2NDIyOnYy", "diffSide": "RIGHT", "path": "server-spi/src/main/java/org/keycloak/sessions/AuthenticationSessionProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMzo1ODoxNlrOH_SCbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTo1Mjo0NFrOH_W6Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjExNzg2OA==", "bodyText": "Why has this method been introduced?", "url": "https://github.com/keycloak/keycloak/pull/7649#discussion_r536117868", "createdAt": "2020-12-04T13:58:16Z", "author": {"login": "hmlnarik"}, "path": "server-spi/src/main/java/org/keycloak/sessions/AuthenticationSessionProvider.java", "diffHunk": "@@ -31,27 +31,87 @@\n     /**\n      * Creates and registers a new authentication session with random ID. Authentication session\n      * entity will be prefilled with current timestamp, the given realm and client.\n+     * @param realm {@code RealmModel}\n+     * @return Returns created {@code RootAuthenticationSessionModel}. Never returns {@code null}.\n      */\n     RootAuthenticationSessionModel createRootAuthenticationSession(RealmModel realm);\n \n-    RootAuthenticationSessionModel createRootAuthenticationSession(String id, RealmModel realm);\n+    /**\n+     * Creates a new root authentication session specified by the provided id and realm.\n+     * @param id {@code String}\n+     * @param realm {@code RealmModel}\n+     * @return Returns created {@code RootAuthenticationSessionModel}. Never returns {@code null}.\n+     * @deprecated Use {@link #createRootAuthenticationSession(RealmModel, String)} createRootAuthenticationSession} instead.\n+     */\n+    @Deprecated\n+    default RootAuthenticationSessionModel createRootAuthenticationSession(String id, RealmModel realm) {\n+        return createRootAuthenticationSession(realm, id);\n+    }\n \n+    /**\n+     * Creates a new root authentication session specified by the provided realm and id.\n+     * @param realm {@code RealmModel}\n+     * @param id {@code String}\n+     * @return Returns created {@code RootAuthenticationSessionModel}. Never returns {@code null}.\n+     */\n+    RootAuthenticationSessionModel createRootAuthenticationSession(RealmModel realm, String id);\n+\n+    /**\n+     * Returns the root authentication session specified by the provided realm and id.\n+     * @param realm {@code RealmModel}\n+     * @param authenticationSessionId {@code RootAuthenticationSessionModel}\n+     * @return Returns found {@code RootAuthenticationSessionModel} or {@code null} if no root authentication session is found.\n+     */\n     RootAuthenticationSessionModel getRootAuthenticationSession(RealmModel realm, String authenticationSessionId);\n \n-    void removeRootAuthenticationSession(RealmModel realm, RootAuthenticationSessionModel authenticationSession);\n+    /**\n+     * Removes provided root authentication session.\n+     * @param realm {@code RealmModel}\n+     * @param authenticationSession {@code RootAuthenticationSessionModel}\n+     * @deprecated Use {@link #removeRootAuthenticationSession(RootAuthenticationSessionModel)} removeRootAuthenticationSession} instead.\n+     */\n+    @Deprecated\n+    default void removeRootAuthenticationSession(RealmModel realm, RootAuthenticationSessionModel authenticationSession) {\n+        removeRootAuthenticationSession(authenticationSession);\n+    }\n+\n+    /**\n+     * Removes provided root authentication session.\n+     * @param authenticationSession {@code RootAuthenticationSessionModel}\n+     */\n+    void removeRootAuthenticationSession(RootAuthenticationSessionModel authenticationSession);\n \n+    /**\n+     * Removes a root authentication session by the given id.\n+     * @param id {@code String}\n+     */\n+    void removeRootAuthenticationSessionById(String id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d80db29096f04c84e8ac4cbcf55d80a41c3d5cc"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzODIyMA==", "bodyText": "I needed it in MapRootAuthenticationSessionAdapter.removeAuthenticationSessionByTabId but I can access the tx via MapRootAuthenticationSessionProvider authenticationSessionProvider = (MapRootAuthenticationSessionProvider) session.authenticationSessions(); authenticationSessionProvider.tx.remove(entity.getId());", "url": "https://github.com/keycloak/keycloak/pull/7649#discussion_r536138220", "createdAt": "2020-12-04T14:28:43Z", "author": {"login": "martin-kanis"}, "path": "server-spi/src/main/java/org/keycloak/sessions/AuthenticationSessionProvider.java", "diffHunk": "@@ -31,27 +31,87 @@\n     /**\n      * Creates and registers a new authentication session with random ID. Authentication session\n      * entity will be prefilled with current timestamp, the given realm and client.\n+     * @param realm {@code RealmModel}\n+     * @return Returns created {@code RootAuthenticationSessionModel}. Never returns {@code null}.\n      */\n     RootAuthenticationSessionModel createRootAuthenticationSession(RealmModel realm);\n \n-    RootAuthenticationSessionModel createRootAuthenticationSession(String id, RealmModel realm);\n+    /**\n+     * Creates a new root authentication session specified by the provided id and realm.\n+     * @param id {@code String}\n+     * @param realm {@code RealmModel}\n+     * @return Returns created {@code RootAuthenticationSessionModel}. Never returns {@code null}.\n+     * @deprecated Use {@link #createRootAuthenticationSession(RealmModel, String)} createRootAuthenticationSession} instead.\n+     */\n+    @Deprecated\n+    default RootAuthenticationSessionModel createRootAuthenticationSession(String id, RealmModel realm) {\n+        return createRootAuthenticationSession(realm, id);\n+    }\n \n+    /**\n+     * Creates a new root authentication session specified by the provided realm and id.\n+     * @param realm {@code RealmModel}\n+     * @param id {@code String}\n+     * @return Returns created {@code RootAuthenticationSessionModel}. Never returns {@code null}.\n+     */\n+    RootAuthenticationSessionModel createRootAuthenticationSession(RealmModel realm, String id);\n+\n+    /**\n+     * Returns the root authentication session specified by the provided realm and id.\n+     * @param realm {@code RealmModel}\n+     * @param authenticationSessionId {@code RootAuthenticationSessionModel}\n+     * @return Returns found {@code RootAuthenticationSessionModel} or {@code null} if no root authentication session is found.\n+     */\n     RootAuthenticationSessionModel getRootAuthenticationSession(RealmModel realm, String authenticationSessionId);\n \n-    void removeRootAuthenticationSession(RealmModel realm, RootAuthenticationSessionModel authenticationSession);\n+    /**\n+     * Removes provided root authentication session.\n+     * @param realm {@code RealmModel}\n+     * @param authenticationSession {@code RootAuthenticationSessionModel}\n+     * @deprecated Use {@link #removeRootAuthenticationSession(RootAuthenticationSessionModel)} removeRootAuthenticationSession} instead.\n+     */\n+    @Deprecated\n+    default void removeRootAuthenticationSession(RealmModel realm, RootAuthenticationSessionModel authenticationSession) {\n+        removeRootAuthenticationSession(authenticationSession);\n+    }\n+\n+    /**\n+     * Removes provided root authentication session.\n+     * @param authenticationSession {@code RootAuthenticationSessionModel}\n+     */\n+    void removeRootAuthenticationSession(RootAuthenticationSessionModel authenticationSession);\n \n+    /**\n+     * Removes a root authentication session by the given id.\n+     * @param id {@code String}\n+     */\n+    void removeRootAuthenticationSessionById(String id);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjExNzg2OA=="}, "originalCommit": {"oid": "2d80db29096f04c84e8ac4cbcf55d80a41c3d5cc"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NzY1MQ==", "bodyText": "This needs to be done via the other method. Auth sessions are always tied to realm, RealmModel is thus a mandatory parameter.", "url": "https://github.com/keycloak/keycloak/pull/7649#discussion_r536197651", "createdAt": "2020-12-04T15:52:44Z", "author": {"login": "hmlnarik"}, "path": "server-spi/src/main/java/org/keycloak/sessions/AuthenticationSessionProvider.java", "diffHunk": "@@ -31,27 +31,87 @@\n     /**\n      * Creates and registers a new authentication session with random ID. Authentication session\n      * entity will be prefilled with current timestamp, the given realm and client.\n+     * @param realm {@code RealmModel}\n+     * @return Returns created {@code RootAuthenticationSessionModel}. Never returns {@code null}.\n      */\n     RootAuthenticationSessionModel createRootAuthenticationSession(RealmModel realm);\n \n-    RootAuthenticationSessionModel createRootAuthenticationSession(String id, RealmModel realm);\n+    /**\n+     * Creates a new root authentication session specified by the provided id and realm.\n+     * @param id {@code String}\n+     * @param realm {@code RealmModel}\n+     * @return Returns created {@code RootAuthenticationSessionModel}. Never returns {@code null}.\n+     * @deprecated Use {@link #createRootAuthenticationSession(RealmModel, String)} createRootAuthenticationSession} instead.\n+     */\n+    @Deprecated\n+    default RootAuthenticationSessionModel createRootAuthenticationSession(String id, RealmModel realm) {\n+        return createRootAuthenticationSession(realm, id);\n+    }\n \n+    /**\n+     * Creates a new root authentication session specified by the provided realm and id.\n+     * @param realm {@code RealmModel}\n+     * @param id {@code String}\n+     * @return Returns created {@code RootAuthenticationSessionModel}. Never returns {@code null}.\n+     */\n+    RootAuthenticationSessionModel createRootAuthenticationSession(RealmModel realm, String id);\n+\n+    /**\n+     * Returns the root authentication session specified by the provided realm and id.\n+     * @param realm {@code RealmModel}\n+     * @param authenticationSessionId {@code RootAuthenticationSessionModel}\n+     * @return Returns found {@code RootAuthenticationSessionModel} or {@code null} if no root authentication session is found.\n+     */\n     RootAuthenticationSessionModel getRootAuthenticationSession(RealmModel realm, String authenticationSessionId);\n \n-    void removeRootAuthenticationSession(RealmModel realm, RootAuthenticationSessionModel authenticationSession);\n+    /**\n+     * Removes provided root authentication session.\n+     * @param realm {@code RealmModel}\n+     * @param authenticationSession {@code RootAuthenticationSessionModel}\n+     * @deprecated Use {@link #removeRootAuthenticationSession(RootAuthenticationSessionModel)} removeRootAuthenticationSession} instead.\n+     */\n+    @Deprecated\n+    default void removeRootAuthenticationSession(RealmModel realm, RootAuthenticationSessionModel authenticationSession) {\n+        removeRootAuthenticationSession(authenticationSession);\n+    }\n+\n+    /**\n+     * Removes provided root authentication session.\n+     * @param authenticationSession {@code RootAuthenticationSessionModel}\n+     */\n+    void removeRootAuthenticationSession(RootAuthenticationSessionModel authenticationSession);\n \n+    /**\n+     * Removes a root authentication session by the given id.\n+     * @param id {@code String}\n+     */\n+    void removeRootAuthenticationSessionById(String id);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjExNzg2OA=="}, "originalCommit": {"oid": "2d80db29096f04c84e8ac4cbcf55d80a41c3d5cc"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3216, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}