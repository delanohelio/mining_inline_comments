{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2MzQ0Mzc0", "number": 7385, "title": "KEYCLOAK-11029 Support modification of broker username / ID for identity provider linking", "bodyText": "", "createdAt": "2020-08-31T14:43:38Z", "url": "https://github.com/keycloak/keycloak/pull/7385", "merged": true, "mergeCommit": {"oid": "583fa07bc4b03caa6b61790f8f1935fb9b011abf"}, "closed": true, "closedAt": "2020-09-01T18:40:39Z", "author": {"login": "hmlnarik"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEX-vsgBqjM3MTEzMTYyNjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEnZm4AFqTQ3OTczOTI0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a6563ef9eba96139c785dfdada9788f17f524119", "author": {"user": {"login": "hmlnarik", "name": "Hynek Mlna\u0159\u00edk"}}, "url": "https://github.com/keycloak/keycloak/commit/a6563ef9eba96139c785dfdada9788f17f524119", "committedDate": "2020-08-31T14:42:35Z", "message": "KEYCLOAK-11029 Support modification of broker username / ID for identity provider linking"}, "afterCommit": {"oid": "b06c7f2c3bd2a25c88fe6c1762230ff5054d7005", "author": {"user": {"login": "hmlnarik", "name": "Hynek Mlna\u0159\u00edk"}}, "url": "https://github.com/keycloak/keycloak/commit/b06c7f2c3bd2a25c88fe6c1762230ff5054d7005", "committedDate": "2020-08-31T19:28:57Z", "message": "KEYCLOAK-11029 Support modification of broker username / ID for identity provider linking"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b06c7f2c3bd2a25c88fe6c1762230ff5054d7005", "author": {"user": {"login": "hmlnarik", "name": "Hynek Mlna\u0159\u00edk"}}, "url": "https://github.com/keycloak/keycloak/commit/b06c7f2c3bd2a25c88fe6c1762230ff5054d7005", "committedDate": "2020-08-31T19:28:57Z", "message": "KEYCLOAK-11029 Support modification of broker username / ID for identity provider linking"}, "afterCommit": {"oid": "0c0940d0461d9f92893c477c9a89840d1343cceb", "author": {"user": {"login": "hmlnarik", "name": "Hynek Mlna\u0159\u00edk"}}, "url": "https://github.com/keycloak/keycloak/commit/0c0940d0461d9f92893c477c9a89840d1343cceb", "committedDate": "2020-08-31T20:06:36Z", "message": "KEYCLOAK-11029 Support modification of broker username / ID for identity provider linking"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5NTI0NjAw", "url": "https://github.com/keycloak/keycloak/pull/7385#pullrequestreview-479524600", "createdAt": "2020-09-01T08:43:24Z", "commit": {"oid": "0c0940d0461d9f92893c477c9a89840d1343cceb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwODo0MzoyNFrOHKsQmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwODo0NTozNlrOHKsV5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk3Mjk1Mg==", "bodyText": "I think the annotation @LDAPConnectionParameters is not necessary and probably should not be used in this test. Or is there any reason for using and not rely on the default?\nIf the annotation is needed for this test, it will be good to run the LDAP tests in pipeline and check if this works for other LDAP servers besides ApacheDS, as I have some doubts it will work. The only test where this annotation is currently used is LDAPUserLoginTest, which is supposed to execute just on LDAP embedded ApacheDS server.  However not sure if LDAP tests in pipeline are not currently broken :(\nSame comment applies for all other occurences of this annotation.", "url": "https://github.com/keycloak/keycloak/pull/7385#discussion_r480972952", "createdAt": "2020-09-01T08:43:24Z", "author": {"login": "mposolda"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/federation/ldap/LDAPSamlIdPInitiatedVaryingLetterCaseTest.java", "diffHunk": "@@ -0,0 +1,305 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.testsuite.federation.ldap;\n+\n+import org.keycloak.OAuth2Constants;\n+import org.keycloak.admin.client.resource.IdentityProviderResource;\n+import org.keycloak.authentication.authenticators.broker.IdpAutoLinkAuthenticatorFactory;\n+import org.keycloak.authentication.authenticators.broker.IdpCreateUserIfUniqueAuthenticatorFactory;\n+import org.keycloak.broker.saml.SAMLIdentityProviderConfig;\n+import org.keycloak.broker.saml.mappers.UsernameTemplateMapper;\n+import org.keycloak.broker.saml.mappers.UsernameTemplateMapper.Target;\n+import org.keycloak.common.util.MultivaluedHashMap;\n+import org.keycloak.dom.saml.v2.protocol.ResponseType;\n+import org.keycloak.models.AuthenticationExecutionModel.Requirement;\n+import org.keycloak.models.IdentityProviderMapperModel;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.protocol.oidc.OIDCLoginProtocol;\n+import org.keycloak.protocol.saml.SamlProtocol;\n+import org.keycloak.representations.idm.AuthenticationExecutionInfoRepresentation;\n+import org.keycloak.representations.idm.AuthenticationFlowRepresentation;\n+import org.keycloak.representations.idm.ComponentRepresentation;\n+import org.keycloak.representations.idm.IdentityProviderMapperRepresentation;\n+import org.keycloak.representations.idm.IdentityProviderRepresentation;\n+import org.keycloak.saml.SAML2LoginResponseBuilder;\n+import org.keycloak.saml.common.constants.JBossSAMLURIConstants;\n+import org.keycloak.saml.common.exceptions.ConfigurationException;\n+import org.keycloak.saml.common.exceptions.ProcessingException;\n+import org.keycloak.services.resources.RealmsResource;\n+import org.keycloak.storage.ldap.idm.model.LDAPObject;\n+import org.keycloak.storage.ldap.mappers.UserAttributeLDAPStorageMapper;\n+import org.keycloak.storage.ldap.mappers.UserAttributeLDAPStorageMapperFactory;\n+import org.keycloak.testsuite.Assert;\n+import org.keycloak.testsuite.broker.KcSamlBrokerConfiguration;\n+import org.keycloak.testsuite.pages.AppPage;\n+import org.keycloak.testsuite.updaters.Creator;\n+import org.keycloak.testsuite.util.ClientBuilder;\n+import org.keycloak.testsuite.util.LDAPRule;\n+import org.keycloak.testsuite.util.LDAPRule.LDAPConnectionParameters;\n+import org.keycloak.testsuite.util.LDAPTestUtils;\n+import org.keycloak.testsuite.util.Matchers;\n+import org.keycloak.testsuite.util.SamlClient.Binding;\n+import org.keycloak.testsuite.util.SamlClientBuilder;\n+import com.google.common.collect.ImmutableMap;\n+import java.net.URI;\n+import java.util.UUID;\n+import javax.ws.rs.core.UriBuilder;\n+import javax.ws.rs.core.UriBuilderException;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.assertThat;\n+import static org.keycloak.testsuite.broker.BrokerTestConstants.IDP_SAML_ALIAS;\n+import static org.keycloak.testsuite.federation.ldap.AbstractLDAPTest.TEST_REALM_NAME;\n+import static org.keycloak.testsuite.federation.ldap.AbstractLDAPTest.ldapModelId;\n+\n+/**\n+ *\n+ * @author hmlnarik\n+ */\n+public class LDAPSamlIdPInitiatedVaryingLetterCaseTest extends AbstractLDAPTest {\n+\n+    @ClassRule\n+    public static LDAPRule ldapRule = new LDAPRule();\n+\n+    private static final String USER_NAME_LDAP = \"JdOe\";\n+    private static final String USER_NAME_LOWERCASE = USER_NAME_LDAP.toLowerCase();\n+    private static final String USER_NAME_UPPERCASE = USER_NAME_LDAP.toUpperCase();\n+    private static final String USER_FIRST_NAME = \"Joe\";\n+    private static final String USER_LAST_NAME = \"Doe\";\n+    private static final String USER_PASSWORD = \"P@ssw0rd!\";\n+    private static final String USER_EMAIL = \"jdoe@keycloak.org\";\n+    private static final String USER_STREET = \"Street\";\n+    private static final String USER_POSTAL_CODE = \"Post code\";\n+\n+    private static final String MY_APP = \"myapp\";\n+    private static final String EXT_SSO = \"sso\";\n+    private static final String EXT_SSO_URL = \"http://localhost-\" + EXT_SSO + \".127.0.0.1.nip.io\";\n+    private static final String DUMMY_URL = \"http://localhost-\" + EXT_SSO + \"-dummy.127.0.0.1.nip.io\";\n+    private static final String FLOW_AUTO_LINK = \"AutoLink\";\n+\n+    private String idpAlias;\n+\n+    @Override\n+    protected LDAPRule getLDAPRule() {\n+        return ldapRule;\n+    }\n+\n+    @Override\n+    protected void afterImportTestRealm() {\n+        getTestingClient().server().run(session -> {\n+            LDAPTestContext ctx = LDAPTestContext.init(session);\n+            RealmModel appRealm = ctx.getRealm();\n+\n+            // Delete all LDAP users\n+            LDAPTestUtils.removeAllLDAPUsers(ctx.getLdapProvider(), appRealm);\n+            // Add some new LDAP users for testing\n+            LDAPObject user = LDAPTestUtils.addLDAPUser\n+            (\n+                ctx.getLdapProvider(),\n+                appRealm,\n+                USER_NAME_LDAP,\n+                USER_FIRST_NAME,\n+                USER_LAST_NAME,\n+                USER_EMAIL,\n+                USER_STREET,\n+                USER_POSTAL_CODE\n+            );\n+            LDAPTestUtils.updateLDAPPassword(ctx.getLdapProvider(), user, USER_PASSWORD);\n+        });\n+\n+        ComponentRepresentation ldap = testRealm().components().query(null, \"org.keycloak.storage.UserStorageProvider\").get(0);\n+        ComponentRepresentation ldapMapper = new ComponentRepresentation();\n+        ldapMapper.setName(\"uid-to-user-attr-mapper\");\n+        ldapMapper.setProviderId(UserAttributeLDAPStorageMapperFactory.PROVIDER_ID);\n+        ldapMapper.setProviderType(\"org.keycloak.storage.ldap.mappers.LDAPStorageMapper\");\n+        ldapMapper.setParentId(ldap.getId());\n+        MultivaluedHashMap<String, String> config = new MultivaluedHashMap<>();\n+        config.add(UserAttributeLDAPStorageMapper.USER_MODEL_ATTRIBUTE, \"ldapUid\");\n+        config.add(UserAttributeLDAPStorageMapper.LDAP_ATTRIBUTE, \"uid\");\n+        config.add(UserAttributeLDAPStorageMapper.READ_ONLY, \"true\");\n+        config.add(UserAttributeLDAPStorageMapper.IS_MANDATORY_IN_LDAP, \"true\");\n+        ldapMapper.setConfig(config);\n+        testRealm().components().add(ldapMapper);\n+    }\n+\n+    @Before\n+    public void setupIdentityProvider() {\n+        // Configure autolink flow\n+        AuthenticationFlowRepresentation newFlow = new AuthenticationFlowRepresentation();\n+        newFlow.setAlias(FLOW_AUTO_LINK);\n+        newFlow.setDescription(\"Auto-link flow\");\n+        newFlow.setProviderId(\"basic-flow\");\n+        newFlow.setBuiltIn(false);\n+        newFlow.setTopLevel(true);\n+\n+        Creator.Flow amr = Creator.create(testRealm(), newFlow);\n+\n+        AuthenticationExecutionInfoRepresentation exCreateUser = amr.addExecution(IdpCreateUserIfUniqueAuthenticatorFactory.PROVIDER_ID);\n+        exCreateUser.setRequirement(Requirement.ALTERNATIVE.name());\n+        testRealm().flows().updateExecutions(FLOW_AUTO_LINK, exCreateUser);\n+\n+        AuthenticationExecutionInfoRepresentation exAutoLink = amr.addExecution(IdpAutoLinkAuthenticatorFactory.PROVIDER_ID);\n+        exAutoLink.setRequirement(Requirement.ALTERNATIVE.name());\n+        testRealm().flows().updateExecutions(FLOW_AUTO_LINK, exAutoLink);\n+        getCleanup().addCleanup(amr);\n+\n+        // Configure identity provider\n+        IdentityProviderRepresentation idp = KcSamlBrokerConfiguration.INSTANCE.setUpIdentityProvider();\n+        idp.getConfig().put(SAMLIdentityProviderConfig.NAME_ID_POLICY_FORMAT, JBossSAMLURIConstants.NAMEID_FORMAT_UNSPECIFIED.get());\n+        idp.setFirstBrokerLoginFlowAlias(FLOW_AUTO_LINK);\n+        final Creator<IdentityProviderResource> idpCreator = Creator.create(testRealm(), idp);\n+        \n+        IdentityProviderMapperRepresentation samlNameIdMapper = new IdentityProviderMapperRepresentation();\n+        samlNameIdMapper.setName(\"username-nameid-mapper\");\n+        idpAlias = idp.getAlias();\n+        samlNameIdMapper.setIdentityProviderAlias(idpAlias);\n+        samlNameIdMapper.setIdentityProviderMapper(UsernameTemplateMapper.PROVIDER_ID);\n+        samlNameIdMapper.setConfig(ImmutableMap.<String,String>builder()\n+            .put(IdentityProviderMapperModel.SYNC_MODE, \"IMPORT\")\n+            .put(UsernameTemplateMapper.TEMPLATE, \"${NAMEID | lowercase}\")\n+            .put(UsernameTemplateMapper.TARGET, Target.BROKER_ID.name())\n+            .build());\n+        idpCreator.resource().addMapper(samlNameIdMapper);\n+\n+        getCleanup().addCleanup(idpCreator);\n+    }\n+\n+    @Before\n+    public void setupClients() {\n+        getCleanup().addCleanup(Creator.create(testRealm(), ClientBuilder.create()\n+          .protocol(SamlProtocol.LOGIN_PROTOCOL)\n+          .clientId(EXT_SSO_URL)\n+          .baseUrl(EXT_SSO_URL)\n+          .attribute(SamlProtocol.SAML_IDP_INITIATED_SSO_URL_NAME, EXT_SSO)\n+          .attribute(SamlProtocol.SAML_NAME_ID_FORMAT, JBossSAMLURIConstants.NAMEID_FORMAT_PERSISTENT.get())\n+          .attribute(SamlProtocol.SAML_ASSERTION_CONSUMER_URL_POST_ATTRIBUTE, DUMMY_URL)\n+          .build())\n+        );\n+\n+        getCleanup().addCleanup(Creator.create(testRealm(), ClientBuilder.create()\n+          .clientId(MY_APP)\n+          .protocol(OIDCLoginProtocol.LOGIN_PROTOCOL)\n+          .baseUrl(oauth.APP_AUTH_ROOT)\n+          .build())\n+        );\n+    }\n+\n+    @After\n+    public void cleanupUsers() {\n+        testRealm().userStorage().removeImportedUsers(ldapModelId);\n+    }\n+\n+    @Test\n+    @LDAPConnectionParameters(bindType=LDAPConnectionParameters.BindType.SIMPLE, encryption=LDAPConnectionParameters.Encryption.NONE)\n+    public void loginLDAPTest() {\n+        loginPage.open();\n+        loginPage.login(USER_NAME_LDAP, USER_PASSWORD);\n+        appPage.assertCurrent();\n+        Assert.assertEquals(AppPage.RequestType.AUTH_RESPONSE, appPage.getRequestType());\n+        Assert.assertNotNull(oauth.getCurrentQuery().get(OAuth2Constants.CODE));\n+        appPage.logout();\n+    }\n+\n+    protected URI getAuthServerBrokerSamlEndpoint(String realm, String identityProviderAlias, String samlClientId) throws IllegalArgumentException, UriBuilderException {\n+        return RealmsResource\n+                .realmBaseUrl(UriBuilder.fromUri(getAuthServerRoot()))\n+                .path(\"broker/{idp-name}/endpoint/clients/{client-id}\")\n+                .build(realm, identityProviderAlias, samlClientId);\n+    }\n+\n+    @Test\n+    @LDAPConnectionParameters(bindType=LDAPConnectionParameters.BindType.SIMPLE, encryption=LDAPConnectionParameters.Encryption.NONE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0940d0461d9f92893c477c9a89840d1343cceb"}, "originalPosition": 229}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk3NDMxMA==", "bodyText": "From the tooltip, it is not so obvious to me what Target is used for. However I don't have better idea how to improve this as it is not trivial to describe... So this is just a feedback for the case you can come with bit clearer description, but feel free to ignore this comment if not :)\nSame comment applies for SAML mapper too.", "url": "https://github.com/keycloak/keycloak/pull/7385#discussion_r480974310", "createdAt": "2020-09-01T08:45:36Z", "author": {"login": "mposolda"}, "path": "services/src/main/java/org/keycloak/broker/oidc/mappers/UsernameTemplateMapper.java", "diffHunk": "@@ -83,10 +90,20 @@\n         property = new ProviderConfigProperty();\n         property.setName(TEMPLATE);\n         property.setLabel(\"Template\");\n-        property.setHelpText(\"Template to use to format the username to import.  Substitutions are enclosed in ${}.  For example: '${ALIAS}.${CLAIM.sub}'.  ALIAS is the provider alias.  CLAIM.<NAME> references an ID or Access token claim.\");\n+        property.setHelpText(\"Template to use to format the username to import.  Substitutions are enclosed in ${}.  For example: '${ALIAS}.${CLAIM.sub}'.  ALIAS is the provider alias.  CLAIM.<NAME> references an ID or Access token claim. \\n\"\n+          + \"The substitution can be converted to upper or lower case by appending |uppercase or |lowercase to the substituted value, e.g. '${CLAIM.sub | lowercase}\");\n         property.setType(ProviderConfigProperty.STRING_TYPE);\n         property.setDefaultValue(\"${ALIAS}.${CLAIM.preferred_username}\");\n         configProperties.add(property);\n+\n+        property = new ProviderConfigProperty();\n+        property.setName(TARGET);\n+        property.setLabel(\"Target\");\n+        property.setHelpText(\"Destination username to apply the mapper to. LOCAL means that the changes are applied to the username stored in local database upon import. BROKER_ID and BROKER_USERNAME means that the changes are stored into the ID or username used for federation lookup, respectively.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0940d0461d9f92893c477c9a89840d1343cceb"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6504d242e65d4e2bf398010f2b075948e13353ef", "author": {"user": {"login": "hmlnarik", "name": "Hynek Mlna\u0159\u00edk"}}, "url": "https://github.com/keycloak/keycloak/commit/6504d242e65d4e2bf398010f2b075948e13353ef", "committedDate": "2020-09-01T11:22:51Z", "message": "KEYCLOAK-11029 Support modification of broker username / ID for identity provider linking"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c0940d0461d9f92893c477c9a89840d1343cceb", "author": {"user": {"login": "hmlnarik", "name": "Hynek Mlna\u0159\u00edk"}}, "url": "https://github.com/keycloak/keycloak/commit/0c0940d0461d9f92893c477c9a89840d1343cceb", "committedDate": "2020-08-31T20:06:36Z", "message": "KEYCLOAK-11029 Support modification of broker username / ID for identity provider linking"}, "afterCommit": {"oid": "6504d242e65d4e2bf398010f2b075948e13353ef", "author": {"user": {"login": "hmlnarik", "name": "Hynek Mlna\u0159\u00edk"}}, "url": "https://github.com/keycloak/keycloak/commit/6504d242e65d4e2bf398010f2b075948e13353ef", "committedDate": "2020-09-01T11:22:51Z", "message": "KEYCLOAK-11029 Support modification of broker username / ID for identity provider linking"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5NzM5MjQx", "url": "https://github.com/keycloak/keycloak/pull/7385#pullrequestreview-479739241", "createdAt": "2020-09-01T13:27:12Z", "commit": {"oid": "6504d242e65d4e2bf398010f2b075948e13353ef"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2785, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}