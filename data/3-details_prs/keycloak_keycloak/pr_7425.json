{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3ODA5NTAz", "number": 7425, "title": "KEYCLOAK-15450 Complement methods for accessing realms with Stream va\u2026", "bodyText": "\u2026riants", "createdAt": "2020-09-16T08:06:03Z", "url": "https://github.com/keycloak/keycloak/pull/7425", "merged": true, "mergeCommit": {"oid": "086f7b469610af379630ae80996221b32ef6cf6f"}, "closed": true, "closedAt": "2020-10-14T06:16:50Z", "author": {"login": "martin-kanis"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJZjnegBqjM3NzI0MjIxMzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSDp2fAFqTUwNzE1Mjg5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "67594635fbb791a030e2172928cd28941e18e185", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/67594635fbb791a030e2172928cd28941e18e185", "committedDate": "2020-09-16T08:04:49Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}, "afterCommit": {"oid": "da136dd1571ad99b0a5f0a36758da71ce4ba7446", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/da136dd1571ad99b0a5f0a36758da71ce4ba7446", "committedDate": "2020-09-16T10:08:47Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "da136dd1571ad99b0a5f0a36758da71ce4ba7446", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/da136dd1571ad99b0a5f0a36758da71ce4ba7446", "committedDate": "2020-09-16T10:08:47Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}, "afterCommit": {"oid": "6101e3407d7623782ac5f8ae90fb027c5db991b3", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/6101e3407d7623782ac5f8ae90fb027c5db991b3", "committedDate": "2020-09-17T09:33:48Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6101e3407d7623782ac5f8ae90fb027c5db991b3", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/6101e3407d7623782ac5f8ae90fb027c5db991b3", "committedDate": "2020-09-17T09:33:48Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}, "afterCommit": {"oid": "06efa3fd25351830973019b7751bf2c5ca2db07a", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/06efa3fd25351830973019b7751bf2c5ca2db07a", "committedDate": "2020-09-18T13:22:01Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "06efa3fd25351830973019b7751bf2c5ca2db07a", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/06efa3fd25351830973019b7751bf2c5ca2db07a", "committedDate": "2020-09-18T13:22:01Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}, "afterCommit": {"oid": "00135c2a18266dc541801d2943e4a7c5daead89f", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/00135c2a18266dc541801d2943e4a7c5daead89f", "committedDate": "2020-09-21T14:09:42Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "00135c2a18266dc541801d2943e4a7c5daead89f", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/00135c2a18266dc541801d2943e4a7c5daead89f", "committedDate": "2020-09-21T14:09:42Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}, "afterCommit": {"oid": "2a2b4c2ec3bf985020dc1218dde17f434d30883a", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/2a2b4c2ec3bf985020dc1218dde17f434d30883a", "committedDate": "2020-09-22T06:19:23Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2a2b4c2ec3bf985020dc1218dde17f434d30883a", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/2a2b4c2ec3bf985020dc1218dde17f434d30883a", "committedDate": "2020-09-22T06:19:23Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}, "afterCommit": {"oid": "14be7cb2d43201a72828a8823a4f3f6a1cadce39", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/14be7cb2d43201a72828a8823a4f3f6a1cadce39", "committedDate": "2020-09-22T14:43:14Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "14be7cb2d43201a72828a8823a4f3f6a1cadce39", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/14be7cb2d43201a72828a8823a4f3f6a1cadce39", "committedDate": "2020-09-22T14:43:14Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}, "afterCommit": {"oid": "4ebf4e5aa8ab0213289079f015de237a51a072fe", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/4ebf4e5aa8ab0213289079f015de237a51a072fe", "committedDate": "2020-09-22T14:45:39Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4ebf4e5aa8ab0213289079f015de237a51a072fe", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/4ebf4e5aa8ab0213289079f015de237a51a072fe", "committedDate": "2020-09-22T14:45:39Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}, "afterCommit": {"oid": "524f0e993521ba2a1a8fc01cfb6d49b6fae8db2f", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/524f0e993521ba2a1a8fc01cfb6d49b6fae8db2f", "committedDate": "2020-09-23T15:10:35Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "524f0e993521ba2a1a8fc01cfb6d49b6fae8db2f", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/524f0e993521ba2a1a8fc01cfb6d49b6fae8db2f", "committedDate": "2020-09-23T15:10:35Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}, "afterCommit": {"oid": "6609c3586be187dd2ed5e7b6a2a87f7a71d36e12", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/6609c3586be187dd2ed5e7b6a2a87f7a71d36e12", "committedDate": "2020-09-25T16:27:17Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6609c3586be187dd2ed5e7b6a2a87f7a71d36e12", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/6609c3586be187dd2ed5e7b6a2a87f7a71d36e12", "committedDate": "2020-09-25T16:27:17Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}, "afterCommit": {"oid": "c1f6dc034b30016ebd69d3672846633fabc5333f", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/c1f6dc034b30016ebd69d3672846633fabc5333f", "committedDate": "2020-09-29T08:24:13Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c1f6dc034b30016ebd69d3672846633fabc5333f", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/c1f6dc034b30016ebd69d3672846633fabc5333f", "committedDate": "2020-09-29T08:24:13Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}, "afterCommit": {"oid": "d09343696edde423ae7cec4360ecd4d6c1ecdd6a", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/d09343696edde423ae7cec4360ecd4d6c1ecdd6a", "committedDate": "2020-09-29T12:31:39Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d09343696edde423ae7cec4360ecd4d6c1ecdd6a", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/d09343696edde423ae7cec4360ecd4d6c1ecdd6a", "committedDate": "2020-09-29T12:31:39Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}, "afterCommit": {"oid": "c7c7d987c91c52b392e23f41db53541ddeceac38", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/c7c7d987c91c52b392e23f41db53541ddeceac38", "committedDate": "2020-09-29T16:05:59Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c7c7d987c91c52b392e23f41db53541ddeceac38", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/c7c7d987c91c52b392e23f41db53541ddeceac38", "committedDate": "2020-09-29T16:05:59Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}, "afterCommit": {"oid": "59cbfa8d184508e14dd79edf317cde79547d2251", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/59cbfa8d184508e14dd79edf317cde79547d2251", "committedDate": "2020-09-29T18:25:58Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "59cbfa8d184508e14dd79edf317cde79547d2251", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/59cbfa8d184508e14dd79edf317cde79547d2251", "committedDate": "2020-09-29T18:25:58Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}, "afterCommit": {"oid": "ecb1aa1fcbffe3aee331dfca61ddc21161a948e9", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/ecb1aa1fcbffe3aee331dfca61ddc21161a948e9", "committedDate": "2020-09-30T13:59:19Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NTE1MTQ4", "url": "https://github.com/keycloak/keycloak/pull/7425#pullrequestreview-499515148", "createdAt": "2020-09-30T14:49:32Z", "commit": {"oid": "ecb1aa1fcbffe3aee331dfca61ddc21161a948e9"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDo0OTozMlrOHahZCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMzozNzoyNVrOHa5aaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU3MjEwNA==", "bodyText": "I'm usually not a fan of star imports, but not sure what the code policy in keycloak is.", "url": "https://github.com/keycloak/keycloak/pull/7425#discussion_r497572104", "createdAt": "2020-09-30T14:49:32Z", "author": {"login": "sguilhen"}, "path": "federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProvider.java", "diffHunk": "@@ -17,14 +17,9 @@\n \n package org.keycloak.storage.ldap;\n \n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecb1aa1fcbffe3aee331dfca61ddc21161a948e9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU3MjYwNg==", "bodyText": "Same, not sure if we should be changing that.", "url": "https://github.com/keycloak/keycloak/pull/7425#discussion_r497572606", "createdAt": "2020-09-30T14:50:11Z", "author": {"login": "sguilhen"}, "path": "federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProvider.java", "diffHunk": "@@ -58,10 +53,7 @@\n import org.keycloak.storage.ldap.idm.query.internal.LDAPQueryConditionsBuilder;\n import org.keycloak.storage.ldap.idm.store.ldap.LDAPIdentityStore;\n import org.keycloak.storage.ldap.kerberos.LDAPProviderKerberosConfig;\n-import org.keycloak.storage.ldap.mappers.LDAPStorageMapper;\n-import org.keycloak.storage.ldap.mappers.LDAPStorageMapperManager;\n-import org.keycloak.storage.ldap.mappers.PasswordUpdateCallback;\n-import org.keycloak.storage.ldap.mappers.LDAPOperationDecorator;\n+import org.keycloak.storage.ldap.mappers.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecb1aa1fcbffe3aee331dfca61ddc21161a948e9"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU3OTM4NQ==", "bodyText": "If I'm reading this right, this change works because there can be only one enabled default required action provider for the real. Is that the case?", "url": "https://github.com/keycloak/keycloak/pull/7425#discussion_r497579385", "createdAt": "2020-09-30T14:58:28Z", "author": {"login": "sguilhen"}, "path": "federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProvider.java", "diffHunk": "@@ -286,11 +283,13 @@ public UserModel addUser(RealmModel realm, String username) {\n \n         realm.getDefaultGroupsStream().forEach(proxy::joinGroup);\n \n-        for (RequiredActionProviderModel r : realm.getRequiredActionProviders()) {\n-            if (r.isEnabled() && r.isDefaultAction()) {\n-                proxy.addRequiredAction(r.getAlias());\n-            }\n-        }\n+        Optional<String> requiredAction = realm.getRequiredActionProvidersStream()\n+                .filter(RequiredActionProviderModel::isEnabled)\n+                .filter(RequiredActionProviderModel::isDefaultAction)\n+                .map(RequiredActionProviderModel::getAlias)\n+                .findFirst();\n+        if (requiredAction.isPresent())\n+            proxy.addRequiredAction(requiredAction.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecb1aa1fcbffe3aee331dfca61ddc21161a948e9"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU4Nzc2MA==", "bodyText": "Suggestion: This can be replaced by LDAPConfigDecorator.isInstance() in a single statement\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                return mapperFactory instanceof LDAPConfigDecorator;\n          \n          \n            \n                                LDAPConfigDecorator.isInstance(session.getKeycloakSessionFactory()\n          \n          \n            \n                                        .getProviderFactory(LDAPStorageMapper.class, mapperModel.getProviderId()));", "url": "https://github.com/keycloak/keycloak/pull/7425#discussion_r497587760", "createdAt": "2020-09-30T15:09:10Z", "author": {"login": "sguilhen"}, "path": "federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProviderFactory.java", "diffHunk": "@@ -241,17 +233,19 @@ public LDAPStorageProvider create(KeycloakSession session, ComponentModel model)\n     // Check if it's some performance overhead to create this map in every request. But probably not...\n     protected Map<ComponentModel, LDAPConfigDecorator> getLDAPConfigDecorators(KeycloakSession session, ComponentModel ldapModel) {\n         RealmModel realm = session.realms().getRealm(ldapModel.getParentId());\n-        List<ComponentModel> mapperComponents = realm.getComponents(ldapModel.getId(), LDAPStorageMapper.class.getName());\n-\n-        Map<ComponentModel, LDAPConfigDecorator> result = new HashMap<>();\n-        for (ComponentModel mapperModel : mapperComponents) {\n-            LDAPStorageMapperFactory mapperFactory = (LDAPStorageMapperFactory) session.getKeycloakSessionFactory().getProviderFactory(LDAPStorageMapper.class, mapperModel.getProviderId());\n-            if (mapperFactory instanceof LDAPConfigDecorator) {\n-                result.put(mapperModel, (LDAPConfigDecorator) mapperFactory);\n-            }\n-        }\n-\n-        return result;\n+        return realm.getComponentsStream(ldapModel.getId(), LDAPStorageMapper.class.getName())\n+                .filter(mapperModel -> {\n+                    LDAPStorageMapperFactory mapperFactory = (LDAPStorageMapperFactory) session.getKeycloakSessionFactory()\n+                            .getProviderFactory(LDAPStorageMapper.class, mapperModel.getProviderId());\n+                    return mapperFactory instanceof LDAPConfigDecorator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecb1aa1fcbffe3aee331dfca61ddc21161a948e9"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY3OTk1Mw==", "bodyText": "I'm not 100% sure, but couldn't this be handled with\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    HashMap::putAll);\n          \n          \n            \n                                    .collect(Collectors.toMap(Function.identity, mapperModel -> (LDAPConfigDecorator) session.getKeycloakSessionFactory()\n          \n          \n            \n                                            .getProviderFactory(LDAPStorageManager.class, mapperModel.getProviderId())));\n          \n      \n    \n    \n  \n\nJust suggesting something off the top of myhead, syntax might be a bit off", "url": "https://github.com/keycloak/keycloak/pull/7425#discussion_r497679953", "createdAt": "2020-09-30T17:24:31Z", "author": {"login": "sguilhen"}, "path": "federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProviderFactory.java", "diffHunk": "@@ -241,17 +233,19 @@ public LDAPStorageProvider create(KeycloakSession session, ComponentModel model)\n     // Check if it's some performance overhead to create this map in every request. But probably not...\n     protected Map<ComponentModel, LDAPConfigDecorator> getLDAPConfigDecorators(KeycloakSession session, ComponentModel ldapModel) {\n         RealmModel realm = session.realms().getRealm(ldapModel.getParentId());\n-        List<ComponentModel> mapperComponents = realm.getComponents(ldapModel.getId(), LDAPStorageMapper.class.getName());\n-\n-        Map<ComponentModel, LDAPConfigDecorator> result = new HashMap<>();\n-        for (ComponentModel mapperModel : mapperComponents) {\n-            LDAPStorageMapperFactory mapperFactory = (LDAPStorageMapperFactory) session.getKeycloakSessionFactory().getProviderFactory(LDAPStorageMapper.class, mapperModel.getProviderId());\n-            if (mapperFactory instanceof LDAPConfigDecorator) {\n-                result.put(mapperModel, (LDAPConfigDecorator) mapperFactory);\n-            }\n-        }\n-\n-        return result;\n+        return realm.getComponentsStream(ldapModel.getId(), LDAPStorageMapper.class.getName())\n+                .filter(mapperModel -> {\n+                    LDAPStorageMapperFactory mapperFactory = (LDAPStorageMapperFactory) session.getKeycloakSessionFactory()\n+                            .getProviderFactory(LDAPStorageMapper.class, mapperModel.getProviderId());\n+                    return mapperFactory instanceof LDAPConfigDecorator;\n+                })\n+                .collect(HashMap::new,\n+                        (map, mapperModel) -> {\n+                            LDAPStorageMapperFactory mapperFactory = (LDAPStorageMapperFactory) session.getKeycloakSessionFactory()\n+                                    .getProviderFactory(LDAPStorageMapper.class, mapperModel.getProviderId());\n+                            map.put(mapperModel, (LDAPConfigDecorator) mapperFactory);\n+                        },\n+                        HashMap::putAll);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecb1aa1fcbffe3aee331dfca61ddc21161a948e9"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzczOTM4Mg==", "bodyText": "Question: since this returns a sorted stream, shouldn't every use of this method that consumes the stream with forEach use forEachOrdered instead? If order was relevant in the original list-based implementation I believe we need to pay attention to that.\nAlso, if order is important shouldn't the Javadoc in the interface mention that the returned stream is sorted and that if order is important forEachOrdered should be used when consuming the stream?", "url": "https://github.com/keycloak/keycloak/pull/7425#discussion_r497739382", "createdAt": "2020-09-30T19:10:16Z", "author": {"login": "sguilhen"}, "path": "model/jpa/src/main/java/org/keycloak/models/jpa/RealmAdapter.java", "diffHunk": "@@ -1725,15 +1669,13 @@ public AuthenticationFlowModel addAuthenticationFlow(AuthenticationFlowModel mod\n     }\n \n     @Override\n-    public List<AuthenticationExecutionModel> getAuthenticationExecutions(String flowId) {\n+    public Stream<AuthenticationExecutionModel> getAuthenticationExecutionsStream(String flowId) {\n         AuthenticationFlowEntity flow = em.getReference(AuthenticationFlowEntity.class, flowId);\n \n         return flow.getExecutions().stream()\n                 .filter(e -> getId().equals(e.getRealm().getId()))\n                 .map(this::entityToModel)\n-                .sorted(AuthenticationExecutionModel.ExecutionComparator.SINGLETON)\n-                .collect(Collectors.collectingAndThen(\n-                        Collectors.toList(), Collections::unmodifiableList));\n+                .sorted(AuthenticationExecutionModel.ExecutionComparator.SINGLETON);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecb1aa1fcbffe3aee331dfca61ddc21161a948e9"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzczOTY2NA==", "bodyText": "Same here regarding the sorted stream.", "url": "https://github.com/keycloak/keycloak/pull/7425#discussion_r497739664", "createdAt": "2020-09-30T19:10:48Z", "author": {"login": "sguilhen"}, "path": "model/jpa/src/main/java/org/keycloak/models/jpa/RealmAdapter.java", "diffHunk": "@@ -1973,15 +1909,10 @@ public void updateRequiredActionProvider(RequiredActionProviderModel model) {\n     }\n \n     @Override\n-    public List<RequiredActionProviderModel> getRequiredActionProviders() {\n-        Collection<RequiredActionProviderEntity> entities = realm.getRequiredActionProviders();\n-        if (entities.isEmpty()) return Collections.EMPTY_LIST;\n-        List<RequiredActionProviderModel> actions = new LinkedList<>();\n-        for (RequiredActionProviderEntity entity : entities) {\n-            actions.add(entityToModel(entity));\n-        }\n-        Collections.sort(actions, RequiredActionProviderModel.RequiredActionComparator.SINGLETON);\n-        return Collections.unmodifiableList(actions);\n+    public Stream<RequiredActionProviderModel> getRequiredActionProvidersStream() {\n+        return realm.getRequiredActionProviders().stream()\n+                .map(this::entityToModel)\n+                .sorted(RequiredActionProviderModel.RequiredActionComparator.SINGLETON);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecb1aa1fcbffe3aee331dfca61ddc21161a948e9"}, "originalPosition": 246}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc3NDI0OQ==", "bodyText": "shouldn't this be else if (e.isAlternative()) instead?", "url": "https://github.com/keycloak/keycloak/pull/7425#discussion_r497774249", "createdAt": "2020-09-30T20:16:14Z", "author": {"login": "sguilhen"}, "path": "services/src/main/java/org/keycloak/authentication/ClientAuthenticationFlow.java", "diffHunk": "@@ -106,19 +104,22 @@ public Response processFlow() {\n     }\n \n     protected List<AuthenticationExecutionModel> findExecutionsToRun() {\n-        List<AuthenticationExecutionModel> executions = processor.getRealm().getAuthenticationExecutions(flow.getId());\n-        List<AuthenticationExecutionModel> executionsToRun = new ArrayList<>();\n-\n-        for (AuthenticationExecutionModel execution : executions) {\n-            if (execution.isRequired()) {\n-                executionsToRun = Arrays.asList(execution);\n-                break;\n-            }\n+        List<AuthenticationExecutionModel> executionsToRun = new LinkedList<>();\n+        List<AuthenticationExecutionModel> finalExecutionsToRun = executionsToRun;\n+        Optional<AuthenticationExecutionModel> first = processor.getRealm().getAuthenticationExecutionsStream(flow.getId())\n+                .filter(e -> {\n+                    if (e.isRequired()) {\n+                        return true;\n+                    } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecb1aa1fcbffe3aee331dfca61ddc21161a948e9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc5Njg2Mg==", "bodyText": "Is this change here for performance reasons?", "url": "https://github.com/keycloak/keycloak/pull/7425#discussion_r497796862", "createdAt": "2020-09-30T20:59:19Z", "author": {"login": "sguilhen"}, "path": "services/src/main/java/org/keycloak/authentication/authenticators/conditional/ConditionalUserConfiguredAuthenticator.java", "diffHunk": "@@ -1,7 +1,8 @@\n package org.keycloak.authentication.authenticators.conditional;\n \n-import java.util.ArrayList;\n+import java.util.LinkedList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecb1aa1fcbffe3aee331dfca61ddc21161a948e9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2Mjg0Mg==", "bodyText": "is this method used? Search for usages came up empty. Probably intended to be used in the first filter at the top of the file?", "url": "https://github.com/keycloak/keycloak/pull/7425#discussion_r497862842", "createdAt": "2020-09-30T23:53:33Z", "author": {"login": "sguilhen"}, "path": "services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java", "diffHunk": "@@ -1349,6 +1343,18 @@ private String generateS256CodeChallenge(String codeVerifier) throws Exception {\n         return codeVerifierEncoded;\n     }\n \n+    private boolean isExternal(IdentityProviderModel idpModel, String issuer) {\n+        IdentityProviderFactory factory = IdentityBrokerService.getIdentityProviderFactory(session, idpModel);\n+        IdentityProvider idp = factory.create(session, idpModel);\n+        if (idp instanceof ExchangeExternalToken) {\n+            ExchangeExternalToken external = (ExchangeExternalToken) idp;\n+            if (idpModel.getAlias().equals(issuer) || external.isIssuer(issuer, formParams)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecb1aa1fcbffe3aee331dfca61ddc21161a948e9"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk1MTM2MA==", "bodyText": "Is this used in this class?", "url": "https://github.com/keycloak/keycloak/pull/7425#discussion_r497951360", "createdAt": "2020-10-01T02:33:55Z", "author": {"login": "sguilhen"}, "path": "services/src/main/java/org/keycloak/services/resources/account/AccountCredentialResource.java", "diffHunk": "@@ -3,6 +3,7 @@\n import com.fasterxml.jackson.annotation.JsonIgnore;\n import org.jboss.logging.Logger;\n import org.jboss.resteasy.annotations.cache.NoCache;\n+import org.keycloak.TokenVerifier;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecb1aa1fcbffe3aee331dfca61ddc21161a948e9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk1MjQxNA==", "bodyText": "Just out of curiosity, why the usage of flatMap here?", "url": "https://github.com/keycloak/keycloak/pull/7425#discussion_r497952414", "createdAt": "2020-10-01T02:38:33Z", "author": {"login": "sguilhen"}, "path": "services/src/main/java/org/keycloak/services/resources/account/AccountCredentialResource.java", "diffHunk": "@@ -228,29 +226,23 @@ public CredentialTypeMetadata getMetadata() {\n     // Going through all authentication flows and their authentication executions to see if there is any authenticator of the corresponding\n     // credential type.\n     private Set<String> getEnabledCredentialTypes(List<CredentialProvider> credentialProviders) {\n-        Set<String> enabledCredentialTypes = new HashSet<>();\n-\n-        for (AuthenticationFlowModel flow : realm.getAuthenticationFlows()) {\n-            // Ignore DISABLED executions and flows\n-            if (isFlowEffectivelyDisabled(flow)) continue;\n-\n-            for (AuthenticationExecutionModel execution : realm.getAuthenticationExecutions(flow.getId())) {\n-                if (execution.getAuthenticator() != null && DISABLED != execution.getRequirement()) {\n-                    AuthenticatorFactory authenticatorFactory = (AuthenticatorFactory) session.getKeycloakSessionFactory().getProviderFactory(Authenticator.class, execution.getAuthenticator());\n-                    if (authenticatorFactory != null && authenticatorFactory.getReferenceCategory() != null) {\n-                        enabledCredentialTypes.add(authenticatorFactory.getReferenceCategory());\n-                    }\n-                }\n-            }\n-        }\n+        Stream<String> enabledCredentialTypes = realm.getAuthenticationFlowsStream()\n+                .filter(((Predicate<AuthenticationFlowModel>) this::isFlowEffectivelyDisabled).negate())\n+                .flatMap(flow ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecb1aa1fcbffe3aee331dfca61ddc21161a948e9"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk2NTY3Mw==", "bodyText": "Is it necessary to call collect here?", "url": "https://github.com/keycloak/keycloak/pull/7425#discussion_r497965673", "createdAt": "2020-10-01T03:37:25Z", "author": {"login": "sguilhen"}, "path": "services/src/main/java/org/keycloak/services/resources/admin/IdentityProviderResource.java", "diffHunk": "@@ -133,10 +125,8 @@ public Response delete() {\n         session.users().preRemove(realm, identityProviderModel);\n         this.realm.removeIdentityProviderByAlias(alias);\n \n-        Set<IdentityProviderMapperModel> mappers = this.realm.getIdentityProviderMappersByAlias(alias);\n-        for (IdentityProviderMapperModel mapper : mappers) {\n-            this.realm.removeIdentityProviderMapper(mapper);\n-        }\n+        realm.getIdentityProviderMappersByAliasStream(alias)\n+                .collect(Collectors.toList()).forEach(realm::removeIdentityProviderMapper);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecb1aa1fcbffe3aee331dfca61ddc21161a948e9"}, "originalPosition": 45}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ecb1aa1fcbffe3aee331dfca61ddc21161a948e9", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/ecb1aa1fcbffe3aee331dfca61ddc21161a948e9", "committedDate": "2020-09-30T13:59:19Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}, "afterCommit": {"oid": "0d1b52ca25d277ae58f6db932c1ab9babcb7d68b", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/0d1b52ca25d277ae58f6db932c1ab9babcb7d68b", "committedDate": "2020-10-01T07:46:11Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0d1b52ca25d277ae58f6db932c1ab9babcb7d68b", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/0d1b52ca25d277ae58f6db932c1ab9babcb7d68b", "committedDate": "2020-10-01T07:46:11Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}, "afterCommit": {"oid": "3dc79672e3752ba00839f2543d30aa12f4842385", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/3dc79672e3752ba00839f2543d30aa12f4842385", "committedDate": "2020-10-01T09:38:25Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3dc79672e3752ba00839f2543d30aa12f4842385", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/3dc79672e3752ba00839f2543d30aa12f4842385", "committedDate": "2020-10-01T09:38:25Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}, "afterCommit": {"oid": "46fc6d69d097d08688d912ad4fe7d699085aed78", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/46fc6d69d097d08688d912ad4fe7d699085aed78", "committedDate": "2020-10-01T15:02:34Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "46fc6d69d097d08688d912ad4fe7d699085aed78", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/46fc6d69d097d08688d912ad4fe7d699085aed78", "committedDate": "2020-10-01T15:02:34Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}, "afterCommit": {"oid": "8e15cbaf9bdfa768868caccfebcba91f728ac6a2", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/8e15cbaf9bdfa768868caccfebcba91f728ac6a2", "committedDate": "2020-10-01T19:35:39Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8e15cbaf9bdfa768868caccfebcba91f728ac6a2", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/8e15cbaf9bdfa768868caccfebcba91f728ac6a2", "committedDate": "2020-10-01T19:35:39Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}, "afterCommit": {"oid": "224b86d3acae4e23ed71157cf6ca2982fa45bec5", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/224b86d3acae4e23ed71157cf6ca2982fa45bec5", "committedDate": "2020-10-02T09:29:20Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "224b86d3acae4e23ed71157cf6ca2982fa45bec5", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/224b86d3acae4e23ed71157cf6ca2982fa45bec5", "committedDate": "2020-10-02T09:29:20Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}, "afterCommit": {"oid": "da00a88cb2315f11f9d5279b56a85bba954cbddf", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/da00a88cb2315f11f9d5279b56a85bba954cbddf", "committedDate": "2020-10-02T12:20:26Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "da00a88cb2315f11f9d5279b56a85bba954cbddf", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/da00a88cb2315f11f9d5279b56a85bba954cbddf", "committedDate": "2020-10-02T12:20:26Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}, "afterCommit": {"oid": "74b8ce308cc023d69a2e3cd8df6c2e77f3ff3460", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/74b8ce308cc023d69a2e3cd8df6c2e77f3ff3460", "committedDate": "2020-10-02T16:10:02Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "74b8ce308cc023d69a2e3cd8df6c2e77f3ff3460", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/74b8ce308cc023d69a2e3cd8df6c2e77f3ff3460", "committedDate": "2020-10-02T16:10:02Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}, "afterCommit": {"oid": "cf356b30bda94a2ed0d7f999a3268276b36ae822", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/cf356b30bda94a2ed0d7f999a3268276b36ae822", "committedDate": "2020-10-05T16:40:32Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cf356b30bda94a2ed0d7f999a3268276b36ae822", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/cf356b30bda94a2ed0d7f999a3268276b36ae822", "committedDate": "2020-10-05T16:40:32Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}, "afterCommit": {"oid": "e48ead63ab0b0542f2098d7c5227dfcf0d833620", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/e48ead63ab0b0542f2098d7c5227dfcf0d833620", "committedDate": "2020-10-05T19:24:29Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e48ead63ab0b0542f2098d7c5227dfcf0d833620", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/e48ead63ab0b0542f2098d7c5227dfcf0d833620", "committedDate": "2020-10-05T19:24:29Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}, "afterCommit": {"oid": "416b096d687466a6a31c20bbb65a1e86682b6c66", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/416b096d687466a6a31c20bbb65a1e86682b6c66", "committedDate": "2020-10-06T05:52:33Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "416b096d687466a6a31c20bbb65a1e86682b6c66", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/416b096d687466a6a31c20bbb65a1e86682b6c66", "committedDate": "2020-10-06T05:52:33Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}, "afterCommit": {"oid": "130e5c87b145f4da7631d38e6d4b496461b288e5", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/130e5c87b145f4da7631d38e6d4b496461b288e5", "committedDate": "2020-10-06T08:02:25Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "130e5c87b145f4da7631d38e6d4b496461b288e5", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/130e5c87b145f4da7631d38e6d4b496461b288e5", "committedDate": "2020-10-06T08:02:25Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}, "afterCommit": {"oid": "f3dfc34234153377a8ab4d41836d16a19c273ff1", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/f3dfc34234153377a8ab4d41836d16a19c273ff1", "committedDate": "2020-10-06T10:56:31Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f3dfc34234153377a8ab4d41836d16a19c273ff1", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/f3dfc34234153377a8ab4d41836d16a19c273ff1", "committedDate": "2020-10-06T10:56:31Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}, "afterCommit": {"oid": "e53827dedd14ebf38a5f9e2060dad84c9839c51e", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/e53827dedd14ebf38a5f9e2060dad84c9839c51e", "committedDate": "2020-10-06T12:36:26Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1OTAwMzgw", "url": "https://github.com/keycloak/keycloak/pull/7425#pullrequestreview-505900380", "createdAt": "2020-10-09T18:25:17Z", "commit": {"oid": "e53827dedd14ebf38a5f9e2060dad84c9839c51e"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxODoyNToxN1rOHfUbMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMTo1NjoyMFrOHfZjVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjYwMjU0NQ==", "bodyText": "Star import that was reverted in previous classes is used here", "url": "https://github.com/keycloak/keycloak/pull/7425#discussion_r502602545", "createdAt": "2020-10-09T18:25:17Z", "author": {"login": "sguilhen"}, "path": "federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProviderFactory.java", "diffHunk": "@@ -47,24 +47,17 @@\n import org.keycloak.storage.ldap.idm.query.internal.LDAPQuery;\n import org.keycloak.storage.ldap.idm.query.internal.LDAPQueryConditionsBuilder;\n import org.keycloak.storage.ldap.idm.store.ldap.LDAPIdentityStore;\n-import org.keycloak.storage.ldap.mappers.FullNameLDAPStorageMapper;\n-import org.keycloak.storage.ldap.mappers.FullNameLDAPStorageMapperFactory;\n-import org.keycloak.storage.ldap.mappers.HardcodedLDAPAttributeMapper;\n-import org.keycloak.storage.ldap.mappers.HardcodedLDAPAttributeMapperFactory;\n-import org.keycloak.storage.ldap.mappers.LDAPConfigDecorator;\n-import org.keycloak.storage.ldap.mappers.LDAPStorageMapper;\n-import org.keycloak.storage.ldap.mappers.LDAPStorageMapperFactory;\n-import org.keycloak.storage.ldap.mappers.UserAttributeLDAPStorageMapper;\n-import org.keycloak.storage.ldap.mappers.UserAttributeLDAPStorageMapperFactory;\n+import org.keycloak.storage.ldap.mappers.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e53827dedd14ebf38a5f9e2060dad84c9839c51e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjYwNTk1OQ==", "bodyText": "Javadoc for new method?", "url": "https://github.com/keycloak/keycloak/pull/7425#discussion_r502605959", "createdAt": "2020-10-09T18:32:15Z", "author": {"login": "sguilhen"}, "path": "server-spi-private/src/main/java/org/keycloak/events/EventQuery.java", "diffHunk": "@@ -43,6 +45,13 @@\n \n     EventQuery maxResults(int results);\n \n-    List<Event> getResultList();\n+    /**\n+     * @deprecated Use {@link #getResultStream() getResultStream} instead.\n+     */\n+    @Deprecated\n+    default List<Event> getResultList() {\n+        return getResultStream().collect(Collectors.toList());\n+    }\n \n+    Stream<Event> getResultStream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e53827dedd14ebf38a5f9e2060dad84c9839c51e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjYwNjEzNQ==", "bodyText": "Javadoc for new method?", "url": "https://github.com/keycloak/keycloak/pull/7425#discussion_r502606135", "createdAt": "2020-10-09T18:32:37Z", "author": {"login": "sguilhen"}, "path": "server-spi-private/src/main/java/org/keycloak/events/admin/AdminEventQuery.java", "diffHunk": "@@ -127,8 +129,12 @@\n \n     /**\n      * Executes the query and returns the results\n-     * \n-     * @return\n+     * @deprecated Use {@link #getResultStream() getResultStream} instead.\n      */\n-    List<AdminEvent> getResultList();\n+    @Deprecated\n+    default List<AdminEvent> getResultList() {\n+        return getResultStream().collect(Collectors.toList());\n+    }\n+\n+    Stream<AdminEvent> getResultStream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e53827dedd14ebf38a5f9e2060dad84c9839c51e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjYyNjAxMw==", "bodyText": "Star import", "url": "https://github.com/keycloak/keycloak/pull/7425#discussion_r502626013", "createdAt": "2020-10-09T19:15:21Z", "author": {"login": "sguilhen"}, "path": "services/src/main/java/org/keycloak/authentication/ClientAuthenticationFlow.java", "diffHunk": "@@ -27,9 +27,7 @@\n import org.keycloak.services.ServicesLogger;\n \n import javax.ws.rs.core.Response;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e53827dedd14ebf38a5f9e2060dad84c9839c51e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4MjcxNw==", "bodyText": "Why are these changes part of this PR? What does it have to do with the realms?", "url": "https://github.com/keycloak/keycloak/pull/7425#discussion_r502682717", "createdAt": "2020-10-09T21:39:46Z", "author": {"login": "sguilhen"}, "path": "services/src/main/java/org/keycloak/credential/UserCredentialStoreManager.java", "diffHunk": "@@ -347,50 +334,38 @@ private UserStorageCredentialConfigured isConfiguredThroughUserStorage(RealmMode\n \n     @Override\n     public boolean isConfiguredLocally(RealmModel realm, UserModel user, String type) {\n-        List<CredentialInputValidator> credentialProviders = getCredentialProviders(session, realm, CredentialInputValidator.class);\n-        for (CredentialInputValidator validator : credentialProviders) {\n-            if (validator.supportsCredentialType(type) && validator.isConfiguredFor(realm, user, type)) {\n-                return true;\n-            }\n-\n-        }\n-        return false;\n+        return getCredentialProviders(session, CredentialInputValidator.class)\n+                .anyMatch(validator -> validator.supportsCredentialType(type) && validator.isConfiguredFor(realm, user, type));\n     }\n \n     @Override\n     public CredentialValidationOutput authenticate(KeycloakSession session, RealmModel realm, CredentialInput input) {\n-        List<CredentialAuthentication> list = UserStorageManager.getEnabledStorageProviders(session, realm, CredentialAuthentication.class);\n-        for (CredentialAuthentication auth : list) {\n-            if (auth.supportsCredentialAuthenticationFor(input.getType())) {\n-                CredentialValidationOutput output = auth.authenticate(realm, input);\n-                if (output != null) return output;\n-            }\n-        }\n+        CredentialValidationOutput output = authenticate(\n+                UserStorageManager.getEnabledStorageProviders(session, realm, CredentialAuthentication.class),\n+                realm, input);\n \n-        list = getCredentialProviders(session, realm, CredentialAuthentication.class);\n-        for (CredentialAuthentication auth : list) {\n-            if (auth.supportsCredentialAuthenticationFor(input.getType())) {\n-                CredentialValidationOutput output = auth.authenticate(realm, input);\n-                if (output != null) return output;\n-            }\n-        }\n+        return (output != null) ? output : authenticate(getCredentialProviders(session, CredentialAuthentication.class),\n+                realm, input);\n+    }\n \n-        return null;\n+    public CredentialValidationOutput authenticate(Stream<CredentialAuthentication> storageProviders,\n+                                                       RealmModel realm, CredentialInput input) {\n+        return storageProviders\n+                .filter(auth -> auth.supportsCredentialAuthenticationFor(input.getType()))\n+                .map(auth -> auth.authenticate(realm, input))\n+                .filter(Objects::nonNull)\n+                .findFirst()\n+                .orElse(null);\n     }\n \n     @Override\n     public void onCache(RealmModel realm, CachedUserModel user, UserModel delegate) {\n-        List<OnUserCache> credentialProviders = getCredentialProviders(session, realm, OnUserCache.class);\n-        for (OnUserCache validator : credentialProviders) {\n-            validator.onCache(realm, user, delegate);\n-        }\n+        getCredentialProviders(session, OnUserCache.class).forEach(validator -> validator.onCache(realm, user, delegate));\n     }\n \n     @Override\n     public List<String> getConfiguredUserStorageCredentialTypes(RealmModel realm, UserModel user) {\n-        List<CredentialProvider> credentialProviders = getCredentialProviders(session, realm, CredentialProvider.class);\n-\n-        return credentialProviders.stream().map(CredentialProvider::getType)\n+        return getCredentialProviders(session, CredentialProvider.class).map(CredentialProvider::getType)\n                 .filter(credentialType -> UserStorageCredentialConfigured.CONFIGURED == isConfiguredThroughUserStorage(realm, user, credentialType))\n                 .collect(Collectors.toList());\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e53827dedd14ebf38a5f9e2060dad84c9839c51e"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4NTM0MA==", "bodyText": "Star import", "url": "https://github.com/keycloak/keycloak/pull/7425#discussion_r502685340", "createdAt": "2020-10-09T21:50:38Z", "author": {"login": "sguilhen"}, "path": "services/src/main/java/org/keycloak/services/resources/account/AccountFormService.java", "diffHunk": "@@ -102,15 +101,8 @@\n import java.net.URI;\n import java.nio.charset.StandardCharsets;\n import java.security.MessageDigest;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.UUID;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e53827dedd14ebf38a5f9e2060dad84c9839c51e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4NjU1MA==", "bodyText": "Star import", "url": "https://github.com/keycloak/keycloak/pull/7425#discussion_r502686550", "createdAt": "2020-10-09T21:56:20Z", "author": {"login": "sguilhen"}, "path": "services/src/main/java/org/keycloak/services/resources/admin/AuthenticationManagementResource.java", "diffHunk": "@@ -64,12 +64,10 @@\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.UriBuilder;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e53827dedd14ebf38a5f9e2060dad84c9839c51e"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fbb7e49687f67317d20c229039c9b7692dc8a33", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/1fbb7e49687f67317d20c229039c9b7692dc8a33", "committedDate": "2020-10-12T08:17:44Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e53827dedd14ebf38a5f9e2060dad84c9839c51e", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/e53827dedd14ebf38a5f9e2060dad84c9839c51e", "committedDate": "2020-10-06T12:36:26Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}, "afterCommit": {"oid": "1fbb7e49687f67317d20c229039c9b7692dc8a33", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/1fbb7e49687f67317d20c229039c9b7692dc8a33", "committedDate": "2020-10-12T08:17:44Z", "message": "KEYCLOAK-15450 Complement methods for accessing realms with Stream variants"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3MTUyODk1", "url": "https://github.com/keycloak/keycloak/pull/7425#pullrequestreview-507152895", "createdAt": "2020-10-13T07:43:18Z", "commit": {"oid": "1fbb7e49687f67317d20c229039c9b7692dc8a33"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2823, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}