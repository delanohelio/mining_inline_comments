{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3MzM1NDIx", "number": 6809, "title": "[KEYCLOAK-13044] Fix owner name representations of UMA tickets for client-owned resources", "bodyText": "When creating resources owned by a client (instead of a user) and adding UMA permission tickets -- say, with the keycloak-authz-client library --, and later requesting information on the ticket that included information on the owner's name, the server would fail with a NullPointerException. This is because it was always assumed that the resource owner is a user. Since this wasn't the case here, querying the user would return a null value, and inspecting its fields would raise an exception.\nThis issue existed in two points in the code-base prior to this commit (searching for other instances of permission ticket representations didn't return any results):\n\norg.keycloak.models.utils.ModelToRepresentation.toRepresentation() (called by the Protection API; more specifically, when the returnNames argument is true)\norg.keycloak.authorization.admin.representation.PolicyEvaluationResponseBuilder.toRepresentation() (called by the Policy Evaluation page)\n\nThis PR adds a client query fallback in case a user isn't found, and represents it with its clientId field.", "createdAt": "2020-02-19T18:54:10Z", "url": "https://github.com/keycloak/keycloak/pull/6809", "merged": true, "mergeCommit": {"oid": "de9a0a0a4ac302f2272f431012c00fc289201272"}, "closed": true, "closedAt": "2020-07-01T21:15:23Z", "author": {"login": "EpicEric"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIa1K2gFqTM2NTY1NTEzMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcww4riAFqTQ0MTE5OTczMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NjU1MTMz", "url": "https://github.com/keycloak/keycloak/pull/6809#pullrequestreview-365655133", "createdAt": "2020-02-27T12:53:05Z", "commit": {"oid": "cf6c6d9b2723d4fd8a2ee0da4fee3d319a765b32"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NTA1ODI0", "url": "https://github.com/keycloak/keycloak/pull/6809#pullrequestreview-438505824", "createdAt": "2020-06-26T18:22:43Z", "commit": {"oid": "474f60dfbaa0ca58b5ca1eba2cd4771754ea235f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODoyMjo0M1rOGpqigQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODozMDoyMFrOGpqvaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0MTc2MQ==", "bodyText": "Tests should pass if you use a method reference here as follows \n  \n    \n      keycloak/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/AuthzCleanupTest.java\n    \n    \n         Line 102\n      in\n      419d9c6\n    \n    \n    \n    \n\n        \n          \n           testingClient.server().run(AuthzCleanupTest::setup); \n        \n    \n  \n\n.", "url": "https://github.com/keycloak/keycloak/pull/6809#discussion_r446341761", "createdAt": "2020-06-26T18:22:43Z", "author": {"login": "pedroigor"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/authz/UmaRepresentationTest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package org.keycloak.testsuite.authz;\n+\n+import org.jboss.resteasy.mock.MockHttpRequest;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.keycloak.admin.client.resource.RealmResource;\n+import org.keycloak.authorization.AuthorizationProvider;\n+import org.keycloak.authorization.client.resource.PermissionResource;\n+import org.keycloak.forms.account.freemarker.model.AuthorizationBean;\n+import org.keycloak.forms.account.freemarker.model.AuthorizationBean.ResourceBean;\n+import org.keycloak.representations.idm.UserRepresentation;\n+import org.keycloak.representations.idm.authorization.*;\n+import org.keycloak.testsuite.arquillian.annotation.AuthServerContainerExclude;\n+import org.keycloak.testsuite.arquillian.annotation.AuthServerContainerExclude.AuthServer;\n+\n+import java.net.URISyntaxException;\n+import java.util.List;\n+\n+@AuthServerContainerExclude(AuthServer.REMOTE)\n+public class UmaRepresentationTest extends AbstractResourceServerTest {\n+    private ResourceRepresentation resource;\n+    private PermissionResource permission;\n+\n+    private void createPermissionTicket() {\n+        PermissionTicketRepresentation ticket = new PermissionTicketRepresentation();\n+        ticket.setOwner(resource.getOwner().getId());\n+        ticket.setResource(resource.getId());\n+        ticket.setRequesterName(\"kolo\");\n+        ticket.setScopeName(\"ScopeA\");\n+        ticket.setGranted(true);\n+        permission.create(ticket);\n+    }\n+\n+    @Test\n+    public void testCanRepresentPermissionTicketWithNamesOfResourceOwnedByUser() throws Exception {\n+        resource = addResource(\"Resource A\", \"marta\", true, \"ScopeA\");\n+        permission = getAuthzClient().protection(\"marta\", \"password\").permission();\n+        createPermissionTicket();\n+\n+        List<PermissionTicketRepresentation> permissionTickets = permission.find(resource.getId(), null, null, null, null, true, null, null);\n+        Assert.assertFalse(permissionTickets.isEmpty());\n+        Assert.assertEquals(1, permissionTickets.size());\n+\n+        PermissionTicketRepresentation ticket = permissionTickets.get(0);\n+        Assert.assertEquals(ticket.getOwnerName(), \"marta\");\n+        Assert.assertEquals(ticket.getRequesterName(), \"kolo\");\n+        Assert.assertEquals(ticket.getResourceName(), \"Resource A\");\n+        Assert.assertEquals(ticket.getScopeName(), \"ScopeA\");\n+        Assert.assertTrue(ticket.isGranted());\n+    }\n+\n+    @Test\n+    public void testCanRepresentPermissionTicketWithNamesOfResourceOwnedByClient() throws Exception {\n+        resource = addResource(\"Resource A\", getClient(getRealm()).toRepresentation().getId(), true, \"ScopeA\");\n+        permission = getAuthzClient().protection().permission();\n+        createPermissionTicket();\n+\n+        List<PermissionTicketRepresentation> permissionTickets = permission.find(resource.getId(), null, null, null, null, true, null, null);\n+        Assert.assertFalse(permissionTickets.isEmpty());\n+        Assert.assertEquals(1, permissionTickets.size());\n+\n+        PermissionTicketRepresentation ticket = permissionTickets.get(0);\n+        Assert.assertEquals(ticket.getOwnerName(), \"resource-server-test\");\n+        Assert.assertEquals(ticket.getRequesterName(), \"kolo\");\n+        Assert.assertEquals(ticket.getResourceName(), \"Resource A\");\n+        Assert.assertEquals(ticket.getScopeName(), \"ScopeA\");\n+        Assert.assertTrue(ticket.isGranted());\n+    }\n+\n+    @Test\n+    public void testCanRepresentPolicyResultGrantOfResourceOwnedByUser() throws Exception {\n+        resource = addResource(\"Resource A\", \"marta\", true, \"ScopeA\");\n+        permission = getAuthzClient().protection(\"marta\", \"password\").permission();\n+        createPermissionTicket();\n+\n+        RealmResource realm = getRealm();\n+        String resourceServerId = getClient(realm).toRepresentation().getId();\n+        UserRepresentation user = realm.users().search(\"kolo\").get(0);\n+\n+        PolicyEvaluationRequest request = new PolicyEvaluationRequest();\n+        request.setUserId(user.getId());\n+        request.setClientId(resourceServerId);\n+        request.addResource(\"Resource A\", \"ScopeA\");\n+        PolicyEvaluationResponse result = getClient(realm).authorization().policies().evaluate(request);\n+        Assert.assertEquals(result.getStatus(), DecisionEffect.PERMIT);\n+\n+        List<PolicyEvaluationResponse.EvaluationResultRepresentation> evaluations = result.getResults();\n+        Assert.assertFalse(evaluations.isEmpty());\n+        Assert.assertEquals(1, evaluations.size());\n+\n+        List<PolicyEvaluationResponse.PolicyResultRepresentation> policies = evaluations.get(0).getPolicies();\n+        Assert.assertFalse(evaluations.isEmpty());\n+        Assert.assertEquals(1, evaluations.size());\n+\n+        String description = policies.get(0).getPolicy().getDescription();\n+        Assert.assertTrue(description.startsWith(\"Resource owner (marta) grants access\"));\n+    }\n+\n+    @Test\n+    public void testCanRepresentPolicyResultGrantOfResourceOwnedByClient() throws Exception {\n+        resource = addResource(\"Resource A\", getClient(getRealm()).toRepresentation().getId(), true, \"ScopeA\");\n+        permission = getAuthzClient().protection().permission();\n+        createPermissionTicket();\n+\n+        RealmResource realm = getRealm();\n+        String resourceServerId = getClient(realm).toRepresentation().getId();\n+        UserRepresentation user = realm.users().search(\"kolo\").get(0);\n+\n+        PolicyEvaluationRequest request = new PolicyEvaluationRequest();\n+        request.setUserId(user.getId());\n+        request.setClientId(resourceServerId);\n+        request.addResource(\"Resource A\", \"ScopeA\");\n+        PolicyEvaluationResponse result = getClient(realm).authorization().policies().evaluate(request);\n+        Assert.assertEquals(result.getStatus(), DecisionEffect.PERMIT);\n+\n+        List<PolicyEvaluationResponse.EvaluationResultRepresentation> evaluations = result.getResults();\n+        Assert.assertFalse(evaluations.isEmpty());\n+        Assert.assertEquals(1, evaluations.size());\n+\n+        List<PolicyEvaluationResponse.PolicyResultRepresentation> policies = evaluations.get(0).getPolicies();\n+        Assert.assertFalse(evaluations.isEmpty());\n+        Assert.assertEquals(1, evaluations.size());\n+\n+        String description = policies.get(0).getPolicy().getDescription();\n+        Assert.assertTrue(description.startsWith(\"Resource owner (resource-server-test) grants access\"));\n+    }\n+\n+    @Test\n+    public void testCanRepresentResourceBeanOfResourceOwnedByUser() throws Exception {\n+        resource = addResource(\"Resource A\", \"marta\", true, \"ScopeA\");\n+\n+        testingClient.server().run(session -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "474f60dfbaa0ca58b5ca1eba2cd4771754ea235f"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0MzcyNw==", "bodyText": "You should get the client from the realm. For instance, using org.keycloak.models.RealmModel#getClientById.", "url": "https://github.com/keycloak/keycloak/pull/6809#discussion_r446343727", "createdAt": "2020-06-26T18:27:17Z", "author": {"login": "pedroigor"}, "path": "server-spi-private/src/main/java/org/keycloak/models/utils/ModelToRepresentation.java", "diffHunk": "@@ -1018,10 +1018,15 @@ public static PermissionTicketRepresentation toRepresentation(PermissionTicket t\n             representation.setResourceName(resource.getName());\n             KeycloakSession keycloakSession = authorization.getKeycloakSession();\n             RealmModel realm = authorization.getRealm();\n-            UserModel owner = keycloakSession.users().getUserById(ticket.getOwner(), realm);\n+            UserModel userOwner = keycloakSession.users().getUserById(ticket.getOwner(), realm);\n             UserModel requester = keycloakSession.users().getUserById(ticket.getRequester(), realm);\n             representation.setRequesterName(requester.getUsername());\n-            representation.setOwnerName(owner.getUsername());\n+            if (userOwner != null) {\n+                representation.setOwnerName(userOwner.getUsername());\n+            } else {\n+                ClientModel clientOwner = keycloakSession.clientStorageManager().getClientById(ticket.getOwner(), realm);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "474f60dfbaa0ca58b5ca1eba2cd4771754ea235f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0Mzk0MA==", "bodyText": "Same here", "url": "https://github.com/keycloak/keycloak/pull/6809#discussion_r446343940", "createdAt": "2020-06-26T18:27:45Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/admin/representation/PolicyEvaluationResponseBuilder.java", "diffHunk": "@@ -196,11 +197,19 @@ public static PolicyEvaluationResponse build(PolicyEvaluationService.EvaluationD\n \n             if (!tickets.isEmpty()) {\n                 KeycloakSession keycloakSession = authorization.getKeycloakSession();\n+                RealmModel realm = authorization.getRealm();\n                 PermissionTicket ticket = tickets.get(0);\n-                UserModel owner = keycloakSession.users().getUserById(ticket.getOwner(), authorization.getRealm());\n-                UserModel requester = keycloakSession.users().getUserById(ticket.getRequester(), authorization.getRealm());\n+                UserModel userOwner = keycloakSession.users().getUserById(ticket.getOwner(), realm);\n+                UserModel requester = keycloakSession.users().getUserById(ticket.getRequester(), realm);\n+                String resourceOwner;\n+                if (userOwner != null) {\n+                    resourceOwner = getUserEmailOrUserName(userOwner);\n+                } else {\n+                    ClientModel clientOwner = keycloakSession.clientStorageManager().getClientById(ticket.getOwner(), realm);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "474f60dfbaa0ca58b5ca1eba2cd4771754ea235f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0NDE2Nw==", "bodyText": "Same here", "url": "https://github.com/keycloak/keycloak/pull/6809#discussion_r446344167", "createdAt": "2020-06-26T18:28:16Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/forms/account/freemarker/model/AuthorizationBean.java", "diffHunk": "@@ -234,7 +236,17 @@ public ResourceBean(Resource resource) {\n             RealmModel realm = authorization.getRealm();\n             resourceServer = new ResourceServerBean(realm.getClientById(resource.getResourceServer().getId()));\n             this.resource = resource;\n-            owner = authorization.getKeycloakSession().users().getUserById(resource.getOwner(), realm);\n+            userOwner = authorization.getKeycloakSession().users().getUserById(resource.getOwner(), realm);\n+            if (userOwner == null) {\n+                clientOwner = authorization.getKeycloakSession().clientStorageManager().getClientById(resource.getOwner(), realm);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "474f60dfbaa0ca58b5ca1eba2cd4771754ea235f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0NTA2NA==", "bodyText": "Do you really need to set this to null?", "url": "https://github.com/keycloak/keycloak/pull/6809#discussion_r446345064", "createdAt": "2020-06-26T18:30:20Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/forms/account/freemarker/model/AuthorizationBean.java", "diffHunk": "@@ -234,7 +236,17 @@ public ResourceBean(Resource resource) {\n             RealmModel realm = authorization.getRealm();\n             resourceServer = new ResourceServerBean(realm.getClientById(resource.getResourceServer().getId()));\n             this.resource = resource;\n-            owner = authorization.getKeycloakSession().users().getUserById(resource.getOwner(), realm);\n+            userOwner = authorization.getKeycloakSession().users().getUserById(resource.getOwner(), realm);\n+            if (userOwner == null) {\n+                clientOwner = authorization.getKeycloakSession().clientStorageManager().getClientById(resource.getOwner(), realm);\n+                ownerName = clientOwner.getClientId();\n+            } else if (userOwner.getEmail() != null) {\n+                clientOwner = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "474f60dfbaa0ca58b5ca1eba2cd4771754ea235f"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMDcyMzIy", "url": "https://github.com/keycloak/keycloak/pull/6809#pullrequestreview-440072322", "createdAt": "2020-06-30T14:27:18Z", "commit": {"oid": "737c9733f783b0e9a37cfc86245fe9e1c76b33e4"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "603f5188a3ac3f920c38043c63c0b9a2450df1f7", "author": {"user": {"login": "EpicEric", "name": "Eric Rodrigues Pires"}}, "url": "https://github.com/keycloak/keycloak/commit/603f5188a3ac3f920c38043c63c0b9a2450df1f7", "committedDate": "2020-07-01T19:21:09Z", "message": "[KEYCLOAK-13044] Fix owner name representations of UMA tickets for client-owned resources"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMTk5NzMx", "url": "https://github.com/keycloak/keycloak/pull/6809#pullrequestreview-441199731", "createdAt": "2020-07-01T21:11:48Z", "commit": {"oid": "603f5188a3ac3f920c38043c63c0b9a2450df1f7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2517, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}