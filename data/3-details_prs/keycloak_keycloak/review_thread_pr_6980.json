{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzOTY0MjEw", "number": 6980, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzoyMTowMFrODyf8ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDoyNjo0N1rOD7rVqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Mjc4ODUxOnYy", "diffSide": "RIGHT", "path": "federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzoyMTowMFrOGGk9Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOToyNDoyM1rOGGz6nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1MDA5MA==", "bodyText": "I think it will be good to remove method \"shouldUserAttributeBeAlwaysReadFromLdap\" (and any new things related to that added in this PR) and just always add the proxy to the results.\nRegarding this, it may be also good to update a bit method UserStorageManager.query and make sure that duplicates are not returned. As currently UserStorageMAnager.query returns stuff from multiple providers, so it can probably return duplicated stuff in some cases (EG. in case that LDAP user was imported and attribute \"foo\" with value \"bar\" is available in both the DB and LDAP)", "url": "https://github.com/keycloak/keycloak/pull/6980#discussion_r409550090", "createdAt": "2020-04-16T13:21:00Z", "author": {"login": "mposolda"}, "path": "federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProvider.java", "diffHunk": "@@ -237,16 +233,33 @@ public boolean supportsCredentialAuthenticationFor(String type) {\n \n              for (LDAPObject ldapUser : ldapObjects) {\n                  String ldapUsername = LDAPUtils.getUsername(ldapUser, this.ldapIdentityStore.getConfig());\n-                 if (session.userLocalStorage().getUserByUsername(ldapUsername, realm) == null) {\n+                 UserModel localUser = session.userLocalStorage().getUserByUsername(ldapUsername, realm);\n+                 if (localUser == null) {\n                      UserModel imported = importUserFromLDAP(session, realm, ldapUser);\n                      searchResults.add(imported);\n+                 } else if (shouldUserAttributeBeAlwaysReadFromLdap(realm, attrName)) {\n+                     searchResults.add(proxy(realm, localUser, ldapUser));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eadd80d94ff2d4bf181947afe688e25fb69d1d04"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5NTIyOQ==", "bodyText": "In which case would we consider two users from different stores to be duplicates?\nThey may be duplicates when user from LDAP has been imported to local store. Then LDAP user and user from local store could be considered duplicates.\nShould we treat users from (let say) a custom storage provider and the LDAP provider to be duplicates (e.g. when usernames are equal)?\nAnd if we have duplicates, which user model should be removed from the result set?\nIs it always the one from the local store, because the one from LDAP provider will always proxy the local one anyways?", "url": "https://github.com/keycloak/keycloak/pull/6980#discussion_r409795229", "createdAt": "2020-04-16T19:24:23Z", "author": {"login": "sventorben"}, "path": "federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProvider.java", "diffHunk": "@@ -237,16 +233,33 @@ public boolean supportsCredentialAuthenticationFor(String type) {\n \n              for (LDAPObject ldapUser : ldapObjects) {\n                  String ldapUsername = LDAPUtils.getUsername(ldapUser, this.ldapIdentityStore.getConfig());\n-                 if (session.userLocalStorage().getUserByUsername(ldapUsername, realm) == null) {\n+                 UserModel localUser = session.userLocalStorage().getUserByUsername(ldapUsername, realm);\n+                 if (localUser == null) {\n                      UserModel imported = importUserFromLDAP(session, realm, ldapUser);\n                      searchResults.add(imported);\n+                 } else if (shouldUserAttributeBeAlwaysReadFromLdap(realm, attrName)) {\n+                     searchResults.add(proxy(realm, localUser, ldapUser));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1MDA5MA=="}, "originalCommit": {"oid": "eadd80d94ff2d4bf181947afe688e25fb69d1d04"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTAyNTQzOnYy", "diffSide": "RIGHT", "path": "federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDoyNjozNVrOGUJW_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDoyNjozNVrOGUJW_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc3ODA0NQ==", "bodyText": "Please remove star imports and replace with individual classes", "url": "https://github.com/keycloak/keycloak/pull/6980#discussion_r423778045", "createdAt": "2020-05-12T14:26:35Z", "author": {"login": "mposolda"}, "path": "federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProvider.java", "diffHunk": "@@ -58,10 +57,7 @@\n import org.keycloak.storage.ldap.idm.query.internal.LDAPQueryConditionsBuilder;\n import org.keycloak.storage.ldap.idm.store.ldap.LDAPIdentityStore;\n import org.keycloak.storage.ldap.kerberos.LDAPProviderKerberosConfig;\n-import org.keycloak.storage.ldap.mappers.LDAPOperationDecorator;\n-import org.keycloak.storage.ldap.mappers.LDAPStorageMapper;\n-import org.keycloak.storage.ldap.mappers.LDAPStorageMapperManager;\n-import org.keycloak.storage.ldap.mappers.PasswordUpdateCallback;\n+import org.keycloak.storage.ldap.mappers.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54865a66ab555f60dd0b09b9b5c133aebccf5363"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTAyNjMyOnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/federation/ldap/LDAPNoCacheTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDoyNjo0N1rOGUJXjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDoyNjo0N1rOGUJXjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc3ODE4OQ==", "bodyText": "Please remove star imports and replace with individual classes", "url": "https://github.com/keycloak/keycloak/pull/6980#discussion_r423778189", "createdAt": "2020-05-12T14:26:47Z", "author": {"login": "mposolda"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/federation/ldap/LDAPNoCacheTest.java", "diffHunk": "@@ -52,7 +53,12 @@\n import org.keycloak.testsuite.util.LDAPTestUtils;\n import org.keycloak.testsuite.util.MailUtils;\n \n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.hamcrest.Matchers.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54865a66ab555f60dd0b09b9b5c133aebccf5363"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3711, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}