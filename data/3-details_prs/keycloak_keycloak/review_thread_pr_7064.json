{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MDgyODI1", "number": 7064, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDoxMjo0NVrOEGgEXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDoyMjoyMVrOEGgPhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjUyMzE3OnYy", "diffSide": "RIGHT", "path": "saml-core/src/main/java/org/keycloak/saml/common/util/DocumentUtil.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDoxMjo0NVrOGlVsUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzowMjowOFrOGluPzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwNTkwNw==", "bodyText": "I just noticed that this method org.keycloak.saml.common.util.DocumentUtil#getDocumentAsString does the same thing.\nDoes it work for you?", "url": "https://github.com/keycloak/keycloak/pull/7064#discussion_r441805907", "createdAt": "2020-06-17T20:12:45Z", "author": {"login": "pedroigor"}, "path": "saml-core/src/main/java/org/keycloak/saml/common/util/DocumentUtil.java", "diffHunk": "@@ -299,6 +299,33 @@ public static InputStream getSourceAsStream(Source source) throws ConfigurationE\n         return new ByteArrayInputStream(baos.toByteArray());\n     }\n \n+    /**\n+     * Stream a DOM Node as a String\n+     *\n+     * @param node\n+     *\n+     * @return\n+     *\n+     * @throws ProcessingException\n+     * @throws TransformerFactoryConfigurationError\n+     * @throws TransformerException\n+     */\n+    public static String getNodeAsString(Node node) throws ConfigurationException, ProcessingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51d9c68ba1677e29ffe88d4b5ab71f5ae726f536"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5NzYzMQ==", "bodyText": "@pedroigor\nWe can't call DocumentUtil#getDocumentAsString directly because of the type miss match of the argument. How about refactoring the getDocumentAsString method and adding getNodeAsString method as follows?\n    public static String getDocumentAsString(Document signedDoc) throws ProcessingException, ConfigurationException {\n        return getNodeAsString(signedDoc);\n    }\n\n    public static String getNodeAsString(Node node) throws ConfigurationException, ProcessingException {\n        Source source = new DOMSource(node);\n        StringWriter sw = new StringWriter();\n\n        Result streamResult = new StreamResult(sw);\n        // Write the DOM document to the stream\n        Transformer xformer = TransformerUtil.getTransformer();\n        try {\n            xformer.transform(source, streamResult);\n        } catch (TransformerException e) {\n            throw logger.processingError(e);\n        }\n\n        return sw.toString();\n    }", "url": "https://github.com/keycloak/keycloak/pull/7064#discussion_r441997631", "createdAt": "2020-06-18T06:33:31Z", "author": {"login": "wadahiro"}, "path": "saml-core/src/main/java/org/keycloak/saml/common/util/DocumentUtil.java", "diffHunk": "@@ -299,6 +299,33 @@ public static InputStream getSourceAsStream(Source source) throws ConfigurationE\n         return new ByteArrayInputStream(baos.toByteArray());\n     }\n \n+    /**\n+     * Stream a DOM Node as a String\n+     *\n+     * @param node\n+     *\n+     * @return\n+     *\n+     * @throws ProcessingException\n+     * @throws TransformerFactoryConfigurationError\n+     * @throws TransformerException\n+     */\n+    public static String getNodeAsString(Node node) throws ConfigurationException, ProcessingException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwNTkwNw=="}, "originalCommit": {"oid": "51d9c68ba1677e29ffe88d4b5ab71f5ae726f536"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIwODIwNw==", "bodyText": "It works. I think that is what I was trying to say but I forgot you are actually using a Node and not a Document.", "url": "https://github.com/keycloak/keycloak/pull/7064#discussion_r442208207", "createdAt": "2020-06-18T13:02:08Z", "author": {"login": "pedroigor"}, "path": "saml-core/src/main/java/org/keycloak/saml/common/util/DocumentUtil.java", "diffHunk": "@@ -299,6 +299,33 @@ public static InputStream getSourceAsStream(Source source) throws ConfigurationE\n         return new ByteArrayInputStream(baos.toByteArray());\n     }\n \n+    /**\n+     * Stream a DOM Node as a String\n+     *\n+     * @param node\n+     *\n+     * @return\n+     *\n+     * @throws ProcessingException\n+     * @throws TransformerFactoryConfigurationError\n+     * @throws TransformerException\n+     */\n+    public static String getNodeAsString(Node node) throws ConfigurationException, ProcessingException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwNTkwNw=="}, "originalCommit": {"oid": "51d9c68ba1677e29ffe88d4b5ab71f5ae726f536"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjU1MTcyOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDoyMjoyMVrOGlV-2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTozMToxN1rOGl0xuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxMDY1MA==", "bodyText": "Could you include issued_token_type and set it to urn:ietf:params:oauth:token-type:saml2. See https://tools.ietf.org/id/draft-ietf-oauth-token-exchange-19.html#rfc.section.3.\nI guess that would mean creating a TokenExchangeResponse extending AccessTokenResponse ? Reason being that we use that new class only for token exchange and don't touch the oauth2 part. Also easier to support additional parameters in the future that could be specific of exchange.", "url": "https://github.com/keycloak/keycloak/pull/7064#discussion_r441810650", "createdAt": "2020-06-17T20:22:21Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java", "diffHunk": "@@ -945,6 +976,56 @@ protected Response exchangeClientToClient(UserModel targetUser, UserSessionModel\n         return cors.builder(Response.ok(res, MediaType.APPLICATION_JSON_TYPE)).build();\n     }\n \n+    protected Response exchangeClientToSAML2Client(UserModel targetUser, UserSessionModel targetUserSession, String requestedTokenType,\n+                                                  ClientModel targetClient, String audience, String scope) {\n+        // Create authSession with target SAML 2.0 client and authenticated user\n+        LoginProtocolFactory factory = (LoginProtocolFactory) session.getKeycloakSessionFactory()\n+                .getProviderFactory(LoginProtocol.class, SamlProtocol.LOGIN_PROTOCOL);\n+        SamlService samlService = (SamlService) factory.createProtocolEndpoint(realm, event);\n+        ResteasyProviderFactory.getInstance().injectProperties(samlService);\n+        AuthenticationSessionModel authSession = samlService.getOrCreateLoginSessionForIdpInitiatedSso(session, realm,\n+                targetClient, null);\n+        if (authSession == null) {\n+            logger.error(\"SAML assertion consumer url not set up\");\n+            throw new CorsErrorResponseException(cors, OAuthErrorException.INVALID_CLIENT, \"Client requires assertion consumer url set up\", Response.Status.BAD_REQUEST);\n+        }\n+\n+        authSession.setAuthenticatedUser(targetUser);\n+\n+        event.session(targetUserSession);\n+\n+        AuthenticationManager.setClientScopesInSession(authSession);\n+        ClientSessionContext clientSessionCtx = TokenManager.attachAuthenticationSession(this.session, targetUserSession,\n+                authSession);\n+\n+        updateUserSessionFromClientAuth(targetUserSession);\n+\n+        // Create SAML 2.0 Assertion Response\n+        SamlClient samlClient = new SamlClient(targetClient);\n+        SamlProtocol samlProtocol = new TokenExchangeSamlProtocol(samlClient).setEventBuilder(event).setHttpHeaders(headers).setRealm(realm)\n+                .setSession(session).setUriInfo(session.getContext().getUri());\n+\n+        Response samlAssertion = samlProtocol.authenticated(authSession, targetUserSession, clientSessionCtx);\n+        if (samlAssertion.getStatus() != 200) {\n+            throw new CorsErrorResponseException(cors, OAuthErrorException.INVALID_REQUEST, \"Can not get SAML 2.0 token\", Response.Status.BAD_REQUEST);\n+        }\n+        String xmlString = (String) samlAssertion.getEntity();\n+        String encodedXML = Base64Url.encode(xmlString.getBytes(GeneralConstants.SAML_CHARSET));\n+\n+        int assertionLifespan = samlClient.getAssertionLifespan();\n+\n+        AccessTokenResponse res = new AccessTokenResponse();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51d9c68ba1677e29ffe88d4b5ab71f5ae726f536"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA1NTg3NA==", "bodyText": "@pedroigor\n\nCould you include issued_token_type and set it to urn:ietf:params:oauth:token-type:saml2\n\nIt's already included in the following code through AccessTokenResponse#setOtherClaims method:\nhttps://github.com/keycloak/keycloak/pull/7064/files#diff-ec5f9626f53934cdc3ad494e198f1902R1021\nBut there is no assertion in the test code. I'll add the assertion.\n\nI guess that would mean creating a TokenExchangeResponse extending AccessTokenResponse\n\n\nCreate TokenExchangeResponse extending AccessTokenResponse as new class\nAdd issuedTokenType field and set/get method into the new class\nFix the existing token exchange code for OIDC client and external clients (implementation of ExchangeTokenToIdentityProviderToken)to use the new response class\n\nIs the above fix OK?\nAlso, I noticed the current token exchange code doesn't follow the spec.\n\nExchange for OIDC client doesn't include issued_token_type claim.\nRefresh token for OIDC client isn't stored in access_token claim when requested_token_type is refresh token type.\n\n  \n    \n      keycloak/services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java\n    \n    \n        Lines 930 to 933\n      in\n      6dde131\n    \n    \n    \n    \n\n        \n          \n           if (requestedTokenType.equals(OAuth2Constants.REFRESH_TOKEN_TYPE)) { \n        \n\n        \n          \n               responseBuilder.generateRefreshToken(); \n        \n\n        \n          \n               responseBuilder.getRefreshToken().issuedFor(client.getClientId()); \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nID token is issued by the scope parameter. Should we issue the id token when requested_token_type is id token type?\n\n  \n    \n      keycloak/services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java\n    \n    \n        Lines 935 to 938\n      in\n      6dde131\n    \n    \n    \n    \n\n        \n          \n           String scopeParam = clientSessionCtx.getClientSession().getNote(OAuth2Constants.SCOPE); \n        \n\n        \n          \n           if (TokenUtil.isOIDCRequest(scopeParam)) { \n        \n\n        \n          \n               responseBuilder.generateIDToken().generateAccessTokenHash(); \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nID token for external client isn't stored in access_token claim when requested_token_type is id token type.\n\n  \n    \n      keycloak/services/src/main/java/org/keycloak/broker/oidc/AbstractOAuth2IdentityProvider.java\n    \n    \n        Lines 225 to 230\n      in\n      7efaf98\n    \n    \n    \n    \n\n        \n          \n           } else if (OAuth2Constants.ID_TOKEN_TYPE.equals(requestedType)) { \n        \n\n        \n          \n               String idToken = tokenUserSession.getNote(OIDCIdentityProvider.FEDERATED_ID_TOKEN); \n        \n\n        \n          \n               if (idToken != null) { \n        \n\n        \n          \n                   AccessTokenResponse tokenResponse = new AccessTokenResponse(); \n        \n\n        \n          \n                   tokenResponse.setToken(null); \n        \n\n        \n          \n                   tokenResponse.setIdToken(idToken); \n        \n    \n  \n\n\n\nShould I fix those issues in this pull request too?", "url": "https://github.com/keycloak/keycloak/pull/7064#discussion_r442055874", "createdAt": "2020-06-18T08:26:49Z", "author": {"login": "wadahiro"}, "path": "services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java", "diffHunk": "@@ -945,6 +976,56 @@ protected Response exchangeClientToClient(UserModel targetUser, UserSessionModel\n         return cors.builder(Response.ok(res, MediaType.APPLICATION_JSON_TYPE)).build();\n     }\n \n+    protected Response exchangeClientToSAML2Client(UserModel targetUser, UserSessionModel targetUserSession, String requestedTokenType,\n+                                                  ClientModel targetClient, String audience, String scope) {\n+        // Create authSession with target SAML 2.0 client and authenticated user\n+        LoginProtocolFactory factory = (LoginProtocolFactory) session.getKeycloakSessionFactory()\n+                .getProviderFactory(LoginProtocol.class, SamlProtocol.LOGIN_PROTOCOL);\n+        SamlService samlService = (SamlService) factory.createProtocolEndpoint(realm, event);\n+        ResteasyProviderFactory.getInstance().injectProperties(samlService);\n+        AuthenticationSessionModel authSession = samlService.getOrCreateLoginSessionForIdpInitiatedSso(session, realm,\n+                targetClient, null);\n+        if (authSession == null) {\n+            logger.error(\"SAML assertion consumer url not set up\");\n+            throw new CorsErrorResponseException(cors, OAuthErrorException.INVALID_CLIENT, \"Client requires assertion consumer url set up\", Response.Status.BAD_REQUEST);\n+        }\n+\n+        authSession.setAuthenticatedUser(targetUser);\n+\n+        event.session(targetUserSession);\n+\n+        AuthenticationManager.setClientScopesInSession(authSession);\n+        ClientSessionContext clientSessionCtx = TokenManager.attachAuthenticationSession(this.session, targetUserSession,\n+                authSession);\n+\n+        updateUserSessionFromClientAuth(targetUserSession);\n+\n+        // Create SAML 2.0 Assertion Response\n+        SamlClient samlClient = new SamlClient(targetClient);\n+        SamlProtocol samlProtocol = new TokenExchangeSamlProtocol(samlClient).setEventBuilder(event).setHttpHeaders(headers).setRealm(realm)\n+                .setSession(session).setUriInfo(session.getContext().getUri());\n+\n+        Response samlAssertion = samlProtocol.authenticated(authSession, targetUserSession, clientSessionCtx);\n+        if (samlAssertion.getStatus() != 200) {\n+            throw new CorsErrorResponseException(cors, OAuthErrorException.INVALID_REQUEST, \"Can not get SAML 2.0 token\", Response.Status.BAD_REQUEST);\n+        }\n+        String xmlString = (String) samlAssertion.getEntity();\n+        String encodedXML = Base64Url.encode(xmlString.getBytes(GeneralConstants.SAML_CHARSET));\n+\n+        int assertionLifespan = samlClient.getAssertionLifespan();\n+\n+        AccessTokenResponse res = new AccessTokenResponse();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxMDY1MA=="}, "originalCommit": {"oid": "51d9c68ba1677e29ffe88d4b5ab71f5ae726f536"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIwOTczMQ==", "bodyText": "Yeah, we are missing some bits of the specs. I really missed the part you are setting the issued_token_type.\nDon't worry about fixing them now. Let's do it in a separate and specific PR.\nLet's keep the way you did and just add the assertion in the test.", "url": "https://github.com/keycloak/keycloak/pull/7064#discussion_r442209731", "createdAt": "2020-06-18T13:04:33Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java", "diffHunk": "@@ -945,6 +976,56 @@ protected Response exchangeClientToClient(UserModel targetUser, UserSessionModel\n         return cors.builder(Response.ok(res, MediaType.APPLICATION_JSON_TYPE)).build();\n     }\n \n+    protected Response exchangeClientToSAML2Client(UserModel targetUser, UserSessionModel targetUserSession, String requestedTokenType,\n+                                                  ClientModel targetClient, String audience, String scope) {\n+        // Create authSession with target SAML 2.0 client and authenticated user\n+        LoginProtocolFactory factory = (LoginProtocolFactory) session.getKeycloakSessionFactory()\n+                .getProviderFactory(LoginProtocol.class, SamlProtocol.LOGIN_PROTOCOL);\n+        SamlService samlService = (SamlService) factory.createProtocolEndpoint(realm, event);\n+        ResteasyProviderFactory.getInstance().injectProperties(samlService);\n+        AuthenticationSessionModel authSession = samlService.getOrCreateLoginSessionForIdpInitiatedSso(session, realm,\n+                targetClient, null);\n+        if (authSession == null) {\n+            logger.error(\"SAML assertion consumer url not set up\");\n+            throw new CorsErrorResponseException(cors, OAuthErrorException.INVALID_CLIENT, \"Client requires assertion consumer url set up\", Response.Status.BAD_REQUEST);\n+        }\n+\n+        authSession.setAuthenticatedUser(targetUser);\n+\n+        event.session(targetUserSession);\n+\n+        AuthenticationManager.setClientScopesInSession(authSession);\n+        ClientSessionContext clientSessionCtx = TokenManager.attachAuthenticationSession(this.session, targetUserSession,\n+                authSession);\n+\n+        updateUserSessionFromClientAuth(targetUserSession);\n+\n+        // Create SAML 2.0 Assertion Response\n+        SamlClient samlClient = new SamlClient(targetClient);\n+        SamlProtocol samlProtocol = new TokenExchangeSamlProtocol(samlClient).setEventBuilder(event).setHttpHeaders(headers).setRealm(realm)\n+                .setSession(session).setUriInfo(session.getContext().getUri());\n+\n+        Response samlAssertion = samlProtocol.authenticated(authSession, targetUserSession, clientSessionCtx);\n+        if (samlAssertion.getStatus() != 200) {\n+            throw new CorsErrorResponseException(cors, OAuthErrorException.INVALID_REQUEST, \"Can not get SAML 2.0 token\", Response.Status.BAD_REQUEST);\n+        }\n+        String xmlString = (String) samlAssertion.getEntity();\n+        String encodedXML = Base64Url.encode(xmlString.getBytes(GeneralConstants.SAML_CHARSET));\n+\n+        int assertionLifespan = samlClient.getAssertionLifespan();\n+\n+        AccessTokenResponse res = new AccessTokenResponse();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxMDY1MA=="}, "originalCommit": {"oid": "51d9c68ba1677e29ffe88d4b5ab71f5ae726f536"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxNTE5Mg==", "bodyText": "All right, I'll fix DocumentUtil and test case.", "url": "https://github.com/keycloak/keycloak/pull/7064#discussion_r442315192", "createdAt": "2020-06-18T15:31:17Z", "author": {"login": "wadahiro"}, "path": "services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java", "diffHunk": "@@ -945,6 +976,56 @@ protected Response exchangeClientToClient(UserModel targetUser, UserSessionModel\n         return cors.builder(Response.ok(res, MediaType.APPLICATION_JSON_TYPE)).build();\n     }\n \n+    protected Response exchangeClientToSAML2Client(UserModel targetUser, UserSessionModel targetUserSession, String requestedTokenType,\n+                                                  ClientModel targetClient, String audience, String scope) {\n+        // Create authSession with target SAML 2.0 client and authenticated user\n+        LoginProtocolFactory factory = (LoginProtocolFactory) session.getKeycloakSessionFactory()\n+                .getProviderFactory(LoginProtocol.class, SamlProtocol.LOGIN_PROTOCOL);\n+        SamlService samlService = (SamlService) factory.createProtocolEndpoint(realm, event);\n+        ResteasyProviderFactory.getInstance().injectProperties(samlService);\n+        AuthenticationSessionModel authSession = samlService.getOrCreateLoginSessionForIdpInitiatedSso(session, realm,\n+                targetClient, null);\n+        if (authSession == null) {\n+            logger.error(\"SAML assertion consumer url not set up\");\n+            throw new CorsErrorResponseException(cors, OAuthErrorException.INVALID_CLIENT, \"Client requires assertion consumer url set up\", Response.Status.BAD_REQUEST);\n+        }\n+\n+        authSession.setAuthenticatedUser(targetUser);\n+\n+        event.session(targetUserSession);\n+\n+        AuthenticationManager.setClientScopesInSession(authSession);\n+        ClientSessionContext clientSessionCtx = TokenManager.attachAuthenticationSession(this.session, targetUserSession,\n+                authSession);\n+\n+        updateUserSessionFromClientAuth(targetUserSession);\n+\n+        // Create SAML 2.0 Assertion Response\n+        SamlClient samlClient = new SamlClient(targetClient);\n+        SamlProtocol samlProtocol = new TokenExchangeSamlProtocol(samlClient).setEventBuilder(event).setHttpHeaders(headers).setRealm(realm)\n+                .setSession(session).setUriInfo(session.getContext().getUri());\n+\n+        Response samlAssertion = samlProtocol.authenticated(authSession, targetUserSession, clientSessionCtx);\n+        if (samlAssertion.getStatus() != 200) {\n+            throw new CorsErrorResponseException(cors, OAuthErrorException.INVALID_REQUEST, \"Can not get SAML 2.0 token\", Response.Status.BAD_REQUEST);\n+        }\n+        String xmlString = (String) samlAssertion.getEntity();\n+        String encodedXML = Base64Url.encode(xmlString.getBytes(GeneralConstants.SAML_CHARSET));\n+\n+        int assertionLifespan = samlClient.getAssertionLifespan();\n+\n+        AccessTokenResponse res = new AccessTokenResponse();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxMDY1MA=="}, "originalCommit": {"oid": "51d9c68ba1677e29ffe88d4b5ab71f5ae726f536"}, "originalPosition": 118}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3627, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}