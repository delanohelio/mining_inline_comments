{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MzQ3OTI0", "number": 6633, "title": "KEYCLOAK-12615 HS384 and HS512 support for Client Authentication by Client Secret Signed JWT", "bodyText": "JIRA issue is as follows.\nhttps://issues.jboss.org/browse/KEYCLOAK-12615\n[How to determine the signature algorithm]\nUnlike the JWT generated and signed by keycloak, There is the case that the JWT generated and signed by the client does not include \"alg\" claim because JWK RFC states that \"alg\" claim is OPTIONAL.\n(https://tools.ietf.org/html/rfc7517#section-4.4)\nHowever, \"kty\" claim is MUST.\n(https://tools.ietf.org/html/rfc7517#section-4.1)\nConsidering these points, try to determine \"alg\" as follows if \"alg\" does not exist.\n\"kty\" = \"RSA\" -> \"alg\" = \"RS256\" (backward compatibility : the previous implementation on treating Client signed JWT hardcodes RS256)\n\"kty\" = \"EC\"  -> \"alg\" = \"ES256\"\n\"kty\" = \"oct\" -> \"alg\" = \"HS256\" (backward compatibility : the previous implementation on treating Client signed JWT hardcodes HS256)\n\"kty\" does not exists -> return null (error)\n\"kty\" = other value -> return null (error)\nreferring JWA RFC https://tools.ietf.org/html/rfc7518#section-6.1\nAs for KeyType.EC, JWA RFC states that \"crv\" is MUST.\n(https://tools.ietf.org/html/rfc7518#section-6.2.1.1)\nIt would be desirable that keycloak user \"crv\" and determine the algorithm.\nHowever, current JWSHeader implementation can not provides \"crv\" value. So use ES256.\nAs for KeyType.OCT, keycload defines it as upper case but JWA RFC states lower case\n(https://tools.ietf.org/html/rfc7518#section-6.1)\nFor backward compatibility, use String.equalsIgnoreCase() not String.equals().\nI'm not sure but it seems that this PR also resolve https://issues.redhat.com/browse/KEYCLOAK-12299 .", "createdAt": "2020-01-05T23:35:53Z", "url": "https://github.com/keycloak/keycloak/pull/6633", "merged": true, "mergeCommit": {"oid": "993ba3179c3287c15848f453af463e27a96d82f2"}, "closed": true, "closedAt": "2020-01-28T13:55:49Z", "author": {"login": "tnorimat"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb5AA8zgFqTM0MTIxMDMzNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb6hr4YAFqTM0MzA2NDgyMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxMjEwMzM3", "url": "https://github.com/keycloak/keycloak/pull/6633#pullrequestreview-341210337", "createdAt": "2020-01-10T14:50:36Z", "commit": {"oid": "3c9262c8eb473f6543ab97689399e766de61d7c5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNDo1MDozNlrOFcWSeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNDo1MDozNlrOFcWSeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI2OTYyNA==", "bodyText": "You added some added code in JWTClientSecretCredentialProvider to support different algorithms, however it seems it is not possible to setup them in the adapter config. Will it make sense to add optional \"algorithm\" field to the adapter configuration? It may be then needed to be also documented somewhere in this chapter: https://www.keycloak.org/docs/latest/securing_apps/index.html#_client_authentication_adapter", "url": "https://github.com/keycloak/keycloak/pull/6633#discussion_r365269624", "createdAt": "2020-01-10T14:50:36Z", "author": {"login": "mposolda"}, "path": "adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/authentication/JWTClientSecretCredentialsProvider.java", "diffHunk": "@@ -11,70 +11,87 @@\n import org.keycloak.adapters.AdapterUtils;\n import org.keycloak.adapters.KeycloakDeployment;\n import org.keycloak.common.util.Time;\n+import org.keycloak.crypto.Algorithm;\n+import org.keycloak.crypto.JavaAlgorithm;\n import org.keycloak.jose.jws.JWSBuilder;\n import org.keycloak.representations.JsonWebToken;\n \n /**\n  * Client authentication based on JWT signed by client secret instead of private key .\n  * See <a href=\"http://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication\">specs</a> for more details.\n  *\n- * @author <a href=\"mailto:takashi.norimatsu.ws@hitachi.com\">Takashi Norimatsu</a>\n  */\n public class JWTClientSecretCredentialsProvider implements ClientCredentialsProvider {\n-    \n-\tprivate static final Logger logger = Logger.getLogger(JWTClientSecretCredentialsProvider.class);\n-\t\n+\n+    private static final Logger logger = Logger.getLogger(JWTClientSecretCredentialsProvider.class);\n+\n     public static final String PROVIDER_ID = \"secret-jwt\";\n-    \n+\n     private SecretKey clientSecret;\n-    \n+\n     @Override\n     public String getId() {\n         return PROVIDER_ID;\n     }\n-    \n+\n     @Override\n     public void init(KeycloakDeployment deployment, Object config) {\n         if (!(config instanceof Map)) {\n             throw new RuntimeException(\"Configuration of jwt credentials by client secret is missing or incorrect for client '\" + deployment.getResourceName() + \"'. Check your adapter configuration\");\n         }\n-        \n+\n         Map<String, Object> cfg = (Map<String, Object>) config;\n         String clientSecretString = (String) cfg.get(\"secret\");\n         if (clientSecretString == null) {\n             throw new RuntimeException(\"Missing parameter secret-jwt in configuration of jwt for client \" + deployment.getResourceName());\n         }\n         setClientSecret(clientSecretString); \n     }\n-    \n+\n     @Override\n     public void setClientCredentials(KeycloakDeployment deployment, Map<String, String> requestHeaders, Map<String, String> formParams) {\n         String signedToken = createSignedRequestToken(deployment.getResourceName(), deployment.getRealmInfoUrl());\n         formParams.put(OAuth2Constants.CLIENT_ASSERTION_TYPE, OAuth2Constants.CLIENT_ASSERTION_TYPE_JWT);\n         formParams.put(OAuth2Constants.CLIENT_ASSERTION, signedToken);\n     }\n-   \n+\n     public void setClientSecret(String clientSecretString) {\n         // Get client secret and validate signature\n         // According to <a href=\"http://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication\">OIDC's client authentication spec</a>,\n         // The HMAC (Hash-based Message Authentication Code) is calculated using the octets of the UTF-8 representation of the client_secret as the shared key. \n         // Use \"HmacSHA256\" consulting <a href=\"https://docs.oracle.com/javase/jp/8/docs/api/javax/crypto/Mac.html\">java8 api</a>\n         // because it must be implemented in every java platform.\n-        clientSecret = new SecretKeySpec(clientSecretString.getBytes(StandardCharsets.UTF_8), \"HmacSHA256\");\n+        setClientSecret(clientSecretString, Algorithm.HS256);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c9262c8eb473f6543ab97689399e766de61d7c5"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ea32a1f3f3073f6e323b05edb2c340ed8d11a71", "author": {"user": {"login": "tnorimat", "name": "Takashi Norimatsu"}}, "url": "https://github.com/keycloak/keycloak/commit/6ea32a1f3f3073f6e323b05edb2c340ed8d11a71", "committedDate": "2020-01-15T06:53:57Z", "message": "KEYCLOAK-12615 HS384 and HS512 support for Client Authentication by Client Secret Signed JWT"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3c9262c8eb473f6543ab97689399e766de61d7c5", "author": {"user": {"login": "tnorimat", "name": "Takashi Norimatsu"}}, "url": "https://github.com/keycloak/keycloak/commit/3c9262c8eb473f6543ab97689399e766de61d7c5", "committedDate": "2020-01-05T23:32:32Z", "message": "KEYCLOAK-12615 HS384 and HS512 support for Client Authentication by Client Secret Signed JWT"}, "afterCommit": {"oid": "6ea32a1f3f3073f6e323b05edb2c340ed8d11a71", "author": {"user": {"login": "tnorimat", "name": "Takashi Norimatsu"}}, "url": "https://github.com/keycloak/keycloak/commit/6ea32a1f3f3073f6e323b05edb2c340ed8d11a71", "committedDate": "2020-01-15T06:53:57Z", "message": "KEYCLOAK-12615 HS384 and HS512 support for Client Authentication by Client Secret Signed JWT"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMDY0ODIw", "url": "https://github.com/keycloak/keycloak/pull/6633#pullrequestreview-343064820", "createdAt": "2020-01-15T08:57:20Z", "commit": {"oid": "6ea32a1f3f3073f6e323b05edb2c340ed8d11a71"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2685, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}