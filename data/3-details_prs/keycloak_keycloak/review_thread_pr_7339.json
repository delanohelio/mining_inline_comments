{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4Mjg0Nzgw", "number": 7339, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwODowNzoyMVrOEfVMQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwODowNzo0OVrOEfVNRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjg4NTEyOnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/OIDCClientRegistrationTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwODowNzoyMVrOHLipmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMTo1ODozOVrOHLrv9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg2NDA4OA==", "bodyText": "Is it possible to test retrieving client with admin REST API and doublecheck that \"defaultScopes\" on the client are empty?\nIMO will be good to test that, so if we do some changes in the future, we can detect regressions and clarify if the behaviour is as expected (also with relation to client policies, which we will add etc.)", "url": "https://github.com/keycloak/keycloak/pull/7339#discussion_r481864088", "createdAt": "2020-09-02T08:07:21Z", "author": {"login": "mposolda"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/OIDCClientRegistrationTest.java", "diffHunk": "@@ -468,5 +470,50 @@ private ClientRepresentation getKeycloakClient(String clientId) {\n         return ApiUtil.findClientByClientId(adminClient.realms().realm(REALM_NAME), clientId).toRepresentation();\n     }\n \n+    @Test\n+    public void testClientWithScope() throws Exception {\n+        OIDCClientRepresentation clientRep = null;\n+        OIDCClientRepresentation response = null;\n+        String clientScope = \"phone address\";\n+\n+        clientRep = createRep();\n+        clientRep.setScope(clientScope);\n+        response = reg.oidc().create(clientRep);\n+\n+        Set<String> clientScopes = new HashSet<>(Arrays.asList(clientScope.split(\" \")));\n+        Set<String> registeredClientScopes = new HashSet<>(Arrays.asList(response.getScope().split(\" \")));\n+        assertTrue(clientScopes.equals(registeredClientScopes));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8754c42b60c55e33efb804b83a3382fd0c18052e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkzNzIwNA==", "bodyText": "@mposolda I see. I'll add the test as you suggested.", "url": "https://github.com/keycloak/keycloak/pull/7339#discussion_r481937204", "createdAt": "2020-09-02T09:36:19Z", "author": {"login": "tnorimat"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/OIDCClientRegistrationTest.java", "diffHunk": "@@ -468,5 +470,50 @@ private ClientRepresentation getKeycloakClient(String clientId) {\n         return ApiUtil.findClientByClientId(adminClient.realms().realm(REALM_NAME), clientId).toRepresentation();\n     }\n \n+    @Test\n+    public void testClientWithScope() throws Exception {\n+        OIDCClientRepresentation clientRep = null;\n+        OIDCClientRepresentation response = null;\n+        String clientScope = \"phone address\";\n+\n+        clientRep = createRep();\n+        clientRep.setScope(clientScope);\n+        response = reg.oidc().create(clientRep);\n+\n+        Set<String> clientScopes = new HashSet<>(Arrays.asList(clientScope.split(\" \")));\n+        Set<String> registeredClientScopes = new HashSet<>(Arrays.asList(response.getScope().split(\" \")));\n+        assertTrue(clientScopes.equals(registeredClientScopes));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg2NDA4OA=="}, "originalCommit": {"oid": "8754c42b60c55e33efb804b83a3382fd0c18052e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjAxMzE3NQ==", "bodyText": "@tnorimat Thanks for the change. For the future, this line can be replaced with the:\nassertEquals(clientScopes, registeredClientScopes);\n\nwhich is more readable and better regarding possible failure reporting etc. I don't want to block this PR just because of this, so just merging it. Feel free to send another PR with improving these lines in the test if you want, but however you wish  :-)", "url": "https://github.com/keycloak/keycloak/pull/7339#discussion_r482013175", "createdAt": "2020-09-02T11:58:39Z", "author": {"login": "mposolda"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/OIDCClientRegistrationTest.java", "diffHunk": "@@ -468,5 +470,50 @@ private ClientRepresentation getKeycloakClient(String clientId) {\n         return ApiUtil.findClientByClientId(adminClient.realms().realm(REALM_NAME), clientId).toRepresentation();\n     }\n \n+    @Test\n+    public void testClientWithScope() throws Exception {\n+        OIDCClientRepresentation clientRep = null;\n+        OIDCClientRepresentation response = null;\n+        String clientScope = \"phone address\";\n+\n+        clientRep = createRep();\n+        clientRep.setScope(clientScope);\n+        response = reg.oidc().create(clientRep);\n+\n+        Set<String> clientScopes = new HashSet<>(Arrays.asList(clientScope.split(\" \")));\n+        Set<String> registeredClientScopes = new HashSet<>(Arrays.asList(response.getScope().split(\" \")));\n+        assertTrue(clientScopes.equals(registeredClientScopes));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg2NDA4OA=="}, "originalCommit": {"oid": "8754c42b60c55e33efb804b83a3382fd0c18052e"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjg4NzczOnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/OIDCClientRegistrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwODowNzo0OVrOHLirRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTozNjoyNFrOHLnHbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg2NDUxNw==", "bodyText": "Same as above. Is it possible to obtain client through admin REST API and doublecheck that default client scopes are realm default client scopes?", "url": "https://github.com/keycloak/keycloak/pull/7339#discussion_r481864517", "createdAt": "2020-09-02T08:07:49Z", "author": {"login": "mposolda"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/OIDCClientRegistrationTest.java", "diffHunk": "@@ -468,5 +470,50 @@ private ClientRepresentation getKeycloakClient(String clientId) {\n         return ApiUtil.findClientByClientId(adminClient.realms().realm(REALM_NAME), clientId).toRepresentation();\n     }\n \n+    @Test\n+    public void testClientWithScope() throws Exception {\n+        OIDCClientRepresentation clientRep = null;\n+        OIDCClientRepresentation response = null;\n+        String clientScope = \"phone address\";\n+\n+        clientRep = createRep();\n+        clientRep.setScope(clientScope);\n+        response = reg.oidc().create(clientRep);\n+\n+        Set<String> clientScopes = new HashSet<>(Arrays.asList(clientScope.split(\" \")));\n+        Set<String> registeredClientScopes = new HashSet<>(Arrays.asList(response.getScope().split(\" \")));\n+        assertTrue(clientScopes.equals(registeredClientScopes));\n+    }\n \n+    @Test\n+    public void testClientWithNotDefinedScope() throws Exception {\n+        OIDCClientRepresentation clientRep = null;\n+        OIDCClientRepresentation response = null;\n+\n+        String clientScope = \"notdefinedscope address\";\n+\n+        clientRep = createRep();\n+        clientRep.setScope(clientScope);\n+        try {\n+            response = reg.oidc().create(clientRep);\n+            fail(\"Expected 403\");\n+        } catch (ClientRegistrationException e) {\n+            assertEquals(403, ((HttpErrorException) e.getCause()).getStatusLine().getStatusCode());\n+        }\n+    }\n+\n+    @Test\n+    public void testClientWithoutScope() throws ClientRegistrationException {\n+        Set<String> realmOptionalClientScopes = new HashSet<>(adminClient.realm(REALM_NAME).getDefaultOptionalClientScopes()\n+                .stream().map(i->i.getName()).collect(Collectors.toList()));\n+\n+        OIDCClientRepresentation clientRep = null;\n+        OIDCClientRepresentation response = null;\n+\n+        clientRep = createRep();\n+        response = reg.oidc().create(clientRep);\n+\n+        Set<String> registeredClientScopes = new HashSet<>(Arrays.asList(response.getScope().split(\" \")));\n+        assertTrue(realmOptionalClientScopes.equals(new HashSet<>(registeredClientScopes)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8754c42b60c55e33efb804b83a3382fd0c18052e"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkzNzI2MA==", "bodyText": "@mposolda I see. I'll add the test as you suggested.", "url": "https://github.com/keycloak/keycloak/pull/7339#discussion_r481937260", "createdAt": "2020-09-02T09:36:24Z", "author": {"login": "tnorimat"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/OIDCClientRegistrationTest.java", "diffHunk": "@@ -468,5 +470,50 @@ private ClientRepresentation getKeycloakClient(String clientId) {\n         return ApiUtil.findClientByClientId(adminClient.realms().realm(REALM_NAME), clientId).toRepresentation();\n     }\n \n+    @Test\n+    public void testClientWithScope() throws Exception {\n+        OIDCClientRepresentation clientRep = null;\n+        OIDCClientRepresentation response = null;\n+        String clientScope = \"phone address\";\n+\n+        clientRep = createRep();\n+        clientRep.setScope(clientScope);\n+        response = reg.oidc().create(clientRep);\n+\n+        Set<String> clientScopes = new HashSet<>(Arrays.asList(clientScope.split(\" \")));\n+        Set<String> registeredClientScopes = new HashSet<>(Arrays.asList(response.getScope().split(\" \")));\n+        assertTrue(clientScopes.equals(registeredClientScopes));\n+    }\n \n+    @Test\n+    public void testClientWithNotDefinedScope() throws Exception {\n+        OIDCClientRepresentation clientRep = null;\n+        OIDCClientRepresentation response = null;\n+\n+        String clientScope = \"notdefinedscope address\";\n+\n+        clientRep = createRep();\n+        clientRep.setScope(clientScope);\n+        try {\n+            response = reg.oidc().create(clientRep);\n+            fail(\"Expected 403\");\n+        } catch (ClientRegistrationException e) {\n+            assertEquals(403, ((HttpErrorException) e.getCause()).getStatusLine().getStatusCode());\n+        }\n+    }\n+\n+    @Test\n+    public void testClientWithoutScope() throws ClientRegistrationException {\n+        Set<String> realmOptionalClientScopes = new HashSet<>(adminClient.realm(REALM_NAME).getDefaultOptionalClientScopes()\n+                .stream().map(i->i.getName()).collect(Collectors.toList()));\n+\n+        OIDCClientRepresentation clientRep = null;\n+        OIDCClientRepresentation response = null;\n+\n+        clientRep = createRep();\n+        response = reg.oidc().create(clientRep);\n+\n+        Set<String> registeredClientScopes = new HashSet<>(Arrays.asList(response.getScope().split(\" \")));\n+        assertTrue(realmOptionalClientScopes.equals(new HashSet<>(registeredClientScopes)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg2NDUxNw=="}, "originalCommit": {"oid": "8754c42b60c55e33efb804b83a3382fd0c18052e"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3383, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}