{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM3ODEzNzcy", "number": 7674, "title": "[KEYCLOAK-16536] Implement Audit Events for Authorization Services requests", "bodyText": "CONTRIBUTING.MD mentions that all PRs require relevant documentation. Unfortunately, I didn't find any documentation about Audit Events in Keycloak Documentation repository.\nI'm willing to add some if further instructions are provided as to where to place it and what kind of contents it should contain.\nIn general, this PR contains code to submit the error and success events for Authorization Services permission requests, for both successful and failed ones, including relevant data about them such as the permission request audience and permission parameters, the user linked to the request and the client used for it.\nThe PERMISSION_TOKEN and PERMISSION_TOKEN_ERROR events already existed, so no new event types had to be defined. This PR only includes the necessary changes to submit the success or error events when applicable, and include the necessary information to clearly identify the type of error for audit purposes.\nThe same applies for tests. I wasn't able to find tests for other events so it is not clear where or how these tests should be implemented. I'm also willing to add them if further instructions are provided for this particular case.", "createdAt": "2020-12-12T06:00:31Z", "url": "https://github.com/keycloak/keycloak/pull/7674", "merged": true, "mergeCommit": {"oid": "6255ebe6b537c9502cb5ae5163704c4681fbdee3"}, "closed": true, "closedAt": "2021-02-22T20:28:59Z", "author": {"login": "jmrodriguez"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABd3OKEGAFqTU4NDYxNjc2MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABd8tuM4gFqTU5NTc1Mzg4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg0NjE2NzYw", "url": "https://github.com/keycloak/keycloak/pull/7674#pullrequestreview-584616760", "createdAt": "2021-02-05T18:52:44Z", "commit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg2ODY4NzI1", "url": "https://github.com/keycloak/keycloak/pull/7674#pullrequestreview-586868725", "createdAt": "2021-02-09T18:32:21Z", "commit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxODozMjoyMVrOIilTMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxODo0ODo0OFrOIimAPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzMzYxNw==", "bodyText": "This is not really necessary because the request will never be null. The check we have is just a defensive check. It is probably a code assertion where a null request is a bug and not expected at all.", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573133617", "createdAt": "2021-02-09T18:32:21Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -174,29 +174,47 @@ public static AuthorizationTokenService instance() {\n     }\n \n     private static void fireErrorEvent(EventBuilder event, String error, Exception cause) {\n-        event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n-                .error(error);\n+        if (cause instanceof CorsErrorResponseException) {\n+            // cast the exception to populate the event with a more descriptive reason\n+            CorsErrorResponseException originalCause = (CorsErrorResponseException) cause;\n+            event.detail(Details.REASON, originalCause.getErrorDescription() == null ? \"<unknown>\" : originalCause.getErrorDescription())\n+                    .error(error);\n+        } else {\n+            event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n+                    .error(error);\n+        }\n+\n         logger.debug(event.getEvent().getType(), cause);\n     }\n-    \n-    public Response authorize(KeycloakAuthorizationRequest request) {\n+\n+    public Response authorize(KeycloakAuthorizationRequest request, EventBuilder event) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzNDUyMA==", "bodyText": "Should create the exception using reqest.getCors().\nWe don't need Errors.INVALID_AUTHORIZATION_REQUEST. But just use Errors.INVALID_REQUEST.", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573134520", "createdAt": "2021-02-09T18:33:51Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -174,29 +174,47 @@ public static AuthorizationTokenService instance() {\n     }\n \n     private static void fireErrorEvent(EventBuilder event, String error, Exception cause) {\n-        event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n-                .error(error);\n+        if (cause instanceof CorsErrorResponseException) {\n+            // cast the exception to populate the event with a more descriptive reason\n+            CorsErrorResponseException originalCause = (CorsErrorResponseException) cause;\n+            event.detail(Details.REASON, originalCause.getErrorDescription() == null ? \"<unknown>\" : originalCause.getErrorDescription())\n+                    .error(error);\n+        } else {\n+            event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n+                    .error(error);\n+        }\n+\n         logger.debug(event.getEvent().getType(), cause);\n     }\n-    \n-    public Response authorize(KeycloakAuthorizationRequest request) {\n+\n+    public Response authorize(KeycloakAuthorizationRequest request, EventBuilder event) {\n         if (request == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_GRANT, \"Invalid authorization request.\", Status.BAD_REQUEST);\n+            CorsErrorResponseException invalidAuthorizationRequestException = new CorsErrorResponseException(null, OAuthErrorException.INVALID_GRANT, \"Invalid authorization request.\", Status.BAD_REQUEST);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzNTg2MA==", "bodyText": "I would just use Errors.INVALID_REQUEST. The details should be enough to understand what happened.", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573135860", "createdAt": "2021-02-09T18:35:50Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -174,29 +174,47 @@ public static AuthorizationTokenService instance() {\n     }\n \n     private static void fireErrorEvent(EventBuilder event, String error, Exception cause) {\n-        event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n-                .error(error);\n+        if (cause instanceof CorsErrorResponseException) {\n+            // cast the exception to populate the event with a more descriptive reason\n+            CorsErrorResponseException originalCause = (CorsErrorResponseException) cause;\n+            event.detail(Details.REASON, originalCause.getErrorDescription() == null ? \"<unknown>\" : originalCause.getErrorDescription())\n+                    .error(error);\n+        } else {\n+            event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n+                    .error(error);\n+        }\n+\n         logger.debug(event.getEvent().getType(), cause);\n     }\n-    \n-    public Response authorize(KeycloakAuthorizationRequest request) {\n+\n+    public Response authorize(KeycloakAuthorizationRequest request, EventBuilder event) {\n         if (request == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_GRANT, \"Invalid authorization request.\", Status.BAD_REQUEST);\n+            CorsErrorResponseException invalidAuthorizationRequestException = new CorsErrorResponseException(null, OAuthErrorException.INVALID_GRANT, \"Invalid authorization request.\", Status.BAD_REQUEST);\n+            fireErrorEvent(event, Errors.INVALID_AUTHORIZATION_REQUEST, invalidAuthorizationRequestException);\n+            throw invalidAuthorizationRequestException;\n         }\n \n         // it is not secure to allow public clients to push arbitrary claims because message can be tampered\n         if (isPublicClientRequestingEntitlementWithClaims(request)) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_GRANT, \"Public clients are not allowed to send claims\", Status.FORBIDDEN);\n+            CorsErrorResponseException forbiddenClientException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_GRANT, \"Public clients are not allowed to send claims\", Status.FORBIDDEN);\n+            fireErrorEvent(event, Errors.PUBLIC_CLIENT_SENDING_CLAIMS, forbiddenClientException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzNzE3MQ==", "bodyText": "Isn't INVALID_RESPONSE_MODE too much? Do we really need it?", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573137171", "createdAt": "2021-02-09T18:37:06Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -223,17 +241,23 @@ public Response authorize(KeycloakAuthorizationRequest request) {\n                     } else if (RESPONSE_MODE_PERMISSIONS.equals(metadata.getResponseMode())) {\n                         return createSuccessfulResponse(permissions, request);\n                     } else {\n-                        throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Invalid response_mode\", Status.BAD_REQUEST);\n+                        CorsErrorResponseException invalidResponseModeException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Invalid response_mode\", Status.BAD_REQUEST);\n+                        fireErrorEvent(event, Errors.INVALID_RESPONSE_MODE, invalidResponseModeException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzODkyOA==", "bodyText": "Not really, an invalid request. Here the access is denied by the request was submitted for approval by another user (usually the resource owner).", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573138928", "createdAt": "2021-02-09T18:39:28Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -223,17 +241,23 @@ public Response authorize(KeycloakAuthorizationRequest request) {\n                     } else if (RESPONSE_MODE_PERMISSIONS.equals(metadata.getResponseMode())) {\n                         return createSuccessfulResponse(permissions, request);\n                     } else {\n-                        throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Invalid response_mode\", Status.BAD_REQUEST);\n+                        CorsErrorResponseException invalidResponseModeException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Invalid response_mode\", Status.BAD_REQUEST);\n+                        fireErrorEvent(event, Errors.INVALID_RESPONSE_MODE, invalidResponseModeException);\n+                        throw invalidResponseModeException;\n                     }\n                 } else {\n                     return createSuccessfulResponse(createAuthorizationResponse(identity, permissions, request, targetClient), request);\n                 }\n             }\n \n             if (request.isSubmitRequest()) {\n-                throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.ACCESS_DENIED, \"request_submitted\", Status.FORBIDDEN);\n+                CorsErrorResponseException submittedRequestException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.ACCESS_DENIED, \"request_submitted\", Status.FORBIDDEN);\n+                fireErrorEvent(event, Errors.INVALID_REQUEST, submittedRequestException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MjA3Mg==", "bodyText": "An Errors.ACCESS_DENIED makes more sense.", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573142072", "createdAt": "2021-02-09T18:44:14Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -223,17 +241,23 @@ public Response authorize(KeycloakAuthorizationRequest request) {\n                     } else if (RESPONSE_MODE_PERMISSIONS.equals(metadata.getResponseMode())) {\n                         return createSuccessfulResponse(permissions, request);\n                     } else {\n-                        throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Invalid response_mode\", Status.BAD_REQUEST);\n+                        CorsErrorResponseException invalidResponseModeException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Invalid response_mode\", Status.BAD_REQUEST);\n+                        fireErrorEvent(event, Errors.INVALID_RESPONSE_MODE, invalidResponseModeException);\n+                        throw invalidResponseModeException;\n                     }\n                 } else {\n                     return createSuccessfulResponse(createAuthorizationResponse(identity, permissions, request, targetClient), request);\n                 }\n             }\n \n             if (request.isSubmitRequest()) {\n-                throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.ACCESS_DENIED, \"request_submitted\", Status.FORBIDDEN);\n+                CorsErrorResponseException submittedRequestException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.ACCESS_DENIED, \"request_submitted\", Status.FORBIDDEN);\n+                fireErrorEvent(event, Errors.INVALID_REQUEST, submittedRequestException);\n+                throw submittedRequestException;\n             } else {\n-                throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.ACCESS_DENIED, \"not_authorized\", Status.FORBIDDEN);\n+                CorsErrorResponseException notAuthorizedException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.ACCESS_DENIED, \"not_authorized\", Status.FORBIDDEN);\n+                fireErrorEvent(event, Errors.INVALID_REQUEST, notAuthorizedException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MjI3Ng==", "bodyText": "I would just use Errors.INVALID_REQUEST. The details should be enough to understand what happened.", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573142276", "createdAt": "2021-02-09T18:44:33Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -402,19 +426,25 @@ private ResourceServer getResourceServer(PermissionTicketToken ticket, KeycloakA\n         String issuedFor = ticket.getIssuedFor();\n \n         if (issuedFor == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"You must provide the issuedFor\", Status.BAD_REQUEST);\n+            CorsErrorResponseException missingIssuedForException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"You must provide the issuedFor\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.MISSING_ISSUED_FOR, missingIssuedForException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MjMzMw==", "bodyText": "I would just use Errors.INVALID_REQUEST. The details should be enough to understand what happened.", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573142333", "createdAt": "2021-02-09T18:44:39Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -402,19 +426,25 @@ private ResourceServer getResourceServer(PermissionTicketToken ticket, KeycloakA\n         String issuedFor = ticket.getIssuedFor();\n \n         if (issuedFor == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"You must provide the issuedFor\", Status.BAD_REQUEST);\n+            CorsErrorResponseException missingIssuedForException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"You must provide the issuedFor\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.MISSING_ISSUED_FOR, missingIssuedForException);\n+            throw missingIssuedForException;\n         }\n \n         ClientModel clientModel = request.getRealm().getClientByClientId(issuedFor);\n \n         if (clientModel == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Unknown resource server id.\", Status.BAD_REQUEST);\n+            CorsErrorResponseException unknownServerIdException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Unknown resource server id: [\" + issuedFor + \"]\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.UNKNOWN_SERVER_ID, unknownServerIdException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MjQ1Mw==", "bodyText": "I would just use Errors.INVALID_REQUEST. The details should be enough to understand what happened.", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573142453", "createdAt": "2021-02-09T18:44:49Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -402,19 +426,25 @@ private ResourceServer getResourceServer(PermissionTicketToken ticket, KeycloakA\n         String issuedFor = ticket.getIssuedFor();\n \n         if (issuedFor == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"You must provide the issuedFor\", Status.BAD_REQUEST);\n+            CorsErrorResponseException missingIssuedForException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"You must provide the issuedFor\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.MISSING_ISSUED_FOR, missingIssuedForException);\n+            throw missingIssuedForException;\n         }\n \n         ClientModel clientModel = request.getRealm().getClientByClientId(issuedFor);\n \n         if (clientModel == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Unknown resource server id.\", Status.BAD_REQUEST);\n+            CorsErrorResponseException unknownServerIdException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Unknown resource server id: [\" + issuedFor + \"]\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.UNKNOWN_SERVER_ID, unknownServerIdException);\n+            throw unknownServerIdException;\n         }\n \n         ResourceServer resourceServer = resourceServerStore.findById(clientModel.getId());\n \n         if (resourceServer == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Client does not support permissions\", Status.BAD_REQUEST);\n+            CorsErrorResponseException unsupportedPermissionsException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Client does not support permissions\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.UNSUPPORTED_PERMISSIONS, unsupportedPermissionsException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MjUxOA==", "bodyText": "I would just use Errors.INVALID_REQUEST. The details should be enough to understand what happened.", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573142518", "createdAt": "2021-02-09T18:44:55Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -430,7 +460,9 @@ private EvaluationContext createEvaluationContext(KeycloakAuthorizationRequest r\n         BiFunction<KeycloakAuthorizationRequest, AuthorizationProvider, EvaluationContext> evaluationContextProvider = SUPPORTED_CLAIM_TOKEN_FORMATS.get(claimTokenFormat);\n \n         if (evaluationContextProvider == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Claim token format [\" + claimTokenFormat + \"] not supported\", Status.BAD_REQUEST);\n+            CorsErrorResponseException unsupportedClaimTokenFormatException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Claim token format [\" + claimTokenFormat + \"] not supported\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.UNSUPPORTED_CLAIM_TOKEN_FORMAT, unsupportedClaimTokenFormatException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MjgwOQ==", "bodyText": "Could you please, remove changes that are basically formatting the code?", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573142809", "createdAt": "2021-02-09T18:45:23Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -469,9 +501,9 @@ private EvaluationContext createEvaluationContext(KeycloakAuthorizationRequest r\n     }\n \n     private void resolvePreviousGrantedPermissions(PermissionTicketToken ticket,\n-            KeycloakAuthorizationRequest request, ResourceServer resourceServer,\n-            Map<String, ResourcePermission> permissionsToEvaluate, ResourceStore resourceStore, ScopeStore scopeStore,\n-            AtomicInteger limit) {\n+                                                   KeycloakAuthorizationRequest request, ResourceServer resourceServer,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MzE4Mg==", "bodyText": "I would just use Errors.INVALID_REQUEST. The details should be enough to understand what happened.", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573143182", "createdAt": "2021-02-09T18:45:51Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -636,12 +668,14 @@ private void resolveResourcePermission(KeycloakAuthorizationRequest request,\n         }\n \n         if (permissionsToEvaluate.isEmpty()) {\n-            throw new CorsErrorResponseException(request.getCors(), \"invalid_resource\", \"Resource with id [\" + resourceId + \"] does not exist.\", Status.BAD_REQUEST);\n+            CorsErrorResponseException invalidResourceException = new CorsErrorResponseException(request.getCors(), \"invalid_resource\", \"Resource with id [\" + resourceId + \"] does not exist.\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.INVALID_RESOURCE, invalidResourceException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MzI4Mw==", "bodyText": "I would just use Errors.INVALID_REQUEST. The details should be enough to understand what happened.", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573143283", "createdAt": "2021-02-09T18:46:01Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -657,14 +691,16 @@ private void resolveResourcePermission(KeycloakAuthorizationRequest request,\n                 Objects::nonNull).collect(Collectors.toSet());\n \n         if (!requestedScopes.isEmpty() && requestedScopesModel.isEmpty()) {\n-            throw new CorsErrorResponseException(request.getCors(), \"invalid_scope\", \"One of the given scopes \" + permission.getScopes() + \" is invalid\", Status.BAD_REQUEST);\n+            CorsErrorResponseException invalidScopeException = new CorsErrorResponseException(request.getCors(), \"invalid_scope\", \"One of the given scopes \" + permission.getScopes() + \" is invalid\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.INVALID_SCOPE, invalidScopeException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MzgxNw==", "bodyText": "I would just use Errors.INVALID_PERMISSION_TICKET. The details should be enough to understand what happened.", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573143817", "createdAt": "2021-02-09T18:46:50Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -690,11 +726,15 @@ private PermissionTicketToken verifyPermissionTicket(KeycloakAuthorizationReques\n \n         PermissionTicketToken ticket = request.getKeycloakSession().tokens().decode(ticketString, PermissionTicketToken.class);\n         if (ticket == null) {\n-            throw new CorsErrorResponseException(request.getCors(), \"invalid_ticket\", \"Ticket verification failed\", Status.FORBIDDEN);\n+            CorsErrorResponseException ticketVerificationException = new CorsErrorResponseException(request.getCors(), \"invalid_ticket\", \"Ticket verification failed\", Status.FORBIDDEN);\n+            fireErrorEvent(request.getEvent(), Errors.TICKET_VERIFICATION_FAILED, ticketVerificationException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0NTE1MA==", "bodyText": "Errors.INVALID_REQUEST?", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573145150", "createdAt": "2021-02-09T18:48:48Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java", "diffHunk": "@@ -1290,16 +1293,20 @@ public Response permissionGrant() {\n         if (rpt != null) {\n             AccessToken accessToken = session.tokens().decode(rpt, AccessToken.class);\n             if (accessToken == null) {\n+                event.error(Errors.INVALID_RPT_SIGNATURE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 23}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc", "author": {"user": null}, "url": "https://github.com/keycloak/keycloak/commit/77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc", "committedDate": "2020-12-12T01:39:01Z", "message": "[KEYCLOAK-16536] Implement Audit Events for Authorization Services requests"}, "afterCommit": {"oid": "e20a252383943c52de0d7767fe05f27639c4b3dc", "author": {"user": null}, "url": "https://github.com/keycloak/keycloak/commit/e20a252383943c52de0d7767fe05f27639c4b3dc", "committedDate": "2021-02-10T14:11:15Z", "message": "[KEYCLOAK-16536] Implement Audit Events for Authorization Services requests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg4NTA3OTUx", "url": "https://github.com/keycloak/keycloak/pull/7674#pullrequestreview-588507951", "createdAt": "2021-02-11T12:30:16Z", "commit": {"oid": "e20a252383943c52de0d7767fe05f27639c4b3dc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMVQxMjozMDoxNlrOIj2fIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMVQxMjozMTozNFrOIj2hzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NDQ2Mzc3OA==", "bodyText": "@jmrodriguez Could you please revert this change? See comment above.", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r574463778", "createdAt": "2021-02-11T12:30:16Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -174,29 +174,47 @@ public static AuthorizationTokenService instance() {\n     }\n \n     private static void fireErrorEvent(EventBuilder event, String error, Exception cause) {\n-        event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n-                .error(error);\n+        if (cause instanceof CorsErrorResponseException) {\n+            // cast the exception to populate the event with a more descriptive reason\n+            CorsErrorResponseException originalCause = (CorsErrorResponseException) cause;\n+            event.detail(Details.REASON, originalCause.getErrorDescription() == null ? \"<unknown>\" : originalCause.getErrorDescription())\n+                    .error(error);\n+        } else {\n+            event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n+                    .error(error);\n+        }\n+\n         logger.debug(event.getEvent().getType(), cause);\n     }\n-    \n-    public Response authorize(KeycloakAuthorizationRequest request) {\n+\n+    public Response authorize(KeycloakAuthorizationRequest request, EventBuilder event) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzMzYxNw=="}, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NDQ2NDQ2MQ==", "bodyText": "@jmrodriguez Do we really need INVALID_RESPONSE_MODE? See comment above.", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r574464461", "createdAt": "2021-02-11T12:31:34Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -223,17 +241,23 @@ public Response authorize(KeycloakAuthorizationRequest request) {\n                     } else if (RESPONSE_MODE_PERMISSIONS.equals(metadata.getResponseMode())) {\n                         return createSuccessfulResponse(permissions, request);\n                     } else {\n-                        throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Invalid response_mode\", Status.BAD_REQUEST);\n+                        CorsErrorResponseException invalidResponseModeException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Invalid response_mode\", Status.BAD_REQUEST);\n+                        fireErrorEvent(event, Errors.INVALID_RESPONSE_MODE, invalidResponseModeException);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzNzE3MQ=="}, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 61}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e20a252383943c52de0d7767fe05f27639c4b3dc", "author": {"user": null}, "url": "https://github.com/keycloak/keycloak/commit/e20a252383943c52de0d7767fe05f27639c4b3dc", "committedDate": "2021-02-10T14:11:15Z", "message": "[KEYCLOAK-16536] Implement Audit Events for Authorization Services requests"}, "afterCommit": {"oid": "99e531623dce97fa7ebe3aacf96dff6d2218e7bc", "author": {"user": null}, "url": "https://github.com/keycloak/keycloak/commit/99e531623dce97fa7ebe3aacf96dff6d2218e7bc", "committedDate": "2021-02-11T14:31:31Z", "message": "[KEYCLOAK-16536] Implement Audit Events for Authorization Services requests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkyMTU0OTA5", "url": "https://github.com/keycloak/keycloak/pull/7674#pullrequestreview-592154909", "createdAt": "2021-02-17T12:45:35Z", "commit": {"oid": "99e531623dce97fa7ebe3aacf96dff6d2218e7bc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QxMjo0NTozNlrOIm0x0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QxMjo0NTozNlrOIm0x0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzU4MTUyMA==", "bodyText": "@jmrodriguez I think the change is not reflected here?", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r577581520", "createdAt": "2021-02-17T12:45:36Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -174,29 +174,47 @@ public static AuthorizationTokenService instance() {\n     }\n \n     private static void fireErrorEvent(EventBuilder event, String error, Exception cause) {\n-        event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n-                .error(error);\n+        if (cause instanceof CorsErrorResponseException) {\n+            // cast the exception to populate the event with a more descriptive reason\n+            CorsErrorResponseException originalCause = (CorsErrorResponseException) cause;\n+            event.detail(Details.REASON, originalCause.getErrorDescription() == null ? \"<unknown>\" : originalCause.getErrorDescription())\n+                    .error(error);\n+        } else {\n+            event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n+                    .error(error);\n+        }\n+\n         logger.debug(event.getEvent().getType(), cause);\n     }\n-    \n-    public Response authorize(KeycloakAuthorizationRequest request) {\n+\n+    public Response authorize(KeycloakAuthorizationRequest request, EventBuilder event) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzMzYxNw=="}, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "99e531623dce97fa7ebe3aacf96dff6d2218e7bc", "author": {"user": null}, "url": "https://github.com/keycloak/keycloak/commit/99e531623dce97fa7ebe3aacf96dff6d2218e7bc", "committedDate": "2021-02-11T14:31:31Z", "message": "[KEYCLOAK-16536] Implement Audit Events for Authorization Services requests"}, "afterCommit": {"oid": "e17f5659d8f974f7c19db455e700a60aed7d5b9f", "author": {"user": null}, "url": "https://github.com/keycloak/keycloak/commit/e17f5659d8f974f7c19db455e700a60aed7d5b9f", "committedDate": "2021-02-17T20:00:50Z", "message": "[KEYCLOAK-16536] Implement Audit Events for Authorization Services requests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e17f5659d8f974f7c19db455e700a60aed7d5b9f", "author": {"user": null}, "url": "https://github.com/keycloak/keycloak/commit/e17f5659d8f974f7c19db455e700a60aed7d5b9f", "committedDate": "2021-02-17T20:00:50Z", "message": "[KEYCLOAK-16536] Implement Audit Events for Authorization Services requests"}, "afterCommit": {"oid": "2eab51d8dc388aa8b4b7209364d05811fbe6a4c5", "author": {"user": null}, "url": "https://github.com/keycloak/keycloak/commit/2eab51d8dc388aa8b4b7209364d05811fbe6a4c5", "committedDate": "2021-02-22T18:17:47Z", "message": "[KEYCLOAK-16536] Implement Audit Events for Authorization Services requests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2eab51d8dc388aa8b4b7209364d05811fbe6a4c5", "author": {"user": null}, "url": "https://github.com/keycloak/keycloak/commit/2eab51d8dc388aa8b4b7209364d05811fbe6a4c5", "committedDate": "2021-02-22T18:17:47Z", "message": "[KEYCLOAK-16536] Implement Audit Events for Authorization Services requests"}, "afterCommit": {"oid": "f021a08f9b85abb40db84cabbb87bcb2876739c4", "author": {"user": null}, "url": "https://github.com/keycloak/keycloak/commit/f021a08f9b85abb40db84cabbb87bcb2876739c4", "committedDate": "2021-02-22T18:28:19Z", "message": "[KEYCLOAK-16536] Implement Audit Events for Authorization Services requests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cd1129a2cb2376427b8e5d7bfe5a88c98ea2760", "author": {"user": null}, "url": "https://github.com/keycloak/keycloak/commit/5cd1129a2cb2376427b8e5d7bfe5a88c98ea2760", "committedDate": "2021-02-22T18:35:26Z", "message": "[KEYCLOAK-16536] Implement Audit Events for Authorization Services requests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f021a08f9b85abb40db84cabbb87bcb2876739c4", "author": {"user": null}, "url": "https://github.com/keycloak/keycloak/commit/f021a08f9b85abb40db84cabbb87bcb2876739c4", "committedDate": "2021-02-22T18:28:19Z", "message": "[KEYCLOAK-16536] Implement Audit Events for Authorization Services requests"}, "afterCommit": {"oid": "5cd1129a2cb2376427b8e5d7bfe5a88c98ea2760", "author": {"user": null}, "url": "https://github.com/keycloak/keycloak/commit/5cd1129a2cb2376427b8e5d7bfe5a88c98ea2760", "committedDate": "2021-02-22T18:35:26Z", "message": "[KEYCLOAK-16536] Implement Audit Events for Authorization Services requests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk1NzE2MzE4", "url": "https://github.com/keycloak/keycloak/pull/7674#pullrequestreview-595716318", "createdAt": "2021-02-22T19:40:40Z", "commit": {"oid": "5cd1129a2cb2376427b8e5d7bfe5a88c98ea2760"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxOTo0MDo0MFrOIppNag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxOTo0MDo0MFrOIppNag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDUzNzcwNg==", "bodyText": "I promise this is the last comment from me :)\nDo you really need to audit this every time?", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r580537706", "createdAt": "2021-02-22T19:40:40Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java", "diffHunk": "@@ -1318,6 +1325,7 @@ public Response permissionGrant() {\n         List<String> permissions = formParams.get(\"permission\");\n \n         if (permissions != null) {\n+            event.detail(Details.PERMISSION, String.join(\"|\", permissions));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cd1129a2cb2376427b8e5d7bfe5a88c98ea2760"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk1NzUzODgy", "url": "https://github.com/keycloak/keycloak/pull/7674#pullrequestreview-595753882", "createdAt": "2021-02-22T20:28:53Z", "commit": {"oid": "5cd1129a2cb2376427b8e5d7bfe5a88c98ea2760"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3321, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}