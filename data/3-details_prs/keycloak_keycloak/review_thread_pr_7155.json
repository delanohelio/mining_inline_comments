{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxODAyNzc2", "number": 7155, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNDo1NjoyNlrOELuPrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDoyNToyOFrOEqV6cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNzI3NDY5OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/userprofile/LegacyUserProfileProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNDo1NjoyN1rOGta6UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNDo1NjoyN1rOGta6UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI4MDAxNg==", "bodyText": "This is needed because of the \"chained action\" approach in the registration. May it should be considered to adapt the registration flow in order to remove this switch so we can go here with configuration only.", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r450280016", "createdAt": "2020-07-06T14:56:27Z", "author": {"login": "bs-matil"}, "path": "services/src/main/java/org/keycloak/userprofile/LegacyUserProfileProvider.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.common.util.ObjectUtil;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserModel;\n+import org.keycloak.representations.idm.UserAttributesRepresentation;\n+import org.keycloak.services.messages.Messages;\n+import org.keycloak.userprofile.util.UpdateUserProfileContext;\n+import org.keycloak.userprofile.validation.StaticValidators;\n+import org.keycloak.userprofile.validation.UserProfileValidationResult;\n+import org.keycloak.userprofile.validation.ValidationChainBuilder;\n+import org.keycloak.userprofile.validation.ValidationScenario;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public class LegacyUserProfileProvider extends AbstractUserProfileProvider {\n+\n+    private static final Logger logger = Logger.getLogger(LegacyUserProfileProvider.class);\n+\n+\n+    public static final String PROVIDER_ID = \"legacy-user-profile\";\n+\n+    @Override\n+    public String getId() {\n+        return PROVIDER_ID;\n+    }\n+\n+    @Override\n+    public UserProfileValidationResult validate(UserAttributesRepresentation rep, UpdateUserProfileContext user, ValidationScenario validationScenario) {\n+        RealmModel realm = this.session.getContext().getRealm();\n+\n+        ValidationChainBuilder builder = ValidationChainBuilder.builder();\n+        switch (validationScenario) {\n+            case UserResource:\n+                break;\n+            case IdpReview:\n+                addBasicValidators(builder, !realm.isRegistrationEmailAsUsername());\n+                break;\n+            case Account:\n+            case RegistrationProfile:\n+            case UpdateProfile:\n+                addBasicValidators(builder, !realm.isRegistrationEmailAsUsername() && realm.isEditUsernameAllowed());\n+                addSessionValidators(builder);\n+                break;\n+            case RegistrationUserCreation:\n+                addUserCreationValidators(builder);\n+                break;\n+        }\n+        return new UserProfileValidationResult(builder.build().validate(rep, user));\n+    }\n+\n+    private void addUserCreationValidators(ValidationChainBuilder builder) {\n+        RealmModel realm = this.session.getContext().getRealm();\n+\n+        if (realm.isRegistrationEmailAsUsername()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12e4582548aa2c07d3ee3b7557c81a956c16cb8f"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTkwMzM2OnYy", "diffSide": "RIGHT", "path": "server-spi-private/src/main/java/org/keycloak/userprofile/UserProfileSpi.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNTo1OToyNFrOGz54xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNTo1OToyNFrOGz54xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA3ODk4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return false;\n          \n          \n            \n                    return true;\n          \n      \n    \n    \n  \n\nSince this SPI is in server-spi-private it should be marked internal (internal means implementing a custom provider is not supported, which means we can change API without considering backwards compatiblity). In the future once it's stable we can move to server-spi. and mark as non-internal", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r457078981", "createdAt": "2020-07-20T05:59:24Z", "author": {"login": "stianst"}, "path": "server-spi-private/src/main/java/org/keycloak/userprofile/UserProfileSpi.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile;\n+\n+import org.keycloak.provider.Provider;\n+import org.keycloak.provider.ProviderFactory;\n+import org.keycloak.provider.Spi;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public class UserProfileSpi implements Spi {\n+\n+    @Override\n+    public boolean isInternal() {\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3316eeea2e1e9b1d34b003ec7ab0f873afd2108d"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTkyMTIyOnYy", "diffSide": "RIGHT", "path": "server-spi-private/src/main/java/org/keycloak/userprofile/UserProfileSpi.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjowNDozOFrOGz6CQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOTo0MzoyN1rOG0wVdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA4MTQwOQ==", "bodyText": "UserProfileProvider should not implement ProviderFactory. There should be separate ProviderFactory and Provider interfaces.", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r457081409", "createdAt": "2020-07-20T06:04:38Z", "author": {"login": "stianst"}, "path": "server-spi-private/src/main/java/org/keycloak/userprofile/UserProfileSpi.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile;\n+\n+import org.keycloak.provider.Provider;\n+import org.keycloak.provider.ProviderFactory;\n+import org.keycloak.provider.Spi;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public class UserProfileSpi implements Spi {\n+\n+    @Override\n+    public boolean isInternal() {\n+        return false;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"userProfile\";\n+    }\n+\n+    @Override\n+    public Class<? extends Provider> getProviderClass() {\n+        return UserProfileProvider.class;\n+    }\n+\n+    @Override\n+    public Class<? extends ProviderFactory> getProviderFactoryClass() {\n+        return UserProfileProvider.class;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3316eeea2e1e9b1d34b003ec7ab0f873afd2108d"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk3MTA2MA==", "bodyText": "Okay, we were not sure about that (both patterns are applied in the codebase and its hard to guess when it's appropriate).\nwill be fixed.", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r457971060", "createdAt": "2020-07-21T09:43:27Z", "author": {"login": "bs-matil"}, "path": "server-spi-private/src/main/java/org/keycloak/userprofile/UserProfileSpi.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile;\n+\n+import org.keycloak.provider.Provider;\n+import org.keycloak.provider.ProviderFactory;\n+import org.keycloak.provider.Spi;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public class UserProfileSpi implements Spi {\n+\n+    @Override\n+    public boolean isInternal() {\n+        return false;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"userProfile\";\n+    }\n+\n+    @Override\n+    public Class<? extends Provider> getProviderClass() {\n+        return UserProfileProvider.class;\n+    }\n+\n+    @Override\n+    public Class<? extends ProviderFactory> getProviderFactoryClass() {\n+        return UserProfileProvider.class;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA4MTQwOQ=="}, "originalCommit": {"oid": "3316eeea2e1e9b1d34b003ec7ab0f873afd2108d"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTk0NzQ0OnYy", "diffSide": "RIGHT", "path": "server-spi-private/src/main/java/org/keycloak/userprofile/AbstractUserProfileProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjoxMjowNVrOGz6Qbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDoyODoyMlrOG0x4Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA4NTAzOA==", "bodyText": "Remove this Abstract class it has no use", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r457085038", "createdAt": "2020-07-20T06:12:05Z", "author": {"login": "stianst"}, "path": "server-spi-private/src/main/java/org/keycloak/userprofile/AbstractUserProfileProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile;\n+\n+import org.keycloak.Config;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.KeycloakSessionFactory;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public abstract class AbstractUserProfileProvider implements UserProfileProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3316eeea2e1e9b1d34b003ec7ab0f873afd2108d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk3MDYyNA==", "bodyText": "It will have one since we introduce the new profile.. but sure we can leave it out till then. I will remove it.", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r457970624", "createdAt": "2020-07-21T09:42:39Z", "author": {"login": "bs-matil"}, "path": "server-spi-private/src/main/java/org/keycloak/userprofile/AbstractUserProfileProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile;\n+\n+import org.keycloak.Config;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.KeycloakSessionFactory;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public abstract class AbstractUserProfileProvider implements UserProfileProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA4NTAzOA=="}, "originalCommit": {"oid": "3316eeea2e1e9b1d34b003ec7ab0f873afd2108d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5NjMyNg==", "bodyText": "done", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r457996326", "createdAt": "2020-07-21T10:28:22Z", "author": {"login": "bs-matil"}, "path": "server-spi-private/src/main/java/org/keycloak/userprofile/AbstractUserProfileProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile;\n+\n+import org.keycloak.Config;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.KeycloakSessionFactory;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public abstract class AbstractUserProfileProvider implements UserProfileProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA4NTAzOA=="}, "originalCommit": {"oid": "3316eeea2e1e9b1d34b003ec7ab0f873afd2108d"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTk3MTgzOnYy", "diffSide": "RIGHT", "path": "server-spi-private/src/main/java/org/keycloak/userprofile/UserProfileProvider.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjoxOTowNVrOGz6eAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDo0Mjo0MVrOG2yFZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA4ODUxMg==", "bodyText": "UserProfileProvider should not handle updates I think", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r457088512", "createdAt": "2020-07-20T06:19:05Z", "author": {"login": "stianst"}, "path": "server-spi-private/src/main/java/org/keycloak/userprofile/UserProfileProvider.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile;\n+\n+import org.keycloak.userprofile.util.UpdateUserProfileContext;\n+import org.keycloak.userprofile.validation.UserProfileValidationResult;\n+import org.keycloak.provider.Provider;\n+import org.keycloak.provider.ProviderFactory;\n+import org.keycloak.representations.idm.UserAttributesRepresentation;\n+import org.keycloak.userprofile.validation.ValidationScenario;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public interface UserProfileProvider extends Provider, ProviderFactory<UserProfileProvider> {\n+\n+    UserProfileValidationResult validate(UserAttributesRepresentation rep, UpdateUserProfileContext user, ValidationScenario validationScenario);\n+\n+    void update(UserAttributesRepresentation rep, UpdateUserProfileContext user, ValidationScenario validationScenario);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3316eeea2e1e9b1d34b003ec7ab0f873afd2108d"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk2OTczNA==", "bodyText": "Would you prefer a UserUpdateProvider instead?\nTo me, it was important to have a unique entry point for updating users as the old behavior was very error-prone (and yes I found \"relevant\" errors in the different code paths which are gone now).\nI would prefer a single stable update method. Rather in this provider or its own one. This also would enable profile implementations to execute actions \"on save\" e.g. external replication or data source checks. But may I'm wrong here.", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r457969734", "createdAt": "2020-07-21T09:41:08Z", "author": {"login": "bs-matil"}, "path": "server-spi-private/src/main/java/org/keycloak/userprofile/UserProfileProvider.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile;\n+\n+import org.keycloak.userprofile.util.UpdateUserProfileContext;\n+import org.keycloak.userprofile.validation.UserProfileValidationResult;\n+import org.keycloak.provider.Provider;\n+import org.keycloak.provider.ProviderFactory;\n+import org.keycloak.representations.idm.UserAttributesRepresentation;\n+import org.keycloak.userprofile.validation.ValidationScenario;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public interface UserProfileProvider extends Provider, ProviderFactory<UserProfileProvider> {\n+\n+    UserProfileValidationResult validate(UserAttributesRepresentation rep, UpdateUserProfileContext user, ValidationScenario validationScenario);\n+\n+    void update(UserAttributesRepresentation rep, UpdateUserProfileContext user, ValidationScenario validationScenario);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA4ODUxMg=="}, "originalCommit": {"oid": "3316eeea2e1e9b1d34b003ec7ab0f873afd2108d"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5Njg2OQ==", "bodyText": "I agree it would be nice to have a single place that deals with updating users, we probably don't need an SPI for it. As simple way for now could be to just add a UserUpdateHelper or something, that can be refactored later as we are planning to clean up the stores quite a bit, especially around this sort of stuff. @hmlnarik wdyt?", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r460096869", "createdAt": "2020-07-24T14:42:41Z", "author": {"login": "stianst"}, "path": "server-spi-private/src/main/java/org/keycloak/userprofile/UserProfileProvider.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile;\n+\n+import org.keycloak.userprofile.util.UpdateUserProfileContext;\n+import org.keycloak.userprofile.validation.UserProfileValidationResult;\n+import org.keycloak.provider.Provider;\n+import org.keycloak.provider.ProviderFactory;\n+import org.keycloak.representations.idm.UserAttributesRepresentation;\n+import org.keycloak.userprofile.validation.ValidationScenario;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public interface UserProfileProvider extends Provider, ProviderFactory<UserProfileProvider> {\n+\n+    UserProfileValidationResult validate(UserAttributesRepresentation rep, UpdateUserProfileContext user, ValidationScenario validationScenario);\n+\n+    void update(UserAttributesRepresentation rep, UpdateUserProfileContext user, ValidationScenario validationScenario);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA4ODUxMg=="}, "originalCommit": {"oid": "3316eeea2e1e9b1d34b003ec7ab0f873afd2108d"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTk5OTY3OnYy", "diffSide": "RIGHT", "path": "server-spi-private/src/main/java/org/keycloak/userprofile/UserProfileProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjoyNjoyOFrOGz6s1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNToxMzoxMVrOG08z0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5MjMxMQ==", "bodyText": "Representation classes are used by Keycloak for REST endpoints, not for internal APIs. I also don't understand what the difference is between rep and user. Why are there two classes for the user profile values?\nFor ValidationScenario I had to actually search for usage to figure out what the difference values meant as they where not quite clear to me. So I think there's some improvements that can be made there.\nFor the validate method I had something like the following in mind:\nUserProfileValidationResult validate(UserUpdateContext context)\n\ninterface UserUpdateContext:\n\nboolean isCreate();\nUserUpdateEvent getEvent()\nUserProfile getCurrent() // Returns null if create\nUserProfile getUpdated()\n\nenum UserUpdateEvent:\n\nADMIN, ACCOUNT, REQUIRED_ACTION, IDP\n\ninterface UserProfile:\n\nString getId();\nString getName;\ngetAttributes, etc.\n\nUserProfile is an interface so that a wrapper can be made for the different cases when a user profile is updated, without having to copy all values into the new class.\nclass UserProfileValidationResult\n\nboolean isValid();\nMap<String, Set<String>> getErrors();\n\nUserProfileValidationResult holds some sort of map with a string of error messages for keys.", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r457092311", "createdAt": "2020-07-20T06:26:28Z", "author": {"login": "stianst"}, "path": "server-spi-private/src/main/java/org/keycloak/userprofile/UserProfileProvider.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile;\n+\n+import org.keycloak.userprofile.util.UpdateUserProfileContext;\n+import org.keycloak.userprofile.validation.UserProfileValidationResult;\n+import org.keycloak.provider.Provider;\n+import org.keycloak.provider.ProviderFactory;\n+import org.keycloak.representations.idm.UserAttributesRepresentation;\n+import org.keycloak.userprofile.validation.ValidationScenario;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public interface UserProfileProvider extends Provider, ProviderFactory<UserProfileProvider> {\n+\n+    UserProfileValidationResult validate(UserAttributesRepresentation rep, UpdateUserProfileContext user, ValidationScenario validationScenario);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3316eeea2e1e9b1d34b003ec7ab0f873afd2108d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk3NTI4Mw==", "bodyText": "I will do a refactoring of this solution.", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r457975283", "createdAt": "2020-07-21T09:50:53Z", "author": {"login": "bs-matil"}, "path": "server-spi-private/src/main/java/org/keycloak/userprofile/UserProfileProvider.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile;\n+\n+import org.keycloak.userprofile.util.UpdateUserProfileContext;\n+import org.keycloak.userprofile.validation.UserProfileValidationResult;\n+import org.keycloak.provider.Provider;\n+import org.keycloak.provider.ProviderFactory;\n+import org.keycloak.representations.idm.UserAttributesRepresentation;\n+import org.keycloak.userprofile.validation.ValidationScenario;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public interface UserProfileProvider extends Provider, ProviderFactory<UserProfileProvider> {\n+\n+    UserProfileValidationResult validate(UserAttributesRepresentation rep, UpdateUserProfileContext user, ValidationScenario validationScenario);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5MjMxMQ=="}, "originalCommit": {"oid": "3316eeea2e1e9b1d34b003ec7ab0f873afd2108d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE3NTQ0MQ==", "bodyText": "@stianst please have a look if the current interface is more as expected.", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r458175441", "createdAt": "2020-07-21T15:13:11Z", "author": {"login": "bs-matil"}, "path": "server-spi-private/src/main/java/org/keycloak/userprofile/UserProfileProvider.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile;\n+\n+import org.keycloak.userprofile.util.UpdateUserProfileContext;\n+import org.keycloak.userprofile.validation.UserProfileValidationResult;\n+import org.keycloak.provider.Provider;\n+import org.keycloak.provider.ProviderFactory;\n+import org.keycloak.representations.idm.UserAttributesRepresentation;\n+import org.keycloak.userprofile.validation.ValidationScenario;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public interface UserProfileProvider extends Provider, ProviderFactory<UserProfileProvider> {\n+\n+    UserProfileValidationResult validate(UserAttributesRepresentation rep, UpdateUserProfileContext user, ValidationScenario validationScenario);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5MjMxMQ=="}, "originalCommit": {"oid": "3316eeea2e1e9b1d34b003ec7ab0f873afd2108d"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjAyNDgwOnYy", "diffSide": "RIGHT", "path": "server-spi-private/src/main/java/org/keycloak/userprofile/validation/UserProfileValidationResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjozMjo0MFrOGz66iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOTozNDowM1rOG0wAXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5NTgxNg==", "bodyText": "I would expect validate to return only errors, not success. Hence it should just be a list of attributes that has not passed validation, and the error messages for them.", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r457095816", "createdAt": "2020-07-20T06:32:40Z", "author": {"login": "stianst"}, "path": "server-spi-private/src/main/java/org/keycloak/userprofile/validation/UserProfileValidationResult.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile.validation;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public class UserProfileValidationResult {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3316eeea2e1e9b1d34b003ec7ab0f873afd2108d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk2NTY2MA==", "bodyText": "validate also returns state changes e.g. an attribute has been changed. This is needed for decision making later on. Alternatively, we would have validation results and change results grouped in a general result class.", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r457965660", "createdAt": "2020-07-21T09:34:03Z", "author": {"login": "bs-matil"}, "path": "server-spi-private/src/main/java/org/keycloak/userprofile/validation/UserProfileValidationResult.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile.validation;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public class UserProfileValidationResult {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5NTgxNg=="}, "originalCommit": {"oid": "3316eeea2e1e9b1d34b003ec7ab0f873afd2108d"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjAyOTY5OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/userprofile/validation/Validator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjozNDowOFrOGz69XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOTozMjozOVrOG0v9RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5NjU0MQ==", "bodyText": "Validator should probably be a Provider, otherwise it won't be possible to add custom validators, or discover validators when configuring a user profile.", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r457096541", "createdAt": "2020-07-20T06:34:08Z", "author": {"login": "stianst"}, "path": "services/src/main/java/org/keycloak/userprofile/validation/Validator.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile.validation;\n+\n+import org.keycloak.userprofile.util.UpdateUserProfileContext;\n+\n+import java.util.function.BiFunction;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public class Validator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3316eeea2e1e9b1d34b003ec7ab0f873afd2108d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk2NDg2OQ==", "bodyText": "Yes indeed. We have this locally for the \"new\" profile. We wouldn't introduce it with this PR to minimize the changes.", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r457964869", "createdAt": "2020-07-21T09:32:39Z", "author": {"login": "bs-matil"}, "path": "services/src/main/java/org/keycloak/userprofile/validation/Validator.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile.validation;\n+\n+import org.keycloak.userprofile.util.UpdateUserProfileContext;\n+\n+import java.util.function.BiFunction;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public class Validator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5NjU0MQ=="}, "originalCommit": {"oid": "3316eeea2e1e9b1d34b003ec7ab0f873afd2108d"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NzEyMTk2OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/authentication/forms/RegistrationProfile.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjowNToxNVrOG0pX8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDowNjoxM1rOG0xIFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1NzAwOQ==", "bodyText": "I think looking for specific error messages like this is too brittle, perhaps it would be better to have a UserProfileValidationException with sub-classes like EmailInUseException instead here?", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r457857009", "createdAt": "2020-07-21T06:05:15Z", "author": {"login": "stianst"}, "path": "services/src/main/java/org/keycloak/authentication/forms/RegistrationProfile.java", "diffHunk": "@@ -57,41 +63,25 @@ public String getHelpText() {\n     }\n \n     @Override\n-    public void validate(ValidationContext context) {\n+    public void validate(org.keycloak.authentication.ValidationContext context) {\n         MultivaluedMap<String, String> formData = context.getHttpRequest().getDecodedFormParameters();\n-        List<FormMessage> errors = new ArrayList<>();\n+        UserAttributesRepresentation rep = AttributeFormDataProcessor.toAttributesRepresentation(formData);\n \n-        context.getEvent().detail(Details.REGISTER_METHOD, \"form\");\n-        String eventError = Errors.INVALID_REGISTRATION;\n-\n-        if (Validation.isBlank(formData.getFirst((RegistrationPage.FIELD_FIRST_NAME)))) {\n-            errors.add(new FormMessage(RegistrationPage.FIELD_FIRST_NAME, Messages.MISSING_FIRST_NAME));\n-        }\n-\n-        if (Validation.isBlank(formData.getFirst((RegistrationPage.FIELD_LAST_NAME)))) {\n-            errors.add(new FormMessage(RegistrationPage.FIELD_LAST_NAME, Messages.MISSING_LAST_NAME));\n-        }\n+        UserProfileProvider userProfile = context.getSession().getProvider(UserProfileProvider.class, LegacyUserProfileProvider.PROVIDER_ID);\n \n-        String email = formData.getFirst(Validation.FIELD_EMAIL);\n-        boolean emailValid = true;\n-        if (Validation.isBlank(email)) {\n-            errors.add(new FormMessage(RegistrationPage.FIELD_EMAIL, Messages.MISSING_EMAIL));\n-            emailValid = false;\n-        } else if (!Validation.isEmailValid(email)) {\n-            context.getEvent().detail(Details.EMAIL, email);\n-            errors.add(new FormMessage(RegistrationPage.FIELD_EMAIL, Messages.INVALID_EMAIL));\n-            emailValid = false;\n-        }\n-\n-        if (emailValid && !context.getRealm().isDuplicateEmailsAllowed() && context.getSession().users().getUserByEmail(email, context.getRealm()) != null) {\n-            eventError = Errors.EMAIL_IN_USE;\n-            formData.remove(Validation.FIELD_EMAIL);\n-            context.getEvent().detail(Details.EMAIL, email);\n-            errors.add(new FormMessage(RegistrationPage.FIELD_EMAIL, Messages.EMAIL_EXISTS));\n-        }\n+        context.getEvent().detail(Details.REGISTER_METHOD, \"form\");\n+        UserProfileValidationResult result = userProfile.validate(rep, null, ValidationScenario.RegistrationProfile);\n+        List<FormMessage> errors = Validation.getFormErrorsFromValidation(result);\n \n         if (errors.size() > 0) {\n-            context.error(eventError);\n+            if (result.hasFailureOfErrorType(Messages.EMAIL_EXISTS, Messages.INVALID_EMAIL))\n+                context.getEvent().detail(Details.EMAIL, rep.firstAttribute(UserModel.EMAIL));\n+\n+            if (result.hasFailureOfErrorType(Messages.EMAIL_EXISTS)) {\n+                context.error(Errors.EMAIL_IN_USE);\n+                formData.remove(\"email\");\n+            } else", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3316eeea2e1e9b1d34b003ec7ab0f873afd2108d"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk4NDAyMA==", "bodyText": "I would count that into the category of improvements we could do also later as the given behavior is quite near to what was there before. But I can also put it in this PR.", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r457984020", "createdAt": "2020-07-21T10:06:13Z", "author": {"login": "bs-matil"}, "path": "services/src/main/java/org/keycloak/authentication/forms/RegistrationProfile.java", "diffHunk": "@@ -57,41 +63,25 @@ public String getHelpText() {\n     }\n \n     @Override\n-    public void validate(ValidationContext context) {\n+    public void validate(org.keycloak.authentication.ValidationContext context) {\n         MultivaluedMap<String, String> formData = context.getHttpRequest().getDecodedFormParameters();\n-        List<FormMessage> errors = new ArrayList<>();\n+        UserAttributesRepresentation rep = AttributeFormDataProcessor.toAttributesRepresentation(formData);\n \n-        context.getEvent().detail(Details.REGISTER_METHOD, \"form\");\n-        String eventError = Errors.INVALID_REGISTRATION;\n-\n-        if (Validation.isBlank(formData.getFirst((RegistrationPage.FIELD_FIRST_NAME)))) {\n-            errors.add(new FormMessage(RegistrationPage.FIELD_FIRST_NAME, Messages.MISSING_FIRST_NAME));\n-        }\n-\n-        if (Validation.isBlank(formData.getFirst((RegistrationPage.FIELD_LAST_NAME)))) {\n-            errors.add(new FormMessage(RegistrationPage.FIELD_LAST_NAME, Messages.MISSING_LAST_NAME));\n-        }\n+        UserProfileProvider userProfile = context.getSession().getProvider(UserProfileProvider.class, LegacyUserProfileProvider.PROVIDER_ID);\n \n-        String email = formData.getFirst(Validation.FIELD_EMAIL);\n-        boolean emailValid = true;\n-        if (Validation.isBlank(email)) {\n-            errors.add(new FormMessage(RegistrationPage.FIELD_EMAIL, Messages.MISSING_EMAIL));\n-            emailValid = false;\n-        } else if (!Validation.isEmailValid(email)) {\n-            context.getEvent().detail(Details.EMAIL, email);\n-            errors.add(new FormMessage(RegistrationPage.FIELD_EMAIL, Messages.INVALID_EMAIL));\n-            emailValid = false;\n-        }\n-\n-        if (emailValid && !context.getRealm().isDuplicateEmailsAllowed() && context.getSession().users().getUserByEmail(email, context.getRealm()) != null) {\n-            eventError = Errors.EMAIL_IN_USE;\n-            formData.remove(Validation.FIELD_EMAIL);\n-            context.getEvent().detail(Details.EMAIL, email);\n-            errors.add(new FormMessage(RegistrationPage.FIELD_EMAIL, Messages.EMAIL_EXISTS));\n-        }\n+        context.getEvent().detail(Details.REGISTER_METHOD, \"form\");\n+        UserProfileValidationResult result = userProfile.validate(rep, null, ValidationScenario.RegistrationProfile);\n+        List<FormMessage> errors = Validation.getFormErrorsFromValidation(result);\n \n         if (errors.size() > 0) {\n-            context.error(eventError);\n+            if (result.hasFailureOfErrorType(Messages.EMAIL_EXISTS, Messages.INVALID_EMAIL))\n+                context.getEvent().detail(Details.EMAIL, rep.firstAttribute(UserModel.EMAIL));\n+\n+            if (result.hasFailureOfErrorType(Messages.EMAIL_EXISTS)) {\n+                context.error(Errors.EMAIL_IN_USE);\n+                formData.remove(\"email\");\n+            } else", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1NzAwOQ=="}, "originalCommit": {"oid": "3316eeea2e1e9b1d34b003ec7ab0f873afd2108d"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDMxMjE2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/keycloak/representations/account/UserRepresentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjoxMzozOFrOHY617g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjoxMzozOFrOHY617g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5MTk1MA==", "bodyText": "Considering you'll never have entries with a null value in the map, you can just:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return this.attributes == null ? null : this.attributes.get(key) == null ? null : this.attributes.get(key).size() == 0 ? null : this.attributes.get(key).get(0);\n          \n          \n            \n                    return this.attributes == null ? null : this.attributes.containsKey(key) ? this.attributes.get(key).get(0) : null;", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r495891950", "createdAt": "2020-09-28T12:13:38Z", "author": {"login": "pedroigor"}, "path": "core/src/main/java/org/keycloak/representations/account/UserRepresentation.java", "diffHunk": "@@ -94,4 +97,13 @@ public void setAttributes(Map<String, List<String>> attributes) {\n         this.attributes = attributes;\n     }\n \n+    public void singleAttribute(String name, String value) {\n+        if (this.attributes == null) attributes = new HashMap<>();\n+        attributes.put(name, (value == null ? new ArrayList<String>() : Arrays.asList(value)));\n+    }\n+\n+    public String firstAttribute(String key) {\n+        return this.attributes == null ? null : this.attributes.get(key) == null ? null : this.attributes.get(key).size() == 0 ? null : this.attributes.get(key).get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54aeab7c262c361ed1ad6794307f513b1ea0cc8f"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDMyMDM1OnYy", "diffSide": "LEFT", "path": "core/src/main/java/org/keycloak/representations/idm/UserRepresentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjoxNTo0N1rOHY66nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjoxNTo0N1rOHY66nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5MzE0OQ==", "bodyText": "I understand the reason, but if this is not critical to your PR. Could you revert this change?", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r495893149", "createdAt": "2020-09-28T12:15:47Z", "author": {"login": "pedroigor"}, "path": "core/src/main/java/org/keycloak/representations/idm/UserRepresentation.java", "diffHunk": "@@ -156,10 +156,13 @@ public void setAttributes(Map<String, List<String>> attributes) {\n         this.attributes = attributes;\n     }\n \n-    public UserRepresentation singleAttribute(String name, String value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54aeab7c262c361ed1ad6794307f513b1ea0cc8f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDMyODA0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/keycloak/representations/idm/UserRepresentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjoxNzo1N1rOHY6-9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjoxNzo1N1rOHY6-9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5NDI2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return this.attributes == null ? null : this.attributes.get(key) == null ? null : this.attributes.get(key).size() == 0 ? null : this.attributes.get(key).get(0);\n          \n          \n            \n                    return this.attributes == null ? null : this.attributes.get(key) == null ? null : this.attributes.get(key).isEmpty() ? null : this.attributes.get(key).get(0);", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r495894262", "createdAt": "2020-09-28T12:17:57Z", "author": {"login": "pedroigor"}, "path": "core/src/main/java/org/keycloak/representations/idm/UserRepresentation.java", "diffHunk": "@@ -156,10 +156,13 @@ public void setAttributes(Map<String, List<String>> attributes) {\n         this.attributes = attributes;\n     }\n \n-    public UserRepresentation singleAttribute(String name, String value) {\n+    public void singleAttribute(String name, String value) {\n         if (this.attributes == null) attributes = new HashMap<>();\n         attributes.put(name, (value == null ? new ArrayList<String>() : Arrays.asList(value)));\n-        return this;\n+    }\n+\n+    public String firstAttribute(String key) {\n+        return this.attributes == null ? null : this.attributes.get(key) == null ? null : this.attributes.get(key).size() == 0 ? null : this.attributes.get(key).get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54aeab7c262c361ed1ad6794307f513b1ea0cc8f"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDMzOTIxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/keycloak/representations/account/UserRepresentation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjoyMTowM1rOHY7FhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMDoyMToyMlrOHbD-PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5NTk0MQ==", "bodyText": "I think we should not even set the attribute if the value is null or empty.\nWe can probably throw an IllegalArgumentException too in this case.", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r495895941", "createdAt": "2020-09-28T12:21:03Z", "author": {"login": "pedroigor"}, "path": "core/src/main/java/org/keycloak/representations/account/UserRepresentation.java", "diffHunk": "@@ -94,4 +97,13 @@ public void setAttributes(Map<String, List<String>> attributes) {\n         this.attributes = attributes;\n     }\n \n+    public void singleAttribute(String name, String value) {\n+        if (this.attributes == null) attributes = new HashMap<>();\n+        attributes.put(name, (value == null ? new ArrayList<String>() : Arrays.asList(value)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54aeab7c262c361ed1ad6794307f513b1ea0cc8f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEzODY4NA==", "bodyText": "the check does not check for attribute values but for the attribute list. If the list is not initialized (which is likely due to the nature of the Representation objects) this should IMHO nothing the user of this function has to deal with.", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r498138684", "createdAt": "2020-10-01T10:21:22Z", "author": {"login": "bs-matil"}, "path": "core/src/main/java/org/keycloak/representations/account/UserRepresentation.java", "diffHunk": "@@ -94,4 +97,13 @@ public void setAttributes(Map<String, List<String>> attributes) {\n         this.attributes = attributes;\n     }\n \n+    public void singleAttribute(String name, String value) {\n+        if (this.attributes == null) attributes = new HashMap<>();\n+        attributes.put(name, (value == null ? new ArrayList<String>() : Arrays.asList(value)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5NTk0MQ=="}, "originalCommit": {"oid": "54aeab7c262c361ed1ad6794307f513b1ea0cc8f"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDM1NzU2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/keycloak/representations/idm/UserRepresentation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjoyNTo1NlrOHY7QZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMDoyNTo1MVrOHbEHnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5ODcyNw==", "bodyText": "The same here:\n\nDo not accept null values by either not updating the map or throwing an IllegalArgumentException.", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r495898727", "createdAt": "2020-09-28T12:25:56Z", "author": {"login": "pedroigor"}, "path": "core/src/main/java/org/keycloak/representations/idm/UserRepresentation.java", "diffHunk": "@@ -156,10 +156,13 @@ public void setAttributes(Map<String, List<String>> attributes) {\n         this.attributes = attributes;\n     }\n \n-    public UserRepresentation singleAttribute(String name, String value) {\n+    public void singleAttribute(String name, String value) {\n         if (this.attributes == null) attributes = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54aeab7c262c361ed1ad6794307f513b1ea0cc8f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE0MTA4NA==", "bodyText": "same here its not a value check", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r498141084", "createdAt": "2020-10-01T10:25:51Z", "author": {"login": "bs-matil"}, "path": "core/src/main/java/org/keycloak/representations/idm/UserRepresentation.java", "diffHunk": "@@ -156,10 +156,13 @@ public void setAttributes(Map<String, List<String>> attributes) {\n         this.attributes = attributes;\n     }\n \n-    public UserRepresentation singleAttribute(String name, String value) {\n+    public void singleAttribute(String name, String value) {\n         if (this.attributes == null) attributes = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5ODcyNw=="}, "originalCommit": {"oid": "54aeab7c262c361ed1ad6794307f513b1ea0cc8f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDM2MTI3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/keycloak/representations/idm/UserRepresentation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjoyNjo1OFrOHY7SoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjoyNjo1OFrOHY7SoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5OTI5Ng==", "bodyText": "The same here:\n\nConsidering we are not going to accept null or empty values, don't need to perform some of these checks.", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r495899296", "createdAt": "2020-09-28T12:26:58Z", "author": {"login": "pedroigor"}, "path": "core/src/main/java/org/keycloak/representations/idm/UserRepresentation.java", "diffHunk": "@@ -156,10 +156,13 @@ public void setAttributes(Map<String, List<String>> attributes) {\n         this.attributes = attributes;\n     }\n \n-    public UserRepresentation singleAttribute(String name, String value) {\n+    public void singleAttribute(String name, String value) {\n         if (this.attributes == null) attributes = new HashMap<>();\n         attributes.put(name, (value == null ? new ArrayList<String>() : Arrays.asList(value)));\n-        return this;\n+    }\n+\n+    public String firstAttribute(String key) {\n+        return this.attributes == null ? null : this.attributes.get(key) == null ? null : this.attributes.get(key).size() == 0 ? null : this.attributes.get(key).get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54aeab7c262c361ed1ad6794307f513b1ea0cc8f"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDM3NDgwOnYy", "diffSide": "RIGHT", "path": "server-spi-private/src/main/java/org/keycloak/userprofile/validation/AttributeValidationResult.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjozMDo0N1rOHY7a2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjozMDo0N1rOHY7a2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkwMTQwMQ==", "bodyText": "Nitpick. Please move this field declaration to the beginning close to others.", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r495901401", "createdAt": "2020-09-28T12:30:47Z", "author": {"login": "pedroigor"}, "path": "server-spi-private/src/main/java/org/keycloak/userprofile/validation/AttributeValidationResult.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile.validation;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public class AttributeValidationResult {\n+\n+    private final String attributeKey;\n+    private final boolean changed;\n+\n+    public List<ValidationResult> getValidationResults() {\n+        return validationResults;\n+    }\n+\n+    public List<ValidationResult> getFailedValidations() {\n+        return validationResults == null ? null : validationResults.stream().filter(o -> !o.isValid()).collect(Collectors.toList());\n+    }\n+\n+    List<ValidationResult> validationResults;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54aeab7c262c361ed1ad6794307f513b1ea0cc8f"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDM4ODkxOnYy", "diffSide": "RIGHT", "path": "server-spi-private/src/main/java/org/keycloak/userprofile/validation/AttributeValidationResult.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjozNDozNVrOHY7jLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjozNDozNVrOHY7jLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkwMzUzMg==", "bodyText": "Nitpick. Use method reference when possible.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return validationResults == null ? null : validationResults.stream().filter(o -> !o.isValid()).collect(Collectors.toList());\n          \n          \n            \n                    return validationResults == null ? null : validationResults.stream().filter(ValidationResult::isValid).collect(Collectors.toList());", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r495903532", "createdAt": "2020-09-28T12:34:35Z", "author": {"login": "pedroigor"}, "path": "server-spi-private/src/main/java/org/keycloak/userprofile/validation/AttributeValidationResult.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile.validation;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public class AttributeValidationResult {\n+\n+    private final String attributeKey;\n+    private final boolean changed;\n+\n+    public List<ValidationResult> getValidationResults() {\n+        return validationResults;\n+    }\n+\n+    public List<ValidationResult> getFailedValidations() {\n+        return validationResults == null ? null : validationResults.stream().filter(o -> !o.isValid()).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54aeab7c262c361ed1ad6794307f513b1ea0cc8f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTgwOTg3OnYy", "diffSide": "RIGHT", "path": "server-spi-private/src/main/java/org/keycloak/userprofile/UserProfile.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNzo0MToxMlrOHZJB_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo1NzoyM1rOHbJHNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEyNDQxNA==", "bodyText": "Maybe we can make life easier for implementors if we change some methods like that:\n    default String getFirstAttributeValue(String attributeKey) {\n        List<String> values = getAttributes().getOrDefault(name, Collections.emptyList());\n        \n        if (values.isEmpty()) {\n            return null;\n        }\n        \n        return values.get(0);\n    }\n\n    default List<String> getAttribute(String attributeKey) {\n        return getAttributes().get(key);\n    }\n\nSo that you only need to override getId and getAttributes. The latter being the real source of data.\nI'm also wondering if we should not have attributes in a separate structure similar to Attributes. One of the main points being that we can add more controls such as read/write flags without impacting the main UserProfile API.", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r496124414", "createdAt": "2020-09-28T17:41:12Z", "author": {"login": "pedroigor"}, "path": "server-spi-private/src/main/java/org/keycloak/userprofile/UserProfile.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Abstraction, which allows to update the user in various contexts (Required action of already existing user, or first identity provider\n+ * login when user doesn't yet exists in Keycloak DB)\n+ *\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public interface UserProfile {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b53b2657af25600d24a4f7cbbe9e9ccf34f30f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyMjkwMg==", "bodyText": "As I tried to explain in the other comment regards the interface of the userprofile. The current UserProfile interface is actually just an attributes interfaces (may a bad one) but I'm right now not sure how to go towards your solution.  I will push what I understood soon..", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r498222902", "createdAt": "2020-10-01T12:57:23Z", "author": {"login": "bs-matil"}, "path": "server-spi-private/src/main/java/org/keycloak/userprofile/UserProfile.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Abstraction, which allows to update the user in various contexts (Required action of already existing user, or first identity provider\n+ * login when user doesn't yet exists in Keycloak DB)\n+ *\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public interface UserProfile {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEyNDQxNA=="}, "originalCommit": {"oid": "c9b53b2657af25600d24a4f7cbbe9e9ccf34f30f"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTg5NTcyOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/authentication/authenticators/broker/IdpReviewProfileAuthenticator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODowNDo1NFrOHZJ28A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMzowMDo1NFrOHbJQZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEzNzk2OA==", "bodyText": "I think UserProfileUpdateHelper can be simpler if we just pass the attribute map instead of the UserModel. It would avoid having to create this anonymous class to work around the contract to only fetch attributes.\nI'm also wondering why the logic on UserProfileUpdateHelper is not on the UserProfileProvider itself?", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r496137968", "createdAt": "2020-09-28T18:04:54Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authentication/authenticators/broker/IdpReviewProfileAuthenticator.java", "diffHunk": "@@ -110,28 +127,37 @@ protected void actionImpl(AuthenticationFlowContext context, SerializedBrokeredI\n             return;\n         }\n \n-        String username = realm.isRegistrationEmailAsUsername() ? formData.getFirst(UserModel.EMAIL) : formData.getFirst(UserModel.USERNAME);\n-        userCtx.setUsername(username);\n-        userCtx.setFirstName(formData.getFirst(UserModel.FIRST_NAME));\n-        userCtx.setLastName(formData.getFirst(UserModel.LAST_NAME));\n+        UserProfileUpdateHelper.update(UserUpdateEvent.IdpReview, context.getSession(), new UserModelDelegate(null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b53b2657af25600d24a4f7cbbe9e9ccf34f30f"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyNDYwNw==", "bodyText": "Regards the position of user profile itself see other comment.\nRegards the AttributeList.\nThis won't work because of the nature of the different UserModel implementations (e,g, for idpReview). Some just are not useable as simple attribute list. (Their interface for the attributes does not work consistently)", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r498224607", "createdAt": "2020-10-01T12:59:56Z", "author": {"login": "bs-matil"}, "path": "services/src/main/java/org/keycloak/authentication/authenticators/broker/IdpReviewProfileAuthenticator.java", "diffHunk": "@@ -110,28 +127,37 @@ protected void actionImpl(AuthenticationFlowContext context, SerializedBrokeredI\n             return;\n         }\n \n-        String username = realm.isRegistrationEmailAsUsername() ? formData.getFirst(UserModel.EMAIL) : formData.getFirst(UserModel.USERNAME);\n-        userCtx.setUsername(username);\n-        userCtx.setFirstName(formData.getFirst(UserModel.FIRST_NAME));\n-        userCtx.setLastName(formData.getFirst(UserModel.LAST_NAME));\n+        UserProfileUpdateHelper.update(UserUpdateEvent.IdpReview, context.getSession(), new UserModelDelegate(null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEzNzk2OA=="}, "originalCommit": {"oid": "c9b53b2657af25600d24a4f7cbbe9e9ccf34f30f"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyNTI1Mw==", "bodyText": "The differences are reflected in the different user profile implementations", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r498225253", "createdAt": "2020-10-01T13:00:54Z", "author": {"login": "bs-matil"}, "path": "services/src/main/java/org/keycloak/authentication/authenticators/broker/IdpReviewProfileAuthenticator.java", "diffHunk": "@@ -110,28 +127,37 @@ protected void actionImpl(AuthenticationFlowContext context, SerializedBrokeredI\n             return;\n         }\n \n-        String username = realm.isRegistrationEmailAsUsername() ? formData.getFirst(UserModel.EMAIL) : formData.getFirst(UserModel.USERNAME);\n-        userCtx.setUsername(username);\n-        userCtx.setFirstName(formData.getFirst(UserModel.FIRST_NAME));\n-        userCtx.setLastName(formData.getFirst(UserModel.LAST_NAME));\n+        UserProfileUpdateHelper.update(UserUpdateEvent.IdpReview, context.getSession(), new UserModelDelegate(null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEzNzk2OA=="}, "originalCommit": {"oid": "c9b53b2657af25600d24a4f7cbbe9e9ccf34f30f"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTk3MDg1OnYy", "diffSide": "RIGHT", "path": "server-spi-private/src/main/java/org/keycloak/userprofile/UserProfileProviderFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODoyNjo1NVrOHZKlMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMTo1MjozOFrOHbb9Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE0OTgxMA==", "bodyText": "I think we could have some methods here to create the UserProfileProvider instance without pushing too much to clients of the API. For instance:\nMap<String, List<String>> newAttributes = // obtain attributes to update\nUserProfileProviderFactory factory = // obtain factory from session\nUserProfileProvider provider = factory.create(UserUpdateEvent.IdpReview, user.getAttributes(), newAttributes);\nUserProfileValidationResult result = profileProvider.validate();\n\nThis can hide some implementation details such as the UserProfileContext implementation that should be used. As well as the different UserProfile implementations (if we really need all those impls). In fact, another approach to the API could be:\nMap<String, List<String>> newAttributes = // obtain attributes to update\nUserProfileProvider provider = // obtain provider from factory\nUserProfileValidationResult result = profileProvider.validate(UserProfile.forIdpReview(userCtx), newAttributes);\n\nSo that the event would become irrelevant and we could check for the context based on the type of the UserProfile instance.\nIn addition to that, the user ID also works like any other attribute into the attribute map that is the real source of data and data structure we care about to perform the validations.\nThe Attributes API I gave as an example could also help to make this SPI more attribute oriented and simplify even more how clients pass over the attributes from the different places in Keycloak as well as using different sources.\nI've also another idea for this SPI based on events. But I think it would demand changes that we probably don't want now to include a more generic and robust event system in Keycloak.", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r496149810", "createdAt": "2020-09-28T18:26:55Z", "author": {"login": "pedroigor"}, "path": "server-spi-private/src/main/java/org/keycloak/userprofile/UserProfileProviderFactory.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile;\n+\n+import org.keycloak.provider.ProviderFactory;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public interface UserProfileProviderFactory extends  ProviderFactory<UserProfileProvider> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b53b2657af25600d24a4f7cbbe9e9ccf34f30f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzMTY0Nw==", "bodyText": "@pedroigor  I tried to go into this direction. It's not possible to do this on the SPI level as the interfaces would have to know the concrete types in the service impl. So I moved the factory like methods into the DefaultUserProfileContext", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r498531647", "createdAt": "2020-10-01T21:52:38Z", "author": {"login": "bs-matil"}, "path": "server-spi-private/src/main/java/org/keycloak/userprofile/UserProfileProviderFactory.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile;\n+\n+import org.keycloak.provider.ProviderFactory;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public interface UserProfileProviderFactory extends  ProviderFactory<UserProfileProvider> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE0OTgxMA=="}, "originalCommit": {"oid": "c9b53b2657af25600d24a4f7cbbe9e9ccf34f30f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjAxNTM3OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/userprofile/utils/StoredUserProfile.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODo0MDowNVrOHZLA9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo1Mzo0MVrOHbI9hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE1NjkxNw==", "bodyText": "I understand the reason behind it I think. So that a UserProfile is marked as writable.\nAfter reading through your code, looks like to me that the best would be if we had a single UserProfile implementation, with attributes encapsulated via a Attributes API so that the read/write capability could be controlled accordingly depending on the type of the event.", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r496156917", "createdAt": "2020-09-28T18:40:05Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/userprofile/utils/StoredUserProfile.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile.utils;\n+\n+import org.keycloak.userprofile.UserProfile;\n+\n+import java.util.List;\n+\n+/**\n+ * Abstraction, which allows to update the user in various contexts (Required action of already existing user, or first identity provider\n+ * login when user doesn't yet exists in Keycloak DB)\n+ *\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public interface StoredUserProfile extends UserProfile {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b53b2657af25600d24a4f7cbbe9e9ccf34f30f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyMDQyMw==", "bodyText": "I'm a bit confused to be honest. the current UserProfile interface is actually very close to an Attributes interface. So to move towards your solution I would rename UserProfile to UserAttributes and merge the StoredUserProfile methods into this interface. Then on all implementations I would add the write methods and throw Exceptions when they are called.\nIs this even close to your idea? I will do so. But may I got you fully wrong here, I at least suspect that.", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r498220423", "createdAt": "2020-10-01T12:53:41Z", "author": {"login": "bs-matil"}, "path": "services/src/main/java/org/keycloak/userprofile/utils/StoredUserProfile.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile.utils;\n+\n+import org.keycloak.userprofile.UserProfile;\n+\n+import java.util.List;\n+\n+/**\n+ * Abstraction, which allows to update the user in various contexts (Required action of already existing user, or first identity provider\n+ * login when user doesn't yet exists in Keycloak DB)\n+ *\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public interface StoredUserProfile extends UserProfile {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE1NjkxNw=="}, "originalCommit": {"oid": "c9b53b2657af25600d24a4f7cbbe9e9ccf34f30f"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjAyMDc1OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/userprofile/utils/UserProfileUpdateHelper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODo0MTozN1rOHZLEUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo0NzoxMVrOHbIttw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE1Nzc3OQ==", "bodyText": "Why create an attribute with a list of null values ?", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r496157779", "createdAt": "2020-09-28T18:41:37Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/userprofile/utils/UserProfileUpdateHelper.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile.utils;\n+\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserModel;\n+import org.keycloak.models.utils.KeycloakModelUtils;\n+import org.keycloak.userprofile.validation.UserUpdateEvent;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public class UserProfileUpdateHelper {\n+\n+    public static void update(UserUpdateEvent userUpdateEvent, KeycloakSession session, UserModel currentUser, StoredUserProfile updatedUser) {\n+        update(userUpdateEvent, session, currentUser, updatedUser, true);\n+    }\n+\n+\n+    public static void update(UserUpdateEvent userUpdateEvent, KeycloakSession session, UserModel currentUser, StoredUserProfile updatedUser, boolean removeMissingAttributes) {\n+        RealmModel realm = session.getContext().getRealm();\n+\n+        if (updatedUser.getAttributes() == null || updatedUser.getAttributes().size() == 0)\n+            return;\n+\n+        //The Idp review does not respect \"isEditUserNameAllowed\" therefore we have to miss the check here\n+        if (!userUpdateEvent.equals(UserUpdateEvent.IdpReview)) {\n+            //This step has to be done before email is assigned to the username if isRegistrationEmailAsUsername is set\n+            //Otherwise email change will not reflect in username changes.\n+            if (updatedUser.getFirstAttribute(UserModel.USERNAME) != null && !realm.isEditUsernameAllowed()) {\n+                updatedUser.removeAttribute(UserModel.USERNAME);\n+            }\n+        }\n+\n+        if (updatedUser.getFirstAttribute(UserModel.EMAIL) != null && updatedUser.getFirstAttribute(UserModel.EMAIL).isEmpty()) {\n+            updatedUser.removeAttribute(UserModel.EMAIL);\n+            updatedUser.setAttribute(UserModel.EMAIL, Collections.singletonList(null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b53b2657af25600d24a4f7cbbe9e9ccf34f30f"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxNDc5MQ==", "bodyText": "because for example this test expects that the handling of email is \"\" -> null while this is not the case anywhere else...\n\n  \n    \n      keycloak/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/ResetPasswordTest.java\n    \n    \n         Line 836\n      in\n      74988a3\n    \n    \n    \n    \n\n        \n          \n           public void resetPasswordNoEmail() throws IOException, MessagingException, InterruptedException {", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r498214791", "createdAt": "2020-10-01T12:44:49Z", "author": {"login": "bs-matil"}, "path": "services/src/main/java/org/keycloak/userprofile/utils/UserProfileUpdateHelper.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile.utils;\n+\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserModel;\n+import org.keycloak.models.utils.KeycloakModelUtils;\n+import org.keycloak.userprofile.validation.UserUpdateEvent;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public class UserProfileUpdateHelper {\n+\n+    public static void update(UserUpdateEvent userUpdateEvent, KeycloakSession session, UserModel currentUser, StoredUserProfile updatedUser) {\n+        update(userUpdateEvent, session, currentUser, updatedUser, true);\n+    }\n+\n+\n+    public static void update(UserUpdateEvent userUpdateEvent, KeycloakSession session, UserModel currentUser, StoredUserProfile updatedUser, boolean removeMissingAttributes) {\n+        RealmModel realm = session.getContext().getRealm();\n+\n+        if (updatedUser.getAttributes() == null || updatedUser.getAttributes().size() == 0)\n+            return;\n+\n+        //The Idp review does not respect \"isEditUserNameAllowed\" therefore we have to miss the check here\n+        if (!userUpdateEvent.equals(UserUpdateEvent.IdpReview)) {\n+            //This step has to be done before email is assigned to the username if isRegistrationEmailAsUsername is set\n+            //Otherwise email change will not reflect in username changes.\n+            if (updatedUser.getFirstAttribute(UserModel.USERNAME) != null && !realm.isEditUsernameAllowed()) {\n+                updatedUser.removeAttribute(UserModel.USERNAME);\n+            }\n+        }\n+\n+        if (updatedUser.getFirstAttribute(UserModel.EMAIL) != null && updatedUser.getFirstAttribute(UserModel.EMAIL).isEmpty()) {\n+            updatedUser.removeAttribute(UserModel.EMAIL);\n+            updatedUser.setAttribute(UserModel.EMAIL, Collections.singletonList(null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE1Nzc3OQ=="}, "originalCommit": {"oid": "c9b53b2657af25600d24a4f7cbbe9e9ccf34f30f"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxNjM3NQ==", "bodyText": "I invested time in keeping the api of the validation as consistent as possible. But there are inconsistencies in the code\nThats why I initially put the user update method into the user profile. That would have enabled to override the behaviour for the old very inconsistent code path while having a clean new store method in the future.\nBut Stian argued against this as the profile should not care about storage but validation only. So I moved the code to this helper class and out of the SPI interface.", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r498216375", "createdAt": "2020-10-01T12:47:11Z", "author": {"login": "bs-matil"}, "path": "services/src/main/java/org/keycloak/userprofile/utils/UserProfileUpdateHelper.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile.utils;\n+\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserModel;\n+import org.keycloak.models.utils.KeycloakModelUtils;\n+import org.keycloak.userprofile.validation.UserUpdateEvent;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public class UserProfileUpdateHelper {\n+\n+    public static void update(UserUpdateEvent userUpdateEvent, KeycloakSession session, UserModel currentUser, StoredUserProfile updatedUser) {\n+        update(userUpdateEvent, session, currentUser, updatedUser, true);\n+    }\n+\n+\n+    public static void update(UserUpdateEvent userUpdateEvent, KeycloakSession session, UserModel currentUser, StoredUserProfile updatedUser, boolean removeMissingAttributes) {\n+        RealmModel realm = session.getContext().getRealm();\n+\n+        if (updatedUser.getAttributes() == null || updatedUser.getAttributes().size() == 0)\n+            return;\n+\n+        //The Idp review does not respect \"isEditUserNameAllowed\" therefore we have to miss the check here\n+        if (!userUpdateEvent.equals(UserUpdateEvent.IdpReview)) {\n+            //This step has to be done before email is assigned to the username if isRegistrationEmailAsUsername is set\n+            //Otherwise email change will not reflect in username changes.\n+            if (updatedUser.getFirstAttribute(UserModel.USERNAME) != null && !realm.isEditUsernameAllowed()) {\n+                updatedUser.removeAttribute(UserModel.USERNAME);\n+            }\n+        }\n+\n+        if (updatedUser.getFirstAttribute(UserModel.EMAIL) != null && updatedUser.getFirstAttribute(UserModel.EMAIL).isEmpty()) {\n+            updatedUser.removeAttribute(UserModel.EMAIL);\n+            updatedUser.setAttribute(UserModel.EMAIL, Collections.singletonList(null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE1Nzc3OQ=="}, "originalCommit": {"oid": "c9b53b2657af25600d24a4f7cbbe9e9ccf34f30f"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODM0NjczOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/services/resources/account/AccountRestService.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDoyNToyOFrOHcfhMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxODo0MTo0N1rOHcpO4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYzODU3Nw==", "bodyText": "@bs-matil I forgot to mention this change in my last review. Why did you add this endpoint for?", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r499638577", "createdAt": "2020-10-05T14:25:28Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/services/resources/account/AccountRestService.java", "diffHunk": "@@ -275,6 +222,39 @@ public ResourcesService resources() {\n \n     // TODO Federated identities\n \n+    /**\n+     * Returns the applications with the given id in the specified realm.\n+     *\n+     * @param clientId client id to search for\n+     * @return application with the provided id\n+     */\n+    @Path(\"/applications/{clientId}\")\n+    @GET\n+    @Produces(MediaType.APPLICATION_JSON)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c85a0d5615981b37c12b3775efda99ca6576526"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc4NzY0MA==", "bodyText": "looks like accidentally. Shall I open a PR for removal?", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r499787640", "createdAt": "2020-10-05T18:22:32Z", "author": {"login": "bs-matil"}, "path": "services/src/main/java/org/keycloak/services/resources/account/AccountRestService.java", "diffHunk": "@@ -275,6 +222,39 @@ public ResourcesService resources() {\n \n     // TODO Federated identities\n \n+    /**\n+     * Returns the applications with the given id in the specified realm.\n+     *\n+     * @param clientId client id to search for\n+     * @return application with the provided id\n+     */\n+    @Path(\"/applications/{clientId}\")\n+    @GET\n+    @Produces(MediaType.APPLICATION_JSON)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYzODU3Nw=="}, "originalCommit": {"oid": "6c85a0d5615981b37c12b3775efda99ca6576526"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc5NDQ0Mw==", "bodyText": "Yes, please. Sorry about that. I added the comment but it got lost during the review ...", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r499794443", "createdAt": "2020-10-05T18:35:29Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/services/resources/account/AccountRestService.java", "diffHunk": "@@ -275,6 +222,39 @@ public ResourcesService resources() {\n \n     // TODO Federated identities\n \n+    /**\n+     * Returns the applications with the given id in the specified realm.\n+     *\n+     * @param clientId client id to search for\n+     * @return application with the provided id\n+     */\n+    @Path(\"/applications/{clientId}\")\n+    @GET\n+    @Produces(MediaType.APPLICATION_JSON)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYzODU3Nw=="}, "originalCommit": {"oid": "6c85a0d5615981b37c12b3775efda99ca6576526"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc5NTIyNg==", "bodyText": "Sorry too, I tought I will at least have one more time to squash and cleanup. Wasn't expecting a so fast merge after the history of this PR", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r499795226", "createdAt": "2020-10-05T18:37:02Z", "author": {"login": "bs-matil"}, "path": "services/src/main/java/org/keycloak/services/resources/account/AccountRestService.java", "diffHunk": "@@ -275,6 +222,39 @@ public ResourcesService resources() {\n \n     // TODO Federated identities\n \n+    /**\n+     * Returns the applications with the given id in the specified realm.\n+     *\n+     * @param clientId client id to search for\n+     * @return application with the provided id\n+     */\n+    @Path(\"/applications/{clientId}\")\n+    @GET\n+    @Produces(MediaType.APPLICATION_JSON)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYzODU3Nw=="}, "originalCommit": {"oid": "6c85a0d5615981b37c12b3775efda99ca6576526"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc5NzcyOQ==", "bodyText": "#7467\nPR for cleanup", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r499797729", "createdAt": "2020-10-05T18:41:47Z", "author": {"login": "bs-matil"}, "path": "services/src/main/java/org/keycloak/services/resources/account/AccountRestService.java", "diffHunk": "@@ -275,6 +222,39 @@ public ResourcesService resources() {\n \n     // TODO Federated identities\n \n+    /**\n+     * Returns the applications with the given id in the specified realm.\n+     *\n+     * @param clientId client id to search for\n+     * @return application with the provided id\n+     */\n+    @Path(\"/applications/{clientId}\")\n+    @GET\n+    @Produces(MediaType.APPLICATION_JSON)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYzODU3Nw=="}, "originalCommit": {"oid": "6c85a0d5615981b37c12b3775efda99ca6576526"}, "originalPosition": 152}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3558, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}