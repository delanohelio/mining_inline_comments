{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2ODg1MTc4", "number": 7673, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTozNjoyNlrOFFC2Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMDowNDowMlrOFOmZIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODMzODE4OnYy", "diffSide": "RIGHT", "path": "model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTozNjoyNlrOIFWYSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTozNjoyNlrOIFWYSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ4MDQ1OA==", "bodyText": "Please use non-abbreviated form\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new ModelException(\"User doesn't exists\");\n          \n          \n            \n                        throw new ModelException(\"User does not exists\");", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r542480458", "createdAt": "2020-12-14T15:36:26Z", "author": {"login": "hmlnarik"}, "path": "model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java", "diffHunk": "@@ -365,12 +365,18 @@ private void updateGrantedConsentEntity(UserConsentEntity consentEntity, UserCon\n     @Override\n     public void setNotBeforeForUser(RealmModel realm, UserModel user, int notBefore) {\n         UserEntity entity = em.getReference(UserEntity.class, user.getId());\n+        if (entity == null) {\n+            throw new ModelException(\"User doesn't exists\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72156b56d72ba4a3eddd7d2029e4eb65e7413d05"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODMzOTQ2OnYy", "diffSide": "RIGHT", "path": "model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTozNjozOFrOIFWZCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTozNjozOFrOIFWZCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ4MDY1MQ==", "bodyText": "same here", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r542480651", "createdAt": "2020-12-14T15:36:38Z", "author": {"login": "hmlnarik"}, "path": "model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java", "diffHunk": "@@ -365,12 +365,18 @@ private void updateGrantedConsentEntity(UserConsentEntity consentEntity, UserCon\n     @Override\n     public void setNotBeforeForUser(RealmModel realm, UserModel user, int notBefore) {\n         UserEntity entity = em.getReference(UserEntity.class, user.getId());\n+        if (entity == null) {\n+            throw new ModelException(\"User doesn't exists\");\n+        }\n         entity.setNotBefore(notBefore);\n     }\n \n     @Override\n     public int getNotBeforeOfUser(RealmModel realm, UserModel user) {\n         UserEntity entity = em.getReference(UserEntity.class, user.getId());\n+        if (entity == null) {\n+            throw new ModelException(\"User doesn't exists\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72156b56d72ba4a3eddd7d2029e4eb65e7413d05"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NTk3NDA4OnYy", "diffSide": "RIGHT", "path": "server-spi/src/main/java/org/keycloak/models/UserProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMDo0MToyMlrOIRmUGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMDo0MToyMlrOIRmUGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMyNDQ0Mw==", "bodyText": "UUID is not necessarily the only ID. Could be a random string, or random number - the requirement is that it is fresh, nonexistent in the current storage\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param id id of the new user. Should be generated to random UUID if {@code null}.\n          \n          \n            \n                 * @param id id of the new user. Should be generated to random value if {@code null}.", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555324443", "createdAt": "2021-01-11T20:41:22Z", "author": {"login": "hmlnarik"}, "path": "server-spi/src/main/java/org/keycloak/models/UserProvider.java", "diffHunk": "@@ -38,39 +38,136 @@\n         UserQueryProvider,\n         UserRegistrationProvider,\n         UserBulkUpdateProvider {\n-    // Note: The reason there are so many query methods here is for layering a cache on top of an persistent KeycloakSession\n \n-    void addFederatedIdentity(RealmModel realm, UserModel user, FederatedIdentityModel socialLink);\n-    boolean removeFederatedIdentity(RealmModel realm, UserModel user, String socialProvider);\n-    void preRemove(RealmModel realm, IdentityProviderModel provider);\n-    void updateFederatedIdentity(RealmModel realm, UserModel federatedUser, FederatedIdentityModel federatedIdentityModel);\n+    /**\n+     * Sets the notBefore value for the given user\n+     *\n+     * @param realm a reference to the realm\n+     * @param user the user model\n+     * @param notBefore new value for notBefore\n+     *\n+     * @throws ModelException when user doesn't exist in the storage\n+     */\n+    void setNotBeforeForUser(RealmModel realm, UserModel user, int notBefore);\n \n     /**\n-     * @deprecated Use {@link #getFederatedIdentitiesStream(UserModel, RealmModel) getFederatedIdentitiesStream} instead.\n+     * Gets the notBefore value for the given user\n+     *\n+     * @param realm a reference to the realm\n+     * @param user the user model\n+     * @return the value of notBefore\n+     *\n+     * @throws ModelException when user doesn't exist in the storage\n+     */\n+    int getNotBeforeOfUser(RealmModel realm, UserModel user);\n+\n+    /**\n+     * Return a UserModel representing service account of the client\n+     *\n+     * @param client the client model\n+     * @throws IllegalArgumentException when there are more service accounts associated with the given clientId\n+     * @return userModel representing service account of the client\n+     */\n+    UserModel getServiceAccount(ClientModel client);\n+\n+    /**\n+     * @deprecated Use {@link #getUsersStream(RealmModel, boolean) getUsersStream} instead.\n      */\n     @Deprecated\n-    Set<FederatedIdentityModel> getFederatedIdentities(UserModel user, RealmModel realm);\n+    List<UserModel> getUsers(RealmModel realm, boolean includeServiceAccounts);\n \n     /**\n-     * Obtains the federated identities of the specified user.\n+     * Obtains the users associated with the specified realm.\n      *\n-     * @param user a reference to the user.\n-     * @param realm a reference to the realm.\n-     * @return a non-null {@link Stream} of federated identities associated with the user.\n+     * @param realm a reference to the realm being used for the search.\n+     * @param includeServiceAccounts {@code true} if service accounts should be included in the result; {@code false} otherwise.\n+     * @return a non-null {@link Stream} of users associated withe the realm.\n      */\n-    default Stream<FederatedIdentityModel> getFederatedIdentitiesStream(UserModel user, RealmModel realm) {\n-        Set<FederatedIdentityModel> value = this.getFederatedIdentities(user, realm);\n+    default Stream<UserModel> getUsersStream(RealmModel realm, boolean includeServiceAccounts) {\n+        List<UserModel> value = this.getUsers(realm, includeServiceAccounts);\n         return value != null ? value.stream() : Stream.empty();\n     }\n \n-    FederatedIdentityModel getFederatedIdentity(UserModel user, String socialProvider, RealmModel realm);\n-    UserModel getUserByFederatedIdentity(FederatedIdentityModel socialLink, RealmModel realm);\n+    /**\n+     * @deprecated Use {@link #getUsersStream(RealmModel, Integer, Integer, boolean)} instead.\n+     */\n+    @Deprecated\n+    List<UserModel> getUsers(RealmModel realm, int firstResult, int maxResults, boolean includeServiceAccounts);\n+\n+    /**\n+     * Obtains the users associated with the specified realm.\n+     *\n+     * @param realm a reference to the realm being used for the search.\n+     * @param firstResult first result to return. Ignored if negative, zero, or {@code null}.\n+     * @param maxResults maximum number of results to return. Ignored if negative or {@code null}.\n+     * @param includeServiceAccounts {@code true} if service accounts should be included in the result; {@code false} otherwise.\n+     * @return a non-null {@link Stream} of users associated withe the realm.\n+     */\n+    default Stream<UserModel> getUsersStream(RealmModel realm, Integer firstResult, Integer maxResults, boolean includeServiceAccounts) {\n+        List<UserModel> value = this.getUsers(realm, firstResult == null ? -1 : firstResult, maxResults == null ? -1 : maxResults, includeServiceAccounts);\n+        return value != null ? value.stream() : Stream.empty();\n+    }\n+\n+    /**\n+     * Adds a new user into the storage.\n+     *\n+     * only used for local storage\n+     *\n+     * @param realm the realm that user will be created in\n+     * @param id id of the new user. Should be generated to random UUID if {@code null}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53d44b1e42cb71604f079e95d1830f694a00b61f"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NTk4MDExOnYy", "diffSide": "RIGHT", "path": "server-spi/src/main/java/org/keycloak/models/UserProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMDo0MzoxOFrOIRmXxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMDo0MzoxOFrOIRmXxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMyNTM4Mw==", "bodyText": "Changing to lowercase is implementation-specific and should not be prescribed in the javadoc. Generally, the username should rather be stored as entered, and would be searched for in case-insensitive manner should the storage be configured so.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param username username, should be changed to lowercase before storing\n          \n          \n            \n                 * @param username username.", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555325383", "createdAt": "2021-01-11T20:43:18Z", "author": {"login": "hmlnarik"}, "path": "server-spi/src/main/java/org/keycloak/models/UserProvider.java", "diffHunk": "@@ -38,39 +38,136 @@\n         UserQueryProvider,\n         UserRegistrationProvider,\n         UserBulkUpdateProvider {\n-    // Note: The reason there are so many query methods here is for layering a cache on top of an persistent KeycloakSession\n \n-    void addFederatedIdentity(RealmModel realm, UserModel user, FederatedIdentityModel socialLink);\n-    boolean removeFederatedIdentity(RealmModel realm, UserModel user, String socialProvider);\n-    void preRemove(RealmModel realm, IdentityProviderModel provider);\n-    void updateFederatedIdentity(RealmModel realm, UserModel federatedUser, FederatedIdentityModel federatedIdentityModel);\n+    /**\n+     * Sets the notBefore value for the given user\n+     *\n+     * @param realm a reference to the realm\n+     * @param user the user model\n+     * @param notBefore new value for notBefore\n+     *\n+     * @throws ModelException when user doesn't exist in the storage\n+     */\n+    void setNotBeforeForUser(RealmModel realm, UserModel user, int notBefore);\n \n     /**\n-     * @deprecated Use {@link #getFederatedIdentitiesStream(UserModel, RealmModel) getFederatedIdentitiesStream} instead.\n+     * Gets the notBefore value for the given user\n+     *\n+     * @param realm a reference to the realm\n+     * @param user the user model\n+     * @return the value of notBefore\n+     *\n+     * @throws ModelException when user doesn't exist in the storage\n+     */\n+    int getNotBeforeOfUser(RealmModel realm, UserModel user);\n+\n+    /**\n+     * Return a UserModel representing service account of the client\n+     *\n+     * @param client the client model\n+     * @throws IllegalArgumentException when there are more service accounts associated with the given clientId\n+     * @return userModel representing service account of the client\n+     */\n+    UserModel getServiceAccount(ClientModel client);\n+\n+    /**\n+     * @deprecated Use {@link #getUsersStream(RealmModel, boolean) getUsersStream} instead.\n      */\n     @Deprecated\n-    Set<FederatedIdentityModel> getFederatedIdentities(UserModel user, RealmModel realm);\n+    List<UserModel> getUsers(RealmModel realm, boolean includeServiceAccounts);\n \n     /**\n-     * Obtains the federated identities of the specified user.\n+     * Obtains the users associated with the specified realm.\n      *\n-     * @param user a reference to the user.\n-     * @param realm a reference to the realm.\n-     * @return a non-null {@link Stream} of federated identities associated with the user.\n+     * @param realm a reference to the realm being used for the search.\n+     * @param includeServiceAccounts {@code true} if service accounts should be included in the result; {@code false} otherwise.\n+     * @return a non-null {@link Stream} of users associated withe the realm.\n      */\n-    default Stream<FederatedIdentityModel> getFederatedIdentitiesStream(UserModel user, RealmModel realm) {\n-        Set<FederatedIdentityModel> value = this.getFederatedIdentities(user, realm);\n+    default Stream<UserModel> getUsersStream(RealmModel realm, boolean includeServiceAccounts) {\n+        List<UserModel> value = this.getUsers(realm, includeServiceAccounts);\n         return value != null ? value.stream() : Stream.empty();\n     }\n \n-    FederatedIdentityModel getFederatedIdentity(UserModel user, String socialProvider, RealmModel realm);\n-    UserModel getUserByFederatedIdentity(FederatedIdentityModel socialLink, RealmModel realm);\n+    /**\n+     * @deprecated Use {@link #getUsersStream(RealmModel, Integer, Integer, boolean)} instead.\n+     */\n+    @Deprecated\n+    List<UserModel> getUsers(RealmModel realm, int firstResult, int maxResults, boolean includeServiceAccounts);\n+\n+    /**\n+     * Obtains the users associated with the specified realm.\n+     *\n+     * @param realm a reference to the realm being used for the search.\n+     * @param firstResult first result to return. Ignored if negative, zero, or {@code null}.\n+     * @param maxResults maximum number of results to return. Ignored if negative or {@code null}.\n+     * @param includeServiceAccounts {@code true} if service accounts should be included in the result; {@code false} otherwise.\n+     * @return a non-null {@link Stream} of users associated withe the realm.\n+     */\n+    default Stream<UserModel> getUsersStream(RealmModel realm, Integer firstResult, Integer maxResults, boolean includeServiceAccounts) {\n+        List<UserModel> value = this.getUsers(realm, firstResult == null ? -1 : firstResult, maxResults == null ? -1 : maxResults, includeServiceAccounts);\n+        return value != null ? value.stream() : Stream.empty();\n+    }\n+\n+    /**\n+     * Adds a new user into the storage.\n+     *\n+     * only used for local storage\n+     *\n+     * @param realm the realm that user will be created in\n+     * @param id id of the new user. Should be generated to random UUID if {@code null}.\n+     * @param username username, should be changed to lowercase before storing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53d44b1e42cb71604f079e95d1830f694a00b61f"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NjAwMjgwOnYy", "diffSide": "RIGHT", "path": "server-spi/src/main/java/org/keycloak/models/UserProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMDo1MDowNlrOIRmlZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxMTo0ODo0M1rOIR-BhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMyODg3MA==", "bodyText": "What is the \"social provider ID\"? I believe it is an internal ID of a identity provider? A link to `{@link org.keycloak.models.IdentityProviderModel.getInternalId()} could help to disambiguate this.", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555328870", "createdAt": "2021-01-11T20:50:06Z", "author": {"login": "hmlnarik"}, "path": "server-spi/src/main/java/org/keycloak/models/UserProvider.java", "diffHunk": "@@ -88,104 +185,182 @@\n     }\n \n     /**\n+     * Update client scopes in the stored user consent\n+     *\n+     * @param realm a reference to the realm\n+     * @param userId id of the user\n+     * @param consent new details of the user consent\n      *\n-     * @param realm\n-     * @param userId\n-     * @param consent\n      * @throws ModelException when consent doesn't exist for the userId\n      */\n     void updateConsent(RealmModel realm, String userId, UserConsentModel consent);\n+\n+    /**\n+     * Remove a user consent given by the user id and client id\n+     *\n+     * @param realm a reference to the realm\n+     * @param userId id of the user\n+     * @param clientInternalId id of the client\n+     * @return {@code true} if the consent was removed, {@code false} otherwise\n+     */\n     boolean revokeConsentForClient(RealmModel realm, String userId, String clientInternalId);\n \n-    void setNotBeforeForUser(RealmModel realm, UserModel user, int notBefore);\n-    int getNotBeforeOfUser(RealmModel realm, UserModel user);\n+    /* FEDERATED IDENTITIES methods */\n \n     /**\n+     * Adds a federated identity link for the user within the realm\n      *\n-     * @param client\n-     * @throws IllegalArgumentException when there are more service accounts associated with the given clientId\n-     * @return\n+     * @param realm a reference to the realm\n+     * @param user the user model\n+     * @param socialLink the federated identity model containing all details of the association between the user and\n+     *                   the identity provider\n      */\n-    UserModel getServiceAccount(ClientModel client);\n+    void addFederatedIdentity(RealmModel realm, UserModel user, FederatedIdentityModel socialLink);\n \n     /**\n-     * @deprecated Use {@link #getUsersStream(RealmModel, boolean) getUsersStream} instead.\n+     * Removes federation link between the user and the identity provider given by its id\n+     *\n+     * @param realm a reference to the realm\n+     * @param user the user model\n+     * @param socialProvider social provider id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53d44b1e42cb71604f079e95d1830f694a00b61f"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTcxMjkwMA==", "bodyText": "This is very good point because it is actually alias that is used, not internalId or providerId.", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555712900", "createdAt": "2021-01-12T11:48:43Z", "author": {"login": "mhajas"}, "path": "server-spi/src/main/java/org/keycloak/models/UserProvider.java", "diffHunk": "@@ -88,104 +185,182 @@\n     }\n \n     /**\n+     * Update client scopes in the stored user consent\n+     *\n+     * @param realm a reference to the realm\n+     * @param userId id of the user\n+     * @param consent new details of the user consent\n      *\n-     * @param realm\n-     * @param userId\n-     * @param consent\n      * @throws ModelException when consent doesn't exist for the userId\n      */\n     void updateConsent(RealmModel realm, String userId, UserConsentModel consent);\n+\n+    /**\n+     * Remove a user consent given by the user id and client id\n+     *\n+     * @param realm a reference to the realm\n+     * @param userId id of the user\n+     * @param clientInternalId id of the client\n+     * @return {@code true} if the consent was removed, {@code false} otherwise\n+     */\n     boolean revokeConsentForClient(RealmModel realm, String userId, String clientInternalId);\n \n-    void setNotBeforeForUser(RealmModel realm, UserModel user, int notBefore);\n-    int getNotBeforeOfUser(RealmModel realm, UserModel user);\n+    /* FEDERATED IDENTITIES methods */\n \n     /**\n+     * Adds a federated identity link for the user within the realm\n      *\n-     * @param client\n-     * @throws IllegalArgumentException when there are more service accounts associated with the given clientId\n-     * @return\n+     * @param realm a reference to the realm\n+     * @param user the user model\n+     * @param socialLink the federated identity model containing all details of the association between the user and\n+     *                   the identity provider\n      */\n-    UserModel getServiceAccount(ClientModel client);\n+    void addFederatedIdentity(RealmModel realm, UserModel user, FederatedIdentityModel socialLink);\n \n     /**\n-     * @deprecated Use {@link #getUsersStream(RealmModel, boolean) getUsersStream} instead.\n+     * Removes federation link between the user and the identity provider given by its id\n+     *\n+     * @param realm a reference to the realm\n+     * @param user the user model\n+     * @param socialProvider social provider id", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMyODg3MA=="}, "originalCommit": {"oid": "53d44b1e42cb71604f079e95d1830f694a00b61f"}, "originalPosition": 204}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NjAxMDc4OnYy", "diffSide": "RIGHT", "path": "server-spi/src/main/java/org/keycloak/storage/user/UserLookupProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMDo1MjozNFrOIRmqQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMDo1MjozNFrOIRmqQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMzMDExNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param username case insensitive username (storage should contain only lower-cased usernames)\n          \n          \n            \n                 * @param username case insensitive username (case-sensitivity is controlled by the storage)", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555330114", "createdAt": "2021-01-11T20:52:34Z", "author": {"login": "hmlnarik"}, "path": "server-spi/src/main/java/org/keycloak/storage/user/UserLookupProvider.java", "diffHunk": "@@ -27,16 +27,33 @@\n  * @version $Revision: 1 $\n  */\n public interface UserLookupProvider {\n+\n+    /**\n+     * Returns a user with the given id belonging to the realm\n+     *\n+     * @param id id of the user\n+     * @param realm the realm model\n+     * @return found user model, or {@code null} if no such user exists\n+     */\n     UserModel getUserById(String id, RealmModel realm);\n \n+    /**\n+     * Returns a user with the given username belonging to the realm\n+     *\n+     * @param username case insensitive username (storage should contain only lower-cased usernames)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53d44b1e42cb71604f079e95d1830f694a00b61f"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NjAxMjM5OnYy", "diffSide": "RIGHT", "path": "server-spi/src/main/java/org/keycloak/storage/user/UserLookupProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMDo1MzowNlrOIRmrLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMDo1MzowNlrOIRmrLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMzMDM1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param email case insensitive email address (storage should contain only lower-cased email addresses)\n          \n          \n            \n                 * @param email case insensitive email address (case-sensitivity is controlled by the storage)", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555330350", "createdAt": "2021-01-11T20:53:06Z", "author": {"login": "hmlnarik"}, "path": "server-spi/src/main/java/org/keycloak/storage/user/UserLookupProvider.java", "diffHunk": "@@ -27,16 +27,33 @@\n  * @version $Revision: 1 $\n  */\n public interface UserLookupProvider {\n+\n+    /**\n+     * Returns a user with the given id belonging to the realm\n+     *\n+     * @param id id of the user\n+     * @param realm the realm model\n+     * @return found user model, or {@code null} if no such user exists\n+     */\n     UserModel getUserById(String id, RealmModel realm);\n \n+    /**\n+     * Returns a user with the given username belonging to the realm\n+     *\n+     * @param username case insensitive username (storage should contain only lower-cased usernames)\n+     * @param realm the realm model\n+     * @return found user model, or {@code null} if no such user exists\n+     */\n     UserModel getUserByUsername(String username, RealmModel realm);\n \n     /**\n-     * \n-     * @param email\n-     * @param realm\n+     * Returns a user with the given email belonging to the realm\n+     *\n+     * @param email case insensitive email address (storage should contain only lower-cased email addresses)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53d44b1e42cb71604f079e95d1830f694a00b61f"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NjAyNzU5OnYy", "diffSide": "RIGHT", "path": "server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMDo1NzoyNlrOIRm0Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxMzo0NjoyOFrOISCIwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMzMjY1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Searches for users with username, email or first + last name that is like search string.\n          \n          \n            \n                 * Searches for users whose username, email, first or last name contain the any of the strings in {@code search} separated by whitespace.\n          \n      \n    \n    \n  \n\nSame comment applies below", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555332658", "createdAt": "2021-01-11T20:57:26Z", "author": {"login": "hmlnarik"}, "path": "server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java", "diffHunk": "@@ -173,15 +173,16 @@ default int getUsersCount(RealmModel realm, boolean includeServiceAccount) {\n     }\n \n     /**\n-     * Search for users with username, email or first + last name that is like search string.\n+     * Searches for users with username, email or first + last name that is like search string.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53d44b1e42cb71604f079e95d1830f694a00b61f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTcyMDQwOA==", "bodyText": "Should we do searching like described? As far as I know our implementations doesn't search for all words in search separately. The way I understand it, it just checks if any of strings username, email and first name + last name contains search string. See https://github.com/keycloak/keycloak/blob/master/model/jpa/src/main/java/org/keycloak/models/jpa/JpaUserProvider.java#L824-L833. Am I missing something?", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555720408", "createdAt": "2021-01-12T12:03:15Z", "author": {"login": "mhajas"}, "path": "server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java", "diffHunk": "@@ -173,15 +173,16 @@ default int getUsersCount(RealmModel realm, boolean includeServiceAccount) {\n     }\n \n     /**\n-     * Search for users with username, email or first + last name that is like search string.\n+     * Searches for users with username, email or first + last name that is like search string.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMzMjY1OA=="}, "originalCommit": {"oid": "53d44b1e42cb71604f079e95d1830f694a00b61f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTc4MDI5MA==", "bodyText": "Yes. Building any sort of index on \"first name + last\" is hard and requires functional indices. It's easier to search word for word. JPA implementation is far from performant just because of this. For the fields alone, full-text search / index could be leveraged.", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555780290", "createdAt": "2021-01-12T13:46:28Z", "author": {"login": "hmlnarik"}, "path": "server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java", "diffHunk": "@@ -173,15 +173,16 @@ default int getUsersCount(RealmModel realm, boolean includeServiceAccount) {\n     }\n \n     /**\n-     * Search for users with username, email or first + last name that is like search string.\n+     * Searches for users with username, email or first + last name that is like search string.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMzMjY1OA=="}, "originalCommit": {"oid": "53d44b1e42cb71604f079e95d1830f694a00b61f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NjA0MzY3OnYy", "diffSide": "RIGHT", "path": "server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMTowMDowN1rOIRm9tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMTowMDowN1rOIRm9tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMzNTA5Mg==", "bodyText": "Prefer constants, e.g. UserModel.FIRST_NAME to plain strings.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     <li>\"firstName\" - first name (case insensitive string)</li>\n          \n          \n            \n                 *     <li>UserModel.FIRST_NAME - first name (case insensitive string)</li>\n          \n      \n    \n    \n  \n\nSame comment applies to methods below", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555335092", "createdAt": "2021-01-11T21:00:07Z", "author": {"login": "hmlnarik"}, "path": "server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java", "diffHunk": "@@ -237,35 +240,53 @@ default int getUsersCount(RealmModel realm, boolean includeServiceAccount) {\n     }\n \n     /**\n-     * Search for user by parameter.  Valid parameters are:\n-     * \"first\" - first name\n-     * \"last\" - last name\n-     * \"email\" - email\n-     * \"username\" - username\n+     * Search for user by a map of parameters.\n+     * <p/>\n+     * Valid parameters are:\n+     * <ul>\n+     *     <li>\"firstName\" - first name (case insensitive string)</li>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53d44b1e42cb71604f079e95d1830f694a00b61f"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NjA1MDA4OnYy", "diffSide": "RIGHT", "path": "server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMTowMToyMlrOIRnBmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxMzo0MjozOFrOISB-9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMzNjA4OQ==", "bodyText": "Implementations do not have to search in {@code UserFederatedStorageProvider} part should clarified / reworded", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555336089", "createdAt": "2021-01-11T21:01:22Z", "author": {"login": "hmlnarik"}, "path": "server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java", "diffHunk": "@@ -323,14 +361,15 @@ default int getUsersCount(RealmModel realm, boolean includeServiceAccount) {\n     }\n \n     /**\n-     * Get users that belong to a specific group. Implementations do not have to search in UserFederatedStorageProvider\n+     * Get users that belong to a specific group. Implementations do not have to search in {@code UserFederatedStorageProvider}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53d44b1e42cb71604f079e95d1830f694a00b61f"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTcyNjEyNA==", "bodyText": "To be honest, I would probably completely remove this part, as it basically holds for all methods that they should not do anything with federated storage. Maybe it should be in the documentation, that when you are implementing UserProvider for your storage you should return only users, that are part of your storage.", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555726124", "createdAt": "2021-01-12T12:13:29Z", "author": {"login": "mhajas"}, "path": "server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java", "diffHunk": "@@ -323,14 +361,15 @@ default int getUsersCount(RealmModel realm, boolean includeServiceAccount) {\n     }\n \n     /**\n-     * Get users that belong to a specific group. Implementations do not have to search in UserFederatedStorageProvider\n+     * Get users that belong to a specific group. Implementations do not have to search in {@code UserFederatedStorageProvider}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMzNjA4OQ=="}, "originalCommit": {"oid": "53d44b1e42cb71604f079e95d1830f694a00b61f"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTc3Nzc4MQ==", "bodyText": "I agree, class javadoc would be best place to put this information", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555777781", "createdAt": "2021-01-12T13:42:38Z", "author": {"login": "hmlnarik"}, "path": "server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java", "diffHunk": "@@ -323,14 +361,15 @@ default int getUsersCount(RealmModel realm, boolean includeServiceAccount) {\n     }\n \n     /**\n-     * Get users that belong to a specific group. Implementations do not have to search in UserFederatedStorageProvider\n+     * Get users that belong to a specific group. Implementations do not have to search in {@code UserFederatedStorageProvider}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMzNjA4OQ=="}, "originalCommit": {"oid": "53d44b1e42cb71604f079e95d1830f694a00b61f"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NjA3MjY2OnYy", "diffSide": "RIGHT", "path": "server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMTowNTo1OFrOIRnPRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMTowNTo1OFrOIRnPRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTMzOTU5MQ==", "bodyText": "What is checked in the set of groups?", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555339591", "createdAt": "2021-01-11T21:05:58Z", "author": {"login": "hmlnarik"}, "path": "server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java", "diffHunk": "@@ -63,39 +63,62 @@ default int getUsersCount(RealmModel realm, Set<String> groupIds) {\n     /**\n      * Returns the number of users that match the given criteria.\n      *\n-     * @param search search criteria\n      * @param realm  the realm\n+     * @param search search criteria\n      * @return number of users that match the search\n      */\n+    default int getUsersCount(RealmModel realm, String search) {\n+        return getUsersCount(search, realm);\n+    }\n+\n+    /**\n+     * @deprecated Use {@link #getUsersCount(RealmModel, String)}\n+     */\n+    @Deprecated\n     default int getUsersCount(String search, RealmModel realm) {\n-        return (int) searchForUserStream(search, realm).count();\n+        return (int) searchForUserStream(realm, search).count();\n     }\n \n     /**\n      * Returns the number of users that match the given criteria and are in\n      * at least one of the groups given.\n      *\n-     * @param search   search criteria\n      * @param realm    the realm\n+     * @param search   search criteria\n      * @param groupIds set of groups to check for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e536bb257a92166f63276c161afb8010d9d5467"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NjA4MDcyOnYy", "diffSide": "RIGHT", "path": "model/jpa/src/main/java/org/keycloak/models/jpa/PaginationUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMTowODoxNVrOIRnT9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMTowODoxNVrOIRnT9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM0MDc4OQ==", "bodyText": "Please note https://hibernate.atlassian.net/browse/HHH-14295", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555340789", "createdAt": "2021-01-11T21:08:15Z", "author": {"login": "hmlnarik"}, "path": "model/jpa/src/main/java/org/keycloak/models/jpa/PaginationUtils.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package org.keycloak.models.jpa;\n+\n+import javax.persistence.TypedQuery;\n+\n+public class PaginationUtils {\n+    public static <T> TypedQuery<T> paginateQuery(TypedQuery<T> query, Integer first, Integer max) {\n+        if (first != null && first > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f82218126c696c963da2eb315adf71bd08c9925b"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NjM4NzQ3OnYy", "diffSide": "RIGHT", "path": "model/map/src/main/java/org/keycloak/models/map/user/MapUserProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMjo0NDo1NlrOIRqMZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMjo0NDo1NlrOIRqMZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM4ODAwNQ==", "bodyText": "nit: Can we use if (list.isEmpty()) on line 224, 310 and 495?", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555388005", "createdAt": "2021-01-11T22:44:56Z", "author": {"login": "vramik"}, "path": "model/map/src/main/java/org/keycloak/models/map/user/MapUserProvider.java", "diffHunk": "@@ -224,7 +213,7 @@ public FederatedIdentityModel getFederatedIdentity(UserModel user, String social\n     }\n \n     @Override\n-    public UserModel getUserByFederatedIdentity(FederatedIdentityModel socialLink, RealmModel realm) {\n+    public UserModel getUserByFederatedIdentity(RealmModel realm, FederatedIdentityModel socialLink) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03f75bb48866214af2a364d1d8c3420e77817014"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NjQwODUxOnYy", "diffSide": "RIGHT", "path": "federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProvider.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMjo1MjozNlrOIRqY7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxMzo0OToyMlrOISCP6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM5MTIxMw==", "bodyText": "I've noticed the Integer.MAX_VALUE - 1, why the -1  is needed?", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555391213", "createdAt": "2021-01-11T22:52:36Z", "author": {"login": "vramik"}, "path": "federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProvider.java", "diffHunk": "@@ -386,41 +379,34 @@ public int getUsersCount(RealmModel realm) {\n         Stream<LDAPObject> stream = searchLDAP(realm, params).stream()\n             .filter(ldapObject -> {\n                 String ldapUsername = LDAPUtils.getUsername(ldapObject, this.ldapIdentityStore.getConfig());\n-                return (session.userLocalStorage().getUserByUsername(ldapUsername, realm) == null);\n+                return (session.userLocalStorage().getUserByUsername(realm, ldapUsername) == null);\n             });\n-        if (firstResult > 0)\n-            stream = stream.skip(firstResult);\n-        if (maxResults >= 0)\n-            stream = stream.limit(maxResults);\n-        return stream.map(ldapObject -> importUserFromLDAP(session, realm, ldapObject));\n-    }\n \n-    @Override\n-    public Stream<UserModel> getGroupMembersStream(RealmModel realm, GroupModel group) {\n-        return getGroupMembersStream(realm, group, 0, Integer.MAX_VALUE - 1);\n+        return paginatedStream(stream, firstResult, maxResults).map(ldapObject -> importUserFromLDAP(session, realm, ldapObject));\n     }\n \n     @Override\n     public Stream<UserModel> getGroupMembersStream(RealmModel realm, GroupModel group, Integer firstResult, Integer maxResults) {\n+        int first = firstResult == null ? 0 : firstResult;\n+        int max = maxResults == null ? Integer.MAX_VALUE - 1 : maxResults;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03f75bb48866214af2a364d1d8c3420e77817014"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTc1NTg4NQ==", "bodyText": "Good question. I basically reused the default value that was there before. However, I am not sure it is correct, maybe we should create a Jira for this as this can cause integer overflow when firstResult > 1. @hmlnarik WDYT?", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555755885", "createdAt": "2021-01-12T13:06:39Z", "author": {"login": "mhajas"}, "path": "federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProvider.java", "diffHunk": "@@ -386,41 +379,34 @@ public int getUsersCount(RealmModel realm) {\n         Stream<LDAPObject> stream = searchLDAP(realm, params).stream()\n             .filter(ldapObject -> {\n                 String ldapUsername = LDAPUtils.getUsername(ldapObject, this.ldapIdentityStore.getConfig());\n-                return (session.userLocalStorage().getUserByUsername(ldapUsername, realm) == null);\n+                return (session.userLocalStorage().getUserByUsername(realm, ldapUsername) == null);\n             });\n-        if (firstResult > 0)\n-            stream = stream.skip(firstResult);\n-        if (maxResults >= 0)\n-            stream = stream.limit(maxResults);\n-        return stream.map(ldapObject -> importUserFromLDAP(session, realm, ldapObject));\n-    }\n \n-    @Override\n-    public Stream<UserModel> getGroupMembersStream(RealmModel realm, GroupModel group) {\n-        return getGroupMembersStream(realm, group, 0, Integer.MAX_VALUE - 1);\n+        return paginatedStream(stream, firstResult, maxResults).map(ldapObject -> importUserFromLDAP(session, realm, ldapObject));\n     }\n \n     @Override\n     public Stream<UserModel> getGroupMembersStream(RealmModel realm, GroupModel group, Integer firstResult, Integer maxResults) {\n+        int first = firstResult == null ? 0 : firstResult;\n+        int max = maxResults == null ? Integer.MAX_VALUE - 1 : maxResults;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM5MTIxMw=="}, "originalCommit": {"oid": "03f75bb48866214af2a364d1d8c3420e77817014"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTc4MjEyMQ==", "bodyText": "I'd say Integer.MAX_VALUE >> 1 would do here for reasonable cases", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555782121", "createdAt": "2021-01-12T13:49:22Z", "author": {"login": "hmlnarik"}, "path": "federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProvider.java", "diffHunk": "@@ -386,41 +379,34 @@ public int getUsersCount(RealmModel realm) {\n         Stream<LDAPObject> stream = searchLDAP(realm, params).stream()\n             .filter(ldapObject -> {\n                 String ldapUsername = LDAPUtils.getUsername(ldapObject, this.ldapIdentityStore.getConfig());\n-                return (session.userLocalStorage().getUserByUsername(ldapUsername, realm) == null);\n+                return (session.userLocalStorage().getUserByUsername(realm, ldapUsername) == null);\n             });\n-        if (firstResult > 0)\n-            stream = stream.skip(firstResult);\n-        if (maxResults >= 0)\n-            stream = stream.limit(maxResults);\n-        return stream.map(ldapObject -> importUserFromLDAP(session, realm, ldapObject));\n-    }\n \n-    @Override\n-    public Stream<UserModel> getGroupMembersStream(RealmModel realm, GroupModel group) {\n-        return getGroupMembersStream(realm, group, 0, Integer.MAX_VALUE - 1);\n+        return paginatedStream(stream, firstResult, maxResults).map(ldapObject -> importUserFromLDAP(session, realm, ldapObject));\n     }\n \n     @Override\n     public Stream<UserModel> getGroupMembersStream(RealmModel realm, GroupModel group, Integer firstResult, Integer maxResults) {\n+        int first = firstResult == null ? 0 : firstResult;\n+        int max = maxResults == null ? Integer.MAX_VALUE - 1 : maxResults;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM5MTIxMw=="}, "originalCommit": {"oid": "03f75bb48866214af2a364d1d8c3420e77817014"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NjQyNzc3OnYy", "diffSide": "RIGHT", "path": "model/jpa/src/main/java/org/keycloak/models/jpa/PaginationUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMjo1OToyMFrOIRqkSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMjo1OToyMFrOIRqkSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM5NDEyMw==", "bodyText": "missing copyright", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555394123", "createdAt": "2021-01-11T22:59:20Z", "author": {"login": "vramik"}, "path": "model/jpa/src/main/java/org/keycloak/models/jpa/PaginationUtils.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package org.keycloak.models.jpa;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03f75bb48866214af2a364d1d8c3420e77817014"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NjQ2NDYwOnYy", "diffSide": "RIGHT", "path": "server-spi-private/src/main/java/org/keycloak/utils/StreamsUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMzoxNDo1NlrOIRq6dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMzoxNDo1NlrOIRq6dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM5OTc5OQ==", "bodyText": "I guess the method is self-explanatory, I've just noticed that there is javadoc for throwIfEmpty. But not for closing one. I'd suggest to add javadoc to all of them, wdyt?", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555399799", "createdAt": "2021-01-11T23:14:56Z", "author": {"login": "vramik"}, "path": "server-spi-private/src/main/java/org/keycloak/utils/StreamsUtil.java", "diffHunk": "@@ -42,4 +42,16 @@\n             throw ex;\n         }\n     }\n+\n+    public static <T> Stream<T> paginatedStream(Stream<T> originalStream, Integer first, Integer max) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03f75bb48866214af2a364d1d8c3420e77817014"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NjQ4NzQ5OnYy", "diffSide": "RIGHT", "path": "server-spi/src/main/java/org/keycloak/models/UserProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMzoyNDoxNFrOIRrHvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxMzoxMjoxNlrOISA11g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQwMzE5Ng==", "bodyText": "I've noticed you've removed (or not added) the name of the method from @deprecated. I guess it was done for better readability of javadoc, right? Isn't this one omitted?\nIf so there are other places where the method name is present.\nOne way or another I'd suggest to unify it, wdyt? I've commented with word 'name' to other occurrences I've found.\nBut maybe I'm missing something and it really should be this way, in that case please ignore this one and all 'name' comments :)", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555403196", "createdAt": "2021-01-11T23:24:14Z", "author": {"login": "vramik"}, "path": "server-spi/src/main/java/org/keycloak/models/UserProvider.java", "diffHunk": "@@ -38,39 +38,136 @@\n         UserQueryProvider,\n         UserRegistrationProvider,\n         UserBulkUpdateProvider {\n-    // Note: The reason there are so many query methods here is for layering a cache on top of an persistent KeycloakSession\n \n-    void addFederatedIdentity(RealmModel realm, UserModel user, FederatedIdentityModel socialLink);\n-    boolean removeFederatedIdentity(RealmModel realm, UserModel user, String socialProvider);\n-    void preRemove(RealmModel realm, IdentityProviderModel provider);\n-    void updateFederatedIdentity(RealmModel realm, UserModel federatedUser, FederatedIdentityModel federatedIdentityModel);\n+    /**\n+     * Sets the notBefore value for the given user\n+     *\n+     * @param realm a reference to the realm\n+     * @param user the user model\n+     * @param notBefore new value for notBefore\n+     *\n+     * @throws ModelException when user doesn't exist in the storage\n+     */\n+    void setNotBeforeForUser(RealmModel realm, UserModel user, int notBefore);\n+\n+    /**\n+     * Gets the notBefore value for the given user\n+     *\n+     * @param realm a reference to the realm\n+     * @param user the user model\n+     * @return the value of notBefore\n+     *\n+     * @throws ModelException when user doesn't exist in the storage\n+     */\n+    int getNotBeforeOfUser(RealmModel realm, UserModel user);\n \n     /**\n-     * @deprecated Use {@link #getFederatedIdentitiesStream(UserModel, RealmModel) getFederatedIdentitiesStream} instead.\n+     * Return a UserModel representing service account of the client\n+     *\n+     * @param client the client model\n+     * @throws IllegalArgumentException when there are more service accounts associated with the given clientId\n+     * @return userModel representing service account of the client\n+     */\n+    UserModel getServiceAccount(ClientModel client);\n+\n+    /**\n+     * @deprecated Use {@link #getUsersStream(RealmModel, boolean) getUsersStream} instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03f75bb48866214af2a364d1d8c3420e77817014"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTc1OTA2Mg==", "bodyText": "This is my mistake. I thought I just accidentally added the method at the end of @link block (I thought I pressed something what I should not when Intellij tries to hint the method name), however, it seems that the method name is there on purpose. Thanks for spotting this, I will add the method name everywhere, I think it is more readable when there is only method name, or WDYT?", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555759062", "createdAt": "2021-01-12T13:12:16Z", "author": {"login": "mhajas"}, "path": "server-spi/src/main/java/org/keycloak/models/UserProvider.java", "diffHunk": "@@ -38,39 +38,136 @@\n         UserQueryProvider,\n         UserRegistrationProvider,\n         UserBulkUpdateProvider {\n-    // Note: The reason there are so many query methods here is for layering a cache on top of an persistent KeycloakSession\n \n-    void addFederatedIdentity(RealmModel realm, UserModel user, FederatedIdentityModel socialLink);\n-    boolean removeFederatedIdentity(RealmModel realm, UserModel user, String socialProvider);\n-    void preRemove(RealmModel realm, IdentityProviderModel provider);\n-    void updateFederatedIdentity(RealmModel realm, UserModel federatedUser, FederatedIdentityModel federatedIdentityModel);\n+    /**\n+     * Sets the notBefore value for the given user\n+     *\n+     * @param realm a reference to the realm\n+     * @param user the user model\n+     * @param notBefore new value for notBefore\n+     *\n+     * @throws ModelException when user doesn't exist in the storage\n+     */\n+    void setNotBeforeForUser(RealmModel realm, UserModel user, int notBefore);\n+\n+    /**\n+     * Gets the notBefore value for the given user\n+     *\n+     * @param realm a reference to the realm\n+     * @param user the user model\n+     * @return the value of notBefore\n+     *\n+     * @throws ModelException when user doesn't exist in the storage\n+     */\n+    int getNotBeforeOfUser(RealmModel realm, UserModel user);\n \n     /**\n-     * @deprecated Use {@link #getFederatedIdentitiesStream(UserModel, RealmModel) getFederatedIdentitiesStream} instead.\n+     * Return a UserModel representing service account of the client\n+     *\n+     * @param client the client model\n+     * @throws IllegalArgumentException when there are more service accounts associated with the given clientId\n+     * @return userModel representing service account of the client\n+     */\n+    UserModel getServiceAccount(ClientModel client);\n+\n+    /**\n+     * @deprecated Use {@link #getUsersStream(RealmModel, boolean) getUsersStream} instead.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQwMzE5Ng=="}, "originalCommit": {"oid": "03f75bb48866214af2a364d1d8c3420e77817014"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NjQ5NzAyOnYy", "diffSide": "RIGHT", "path": "server-spi/src/main/java/org/keycloak/storage/user/UserLookupProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMzoyODowNFrOIRrNVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMzoyODowNFrOIRrNVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQwNDYzMQ==", "bodyText": "There are some methods if this interface where @Override is specified and some methods where it is not. I'd suggest to unify it, wdyt?", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555404631", "createdAt": "2021-01-11T23:28:04Z", "author": {"login": "vramik"}, "path": "server-spi/src/main/java/org/keycloak/storage/user/UserLookupProvider.java", "diffHunk": "@@ -27,16 +27,78 @@\n  * @version $Revision: 1 $\n  */\n public interface UserLookupProvider {\n+\n+    /**\n+     * Returns a user with the given id belonging to the realm\n+     *\n+     * @param id id of the user\n+     * @param realm the realm model\n+     * @return found user model, or {@code null} if no such user exists\n+     */\n+    default UserModel getUserById(RealmModel realm, String id) {\n+        return getUserById(id, realm);\n+    }\n+    /**\n+     * @deprecated Use {@link #getUserById(RealmModel, String)} instead.\n+     */\n+    @Deprecated\n     UserModel getUserById(String id, RealmModel realm);\n \n+    /**\n+     * Returns a user with the given username belonging to the realm\n+     *\n+     * @param username case insensitive username (storage should contain only lower-cased usernames)\n+     * @param realm the realm model\n+     * @return found user model, or {@code null} if no such user exists\n+     */\n+    default UserModel getUserByUsername(RealmModel realm, String username) {\n+        return getUserByUsername(username, realm);\n+    }\n+    /**\n+     * @deprecated Use {@link #getUserByUsername(RealmModel, String)} instead.\n+     */\n+    @Deprecated\n     UserModel getUserByUsername(String username, RealmModel realm);\n \n     /**\n-     * \n-     * @param email\n-     * @param realm\n+     * Returns a user with the given email belonging to the realm\n+     *\n+     * @param email case insensitive email address (storage should contain only lower-cased email addresses)\n+     * @param realm the realm model\n+     * @return found user model, or {@code null} if no such user exists\n+     *\n      * @throws org.keycloak.models.ModelDuplicateException when there are more users with same email\n-     * @return\n      */\n+    default UserModel getUserByEmail(RealmModel realm, String email) {\n+        return getUserByEmail(email, realm);\n+    }\n+    /**\n+     * @deprecated Use {@link #getUserByEmail(RealmModel, String)} instead.\n+     */\n+    @Deprecated\n     UserModel getUserByEmail(String email, RealmModel realm);\n+    \n+    interface Streams extends UserLookupProvider {\n+        UserModel getUserById(RealmModel realm, String id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03f75bb48866214af2a364d1d8c3420e77817014"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NjUwMjc1OnYy", "diffSide": "RIGHT", "path": "server-spi/src/main/java/org/keycloak/storage/user/UserLookupProvider.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMzozMDoxNFrOIRrQkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxOTo1OTo1OFrOIT1FFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQwNTQ1OA==", "bodyText": "I wonder if the original class-level javadoc (line 23,24) shouldn't be updated as well. I might be wrong, but it seems to me it's outdated.", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555405458", "createdAt": "2021-01-11T23:30:14Z", "author": {"login": "vramik"}, "path": "server-spi/src/main/java/org/keycloak/storage/user/UserLookupProvider.java", "diffHunk": "@@ -27,16 +27,78 @@\n  * @version $Revision: 1 $\n  */\n public interface UserLookupProvider {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03f75bb48866214af2a364d1d8c3420e77817014"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg2NTQwOQ==", "bodyText": "What do you mean? I think what is written there is still true.", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555865409", "createdAt": "2021-01-12T15:35:08Z", "author": {"login": "mhajas"}, "path": "server-spi/src/main/java/org/keycloak/storage/user/UserLookupProvider.java", "diffHunk": "@@ -27,16 +27,78 @@\n  * @version $Revision: 1 $\n  */\n public interface UserLookupProvider {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQwNTQ1OA=="}, "originalCommit": {"oid": "03f75bb48866214af2a364d1d8c3420e77817014"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM2NDQwNA==", "bodyText": "When I read it I realized I don't know how the interface supports basic login capabilities so I assumed it was outdated but it's probably just the fact that I don't know the application of the interface in those login capabilities.", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r556364404", "createdAt": "2021-01-13T09:06:46Z", "author": {"login": "vramik"}, "path": "server-spi/src/main/java/org/keycloak/storage/user/UserLookupProvider.java", "diffHunk": "@@ -27,16 +27,78 @@\n  * @version $Revision: 1 $\n  */\n public interface UserLookupProvider {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQwNTQ1OA=="}, "originalCommit": {"oid": "03f75bb48866214af2a364d1d8c3420e77817014"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM5OTU1Nw==", "bodyText": "I see. It works because when you log in, UserStorageManager will search all storage providers, that implement UserLookupProvider, for username/email. This means it should be enough to just implement UserLookupProvider and you should be able, to login with users stored in the storage. If you want some other functionality, for example, managing users via admin console, you need to implement also UserQueryProvider. After that, when UserStorageManager searches for all users, it will consider also users from your storage because you implemented UserQueryProvider.\nIn code, this is handled by methods in AbstractStorageManager, particularly in getStorageProviderInstance(...) which will check, whether UserStorageProvider implements requested capabilityInterface.", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r556399557", "createdAt": "2021-01-13T10:01:03Z", "author": {"login": "mhajas"}, "path": "server-spi/src/main/java/org/keycloak/storage/user/UserLookupProvider.java", "diffHunk": "@@ -27,16 +27,78 @@\n  * @version $Revision: 1 $\n  */\n public interface UserLookupProvider {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQwNTQ1OA=="}, "originalCommit": {"oid": "03f75bb48866214af2a364d1d8c3420e77817014"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY2MzUxMA==", "bodyText": "Thank you very much for explanation.", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r557663510", "createdAt": "2021-01-14T19:59:58Z", "author": {"login": "vramik"}, "path": "server-spi/src/main/java/org/keycloak/storage/user/UserLookupProvider.java", "diffHunk": "@@ -27,16 +27,78 @@\n  * @version $Revision: 1 $\n  */\n public interface UserLookupProvider {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQwNTQ1OA=="}, "originalCommit": {"oid": "03f75bb48866214af2a364d1d8c3420e77817014"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NjU1Njg5OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/storage/UserStorageManager.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMzo1Mzo1M1rOIRrwJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwOTowMzozNlrOISlq6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxMzU0Mg==", "bodyText": "It seems this change changes the behavior, doesn't it? Previously when maxResult was equal 0 the method returned empty stream, while now there won't be any stream.limit(maxResult) (if I understand the StreamsUtil.paginatedStream correctly).\nAnyway your changes seems correct to me, I was just wondering if it was a bugfix. But maybe I'm missing something.", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555413542", "createdAt": "2021-01-11T23:53:53Z", "author": {"login": "vramik"}, "path": "services/src/main/java/org/keycloak/storage/UserStorageManager.java", "diffHunk": "@@ -161,10 +162,8 @@ protected void deleteInvalidUser(final RealmModel realm, final UserModel user) {\n         Stream<UserModel> query(Object provider);\n     }\n \n-    protected Stream<UserModel> query(PaginatedQuery pagedQuery, RealmModel realm, int firstResult, int maxResults) {\n-        if (maxResults == 0) return Stream.empty();\n-        if (firstResult < 0) firstResult = 0;\n-        if (maxResults < 0) maxResults = Integer.MAX_VALUE - 1;\n+    protected Stream<UserModel> query(PaginatedQuery pagedQuery, RealmModel realm, Integer firstResult, Integer maxResults) {\n+        if (maxResults != null && maxResults == 0) return Stream.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03f75bb48866214af2a364d1d8c3420e77817014"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg3MTA0OA==", "bodyText": "This line will make sure that empty stream is returned when maxResult == 0. Even without this check the paginatedStream function will add .limit(0) because there is >= 0. I am not sure I understand what you mean.", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555871048", "createdAt": "2021-01-12T15:42:38Z", "author": {"login": "mhajas"}, "path": "services/src/main/java/org/keycloak/storage/UserStorageManager.java", "diffHunk": "@@ -161,10 +162,8 @@ protected void deleteInvalidUser(final RealmModel realm, final UserModel user) {\n         Stream<UserModel> query(Object provider);\n     }\n \n-    protected Stream<UserModel> query(PaginatedQuery pagedQuery, RealmModel realm, int firstResult, int maxResults) {\n-        if (maxResults == 0) return Stream.empty();\n-        if (firstResult < 0) firstResult = 0;\n-        if (maxResults < 0) maxResults = Integer.MAX_VALUE - 1;\n+    protected Stream<UserModel> query(PaginatedQuery pagedQuery, RealmModel realm, Integer firstResult, Integer maxResults) {\n+        if (maxResults != null && maxResults == 0) return Stream.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxMzU0Mg=="}, "originalCommit": {"oid": "03f75bb48866214af2a364d1d8c3420e77817014"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM2MjQ3NA==", "bodyText": "You're right, my mistake, please ignore.", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r556362474", "createdAt": "2021-01-13T09:03:36Z", "author": {"login": "vramik"}, "path": "services/src/main/java/org/keycloak/storage/UserStorageManager.java", "diffHunk": "@@ -161,10 +162,8 @@ protected void deleteInvalidUser(final RealmModel realm, final UserModel user) {\n         Stream<UserModel> query(Object provider);\n     }\n \n-    protected Stream<UserModel> query(PaginatedQuery pagedQuery, RealmModel realm, int firstResult, int maxResults) {\n-        if (maxResults == 0) return Stream.empty();\n-        if (firstResult < 0) firstResult = 0;\n-        if (maxResults < 0) maxResults = Integer.MAX_VALUE - 1;\n+    protected Stream<UserModel> query(PaginatedQuery pagedQuery, RealmModel realm, Integer firstResult, Integer maxResults) {\n+        if (maxResults != null && maxResults == 0) return Stream.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxMzU0Mg=="}, "originalCommit": {"oid": "03f75bb48866214af2a364d1d8c3420e77817014"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NjU2NTg1OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/storage/UserStorageManager.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMzo1NzoyM1rOIRr1VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwODo0MjowNlrOIVe02A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxNDg2OA==", "bodyText": "Is there any other work remaining as TODO? If not, I'd suggest remove all 5 TODO comments, if so is there any plan for it?", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555414868", "createdAt": "2021-01-11T23:57:23Z", "author": {"login": "vramik"}, "path": "services/src/main/java/org/keycloak/storage/UserStorageManager.java", "diffHunk": "@@ -362,54 +344,44 @@ public int getUsersCount(RealmModel realm, Set<String> groupIds) {\n     }\n \n     @Override // TODO: missing storageProviders count?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03f75bb48866214af2a364d1d8c3420e77817014"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk0MjM2NA==", "bodyText": "@hmlnarik should this be added in future or should I remove these comments?", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555942364", "createdAt": "2021-01-12T17:19:43Z", "author": {"login": "mhajas"}, "path": "services/src/main/java/org/keycloak/storage/UserStorageManager.java", "diffHunk": "@@ -362,54 +344,44 @@ public int getUsersCount(RealmModel realm, Set<String> groupIds) {\n     }\n \n     @Override // TODO: missing storageProviders count?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxNDg2OA=="}, "originalCommit": {"oid": "03f75bb48866214af2a364d1d8c3420e77817014"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzMwNTY4Nw==", "bodyText": "Good catch @vramik. These methods need to fulfil the contract given in javadoc, and thus need to count in the federated storages as well\n[EDIT] @mhajas has convinced me that this is not a straightforward cleanup because of requirements it has on handling e.g. imported users and those from the original storage. Let's keep this in a separate task", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r557305687", "createdAt": "2021-01-14T10:49:06Z", "author": {"login": "hmlnarik"}, "path": "services/src/main/java/org/keycloak/storage/UserStorageManager.java", "diffHunk": "@@ -362,54 +344,44 @@ public int getUsersCount(RealmModel realm, Set<String> groupIds) {\n     }\n \n     @Override // TODO: missing storageProviders count?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxNDg2OA=="}, "originalCommit": {"oid": "03f75bb48866214af2a364d1d8c3420e77817014"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzMwOTY4NA==", "bodyText": "We should probably create a Jira for this, or should I add it in this PR?", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r557309684", "createdAt": "2021-01-14T10:56:29Z", "author": {"login": "mhajas"}, "path": "services/src/main/java/org/keycloak/storage/UserStorageManager.java", "diffHunk": "@@ -362,54 +344,44 @@ public int getUsersCount(RealmModel realm, Set<String> groupIds) {\n     }\n \n     @Override // TODO: missing storageProviders count?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxNDg2OA=="}, "originalCommit": {"oid": "03f75bb48866214af2a364d1d8c3420e77817014"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQ1NDA0MA==", "bodyText": "Rather the latter (this PR) please.", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r557454040", "createdAt": "2021-01-14T14:55:13Z", "author": {"login": "hmlnarik"}, "path": "services/src/main/java/org/keycloak/storage/UserStorageManager.java", "diffHunk": "@@ -362,54 +344,44 @@ public int getUsersCount(RealmModel realm, Set<String> groupIds) {\n     }\n \n     @Override // TODO: missing storageProviders count?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxNDg2OA=="}, "originalCommit": {"oid": "03f75bb48866214af2a364d1d8c3420e77817014"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY3MTczNw==", "bodyText": "[EDIT] @mhajas has convinced me that this is not a straightforward cleanup because of requirements it has on handling e.g. imported users and those from the original storage. Let's keep this in a separate task\n\nSo let's create a jira for that and leave it as it is.", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r557671737", "createdAt": "2021-01-14T20:14:45Z", "author": {"login": "vramik"}, "path": "services/src/main/java/org/keycloak/storage/UserStorageManager.java", "diffHunk": "@@ -362,54 +344,44 @@ public int getUsersCount(RealmModel realm, Set<String> groupIds) {\n     }\n \n     @Override // TODO: missing storageProviders count?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxNDg2OA=="}, "originalCommit": {"oid": "03f75bb48866214af2a364d1d8c3420e77817014"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTM5MTM4Nw==", "bodyText": "Here is Jira: https://issues.redhat.com/browse/KEYCLOAK-16816", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r559391387", "createdAt": "2021-01-18T08:33:29Z", "author": {"login": "mhajas"}, "path": "services/src/main/java/org/keycloak/storage/UserStorageManager.java", "diffHunk": "@@ -362,54 +344,44 @@ public int getUsersCount(RealmModel realm, Set<String> groupIds) {\n     }\n \n     @Override // TODO: missing storageProviders count?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxNDg2OA=="}, "originalCommit": {"oid": "03f75bb48866214af2a364d1d8c3420e77817014"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTM5NjA1Ng==", "bodyText": "Thank you", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r559396056", "createdAt": "2021-01-18T08:42:06Z", "author": {"login": "vramik"}, "path": "services/src/main/java/org/keycloak/storage/UserStorageManager.java", "diffHunk": "@@ -362,54 +344,44 @@ public int getUsersCount(RealmModel realm, Set<String> groupIds) {\n     }\n \n     @Override // TODO: missing storageProviders count?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxNDg2OA=="}, "originalCommit": {"oid": "03f75bb48866214af2a364d1d8c3420e77817014"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NjU3MTYzOnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/federation/UserPropertyFileStorage.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMDowMDoxM1rOIRr4sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMDowMDoxM1rOIRr4sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxNTcyOA==", "bodyText": "nit: forgotten white characters", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r555415728", "createdAt": "2021-01-12T00:00:13Z", "author": {"login": "vramik"}, "path": "testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/federation/UserPropertyFileStorage.java", "diffHunk": "@@ -145,88 +148,59 @@ public int getUsersCount(RealmModel realm) {\n     }\n \n     @Override\n-    public List<UserModel> getUsers(RealmModel realm) {\n-        List<UserModel> users = new LinkedList<>();\n-        for (Object username : userPasswords.keySet()) {\n-            users.add(createUser(realm, (String)username));\n-        }\n-        return users;\n-    }\n-\n-    @Override\n-    public List<UserModel> searchForUser(Map<String, String> attributes, RealmModel realm) {\n-        return searchForUser(attributes, realm, 0, Integer.MAX_VALUE - 1);\n+    public Stream<UserModel> getUsersStream(RealmModel realm) {\n+        return userPasswords.keySet().stream()\n+                .map(username -> createUser(realm, (String) username));\n     }\n-\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03f75bb48866214af2a364d1d8c3420e77817014"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMDYxNTgyOnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/federation/UserPropertyFileStorage.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxOTo0NzozNVrOISR1qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxOTo0NzozNVrOISR1qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjAzNzU0NQ==", "bodyText": "Don't we need to ensure that maxResult is not null?", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r556037545", "createdAt": "2021-01-12T19:47:35Z", "author": {"login": "vramik"}, "path": "testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/federation/UserPropertyFileStorage.java", "diffHunk": "@@ -145,88 +148,59 @@ public int getUsersCount(RealmModel realm) {\n     }\n \n     @Override\n-    public List<UserModel> getUsers(RealmModel realm) {\n-        List<UserModel> users = new LinkedList<>();\n-        for (Object username : userPasswords.keySet()) {\n-            users.add(createUser(realm, (String)username));\n-        }\n-        return users;\n-    }\n-\n-    @Override\n-    public List<UserModel> searchForUser(Map<String, String> attributes, RealmModel realm) {\n-        return searchForUser(attributes, realm, 0, Integer.MAX_VALUE - 1);\n+    public Stream<UserModel> getUsersStream(RealmModel realm) {\n+        return userPasswords.keySet().stream()\n+                .map(username -> createUser(realm, (String) username));\n     }\n \n     @Override\n-    public List<UserModel> getUsers(RealmModel realm, int firstResult, int maxResults) {\n-        if (maxResults == 0) return Collections.EMPTY_LIST;\n-        List<UserModel> users = new LinkedList<>();\n-        int count = 0;\n-        for (Object un : userPasswords.keySet()) {\n-            if (count++ < firstResult) continue;\n-            String username = (String)un;\n-            users.add(createUser(realm, username));\n-            if (users.size() + 1 > maxResults) break;\n-        }\n-        return users;\n+    public Stream<UserModel> getUsersStream(RealmModel realm, Integer firstResult, Integer maxResults) {\n+        if (maxResults == 0) return Stream.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de4ed2a82ec206a083df5c409336170f2920093a"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwODUzNDA4OnYy", "diffSide": "RIGHT", "path": "server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMDowNDowMlrOITdibA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMDowNDowMlrOITdibA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzI3NzgwNA==", "bodyText": "This note needs elaborating\nThe paragraphs need to be separated by <p>", "url": "https://github.com/keycloak/keycloak/pull/7673#discussion_r557277804", "createdAt": "2021-01-14T10:04:02Z", "author": {"login": "hmlnarik"}, "path": "server-spi/src/main/java/org/keycloak/storage/user/UserQueryProvider.java", "diffHunk": "@@ -29,9 +29,17 @@\n import java.util.stream.Stream;\n \n /**\n- * Optional capability interface implemented by UserStorageProviders.\n  * Defines complex queries that are used to locate one or more users.  You must implement this interface\n- * if you want to view and manager users from the administration console.\n+ * if you want to view and manage users from the administration console.\n+ *\n+ * Optional capability interface implemented by UserStorageProviders.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623eb2f925816a0bfb14431974403170702cec08"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3248, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}