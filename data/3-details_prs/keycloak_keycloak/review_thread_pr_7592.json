{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4MTMyNDU3", "number": 7592, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNzo1NTowNlrOE3GeHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNzo1NTowNlrOE3GeHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MjEzMTQ4OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientIpAddressCondition.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNzo1NTowNlrOHwQBKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwODo0MDowMVrOHwRlcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM1NjEzOA==", "bodyText": "Minor typo in the name of the method (should be \"matched\")", "url": "https://github.com/keycloak/keycloak/pull/7592#discussion_r520356138", "createdAt": "2020-11-10T07:55:06Z", "author": {"login": "mposolda"}, "path": "services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientIpAddressCondition.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.services.clientpolicy.condition;\n+\n+import org.jboss.logging.Logger;\n+\n+import org.keycloak.component.ComponentModel;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.services.clientpolicy.ClientPolicyContext;\n+import org.keycloak.services.clientpolicy.ClientPolicyException;\n+import org.keycloak.services.clientpolicy.ClientPolicyLogger;\n+import org.keycloak.services.clientpolicy.ClientPolicyVote;\n+\n+public class ClientIpAddressCondition implements ClientPolicyConditionProvider {\n+\n+    private static final Logger logger = Logger.getLogger(ClientIpAddressCondition.class);\n+\n+    private final KeycloakSession session;\n+    private final ComponentModel componentModel;\n+\n+    public ClientIpAddressCondition(KeycloakSession session, ComponentModel componentModel) {\n+        this.session = session;\n+        this.componentModel = componentModel;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return componentModel.getName();\n+    }\n+\n+    @Override\n+    public String getProviderId() {\n+        return componentModel.getProviderId();\n+    }\n+\n+    @Override\n+    public ClientPolicyVote applyPolicy(ClientPolicyContext context) throws ClientPolicyException {\n+        switch (context.getEvent()) {\n+            case TOKEN_REQUEST:\n+            case TOKEN_REFRESH:\n+            case TOKEN_REVOKE:\n+            case TOKEN_INTROSPECT:\n+            case USERINFO_REQUEST:\n+            case LOGOUT_REQUEST:\n+                if (isIpAddressMathced()) return ClientPolicyVote.YES;\n+                return ClientPolicyVote.NO;\n+            default:\n+                return ClientPolicyVote.ABSTAIN;\n+        }\n+    }\n+\n+    private boolean isIpAddressMathced() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deba243f3bbc89944ff95d356f667c55fc67d898"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM4MTgxMQ==", "bodyText": "@mposolda Sorry. I'll fix as you pointed out.", "url": "https://github.com/keycloak/keycloak/pull/7592#discussion_r520381811", "createdAt": "2020-11-10T08:40:01Z", "author": {"login": "tnorimat"}, "path": "services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientIpAddressCondition.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.services.clientpolicy.condition;\n+\n+import org.jboss.logging.Logger;\n+\n+import org.keycloak.component.ComponentModel;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.services.clientpolicy.ClientPolicyContext;\n+import org.keycloak.services.clientpolicy.ClientPolicyException;\n+import org.keycloak.services.clientpolicy.ClientPolicyLogger;\n+import org.keycloak.services.clientpolicy.ClientPolicyVote;\n+\n+public class ClientIpAddressCondition implements ClientPolicyConditionProvider {\n+\n+    private static final Logger logger = Logger.getLogger(ClientIpAddressCondition.class);\n+\n+    private final KeycloakSession session;\n+    private final ComponentModel componentModel;\n+\n+    public ClientIpAddressCondition(KeycloakSession session, ComponentModel componentModel) {\n+        this.session = session;\n+        this.componentModel = componentModel;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return componentModel.getName();\n+    }\n+\n+    @Override\n+    public String getProviderId() {\n+        return componentModel.getProviderId();\n+    }\n+\n+    @Override\n+    public ClientPolicyVote applyPolicy(ClientPolicyContext context) throws ClientPolicyException {\n+        switch (context.getEvent()) {\n+            case TOKEN_REQUEST:\n+            case TOKEN_REFRESH:\n+            case TOKEN_REVOKE:\n+            case TOKEN_INTROSPECT:\n+            case USERINFO_REQUEST:\n+            case LOGOUT_REQUEST:\n+                if (isIpAddressMathced()) return ClientPolicyVote.YES;\n+                return ClientPolicyVote.NO;\n+            default:\n+                return ClientPolicyVote.ABSTAIN;\n+        }\n+    }\n+\n+    private boolean isIpAddressMathced() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM1NjEzOA=="}, "originalCommit": {"oid": "deba243f3bbc89944ff95d356f667c55fc67d898"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3177, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}