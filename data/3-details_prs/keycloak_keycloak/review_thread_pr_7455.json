{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1MzU5MTMx", "number": 7455, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNTo1MDozM1rOErPrYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNTo1MDozM1rOErPrYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzgxMDg5OnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/forms/SetClientNoteAuthenticator.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNTo1MDozM1rOHd6Eqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDoxMDoxMlrOHeggqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEyMjIxOQ==", "bodyText": "Do we really want to push whatever comes from the request to the session notes? Does not look safe for me ...\nI think that ideally, we should have some switch to enable/disable this on a per-flow basis or have a Transient Session Authenticator that always set this note to indicate whether or not sessions for that flow should be transient.", "url": "https://github.com/keycloak/keycloak/pull/7455#discussion_r501122219", "createdAt": "2020-10-07T15:50:33Z", "author": {"login": "pedroigor"}, "path": "testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/forms/SetClientNoteAuthenticator.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.keycloak.testsuite.forms;\n+\n+import java.util.List;\n+\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.Config;\n+import org.keycloak.authentication.AuthenticationFlowContext;\n+import org.keycloak.authentication.Authenticator;\n+import org.keycloak.authentication.AuthenticatorFactory;\n+import org.keycloak.models.AuthenticationExecutionModel;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.KeycloakSessionFactory;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserModel;\n+import org.keycloak.provider.ProviderConfigProperty;\n+import org.keycloak.sessions.AuthenticationSessionModel;\n+\n+/**\n+ * @author <a href=\"mailto:mposolda@redhat.com\">Marek Posolda</a>\n+ */\n+public class SetClientNoteAuthenticator implements Authenticator, AuthenticatorFactory {\n+\n+    protected static final Logger logger = Logger.getLogger(SetClientNoteAuthenticator.class);\n+\n+    public static final String PROVIDER_ID = \"set-client-note-authenticator\";\n+\n+    // Query parameters of this name will be used to save the client note to authentication session\n+    public static final String PREFIX = \"note-\";\n+\n+    @Override\n+    public void authenticate(AuthenticationFlowContext context) {\n+        MultivaluedMap<String, String> inputData = context.getHttpRequest().getDecodedFormParameters();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16e1ca8f5bf6e4f423842217feb6ea67fad08516"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEzNzY2NQ==", "bodyText": "Or maybe this is something that should be hardcoded for now into Docker protocol which is the initial problem we want to solve.", "url": "https://github.com/keycloak/keycloak/pull/7455#discussion_r501137665", "createdAt": "2020-10-07T16:11:39Z", "author": {"login": "pedroigor"}, "path": "testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/forms/SetClientNoteAuthenticator.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.keycloak.testsuite.forms;\n+\n+import java.util.List;\n+\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.Config;\n+import org.keycloak.authentication.AuthenticationFlowContext;\n+import org.keycloak.authentication.Authenticator;\n+import org.keycloak.authentication.AuthenticatorFactory;\n+import org.keycloak.models.AuthenticationExecutionModel;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.KeycloakSessionFactory;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserModel;\n+import org.keycloak.provider.ProviderConfigProperty;\n+import org.keycloak.sessions.AuthenticationSessionModel;\n+\n+/**\n+ * @author <a href=\"mailto:mposolda@redhat.com\">Marek Posolda</a>\n+ */\n+public class SetClientNoteAuthenticator implements Authenticator, AuthenticatorFactory {\n+\n+    protected static final Logger logger = Logger.getLogger(SetClientNoteAuthenticator.class);\n+\n+    public static final String PROVIDER_ID = \"set-client-note-authenticator\";\n+\n+    // Query parameters of this name will be used to save the client note to authentication session\n+    public static final String PREFIX = \"note-\";\n+\n+    @Override\n+    public void authenticate(AuthenticationFlowContext context) {\n+        MultivaluedMap<String, String> inputData = context.getHttpRequest().getDecodedFormParameters();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEyMjIxOQ=="}, "originalCommit": {"oid": "16e1ca8f5bf6e4f423842217feb6ea67fad08516"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIyODgyNg==", "bodyText": "@pedroigor Sure, this is not safe. This is testsuite-only authenticator, which is not intended to be ever used in production. I've used authenticator just to be able to test this for the OAuth2 DirectGrant, as the Docker protocol automated tests don't work.\nAs you pointed, in case of the docker protocol, it is currently hardcoded - the note is set in the DockerEndpoint class. Other protocols (OIDC, SAML) currently don't have support for transient session in this PR - with the only exception of the testsuite, which have this SetClientNoteAuthenticator .\nDo you think that we need authenticator to be added to the main codebase to be able to have transient sessions per flow? I can think that OAuth2 Resource Owner Password Credentials Grant (Direct Grant) in some cases doesn't need user session at all. AFAIK Sometimes people use DirectGrant just for the single authentication to some CLI app and never need to refresh or introspect tokens etc. Not sure if this is useful also for some other protocols - like for example SAML ECP? WDYT?", "url": "https://github.com/keycloak/keycloak/pull/7455#discussion_r501228826", "createdAt": "2020-10-07T18:35:30Z", "author": {"login": "mposolda"}, "path": "testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/forms/SetClientNoteAuthenticator.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.keycloak.testsuite.forms;\n+\n+import java.util.List;\n+\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.Config;\n+import org.keycloak.authentication.AuthenticationFlowContext;\n+import org.keycloak.authentication.Authenticator;\n+import org.keycloak.authentication.AuthenticatorFactory;\n+import org.keycloak.models.AuthenticationExecutionModel;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.KeycloakSessionFactory;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserModel;\n+import org.keycloak.provider.ProviderConfigProperty;\n+import org.keycloak.sessions.AuthenticationSessionModel;\n+\n+/**\n+ * @author <a href=\"mailto:mposolda@redhat.com\">Marek Posolda</a>\n+ */\n+public class SetClientNoteAuthenticator implements Authenticator, AuthenticatorFactory {\n+\n+    protected static final Logger logger = Logger.getLogger(SetClientNoteAuthenticator.class);\n+\n+    public static final String PROVIDER_ID = \"set-client-note-authenticator\";\n+\n+    // Query parameters of this name will be used to save the client note to authentication session\n+    public static final String PREFIX = \"note-\";\n+\n+    @Override\n+    public void authenticate(AuthenticationFlowContext context) {\n+        MultivaluedMap<String, String> inputData = context.getHttpRequest().getDecodedFormParameters();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEyMjIxOQ=="}, "originalCommit": {"oid": "16e1ca8f5bf6e4f423842217feb6ea67fad08516"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI1Mjk4MA==", "bodyText": "Ohh, sorry. Didn't notice it was related to the test suite.\nBut yeah, I'm OK with having something in the main codebase to achieve that. Not sure if the authenticator approach is the best path though ... At the same time, I'm not sure if adding a config option to authentication flows is something we want to do.\nSAML ECP is a good example, yeah.\nBtw, transient sessions should not work if later you try to introspect the token using the token introspection endpoint, right? I mean, people should be aware that the lifetime of tokens issued using a transient session is bound to their time-related claims and can/should only be validated locally by the resource server. And no support for revocation but wait until the time-related claims become invalid.", "url": "https://github.com/keycloak/keycloak/pull/7455#discussion_r501252980", "createdAt": "2020-10-07T19:19:30Z", "author": {"login": "pedroigor"}, "path": "testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/forms/SetClientNoteAuthenticator.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.keycloak.testsuite.forms;\n+\n+import java.util.List;\n+\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.Config;\n+import org.keycloak.authentication.AuthenticationFlowContext;\n+import org.keycloak.authentication.Authenticator;\n+import org.keycloak.authentication.AuthenticatorFactory;\n+import org.keycloak.models.AuthenticationExecutionModel;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.KeycloakSessionFactory;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserModel;\n+import org.keycloak.provider.ProviderConfigProperty;\n+import org.keycloak.sessions.AuthenticationSessionModel;\n+\n+/**\n+ * @author <a href=\"mailto:mposolda@redhat.com\">Marek Posolda</a>\n+ */\n+public class SetClientNoteAuthenticator implements Authenticator, AuthenticatorFactory {\n+\n+    protected static final Logger logger = Logger.getLogger(SetClientNoteAuthenticator.class);\n+\n+    public static final String PROVIDER_ID = \"set-client-note-authenticator\";\n+\n+    // Query parameters of this name will be used to save the client note to authentication session\n+    public static final String PREFIX = \"note-\";\n+\n+    @Override\n+    public void authenticate(AuthenticationFlowContext context) {\n+        MultivaluedMap<String, String> inputData = context.getHttpRequest().getDecodedFormParameters();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEyMjIxOQ=="}, "originalCommit": {"oid": "16e1ca8f5bf6e4f423842217feb6ea67fad08516"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2MTY5OA==", "bodyText": "Btw, transient sessions should not work if later you try to introspect the token using the token introspection endpoint, right?\n\nThat's a good point, there should be a docs update in https://www.keycloak.org/docs/latest/server_admin/#_docker\nThe PR looks good to me as is once the docs are in place. My proposal would be to merge this PR as is once the docs are ready, and include no authenticator or other means to set the client note in the main code base now. It is straightforward to mark the session to be transient, and the best means to do so may depend on the particular use case. @pedroigor WDYT?", "url": "https://github.com/keycloak/keycloak/pull/7455#discussion_r501561698", "createdAt": "2020-10-08T09:04:10Z", "author": {"login": "hmlnarik"}, "path": "testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/forms/SetClientNoteAuthenticator.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.keycloak.testsuite.forms;\n+\n+import java.util.List;\n+\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.Config;\n+import org.keycloak.authentication.AuthenticationFlowContext;\n+import org.keycloak.authentication.Authenticator;\n+import org.keycloak.authentication.AuthenticatorFactory;\n+import org.keycloak.models.AuthenticationExecutionModel;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.KeycloakSessionFactory;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserModel;\n+import org.keycloak.provider.ProviderConfigProperty;\n+import org.keycloak.sessions.AuthenticationSessionModel;\n+\n+/**\n+ * @author <a href=\"mailto:mposolda@redhat.com\">Marek Posolda</a>\n+ */\n+public class SetClientNoteAuthenticator implements Authenticator, AuthenticatorFactory {\n+\n+    protected static final Logger logger = Logger.getLogger(SetClientNoteAuthenticator.class);\n+\n+    public static final String PROVIDER_ID = \"set-client-note-authenticator\";\n+\n+    // Query parameters of this name will be used to save the client note to authentication session\n+    public static final String PREFIX = \"note-\";\n+\n+    @Override\n+    public void authenticate(AuthenticationFlowContext context) {\n+        MultivaluedMap<String, String> inputData = context.getHttpRequest().getDecodedFormParameters();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEyMjIxOQ=="}, "originalCommit": {"oid": "16e1ca8f5bf6e4f423842217feb6ea67fad08516"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU3Mzk1Nw==", "bodyText": "@hmlnarik @pedroigor Well, I am starting to think that Authenticator approach may be nice and will have some advantages :) Administrator can decide if he wants to create transient session by simply adding the authenticator to the authentication flow. May be useful for DirectGrant or SAML ECP. For Docker protocol, we can have this authenticator in the flow by default, but admin will have a chance to remove it if he wants and have sessions persistent for docker as well for some reason.\nAuthenticatior will have some additional flexibility that administrator may want to persist sessions just under specified condition (hence the authenticator can be added to some conditional subflow and be triggered just in case of the condition passed)... This is something, which won't be easily available if we have this as hardcoded option of the authentication flow.\nOn the other hand, this won't be classic \"Authenticator\", but rather some kind of interceptor in the authentication flow. But our Authentication SPI don't have this concept, so just use it as implementation of \"Authenticator\" interface can be possible.\nSo my ideal way would be to change this PR to have the Authenticator approach, but if you prefer, I can keep it as is and just update the documentation. WDYT?\nI agree that docs will need to be updated. As pointed, transient session would mean that introspection, \"refresh token\" or \"Revoke session\" won't be possible. I will update the docs once we refine whether to go with authenticator approach or keep the PR as is.", "url": "https://github.com/keycloak/keycloak/pull/7455#discussion_r501573957", "createdAt": "2020-10-08T09:23:40Z", "author": {"login": "mposolda"}, "path": "testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/forms/SetClientNoteAuthenticator.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.keycloak.testsuite.forms;\n+\n+import java.util.List;\n+\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.Config;\n+import org.keycloak.authentication.AuthenticationFlowContext;\n+import org.keycloak.authentication.Authenticator;\n+import org.keycloak.authentication.AuthenticatorFactory;\n+import org.keycloak.models.AuthenticationExecutionModel;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.KeycloakSessionFactory;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserModel;\n+import org.keycloak.provider.ProviderConfigProperty;\n+import org.keycloak.sessions.AuthenticationSessionModel;\n+\n+/**\n+ * @author <a href=\"mailto:mposolda@redhat.com\">Marek Posolda</a>\n+ */\n+public class SetClientNoteAuthenticator implements Authenticator, AuthenticatorFactory {\n+\n+    protected static final Logger logger = Logger.getLogger(SetClientNoteAuthenticator.class);\n+\n+    public static final String PROVIDER_ID = \"set-client-note-authenticator\";\n+\n+    // Query parameters of this name will be used to save the client note to authentication session\n+    public static final String PREFIX = \"note-\";\n+\n+    @Override\n+    public void authenticate(AuthenticationFlowContext context) {\n+        MultivaluedMap<String, String> inputData = context.getHttpRequest().getDecodedFormParameters();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEyMjIxOQ=="}, "originalCommit": {"oid": "16e1ca8f5bf6e4f423842217feb6ea67fad08516"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY0MjA1MQ==", "bodyText": "The authenticator approach it is certainly interesting and possible way to deal with it, yet I am not convinced yet it's the right way. For example, there is no separate SAML / ECP flow so it would not be possible to use an authenticator in this case.\nAt this moment, I'd proceed with this PR as is, and only follow up with a common approach once we have it.", "url": "https://github.com/keycloak/keycloak/pull/7455#discussion_r501642051", "createdAt": "2020-10-08T11:19:54Z", "author": {"login": "hmlnarik"}, "path": "testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/forms/SetClientNoteAuthenticator.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.keycloak.testsuite.forms;\n+\n+import java.util.List;\n+\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.Config;\n+import org.keycloak.authentication.AuthenticationFlowContext;\n+import org.keycloak.authentication.Authenticator;\n+import org.keycloak.authentication.AuthenticatorFactory;\n+import org.keycloak.models.AuthenticationExecutionModel;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.KeycloakSessionFactory;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserModel;\n+import org.keycloak.provider.ProviderConfigProperty;\n+import org.keycloak.sessions.AuthenticationSessionModel;\n+\n+/**\n+ * @author <a href=\"mailto:mposolda@redhat.com\">Marek Posolda</a>\n+ */\n+public class SetClientNoteAuthenticator implements Authenticator, AuthenticatorFactory {\n+\n+    protected static final Logger logger = Logger.getLogger(SetClientNoteAuthenticator.class);\n+\n+    public static final String PROVIDER_ID = \"set-client-note-authenticator\";\n+\n+    // Query parameters of this name will be used to save the client note to authentication session\n+    public static final String PREFIX = \"note-\";\n+\n+    @Override\n+    public void authenticate(AuthenticationFlowContext context) {\n+        MultivaluedMap<String, String> inputData = context.getHttpRequest().getDecodedFormParameters();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEyMjIxOQ=="}, "originalCommit": {"oid": "16e1ca8f5bf6e4f423842217feb6ea67fad08516"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY2MjA4Ng==", "bodyText": "I agree. I'm still not 100% sure about the Authenticator but is what we have ... @mposolda I agree this looks like a new concept (or, potentially, a new configuration option for Authentication Flows).\nIn any case, LGTM. Perhaps we should make this somehow tech-preview and advertize that it may change in the future.", "url": "https://github.com/keycloak/keycloak/pull/7455#discussion_r501662086", "createdAt": "2020-10-08T11:57:12Z", "author": {"login": "pedroigor"}, "path": "testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/forms/SetClientNoteAuthenticator.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.keycloak.testsuite.forms;\n+\n+import java.util.List;\n+\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.Config;\n+import org.keycloak.authentication.AuthenticationFlowContext;\n+import org.keycloak.authentication.Authenticator;\n+import org.keycloak.authentication.AuthenticatorFactory;\n+import org.keycloak.models.AuthenticationExecutionModel;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.KeycloakSessionFactory;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserModel;\n+import org.keycloak.provider.ProviderConfigProperty;\n+import org.keycloak.sessions.AuthenticationSessionModel;\n+\n+/**\n+ * @author <a href=\"mailto:mposolda@redhat.com\">Marek Posolda</a>\n+ */\n+public class SetClientNoteAuthenticator implements Authenticator, AuthenticatorFactory {\n+\n+    protected static final Logger logger = Logger.getLogger(SetClientNoteAuthenticator.class);\n+\n+    public static final String PROVIDER_ID = \"set-client-note-authenticator\";\n+\n+    // Query parameters of this name will be used to save the client note to authentication session\n+    public static final String PREFIX = \"note-\";\n+\n+    @Override\n+    public void authenticate(AuthenticationFlowContext context) {\n+        MultivaluedMap<String, String> inputData = context.getHttpRequest().getDecodedFormParameters();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEyMjIxOQ=="}, "originalCommit": {"oid": "16e1ca8f5bf6e4f423842217feb6ea67fad08516"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1MTk3Nw==", "bodyText": "@hmlnarik @pedroigor Ok, Thanks. Let's wait with the authenticator or something else to later if needed. The docs PR is here keycloak/keycloak-documentation#1045 .\nI did not know SAML ECP profile does not have separate flow, Thanks for clarifying. I somehow assumed that yes based on the fact that Direct grant (OAuth2 Resource Owner PAssword Credentials) has it and I though this is somehow similar.", "url": "https://github.com/keycloak/keycloak/pull/7455#discussion_r501751977", "createdAt": "2020-10-08T14:10:12Z", "author": {"login": "mposolda"}, "path": "testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/forms/SetClientNoteAuthenticator.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.keycloak.testsuite.forms;\n+\n+import java.util.List;\n+\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.Config;\n+import org.keycloak.authentication.AuthenticationFlowContext;\n+import org.keycloak.authentication.Authenticator;\n+import org.keycloak.authentication.AuthenticatorFactory;\n+import org.keycloak.models.AuthenticationExecutionModel;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.KeycloakSessionFactory;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserModel;\n+import org.keycloak.provider.ProviderConfigProperty;\n+import org.keycloak.sessions.AuthenticationSessionModel;\n+\n+/**\n+ * @author <a href=\"mailto:mposolda@redhat.com\">Marek Posolda</a>\n+ */\n+public class SetClientNoteAuthenticator implements Authenticator, AuthenticatorFactory {\n+\n+    protected static final Logger logger = Logger.getLogger(SetClientNoteAuthenticator.class);\n+\n+    public static final String PROVIDER_ID = \"set-client-note-authenticator\";\n+\n+    // Query parameters of this name will be used to save the client note to authentication session\n+    public static final String PREFIX = \"note-\";\n+\n+    @Override\n+    public void authenticate(AuthenticationFlowContext context) {\n+        MultivaluedMap<String, String> inputData = context.getHttpRequest().getDecodedFormParameters();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEyMjIxOQ=="}, "originalCommit": {"oid": "16e1ca8f5bf6e4f423842217feb6ea67fad08516"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3360, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}