{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwMjk3MzAy", "number": 7540, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwODo0NDoxNVrOE67uAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxOTo1Njo0M1rOFWWoNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjMxMjk3OnYy", "diffSide": "LEFT", "path": "services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwODo0NDoxNVrOH2SRvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwODo0NDoxNVrOH2SRvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY4NDYwNQ==", "bodyText": "Is it possible to avoid changes in this class in this PR?", "url": "https://github.com/keycloak/keycloak/pull/7540#discussion_r526684605", "createdAt": "2020-11-19T08:44:15Z", "author": {"login": "mposolda"}, "path": "services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java", "diffHunk": "@@ -976,12 +976,12 @@ public Response authenticateOnly() throws AuthenticationFlowException {\n         AuthenticationFlow authenticationFlow = createFlowExecution(this.flowId, null);\n         Response challenge = authenticationFlow.processFlow();\n         if (challenge != null) return challenge;\n-        if (authenticationSession.getAuthenticatedUser() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "203e1ad2a0abdf7e262d0e26da7aeba1e71ab6e3"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4ODgyNTYxOnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/authentication/AbstractAuthenticationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNjoxMzowMVrOIfKQIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNjoxMzowMVrOIfKQIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTU0NDczNw==", "bodyText": "This looks like a typo added by accident?", "url": "https://github.com/keycloak/keycloak/pull/7540#discussion_r569544737", "createdAt": "2021-02-03T16:13:01Z", "author": {"login": "mposolda"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/authentication/AbstractAuthenticationTest.java", "diffHunk": "@@ -193,7 +193,7 @@ AuthenticatorConfigRepresentation newConfig(String alias, String[] keyvalues) {\n         return config;\n     }\n \n-    void createFlow(AuthenticationFlowRepresentation flowRep) {\n+    void createFlow(AuthenticationFlowRepresentation flowRep) {//", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97f202a95506b07051a8d7a6e5805b713cf0ff6f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4OTgzNzM1OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/authentication/authenticators/broker/IdpDetectExistingBrokerUserAuthenticator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxOTo1Njo0M1rOIfUIhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxOTo1Njo0M1rOIfUIhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTcwNjYzMQ==", "bodyText": "I see in the test, that user will see \"Invalid username or error\", which doesn't look like correct error message. There will be probably some better message like \"Invalid user\" ? It is available as a constant Messages.INVALID_USER.\nFor the inspiration, I suggest to take a look for example here https://github.com/keycloak/keycloak/blob/12.0.0/services/src/main/java/org/keycloak/authentication/authenticators/broker/IdpCreateUserIfUniqueAuthenticator.java#L103 for how to throw the error message and ensure that correct event is triggered.", "url": "https://github.com/keycloak/keycloak/pull/7540#discussion_r569706631", "createdAt": "2021-02-03T19:56:43Z", "author": {"login": "mposolda"}, "path": "services/src/main/java/org/keycloak/authentication/authenticators/broker/IdpDetectExistingBrokerUserAuthenticator.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2016 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.authentication.authenticators.broker;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.authentication.AuthenticationFlowContext;\n+import org.keycloak.authentication.authenticators.broker.util.ExistingUserInfo;\n+import org.keycloak.authentication.authenticators.broker.util.SerializedBrokeredIdentityContext;\n+import org.keycloak.broker.provider.BrokeredIdentityContext;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserModel;\n+import org.keycloak.services.ServicesLogger;\n+\n+import static org.keycloak.authentication.AuthenticationFlowError.UNKNOWN_USER;\n+\n+public class IdpDetectExistingBrokerUserAuthenticator extends IdpCreateUserIfUniqueAuthenticator {\n+\n+    private static final Logger logger = Logger.getLogger(IdpDetectExistingBrokerUserAuthenticator.class);\n+\n+    @Override\n+    protected void authenticateImpl(AuthenticationFlowContext context, SerializedBrokeredIdentityContext serializedCtx, BrokeredIdentityContext brokerContext) {\n+\n+        RealmModel realm = context.getRealm();\n+\n+        if (context.getAuthenticationSession().getAuthNote(EXISTING_USER_INFO) != null) {\n+            context.attempted();\n+            return;\n+        }\n+\n+        String username = getUsername(context, serializedCtx, brokerContext);\n+        if (username == null) {\n+            ServicesLogger.LOGGER.resetFlow(realm.isRegistrationEmailAsUsername() ? \"Email\" : \"Username\");\n+            context.getAuthenticationSession().setAuthNote(ENFORCE_UPDATE_PROFILE, \"true\");\n+            context.resetFlow();\n+            return;\n+        }\n+\n+        ExistingUserInfo duplication = checkExistingUser(context, username, serializedCtx, brokerContext);\n+\n+        if (duplication == null) {\n+            logger.errorf(\"The user %s should be already registered in the realm to login  %s\",username,  realm.getName());\n+            context.failure(UNKNOWN_USER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97f202a95506b07051a8d7a6e5805b713cf0ff6f"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3305, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}