{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwMzg0MDA0", "number": 7395, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjoxMToyMFrOEhpJGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNTo0NTozMVrOEhvEFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzEyNTM2OnYy", "diffSide": "LEFT", "path": "services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjoxMToyMFrOHPEUrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNzowNzoxNFrOHPl87A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU2MTUxNg==", "bodyText": "Maybe it is possible to add the condition like \"if (log.isTraceEnabled()\" or something like that to save the iterations over the streams in case that logging is not enabled. Maybe very little performance improvement, but it will be probably there?", "url": "https://github.com/keycloak/keycloak/pull/7395#discussion_r485561516", "createdAt": "2020-09-09T12:11:20Z", "author": {"login": "mposolda"}, "path": "services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java", "diffHunk": "@@ -61,13 +60,10 @@ public ClientPolicyVote applyPolicy(ClientPolicyContext context) throws ClientPo\n     private boolean isRolesMatched(ClientModel client) {\n         if (client == null) return false;\n \n-        List<String> rolesForMatching = getRolesForMatching();\n+        Stream<String> rolesForMatching = getRolesStreamForMatching();\n         if (rolesForMatching == null) return false;\n \n-        client.getRoles().stream().forEach(i -> ClientPolicyLogger.log(logger, \"client role = \" + i.getName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e910adf76db84a5be75b068b789268de6790f709"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExMjQ5Mg==", "bodyText": "@mposolda Yes, I'll check whether the log level is trace at first. If so, logging the event in order not to call stream regardless of the log level for considering the performance.", "url": "https://github.com/keycloak/keycloak/pull/7395#discussion_r486112492", "createdAt": "2020-09-10T07:07:14Z", "author": {"login": "tnorimat"}, "path": "services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java", "diffHunk": "@@ -61,13 +60,10 @@ public ClientPolicyVote applyPolicy(ClientPolicyContext context) throws ClientPo\n     private boolean isRolesMatched(ClientModel client) {\n         if (client == null) return false;\n \n-        List<String> rolesForMatching = getRolesForMatching();\n+        Stream<String> rolesForMatching = getRolesStreamForMatching();\n         if (rolesForMatching == null) return false;\n \n-        client.getRoles().stream().forEach(i -> ClientPolicyLogger.log(logger, \"client role = \" + i.getName()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU2MTUxNg=="}, "originalCommit": {"oid": "e910adf76db84a5be75b068b789268de6790f709"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzk3ODM2OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNToxOTozOFrOHPMkZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMTo1OToyMVrOHPgJsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY5NjYxNA==", "bodyText": "There is no need in else block here, one can do:\n if (roles == null) {\n      return null;\n}\nreturn roles.stream();", "url": "https://github.com/keycloak/keycloak/pull/7395#discussion_r485696614", "createdAt": "2020-09-09T15:19:38Z", "author": {"login": "valb3r"}, "path": "services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java", "diffHunk": "@@ -76,8 +72,14 @@ private boolean isRolesMatched(ClientModel client) {\n         return isMatched;\n     }\n \n-    private List<String> getRolesForMatching() {\n-        return componentModel.getConfig().get(TestClientRolesConditionFactory.ROLES);\n+    private Stream<String> getRolesStreamForMatching() {\n+        if (componentModel.getConfig() == null) return null;\n+        List<String> roles = componentModel.getConfig().get(ClientRolesConditionFactory.ROLES);\n+        if (roles == null) {\n+            return null;\n+        } else {\n+            return roles.stream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e910adf76db84a5be75b068b789268de6790f709"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAxNzQ1OA==", "bodyText": "@valb3r Thank you. I'll revise codes as you pointed out.", "url": "https://github.com/keycloak/keycloak/pull/7395#discussion_r486017458", "createdAt": "2020-09-10T01:59:21Z", "author": {"login": "tnorimat"}, "path": "services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java", "diffHunk": "@@ -76,8 +72,14 @@ private boolean isRolesMatched(ClientModel client) {\n         return isMatched;\n     }\n \n-    private List<String> getRolesForMatching() {\n-        return componentModel.getConfig().get(TestClientRolesConditionFactory.ROLES);\n+    private Stream<String> getRolesStreamForMatching() {\n+        if (componentModel.getConfig() == null) return null;\n+        List<String> roles = componentModel.getConfig().get(ClientRolesConditionFactory.ROLES);\n+        if (roles == null) {\n+            return null;\n+        } else {\n+            return roles.stream();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY5NjYxNA=="}, "originalCommit": {"oid": "e910adf76db84a5be75b068b789268de6790f709"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODA1NzU1OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNTozNzoyN1rOHPNWog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwOToyMzoyOVrOHPq74w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcwOTQ3NA==", "bodyText": "This line seem to have performance bottleneck client.getRolesStream() stream is opened for each element of rolesForMatching\nI would propose something of (using Sets from Guava) as it may improve readabiliy - Sets.intersection instead of anyMatch(i -> anyMatch):\nprivate boolean isRolesMatched(ClientModel client) {\n        if (client == null) return false;\n\n        Set<String> rolesForMatching = getRolesStreamForMatching();\n        if (rolesForMatching == null) return false;\n\n        Set<String> clientRoles = client.getRolesStream().map(RoleModel::getName).collect(Collectors.toSet());\n        boolean isMatched = !Sets.intersection(clientRoles, rolesForMatching).isEmpty();\n        \n        if (isMatched) {\n            ClientPolicyLogger.log(logger, \"role matched.\");\n        } else {\n            ClientPolicyLogger.log(logger, \"role unmatched.\");\n        }\n        return isMatched;\n    }\n\n    private Set<String> getRolesStreamForMatching() {\n        if (componentModel.getConfig() == null) return null;\n        List<String> roles = componentModel.getConfig().get(ClientRolesConditionFactory.ROLES);\n        if (roles == null) {\n            return null;\n        }\n\n        return new HashSet<>(roles);\n    }\n\n@mposolda What do you think (gauva is already available in BOM)?", "url": "https://github.com/keycloak/keycloak/pull/7395#discussion_r485709474", "createdAt": "2020-09-09T15:37:27Z", "author": {"login": "valb3r"}, "path": "services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java", "diffHunk": "@@ -61,13 +60,10 @@ public ClientPolicyVote applyPolicy(ClientPolicyContext context) throws ClientPo\n     private boolean isRolesMatched(ClientModel client) {\n         if (client == null) return false;\n \n-        List<String> rolesForMatching = getRolesForMatching();\n+        Stream<String> rolesForMatching = getRolesStreamForMatching();\n         if (rolesForMatching == null) return false;\n \n-        client.getRoles().stream().forEach(i -> ClientPolicyLogger.log(logger, \"client role = \" + i.getName()));\n-        rolesForMatching.stream().forEach(i -> ClientPolicyLogger.log(logger, \"roles expected = \" + i));\n-\n-        boolean isMatched = rolesForMatching.stream().anyMatch(i->client.getRoles().stream().anyMatch(j->j.getName().equals(i)));\n+        boolean isMatched = rolesForMatching.anyMatch(i->client.getRolesStream().anyMatch(j->j.getName().equals(i)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e910adf76db84a5be75b068b789268de6790f709"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExNDQyOQ==", "bodyText": "It seems that Sets is not used in the current keycloak. If Sets is introduced, this PR is the first time to use Sets.\n@mposolda Should we introduce Sets to improve the performance of set operation or not?", "url": "https://github.com/keycloak/keycloak/pull/7395#discussion_r486114429", "createdAt": "2020-09-10T07:11:03Z", "author": {"login": "tnorimat"}, "path": "services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java", "diffHunk": "@@ -61,13 +60,10 @@ public ClientPolicyVote applyPolicy(ClientPolicyContext context) throws ClientPo\n     private boolean isRolesMatched(ClientModel client) {\n         if (client == null) return false;\n \n-        List<String> rolesForMatching = getRolesForMatching();\n+        Stream<String> rolesForMatching = getRolesStreamForMatching();\n         if (rolesForMatching == null) return false;\n \n-        client.getRoles().stream().forEach(i -> ClientPolicyLogger.log(logger, \"client role = \" + i.getName()));\n-        rolesForMatching.stream().forEach(i -> ClientPolicyLogger.log(logger, \"roles expected = \" + i));\n-\n-        boolean isMatched = rolesForMatching.stream().anyMatch(i->client.getRoles().stream().anyMatch(j->j.getName().equals(i)));\n+        boolean isMatched = rolesForMatching.anyMatch(i->client.getRolesStream().anyMatch(j->j.getName().equals(i)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcwOTQ3NA=="}, "originalCommit": {"oid": "e910adf76db84a5be75b068b789268de6790f709"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjEyOTU1OQ==", "bodyText": "It can be done without Sets\n private boolean setsIntersect(Set<String> first, Set<String> second) {\n        return new HashSet<>(first).removeAll(second);\n    }\n\nalso defensive copying for current code is not needed, so\n private boolean setsIntersect(Set<String> first, Set<String> second) {\n        return first.removeAll(second);\n    }", "url": "https://github.com/keycloak/keycloak/pull/7395#discussion_r486129559", "createdAt": "2020-09-10T07:39:05Z", "author": {"login": "valb3r"}, "path": "services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java", "diffHunk": "@@ -61,13 +60,10 @@ public ClientPolicyVote applyPolicy(ClientPolicyContext context) throws ClientPo\n     private boolean isRolesMatched(ClientModel client) {\n         if (client == null) return false;\n \n-        List<String> rolesForMatching = getRolesForMatching();\n+        Stream<String> rolesForMatching = getRolesStreamForMatching();\n         if (rolesForMatching == null) return false;\n \n-        client.getRoles().stream().forEach(i -> ClientPolicyLogger.log(logger, \"client role = \" + i.getName()));\n-        rolesForMatching.stream().forEach(i -> ClientPolicyLogger.log(logger, \"roles expected = \" + i));\n-\n-        boolean isMatched = rolesForMatching.stream().anyMatch(i->client.getRoles().stream().anyMatch(j->j.getName().equals(i)));\n+        boolean isMatched = rolesForMatching.anyMatch(i->client.getRolesStream().anyMatch(j->j.getName().equals(i)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcwOTQ3NA=="}, "originalCommit": {"oid": "e910adf76db84a5be75b068b789268de6790f709"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE5NDE0Nw==", "bodyText": "@valb3r I see, I'll use Set.removeAll for set operation.", "url": "https://github.com/keycloak/keycloak/pull/7395#discussion_r486194147", "createdAt": "2020-09-10T09:23:29Z", "author": {"login": "tnorimat"}, "path": "services/src/main/java/org/keycloak/services/clientpolicy/condition/ClientRolesCondition.java", "diffHunk": "@@ -61,13 +60,10 @@ public ClientPolicyVote applyPolicy(ClientPolicyContext context) throws ClientPo\n     private boolean isRolesMatched(ClientModel client) {\n         if (client == null) return false;\n \n-        List<String> rolesForMatching = getRolesForMatching();\n+        Stream<String> rolesForMatching = getRolesStreamForMatching();\n         if (rolesForMatching == null) return false;\n \n-        client.getRoles().stream().forEach(i -> ClientPolicyLogger.log(logger, \"client role = \" + i.getName()));\n-        rolesForMatching.stream().forEach(i -> ClientPolicyLogger.log(logger, \"roles expected = \" + i));\n-\n-        boolean isMatched = rolesForMatching.stream().anyMatch(i->client.getRoles().stream().anyMatch(j->j.getName().equals(i)));\n+        boolean isMatched = rolesForMatching.anyMatch(i->client.getRolesStream().anyMatch(j->j.getName().equals(i)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcwOTQ3NA=="}, "originalCommit": {"oid": "e910adf76db84a5be75b068b789268de6790f709"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODA2NDIwOnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNTozODo1M1rOHPNarA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNzoxMTo0NlrOHPmF2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcxMDUwOA==", "bodyText": "ClientRolesCondition is duplicated many times, maybe we can introduce constant for it?", "url": "https://github.com/keycloak/keycloak/pull/7395#discussion_r485710508", "createdAt": "2020-09-09T15:38:53Z", "author": {"login": "valb3r"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java", "diffHunk": "@@ -399,21 +399,21 @@ public void testCreateUpdateDeleteConditionRuntime() throws ClientRegistrationEx\n         try {\n             successfulLoginAndLogout(clientId, clientSecret);\n  \n-            createCondition(\"TestClientRolesCondition\", TestClientRolesConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n+            createCondition(\"ClientRolesCondition\", ClientRolesConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e910adf76db84a5be75b068b789268de6790f709"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExNDc3Nw==", "bodyText": "@valb3r Thank you. I'll revise codes as you suggested.", "url": "https://github.com/keycloak/keycloak/pull/7395#discussion_r486114777", "createdAt": "2020-09-10T07:11:46Z", "author": {"login": "tnorimat"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java", "diffHunk": "@@ -399,21 +399,21 @@ public void testCreateUpdateDeleteConditionRuntime() throws ClientRegistrationEx\n         try {\n             successfulLoginAndLogout(clientId, clientSecret);\n  \n-            createCondition(\"TestClientRolesCondition\", TestClientRolesConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n+            createCondition(\"ClientRolesCondition\", ClientRolesConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcxMDUwOA=="}, "originalCommit": {"oid": "e910adf76db84a5be75b068b789268de6790f709"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODA5NTE0OnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNTo0NToyNFrOHPNtcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNzoxMjowMVrOHPmGYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcxNTMxNQ==", "bodyText": "Suggest to introduce constant for \"ClientRolesCondition-alpha\"", "url": "https://github.com/keycloak/keycloak/pull/7395#discussion_r485715315", "createdAt": "2020-09-09T15:45:24Z", "author": {"login": "valb3r"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java", "diffHunk": "@@ -491,11 +491,11 @@ public void testMultiplePolicies() throws ClientRegistrationException, ClientPol\n         createPolicy(policyAlphaName, DefaultClientPolicyProviderFactory.PROVIDER_ID, null, null, null);\n         logger.info(\"... Created Policy : \" + policyAlphaName);\n \n-        createCondition(\"TestClientRolesCondition-alpha\", TestClientRolesConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n+        createCondition(\"ClientRolesCondition-alpha\", ClientRolesConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e910adf76db84a5be75b068b789268de6790f709"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExNDkxMg==", "bodyText": "@valb3r Thank you. I'll revise codes as you suggested.", "url": "https://github.com/keycloak/keycloak/pull/7395#discussion_r486114912", "createdAt": "2020-09-10T07:12:01Z", "author": {"login": "tnorimat"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java", "diffHunk": "@@ -491,11 +491,11 @@ public void testMultiplePolicies() throws ClientRegistrationException, ClientPol\n         createPolicy(policyAlphaName, DefaultClientPolicyProviderFactory.PROVIDER_ID, null, null, null);\n         logger.info(\"... Created Policy : \" + policyAlphaName);\n \n-        createCondition(\"TestClientRolesCondition-alpha\", TestClientRolesConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n+        createCondition(\"ClientRolesCondition-alpha\", ClientRolesConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcxNTMxNQ=="}, "originalCommit": {"oid": "e910adf76db84a5be75b068b789268de6790f709"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODA5NTU2OnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNTo0NTozMVrOHPNtug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNzoxMjoxMVrOHPmGvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcxNTM4Ng==", "bodyText": "Suggest to introduce constant for \"ClientRolesCondition-beta\"", "url": "https://github.com/keycloak/keycloak/pull/7395#discussion_r485715386", "createdAt": "2020-09-09T15:45:31Z", "author": {"login": "valb3r"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java", "diffHunk": "@@ -515,11 +515,11 @@ public void testMultiplePolicies() throws ClientRegistrationException, ClientPol\n         createPolicy(policyBetaName, DefaultClientPolicyProviderFactory.PROVIDER_ID, null, null, null);\n         logger.info(\"... Created Policy : \" + policyBetaName);\n \n-        createCondition(\"TestClientRolesCondition-beta\", TestClientRolesConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n+        createCondition(\"ClientRolesCondition-beta\", ClientRolesConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e910adf76db84a5be75b068b789268de6790f709"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExNTAwNA==", "bodyText": "@valb3r Thank you. I'll revise codes as you suggested.", "url": "https://github.com/keycloak/keycloak/pull/7395#discussion_r486115004", "createdAt": "2020-09-10T07:12:11Z", "author": {"login": "tnorimat"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/ClientPolicyBasicsTest.java", "diffHunk": "@@ -515,11 +515,11 @@ public void testMultiplePolicies() throws ClientRegistrationException, ClientPol\n         createPolicy(policyBetaName, DefaultClientPolicyProviderFactory.PROVIDER_ID, null, null, null);\n         logger.info(\"... Created Policy : \" + policyBetaName);\n \n-        createCondition(\"TestClientRolesCondition-beta\", TestClientRolesConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {\n+        createCondition(\"ClientRolesCondition-beta\", ClientRolesConditionFactory.PROVIDER_ID, null, (ComponentRepresentation provider) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcxNTM4Ng=="}, "originalCommit": {"oid": "e910adf76db84a5be75b068b789268de6790f709"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3425, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}