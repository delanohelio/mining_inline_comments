{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NTkyOTE4", "number": 6832, "title": "KEYCLOAK-12816 Fix representation to model conversion", "bodyText": "", "createdAt": "2020-02-25T13:46:53Z", "url": "https://github.com/keycloak/keycloak/pull/6832", "merged": true, "mergeCommit": {"oid": "aecfe251e49d511b66a951171ad66ff505f1805e"}, "closed": true, "closedAt": "2020-02-27T20:11:26Z", "author": {"login": "hmlnarik"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHyY8XgH2gAyMzc5NTkyOTE4Ojk5YjJhNmFjMGY5MWVkYzZiNTFiMDgwZDdjNGRlMWIwODA5YzRkOGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIhF6UAFqTM2NTk2Mzk1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "99b2a6ac0f91edc6b51b080d7c4de1b0809c4d8f", "author": {"user": {"login": "hmlnarik", "name": "Hynek Mlna\u0159\u00edk"}}, "url": "https://github.com/keycloak/keycloak/commit/99b2a6ac0f91edc6b51b080d7c4de1b0809c4d8f", "committedDate": "2020-02-25T13:46:03Z", "message": "KEYCLOAK-12816 Fix representation to model conversion"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MjYxMjQz", "url": "https://github.com/keycloak/keycloak/pull/6832#pullrequestreview-364261243", "createdAt": "2020-02-25T16:00:20Z", "commit": {"oid": "99b2a6ac0f91edc6b51b080d7c4de1b0809c4d8f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1OTYzOTU2", "url": "https://github.com/keycloak/keycloak/pull/6832#pullrequestreview-365963956", "createdAt": "2020-02-27T20:09:43Z", "commit": {"oid": "99b2a6ac0f91edc6b51b080d7c4de1b0809c4d8f"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMDowOTo0M1rOFvfmOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMDowOTo0M1rOFvfmOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM0NTA4MA==", "bodyText": "Very minor nitpicking: This comment is now not true anymore as with the fix, it wouldn't fail anymore. Maybe slightly updating this comment (and possibly add reference to JIRA) could be fine?", "url": "https://github.com/keycloak/keycloak/pull/6832#discussion_r385345080", "createdAt": "2020-02-27T20:09:43Z", "author": {"login": "mposolda"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/CustomFlowTest.java", "diffHunk": "@@ -270,37 +266,33 @@ public void validateX509FlowUpdate() throws Exception {\n         flow.setTopLevel(true);\n         flow.setBuiltIn(false);\n \n-        try {\n-            String executionId;\n-            try (Response response = authMgmtResource.createFlow(flow)) {\n-                Assert.assertThat(\"Create flow\", response, statusCodeIs(Response.Status.CREATED));\n-                AuthenticationFlowRepresentation newFlow = findFlowByAlias(flowAlias);\n-                flowId = newFlow.getId();\n-            }\n-\n-            //add execution - username-password form\n-            Map<String, String> data = new HashMap<>();\n-            data.put(\"provider\", ValidateX509CertificateUsernameFactory.PROVIDER_ID);\n-            authMgmtResource.addExecution(flowAlias, data);\n+        try (Creator.Flow amr = Creator.create(testRealm(), flow)) {\n+            AuthenticationManagementResource authMgmtResource = amr.resource();\n \n-            List<AuthenticationExecutionInfoRepresentation> executions = authMgmtResource.getExecutions(flowAlias);\n-            assertThat(executions, hasSize(1));\n-            final AuthenticationExecutionInfoRepresentation execution = executions.get(0);\n-            executionId = execution.getId();\n+            //add execution - X509 username\n+            final AuthenticationExecutionInfoRepresentation execution = amr.addExecution(ValidateX509CertificateUsernameFactory.PROVIDER_ID);\n+            String executionId = execution.getId();\n \n             Map<String, String> config = new HashMap<>();\n             config.put(AbstractX509ClientCertificateAuthenticator.ENABLE_CRL, Boolean.TRUE.toString());\n             AuthenticatorConfigRepresentation authConfig = new AuthenticatorConfigRepresentation();\n             authConfig.setAlias(\"Config alias\");\n             authConfig.setConfig(config);\n \n+            String acId;\n             try (Response resp = authMgmtResource.newExecutionConfig(executionId, authConfig)) {\n                 assertThat(resp, statusCodeIs(Status.CREATED));\n+                acId = ApiUtil.getCreatedId(resp);\n             }\n-        } finally {\n-            if (flowId != null) {\n-                authMgmtResource.deleteFlow(flowId);\n-            }\n+\n+            authConfig = authMgmtResource.getAuthenticatorConfig(acId);\n+            authConfig.getConfig().put(AbstractX509ClientCertificateAuthenticator.ENABLE_CRL, Boolean.FALSE.toString());\n+            authConfig.getConfig().put(AbstractX509ClientCertificateAuthenticator.CRL_RELATIVE_PATH, \"\");\n+\n+            authMgmtResource.updateAuthenticatorConfig(acId, authConfig);\n+\n+            // Saving the same options for the second time would fail for CRL_RELATIVE_PATH on Oracle due to \"\" == NULL weirdness", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99b2a6ac0f91edc6b51b080d7c4de1b0809c4d8f"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2541, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}