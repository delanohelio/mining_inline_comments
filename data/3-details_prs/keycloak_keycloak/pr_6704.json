{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4ODY4MTE1", "number": 6704, "title": "KEYCLOAK-5325 Provide OAuth token revocation capability", "bodyText": "following RFC7009.\nJIRA ticket: https://issues.redhat.com/browse/KEYCLOAK-5325\nSpec\n\n\nThe endpoint is /realms/{realm-name}/protocol/openid-connect/revoke (POST only).\n\n\nWhen the endpoint called, delete AuthenticatedClientSession, so both refresh token and access token are revoked.\n\n\nImplementations MUST support the revocation of refresh tokens and SHOULD support the revocation of access tokens (see Implementation Note).\n\n\n\n\n\n\nIgnore token_type_hint.\nOnly support invalidating refresh token (including offline token).\ntoken is decoded as RefreshToken.\n\n\ntoken_type_hint:  OPTIONAL. A hint about the type of the token submitted for revocation.  Clients MAY pass this parameter in order to help the authorization server to optimize the token lookup.  If the server is unable to locate the token using the given hint, it MUST extend its search across all of its supported token types. An authorization server MAY ignore this parameter, particularly if it is able to detect the token type automatically.\nAn invalid token type hint value is ignored by the authorization server and does not influence the revocation response.\n\n\n\n\n\n\nIf the typ claim not \"Refresh\" nor \"Offline\", return \"unsupported_token_type\".\n\n\nunsupported_token_type:  The authorization server does not support the revocation of the presented token type.  That is, the client tried to revoke an access token on a server not supporting this feature.\n\n\n\n\n\n\nOther points\n\nCheck HTTPS.\n\n\nClients MUST verify that the URL is an HTTPS URL.\n\n\n\nCheck the realm is enabled.\nCheck the client with client authentication. Check the client is not bearer only client.\nCheck token is provided.\nCheck azp claim is the same client.\n\n\nThe authorization server first validates the client credentials (in case of a confidential client) and then verifies whether the token was issued to the client making the revocation request.  If this validation fails, the request is refused and the client is informed of the error by the authorization server as described below.\n\n\n\nCheck the user from the related user session. If the user not found, return 200.\nSupport CORS. But not support JSONP.\n\n\nThe revocation endpoint MAY support Cross-Origin Resource Sharing (CORS) [W3C.WD-cors-20120403] if it is aimed at use in combination with user-agent-based applications.", "createdAt": "2020-01-30T03:19:32Z", "url": "https://github.com/keycloak/keycloak/pull/6704", "merged": true, "mergeCommit": {"oid": "b40c12c71272732964ec5ab159f4385b1f59a04b"}, "closed": true, "closedAt": "2020-04-28T13:25:24Z", "author": {"login": "y-tabata"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_WabQAFqTM1MDY1MjY0Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABccDfObgFqTQwMTgwODUyNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNjUyNjQ2", "url": "https://github.com/keycloak/keycloak/pull/6704#pullrequestreview-350652646", "createdAt": "2020-01-30T08:38:56Z", "commit": {"oid": "17542d5359d5938c54465a65573c501ffcb2aa60"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMzQyMjEx", "url": "https://github.com/keycloak/keycloak/pull/6704#pullrequestreview-351342211", "createdAt": "2020-01-31T08:04:54Z", "commit": {"oid": "17542d5359d5938c54465a65573c501ffcb2aa60"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNDM0MDE5", "url": "https://github.com/keycloak/keycloak/pull/6704#pullrequestreview-351434019", "createdAt": "2020-01-31T11:04:38Z", "commit": {"oid": "17542d5359d5938c54465a65573c501ffcb2aa60"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMTowNDozOFrOFkIJNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMTowNDozOFrOFkIJNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQyNjQ4NA==", "bodyText": "I could not find so maybe I'm missing it. But is there a test that asserts:\n\nUser session is still valid when client sessions are invalidated after revocation\nAdapter is actually receiving the backchannel request and invalidating the local session accordingly", "url": "https://github.com/keycloak/keycloak/pull/6704#discussion_r373426484", "createdAt": "2020-01-31T11:04:38Z", "author": {"login": "pedroigor"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/TokenRevocationTest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.testsuite.oauth;\n+\n+import static org.junit.Assert.*;\n+import static org.keycloak.testsuite.admin.AbstractAdminTest.*;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.ws.rs.core.Response.Status;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.keycloak.admin.client.resource.RealmResource;\n+import org.keycloak.representations.idm.RealmRepresentation;\n+import org.keycloak.representations.oidc.TokenMetadataRepresentation;\n+import org.keycloak.testsuite.AbstractKeycloakTest;\n+import org.keycloak.testsuite.AssertEvents;\n+import org.keycloak.testsuite.util.ClientManager;\n+import org.keycloak.testsuite.util.Matchers;\n+import org.keycloak.testsuite.util.OAuthClient;\n+import org.keycloak.testsuite.util.OAuthClient.AccessTokenResponse;\n+import org.keycloak.testsuite.util.RealmBuilder;\n+import org.keycloak.util.JsonSerialization;\n+\n+/**\n+ * @author <a href=\"mailto:yoshiyuki.tabata.jy@hitachi.com\">Yoshiyuki Tabata</a>\n+ */\n+public class TokenRevocationTest extends AbstractKeycloakTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17542d5359d5938c54465a65573c501ffcb2aa60"}, "originalPosition": 48}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "984d9a9226087e0b2ec36ad8f7f346e95761de82", "author": {"user": {"login": "y-tabata", "name": "Yoshiyuki Tabata"}}, "url": "https://github.com/keycloak/keycloak/commit/984d9a9226087e0b2ec36ad8f7f346e95761de82", "committedDate": "2020-02-04T06:33:32Z", "message": "test"}, "afterCommit": {"oid": "46f6ddf62d24c502a60f48700ea8c4478147899e", "author": {"user": {"login": "y-tabata", "name": "Yoshiyuki Tabata"}}, "url": "https://github.com/keycloak/keycloak/commit/46f6ddf62d24c502a60f48700ea8c4478147899e", "committedDate": "2020-02-04T06:35:05Z", "message": "KEYCLOAK-5325 Provide OAuth token revocation capability"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "98206ded13682b1a122ed79b039ddc63301906f9", "author": {"user": {"login": "y-tabata", "name": "Yoshiyuki Tabata"}}, "url": "https://github.com/keycloak/keycloak/commit/98206ded13682b1a122ed79b039ddc63301906f9", "committedDate": "2020-02-07T08:52:07Z", "message": "temp"}, "afterCommit": {"oid": "94ef7ffb6a20feb2595f35596cf3d3679f75c0d1", "author": {"user": {"login": "y-tabata", "name": "Yoshiyuki Tabata"}}, "url": "https://github.com/keycloak/keycloak/commit/94ef7ffb6a20feb2595f35596cf3d3679f75c0d1", "committedDate": "2020-02-07T08:53:15Z", "message": "KEYCLOAK-5325 Provide OAuth token revocation capability"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e64e838b8692efc8e8334a18ace73a8b8b4d17f3", "author": {"user": {"login": "y-tabata", "name": "Yoshiyuki Tabata"}}, "url": "https://github.com/keycloak/keycloak/commit/e64e838b8692efc8e8334a18ace73a8b8b4d17f3", "committedDate": "2020-02-14T05:13:17Z", "message": "KEYCLOAK-5325 Provide OAuth token revocation capability"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "94ef7ffb6a20feb2595f35596cf3d3679f75c0d1", "author": {"user": {"login": "y-tabata", "name": "Yoshiyuki Tabata"}}, "url": "https://github.com/keycloak/keycloak/commit/94ef7ffb6a20feb2595f35596cf3d3679f75c0d1", "committedDate": "2020-02-07T08:53:15Z", "message": "KEYCLOAK-5325 Provide OAuth token revocation capability"}, "afterCommit": {"oid": "e64e838b8692efc8e8334a18ace73a8b8b4d17f3", "author": {"user": {"login": "y-tabata", "name": "Yoshiyuki Tabata"}}, "url": "https://github.com/keycloak/keycloak/commit/e64e838b8692efc8e8334a18ace73a8b8b4d17f3", "committedDate": "2020-02-14T05:13:17Z", "message": "KEYCLOAK-5325 Provide OAuth token revocation capability"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwOTY0Nzc2", "url": "https://github.com/keycloak/keycloak/pull/6704#pullrequestreview-400964776", "createdAt": "2020-04-27T13:43:49Z", "commit": {"oid": "e64e838b8692efc8e8334a18ace73a8b8b4d17f3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwOTk5NjA3", "url": "https://github.com/keycloak/keycloak/pull/6704#pullrequestreview-400999607", "createdAt": "2020-04-27T14:20:17Z", "commit": {"oid": "e64e838b8692efc8e8334a18ace73a8b8b4d17f3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDoyMDoxN1rOGMlspQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDoyNjoyMFrOGMmAYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg1MzczMw==", "bodyText": "It looks like you are missing validations based on the token_type_hint. As well as what is the default value we expect if none was provided.\nI understand this parameter is OPTIONAL and we can infer the token type from the token itself (As we are using JWT as the format). But not validate this parameter can cause confusion given that we are supposed to accept only a specific set of values.", "url": "https://github.com/keycloak/keycloak/pull/6704#discussion_r415853733", "createdAt": "2020-04-27T14:20:17Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenRevocationEndpoint.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.protocol.oidc.endpoints;\n+\n+import java.util.List;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.core.Response;\n+\n+import org.jboss.resteasy.spi.HttpRequest;\n+import org.keycloak.OAuthErrorException;\n+import org.keycloak.common.ClientConnection;\n+import org.keycloak.events.Details;\n+import org.keycloak.events.Errors;\n+import org.keycloak.events.EventBuilder;\n+import org.keycloak.events.EventType;\n+import org.keycloak.models.AuthenticatedClientSessionModel;\n+import org.keycloak.models.ClientModel;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserModel;\n+import org.keycloak.models.UserSessionModel;\n+import org.keycloak.protocol.oidc.utils.AuthorizeClientUtil;\n+import org.keycloak.representations.RefreshToken;\n+import org.keycloak.services.CorsErrorResponseException;\n+import org.keycloak.services.managers.UserSessionCrossDCManager;\n+import org.keycloak.services.managers.UserSessionManager;\n+import org.keycloak.services.resources.Cors;\n+import org.keycloak.util.TokenUtil;\n+\n+/**\n+ * @author <a href=\"mailto:yoshiyuki.tabata.jy@hitachi.com\">Yoshiyuki Tabata</a>\n+ */\n+public class TokenRevocationEndpoint {\n+    private static final String PARAM_TOKEN = \"token\";\n+\n+    @Context\n+    private KeycloakSession session;\n+\n+    @Context\n+    private HttpRequest request;\n+\n+    @Context\n+    private HttpHeaders headers;\n+\n+    @Context\n+    private ClientConnection clientConnection;\n+\n+    private MultivaluedMap<String, String> formParams;\n+    private ClientModel client;\n+    private RealmModel realm;\n+    private EventBuilder event;\n+    private Cors cors;\n+    private RefreshToken token;\n+    private UserModel user;\n+\n+    public TokenRevocationEndpoint(RealmModel realm, EventBuilder event) {\n+        this.realm = realm;\n+        this.event = event;\n+    }\n+\n+    @POST\n+    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)\n+    public Response revoke() {\n+        event.event(EventType.REVOKE_GRANT);\n+\n+        cors = Cors.add(request).auth().allowedMethods(\"POST\").auth().exposedHeaders(Cors.ACCESS_CONTROL_ALLOW_METHODS);\n+\n+        checkSsl();\n+        checkRealm();\n+        checkClient();\n+\n+        formParams = request.getDecodedFormParameters();\n+\n+        checkToken();\n+        checkIssuedFor();\n+\n+        checkUser();\n+        revokeClient();\n+\n+        event.detail(Details.REVOKED_CLIENT, client.getClientId()).success();\n+\n+        return cors.builder(Response.ok()).build();\n+    }\n+\n+    private void checkSsl() {\n+        if (!session.getContext().getUri().getBaseUri().getScheme().equals(\"https\")\n+            && realm.getSslRequired().isRequired(clientConnection)) {\n+            throw new CorsErrorResponseException(cors.allowAllOrigins(), OAuthErrorException.INVALID_REQUEST, \"HTTPS required\",\n+                Response.Status.FORBIDDEN);\n+        }\n+    }\n+\n+    private void checkRealm() {\n+        if (!realm.isEnabled()) {\n+            throw new CorsErrorResponseException(cors.allowAllOrigins(), \"access_denied\", \"Realm not enabled\",\n+                Response.Status.FORBIDDEN);\n+        }\n+    }\n+\n+    private void checkClient() {\n+        AuthorizeClientUtil.ClientAuthResult clientAuth = AuthorizeClientUtil.authorizeClient(session, event);\n+        client = clientAuth.getClient();\n+\n+        event.client(client);\n+\n+        cors.allowedOrigins(session, client);\n+\n+        if (client.isBearerOnly()) {\n+            throw new CorsErrorResponseException(cors, OAuthErrorException.INVALID_CLIENT, \"Bearer-only not allowed\",\n+                Response.Status.BAD_REQUEST);\n+        }\n+    }\n+\n+    private void checkToken() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64e838b8692efc8e8334a18ace73a8b8b4d17f3"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg1ODc4Nw==", "bodyText": "Currently, consents are persistent and we don't ask end-users for consent if they have previously granted it to a client.\nBy removing this you are forcing users to consent again. Is that on purpose?", "url": "https://github.com/keycloak/keycloak/pull/6704#discussion_r415858787", "createdAt": "2020-04-27T14:26:20Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenRevocationEndpoint.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.protocol.oidc.endpoints;\n+\n+import java.util.List;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.core.Response;\n+\n+import org.jboss.resteasy.spi.HttpRequest;\n+import org.keycloak.OAuthErrorException;\n+import org.keycloak.common.ClientConnection;\n+import org.keycloak.events.Details;\n+import org.keycloak.events.Errors;\n+import org.keycloak.events.EventBuilder;\n+import org.keycloak.events.EventType;\n+import org.keycloak.models.AuthenticatedClientSessionModel;\n+import org.keycloak.models.ClientModel;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserModel;\n+import org.keycloak.models.UserSessionModel;\n+import org.keycloak.protocol.oidc.utils.AuthorizeClientUtil;\n+import org.keycloak.representations.RefreshToken;\n+import org.keycloak.services.CorsErrorResponseException;\n+import org.keycloak.services.managers.UserSessionCrossDCManager;\n+import org.keycloak.services.managers.UserSessionManager;\n+import org.keycloak.services.resources.Cors;\n+import org.keycloak.util.TokenUtil;\n+\n+/**\n+ * @author <a href=\"mailto:yoshiyuki.tabata.jy@hitachi.com\">Yoshiyuki Tabata</a>\n+ */\n+public class TokenRevocationEndpoint {\n+    private static final String PARAM_TOKEN = \"token\";\n+\n+    @Context\n+    private KeycloakSession session;\n+\n+    @Context\n+    private HttpRequest request;\n+\n+    @Context\n+    private HttpHeaders headers;\n+\n+    @Context\n+    private ClientConnection clientConnection;\n+\n+    private MultivaluedMap<String, String> formParams;\n+    private ClientModel client;\n+    private RealmModel realm;\n+    private EventBuilder event;\n+    private Cors cors;\n+    private RefreshToken token;\n+    private UserModel user;\n+\n+    public TokenRevocationEndpoint(RealmModel realm, EventBuilder event) {\n+        this.realm = realm;\n+        this.event = event;\n+    }\n+\n+    @POST\n+    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)\n+    public Response revoke() {\n+        event.event(EventType.REVOKE_GRANT);\n+\n+        cors = Cors.add(request).auth().allowedMethods(\"POST\").auth().exposedHeaders(Cors.ACCESS_CONTROL_ALLOW_METHODS);\n+\n+        checkSsl();\n+        checkRealm();\n+        checkClient();\n+\n+        formParams = request.getDecodedFormParameters();\n+\n+        checkToken();\n+        checkIssuedFor();\n+\n+        checkUser();\n+        revokeClient();\n+\n+        event.detail(Details.REVOKED_CLIENT, client.getClientId()).success();\n+\n+        return cors.builder(Response.ok()).build();\n+    }\n+\n+    private void checkSsl() {\n+        if (!session.getContext().getUri().getBaseUri().getScheme().equals(\"https\")\n+            && realm.getSslRequired().isRequired(clientConnection)) {\n+            throw new CorsErrorResponseException(cors.allowAllOrigins(), OAuthErrorException.INVALID_REQUEST, \"HTTPS required\",\n+                Response.Status.FORBIDDEN);\n+        }\n+    }\n+\n+    private void checkRealm() {\n+        if (!realm.isEnabled()) {\n+            throw new CorsErrorResponseException(cors.allowAllOrigins(), \"access_denied\", \"Realm not enabled\",\n+                Response.Status.FORBIDDEN);\n+        }\n+    }\n+\n+    private void checkClient() {\n+        AuthorizeClientUtil.ClientAuthResult clientAuth = AuthorizeClientUtil.authorizeClient(session, event);\n+        client = clientAuth.getClient();\n+\n+        event.client(client);\n+\n+        cors.allowedOrigins(session, client);\n+\n+        if (client.isBearerOnly()) {\n+            throw new CorsErrorResponseException(cors, OAuthErrorException.INVALID_CLIENT, \"Bearer-only not allowed\",\n+                Response.Status.BAD_REQUEST);\n+        }\n+    }\n+\n+    private void checkToken() {\n+        String encodedToken = formParams.getFirst(PARAM_TOKEN);\n+\n+        if (encodedToken == null) {\n+            event.error(Errors.INVALID_REQUEST);\n+            throw new CorsErrorResponseException(cors, OAuthErrorException.INVALID_REQUEST, \"Token not provided\",\n+                Response.Status.BAD_REQUEST);\n+        }\n+\n+        token = session.tokens().decode(encodedToken, RefreshToken.class);\n+\n+        if (token == null) {\n+            event.error(Errors.INVALID_TOKEN);\n+            throw new CorsErrorResponseException(cors, OAuthErrorException.INVALID_TOKEN, \"Invalid token\", Response.Status.OK);\n+        }\n+\n+        if (!(TokenUtil.TOKEN_TYPE_REFRESH.equals(token.getType()) || TokenUtil.TOKEN_TYPE_OFFLINE.equals(token.getType()))) {\n+            event.error(Errors.INVALID_TOKEN_TYPE);\n+            throw new CorsErrorResponseException(cors, OAuthErrorException.UNSUPPORTED_TOKEN_TYPE, \"Unsupported token type\",\n+                Response.Status.BAD_REQUEST);\n+        }\n+    }\n+\n+    private void checkIssuedFor() {\n+        String issuedFor = token.getIssuedFor();\n+        if (issuedFor == null) {\n+            event.error(Errors.INVALID_TOKEN);\n+            throw new CorsErrorResponseException(cors, OAuthErrorException.INVALID_TOKEN, \"Invalid token\", Response.Status.OK);\n+        }\n+\n+        if (!client.getClientId().equals(issuedFor)) {\n+            event.error(Errors.INVALID_REQUEST);\n+            throw new CorsErrorResponseException(cors, OAuthErrorException.INVALID_REQUEST, \"Unmatching clients\",\n+                Response.Status.BAD_REQUEST);\n+        }\n+    }\n+\n+    private void checkUser() {\n+        UserSessionModel userSession = new UserSessionCrossDCManager(session).getUserSessionWithClient(realm,\n+            token.getSessionState(), false, client.getId());\n+\n+        if (userSession == null) {\n+            userSession = new UserSessionCrossDCManager(session).getUserSessionWithClient(realm, token.getSessionState(), true,\n+                client.getId());\n+\n+            if (userSession == null) {\n+                event.error(Errors.USER_SESSION_NOT_FOUND);\n+                throw new CorsErrorResponseException(cors, OAuthErrorException.INVALID_TOKEN, \"Invalid token\",\n+                    Response.Status.OK);\n+            }\n+        }\n+\n+        user = userSession.getUser();\n+\n+        if (user == null) {\n+            event.error(Errors.USER_NOT_FOUND);\n+            throw new CorsErrorResponseException(cors, OAuthErrorException.INVALID_TOKEN, \"Invalid token\", Response.Status.OK);\n+        }\n+\n+        event.user(user);\n+    }\n+\n+    private void revokeClient() {\n+        session.users().revokeConsentForClient(realm, user.getId(), client.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e64e838b8692efc8e8334a18ace73a8b8b4d17f3"}, "originalPosition": 198}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNTQ2MzMz", "url": "https://github.com/keycloak/keycloak/pull/6704#pullrequestreview-401546333", "createdAt": "2020-04-28T06:56:53Z", "commit": {"oid": "e64e838b8692efc8e8334a18ace73a8b8b4d17f3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxODA4NTI3", "url": "https://github.com/keycloak/keycloak/pull/6704#pullrequestreview-401808527", "createdAt": "2020-04-28T12:59:47Z", "commit": {"oid": "e64e838b8692efc8e8334a18ace73a8b8b4d17f3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2598, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}