{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3Mzk2NTQx", "number": 7640, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjowMDo1NFrOFFDphg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wOVQwNzozMDoxOFrOFwMbrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODQ2OTgyOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/authentication/authenticators/access/AllowAccessAuthenticatorFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjowMDo1NFrOIFXmHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjowMDo1NFrOIFXmHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwMDM4MA==", "bodyText": "From the description, it seems the authenticator is applicable just in the conditional flows, but this is not true? So I would slightly change the description to maybe something like \"Authenticator will always successfully authenticate. Useful for example in the conditional flows to be used after satisfying the previous conditions\"", "url": "https://github.com/keycloak/keycloak/pull/7640#discussion_r542500380", "createdAt": "2020-12-14T16:00:54Z", "author": {"login": "mposolda"}, "path": "services/src/main/java/org/keycloak/authentication/authenticators/access/AllowAccessAuthenticatorFactory.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.authentication.authenticators.access;\n+\n+import org.keycloak.Config;\n+import org.keycloak.authentication.Authenticator;\n+import org.keycloak.authentication.AuthenticatorFactory;\n+import org.keycloak.models.AuthenticationExecutionModel;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.KeycloakSessionFactory;\n+import org.keycloak.provider.ProviderConfigProperty;\n+\n+import java.util.List;\n+\n+/**\n+ * @author <a href=\"mailto:mabartos@redhat.com\">Martin Bartos</a>\n+ */\n+public class AllowAccessAuthenticatorFactory implements AuthenticatorFactory {\n+    private final static AllowAccessAuthenticator SINGLETON = new AllowAccessAuthenticator();\n+    public static final String PROVIDER_ID = \"allow-access-authenticator\";\n+\n+    @Override\n+    public String getId() {\n+        return PROVIDER_ID;\n+    }\n+\n+    @Override\n+    public Authenticator create(KeycloakSession session) {\n+        return SINGLETON;\n+    }\n+\n+    @Override\n+    public String getDisplayType() {\n+        return \"Allow access\";\n+    }\n+\n+    @Override\n+    public String getReferenceCategory() {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean isConfigurable() {\n+        return false;\n+    }\n+\n+    private static final AuthenticationExecutionModel.Requirement[] REQUIREMENT_CHOICES = {\n+            AuthenticationExecutionModel.Requirement.REQUIRED,\n+            AuthenticationExecutionModel.Requirement.DISABLED\n+    };\n+\n+    @Override\n+    public AuthenticationExecutionModel.Requirement[] getRequirementChoices() {\n+        return REQUIREMENT_CHOICES;\n+    }\n+\n+    @Override\n+    public boolean isUserSetupAllowed() {\n+        return false;\n+    }\n+\n+    @Override\n+    public String getHelpText() {\n+        return \"Allow access in conditional flows after satisfying the previous conditions.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85c5a11eb3ef5f251500248fa205de635a248ce0"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODQ3MjA0OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/authentication/authenticators/access/AllowAccessAuthenticator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjowMToyMFrOIFXnaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjowMToyMFrOIFXnaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwMDcxMg==", "bodyText": "See  my AllowAccessAuthenticatorFactory.getHelpText() comment.", "url": "https://github.com/keycloak/keycloak/pull/7640#discussion_r542500712", "createdAt": "2020-12-14T16:01:20Z", "author": {"login": "mposolda"}, "path": "services/src/main/java/org/keycloak/authentication/authenticators/access/AllowAccessAuthenticator.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.authentication.authenticators.access;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.authentication.AuthenticationFlowContext;\n+import org.keycloak.authentication.Authenticator;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserModel;\n+\n+/**\n+ * Explicitly allow access to the resources after satisfying conditions in the conditional flow.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85c5a11eb3ef5f251500248fa205de635a248ce0"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODQ4MTM2OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/authentication/authenticators/access/DenyAccessAuthenticatorFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjowMzowNVrOIFXs_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjowMzowNVrOIFXs_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwMjE0MQ==", "bodyText": "I think the similar comment applies here like I used for the AllowAccessAuthenticatorFactory.getHelpText() ?", "url": "https://github.com/keycloak/keycloak/pull/7640#discussion_r542502141", "createdAt": "2020-12-14T16:03:05Z", "author": {"login": "mposolda"}, "path": "services/src/main/java/org/keycloak/authentication/authenticators/access/DenyAccessAuthenticatorFactory.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.authentication.authenticators.access;\n+\n+import org.keycloak.Config;\n+import org.keycloak.authentication.Authenticator;\n+import org.keycloak.authentication.AuthenticatorFactory;\n+import org.keycloak.models.AuthenticationExecutionModel;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.KeycloakSessionFactory;\n+import org.keycloak.provider.ProviderConfigProperty;\n+\n+import java.util.List;\n+\n+/**\n+ * @author <a href=\"mailto:mabartos@redhat.com\">Martin Bartos</a>\n+ */\n+public class DenyAccessAuthenticatorFactory implements AuthenticatorFactory {\n+    private static final DenyAccessAuthenticator SINGLETON = new DenyAccessAuthenticator();\n+    public static final String PROVIDER_ID = \"deny-access-authenticator\";\n+\n+    @Override\n+    public String getId() {\n+        return PROVIDER_ID;\n+    }\n+\n+    @Override\n+    public Authenticator create(KeycloakSession session) {\n+        return SINGLETON;\n+    }\n+\n+    @Override\n+    public String getDisplayType() {\n+        return \"Deny access\";\n+    }\n+\n+    @Override\n+    public String getReferenceCategory() {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean isConfigurable() {\n+        return false;\n+    }\n+\n+    private static final AuthenticationExecutionModel.Requirement[] REQUIREMENT_CHOICES = {\n+            AuthenticationExecutionModel.Requirement.REQUIRED,\n+            AuthenticationExecutionModel.Requirement.DISABLED\n+    };\n+\n+    @Override\n+    public AuthenticationExecutionModel.Requirement[] getRequirementChoices() {\n+        return REQUIREMENT_CHOICES;\n+    }\n+\n+    @Override\n+    public boolean isUserSetupAllowed() {\n+        return false;\n+    }\n+\n+    @Override\n+    public String getHelpText() {\n+        return \"Deny access in conditional flows after satisfying the previous conditions.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85c5a11eb3ef5f251500248fa205de635a248ce0"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODQ4NDc0OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/authentication/authenticators/access/DenyAccessAuthenticator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjowMzo0N1rOIFXvEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjowMzo0N1rOIFXvEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwMjY3Mg==", "bodyText": "See my comment for the DenyAccessAuthenticatorFactory.getHelpText() .", "url": "https://github.com/keycloak/keycloak/pull/7640#discussion_r542502672", "createdAt": "2020-12-14T16:03:47Z", "author": {"login": "mposolda"}, "path": "services/src/main/java/org/keycloak/authentication/authenticators/access/DenyAccessAuthenticator.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.authentication.authenticators.access;\n+\n+import org.keycloak.authentication.AuthenticationFlowContext;\n+import org.keycloak.authentication.AuthenticationFlowError;\n+import org.keycloak.authentication.Authenticator;\n+import org.keycloak.authentication.AuthenticatorFactory;\n+import org.keycloak.authentication.authenticators.conditional.ConditionalAuthenticator;\n+import org.keycloak.events.Errors;\n+import org.keycloak.models.AuthenticationExecutionModel;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserModel;\n+import org.keycloak.services.messages.Messages;\n+\n+import javax.ws.rs.core.Response;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+/**\n+ * Explicitly deny access to the resources after satisfying conditions in the conditional flow.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85c5a11eb3ef5f251500248fa205de635a248ce0"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODQ5MzUwOnYy", "diffSide": "RIGHT", "path": "services/src/main/resources/META-INF/services/org.keycloak.authentication.authenticators.access.AllowAccessAuthenticatorFactory", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjowNToyMlrOIFX0Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjowNToyMlrOIFX0Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwMzk1NA==", "bodyText": "I think this file is not needed and should be probably deleted?", "url": "https://github.com/keycloak/keycloak/pull/7640#discussion_r542503954", "createdAt": "2020-12-14T16:05:22Z", "author": {"login": "mposolda"}, "path": "services/src/main/resources/META-INF/services/org.keycloak.authentication.authenticators.access.AllowAccessAuthenticatorFactory", "diffHunk": "@@ -0,0 +1,18 @@\n+#\n+# Copyright 2020 Red Hat, Inc. and/or its affiliates\n+# and other contributors as indicated by the @author tags.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+org.keycloak.authentication.authenticators.access.AllowAccessAuthenticator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85c5a11eb3ef5f251500248fa205de635a248ce0"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODQ5NDA0OnYy", "diffSide": "RIGHT", "path": "services/src/main/resources/META-INF/services/org.keycloak.authentication.authenticators.access.DenyAccessAuthenticatorFactory", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjowNToyOVrOIFX0aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjowNToyOVrOIFX0aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwNDA0MQ==", "bodyText": "I think this file is not needed and should be probably deleted?", "url": "https://github.com/keycloak/keycloak/pull/7640#discussion_r542504041", "createdAt": "2020-12-14T16:05:29Z", "author": {"login": "mposolda"}, "path": "services/src/main/resources/META-INF/services/org.keycloak.authentication.authenticators.access.DenyAccessAuthenticatorFactory", "diffHunk": "@@ -0,0 +1,18 @@\n+#\n+# Copyright 2020 Red Hat, Inc. and/or its affiliates\n+# and other contributors as indicated by the @author tags.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+org.keycloak.authentication.authenticators.access.DenyAccessAuthenticator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85c5a11eb3ef5f251500248fa205de635a248ce0"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODUwOTY4OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/authentication/DefaultAuthenticationFlow.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjowODoyNFrOIFX9eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjowODoyNFrOIFX9eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwNjM2Mg==", "bodyText": "Is this change really needed? Should not this PR work even without the change in this file?", "url": "https://github.com/keycloak/keycloak/pull/7640#discussion_r542506362", "createdAt": "2020-12-14T16:08:24Z", "author": {"login": "mposolda"}, "path": "services/src/main/java/org/keycloak/authentication/DefaultAuthenticationFlow.java", "diffHunk": "@@ -308,7 +308,9 @@ void fillListsOfExecutions(Stream<AuthenticationExecutionModel> executionsToProc\n                     }\n                 });\n \n-        if (!requiredList.isEmpty() && !alternativeList.isEmpty()) {\n+        final boolean isConditionalPresent = requiredList.stream().anyMatch(AuthenticationExecutionModel::isConditional);\n+\n+        if (!requiredList.isEmpty() && !alternativeList.isEmpty() && !isConditionalPresent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85c5a11eb3ef5f251500248fa205de635a248ce0"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODUzNjcxOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/authentication/authenticators/conditional/ConditionalRoleAuthenticatorFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjoxMzo0M1rOIFYNaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjoxMzo0M1rOIFYNaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxMDQ0MA==", "bodyText": "My vote would be to add more details to this help text to make it more obvious for the administrator. Like \"Apply a not to the check result. When this is true, then the condition will evaluate to true just if user does NOT have the specified role. When this is false, the condition will evaluate to true just if user has the specified role\".", "url": "https://github.com/keycloak/keycloak/pull/7640#discussion_r542510440", "createdAt": "2020-12-14T16:13:43Z", "author": {"login": "mposolda"}, "path": "services/src/main/java/org/keycloak/authentication/authenticators/conditional/ConditionalRoleAuthenticatorFactory.java", "diffHunk": "@@ -81,7 +73,19 @@ public String getHelpText() {\n \n     @Override\n     public List<ProviderConfigProperty> getConfigProperties() {\n-        return commonConfig;\n+        ProviderConfigProperty role = new ProviderConfigProperty();\n+        role.setType(ProviderConfigProperty.ROLE_TYPE);\n+        role.setName(CONDITIONAL_USER_ROLE);\n+        role.setLabel(\"User role\");\n+        role.setHelpText(\"Role the user should have to execute this flow. Click 'Select Role' button to browse roles, or just type it in the textbox. To specify an application role the syntax is appname.approle, i.e. myapp.myrole\");\n+\n+        ProviderConfigProperty negateOutput = new ProviderConfigProperty();\n+        negateOutput.setType(ProviderConfigProperty.BOOLEAN_TYPE);\n+        negateOutput.setName(CONF_NEGATE);\n+        negateOutput.setLabel(\"Negate output\");\n+        negateOutput.setHelpText(\"Apply a not to the check result\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85c5a11eb3ef5f251500248fa205de635a248ce0"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODU3NDc2OnYy", "diffSide": "RIGHT", "path": "themes/src/main/resources/theme/base/login/messages/messages_en.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjoyMToxOVrOIFYjyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjoyMToxOVrOIFYjyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxNjE3MQ==", "bodyText": "My vote is to simplify this and only use one failure message like \"You are not allowed to authenticate\" or \"Access denied\" or something like this. This is the only thing, which the typical user should know. He may not be interested (and sometimes he even should know) that the reason of the failed authentication is \"required role\" or \"preconditions were not satisifed\" or \"required authenticators\" . The typical user may not even know what these terms are :-)\nMy vote would be to simplify this to only use single error message. This will hopefully simplify some logic in the authenticators itself around error messages?", "url": "https://github.com/keycloak/keycloak/pull/7640#discussion_r542516171", "createdAt": "2020-12-14T16:21:19Z", "author": {"login": "mposolda"}, "path": "themes/src/main/resources/theme/base/login/messages/messages_en.properties", "diffHunk": "@@ -392,3 +392,8 @@ loggingOutImmediately=Logging you out immediately\n accountUnusable=Any subsequent use of the application will not be possible with this account\n userDeletedSuccessfully=User deleted successfully\n \n+# Condition Errors in a Conditional flow\n+conditionFailed=Preconditions were not satisfied.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85c5a11eb3ef5f251500248fa205de635a248ce0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzg2MDc4OTE3OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/authentication/authenticators/access/AllowAccessAuthenticator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wOVQwNzoyODoyMlrOJGIU9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wOVQwNzozNzoxNlrOJGIpKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDQwNzY2OQ==", "bodyText": "Is it possible to change this to \"log.trace\"?\nFrom what I know, the \"info\" messages are dedicated to important and non-repeating (and non-user actions) related stuff like for example \"Database migration finished successfully\" at the server startup etc.", "url": "https://github.com/keycloak/keycloak/pull/7640#discussion_r610407669", "createdAt": "2021-04-09T07:28:22Z", "author": {"login": "mposolda"}, "path": "services/src/main/java/org/keycloak/authentication/authenticators/access/AllowAccessAuthenticator.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.authentication.authenticators.access;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.authentication.AuthenticationFlowContext;\n+import org.keycloak.authentication.Authenticator;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserModel;\n+\n+/**\n+ * Authenticator will always successfully authenticate.\n+ * Useful for example in the conditional flows to be used after satisfying the previous conditions.\n+ *\n+ * @author <a href=\"mailto:mabartos@redhat.com\">Martin Bartos</a>\n+ */\n+public class AllowAccessAuthenticator implements Authenticator {\n+    private final Logger log = Logger.getLogger(AllowAccessAuthenticator.class);\n+\n+    @Override\n+    public void authenticate(AuthenticationFlowContext context) {\n+        log.info(\"Explicitly allowed access to the resource.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1b7fcde86946b8a7ff6aa2c17976f2e8b4c3b7b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDQxMjg0Mg==", "bodyText": "Ok", "url": "https://github.com/keycloak/keycloak/pull/7640#discussion_r610412842", "createdAt": "2021-04-09T07:37:16Z", "author": {"login": "mabartos"}, "path": "services/src/main/java/org/keycloak/authentication/authenticators/access/AllowAccessAuthenticator.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.authentication.authenticators.access;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.authentication.AuthenticationFlowContext;\n+import org.keycloak.authentication.Authenticator;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserModel;\n+\n+/**\n+ * Authenticator will always successfully authenticate.\n+ * Useful for example in the conditional flows to be used after satisfying the previous conditions.\n+ *\n+ * @author <a href=\"mailto:mabartos@redhat.com\">Martin Bartos</a>\n+ */\n+public class AllowAccessAuthenticator implements Authenticator {\n+    private final Logger log = Logger.getLogger(AllowAccessAuthenticator.class);\n+\n+    @Override\n+    public void authenticate(AuthenticationFlowContext context) {\n+        log.info(\"Explicitly allowed access to the resource.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDQwNzY2OQ=="}, "originalCommit": {"oid": "f1b7fcde86946b8a7ff6aa2c17976f2e8b4c3b7b"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzg2MDc5NjYzOnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/BrowserFlowTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wOVQwNzozMDoxOFrOJGIZhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wOVQwNzozODowOVrOJGIrdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDQwODgzOQ==", "bodyText": "My vote would be to move new stuff to separate class like \"AllowDenyAuthenticatorConditionsTest\" or something like this? It seems to me that BrowserFlowTest is already quite big and contains lots of stuff. WDYT?", "url": "https://github.com/keycloak/keycloak/pull/7640#discussion_r610408839", "createdAt": "2021-04-09T07:30:18Z", "author": {"login": "mposolda"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/BrowserFlowTest.java", "diffHunk": "@@ -1238,6 +1253,259 @@ public void testLoginWithAlternativeOTPAndConditionalPassword(){\n         }\n     }\n \n+    @Test\n+    @AuthServerContainerExclude(REMOTE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1b7fcde86946b8a7ff6aa2c17976f2e8b4c3b7b"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDQxMzQyOQ==", "bodyText": "It makes sense. I agree with it.", "url": "https://github.com/keycloak/keycloak/pull/7640#discussion_r610413429", "createdAt": "2021-04-09T07:38:09Z", "author": {"login": "mabartos"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/forms/BrowserFlowTest.java", "diffHunk": "@@ -1238,6 +1253,259 @@ public void testLoginWithAlternativeOTPAndConditionalPassword(){\n         }\n     }\n \n+    @Test\n+    @AuthServerContainerExclude(REMOTE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDQwODgzOQ=="}, "originalCommit": {"oid": "f1b7fcde86946b8a7ff6aa2c17976f2e8b4c3b7b"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3205, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}