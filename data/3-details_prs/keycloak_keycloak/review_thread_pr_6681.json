{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1MjQ2Mzg3", "number": 6681, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0Njo0M1rODb4xwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNDowNDoyOVrODb7N6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTY4Mzg0OnYy", "diffSide": "RIGHT", "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/assertion/SAMLAttributeParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0Njo0M1rOFjoPng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0Njo0M1rOFjoPng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwMzgzOA==", "bodyText": "this should be\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Set<String> DEFAULT_KNOWN_LOCAL_ATTRIBUTE_NAMES;\n          \n          \n            \n                private static final Set<QName> DEFAULT_KNOWN_LOCAL_ATTRIBUTE_NAMES = new HashSet<>(Arrays.asList(\n          \n          \n            \n                  SAMLAssertionQNames.ATTR_NAME.getQName(),\n          \n          \n            \n                  SAMLAssertionQNames.ATTR_FRIENDLY_NAME.getQName(),\n          \n          \n            \n                  SAMLAssertionQNames.ATTR_NAME_FORMAT.getQName()\n          \n          \n            \n                ));", "url": "https://github.com/keycloak/keycloak/pull/6681#discussion_r372903838", "createdAt": "2020-01-30T11:46:43Z", "author": {"login": "hmlnarik"}, "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/assertion/SAMLAttributeParser.java", "diffHunk": "@@ -31,8 +42,16 @@\n \n     private static final SAMLAttributeParser INSTANCE = new SAMLAttributeParser();\n \n+    private final Set<String> DEFAULT_KNOWN_LOCAL_ATTRIBUTE_NAMES;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1101ae24ae45b5b315ebe06da3d7858773e7740"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTY5MDE3OnYy", "diffSide": "RIGHT", "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/assertion/SAMLAttributeParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0OTowMFrOFjoTaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0OTowMFrOFjoTaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwNDgxMQ==", "bodyText": "Remove this whole block (l49-54) since this has moved to static initialization above.", "url": "https://github.com/keycloak/keycloak/pull/6681#discussion_r372904811", "createdAt": "2020-01-30T11:49:00Z", "author": {"login": "hmlnarik"}, "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/assertion/SAMLAttributeParser.java", "diffHunk": "@@ -31,8 +42,16 @@\n \n     private static final SAMLAttributeParser INSTANCE = new SAMLAttributeParser();\n \n+    private final Set<String> DEFAULT_KNOWN_LOCAL_ATTRIBUTE_NAMES;\n+\n     private SAMLAttributeParser() {\n         super(SAMLAssertionQNames.ATTRIBUTE);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1101ae24ae45b5b315ebe06da3d7858773e7740"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTY5MTgwOnYy", "diffSide": "RIGHT", "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/assertion/SAMLAttributeParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0OTo0MlrOFjoUXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0OTo0MlrOFjoUXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwNTA1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Map<QName, String> collectUnknownAttributesFrom(StartElement element) {\n          \n          \n            \n                private static Map<QName, String> collectUnknownAttributesFrom(StartElement element) {", "url": "https://github.com/keycloak/keycloak/pull/6681#discussion_r372905054", "createdAt": "2020-01-30T11:49:42Z", "author": {"login": "hmlnarik"}, "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/assertion/SAMLAttributeParser.java", "diffHunk": "@@ -47,14 +66,39 @@ protected AttributeType instantiateElement(XMLEventReader xmlEventReader, StartE\n         attribute.setFriendlyName(StaxParserUtil.getAttributeValue(element, SAMLAssertionQNames.ATTR_FRIENDLY_NAME));\n         attribute.setNameFormat(StaxParserUtil.getAttributeValue(element, SAMLAssertionQNames.ATTR_NAME_FORMAT));\n \n-        final String x500Encoding = StaxParserUtil.getAttributeValue(element, SAMLAssertionQNames.ATTR_X500_ENCODING);\n-        if (x500Encoding != null) {\n-            attribute.getOtherAttributes().put(SAMLAssertionQNames.ATTR_X500_ENCODING.getQName(), x500Encoding);\n-        }\n+        // add non standard elements like SAMLAssertionQNames.ATTR_X500_ENCODING to other attributes\n+        attribute.getOtherAttributes().putAll(collectUnknownAttributesFrom(element));\n \n         return attribute;\n     }\n \n+    /**\n+     * Returns a {@link Map} with the found non-standard attribute values for the given {@link StartElement}.\n+     * An attribute is considered as non-standard, if it is not contained in DEFAULT_KNOWN_LOCAL_ATTRIBUTE_NAMES.\n+     *\n+     * @return Map\n+     */\n+    private Map<QName, String> collectUnknownAttributesFrom(StartElement element) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1101ae24ae45b5b315ebe06da3d7858773e7740"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTY5NTk5OnYy", "diffSide": "RIGHT", "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/assertion/SAMLAttributeParser.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo1MToyNFrOFjoW4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwODoxNzoxNlrOFkECyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwNTY5Nw==", "bodyText": "remove the if statement and logger.trace (l94-96) with\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (LOGGER.isTraceEnabled()) {\n          \n          \n            \n                        logger.tracef(\"Adding attribute %s with value %s\", attributeQName, attributeValue);", "url": "https://github.com/keycloak/keycloak/pull/6681#discussion_r372905697", "createdAt": "2020-01-30T11:51:24Z", "author": {"login": "hmlnarik"}, "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/assertion/SAMLAttributeParser.java", "diffHunk": "@@ -47,14 +66,39 @@ protected AttributeType instantiateElement(XMLEventReader xmlEventReader, StartE\n         attribute.setFriendlyName(StaxParserUtil.getAttributeValue(element, SAMLAssertionQNames.ATTR_FRIENDLY_NAME));\n         attribute.setNameFormat(StaxParserUtil.getAttributeValue(element, SAMLAssertionQNames.ATTR_NAME_FORMAT));\n \n-        final String x500Encoding = StaxParserUtil.getAttributeValue(element, SAMLAssertionQNames.ATTR_X500_ENCODING);\n-        if (x500Encoding != null) {\n-            attribute.getOtherAttributes().put(SAMLAssertionQNames.ATTR_X500_ENCODING.getQName(), x500Encoding);\n-        }\n+        // add non standard elements like SAMLAssertionQNames.ATTR_X500_ENCODING to other attributes\n+        attribute.getOtherAttributes().putAll(collectUnknownAttributesFrom(element));\n \n         return attribute;\n     }\n \n+    /**\n+     * Returns a {@link Map} with the found non-standard attribute values for the given {@link StartElement}.\n+     * An attribute is considered as non-standard, if it is not contained in DEFAULT_KNOWN_LOCAL_ATTRIBUTE_NAMES.\n+     *\n+     * @return Map\n+     */\n+    private Map<QName, String> collectUnknownAttributesFrom(StartElement element) {\n+\n+        Map<QName, String> otherAttributes = new HashMap<>();\n+\n+        Iterator<?> attributes = element.getAttributes();\n+        while (attributes.hasNext()) {\n+            Attribute currentAttribute = (Attribute) attributes.next();\n+            QName attributeQName = currentAttribute.getName();\n+            if (attributeQName == null || DEFAULT_KNOWN_LOCAL_ATTRIBUTE_NAMES.contains(attributeQName.getLocalPart())) {\n+                continue;\n+            }\n+            String attributeValue = currentAttribute.getValue();\n+            otherAttributes.put(attributeQName, attributeValue);\n+            if (LOGGER.isTraceEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1101ae24ae45b5b315ebe06da3d7858773e7740"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA5NzA2OA==", "bodyText": "That's what I wanted to do in the first place, but there is no classic JBoss-Logging \"logger\" field available for this class, just the PicketLinkLogger LOGGER, which doesn't provide a tracef(...) method. That's why I added the guard to spare the string concat.", "url": "https://github.com/keycloak/keycloak/pull/6681#discussion_r373097068", "createdAt": "2020-01-30T17:46:00Z", "author": {"login": "thomasdarimont"}, "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/assertion/SAMLAttributeParser.java", "diffHunk": "@@ -47,14 +66,39 @@ protected AttributeType instantiateElement(XMLEventReader xmlEventReader, StartE\n         attribute.setFriendlyName(StaxParserUtil.getAttributeValue(element, SAMLAssertionQNames.ATTR_FRIENDLY_NAME));\n         attribute.setNameFormat(StaxParserUtil.getAttributeValue(element, SAMLAssertionQNames.ATTR_NAME_FORMAT));\n \n-        final String x500Encoding = StaxParserUtil.getAttributeValue(element, SAMLAssertionQNames.ATTR_X500_ENCODING);\n-        if (x500Encoding != null) {\n-            attribute.getOtherAttributes().put(SAMLAssertionQNames.ATTR_X500_ENCODING.getQName(), x500Encoding);\n-        }\n+        // add non standard elements like SAMLAssertionQNames.ATTR_X500_ENCODING to other attributes\n+        attribute.getOtherAttributes().putAll(collectUnknownAttributesFrom(element));\n \n         return attribute;\n     }\n \n+    /**\n+     * Returns a {@link Map} with the found non-standard attribute values for the given {@link StartElement}.\n+     * An attribute is considered as non-standard, if it is not contained in DEFAULT_KNOWN_LOCAL_ATTRIBUTE_NAMES.\n+     *\n+     * @return Map\n+     */\n+    private Map<QName, String> collectUnknownAttributesFrom(StartElement element) {\n+\n+        Map<QName, String> otherAttributes = new HashMap<>();\n+\n+        Iterator<?> attributes = element.getAttributes();\n+        while (attributes.hasNext()) {\n+            Attribute currentAttribute = (Attribute) attributes.next();\n+            QName attributeQName = currentAttribute.getName();\n+            if (attributeQName == null || DEFAULT_KNOWN_LOCAL_ATTRIBUTE_NAMES.contains(attributeQName.getLocalPart())) {\n+                continue;\n+            }\n+            String attributeValue = currentAttribute.getValue();\n+            otherAttributes.put(attributeQName, attributeValue);\n+            if (LOGGER.isTraceEnabled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwNTY5Nw=="}, "originalCommit": {"oid": "e1101ae24ae45b5b315ebe06da3d7858773e7740"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI1NzcwMg==", "bodyText": "I didn't want to add a JBoss-Logging logger just for this one logging statement.", "url": "https://github.com/keycloak/keycloak/pull/6681#discussion_r373257702", "createdAt": "2020-01-31T00:00:39Z", "author": {"login": "thomasdarimont"}, "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/assertion/SAMLAttributeParser.java", "diffHunk": "@@ -47,14 +66,39 @@ protected AttributeType instantiateElement(XMLEventReader xmlEventReader, StartE\n         attribute.setFriendlyName(StaxParserUtil.getAttributeValue(element, SAMLAssertionQNames.ATTR_FRIENDLY_NAME));\n         attribute.setNameFormat(StaxParserUtil.getAttributeValue(element, SAMLAssertionQNames.ATTR_NAME_FORMAT));\n \n-        final String x500Encoding = StaxParserUtil.getAttributeValue(element, SAMLAssertionQNames.ATTR_X500_ENCODING);\n-        if (x500Encoding != null) {\n-            attribute.getOtherAttributes().put(SAMLAssertionQNames.ATTR_X500_ENCODING.getQName(), x500Encoding);\n-        }\n+        // add non standard elements like SAMLAssertionQNames.ATTR_X500_ENCODING to other attributes\n+        attribute.getOtherAttributes().putAll(collectUnknownAttributesFrom(element));\n \n         return attribute;\n     }\n \n+    /**\n+     * Returns a {@link Map} with the found non-standard attribute values for the given {@link StartElement}.\n+     * An attribute is considered as non-standard, if it is not contained in DEFAULT_KNOWN_LOCAL_ATTRIBUTE_NAMES.\n+     *\n+     * @return Map\n+     */\n+    private Map<QName, String> collectUnknownAttributesFrom(StartElement element) {\n+\n+        Map<QName, String> otherAttributes = new HashMap<>();\n+\n+        Iterator<?> attributes = element.getAttributes();\n+        while (attributes.hasNext()) {\n+            Attribute currentAttribute = (Attribute) attributes.next();\n+            QName attributeQName = currentAttribute.getName();\n+            if (attributeQName == null || DEFAULT_KNOWN_LOCAL_ATTRIBUTE_NAMES.contains(attributeQName.getLocalPart())) {\n+                continue;\n+            }\n+            String attributeValue = currentAttribute.getValue();\n+            otherAttributes.put(attributeQName, attributeValue);\n+            if (LOGGER.isTraceEnabled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwNTY5Nw=="}, "originalCommit": {"oid": "e1101ae24ae45b5b315ebe06da3d7858773e7740"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM1OTMwNQ==", "bodyText": "I see, that makes sense then. Perhaps we should unify the logging to use single logging framework but that's definitely out of scope for this PR.", "url": "https://github.com/keycloak/keycloak/pull/6681#discussion_r373359305", "createdAt": "2020-01-31T08:17:16Z", "author": {"login": "hmlnarik"}, "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/assertion/SAMLAttributeParser.java", "diffHunk": "@@ -47,14 +66,39 @@ protected AttributeType instantiateElement(XMLEventReader xmlEventReader, StartE\n         attribute.setFriendlyName(StaxParserUtil.getAttributeValue(element, SAMLAssertionQNames.ATTR_FRIENDLY_NAME));\n         attribute.setNameFormat(StaxParserUtil.getAttributeValue(element, SAMLAssertionQNames.ATTR_NAME_FORMAT));\n \n-        final String x500Encoding = StaxParserUtil.getAttributeValue(element, SAMLAssertionQNames.ATTR_X500_ENCODING);\n-        if (x500Encoding != null) {\n-            attribute.getOtherAttributes().put(SAMLAssertionQNames.ATTR_X500_ENCODING.getQName(), x500Encoding);\n-        }\n+        // add non standard elements like SAMLAssertionQNames.ATTR_X500_ENCODING to other attributes\n+        attribute.getOtherAttributes().putAll(collectUnknownAttributesFrom(element));\n \n         return attribute;\n     }\n \n+    /**\n+     * Returns a {@link Map} with the found non-standard attribute values for the given {@link StartElement}.\n+     * An attribute is considered as non-standard, if it is not contained in DEFAULT_KNOWN_LOCAL_ATTRIBUTE_NAMES.\n+     *\n+     * @return Map\n+     */\n+    private Map<QName, String> collectUnknownAttributesFrom(StartElement element) {\n+\n+        Map<QName, String> otherAttributes = new HashMap<>();\n+\n+        Iterator<?> attributes = element.getAttributes();\n+        while (attributes.hasNext()) {\n+            Attribute currentAttribute = (Attribute) attributes.next();\n+            QName attributeQName = currentAttribute.getName();\n+            if (attributeQName == null || DEFAULT_KNOWN_LOCAL_ATTRIBUTE_NAMES.contains(attributeQName.getLocalPart())) {\n+                continue;\n+            }\n+            String attributeValue = currentAttribute.getValue();\n+            otherAttributes.put(attributeQName, attributeValue);\n+            if (LOGGER.isTraceEnabled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwNTY5Nw=="}, "originalCommit": {"oid": "e1101ae24ae45b5b315ebe06da3d7858773e7740"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjA4MzYwOnYy", "diffSide": "RIGHT", "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/assertion/SAMLAttributeParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNDowNDoyOVrOFjsBIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNDowNDoyOVrOFjsBIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk2NTY2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (attributeQName == null || DEFAULT_KNOWN_LOCAL_ATTRIBUTE_NAMES.contains(attributeQName.getLocalPart())) {\n          \n          \n            \n                        if (attributeQName == null || DEFAULT_KNOWN_LOCAL_ATTRIBUTE_NAMES.contains(attributeQName)) {", "url": "https://github.com/keycloak/keycloak/pull/6681#discussion_r372965664", "createdAt": "2020-01-30T14:04:29Z", "author": {"login": "hmlnarik"}, "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/assertion/SAMLAttributeParser.java", "diffHunk": "@@ -47,14 +66,39 @@ protected AttributeType instantiateElement(XMLEventReader xmlEventReader, StartE\n         attribute.setFriendlyName(StaxParserUtil.getAttributeValue(element, SAMLAssertionQNames.ATTR_FRIENDLY_NAME));\n         attribute.setNameFormat(StaxParserUtil.getAttributeValue(element, SAMLAssertionQNames.ATTR_NAME_FORMAT));\n \n-        final String x500Encoding = StaxParserUtil.getAttributeValue(element, SAMLAssertionQNames.ATTR_X500_ENCODING);\n-        if (x500Encoding != null) {\n-            attribute.getOtherAttributes().put(SAMLAssertionQNames.ATTR_X500_ENCODING.getQName(), x500Encoding);\n-        }\n+        // add non standard elements like SAMLAssertionQNames.ATTR_X500_ENCODING to other attributes\n+        attribute.getOtherAttributes().putAll(collectUnknownAttributesFrom(element));\n \n         return attribute;\n     }\n \n+    /**\n+     * Returns a {@link Map} with the found non-standard attribute values for the given {@link StartElement}.\n+     * An attribute is considered as non-standard, if it is not contained in DEFAULT_KNOWN_LOCAL_ATTRIBUTE_NAMES.\n+     *\n+     * @return Map\n+     */\n+    private Map<QName, String> collectUnknownAttributesFrom(StartElement element) {\n+\n+        Map<QName, String> otherAttributes = new HashMap<>();\n+\n+        Iterator<?> attributes = element.getAttributes();\n+        while (attributes.hasNext()) {\n+            Attribute currentAttribute = (Attribute) attributes.next();\n+            QName attributeQName = currentAttribute.getName();\n+            if (attributeQName == null || DEFAULT_KNOWN_LOCAL_ATTRIBUTE_NAMES.contains(attributeQName.getLocalPart())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1101ae24ae45b5b315ebe06da3d7858773e7740"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3952, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}