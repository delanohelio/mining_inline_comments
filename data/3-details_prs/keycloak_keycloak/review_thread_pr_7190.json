{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3NDU0NDcy", "number": 7190, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMDowMTowMVrOEHZc_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMDowMTowMVrOEHZc_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTkyNTA4OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/crypto/RsaCekManagementProvider.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMDowMTowMlrOGmvDNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMDo1OTozMFrOGnQzWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI2OTk0Mg==", "bodyText": "4.3.  Key Encryption with RSAES OAEP of JWA states that\n\n\"alg\" Param Value : RSA-OAEP-256\nKey Management Algorithm : RSAES OAEP using SHA-256 and MGF1 with SHA-256\n\n[A.2.  Key Management Algorithm Identifier Cross-Reference of JWA](A.2.  Key Management Algorithm Identifier Cross-Reference) stats that\n\nJWE : RSA-OAEP-256\nJCA : RSA/ECB/OAEPWithSHA-256AndMGF1Padding & MGF1ParameterSpec.SHA256\n\nI think RSA-OAEP-256 use SHA-256 for both the main digest and the MGF1 digest.\nI'm not sure\nreturn new RsaKeyEncryption256JWEAlgorithmProvider(\"RSA/ECB/OAEPWithSHA-256AndMGF1Padding\")\ncan instanciate the provider for satisfying RSA-OAEP-256. (might be use SHA-256 for the main digest and SHA-1 for the MGF1 digest?).", "url": "https://github.com/keycloak/keycloak/pull/7190#discussion_r443269942", "createdAt": "2020-06-22T00:01:02Z", "author": {"login": "tnorimat"}, "path": "services/src/main/java/org/keycloak/crypto/RsaCekManagementProvider.java", "diffHunk": "@@ -39,6 +40,8 @@ public JWEAlgorithmProvider jweAlgorithmProvider() {\n             jcaAlgorithmName = \"RSA/ECB/PKCS1Padding\";\n         } else if (JWEConstants.RSA_OAEP.equals(jweAlgorithmName)) {\n             jcaAlgorithmName = \"RSA/ECB/OAEPWithSHA-1AndMGF1Padding\";\n+        } else if (JWEConstants.RSA_OAEP_256.equals(jweAlgorithmName)) {\n+            return new RsaKeyEncryption256JWEAlgorithmProvider(\"RSA/ECB/OAEPWithSHA-256AndMGF1Padding\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7017b1ed47410101299b237ae1cb26229fbe7c5"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwMDM1Mg==", "bodyText": "This is handled in org.keycloak.jose.jwe.alg.RsaKeyEncryption256JWEAlgorithmProvider where the AlgorithmParameterSpec is passed in\nAlgorithmParameterSpec paramSpec = new OAEPParameterSpec(\"SHA-256\", \"MGF1\", MGF1ParameterSpec.SHA256, PSource.PSpecified.DEFAULT);\nalgp.init(paramSpec);\n\nThere isn't a more specific cipher than \"RSA/ECB/OAEPWithSHA-256AndMGF1Padding\" available - passing in those AlgorithmParameterSpec seems to be the only way to get SHA-256 on the main and MFG1 digest.", "url": "https://github.com/keycloak/keycloak/pull/7190#discussion_r443600352", "createdAt": "2020-06-22T14:29:18Z", "author": {"login": "dillon-sellars"}, "path": "services/src/main/java/org/keycloak/crypto/RsaCekManagementProvider.java", "diffHunk": "@@ -39,6 +40,8 @@ public JWEAlgorithmProvider jweAlgorithmProvider() {\n             jcaAlgorithmName = \"RSA/ECB/PKCS1Padding\";\n         } else if (JWEConstants.RSA_OAEP.equals(jweAlgorithmName)) {\n             jcaAlgorithmName = \"RSA/ECB/OAEPWithSHA-1AndMGF1Padding\";\n+        } else if (JWEConstants.RSA_OAEP_256.equals(jweAlgorithmName)) {\n+            return new RsaKeyEncryption256JWEAlgorithmProvider(\"RSA/ECB/OAEPWithSHA-256AndMGF1Padding\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI2OTk0Mg=="}, "originalCommit": {"oid": "c7017b1ed47410101299b237ae1cb26229fbe7c5"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgyMjkzOQ==", "bodyText": "@dillon-sellars Thank you. I've confirmed the point you've mentioned.", "url": "https://github.com/keycloak/keycloak/pull/7190#discussion_r443822939", "createdAt": "2020-06-22T20:59:30Z", "author": {"login": "tnorimat"}, "path": "services/src/main/java/org/keycloak/crypto/RsaCekManagementProvider.java", "diffHunk": "@@ -39,6 +40,8 @@ public JWEAlgorithmProvider jweAlgorithmProvider() {\n             jcaAlgorithmName = \"RSA/ECB/PKCS1Padding\";\n         } else if (JWEConstants.RSA_OAEP.equals(jweAlgorithmName)) {\n             jcaAlgorithmName = \"RSA/ECB/OAEPWithSHA-1AndMGF1Padding\";\n+        } else if (JWEConstants.RSA_OAEP_256.equals(jweAlgorithmName)) {\n+            return new RsaKeyEncryption256JWEAlgorithmProvider(\"RSA/ECB/OAEPWithSHA-256AndMGF1Padding\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI2OTk0Mg=="}, "originalCommit": {"oid": "c7017b1ed47410101299b237ae1cb26229fbe7c5"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3585, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}