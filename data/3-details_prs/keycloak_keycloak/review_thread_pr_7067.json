{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MjU2Nzk5", "number": 7067, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTowODo0NFrOD8HD9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOTo0NDo1MlrOEE0wIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzU2ODU0OnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/MyResourcesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTowODo0NFrOGU2SKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTowODo0NFrOGU2SKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxNDA4OQ==", "bodyText": "We should check expand actually works. Let's say there's a bug and it's constantly expanded. Then it won't be discovered by the tests.", "url": "https://github.com/keycloak/keycloak/pull/7067#discussion_r424514089", "createdAt": "2020-05-13T15:08:44Z", "author": {"login": "vmuzikar"}, "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/MyResourcesTest.java", "diffHunk": "@@ -154,11 +166,23 @@ public void shouldShowMyResourcesAndUpdatePermissions() {\n     }\n \n     @Test\n-    public void shouldShowMyResourcesAndShare() {\n-        myResourcesPage.navigateTo();\n-        loginPage.form().login(createUser(\"jdoe\"));\n-        myResourcesPage.assertCurrent();\n+    public void shouldShowMyResourcesAndRemoveShares() {\n+        final int row = 2;\n+        myResourcesPage.clickExpandButton(row);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "943a9df5669b406dc9889051ce92d5612dcbc33a"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzU4ODU4OnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/MyResourcesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToxMzoyMlrOGU2fqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToxMzoyMlrOGU2fqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxNzU0Ng==", "bodyText": "Could we move the explicit pauses into the Page Object? Or maybe even better, don't wait for a specific amount of time but rather for the box to be expanded. ;)", "url": "https://github.com/keycloak/keycloak/pull/7067#discussion_r424517546", "createdAt": "2020-05-13T15:13:22Z", "author": {"login": "vmuzikar"}, "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/MyResourcesTest.java", "diffHunk": "@@ -131,19 +142,20 @@ public void setup() throws Exception {\n         }\n     }\n \n+    @Override\n+    public void addTestUser() {\n+        testUser = createUser(\"jdoe\");\n+    }\n+\n     @Test\n     public void shouldShowMyResourcesAndUpdatePermissions() {\n-        myResourcesPage.navigateTo();\n-        loginPage.form().login(createUser(\"jdoe\"));\n-        myResourcesPage.assertCurrent();\n-\n         assertEquals(6, myResourcesPage.getResourcesListCount());\n \n-        final int row = 2;\n+        final int row = 1;\n         myResourcesPage.clickExpandButton(row);\n         pause(2000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "943a9df5669b406dc9889051ce92d5612dcbc33a"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzU5NDg2OnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/MyResourcesTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToxNDo0N1rOGU2j7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMDo0NTo0NFrOGYuXzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxODYzOA==", "bodyText": "Please add some tests for adding and removing scopes.", "url": "https://github.com/keycloak/keycloak/pull/7067#discussion_r424518638", "createdAt": "2020-05-13T15:14:47Z", "author": {"login": "vmuzikar"}, "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/MyResourcesTest.java", "diffHunk": "@@ -30,18 +30,20 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n \n import static java.util.Collections.singletonList;\n import static org.hamcrest.core.StringEndsWith.endsWith;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n import static org.keycloak.representations.idm.CredentialRepresentation.PASSWORD;\n import static org.keycloak.testsuite.auth.page.AuthRealm.TEST;\n import static org.keycloak.testsuite.util.WaitUtils.pause;\n import static org.keycloak.testsuite.util.WaitUtils.waitForModalFadeIn;\n import static org.keycloak.testsuite.util.WaitUtils.waitForModalFadeOut;\n \n-public class MyResourcesTest extends AbstractAccountTest {\n+public class MyResourcesTest extends BaseAccountPageTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "943a9df5669b406dc9889051ce92d5612dcbc33a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkxNzQ5Nw==", "bodyText": "There is a test to remove scopes and there is a test to add scopes. So I'm not sure what you mean", "url": "https://github.com/keycloak/keycloak/pull/7067#discussion_r424917497", "createdAt": "2020-05-14T07:12:38Z", "author": {"login": "edewit"}, "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/MyResourcesTest.java", "diffHunk": "@@ -30,18 +30,20 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n \n import static java.util.Collections.singletonList;\n import static org.hamcrest.core.StringEndsWith.endsWith;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n import static org.keycloak.representations.idm.CredentialRepresentation.PASSWORD;\n import static org.keycloak.testsuite.auth.page.AuthRealm.TEST;\n import static org.keycloak.testsuite.util.WaitUtils.pause;\n import static org.keycloak.testsuite.util.WaitUtils.waitForModalFadeIn;\n import static org.keycloak.testsuite.util.WaitUtils.waitForModalFadeOut;\n \n-public class MyResourcesTest extends AbstractAccountTest {\n+public class MyResourcesTest extends BaseAccountPageTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxODYzOA=="}, "originalCommit": {"oid": "943a9df5669b406dc9889051ce92d5612dcbc33a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkzNjI0NA==", "bodyText": "Yes, and also to test the Scopes are displayed properly (if it displayes everything that should be displayed).", "url": "https://github.com/keycloak/keycloak/pull/7067#discussion_r424936244", "createdAt": "2020-05-14T07:48:50Z", "author": {"login": "vmuzikar"}, "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/MyResourcesTest.java", "diffHunk": "@@ -30,18 +30,20 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n \n import static java.util.Collections.singletonList;\n import static org.hamcrest.core.StringEndsWith.endsWith;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n import static org.keycloak.representations.idm.CredentialRepresentation.PASSWORD;\n import static org.keycloak.testsuite.auth.page.AuthRealm.TEST;\n import static org.keycloak.testsuite.util.WaitUtils.pause;\n import static org.keycloak.testsuite.util.WaitUtils.waitForModalFadeIn;\n import static org.keycloak.testsuite.util.WaitUtils.waitForModalFadeOut;\n \n-public class MyResourcesTest extends AbstractAccountTest {\n+public class MyResourcesTest extends BaseAccountPageTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxODYzOA=="}, "originalCommit": {"oid": "943a9df5669b406dc9889051ce92d5612dcbc33a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU3ODc2Ng==", "bodyText": "I believe this one is still valid. We're missing some test for adding scopes as well as checking that scopes are displayed properly (everything that's ought to be displayed, is displayed).", "url": "https://github.com/keycloak/keycloak/pull/7067#discussion_r428578766", "createdAt": "2020-05-21T10:45:44Z", "author": {"login": "vmuzikar"}, "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/MyResourcesTest.java", "diffHunk": "@@ -30,18 +30,20 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n \n import static java.util.Collections.singletonList;\n import static org.hamcrest.core.StringEndsWith.endsWith;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n import static org.keycloak.representations.idm.CredentialRepresentation.PASSWORD;\n import static org.keycloak.testsuite.auth.page.AuthRealm.TEST;\n import static org.keycloak.testsuite.util.WaitUtils.pause;\n import static org.keycloak.testsuite.util.WaitUtils.waitForModalFadeIn;\n import static org.keycloak.testsuite.util.WaitUtils.waitForModalFadeOut;\n \n-public class MyResourcesTest extends AbstractAccountTest {\n+public class MyResourcesTest extends BaseAccountPageTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxODYzOA=="}, "originalCommit": {"oid": "943a9df5669b406dc9889051ce92d5612dcbc33a"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzYzMTQyOnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/MyResourcesTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToyMjo1MFrOGU27ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwODowNjo1MFrOGVQsHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyNDczMA==", "bodyText": "waitForModalFadeIn and waitForModalFadeOut is meant to be used only by Admin Console. I'm sorry it's not apparent at the first sight, the Admin Console testsuite is a mess. It's a coincidence it works here as well but I wouldn't rely on that. Consider using testModalDialog as we discussed.", "url": "https://github.com/keycloak/keycloak/pull/7067#discussion_r424524730", "createdAt": "2020-05-13T15:22:50Z", "author": {"login": "vmuzikar"}, "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/MyResourcesTest.java", "diffHunk": "@@ -173,6 +197,23 @@ public void shouldShowMyResourcesAndShare() {\n         assertThat(myResourcesPage.getSharedWith(row), endsWith(\"and 1 other users.\"));\n     }\n \n+    @Test\n+    public void shouldAllowRequestToShare() {\n+        final String resourceName = \"Resource 12\";\n+        myResourcesPage.clickPendingRequest(resourceName);\n+        waitForModalFadeIn();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "943a9df5669b406dc9889051ce92d5612dcbc33a"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkzODM3OA==", "bodyText": "testModalDialog is meant for simple \"Are you sure you want to do this\" kind of dialog. On these dialog users will have to do more then just press the confirm or cancel buttons.", "url": "https://github.com/keycloak/keycloak/pull/7067#discussion_r424938378", "createdAt": "2020-05-14T07:52:24Z", "author": {"login": "edewit"}, "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/MyResourcesTest.java", "diffHunk": "@@ -173,6 +197,23 @@ public void shouldShowMyResourcesAndShare() {\n         assertThat(myResourcesPage.getSharedWith(row), endsWith(\"and 1 other users.\"));\n     }\n \n+    @Test\n+    public void shouldAllowRequestToShare() {\n+        final String resourceName = \"Resource 12\";\n+        myResourcesPage.clickPendingRequest(resourceName);\n+        waitForModalFadeIn();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyNDczMA=="}, "originalCommit": {"oid": "943a9df5669b406dc9889051ce92d5612dcbc33a"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk0NjcxNg==", "bodyText": "Yes, I agree. But we should use a similar approach to test this more complex dialogs. Like try to close them, check that they are (not) displayed, etc.", "url": "https://github.com/keycloak/keycloak/pull/7067#discussion_r424946716", "createdAt": "2020-05-14T08:06:50Z", "author": {"login": "vmuzikar"}, "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/MyResourcesTest.java", "diffHunk": "@@ -173,6 +197,23 @@ public void shouldShowMyResourcesAndShare() {\n         assertThat(myResourcesPage.getSharedWith(row), endsWith(\"and 1 other users.\"));\n     }\n \n+    @Test\n+    public void shouldAllowRequestToShare() {\n+        final String resourceName = \"Resource 12\";\n+        myResourcesPage.clickPendingRequest(resourceName);\n+        waitForModalFadeIn();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyNDczMA=="}, "originalCommit": {"oid": "943a9df5669b406dc9889051ce92d5612dcbc33a"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzY1MDcwOnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/MyResourcesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToyNzoxMFrOGU3IOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToyNzoxMFrOGU3IOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyNzkyOQ==", "bodyText": "Please add a test for the scenario when user rejects the request.", "url": "https://github.com/keycloak/keycloak/pull/7067#discussion_r424527929", "createdAt": "2020-05-13T15:27:10Z", "author": {"login": "vmuzikar"}, "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/MyResourcesTest.java", "diffHunk": "@@ -173,6 +197,23 @@ public void shouldShowMyResourcesAndShare() {\n         assertThat(myResourcesPage.getSharedWith(row), endsWith(\"and 1 other users.\"));\n     }\n \n+    @Test\n+    public void shouldAllowRequestToShare() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "943a9df5669b406dc9889051ce92d5612dcbc33a"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzY5NjM5OnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/MyResourcesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTozNjo0MFrOGU3kiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTozNjo0MFrOGU3kiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUzNTE3OQ==", "bodyText": "Please add some check to verify the tab was really switched, that the content changed.", "url": "https://github.com/keycloak/keycloak/pull/7067#discussion_r424535179", "createdAt": "2020-05-13T15:36:40Z", "author": {"login": "vmuzikar"}, "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/MyResourcesTest.java", "diffHunk": "@@ -173,6 +197,23 @@ public void shouldShowMyResourcesAndShare() {\n         assertThat(myResourcesPage.getSharedWith(row), endsWith(\"and 1 other users.\"));\n     }\n \n+    @Test\n+    public void shouldAllowRequestToShare() {\n+        final String resourceName = \"Resource 12\";\n+        myResourcesPage.clickPendingRequest(resourceName);\n+        waitForModalFadeIn();\n+        myResourcesPage.acceptRequest(resourceName, 0);\n+        waitForModalFadeOut();\n+\n+        myResourcesPage.clickSignOut();\n+        myResourcesPage.navigateTo();\n+        loginPage.form().login(createUser(\"alice\"));\n+\n+        myResourcesPage.clickSharedWithMeTab();\n+\n+        assertTrue(myResourcesPage.containsResource(resourceName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "943a9df5669b406dc9889051ce92d5612dcbc33a"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzcwOTMzOnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/MyResourcesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTozOTowOFrOGU3sVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTozOTowOFrOGU3sVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUzNzE3Mw==", "bodyText": "Please add a test for the Refresh button.", "url": "https://github.com/keycloak/keycloak/pull/7067#discussion_r424537173", "createdAt": "2020-05-13T15:39:08Z", "author": {"login": "vmuzikar"}, "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/MyResourcesTest.java", "diffHunk": "@@ -30,18 +30,20 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n \n import static java.util.Collections.singletonList;\n import static org.hamcrest.core.StringEndsWith.endsWith;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n import static org.keycloak.representations.idm.CredentialRepresentation.PASSWORD;\n import static org.keycloak.testsuite.auth.page.AuthRealm.TEST;\n import static org.keycloak.testsuite.util.WaitUtils.pause;\n import static org.keycloak.testsuite.util.WaitUtils.waitForModalFadeIn;\n import static org.keycloak.testsuite.util.WaitUtils.waitForModalFadeOut;\n \n-public class MyResourcesTest extends AbstractAccountTest {\n+public class MyResourcesTest extends BaseAccountPageTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "943a9df5669b406dc9889051ce92d5612dcbc33a"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzczNTA1OnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/MyResourcesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTo0NDo0M1rOGU38sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMDo1MDoyMlrOGYufXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU0MTM2MQ==", "bodyText": "Please add a test for the icon to check it shows correct number of pending requests.", "url": "https://github.com/keycloak/keycloak/pull/7067#discussion_r424541361", "createdAt": "2020-05-13T15:44:43Z", "author": {"login": "vmuzikar"}, "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/MyResourcesTest.java", "diffHunk": "@@ -173,6 +197,23 @@ public void shouldShowMyResourcesAndShare() {\n         assertThat(myResourcesPage.getSharedWith(row), endsWith(\"and 1 other users.\"));\n     }\n \n+    @Test\n+    public void shouldAllowRequestToShare() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "943a9df5669b406dc9889051ce92d5612dcbc33a"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU4MDcwMw==", "bodyText": "Please add a test for the icon to check it shows correct number of pending requests.\n\nI believe this one is still unresolved.", "url": "https://github.com/keycloak/keycloak/pull/7067#discussion_r428580703", "createdAt": "2020-05-21T10:50:22Z", "author": {"login": "vmuzikar"}, "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/MyResourcesTest.java", "diffHunk": "@@ -173,6 +197,23 @@ public void shouldShowMyResourcesAndShare() {\n         assertThat(myResourcesPage.getSharedWith(row), endsWith(\"and 1 other users.\"));\n     }\n \n+    @Test\n+    public void shouldAllowRequestToShare() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU0MTM2MQ=="}, "originalCommit": {"oid": "943a9df5669b406dc9889051ce92d5612dcbc33a"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzgxNTI3OnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/MyResourcesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjowMjoyMVrOGU4v3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjowMjoyMVrOGU4v3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU1NDQ2Mg==", "bodyText": "Please add some simple notifications checks to all test scenarios, similarly to e.g. DeviceActivityTest.", "url": "https://github.com/keycloak/keycloak/pull/7067#discussion_r424554462", "createdAt": "2020-05-13T16:02:21Z", "author": {"login": "vmuzikar"}, "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/MyResourcesTest.java", "diffHunk": "@@ -30,18 +30,20 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n \n import static java.util.Collections.singletonList;\n import static org.hamcrest.core.StringEndsWith.endsWith;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n import static org.keycloak.representations.idm.CredentialRepresentation.PASSWORD;\n import static org.keycloak.testsuite.auth.page.AuthRealm.TEST;\n import static org.keycloak.testsuite.util.WaitUtils.pause;\n import static org.keycloak.testsuite.util.WaitUtils.waitForModalFadeIn;\n import static org.keycloak.testsuite.util.WaitUtils.waitForModalFadeOut;\n \n-public class MyResourcesTest extends AbstractAccountTest {\n+public class MyResourcesTest extends BaseAccountPageTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "943a9df5669b406dc9889051ce92d5612dcbc33a"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzgyNDU5OnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/MyResourcesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjowNDo0MFrOGU42IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjowNDo0MFrOGU42IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU1NjA2NQ==", "bodyText": "Please add a test for the \"Application\" column \u2013 if it's displayed, links are present, etc.", "url": "https://github.com/keycloak/keycloak/pull/7067#discussion_r424556065", "createdAt": "2020-05-13T16:04:40Z", "author": {"login": "vmuzikar"}, "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/MyResourcesTest.java", "diffHunk": "@@ -30,18 +30,20 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n \n import static java.util.Collections.singletonList;\n import static org.hamcrest.core.StringEndsWith.endsWith;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n import static org.keycloak.representations.idm.CredentialRepresentation.PASSWORD;\n import static org.keycloak.testsuite.auth.page.AuthRealm.TEST;\n import static org.keycloak.testsuite.util.WaitUtils.pause;\n import static org.keycloak.testsuite.util.WaitUtils.waitForModalFadeIn;\n import static org.keycloak.testsuite.util.WaitUtils.waitForModalFadeOut;\n \n-public class MyResourcesTest extends AbstractAccountTest {\n+public class MyResourcesTest extends BaseAccountPageTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "943a9df5669b406dc9889051ce92d5612dcbc33a"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mzg5MDc0OnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/MyResourcesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjoyMDo1MVrOGU5gog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjoyMDo1MVrOGU5gog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU2Njk0Ng==", "bodyText": "Please add a test for the Pending requests dialog and Edit resource dialog to check if it displays all the users it is supposed to.", "url": "https://github.com/keycloak/keycloak/pull/7067#discussion_r424566946", "createdAt": "2020-05-13T16:20:51Z", "author": {"login": "vmuzikar"}, "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/MyResourcesTest.java", "diffHunk": "@@ -30,18 +30,20 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n \n import static java.util.Collections.singletonList;\n import static org.hamcrest.core.StringEndsWith.endsWith;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n import static org.keycloak.representations.idm.CredentialRepresentation.PASSWORD;\n import static org.keycloak.testsuite.auth.page.AuthRealm.TEST;\n import static org.keycloak.testsuite.util.WaitUtils.pause;\n import static org.keycloak.testsuite.util.WaitUtils.waitForModalFadeIn;\n import static org.keycloak.testsuite.util.WaitUtils.waitForModalFadeOut;\n \n-public class MyResourcesTest extends AbstractAccountTest {\n+public class MyResourcesTest extends BaseAccountPageTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "943a9df5669b406dc9889051ce92d5612dcbc33a"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTEzODYyOnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/MyResourcesTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMDoyNTo1MlrOGYt30g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNjo0NTozMlrOGZ2Uzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU3MDU3OA==", "bodyText": "Please add a simple assert to verify that link is also present here.\nI believe there is some scenario when a link is not present at all, right? We should test that too.", "url": "https://github.com/keycloak/keycloak/pull/7067#discussion_r428570578", "createdAt": "2020-05-21T10:25:52Z", "author": {"login": "vmuzikar"}, "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/MyResourcesTest.java", "diffHunk": "@@ -131,48 +121,133 @@ public void setup() throws Exception {\n         }\n     }\n \n+    private ResourceRepresentation createResource(AuthzClient authzClient, AuthorizationResource authorization, int i) {\n+        ResourceRepresentation resource = new ResourceRepresentation();\n+\n+        resource.setOwnerManagedAccess(true);\n+\n+        try {\n+            final byte[] content = new JWSInput(authzClient.obtainAccessToken(\"jdoe\", PASSWORD).getToken()).getContent();\n+            final AccessToken accessToken = JsonSerialization.readValue(content, AccessToken.class);\n+            resource.setOwner(accessToken.getSubject());\n+        }\n+        catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        resource.setName(\"Resource \" + i);\n+        resource.setDisplayName(\"Display Name \" + i);\n+        resource.setIconUri(\"Icon Uri \" + i);\n+        resource.addScope(\"Scope A\", \"Scope B\", \"Scope C\", \"Scope D\");\n+        resource.setUri(\"http://resourceServer.com/resources/\" + i);\n+\n+        try (Response response1 = authorization.resources().create(resource)) {\n+            resource.setId(response1.readEntity(ResourceRepresentation.class).getId());\n+        }\n+        return resource;\n+    }\n+\n+    @Override\n+    public void addTestUser() {\n+        testUser = createUser(\"jdoe\");\n+    }\n+\n+    @Test\n+    public void shouldDisplayTheResources() {\n+        assertEquals(6, myResourcesPage.getResourcesListCount());\n+\n+        assertEquals(\"Resource 0\", myResourcesPage.getCellText(\"name\", 0));\n+        assertEquals(\"Resource 1\", myResourcesPage.getCellText(\"name\", 1));\n+        assertEquals(\"My Resource Server\", myResourcesPage.getCellText(\"client\", 0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b75961986ccb625fb55a9777fac29dc0315d729"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc0MjQwNw==", "bodyText": "there should always be a link: \n  \n    \n      keycloak/themes/src/main/resources/theme/keycloak-preview/account/resources/app/content/my-resources-page/ResourcesTable.tsx\n    \n    \n         Line 130\n      in\n      0b75961\n    \n    \n    \n    \n\n        \n          \n           <a href={resource.client.baseUrl}>{this.getClientName(resource.client)}</a>", "url": "https://github.com/keycloak/keycloak/pull/7067#discussion_r429742407", "createdAt": "2020-05-25T05:53:15Z", "author": {"login": "edewit"}, "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/MyResourcesTest.java", "diffHunk": "@@ -131,48 +121,133 @@ public void setup() throws Exception {\n         }\n     }\n \n+    private ResourceRepresentation createResource(AuthzClient authzClient, AuthorizationResource authorization, int i) {\n+        ResourceRepresentation resource = new ResourceRepresentation();\n+\n+        resource.setOwnerManagedAccess(true);\n+\n+        try {\n+            final byte[] content = new JWSInput(authzClient.obtainAccessToken(\"jdoe\", PASSWORD).getToken()).getContent();\n+            final AccessToken accessToken = JsonSerialization.readValue(content, AccessToken.class);\n+            resource.setOwner(accessToken.getSubject());\n+        }\n+        catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        resource.setName(\"Resource \" + i);\n+        resource.setDisplayName(\"Display Name \" + i);\n+        resource.setIconUri(\"Icon Uri \" + i);\n+        resource.addScope(\"Scope A\", \"Scope B\", \"Scope C\", \"Scope D\");\n+        resource.setUri(\"http://resourceServer.com/resources/\" + i);\n+\n+        try (Response response1 = authorization.resources().create(resource)) {\n+            resource.setId(response1.readEntity(ResourceRepresentation.class).getId());\n+        }\n+        return resource;\n+    }\n+\n+    @Override\n+    public void addTestUser() {\n+        testUser = createUser(\"jdoe\");\n+    }\n+\n+    @Test\n+    public void shouldDisplayTheResources() {\n+        assertEquals(6, myResourcesPage.getResourcesListCount());\n+\n+        assertEquals(\"Resource 0\", myResourcesPage.getCellText(\"name\", 0));\n+        assertEquals(\"Resource 1\", myResourcesPage.getCellText(\"name\", 1));\n+        assertEquals(\"My Resource Server\", myResourcesPage.getCellText(\"client\", 0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU3MDU3OA=="}, "originalCommit": {"oid": "0b75961986ccb625fb55a9777fac29dc0315d729"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc1NzY0Ng==", "bodyText": "What if the client doesn't have Base URL? ;)", "url": "https://github.com/keycloak/keycloak/pull/7067#discussion_r429757646", "createdAt": "2020-05-25T06:45:32Z", "author": {"login": "vmuzikar"}, "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/MyResourcesTest.java", "diffHunk": "@@ -131,48 +121,133 @@ public void setup() throws Exception {\n         }\n     }\n \n+    private ResourceRepresentation createResource(AuthzClient authzClient, AuthorizationResource authorization, int i) {\n+        ResourceRepresentation resource = new ResourceRepresentation();\n+\n+        resource.setOwnerManagedAccess(true);\n+\n+        try {\n+            final byte[] content = new JWSInput(authzClient.obtainAccessToken(\"jdoe\", PASSWORD).getToken()).getContent();\n+            final AccessToken accessToken = JsonSerialization.readValue(content, AccessToken.class);\n+            resource.setOwner(accessToken.getSubject());\n+        }\n+        catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        resource.setName(\"Resource \" + i);\n+        resource.setDisplayName(\"Display Name \" + i);\n+        resource.setIconUri(\"Icon Uri \" + i);\n+        resource.addScope(\"Scope A\", \"Scope B\", \"Scope C\", \"Scope D\");\n+        resource.setUri(\"http://resourceServer.com/resources/\" + i);\n+\n+        try (Response response1 = authorization.resources().create(resource)) {\n+            resource.setId(response1.readEntity(ResourceRepresentation.class).getId());\n+        }\n+        return resource;\n+    }\n+\n+    @Override\n+    public void addTestUser() {\n+        testUser = createUser(\"jdoe\");\n+    }\n+\n+    @Test\n+    public void shouldDisplayTheResources() {\n+        assertEquals(6, myResourcesPage.getResourcesListCount());\n+\n+        assertEquals(\"Resource 0\", myResourcesPage.getCellText(\"name\", 0));\n+        assertEquals(\"Resource 1\", myResourcesPage.getCellText(\"name\", 1));\n+        assertEquals(\"My Resource Server\", myResourcesPage.getCellText(\"client\", 0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU3MDU3OA=="}, "originalCommit": {"oid": "0b75961986ccb625fb55a9777fac29dc0315d729"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTE0MzcyOnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/MyResourcesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMDoyNzo0MlrOGYt7IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMDoyNzo0MlrOGYt7IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU3MTQyNA==", "bodyText": "Could we test that collapsing works as well?", "url": "https://github.com/keycloak/keycloak/pull/7067#discussion_r428571424", "createdAt": "2020-05-21T10:27:42Z", "author": {"login": "vmuzikar"}, "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/MyResourcesTest.java", "diffHunk": "@@ -131,48 +121,133 @@ public void setup() throws Exception {\n         }\n     }\n \n+    private ResourceRepresentation createResource(AuthzClient authzClient, AuthorizationResource authorization, int i) {\n+        ResourceRepresentation resource = new ResourceRepresentation();\n+\n+        resource.setOwnerManagedAccess(true);\n+\n+        try {\n+            final byte[] content = new JWSInput(authzClient.obtainAccessToken(\"jdoe\", PASSWORD).getToken()).getContent();\n+            final AccessToken accessToken = JsonSerialization.readValue(content, AccessToken.class);\n+            resource.setOwner(accessToken.getSubject());\n+        }\n+        catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        resource.setName(\"Resource \" + i);\n+        resource.setDisplayName(\"Display Name \" + i);\n+        resource.setIconUri(\"Icon Uri \" + i);\n+        resource.addScope(\"Scope A\", \"Scope B\", \"Scope C\", \"Scope D\");\n+        resource.setUri(\"http://resourceServer.com/resources/\" + i);\n+\n+        try (Response response1 = authorization.resources().create(resource)) {\n+            resource.setId(response1.readEntity(ResourceRepresentation.class).getId());\n+        }\n+        return resource;\n+    }\n+\n+    @Override\n+    public void addTestUser() {\n+        testUser = createUser(\"jdoe\");\n+    }\n+\n+    @Test\n+    public void shouldDisplayTheResources() {\n+        assertEquals(6, myResourcesPage.getResourcesListCount());\n+\n+        assertEquals(\"Resource 0\", myResourcesPage.getCellText(\"name\", 0));\n+        assertEquals(\"Resource 1\", myResourcesPage.getCellText(\"name\", 1));\n+        assertEquals(\"My Resource Server\", myResourcesPage.getCellText(\"client\", 0));\n+    }\n+\n     @Test\n     public void shouldShowMyResourcesAndUpdatePermissions() {\n-        myResourcesPage.navigateTo();\n-        loginPage.form().login(createUser(\"jdoe\"));\n-        myResourcesPage.assertCurrent();\n+        final int row = 1;\n+        myResourcesPage.clickExpandButton(row);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b75961986ccb625fb55a9777fac29dc0315d729"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTE3NTIwOnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/page/MyResourcesPage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMDozOTo1MlrOGYuOhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNjoxMjozMlrOGZ1ufA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU3NjM5MA==", "bodyText": "Why to override this method? It seems identical (the alert field as well) to the parent.", "url": "https://github.com/keycloak/keycloak/pull/7067#discussion_r428576390", "createdAt": "2020-05-21T10:39:52Z", "author": {"login": "vmuzikar"}, "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/page/MyResourcesPage.java", "diffHunk": "@@ -34,25 +55,99 @@ public void clickShareButton(int row) {\n \n         //first button is share\n         webElement.findElements(By.tagName(\"button\")).get(0).click();\n+        waitForModalFadeIn();\n     }\n \n     public void clickEditButton(int row) {\n         final WebElement webElement = driver.findElement(By.id(\"ex-expand\" + row));\n \n         //first button share 2rd is the edit button\n         webElement.findElements(By.tagName(\"button\")).get(1).click();\n+        waitForModalFadeIn();\n+    }\n+\n+    public String getEditDialogUsername(int row) {\n+        return driver.findElement(By.id(\"userName-\" + row)).getText();\n+    }\n+\n+    private void waitForModalFadeIn() {\n+        waitGui().until().element(By.className(\"pf-c-modal-box\")).is().present();\n+    }\n+\n+    public void clickRemoveButton(int row) {\n+        final WebElement webElement = driver.findElement(By.id(\"ex-expand\" + row));\n+\n+        //first button share 2rd is the edit button and 3rd is remove\n+        webElement.findElements(By.tagName(\"button\")).get(2).click();\n+    }\n+\n+    public void clickPendingRequest(String resourceName) {\n+        final WebElement pendingRequestButton = driver.findElement(By.id(\"shareRequest-\" + resourceNameToId(resourceName)));\n+        assertEquals(\"1\", pendingRequestButton.getText());\n+        pendingRequestButton.click();\n+    }\n+\n+    public void acceptRequest(String resourceName, int row) {\n+        clickApproveDenyButton(resourceName, row, true);\n+    }\n+\n+    public void denyRequest(String resourceName, int row) {\n+        clickApproveDenyButton(resourceName, row, false);\n+    }\n+\n+    private void clickApproveDenyButton(String resourceName, int row, boolean approve) {\n+        final By id = By.id(String.format(\"%s-%d-shareRequest-%s\", approve ? \"accept\" : \"deny\", row, resourceNameToId(resourceName)));\n+        driver.findElement(id).click();\n+        waitForModalFadeOut();\n+    }\n+\n+    private String resourceNameToId(String resourceName) {\n+        return resourceName.replace(\" \", \"-\");\n+    }\n+\n+    public void clickSignOut() {\n+        driver.findElement(By.id(\"signOutButton\")).click();\n+    }\n+\n+    public void clickNextPage() {\n+        final WebElement webElement = driver.findElements(By.className(\"pf-m-primary\")).get(1);\n+        assertEquals(\"Next>\", webElement.getText());\n+        webElement.click();\n+    }\n+\n+    public void clickSharedWithMeTab() {\n+        final WebElement sharedWithMe = driver.findElement(By.id(\"pf-tab-1-sharedwithMe\"));\n+        sharedWithMe.click();\n+\n+        final WebElement tab = sharedWithMe.findElement(By.xpath(\"./..\"));\n+        //test to see that the tab is really clicked\n+        assertEquals(\"pf-c-tabs__item pf-m-current\", tab.getAttribute(\"class\"));\n+    }\n+\n+    public boolean containsResource(String resourceName) {\n+        return driver.findElement(By.id(\"sharedResourcesList\")).getText().contains(resourceName);\n     }\n \n     public void createShare(String userName) {\n         driver.findElement(By.id(\"username\")).sendKeys(userName);\n         driver.findElement(By.id(\"add\")).click();\n         driver.findElement(By.id(\"remove_pf-random-id-1\")).click();\n         driver.findElement(By.id(\"done\")).click();\n+        waitForModalFadeOut();\n     }\n \n     public void removeAllPermissions() {\n         driver.findElement(By.id(\"remove_pf-random-id-1\")).click();\n         driver.findElement(By.id(\"remove_pf-random-id-2\")).click();\n         driver.findElement(By.id(\"done\")).click();\n+        waitForModalFadeOut();\n+    }\n+\n+    public ContentAlert alert() {\n+        return alert;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b75961986ccb625fb55a9777fac29dc0315d729"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc0NzgzNg==", "bodyText": "oops", "url": "https://github.com/keycloak/keycloak/pull/7067#discussion_r429747836", "createdAt": "2020-05-25T06:12:32Z", "author": {"login": "edewit"}, "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/page/MyResourcesPage.java", "diffHunk": "@@ -34,25 +55,99 @@ public void clickShareButton(int row) {\n \n         //first button is share\n         webElement.findElements(By.tagName(\"button\")).get(0).click();\n+        waitForModalFadeIn();\n     }\n \n     public void clickEditButton(int row) {\n         final WebElement webElement = driver.findElement(By.id(\"ex-expand\" + row));\n \n         //first button share 2rd is the edit button\n         webElement.findElements(By.tagName(\"button\")).get(1).click();\n+        waitForModalFadeIn();\n+    }\n+\n+    public String getEditDialogUsername(int row) {\n+        return driver.findElement(By.id(\"userName-\" + row)).getText();\n+    }\n+\n+    private void waitForModalFadeIn() {\n+        waitGui().until().element(By.className(\"pf-c-modal-box\")).is().present();\n+    }\n+\n+    public void clickRemoveButton(int row) {\n+        final WebElement webElement = driver.findElement(By.id(\"ex-expand\" + row));\n+\n+        //first button share 2rd is the edit button and 3rd is remove\n+        webElement.findElements(By.tagName(\"button\")).get(2).click();\n+    }\n+\n+    public void clickPendingRequest(String resourceName) {\n+        final WebElement pendingRequestButton = driver.findElement(By.id(\"shareRequest-\" + resourceNameToId(resourceName)));\n+        assertEquals(\"1\", pendingRequestButton.getText());\n+        pendingRequestButton.click();\n+    }\n+\n+    public void acceptRequest(String resourceName, int row) {\n+        clickApproveDenyButton(resourceName, row, true);\n+    }\n+\n+    public void denyRequest(String resourceName, int row) {\n+        clickApproveDenyButton(resourceName, row, false);\n+    }\n+\n+    private void clickApproveDenyButton(String resourceName, int row, boolean approve) {\n+        final By id = By.id(String.format(\"%s-%d-shareRequest-%s\", approve ? \"accept\" : \"deny\", row, resourceNameToId(resourceName)));\n+        driver.findElement(id).click();\n+        waitForModalFadeOut();\n+    }\n+\n+    private String resourceNameToId(String resourceName) {\n+        return resourceName.replace(\" \", \"-\");\n+    }\n+\n+    public void clickSignOut() {\n+        driver.findElement(By.id(\"signOutButton\")).click();\n+    }\n+\n+    public void clickNextPage() {\n+        final WebElement webElement = driver.findElements(By.className(\"pf-m-primary\")).get(1);\n+        assertEquals(\"Next>\", webElement.getText());\n+        webElement.click();\n+    }\n+\n+    public void clickSharedWithMeTab() {\n+        final WebElement sharedWithMe = driver.findElement(By.id(\"pf-tab-1-sharedwithMe\"));\n+        sharedWithMe.click();\n+\n+        final WebElement tab = sharedWithMe.findElement(By.xpath(\"./..\"));\n+        //test to see that the tab is really clicked\n+        assertEquals(\"pf-c-tabs__item pf-m-current\", tab.getAttribute(\"class\"));\n+    }\n+\n+    public boolean containsResource(String resourceName) {\n+        return driver.findElement(By.id(\"sharedResourcesList\")).getText().contains(resourceName);\n     }\n \n     public void createShare(String userName) {\n         driver.findElement(By.id(\"username\")).sendKeys(userName);\n         driver.findElement(By.id(\"add\")).click();\n         driver.findElement(By.id(\"remove_pf-random-id-1\")).click();\n         driver.findElement(By.id(\"done\")).click();\n+        waitForModalFadeOut();\n     }\n \n     public void removeAllPermissions() {\n         driver.findElement(By.id(\"remove_pf-random-id-1\")).click();\n         driver.findElement(By.id(\"remove_pf-random-id-2\")).click();\n         driver.findElement(By.id(\"done\")).click();\n+        waitForModalFadeOut();\n+    }\n+\n+    public ContentAlert alert() {\n+        return alert;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU3NjM5MA=="}, "originalCommit": {"oid": "0b75961986ccb625fb55a9777fac29dc0315d729"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDk0MDQ4OnYy", "diffSide": "RIGHT", "path": "themes/src/main/resources/theme/keycloak-preview/account/src/app/account-service/account.service.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOTo0NDo1MlrOGisIOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOTo0NDo1MlrOGisIOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyNzc2OQ==", "bodyText": "Avoid 'any'.\nThis should work:\n   private handleError(response: HttpResponse): void {\n        if (response != null && response.status === 401) {\n            // session timed out?\n            this.kcSvc.login();\n        }\n\n        const errorResponse = response.data as {errorMessage?: string, error?: string};\n        if (response != null && response.data != null) {\n            ContentAlert.danger(\n                `${response.statusText}: ${errorResponse.errorMessage ? errorResponse.errorMessage : ''} ${errorResponse.error ? errorResponse.error : ''}`\n            );\n        } else {\n            ContentAlert.danger(response.statusText);\n        }\n    }", "url": "https://github.com/keycloak/keycloak/pull/7067#discussion_r439027769", "createdAt": "2020-06-11T19:44:52Z", "author": {"login": "ssilvert"}, "path": "themes/src/main/resources/theme/keycloak-preview/account/src/app/account-service/account.service.ts", "diffHunk": "@@ -84,14 +84,16 @@ class AccountServiceClient {\n         return response;\n     }\n \n-    private handleError(response: HttpResponse): void {\n+    private handleError(response: HttpResponse<any>): void {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9741b2f090fae87d05cb77bb617c2f4cf91914f"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3629, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}