{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMDA1NTI4", "number": 6926, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNToxOTo1MlrODq1xhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTowNzo0NVrOED7NzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjQ3ODEyOnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/federation/ldap/LDAPGroupMapperTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNToxOTo1MlrOF61XCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxODowNjoyMVrOF684fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIzNTk3Nw==", "bodyText": "?????", "url": "https://github.com/keycloak/keycloak/pull/6926#discussion_r397235977", "createdAt": "2020-03-24T15:19:52Z", "author": {"login": "stianst"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/federation/ldap/LDAPGroupMapperTest.java", "diffHunk": "@@ -74,6 +74,11 @@ protected void afterImportTestRealm() {\n     @Test\n     public void test01_ldapOnlyGroupMappings() {\n         test01_ldapOnlyGroupMappings(true);\n+        try {\n+            Thread.sleep(1000000000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91fcd5a0c61be2837db03b740720ddfd7f68a7e6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1OTIzMA==", "bodyText": "Oops !", "url": "https://github.com/keycloak/keycloak/pull/6926#discussion_r397359230", "createdAt": "2020-03-24T18:06:21Z", "author": {"login": "pedroigor"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/federation/ldap/LDAPGroupMapperTest.java", "diffHunk": "@@ -74,6 +74,11 @@ protected void afterImportTestRealm() {\n     @Test\n     public void test01_ldapOnlyGroupMappings() {\n         test01_ldapOnlyGroupMappings(true);\n+        try {\n+            Thread.sleep(1000000000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIzNTk3Nw=="}, "originalCommit": {"oid": "91fcd5a0c61be2837db03b740720ddfd7f68a7e6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTQyNTQ0OnYy", "diffSide": "RIGHT", "path": "integration/admin-client/src/main/java/org/keycloak/admin/client/resource/UsersResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDo0ODozM1rOGhN1Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjo1NDozMVrOGhTsSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4Mjg0Nw==", "bodyText": "I believe admin client should rather add exact on the parameter-richest variant of search(String search, Integer firstResult, Integer maxResults, Boolean briefRepresentation).\n<sigh>Pity Java does not have any support for default parameter values.</sigh>", "url": "https://github.com/keycloak/keycloak/pull/6926#discussion_r437482847", "createdAt": "2020-06-09T14:48:33Z", "author": {"login": "hmlnarik"}, "path": "integration/admin-client/src/main/java/org/keycloak/admin/client/resource/UsersResource.java", "diffHunk": "@@ -56,6 +56,10 @@\n     @Produces(MediaType.APPLICATION_JSON)\n     List<UserRepresentation> search(@QueryParam(\"username\") String username);\n \n+    @GET\n+    @Produces(MediaType.APPLICATION_JSON)\n+    List<UserRepresentation> search(@QueryParam(\"username\") String username, @QueryParam(\"exact\") Boolean exact);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0e6d474385d397a37b5d581006f181f0b3a28db"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU3ODgyNw==", "bodyText": "I see your point. However, that is going to break people using that method. What I can do is add a new variant of it with the new parameter.\nThe method you mentioned means also another type of query that looks up multiple properties (iirc, email, username, first/last names).\nThis one is specific for username and for other usages the API is ready. The focus here is really the API.", "url": "https://github.com/keycloak/keycloak/pull/6926#discussion_r437578827", "createdAt": "2020-06-09T16:54:31Z", "author": {"login": "pedroigor"}, "path": "integration/admin-client/src/main/java/org/keycloak/admin/client/resource/UsersResource.java", "diffHunk": "@@ -56,6 +56,10 @@\n     @Produces(MediaType.APPLICATION_JSON)\n     List<UserRepresentation> search(@QueryParam(\"username\") String username);\n \n+    @GET\n+    @Produces(MediaType.APPLICATION_JSON)\n+    List<UserRepresentation> search(@QueryParam(\"username\") String username, @QueryParam(\"exact\") Boolean exact);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4Mjg0Nw=="}, "originalCommit": {"oid": "d0e6d474385d397a37b5d581006f181f0b3a28db"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTQ0NzEzOnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/federation/UserPropertyFileStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDo1MzowNlrOGhODaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDo1MzowNlrOGhODaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4NjQ0MA==", "bodyText": "For better performance and smaller memory footprint, evaluate the predicate early:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return searchForUser(search, realm, firstResult, maxResults, username -> {\n          \n          \n            \n                        if (Boolean.valueOf(attributes.getOrDefault(UserModel.EXACT, Boolean.FALSE.toString()))) {\n          \n          \n            \n                            return username.equals(search);\n          \n          \n            \n                        } else {\n          \n          \n            \n                            return username.contains(search);\n          \n          \n            \n                        }\n          \n          \n            \n                    });\n          \n          \n            \n                    Predicate<String> p = Boolean.valueOf(attributes.getOrDefault(UserModel.EXACT, Boolean.FALSE.toString()))\n          \n          \n            \n                        ? username -> username.equals(search)\n          \n          \n            \n                        : username -> username.contains(search);\n          \n          \n            \n                    return searchForUser(search, realm, firstResult, maxResults, p);", "url": "https://github.com/keycloak/keycloak/pull/6926#discussion_r437486440", "createdAt": "2020-06-09T14:53:06Z", "author": {"login": "hmlnarik"}, "path": "testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/federation/UserPropertyFileStorage.java", "diffHunk": "@@ -174,28 +175,21 @@ public int getUsersCount(RealmModel realm) {\n \n     @Override\n     public List<UserModel> searchForUser(String search, RealmModel realm, int firstResult, int maxResults) {\n-        if (maxResults == 0) return Collections.EMPTY_LIST;\n-        List<UserModel> users = new LinkedList<>();\n-        int count = 0;\n-        for (Object un : userPasswords.keySet()) {\n-            String username = (String)un;\n-            if (username.contains(search)) {\n-                if (count++ < firstResult) {\n-                    continue;\n-                }\n-                users.add(createUser(realm, username));\n-                if (users.size() + 1 > maxResults) break;\n-            }\n-        }\n-        return users;\n+        return searchForUser(search, realm, firstResult, maxResults, username -> username.contains(search));\n     }\n \n     @Override\n     public List<UserModel> searchForUser(Map<String, String> attributes, RealmModel realm, int firstResult, int maxResults) {\n         String search = Optional.ofNullable(attributes.get(UserModel.USERNAME))\n                 .orElseGet(()-> attributes.get(UserModel.SEARCH));\n         if (search == null) return Collections.EMPTY_LIST;\n-        return searchForUser(search, realm, firstResult, maxResults);\n+        return searchForUser(search, realm, firstResult, maxResults, username -> {\n+            if (Boolean.valueOf(attributes.getOrDefault(UserModel.EXACT, Boolean.FALSE.toString()))) {\n+                return username.equals(search);\n+            } else {\n+                return username.contains(search);\n+            }\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0e6d474385d397a37b5d581006f181f0b3a28db"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTUxMzcyOnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/federation/storage/UserStorageTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTowNzo0NVrOGhOvbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTowNzo0NVrOGhOvbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5NzcwOQ==", "bodyText": "When using\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Assert.assertEquals(0, testRealmResource().users().search(\"a\", true).size());\n          \n          \n            \n                    Assert.assertEquals(1, testRealmResource().users().search(\"apollo\", true).size());\n          \n          \n            \n                    Assert.assertEquals(1, testRealmResource().users().search(\"tbrady\", true).size());\n          \n          \n            \n                    Assert.assertThat(testRealmResource().users().search(\"a\", true), Matchers.hasSize(0));\n          \n          \n            \n                    Assert.assertThat(testRealmResource().users().search(\"apollo\", true), Matchers.hasSize(1));\n          \n          \n            \n                    Assert.assertThat(testRealmResource().users().search(\"tbrady\", true), Matchers.hasSize(1));\n          \n      \n    \n    \n  \n\nthe output on failure shows the search results which is better for debugging potential failures.", "url": "https://github.com/keycloak/keycloak/pull/6926#discussion_r437497709", "createdAt": "2020-06-09T15:07:45Z", "author": {"login": "hmlnarik"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/federation/storage/UserStorageTest.java", "diffHunk": "@@ -474,6 +474,13 @@ public void testQuery() {\n         });\n     }\n \n+    @Test\n+    public void testQueryExactMatch() {\n+        Assert.assertEquals(0, testRealmResource().users().search(\"a\", true).size());\n+        Assert.assertEquals(1, testRealmResource().users().search(\"apollo\", true).size());\n+        Assert.assertEquals(1, testRealmResource().users().search(\"tbrady\", true).size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0e6d474385d397a37b5d581006f181f0b3a28db"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3751, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}