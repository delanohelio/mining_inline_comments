{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM3ODEzNzcy", "number": 7674, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxODozMjoyMVrOFYiHIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxOTo0MDo0MFrOFdO1vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYxMjY5MDI0OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxODozMjoyMVrOIilTMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxODoxMzozNFrOIplajw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzMzYxNw==", "bodyText": "This is not really necessary because the request will never be null. The check we have is just a defensive check. It is probably a code assertion where a null request is a bug and not expected at all.", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573133617", "createdAt": "2021-02-09T18:32:21Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -174,29 +174,47 @@ public static AuthorizationTokenService instance() {\n     }\n \n     private static void fireErrorEvent(EventBuilder event, String error, Exception cause) {\n-        event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n-                .error(error);\n+        if (cause instanceof CorsErrorResponseException) {\n+            // cast the exception to populate the event with a more descriptive reason\n+            CorsErrorResponseException originalCause = (CorsErrorResponseException) cause;\n+            event.detail(Details.REASON, originalCause.getErrorDescription() == null ? \"<unknown>\" : originalCause.getErrorDescription())\n+                    .error(error);\n+        } else {\n+            event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n+                    .error(error);\n+        }\n+\n         logger.debug(event.getEvent().getType(), cause);\n     }\n-    \n-    public Response authorize(KeycloakAuthorizationRequest request) {\n+\n+    public Response authorize(KeycloakAuthorizationRequest request, EventBuilder event) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NDQ2Mzc3OA==", "bodyText": "@jmrodriguez Could you please revert this change? See comment above.", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r574463778", "createdAt": "2021-02-11T12:30:16Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -174,29 +174,47 @@ public static AuthorizationTokenService instance() {\n     }\n \n     private static void fireErrorEvent(EventBuilder event, String error, Exception cause) {\n-        event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n-                .error(error);\n+        if (cause instanceof CorsErrorResponseException) {\n+            // cast the exception to populate the event with a more descriptive reason\n+            CorsErrorResponseException originalCause = (CorsErrorResponseException) cause;\n+            event.detail(Details.REASON, originalCause.getErrorDescription() == null ? \"<unknown>\" : originalCause.getErrorDescription())\n+                    .error(error);\n+        } else {\n+            event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n+                    .error(error);\n+        }\n+\n         logger.debug(event.getEvent().getType(), cause);\n     }\n-    \n-    public Response authorize(KeycloakAuthorizationRequest request) {\n+\n+    public Response authorize(KeycloakAuthorizationRequest request, EventBuilder event) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzMzYxNw=="}, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NDU1NjY1MQ==", "bodyText": "done", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r574556651", "createdAt": "2021-02-11T14:44:27Z", "author": {"login": "jmrodriguez"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -174,29 +174,47 @@ public static AuthorizationTokenService instance() {\n     }\n \n     private static void fireErrorEvent(EventBuilder event, String error, Exception cause) {\n-        event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n-                .error(error);\n+        if (cause instanceof CorsErrorResponseException) {\n+            // cast the exception to populate the event with a more descriptive reason\n+            CorsErrorResponseException originalCause = (CorsErrorResponseException) cause;\n+            event.detail(Details.REASON, originalCause.getErrorDescription() == null ? \"<unknown>\" : originalCause.getErrorDescription())\n+                    .error(error);\n+        } else {\n+            event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n+                    .error(error);\n+        }\n+\n         logger.debug(event.getEvent().getType(), cause);\n     }\n-    \n-    public Response authorize(KeycloakAuthorizationRequest request) {\n+\n+    public Response authorize(KeycloakAuthorizationRequest request, EventBuilder event) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzMzYxNw=="}, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzU4MTUyMA==", "bodyText": "@jmrodriguez I think the change is not reflected here?", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r577581520", "createdAt": "2021-02-17T12:45:36Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -174,29 +174,47 @@ public static AuthorizationTokenService instance() {\n     }\n \n     private static void fireErrorEvent(EventBuilder event, String error, Exception cause) {\n-        event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n-                .error(error);\n+        if (cause instanceof CorsErrorResponseException) {\n+            // cast the exception to populate the event with a more descriptive reason\n+            CorsErrorResponseException originalCause = (CorsErrorResponseException) cause;\n+            event.detail(Details.REASON, originalCause.getErrorDescription() == null ? \"<unknown>\" : originalCause.getErrorDescription())\n+                    .error(error);\n+        } else {\n+            event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n+                    .error(error);\n+        }\n+\n         logger.debug(event.getEvent().getType(), cause);\n     }\n-    \n-    public Response authorize(KeycloakAuthorizationRequest request) {\n+\n+    public Response authorize(KeycloakAuthorizationRequest request, EventBuilder event) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzMzYxNw=="}, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzg5OTk2MQ==", "bodyText": "@pedroigor I cannot remove the EventBuilder event parameter as because fireErrorEvent function requires it as parameter, and we use that function multiple times in the authorize method.\nCould you please clarify how this should be resolved?", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r577899961", "createdAt": "2021-02-17T19:52:01Z", "author": {"login": "jmrodriguez"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -174,29 +174,47 @@ public static AuthorizationTokenService instance() {\n     }\n \n     private static void fireErrorEvent(EventBuilder event, String error, Exception cause) {\n-        event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n-                .error(error);\n+        if (cause instanceof CorsErrorResponseException) {\n+            // cast the exception to populate the event with a more descriptive reason\n+            CorsErrorResponseException originalCause = (CorsErrorResponseException) cause;\n+            event.detail(Details.REASON, originalCause.getErrorDescription() == null ? \"<unknown>\" : originalCause.getErrorDescription())\n+                    .error(error);\n+        } else {\n+            event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n+                    .error(error);\n+        }\n+\n         logger.debug(event.getEvent().getType(), cause);\n     }\n-    \n-    public Response authorize(KeycloakAuthorizationRequest request) {\n+\n+    public Response authorize(KeycloakAuthorizationRequest request, EventBuilder event) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzMzYxNw=="}, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODM4NTU1OQ==", "bodyText": "Sure. Basically, change the signature and include the first statement as follows:\npublic Response authorize(KeycloakAuthorizationRequest request) {\n        EventBuilder event = request.getEvent();\n        ...\n}\n\nYou should be able to get the EventBuilder from the request.", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r578385559", "createdAt": "2021-02-18T12:41:22Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -174,29 +174,47 @@ public static AuthorizationTokenService instance() {\n     }\n \n     private static void fireErrorEvent(EventBuilder event, String error, Exception cause) {\n-        event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n-                .error(error);\n+        if (cause instanceof CorsErrorResponseException) {\n+            // cast the exception to populate the event with a more descriptive reason\n+            CorsErrorResponseException originalCause = (CorsErrorResponseException) cause;\n+            event.detail(Details.REASON, originalCause.getErrorDescription() == null ? \"<unknown>\" : originalCause.getErrorDescription())\n+                    .error(error);\n+        } else {\n+            event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n+                    .error(error);\n+        }\n+\n         logger.debug(event.getEvent().getType(), cause);\n     }\n-    \n-    public Response authorize(KeycloakAuthorizationRequest request) {\n+\n+    public Response authorize(KeycloakAuthorizationRequest request, EventBuilder event) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzMzYxNw=="}, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDQ3NTUzNQ==", "bodyText": "I understand now. I'm pushing the changes shortly", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r580475535", "createdAt": "2021-02-22T18:13:34Z", "author": {"login": "jmrodriguez"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -174,29 +174,47 @@ public static AuthorizationTokenService instance() {\n     }\n \n     private static void fireErrorEvent(EventBuilder event, String error, Exception cause) {\n-        event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n-                .error(error);\n+        if (cause instanceof CorsErrorResponseException) {\n+            // cast the exception to populate the event with a more descriptive reason\n+            CorsErrorResponseException originalCause = (CorsErrorResponseException) cause;\n+            event.detail(Details.REASON, originalCause.getErrorDescription() == null ? \"<unknown>\" : originalCause.getErrorDescription())\n+                    .error(error);\n+        } else {\n+            event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n+                    .error(error);\n+        }\n+\n         logger.debug(event.getEvent().getType(), cause);\n     }\n-    \n-    public Response authorize(KeycloakAuthorizationRequest request) {\n+\n+    public Response authorize(KeycloakAuthorizationRequest request, EventBuilder event) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzMzYxNw=="}, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYxMjY5NTQ2OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxODozMzo1MVrOIilWuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxOTo1MDo1OFrOIioyAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzNDUyMA==", "bodyText": "Should create the exception using reqest.getCors().\nWe don't need Errors.INVALID_AUTHORIZATION_REQUEST. But just use Errors.INVALID_REQUEST.", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573134520", "createdAt": "2021-02-09T18:33:51Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -174,29 +174,47 @@ public static AuthorizationTokenService instance() {\n     }\n \n     private static void fireErrorEvent(EventBuilder event, String error, Exception cause) {\n-        event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n-                .error(error);\n+        if (cause instanceof CorsErrorResponseException) {\n+            // cast the exception to populate the event with a more descriptive reason\n+            CorsErrorResponseException originalCause = (CorsErrorResponseException) cause;\n+            event.detail(Details.REASON, originalCause.getErrorDescription() == null ? \"<unknown>\" : originalCause.getErrorDescription())\n+                    .error(error);\n+        } else {\n+            event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n+                    .error(error);\n+        }\n+\n         logger.debug(event.getEvent().getType(), cause);\n     }\n-    \n-    public Response authorize(KeycloakAuthorizationRequest request) {\n+\n+    public Response authorize(KeycloakAuthorizationRequest request, EventBuilder event) {\n         if (request == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_GRANT, \"Invalid authorization request.\", Status.BAD_REQUEST);\n+            CorsErrorResponseException invalidAuthorizationRequestException = new CorsErrorResponseException(null, OAuthErrorException.INVALID_GRANT, \"Invalid authorization request.\", Status.BAD_REQUEST);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE5MDY1OQ==", "bodyText": "using request.getCors() to create the exception would lead to a NullPointerException because this code section is executed only if request == null (line 191)\nAgreed on using Errors.INVALID_REQUEST", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573190659", "createdAt": "2021-02-09T19:50:58Z", "author": {"login": "jmrodriguez"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -174,29 +174,47 @@ public static AuthorizationTokenService instance() {\n     }\n \n     private static void fireErrorEvent(EventBuilder event, String error, Exception cause) {\n-        event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n-                .error(error);\n+        if (cause instanceof CorsErrorResponseException) {\n+            // cast the exception to populate the event with a more descriptive reason\n+            CorsErrorResponseException originalCause = (CorsErrorResponseException) cause;\n+            event.detail(Details.REASON, originalCause.getErrorDescription() == null ? \"<unknown>\" : originalCause.getErrorDescription())\n+                    .error(error);\n+        } else {\n+            event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n+                    .error(error);\n+        }\n+\n         logger.debug(event.getEvent().getType(), cause);\n     }\n-    \n-    public Response authorize(KeycloakAuthorizationRequest request) {\n+\n+    public Response authorize(KeycloakAuthorizationRequest request, EventBuilder event) {\n         if (request == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_GRANT, \"Invalid authorization request.\", Status.BAD_REQUEST);\n+            CorsErrorResponseException invalidAuthorizationRequestException = new CorsErrorResponseException(null, OAuthErrorException.INVALID_GRANT, \"Invalid authorization request.\", Status.BAD_REQUEST);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzNDUyMA=="}, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYxMjcwMzkwOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxODozNTo1MFrOIilb9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxOTo1MTowM1rOIioyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzNTg2MA==", "bodyText": "I would just use Errors.INVALID_REQUEST. The details should be enough to understand what happened.", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573135860", "createdAt": "2021-02-09T18:35:50Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -174,29 +174,47 @@ public static AuthorizationTokenService instance() {\n     }\n \n     private static void fireErrorEvent(EventBuilder event, String error, Exception cause) {\n-        event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n-                .error(error);\n+        if (cause instanceof CorsErrorResponseException) {\n+            // cast the exception to populate the event with a more descriptive reason\n+            CorsErrorResponseException originalCause = (CorsErrorResponseException) cause;\n+            event.detail(Details.REASON, originalCause.getErrorDescription() == null ? \"<unknown>\" : originalCause.getErrorDescription())\n+                    .error(error);\n+        } else {\n+            event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n+                    .error(error);\n+        }\n+\n         logger.debug(event.getEvent().getType(), cause);\n     }\n-    \n-    public Response authorize(KeycloakAuthorizationRequest request) {\n+\n+    public Response authorize(KeycloakAuthorizationRequest request, EventBuilder event) {\n         if (request == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_GRANT, \"Invalid authorization request.\", Status.BAD_REQUEST);\n+            CorsErrorResponseException invalidAuthorizationRequestException = new CorsErrorResponseException(null, OAuthErrorException.INVALID_GRANT, \"Invalid authorization request.\", Status.BAD_REQUEST);\n+            fireErrorEvent(event, Errors.INVALID_AUTHORIZATION_REQUEST, invalidAuthorizationRequestException);\n+            throw invalidAuthorizationRequestException;\n         }\n \n         // it is not secure to allow public clients to push arbitrary claims because message can be tampered\n         if (isPublicClientRequestingEntitlementWithClaims(request)) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_GRANT, \"Public clients are not allowed to send claims\", Status.FORBIDDEN);\n+            CorsErrorResponseException forbiddenClientException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_GRANT, \"Public clients are not allowed to send claims\", Status.FORBIDDEN);\n+            fireErrorEvent(event, Errors.PUBLIC_CLIENT_SENDING_CLAIMS, forbiddenClientException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE5MDcwOQ==", "bodyText": "agreed", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573190709", "createdAt": "2021-02-09T19:51:03Z", "author": {"login": "jmrodriguez"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -174,29 +174,47 @@ public static AuthorizationTokenService instance() {\n     }\n \n     private static void fireErrorEvent(EventBuilder event, String error, Exception cause) {\n-        event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n-                .error(error);\n+        if (cause instanceof CorsErrorResponseException) {\n+            // cast the exception to populate the event with a more descriptive reason\n+            CorsErrorResponseException originalCause = (CorsErrorResponseException) cause;\n+            event.detail(Details.REASON, originalCause.getErrorDescription() == null ? \"<unknown>\" : originalCause.getErrorDescription())\n+                    .error(error);\n+        } else {\n+            event.detail(Details.REASON, cause == null || cause.getMessage() == null ? \"<unknown>\" : cause.getMessage())\n+                    .error(error);\n+        }\n+\n         logger.debug(event.getEvent().getType(), cause);\n     }\n-    \n-    public Response authorize(KeycloakAuthorizationRequest request) {\n+\n+    public Response authorize(KeycloakAuthorizationRequest request, EventBuilder event) {\n         if (request == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_GRANT, \"Invalid authorization request.\", Status.BAD_REQUEST);\n+            CorsErrorResponseException invalidAuthorizationRequestException = new CorsErrorResponseException(null, OAuthErrorException.INVALID_GRANT, \"Invalid authorization request.\", Status.BAD_REQUEST);\n+            fireErrorEvent(event, Errors.INVALID_AUTHORIZATION_REQUEST, invalidAuthorizationRequestException);\n+            throw invalidAuthorizationRequestException;\n         }\n \n         // it is not secure to allow public clients to push arbitrary claims because message can be tampered\n         if (isPublicClientRequestingEntitlementWithClaims(request)) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_GRANT, \"Public clients are not allowed to send claims\", Status.FORBIDDEN);\n+            CorsErrorResponseException forbiddenClientException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_GRANT, \"Public clients are not allowed to send claims\", Status.FORBIDDEN);\n+            fireErrorEvent(event, Errors.PUBLIC_CLIENT_SENDING_CLAIMS, forbiddenClientException);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzNTg2MA=="}, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYxMjcxMTY3OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxODozNzowNlrOIilhEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMVQxNDo0NToxNVrOIj8MRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzNzE3MQ==", "bodyText": "Isn't INVALID_RESPONSE_MODE too much? Do we really need it?", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573137171", "createdAt": "2021-02-09T18:37:06Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -223,17 +241,23 @@ public Response authorize(KeycloakAuthorizationRequest request) {\n                     } else if (RESPONSE_MODE_PERMISSIONS.equals(metadata.getResponseMode())) {\n                         return createSuccessfulResponse(permissions, request);\n                     } else {\n-                        throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Invalid response_mode\", Status.BAD_REQUEST);\n+                        CorsErrorResponseException invalidResponseModeException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Invalid response_mode\", Status.BAD_REQUEST);\n+                        fireErrorEvent(event, Errors.INVALID_RESPONSE_MODE, invalidResponseModeException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE5MDc0Ng==", "bodyText": "the intention was to cover all the code exceptions thrown, to generate the respective audit event error", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573190746", "createdAt": "2021-02-09T19:51:07Z", "author": {"login": "jmrodriguez"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -223,17 +241,23 @@ public Response authorize(KeycloakAuthorizationRequest request) {\n                     } else if (RESPONSE_MODE_PERMISSIONS.equals(metadata.getResponseMode())) {\n                         return createSuccessfulResponse(permissions, request);\n                     } else {\n-                        throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Invalid response_mode\", Status.BAD_REQUEST);\n+                        CorsErrorResponseException invalidResponseModeException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Invalid response_mode\", Status.BAD_REQUEST);\n+                        fireErrorEvent(event, Errors.INVALID_RESPONSE_MODE, invalidResponseModeException);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzNzE3MQ=="}, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mzc1NzY5MA==", "bodyText": "My point is that you can simplify the event model by auditing only what makes sense from a security perspective. This one, for instance, does not mean much because an invalid response mode does not represent any exploit (I mean, I can't see one).\nSo we just ignore or audit as INVALID_REQUEST if it really makes sense.\nThe same goes for others.", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573757690", "createdAt": "2021-02-10T14:12:55Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -223,17 +241,23 @@ public Response authorize(KeycloakAuthorizationRequest request) {\n                     } else if (RESPONSE_MODE_PERMISSIONS.equals(metadata.getResponseMode())) {\n                         return createSuccessfulResponse(permissions, request);\n                     } else {\n-                        throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Invalid response_mode\", Status.BAD_REQUEST);\n+                        CorsErrorResponseException invalidResponseModeException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Invalid response_mode\", Status.BAD_REQUEST);\n+                        fireErrorEvent(event, Errors.INVALID_RESPONSE_MODE, invalidResponseModeException);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzNzE3MQ=="}, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NDQ2NDQ2MQ==", "bodyText": "@jmrodriguez Do we really need INVALID_RESPONSE_MODE? See comment above.", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r574464461", "createdAt": "2021-02-11T12:31:34Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -223,17 +241,23 @@ public Response authorize(KeycloakAuthorizationRequest request) {\n                     } else if (RESPONSE_MODE_PERMISSIONS.equals(metadata.getResponseMode())) {\n                         return createSuccessfulResponse(permissions, request);\n                     } else {\n-                        throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Invalid response_mode\", Status.BAD_REQUEST);\n+                        CorsErrorResponseException invalidResponseModeException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Invalid response_mode\", Status.BAD_REQUEST);\n+                        fireErrorEvent(event, Errors.INVALID_RESPONSE_MODE, invalidResponseModeException);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzNzE3MQ=="}, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NDU1NzI1Mg==", "bodyText": "totally missed this one. Done", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r574557252", "createdAt": "2021-02-11T14:45:15Z", "author": {"login": "jmrodriguez"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -223,17 +241,23 @@ public Response authorize(KeycloakAuthorizationRequest request) {\n                     } else if (RESPONSE_MODE_PERMISSIONS.equals(metadata.getResponseMode())) {\n                         return createSuccessfulResponse(permissions, request);\n                     } else {\n-                        throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Invalid response_mode\", Status.BAD_REQUEST);\n+                        CorsErrorResponseException invalidResponseModeException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Invalid response_mode\", Status.BAD_REQUEST);\n+                        fireErrorEvent(event, Errors.INVALID_RESPONSE_MODE, invalidResponseModeException);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzNzE3MQ=="}, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYxMjcyMjY3OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxODozOToyOFrOIiln8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMFQxNDoxNTozOVrOIjLhdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzODkyOA==", "bodyText": "Not really, an invalid request. Here the access is denied by the request was submitted for approval by another user (usually the resource owner).", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573138928", "createdAt": "2021-02-09T18:39:28Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -223,17 +241,23 @@ public Response authorize(KeycloakAuthorizationRequest request) {\n                     } else if (RESPONSE_MODE_PERMISSIONS.equals(metadata.getResponseMode())) {\n                         return createSuccessfulResponse(permissions, request);\n                     } else {\n-                        throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Invalid response_mode\", Status.BAD_REQUEST);\n+                        CorsErrorResponseException invalidResponseModeException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Invalid response_mode\", Status.BAD_REQUEST);\n+                        fireErrorEvent(event, Errors.INVALID_RESPONSE_MODE, invalidResponseModeException);\n+                        throw invalidResponseModeException;\n                     }\n                 } else {\n                     return createSuccessfulResponse(createAuthorizationResponse(identity, permissions, request, targetClient), request);\n                 }\n             }\n \n             if (request.isSubmitRequest()) {\n-                throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.ACCESS_DENIED, \"request_submitted\", Status.FORBIDDEN);\n+                CorsErrorResponseException submittedRequestException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.ACCESS_DENIED, \"request_submitted\", Status.FORBIDDEN);\n+                fireErrorEvent(event, Errors.INVALID_REQUEST, submittedRequestException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE5MDg1MA==", "bodyText": "using Errors.ACCESS_DENIED would be more appropriate then?", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573190850", "createdAt": "2021-02-09T19:51:17Z", "author": {"login": "jmrodriguez"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -223,17 +241,23 @@ public Response authorize(KeycloakAuthorizationRequest request) {\n                     } else if (RESPONSE_MODE_PERMISSIONS.equals(metadata.getResponseMode())) {\n                         return createSuccessfulResponse(permissions, request);\n                     } else {\n-                        throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Invalid response_mode\", Status.BAD_REQUEST);\n+                        CorsErrorResponseException invalidResponseModeException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Invalid response_mode\", Status.BAD_REQUEST);\n+                        fireErrorEvent(event, Errors.INVALID_RESPONSE_MODE, invalidResponseModeException);\n+                        throw invalidResponseModeException;\n                     }\n                 } else {\n                     return createSuccessfulResponse(createAuthorizationResponse(identity, permissions, request, targetClient), request);\n                 }\n             }\n \n             if (request.isSubmitRequest()) {\n-                throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.ACCESS_DENIED, \"request_submitted\", Status.FORBIDDEN);\n+                CorsErrorResponseException submittedRequestException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.ACCESS_DENIED, \"request_submitted\", Status.FORBIDDEN);\n+                fireErrorEvent(event, Errors.INVALID_REQUEST, submittedRequestException);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzODkyOA=="}, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mzc1OTg2Mg==", "bodyText": "Yes. Because that is what happened. You might argue though that you want to audit attempts to access users' resources. So maybe a APPROVAL_REQUEST makes sense?", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573759862", "createdAt": "2021-02-10T14:15:39Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -223,17 +241,23 @@ public Response authorize(KeycloakAuthorizationRequest request) {\n                     } else if (RESPONSE_MODE_PERMISSIONS.equals(metadata.getResponseMode())) {\n                         return createSuccessfulResponse(permissions, request);\n                     } else {\n-                        throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Invalid response_mode\", Status.BAD_REQUEST);\n+                        CorsErrorResponseException invalidResponseModeException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Invalid response_mode\", Status.BAD_REQUEST);\n+                        fireErrorEvent(event, Errors.INVALID_RESPONSE_MODE, invalidResponseModeException);\n+                        throw invalidResponseModeException;\n                     }\n                 } else {\n                     return createSuccessfulResponse(createAuthorizationResponse(identity, permissions, request, targetClient), request);\n                 }\n             }\n \n             if (request.isSubmitRequest()) {\n-                throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.ACCESS_DENIED, \"request_submitted\", Status.FORBIDDEN);\n+                CorsErrorResponseException submittedRequestException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.ACCESS_DENIED, \"request_submitted\", Status.FORBIDDEN);\n+                fireErrorEvent(event, Errors.INVALID_REQUEST, submittedRequestException);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEzODkyOA=="}, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYxMjc0MjQyOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxODo0NDoxNFrOIil0OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxOTo1MToyNVrOIiozFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MjA3Mg==", "bodyText": "An Errors.ACCESS_DENIED makes more sense.", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573142072", "createdAt": "2021-02-09T18:44:14Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -223,17 +241,23 @@ public Response authorize(KeycloakAuthorizationRequest request) {\n                     } else if (RESPONSE_MODE_PERMISSIONS.equals(metadata.getResponseMode())) {\n                         return createSuccessfulResponse(permissions, request);\n                     } else {\n-                        throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Invalid response_mode\", Status.BAD_REQUEST);\n+                        CorsErrorResponseException invalidResponseModeException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Invalid response_mode\", Status.BAD_REQUEST);\n+                        fireErrorEvent(event, Errors.INVALID_RESPONSE_MODE, invalidResponseModeException);\n+                        throw invalidResponseModeException;\n                     }\n                 } else {\n                     return createSuccessfulResponse(createAuthorizationResponse(identity, permissions, request, targetClient), request);\n                 }\n             }\n \n             if (request.isSubmitRequest()) {\n-                throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.ACCESS_DENIED, \"request_submitted\", Status.FORBIDDEN);\n+                CorsErrorResponseException submittedRequestException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.ACCESS_DENIED, \"request_submitted\", Status.FORBIDDEN);\n+                fireErrorEvent(event, Errors.INVALID_REQUEST, submittedRequestException);\n+                throw submittedRequestException;\n             } else {\n-                throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.ACCESS_DENIED, \"not_authorized\", Status.FORBIDDEN);\n+                CorsErrorResponseException notAuthorizedException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.ACCESS_DENIED, \"not_authorized\", Status.FORBIDDEN);\n+                fireErrorEvent(event, Errors.INVALID_REQUEST, notAuthorizedException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE5MDkzMw==", "bodyText": "agreed", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573190933", "createdAt": "2021-02-09T19:51:25Z", "author": {"login": "jmrodriguez"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -223,17 +241,23 @@ public Response authorize(KeycloakAuthorizationRequest request) {\n                     } else if (RESPONSE_MODE_PERMISSIONS.equals(metadata.getResponseMode())) {\n                         return createSuccessfulResponse(permissions, request);\n                     } else {\n-                        throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Invalid response_mode\", Status.BAD_REQUEST);\n+                        CorsErrorResponseException invalidResponseModeException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Invalid response_mode\", Status.BAD_REQUEST);\n+                        fireErrorEvent(event, Errors.INVALID_RESPONSE_MODE, invalidResponseModeException);\n+                        throw invalidResponseModeException;\n                     }\n                 } else {\n                     return createSuccessfulResponse(createAuthorizationResponse(identity, permissions, request, targetClient), request);\n                 }\n             }\n \n             if (request.isSubmitRequest()) {\n-                throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.ACCESS_DENIED, \"request_submitted\", Status.FORBIDDEN);\n+                CorsErrorResponseException submittedRequestException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.ACCESS_DENIED, \"request_submitted\", Status.FORBIDDEN);\n+                fireErrorEvent(event, Errors.INVALID_REQUEST, submittedRequestException);\n+                throw submittedRequestException;\n             } else {\n-                throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.ACCESS_DENIED, \"not_authorized\", Status.FORBIDDEN);\n+                CorsErrorResponseException notAuthorizedException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.ACCESS_DENIED, \"not_authorized\", Status.FORBIDDEN);\n+                fireErrorEvent(event, Errors.INVALID_REQUEST, notAuthorizedException);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MjA3Mg=="}, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYxMjc0Mzc4OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxODo0NDozM1rOIil1BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxOTo1MToyOVrOIiozQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MjI3Ng==", "bodyText": "I would just use Errors.INVALID_REQUEST. The details should be enough to understand what happened.", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573142276", "createdAt": "2021-02-09T18:44:33Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -402,19 +426,25 @@ private ResourceServer getResourceServer(PermissionTicketToken ticket, KeycloakA\n         String issuedFor = ticket.getIssuedFor();\n \n         if (issuedFor == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"You must provide the issuedFor\", Status.BAD_REQUEST);\n+            CorsErrorResponseException missingIssuedForException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"You must provide the issuedFor\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.MISSING_ISSUED_FOR, missingIssuedForException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE5MDk3Ng==", "bodyText": "agreed", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573190976", "createdAt": "2021-02-09T19:51:29Z", "author": {"login": "jmrodriguez"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -402,19 +426,25 @@ private ResourceServer getResourceServer(PermissionTicketToken ticket, KeycloakA\n         String issuedFor = ticket.getIssuedFor();\n \n         if (issuedFor == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"You must provide the issuedFor\", Status.BAD_REQUEST);\n+            CorsErrorResponseException missingIssuedForException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"You must provide the issuedFor\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.MISSING_ISSUED_FOR, missingIssuedForException);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MjI3Ng=="}, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYxMjc0NDE2OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxODo0NDozOVrOIil1PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxOTo1MTozMlrOIiozZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MjMzMw==", "bodyText": "I would just use Errors.INVALID_REQUEST. The details should be enough to understand what happened.", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573142333", "createdAt": "2021-02-09T18:44:39Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -402,19 +426,25 @@ private ResourceServer getResourceServer(PermissionTicketToken ticket, KeycloakA\n         String issuedFor = ticket.getIssuedFor();\n \n         if (issuedFor == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"You must provide the issuedFor\", Status.BAD_REQUEST);\n+            CorsErrorResponseException missingIssuedForException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"You must provide the issuedFor\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.MISSING_ISSUED_FOR, missingIssuedForException);\n+            throw missingIssuedForException;\n         }\n \n         ClientModel clientModel = request.getRealm().getClientByClientId(issuedFor);\n \n         if (clientModel == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Unknown resource server id.\", Status.BAD_REQUEST);\n+            CorsErrorResponseException unknownServerIdException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Unknown resource server id: [\" + issuedFor + \"]\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.UNKNOWN_SERVER_ID, unknownServerIdException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE5MTAxNA==", "bodyText": "agreed", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573191014", "createdAt": "2021-02-09T19:51:32Z", "author": {"login": "jmrodriguez"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -402,19 +426,25 @@ private ResourceServer getResourceServer(PermissionTicketToken ticket, KeycloakA\n         String issuedFor = ticket.getIssuedFor();\n \n         if (issuedFor == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"You must provide the issuedFor\", Status.BAD_REQUEST);\n+            CorsErrorResponseException missingIssuedForException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"You must provide the issuedFor\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.MISSING_ISSUED_FOR, missingIssuedForException);\n+            throw missingIssuedForException;\n         }\n \n         ClientModel clientModel = request.getRealm().getClientByClientId(issuedFor);\n \n         if (clientModel == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Unknown resource server id.\", Status.BAD_REQUEST);\n+            CorsErrorResponseException unknownServerIdException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Unknown resource server id: [\" + issuedFor + \"]\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.UNKNOWN_SERVER_ID, unknownServerIdException);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MjMzMw=="}, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYxMjc0NDg4OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxODo0NDo0OVrOIil1tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxOTo1MTozNVrOIiozfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MjQ1Mw==", "bodyText": "I would just use Errors.INVALID_REQUEST. The details should be enough to understand what happened.", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573142453", "createdAt": "2021-02-09T18:44:49Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -402,19 +426,25 @@ private ResourceServer getResourceServer(PermissionTicketToken ticket, KeycloakA\n         String issuedFor = ticket.getIssuedFor();\n \n         if (issuedFor == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"You must provide the issuedFor\", Status.BAD_REQUEST);\n+            CorsErrorResponseException missingIssuedForException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"You must provide the issuedFor\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.MISSING_ISSUED_FOR, missingIssuedForException);\n+            throw missingIssuedForException;\n         }\n \n         ClientModel clientModel = request.getRealm().getClientByClientId(issuedFor);\n \n         if (clientModel == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Unknown resource server id.\", Status.BAD_REQUEST);\n+            CorsErrorResponseException unknownServerIdException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Unknown resource server id: [\" + issuedFor + \"]\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.UNKNOWN_SERVER_ID, unknownServerIdException);\n+            throw unknownServerIdException;\n         }\n \n         ResourceServer resourceServer = resourceServerStore.findById(clientModel.getId());\n \n         if (resourceServer == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Client does not support permissions\", Status.BAD_REQUEST);\n+            CorsErrorResponseException unsupportedPermissionsException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Client does not support permissions\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.UNSUPPORTED_PERMISSIONS, unsupportedPermissionsException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE5MTAzOA==", "bodyText": "agreed", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573191038", "createdAt": "2021-02-09T19:51:35Z", "author": {"login": "jmrodriguez"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -402,19 +426,25 @@ private ResourceServer getResourceServer(PermissionTicketToken ticket, KeycloakA\n         String issuedFor = ticket.getIssuedFor();\n \n         if (issuedFor == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"You must provide the issuedFor\", Status.BAD_REQUEST);\n+            CorsErrorResponseException missingIssuedForException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"You must provide the issuedFor\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.MISSING_ISSUED_FOR, missingIssuedForException);\n+            throw missingIssuedForException;\n         }\n \n         ClientModel clientModel = request.getRealm().getClientByClientId(issuedFor);\n \n         if (clientModel == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Unknown resource server id.\", Status.BAD_REQUEST);\n+            CorsErrorResponseException unknownServerIdException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Unknown resource server id: [\" + issuedFor + \"]\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.UNKNOWN_SERVER_ID, unknownServerIdException);\n+            throw unknownServerIdException;\n         }\n \n         ResourceServer resourceServer = resourceServerStore.findById(clientModel.getId());\n \n         if (resourceServer == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Client does not support permissions\", Status.BAD_REQUEST);\n+            CorsErrorResponseException unsupportedPermissionsException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Client does not support permissions\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.UNSUPPORTED_PERMISSIONS, unsupportedPermissionsException);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MjQ1Mw=="}, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYxMjc0NTMxOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxODo0NDo1NVrOIil19g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxOTo1MTozOFrOIiozlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MjUxOA==", "bodyText": "I would just use Errors.INVALID_REQUEST. The details should be enough to understand what happened.", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573142518", "createdAt": "2021-02-09T18:44:55Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -430,7 +460,9 @@ private EvaluationContext createEvaluationContext(KeycloakAuthorizationRequest r\n         BiFunction<KeycloakAuthorizationRequest, AuthorizationProvider, EvaluationContext> evaluationContextProvider = SUPPORTED_CLAIM_TOKEN_FORMATS.get(claimTokenFormat);\n \n         if (evaluationContextProvider == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Claim token format [\" + claimTokenFormat + \"] not supported\", Status.BAD_REQUEST);\n+            CorsErrorResponseException unsupportedClaimTokenFormatException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Claim token format [\" + claimTokenFormat + \"] not supported\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.UNSUPPORTED_CLAIM_TOKEN_FORMAT, unsupportedClaimTokenFormatException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE5MTA2MQ==", "bodyText": "agreed", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573191061", "createdAt": "2021-02-09T19:51:38Z", "author": {"login": "jmrodriguez"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -430,7 +460,9 @@ private EvaluationContext createEvaluationContext(KeycloakAuthorizationRequest r\n         BiFunction<KeycloakAuthorizationRequest, AuthorizationProvider, EvaluationContext> evaluationContextProvider = SUPPORTED_CLAIM_TOKEN_FORMATS.get(claimTokenFormat);\n \n         if (evaluationContextProvider == null) {\n-            throw new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Claim token format [\" + claimTokenFormat + \"] not supported\", Status.BAD_REQUEST);\n+            CorsErrorResponseException unsupportedClaimTokenFormatException = new CorsErrorResponseException(request.getCors(), OAuthErrorException.INVALID_REQUEST, \"Claim token format [\" + claimTokenFormat + \"] not supported\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.UNSUPPORTED_CLAIM_TOKEN_FORMAT, unsupportedClaimTokenFormatException);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MjUxOA=="}, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYxMjc0NzIxOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxODo0NToyM1rOIil3GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxOTo1MTo0MVrOIiozwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MjgwOQ==", "bodyText": "Could you please, remove changes that are basically formatting the code?", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573142809", "createdAt": "2021-02-09T18:45:23Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -469,9 +501,9 @@ private EvaluationContext createEvaluationContext(KeycloakAuthorizationRequest r\n     }\n \n     private void resolvePreviousGrantedPermissions(PermissionTicketToken ticket,\n-            KeycloakAuthorizationRequest request, ResourceServer resourceServer,\n-            Map<String, ResourcePermission> permissionsToEvaluate, ResourceStore resourceStore, ScopeStore scopeStore,\n-            AtomicInteger limit) {\n+                                                   KeycloakAuthorizationRequest request, ResourceServer resourceServer,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE5MTEwNQ==", "bodyText": "agreed", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573191105", "createdAt": "2021-02-09T19:51:41Z", "author": {"login": "jmrodriguez"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -469,9 +501,9 @@ private EvaluationContext createEvaluationContext(KeycloakAuthorizationRequest r\n     }\n \n     private void resolvePreviousGrantedPermissions(PermissionTicketToken ticket,\n-            KeycloakAuthorizationRequest request, ResourceServer resourceServer,\n-            Map<String, ResourcePermission> permissionsToEvaluate, ResourceStore resourceStore, ScopeStore scopeStore,\n-            AtomicInteger limit) {\n+                                                   KeycloakAuthorizationRequest request, ResourceServer resourceServer,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MjgwOQ=="}, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYxMjc0OTg1OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxODo0NTo1MVrOIil4jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxOTo1MTo0NlrOIioz5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MzE4Mg==", "bodyText": "I would just use Errors.INVALID_REQUEST. The details should be enough to understand what happened.", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573143182", "createdAt": "2021-02-09T18:45:51Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -636,12 +668,14 @@ private void resolveResourcePermission(KeycloakAuthorizationRequest request,\n         }\n \n         if (permissionsToEvaluate.isEmpty()) {\n-            throw new CorsErrorResponseException(request.getCors(), \"invalid_resource\", \"Resource with id [\" + resourceId + \"] does not exist.\", Status.BAD_REQUEST);\n+            CorsErrorResponseException invalidResourceException = new CorsErrorResponseException(request.getCors(), \"invalid_resource\", \"Resource with id [\" + resourceId + \"] does not exist.\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.INVALID_RESOURCE, invalidResourceException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE5MTE0Mw==", "bodyText": "agreed", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573191143", "createdAt": "2021-02-09T19:51:46Z", "author": {"login": "jmrodriguez"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -636,12 +668,14 @@ private void resolveResourcePermission(KeycloakAuthorizationRequest request,\n         }\n \n         if (permissionsToEvaluate.isEmpty()) {\n-            throw new CorsErrorResponseException(request.getCors(), \"invalid_resource\", \"Resource with id [\" + resourceId + \"] does not exist.\", Status.BAD_REQUEST);\n+            CorsErrorResponseException invalidResourceException = new CorsErrorResponseException(request.getCors(), \"invalid_resource\", \"Resource with id [\" + resourceId + \"] does not exist.\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.INVALID_RESOURCE, invalidResourceException);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MzE4Mg=="}, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYxMjc1MDU4OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxODo0NjowMVrOIil48w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxOTo1MTo0OVrOIio0AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MzI4Mw==", "bodyText": "I would just use Errors.INVALID_REQUEST. The details should be enough to understand what happened.", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573143283", "createdAt": "2021-02-09T18:46:01Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -657,14 +691,16 @@ private void resolveResourcePermission(KeycloakAuthorizationRequest request,\n                 Objects::nonNull).collect(Collectors.toSet());\n \n         if (!requestedScopes.isEmpty() && requestedScopesModel.isEmpty()) {\n-            throw new CorsErrorResponseException(request.getCors(), \"invalid_scope\", \"One of the given scopes \" + permission.getScopes() + \" is invalid\", Status.BAD_REQUEST);\n+            CorsErrorResponseException invalidScopeException = new CorsErrorResponseException(request.getCors(), \"invalid_scope\", \"One of the given scopes \" + permission.getScopes() + \" is invalid\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.INVALID_SCOPE, invalidScopeException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE5MTE2OQ==", "bodyText": "agreed", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573191169", "createdAt": "2021-02-09T19:51:49Z", "author": {"login": "jmrodriguez"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -657,14 +691,16 @@ private void resolveResourcePermission(KeycloakAuthorizationRequest request,\n                 Objects::nonNull).collect(Collectors.toSet());\n \n         if (!requestedScopes.isEmpty() && requestedScopesModel.isEmpty()) {\n-            throw new CorsErrorResponseException(request.getCors(), \"invalid_scope\", \"One of the given scopes \" + permission.getScopes() + \" is invalid\", Status.BAD_REQUEST);\n+            CorsErrorResponseException invalidScopeException = new CorsErrorResponseException(request.getCors(), \"invalid_scope\", \"One of the given scopes \" + permission.getScopes() + \" is invalid\", Status.BAD_REQUEST);\n+            fireErrorEvent(request.getEvent(), Errors.INVALID_SCOPE, invalidScopeException);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MzI4Mw=="}, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYxMjc1Mzg3OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxODo0Njo1MFrOIil7CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxOTo1MTo1M1rOIio0IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MzgxNw==", "bodyText": "I would just use Errors.INVALID_PERMISSION_TICKET. The details should be enough to understand what happened.", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573143817", "createdAt": "2021-02-09T18:46:50Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -690,11 +726,15 @@ private PermissionTicketToken verifyPermissionTicket(KeycloakAuthorizationReques\n \n         PermissionTicketToken ticket = request.getKeycloakSession().tokens().decode(ticketString, PermissionTicketToken.class);\n         if (ticket == null) {\n-            throw new CorsErrorResponseException(request.getCors(), \"invalid_ticket\", \"Ticket verification failed\", Status.FORBIDDEN);\n+            CorsErrorResponseException ticketVerificationException = new CorsErrorResponseException(request.getCors(), \"invalid_ticket\", \"Ticket verification failed\", Status.FORBIDDEN);\n+            fireErrorEvent(request.getEvent(), Errors.TICKET_VERIFICATION_FAILED, ticketVerificationException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE5MTIwMQ==", "bodyText": "agreed", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573191201", "createdAt": "2021-02-09T19:51:53Z", "author": {"login": "jmrodriguez"}, "path": "services/src/main/java/org/keycloak/authorization/authorization/AuthorizationTokenService.java", "diffHunk": "@@ -690,11 +726,15 @@ private PermissionTicketToken verifyPermissionTicket(KeycloakAuthorizationReques\n \n         PermissionTicketToken ticket = request.getKeycloakSession().tokens().decode(ticketString, PermissionTicketToken.class);\n         if (ticket == null) {\n-            throw new CorsErrorResponseException(request.getCors(), \"invalid_ticket\", \"Ticket verification failed\", Status.FORBIDDEN);\n+            CorsErrorResponseException ticketVerificationException = new CorsErrorResponseException(request.getCors(), \"invalid_ticket\", \"Ticket verification failed\", Status.FORBIDDEN);\n+            fireErrorEvent(request.getEvent(), Errors.TICKET_VERIFICATION_FAILED, ticketVerificationException);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0MzgxNw=="}, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 204}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYxMjc2MjQzOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxODo0ODo0OFrOIimAPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxOTo1MTo1N1rOIio0Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0NTE1MA==", "bodyText": "Errors.INVALID_REQUEST?", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573145150", "createdAt": "2021-02-09T18:48:48Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java", "diffHunk": "@@ -1290,16 +1293,20 @@ public Response permissionGrant() {\n         if (rpt != null) {\n             AccessToken accessToken = session.tokens().decode(rpt, AccessToken.class);\n             if (accessToken == null) {\n+                event.error(Errors.INVALID_RPT_SIGNATURE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE5MTI0Ng==", "bodyText": "agreed", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r573191246", "createdAt": "2021-02-09T19:51:57Z", "author": {"login": "jmrodriguez"}, "path": "services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java", "diffHunk": "@@ -1290,16 +1293,20 @@ public Response permissionGrant() {\n         if (rpt != null) {\n             AccessToken accessToken = session.tokens().decode(rpt, AccessToken.class);\n             if (accessToken == null) {\n+                event.error(Errors.INVALID_RPT_SIGNATURE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE0NTE1MA=="}, "originalCommit": {"oid": "77e19e56cb4faa5e2d5855dba55b7cd3a34d7bbc"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY2MTk2MTU2OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxOTo0MDo0MFrOIppNag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQyMDoyODo0NFrOIprDiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDUzNzcwNg==", "bodyText": "I promise this is the last comment from me :)\nDo you really need to audit this every time?", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r580537706", "createdAt": "2021-02-22T19:40:40Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java", "diffHunk": "@@ -1318,6 +1325,7 @@ public Response permissionGrant() {\n         List<String> permissions = formParams.get(\"permission\");\n \n         if (permissions != null) {\n+            event.detail(Details.PERMISSION, String.join(\"|\", permissions));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cd1129a2cb2376427b8e5d7bfe5a88c98ea2760"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDU1MTU2Ng==", "bodyText": "The intention here is to have enough data in the audit records should a deep \"who is doing what and how\" audit takes place, to prove accountability of access to resources.\nConsider a company with (very) sensitive resources, where it is critical that only the right users with the right permissions can consume them.", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r580551566", "createdAt": "2021-02-22T20:02:18Z", "author": {"login": "jmrodriguez"}, "path": "services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java", "diffHunk": "@@ -1318,6 +1325,7 @@ public Response permissionGrant() {\n         List<String> permissions = formParams.get(\"permission\");\n \n         if (permissions != null) {\n+            event.detail(Details.PERMISSION, String.join(\"|\", permissions));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDUzNzcwNg=="}, "originalCommit": {"oid": "5cd1129a2cb2376427b8e5d7bfe5a88c98ea2760"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDU2Nzk0NQ==", "bodyText": "Yeah, I see that. I'm more concerned about performance and doing this every time.\nI'm going to accept as-is for now and keep here a note that we might review this later if it becomes an issue. If people are not willing to sacrifice performance for a better audit/security we should probably think about changing the authorization settings for a client to configure how the audit should behave.", "url": "https://github.com/keycloak/keycloak/pull/7674#discussion_r580567945", "createdAt": "2021-02-22T20:28:44Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/protocol/oidc/endpoints/TokenEndpoint.java", "diffHunk": "@@ -1318,6 +1325,7 @@ public Response permissionGrant() {\n         List<String> permissions = formParams.get(\"permission\");\n \n         if (permissions != null) {\n+            event.detail(Details.PERMISSION, String.join(\"|\", permissions));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDUzNzcwNg=="}, "originalCommit": {"oid": "5cd1129a2cb2376427b8e5d7bfe5a88c98ea2760"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3250, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}