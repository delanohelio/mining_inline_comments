{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NDUxNzY3", "number": 6686, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNzozMzo1M1rODZvFig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzoxMzoxNVrODZ6QEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzEyNDU4OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/services/resources/account/AccountCredentialResource.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNzozMzo1M1rOFgSrZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMTo1MTo0OVrOFg7jIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNDc3NQ==", "bodyText": "This will throw an exception in case that user doesn't have password? Also in case he doesn't have password and has 1 OTP credential, it can happen that \"models.get(0)\" won't return the password.\nI know we're going to rewrite this stuff and it is just \"dummy\" endpoint for now. So leaving to you whether to change this or not. I am fine with accept PR even without fixing it we all agree that some temporary \"bugs\" in this dummy endpoints are ok.", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369404775", "createdAt": "2020-01-22T07:33:53Z", "author": {"login": "mposolda"}, "path": "services/src/main/java/org/keycloak/services/resources/account/AccountCredentialResource.java", "diffHunk": "@@ -57,6 +57,139 @@ public AccountCredentialResource(KeycloakSession session, EventBuilder event, Us\n //        models.forEach(c -> c.setSecretData(null));\n //        return models.stream().map(ModelToRepresentation::toRepresentation).collect(Collectors.toList());\n //    }\n+    \n+    private static class CredentialContainer {\n+        private String category;\n+        private String type;\n+        private String tooltip;\n+        private boolean enabled;\n+        private String createAction;\n+        private String updateAction;\n+        private boolean removeable;\n+        private List<CredentialModel> userCredentials;\n+        \n+        public CredentialContainer(String category, String type, String tooltip, boolean enabled, String createAction, String updateAction, boolean removeable,List<CredentialModel> userCredentials) {\n+            this.category = category;\n+            this.type = type;\n+            this.tooltip = tooltip;\n+            this.enabled = enabled;\n+            this.createAction = createAction;\n+            this.updateAction = updateAction;\n+            this.removeable = removeable;\n+            this.userCredentials = userCredentials;\n+        }\n+\n+        public String getCategory() {\n+            return category;\n+        }\n+        \n+        public String getType() {\n+            return type;\n+        }\n+\n+        public String getTooltip() {\n+            return tooltip;\n+        }\n+\n+        public boolean isEnabled() {\n+            return enabled;\n+        }\n+\n+        public String getCreateAction() {\n+            return createAction;\n+        }\n+\n+        public String getUpdateAction() {\n+            return updateAction;\n+        }\n+\n+        public boolean isRemoveable() {\n+            return removeable;\n+        }\n+\n+        public List<CredentialModel> getUserCredentials() {\n+            return userCredentials;\n+        }\n+        \n+    }\n+    \n+    @GET\n+    @NoCache\n+    @Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON)\n+    public List<CredentialContainer> dummyCredentialTypes(){\n+        auth.requireOneOf(AccountRoles.MANAGE_ACCOUNT, AccountRoles.VIEW_PROFILE);\n+        List<CredentialModel> models = session.userCredentialManager().getStoredCredentials(realm, user);\n+        \n+        List<CredentialModel> passwordUserCreds = new java.util.ArrayList<>();\n+        passwordUserCreds.add(models.get(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU0MzE4Mw==", "bodyText": "@mposolda I am assuming that you will take care of those things when there is live data.  As long as the data you send is in the format I expect, the UI will be able to handle it.\nI am only assuming that there will be at least one credential sent to me.  It doesn't matter what category or type it is.", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369543183", "createdAt": "2020-01-22T12:56:48Z", "author": {"login": "ssilvert"}, "path": "services/src/main/java/org/keycloak/services/resources/account/AccountCredentialResource.java", "diffHunk": "@@ -57,6 +57,139 @@ public AccountCredentialResource(KeycloakSession session, EventBuilder event, Us\n //        models.forEach(c -> c.setSecretData(null));\n //        return models.stream().map(ModelToRepresentation::toRepresentation).collect(Collectors.toList());\n //    }\n+    \n+    private static class CredentialContainer {\n+        private String category;\n+        private String type;\n+        private String tooltip;\n+        private boolean enabled;\n+        private String createAction;\n+        private String updateAction;\n+        private boolean removeable;\n+        private List<CredentialModel> userCredentials;\n+        \n+        public CredentialContainer(String category, String type, String tooltip, boolean enabled, String createAction, String updateAction, boolean removeable,List<CredentialModel> userCredentials) {\n+            this.category = category;\n+            this.type = type;\n+            this.tooltip = tooltip;\n+            this.enabled = enabled;\n+            this.createAction = createAction;\n+            this.updateAction = updateAction;\n+            this.removeable = removeable;\n+            this.userCredentials = userCredentials;\n+        }\n+\n+        public String getCategory() {\n+            return category;\n+        }\n+        \n+        public String getType() {\n+            return type;\n+        }\n+\n+        public String getTooltip() {\n+            return tooltip;\n+        }\n+\n+        public boolean isEnabled() {\n+            return enabled;\n+        }\n+\n+        public String getCreateAction() {\n+            return createAction;\n+        }\n+\n+        public String getUpdateAction() {\n+            return updateAction;\n+        }\n+\n+        public boolean isRemoveable() {\n+            return removeable;\n+        }\n+\n+        public List<CredentialModel> getUserCredentials() {\n+            return userCredentials;\n+        }\n+        \n+    }\n+    \n+    @GET\n+    @NoCache\n+    @Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON)\n+    public List<CredentialContainer> dummyCredentialTypes(){\n+        auth.requireOneOf(AccountRoles.MANAGE_ACCOUNT, AccountRoles.VIEW_PROFILE);\n+        List<CredentialModel> models = session.userCredentialManager().getStoredCredentials(realm, user);\n+        \n+        List<CredentialModel> passwordUserCreds = new java.util.ArrayList<>();\n+        passwordUserCreds.add(models.get(0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNDc3NQ=="}, "originalCommit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYwNDc5OA==", "bodyText": "I just realized the tooltips are missing.\n\nActually need to discuss this a bit. Right now, tooltips are sent for each credential type. Should they also appear for each credential category?\n\n@mposolda @abstractj I think I will rename \"tooltip\" to \"helptext\".  It will be shown as plain text after the type name instead of as a tooltip.\nConcerning help text at the category level, with the current structure we can not have help text that belongs to the category.  This is because you can have more than one type for each category and they are sent as a category/type combo.  We would need another level of abstraction to send an attribute that belongs specifically to the category.", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369604798", "createdAt": "2020-01-22T14:50:58Z", "author": {"login": "ssilvert"}, "path": "services/src/main/java/org/keycloak/services/resources/account/AccountCredentialResource.java", "diffHunk": "@@ -57,6 +57,139 @@ public AccountCredentialResource(KeycloakSession session, EventBuilder event, Us\n //        models.forEach(c -> c.setSecretData(null));\n //        return models.stream().map(ModelToRepresentation::toRepresentation).collect(Collectors.toList());\n //    }\n+    \n+    private static class CredentialContainer {\n+        private String category;\n+        private String type;\n+        private String tooltip;\n+        private boolean enabled;\n+        private String createAction;\n+        private String updateAction;\n+        private boolean removeable;\n+        private List<CredentialModel> userCredentials;\n+        \n+        public CredentialContainer(String category, String type, String tooltip, boolean enabled, String createAction, String updateAction, boolean removeable,List<CredentialModel> userCredentials) {\n+            this.category = category;\n+            this.type = type;\n+            this.tooltip = tooltip;\n+            this.enabled = enabled;\n+            this.createAction = createAction;\n+            this.updateAction = updateAction;\n+            this.removeable = removeable;\n+            this.userCredentials = userCredentials;\n+        }\n+\n+        public String getCategory() {\n+            return category;\n+        }\n+        \n+        public String getType() {\n+            return type;\n+        }\n+\n+        public String getTooltip() {\n+            return tooltip;\n+        }\n+\n+        public boolean isEnabled() {\n+            return enabled;\n+        }\n+\n+        public String getCreateAction() {\n+            return createAction;\n+        }\n+\n+        public String getUpdateAction() {\n+            return updateAction;\n+        }\n+\n+        public boolean isRemoveable() {\n+            return removeable;\n+        }\n+\n+        public List<CredentialModel> getUserCredentials() {\n+            return userCredentials;\n+        }\n+        \n+    }\n+    \n+    @GET\n+    @NoCache\n+    @Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON)\n+    public List<CredentialContainer> dummyCredentialTypes(){\n+        auth.requireOneOf(AccountRoles.MANAGE_ACCOUNT, AccountRoles.VIEW_PROFILE);\n+        List<CredentialModel> models = session.userCredentialManager().getStoredCredentials(realm, user);\n+        \n+        List<CredentialModel> passwordUserCreds = new java.util.ArrayList<>();\n+        passwordUserCreds.add(models.get(0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNDc3NQ=="}, "originalCommit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYwNjAxOA==", "bodyText": "@ssilvert whatever you and @mposolda are in agreement, that's perfectly fine from me. Apicurio was great to be used as a starting point, but you guys doing the implementation know best what has to be done.", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369606018", "createdAt": "2020-01-22T14:52:51Z", "author": {"login": "abstractj"}, "path": "services/src/main/java/org/keycloak/services/resources/account/AccountCredentialResource.java", "diffHunk": "@@ -57,6 +57,139 @@ public AccountCredentialResource(KeycloakSession session, EventBuilder event, Us\n //        models.forEach(c -> c.setSecretData(null));\n //        return models.stream().map(ModelToRepresentation::toRepresentation).collect(Collectors.toList());\n //    }\n+    \n+    private static class CredentialContainer {\n+        private String category;\n+        private String type;\n+        private String tooltip;\n+        private boolean enabled;\n+        private String createAction;\n+        private String updateAction;\n+        private boolean removeable;\n+        private List<CredentialModel> userCredentials;\n+        \n+        public CredentialContainer(String category, String type, String tooltip, boolean enabled, String createAction, String updateAction, boolean removeable,List<CredentialModel> userCredentials) {\n+            this.category = category;\n+            this.type = type;\n+            this.tooltip = tooltip;\n+            this.enabled = enabled;\n+            this.createAction = createAction;\n+            this.updateAction = updateAction;\n+            this.removeable = removeable;\n+            this.userCredentials = userCredentials;\n+        }\n+\n+        public String getCategory() {\n+            return category;\n+        }\n+        \n+        public String getType() {\n+            return type;\n+        }\n+\n+        public String getTooltip() {\n+            return tooltip;\n+        }\n+\n+        public boolean isEnabled() {\n+            return enabled;\n+        }\n+\n+        public String getCreateAction() {\n+            return createAction;\n+        }\n+\n+        public String getUpdateAction() {\n+            return updateAction;\n+        }\n+\n+        public boolean isRemoveable() {\n+            return removeable;\n+        }\n+\n+        public List<CredentialModel> getUserCredentials() {\n+            return userCredentials;\n+        }\n+        \n+    }\n+    \n+    @GET\n+    @NoCache\n+    @Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON)\n+    public List<CredentialContainer> dummyCredentialTypes(){\n+        auth.requireOneOf(AccountRoles.MANAGE_ACCOUNT, AccountRoles.VIEW_PROFILE);\n+        List<CredentialModel> models = session.userCredentialManager().getStoredCredentials(realm, user);\n+        \n+        List<CredentialModel> passwordUserCreds = new java.util.ArrayList<>();\n+        passwordUserCreds.add(models.get(0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNDc3NQ=="}, "originalCommit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk3NDAyMA==", "bodyText": "@ssilvert The UI with added helpText for each credentialType looks nice to me. Thanks for adding it!\nRegarding the helpText for the category, I think it will makes sense to have helpText which will be specific to each category. I just don't know where exactly to show it in the UI, so that it looks nice and user-friendly...\nRegarding your question for helpText on categories, there will be always just 3 categories. Those 3 categories are \"hardcoded\" (with the exception that they should be localized, but otherwise it is pretty much hardcoded text) and their helpTexts can be hardcoded as well. There is no need to return anything from the REST API regarding helpText for the categories (which I am not sure if it is something you meant in your last paragraph).", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369974020", "createdAt": "2020-01-23T08:02:33Z", "author": {"login": "mposolda"}, "path": "services/src/main/java/org/keycloak/services/resources/account/AccountCredentialResource.java", "diffHunk": "@@ -57,6 +57,139 @@ public AccountCredentialResource(KeycloakSession session, EventBuilder event, Us\n //        models.forEach(c -> c.setSecretData(null));\n //        return models.stream().map(ModelToRepresentation::toRepresentation).collect(Collectors.toList());\n //    }\n+    \n+    private static class CredentialContainer {\n+        private String category;\n+        private String type;\n+        private String tooltip;\n+        private boolean enabled;\n+        private String createAction;\n+        private String updateAction;\n+        private boolean removeable;\n+        private List<CredentialModel> userCredentials;\n+        \n+        public CredentialContainer(String category, String type, String tooltip, boolean enabled, String createAction, String updateAction, boolean removeable,List<CredentialModel> userCredentials) {\n+            this.category = category;\n+            this.type = type;\n+            this.tooltip = tooltip;\n+            this.enabled = enabled;\n+            this.createAction = createAction;\n+            this.updateAction = updateAction;\n+            this.removeable = removeable;\n+            this.userCredentials = userCredentials;\n+        }\n+\n+        public String getCategory() {\n+            return category;\n+        }\n+        \n+        public String getType() {\n+            return type;\n+        }\n+\n+        public String getTooltip() {\n+            return tooltip;\n+        }\n+\n+        public boolean isEnabled() {\n+            return enabled;\n+        }\n+\n+        public String getCreateAction() {\n+            return createAction;\n+        }\n+\n+        public String getUpdateAction() {\n+            return updateAction;\n+        }\n+\n+        public boolean isRemoveable() {\n+            return removeable;\n+        }\n+\n+        public List<CredentialModel> getUserCredentials() {\n+            return userCredentials;\n+        }\n+        \n+    }\n+    \n+    @GET\n+    @NoCache\n+    @Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON)\n+    public List<CredentialContainer> dummyCredentialTypes(){\n+        auth.requireOneOf(AccountRoles.MANAGE_ACCOUNT, AccountRoles.VIEW_PROFILE);\n+        List<CredentialModel> models = session.userCredentialManager().getStoredCredentials(realm, user);\n+        \n+        List<CredentialModel> passwordUserCreds = new java.util.ArrayList<>();\n+        passwordUserCreds.add(models.get(0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNDc3NQ=="}, "originalCommit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA3NDQwMg==", "bodyText": "@mposolda OK.  I'll hard-code some text then.  I think I'll post to the dev list to get feedback on all the help text.", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r370074402", "createdAt": "2020-01-23T11:51:49Z", "author": {"login": "ssilvert"}, "path": "services/src/main/java/org/keycloak/services/resources/account/AccountCredentialResource.java", "diffHunk": "@@ -57,6 +57,139 @@ public AccountCredentialResource(KeycloakSession session, EventBuilder event, Us\n //        models.forEach(c -> c.setSecretData(null));\n //        return models.stream().map(ModelToRepresentation::toRepresentation).collect(Collectors.toList());\n //    }\n+    \n+    private static class CredentialContainer {\n+        private String category;\n+        private String type;\n+        private String tooltip;\n+        private boolean enabled;\n+        private String createAction;\n+        private String updateAction;\n+        private boolean removeable;\n+        private List<CredentialModel> userCredentials;\n+        \n+        public CredentialContainer(String category, String type, String tooltip, boolean enabled, String createAction, String updateAction, boolean removeable,List<CredentialModel> userCredentials) {\n+            this.category = category;\n+            this.type = type;\n+            this.tooltip = tooltip;\n+            this.enabled = enabled;\n+            this.createAction = createAction;\n+            this.updateAction = updateAction;\n+            this.removeable = removeable;\n+            this.userCredentials = userCredentials;\n+        }\n+\n+        public String getCategory() {\n+            return category;\n+        }\n+        \n+        public String getType() {\n+            return type;\n+        }\n+\n+        public String getTooltip() {\n+            return tooltip;\n+        }\n+\n+        public boolean isEnabled() {\n+            return enabled;\n+        }\n+\n+        public String getCreateAction() {\n+            return createAction;\n+        }\n+\n+        public String getUpdateAction() {\n+            return updateAction;\n+        }\n+\n+        public boolean isRemoveable() {\n+            return removeable;\n+        }\n+\n+        public List<CredentialModel> getUserCredentials() {\n+            return userCredentials;\n+        }\n+        \n+    }\n+    \n+    @GET\n+    @NoCache\n+    @Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON)\n+    public List<CredentialContainer> dummyCredentialTypes(){\n+        auth.requireOneOf(AccountRoles.MANAGE_ACCOUNT, AccountRoles.VIEW_PROFILE);\n+        List<CredentialModel> models = session.userCredentialManager().getStoredCredentials(realm, user);\n+        \n+        List<CredentialModel> passwordUserCreds = new java.util.ArrayList<>();\n+        passwordUserCreds.add(models.get(0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNDc3NQ=="}, "originalCommit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzEzMDUzOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/services/resources/account/AccountCredentialResource.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNzozNzoxN1rOFgSvAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODowMzoxNlrOFg1b3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNTY5Ng==", "bodyText": "The credential will be named \"Webauthn Passwordless\" instead of \"WebAuthn Strong\" . For more details, see the keycloak-dev thread \"Strong WebAuthn for passwordless authentication\" and the PR #6649 .", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369405696", "createdAt": "2020-01-22T07:37:17Z", "author": {"login": "mposolda"}, "path": "services/src/main/java/org/keycloak/services/resources/account/AccountCredentialResource.java", "diffHunk": "@@ -57,6 +57,139 @@ public AccountCredentialResource(KeycloakSession session, EventBuilder event, Us\n //        models.forEach(c -> c.setSecretData(null));\n //        return models.stream().map(ModelToRepresentation::toRepresentation).collect(Collectors.toList());\n //    }\n+    \n+    private static class CredentialContainer {\n+        private String category;\n+        private String type;\n+        private String tooltip;\n+        private boolean enabled;\n+        private String createAction;\n+        private String updateAction;\n+        private boolean removeable;\n+        private List<CredentialModel> userCredentials;\n+        \n+        public CredentialContainer(String category, String type, String tooltip, boolean enabled, String createAction, String updateAction, boolean removeable,List<CredentialModel> userCredentials) {\n+            this.category = category;\n+            this.type = type;\n+            this.tooltip = tooltip;\n+            this.enabled = enabled;\n+            this.createAction = createAction;\n+            this.updateAction = updateAction;\n+            this.removeable = removeable;\n+            this.userCredentials = userCredentials;\n+        }\n+\n+        public String getCategory() {\n+            return category;\n+        }\n+        \n+        public String getType() {\n+            return type;\n+        }\n+\n+        public String getTooltip() {\n+            return tooltip;\n+        }\n+\n+        public boolean isEnabled() {\n+            return enabled;\n+        }\n+\n+        public String getCreateAction() {\n+            return createAction;\n+        }\n+\n+        public String getUpdateAction() {\n+            return updateAction;\n+        }\n+\n+        public boolean isRemoveable() {\n+            return removeable;\n+        }\n+\n+        public List<CredentialModel> getUserCredentials() {\n+            return userCredentials;\n+        }\n+        \n+    }\n+    \n+    @GET\n+    @NoCache\n+    @Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON)\n+    public List<CredentialContainer> dummyCredentialTypes(){\n+        auth.requireOneOf(AccountRoles.MANAGE_ACCOUNT, AccountRoles.VIEW_PROFILE);\n+        List<CredentialModel> models = session.userCredentialManager().getStoredCredentials(realm, user);\n+        \n+        List<CredentialModel> passwordUserCreds = new java.util.ArrayList<>();\n+        passwordUserCreds.add(models.get(0));\n+        \n+        List<CredentialModel> otpUserCreds = new java.util.ArrayList<>();\n+        if (models.size() > 1) otpUserCreds.add(models.get(1));\n+        if (models.size() > 2) otpUserCreds.add(models.get(2));\n+        \n+        List<CredentialModel> webauthnUserCreds = new java.util.ArrayList<>();\n+        CredentialModel webauthnCred = new CredentialModel();\n+        webauthnCred.setId(\"bogus-id\");\n+        webauthnCred.setUserLabel(\"yubikey key\");\n+        webauthnCred.setCreatedDate(1579122652382L);\n+        webauthnUserCreds.add(webauthnCred);\n+        \n+        List<CredentialModel> webauthnStrongUserCreds = new java.util.ArrayList<>();\n+        CredentialModel webauthnStrongCred = new CredentialModel();\n+        webauthnStrongCred.setId(\"bogus-id-for-webauthnStrong\");\n+        webauthnStrongCred.setUserLabel(\"My very strong key with required PIN\");\n+        webauthnStrongCred.setCreatedDate(1579122652382L);\n+        webauthnUserCreds.add(webauthnStrongCred);\n+        \n+        CredentialContainer password = new CredentialContainer(\n+                                        \"password\",\n+                                        \"password\",\n+                                        \"passwordTooltip\",\n+                                        true,\n+                                        null, // no create action\n+                                        \"UPDATE_PASSWORD\",\n+                                        false,\n+                                        passwordUserCreds\n+                                        );\n+        CredentialContainer otp = new CredentialContainer(\n+                                        \"two-factor\",\n+                                        \"otp\",\n+                                        \"otpTooltip\",\n+                                        true,\n+                                        \"CONFIGURE_TOTP\", \n+                                        null, // no update action\n+                                        true,\n+                                        otpUserCreds\n+                                        );\n+        CredentialContainer webAuthn = new CredentialContainer(\n+                                        \"two-factor\",\n+                                        \"webauthn\",\n+                                        \"webauthntooltip\",\n+                                        true,\n+                                        \"CONFIGURE_WEBAUTHN\", \n+                                        null, // no update action\n+                                        true,\n+                                        webauthnUserCreds\n+                                        );\n+        CredentialContainer passwordless = new CredentialContainer(\n+                                        \"passwordless\",\n+                                        \"webauthn-strong\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU4MTc2NQ==", "bodyText": "Right now, the UI just uses \"webauthn-strong\" as a localization key.  So it passes \"webauthn-strong\" and gets \"WebAuthn Strong\" as a result in English.\nPerhaps you just want to change this so that the REST API returns \"webauthn-passwordless\" and it shows \"Webauthn Passwordless\" in the UI?", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369581765", "createdAt": "2020-01-22T14:13:33Z", "author": {"login": "ssilvert"}, "path": "services/src/main/java/org/keycloak/services/resources/account/AccountCredentialResource.java", "diffHunk": "@@ -57,6 +57,139 @@ public AccountCredentialResource(KeycloakSession session, EventBuilder event, Us\n //        models.forEach(c -> c.setSecretData(null));\n //        return models.stream().map(ModelToRepresentation::toRepresentation).collect(Collectors.toList());\n //    }\n+    \n+    private static class CredentialContainer {\n+        private String category;\n+        private String type;\n+        private String tooltip;\n+        private boolean enabled;\n+        private String createAction;\n+        private String updateAction;\n+        private boolean removeable;\n+        private List<CredentialModel> userCredentials;\n+        \n+        public CredentialContainer(String category, String type, String tooltip, boolean enabled, String createAction, String updateAction, boolean removeable,List<CredentialModel> userCredentials) {\n+            this.category = category;\n+            this.type = type;\n+            this.tooltip = tooltip;\n+            this.enabled = enabled;\n+            this.createAction = createAction;\n+            this.updateAction = updateAction;\n+            this.removeable = removeable;\n+            this.userCredentials = userCredentials;\n+        }\n+\n+        public String getCategory() {\n+            return category;\n+        }\n+        \n+        public String getType() {\n+            return type;\n+        }\n+\n+        public String getTooltip() {\n+            return tooltip;\n+        }\n+\n+        public boolean isEnabled() {\n+            return enabled;\n+        }\n+\n+        public String getCreateAction() {\n+            return createAction;\n+        }\n+\n+        public String getUpdateAction() {\n+            return updateAction;\n+        }\n+\n+        public boolean isRemoveable() {\n+            return removeable;\n+        }\n+\n+        public List<CredentialModel> getUserCredentials() {\n+            return userCredentials;\n+        }\n+        \n+    }\n+    \n+    @GET\n+    @NoCache\n+    @Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON)\n+    public List<CredentialContainer> dummyCredentialTypes(){\n+        auth.requireOneOf(AccountRoles.MANAGE_ACCOUNT, AccountRoles.VIEW_PROFILE);\n+        List<CredentialModel> models = session.userCredentialManager().getStoredCredentials(realm, user);\n+        \n+        List<CredentialModel> passwordUserCreds = new java.util.ArrayList<>();\n+        passwordUserCreds.add(models.get(0));\n+        \n+        List<CredentialModel> otpUserCreds = new java.util.ArrayList<>();\n+        if (models.size() > 1) otpUserCreds.add(models.get(1));\n+        if (models.size() > 2) otpUserCreds.add(models.get(2));\n+        \n+        List<CredentialModel> webauthnUserCreds = new java.util.ArrayList<>();\n+        CredentialModel webauthnCred = new CredentialModel();\n+        webauthnCred.setId(\"bogus-id\");\n+        webauthnCred.setUserLabel(\"yubikey key\");\n+        webauthnCred.setCreatedDate(1579122652382L);\n+        webauthnUserCreds.add(webauthnCred);\n+        \n+        List<CredentialModel> webauthnStrongUserCreds = new java.util.ArrayList<>();\n+        CredentialModel webauthnStrongCred = new CredentialModel();\n+        webauthnStrongCred.setId(\"bogus-id-for-webauthnStrong\");\n+        webauthnStrongCred.setUserLabel(\"My very strong key with required PIN\");\n+        webauthnStrongCred.setCreatedDate(1579122652382L);\n+        webauthnUserCreds.add(webauthnStrongCred);\n+        \n+        CredentialContainer password = new CredentialContainer(\n+                                        \"password\",\n+                                        \"password\",\n+                                        \"passwordTooltip\",\n+                                        true,\n+                                        null, // no create action\n+                                        \"UPDATE_PASSWORD\",\n+                                        false,\n+                                        passwordUserCreds\n+                                        );\n+        CredentialContainer otp = new CredentialContainer(\n+                                        \"two-factor\",\n+                                        \"otp\",\n+                                        \"otpTooltip\",\n+                                        true,\n+                                        \"CONFIGURE_TOTP\", \n+                                        null, // no update action\n+                                        true,\n+                                        otpUserCreds\n+                                        );\n+        CredentialContainer webAuthn = new CredentialContainer(\n+                                        \"two-factor\",\n+                                        \"webauthn\",\n+                                        \"webauthntooltip\",\n+                                        true,\n+                                        \"CONFIGURE_WEBAUTHN\", \n+                                        null, // no update action\n+                                        true,\n+                                        webauthnUserCreds\n+                                        );\n+        CredentialContainer passwordless = new CredentialContainer(\n+                                        \"passwordless\",\n+                                        \"webauthn-strong\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNTY5Ng=="}, "originalCommit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyNDExMA==", "bodyText": "Updated the UI.  See new pic above.", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369824110", "createdAt": "2020-01-22T21:52:35Z", "author": {"login": "ssilvert"}, "path": "services/src/main/java/org/keycloak/services/resources/account/AccountCredentialResource.java", "diffHunk": "@@ -57,6 +57,139 @@ public AccountCredentialResource(KeycloakSession session, EventBuilder event, Us\n //        models.forEach(c -> c.setSecretData(null));\n //        return models.stream().map(ModelToRepresentation::toRepresentation).collect(Collectors.toList());\n //    }\n+    \n+    private static class CredentialContainer {\n+        private String category;\n+        private String type;\n+        private String tooltip;\n+        private boolean enabled;\n+        private String createAction;\n+        private String updateAction;\n+        private boolean removeable;\n+        private List<CredentialModel> userCredentials;\n+        \n+        public CredentialContainer(String category, String type, String tooltip, boolean enabled, String createAction, String updateAction, boolean removeable,List<CredentialModel> userCredentials) {\n+            this.category = category;\n+            this.type = type;\n+            this.tooltip = tooltip;\n+            this.enabled = enabled;\n+            this.createAction = createAction;\n+            this.updateAction = updateAction;\n+            this.removeable = removeable;\n+            this.userCredentials = userCredentials;\n+        }\n+\n+        public String getCategory() {\n+            return category;\n+        }\n+        \n+        public String getType() {\n+            return type;\n+        }\n+\n+        public String getTooltip() {\n+            return tooltip;\n+        }\n+\n+        public boolean isEnabled() {\n+            return enabled;\n+        }\n+\n+        public String getCreateAction() {\n+            return createAction;\n+        }\n+\n+        public String getUpdateAction() {\n+            return updateAction;\n+        }\n+\n+        public boolean isRemoveable() {\n+            return removeable;\n+        }\n+\n+        public List<CredentialModel> getUserCredentials() {\n+            return userCredentials;\n+        }\n+        \n+    }\n+    \n+    @GET\n+    @NoCache\n+    @Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON)\n+    public List<CredentialContainer> dummyCredentialTypes(){\n+        auth.requireOneOf(AccountRoles.MANAGE_ACCOUNT, AccountRoles.VIEW_PROFILE);\n+        List<CredentialModel> models = session.userCredentialManager().getStoredCredentials(realm, user);\n+        \n+        List<CredentialModel> passwordUserCreds = new java.util.ArrayList<>();\n+        passwordUserCreds.add(models.get(0));\n+        \n+        List<CredentialModel> otpUserCreds = new java.util.ArrayList<>();\n+        if (models.size() > 1) otpUserCreds.add(models.get(1));\n+        if (models.size() > 2) otpUserCreds.add(models.get(2));\n+        \n+        List<CredentialModel> webauthnUserCreds = new java.util.ArrayList<>();\n+        CredentialModel webauthnCred = new CredentialModel();\n+        webauthnCred.setId(\"bogus-id\");\n+        webauthnCred.setUserLabel(\"yubikey key\");\n+        webauthnCred.setCreatedDate(1579122652382L);\n+        webauthnUserCreds.add(webauthnCred);\n+        \n+        List<CredentialModel> webauthnStrongUserCreds = new java.util.ArrayList<>();\n+        CredentialModel webauthnStrongCred = new CredentialModel();\n+        webauthnStrongCred.setId(\"bogus-id-for-webauthnStrong\");\n+        webauthnStrongCred.setUserLabel(\"My very strong key with required PIN\");\n+        webauthnStrongCred.setCreatedDate(1579122652382L);\n+        webauthnUserCreds.add(webauthnStrongCred);\n+        \n+        CredentialContainer password = new CredentialContainer(\n+                                        \"password\",\n+                                        \"password\",\n+                                        \"passwordTooltip\",\n+                                        true,\n+                                        null, // no create action\n+                                        \"UPDATE_PASSWORD\",\n+                                        false,\n+                                        passwordUserCreds\n+                                        );\n+        CredentialContainer otp = new CredentialContainer(\n+                                        \"two-factor\",\n+                                        \"otp\",\n+                                        \"otpTooltip\",\n+                                        true,\n+                                        \"CONFIGURE_TOTP\", \n+                                        null, // no update action\n+                                        true,\n+                                        otpUserCreds\n+                                        );\n+        CredentialContainer webAuthn = new CredentialContainer(\n+                                        \"two-factor\",\n+                                        \"webauthn\",\n+                                        \"webauthntooltip\",\n+                                        true,\n+                                        \"CONFIGURE_WEBAUTHN\", \n+                                        null, // no update action\n+                                        true,\n+                                        webauthnUserCreds\n+                                        );\n+        CredentialContainer passwordless = new CredentialContainer(\n+                                        \"passwordless\",\n+                                        \"webauthn-strong\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNTY5Ng=="}, "originalCommit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk3NDIzNw==", "bodyText": "Thanks!", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369974237", "createdAt": "2020-01-23T08:03:16Z", "author": {"login": "mposolda"}, "path": "services/src/main/java/org/keycloak/services/resources/account/AccountCredentialResource.java", "diffHunk": "@@ -57,6 +57,139 @@ public AccountCredentialResource(KeycloakSession session, EventBuilder event, Us\n //        models.forEach(c -> c.setSecretData(null));\n //        return models.stream().map(ModelToRepresentation::toRepresentation).collect(Collectors.toList());\n //    }\n+    \n+    private static class CredentialContainer {\n+        private String category;\n+        private String type;\n+        private String tooltip;\n+        private boolean enabled;\n+        private String createAction;\n+        private String updateAction;\n+        private boolean removeable;\n+        private List<CredentialModel> userCredentials;\n+        \n+        public CredentialContainer(String category, String type, String tooltip, boolean enabled, String createAction, String updateAction, boolean removeable,List<CredentialModel> userCredentials) {\n+            this.category = category;\n+            this.type = type;\n+            this.tooltip = tooltip;\n+            this.enabled = enabled;\n+            this.createAction = createAction;\n+            this.updateAction = updateAction;\n+            this.removeable = removeable;\n+            this.userCredentials = userCredentials;\n+        }\n+\n+        public String getCategory() {\n+            return category;\n+        }\n+        \n+        public String getType() {\n+            return type;\n+        }\n+\n+        public String getTooltip() {\n+            return tooltip;\n+        }\n+\n+        public boolean isEnabled() {\n+            return enabled;\n+        }\n+\n+        public String getCreateAction() {\n+            return createAction;\n+        }\n+\n+        public String getUpdateAction() {\n+            return updateAction;\n+        }\n+\n+        public boolean isRemoveable() {\n+            return removeable;\n+        }\n+\n+        public List<CredentialModel> getUserCredentials() {\n+            return userCredentials;\n+        }\n+        \n+    }\n+    \n+    @GET\n+    @NoCache\n+    @Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON)\n+    public List<CredentialContainer> dummyCredentialTypes(){\n+        auth.requireOneOf(AccountRoles.MANAGE_ACCOUNT, AccountRoles.VIEW_PROFILE);\n+        List<CredentialModel> models = session.userCredentialManager().getStoredCredentials(realm, user);\n+        \n+        List<CredentialModel> passwordUserCreds = new java.util.ArrayList<>();\n+        passwordUserCreds.add(models.get(0));\n+        \n+        List<CredentialModel> otpUserCreds = new java.util.ArrayList<>();\n+        if (models.size() > 1) otpUserCreds.add(models.get(1));\n+        if (models.size() > 2) otpUserCreds.add(models.get(2));\n+        \n+        List<CredentialModel> webauthnUserCreds = new java.util.ArrayList<>();\n+        CredentialModel webauthnCred = new CredentialModel();\n+        webauthnCred.setId(\"bogus-id\");\n+        webauthnCred.setUserLabel(\"yubikey key\");\n+        webauthnCred.setCreatedDate(1579122652382L);\n+        webauthnUserCreds.add(webauthnCred);\n+        \n+        List<CredentialModel> webauthnStrongUserCreds = new java.util.ArrayList<>();\n+        CredentialModel webauthnStrongCred = new CredentialModel();\n+        webauthnStrongCred.setId(\"bogus-id-for-webauthnStrong\");\n+        webauthnStrongCred.setUserLabel(\"My very strong key with required PIN\");\n+        webauthnStrongCred.setCreatedDate(1579122652382L);\n+        webauthnUserCreds.add(webauthnStrongCred);\n+        \n+        CredentialContainer password = new CredentialContainer(\n+                                        \"password\",\n+                                        \"password\",\n+                                        \"passwordTooltip\",\n+                                        true,\n+                                        null, // no create action\n+                                        \"UPDATE_PASSWORD\",\n+                                        false,\n+                                        passwordUserCreds\n+                                        );\n+        CredentialContainer otp = new CredentialContainer(\n+                                        \"two-factor\",\n+                                        \"otp\",\n+                                        \"otpTooltip\",\n+                                        true,\n+                                        \"CONFIGURE_TOTP\", \n+                                        null, // no update action\n+                                        true,\n+                                        otpUserCreds\n+                                        );\n+        CredentialContainer webAuthn = new CredentialContainer(\n+                                        \"two-factor\",\n+                                        \"webauthn\",\n+                                        \"webauthntooltip\",\n+                                        true,\n+                                        \"CONFIGURE_WEBAUTHN\", \n+                                        null, // no update action\n+                                        true,\n+                                        webauthnUserCreds\n+                                        );\n+        CredentialContainer passwordless = new CredentialContainer(\n+                                        \"passwordless\",\n+                                        \"webauthn-strong\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwNTY5Ng=="}, "originalCommit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDM1MDI5OnYy", "diffSide": "RIGHT", "path": "themes/src/main/resources/theme/keycloak-preview/account/resources/app/content/applications-page/ApplicationsPage.tsx", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNDozNDoyNFrOFgeR1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTo0Mzo0NFrOFgsBTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU5NDgzNw==", "bodyText": "Just a question. Why are we making this change? It's not related to the Credentials page, correct? This results in links no longer being opened in new browser tab.", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369594837", "createdAt": "2020-01-22T14:34:24Z", "author": {"login": "vmuzikar"}, "path": "themes/src/main/resources/theme/keycloak-preview/account/resources/app/content/applications-page/ApplicationsPage.tsx", "diffHunk": "@@ -132,7 +134,10 @@ export class ApplicationsPage extends React.Component<ApplicationsPageProps, App\n                         {application.inUse ? Msg.localize('inUse') : Msg.localize('notInUse')}\n                       </DataListCell>,\n                       <DataListCell width={4} key={'baseUrl-' + appIndex}>\n-                        <a href={application.userConsentRequired ? application.baseUrl : '/auth' + application.baseUrl} target=\"_blank\"><LinkIcon /> {application.baseUrl}</a>\n+                        <button className=\"pf-c-button pf-m-link\" type=\"button\" onClick={() => window.location.href = appUrl}>\n+                          <span className=\"pf-c-button__icon\">\n+                            <i className=\"fas fa-link\" aria-hidden=\"true\"></i>\n+                          </span>{application.baseUrl}</button>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcxMTcyOA==", "bodyText": "I changed that to fix a linting error.  Didn't know about the tab thing.  I'll look into it.", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369711728", "createdAt": "2020-01-22T17:53:42Z", "author": {"login": "ssilvert"}, "path": "themes/src/main/resources/theme/keycloak-preview/account/resources/app/content/applications-page/ApplicationsPage.tsx", "diffHunk": "@@ -132,7 +134,10 @@ export class ApplicationsPage extends React.Component<ApplicationsPageProps, App\n                         {application.inUse ? Msg.localize('inUse') : Msg.localize('notInUse')}\n                       </DataListCell>,\n                       <DataListCell width={4} key={'baseUrl-' + appIndex}>\n-                        <a href={application.userConsentRequired ? application.baseUrl : '/auth' + application.baseUrl} target=\"_blank\"><LinkIcon /> {application.baseUrl}</a>\n+                        <button className=\"pf-c-button pf-m-link\" type=\"button\" onClick={() => window.location.href = appUrl}>\n+                          <span className=\"pf-c-button__icon\">\n+                            <i className=\"fas fa-link\" aria-hidden=\"true\"></i>\n+                          </span>{application.baseUrl}</button>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU5NDgzNw=="}, "originalCommit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgxOTk4MQ==", "bodyText": "Fixed.", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369819981", "createdAt": "2020-01-22T21:43:44Z", "author": {"login": "ssilvert"}, "path": "themes/src/main/resources/theme/keycloak-preview/account/resources/app/content/applications-page/ApplicationsPage.tsx", "diffHunk": "@@ -132,7 +134,10 @@ export class ApplicationsPage extends React.Component<ApplicationsPageProps, App\n                         {application.inUse ? Msg.localize('inUse') : Msg.localize('notInUse')}\n                       </DataListCell>,\n                       <DataListCell width={4} key={'baseUrl-' + appIndex}>\n-                        <a href={application.userConsentRequired ? application.baseUrl : '/auth' + application.baseUrl} target=\"_blank\"><LinkIcon /> {application.baseUrl}</a>\n+                        <button className=\"pf-c-button pf-m-link\" type=\"button\" onClick={() => window.location.href = appUrl}>\n+                          <span className=\"pf-c-button__icon\">\n+                            <i className=\"fas fa-link\" aria-hidden=\"true\"></i>\n+                          </span>{application.baseUrl}</button>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU5NDgzNw=="}, "originalCommit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDM1OTAxOnYy", "diffSide": "RIGHT", "path": "themes/src/main/resources/theme/keycloak-preview/account/resources/app/content/signingin-page/SigningInPage.tsx", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNDozNjo0OFrOFgeXQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMDoyNjo0MFrOFg5VzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU5NjIyNQ==", "bodyText": "Typo: removable", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369596225", "createdAt": "2020-01-22T14:36:48Z", "author": {"login": "vmuzikar"}, "path": "themes/src/main/resources/theme/keycloak-preview/account/resources/app/content/signingin-page/SigningInPage.tsx", "diffHunk": "@@ -47,15 +47,39 @@ interface PasswordDetails {\n     registered: boolean;\n     lastUpdate: number;\n }\n+\n+type CredCategory = 'password' | 'two-factor' | 'passwordless';\n+type CredType = string;\n+type CredTypeMap = Map<CredType, CredentialContainer>;\n+type CredContainerMap = Map<CredCategory, CredTypeMap>;\n+\n+interface UserCredential {\n+    id: string;\n+    type: string;\n+    userLabel: string;\n+    createdDate: number;\n+    strCreatedDate?: string;\n+}\n+\n+// A CredentialContainer is unique by combo of credential type and credential category\n+interface CredentialContainer {\n+    category: CredCategory;\n+    type: CredType;\n+    tooltip: string;\n+    createAction: string;\n+    updateAction: string;\n+    removeable: boolean;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcxMjczNg==", "bodyText": "Either spelling is correct.", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369712736", "createdAt": "2020-01-22T17:55:43Z", "author": {"login": "ssilvert"}, "path": "themes/src/main/resources/theme/keycloak-preview/account/resources/app/content/signingin-page/SigningInPage.tsx", "diffHunk": "@@ -47,15 +47,39 @@ interface PasswordDetails {\n     registered: boolean;\n     lastUpdate: number;\n }\n+\n+type CredCategory = 'password' | 'two-factor' | 'passwordless';\n+type CredType = string;\n+type CredTypeMap = Map<CredType, CredentialContainer>;\n+type CredContainerMap = Map<CredCategory, CredTypeMap>;\n+\n+interface UserCredential {\n+    id: string;\n+    type: string;\n+    userLabel: string;\n+    createdDate: number;\n+    strCreatedDate?: string;\n+}\n+\n+// A CredentialContainer is unique by combo of credential type and credential category\n+interface CredentialContainer {\n+    category: CredCategory;\n+    type: CredType;\n+    tooltip: string;\n+    createAction: string;\n+    updateAction: string;\n+    removeable: boolean;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU5NjIyNQ=="}, "originalCommit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAzODIyMA==", "bodyText": "I blindly trusted my IDE (and Google) which complained about that. But I'm not the native speaker here. :)", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r370038220", "createdAt": "2020-01-23T10:26:40Z", "author": {"login": "vmuzikar"}, "path": "themes/src/main/resources/theme/keycloak-preview/account/resources/app/content/signingin-page/SigningInPage.tsx", "diffHunk": "@@ -47,15 +47,39 @@ interface PasswordDetails {\n     registered: boolean;\n     lastUpdate: number;\n }\n+\n+type CredCategory = 'password' | 'two-factor' | 'passwordless';\n+type CredType = string;\n+type CredTypeMap = Map<CredType, CredentialContainer>;\n+type CredContainerMap = Map<CredCategory, CredTypeMap>;\n+\n+interface UserCredential {\n+    id: string;\n+    type: string;\n+    userLabel: string;\n+    createdDate: number;\n+    strCreatedDate?: string;\n+}\n+\n+// A CredentialContainer is unique by combo of credential type and credential category\n+interface CredentialContainer {\n+    category: CredCategory;\n+    type: CredType;\n+    tooltip: string;\n+    createAction: string;\n+    updateAction: string;\n+    removeable: boolean;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU5NjIyNQ=="}, "originalCommit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDkyNTgxOnYy", "diffSide": "RIGHT", "path": "themes/src/main/resources/theme/keycloak-preview/account/resources/app/content/signingin-page/SigningInPage.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzowNDozM1rOFgj4hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzo1NzoyN1rOFgliEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY4NjY2MA==", "bodyText": "Just a suggestion. The two-factor authentication looks like it's an independent credential type. If I understand it correctly, it works only with password. Couldn't we somehow visually hint the user that it's not independent? E.g. somehow place it in the same box as password?\nOf course, for the tech preview it's ok as it is.", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369686660", "createdAt": "2020-01-22T17:04:33Z", "author": {"login": "vmuzikar"}, "path": "themes/src/main/resources/theme/keycloak-preview/account/resources/app/content/signingin-page/SigningInPage.tsx", "diffHunk": "@@ -68,116 +92,202 @@ class SigningInPage extends React.Component<SigningInPageProps, SigningInPageSta\n     public constructor(props: SigningInPageProps) {\n         super(props);\n         this.state = {\n-            twoFactorEnabled: true,\n-            twoFactorEnabledText: Msg.localize('twoFactorEnabled'),\n-            isTotpConfigured: features.isTotpConfigured,\n+            credentialContainers: new Map()\n         }\n-        this.setLastPwdUpdate();\n+\n+        this.getCredentialContainers();\n     }\n \n-    private setLastPwdUpdate(): void {\n-        AccountServiceClient.Instance.doGet(\"/credentials/password\")\n-            .then((response: AxiosResponse<PasswordDetails>) => {\n-                if (response.data.lastUpdate) {\n-                    const lastUpdate: number = response.data.lastUpdate;\n-                    this.setState({lastPasswordUpdate: lastUpdate});\n-                }\n+    private getCredentialContainers(): void {\n+        AccountServiceClient.Instance.doGet(\"/credentials\")\n+            .then((response: AxiosResponse<CredentialContainer[]>) => {\n+\n+                const allContainers: CredContainerMap = new Map();\n+                response.data.forEach(container => {\n+                    let categoryMap = allContainers.get(container.category);\n+                    if (!categoryMap) {\n+                        categoryMap = new Map();\n+                        allContainers.set(container.category, categoryMap);\n+                    }\n+                    categoryMap.set(container.type, container);\n+                });\n+\n+                this.setState({credentialContainers: allContainers});\n             });\n     }\n     \n-    private handleTwoFactorSwitch = () => {\n-        if (this.state.twoFactorEnabled) {\n-            this.setState({twoFactorEnabled: false, twoFactorEnabledText: Msg.localize('twoFactorDisabled')})\n-        } else {\n-            this.setState({twoFactorEnabled: true, twoFactorEnabledText:  Msg.localize('twoFactorEnabled')})\n-        }\n-    }\n-\n-    private handleRemoveTOTP = () => {\n-      AccountServiceClient.Instance.doDelete(\"/totp/remove\")\n+    private handleRemove = (credentialId: string, userLabel: string) => {\n+      AccountServiceClient.Instance.doDelete(\"/credentials/\" + credentialId)\n         .then(() => {\n-            this.setState({isTotpConfigured: false});\n-            ContentAlert.success('successTotpRemovedMessage');\n+            this.getCredentialContainers();\n+            ContentAlert.success('successRemovedMessage', [userLabel]);\n         });\n     }\n \n     public render(): React.ReactNode {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcxMzY4Mw==", "bodyText": "Just a suggestion. The two-factor authentication looks like it's an independent credential type. If I understand it correctly, it works only with password. Couldn't we somehow visually hint the user that it's not independent? E.g. somehow place it in the same box as password?\nOf course, for the tech preview it's ok as it is.\n\n@mposolda Do you have any feedback on this?", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369713683", "createdAt": "2020-01-22T17:57:27Z", "author": {"login": "ssilvert"}, "path": "themes/src/main/resources/theme/keycloak-preview/account/resources/app/content/signingin-page/SigningInPage.tsx", "diffHunk": "@@ -68,116 +92,202 @@ class SigningInPage extends React.Component<SigningInPageProps, SigningInPageSta\n     public constructor(props: SigningInPageProps) {\n         super(props);\n         this.state = {\n-            twoFactorEnabled: true,\n-            twoFactorEnabledText: Msg.localize('twoFactorEnabled'),\n-            isTotpConfigured: features.isTotpConfigured,\n+            credentialContainers: new Map()\n         }\n-        this.setLastPwdUpdate();\n+\n+        this.getCredentialContainers();\n     }\n \n-    private setLastPwdUpdate(): void {\n-        AccountServiceClient.Instance.doGet(\"/credentials/password\")\n-            .then((response: AxiosResponse<PasswordDetails>) => {\n-                if (response.data.lastUpdate) {\n-                    const lastUpdate: number = response.data.lastUpdate;\n-                    this.setState({lastPasswordUpdate: lastUpdate});\n-                }\n+    private getCredentialContainers(): void {\n+        AccountServiceClient.Instance.doGet(\"/credentials\")\n+            .then((response: AxiosResponse<CredentialContainer[]>) => {\n+\n+                const allContainers: CredContainerMap = new Map();\n+                response.data.forEach(container => {\n+                    let categoryMap = allContainers.get(container.category);\n+                    if (!categoryMap) {\n+                        categoryMap = new Map();\n+                        allContainers.set(container.category, categoryMap);\n+                    }\n+                    categoryMap.set(container.type, container);\n+                });\n+\n+                this.setState({credentialContainers: allContainers});\n             });\n     }\n     \n-    private handleTwoFactorSwitch = () => {\n-        if (this.state.twoFactorEnabled) {\n-            this.setState({twoFactorEnabled: false, twoFactorEnabledText: Msg.localize('twoFactorDisabled')})\n-        } else {\n-            this.setState({twoFactorEnabled: true, twoFactorEnabledText:  Msg.localize('twoFactorEnabled')})\n-        }\n-    }\n-\n-    private handleRemoveTOTP = () => {\n-      AccountServiceClient.Instance.doDelete(\"/totp/remove\")\n+    private handleRemove = (credentialId: string, userLabel: string) => {\n+      AccountServiceClient.Instance.doDelete(\"/credentials/\" + credentialId)\n         .then(() => {\n-            this.setState({isTotpConfigured: false});\n-            ContentAlert.success('successTotpRemovedMessage');\n+            this.getCredentialContainers();\n+            ContentAlert.success('successRemovedMessage', [userLabel]);\n         });\n     }\n \n     public render(): React.ReactNode {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY4NjY2MA=="}, "originalCommit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDk0NzcxOnYy", "diffSide": "RIGHT", "path": "themes/src/main/resources/theme/keycloak-preview/account/resources/app/content/signingin-page/SigningInPage.tsx", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzoxMToyMVrOFgkGog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMTozMjoxN1rOFh_poA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY5MDI3NA==", "bodyText": "It looks a bit weird, or maybe too technical, that there are two \"passwords\" on top of each other. Again, IMHO ok for tech preview.", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369690274", "createdAt": "2020-01-22T17:11:21Z", "author": {"login": "vmuzikar"}, "path": "themes/src/main/resources/theme/keycloak-preview/account/resources/app/content/signingin-page/SigningInPage.tsx", "diffHunk": "@@ -68,116 +92,202 @@ class SigningInPage extends React.Component<SigningInPageProps, SigningInPageSta\n     public constructor(props: SigningInPageProps) {\n         super(props);\n         this.state = {\n-            twoFactorEnabled: true,\n-            twoFactorEnabledText: Msg.localize('twoFactorEnabled'),\n-            isTotpConfigured: features.isTotpConfigured,\n+            credentialContainers: new Map()\n         }\n-        this.setLastPwdUpdate();\n+\n+        this.getCredentialContainers();\n     }\n \n-    private setLastPwdUpdate(): void {\n-        AccountServiceClient.Instance.doGet(\"/credentials/password\")\n-            .then((response: AxiosResponse<PasswordDetails>) => {\n-                if (response.data.lastUpdate) {\n-                    const lastUpdate: number = response.data.lastUpdate;\n-                    this.setState({lastPasswordUpdate: lastUpdate});\n-                }\n+    private getCredentialContainers(): void {\n+        AccountServiceClient.Instance.doGet(\"/credentials\")\n+            .then((response: AxiosResponse<CredentialContainer[]>) => {\n+\n+                const allContainers: CredContainerMap = new Map();\n+                response.data.forEach(container => {\n+                    let categoryMap = allContainers.get(container.category);\n+                    if (!categoryMap) {\n+                        categoryMap = new Map();\n+                        allContainers.set(container.category, categoryMap);\n+                    }\n+                    categoryMap.set(container.type, container);\n+                });\n+\n+                this.setState({credentialContainers: allContainers});\n             });\n     }\n     \n-    private handleTwoFactorSwitch = () => {\n-        if (this.state.twoFactorEnabled) {\n-            this.setState({twoFactorEnabled: false, twoFactorEnabledText: Msg.localize('twoFactorDisabled')})\n-        } else {\n-            this.setState({twoFactorEnabled: true, twoFactorEnabledText:  Msg.localize('twoFactorEnabled')})\n-        }\n-    }\n-\n-    private handleRemoveTOTP = () => {\n-      AccountServiceClient.Instance.doDelete(\"/totp/remove\")\n+    private handleRemove = (credentialId: string, userLabel: string) => {\n+      AccountServiceClient.Instance.doDelete(\"/credentials/\" + credentialId)\n         .then(() => {\n-            this.setState({isTotpConfigured: false});\n-            ContentAlert.success('successTotpRemovedMessage');\n+            this.getCredentialContainers();\n+            ContentAlert.success('successRemovedMessage', [userLabel]);\n         });\n     }\n \n     public render(): React.ReactNode {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcxNDYzOA==", "bodyText": "I wasn't totally comfortable with that either.  Right now that's just a placeholder so that it's consistent with the other types.  I'm open to suggestions.", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369714638", "createdAt": "2020-01-22T17:59:29Z", "author": {"login": "ssilvert"}, "path": "themes/src/main/resources/theme/keycloak-preview/account/resources/app/content/signingin-page/SigningInPage.tsx", "diffHunk": "@@ -68,116 +92,202 @@ class SigningInPage extends React.Component<SigningInPageProps, SigningInPageSta\n     public constructor(props: SigningInPageProps) {\n         super(props);\n         this.state = {\n-            twoFactorEnabled: true,\n-            twoFactorEnabledText: Msg.localize('twoFactorEnabled'),\n-            isTotpConfigured: features.isTotpConfigured,\n+            credentialContainers: new Map()\n         }\n-        this.setLastPwdUpdate();\n+\n+        this.getCredentialContainers();\n     }\n \n-    private setLastPwdUpdate(): void {\n-        AccountServiceClient.Instance.doGet(\"/credentials/password\")\n-            .then((response: AxiosResponse<PasswordDetails>) => {\n-                if (response.data.lastUpdate) {\n-                    const lastUpdate: number = response.data.lastUpdate;\n-                    this.setState({lastPasswordUpdate: lastUpdate});\n-                }\n+    private getCredentialContainers(): void {\n+        AccountServiceClient.Instance.doGet(\"/credentials\")\n+            .then((response: AxiosResponse<CredentialContainer[]>) => {\n+\n+                const allContainers: CredContainerMap = new Map();\n+                response.data.forEach(container => {\n+                    let categoryMap = allContainers.get(container.category);\n+                    if (!categoryMap) {\n+                        categoryMap = new Map();\n+                        allContainers.set(container.category, categoryMap);\n+                    }\n+                    categoryMap.set(container.type, container);\n+                });\n+\n+                this.setState({credentialContainers: allContainers});\n             });\n     }\n     \n-    private handleTwoFactorSwitch = () => {\n-        if (this.state.twoFactorEnabled) {\n-            this.setState({twoFactorEnabled: false, twoFactorEnabledText: Msg.localize('twoFactorDisabled')})\n-        } else {\n-            this.setState({twoFactorEnabled: true, twoFactorEnabledText:  Msg.localize('twoFactorEnabled')})\n-        }\n-    }\n-\n-    private handleRemoveTOTP = () => {\n-      AccountServiceClient.Instance.doDelete(\"/totp/remove\")\n+    private handleRemove = (credentialId: string, userLabel: string) => {\n+      AccountServiceClient.Instance.doDelete(\"/credentials/\" + credentialId)\n         .then(() => {\n-            this.setState({isTotpConfigured: false});\n-            ContentAlert.success('successTotpRemovedMessage');\n+            this.getCredentialContainers();\n+            ContentAlert.success('successRemovedMessage', [userLabel]);\n         });\n     }\n \n     public render(): React.ReactNode {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY5MDI3NA=="}, "originalCommit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk3ODE0OA==", "bodyText": "I suggest to keep it like this and possibly revisit later based on the feedback from users...\nFor the future, I wonder if we may have 2 categories instead of 3. Instead of \"Password, \"Two-Factor Authentication\" and \"Passwordless\", we may have just something like \"1st factor authentication\" and \"Two-factor authentication\" . From the built-in credentials, the \"Password\" and \"WebAuthn Passwordless\" will be 1st-factor Category. And \"OTP\" and \"WebAuthn\" will be two-factor category. We may probably wait for the feedback from users and customers whether to do something like this...", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369978148", "createdAt": "2020-01-23T08:15:27Z", "author": {"login": "mposolda"}, "path": "themes/src/main/resources/theme/keycloak-preview/account/resources/app/content/signingin-page/SigningInPage.tsx", "diffHunk": "@@ -68,116 +92,202 @@ class SigningInPage extends React.Component<SigningInPageProps, SigningInPageSta\n     public constructor(props: SigningInPageProps) {\n         super(props);\n         this.state = {\n-            twoFactorEnabled: true,\n-            twoFactorEnabledText: Msg.localize('twoFactorEnabled'),\n-            isTotpConfigured: features.isTotpConfigured,\n+            credentialContainers: new Map()\n         }\n-        this.setLastPwdUpdate();\n+\n+        this.getCredentialContainers();\n     }\n \n-    private setLastPwdUpdate(): void {\n-        AccountServiceClient.Instance.doGet(\"/credentials/password\")\n-            .then((response: AxiosResponse<PasswordDetails>) => {\n-                if (response.data.lastUpdate) {\n-                    const lastUpdate: number = response.data.lastUpdate;\n-                    this.setState({lastPasswordUpdate: lastUpdate});\n-                }\n+    private getCredentialContainers(): void {\n+        AccountServiceClient.Instance.doGet(\"/credentials\")\n+            .then((response: AxiosResponse<CredentialContainer[]>) => {\n+\n+                const allContainers: CredContainerMap = new Map();\n+                response.data.forEach(container => {\n+                    let categoryMap = allContainers.get(container.category);\n+                    if (!categoryMap) {\n+                        categoryMap = new Map();\n+                        allContainers.set(container.category, categoryMap);\n+                    }\n+                    categoryMap.set(container.type, container);\n+                });\n+\n+                this.setState({credentialContainers: allContainers});\n             });\n     }\n     \n-    private handleTwoFactorSwitch = () => {\n-        if (this.state.twoFactorEnabled) {\n-            this.setState({twoFactorEnabled: false, twoFactorEnabledText: Msg.localize('twoFactorDisabled')})\n-        } else {\n-            this.setState({twoFactorEnabled: true, twoFactorEnabledText:  Msg.localize('twoFactorEnabled')})\n-        }\n-    }\n-\n-    private handleRemoveTOTP = () => {\n-      AccountServiceClient.Instance.doDelete(\"/totp/remove\")\n+    private handleRemove = (credentialId: string, userLabel: string) => {\n+      AccountServiceClient.Instance.doDelete(\"/credentials/\" + credentialId)\n         .then(() => {\n-            this.setState({isTotpConfigured: false});\n-            ContentAlert.success('successTotpRemovedMessage');\n+            this.getCredentialContainers();\n+            ContentAlert.success('successRemovedMessage', [userLabel]);\n         });\n     }\n \n     public render(): React.ReactNode {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY5MDI3NA=="}, "originalCommit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAzODE2Mw==", "bodyText": "I suggest to keep it like this and possibly revisit later based on the feedback from users...\n\nI'm not sure we can expect this kind of feedback (\"Hey, it looks weird!\"). :) IMHO it is about the \"look and feel\", about the impression from the admin console and most importantly how easy-to-use and intuitive it is for an end user that doesn't have any technical background. And I don't think those kind of users will file a JIRA. :) But I'm no UX expert, so it's just how I feel it. ;)\n\nFor the future, I wonder if we may have 2 categories instead of 3. Instead of \"Password, \"Two-Factor Authentication\" and \"Passwordless\", we may have just something like \"1st factor authentication\" and \"Two-factor authentication\" . From the built-in credentials, the \"Password\" and \"WebAuthn Passwordless\" will be 1st-factor Category. And \"OTP\" and \"WebAuthn\" will be two-factor category. We may probably wait for the feedback from users and customers whether to do something like this...\n\nThis would even more strongly imply that 2FA is an independent credential type which it isn't.", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r370038163", "createdAt": "2020-01-23T10:26:34Z", "author": {"login": "vmuzikar"}, "path": "themes/src/main/resources/theme/keycloak-preview/account/resources/app/content/signingin-page/SigningInPage.tsx", "diffHunk": "@@ -68,116 +92,202 @@ class SigningInPage extends React.Component<SigningInPageProps, SigningInPageSta\n     public constructor(props: SigningInPageProps) {\n         super(props);\n         this.state = {\n-            twoFactorEnabled: true,\n-            twoFactorEnabledText: Msg.localize('twoFactorEnabled'),\n-            isTotpConfigured: features.isTotpConfigured,\n+            credentialContainers: new Map()\n         }\n-        this.setLastPwdUpdate();\n+\n+        this.getCredentialContainers();\n     }\n \n-    private setLastPwdUpdate(): void {\n-        AccountServiceClient.Instance.doGet(\"/credentials/password\")\n-            .then((response: AxiosResponse<PasswordDetails>) => {\n-                if (response.data.lastUpdate) {\n-                    const lastUpdate: number = response.data.lastUpdate;\n-                    this.setState({lastPasswordUpdate: lastUpdate});\n-                }\n+    private getCredentialContainers(): void {\n+        AccountServiceClient.Instance.doGet(\"/credentials\")\n+            .then((response: AxiosResponse<CredentialContainer[]>) => {\n+\n+                const allContainers: CredContainerMap = new Map();\n+                response.data.forEach(container => {\n+                    let categoryMap = allContainers.get(container.category);\n+                    if (!categoryMap) {\n+                        categoryMap = new Map();\n+                        allContainers.set(container.category, categoryMap);\n+                    }\n+                    categoryMap.set(container.type, container);\n+                });\n+\n+                this.setState({credentialContainers: allContainers});\n             });\n     }\n     \n-    private handleTwoFactorSwitch = () => {\n-        if (this.state.twoFactorEnabled) {\n-            this.setState({twoFactorEnabled: false, twoFactorEnabledText: Msg.localize('twoFactorDisabled')})\n-        } else {\n-            this.setState({twoFactorEnabled: true, twoFactorEnabledText:  Msg.localize('twoFactorEnabled')})\n-        }\n-    }\n-\n-    private handleRemoveTOTP = () => {\n-      AccountServiceClient.Instance.doDelete(\"/totp/remove\")\n+    private handleRemove = (credentialId: string, userLabel: string) => {\n+      AccountServiceClient.Instance.doDelete(\"/credentials/\" + credentialId)\n         .then(() => {\n-            this.setState({isTotpConfigured: false});\n-            ContentAlert.success('successTotpRemovedMessage');\n+            this.getCredentialContainers();\n+            ContentAlert.success('successRemovedMessage', [userLabel]);\n         });\n     }\n \n     public render(): React.ReactNode {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY5MDI3NA=="}, "originalCommit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA3MzYwMw==", "bodyText": "@vmuzikar Please file a JIRA about this and reference this discussion.  I think it's worth taking another look and I wouldn't want us to forget about it after tech preview.", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r370073603", "createdAt": "2020-01-23T11:49:50Z", "author": {"login": "ssilvert"}, "path": "themes/src/main/resources/theme/keycloak-preview/account/resources/app/content/signingin-page/SigningInPage.tsx", "diffHunk": "@@ -68,116 +92,202 @@ class SigningInPage extends React.Component<SigningInPageProps, SigningInPageSta\n     public constructor(props: SigningInPageProps) {\n         super(props);\n         this.state = {\n-            twoFactorEnabled: true,\n-            twoFactorEnabledText: Msg.localize('twoFactorEnabled'),\n-            isTotpConfigured: features.isTotpConfigured,\n+            credentialContainers: new Map()\n         }\n-        this.setLastPwdUpdate();\n+\n+        this.getCredentialContainers();\n     }\n \n-    private setLastPwdUpdate(): void {\n-        AccountServiceClient.Instance.doGet(\"/credentials/password\")\n-            .then((response: AxiosResponse<PasswordDetails>) => {\n-                if (response.data.lastUpdate) {\n-                    const lastUpdate: number = response.data.lastUpdate;\n-                    this.setState({lastPasswordUpdate: lastUpdate});\n-                }\n+    private getCredentialContainers(): void {\n+        AccountServiceClient.Instance.doGet(\"/credentials\")\n+            .then((response: AxiosResponse<CredentialContainer[]>) => {\n+\n+                const allContainers: CredContainerMap = new Map();\n+                response.data.forEach(container => {\n+                    let categoryMap = allContainers.get(container.category);\n+                    if (!categoryMap) {\n+                        categoryMap = new Map();\n+                        allContainers.set(container.category, categoryMap);\n+                    }\n+                    categoryMap.set(container.type, container);\n+                });\n+\n+                this.setState({credentialContainers: allContainers});\n             });\n     }\n     \n-    private handleTwoFactorSwitch = () => {\n-        if (this.state.twoFactorEnabled) {\n-            this.setState({twoFactorEnabled: false, twoFactorEnabledText: Msg.localize('twoFactorDisabled')})\n-        } else {\n-            this.setState({twoFactorEnabled: true, twoFactorEnabledText:  Msg.localize('twoFactorEnabled')})\n-        }\n-    }\n-\n-    private handleRemoveTOTP = () => {\n-      AccountServiceClient.Instance.doDelete(\"/totp/remove\")\n+    private handleRemove = (credentialId: string, userLabel: string) => {\n+      AccountServiceClient.Instance.doDelete(\"/credentials/\" + credentialId)\n         .then(() => {\n-            this.setState({isTotpConfigured: false});\n-            ContentAlert.success('successTotpRemovedMessage');\n+            this.getCredentialContainers();\n+            ContentAlert.success('successRemovedMessage', [userLabel]);\n         });\n     }\n \n     public render(): React.ReactNode {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY5MDI3NA=="}, "originalCommit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE5MDE3Ng==", "bodyText": "Created https://issues.redhat.com/browse/KEYCLOAK-12781", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r371190176", "createdAt": "2020-01-27T11:32:17Z", "author": {"login": "vmuzikar"}, "path": "themes/src/main/resources/theme/keycloak-preview/account/resources/app/content/signingin-page/SigningInPage.tsx", "diffHunk": "@@ -68,116 +92,202 @@ class SigningInPage extends React.Component<SigningInPageProps, SigningInPageSta\n     public constructor(props: SigningInPageProps) {\n         super(props);\n         this.state = {\n-            twoFactorEnabled: true,\n-            twoFactorEnabledText: Msg.localize('twoFactorEnabled'),\n-            isTotpConfigured: features.isTotpConfigured,\n+            credentialContainers: new Map()\n         }\n-        this.setLastPwdUpdate();\n+\n+        this.getCredentialContainers();\n     }\n \n-    private setLastPwdUpdate(): void {\n-        AccountServiceClient.Instance.doGet(\"/credentials/password\")\n-            .then((response: AxiosResponse<PasswordDetails>) => {\n-                if (response.data.lastUpdate) {\n-                    const lastUpdate: number = response.data.lastUpdate;\n-                    this.setState({lastPasswordUpdate: lastUpdate});\n-                }\n+    private getCredentialContainers(): void {\n+        AccountServiceClient.Instance.doGet(\"/credentials\")\n+            .then((response: AxiosResponse<CredentialContainer[]>) => {\n+\n+                const allContainers: CredContainerMap = new Map();\n+                response.data.forEach(container => {\n+                    let categoryMap = allContainers.get(container.category);\n+                    if (!categoryMap) {\n+                        categoryMap = new Map();\n+                        allContainers.set(container.category, categoryMap);\n+                    }\n+                    categoryMap.set(container.type, container);\n+                });\n+\n+                this.setState({credentialContainers: allContainers});\n             });\n     }\n     \n-    private handleTwoFactorSwitch = () => {\n-        if (this.state.twoFactorEnabled) {\n-            this.setState({twoFactorEnabled: false, twoFactorEnabledText: Msg.localize('twoFactorDisabled')})\n-        } else {\n-            this.setState({twoFactorEnabled: true, twoFactorEnabledText:  Msg.localize('twoFactorEnabled')})\n-        }\n-    }\n-\n-    private handleRemoveTOTP = () => {\n-      AccountServiceClient.Instance.doDelete(\"/totp/remove\")\n+    private handleRemove = (credentialId: string, userLabel: string) => {\n+      AccountServiceClient.Instance.doDelete(\"/credentials/\" + credentialId)\n         .then(() => {\n-            this.setState({isTotpConfigured: false});\n-            ContentAlert.success('successTotpRemovedMessage');\n+            this.getCredentialContainers();\n+            ContentAlert.success('successRemovedMessage', [userLabel]);\n         });\n     }\n \n     public render(): React.ReactNode {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY5MDI3NA=="}, "originalCommit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDk1Mzc3OnYy", "diffSide": "RIGHT", "path": "themes/src/main/resources/theme/keycloak-preview/account/resources/app/content/signingin-page/SigningInPage.tsx", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzoxMzoxNVrOFgkKdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMDoyOTo0OVrOFg5b3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY5MTI1NQ==", "bodyText": "When a credential is not set up, the info text is not vertically aligned.", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369691255", "createdAt": "2020-01-22T17:13:15Z", "author": {"login": "vmuzikar"}, "path": "themes/src/main/resources/theme/keycloak-preview/account/resources/app/content/signingin-page/SigningInPage.tsx", "diffHunk": "@@ -68,116 +92,202 @@ class SigningInPage extends React.Component<SigningInPageProps, SigningInPageSta\n     public constructor(props: SigningInPageProps) {\n         super(props);\n         this.state = {\n-            twoFactorEnabled: true,\n-            twoFactorEnabledText: Msg.localize('twoFactorEnabled'),\n-            isTotpConfigured: features.isTotpConfigured,\n+            credentialContainers: new Map()\n         }\n-        this.setLastPwdUpdate();\n+\n+        this.getCredentialContainers();\n     }\n \n-    private setLastPwdUpdate(): void {\n-        AccountServiceClient.Instance.doGet(\"/credentials/password\")\n-            .then((response: AxiosResponse<PasswordDetails>) => {\n-                if (response.data.lastUpdate) {\n-                    const lastUpdate: number = response.data.lastUpdate;\n-                    this.setState({lastPasswordUpdate: lastUpdate});\n-                }\n+    private getCredentialContainers(): void {\n+        AccountServiceClient.Instance.doGet(\"/credentials\")\n+            .then((response: AxiosResponse<CredentialContainer[]>) => {\n+\n+                const allContainers: CredContainerMap = new Map();\n+                response.data.forEach(container => {\n+                    let categoryMap = allContainers.get(container.category);\n+                    if (!categoryMap) {\n+                        categoryMap = new Map();\n+                        allContainers.set(container.category, categoryMap);\n+                    }\n+                    categoryMap.set(container.type, container);\n+                });\n+\n+                this.setState({credentialContainers: allContainers});\n             });\n     }\n     \n-    private handleTwoFactorSwitch = () => {\n-        if (this.state.twoFactorEnabled) {\n-            this.setState({twoFactorEnabled: false, twoFactorEnabledText: Msg.localize('twoFactorDisabled')})\n-        } else {\n-            this.setState({twoFactorEnabled: true, twoFactorEnabledText:  Msg.localize('twoFactorEnabled')})\n-        }\n-    }\n-\n-    private handleRemoveTOTP = () => {\n-      AccountServiceClient.Instance.doDelete(\"/totp/remove\")\n+    private handleRemove = (credentialId: string, userLabel: string) => {\n+      AccountServiceClient.Instance.doDelete(\"/credentials/\" + credentialId)\n         .then(() => {\n-            this.setState({isTotpConfigured: false});\n-            ContentAlert.success('successTotpRemovedMessage');\n+            this.getCredentialContainers();\n+            ContentAlert.success('successRemovedMessage', [userLabel]);\n         });\n     }\n \n     public render(): React.ReactNode {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcxNjU5OA==", "bodyText": "I'm not sure that it needs to be aligned.  It is centered instead, which is standard for Empty State.\nI considered using the EmptyState component for this, which makes it a little fancier.  With that, it becomes much more obvious that it needs to be centered.", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r369716598", "createdAt": "2020-01-22T18:03:53Z", "author": {"login": "ssilvert"}, "path": "themes/src/main/resources/theme/keycloak-preview/account/resources/app/content/signingin-page/SigningInPage.tsx", "diffHunk": "@@ -68,116 +92,202 @@ class SigningInPage extends React.Component<SigningInPageProps, SigningInPageSta\n     public constructor(props: SigningInPageProps) {\n         super(props);\n         this.state = {\n-            twoFactorEnabled: true,\n-            twoFactorEnabledText: Msg.localize('twoFactorEnabled'),\n-            isTotpConfigured: features.isTotpConfigured,\n+            credentialContainers: new Map()\n         }\n-        this.setLastPwdUpdate();\n+\n+        this.getCredentialContainers();\n     }\n \n-    private setLastPwdUpdate(): void {\n-        AccountServiceClient.Instance.doGet(\"/credentials/password\")\n-            .then((response: AxiosResponse<PasswordDetails>) => {\n-                if (response.data.lastUpdate) {\n-                    const lastUpdate: number = response.data.lastUpdate;\n-                    this.setState({lastPasswordUpdate: lastUpdate});\n-                }\n+    private getCredentialContainers(): void {\n+        AccountServiceClient.Instance.doGet(\"/credentials\")\n+            .then((response: AxiosResponse<CredentialContainer[]>) => {\n+\n+                const allContainers: CredContainerMap = new Map();\n+                response.data.forEach(container => {\n+                    let categoryMap = allContainers.get(container.category);\n+                    if (!categoryMap) {\n+                        categoryMap = new Map();\n+                        allContainers.set(container.category, categoryMap);\n+                    }\n+                    categoryMap.set(container.type, container);\n+                });\n+\n+                this.setState({credentialContainers: allContainers});\n             });\n     }\n     \n-    private handleTwoFactorSwitch = () => {\n-        if (this.state.twoFactorEnabled) {\n-            this.setState({twoFactorEnabled: false, twoFactorEnabledText: Msg.localize('twoFactorDisabled')})\n-        } else {\n-            this.setState({twoFactorEnabled: true, twoFactorEnabledText:  Msg.localize('twoFactorEnabled')})\n-        }\n-    }\n-\n-    private handleRemoveTOTP = () => {\n-      AccountServiceClient.Instance.doDelete(\"/totp/remove\")\n+    private handleRemove = (credentialId: string, userLabel: string) => {\n+      AccountServiceClient.Instance.doDelete(\"/credentials/\" + credentialId)\n         .then(() => {\n-            this.setState({isTotpConfigured: false});\n-            ContentAlert.success('successTotpRemovedMessage');\n+            this.getCredentialContainers();\n+            ContentAlert.success('successRemovedMessage', [userLabel]);\n         });\n     }\n \n     public render(): React.ReactNode {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY5MTI1NQ=="}, "originalCommit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAzOTc3NQ==", "bodyText": "What I meant was that e.g. \"Created: {date}\" is vertically aligned and it looks great whereas \"Credential is not set up.\" is not. But thinking about this more, I think it can be either way (centered or not centered).", "url": "https://github.com/keycloak/keycloak/pull/6686#discussion_r370039775", "createdAt": "2020-01-23T10:29:49Z", "author": {"login": "vmuzikar"}, "path": "themes/src/main/resources/theme/keycloak-preview/account/resources/app/content/signingin-page/SigningInPage.tsx", "diffHunk": "@@ -68,116 +92,202 @@ class SigningInPage extends React.Component<SigningInPageProps, SigningInPageSta\n     public constructor(props: SigningInPageProps) {\n         super(props);\n         this.state = {\n-            twoFactorEnabled: true,\n-            twoFactorEnabledText: Msg.localize('twoFactorEnabled'),\n-            isTotpConfigured: features.isTotpConfigured,\n+            credentialContainers: new Map()\n         }\n-        this.setLastPwdUpdate();\n+\n+        this.getCredentialContainers();\n     }\n \n-    private setLastPwdUpdate(): void {\n-        AccountServiceClient.Instance.doGet(\"/credentials/password\")\n-            .then((response: AxiosResponse<PasswordDetails>) => {\n-                if (response.data.lastUpdate) {\n-                    const lastUpdate: number = response.data.lastUpdate;\n-                    this.setState({lastPasswordUpdate: lastUpdate});\n-                }\n+    private getCredentialContainers(): void {\n+        AccountServiceClient.Instance.doGet(\"/credentials\")\n+            .then((response: AxiosResponse<CredentialContainer[]>) => {\n+\n+                const allContainers: CredContainerMap = new Map();\n+                response.data.forEach(container => {\n+                    let categoryMap = allContainers.get(container.category);\n+                    if (!categoryMap) {\n+                        categoryMap = new Map();\n+                        allContainers.set(container.category, categoryMap);\n+                    }\n+                    categoryMap.set(container.type, container);\n+                });\n+\n+                this.setState({credentialContainers: allContainers});\n             });\n     }\n     \n-    private handleTwoFactorSwitch = () => {\n-        if (this.state.twoFactorEnabled) {\n-            this.setState({twoFactorEnabled: false, twoFactorEnabledText: Msg.localize('twoFactorDisabled')})\n-        } else {\n-            this.setState({twoFactorEnabled: true, twoFactorEnabledText:  Msg.localize('twoFactorEnabled')})\n-        }\n-    }\n-\n-    private handleRemoveTOTP = () => {\n-      AccountServiceClient.Instance.doDelete(\"/totp/remove\")\n+    private handleRemove = (credentialId: string, userLabel: string) => {\n+      AccountServiceClient.Instance.doDelete(\"/credentials/\" + credentialId)\n         .then(() => {\n-            this.setState({isTotpConfigured: false});\n-            ContentAlert.success('successTotpRemovedMessage');\n+            this.getCredentialContainers();\n+            ContentAlert.success('successRemovedMessage', [userLabel]);\n         });\n     }\n \n     public render(): React.ReactNode {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY5MTI1NQ=="}, "originalCommit": {"oid": "4ec5b50d3f18b2c87440e95f2a11fd38ff770f73"}, "originalPosition": 115}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3956, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}