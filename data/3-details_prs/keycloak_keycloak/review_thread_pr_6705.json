{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MDA2MzA2", "number": 6705, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDo0NDowNlrODzw54w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzozODoyM1rOD0P8Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjA1MjE5OnYy", "diffSide": "RIGHT", "path": "themes/src/main/resources/theme/base/admin/messages/admin-messages_en.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDo0NDowNlrOGIYFkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDo0NDowNlrOGIYFkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNjQzNA==", "bodyText": "Will be nice to add a little bit more details. Similarly like I mentioned in the docs PR :) Maybe something like \"... 'import' to only import the user once during first login of this user with this identity provider, 'force' to always update the user during every login with this identity provider\"", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r411436434", "createdAt": "2020-04-20T14:44:06Z", "author": {"login": "mposolda"}, "path": "themes/src/main/resources/theme/base/admin/messages/admin-messages_en.properties", "diffHunk": "@@ -540,6 +540,14 @@ provider=Provider\n gui-order=GUI order\n first-broker-login-flow=First Login Flow\n post-broker-login-flow=Post Login Flow\n+sync-mode=Sync Mode\n+sync-mode.tooltip=Default sync mode for all mappers. The sync mode determines when user data will be synced using the mappers. Possible values are: 'legacy' to keep the behaviour before this option was introduced, 'import' to only import the user once, 'force' to always update the user.\n+sync-mode.inherit=inherit\n+sync-mode.legacy=legacy\n+sync-mode.import=import\n+sync-mode.force=force\n+sync-mode-override=Sync Mode Override\n+sync-mode-override.tooltip=Overrides the default sync mode of the IDP for this mapper. Values are: 'legacy' to keep the behaviour before this option was introduced, 'import' to only import the user once, 'force' to always update the user.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjA1Mzg5OnYy", "diffSide": "RIGHT", "path": "themes/src/main/resources/theme/base/admin/messages/admin-messages_en.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDo0NDoyN1rOGIYGnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDo0NDoyN1rOGIYGnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNjcwMQ==", "bodyText": "See my note above for the similar tooltip", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r411436701", "createdAt": "2020-04-20T14:44:27Z", "author": {"login": "mposolda"}, "path": "themes/src/main/resources/theme/base/admin/messages/admin-messages_en.properties", "diffHunk": "@@ -540,6 +540,14 @@ provider=Provider\n gui-order=GUI order\n first-broker-login-flow=First Login Flow\n post-broker-login-flow=Post Login Flow\n+sync-mode=Sync Mode\n+sync-mode.tooltip=Default sync mode for all mappers. The sync mode determines when user data will be synced using the mappers. Possible values are: 'legacy' to keep the behaviour before this option was introduced, 'import' to only import the user once, 'force' to always update the user.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjEyNzk4OnYy", "diffSide": "RIGHT", "path": "server-spi/src/main/java/org/keycloak/models/IdentityProviderModel.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDo1ODo0MlrOGIYzbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNjozMjo0OFrOGJNYbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ0ODE3Mg==", "bodyText": "Is it possible to remove this field entirely and change getter/setter to directly read the value from the \"config\" ? For example something like:\npublic IdentityProviderSyncMode getSyncMode() {\n    return getConfig().containsKey(IdentityProviderModel.SYNC_MODE)\n                ? IdentityProviderSyncMode.valueOf(getConfig().get(IdentityProviderModel.SYNC_MODE))\n                : IdentityProviderSyncMode.LEGACY);\n}\n\npublic void setSyncMode(IdentityProviderSyncMode syncMode) {\n    getConfig().put(IdentityProviderModel.SYNC_MODE, syncMode);\n}\n\nSee for example classes like OIDCIdentityProviderConfig or OAuth2IdentityProviderConfig, which contains bunch of other similar options.\nI think this will simplify lots of other things and reduce the amount of changes at the model classes you needed to do in this PR. For example classes like RealmAdapter, ModelToRepresentation, RepresentationToModel etc won't be needed to be changed at all in this PR IMO.", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r411448172", "createdAt": "2020-04-20T14:58:42Z", "author": {"login": "mposolda"}, "path": "server-spi/src/main/java/org/keycloak/models/IdentityProviderModel.java", "diffHunk": "@@ -64,6 +66,8 @@\n \n     private String displayName;\n \n+    private IdentityProviderSyncMode syncMode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE5MzM0MA==", "bodyText": "+1", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r412193340", "createdAt": "2020-04-21T13:40:02Z", "author": {"login": "stianst"}, "path": "server-spi/src/main/java/org/keycloak/models/IdentityProviderModel.java", "diffHunk": "@@ -64,6 +66,8 @@\n \n     private String displayName;\n \n+    private IdentityProviderSyncMode syncMode;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ0ODE3Mg=="}, "originalCommit": {"oid": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMwOTYxNA==", "bodyText": "I removed the field and relied on the config (the getter will then provide the default value \"LEGACY\" in case no value exists). With this change I removed all changes to the representation end entity and there converters.", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r412309614", "createdAt": "2020-04-21T16:32:48Z", "author": {"login": "Martin-Idel-SI"}, "path": "server-spi/src/main/java/org/keycloak/models/IdentityProviderModel.java", "diffHunk": "@@ -64,6 +66,8 @@\n \n     private String displayName;\n \n+    private IdentityProviderSyncMode syncMode;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ0ODE3Mg=="}, "originalCommit": {"oid": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjEzOTI3OnYy", "diffSide": "RIGHT", "path": "server-spi/src/main/java/org/keycloak/models/IdentityProviderMapperModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNTowMDo1MlrOGIY6Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNTowMDo1MlrOGIY6Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ0OTkzMA==", "bodyText": "See my comment for the class IdentityProviderModel.java. I think same can be applied here.", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r411449930", "createdAt": "2020-04-20T15:00:52Z", "author": {"login": "mposolda"}, "path": "server-spi/src/main/java/org/keycloak/models/IdentityProviderMapperModel.java", "diffHunk": "@@ -41,6 +42,7 @@\n     protected String name;\n     protected String identityProviderAlias;\n     protected String identityProviderMapper;\n+    protected IdentityProviderMapperSyncMode syncMode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjIzODQ2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/keycloak/representations/idm/IdentityProviderMapperRepresentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNToxOTo0NVrOGIZ1fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNToxOTo0NVrOGIZ1fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2NTA4NQ==", "bodyText": "IMO there is no need to have 1st level field at the IdentityProviderMapperRepresentation level. It can just use the \"config\" map to hold the value. This means the UI HTML files will just reference to \"identityProviderMapper.config.syncMode\" instead of \"identityProviderMapper.syncMode\" . See the other fields for inspiration, which are backed by the values from \"config\" map.", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r411465085", "createdAt": "2020-04-20T15:19:45Z", "author": {"login": "mposolda"}, "path": "core/src/main/java/org/keycloak/representations/idm/IdentityProviderMapperRepresentation.java", "diffHunk": "@@ -29,6 +29,7 @@\n     protected String name;\n     protected String identityProviderAlias;\n     protected String identityProviderMapper;\n+    protected String syncMode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjI0MDE4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/keycloak/representations/idm/IdentityProviderRepresentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNToyMDowNVrOGIZ2gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNToyMDowNVrOGIZ2gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2NTM0Nw==", "bodyText": "See my comment for IdentityProviderMapperRepresentation. I believe same applies here as well.", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r411465347", "createdAt": "2020-04-20T15:20:05Z", "author": {"login": "mposolda"}, "path": "core/src/main/java/org/keycloak/representations/idm/IdentityProviderRepresentation.java", "diffHunk": "@@ -56,6 +56,7 @@\n     protected boolean linkOnly;\n     protected String firstBrokerLoginFlowAlias;\n     protected String postBrokerLoginFlowAlias;\n+    protected String syncMode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjQ1ODk5OnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/account/AccountFormServiceTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjowMjozNlrOGIb7QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxOTowMzozN1rOGJT4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ5OTMyOA==", "bodyText": "I wonder that many of the existing tests possibly won't need to be changed? Assuming that you remove the field like \"syncMode\" directly from the representation and model classes as I proposed in the comments. This will mean it will use the default value \"Legacy\" and the behaviour will be same as before AFAIK?\nThis doesn't apply just for AccountFormServiceTest, but many other tests where you explicitly added \".syncMode(IdentityProviderSyncMode.IMPORT)\" . I won't repeat this comment to all those places.", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r411499328", "createdAt": "2020-04-20T16:02:36Z", "author": {"login": "mposolda"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/account/AccountFormServiceTest.java", "diffHunk": "@@ -121,20 +122,24 @@ public void configureTestRealm(RealmRepresentation testRealm) {\n         testRealm.addIdentityProvider(IdentityProviderBuilder.create()\n                                               .providerId(\"github\")\n                                               .alias(\"github\")\n+                                              .syncMode(IdentityProviderSyncMode.IMPORT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMxNDg3OA==", "bodyText": "I removed this line where possible. In fact, this means that now my test changes are limited to the following places:\n\nclasses within org.keycloak.testsuite.broker package: Most of the tests that don't need the sync mode are left as is, but the broker configurations all need to be adapted due to the nature of the inheritance structure.\nclasses outside org.keycloak.testsuite.broker are only adapted where I added tests (admin console tests and CLI-Test) or improved on existing tests (IdentityProviderTest)\n\nIs this enough in your view?", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r412314878", "createdAt": "2020-04-21T16:40:44Z", "author": {"login": "Martin-Idel-SI"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/account/AccountFormServiceTest.java", "diffHunk": "@@ -121,20 +122,24 @@ public void configureTestRealm(RealmRepresentation testRealm) {\n         testRealm.addIdentityProvider(IdentityProviderBuilder.create()\n                                               .providerId(\"github\")\n                                               .alias(\"github\")\n+                                              .syncMode(IdentityProviderSyncMode.IMPORT)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ5OTMyOA=="}, "originalCommit": {"oid": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQxNjA1Nw==", "bodyText": "Yes, Thanks!", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r412416057", "createdAt": "2020-04-21T19:03:37Z", "author": {"login": "mposolda"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/account/AccountFormServiceTest.java", "diffHunk": "@@ -121,20 +122,24 @@ public void configureTestRealm(RealmRepresentation testRealm) {\n         testRealm.addIdentityProvider(IdentityProviderBuilder.create()\n                                               .providerId(\"github\")\n                                               .alias(\"github\")\n+                                              .syncMode(IdentityProviderSyncMode.IMPORT)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ5OTMyOA=="}, "originalCommit": {"oid": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTExOTg0OnYy", "diffSide": "RIGHT", "path": "server-spi-private/src/main/java/org/keycloak/broker/provider/IdentityProviderMapperSyncModeDelegate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzozNDo1OFrOGJGCvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzozNDo1OFrOGJGCvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE4OTM3Mw==", "bodyText": "This can be changed to a single line:\nreturn IdentityProviderSyncMode.INHERIT.equals(mapperSyncMode) ? syncMode : mapperSyncMode", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r412189373", "createdAt": "2020-04-21T13:34:58Z", "author": {"login": "stianst"}, "path": "server-spi-private/src/main/java/org/keycloak/broker/provider/IdentityProviderMapperSyncModeDelegate.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.keycloak.broker.provider;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.models.IdentityProviderMapperModel;\n+import org.keycloak.models.IdentityProviderMapperSyncMode;\n+import org.keycloak.models.IdentityProviderSyncMode;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserModel;\n+\n+public final class IdentityProviderMapperSyncModeDelegate {\n+\n+    protected static final Logger logger = Logger.getLogger(IdentityProviderMapperSyncModeDelegate.class);\n+\n+    public static void delegateUpdateBrokeredUser(KeycloakSession session, RealmModel realm, UserModel user, IdentityProviderMapperModel mapperModel, BrokeredIdentityContext context, IdentityProviderMapper mapper) {\n+        IdentityProviderSyncMode effectiveSyncMode = combineIdpAndMapperSyncMode(context.getIdpConfig().getSyncMode(), mapperModel.getSyncMode());\n+\n+        if (!mapper.supportedSyncModes().contains(effectiveSyncMode)) {\n+            logger.warnf(\"The mapper %s does not explicitly support sync mode %s. Please ensure that the SPI supports the sync mode correctly and update it to reflect this.\", mapper.getDisplayType(), effectiveSyncMode);\n+        }\n+\n+        if (effectiveSyncMode == IdentityProviderSyncMode.LEGACY) {\n+            mapper.updateBrokeredUserLegacy(session, realm, user, mapperModel, context);\n+        } else if (effectiveSyncMode == IdentityProviderSyncMode.FORCE) {\n+            mapper.updateBrokeredUser(session, realm, user, mapperModel, context);\n+        }\n+    }\n+\n+    public static IdentityProviderSyncMode combineIdpAndMapperSyncMode(IdentityProviderSyncMode syncMode, IdentityProviderMapperSyncMode mapperSyncMode) {\n+        switch (mapperSyncMode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTEyNTE4OnYy", "diffSide": "RIGHT", "path": "model/jpa/src/main/java/org/keycloak/models/jpa/RealmAdapter.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzozNjowNVrOGJGGEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDozOTo0OVrOGJJaBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE5MDIyNg==", "bodyText": "Not super keen on this refactoring - as it makes it more costly to review this. @mposolda did you review this properly?", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r412190226", "createdAt": "2020-04-21T13:36:05Z", "author": {"login": "stianst"}, "path": "model/jpa/src/main/java/org/keycloak/models/jpa/RealmAdapter.java", "diffHunk": "@@ -1287,25 +1291,31 @@ public void addIdentityProvider(IdentityProviderModel identityProvider) {\n         } else {\n             entity.setInternalId(identityProvider.getInternalId());\n         }\n+        fillEntity(identityProvider, entity);\n+        entity.setProviderId(identityProvider.getProviderId());\n+\n+        realm.addIdentityProvider(entity);\n+\n+        identityProvider.setInternalId(entity.getInternalId());\n+\n+        em.persist(entity);\n+        em.flush();\n+    }\n+\n+    private void fillEntity(IdentityProviderModel identityProvider, IdentityProviderEntity entity) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE5OTk1Mw==", "bodyText": "This was just a trivial extraction, but since I'm removing the changes in RealmAdapter, I'll also remove the refactoring.", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r412199953", "createdAt": "2020-04-21T13:48:05Z", "author": {"login": "Martin-Idel-SI"}, "path": "model/jpa/src/main/java/org/keycloak/models/jpa/RealmAdapter.java", "diffHunk": "@@ -1287,25 +1291,31 @@ public void addIdentityProvider(IdentityProviderModel identityProvider) {\n         } else {\n             entity.setInternalId(identityProvider.getInternalId());\n         }\n+        fillEntity(identityProvider, entity);\n+        entity.setProviderId(identityProvider.getProviderId());\n+\n+        realm.addIdentityProvider(entity);\n+\n+        identityProvider.setInternalId(entity.getInternalId());\n+\n+        em.persist(entity);\n+        em.flush();\n+    }\n+\n+    private void fillEntity(IdentityProviderModel identityProvider, IdentityProviderEntity entity) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE5MDIyNg=="}, "originalCommit": {"oid": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwMDA4Mw==", "bodyText": "@stianst I think that this PR doesn't need to change anything in the RealmAdapter class at all if some of my other comments are applied - this means using just field from \"config\" map instead of adding additional field into the IdentityProviderModel / IdentityProviderMapperModel classes.", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r412200083", "createdAt": "2020-04-21T13:48:14Z", "author": {"login": "mposolda"}, "path": "model/jpa/src/main/java/org/keycloak/models/jpa/RealmAdapter.java", "diffHunk": "@@ -1287,25 +1291,31 @@ public void addIdentityProvider(IdentityProviderModel identityProvider) {\n         } else {\n             entity.setInternalId(identityProvider.getInternalId());\n         }\n+        fillEntity(identityProvider, entity);\n+        entity.setProviderId(identityProvider.getProviderId());\n+\n+        realm.addIdentityProvider(entity);\n+\n+        identityProvider.setInternalId(entity.getInternalId());\n+\n+        em.persist(entity);\n+        em.flush();\n+    }\n+\n+    private void fillEntity(IdentityProviderModel identityProvider, IdentityProviderEntity entity) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE5MDIyNg=="}, "originalCommit": {"oid": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI0NDQ4NA==", "bodyText": "Sounds good", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r412244484", "createdAt": "2020-04-21T14:39:49Z", "author": {"login": "stianst"}, "path": "model/jpa/src/main/java/org/keycloak/models/jpa/RealmAdapter.java", "diffHunk": "@@ -1287,25 +1291,31 @@ public void addIdentityProvider(IdentityProviderModel identityProvider) {\n         } else {\n             entity.setInternalId(identityProvider.getInternalId());\n         }\n+        fillEntity(identityProvider, entity);\n+        entity.setProviderId(identityProvider.getProviderId());\n+\n+        realm.addIdentityProvider(entity);\n+\n+        identityProvider.setInternalId(entity.getInternalId());\n+\n+        em.persist(entity);\n+        em.flush();\n+    }\n+\n+    private void fillEntity(IdentityProviderModel identityProvider, IdentityProviderEntity entity) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE5MDIyNg=="}, "originalCommit": {"oid": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTEyODk1OnYy", "diffSide": "RIGHT", "path": "server-spi-private/src/main/java/org/keycloak/broker/provider/IdentityProviderMapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzozNjo0N1rOGJGIRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzozNjo0N1rOGJGIRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE5MDc5MA==", "bodyText": "Please don't use '*' imports", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r412190790", "createdAt": "2020-04-21T13:36:47Z", "author": {"login": "stianst"}, "path": "server-spi-private/src/main/java/org/keycloak/broker/provider/IdentityProviderMapper.java", "diffHunk": "@@ -17,25 +17,31 @@\n \n package org.keycloak.broker.provider;\n \n-import org.keycloak.models.IdentityProviderMapperModel;\n-import org.keycloak.models.KeycloakSession;\n-import org.keycloak.models.RealmModel;\n-import org.keycloak.models.UserModel;\n+import org.keycloak.models.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTEzNzU0OnYy", "diffSide": "RIGHT", "path": "server-spi-private/src/main/java/org/keycloak/broker/provider/IdentityProviderMapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzozODoyM1rOGJGNYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzozODoyM1rOGJGNYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE5MjA5OQ==", "bodyText": "Perhaps it would be cleaner to do:\nboolean supportsSyncMode(IdentityProviderSyncMode syncMode)", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r412192099", "createdAt": "2020-04-21T13:38:23Z", "author": {"login": "stianst"}, "path": "server-spi-private/src/main/java/org/keycloak/broker/provider/IdentityProviderMapper.java", "diffHunk": "@@ -17,25 +17,31 @@\n \n package org.keycloak.broker.provider;\n \n-import org.keycloak.models.IdentityProviderMapperModel;\n-import org.keycloak.models.KeycloakSession;\n-import org.keycloak.models.RealmModel;\n-import org.keycloak.models.UserModel;\n+import org.keycloak.models.*;\n import org.keycloak.provider.ConfiguredProvider;\n import org.keycloak.provider.Provider;\n import org.keycloak.provider.ProviderFactory;\n \n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n /**\n  * @author <a href=\"mailto:bill@burkecentral.com\">Bill Burke</a>\n  * @version $Revision: 1 $\n  */\n public interface IdentityProviderMapper extends Provider, ProviderFactory<IdentityProviderMapper>,ConfiguredProvider {\n     String ANY_PROVIDER = \"*\";\n+    Set<IdentityProviderSyncMode> DEFAULT_IDENTITY_PROVIDER_MAPPER_SYNC_MODES = new HashSet<>(Arrays.asList(IdentityProviderSyncMode.LEGACY, IdentityProviderSyncMode.IMPORT));\n \n     String[] getCompatibleProviders();\n     String getDisplayCategory();\n     String getDisplayType();\n \n+    default Set<IdentityProviderSyncMode> supportedSyncModes() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3842, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}