{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxODAyNzc2", "number": 7155, "title": "KEYCLOAK-14665 initial spi interfaces with validator chain and UserAttributesReprese\u2026", "bodyText": "This is the initial contribution for the Milestone M1 for the legacy profile as documented in https://github.com/keycloak/keycloak-community/blob/master/design/user-profile.md and relates to https://issues.jboss.org/browse/KEYCLOAK-14665\nA specific Ticket will be created and added soon.\nContents:\n\nSPI which supports only methods needed to support the legacy profile e.g. the available attributes feature is not implemented yet as nothing would evaluate it.\nCombination of all validation logic into one SPI implementation\nSPI with ValidationScenario handling for different places of validation (e.g Registration, IdpReview etc.)\nA ValidaitorChainBuilder to hardcode the validation rules as long there is no configuration mechanism in place", "createdAt": "2020-06-09T13:36:55Z", "url": "https://github.com/keycloak/keycloak/pull/7155", "merged": true, "mergeCommit": {"oid": "43206d31589ba127bf74d9cd32d8e02ad6ae4aa3"}, "closed": true, "closedAt": "2020-10-05T12:59:45Z", "author": {"login": "bs-matil"}, "timelineItems": {"totalCount": 45, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcprr9xgBqjM0MjY4NDg4OTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdPknK8AFqTUwMjExMTA3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fc47c68048a055fdb1f55dc73c6045daf863f5c2", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/fc47c68048a055fdb1f55dc73c6045daf863f5c2", "committedDate": "2020-06-09T13:30:25Z", "message": "initial spi interfaces with validator chain and UserAttributesRepresentation"}, "afterCommit": {"oid": "ec3657497c7edf58270b59ba6c0a8cb5f922901e", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/ec3657497c7edf58270b59ba6c0a8cb5f922901e", "committedDate": "2020-06-09T21:10:29Z", "message": "initial spi interfaces with validator chain and UserAttributesRepresentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ec3657497c7edf58270b59ba6c0a8cb5f922901e", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/ec3657497c7edf58270b59ba6c0a8cb5f922901e", "committedDate": "2020-06-09T21:10:29Z", "message": "initial spi interfaces with validator chain and UserAttributesRepresentation"}, "afterCommit": {"oid": "c15b4835858109f48769118a216f40e783c5db13", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/c15b4835858109f48769118a216f40e783c5db13", "committedDate": "2020-07-06T13:22:23Z", "message": "fix imports"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c15b4835858109f48769118a216f40e783c5db13", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/c15b4835858109f48769118a216f40e783c5db13", "committedDate": "2020-07-06T13:22:23Z", "message": "fix imports"}, "afterCommit": {"oid": "12e4582548aa2c07d3ee3b7557c81a956c16cb8f", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/12e4582548aa2c07d3ee3b7557c81a956c16cb8f", "committedDate": "2020-07-06T14:26:00Z", "message": "initial spi interfaces with validator chain and UserAttributesRepresentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMTUzMjEy", "url": "https://github.com/keycloak/keycloak/pull/7155#pullrequestreview-443153212", "createdAt": "2020-07-06T14:56:26Z", "commit": {"oid": "12e4582548aa2c07d3ee3b7557c81a956c16cb8f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNDo1NjoyN1rOGta6UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNDo1NjoyN1rOGta6UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI4MDAxNg==", "bodyText": "This is needed because of the \"chained action\" approach in the registration. May it should be considered to adapt the registration flow in order to remove this switch so we can go here with configuration only.", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r450280016", "createdAt": "2020-07-06T14:56:27Z", "author": {"login": "bs-matil"}, "path": "services/src/main/java/org/keycloak/userprofile/LegacyUserProfileProvider.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.common.util.ObjectUtil;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserModel;\n+import org.keycloak.representations.idm.UserAttributesRepresentation;\n+import org.keycloak.services.messages.Messages;\n+import org.keycloak.userprofile.util.UpdateUserProfileContext;\n+import org.keycloak.userprofile.validation.StaticValidators;\n+import org.keycloak.userprofile.validation.UserProfileValidationResult;\n+import org.keycloak.userprofile.validation.ValidationChainBuilder;\n+import org.keycloak.userprofile.validation.ValidationScenario;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public class LegacyUserProfileProvider extends AbstractUserProfileProvider {\n+\n+    private static final Logger logger = Logger.getLogger(LegacyUserProfileProvider.class);\n+\n+\n+    public static final String PROVIDER_ID = \"legacy-user-profile\";\n+\n+    @Override\n+    public String getId() {\n+        return PROVIDER_ID;\n+    }\n+\n+    @Override\n+    public UserProfileValidationResult validate(UserAttributesRepresentation rep, UpdateUserProfileContext user, ValidationScenario validationScenario) {\n+        RealmModel realm = this.session.getContext().getRealm();\n+\n+        ValidationChainBuilder builder = ValidationChainBuilder.builder();\n+        switch (validationScenario) {\n+            case UserResource:\n+                break;\n+            case IdpReview:\n+                addBasicValidators(builder, !realm.isRegistrationEmailAsUsername());\n+                break;\n+            case Account:\n+            case RegistrationProfile:\n+            case UpdateProfile:\n+                addBasicValidators(builder, !realm.isRegistrationEmailAsUsername() && realm.isEditUsernameAllowed());\n+                addSessionValidators(builder);\n+                break;\n+            case RegistrationUserCreation:\n+                addUserCreationValidators(builder);\n+                break;\n+        }\n+        return new UserProfileValidationResult(builder.build().validate(rep, user));\n+    }\n+\n+    private void addUserCreationValidators(ValidationChainBuilder builder) {\n+        RealmModel realm = this.session.getContext().getRealm();\n+\n+        if (realm.isRegistrationEmailAsUsername()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12e4582548aa2c07d3ee3b7557c81a956c16cb8f"}, "originalPosition": 80}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "12e4582548aa2c07d3ee3b7557c81a956c16cb8f", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/12e4582548aa2c07d3ee3b7557c81a956c16cb8f", "committedDate": "2020-07-06T14:26:00Z", "message": "initial spi interfaces with validator chain and UserAttributesRepresentation"}, "afterCommit": {"oid": "a24e7e52cccc7ec316c0a10a0199e06c946c7569", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/a24e7e52cccc7ec316c0a10a0199e06c946c7569", "committedDate": "2020-07-06T15:03:43Z", "message": "initial spi interfaces with validator chain and UserAttributesRepresentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a24e7e52cccc7ec316c0a10a0199e06c946c7569", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/a24e7e52cccc7ec316c0a10a0199e06c946c7569", "committedDate": "2020-07-06T15:03:43Z", "message": "initial spi interfaces with validator chain and UserAttributesRepresentation"}, "afterCommit": {"oid": "fcf3b415ad4c65a729ac299d56995849aa7cdf95", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/fcf3b415ad4c65a729ac299d56995849aa7cdf95", "committedDate": "2020-07-06T15:07:50Z", "message": "initial spi interfaces with validator chain and UserAttributesRepresentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fcf3b415ad4c65a729ac299d56995849aa7cdf95", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/fcf3b415ad4c65a729ac299d56995849aa7cdf95", "committedDate": "2020-07-06T15:07:50Z", "message": "initial spi interfaces with validator chain and UserAttributesRepresentation"}, "afterCommit": {"oid": "a02185ebb2536ccba42c6d9adfd4bcecf07a9abb", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/a02185ebb2536ccba42c6d9adfd4bcecf07a9abb", "committedDate": "2020-07-06T20:30:22Z", "message": "initial spi interfaces with validator chain and UserAttributesRepresentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a02185ebb2536ccba42c6d9adfd4bcecf07a9abb", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/a02185ebb2536ccba42c6d9adfd4bcecf07a9abb", "committedDate": "2020-07-06T20:30:22Z", "message": "initial spi interfaces with validator chain and UserAttributesRepresentation"}, "afterCommit": {"oid": "98618adab79c8d7d6534783769a7906457efb0b4", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/98618adab79c8d7d6534783769a7906457efb0b4", "committedDate": "2020-07-06T20:58:16Z", "message": "initial spi interfaces with validator chain and UserAttributesRepresentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "98618adab79c8d7d6534783769a7906457efb0b4", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/98618adab79c8d7d6534783769a7906457efb0b4", "committedDate": "2020-07-06T20:58:16Z", "message": "initial spi interfaces with validator chain and UserAttributesRepresentation"}, "afterCommit": {"oid": "a403db9fcf632bde9723b579317c0cb117052190", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/a403db9fcf632bde9723b579317c0cb117052190", "committedDate": "2020-07-06T21:02:56Z", "message": "initial spi interfaces with validator chain and UserAttributesRepresentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a403db9fcf632bde9723b579317c0cb117052190", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/a403db9fcf632bde9723b579317c0cb117052190", "committedDate": "2020-07-06T21:02:56Z", "message": "initial spi interfaces with validator chain and UserAttributesRepresentation"}, "afterCommit": {"oid": "28373a17dff3ad0474ea81a40f032fb54c8dab07", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/28373a17dff3ad0474ea81a40f032fb54c8dab07", "committedDate": "2020-07-06T21:03:52Z", "message": "initial spi interfaces with validator chain and UserAttributesRepresentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "28373a17dff3ad0474ea81a40f032fb54c8dab07", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/28373a17dff3ad0474ea81a40f032fb54c8dab07", "committedDate": "2020-07-06T21:03:52Z", "message": "initial spi interfaces with validator chain and UserAttributesRepresentation"}, "afterCommit": {"oid": "ffceaab4519eab3290c8bea5a08e8b51094994f9", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/ffceaab4519eab3290c8bea5a08e8b51094994f9", "committedDate": "2020-07-06T21:07:57Z", "message": "initial spi interfaces with validator chain and UserAttributesRepresentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ffceaab4519eab3290c8bea5a08e8b51094994f9", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/ffceaab4519eab3290c8bea5a08e8b51094994f9", "committedDate": "2020-07-06T21:07:57Z", "message": "initial spi interfaces with validator chain and UserAttributesRepresentation"}, "afterCommit": {"oid": "95faecb6b61d4ddc97c574505b503025834d0600", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/95faecb6b61d4ddc97c574505b503025834d0600", "committedDate": "2020-07-06T21:13:46Z", "message": "initial spi interfaces with validator chain and UserAttributesRepresentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "95faecb6b61d4ddc97c574505b503025834d0600", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/95faecb6b61d4ddc97c574505b503025834d0600", "committedDate": "2020-07-06T21:13:46Z", "message": "initial spi interfaces with validator chain and UserAttributesRepresentation"}, "afterCommit": {"oid": "0f1a64633c42056cfd042ad63b2f0d1b7943cc2f", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/0f1a64633c42056cfd042ad63b2f0d1b7943cc2f", "committedDate": "2020-07-06T21:15:02Z", "message": "initial spi interfaces with validator chain and UserAttributesRepresentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0f1a64633c42056cfd042ad63b2f0d1b7943cc2f", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/0f1a64633c42056cfd042ad63b2f0d1b7943cc2f", "committedDate": "2020-07-06T21:15:02Z", "message": "initial spi interfaces with validator chain and UserAttributesRepresentation"}, "afterCommit": {"oid": "1e1a258b8b56b5e3b7edf4c53c1fa80416df8209", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/1e1a258b8b56b5e3b7edf4c53c1fa80416df8209", "committedDate": "2020-07-06T21:15:54Z", "message": "initial spi interfaces with validator chain and UserAttributesRepresentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1e1a258b8b56b5e3b7edf4c53c1fa80416df8209", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/1e1a258b8b56b5e3b7edf4c53c1fa80416df8209", "committedDate": "2020-07-06T21:15:54Z", "message": "initial spi interfaces with validator chain and UserAttributesRepresentation"}, "afterCommit": {"oid": "e45e518c51767252e4cea261d91a6d2bbbfbb794", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/e45e518c51767252e4cea261d91a6d2bbbfbb794", "committedDate": "2020-07-06T21:19:01Z", "message": "initial spi interfaces with validator chain and UserAttributesRepresentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e45e518c51767252e4cea261d91a6d2bbbfbb794", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/e45e518c51767252e4cea261d91a6d2bbbfbb794", "committedDate": "2020-07-06T21:19:01Z", "message": "initial spi interfaces with validator chain and UserAttributesRepresentation"}, "afterCommit": {"oid": "6536ab11f50a744f01606d6becb0c92fe113515e", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/6536ab11f50a744f01606d6becb0c92fe113515e", "committedDate": "2020-07-06T21:20:50Z", "message": "initial spi interfaces with validator chain and UserAttributesRepresentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6536ab11f50a744f01606d6becb0c92fe113515e", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/6536ab11f50a744f01606d6becb0c92fe113515e", "committedDate": "2020-07-06T21:20:50Z", "message": "initial spi interfaces with validator chain and UserAttributesRepresentation"}, "afterCommit": {"oid": "f91cb52e50a316f2a757cd115f67891a4e0e6c68", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/f91cb52e50a316f2a757cd115f67891a4e0e6c68", "committedDate": "2020-07-06T21:48:32Z", "message": "KEYCLOAK-14665 initial spi interfaces with validator chain and UserAttributesRepresentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f91cb52e50a316f2a757cd115f67891a4e0e6c68", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/f91cb52e50a316f2a757cd115f67891a4e0e6c68", "committedDate": "2020-07-06T21:48:32Z", "message": "KEYCLOAK-14665 initial spi interfaces with validator chain and UserAttributesRepresentation"}, "afterCommit": {"oid": "3316eeea2e1e9b1d34b003ec7ab0f873afd2108d", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/3316eeea2e1e9b1d34b003ec7ab0f873afd2108d", "committedDate": "2020-07-06T21:51:46Z", "message": "KEYCLOAK-14665 initial spi interfaces with validator chain and UserAttributesRepresentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMzE0OTIy", "url": "https://github.com/keycloak/keycloak/pull/7155#pullrequestreview-451314922", "createdAt": "2020-07-20T05:59:24Z", "commit": {"oid": "3316eeea2e1e9b1d34b003ec7ab0f873afd2108d"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNTo1OToyNFrOGz54xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjowNToxNVrOG0pX8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA3ODk4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return false;\n          \n          \n            \n                    return true;\n          \n      \n    \n    \n  \n\nSince this SPI is in server-spi-private it should be marked internal (internal means implementing a custom provider is not supported, which means we can change API without considering backwards compatiblity). In the future once it's stable we can move to server-spi. and mark as non-internal", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r457078981", "createdAt": "2020-07-20T05:59:24Z", "author": {"login": "stianst"}, "path": "server-spi-private/src/main/java/org/keycloak/userprofile/UserProfileSpi.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile;\n+\n+import org.keycloak.provider.Provider;\n+import org.keycloak.provider.ProviderFactory;\n+import org.keycloak.provider.Spi;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public class UserProfileSpi implements Spi {\n+\n+    @Override\n+    public boolean isInternal() {\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3316eeea2e1e9b1d34b003ec7ab0f873afd2108d"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA4MTQwOQ==", "bodyText": "UserProfileProvider should not implement ProviderFactory. There should be separate ProviderFactory and Provider interfaces.", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r457081409", "createdAt": "2020-07-20T06:04:38Z", "author": {"login": "stianst"}, "path": "server-spi-private/src/main/java/org/keycloak/userprofile/UserProfileSpi.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile;\n+\n+import org.keycloak.provider.Provider;\n+import org.keycloak.provider.ProviderFactory;\n+import org.keycloak.provider.Spi;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public class UserProfileSpi implements Spi {\n+\n+    @Override\n+    public boolean isInternal() {\n+        return false;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"userProfile\";\n+    }\n+\n+    @Override\n+    public Class<? extends Provider> getProviderClass() {\n+        return UserProfileProvider.class;\n+    }\n+\n+    @Override\n+    public Class<? extends ProviderFactory> getProviderFactoryClass() {\n+        return UserProfileProvider.class;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3316eeea2e1e9b1d34b003ec7ab0f873afd2108d"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA4NTAzOA==", "bodyText": "Remove this Abstract class it has no use", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r457085038", "createdAt": "2020-07-20T06:12:05Z", "author": {"login": "stianst"}, "path": "server-spi-private/src/main/java/org/keycloak/userprofile/AbstractUserProfileProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile;\n+\n+import org.keycloak.Config;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.KeycloakSessionFactory;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public abstract class AbstractUserProfileProvider implements UserProfileProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3316eeea2e1e9b1d34b003ec7ab0f873afd2108d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA4ODUxMg==", "bodyText": "UserProfileProvider should not handle updates I think", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r457088512", "createdAt": "2020-07-20T06:19:05Z", "author": {"login": "stianst"}, "path": "server-spi-private/src/main/java/org/keycloak/userprofile/UserProfileProvider.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile;\n+\n+import org.keycloak.userprofile.util.UpdateUserProfileContext;\n+import org.keycloak.userprofile.validation.UserProfileValidationResult;\n+import org.keycloak.provider.Provider;\n+import org.keycloak.provider.ProviderFactory;\n+import org.keycloak.representations.idm.UserAttributesRepresentation;\n+import org.keycloak.userprofile.validation.ValidationScenario;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public interface UserProfileProvider extends Provider, ProviderFactory<UserProfileProvider> {\n+\n+    UserProfileValidationResult validate(UserAttributesRepresentation rep, UpdateUserProfileContext user, ValidationScenario validationScenario);\n+\n+    void update(UserAttributesRepresentation rep, UpdateUserProfileContext user, ValidationScenario validationScenario);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3316eeea2e1e9b1d34b003ec7ab0f873afd2108d"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5MjMxMQ==", "bodyText": "Representation classes are used by Keycloak for REST endpoints, not for internal APIs. I also don't understand what the difference is between rep and user. Why are there two classes for the user profile values?\nFor ValidationScenario I had to actually search for usage to figure out what the difference values meant as they where not quite clear to me. So I think there's some improvements that can be made there.\nFor the validate method I had something like the following in mind:\nUserProfileValidationResult validate(UserUpdateContext context)\n\ninterface UserUpdateContext:\n\nboolean isCreate();\nUserUpdateEvent getEvent()\nUserProfile getCurrent() // Returns null if create\nUserProfile getUpdated()\n\nenum UserUpdateEvent:\n\nADMIN, ACCOUNT, REQUIRED_ACTION, IDP\n\ninterface UserProfile:\n\nString getId();\nString getName;\ngetAttributes, etc.\n\nUserProfile is an interface so that a wrapper can be made for the different cases when a user profile is updated, without having to copy all values into the new class.\nclass UserProfileValidationResult\n\nboolean isValid();\nMap<String, Set<String>> getErrors();\n\nUserProfileValidationResult holds some sort of map with a string of error messages for keys.", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r457092311", "createdAt": "2020-07-20T06:26:28Z", "author": {"login": "stianst"}, "path": "server-spi-private/src/main/java/org/keycloak/userprofile/UserProfileProvider.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile;\n+\n+import org.keycloak.userprofile.util.UpdateUserProfileContext;\n+import org.keycloak.userprofile.validation.UserProfileValidationResult;\n+import org.keycloak.provider.Provider;\n+import org.keycloak.provider.ProviderFactory;\n+import org.keycloak.representations.idm.UserAttributesRepresentation;\n+import org.keycloak.userprofile.validation.ValidationScenario;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public interface UserProfileProvider extends Provider, ProviderFactory<UserProfileProvider> {\n+\n+    UserProfileValidationResult validate(UserAttributesRepresentation rep, UpdateUserProfileContext user, ValidationScenario validationScenario);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3316eeea2e1e9b1d34b003ec7ab0f873afd2108d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5NTgxNg==", "bodyText": "I would expect validate to return only errors, not success. Hence it should just be a list of attributes that has not passed validation, and the error messages for them.", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r457095816", "createdAt": "2020-07-20T06:32:40Z", "author": {"login": "stianst"}, "path": "server-spi-private/src/main/java/org/keycloak/userprofile/validation/UserProfileValidationResult.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile.validation;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public class UserProfileValidationResult {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3316eeea2e1e9b1d34b003ec7ab0f873afd2108d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5NjU0MQ==", "bodyText": "Validator should probably be a Provider, otherwise it won't be possible to add custom validators, or discover validators when configuring a user profile.", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r457096541", "createdAt": "2020-07-20T06:34:08Z", "author": {"login": "stianst"}, "path": "services/src/main/java/org/keycloak/userprofile/validation/Validator.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile.validation;\n+\n+import org.keycloak.userprofile.util.UpdateUserProfileContext;\n+\n+import java.util.function.BiFunction;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public class Validator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3316eeea2e1e9b1d34b003ec7ab0f873afd2108d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1NzAwOQ==", "bodyText": "I think looking for specific error messages like this is too brittle, perhaps it would be better to have a UserProfileValidationException with sub-classes like EmailInUseException instead here?", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r457857009", "createdAt": "2020-07-21T06:05:15Z", "author": {"login": "stianst"}, "path": "services/src/main/java/org/keycloak/authentication/forms/RegistrationProfile.java", "diffHunk": "@@ -57,41 +63,25 @@ public String getHelpText() {\n     }\n \n     @Override\n-    public void validate(ValidationContext context) {\n+    public void validate(org.keycloak.authentication.ValidationContext context) {\n         MultivaluedMap<String, String> formData = context.getHttpRequest().getDecodedFormParameters();\n-        List<FormMessage> errors = new ArrayList<>();\n+        UserAttributesRepresentation rep = AttributeFormDataProcessor.toAttributesRepresentation(formData);\n \n-        context.getEvent().detail(Details.REGISTER_METHOD, \"form\");\n-        String eventError = Errors.INVALID_REGISTRATION;\n-\n-        if (Validation.isBlank(formData.getFirst((RegistrationPage.FIELD_FIRST_NAME)))) {\n-            errors.add(new FormMessage(RegistrationPage.FIELD_FIRST_NAME, Messages.MISSING_FIRST_NAME));\n-        }\n-\n-        if (Validation.isBlank(formData.getFirst((RegistrationPage.FIELD_LAST_NAME)))) {\n-            errors.add(new FormMessage(RegistrationPage.FIELD_LAST_NAME, Messages.MISSING_LAST_NAME));\n-        }\n+        UserProfileProvider userProfile = context.getSession().getProvider(UserProfileProvider.class, LegacyUserProfileProvider.PROVIDER_ID);\n \n-        String email = formData.getFirst(Validation.FIELD_EMAIL);\n-        boolean emailValid = true;\n-        if (Validation.isBlank(email)) {\n-            errors.add(new FormMessage(RegistrationPage.FIELD_EMAIL, Messages.MISSING_EMAIL));\n-            emailValid = false;\n-        } else if (!Validation.isEmailValid(email)) {\n-            context.getEvent().detail(Details.EMAIL, email);\n-            errors.add(new FormMessage(RegistrationPage.FIELD_EMAIL, Messages.INVALID_EMAIL));\n-            emailValid = false;\n-        }\n-\n-        if (emailValid && !context.getRealm().isDuplicateEmailsAllowed() && context.getSession().users().getUserByEmail(email, context.getRealm()) != null) {\n-            eventError = Errors.EMAIL_IN_USE;\n-            formData.remove(Validation.FIELD_EMAIL);\n-            context.getEvent().detail(Details.EMAIL, email);\n-            errors.add(new FormMessage(RegistrationPage.FIELD_EMAIL, Messages.EMAIL_EXISTS));\n-        }\n+        context.getEvent().detail(Details.REGISTER_METHOD, \"form\");\n+        UserProfileValidationResult result = userProfile.validate(rep, null, ValidationScenario.RegistrationProfile);\n+        List<FormMessage> errors = Validation.getFormErrorsFromValidation(result);\n \n         if (errors.size() > 0) {\n-            context.error(eventError);\n+            if (result.hasFailureOfErrorType(Messages.EMAIL_EXISTS, Messages.INVALID_EMAIL))\n+                context.getEvent().detail(Details.EMAIL, rep.firstAttribute(UserModel.EMAIL));\n+\n+            if (result.hasFailureOfErrorType(Messages.EMAIL_EXISTS)) {\n+                context.error(Errors.EMAIL_IN_USE);\n+                formData.remove(\"email\");\n+            } else", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3316eeea2e1e9b1d34b003ec7ab0f873afd2108d"}, "originalPosition": 80}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3316eeea2e1e9b1d34b003ec7ab0f873afd2108d", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/3316eeea2e1e9b1d34b003ec7ab0f873afd2108d", "committedDate": "2020-07-06T21:51:46Z", "message": "KEYCLOAK-14665 initial spi interfaces with validator chain and UserAttributesRepresentation"}, "afterCommit": {"oid": "9bdc2db4471884b7253d797fdb1ff617a11d40e2", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/9bdc2db4471884b7253d797fdb1ff617a11d40e2", "committedDate": "2020-07-21T10:27:26Z", "message": "change of userprofilespi to seperate factory and provider"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0627ec9509faac24613a8922f25ec3deef08ffa6", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/0627ec9509faac24613a8922f25ec3deef08ffa6", "committedDate": "2020-07-21T14:19:29Z", "message": "remove UserAttributeRepresenstation\n\nremove old interface for update"}, "afterCommit": {"oid": "2a462fdb2a71e418f23cacacc0bb5000c728c2de", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/2a462fdb2a71e418f23cacacc0bb5000c728c2de", "committedDate": "2020-07-21T14:40:54Z", "message": "remove UserAttributeRepresenstation\n\nremove old interface for update"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fa2fe6fd3e6f042366a99aa125b6c0ebe0c8a080", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/fa2fe6fd3e6f042366a99aa125b6c0ebe0c8a080", "committedDate": "2020-07-22T11:11:00Z", "message": "refactoring of the userupdatecontext"}, "afterCommit": {"oid": "be601caa4e0611b6a870165576c08b733c512ddf", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/be601caa4e0611b6a870165576c08b733c512ddf", "committedDate": "2020-07-23T14:49:34Z", "message": "refactoring of all update contexts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "be601caa4e0611b6a870165576c08b733c512ddf", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/be601caa4e0611b6a870165576c08b733c512ddf", "committedDate": "2020-07-23T14:49:34Z", "message": "refactoring of all update contexts"}, "afterCommit": {"oid": "805c683c807e72874f4d189aac1a2a5ac41a7564", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/805c683c807e72874f4d189aac1a2a5ac41a7564", "committedDate": "2020-07-24T11:45:46Z", "message": "expose LDAP toLowerCase on username via the user model. This is needed to check if a new attribtue is the same username but in different case"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "805c683c807e72874f4d189aac1a2a5ac41a7564", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/805c683c807e72874f4d189aac1a2a5ac41a7564", "committedDate": "2020-07-24T11:45:46Z", "message": "expose LDAP toLowerCase on username via the user model. This is needed to check if a new attribtue is the same username but in different case"}, "afterCommit": {"oid": "e39c46245f153747325617ae281078cbafe39131", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/e39c46245f153747325617ae281078cbafe39131", "committedDate": "2020-07-29T09:36:30Z", "message": "introduce abstract user profile"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e39c46245f153747325617ae281078cbafe39131", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/e39c46245f153747325617ae281078cbafe39131", "committedDate": "2020-07-29T09:36:30Z", "message": "introduce abstract user profile"}, "afterCommit": {"oid": "9c1e65949b9a7e4af59e024b928103b6a8aafc38", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/9c1e65949b9a7e4af59e024b928103b6a8aafc38", "committedDate": "2020-07-29T12:41:46Z", "message": "KEYCLOAK-14665 initial spi interfaces with validator chain and UserAttributesRepresentation\n\nchange of userprofilespi to seperate factory and provider\n\nWIP\n\nWIP\n\nremove UserAttributeRepresenstation\n\nremove old interface for update\n\nintroduce abstract user profile"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9c1e65949b9a7e4af59e024b928103b6a8aafc38", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/9c1e65949b9a7e4af59e024b928103b6a8aafc38", "committedDate": "2020-07-29T12:41:46Z", "message": "KEYCLOAK-14665 initial spi interfaces with validator chain and UserAttributesRepresentation\n\nchange of userprofilespi to seperate factory and provider\n\nWIP\n\nWIP\n\nremove UserAttributeRepresenstation\n\nremove old interface for update\n\nintroduce abstract user profile"}, "afterCommit": {"oid": "741585c716f6eb8a3a2d0bdca61a450bef784b7e", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/741585c716f6eb8a3a2d0bdca61a450bef784b7e", "committedDate": "2020-07-29T14:51:53Z", "message": "KEYCLOAK-14665 initial spi interfaces with validator chain and UserAttributesRepresentation\n\nchange of userprofilespi to seperate factory and provider\n\nWIP\n\nWIP\n\nremove UserAttributeRepresenstation\n\nremove old interface for update\n\nintroduce abstract user profile"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "741585c716f6eb8a3a2d0bdca61a450bef784b7e", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/741585c716f6eb8a3a2d0bdca61a450bef784b7e", "committedDate": "2020-07-29T14:51:53Z", "message": "KEYCLOAK-14665 initial spi interfaces with validator chain and UserAttributesRepresentation\n\nchange of userprofilespi to seperate factory and provider\n\nWIP\n\nWIP\n\nremove UserAttributeRepresenstation\n\nremove old interface for update\n\nintroduce abstract user profile"}, "afterCommit": {"oid": "deb59bd7c0fef7f38ba57fe9814e1be8fadaef02", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/deb59bd7c0fef7f38ba57fe9814e1be8fadaef02", "committedDate": "2020-07-29T15:00:42Z", "message": "KEYCLOAK-14665 initial spi interfaces with validator chain and UserAttributesRepresentation\n\nchange of userprofilespi to seperate factory and provider\n\nWIP\n\nWIP\n\nremove UserAttributeRepresenstation\n\nremove old interface for update\n\nintroduce abstract user profile"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "54aeab7c262c361ed1ad6794307f513b1ea0cc8f", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/54aeab7c262c361ed1ad6794307f513b1ea0cc8f", "committedDate": "2020-07-29T20:48:00Z", "message": "Move StoredUserProfile to private spi package"}, "afterCommit": {"oid": "c9b53b2657af25600d24a4f7cbbe9e9ccf34f30f", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/c9b53b2657af25600d24a4f7cbbe9e9ccf34f30f", "committedDate": "2020-09-28T14:13:52Z", "message": "KEYCLOAK-14665 initial spi interfaces with validator chain and UserAttributesRepresentation\n\nchange of userprofilespi to seperate factory and provider\n\nremove UserAttributeRepresenstation\n\nremove old interface for update\n\nintroduce abstract user profile\n\nMove StoredUserProfile to private spi package"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3NDQ5OTQx", "url": "https://github.com/keycloak/keycloak/pull/7155#pullrequestreview-497449941", "createdAt": "2020-09-28T12:13:38Z", "commit": {"oid": "54aeab7c262c361ed1ad6794307f513b1ea0cc8f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjoxMzozOFrOHY617g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODoyNjo1NVrOHZKlMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5MTk1MA==", "bodyText": "Considering you'll never have entries with a null value in the map, you can just:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return this.attributes == null ? null : this.attributes.get(key) == null ? null : this.attributes.get(key).size() == 0 ? null : this.attributes.get(key).get(0);\n          \n          \n            \n                    return this.attributes == null ? null : this.attributes.containsKey(key) ? this.attributes.get(key).get(0) : null;", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r495891950", "createdAt": "2020-09-28T12:13:38Z", "author": {"login": "pedroigor"}, "path": "core/src/main/java/org/keycloak/representations/account/UserRepresentation.java", "diffHunk": "@@ -94,4 +97,13 @@ public void setAttributes(Map<String, List<String>> attributes) {\n         this.attributes = attributes;\n     }\n \n+    public void singleAttribute(String name, String value) {\n+        if (this.attributes == null) attributes = new HashMap<>();\n+        attributes.put(name, (value == null ? new ArrayList<String>() : Arrays.asList(value)));\n+    }\n+\n+    public String firstAttribute(String key) {\n+        return this.attributes == null ? null : this.attributes.get(key) == null ? null : this.attributes.get(key).size() == 0 ? null : this.attributes.get(key).get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54aeab7c262c361ed1ad6794307f513b1ea0cc8f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5MzE0OQ==", "bodyText": "I understand the reason, but if this is not critical to your PR. Could you revert this change?", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r495893149", "createdAt": "2020-09-28T12:15:47Z", "author": {"login": "pedroigor"}, "path": "core/src/main/java/org/keycloak/representations/idm/UserRepresentation.java", "diffHunk": "@@ -156,10 +156,13 @@ public void setAttributes(Map<String, List<String>> attributes) {\n         this.attributes = attributes;\n     }\n \n-    public UserRepresentation singleAttribute(String name, String value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54aeab7c262c361ed1ad6794307f513b1ea0cc8f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5NDI2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return this.attributes == null ? null : this.attributes.get(key) == null ? null : this.attributes.get(key).size() == 0 ? null : this.attributes.get(key).get(0);\n          \n          \n            \n                    return this.attributes == null ? null : this.attributes.get(key) == null ? null : this.attributes.get(key).isEmpty() ? null : this.attributes.get(key).get(0);", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r495894262", "createdAt": "2020-09-28T12:17:57Z", "author": {"login": "pedroigor"}, "path": "core/src/main/java/org/keycloak/representations/idm/UserRepresentation.java", "diffHunk": "@@ -156,10 +156,13 @@ public void setAttributes(Map<String, List<String>> attributes) {\n         this.attributes = attributes;\n     }\n \n-    public UserRepresentation singleAttribute(String name, String value) {\n+    public void singleAttribute(String name, String value) {\n         if (this.attributes == null) attributes = new HashMap<>();\n         attributes.put(name, (value == null ? new ArrayList<String>() : Arrays.asList(value)));\n-        return this;\n+    }\n+\n+    public String firstAttribute(String key) {\n+        return this.attributes == null ? null : this.attributes.get(key) == null ? null : this.attributes.get(key).size() == 0 ? null : this.attributes.get(key).get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54aeab7c262c361ed1ad6794307f513b1ea0cc8f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5NTk0MQ==", "bodyText": "I think we should not even set the attribute if the value is null or empty.\nWe can probably throw an IllegalArgumentException too in this case.", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r495895941", "createdAt": "2020-09-28T12:21:03Z", "author": {"login": "pedroigor"}, "path": "core/src/main/java/org/keycloak/representations/account/UserRepresentation.java", "diffHunk": "@@ -94,4 +97,13 @@ public void setAttributes(Map<String, List<String>> attributes) {\n         this.attributes = attributes;\n     }\n \n+    public void singleAttribute(String name, String value) {\n+        if (this.attributes == null) attributes = new HashMap<>();\n+        attributes.put(name, (value == null ? new ArrayList<String>() : Arrays.asList(value)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54aeab7c262c361ed1ad6794307f513b1ea0cc8f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5ODcyNw==", "bodyText": "The same here:\n\nDo not accept null values by either not updating the map or throwing an IllegalArgumentException.", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r495898727", "createdAt": "2020-09-28T12:25:56Z", "author": {"login": "pedroigor"}, "path": "core/src/main/java/org/keycloak/representations/idm/UserRepresentation.java", "diffHunk": "@@ -156,10 +156,13 @@ public void setAttributes(Map<String, List<String>> attributes) {\n         this.attributes = attributes;\n     }\n \n-    public UserRepresentation singleAttribute(String name, String value) {\n+    public void singleAttribute(String name, String value) {\n         if (this.attributes == null) attributes = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54aeab7c262c361ed1ad6794307f513b1ea0cc8f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5OTI5Ng==", "bodyText": "The same here:\n\nConsidering we are not going to accept null or empty values, don't need to perform some of these checks.", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r495899296", "createdAt": "2020-09-28T12:26:58Z", "author": {"login": "pedroigor"}, "path": "core/src/main/java/org/keycloak/representations/idm/UserRepresentation.java", "diffHunk": "@@ -156,10 +156,13 @@ public void setAttributes(Map<String, List<String>> attributes) {\n         this.attributes = attributes;\n     }\n \n-    public UserRepresentation singleAttribute(String name, String value) {\n+    public void singleAttribute(String name, String value) {\n         if (this.attributes == null) attributes = new HashMap<>();\n         attributes.put(name, (value == null ? new ArrayList<String>() : Arrays.asList(value)));\n-        return this;\n+    }\n+\n+    public String firstAttribute(String key) {\n+        return this.attributes == null ? null : this.attributes.get(key) == null ? null : this.attributes.get(key).size() == 0 ? null : this.attributes.get(key).get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54aeab7c262c361ed1ad6794307f513b1ea0cc8f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkwMTQwMQ==", "bodyText": "Nitpick. Please move this field declaration to the beginning close to others.", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r495901401", "createdAt": "2020-09-28T12:30:47Z", "author": {"login": "pedroigor"}, "path": "server-spi-private/src/main/java/org/keycloak/userprofile/validation/AttributeValidationResult.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile.validation;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public class AttributeValidationResult {\n+\n+    private final String attributeKey;\n+    private final boolean changed;\n+\n+    public List<ValidationResult> getValidationResults() {\n+        return validationResults;\n+    }\n+\n+    public List<ValidationResult> getFailedValidations() {\n+        return validationResults == null ? null : validationResults.stream().filter(o -> !o.isValid()).collect(Collectors.toList());\n+    }\n+\n+    List<ValidationResult> validationResults;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54aeab7c262c361ed1ad6794307f513b1ea0cc8f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkwMzUzMg==", "bodyText": "Nitpick. Use method reference when possible.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return validationResults == null ? null : validationResults.stream().filter(o -> !o.isValid()).collect(Collectors.toList());\n          \n          \n            \n                    return validationResults == null ? null : validationResults.stream().filter(ValidationResult::isValid).collect(Collectors.toList());", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r495903532", "createdAt": "2020-09-28T12:34:35Z", "author": {"login": "pedroigor"}, "path": "server-spi-private/src/main/java/org/keycloak/userprofile/validation/AttributeValidationResult.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile.validation;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public class AttributeValidationResult {\n+\n+    private final String attributeKey;\n+    private final boolean changed;\n+\n+    public List<ValidationResult> getValidationResults() {\n+        return validationResults;\n+    }\n+\n+    public List<ValidationResult> getFailedValidations() {\n+        return validationResults == null ? null : validationResults.stream().filter(o -> !o.isValid()).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54aeab7c262c361ed1ad6794307f513b1ea0cc8f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEyNDQxNA==", "bodyText": "Maybe we can make life easier for implementors if we change some methods like that:\n    default String getFirstAttributeValue(String attributeKey) {\n        List<String> values = getAttributes().getOrDefault(name, Collections.emptyList());\n        \n        if (values.isEmpty()) {\n            return null;\n        }\n        \n        return values.get(0);\n    }\n\n    default List<String> getAttribute(String attributeKey) {\n        return getAttributes().get(key);\n    }\n\nSo that you only need to override getId and getAttributes. The latter being the real source of data.\nI'm also wondering if we should not have attributes in a separate structure similar to Attributes. One of the main points being that we can add more controls such as read/write flags without impacting the main UserProfile API.", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r496124414", "createdAt": "2020-09-28T17:41:12Z", "author": {"login": "pedroigor"}, "path": "server-spi-private/src/main/java/org/keycloak/userprofile/UserProfile.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Abstraction, which allows to update the user in various contexts (Required action of already existing user, or first identity provider\n+ * login when user doesn't yet exists in Keycloak DB)\n+ *\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public interface UserProfile {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b53b2657af25600d24a4f7cbbe9e9ccf34f30f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEzNzk2OA==", "bodyText": "I think UserProfileUpdateHelper can be simpler if we just pass the attribute map instead of the UserModel. It would avoid having to create this anonymous class to work around the contract to only fetch attributes.\nI'm also wondering why the logic on UserProfileUpdateHelper is not on the UserProfileProvider itself?", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r496137968", "createdAt": "2020-09-28T18:04:54Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/authentication/authenticators/broker/IdpReviewProfileAuthenticator.java", "diffHunk": "@@ -110,28 +127,37 @@ protected void actionImpl(AuthenticationFlowContext context, SerializedBrokeredI\n             return;\n         }\n \n-        String username = realm.isRegistrationEmailAsUsername() ? formData.getFirst(UserModel.EMAIL) : formData.getFirst(UserModel.USERNAME);\n-        userCtx.setUsername(username);\n-        userCtx.setFirstName(formData.getFirst(UserModel.FIRST_NAME));\n-        userCtx.setLastName(formData.getFirst(UserModel.LAST_NAME));\n+        UserProfileUpdateHelper.update(UserUpdateEvent.IdpReview, context.getSession(), new UserModelDelegate(null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b53b2657af25600d24a4f7cbbe9e9ccf34f30f"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE0OTgxMA==", "bodyText": "I think we could have some methods here to create the UserProfileProvider instance without pushing too much to clients of the API. For instance:\nMap<String, List<String>> newAttributes = // obtain attributes to update\nUserProfileProviderFactory factory = // obtain factory from session\nUserProfileProvider provider = factory.create(UserUpdateEvent.IdpReview, user.getAttributes(), newAttributes);\nUserProfileValidationResult result = profileProvider.validate();\n\nThis can hide some implementation details such as the UserProfileContext implementation that should be used. As well as the different UserProfile implementations (if we really need all those impls). In fact, another approach to the API could be:\nMap<String, List<String>> newAttributes = // obtain attributes to update\nUserProfileProvider provider = // obtain provider from factory\nUserProfileValidationResult result = profileProvider.validate(UserProfile.forIdpReview(userCtx), newAttributes);\n\nSo that the event would become irrelevant and we could check for the context based on the type of the UserProfile instance.\nIn addition to that, the user ID also works like any other attribute into the attribute map that is the real source of data and data structure we care about to perform the validations.\nThe Attributes API I gave as an example could also help to make this SPI more attribute oriented and simplify even more how clients pass over the attributes from the different places in Keycloak as well as using different sources.\nI've also another idea for this SPI based on events. But I think it would demand changes that we probably don't want now to include a more generic and robust event system in Keycloak.", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r496149810", "createdAt": "2020-09-28T18:26:55Z", "author": {"login": "pedroigor"}, "path": "server-spi-private/src/main/java/org/keycloak/userprofile/UserProfileProviderFactory.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile;\n+\n+import org.keycloak.provider.ProviderFactory;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public interface UserProfileProviderFactory extends  ProviderFactory<UserProfileProvider> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b53b2657af25600d24a4f7cbbe9e9ccf34f30f"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3Nzk4Njcx", "url": "https://github.com/keycloak/keycloak/pull/7155#pullrequestreview-497798671", "createdAt": "2020-09-28T18:40:05Z", "commit": {"oid": "c9b53b2657af25600d24a4f7cbbe9e9ccf34f30f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODo0MDowNVrOHZLA9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODo0MDowNVrOHZLA9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE1NjkxNw==", "bodyText": "I understand the reason behind it I think. So that a UserProfile is marked as writable.\nAfter reading through your code, looks like to me that the best would be if we had a single UserProfile implementation, with attributes encapsulated via a Attributes API so that the read/write capability could be controlled accordingly depending on the type of the event.", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r496156917", "createdAt": "2020-09-28T18:40:05Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/userprofile/utils/StoredUserProfile.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile.utils;\n+\n+import org.keycloak.userprofile.UserProfile;\n+\n+import java.util.List;\n+\n+/**\n+ * Abstraction, which allows to update the user in various contexts (Required action of already existing user, or first identity provider\n+ * login when user doesn't yet exists in Keycloak DB)\n+ *\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public interface StoredUserProfile extends UserProfile {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b53b2657af25600d24a4f7cbbe9e9ccf34f30f"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3Nzk5NzIw", "url": "https://github.com/keycloak/keycloak/pull/7155#pullrequestreview-497799720", "createdAt": "2020-09-28T18:41:36Z", "commit": {"oid": "c9b53b2657af25600d24a4f7cbbe9e9ccf34f30f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODo0MTozN1rOHZLEUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODo0MTozN1rOHZLEUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE1Nzc3OQ==", "bodyText": "Why create an attribute with a list of null values ?", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r496157779", "createdAt": "2020-09-28T18:41:37Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/userprofile/utils/UserProfileUpdateHelper.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.userprofile.utils;\n+\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserModel;\n+import org.keycloak.models.utils.KeycloakModelUtils;\n+import org.keycloak.userprofile.validation.UserUpdateEvent;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * @author <a href=\"mailto:markus.till@bosch.io\">Markus Till</a>\n+ */\n+public class UserProfileUpdateHelper {\n+\n+    public static void update(UserUpdateEvent userUpdateEvent, KeycloakSession session, UserModel currentUser, StoredUserProfile updatedUser) {\n+        update(userUpdateEvent, session, currentUser, updatedUser, true);\n+    }\n+\n+\n+    public static void update(UserUpdateEvent userUpdateEvent, KeycloakSession session, UserModel currentUser, StoredUserProfile updatedUser, boolean removeMissingAttributes) {\n+        RealmModel realm = session.getContext().getRealm();\n+\n+        if (updatedUser.getAttributes() == null || updatedUser.getAttributes().size() == 0)\n+            return;\n+\n+        //The Idp review does not respect \"isEditUserNameAllowed\" therefore we have to miss the check here\n+        if (!userUpdateEvent.equals(UserUpdateEvent.IdpReview)) {\n+            //This step has to be done before email is assigned to the username if isRegistrationEmailAsUsername is set\n+            //Otherwise email change will not reflect in username changes.\n+            if (updatedUser.getFirstAttribute(UserModel.USERNAME) != null && !realm.isEditUsernameAllowed()) {\n+                updatedUser.removeAttribute(UserModel.USERNAME);\n+            }\n+        }\n+\n+        if (updatedUser.getFirstAttribute(UserModel.EMAIL) != null && updatedUser.getFirstAttribute(UserModel.EMAIL).isEmpty()) {\n+            updatedUser.removeAttribute(UserModel.EMAIL);\n+            updatedUser.setAttribute(UserModel.EMAIL, Collections.singletonList(null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b53b2657af25600d24a4f7cbbe9e9ccf34f30f"}, "originalPosition": 59}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c9b53b2657af25600d24a4f7cbbe9e9ccf34f30f", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/c9b53b2657af25600d24a4f7cbbe9e9ccf34f30f", "committedDate": "2020-09-28T14:13:52Z", "message": "KEYCLOAK-14665 initial spi interfaces with validator chain and UserAttributesRepresentation\n\nchange of userprofilespi to seperate factory and provider\n\nremove UserAttributeRepresenstation\n\nremove old interface for update\n\nintroduce abstract user profile\n\nMove StoredUserProfile to private spi package"}, "afterCommit": {"oid": "93bb60be11e26c806b199d66798e5ea9225e16f7", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/93bb60be11e26c806b199d66798e5ea9225e16f7", "committedDate": "2020-10-01T10:23:27Z", "message": "UserSPI M1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5246b17d42853df0e5988a9582b75da13e76826d", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/5246b17d42853df0e5988a9582b75da13e76826d", "committedDate": "2020-10-01T10:34:35Z", "message": "UserProfile M1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d086df6561860dcb9b4328a20db33872deaec9c", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/1d086df6561860dcb9b4328a20db33872deaec9c", "committedDate": "2020-10-01T21:05:23Z", "message": "remove StoredUserProfile interface"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "93bb60be11e26c806b199d66798e5ea9225e16f7", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/93bb60be11e26c806b199d66798e5ea9225e16f7", "committedDate": "2020-10-01T10:23:27Z", "message": "UserSPI M1"}, "afterCommit": {"oid": "ebe91570554b07e0554e01284d60ab6893cba7ab", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/ebe91570554b07e0554e01284d60ab6893cba7ab", "committedDate": "2020-10-01T21:50:25Z", "message": "have a factory like approach for profile contexts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc0f54713986764f66b3d3e3ed49ef043c75fd18", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/cc0f54713986764f66b3d3e3ed49ef043c75fd18", "committedDate": "2020-10-01T21:54:52Z", "message": "have a factory like approach for profile contexts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ebe91570554b07e0554e01284d60ab6893cba7ab", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/ebe91570554b07e0554e01284d60ab6893cba7ab", "committedDate": "2020-10-01T21:50:25Z", "message": "have a factory like approach for profile contexts"}, "afterCommit": {"oid": "cc0f54713986764f66b3d3e3ed49ef043c75fd18", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/cc0f54713986764f66b3d3e3ed49ef043c75fd18", "committedDate": "2020-10-01T21:54:52Z", "message": "have a factory like approach for profile contexts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b0bbae1c3e3ab86b5595eaa570d2cc1777b0b90", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/4b0bbae1c3e3ab86b5595eaa570d2cc1777b0b90", "committedDate": "2020-10-02T13:18:41Z", "message": "refactore userupdate helper api"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "036539997d761a1c83bb350938235d75bd5117a7", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/036539997d761a1c83bb350938235d75bd5117a7", "committedDate": "2020-10-02T13:01:01Z", "message": "refactore userupdate helper api"}, "afterCommit": {"oid": "4b0bbae1c3e3ab86b5595eaa570d2cc1777b0b90", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/4b0bbae1c3e3ab86b5595eaa570d2cc1777b0b90", "committedDate": "2020-10-02T13:18:41Z", "message": "refactore userupdate helper api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "069d68940e0214200c83147be579e62eccf2e440", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/069d68940e0214200c83147be579e62eccf2e440", "committedDate": "2020-10-02T13:43:06Z", "message": "remove unused isCreated Flag in user profile context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee41774c611f2775f6265edeb6aabba375c6e9cc", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/ee41774c611f2775f6265edeb6aabba375c6e9cc", "committedDate": "2020-10-02T22:24:08Z", "message": "refactoring add UserProfileAttributes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c85a0d5615981b37c12b3775efda99ca6576526", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/6c85a0d5615981b37c12b3775efda99ca6576526", "committedDate": "2020-10-03T06:51:48Z", "message": "minor restructering of the userprofile impl -> add AbstractUserProfile introduced to make getId override explicit"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0b3446bd149e6b47b3a8725918cefdbf22f15dfb", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/0b3446bd149e6b47b3a8725918cefdbf22f15dfb", "committedDate": "2020-10-02T22:35:09Z", "message": "minor restructering of the userprofile impl -> add AbstractUserProfile introduced to make getId override explicit"}, "afterCommit": {"oid": "6c85a0d5615981b37c12b3775efda99ca6576526", "author": {"user": {"login": "bs-matil", "name": "Markus Till"}}, "url": "https://github.com/keycloak/keycloak/commit/6c85a0d5615981b37c12b3775efda99ca6576526", "committedDate": "2020-10-03T06:51:48Z", "message": "minor restructering of the userprofile impl -> add AbstractUserProfile introduced to make getId override explicit"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMDI5MDY3", "url": "https://github.com/keycloak/keycloak/pull/7155#pullrequestreview-502029067", "createdAt": "2020-10-05T12:59:32Z", "commit": {"oid": "6c85a0d5615981b37c12b3775efda99ca6576526"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMTExMDc5", "url": "https://github.com/keycloak/keycloak/pull/7155#pullrequestreview-502111079", "createdAt": "2020-10-05T14:25:27Z", "commit": {"oid": "6c85a0d5615981b37c12b3775efda99ca6576526"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDoyNToyOFrOHcfhMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDoyNToyOFrOHcfhMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYzODU3Nw==", "bodyText": "@bs-matil I forgot to mention this change in my last review. Why did you add this endpoint for?", "url": "https://github.com/keycloak/keycloak/pull/7155#discussion_r499638577", "createdAt": "2020-10-05T14:25:28Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/services/resources/account/AccountRestService.java", "diffHunk": "@@ -275,6 +222,39 @@ public ResourcesService resources() {\n \n     // TODO Federated identities\n \n+    /**\n+     * Returns the applications with the given id in the specified realm.\n+     *\n+     * @param clientId client id to search for\n+     * @return application with the provided id\n+     */\n+    @Path(\"/applications/{clientId}\")\n+    @GET\n+    @Produces(MediaType.APPLICATION_JSON)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c85a0d5615981b37c12b3775efda99ca6576526"}, "originalPosition": 152}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2957, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}