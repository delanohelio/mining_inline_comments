{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4Njk2NDMx", "number": 7263, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTo0ODo1NlrOEOpg6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMDoxNToxOVrOER8_sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzk1Njg5OnYy", "diffSide": "RIGHT", "path": "model/jpa/src/main/java/org/keycloak/models/jpa/JpaRealmProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTo0ODo1NlrOGx6fpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTo0ODo1NlrOGx6fpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5MTc4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected Stream<RoleModel> getRoles(TypedQuery<RoleEntity> query, RealmModel realm, Integer first, Integer max) {\n          \n          \n            \n                protected Stream<RoleModel> getRolesStream(TypedQuery<RoleEntity> query, RealmModel realm, Integer first, Integer max) {", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r454991780", "createdAt": "2020-07-15T11:48:56Z", "author": {"login": "hmlnarik"}, "path": "model/jpa/src/main/java/org/keycloak/models/jpa/JpaRealmProvider.java", "diffHunk": "@@ -284,76 +281,67 @@ public RoleModel getClientRole(RealmModel realm, ClientModel client, String name\n \n \n     @Override\n-    public Set<RoleModel> getClientRoles(RealmModel realm, ClientModel client) {\n-        Set<RoleModel> list = new HashSet<>();\n+    public Stream<RoleModel> getClientRolesStream(RealmModel realm, ClientModel client) {\n         TypedQuery<String> query = em.createNamedQuery(\"getClientRoleIds\", String.class);\n         query.setParameter(\"client\", client.getId());\n-        List<String> roles = query.getResultList();\n-        for (String id : roles) {\n-            list.add(session.realms().getRoleById(id, realm));\n-        }\n-        return list;\n+        Stream<String> roles = query.getResultStream();\n+\n+        return roles.map(realm::getRoleById);\n     }\n     \n     @Override\n-    public Set<RoleModel> getRealmRoles(RealmModel realm, Integer first, Integer max) {\n+    public Stream<RoleModel> getRealmRolesStream(RealmModel realm, Integer first, Integer max) {\n         TypedQuery<RoleEntity> query = em.createNamedQuery(\"getRealmRoles\", RoleEntity.class);\n         query.setParameter(\"realm\", realm.getId());\n         \n         return getRoles(query, realm, first, max);\n     }\n \n     @Override\n-    public Set<RoleModel> getClientRoles(RealmModel realm, ClientModel client, Integer first, Integer max) {\n+    public Stream<RoleModel> getClientRolesStream(RealmModel realm, ClientModel client, Integer first, Integer max) {\n         TypedQuery<RoleEntity> query = em.createNamedQuery(\"getClientRoles\", RoleEntity.class);\n         query.setParameter(\"client\", client.getId());\n         \n         return getRoles(query, realm, first, max);\n     }\n     \n-    protected Set<RoleModel> getRoles(TypedQuery<RoleEntity> query, RealmModel realm, Integer first, Integer max) {\n+    protected Stream<RoleModel> getRoles(TypedQuery<RoleEntity> query, RealmModel realm, Integer first, Integer max) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ded3ef8a5a5953a710780e11ffa985c02771de1f"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzk2MzA0OnYy", "diffSide": "RIGHT", "path": "server-spi/src/main/java/org/keycloak/models/ClientProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTo1MDozNVrOGx6jLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTo1NDo1N1rOGx6sCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5MjY4NA==", "bodyText": "StackOverflowException", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r454992684", "createdAt": "2020-07-15T11:50:35Z", "author": {"login": "hmlnarik"}, "path": "server-spi/src/main/java/org/keycloak/models/ClientProvider.java", "diffHunk": "@@ -41,9 +57,23 @@\n \n     RoleModel getClientRole(RealmModel realm, ClientModel client, String name);\n \n-    Set<RoleModel> getClientRoles(RealmModel realm, ClientModel client);\n+    @Deprecated\n+    default Set<RoleModel> getClientRoles(RealmModel realm, ClientModel client) {\n+        return getClientRolesStream(realm, client).collect(Collectors.toSet());\n+    }\n+\n+    default Stream<RoleModel> getClientRolesStream(RealmModel realm, ClientModel client) {\n+        return getClientRolesStream(realm, client);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ded3ef8a5a5953a710780e11ffa985c02771de1f"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NDk1Mw==", "bodyText": "It should be fixed already. Are you looking at latest change?", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r454994953", "createdAt": "2020-07-15T11:54:57Z", "author": {"login": "martin-kanis"}, "path": "server-spi/src/main/java/org/keycloak/models/ClientProvider.java", "diffHunk": "@@ -41,9 +57,23 @@\n \n     RoleModel getClientRole(RealmModel realm, ClientModel client, String name);\n \n-    Set<RoleModel> getClientRoles(RealmModel realm, ClientModel client);\n+    @Deprecated\n+    default Set<RoleModel> getClientRoles(RealmModel realm, ClientModel client) {\n+        return getClientRolesStream(realm, client).collect(Collectors.toSet());\n+    }\n+\n+    default Stream<RoleModel> getClientRolesStream(RealmModel realm, ClientModel client) {\n+        return getClientRolesStream(realm, client);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5MjY4NA=="}, "originalCommit": {"oid": "ded3ef8a5a5953a710780e11ffa985c02771de1f"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzk2NTA4OnYy", "diffSide": "RIGHT", "path": "server-spi/src/main/java/org/keycloak/models/ClientProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTo1MDo0OFrOGx6kGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTo1NTowN1rOGx6sdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5MjkyMQ==", "bodyText": "StackOverflowException", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r454992921", "createdAt": "2020-07-15T11:50:48Z", "author": {"login": "hmlnarik"}, "path": "server-spi/src/main/java/org/keycloak/models/ClientProvider.java", "diffHunk": "@@ -41,9 +57,23 @@\n \n     RoleModel getClientRole(RealmModel realm, ClientModel client, String name);\n \n-    Set<RoleModel> getClientRoles(RealmModel realm, ClientModel client);\n+    @Deprecated\n+    default Set<RoleModel> getClientRoles(RealmModel realm, ClientModel client) {\n+        return getClientRolesStream(realm, client).collect(Collectors.toSet());\n+    }\n+\n+    default Stream<RoleModel> getClientRolesStream(RealmModel realm, ClientModel client) {\n+        return getClientRolesStream(realm, client);\n+    }\n+\n+    @Deprecated\n+    default List<ClientModel> getAlwaysDisplayInConsoleClients(RealmModel realm) {\n+        return getAlwaysDisplayInConsoleClientsStream(realm).collect(Collectors.toList());\n+    }\n \n-    List<ClientModel> getAlwaysDisplayInConsoleClients(RealmModel realm);\n+    default Stream<ClientModel> getAlwaysDisplayInConsoleClientsStream(RealmModel realm) {\n+        return getAlwaysDisplayInConsoleClientsStream(realm);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ded3ef8a5a5953a710780e11ffa985c02771de1f"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NTA2MQ==", "bodyText": "same as above", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r454995061", "createdAt": "2020-07-15T11:55:07Z", "author": {"login": "martin-kanis"}, "path": "server-spi/src/main/java/org/keycloak/models/ClientProvider.java", "diffHunk": "@@ -41,9 +57,23 @@\n \n     RoleModel getClientRole(RealmModel realm, ClientModel client, String name);\n \n-    Set<RoleModel> getClientRoles(RealmModel realm, ClientModel client);\n+    @Deprecated\n+    default Set<RoleModel> getClientRoles(RealmModel realm, ClientModel client) {\n+        return getClientRolesStream(realm, client).collect(Collectors.toSet());\n+    }\n+\n+    default Stream<RoleModel> getClientRolesStream(RealmModel realm, ClientModel client) {\n+        return getClientRolesStream(realm, client);\n+    }\n+\n+    @Deprecated\n+    default List<ClientModel> getAlwaysDisplayInConsoleClients(RealmModel realm) {\n+        return getAlwaysDisplayInConsoleClientsStream(realm).collect(Collectors.toList());\n+    }\n \n-    List<ClientModel> getAlwaysDisplayInConsoleClients(RealmModel realm);\n+    default Stream<ClientModel> getAlwaysDisplayInConsoleClientsStream(RealmModel realm) {\n+        return getAlwaysDisplayInConsoleClientsStream(realm);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5MjkyMQ=="}, "originalCommit": {"oid": "ded3ef8a5a5953a710780e11ffa985c02771de1f"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODAwMDY2OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/storage/ClientStorageManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjowMTozN1rOGx65cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjowMTozN1rOGx65cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5ODM4Ng==", "bodyText": "Could be perhaps like this:\nStream<ClientModel> local = session.clientLocalStorage().searchClientsByClientIdStream(clientId,  firstResult, maxResults, realm);\nStream<ClientModel> ext = getEnabledStorageProviders(session, realm, ClientLookupProvider.class).stream()\n    .map(p -> p.searchClientsByClientIdStream(clientId,  firstResult, maxResults, realm))\n    .flatMap(Function.identity());\nreturn Stream.concat(local, ext);", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r454998386", "createdAt": "2020-07-15T12:01:37Z", "author": {"login": "hmlnarik"}, "path": "services/src/main/java/org/keycloak/storage/ClientStorageManager.java", "diffHunk": "@@ -151,14 +153,18 @@ public ClientModel getClientByClientId(String clientId, RealmModel realm) {\n     }\n \n     @Override\n-    public List<ClientModel> searchClientsByClientId(String clientId, Integer firstResult, Integer maxResults, RealmModel realm) {\n-        List<ClientModel> clients = session.clientLocalStorage().searchClientsByClientId(clientId,  firstResult, maxResults, realm);\n-        if (clients != null) {\n-            return clients;\n+    public Stream<ClientModel> searchClientsByClientIdStream(String clientId, Integer firstResult, Integer maxResults, RealmModel realm) {\n+        Stream<ClientModel> clients = session.clientLocalStorage().searchClientsByClientIdStream(clientId,  firstResult, maxResults, realm);\n+        Iterator<ClientModel> iterator = clients.iterator();\n+        if (iterator.hasNext()) {\n+            return StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator, 0), false);\n         }\n         for (ClientLookupProvider provider : getEnabledStorageProviders(session, realm, ClientLookupProvider.class)) {\n-            clients = provider.searchClientsByClientId(clientId, firstResult, maxResults, realm);\n-            if (clients != null) return clients;\n+            clients = provider.searchClientsByClientIdStream(clientId, firstResult, maxResults, realm);\n+            iterator = clients.iterator();\n+            if (iterator.hasNext()) {\n+                return StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator, 0), false);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ded3ef8a5a5953a710780e11ffa985c02771de1f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODI2ODg3OnYy", "diffSide": "RIGHT", "path": "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzoxMzowNVrOGx9cRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzoxMzowNVrOGx9cRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0MDA3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Set<RoleModel> model = getRealmDelegate().getRealmRolesStream(realm).collect(Collectors.toSet());\n          \n          \n            \n                        if (model == null) return null;\n          \n          \n            \n                        Set<String> ids = new HashSet<>();\n          \n          \n            \n                        for (RoleModel role : model) ids.add(role.getId());\n          \n          \n            \n                        query = new RoleListQuery(loaded, cacheKey, realm, ids);\n          \n          \n            \n                        logger.tracev(\"adding realm roles cache miss: realm {0} key {1}\", realm.getName(), cacheKey);\n          \n          \n            \n                        cache.addRevisioned(query, startupRevision);\n          \n          \n            \n                        return model;\n          \n          \n            \n                        return model.stream();\n          \n          \n            \n                        Set<RoleModel> model = getRealmDelegate().getRealmRoles(realm);\n          \n          \n            \n                        if (model == null) return null;\n          \n          \n            \n                        Set<String> ids = model.stream().map(RoleModel::getId).collect(Collectors.toSet());\n          \n          \n            \n                        query = new RoleListQuery(loaded, cacheKey, realm, ids);\n          \n          \n            \n                        logger.tracev(\"adding realm roles cache miss: realm {0} key {1}\", realm.getName(), cacheKey);\n          \n          \n            \n                        cache.addRevisioned(query, startupRevision);\n          \n          \n            \n                        return model.stream();", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r455040070", "createdAt": "2020-07-15T13:13:05Z", "author": {"login": "hmlnarik"}, "path": "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java", "diffHunk": "@@ -612,33 +614,33 @@ public RoleModel addRealmRole(RealmModel realm, String id, String name) {\n \n         if (query == null) {\n             Long loaded = cache.getCurrentRevision(cacheKey);\n-            Set<RoleModel> model = getRealmDelegate().getRealmRoles(realm);\n+            Set<RoleModel> model = getRealmDelegate().getRealmRolesStream(realm).collect(Collectors.toSet());\n             if (model == null) return null;\n             Set<String> ids = new HashSet<>();\n             for (RoleModel role : model) ids.add(role.getId());\n             query = new RoleListQuery(loaded, cacheKey, realm, ids);\n             logger.tracev(\"adding realm roles cache miss: realm {0} key {1}\", realm.getName(), cacheKey);\n             cache.addRevisioned(query, startupRevision);\n-            return model;\n+            return model.stream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ded3ef8a5a5953a710780e11ffa985c02771de1f"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Njc2MDU3OnYy", "diffSide": "RIGHT", "path": "server-spi/src/main/java/org/keycloak/models/RealmProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMDo0MTo1MFrOG2FLPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMToyMjoyNVrOG2GSbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2MTA4NA==", "bodyText": "Should also be methods for accessing roles within scope of this work?", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459361084", "createdAt": "2020-07-23T10:41:50Z", "author": {"login": "vramik"}, "path": "server-spi/src/main/java/org/keycloak/models/RealmProvider.java", "diffHunk": "@@ -81,16 +83,42 @@ default GroupModel createGroup(RealmModel realm, String name, GroupModel toParen\n \n     RoleModel getRealmRole(RealmModel realm, String name);\n \n-    Set<RoleModel> getRealmRoles(RealmModel realm);\n-    \n-    Set<RoleModel> getRealmRoles(RealmModel realm, Integer first, Integer max);\n-    \n-    Set<RoleModel> getClientRoles(RealmModel realm, ClientModel client, Integer first, Integer max);\n-    \n-    Set<RoleModel> searchForClientRoles(RealmModel realm, ClientModel client, String search, Integer first,\n-            Integer max);\n-    \n-    Set<RoleModel> searchForRoles(RealmModel realm, String search, Integer first, Integer max);\n+    @Deprecated\n+    default Set<RoleModel> getRealmRoles(RealmModel realm) {\n+        return getRealmRolesStream(realm).collect(Collectors.toSet());\n+    }\n+\n+    Stream<RoleModel> getRealmRolesStream(RealmModel realm);\n+\n+    @Deprecated\n+    default Set<RoleModel> getRealmRoles(RealmModel realm, Integer first, Integer max) {\n+        return getRealmRolesStream(realm, first, max).collect(Collectors.toSet());\n+    }\n+\n+    Stream<RoleModel> getRealmRolesStream(RealmModel realm, Integer first, Integer max);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM3OTMxMQ==", "bodyText": "It was simpler to include also getRealmRolesStream because there is a common method getRolesStream in JpaRealmProvider which operates with both getClientRoles and getRealmRoles.  So when I changed return type of getRolesStream to Stream<> it wasn't possible to call this method from getClientRoles and getRealmRoles if they both don't operate with streams.", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459379311", "createdAt": "2020-07-23T11:22:25Z", "author": {"login": "martin-kanis"}, "path": "server-spi/src/main/java/org/keycloak/models/RealmProvider.java", "diffHunk": "@@ -81,16 +83,42 @@ default GroupModel createGroup(RealmModel realm, String name, GroupModel toParen\n \n     RoleModel getRealmRole(RealmModel realm, String name);\n \n-    Set<RoleModel> getRealmRoles(RealmModel realm);\n-    \n-    Set<RoleModel> getRealmRoles(RealmModel realm, Integer first, Integer max);\n-    \n-    Set<RoleModel> getClientRoles(RealmModel realm, ClientModel client, Integer first, Integer max);\n-    \n-    Set<RoleModel> searchForClientRoles(RealmModel realm, ClientModel client, String search, Integer first,\n-            Integer max);\n-    \n-    Set<RoleModel> searchForRoles(RealmModel realm, String search, Integer first, Integer max);\n+    @Deprecated\n+    default Set<RoleModel> getRealmRoles(RealmModel realm) {\n+        return getRealmRolesStream(realm).collect(Collectors.toSet());\n+    }\n+\n+    Stream<RoleModel> getRealmRolesStream(RealmModel realm);\n+\n+    @Deprecated\n+    default Set<RoleModel> getRealmRoles(RealmModel realm, Integer first, Integer max) {\n+        return getRealmRolesStream(realm, first, max).collect(Collectors.toSet());\n+    }\n+\n+    Stream<RoleModel> getRealmRolesStream(RealmModel realm, Integer first, Integer max);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2MTA4NA=="}, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzAxOTQ0OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/storage/ClientStorageManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMjowOTo0OFrOG2HoBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMToxNjowNVrOG2rsMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQwMTIyMA==", "bodyText": "These calls should be time-bound.", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459401220", "createdAt": "2020-07-23T12:09:48Z", "author": {"login": "hmlnarik"}, "path": "services/src/main/java/org/keycloak/storage/ClientStorageManager.java", "diffHunk": "@@ -148,16 +149,11 @@ public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n     }\n \n     @Override\n-    public List<ClientModel> searchClientsByClientId(RealmModel realm, String clientId, Integer firstResult, Integer maxResults) {\n-        List<ClientModel> clients = session.clientLocalStorage().searchClientsByClientId(realm, clientId,  firstResult, maxResults);\n-        if (clients != null) {\n-            return clients;\n-        }\n-        for (ClientLookupProvider provider : getEnabledStorageProviders(session, realm, ClientLookupProvider.class)) {\n-            clients = provider.searchClientsByClientId(realm, clientId, firstResult, maxResults);\n-            if (clients != null) return clients;\n-        }\n-        return null;\n+    public Stream<ClientModel> searchClientsByClientIdStream(RealmModel realm, String clientId, Integer firstResult, Integer maxResults) {\n+        Stream<ClientModel> local = session.clientLocalStorage().searchClientsByClientIdStream(realm, clientId,  firstResult, maxResults);\n+        Stream<ClientModel> ext = getEnabledStorageProviders(session, realm, ClientLookupProvider.class).stream()\n+                .flatMap(p -> p.searchClientsByClientIdStream(realm, clientId,  firstResult, maxResults));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MjExNA==", "bodyText": "Updated", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459992114", "createdAt": "2020-07-24T11:16:05Z", "author": {"login": "martin-kanis"}, "path": "services/src/main/java/org/keycloak/storage/ClientStorageManager.java", "diffHunk": "@@ -148,16 +149,11 @@ public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n     }\n \n     @Override\n-    public List<ClientModel> searchClientsByClientId(RealmModel realm, String clientId, Integer firstResult, Integer maxResults) {\n-        List<ClientModel> clients = session.clientLocalStorage().searchClientsByClientId(realm, clientId,  firstResult, maxResults);\n-        if (clients != null) {\n-            return clients;\n-        }\n-        for (ClientLookupProvider provider : getEnabledStorageProviders(session, realm, ClientLookupProvider.class)) {\n-            clients = provider.searchClientsByClientId(realm, clientId, firstResult, maxResults);\n-            if (clients != null) return clients;\n-        }\n-        return null;\n+    public Stream<ClientModel> searchClientsByClientIdStream(RealmModel realm, String clientId, Integer firstResult, Integer maxResults) {\n+        Stream<ClientModel> local = session.clientLocalStorage().searchClientsByClientIdStream(realm, clientId,  firstResult, maxResults);\n+        Stream<ClientModel> ext = getEnabledStorageProviders(session, realm, ClientLookupProvider.class).stream()\n+                .flatMap(p -> p.searchClientsByClientIdStream(realm, clientId,  firstResult, maxResults));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQwMTIyMA=="}, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTE3ODg0OnYy", "diffSide": "RIGHT", "path": "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTo0MzoyNVrOG2cm0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMToyMzowOVrOG2r3Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0NDk3Nw==", "bodyText": "getRealmRoles(realm) is now deprecated so I guess we shouldn't use it, right?", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459744977", "createdAt": "2020-07-23T21:43:25Z", "author": {"login": "vramik"}, "path": "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java", "diffHunk": "@@ -620,31 +622,30 @@ public RoleModel addRealmRole(RealmModel realm, String id, String name) {\n             Long loaded = cache.getCurrentRevision(cacheKey);\n             Set<RoleModel> model = getRealmDelegate().getRealmRoles(realm);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4NTcwOA==", "bodyText": "We discussed this with @hmlnarik and @sguilhen and we agreed on this solution. Problem here is the cashing of role ids. If you obtain a stream here, it will be spend by transformation to Stream (for cashing) and therefore the stream couldn't be returned later.", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459885708", "createdAt": "2020-07-24T07:09:12Z", "author": {"login": "martin-kanis"}, "path": "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java", "diffHunk": "@@ -620,31 +622,30 @@ public RoleModel addRealmRole(RealmModel realm, String id, String name) {\n             Long loaded = cache.getCurrentRevision(cacheKey);\n             Set<RoleModel> model = getRealmDelegate().getRealmRoles(realm);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0NDk3Nw=="}, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkxODEzMg==", "bodyText": "This is an excellent question.\nGenerally, this is the case. In this case, it is however justified, as the cache provider is the final recipient of all the roles that it needs to cache, and it needs to process all of them, so it would collect them anyway.\nLater, we can think of optimizations like lazy-loading of the role details, and only returning stubs with IDs that would load the details only after when they are accessed. This would help across multiple places in caching.", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459918132", "createdAt": "2020-07-24T08:26:02Z", "author": {"login": "hmlnarik"}, "path": "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java", "diffHunk": "@@ -620,31 +622,30 @@ public RoleModel addRealmRole(RealmModel realm, String id, String name) {\n             Long loaded = cache.getCurrentRevision(cacheKey);\n             Set<RoleModel> model = getRealmDelegate().getRealmRoles(realm);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0NDk3Nw=="}, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk1NzM0Ng==", "bodyText": "So maybe we shouldn't deprecate the method(s) after all. As far as I understand there are cases when using non-stream method is actually more efficient, right?", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459957346", "createdAt": "2020-07-24T09:50:17Z", "author": {"login": "vramik"}, "path": "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java", "diffHunk": "@@ -620,31 +622,30 @@ public RoleModel addRealmRole(RealmModel realm, String id, String name) {\n             Long loaded = cache.getCurrentRevision(cacheKey);\n             Set<RoleModel> model = getRealmDelegate().getRealmRoles(realm);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0NDk3Nw=="}, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NTQ3Mg==", "bodyText": "So after discussion with @hmlnarik we agreed we should add comment something like // this method is used intentionally here because ... to places where the deprecated methods are used.", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459985472", "createdAt": "2020-07-24T10:59:00Z", "author": {"login": "vramik"}, "path": "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java", "diffHunk": "@@ -620,31 +622,30 @@ public RoleModel addRealmRole(RealmModel realm, String id, String name) {\n             Long loaded = cache.getCurrentRevision(cacheKey);\n             Set<RoleModel> model = getRealmDelegate().getRealmRoles(realm);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0NDk3Nw=="}, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5NDkxMA==", "bodyText": "comments added", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459994910", "createdAt": "2020-07-24T11:23:09Z", "author": {"login": "martin-kanis"}, "path": "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java", "diffHunk": "@@ -620,31 +622,30 @@ public RoleModel addRealmRole(RealmModel realm, String id, String name) {\n             Long loaded = cache.getCurrentRevision(cacheKey);\n             Set<RoleModel> model = getRealmDelegate().getRealmRoles(realm);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0NDk3Nw=="}, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTE4OTQwOnYy", "diffSide": "RIGHT", "path": "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTo0Njo1MVrOG2ctDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNzowOTozOFrOG2lNIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0NjU3NA==", "bodyText": "the same here, getClientRoles(realm, client, null, null) is now deprecated.", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459746574", "createdAt": "2020-07-23T21:46:51Z", "author": {"login": "vramik"}, "path": "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java", "diffHunk": "@@ -654,46 +655,45 @@ public RoleModel addRealmRole(RealmModel realm, String id, String name) {\n \n         if (query == null) {\n             Long loaded = cache.getCurrentRevision(cacheKey);\n-            Set<RoleModel> model = getRealmDelegate().getClientRoles(realm, client);\n+            Set<RoleModel> model = getRealmDelegate().getClientRoles(realm, client, null, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4NTg1Nw==", "bodyText": "Same as above", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459885857", "createdAt": "2020-07-24T07:09:38Z", "author": {"login": "martin-kanis"}, "path": "model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java", "diffHunk": "@@ -654,46 +655,45 @@ public RoleModel addRealmRole(RealmModel realm, String id, String name) {\n \n         if (query == null) {\n             Long loaded = cache.getCurrentRevision(cacheKey);\n-            Set<RoleModel> model = getRealmDelegate().getClientRoles(realm, client);\n+            Set<RoleModel> model = getRealmDelegate().getClientRoles(realm, client, null, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0NjU3NA=="}, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTIwNTg0OnYy", "diffSide": "RIGHT", "path": "server-spi/src/main/java/org/keycloak/models/RealmProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTo1MzowMlrOG2c2-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMToxNToyOVrOG2rrTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0OTExMg==", "bodyText": "Why is new method getClientsStream added here in RealmProvider? I think we should leave original methods here as deprecated and add the new 'Stream' ones into ClientProvider.", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459749112", "createdAt": "2020-07-23T21:53:02Z", "author": {"login": "vramik"}, "path": "server-spi/src/main/java/org/keycloak/models/RealmProvider.java", "diffHunk": "@@ -147,14 +177,14 @@ default ClientModel addClient(RealmModel realm, String clientId) {\n     /**\n      * @deprecated Use the corresponding method from {@link ClientProvider}. */\n     @Override\n-    default List<ClientModel> getClients(RealmModel realm) {\n-        return this.getClients(realm, null, null);\n+    default Stream<ClientModel> getClientsStream(RealmModel realm) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MTg4NA==", "bodyText": "reverted", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459991884", "createdAt": "2020-07-24T11:15:29Z", "author": {"login": "martin-kanis"}, "path": "server-spi/src/main/java/org/keycloak/models/RealmProvider.java", "diffHunk": "@@ -147,14 +177,14 @@ default ClientModel addClient(RealmModel realm, String clientId) {\n     /**\n      * @deprecated Use the corresponding method from {@link ClientProvider}. */\n     @Override\n-    default List<ClientModel> getClients(RealmModel realm) {\n-        return this.getClients(realm, null, null);\n+    default Stream<ClientModel> getClientsStream(RealmModel realm) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0OTExMg=="}, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTIwODAwOnYy", "diffSide": "RIGHT", "path": "server-spi/src/main/java/org/keycloak/models/RealmProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTo1Mzo0NVrOG2c4Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMToxNToxMVrOG2rqxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0OTQzNQ==", "bodyText": "dtto", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459749435", "createdAt": "2020-07-23T21:53:45Z", "author": {"login": "vramik"}, "path": "server-spi/src/main/java/org/keycloak/models/RealmProvider.java", "diffHunk": "@@ -147,14 +177,14 @@ default ClientModel addClient(RealmModel realm, String clientId) {\n     /**\n      * @deprecated Use the corresponding method from {@link ClientProvider}. */\n     @Override\n-    default List<ClientModel> getClients(RealmModel realm) {\n-        return this.getClients(realm, null, null);\n+    default Stream<ClientModel> getClientsStream(RealmModel realm) {\n+        return this.getClientsStream(realm, null, null);\n     }\n \n     /**\n      * @deprecated Use the corresponding method from {@link ClientProvider}. */\n     @Override\n-    public List<ClientModel> getClients(RealmModel realm, Integer firstResult, Integer maxResults);\n+    public Stream<ClientModel> getClientsStream(RealmModel realm, Integer firstResult, Integer maxResults);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NTYwMA==", "bodyText": "In case I revert this I have to implement the method in JpaRealmProvider and RealmCacheSession or the method has to be removed from RealmProvider.", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459985600", "createdAt": "2020-07-24T10:59:15Z", "author": {"login": "martin-kanis"}, "path": "server-spi/src/main/java/org/keycloak/models/RealmProvider.java", "diffHunk": "@@ -147,14 +177,14 @@ default ClientModel addClient(RealmModel realm, String clientId) {\n     /**\n      * @deprecated Use the corresponding method from {@link ClientProvider}. */\n     @Override\n-    default List<ClientModel> getClients(RealmModel realm) {\n-        return this.getClients(realm, null, null);\n+    default Stream<ClientModel> getClientsStream(RealmModel realm) {\n+        return this.getClientsStream(realm, null, null);\n     }\n \n     /**\n      * @deprecated Use the corresponding method from {@link ClientProvider}. */\n     @Override\n-    public List<ClientModel> getClients(RealmModel realm, Integer firstResult, Integer maxResults);\n+    public Stream<ClientModel> getClientsStream(RealmModel realm, Integer firstResult, Integer maxResults);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0OTQzNQ=="}, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MTc1MA==", "bodyText": "I proceeded with removing the method from RealmProvider.", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459991750", "createdAt": "2020-07-24T11:15:11Z", "author": {"login": "martin-kanis"}, "path": "server-spi/src/main/java/org/keycloak/models/RealmProvider.java", "diffHunk": "@@ -147,14 +177,14 @@ default ClientModel addClient(RealmModel realm, String clientId) {\n     /**\n      * @deprecated Use the corresponding method from {@link ClientProvider}. */\n     @Override\n-    default List<ClientModel> getClients(RealmModel realm) {\n-        return this.getClients(realm, null, null);\n+    default Stream<ClientModel> getClientsStream(RealmModel realm) {\n+        return this.getClientsStream(realm, null, null);\n     }\n \n     /**\n      * @deprecated Use the corresponding method from {@link ClientProvider}. */\n     @Override\n-    public List<ClientModel> getClients(RealmModel realm, Integer firstResult, Integer maxResults);\n+    public Stream<ClientModel> getClientsStream(RealmModel realm, Integer firstResult, Integer maxResults);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0OTQzNQ=="}, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTIwODM4OnYy", "diffSide": "RIGHT", "path": "server-spi/src/main/java/org/keycloak/models/RealmProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTo1Mzo1NlrOG2c4hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMToxNDo1M1rOG2rqTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0OTUwOQ==", "bodyText": "dtto", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459749509", "createdAt": "2020-07-23T21:53:56Z", "author": {"login": "vramik"}, "path": "server-spi/src/main/java/org/keycloak/models/RealmProvider.java", "diffHunk": "@@ -176,7 +206,7 @@ default ClientModel addClient(RealmModel realm, String clientId) {\n     /**\n      * @deprecated Use the corresponding method from {@link ClientProvider}. */\n     @Override\n-    public List<ClientModel> searchClientsByClientId(RealmModel realm, String clientId, Integer firstResult, Integer maxResults);\n+    public Stream<ClientModel> searchClientsByClientIdStream(RealmModel realm, String clientId, Integer firstResult, Integer maxResults);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MTYyOA==", "bodyText": "removed", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459991628", "createdAt": "2020-07-24T11:14:53Z", "author": {"login": "martin-kanis"}, "path": "server-spi/src/main/java/org/keycloak/models/RealmProvider.java", "diffHunk": "@@ -176,7 +206,7 @@ default ClientModel addClient(RealmModel realm, String clientId) {\n     /**\n      * @deprecated Use the corresponding method from {@link ClientProvider}. */\n     @Override\n-    public List<ClientModel> searchClientsByClientId(RealmModel realm, String clientId, Integer firstResult, Integer maxResults);\n+    public Stream<ClientModel> searchClientsByClientIdStream(RealmModel realm, String clientId, Integer firstResult, Integer maxResults);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0OTUwOQ=="}, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTIwODk2OnYy", "diffSide": "RIGHT", "path": "server-spi/src/main/java/org/keycloak/models/RealmProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTo1NDowNlrOG2c41w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMToxMzoxNlrOG2roAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0OTU5MQ==", "bodyText": "dtto", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459749591", "createdAt": "2020-07-23T21:54:06Z", "author": {"login": "vramik"}, "path": "server-spi/src/main/java/org/keycloak/models/RealmProvider.java", "diffHunk": "@@ -200,6 +230,6 @@ default ClientModel addClient(RealmModel realm, String clientId) {\n     /**\n      * @deprecated Use the corresponding method from {@link ClientProvider}. */\n     @Override\n-    public List<ClientModel> getAlwaysDisplayInConsoleClients(RealmModel realm);\n+    public Stream<ClientModel> getAlwaysDisplayInConsoleClientsStream(RealmModel realm);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NjQ2MQ==", "bodyText": "In case I revert this I have to implement the method in JpaRealmProvider and RealmCacheSession or the method has to be removed from RealmProvider.", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459986461", "createdAt": "2020-07-24T11:01:19Z", "author": {"login": "martin-kanis"}, "path": "server-spi/src/main/java/org/keycloak/models/RealmProvider.java", "diffHunk": "@@ -200,6 +230,6 @@ default ClientModel addClient(RealmModel realm, String clientId) {\n     /**\n      * @deprecated Use the corresponding method from {@link ClientProvider}. */\n     @Override\n-    public List<ClientModel> getAlwaysDisplayInConsoleClients(RealmModel realm);\n+    public Stream<ClientModel> getAlwaysDisplayInConsoleClientsStream(RealmModel realm);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0OTU5MQ=="}, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MTA0MQ==", "bodyText": "I proceeded with removing the method from RealmProvider.", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459991041", "createdAt": "2020-07-24T11:13:16Z", "author": {"login": "martin-kanis"}, "path": "server-spi/src/main/java/org/keycloak/models/RealmProvider.java", "diffHunk": "@@ -200,6 +230,6 @@ default ClientModel addClient(RealmModel realm, String clientId) {\n     /**\n      * @deprecated Use the corresponding method from {@link ClientProvider}. */\n     @Override\n-    public List<ClientModel> getAlwaysDisplayInConsoleClients(RealmModel realm);\n+    public Stream<ClientModel> getAlwaysDisplayInConsoleClientsStream(RealmModel realm);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0OTU5MQ=="}, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTIzMTM3OnYy", "diffSide": "RIGHT", "path": "server-spi/src/main/java/org/keycloak/models/RoleContainerModel.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjowMjoxOFrOG2dGjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMToxMjoxOVrOG2rmeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc1MzEwMQ==", "bodyText": "This method is now deprecated but still used across the codebase.", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459753101", "createdAt": "2020-07-23T22:02:18Z", "author": {"login": "vramik"}, "path": "server-spi/src/main/java/org/keycloak/models/RoleContainerModel.java", "diffHunk": "@@ -47,12 +49,27 @@\n \n     boolean removeRole(RoleModel role);\n \n-    Set<RoleModel> getRoles();\n-    \n-    Set<RoleModel> getRoles(Integer firstResult, Integer maxResults);\n+    @Deprecated\n+    default Set<RoleModel> getRoles() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4NzA0NA==", "bodyText": "This was intentionally left for a separate commit together with the rest of methods like getClients(). The PR would be huge if it was done at once. I've the second commit WIP.", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459887044", "createdAt": "2020-07-24T07:13:06Z", "author": {"login": "martin-kanis"}, "path": "server-spi/src/main/java/org/keycloak/models/RoleContainerModel.java", "diffHunk": "@@ -47,12 +49,27 @@\n \n     boolean removeRole(RoleModel role);\n \n-    Set<RoleModel> getRoles();\n-    \n-    Set<RoleModel> getRoles(Integer firstResult, Integer maxResults);\n+    @Deprecated\n+    default Set<RoleModel> getRoles() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc1MzEwMQ=="}, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk2MDE4NQ==", "bodyText": "so maybe it'd be good to add //TODO?", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459960185", "createdAt": "2020-07-24T09:56:19Z", "author": {"login": "vramik"}, "path": "server-spi/src/main/java/org/keycloak/models/RoleContainerModel.java", "diffHunk": "@@ -47,12 +49,27 @@\n \n     boolean removeRole(RoleModel role);\n \n-    Set<RoleModel> getRoles();\n-    \n-    Set<RoleModel> getRoles(Integer firstResult, Integer maxResults);\n+    @Deprecated\n+    default Set<RoleModel> getRoles() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc1MzEwMQ=="}, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MDY1MA==", "bodyText": "TODO added to multiple places", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459990650", "createdAt": "2020-07-24T11:12:19Z", "author": {"login": "martin-kanis"}, "path": "server-spi/src/main/java/org/keycloak/models/RoleContainerModel.java", "diffHunk": "@@ -47,12 +49,27 @@\n \n     boolean removeRole(RoleModel role);\n \n-    Set<RoleModel> getRoles();\n-    \n-    Set<RoleModel> getRoles(Integer firstResult, Integer maxResults);\n+    @Deprecated\n+    default Set<RoleModel> getRoles() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc1MzEwMQ=="}, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTIzMjc2OnYy", "diffSide": "RIGHT", "path": "server-spi/src/main/java/org/keycloak/models/RoleContainerModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjowMjo1MVrOG2dHZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjowMjo1MVrOG2dHZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc1MzMxNw==", "bodyText": "the same here", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459753317", "createdAt": "2020-07-23T22:02:51Z", "author": {"login": "vramik"}, "path": "server-spi/src/main/java/org/keycloak/models/RoleContainerModel.java", "diffHunk": "@@ -47,12 +49,27 @@\n \n     boolean removeRole(RoleModel role);\n \n-    Set<RoleModel> getRoles();\n-    \n-    Set<RoleModel> getRoles(Integer firstResult, Integer maxResults);\n+    @Deprecated\n+    default Set<RoleModel> getRoles() {\n+        return getRolesStream().collect(Collectors.toSet());\n+    }\n+\n+    Stream<RoleModel> getRolesStream();\n+\n+    @Deprecated\n+    default Set<RoleModel> getRoles(Integer firstResult, Integer maxResults) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTIzNDMxOnYy", "diffSide": "RIGHT", "path": "server-spi/src/main/java/org/keycloak/models/RoleContainerModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjowMzoyN1rOG2dIRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjowMzoyN1rOG2dIRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc1MzU0Mg==", "bodyText": "the same here", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459753542", "createdAt": "2020-07-23T22:03:27Z", "author": {"login": "vramik"}, "path": "server-spi/src/main/java/org/keycloak/models/RoleContainerModel.java", "diffHunk": "@@ -47,12 +49,27 @@\n \n     boolean removeRole(RoleModel role);\n \n-    Set<RoleModel> getRoles();\n-    \n-    Set<RoleModel> getRoles(Integer firstResult, Integer maxResults);\n+    @Deprecated\n+    default Set<RoleModel> getRoles() {\n+        return getRolesStream().collect(Collectors.toSet());\n+    }\n+\n+    Stream<RoleModel> getRolesStream();\n+\n+    @Deprecated\n+    default Set<RoleModel> getRoles(Integer firstResult, Integer maxResults) {\n+        return getRolesStream(firstResult, maxResults).collect(Collectors.toSet());\n+    }\n+\n+    Stream<RoleModel> getRolesStream(Integer firstResult, Integer maxResults);\n+\n+    @Deprecated\n+    default Set<RoleModel> searchForRoles(String search, Integer first, Integer max) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTI2MjYxOnYy", "diffSide": "RIGHT", "path": "model/map/src/main/java/org/keycloak/models/map/client/MapClientProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjoxNDoyMFrOG2dZBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMToxMTo0OFrOG2rlxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc1NzgzMQ==", "bodyText": "Line 164-167: public List<ClientModel> getClients(RealmModel realm) doesn't have to be implemented here, right? It's deprecated and it's used nowhere.", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459757831", "createdAt": "2020-07-23T22:14:20Z", "author": {"login": "vramik"}, "path": "model/map/src/main/java/org/keycloak/models/map/client/MapClientProvider.java", "diffHunk": "@@ -152,7 +152,7 @@ public void unregisterNode(String nodeHost) {\n         return Stream.concat(tx.createdValuesStream(clientStore.keySet()), updatedAndNotRemovedClientsStream);\n     }\n \n-//    @Override\n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MDQ3MA==", "bodyText": "removed", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459990470", "createdAt": "2020-07-24T11:11:48Z", "author": {"login": "martin-kanis"}, "path": "model/map/src/main/java/org/keycloak/models/map/client/MapClientProvider.java", "diffHunk": "@@ -152,7 +152,7 @@ public void unregisterNode(String nodeHost) {\n         return Stream.concat(tx.createdValuesStream(clientStore.keySet()), updatedAndNotRemovedClientsStream);\n     }\n \n-//    @Override\n+    @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc1NzgzMQ=="}, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTMwNjI0OnYy", "diffSide": "RIGHT", "path": "server-spi/src/main/java/org/keycloak/storage/client/ClientLookupProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjozMjowN1rOG2dyyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMToxMTozMFrOG2rlVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2NDQyNQ==", "bodyText": "This method wasn't declared in previous version of Keycloak, so I believe we don't have to deprecate it and we can remove it instead.", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459764425", "createdAt": "2020-07-23T22:32:07Z", "author": {"login": "vramik"}, "path": "server-spi/src/main/java/org/keycloak/storage/client/ClientLookupProvider.java", "diffHunk": "@@ -71,22 +73,38 @@\n      * @param clientId Searched substring of the public client\n      *   identifier ({@code client_id} in OIDC or {@code entityID} in SAML.)\n      * @param firstResult First result to return. Ignored if negative or {@code null}.\n-     * @param maxResults Maximim number of results to return. Ignored if negative or {@code null}.\n-     * @return Model of the client, or {@code null} if no client is found.\n+     * @param maxResults Maximum number of results to return. Ignored if negative or {@code null}.\n+     * @return List of ClientModel or an empty list if no client is found.\n+     * @deprecated Use {@link #searchClientsByClientIdStream(org.keycloak.models.RealmModel, java.lang.String, java.lang.Integer, java.lang.Integer)} instead.\n      */\n-    List<ClientModel> searchClientsByClientId(RealmModel realm, String clientId, Integer firstResult, Integer maxResults);\n+    @Deprecated\n+    default List<ClientModel> searchClientsByClientId(RealmModel realm, String clientId, Integer firstResult, Integer maxResults) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MDM1Ng==", "bodyText": "removed", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459990356", "createdAt": "2020-07-24T11:11:30Z", "author": {"login": "martin-kanis"}, "path": "server-spi/src/main/java/org/keycloak/storage/client/ClientLookupProvider.java", "diffHunk": "@@ -71,22 +73,38 @@\n      * @param clientId Searched substring of the public client\n      *   identifier ({@code client_id} in OIDC or {@code entityID} in SAML.)\n      * @param firstResult First result to return. Ignored if negative or {@code null}.\n-     * @param maxResults Maximim number of results to return. Ignored if negative or {@code null}.\n-     * @return Model of the client, or {@code null} if no client is found.\n+     * @param maxResults Maximum number of results to return. Ignored if negative or {@code null}.\n+     * @return List of ClientModel or an empty list if no client is found.\n+     * @deprecated Use {@link #searchClientsByClientIdStream(org.keycloak.models.RealmModel, java.lang.String, java.lang.Integer, java.lang.Integer)} instead.\n      */\n-    List<ClientModel> searchClientsByClientId(RealmModel realm, String clientId, Integer firstResult, Integer maxResults);\n+    @Deprecated\n+    default List<ClientModel> searchClientsByClientId(RealmModel realm, String clientId, Integer firstResult, Integer maxResults) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2NDQyNQ=="}, "originalCommit": {"oid": "40ea3e6b7cf3637006813ad9712be177890f2687"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDAzMTIzOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/services/DefaultKeycloakSession.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoxMDozOVrOG2kI2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMToxMToxOVrOG2rlEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2ODM3OA==", "bodyText": "nit: not used", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459868378", "createdAt": "2020-07-24T06:10:39Z", "author": {"login": "vramik"}, "path": "services/src/main/java/org/keycloak/services/DefaultKeycloakSession.java", "diffHunk": "@@ -16,6 +16,7 @@\n  */\n package org.keycloak.services;\n \n+import org.keycloak.Config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ba4c9c574bfd95071e9a3dfc9c5cec9f65e5c01"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MDI4OQ==", "bodyText": "removed", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459990289", "createdAt": "2020-07-24T11:11:19Z", "author": {"login": "martin-kanis"}, "path": "services/src/main/java/org/keycloak/services/DefaultKeycloakSession.java", "diffHunk": "@@ -16,6 +16,7 @@\n  */\n package org.keycloak.services;\n \n+import org.keycloak.Config;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2ODM3OA=="}, "originalCommit": {"oid": "1ba4c9c574bfd95071e9a3dfc9c5cec9f65e5c01"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDA0NjgyOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/services/DefaultKeycloakSessionFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjoxOTozOVrOG2kRig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMToxMToxMVrOG2rk3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MDYwMg==", "bodyText": "We should add a javadoc for the timeout. What it does and in what units it's expected. Not sure where tha javadoc should be, whether in DefaultKeycloakSessionFactory or DefaultKeycloakSession or ClientStorageManager. Maybe  everywhere? :)", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459870602", "createdAt": "2020-07-24T06:19:39Z", "author": {"login": "vramik"}, "path": "services/src/main/java/org/keycloak/services/DefaultKeycloakSessionFactory.java", "diffHunk": "@@ -59,6 +59,8 @@\n     // TODO: Likely should be changed to int and use Time.currentTime() to be compatible with all our \"time\" reps\n     protected long serverStartupTimestamp;\n \n+    private long clientStorageProviderTimeout;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ba4c9c574bfd95071e9a3dfc9c5cec9f65e5c01"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4MzI5Ng==", "bodyText": "I believe DefaultKeycloakSessionFactory is the right place for the time being, since the configuration option should only be parsed once rather than with every DefaultKeycloakSession instantiation.\nSadly, ClientStorageManager is not instantiated as other SPIs so lacks ability to be configured in the init() method, and we have to simulate it from here. In the future, once we refactor the ClientStorageManager to be more SPI-like, it will be moved accordingly.", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459883296", "createdAt": "2020-07-24T07:01:38Z", "author": {"login": "hmlnarik"}, "path": "services/src/main/java/org/keycloak/services/DefaultKeycloakSessionFactory.java", "diffHunk": "@@ -59,6 +59,8 @@\n     // TODO: Likely should be changed to int and use Time.currentTime() to be compatible with all our \"time\" reps\n     protected long serverStartupTimestamp;\n \n+    private long clientStorageProviderTimeout;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MDYwMg=="}, "originalCommit": {"oid": "1ba4c9c574bfd95071e9a3dfc9c5cec9f65e5c01"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MDIzNw==", "bodyText": "done", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459990237", "createdAt": "2020-07-24T11:11:11Z", "author": {"login": "martin-kanis"}, "path": "services/src/main/java/org/keycloak/services/DefaultKeycloakSessionFactory.java", "diffHunk": "@@ -59,6 +59,8 @@\n     // TODO: Likely should be changed to int and use Time.currentTime() to be compatible with all our \"time\" reps\n     protected long serverStartupTimestamp;\n \n+    private long clientStorageProviderTimeout;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MDYwMg=="}, "originalCommit": {"oid": "1ba4c9c574bfd95071e9a3dfc9c5cec9f65e5c01"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDYxOTQ0OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/storage/ClientStorageManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwOTo0ODowMVrOG2pgdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMToxMTowMFrOG2rkog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk1NjM0Mw==", "bodyText": "This method IMO should have also javadoc which describes its behavior, because on the first look it's not so obvious.", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459956343", "createdAt": "2020-07-24T09:48:01Z", "author": {"login": "vramik"}, "path": "services/src/main/java/org/keycloak/storage/ClientStorageManager.java", "diffHunk": "@@ -148,16 +159,22 @@ public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n     }\n \n     @Override\n-    public List<ClientModel> searchClientsByClientId(RealmModel realm, String clientId, Integer firstResult, Integer maxResults) {\n-        List<ClientModel> clients = session.clientLocalStorage().searchClientsByClientId(realm, clientId,  firstResult, maxResults);\n-        if (clients != null) {\n-            return clients;\n-        }\n-        for (ClientLookupProvider provider : getEnabledStorageProviders(session, realm, ClientLookupProvider.class)) {\n-            clients = provider.searchClientsByClientId(realm, clientId, firstResult, maxResults);\n-            if (clients != null) return clients;\n+    public Stream<ClientModel> searchClientsByClientIdStream(RealmModel realm, String clientId, Integer firstResult, Integer maxResults) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ba4c9c574bfd95071e9a3dfc9c5cec9f65e5c01"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5MDE3OA==", "bodyText": "done", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r459990178", "createdAt": "2020-07-24T11:11:00Z", "author": {"login": "martin-kanis"}, "path": "services/src/main/java/org/keycloak/storage/ClientStorageManager.java", "diffHunk": "@@ -148,16 +159,22 @@ public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n     }\n \n     @Override\n-    public List<ClientModel> searchClientsByClientId(RealmModel realm, String clientId, Integer firstResult, Integer maxResults) {\n-        List<ClientModel> clients = session.clientLocalStorage().searchClientsByClientId(realm, clientId,  firstResult, maxResults);\n-        if (clients != null) {\n-            return clients;\n-        }\n-        for (ClientLookupProvider provider : getEnabledStorageProviders(session, realm, ClientLookupProvider.class)) {\n-            clients = provider.searchClientsByClientId(realm, clientId, firstResult, maxResults);\n-            if (clients != null) return clients;\n+    public Stream<ClientModel> searchClientsByClientIdStream(RealmModel realm, String clientId, Integer firstResult, Integer maxResults) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk1NjM0Mw=="}, "originalCommit": {"oid": "1ba4c9c574bfd95071e9a3dfc9c5cec9f65e5c01"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjYwNTkzOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/utils/ServicesUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMDoxNToxOVrOG28enw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMDoxNToxOVrOG28enw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI2NzE2Nw==", "bodyText": "nit: copyright missing", "url": "https://github.com/keycloak/keycloak/pull/7263#discussion_r460267167", "createdAt": "2020-07-24T20:15:19Z", "author": {"login": "vramik"}, "path": "services/src/main/java/org/keycloak/utils/ServicesUtils.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package org.keycloak.utils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f953d1f6d54d06448e7d09a182d8d1e187fce80d"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3475, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}