{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5MTgxMzc2", "number": 7267, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOToxMDo1NlrOEQiNzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDo0MDoxMFrOE6gQ1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NzczMjYyOnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/ProfileAssume.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOToxMDo1NlrOG0vKhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOToxMDo1NlrOG0vKhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk1MTg3OQ==", "bodyText": "Just a nitpick. These imports are not used.", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r457951879", "createdAt": "2020-07-21T09:10:56Z", "author": {"login": "vmuzikar"}, "path": "testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/ProfileAssume.java", "diffHunk": "@@ -27,6 +27,8 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import org.keycloak.admin.client.resource.ServerInfoResource;\n+import org.keycloak.representations.info.ServerInfoRepresentation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8e95dc5c44531101142b0895890215e2041191d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1Nzk3MzY0OnYy", "diffSide": "LEFT", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/AbstractKeycloakTest.java", "isResolved": false, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDoxNzowNlrOG0xfeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOTowMzo0OFrOG4va7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MDAxMA==", "bodyText": "I have to admit I don't like the approach with renaming and creating new abstract classes. The naming is quite confusing \u2013 AbstractKeycloakTest vs MainAbstractKeycloakTest. But more importantly, it breaks the class hierarchy which results in duplicate code e.g. in AbstractUiTest.\nThe way I see it we have two options.\n\nMove the abstract class that disables the new console much, much lower in the hierarchy. So that the abstract classes could be used by the new console tests and code duplication wouldn't be necessary.\nDisable the new console in the first abstract class and then re-enable it only in the tests that need it. The number of tests for the new console is really just a fraction of what we have, so maybe that would be a cleaner approach.\n\nIn any case, this change should be as small as possible because it's only temporary. Sooner or later the old console will be deprecated and we'll have to fix all the tests that rely on it.", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r457990010", "createdAt": "2020-07-21T10:17:06Z", "author": {"login": "vmuzikar"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/AbstractKeycloakTest.java", "diffHunk": "@@ -16,640 +16,16 @@\n  */\n package org.keycloak.testsuite;\n \n-import io.appium.java_client.AppiumDriver;\n-import org.apache.commons.configuration.ConfigurationException;\n-import org.apache.commons.configuration.PropertiesConfiguration;\n-import org.jboss.arquillian.container.test.api.RunAsClient;\n-import org.jboss.arquillian.drone.api.annotation.Drone;\n-import org.jboss.arquillian.graphene.page.Page;\n-import org.jboss.arquillian.test.api.ArquillianResource;\n-import org.jboss.logging.Logger;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.runner.RunWith;\n-import org.keycloak.admin.client.Keycloak;\n-import org.keycloak.admin.client.resource.AuthenticationManagementResource;\n-import org.keycloak.admin.client.resource.RealmsResource;\n-import org.keycloak.admin.client.resource.UserResource;\n-import org.keycloak.admin.client.resource.UsersResource;\n-import org.keycloak.common.util.KeycloakUriBuilder;\n-import org.keycloak.common.util.Time;\n-import org.keycloak.representations.idm.ClientRepresentation;\n-import org.keycloak.representations.idm.RealmRepresentation;\n-import org.keycloak.representations.idm.RequiredActionProviderRepresentation;\n-import org.keycloak.representations.idm.UserRepresentation;\n-import org.keycloak.services.resources.account.AccountFormService;\n-import org.keycloak.testsuite.admin.ApiUtil;\n-import org.keycloak.testsuite.arquillian.AuthServerTestEnricher;\n-import org.keycloak.testsuite.arquillian.KcArquillian;\n-import org.keycloak.testsuite.arquillian.SuiteContext;\n-import org.keycloak.testsuite.arquillian.TestContext;\n-import org.keycloak.testsuite.auth.page.AuthRealm;\n-import org.keycloak.testsuite.auth.page.AuthServer;\n-import org.keycloak.testsuite.auth.page.AuthServerContextRoot;\n-import org.keycloak.testsuite.auth.page.WelcomePage;\n-import org.keycloak.testsuite.auth.page.account.Account;\n-import org.keycloak.testsuite.auth.page.login.OIDCLogin;\n-import org.keycloak.testsuite.auth.page.login.UpdatePassword;\n-import org.keycloak.testsuite.client.KeycloakTestingClient;\n-import org.keycloak.testsuite.pages.LoginPasswordUpdatePage;\n-import org.keycloak.testsuite.util.DroneUtils;\n-import org.keycloak.testsuite.util.OAuthClient;\n-import org.keycloak.testsuite.util.TestCleanup;\n-import org.keycloak.testsuite.util.TestEventsLogger;\n-import org.openqa.selenium.WebDriver;\n-\n-import javax.ws.rs.NotFoundException;\n-import javax.ws.rs.core.UriBuilder;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.PipedInputStream;\n-import java.io.PipedOutputStream;\n-import java.io.PrintWriter;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Calendar;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Scanner;\n-\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertThat;\n-import static org.keycloak.testsuite.admin.Users.setPasswordFor;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_HOST;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_PORT;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_SCHEME;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_SSL_REQUIRED;\n-import static org.keycloak.testsuite.auth.page.AuthRealm.MASTER;\n-import static org.keycloak.testsuite.util.URLUtils.navigateToUri;\n-import static org.keycloak.testsuite.util.ServerURLs.removeDefaultPorts;\n+import org.keycloak.common.Profile;\n+import org.keycloak.testsuite.arquillian.annotation.DisableFeature;\n \n /**\n- *\n- * @author tkyjovsk\n+ * Old tests that use AbstractKeycloakTest assume that we are using the old\n+ * account console.\n+ * \n+ * @author Stan Silvert\n  */\n-@RunWith(KcArquillian.class)\n-@RunAsClient\n-public abstract class AbstractKeycloakTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8e95dc5c44531101142b0895890215e2041191d"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM1Nzg0OQ==", "bodyText": "I have to admit I don't like the approach with renaming and creating new abstract classes. The naming is quite confusing \u2013 AbstractKeycloakTest vs MainAbstractKeycloakTest. But more importantly, it breaks the class hierarchy which results in duplicate code e.g. in AbstractUiTest.\nThe way I see it we have two options.\n\nMove the abstract class that disables the new console much, much lower in the hierarchy. So that the abstract classes could be used by the new console tests and code duplication wouldn't be necessary.\nDisable the new console in the first abstract class and then re-enable it only in the tests that need it. The number of tests for the new console is really just a fraction of what we have, so maybe that would be a cleaner approach.\n\nIn any case, this change should be as small as possible because it's only temporary. Sooner or later the old console will be deprecated and we'll have to fix all the tests that rely on it.\n\nI'm not really happy with this either.\nI spent a fair amount of time trying to figure out what would be the least disruptive to the current code base.\nI don't think your first suggestion would work at all without changing a lot of tests.  If I recall, a lot of tests extend AbstractKeycloakTest directly.\nI wouldn't want to go through all the tests that need new account console and enable NAC individually.  That just seems wrong since we want to use NAC going forward.\nIMO, the only thing that made the code a little more ugly was that I had to copy some code from AbstractAuthorizationTest to AbstractUITest.  Because of the way the hierarchy is set up there was no good way to get around it without figuring out exactly what each test was using from the base class.\nThis is what happens when a code base relies so heavily on inheritance instead of delegation.\nThat being said, the whole thing could definitely use some refactoring but it's just a matter of deciding how much time you want to spend.", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r458357849", "createdAt": "2020-07-21T20:09:21Z", "author": {"login": "ssilvert"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/AbstractKeycloakTest.java", "diffHunk": "@@ -16,640 +16,16 @@\n  */\n package org.keycloak.testsuite;\n \n-import io.appium.java_client.AppiumDriver;\n-import org.apache.commons.configuration.ConfigurationException;\n-import org.apache.commons.configuration.PropertiesConfiguration;\n-import org.jboss.arquillian.container.test.api.RunAsClient;\n-import org.jboss.arquillian.drone.api.annotation.Drone;\n-import org.jboss.arquillian.graphene.page.Page;\n-import org.jboss.arquillian.test.api.ArquillianResource;\n-import org.jboss.logging.Logger;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.runner.RunWith;\n-import org.keycloak.admin.client.Keycloak;\n-import org.keycloak.admin.client.resource.AuthenticationManagementResource;\n-import org.keycloak.admin.client.resource.RealmsResource;\n-import org.keycloak.admin.client.resource.UserResource;\n-import org.keycloak.admin.client.resource.UsersResource;\n-import org.keycloak.common.util.KeycloakUriBuilder;\n-import org.keycloak.common.util.Time;\n-import org.keycloak.representations.idm.ClientRepresentation;\n-import org.keycloak.representations.idm.RealmRepresentation;\n-import org.keycloak.representations.idm.RequiredActionProviderRepresentation;\n-import org.keycloak.representations.idm.UserRepresentation;\n-import org.keycloak.services.resources.account.AccountFormService;\n-import org.keycloak.testsuite.admin.ApiUtil;\n-import org.keycloak.testsuite.arquillian.AuthServerTestEnricher;\n-import org.keycloak.testsuite.arquillian.KcArquillian;\n-import org.keycloak.testsuite.arquillian.SuiteContext;\n-import org.keycloak.testsuite.arquillian.TestContext;\n-import org.keycloak.testsuite.auth.page.AuthRealm;\n-import org.keycloak.testsuite.auth.page.AuthServer;\n-import org.keycloak.testsuite.auth.page.AuthServerContextRoot;\n-import org.keycloak.testsuite.auth.page.WelcomePage;\n-import org.keycloak.testsuite.auth.page.account.Account;\n-import org.keycloak.testsuite.auth.page.login.OIDCLogin;\n-import org.keycloak.testsuite.auth.page.login.UpdatePassword;\n-import org.keycloak.testsuite.client.KeycloakTestingClient;\n-import org.keycloak.testsuite.pages.LoginPasswordUpdatePage;\n-import org.keycloak.testsuite.util.DroneUtils;\n-import org.keycloak.testsuite.util.OAuthClient;\n-import org.keycloak.testsuite.util.TestCleanup;\n-import org.keycloak.testsuite.util.TestEventsLogger;\n-import org.openqa.selenium.WebDriver;\n-\n-import javax.ws.rs.NotFoundException;\n-import javax.ws.rs.core.UriBuilder;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.PipedInputStream;\n-import java.io.PipedOutputStream;\n-import java.io.PrintWriter;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Calendar;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Scanner;\n-\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertThat;\n-import static org.keycloak.testsuite.admin.Users.setPasswordFor;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_HOST;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_PORT;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_SCHEME;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_SSL_REQUIRED;\n-import static org.keycloak.testsuite.auth.page.AuthRealm.MASTER;\n-import static org.keycloak.testsuite.util.URLUtils.navigateToUri;\n-import static org.keycloak.testsuite.util.ServerURLs.removeDefaultPorts;\n+import org.keycloak.common.Profile;\n+import org.keycloak.testsuite.arquillian.annotation.DisableFeature;\n \n /**\n- *\n- * @author tkyjovsk\n+ * Old tests that use AbstractKeycloakTest assume that we are using the old\n+ * account console.\n+ * \n+ * @author Stan Silvert\n  */\n-@RunWith(KcArquillian.class)\n-@RunAsClient\n-public abstract class AbstractKeycloakTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MDAxMA=="}, "originalCommit": {"oid": "d8e95dc5c44531101142b0895890215e2041191d"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU1NDEzNg==", "bodyText": "I don't think your first suggestion would work at all without changing a lot of tests. If I recall, a lot of tests extend AbstractKeycloakTest directly.\n\nAh, yes, you're correct. Option 1 won't work.\n\nI wouldn't want to go through all the tests that need new account console and enable NAC individually. That just seems wrong since we want to use NAC going forward.\n\nActually, I think you wouldn't need to go trough all the tests that need NAC. The annotations to enable it are already there, the only change we'd have to do now is to disable NAC in the most abstract class. Once we fixed the tests to work with NAC, we'll just remove those annotations. That seems to me like the least invasive option. If it works, of course. ;)\n\nThat being said, the whole thing could definitely use some refactoring but it's just a matter of deciding how much time you want to spend.\n\n+1000\nThat being said, it's ugly but we don't need to make it even more ugly now. :)", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r458554136", "createdAt": "2020-07-22T06:03:43Z", "author": {"login": "vmuzikar"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/AbstractKeycloakTest.java", "diffHunk": "@@ -16,640 +16,16 @@\n  */\n package org.keycloak.testsuite;\n \n-import io.appium.java_client.AppiumDriver;\n-import org.apache.commons.configuration.ConfigurationException;\n-import org.apache.commons.configuration.PropertiesConfiguration;\n-import org.jboss.arquillian.container.test.api.RunAsClient;\n-import org.jboss.arquillian.drone.api.annotation.Drone;\n-import org.jboss.arquillian.graphene.page.Page;\n-import org.jboss.arquillian.test.api.ArquillianResource;\n-import org.jboss.logging.Logger;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.runner.RunWith;\n-import org.keycloak.admin.client.Keycloak;\n-import org.keycloak.admin.client.resource.AuthenticationManagementResource;\n-import org.keycloak.admin.client.resource.RealmsResource;\n-import org.keycloak.admin.client.resource.UserResource;\n-import org.keycloak.admin.client.resource.UsersResource;\n-import org.keycloak.common.util.KeycloakUriBuilder;\n-import org.keycloak.common.util.Time;\n-import org.keycloak.representations.idm.ClientRepresentation;\n-import org.keycloak.representations.idm.RealmRepresentation;\n-import org.keycloak.representations.idm.RequiredActionProviderRepresentation;\n-import org.keycloak.representations.idm.UserRepresentation;\n-import org.keycloak.services.resources.account.AccountFormService;\n-import org.keycloak.testsuite.admin.ApiUtil;\n-import org.keycloak.testsuite.arquillian.AuthServerTestEnricher;\n-import org.keycloak.testsuite.arquillian.KcArquillian;\n-import org.keycloak.testsuite.arquillian.SuiteContext;\n-import org.keycloak.testsuite.arquillian.TestContext;\n-import org.keycloak.testsuite.auth.page.AuthRealm;\n-import org.keycloak.testsuite.auth.page.AuthServer;\n-import org.keycloak.testsuite.auth.page.AuthServerContextRoot;\n-import org.keycloak.testsuite.auth.page.WelcomePage;\n-import org.keycloak.testsuite.auth.page.account.Account;\n-import org.keycloak.testsuite.auth.page.login.OIDCLogin;\n-import org.keycloak.testsuite.auth.page.login.UpdatePassword;\n-import org.keycloak.testsuite.client.KeycloakTestingClient;\n-import org.keycloak.testsuite.pages.LoginPasswordUpdatePage;\n-import org.keycloak.testsuite.util.DroneUtils;\n-import org.keycloak.testsuite.util.OAuthClient;\n-import org.keycloak.testsuite.util.TestCleanup;\n-import org.keycloak.testsuite.util.TestEventsLogger;\n-import org.openqa.selenium.WebDriver;\n-\n-import javax.ws.rs.NotFoundException;\n-import javax.ws.rs.core.UriBuilder;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.PipedInputStream;\n-import java.io.PipedOutputStream;\n-import java.io.PrintWriter;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Calendar;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Scanner;\n-\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertThat;\n-import static org.keycloak.testsuite.admin.Users.setPasswordFor;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_HOST;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_PORT;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_SCHEME;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_SSL_REQUIRED;\n-import static org.keycloak.testsuite.auth.page.AuthRealm.MASTER;\n-import static org.keycloak.testsuite.util.URLUtils.navigateToUri;\n-import static org.keycloak.testsuite.util.ServerURLs.removeDefaultPorts;\n+import org.keycloak.common.Profile;\n+import org.keycloak.testsuite.arquillian.annotation.DisableFeature;\n \n /**\n- *\n- * @author tkyjovsk\n+ * Old tests that use AbstractKeycloakTest assume that we are using the old\n+ * account console.\n+ * \n+ * @author Stan Silvert\n  */\n-@RunWith(KcArquillian.class)\n-@RunAsClient\n-public abstract class AbstractKeycloakTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MDAxMA=="}, "originalCommit": {"oid": "d8e95dc5c44531101142b0895890215e2041191d"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc3MTg3MQ==", "bodyText": "Actually, I think you wouldn't need to go trough all the tests that need NAC. The annotations to enable it are already there, the only change we'd have to do now is to disable NAC in the most abstract class. Once we fixed the tests to work with NAC, we'll just remove those annotations. That seems to me like the least invasive option. If it works, of course. ;)\n\nI tried that and it didn't appear to work.  Even if it did things would get confusing.  You end up with an inheritance hierarchy where a base class has @EnableFeature and a subclass has @DisableFeature.  Or vice versa.  So you don't know who wins.\nI did find that using the annotation on a method takes precedence, over having it at the class level.  So that helped out a bit.", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r458771871", "createdAt": "2020-07-22T12:58:51Z", "author": {"login": "ssilvert"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/AbstractKeycloakTest.java", "diffHunk": "@@ -16,640 +16,16 @@\n  */\n package org.keycloak.testsuite;\n \n-import io.appium.java_client.AppiumDriver;\n-import org.apache.commons.configuration.ConfigurationException;\n-import org.apache.commons.configuration.PropertiesConfiguration;\n-import org.jboss.arquillian.container.test.api.RunAsClient;\n-import org.jboss.arquillian.drone.api.annotation.Drone;\n-import org.jboss.arquillian.graphene.page.Page;\n-import org.jboss.arquillian.test.api.ArquillianResource;\n-import org.jboss.logging.Logger;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.runner.RunWith;\n-import org.keycloak.admin.client.Keycloak;\n-import org.keycloak.admin.client.resource.AuthenticationManagementResource;\n-import org.keycloak.admin.client.resource.RealmsResource;\n-import org.keycloak.admin.client.resource.UserResource;\n-import org.keycloak.admin.client.resource.UsersResource;\n-import org.keycloak.common.util.KeycloakUriBuilder;\n-import org.keycloak.common.util.Time;\n-import org.keycloak.representations.idm.ClientRepresentation;\n-import org.keycloak.representations.idm.RealmRepresentation;\n-import org.keycloak.representations.idm.RequiredActionProviderRepresentation;\n-import org.keycloak.representations.idm.UserRepresentation;\n-import org.keycloak.services.resources.account.AccountFormService;\n-import org.keycloak.testsuite.admin.ApiUtil;\n-import org.keycloak.testsuite.arquillian.AuthServerTestEnricher;\n-import org.keycloak.testsuite.arquillian.KcArquillian;\n-import org.keycloak.testsuite.arquillian.SuiteContext;\n-import org.keycloak.testsuite.arquillian.TestContext;\n-import org.keycloak.testsuite.auth.page.AuthRealm;\n-import org.keycloak.testsuite.auth.page.AuthServer;\n-import org.keycloak.testsuite.auth.page.AuthServerContextRoot;\n-import org.keycloak.testsuite.auth.page.WelcomePage;\n-import org.keycloak.testsuite.auth.page.account.Account;\n-import org.keycloak.testsuite.auth.page.login.OIDCLogin;\n-import org.keycloak.testsuite.auth.page.login.UpdatePassword;\n-import org.keycloak.testsuite.client.KeycloakTestingClient;\n-import org.keycloak.testsuite.pages.LoginPasswordUpdatePage;\n-import org.keycloak.testsuite.util.DroneUtils;\n-import org.keycloak.testsuite.util.OAuthClient;\n-import org.keycloak.testsuite.util.TestCleanup;\n-import org.keycloak.testsuite.util.TestEventsLogger;\n-import org.openqa.selenium.WebDriver;\n-\n-import javax.ws.rs.NotFoundException;\n-import javax.ws.rs.core.UriBuilder;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.PipedInputStream;\n-import java.io.PipedOutputStream;\n-import java.io.PrintWriter;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Calendar;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Scanner;\n-\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertThat;\n-import static org.keycloak.testsuite.admin.Users.setPasswordFor;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_HOST;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_PORT;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_SCHEME;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_SSL_REQUIRED;\n-import static org.keycloak.testsuite.auth.page.AuthRealm.MASTER;\n-import static org.keycloak.testsuite.util.URLUtils.navigateToUri;\n-import static org.keycloak.testsuite.util.ServerURLs.removeDefaultPorts;\n+import org.keycloak.common.Profile;\n+import org.keycloak.testsuite.arquillian.annotation.DisableFeature;\n \n /**\n- *\n- * @author tkyjovsk\n+ * Old tests that use AbstractKeycloakTest assume that we are using the old\n+ * account console.\n+ * \n+ * @author Stan Silvert\n  */\n-@RunWith(KcArquillian.class)\n-@RunAsClient\n-public abstract class AbstractKeycloakTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MDAxMA=="}, "originalCommit": {"oid": "d8e95dc5c44531101142b0895890215e2041191d"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg1OTU1MQ==", "bodyText": "IMHO there's no problem with a parent class disabling feature and some child re-enabling it. I'm sure we could fix the implementation if it doesn't work like that.\nAs an alternative, we could globally disable NAS on testsuite level by some other way (without using the annotation) and use the annotation just for enabling where needed. It's all just temporary anyway so we should do as little changes in the class hierarchy as possible.", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r458859551", "createdAt": "2020-07-22T15:00:46Z", "author": {"login": "vmuzikar"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/AbstractKeycloakTest.java", "diffHunk": "@@ -16,640 +16,16 @@\n  */\n package org.keycloak.testsuite;\n \n-import io.appium.java_client.AppiumDriver;\n-import org.apache.commons.configuration.ConfigurationException;\n-import org.apache.commons.configuration.PropertiesConfiguration;\n-import org.jboss.arquillian.container.test.api.RunAsClient;\n-import org.jboss.arquillian.drone.api.annotation.Drone;\n-import org.jboss.arquillian.graphene.page.Page;\n-import org.jboss.arquillian.test.api.ArquillianResource;\n-import org.jboss.logging.Logger;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.runner.RunWith;\n-import org.keycloak.admin.client.Keycloak;\n-import org.keycloak.admin.client.resource.AuthenticationManagementResource;\n-import org.keycloak.admin.client.resource.RealmsResource;\n-import org.keycloak.admin.client.resource.UserResource;\n-import org.keycloak.admin.client.resource.UsersResource;\n-import org.keycloak.common.util.KeycloakUriBuilder;\n-import org.keycloak.common.util.Time;\n-import org.keycloak.representations.idm.ClientRepresentation;\n-import org.keycloak.representations.idm.RealmRepresentation;\n-import org.keycloak.representations.idm.RequiredActionProviderRepresentation;\n-import org.keycloak.representations.idm.UserRepresentation;\n-import org.keycloak.services.resources.account.AccountFormService;\n-import org.keycloak.testsuite.admin.ApiUtil;\n-import org.keycloak.testsuite.arquillian.AuthServerTestEnricher;\n-import org.keycloak.testsuite.arquillian.KcArquillian;\n-import org.keycloak.testsuite.arquillian.SuiteContext;\n-import org.keycloak.testsuite.arquillian.TestContext;\n-import org.keycloak.testsuite.auth.page.AuthRealm;\n-import org.keycloak.testsuite.auth.page.AuthServer;\n-import org.keycloak.testsuite.auth.page.AuthServerContextRoot;\n-import org.keycloak.testsuite.auth.page.WelcomePage;\n-import org.keycloak.testsuite.auth.page.account.Account;\n-import org.keycloak.testsuite.auth.page.login.OIDCLogin;\n-import org.keycloak.testsuite.auth.page.login.UpdatePassword;\n-import org.keycloak.testsuite.client.KeycloakTestingClient;\n-import org.keycloak.testsuite.pages.LoginPasswordUpdatePage;\n-import org.keycloak.testsuite.util.DroneUtils;\n-import org.keycloak.testsuite.util.OAuthClient;\n-import org.keycloak.testsuite.util.TestCleanup;\n-import org.keycloak.testsuite.util.TestEventsLogger;\n-import org.openqa.selenium.WebDriver;\n-\n-import javax.ws.rs.NotFoundException;\n-import javax.ws.rs.core.UriBuilder;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.PipedInputStream;\n-import java.io.PipedOutputStream;\n-import java.io.PrintWriter;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Calendar;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Scanner;\n-\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertThat;\n-import static org.keycloak.testsuite.admin.Users.setPasswordFor;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_HOST;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_PORT;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_SCHEME;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_SSL_REQUIRED;\n-import static org.keycloak.testsuite.auth.page.AuthRealm.MASTER;\n-import static org.keycloak.testsuite.util.URLUtils.navigateToUri;\n-import static org.keycloak.testsuite.util.ServerURLs.removeDefaultPorts;\n+import org.keycloak.common.Profile;\n+import org.keycloak.testsuite.arquillian.annotation.DisableFeature;\n \n /**\n- *\n- * @author tkyjovsk\n+ * Old tests that use AbstractKeycloakTest assume that we are using the old\n+ * account console.\n+ * \n+ * @author Stan Silvert\n  */\n-@RunWith(KcArquillian.class)\n-@RunAsClient\n-public abstract class AbstractKeycloakTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MDAxMA=="}, "originalCommit": {"oid": "d8e95dc5c44531101142b0895890215e2041191d"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4NDY5MQ==", "bodyText": "IMHO there's no problem with a parent class disabling feature and some child re-enabling it. I'm sure we could fix the implementation if it doesn't work like that.\n\nI think it is a problem because there is no hard and fast rule about who should win.  And even if you know how to determine the winner you must inspect the entire hierarchy to find all the @enable and @disable annotations.  That's very confusing for the developer.\n\nAs an alternative, we could globally disable NAS on testsuite level by some other way (without using the annotation) and use the annotation just for enabling where needed. It's all just temporary anyway so we should do as little changes in the class hierarchy as possible.\n\nWe both agree that things have gotten messy.  Let's fix it in another JIRA.", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r459384691", "createdAt": "2020-07-23T11:34:45Z", "author": {"login": "ssilvert"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/AbstractKeycloakTest.java", "diffHunk": "@@ -16,640 +16,16 @@\n  */\n package org.keycloak.testsuite;\n \n-import io.appium.java_client.AppiumDriver;\n-import org.apache.commons.configuration.ConfigurationException;\n-import org.apache.commons.configuration.PropertiesConfiguration;\n-import org.jboss.arquillian.container.test.api.RunAsClient;\n-import org.jboss.arquillian.drone.api.annotation.Drone;\n-import org.jboss.arquillian.graphene.page.Page;\n-import org.jboss.arquillian.test.api.ArquillianResource;\n-import org.jboss.logging.Logger;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.runner.RunWith;\n-import org.keycloak.admin.client.Keycloak;\n-import org.keycloak.admin.client.resource.AuthenticationManagementResource;\n-import org.keycloak.admin.client.resource.RealmsResource;\n-import org.keycloak.admin.client.resource.UserResource;\n-import org.keycloak.admin.client.resource.UsersResource;\n-import org.keycloak.common.util.KeycloakUriBuilder;\n-import org.keycloak.common.util.Time;\n-import org.keycloak.representations.idm.ClientRepresentation;\n-import org.keycloak.representations.idm.RealmRepresentation;\n-import org.keycloak.representations.idm.RequiredActionProviderRepresentation;\n-import org.keycloak.representations.idm.UserRepresentation;\n-import org.keycloak.services.resources.account.AccountFormService;\n-import org.keycloak.testsuite.admin.ApiUtil;\n-import org.keycloak.testsuite.arquillian.AuthServerTestEnricher;\n-import org.keycloak.testsuite.arquillian.KcArquillian;\n-import org.keycloak.testsuite.arquillian.SuiteContext;\n-import org.keycloak.testsuite.arquillian.TestContext;\n-import org.keycloak.testsuite.auth.page.AuthRealm;\n-import org.keycloak.testsuite.auth.page.AuthServer;\n-import org.keycloak.testsuite.auth.page.AuthServerContextRoot;\n-import org.keycloak.testsuite.auth.page.WelcomePage;\n-import org.keycloak.testsuite.auth.page.account.Account;\n-import org.keycloak.testsuite.auth.page.login.OIDCLogin;\n-import org.keycloak.testsuite.auth.page.login.UpdatePassword;\n-import org.keycloak.testsuite.client.KeycloakTestingClient;\n-import org.keycloak.testsuite.pages.LoginPasswordUpdatePage;\n-import org.keycloak.testsuite.util.DroneUtils;\n-import org.keycloak.testsuite.util.OAuthClient;\n-import org.keycloak.testsuite.util.TestCleanup;\n-import org.keycloak.testsuite.util.TestEventsLogger;\n-import org.openqa.selenium.WebDriver;\n-\n-import javax.ws.rs.NotFoundException;\n-import javax.ws.rs.core.UriBuilder;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.PipedInputStream;\n-import java.io.PipedOutputStream;\n-import java.io.PrintWriter;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Calendar;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Scanner;\n-\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertThat;\n-import static org.keycloak.testsuite.admin.Users.setPasswordFor;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_HOST;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_PORT;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_SCHEME;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_SSL_REQUIRED;\n-import static org.keycloak.testsuite.auth.page.AuthRealm.MASTER;\n-import static org.keycloak.testsuite.util.URLUtils.navigateToUri;\n-import static org.keycloak.testsuite.util.ServerURLs.removeDefaultPorts;\n+import org.keycloak.common.Profile;\n+import org.keycloak.testsuite.arquillian.annotation.DisableFeature;\n \n /**\n- *\n- * @author tkyjovsk\n+ * Old tests that use AbstractKeycloakTest assume that we are using the old\n+ * account console.\n+ * \n+ * @author Stan Silvert\n  */\n-@RunWith(KcArquillian.class)\n-@RunAsClient\n-public abstract class AbstractKeycloakTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MDAxMA=="}, "originalCommit": {"oid": "d8e95dc5c44531101142b0895890215e2041191d"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQxNjMyNQ==", "bodyText": "I think it is a problem because there is no hard and fast rule about who should win. And even if you know how to determine the winner you must inspect the entire hierarchy to find all the @enable and @disable annotations. That's very confusing for the developer.\n\nIt already works like that \u2013 the entire hierarchy is transparently checked for the annotations thanks to @Inherited. ;) And to clearly determine who wins is just a matter of updating checkAnnotatedElementForFeatureAnnotations. I still believe this is a cleaner way than to break the class hierarchy.\n\nWe both agree that things have gotten messy. Let's fix it in another JIRA.\n\nSure, a follow-up JIRA can fix things but IMHO we don't need to make it even more messy in this PR. :)", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r459416325", "createdAt": "2020-07-23T12:37:59Z", "author": {"login": "vmuzikar"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/AbstractKeycloakTest.java", "diffHunk": "@@ -16,640 +16,16 @@\n  */\n package org.keycloak.testsuite;\n \n-import io.appium.java_client.AppiumDriver;\n-import org.apache.commons.configuration.ConfigurationException;\n-import org.apache.commons.configuration.PropertiesConfiguration;\n-import org.jboss.arquillian.container.test.api.RunAsClient;\n-import org.jboss.arquillian.drone.api.annotation.Drone;\n-import org.jboss.arquillian.graphene.page.Page;\n-import org.jboss.arquillian.test.api.ArquillianResource;\n-import org.jboss.logging.Logger;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.runner.RunWith;\n-import org.keycloak.admin.client.Keycloak;\n-import org.keycloak.admin.client.resource.AuthenticationManagementResource;\n-import org.keycloak.admin.client.resource.RealmsResource;\n-import org.keycloak.admin.client.resource.UserResource;\n-import org.keycloak.admin.client.resource.UsersResource;\n-import org.keycloak.common.util.KeycloakUriBuilder;\n-import org.keycloak.common.util.Time;\n-import org.keycloak.representations.idm.ClientRepresentation;\n-import org.keycloak.representations.idm.RealmRepresentation;\n-import org.keycloak.representations.idm.RequiredActionProviderRepresentation;\n-import org.keycloak.representations.idm.UserRepresentation;\n-import org.keycloak.services.resources.account.AccountFormService;\n-import org.keycloak.testsuite.admin.ApiUtil;\n-import org.keycloak.testsuite.arquillian.AuthServerTestEnricher;\n-import org.keycloak.testsuite.arquillian.KcArquillian;\n-import org.keycloak.testsuite.arquillian.SuiteContext;\n-import org.keycloak.testsuite.arquillian.TestContext;\n-import org.keycloak.testsuite.auth.page.AuthRealm;\n-import org.keycloak.testsuite.auth.page.AuthServer;\n-import org.keycloak.testsuite.auth.page.AuthServerContextRoot;\n-import org.keycloak.testsuite.auth.page.WelcomePage;\n-import org.keycloak.testsuite.auth.page.account.Account;\n-import org.keycloak.testsuite.auth.page.login.OIDCLogin;\n-import org.keycloak.testsuite.auth.page.login.UpdatePassword;\n-import org.keycloak.testsuite.client.KeycloakTestingClient;\n-import org.keycloak.testsuite.pages.LoginPasswordUpdatePage;\n-import org.keycloak.testsuite.util.DroneUtils;\n-import org.keycloak.testsuite.util.OAuthClient;\n-import org.keycloak.testsuite.util.TestCleanup;\n-import org.keycloak.testsuite.util.TestEventsLogger;\n-import org.openqa.selenium.WebDriver;\n-\n-import javax.ws.rs.NotFoundException;\n-import javax.ws.rs.core.UriBuilder;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.PipedInputStream;\n-import java.io.PipedOutputStream;\n-import java.io.PrintWriter;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Calendar;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Scanner;\n-\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertThat;\n-import static org.keycloak.testsuite.admin.Users.setPasswordFor;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_HOST;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_PORT;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_SCHEME;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_SSL_REQUIRED;\n-import static org.keycloak.testsuite.auth.page.AuthRealm.MASTER;\n-import static org.keycloak.testsuite.util.URLUtils.navigateToUri;\n-import static org.keycloak.testsuite.util.ServerURLs.removeDefaultPorts;\n+import org.keycloak.common.Profile;\n+import org.keycloak.testsuite.arquillian.annotation.DisableFeature;\n \n /**\n- *\n- * @author tkyjovsk\n+ * Old tests that use AbstractKeycloakTest assume that we are using the old\n+ * account console.\n+ * \n+ * @author Stan Silvert\n  */\n-@RunWith(KcArquillian.class)\n-@RunAsClient\n-public abstract class AbstractKeycloakTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MDAxMA=="}, "originalCommit": {"oid": "d8e95dc5c44531101142b0895890215e2041191d"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc0NzI5Mg==", "bodyText": "@ssilvert PTAL at ssilvert#8. It makes the enabling/disabling features more predictable so that we can disable NAC in abstract test class and the re-enable it in NAC tests.\n@mhajas Could you please check ssilvert@82fd457 if it makes sense to you? It touches your KeycloakContainerFeaturesController.", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r461747292", "createdAt": "2020-07-28T17:23:16Z", "author": {"login": "vmuzikar"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/AbstractKeycloakTest.java", "diffHunk": "@@ -16,640 +16,16 @@\n  */\n package org.keycloak.testsuite;\n \n-import io.appium.java_client.AppiumDriver;\n-import org.apache.commons.configuration.ConfigurationException;\n-import org.apache.commons.configuration.PropertiesConfiguration;\n-import org.jboss.arquillian.container.test.api.RunAsClient;\n-import org.jboss.arquillian.drone.api.annotation.Drone;\n-import org.jboss.arquillian.graphene.page.Page;\n-import org.jboss.arquillian.test.api.ArquillianResource;\n-import org.jboss.logging.Logger;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.runner.RunWith;\n-import org.keycloak.admin.client.Keycloak;\n-import org.keycloak.admin.client.resource.AuthenticationManagementResource;\n-import org.keycloak.admin.client.resource.RealmsResource;\n-import org.keycloak.admin.client.resource.UserResource;\n-import org.keycloak.admin.client.resource.UsersResource;\n-import org.keycloak.common.util.KeycloakUriBuilder;\n-import org.keycloak.common.util.Time;\n-import org.keycloak.representations.idm.ClientRepresentation;\n-import org.keycloak.representations.idm.RealmRepresentation;\n-import org.keycloak.representations.idm.RequiredActionProviderRepresentation;\n-import org.keycloak.representations.idm.UserRepresentation;\n-import org.keycloak.services.resources.account.AccountFormService;\n-import org.keycloak.testsuite.admin.ApiUtil;\n-import org.keycloak.testsuite.arquillian.AuthServerTestEnricher;\n-import org.keycloak.testsuite.arquillian.KcArquillian;\n-import org.keycloak.testsuite.arquillian.SuiteContext;\n-import org.keycloak.testsuite.arquillian.TestContext;\n-import org.keycloak.testsuite.auth.page.AuthRealm;\n-import org.keycloak.testsuite.auth.page.AuthServer;\n-import org.keycloak.testsuite.auth.page.AuthServerContextRoot;\n-import org.keycloak.testsuite.auth.page.WelcomePage;\n-import org.keycloak.testsuite.auth.page.account.Account;\n-import org.keycloak.testsuite.auth.page.login.OIDCLogin;\n-import org.keycloak.testsuite.auth.page.login.UpdatePassword;\n-import org.keycloak.testsuite.client.KeycloakTestingClient;\n-import org.keycloak.testsuite.pages.LoginPasswordUpdatePage;\n-import org.keycloak.testsuite.util.DroneUtils;\n-import org.keycloak.testsuite.util.OAuthClient;\n-import org.keycloak.testsuite.util.TestCleanup;\n-import org.keycloak.testsuite.util.TestEventsLogger;\n-import org.openqa.selenium.WebDriver;\n-\n-import javax.ws.rs.NotFoundException;\n-import javax.ws.rs.core.UriBuilder;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.PipedInputStream;\n-import java.io.PipedOutputStream;\n-import java.io.PrintWriter;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Calendar;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Scanner;\n-\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertThat;\n-import static org.keycloak.testsuite.admin.Users.setPasswordFor;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_HOST;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_PORT;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_SCHEME;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_SSL_REQUIRED;\n-import static org.keycloak.testsuite.auth.page.AuthRealm.MASTER;\n-import static org.keycloak.testsuite.util.URLUtils.navigateToUri;\n-import static org.keycloak.testsuite.util.ServerURLs.removeDefaultPorts;\n+import org.keycloak.common.Profile;\n+import org.keycloak.testsuite.arquillian.annotation.DisableFeature;\n \n /**\n- *\n- * @author tkyjovsk\n+ * Old tests that use AbstractKeycloakTest assume that we are using the old\n+ * account console.\n+ * \n+ * @author Stan Silvert\n  */\n-@RunWith(KcArquillian.class)\n-@RunAsClient\n-public abstract class AbstractKeycloakTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MDAxMA=="}, "originalCommit": {"oid": "d8e95dc5c44531101142b0895890215e2041191d"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEzNjMzNA==", "bodyText": "@vmuzikar It makes sense to me. However, could you please run the whole testsuite with these changes? There are quite a lot of tests using it, so we should make sure this doesn't break something.", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r462136334", "createdAt": "2020-07-29T08:40:42Z", "author": {"login": "mhajas"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/AbstractKeycloakTest.java", "diffHunk": "@@ -16,640 +16,16 @@\n  */\n package org.keycloak.testsuite;\n \n-import io.appium.java_client.AppiumDriver;\n-import org.apache.commons.configuration.ConfigurationException;\n-import org.apache.commons.configuration.PropertiesConfiguration;\n-import org.jboss.arquillian.container.test.api.RunAsClient;\n-import org.jboss.arquillian.drone.api.annotation.Drone;\n-import org.jboss.arquillian.graphene.page.Page;\n-import org.jboss.arquillian.test.api.ArquillianResource;\n-import org.jboss.logging.Logger;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.runner.RunWith;\n-import org.keycloak.admin.client.Keycloak;\n-import org.keycloak.admin.client.resource.AuthenticationManagementResource;\n-import org.keycloak.admin.client.resource.RealmsResource;\n-import org.keycloak.admin.client.resource.UserResource;\n-import org.keycloak.admin.client.resource.UsersResource;\n-import org.keycloak.common.util.KeycloakUriBuilder;\n-import org.keycloak.common.util.Time;\n-import org.keycloak.representations.idm.ClientRepresentation;\n-import org.keycloak.representations.idm.RealmRepresentation;\n-import org.keycloak.representations.idm.RequiredActionProviderRepresentation;\n-import org.keycloak.representations.idm.UserRepresentation;\n-import org.keycloak.services.resources.account.AccountFormService;\n-import org.keycloak.testsuite.admin.ApiUtil;\n-import org.keycloak.testsuite.arquillian.AuthServerTestEnricher;\n-import org.keycloak.testsuite.arquillian.KcArquillian;\n-import org.keycloak.testsuite.arquillian.SuiteContext;\n-import org.keycloak.testsuite.arquillian.TestContext;\n-import org.keycloak.testsuite.auth.page.AuthRealm;\n-import org.keycloak.testsuite.auth.page.AuthServer;\n-import org.keycloak.testsuite.auth.page.AuthServerContextRoot;\n-import org.keycloak.testsuite.auth.page.WelcomePage;\n-import org.keycloak.testsuite.auth.page.account.Account;\n-import org.keycloak.testsuite.auth.page.login.OIDCLogin;\n-import org.keycloak.testsuite.auth.page.login.UpdatePassword;\n-import org.keycloak.testsuite.client.KeycloakTestingClient;\n-import org.keycloak.testsuite.pages.LoginPasswordUpdatePage;\n-import org.keycloak.testsuite.util.DroneUtils;\n-import org.keycloak.testsuite.util.OAuthClient;\n-import org.keycloak.testsuite.util.TestCleanup;\n-import org.keycloak.testsuite.util.TestEventsLogger;\n-import org.openqa.selenium.WebDriver;\n-\n-import javax.ws.rs.NotFoundException;\n-import javax.ws.rs.core.UriBuilder;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.PipedInputStream;\n-import java.io.PipedOutputStream;\n-import java.io.PrintWriter;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Calendar;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Scanner;\n-\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertThat;\n-import static org.keycloak.testsuite.admin.Users.setPasswordFor;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_HOST;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_PORT;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_SCHEME;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_SSL_REQUIRED;\n-import static org.keycloak.testsuite.auth.page.AuthRealm.MASTER;\n-import static org.keycloak.testsuite.util.URLUtils.navigateToUri;\n-import static org.keycloak.testsuite.util.ServerURLs.removeDefaultPorts;\n+import org.keycloak.common.Profile;\n+import org.keycloak.testsuite.arquillian.annotation.DisableFeature;\n \n /**\n- *\n- * @author tkyjovsk\n+ * Old tests that use AbstractKeycloakTest assume that we are using the old\n+ * account console.\n+ * \n+ * @author Stan Silvert\n  */\n-@RunWith(KcArquillian.class)\n-@RunAsClient\n-public abstract class AbstractKeycloakTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MDAxMA=="}, "originalCommit": {"oid": "d8e95dc5c44531101142b0895890215e2041191d"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1MDM4Mg==", "bodyText": "@mhajas Sure, I plan to do that once @ssilvert approves the changes as well. Thank you for checking it!", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r462150382", "createdAt": "2020-07-29T09:03:48Z", "author": {"login": "vmuzikar"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/AbstractKeycloakTest.java", "diffHunk": "@@ -16,640 +16,16 @@\n  */\n package org.keycloak.testsuite;\n \n-import io.appium.java_client.AppiumDriver;\n-import org.apache.commons.configuration.ConfigurationException;\n-import org.apache.commons.configuration.PropertiesConfiguration;\n-import org.jboss.arquillian.container.test.api.RunAsClient;\n-import org.jboss.arquillian.drone.api.annotation.Drone;\n-import org.jboss.arquillian.graphene.page.Page;\n-import org.jboss.arquillian.test.api.ArquillianResource;\n-import org.jboss.logging.Logger;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.runner.RunWith;\n-import org.keycloak.admin.client.Keycloak;\n-import org.keycloak.admin.client.resource.AuthenticationManagementResource;\n-import org.keycloak.admin.client.resource.RealmsResource;\n-import org.keycloak.admin.client.resource.UserResource;\n-import org.keycloak.admin.client.resource.UsersResource;\n-import org.keycloak.common.util.KeycloakUriBuilder;\n-import org.keycloak.common.util.Time;\n-import org.keycloak.representations.idm.ClientRepresentation;\n-import org.keycloak.representations.idm.RealmRepresentation;\n-import org.keycloak.representations.idm.RequiredActionProviderRepresentation;\n-import org.keycloak.representations.idm.UserRepresentation;\n-import org.keycloak.services.resources.account.AccountFormService;\n-import org.keycloak.testsuite.admin.ApiUtil;\n-import org.keycloak.testsuite.arquillian.AuthServerTestEnricher;\n-import org.keycloak.testsuite.arquillian.KcArquillian;\n-import org.keycloak.testsuite.arquillian.SuiteContext;\n-import org.keycloak.testsuite.arquillian.TestContext;\n-import org.keycloak.testsuite.auth.page.AuthRealm;\n-import org.keycloak.testsuite.auth.page.AuthServer;\n-import org.keycloak.testsuite.auth.page.AuthServerContextRoot;\n-import org.keycloak.testsuite.auth.page.WelcomePage;\n-import org.keycloak.testsuite.auth.page.account.Account;\n-import org.keycloak.testsuite.auth.page.login.OIDCLogin;\n-import org.keycloak.testsuite.auth.page.login.UpdatePassword;\n-import org.keycloak.testsuite.client.KeycloakTestingClient;\n-import org.keycloak.testsuite.pages.LoginPasswordUpdatePage;\n-import org.keycloak.testsuite.util.DroneUtils;\n-import org.keycloak.testsuite.util.OAuthClient;\n-import org.keycloak.testsuite.util.TestCleanup;\n-import org.keycloak.testsuite.util.TestEventsLogger;\n-import org.openqa.selenium.WebDriver;\n-\n-import javax.ws.rs.NotFoundException;\n-import javax.ws.rs.core.UriBuilder;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.PipedInputStream;\n-import java.io.PipedOutputStream;\n-import java.io.PrintWriter;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Calendar;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Scanner;\n-\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertThat;\n-import static org.keycloak.testsuite.admin.Users.setPasswordFor;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_HOST;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_PORT;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_SCHEME;\n-import static org.keycloak.testsuite.util.ServerURLs.AUTH_SERVER_SSL_REQUIRED;\n-import static org.keycloak.testsuite.auth.page.AuthRealm.MASTER;\n-import static org.keycloak.testsuite.util.URLUtils.navigateToUri;\n-import static org.keycloak.testsuite.util.ServerURLs.removeDefaultPorts;\n+import org.keycloak.common.Profile;\n+import org.keycloak.testsuite.arquillian.annotation.DisableFeature;\n \n /**\n- *\n- * @author tkyjovsk\n+ * Old tests that use AbstractKeycloakTest assume that we are using the old\n+ * account console.\n+ * \n+ * @author Stan Silvert\n  */\n-@RunWith(KcArquillian.class)\n-@RunAsClient\n-public abstract class AbstractKeycloakTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MDAxMA=="}, "originalCommit": {"oid": "d8e95dc5c44531101142b0895890215e2041191d"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1Nzk4MzIwOnYy", "diffSide": "LEFT", "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/ApplicationsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDoxOTo0NVrOG0xlNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDoxMToxNVrOG1IAeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MTQ3OQ==", "bodyText": "Should we assert the \"normal\" URL instead? This way I think we're not checking the URL at all.", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r457991479", "createdAt": "2020-07-21T10:19:45Z", "author": {"login": "vmuzikar"}, "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/ApplicationsTest.java", "diffHunk": "@@ -99,24 +99,23 @@ public void toggleApplicationDetailsTest() throws Exception {\n         assertFalse(applications.isEmpty());\n         Map<String, ApplicationsPage.ClientRepresentation> apps = applications.stream().collect(Collectors.toMap(x -> x.getClientId(), x -> x));\n         assertThat(apps.keySet(), containsInAnyOrder(\"always-display-client\", \"account-console\"));\n-        assertClientRep(apps.get(\"account-console\"), \"Account Console\", false, true, getAuthServerRoot() + \"realms/test/account/\", true);\n-        assertClientRep(apps.get(\"always-display-client\"), \"Always Display Client\", false, false, getAuthServerRoot() + \"realms/master/app/always-display-client\", false);\n+        assertClientRep(apps.get(\"account-console\"), \"Account Console\", false, true, true);\n+        assertClientRep(apps.get(\"always-display-client\"), \"Always Display Client\", false, false, false);\n \n         applicationsPage.toggleApplicationDetails(\"account-console\");\n         applications = applicationsPage.getApplications();\n         assertFalse(applications.isEmpty());\n         apps = applications.stream().collect(Collectors.toMap(x -> x.getClientId(), x -> x));\n         assertThat(apps.keySet(), containsInAnyOrder(\"always-display-client\", \"account-console\"));\n-        assertClientRep(apps.get(\"account-console\"), \"Account Console\", false, true, getAuthServerRoot() + \"realms/test/account/\", false);\n-        assertClientRep(apps.get(\"always-display-client\"), \"Always Display Client\", false, false, getAuthServerRoot() + \"realms/master/app/always-display-client\", false);\n+        assertClientRep(apps.get(\"account-console\"), \"Account Console\", false, true, false);\n+        assertClientRep(apps.get(\"always-display-client\"), \"Always Display Client\", false, false, false);\n     }\n \n-    private void assertClientRep(ApplicationsPage.ClientRepresentation clientRep, String name, boolean userConsentRequired, boolean inUse, String effectiveUrl, boolean applicationDetailsVisible) {\n+    private void assertClientRep(ApplicationsPage.ClientRepresentation clientRep, String name, boolean userConsentRequired, boolean inUse, boolean applicationDetailsVisible) {\n         assertNotNull(clientRep);\n         assertEquals(name, clientRep.getClientName());\n         assertEquals(userConsentRequired, clientRep.isUserConsentRequired());\n         assertEquals(inUse, clientRep.isInUse());\n-        assertEquals(effectiveUrl, clientRep.getEffectiveUrl());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8e95dc5c44531101142b0895890215e2041191d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM1ODkwNA==", "bodyText": "Yes, I'll look into that.", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r458358904", "createdAt": "2020-07-21T20:11:15Z", "author": {"login": "ssilvert"}, "path": "testsuite/integration-arquillian/tests/other/base-ui/src/test/java/org/keycloak/testsuite/ui/account2/ApplicationsTest.java", "diffHunk": "@@ -99,24 +99,23 @@ public void toggleApplicationDetailsTest() throws Exception {\n         assertFalse(applications.isEmpty());\n         Map<String, ApplicationsPage.ClientRepresentation> apps = applications.stream().collect(Collectors.toMap(x -> x.getClientId(), x -> x));\n         assertThat(apps.keySet(), containsInAnyOrder(\"always-display-client\", \"account-console\"));\n-        assertClientRep(apps.get(\"account-console\"), \"Account Console\", false, true, getAuthServerRoot() + \"realms/test/account/\", true);\n-        assertClientRep(apps.get(\"always-display-client\"), \"Always Display Client\", false, false, getAuthServerRoot() + \"realms/master/app/always-display-client\", false);\n+        assertClientRep(apps.get(\"account-console\"), \"Account Console\", false, true, true);\n+        assertClientRep(apps.get(\"always-display-client\"), \"Always Display Client\", false, false, false);\n \n         applicationsPage.toggleApplicationDetails(\"account-console\");\n         applications = applicationsPage.getApplications();\n         assertFalse(applications.isEmpty());\n         apps = applications.stream().collect(Collectors.toMap(x -> x.getClientId(), x -> x));\n         assertThat(apps.keySet(), containsInAnyOrder(\"always-display-client\", \"account-console\"));\n-        assertClientRep(apps.get(\"account-console\"), \"Account Console\", false, true, getAuthServerRoot() + \"realms/test/account/\", false);\n-        assertClientRep(apps.get(\"always-display-client\"), \"Always Display Client\", false, false, getAuthServerRoot() + \"realms/master/app/always-display-client\", false);\n+        assertClientRep(apps.get(\"account-console\"), \"Account Console\", false, true, false);\n+        assertClientRep(apps.get(\"always-display-client\"), \"Always Display Client\", false, false, false);\n     }\n \n-    private void assertClientRep(ApplicationsPage.ClientRepresentation clientRep, String name, boolean userConsentRequired, boolean inUse, String effectiveUrl, boolean applicationDetailsVisible) {\n+    private void assertClientRep(ApplicationsPage.ClientRepresentation clientRep, String name, boolean userConsentRequired, boolean inUse, boolean applicationDetailsVisible) {\n         assertNotNull(clientRep);\n         assertEquals(name, clientRep.getClientName());\n         assertEquals(userConsentRequired, clientRep.isUserConsentRequired());\n         assertEquals(inUse, clientRep.isInUse());\n-        assertEquals(effectiveUrl, clientRep.getEffectiveUrl());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MTQ3OQ=="}, "originalCommit": {"oid": "d8e95dc5c44531101142b0895890215e2041191d"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODA1NzIxOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/theme/DefaultThemeManager.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDo0MToyMFrOG0yRwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjowNjoyOFrOG1T-mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAwMjg4MQ==", "bodyText": "I'm not sure if it isn't confusing that all themes (even the old ones) use v2 with the old keycloak still available. The problem I see is that keycloak and keycloak.v2 are technically same themes (except account console) but the v2 could make the impression something's new in all themes.\nBut I'm ok with this if @stianst is.", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r458002881", "createdAt": "2020-07-21T10:41:20Z", "author": {"login": "vmuzikar"}, "path": "services/src/main/java/org/keycloak/theme/DefaultThemeManager.java", "diffHunk": "@@ -72,7 +73,7 @@ public Theme getTheme(String name, Theme.Type type) {\n         if (theme == null) {\n             theme = loadTheme(name, type);\n             if (theme == null) {\n-                theme = loadTheme(\"keycloak\", type);\n+                theme = loadTheme(\"keycloak.v2\", type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8e95dc5c44531101142b0895890215e2041191d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2MjY3NQ==", "bodyText": "This line of code is only used when you haven't selected any theme.  It shows up in the UI as \"Select one\".\nYou do see both keycloak and keycloak.v2 in the dropdown when you go to select a theme.  But that actually turns out kind of nice because there is some symmetry.   And without it, the code above wouldn't work.  You would need special logic to know that if it's a certain type then you have to fall back to \"keycloak\".", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r458362675", "createdAt": "2020-07-21T20:18:26Z", "author": {"login": "ssilvert"}, "path": "services/src/main/java/org/keycloak/theme/DefaultThemeManager.java", "diffHunk": "@@ -72,7 +73,7 @@ public Theme getTheme(String name, Theme.Type type) {\n         if (theme == null) {\n             theme = loadTheme(name, type);\n             if (theme == null) {\n-                theme = loadTheme(\"keycloak\", type);\n+                theme = loadTheme(\"keycloak.v2\", type);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAwMjg4MQ=="}, "originalCommit": {"oid": "d8e95dc5c44531101142b0895890215e2041191d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU1NTAzNA==", "bodyText": "Yes, the line I selected here is not very accurate. My comment above is more generic \u2013 if it's ok to have identical keycloak and keycloak.v2. I'll wait for @stianst decision here.", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r458555034", "createdAt": "2020-07-22T06:06:28Z", "author": {"login": "vmuzikar"}, "path": "services/src/main/java/org/keycloak/theme/DefaultThemeManager.java", "diffHunk": "@@ -72,7 +73,7 @@ public Theme getTheme(String name, Theme.Type type) {\n         if (theme == null) {\n             theme = loadTheme(name, type);\n             if (theme == null) {\n-                theme = loadTheme(\"keycloak\", type);\n+                theme = loadTheme(\"keycloak.v2\", type);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAwMjg4MQ=="}, "originalCommit": {"oid": "d8e95dc5c44531101142b0895890215e2041191d"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3OTExMDQ3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/org/keycloak/common/Version.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNTo1Mzo1OVrOHyz0tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQxODozMjo0NlrOHzMxaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAzOTkyNw==", "bodyText": "This doesn't seem to be used anywhere.", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r523039927", "createdAt": "2020-11-13T15:53:59Z", "author": {"login": "vmuzikar"}, "path": "common/src/main/java/org/keycloak/common/Version.java", "diffHunk": "@@ -35,6 +35,7 @@\n     public static String RESOURCES_VERSION;\n     public static String BUILD_TIME;\n     public static String DEFAULT_PROFILE;\n+    public static String DEFAULT_THEME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "734ffb8f4212a947297935b0542f9a16fd02098f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1NjI4NA==", "bodyText": "Yes, missed that one.", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r523156284", "createdAt": "2020-11-13T18:46:43Z", "author": {"login": "ssilvert"}, "path": "common/src/main/java/org/keycloak/common/Version.java", "diffHunk": "@@ -35,6 +35,7 @@\n     public static String RESOURCES_VERSION;\n     public static String BUILD_TIME;\n     public static String DEFAULT_PROFILE;\n+    public static String DEFAULT_THEME;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAzOTkyNw=="}, "originalCommit": {"oid": "734ffb8f4212a947297935b0542f9a16fd02098f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ0ODY4Mw==", "bodyText": "This doesn't seem to be used anywhere.\n\nFixed", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r523448683", "createdAt": "2020-11-14T18:32:46Z", "author": {"login": "ssilvert"}, "path": "common/src/main/java/org/keycloak/common/Version.java", "diffHunk": "@@ -35,6 +35,7 @@\n     public static String RESOURCES_VERSION;\n     public static String BUILD_TIME;\n     public static String DEFAULT_PROFILE;\n+    public static String DEFAULT_THEME;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAzOTkyNw=="}, "originalCommit": {"oid": "734ffb8f4212a947297935b0542f9a16fd02098f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3OTEzOTUzOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/theme/DefaultThemeManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNjowMDo1NFrOHy0GVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODo0Nzo0M1rOHy69MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA0NDQzOQ==", "bodyText": "I think we shouldn't hardcode this here. Cannot we have some property for this is Theme.Type, perhaps?", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r523044439", "createdAt": "2020-11-13T16:00:54Z", "author": {"login": "vmuzikar"}, "path": "services/src/main/java/org/keycloak/theme/DefaultThemeManager.java", "diffHunk": "@@ -62,6 +64,14 @@ public Theme getTheme(Theme.Type type) {\n         return getTheme(name, type);\n     }\n \n+    private String typeBasedDefault(Theme.Type type) {\n+        if ((type == Theme.Type.ACCOUNT) && isAccount2Enabled) {\n+            return \"keycloak.v2\";\n+        }\n+        \n+        return \"keycloak\";\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "734ffb8f4212a947297935b0542f9a16fd02098f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1Njc4NQ==", "bodyText": "That's the way this has always worked.  It's kind of a super-fallback.", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r523156785", "createdAt": "2020-11-13T18:47:43Z", "author": {"login": "ssilvert"}, "path": "services/src/main/java/org/keycloak/theme/DefaultThemeManager.java", "diffHunk": "@@ -62,6 +64,14 @@ public Theme getTheme(Theme.Type type) {\n         return getTheme(name, type);\n     }\n \n+    private String typeBasedDefault(Theme.Type type) {\n+        if ((type == Theme.Type.ACCOUNT) && isAccount2Enabled) {\n+            return \"keycloak.v2\";\n+        }\n+        \n+        return \"keycloak\";\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA0NDQzOQ=="}, "originalCommit": {"oid": "734ffb8f4212a947297935b0542f9a16fd02098f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3OTE0MTcwOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/theme/DefaultThemeManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNjowMTozMVrOHy0Hww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxODo1MDoxMVrOHy7CUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA0NDgwMw==", "bodyText": "I haven't deeply investigated this, but it seems to me a bit suspicious. Why is it even necessary? Don't we set the correct theme here?\n\n  \n    \n      keycloak/services/src/main/java/org/keycloak/theme/DefaultThemeManager.java\n    \n    \n         Line 85\n      in\n      734ffb8\n    \n    \n    \n    \n\n        \n          \n           theme = loadTheme(typeBasedDefault(type), type);", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r523044803", "createdAt": "2020-11-13T16:01:31Z", "author": {"login": "vmuzikar"}, "path": "services/src/main/java/org/keycloak/theme/DefaultThemeManager.java", "diffHunk": "@@ -81,9 +91,18 @@ public Theme getTheme(String name, Theme.Type type) {\n                 theme = factory.addCachedTheme(name, type, theme);\n             }\n         }\n+        \n+        if (!isAccount2Enabled && theme.getName().equals(\"keycloak.v2\")) {\n+            theme = loadTheme(\"keycloak\", type);\n+        }\n+        \n+        if (!isAccount2Enabled && theme.getName().equals(\"rhsso.v2\")) {\n+            theme = loadTheme(\"rhsso\", type);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "734ffb8f4212a947297935b0542f9a16fd02098f"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1ODA5OA==", "bodyText": "This is needed in the case where you disable the new account console.  The line you cite is rarely executed.", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r523158098", "createdAt": "2020-11-13T18:50:11Z", "author": {"login": "ssilvert"}, "path": "services/src/main/java/org/keycloak/theme/DefaultThemeManager.java", "diffHunk": "@@ -81,9 +91,18 @@ public Theme getTheme(String name, Theme.Type type) {\n                 theme = factory.addCachedTheme(name, type, theme);\n             }\n         }\n+        \n+        if (!isAccount2Enabled && theme.getName().equals(\"keycloak.v2\")) {\n+            theme = loadTheme(\"keycloak\", type);\n+        }\n+        \n+        if (!isAccount2Enabled && theme.getName().equals(\"rhsso.v2\")) {\n+            theme = loadTheme(\"rhsso\", type);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA0NDgwMw=="}, "originalCommit": {"oid": "734ffb8f4212a947297935b0542f9a16fd02098f"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3OTIwNTQ5OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/theme/DefaultThemeSelectorProvider.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNjoxNzo0MFrOHy0u1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDo1MTowN1rOH1n88g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA1NDgwNw==", "bodyText": "Again, I'm not sure this is the right place to hardcode this. What if we have more v2 themes in the future? Cannot we have some property for this is Theme.Type, perhaps?", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r523054807", "createdAt": "2020-11-13T16:17:40Z", "author": {"login": "vmuzikar"}, "path": "services/src/main/java/org/keycloak/theme/DefaultThemeSelectorProvider.java", "diffHunk": "@@ -47,6 +49,9 @@ public String getThemeName(Theme.Type type) {\n \n         if (name == null || name.isEmpty()) {\n             name = Config.scope(\"theme\").get(\"default\", Version.NAME.toLowerCase());\n+            if ((type == Theme.Type.ACCOUNT) && isAccount2Enabled) {\n+                name = name.concat(\".v2\");\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "734ffb8f4212a947297935b0542f9a16fd02098f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE2MjU4Ng==", "bodyText": "Again, I'm not sure this is the right place to hardcode this. What if we have more v2 themes in the future? Cannot we have some property for this is Theme.Type, perhaps?\n\nThis is what Stian wanted instead of the way I coded it before (which did use a property).", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r523162586", "createdAt": "2020-11-13T18:58:47Z", "author": {"login": "ssilvert"}, "path": "services/src/main/java/org/keycloak/theme/DefaultThemeSelectorProvider.java", "diffHunk": "@@ -47,6 +49,9 @@ public String getThemeName(Theme.Type type) {\n \n         if (name == null || name.isEmpty()) {\n             name = Config.scope(\"theme\").get(\"default\", Version.NAME.toLowerCase());\n+            if ((type == Theme.Type.ACCOUNT) && isAccount2Enabled) {\n+                name = name.concat(\".v2\");\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA1NDgwNw=="}, "originalCommit": {"oid": "734ffb8f4212a947297935b0542f9a16fd02098f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk5MTE1NA==", "bodyText": "Ok. Even though I'm a bit concerned about that we have the \"v2\" logic spread at many places (and therefore it won't be quite straightforward to e.g. add v2 to other themes, or v3 to this theme), I'm ok with it since @stianst is.", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r525991154", "createdAt": "2020-11-18T10:51:07Z", "author": {"login": "vmuzikar"}, "path": "services/src/main/java/org/keycloak/theme/DefaultThemeSelectorProvider.java", "diffHunk": "@@ -47,6 +49,9 @@ public String getThemeName(Theme.Type type) {\n \n         if (name == null || name.isEmpty()) {\n             name = Config.scope(\"theme\").get(\"default\", Version.NAME.toLowerCase());\n+            if ((type == Theme.Type.ACCOUNT) && isAccount2Enabled) {\n+                name = name.concat(\".v2\");\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA1NDgwNw=="}, "originalCommit": {"oid": "734ffb8f4212a947297935b0542f9a16fd02098f"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3OTM1NjAzOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/theme/DefaultThemeManager.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNjo1NDo0M1rOHy2MBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDo0Nzo0M1rOH1n0RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA3ODY2MA==", "bodyText": "IMHO this logic deserves a test.", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r523078660", "createdAt": "2020-11-13T16:54:43Z", "author": {"login": "vmuzikar"}, "path": "services/src/main/java/org/keycloak/theme/DefaultThemeManager.java", "diffHunk": "@@ -62,6 +64,14 @@ public Theme getTheme(Theme.Type type) {\n         return getTheme(name, type);\n     }\n \n+    private String typeBasedDefault(Theme.Type type) {\n+        if ((type == Theme.Type.ACCOUNT) && isAccount2Enabled) {\n+            return \"keycloak.v2\";\n+        }\n+        \n+        return \"keycloak\";\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "734ffb8f4212a947297935b0542f9a16fd02098f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE3NDk0Mw==", "bodyText": "This code only executes when a theme is set for the realm but it can't find a ThemeProvider.  I'm not even sure how to make that happen, so I'm guessing it would be a bear to write a test.  We have never had a test for that and it's really not that important whether it returns \"keycloak.v2\" or \"keycloak\" anyway.  It's just a fallback.", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r523174943", "createdAt": "2020-11-13T19:23:48Z", "author": {"login": "ssilvert"}, "path": "services/src/main/java/org/keycloak/theme/DefaultThemeManager.java", "diffHunk": "@@ -62,6 +64,14 @@ public Theme getTheme(Theme.Type type) {\n         return getTheme(name, type);\n     }\n \n+    private String typeBasedDefault(Theme.Type type) {\n+        if ((type == Theme.Type.ACCOUNT) && isAccount2Enabled) {\n+            return \"keycloak.v2\";\n+        }\n+        \n+        return \"keycloak\";\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA3ODY2MA=="}, "originalCommit": {"oid": "734ffb8f4212a947297935b0542f9a16fd02098f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk4ODkzMg==", "bodyText": "What I had in mind was a simple test that would focus how disabling/enabling NAC behaves. It should check whether it defaults to a correct theme when NAC is disabled and enabled, respectively.\nWe didn't have such test before because we never had such functionality. :)", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r525988932", "createdAt": "2020-11-18T10:47:43Z", "author": {"login": "vmuzikar"}, "path": "services/src/main/java/org/keycloak/theme/DefaultThemeManager.java", "diffHunk": "@@ -62,6 +64,14 @@ public Theme getTheme(Theme.Type type) {\n         return getTheme(name, type);\n     }\n \n+    private String typeBasedDefault(Theme.Type type) {\n+        if ((type == Theme.Type.ACCOUNT) && isAccount2Enabled) {\n+            return \"keycloak.v2\";\n+        }\n+        \n+        return \"keycloak\";\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA3ODY2MA=="}, "originalCommit": {"oid": "734ffb8f4212a947297935b0542f9a16fd02098f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3OTQ5ODIwOnYy", "diffSide": "RIGHT", "path": "themes/src/main/resources/theme/keycloak.v2/account/src/package.json", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNzoyMDozMVrOHy3qHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQxODozMzo0MFrOHzMxqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzEwMjc0OA==", "bodyText": "This comment is unrelated to this line.\nThere seems to be something wrong with the dist. It's ~50MB larger. I think the resources filtering doesn't work anymore.", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r523102748", "createdAt": "2020-11-13T17:20:31Z", "author": {"login": "vmuzikar"}, "path": "themes/src/main/resources/theme/keycloak.v2/account/src/package.json", "diffHunk": "@@ -1,7 +1,7 @@\n {\n-  \"name\": \"keycloak-preview\",\n+  \"name\": \"keycloak.v2\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "734ffb8f4212a947297935b0542f9a16fd02098f"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE3NTcwNA==", "bodyText": "Good catch.  I'll check it out.", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r523175704", "createdAt": "2020-11-13T19:25:17Z", "author": {"login": "ssilvert"}, "path": "themes/src/main/resources/theme/keycloak.v2/account/src/package.json", "diffHunk": "@@ -1,7 +1,7 @@\n {\n-  \"name\": \"keycloak-preview\",\n+  \"name\": \"keycloak.v2\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzEwMjc0OA=="}, "originalCommit": {"oid": "734ffb8f4212a947297935b0542f9a16fd02098f"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ0ODc0Nw==", "bodyText": "This comment is unrelated to this line.\nThere seems to be something wrong with the dist. It's ~50MB larger. I think the resources filtering doesn't work anymore.\n\nShould be fixed now.", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r523448747", "createdAt": "2020-11-14T18:33:40Z", "author": {"login": "ssilvert"}, "path": "themes/src/main/resources/theme/keycloak.v2/account/src/package.json", "diffHunk": "@@ -1,7 +1,7 @@\n {\n-  \"name\": \"keycloak-preview\",\n+  \"name\": \"keycloak.v2\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzEwMjc0OA=="}, "originalCommit": {"oid": "734ffb8f4212a947297935b0542f9a16fd02098f"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NzgxNDYwOnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/AbstractKeycloakTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDo0MDoxMFrOH1nhZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDo0MDoxMFrOH1nhZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk4NDEwMw==", "bodyText": "I don't know what happened but my test fixes from ssilvert#10 were somehow merged wrong. This line definitely shouldn't be here... @ssilvert Did you do some rebase of my changes or something?\nCould you please fix it and re-run both pipelines?", "url": "https://github.com/keycloak/keycloak/pull/7267#discussion_r525984103", "createdAt": "2020-11-18T10:40:10Z", "author": {"login": "vmuzikar"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/AbstractKeycloakTest.java", "diffHunk": "@@ -96,6 +98,7 @@\n  */\n @RunWith(KcArquillian.class)\n @RunAsClient\n+@DisableFeature(value = Profile.Feature.ACCOUNT2, skipRestart = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20bc962a6e5266c74574f2204eefbb708edef20f"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3479, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}