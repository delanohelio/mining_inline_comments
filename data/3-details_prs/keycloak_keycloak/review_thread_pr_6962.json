{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5MTcyNzAz", "number": 6962, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODo1NzozNFrOD9hBdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTowODozMVrOD9hPcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODMwNzc1OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODo1NzozNFrOGXDu5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjoxOToyMVrOGXoRWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzMTU5MA==", "bodyText": "Is it possible to rename existing class LDAPConnectionTestManager to something like LDAPServerCapabilitiesManager and add the logic behind this into that class? This will allow that filling of some common connection properties (CONNECTION_URL, USE_TRUSTSTORE_SPI etc) can be probably some done in the shared code, which will be shared for existing method for testing connection and testing authentication", "url": "https://github.com/keycloak/keycloak/pull/6962#discussion_r426831590", "createdAt": "2020-05-18T18:57:34Z", "author": {"login": "mposolda"}, "path": "services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java", "diffHunk": "@@ -966,6 +981,43 @@ public Response testLDAPConnection(TestLdapConnectionRepresentation config) {\n                 config.getStartTls());\n     }\n \n+    /**\n+     * Get LDAP supported extensions.\n+     * @param config LDAP configuration\n+     * @return\n+     */\n+    @POST\n+    @Path(\"ldap-supported-extensions\")\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON)\n+    public Response getLDAPSupportedExtensions(TestLdapConnectionRepresentation config) {\n+\n+        auth.realm().requireManageRealm();\n+\n+        String bindCredential = handleSavedBindCredential(config.getComponentId(), config.getBindCredential());\n+\n+        // Create Factory Methods for LDAPConfig and LDAPIdentityStore in LDAPConnectionTestManager?\n+        MultivaluedHashMap<String, String> map = new MultivaluedHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9100184bdb3c819511419ec60e13690fb4dee97d"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQzMDIzMw==", "bodyText": "Done.", "url": "https://github.com/keycloak/keycloak/pull/6962#discussion_r427430233", "createdAt": "2020-05-19T16:19:21Z", "author": {"login": "cachescrubber"}, "path": "services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java", "diffHunk": "@@ -966,6 +981,43 @@ public Response testLDAPConnection(TestLdapConnectionRepresentation config) {\n                 config.getStartTls());\n     }\n \n+    /**\n+     * Get LDAP supported extensions.\n+     * @param config LDAP configuration\n+     * @return\n+     */\n+    @POST\n+    @Path(\"ldap-supported-extensions\")\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON)\n+    public Response getLDAPSupportedExtensions(TestLdapConnectionRepresentation config) {\n+\n+        auth.realm().requireManageRealm();\n+\n+        String bindCredential = handleSavedBindCredential(config.getComponentId(), config.getBindCredential());\n+\n+        // Create Factory Methods for LDAPConfig and LDAPIdentityStore in LDAPConnectionTestManager?\n+        MultivaluedHashMap<String, String> map = new MultivaluedHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzMTU5MA=="}, "originalCommit": {"oid": "9100184bdb3c819511419ec60e13690fb4dee97d"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODMxMTIzOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODo1ODozN1rOGXDxCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjoxOTowM1rOGXoQiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzMjEzNw==", "bodyText": "The AUTH_TYPE should be taken based on what is configured for the provider. In case that AUTH_TYPE is \"none\", it should use \"none\" here as well. Not sure if the representation object should be updated based on that to wrap this info?", "url": "https://github.com/keycloak/keycloak/pull/6962#discussion_r426832137", "createdAt": "2020-05-18T18:58:37Z", "author": {"login": "mposolda"}, "path": "services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java", "diffHunk": "@@ -966,6 +981,43 @@ public Response testLDAPConnection(TestLdapConnectionRepresentation config) {\n                 config.getStartTls());\n     }\n \n+    /**\n+     * Get LDAP supported extensions.\n+     * @param config LDAP configuration\n+     * @return\n+     */\n+    @POST\n+    @Path(\"ldap-supported-extensions\")\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON)\n+    public Response getLDAPSupportedExtensions(TestLdapConnectionRepresentation config) {\n+\n+        auth.realm().requireManageRealm();\n+\n+        String bindCredential = handleSavedBindCredential(config.getComponentId(), config.getBindCredential());\n+\n+        // Create Factory Methods for LDAPConfig and LDAPIdentityStore in LDAPConnectionTestManager?\n+        MultivaluedHashMap<String, String> map = new MultivaluedHashMap<>();\n+        map.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n+        map.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n+        map.add(LDAPConstants.AUTH_TYPE, LDAPConstants.AUTH_TYPE_SIMPLE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9100184bdb3c819511419ec60e13690fb4dee97d"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2MDg0OQ==", "bodyText": "That is because AUTH_TYPE is not part of org.keycloak.representations.idm.TestLdapConnectionRepresentation as you said. I think that the rootDSL query should be done using the same credentials then used later on, to avoid permission problems. So it might be unnecessary to pass AUTH_TYPE, unless something like SASL is added?", "url": "https://github.com/keycloak/keycloak/pull/6962#discussion_r426860849", "createdAt": "2020-05-18T19:56:44Z", "author": {"login": "cachescrubber"}, "path": "services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java", "diffHunk": "@@ -966,6 +981,43 @@ public Response testLDAPConnection(TestLdapConnectionRepresentation config) {\n                 config.getStartTls());\n     }\n \n+    /**\n+     * Get LDAP supported extensions.\n+     * @param config LDAP configuration\n+     * @return\n+     */\n+    @POST\n+    @Path(\"ldap-supported-extensions\")\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON)\n+    public Response getLDAPSupportedExtensions(TestLdapConnectionRepresentation config) {\n+\n+        auth.realm().requireManageRealm();\n+\n+        String bindCredential = handleSavedBindCredential(config.getComponentId(), config.getBindCredential());\n+\n+        // Create Factory Methods for LDAPConfig and LDAPIdentityStore in LDAPConnectionTestManager?\n+        MultivaluedHashMap<String, String> map = new MultivaluedHashMap<>();\n+        map.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n+        map.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n+        map.add(LDAPConstants.AUTH_TYPE, LDAPConstants.AUTH_TYPE_SIMPLE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzMjEzNw=="}, "originalCommit": {"oid": "9100184bdb3c819511419ec60e13690fb4dee97d"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE3MzQzNg==", "bodyText": "Yes, I think that it may be needed to either:\n\nadd authType as another option to TestLdapConnectionRepresentation.\nassume \"bindType\" none in case that bindDn and bindCredential are not set?\n\nIt seems that (2) might be easier? However the bindType none should be supported. In many cases, administrator sets the bindType \"none\" when configuring their LDAP provider. In this case, querying the LDAP server rootDSL should be also possible with the bindType \"none\" .", "url": "https://github.com/keycloak/keycloak/pull/6962#discussion_r427173436", "createdAt": "2020-05-19T09:48:15Z", "author": {"login": "mposolda"}, "path": "services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java", "diffHunk": "@@ -966,6 +981,43 @@ public Response testLDAPConnection(TestLdapConnectionRepresentation config) {\n                 config.getStartTls());\n     }\n \n+    /**\n+     * Get LDAP supported extensions.\n+     * @param config LDAP configuration\n+     * @return\n+     */\n+    @POST\n+    @Path(\"ldap-supported-extensions\")\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON)\n+    public Response getLDAPSupportedExtensions(TestLdapConnectionRepresentation config) {\n+\n+        auth.realm().requireManageRealm();\n+\n+        String bindCredential = handleSavedBindCredential(config.getComponentId(), config.getBindCredential());\n+\n+        // Create Factory Methods for LDAPConfig and LDAPIdentityStore in LDAPConnectionTestManager?\n+        MultivaluedHashMap<String, String> map = new MultivaluedHashMap<>();\n+        map.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n+        map.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n+        map.add(LDAPConstants.AUTH_TYPE, LDAPConstants.AUTH_TYPE_SIMPLE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzMjEzNw=="}, "originalCommit": {"oid": "9100184bdb3c819511419ec60e13690fb4dee97d"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQzMDAyNA==", "bodyText": "Done. I added the authType to TestLdapConnectionRepresentation.", "url": "https://github.com/keycloak/keycloak/pull/6962#discussion_r427430024", "createdAt": "2020-05-19T16:19:03Z", "author": {"login": "cachescrubber"}, "path": "services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java", "diffHunk": "@@ -966,6 +981,43 @@ public Response testLDAPConnection(TestLdapConnectionRepresentation config) {\n                 config.getStartTls());\n     }\n \n+    /**\n+     * Get LDAP supported extensions.\n+     * @param config LDAP configuration\n+     * @return\n+     */\n+    @POST\n+    @Path(\"ldap-supported-extensions\")\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON)\n+    public Response getLDAPSupportedExtensions(TestLdapConnectionRepresentation config) {\n+\n+        auth.realm().requireManageRealm();\n+\n+        String bindCredential = handleSavedBindCredential(config.getComponentId(), config.getBindCredential());\n+\n+        // Create Factory Methods for LDAPConfig and LDAPIdentityStore in LDAPConnectionTestManager?\n+        MultivaluedHashMap<String, String> map = new MultivaluedHashMap<>();\n+        map.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n+        map.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n+        map.add(LDAPConstants.AUTH_TYPE, LDAPConstants.AUTH_TYPE_SIMPLE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzMjEzNw=="}, "originalCommit": {"oid": "9100184bdb3c819511419ec60e13690fb4dee97d"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODMyODgxOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTowMzo1OFrOGXD75A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjoxODoyN1rOGXoO-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzNDkxNg==", "bodyText": "It will be better if response allows to differentiate between supportedControl, supportedExtensions and supportedFeatures. The JSON can possibly look like this:\n{ \n    \"supportedExtension\": [ \"1.3.6.1.4.1.1466.20036\" ],\n    \"supportedFeatures\": [ \"1.3.6.1.1.14\", \"1.3.6.1.4.1.4203.1.5.1\" ],\n    \"supportedControl\": [ \"1.2.840.113556.1.4.1413\", \"1.2.840.113556.1.4.2239\", \"1.2.840.113556.1.4.319\" ]\n}\n\nFeel free to create some internal JSON representation class for help with this - for example see TestLdapConnectionRepresentation for the inspiration", "url": "https://github.com/keycloak/keycloak/pull/6962#discussion_r426834916", "createdAt": "2020-05-18T19:03:58Z", "author": {"login": "mposolda"}, "path": "services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java", "diffHunk": "@@ -966,6 +981,43 @@ public Response testLDAPConnection(TestLdapConnectionRepresentation config) {\n                 config.getStartTls());\n     }\n \n+    /**\n+     * Get LDAP supported extensions.\n+     * @param config LDAP configuration\n+     * @return\n+     */\n+    @POST\n+    @Path(\"ldap-supported-extensions\")\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON)\n+    public Response getLDAPSupportedExtensions(TestLdapConnectionRepresentation config) {\n+\n+        auth.realm().requireManageRealm();\n+\n+        String bindCredential = handleSavedBindCredential(config.getComponentId(), config.getBindCredential());\n+\n+        // Create Factory Methods for LDAPConfig and LDAPIdentityStore in LDAPConnectionTestManager?\n+        MultivaluedHashMap<String, String> map = new MultivaluedHashMap<>();\n+        map.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n+        map.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n+        map.add(LDAPConstants.AUTH_TYPE, LDAPConstants.AUTH_TYPE_SIMPLE);\n+        map.add(LDAPConstants.BIND_DN, config.getBindDn());\n+        map.add(LDAPConstants.BIND_CREDENTIAL, bindCredential);\n+        IdentityStore ldapIdentityStore = new LDAPIdentityStore(session, new LDAPConfig(map));\n+\n+        Set<LDAPOid> ldapOids = ldapIdentityStore.queryServerCapabilities();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9100184bdb3c819511419ec60e13690fb4dee97d"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg0MTk0Mg==", "bodyText": "It will be also good to dump those supported extensions, features and controls to the server.log with the \"log.info\"", "url": "https://github.com/keycloak/keycloak/pull/6962#discussion_r426841942", "createdAt": "2020-05-18T19:17:55Z", "author": {"login": "mposolda"}, "path": "services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java", "diffHunk": "@@ -966,6 +981,43 @@ public Response testLDAPConnection(TestLdapConnectionRepresentation config) {\n                 config.getStartTls());\n     }\n \n+    /**\n+     * Get LDAP supported extensions.\n+     * @param config LDAP configuration\n+     * @return\n+     */\n+    @POST\n+    @Path(\"ldap-supported-extensions\")\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON)\n+    public Response getLDAPSupportedExtensions(TestLdapConnectionRepresentation config) {\n+\n+        auth.realm().requireManageRealm();\n+\n+        String bindCredential = handleSavedBindCredential(config.getComponentId(), config.getBindCredential());\n+\n+        // Create Factory Methods for LDAPConfig and LDAPIdentityStore in LDAPConnectionTestManager?\n+        MultivaluedHashMap<String, String> map = new MultivaluedHashMap<>();\n+        map.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n+        map.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n+        map.add(LDAPConstants.AUTH_TYPE, LDAPConstants.AUTH_TYPE_SIMPLE);\n+        map.add(LDAPConstants.BIND_DN, config.getBindDn());\n+        map.add(LDAPConstants.BIND_CREDENTIAL, bindCredential);\n+        IdentityStore ldapIdentityStore = new LDAPIdentityStore(session, new LDAPConfig(map));\n+\n+        Set<LDAPOid> ldapOids = ldapIdentityStore.queryServerCapabilities();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzNDkxNg=="}, "originalCommit": {"oid": "9100184bdb3c819511419ec60e13690fb4dee97d"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2Mjc5Mw==", "bodyText": "I though about that too, but my conclusion was it is practically not relevant whether a given OID is a control, extension or feature. This is why I refactored the method to \"capabilities\" in the first place. Do you think it is really necessary? The OID is unique anyway. Good point with the info log. Will be added.", "url": "https://github.com/keycloak/keycloak/pull/6962#discussion_r426862793", "createdAt": "2020-05-18T20:00:49Z", "author": {"login": "cachescrubber"}, "path": "services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java", "diffHunk": "@@ -966,6 +981,43 @@ public Response testLDAPConnection(TestLdapConnectionRepresentation config) {\n                 config.getStartTls());\n     }\n \n+    /**\n+     * Get LDAP supported extensions.\n+     * @param config LDAP configuration\n+     * @return\n+     */\n+    @POST\n+    @Path(\"ldap-supported-extensions\")\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON)\n+    public Response getLDAPSupportedExtensions(TestLdapConnectionRepresentation config) {\n+\n+        auth.realm().requireManageRealm();\n+\n+        String bindCredential = handleSavedBindCredential(config.getComponentId(), config.getBindCredential());\n+\n+        // Create Factory Methods for LDAPConfig and LDAPIdentityStore in LDAPConnectionTestManager?\n+        MultivaluedHashMap<String, String> map = new MultivaluedHashMap<>();\n+        map.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n+        map.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n+        map.add(LDAPConstants.AUTH_TYPE, LDAPConstants.AUTH_TYPE_SIMPLE);\n+        map.add(LDAPConstants.BIND_DN, config.getBindDn());\n+        map.add(LDAPConstants.BIND_CREDENTIAL, bindCredential);\n+        IdentityStore ldapIdentityStore = new LDAPIdentityStore(session, new LDAPConfig(map));\n+\n+        Set<LDAPOid> ldapOids = ldapIdentityStore.queryServerCapabilities();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzNDkxNg=="}, "originalCommit": {"oid": "9100184bdb3c819511419ec60e13690fb4dee97d"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE3NDQxNw==", "bodyText": "I think that it may be useful in general to differentiate between control, extension and feature.\nLDAP server itself also differentiates between those 3 things, so from this perspective, differentiation makes sense :)", "url": "https://github.com/keycloak/keycloak/pull/6962#discussion_r427174417", "createdAt": "2020-05-19T09:49:58Z", "author": {"login": "mposolda"}, "path": "services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java", "diffHunk": "@@ -966,6 +981,43 @@ public Response testLDAPConnection(TestLdapConnectionRepresentation config) {\n                 config.getStartTls());\n     }\n \n+    /**\n+     * Get LDAP supported extensions.\n+     * @param config LDAP configuration\n+     * @return\n+     */\n+    @POST\n+    @Path(\"ldap-supported-extensions\")\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON)\n+    public Response getLDAPSupportedExtensions(TestLdapConnectionRepresentation config) {\n+\n+        auth.realm().requireManageRealm();\n+\n+        String bindCredential = handleSavedBindCredential(config.getComponentId(), config.getBindCredential());\n+\n+        // Create Factory Methods for LDAPConfig and LDAPIdentityStore in LDAPConnectionTestManager?\n+        MultivaluedHashMap<String, String> map = new MultivaluedHashMap<>();\n+        map.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n+        map.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n+        map.add(LDAPConstants.AUTH_TYPE, LDAPConstants.AUTH_TYPE_SIMPLE);\n+        map.add(LDAPConstants.BIND_DN, config.getBindDn());\n+        map.add(LDAPConstants.BIND_CREDENTIAL, bindCredential);\n+        IdentityStore ldapIdentityStore = new LDAPIdentityStore(session, new LDAPConfig(map));\n+\n+        Set<LDAPOid> ldapOids = ldapIdentityStore.queryServerCapabilities();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzNDkxNg=="}, "originalCommit": {"oid": "9100184bdb3c819511419ec60e13690fb4dee97d"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQyOTYyNQ==", "bodyText": "Done.", "url": "https://github.com/keycloak/keycloak/pull/6962#discussion_r427429625", "createdAt": "2020-05-19T16:18:27Z", "author": {"login": "cachescrubber"}, "path": "services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java", "diffHunk": "@@ -966,6 +981,43 @@ public Response testLDAPConnection(TestLdapConnectionRepresentation config) {\n                 config.getStartTls());\n     }\n \n+    /**\n+     * Get LDAP supported extensions.\n+     * @param config LDAP configuration\n+     * @return\n+     */\n+    @POST\n+    @Path(\"ldap-supported-extensions\")\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON)\n+    public Response getLDAPSupportedExtensions(TestLdapConnectionRepresentation config) {\n+\n+        auth.realm().requireManageRealm();\n+\n+        String bindCredential = handleSavedBindCredential(config.getComponentId(), config.getBindCredential());\n+\n+        // Create Factory Methods for LDAPConfig and LDAPIdentityStore in LDAPConnectionTestManager?\n+        MultivaluedHashMap<String, String> map = new MultivaluedHashMap<>();\n+        map.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n+        map.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n+        map.add(LDAPConstants.AUTH_TYPE, LDAPConstants.AUTH_TYPE_SIMPLE);\n+        map.add(LDAPConstants.BIND_DN, config.getBindDn());\n+        map.add(LDAPConstants.BIND_CREDENTIAL, bindCredential);\n+        IdentityStore ldapIdentityStore = new LDAPIdentityStore(session, new LDAPConfig(map));\n+\n+        Set<LDAPOid> ldapOids = ldapIdentityStore.queryServerCapabilities();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzNDkxNg=="}, "originalCommit": {"oid": "9100184bdb3c819511419ec60e13690fb4dee97d"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODM0MzU1OnYy", "diffSide": "RIGHT", "path": "themes/src/main/resources/theme/base/admin/resources/js/controllers/users.js", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTowODozMVrOGXEFFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjoxNzo1OFrOGXoN4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzNzI3MA==", "bodyText": "This doesn't seem to work for me. My LDAP server has only single supportedExtension \"1.3.6.1.4.1.1466.20036\" and despite that, when I click on \"Query\" button, the \"Enable the LDAPv3 Password Modify Extended Operation\" is incorrectly switched to ON.\nHint: You can run LDAPEmbeddedServer from your IDE, which runs embedded ApacheDS server. That one doesn't have the passwdModifyOID enabled.", "url": "https://github.com/keycloak/keycloak/pull/6962#discussion_r426837270", "createdAt": "2020-05-18T19:08:31Z", "author": {"login": "mposolda"}, "path": "themes/src/main/resources/theme/base/admin/resources/js/controllers/users.js", "diffHunk": "@@ -1703,7 +1704,23 @@ module.controller('LDAPUserStorageCtrl', function($scope, $location, Notificatio\n         });\n     }\n \n-\n+    $scope.queryAndSetLdapSupportedExtensions = function() {\n+        console.log('LDAPCtrl: getLdapSupportedExtensions');\n+        const PASSWORD_MODIFY_OID = '1.3.6.1.4.1.4203.1.11.1';\n+\n+        $http.post(\n+            `${authUrl}/admin/realms/${realm.realm}/ldap-supported-extensions`,\n+            initConnectionTest(\"getLdapSupportedExtensions\", $scope.instance.config)).then(\n+            (response) => {\n+                Notifications.success(\"LDAP supported extensions successfully requested.\");\n+                const ldapOids = response.data;\n+                if (angular.isArray(ldapOids)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9100184bdb3c819511419ec60e13690fb4dee97d"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQyOTM0NA==", "bodyText": "Should be fixed.", "url": "https://github.com/keycloak/keycloak/pull/6962#discussion_r427429344", "createdAt": "2020-05-19T16:17:58Z", "author": {"login": "cachescrubber"}, "path": "themes/src/main/resources/theme/base/admin/resources/js/controllers/users.js", "diffHunk": "@@ -1703,7 +1704,23 @@ module.controller('LDAPUserStorageCtrl', function($scope, $location, Notificatio\n         });\n     }\n \n-\n+    $scope.queryAndSetLdapSupportedExtensions = function() {\n+        console.log('LDAPCtrl: getLdapSupportedExtensions');\n+        const PASSWORD_MODIFY_OID = '1.3.6.1.4.1.4203.1.11.1';\n+\n+        $http.post(\n+            `${authUrl}/admin/realms/${realm.realm}/ldap-supported-extensions`,\n+            initConnectionTest(\"getLdapSupportedExtensions\", $scope.instance.config)).then(\n+            (response) => {\n+                Notifications.success(\"LDAP supported extensions successfully requested.\");\n+                const ldapOids = response.data;\n+                if (angular.isArray(ldapOids)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzNzI3MA=="}, "originalCommit": {"oid": "9100184bdb3c819511419ec60e13690fb4dee97d"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3702, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}