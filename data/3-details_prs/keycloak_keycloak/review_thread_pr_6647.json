{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwODQ1MDMx", "number": 6647, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOTozMToxMVrODX9qsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOTozNDoxNlrODX9uIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDU0MTkzOnYy", "diffSide": "RIGHT", "path": "adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/SniSSLSocketFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOTozMToxMVrOFdjRwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOTozMToxMVrOFdjRwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzMTAwOQ==", "bodyText": "Should be final\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static AtomicBoolean skipSNIApplication = new AtomicBoolean(false);\n          \n          \n            \n                private static final AtomicBoolean skipSNIApplicationToSslSocket = new AtomicBoolean(false);", "url": "https://github.com/keycloak/keycloak/pull/6647#discussion_r366531009", "createdAt": "2020-01-14T19:31:11Z", "author": {"login": "hmlnarik"}, "path": "adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/SniSSLSocketFactory.java", "diffHunk": "@@ -46,7 +50,8 @@\n  */\n public class SniSSLSocketFactory extends SSLSocketFactory {\n \n-    private static Logger log = Logger.getLogger(SniSSLSocketFactory.class.getName());\n+    private static final Logger LOG = Logger.getLogger(SniSSLSocketFactory.class.getName());\n+    private static AtomicBoolean skipSNIApplication = new AtomicBoolean(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edcbd407f146e0ce04284dc4762413798cf496ee"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDU0MzUzOnYy", "diffSide": "RIGHT", "path": "adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/SniSSLSocketFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOTozMTo0M1rOFdjSwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOTozMTo0M1rOFdjSwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzMTI2Ng==", "bodyText": "This is not necessarily only IBM JDK, please improve the message.", "url": "https://github.com/keycloak/keycloak/pull/6647#discussion_r366531266", "createdAt": "2020-01-14T19:31:43Z", "author": {"login": "hmlnarik"}, "path": "adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/SniSSLSocketFactory.java", "diffHunk": "@@ -115,18 +120,34 @@ public Socket createLayeredSocket(Socket socket, String target, int port, HttpCo\n     }\n \n     private Socket applySNI(final Socket socket, String hostname) {\n+        if (skipSNIApplication.get()) {\n+            LOG.log(Level.FINE, \"Skipping application of SNI because IBM JDK is missing setHost() method.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edcbd407f146e0ce04284dc4762413798cf496ee"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDU0NTExOnYy", "diffSide": "RIGHT", "path": "adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/SniSSLSocketFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOTozMjoxNFrOFdjTyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDoyODo0N1rOFjmJyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzMTUzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (e.getCause() instanceof NoSuchMethodException && Environment.IS_IBM_JAVA) {\n          \n          \n            \n                            if (e.getCause() instanceof NoSuchMethodException) {", "url": "https://github.com/keycloak/keycloak/pull/6647#discussion_r366531530", "createdAt": "2020-01-14T19:32:14Z", "author": {"login": "hmlnarik"}, "path": "adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/SniSSLSocketFactory.java", "diffHunk": "@@ -115,18 +120,34 @@ public Socket createLayeredSocket(Socket socket, String target, int port, HttpCo\n     }\n \n     private Socket applySNI(final Socket socket, String hostname) {\n+        if (skipSNIApplication.get()) {\n+            LOG.log(Level.FINE, \"Skipping application of SNI because IBM JDK is missing setHost() method.\");\n+            return socket;\n+        }\n+\n         if (socket instanceof SSLSocket) {\n             try {\n                 Method setHostMethod = AccessController.doPrivileged(new PrivilegedExceptionAction<Method>() {\n+                    @Override\n                     public Method run() throws NoSuchMethodException {\n                         return socket.getClass().getMethod(\"setHost\", String.class);\n                     }\n                 });\n \n                 setHostMethod.invoke(socket, hostname);\n-                log.finest(\"Applied SNI to socket for: \" + hostname);\n-            } catch (Exception e) {\n-                log.log(Level.WARNING, \"Failed to apply SNI to SSLSocket\", e);\n+                LOG.log(Level.FINEST, \"Applied SNI to socket for host {0}\", hostname);\n+            } catch (PrivilegedActionException e) {\n+                if (e.getCause() instanceof NoSuchMethodException && Environment.IS_IBM_JAVA) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edcbd407f146e0ce04284dc4762413798cf496ee"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA4NTM5OA==", "bodyText": "@hmlnarik I am not sure we want this. I agree we should set skipSNIApplication to true for all JDKs in case the exception is NoSuchMethod, but we don't want to set log level to FINE for each JDK as for now we know only for IBM JDK that it is ok to skip SNI application. Does it make sense?", "url": "https://github.com/keycloak/keycloak/pull/6647#discussion_r370085398", "createdAt": "2020-01-23T12:18:52Z", "author": {"login": "mhajas"}, "path": "adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/SniSSLSocketFactory.java", "diffHunk": "@@ -115,18 +120,34 @@ public Socket createLayeredSocket(Socket socket, String target, int port, HttpCo\n     }\n \n     private Socket applySNI(final Socket socket, String hostname) {\n+        if (skipSNIApplication.get()) {\n+            LOG.log(Level.FINE, \"Skipping application of SNI because IBM JDK is missing setHost() method.\");\n+            return socket;\n+        }\n+\n         if (socket instanceof SSLSocket) {\n             try {\n                 Method setHostMethod = AccessController.doPrivileged(new PrivilegedExceptionAction<Method>() {\n+                    @Override\n                     public Method run() throws NoSuchMethodException {\n                         return socket.getClass().getMethod(\"setHost\", String.class);\n                     }\n                 });\n \n                 setHostMethod.invoke(socket, hostname);\n-                log.finest(\"Applied SNI to socket for: \" + hostname);\n-            } catch (Exception e) {\n-                log.log(Level.WARNING, \"Failed to apply SNI to SSLSocket\", e);\n+                LOG.log(Level.FINEST, \"Applied SNI to socket for host {0}\", hostname);\n+            } catch (PrivilegedActionException e) {\n+                if (e.getCause() instanceof NoSuchMethodException && Environment.IS_IBM_JAVA) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzMTUzMA=="}, "originalCommit": {"oid": "edcbd407f146e0ce04284dc4762413798cf496ee"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg2OTU3Nw==", "bodyText": "Ok, let's leave this as is.", "url": "https://github.com/keycloak/keycloak/pull/6647#discussion_r372869577", "createdAt": "2020-01-30T10:28:47Z", "author": {"login": "hmlnarik"}, "path": "adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/SniSSLSocketFactory.java", "diffHunk": "@@ -115,18 +120,34 @@ public Socket createLayeredSocket(Socket socket, String target, int port, HttpCo\n     }\n \n     private Socket applySNI(final Socket socket, String hostname) {\n+        if (skipSNIApplication.get()) {\n+            LOG.log(Level.FINE, \"Skipping application of SNI because IBM JDK is missing setHost() method.\");\n+            return socket;\n+        }\n+\n         if (socket instanceof SSLSocket) {\n             try {\n                 Method setHostMethod = AccessController.doPrivileged(new PrivilegedExceptionAction<Method>() {\n+                    @Override\n                     public Method run() throws NoSuchMethodException {\n                         return socket.getClass().getMethod(\"setHost\", String.class);\n                     }\n                 });\n \n                 setHostMethod.invoke(socket, hostname);\n-                log.finest(\"Applied SNI to socket for: \" + hostname);\n-            } catch (Exception e) {\n-                log.log(Level.WARNING, \"Failed to apply SNI to SSLSocket\", e);\n+                LOG.log(Level.FINEST, \"Applied SNI to socket for host {0}\", hostname);\n+            } catch (PrivilegedActionException e) {\n+                if (e.getCause() instanceof NoSuchMethodException && Environment.IS_IBM_JAVA) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzMTUzMA=="}, "originalCommit": {"oid": "edcbd407f146e0ce04284dc4762413798cf496ee"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDU1MDcyOnYy", "diffSide": "RIGHT", "path": "adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/SniSSLSocketFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOTozNDoxNlrOFdjXdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOTozNDoxNlrOFdjXdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzMjQ2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            LOG.log(Level.FINEST, \"Applied SNI to socket for host {0}\", hostname);\n          \n          \n            \n                            LOG.log(Level.FINE, \"Applied SNI to socket for host {0}\", hostname);", "url": "https://github.com/keycloak/keycloak/pull/6647#discussion_r366532468", "createdAt": "2020-01-14T19:34:16Z", "author": {"login": "hmlnarik"}, "path": "adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/SniSSLSocketFactory.java", "diffHunk": "@@ -115,18 +120,34 @@ public Socket createLayeredSocket(Socket socket, String target, int port, HttpCo\n     }\n \n     private Socket applySNI(final Socket socket, String hostname) {\n+        if (skipSNIApplication.get()) {\n+            LOG.log(Level.FINE, \"Skipping application of SNI because IBM JDK is missing setHost() method.\");\n+            return socket;\n+        }\n+\n         if (socket instanceof SSLSocket) {\n             try {\n                 Method setHostMethod = AccessController.doPrivileged(new PrivilegedExceptionAction<Method>() {\n+                    @Override\n                     public Method run() throws NoSuchMethodException {\n                         return socket.getClass().getMethod(\"setHost\", String.class);\n                     }\n                 });\n \n                 setHostMethod.invoke(socket, hostname);\n-                log.finest(\"Applied SNI to socket for: \" + hostname);\n-            } catch (Exception e) {\n-                log.log(Level.WARNING, \"Failed to apply SNI to SSLSocket\", e);\n+                LOG.log(Level.FINEST, \"Applied SNI to socket for host {0}\", hostname);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edcbd407f146e0ce04284dc4762413798cf496ee"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3929, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}