{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0NzI0NTM1", "number": 7633, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0zMFQxMTo1MDozNFrOG1mvgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0xMC0wOFQwOTowNjoxM1rOG5EJ8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "PRRT_kwDOAKnDVc4bWa-B", "diffSide": "RIGHT", "path": "adapters/oidc/js/src/main/resources/keycloak.d.ts", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0zMFQxMTo1MDozNFrOKuAROA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0zMFQxNzozNzowOVrOKuSTkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "PRRC_kwDOAKnDVc4q4BE4", "bodyText": "As a token can contain custom claims would it not be better to just define this as a map?", "url": "https://github.com/keycloak/keycloak/pull/7633#discussion_r719327544", "createdAt": "2021-09-30T11:50:34Z", "author": {"login": "stianst"}, "path": "adapters/oidc/js/src/main/resources/keycloak.d.ts", "diffHunk": "@@ -292,13 +292,23 @@ declare namespace Keycloak {\n \t}\r\n \r\n \tinterface KeycloakTokenParsed {\r\n+\t\tacr?: string;\r\n+\t\taud?: string;\r\n+\t\tauth_time?: number;\r\n+\t\tazp?: string;\r\n+\t\temail_varified?: boolean;\r\n \t\texp?: number;\r\n \t\tiat?: number;\r\n+\t\tiss?: string;\r\n+\t\tjti?: string;\r\n \t\tnonce?: string;\r\n-\t\tsub?: string;\r\n-\t\tsession_state?: string;\r\n+\t\tpreferred_username?: string;\r\n \t\trealm_access?: KeycloakRoles;\r\n \t\tresource_access?: KeycloakResourceAccess;\r\n+\t\tscope?: string;\r\n+\t\tsession_state?: string;\r\n+\t\tsub?: string;\r\n+\t\ttyp?: string;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8fbc4a42266daaba609f6f81ee885f02226886b"}, "originalPosition": 22}, {"id": "PRRC_kwDOAKnDVc4q4Yuq", "bodyText": "Yeah, ideally this would be a thing the user can provide using a generic. For example:\ninterface MyTokenFields {\n  foo: string;\n}\n\nconst tokenParsed = keycloak.getParsedToken<MyTokenFields>();\n\ntokenParsed.foo; // TypeScipt knows this property through the generic\nBut since we have none of these methods exist, and these properties are exposed publicly this not a feasible solution. So instead we can specify only the properties here that are guaranteed to be present at all time (@stianst any idea what those might be?).\nNext to that we can specify an index signature so that TypeScript users can themselves determine what is inside of the token. So the interface would look a bit like this:\nexport interface KeycloakTokenParsed {\n  alwaysPresent: string;\n  [key: string]: any;\n}\nNow if someone wants to get a value from the token it should be fine for TypeScript:\nkeycloak.tokenParsed.foo // This property will be of type 'any' \nNow if someone wants to narrow this down they can use type predicate.\nif (typeof keycloak.tokenParsed.foo === 'string') {\n  keycloak.tokenParsed.foo // This property will be of type 'string'\n}", "url": "https://github.com/keycloak/keycloak/pull/7633#discussion_r719424426", "createdAt": "2021-09-30T13:46:48Z", "author": {"login": "jonkoops"}, "path": "adapters/oidc/js/src/main/resources/keycloak.d.ts", "diffHunk": "@@ -292,13 +292,23 @@ declare namespace Keycloak {\n \t}\r\n \r\n \tinterface KeycloakTokenParsed {\r\n+\t\tacr?: string;\r\n+\t\taud?: string;\r\n+\t\tauth_time?: number;\r\n+\t\tazp?: string;\r\n+\t\temail_varified?: boolean;\r\n \t\texp?: number;\r\n \t\tiat?: number;\r\n+\t\tiss?: string;\r\n+\t\tjti?: string;\r\n \t\tnonce?: string;\r\n-\t\tsub?: string;\r\n-\t\tsession_state?: string;\r\n+\t\tpreferred_username?: string;\r\n \t\trealm_access?: KeycloakRoles;\r\n \t\tresource_access?: KeycloakResourceAccess;\r\n+\t\tscope?: string;\r\n+\t\tsession_state?: string;\r\n+\t\tsub?: string;\r\n+\t\ttyp?: string;\r", "state": "SUBMITTED", "replyTo": {"id": "PRRC_kwDOAKnDVc4q4BE4"}, "originalCommit": {"oid": "f8fbc4a42266daaba609f6f81ee885f02226886b"}, "originalPosition": 22}, {"id": "PRRC_kwDOAKnDVc4q5JOQ", "bodyText": "The last example you gave looks like the way to go for now. That's what I had in mind when I said \"map\". There's some built-in claims, but probably always will be custom ones as well.", "url": "https://github.com/keycloak/keycloak/pull/7633#discussion_r719623056", "createdAt": "2021-09-30T17:37:09Z", "author": {"login": "stianst"}, "path": "adapters/oidc/js/src/main/resources/keycloak.d.ts", "diffHunk": "@@ -292,13 +292,23 @@ declare namespace Keycloak {\n \t}\r\n \r\n \tinterface KeycloakTokenParsed {\r\n+\t\tacr?: string;\r\n+\t\taud?: string;\r\n+\t\tauth_time?: number;\r\n+\t\tazp?: string;\r\n+\t\temail_varified?: boolean;\r\n \t\texp?: number;\r\n \t\tiat?: number;\r\n+\t\tiss?: string;\r\n+\t\tjti?: string;\r\n \t\tnonce?: string;\r\n-\t\tsub?: string;\r\n-\t\tsession_state?: string;\r\n+\t\tpreferred_username?: string;\r\n \t\trealm_access?: KeycloakRoles;\r\n \t\tresource_access?: KeycloakResourceAccess;\r\n+\t\tscope?: string;\r\n+\t\tsession_state?: string;\r\n+\t\tsub?: string;\r\n+\t\ttyp?: string;\r", "state": "SUBMITTED", "replyTo": {"id": "PRRC_kwDOAKnDVc4q4BE4"}, "originalCommit": {"oid": "f8fbc4a42266daaba609f6f81ee885f02226886b"}, "originalPosition": 22}]}}, {"id": "PRRT_kwDOAKnDVc4bkQnx", "diffSide": "RIGHT", "path": "adapters/oidc/js/src/main/resources/keycloak.d.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0xMC0wOFQwOTowNjoxM1rOKzQhvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0xMC0wOFQxMDowODoxNFrOKzTRHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "PRRC_kwDOAKnDVc4rNCG_", "bodyText": "Can you add the index signature for this interface?\ninterface KeycloakTokenParsed {\n  // Other fields go above.\n  [key: string]: any;\n}", "url": "https://github.com/keycloak/keycloak/pull/7633#discussion_r724836799", "createdAt": "2021-10-08T09:06:13Z", "author": {"login": "jonkoops"}, "path": "adapters/oidc/js/src/main/resources/keycloak.d.ts", "diffHunk": "@@ -292,10 +292,16 @@ declare namespace Keycloak {\n \t}\r\n \r\n \tinterface KeycloakTokenParsed {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fc8661b62cb5a0cfa7c91157215607f6eb0cfa4"}, "originalPosition": 3}, {"id": "PRRC_kwDOAKnDVc4rNNEd", "bodyText": "@jonkoops\nThank you, sorry for forgetting to reflect your great suggestion.\nI think it  is good idea and  want to add  [key: string]: any;\n@abstractj @stianst\nPlease wait for a minutes.", "url": "https://github.com/keycloak/keycloak/pull/7633#discussion_r724881693", "createdAt": "2021-10-08T10:08:14Z", "author": {"login": "maito1201"}, "path": "adapters/oidc/js/src/main/resources/keycloak.d.ts", "diffHunk": "@@ -292,10 +292,16 @@ declare namespace Keycloak {\n \t}\r\n \r\n \tinterface KeycloakTokenParsed {\r", "state": "SUBMITTED", "replyTo": {"id": "PRRC_kwDOAKnDVc4rNCG_"}, "originalCommit": {"oid": "3fc8661b62cb5a0cfa7c91157215607f6eb0cfa4"}, "originalPosition": 3}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3198, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}