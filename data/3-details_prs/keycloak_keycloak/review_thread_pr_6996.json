{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3MjQ2MjA4", "number": 6996, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjo1ODoyMVrOELPiQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMzowMTozNlrOELPlrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjI0MzIyOnYy", "diffSide": "RIGHT", "path": "saml-core/src/main/java/org/keycloak/saml/SPMetadataDescriptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjo1ODoyMVrOGsvnkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjo1ODoyMVrOGsvnkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU3MDcwNA==", "bodyText": "Please do not use star imports, import explicitly each class", "url": "https://github.com/keycloak/keycloak/pull/6996#discussion_r449570704", "createdAt": "2020-07-03T12:58:21Z", "author": {"login": "hmlnarik"}, "path": "saml-core/src/main/java/org/keycloak/saml/SPMetadataDescriptor.java", "diffHunk": "@@ -17,59 +17,108 @@\n \n package org.keycloak.saml;\n \n+import org.keycloak.dom.saml.v2.metadata.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0fb5a1aabef72cb568eef484f6a4f6cf533e6ad"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjI0ODEyOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/protocol/saml/IDPMetadataDescriptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMzowMDowN1rOGsvqjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNDowMjo1NFrOGsxXhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU3MTQ3MA==", "bodyText": "Please avoid star imports", "url": "https://github.com/keycloak/keycloak/pull/6996#discussion_r449571470", "createdAt": "2020-07-03T13:00:07Z", "author": {"login": "hmlnarik"}, "path": "services/src/main/java/org/keycloak/protocol/saml/IDPMetadataDescriptor.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright 2016 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.protocol.saml;\n+\n+import org.keycloak.dom.saml.v2.metadata.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0fb5a1aabef72cb568eef484f6a4f6cf533e6ad"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU5OTM2NQ==", "bodyText": "Thanks, done!", "url": "https://github.com/keycloak/keycloak/pull/6996#discussion_r449599365", "createdAt": "2020-07-03T14:02:54Z", "author": {"login": "lscorcia"}, "path": "services/src/main/java/org/keycloak/protocol/saml/IDPMetadataDescriptor.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright 2016 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.protocol.saml;\n+\n+import org.keycloak.dom.saml.v2.metadata.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU3MTQ3MA=="}, "originalCommit": {"oid": "d0fb5a1aabef72cb568eef484f6a4f6cf533e6ad"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjI1MTk3OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/protocol/saml/installation/SamlSPDescriptorClientInstallation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMzowMTozNlrOGsvs6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNDowMzowOFrOGsxX5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU3MjA3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (logoutUrl == null || assertionUrl.trim().isEmpty()) logoutUrl = client.getManagementUrl();\n          \n          \n            \n                        if (logoutUrl == null || assertionUrl.trim().isEmpty()) logoutUrl = FALLBACK_ERROR_URL_STRING;\n          \n          \n            \n                        if (logoutUrl == null || logoutUrl.trim().isEmpty()) logoutUrl = client.getManagementUrl();\n          \n          \n            \n                        if (logoutUrl == null || logoutUrl.trim().isEmpty()) logoutUrl = FALLBACK_ERROR_URL_STRING;", "url": "https://github.com/keycloak/keycloak/pull/6996#discussion_r449572075", "createdAt": "2020-07-03T13:01:36Z", "author": {"login": "hmlnarik"}, "path": "services/src/main/java/org/keycloak/protocol/saml/installation/SamlSPDescriptorClientInstallation.java", "diffHunk": "@@ -28,45 +30,55 @@\n import org.keycloak.saml.SPMetadataDescriptor;\n import org.keycloak.saml.common.constants.JBossSAMLURIConstants;\n \n+import org.w3c.dom.Element;\n+\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import java.net.URI;\n-import org.keycloak.dom.saml.v2.metadata.KeyTypes;\n+import java.util.Arrays;\n+\n \n /**\n  * @author <a href=\"mailto:bill@burkecentral.com\">Bill Burke</a>\n  * @version $Revision: 1 $\n  */\n public class SamlSPDescriptorClientInstallation implements ClientInstallationProvider {\n \n+    protected static final Logger logger = Logger.getLogger(SamlSPDescriptorClientInstallation.class);\n+\n     public static final String SAML_CLIENT_INSTALATION_SP_DESCRIPTOR = \"saml-sp-descriptor\";\n-    private static final String FALLBACK_ERROR_URL_STRING = \"ERROR:ENDPOINT NOT SET\";\n+    private static final String FALLBACK_ERROR_URL_STRING = \"ERROR:ENDPOINT_NOT_SET\";\n \n     public static String getSPDescriptorForClient(ClientModel client) {\n-        SamlClient samlClient = new SamlClient(client);\n-        String assertionUrl;\n-        String logoutUrl;\n-        String binding;\n-        if (samlClient.forcePostBinding()) {\n-            assertionUrl = client.getAttribute(SamlProtocol.SAML_ASSERTION_CONSUMER_URL_POST_ATTRIBUTE);\n-            logoutUrl = client.getAttribute(SamlProtocol.SAML_SINGLE_LOGOUT_SERVICE_URL_POST_ATTRIBUTE);\n-            binding = JBossSAMLURIConstants.SAML_HTTP_POST_BINDING.get();\n-        } else { //redirect binding\n-            assertionUrl = client.getAttribute(SamlProtocol.SAML_ASSERTION_CONSUMER_URL_REDIRECT_ATTRIBUTE);\n-            logoutUrl = client.getAttribute(SamlProtocol.SAML_SINGLE_LOGOUT_SERVICE_URL_REDIRECT_ATTRIBUTE);\n-            binding = JBossSAMLURIConstants.SAML_HTTP_REDIRECT_BINDING.get();\n+        try {\n+            SamlClient samlClient = new SamlClient(client);\n+            String assertionUrl;\n+            String logoutUrl;\n+            URI binding;\n+            if (samlClient.forcePostBinding()) {\n+                assertionUrl = client.getAttribute(SamlProtocol.SAML_ASSERTION_CONSUMER_URL_POST_ATTRIBUTE);\n+                logoutUrl = client.getAttribute(SamlProtocol.SAML_SINGLE_LOGOUT_SERVICE_URL_POST_ATTRIBUTE);\n+                binding = JBossSAMLURIConstants.SAML_HTTP_POST_BINDING.getUri();\n+            } else { //redirect binding\n+                assertionUrl = client.getAttribute(SamlProtocol.SAML_ASSERTION_CONSUMER_URL_REDIRECT_ATTRIBUTE);\n+                logoutUrl = client.getAttribute(SamlProtocol.SAML_SINGLE_LOGOUT_SERVICE_URL_REDIRECT_ATTRIBUTE);\n+                binding = JBossSAMLURIConstants.SAML_HTTP_REDIRECT_BINDING.getUri();\n+            }\n+            if (assertionUrl == null || assertionUrl.trim().isEmpty()) assertionUrl = client.getManagementUrl();\n+            if (assertionUrl == null || assertionUrl.trim().isEmpty()) assertionUrl = FALLBACK_ERROR_URL_STRING;\n+            if (logoutUrl == null || assertionUrl.trim().isEmpty()) logoutUrl = client.getManagementUrl();\n+            if (logoutUrl == null || assertionUrl.trim().isEmpty()) logoutUrl = FALLBACK_ERROR_URL_STRING;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0fb5a1aabef72cb568eef484f6a4f6cf533e6ad"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU5OTQ2Mg==", "bodyText": "Nice catch!", "url": "https://github.com/keycloak/keycloak/pull/6996#discussion_r449599462", "createdAt": "2020-07-03T14:03:08Z", "author": {"login": "lscorcia"}, "path": "services/src/main/java/org/keycloak/protocol/saml/installation/SamlSPDescriptorClientInstallation.java", "diffHunk": "@@ -28,45 +30,55 @@\n import org.keycloak.saml.SPMetadataDescriptor;\n import org.keycloak.saml.common.constants.JBossSAMLURIConstants;\n \n+import org.w3c.dom.Element;\n+\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import java.net.URI;\n-import org.keycloak.dom.saml.v2.metadata.KeyTypes;\n+import java.util.Arrays;\n+\n \n /**\n  * @author <a href=\"mailto:bill@burkecentral.com\">Bill Burke</a>\n  * @version $Revision: 1 $\n  */\n public class SamlSPDescriptorClientInstallation implements ClientInstallationProvider {\n \n+    protected static final Logger logger = Logger.getLogger(SamlSPDescriptorClientInstallation.class);\n+\n     public static final String SAML_CLIENT_INSTALATION_SP_DESCRIPTOR = \"saml-sp-descriptor\";\n-    private static final String FALLBACK_ERROR_URL_STRING = \"ERROR:ENDPOINT NOT SET\";\n+    private static final String FALLBACK_ERROR_URL_STRING = \"ERROR:ENDPOINT_NOT_SET\";\n \n     public static String getSPDescriptorForClient(ClientModel client) {\n-        SamlClient samlClient = new SamlClient(client);\n-        String assertionUrl;\n-        String logoutUrl;\n-        String binding;\n-        if (samlClient.forcePostBinding()) {\n-            assertionUrl = client.getAttribute(SamlProtocol.SAML_ASSERTION_CONSUMER_URL_POST_ATTRIBUTE);\n-            logoutUrl = client.getAttribute(SamlProtocol.SAML_SINGLE_LOGOUT_SERVICE_URL_POST_ATTRIBUTE);\n-            binding = JBossSAMLURIConstants.SAML_HTTP_POST_BINDING.get();\n-        } else { //redirect binding\n-            assertionUrl = client.getAttribute(SamlProtocol.SAML_ASSERTION_CONSUMER_URL_REDIRECT_ATTRIBUTE);\n-            logoutUrl = client.getAttribute(SamlProtocol.SAML_SINGLE_LOGOUT_SERVICE_URL_REDIRECT_ATTRIBUTE);\n-            binding = JBossSAMLURIConstants.SAML_HTTP_REDIRECT_BINDING.get();\n+        try {\n+            SamlClient samlClient = new SamlClient(client);\n+            String assertionUrl;\n+            String logoutUrl;\n+            URI binding;\n+            if (samlClient.forcePostBinding()) {\n+                assertionUrl = client.getAttribute(SamlProtocol.SAML_ASSERTION_CONSUMER_URL_POST_ATTRIBUTE);\n+                logoutUrl = client.getAttribute(SamlProtocol.SAML_SINGLE_LOGOUT_SERVICE_URL_POST_ATTRIBUTE);\n+                binding = JBossSAMLURIConstants.SAML_HTTP_POST_BINDING.getUri();\n+            } else { //redirect binding\n+                assertionUrl = client.getAttribute(SamlProtocol.SAML_ASSERTION_CONSUMER_URL_REDIRECT_ATTRIBUTE);\n+                logoutUrl = client.getAttribute(SamlProtocol.SAML_SINGLE_LOGOUT_SERVICE_URL_REDIRECT_ATTRIBUTE);\n+                binding = JBossSAMLURIConstants.SAML_HTTP_REDIRECT_BINDING.getUri();\n+            }\n+            if (assertionUrl == null || assertionUrl.trim().isEmpty()) assertionUrl = client.getManagementUrl();\n+            if (assertionUrl == null || assertionUrl.trim().isEmpty()) assertionUrl = FALLBACK_ERROR_URL_STRING;\n+            if (logoutUrl == null || assertionUrl.trim().isEmpty()) logoutUrl = client.getManagementUrl();\n+            if (logoutUrl == null || assertionUrl.trim().isEmpty()) logoutUrl = FALLBACK_ERROR_URL_STRING;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU3MjA3NQ=="}, "originalCommit": {"oid": "d0fb5a1aabef72cb568eef484f6a4f6cf533e6ad"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3721, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}