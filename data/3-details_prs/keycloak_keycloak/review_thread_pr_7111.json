{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNjkxNjA5", "number": 7111, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODoyOTo0NVrOELK45A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzoyMToxMlrOEbb9MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTQ4MTk2OnYy", "diffSide": "RIGHT", "path": "saml-core-api/src/main/java/org/keycloak/saml/common/constants/JBossSAMLURIConstants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODoyOTo0NVrOGsoVAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODoyOTo0NVrOGsoVAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ1MTI2Ng==", "bodyText": "Please use a name ending in _NSURI and signalling the source, e.g.:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                ENTITY_ATTRIBUTES(\"urn:oasis:names:tc:SAML:metadata:attribute\"),\n          \n          \n            \n                // http://docs.oasis-open.org/security/saml/Post2.0/sstc-metadata-attr-cd-01.pdf\n          \n          \n            \n                METADATA_ENTITY_ATTRIBUTES_NSURI(\"urn:oasis:names:tc:SAML:metadata:attribute\"),", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r449451266", "createdAt": "2020-07-03T08:29:45Z", "author": {"login": "hmlnarik"}, "path": "saml-core-api/src/main/java/org/keycloak/saml/common/constants/JBossSAMLURIConstants.java", "diffHunk": "@@ -65,6 +65,7 @@\n     HOLDER_OF_KEY(\"urn:oasis:names:tc:SAML:2.0:cm:holder-of-key\"),\n \n     METADATA_NSURI(\"urn:oasis:names:tc:SAML:2.0:metadata\"),\n+    ENTITY_ATTRIBUTES(\"urn:oasis:names:tc:SAML:metadata:attribute\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35590d000cf584f1c0c7453c6fc6a9e6018697a6"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTQ4NzU4OnYy", "diffSide": "RIGHT", "path": "saml-core-api/src/main/java/org/keycloak/saml/common/constants/GeneralConstants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODozMToyNlrOGsoYeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODozMToyNlrOGsoYeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ1MjE1Mg==", "bodyText": "These constants should be only in the services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderFactory.java\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String MACEDIR =\"http://macedir.org/entity-category\";\n          \n          \n            \n                String HIDE_FOR_DISCOVERY= \"http://refeds.org/category/hide-from-discovery\";\n          \n          \n            \n                String MACEDIR_ENTITY_CATEGORY = \"http://macedir.org/entity-category\";\n          \n          \n            \n                String REFEDS_HIDE_FOR_DISCOVERY = \"http://refeds.org/category/hide-from-discovery\";", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r449452152", "createdAt": "2020-07-03T08:31:26Z", "author": {"login": "hmlnarik"}, "path": "saml-core-api/src/main/java/org/keycloak/saml/common/constants/GeneralConstants.java", "diffHunk": "@@ -150,6 +150,9 @@\n     String BASE64_ENCODE_WSTRUST_SECRET_KEY = \"picketlink.wstrust.base64_encode_wstrust_secret_key\";\n \n     String HTTP_HEADER_X_REQUESTED_WITH = \"X-Requested-With\";\n+    \n+    String MACEDIR =\"http://macedir.org/entity-category\";\n+    String HIDE_FOR_DISCOVERY= \"http://refeds.org/category/hide-from-discovery\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35590d000cf584f1c0c7453c6fc6a9e6018697a6"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTU1NzQ4OnYy", "diffSide": "RIGHT", "path": "saml-core-api/src/main/java/org/keycloak/dom/saml/v2/metadata/EntityAttributes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODo1MzozM1rOGspEDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODo1MzozM1rOGspEDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2MzMxMQ==", "bodyText": "This file belongs to a separate package. Lets call it\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            package org.keycloak.dom.saml.v2.metadata;\n          \n          \n            \n            package org.keycloak.dom.saml.v2.mdattr;", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r449463311", "createdAt": "2020-07-03T08:53:33Z", "author": {"login": "hmlnarik"}, "path": "saml-core-api/src/main/java/org/keycloak/dom/saml/v2/metadata/EntityAttributes.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package org.keycloak.dom.saml.v2.metadata;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35590d000cf584f1c0c7453c6fc6a9e6018697a6"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTU2NjI4OnYy", "diffSide": "RIGHT", "path": "saml-core-api/src/main/java/org/keycloak/dom/saml/v2/metadata/ExtensionsType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODo1NjowNFrOGspJdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODo1NjowNFrOGspJdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2NDY5Mw==", "bodyText": "Do not add this field here, and rather use the any above.\nOTOH, you can add a method that would extract the EntityAttributes from the any field, e.g.\n    public EntityAttributes getEntityAttributes() {\n        for (Object o : this.any) {\n            if (o instanceof EntityAttributes) {\n                return (EntityAttributes) o;\n            }\n        }\n        return null;\n    }", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r449464693", "createdAt": "2020-07-03T08:56:04Z", "author": {"login": "hmlnarik"}, "path": "saml-core-api/src/main/java/org/keycloak/dom/saml/v2/metadata/ExtensionsType.java", "diffHunk": "@@ -45,6 +45,8 @@\n \n     protected List<Object> any = new ArrayList<>();\n \n+\n+   protected EntityAttributes entityAttributes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35590d000cf584f1c0c7453c6fc6a9e6018697a6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTU3OTIzOnYy", "diffSide": "RIGHT", "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLEntityAttributesParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODo1OTo1MVrOGspRVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODo1OTo1MVrOGspRVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2NjcxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            package org.keycloak.saml.processing.core.parsers.saml.metadata;\n          \n          \n            \n            package org.keycloak.saml.processing.core.parsers.saml.mdattr;", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r449466711", "createdAt": "2020-07-03T08:59:51Z", "author": {"login": "hmlnarik"}, "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLEntityAttributesParser.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package org.keycloak.saml.processing.core.parsers.saml.metadata;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35590d000cf584f1c0c7453c6fc6a9e6018697a6"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTYwMjExOnYy", "diffSide": "RIGHT", "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLAssertionParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOTowNjo1NFrOGspfqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOTowNjo1NFrOGspfqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ3MDM3OA==", "bodyText": "Remove and use parser from org.keycloak.saml.processing.core.parsers.saml.assertion", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r449470378", "createdAt": "2020-07-03T09:06:54Z", "author": {"login": "hmlnarik"}, "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLAssertionParser.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package org.keycloak.saml.processing.core.parsers.saml.metadata;\n+\n+public class SAMLAssertionParser extends SAMLAttributeTypeParser {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35590d000cf584f1c0c7453c6fc6a9e6018697a6"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTYwMjc4OnYy", "diffSide": "RIGHT", "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLAttributeParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOTowNzowNVrOGspgBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMzo1NzozNlrOGsxOEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ3MDQ2OQ==", "bodyText": "Remove and use parser from org.keycloak.saml.processing.core.parsers.saml.assertion", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r449470469", "createdAt": "2020-07-03T09:07:05Z", "author": {"login": "hmlnarik"}, "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLAttributeParser.java", "diffHunk": "@@ -16,20 +16,12 @@\n  */\n package org.keycloak.saml.processing.core.parsers.saml.metadata;\n \n-import org.keycloak.dom.saml.v2.assertion.AttributeType;\n-import org.keycloak.saml.common.exceptions.ParsingException;\n-import org.keycloak.saml.common.util.StaxParserUtil;\n-import org.keycloak.saml.processing.core.parsers.saml.assertion.SAMLAttributeValueParser;\n-\n-import javax.xml.stream.XMLEventReader;\n-import javax.xml.stream.events.StartElement;\n-\n /**\n  * Parse the <conditions> in the saml assertion\n  *\n  * @since Oct 14, 2010\n  */\n-public class SAMLAttributeParser extends AbstractStaxSamlMetadataParser<AttributeType> {\n+public class SAMLAttributeParser extends SAMLAttributeTypeParser {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35590d000cf584f1c0c7453c6fc6a9e6018697a6"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU5Njk0NA==", "bodyText": "org.keycloak.saml.processing.core.parsers.saml.assertion.SAMLAttributeParser  will be used in this PR. This SAMLAttributeParser existed in code and it was not used. Do you want to keep org.keycloak.saml.processing.core.parsers.saml.metadata.SAMLAttributeParser same as Keycloak master or to remove it?", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r449596944", "createdAt": "2020-07-03T13:57:36Z", "author": {"login": "cgeorgilakis"}, "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLAttributeParser.java", "diffHunk": "@@ -16,20 +16,12 @@\n  */\n package org.keycloak.saml.processing.core.parsers.saml.metadata;\n \n-import org.keycloak.dom.saml.v2.assertion.AttributeType;\n-import org.keycloak.saml.common.exceptions.ParsingException;\n-import org.keycloak.saml.common.util.StaxParserUtil;\n-import org.keycloak.saml.processing.core.parsers.saml.assertion.SAMLAttributeValueParser;\n-\n-import javax.xml.stream.XMLEventReader;\n-import javax.xml.stream.events.StartElement;\n-\n /**\n  * Parse the <conditions> in the saml assertion\n  *\n  * @since Oct 14, 2010\n  */\n-public class SAMLAttributeParser extends AbstractStaxSamlMetadataParser<AttributeType> {\n+public class SAMLAttributeParser extends SAMLAttributeTypeParser {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ3MDQ2OQ=="}, "originalCommit": {"oid": "35590d000cf584f1c0c7453c6fc6a9e6018697a6"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTYwMzc4OnYy", "diffSide": "RIGHT", "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLAttributeTypeParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOTowNzoyNFrOGspgmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOTowNzoyNFrOGspgmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ3MDYxOA==", "bodyText": "Remove this change", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r449470618", "createdAt": "2020-07-03T09:07:24Z", "author": {"login": "hmlnarik"}, "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLAttributeTypeParser.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package org.keycloak.saml.processing.core.parsers.saml.metadata;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35590d000cf584f1c0c7453c6fc6a9e6018697a6"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTY1MjY3OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOToyMjoxMFrOGsp-UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo1Njo0NlrOGt9QdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ3ODIyNQ==", "bodyText": "Check the formatting.", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r449478225", "createdAt": "2020-07-03T09:22:10Z", "author": {"login": "hmlnarik"}, "path": "services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderFactory.java", "diffHunk": "@@ -152,6 +155,18 @@ public SAMLIdentityProviderConfig createConfig() {\n                             samlIdentityProviderConfig.setEncryptionPublicKey(defaultCertificate);\n                         }\n                     }\n+                    \n+                    samlIdentityProviderConfig.setEnabledConfig(entityType.getValidUntil() == null || entityType.getValidUntil().toGregorianCalendar().getTime().after(new Date()) );\n+                    \n+                \t//check for hide on login attibute\n+        \t\t\tif ( entityType.getExtensions() != null && entityType.getExtensions().getEntityAttributes() != null ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35590d000cf584f1c0c7453c6fc6a9e6018697a6"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg0Mjc0MA==", "bodyText": "Please do check the formatting", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r450842740", "createdAt": "2020-07-07T12:56:46Z", "author": {"login": "hmlnarik"}, "path": "services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderFactory.java", "diffHunk": "@@ -152,6 +155,18 @@ public SAMLIdentityProviderConfig createConfig() {\n                             samlIdentityProviderConfig.setEncryptionPublicKey(defaultCertificate);\n                         }\n                     }\n+                    \n+                    samlIdentityProviderConfig.setEnabledConfig(entityType.getValidUntil() == null || entityType.getValidUntil().toGregorianCalendar().getTime().after(new Date()) );\n+                    \n+                \t//check for hide on login attibute\n+        \t\t\tif ( entityType.getExtensions() != null && entityType.getExtensions().getEntityAttributes() != null ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ3ODIyNQ=="}, "originalCommit": {"oid": "35590d000cf584f1c0c7453c6fc6a9e6018697a6"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTY1NTgyOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderConfig.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOToyMzoxMFrOGsqAQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNToxMzoxM1rOGvVxig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ3ODcyMw==", "bodyText": "Remove, there is already enabled property in the parent class.", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r449478723", "createdAt": "2020-07-03T09:23:10Z", "author": {"login": "hmlnarik"}, "path": "services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderConfig.java", "diffHunk": "@@ -52,6 +52,8 @@\n     public static final String WANT_ASSERTIONS_SIGNED = \"wantAssertionsSigned\";\n     public static final String WANT_AUTHN_REQUESTS_SIGNED = \"wantAuthnRequestsSigned\";\n     public static final String XML_SIG_KEY_INFO_KEY_NAME_TRANSFORMER = \"xmlSigKeyInfoKeyNameTransformer\";\n+    public static final String HIDE_ON_LOGIN = \"hideOnLoginPage\";\n+    public static final String ENABLED = \"enabled\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35590d000cf584f1c0c7453c6fc6a9e6018697a6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU2MTgxMA==", "bodyText": "I know it. The problem is that importFrom method in class IdentityProvidersResource ( rest api for import identity provider from url or file) is returning only IdentityProviderModel.config. Property enabled in IdentityProviderModel is not in this map. As a result when you import a Saml Identity Provider from url or file , property enabled will not returned from rest api. Do you suggest another solution?", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r449561810", "createdAt": "2020-07-03T12:38:05Z", "author": {"login": "cgeorgilakis"}, "path": "services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderConfig.java", "diffHunk": "@@ -52,6 +52,8 @@\n     public static final String WANT_ASSERTIONS_SIGNED = \"wantAssertionsSigned\";\n     public static final String WANT_AUTHN_REQUESTS_SIGNED = \"wantAuthnRequestsSigned\";\n     public static final String XML_SIG_KEY_INFO_KEY_NAME_TRANSFORMER = \"xmlSigKeyInfoKeyNameTransformer\";\n+    public static final String HIDE_ON_LOGIN = \"hideOnLoginPage\";\n+    public static final String ENABLED = \"enabled\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ3ODcyMw=="}, "originalCommit": {"oid": "35590d000cf584f1c0c7453c6fc6a9e6018697a6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5MzAwMg==", "bodyText": "In that case it is necessary to use a specific name, plain enable would be confusing with the property above.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String ENABLED = \"enabled\";\n          \n          \n            \n                public static final String ENABLED_FROM_METADATA = \"enabledFromMetadata\";", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r452293002", "createdAt": "2020-07-09T15:13:13Z", "author": {"login": "hmlnarik"}, "path": "services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderConfig.java", "diffHunk": "@@ -52,6 +52,8 @@\n     public static final String WANT_ASSERTIONS_SIGNED = \"wantAssertionsSigned\";\n     public static final String WANT_AUTHN_REQUESTS_SIGNED = \"wantAuthnRequestsSigned\";\n     public static final String XML_SIG_KEY_INFO_KEY_NAME_TRANSFORMER = \"xmlSigKeyInfoKeyNameTransformer\";\n+    public static final String HIDE_ON_LOGIN = \"hideOnLoginPage\";\n+    public static final String ENABLED = \"enabled\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ3ODcyMw=="}, "originalCommit": {"oid": "35590d000cf584f1c0c7453c6fc6a9e6018697a6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTY1OTAxOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOToyNDoxOFrOGsqCWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOToyNDoxOFrOGsqCWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ3OTI1OQ==", "bodyText": "This constant should be in IdentityProviderModel.", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r449479259", "createdAt": "2020-07-03T09:24:18Z", "author": {"login": "hmlnarik"}, "path": "services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderConfig.java", "diffHunk": "@@ -52,6 +52,8 @@\n     public static final String WANT_ASSERTIONS_SIGNED = \"wantAssertionsSigned\";\n     public static final String WANT_AUTHN_REQUESTS_SIGNED = \"wantAuthnRequestsSigned\";\n     public static final String XML_SIG_KEY_INFO_KEY_NAME_TRANSFORMER = \"xmlSigKeyInfoKeyNameTransformer\";\n+    public static final String HIDE_ON_LOGIN = \"hideOnLoginPage\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35590d000cf584f1c0c7453c6fc6a9e6018697a6"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTY2MTEyOnYy", "diffSide": "RIGHT", "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLExtensionsParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOToyNDo1M1rOGsqDtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOToyNDo1M1rOGsqDtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ3OTYwNg==", "bodyText": "Check formatting.", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r449479606", "createdAt": "2020-07-03T09:24:53Z", "author": {"login": "hmlnarik"}, "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLExtensionsParser.java", "diffHunk": "@@ -47,6 +47,14 @@ protected ExtensionsType instantiateElement(XMLEventReader xmlEventReader, Start\n \n     @Override\n     protected void processSubElement(XMLEventReader xmlEventReader, ExtensionsType target, SAMLMetadataQNames element, StartElement elementDetail) throws ParsingException {\n-        target.addExtension(StaxParserUtil.getDOMElement(xmlEventReader));\n+        \n+    \tswitch (element) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35590d000cf584f1c0c7453c6fc6a9e6018697a6"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTY2MTg1OnYy", "diffSide": "RIGHT", "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLEntityAttributesParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOToyNTowNFrOGsqEHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOToyNTowNFrOGsqEHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ3OTcxMQ==", "bodyText": "Check formatting", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r449479711", "createdAt": "2020-07-03T09:25:04Z", "author": {"login": "hmlnarik"}, "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLEntityAttributesParser.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package org.keycloak.saml.processing.core.parsers.saml.metadata;\n+\n+import static org.keycloak.saml.processing.core.parsers.saml.metadata.SAMLMetadataQNames.ATTR_LANG;\n+\n+import java.io.Serializable;\n+\n+import javax.xml.stream.XMLEventReader;\n+import javax.xml.stream.events.StartElement;\n+\n+import org.keycloak.dom.saml.v2.assertion.AttributeType;\n+import org.keycloak.dom.saml.v2.metadata.EntityAttributes;\n+import org.keycloak.saml.common.exceptions.ParsingException;\n+import org.keycloak.saml.common.util.StaxParserUtil;\n+\n+public class SAMLEntityAttributesParser extends AbstractStaxSamlMetadataParser<EntityAttributes> implements Serializable {\n+\t private static final SAMLEntityAttributesParser INSTANCE = new SAMLEntityAttributesParser();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35590d000cf584f1c0c7453c6fc6a9e6018697a6"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTY2NDI3OnYy", "diffSide": "RIGHT", "path": "themes/src/main/resources/theme/base/admin/resources/js/controllers/realm.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOToyNTo1MFrOGsqFpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMzoxNToxOVrOGswEGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4MDEwMg==", "bodyText": "This change is not needed.", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r449480102", "createdAt": "2020-07-03T09:25:50Z", "author": {"login": "hmlnarik"}, "path": "themes/src/main/resources/theme/base/admin/resources/js/controllers/realm.js", "diffHunk": "@@ -965,6 +965,7 @@ module.controller('RealmIdentityProviderCtrl', function($scope, $filter, $upload\n         for (var key in data) {\n             $scope.identityProvider.config[key] = data[key];\n         }\n+        $scope.identityProvider.enabled = data[\"enabled\"];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35590d000cf584f1c0c7453c6fc6a9e6018697a6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU3ODAxMA==", "bodyText": "Related to my comment in SAMLIdentityProviderConfig, data returned from rest api return only Map. \"enabled\" key containing in data Map will never affect identityProvider.enabled with previous code. Do you suggest another solution?\nMy current implementation need a change in order to take into account that \"enabled\" key will not exist in Map for all other Identity providers except than SAML Identity Provider. I proposed to be :\nif (data[\"enabled\"] != undefined) { $scope.identityProvider.enabled = data[\"enabled\"]; }", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r449578010", "createdAt": "2020-07-03T13:15:19Z", "author": {"login": "cgeorgilakis"}, "path": "themes/src/main/resources/theme/base/admin/resources/js/controllers/realm.js", "diffHunk": "@@ -965,6 +965,7 @@ module.controller('RealmIdentityProviderCtrl', function($scope, $filter, $upload\n         for (var key in data) {\n             $scope.identityProvider.config[key] = data[key];\n         }\n+        $scope.identityProvider.enabled = data[\"enabled\"];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4MDEwMg=="}, "originalCommit": {"oid": "35590d000cf584f1c0c7453c6fc6a9e6018697a6"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTk2MzA3OnYy", "diffSide": "RIGHT", "path": "saml-core-api/src/main/java/org/keycloak/dom/saml/v2/mdattr/EntityAttributes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDo1NjoxM1rOGvVAow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDo1NjoxM1rOGvVAow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI4MDQ4Mw==", "bodyText": "Check formatting of this whole file.", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r452280483", "createdAt": "2020-07-09T14:56:13Z", "author": {"login": "hmlnarik"}, "path": "saml-core-api/src/main/java/org/keycloak/dom/saml/v2/mdattr/EntityAttributes.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package org.keycloak.dom.saml.v2.mdattr;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3471111cdfdbddf1cb656d40add4c3f75d53ba2a"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTk3ODg2OnYy", "diffSide": "RIGHT", "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/mdattr/SAMLEntityAttributesParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDo1OTozNFrOGvVKvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDo1OTozNFrOGvVKvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI4MzA2OQ==", "bodyText": "Check formatting of the whole file. Please do not use tabs but 4 spaces as indentation.", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r452283069", "createdAt": "2020-07-09T14:59:34Z", "author": {"login": "hmlnarik"}, "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/mdattr/SAMLEntityAttributesParser.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.keycloak.saml.processing.core.parsers.saml.mdattr;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3471111cdfdbddf1cb656d40add4c3f75d53ba2a"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTk4MjgzOnYy", "diffSide": "RIGHT", "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLMetadataQNames.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTowMDoyNFrOGvVNVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTowMDoyNFrOGvVNVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI4MzczMg==", "bodyText": "This belongs below to L 88, the namespace is other (see comment below)", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r452283732", "createdAt": "2020-07-09T15:00:24Z", "author": {"login": "hmlnarik"}, "path": "saml-core/src/main/java/org/keycloak/saml/processing/core/parsers/saml/metadata/SAMLMetadataQNames.java", "diffHunk": "@@ -77,14 +77,15 @@\n     ATTR_IS_REQUIRED(null, \"isRequired\"),\n     ATTR_NAME(null, \"Name\"),\n     ATTR_NAME_FORMAT(null, \"NameFormat\"),\n-\n+    ENTITY_ATTRIBUTES(JBossSAMLURIConstants.METADATA_ENTITY_ATTRIBUTES_NSURI, \"EntityAttributes\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3471111cdfdbddf1cb656d40add4c3f75d53ba2a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDAxMTc3OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTowNjo1N1rOGvVgIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMDo1OToyNFrOGxOt7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI4ODU0Nw==", "bodyText": "Time needs to be adjusted to local \"Keycloak server\" time.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                samlIdentityProviderConfig.setEnabledConfig(entityType.getValidUntil() == null || entityType.getValidUntil().toGregorianCalendar().getTime().after(new Date()) );\n          \n          \n            \n                                samlIdentityProviderConfig.setEnabledConfig(entityType.getValidUntil() == null || entityType.getValidUntil().toGregorianCalendar().getTime().after(new Date(Time.currentTime())) );", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r452288547", "createdAt": "2020-07-09T15:06:57Z", "author": {"login": "hmlnarik"}, "path": "services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderFactory.java", "diffHunk": "@@ -152,6 +158,18 @@ public SAMLIdentityProviderConfig createConfig() {\n                             samlIdentityProviderConfig.setEncryptionPublicKey(defaultCertificate);\n                         }\n                     }\n+                    \n+                    samlIdentityProviderConfig.setEnabledConfig(entityType.getValidUntil() == null || entityType.getValidUntil().toGregorianCalendar().getTime().after(new Date()) );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3471111cdfdbddf1cb656d40add4c3f75d53ba2a"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ4MTE4NQ==", "bodyText": "new Date() return Keycloak server local Date time.\nTime class you mean org.keycloak.common.util.Time? This method return second and Java Date(long date) wait for milliseconds.\nIf you insist I could write it as :\nsamlIdentityProviderConfig.setEnabledConfig(entityType.getValidUntil() == null || entityType.getValidUntil().toGregorianCalendar().getTime().after(new Date(Time.currentTime() * 1000)) );", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r453481185", "createdAt": "2020-07-13T08:30:54Z", "author": {"login": "cgeorgilakis"}, "path": "services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderFactory.java", "diffHunk": "@@ -152,6 +158,18 @@ public SAMLIdentityProviderConfig createConfig() {\n                             samlIdentityProviderConfig.setEncryptionPublicKey(defaultCertificate);\n                         }\n                     }\n+                    \n+                    samlIdentityProviderConfig.setEnabledConfig(entityType.getValidUntil() == null || entityType.getValidUntil().toGregorianCalendar().getTime().after(new Date()) );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI4ODU0Nw=="}, "originalCommit": {"oid": "3471111cdfdbddf1cb656d40add4c3f75d53ba2a"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI3NDU0Mg==", "bodyText": "Yes please, use currentTimeMillis() instead.", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r454274542", "createdAt": "2020-07-14T10:59:24Z", "author": {"login": "hmlnarik"}, "path": "services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderFactory.java", "diffHunk": "@@ -152,6 +158,18 @@ public SAMLIdentityProviderConfig createConfig() {\n                             samlIdentityProviderConfig.setEncryptionPublicKey(defaultCertificate);\n                         }\n                     }\n+                    \n+                    samlIdentityProviderConfig.setEnabledConfig(entityType.getValidUntil() == null || entityType.getValidUntil().toGregorianCalendar().getTime().after(new Date()) );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI4ODU0Nw=="}, "originalCommit": {"oid": "3471111cdfdbddf1cb656d40add4c3f75d53ba2a"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDA1MDkxOnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/IdentityProviderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNToxNjowNFrOGvV5Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNToxNjowNFrOGvV5Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5NDk1MA==", "bodyText": "Use constant, not literal:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    boolean enabled = Boolean.valueOf(result.get(\"enabled\"));\n          \n          \n            \n                    result.remove(\"enabled\");\n          \n          \n            \n                    boolean enabled = Boolean.valueOf(result.get(ENABLED_FROM_METADATA));\n          \n          \n            \n                    result.remove(ENABLED_FROM_METADATA);", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r452294950", "createdAt": "2020-07-09T15:16:04Z", "author": {"login": "hmlnarik"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/IdentityProviderTest.java", "diffHunk": "@@ -646,6 +652,10 @@ public void testSamlImportAndExportMultipleSigningKeys() throws URISyntaxExcepti\n         form.addFormData(\"file\", body, MediaType.APPLICATION_XML_TYPE, \"saml-idp-metadata-two-signing-certs\");\n \n         Map<String, String> result = realm.identityProviders().importFrom(form);\n+        //firtsly check and remove enabled from result\n+        boolean enabled = Boolean.valueOf(result.get(\"enabled\"));\n+        result.remove(\"enabled\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3471111cdfdbddf1cb656d40add4c3f75d53ba2a"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDA1MjE1OnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/IdentityProviderTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNToxNjoyMVrOGvV56A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDo1ODo0OFrOGwFdmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5NTE0NA==", "bodyText": "Use constant, not literal:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    boolean enabled = Boolean.valueOf(result.get(\"enabled\"));\n          \n          \n            \n                    result.remove(\"enabled\");\n          \n          \n            \n                    boolean enabled = Boolean.valueOf(result.get(ENABLED_FROM_METADATA));\n          \n          \n            \n                    result.remove(ENABLED_FROM_METADATA);", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r452295144", "createdAt": "2020-07-09T15:16:21Z", "author": {"login": "hmlnarik"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/IdentityProviderTest.java", "diffHunk": "@@ -608,6 +609,11 @@ public void testSamlImportAndExport() throws URISyntaxException, IOException, Pa\n         form.addFormData(\"file\", body, MediaType.APPLICATION_XML_TYPE, \"saml-idp-metadata.xml\");\n \n         Map<String, String> result = realm.identityProviders().importFrom(form);\n+       //firtsly check and remove enabled from result\n+        boolean enabled = Boolean.valueOf(result.get(\"enabled\"));\n+        result.remove(\"enabled\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3471111cdfdbddf1cb656d40add4c3f75d53ba2a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1NDMwMA==", "bodyText": "I strongly agree with you. However, in class IdentityProviderTest only literals are used and I want class writing to be similar.\nIf you insist, I could add literal for this or for all config properties.", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r452854300", "createdAt": "2020-07-10T13:47:29Z", "author": {"login": "cgeorgilakis"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/IdentityProviderTest.java", "diffHunk": "@@ -608,6 +609,11 @@ public void testSamlImportAndExport() throws URISyntaxException, IOException, Pa\n         form.addFormData(\"file\", body, MediaType.APPLICATION_XML_TYPE, \"saml-idp-metadata.xml\");\n \n         Map<String, String> result = realm.identityProviders().importFrom(form);\n+       //firtsly check and remove enabled from result\n+        boolean enabled = Boolean.valueOf(result.get(\"enabled\"));\n+        result.remove(\"enabled\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5NTE0NA=="}, "originalCommit": {"oid": "3471111cdfdbddf1cb656d40add4c3f75d53ba2a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3NDMzMQ==", "bodyText": "Thank you. Constant just for this single change would set a good example for the rest, but those needn't be addressed in this PR.", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r453074331", "createdAt": "2020-07-10T20:58:48Z", "author": {"login": "hmlnarik"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/IdentityProviderTest.java", "diffHunk": "@@ -608,6 +609,11 @@ public void testSamlImportAndExport() throws URISyntaxException, IOException, Pa\n         form.addFormData(\"file\", body, MediaType.APPLICATION_XML_TYPE, \"saml-idp-metadata.xml\");\n \n         Map<String, String> result = realm.identityProviders().importFrom(form);\n+       //firtsly check and remove enabled from result\n+        boolean enabled = Boolean.valueOf(result.get(\"enabled\"));\n+        result.remove(\"enabled\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5NTE0NA=="}, "originalCommit": {"oid": "3471111cdfdbddf1cb656d40add4c3f75d53ba2a"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDA1NDU5OnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/IdentityProviderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNToxNjo1NlrOGvV7cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzoyOTo1MVrOGv3Zyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5NTUzNw==", "bodyText": "For the tests:\nAdd a test with a an IdP that is not enabled and check that it is indeed not enabled after import.\nWhy is enabled removed from the result? It should remain there to test the functionality.", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r452295537", "createdAt": "2020-07-09T15:16:56Z", "author": {"login": "hmlnarik"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/IdentityProviderTest.java", "diffHunk": "@@ -608,6 +609,11 @@ public void testSamlImportAndExport() throws URISyntaxException, IOException, Pa\n         form.addFormData(\"file\", body, MediaType.APPLICATION_XML_TYPE, \"saml-idp-metadata.xml\");\n \n         Map<String, String> result = realm.identityProviders().importFrom(form);\n+       //firtsly check and remove enabled from result", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3471111cdfdbddf1cb656d40add4c3f75d53ba2a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg0Mzk3OQ==", "bodyText": "I will add seperate test method for disabled IdP.\nThe difference between enabledFromMetadata with others properties is that enabledFromMetadata is not existed in config that saved in database. Moreover, assertSamlConfig is executed again after retrieving IdP from database. I will made appropriate changes to test in order to check appropriate value of enabledFromMetadata  and enable field for enabled and disabled IdP.", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r452843979", "createdAt": "2020-07-10T13:29:51Z", "author": {"login": "cgeorgilakis"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/IdentityProviderTest.java", "diffHunk": "@@ -608,6 +609,11 @@ public void testSamlImportAndExport() throws URISyntaxException, IOException, Pa\n         form.addFormData(\"file\", body, MediaType.APPLICATION_XML_TYPE, \"saml-idp-metadata.xml\");\n \n         Map<String, String> result = realm.identityProviders().importFrom(form);\n+       //firtsly check and remove enabled from result", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5NTUzNw=="}, "originalCommit": {"oid": "3471111cdfdbddf1cb656d40add4c3f75d53ba2a"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDA2MTM5OnYy", "diffSide": "RIGHT", "path": "themes/src/main/resources/theme/base/admin/resources/js/controllers/realm.js", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNToxODozN1rOGvV_yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMTozNzoyMlrOGxP2Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5NjY0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (data[\"enabled\"] != undefined) {\n          \n          \n            \n                        $scope.identityProvider.enabled = data[\"enabled\"];\n          \n          \n            \n                    if (data[\"enabledFromMetadata\"] !== undefined) {\n          \n          \n            \n                        $scope.identityProvider.enabled = data[\"enabledFromMetadata\"];\n          \n          \n            \n            \n          \n      \n    \n    \n  \n\n(Please note !== and not !=)", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r452296648", "createdAt": "2020-07-09T15:18:37Z", "author": {"login": "hmlnarik"}, "path": "themes/src/main/resources/theme/base/admin/resources/js/controllers/realm.js", "diffHunk": "@@ -965,6 +965,9 @@ module.controller('RealmIdentityProviderCtrl', function($scope, $filter, $upload\n         for (var key in data) {\n             $scope.identityProvider.config[key] = data[key];\n         }\n+        if (data[\"enabled\"] != undefined) {\n+            $scope.identityProvider.enabled = data[\"enabled\"];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3471111cdfdbddf1cb656d40add4c3f75d53ba2a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5NjY2Nw==", "bodyText": "Ok.\nMoreover, I observed that if I import an enabled SAML IdP , enabled will be off although enabledFromMetadata will be true.\nIf I change onoffswitch attribute to onoffswitchvalue ( realm-identity-provider-saml.html line 39) , import will work correctly. However, when admin create or edit SAML Idp, enabled is always off.\nThe problem is that identityProvider.enabled is initiated as boolean and data return string as value.\nHow should I write code correctly without changing app.js ( lines 2236-2366)?", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r453496667", "createdAt": "2020-07-13T08:55:19Z", "author": {"login": "cgeorgilakis"}, "path": "themes/src/main/resources/theme/base/admin/resources/js/controllers/realm.js", "diffHunk": "@@ -965,6 +965,9 @@ module.controller('RealmIdentityProviderCtrl', function($scope, $filter, $upload\n         for (var key in data) {\n             $scope.identityProvider.config[key] = data[key];\n         }\n+        if (data[\"enabled\"] != undefined) {\n+            $scope.identityProvider.enabled = data[\"enabled\"];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5NjY0OA=="}, "originalCommit": {"oid": "3471111cdfdbddf1cb656d40add4c3f75d53ba2a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI3NTYzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (data[\"enabled\"] != undefined) {\n          \n          \n            \n                        $scope.identityProvider.enabled = data[\"enabled\"];\n          \n          \n            \n                        $scope.identityProvider.enabled = data[\"enabledFromMetadata\"] == \"true\";", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r454275631", "createdAt": "2020-07-14T11:01:38Z", "author": {"login": "hmlnarik"}, "path": "themes/src/main/resources/theme/base/admin/resources/js/controllers/realm.js", "diffHunk": "@@ -965,6 +965,9 @@ module.controller('RealmIdentityProviderCtrl', function($scope, $filter, $upload\n         for (var key in data) {\n             $scope.identityProvider.config[key] = data[key];\n         }\n+        if (data[\"enabled\"] != undefined) {\n+            $scope.identityProvider.enabled = data[\"enabled\"];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5NjY0OA=="}, "originalCommit": {"oid": "3471111cdfdbddf1cb656d40add4c3f75d53ba2a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI5MzAwNw==", "bodyText": "You are right. However, if must exists for other Identity Providers like OIDC. In these Identity Providers enabledFromMetadata will not exist in data.", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r454293007", "createdAt": "2020-07-14T11:37:22Z", "author": {"login": "cgeorgilakis"}, "path": "themes/src/main/resources/theme/base/admin/resources/js/controllers/realm.js", "diffHunk": "@@ -965,6 +965,9 @@ module.controller('RealmIdentityProviderCtrl', function($scope, $filter, $upload\n         for (var key in data) {\n             $scope.identityProvider.config[key] = data[key];\n         }\n+        if (data[\"enabled\"] != undefined) {\n+            $scope.identityProvider.enabled = data[\"enabled\"];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5NjY0OA=="}, "originalCommit": {"oid": "3471111cdfdbddf1cb656d40add4c3f75d53ba2a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDA4MDE0OnYy", "diffSide": "RIGHT", "path": "saml-core-api/src/main/java/org/keycloak/dom/saml/v2/metadata/ExtensionsType.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNToyMjo1NVrOGvWLfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDo1NTowOFrOGwFXVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5OTY0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (Object o : this.any) {\n          \n          \n            \n                        if (o instanceof EntityAttributes) {\n          \n          \n            \n                            return (EntityAttributes) o;\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    return null;\n          \n          \n            \n                    return this.any.stream()\n          \n          \n            \n                        .filter(EntityAttributes::isInstance)\n          \n          \n            \n                        .findAny();", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r452299645", "createdAt": "2020-07-09T15:22:55Z", "author": {"login": "hmlnarik"}, "path": "saml-core-api/src/main/java/org/keycloak/dom/saml/v2/metadata/ExtensionsType.java", "diffHunk": "@@ -88,4 +89,14 @@ public void removeExtension(Object extension) {\n     public List<Object> getAny() {\n         return Collections.unmodifiableList(this.any);\n     }\n-}\n\\ No newline at end of file\n+\n+    public EntityAttributes getEntityAttributes() {\n+        for (Object o : this.any) {\n+            if (o instanceof EntityAttributes) {\n+                return (EntityAttributes) o;\n+            }\n+        }\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3471111cdfdbddf1cb656d40add4c3f75d53ba2a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc1MDAzNA==", "bodyText": "I agree. However, for adding this I must change maven.compiler.source of this subproject. I believe this is the best solution. Do you want to do it?\nOtherwhise a solution could be:\nreturn (EntityAttributes) this.any.stream().filter(o -> o instanceof EntityAttributes).findAny().orElse(null);", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r452750034", "createdAt": "2020-07-10T10:04:12Z", "author": {"login": "cgeorgilakis"}, "path": "saml-core-api/src/main/java/org/keycloak/dom/saml/v2/metadata/ExtensionsType.java", "diffHunk": "@@ -88,4 +89,14 @@ public void removeExtension(Object extension) {\n     public List<Object> getAny() {\n         return Collections.unmodifiableList(this.any);\n     }\n-}\n\\ No newline at end of file\n+\n+    public EntityAttributes getEntityAttributes() {\n+        for (Object o : this.any) {\n+            if (o instanceof EntityAttributes) {\n+                return (EntityAttributes) o;\n+            }\n+        }\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5OTY0NQ=="}, "originalCommit": {"oid": "3471111cdfdbddf1cb656d40add4c3f75d53ba2a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3MjcyNA==", "bodyText": "Ah, ignore it for this moment then, I didn't realize this is still used by JDK 7 code.", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r453072724", "createdAt": "2020-07-10T20:55:08Z", "author": {"login": "hmlnarik"}, "path": "saml-core-api/src/main/java/org/keycloak/dom/saml/v2/metadata/ExtensionsType.java", "diffHunk": "@@ -88,4 +89,14 @@ public void removeExtension(Object extension) {\n     public List<Object> getAny() {\n         return Collections.unmodifiableList(this.any);\n     }\n-}\n\\ No newline at end of file\n+\n+    public EntityAttributes getEntityAttributes() {\n+        for (Object o : this.any) {\n+            if (o instanceof EntityAttributes) {\n+                return (EntityAttributes) o;\n+            }\n+        }\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5OTY0NQ=="}, "originalCommit": {"oid": "3471111cdfdbddf1cb656d40add4c3f75d53ba2a"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDA4ODEzOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNToyNDo1MlrOGvWQyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDo1NjowNFrOGwFYxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMwMTAwMg==", "bodyText": "Prevent potential NPE\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \t\t\t\t    if (MACEDIR_ENTITY_CATEGORY.equals(attribute.getName()) && attribute.getAttributeValue().contains(REFEDS_HIDE_FROM_DISCOVERY) )\n          \n          \n            \n                    \t\t\t\t    if (MACEDIR_ENTITY_CATEGORY.equals(attribute.getName()) && REFEDS_HIDE_FROM_DISCOVERY.equals(attribute.getAttributeValue()))", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r452301002", "createdAt": "2020-07-09T15:24:52Z", "author": {"login": "hmlnarik"}, "path": "services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderFactory.java", "diffHunk": "@@ -152,6 +158,18 @@ public SAMLIdentityProviderConfig createConfig() {\n                             samlIdentityProviderConfig.setEncryptionPublicKey(defaultCertificate);\n                         }\n                     }\n+                    \n+                    samlIdentityProviderConfig.setEnabledConfig(entityType.getValidUntil() == null || entityType.getValidUntil().toGregorianCalendar().getTime().after(new Date()) );\n+                    \n+                \t//check for hide on login attribute\n+        \t\t\tif ( entityType.getExtensions() != null && entityType.getExtensions().getEntityAttributes() != null ) {\n+        \t\t\t    for (AttributeType attribute :  entityType.getExtensions().getEntityAttributes().getAttribute()) {\n+        \t\t\t\t    if (MACEDIR_ENTITY_CATEGORY.equals(attribute.getName()) && attribute.getAttributeValue().contains(REFEDS_HIDE_FROM_DISCOVERY) )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3471111cdfdbddf1cb656d40add4c3f75d53ba2a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY5NjUzMQ==", "bodyText": "attributeValue is a List in class AttributeType which is instantiated as empty list as you can see.\nMoreover it is error to check equality between String and List.", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r452696531", "createdAt": "2020-07-10T08:21:05Z", "author": {"login": "cgeorgilakis"}, "path": "services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderFactory.java", "diffHunk": "@@ -152,6 +158,18 @@ public SAMLIdentityProviderConfig createConfig() {\n                             samlIdentityProviderConfig.setEncryptionPublicKey(defaultCertificate);\n                         }\n                     }\n+                    \n+                    samlIdentityProviderConfig.setEnabledConfig(entityType.getValidUntil() == null || entityType.getValidUntil().toGregorianCalendar().getTime().after(new Date()) );\n+                    \n+                \t//check for hide on login attribute\n+        \t\t\tif ( entityType.getExtensions() != null && entityType.getExtensions().getEntityAttributes() != null ) {\n+        \t\t\t    for (AttributeType attribute :  entityType.getExtensions().getEntityAttributes().getAttribute()) {\n+        \t\t\t\t    if (MACEDIR_ENTITY_CATEGORY.equals(attribute.getName()) && attribute.getAttributeValue().contains(REFEDS_HIDE_FROM_DISCOVERY) )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMwMTAwMg=="}, "originalCommit": {"oid": "3471111cdfdbddf1cb656d40add4c3f75d53ba2a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA3MzA5Mg==", "bodyText": "You're indeed right :-)", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r453073092", "createdAt": "2020-07-10T20:56:04Z", "author": {"login": "hmlnarik"}, "path": "services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProviderFactory.java", "diffHunk": "@@ -152,6 +158,18 @@ public SAMLIdentityProviderConfig createConfig() {\n                             samlIdentityProviderConfig.setEncryptionPublicKey(defaultCertificate);\n                         }\n                     }\n+                    \n+                    samlIdentityProviderConfig.setEnabledConfig(entityType.getValidUntil() == null || entityType.getValidUntil().toGregorianCalendar().getTime().after(new Date()) );\n+                    \n+                \t//check for hide on login attribute\n+        \t\t\tif ( entityType.getExtensions() != null && entityType.getExtensions().getEntityAttributes() != null ) {\n+        \t\t\t    for (AttributeType attribute :  entityType.getExtensions().getEntityAttributes().getAttribute()) {\n+        \t\t\t\t    if (MACEDIR_ENTITY_CATEGORY.equals(attribute.getName()) && attribute.getAttributeValue().contains(REFEDS_HIDE_FROM_DISCOVERY) )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMwMTAwMg=="}, "originalCommit": {"oid": "3471111cdfdbddf1cb656d40add4c3f75d53ba2a"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjA1MDQwOnYy", "diffSide": "RIGHT", "path": "themes/src/main/resources/theme/base/admin/resources/js/controllers/realm.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzoyMToxMlrOHFXg6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzoyMToxMlrOHFXg6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5MDE4Ng==", "bodyText": "enabledFromMetadata should be also removed from $scope.identityProvider.config.", "url": "https://github.com/keycloak/keycloak/pull/7111#discussion_r475390186", "createdAt": "2020-08-24T07:21:12Z", "author": {"login": "hmlnarik"}, "path": "themes/src/main/resources/theme/base/admin/resources/js/controllers/realm.js", "diffHunk": "@@ -965,6 +965,9 @@ module.controller('RealmIdentityProviderCtrl', function($scope, $filter, $upload\n         for (var key in data) {\n             $scope.identityProvider.config[key] = data[key];\n         }\n+        if (data[\"enabledFromMetadata\"] !== undefined ) {\n+            $scope.identityProvider.enabled = data[\"enabledFromMetadata\"] == \"true\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b9d42a132effd137207f1453749a59aed9b974"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3678, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}