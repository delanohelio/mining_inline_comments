{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1MzE5MzI5", "number": 7381, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo1Nzo0MlrOEw1fJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMTo1MTo0OFrOFLQGww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjQzNDMwOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/broker/oidc/OIDCIdentityProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo1Nzo0MlrOHmo1cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTo1Nzo0MlrOHmo1cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3Njk3OQ==", "bodyText": "What should happen if the state param is missing?", "url": "https://github.com/keycloak/keycloak/pull/7381#discussion_r510276979", "createdAt": "2020-10-22T15:57:42Z", "author": {"login": "thomasdarimont"}, "path": "services/src/main/java/org/keycloak/broker/oidc/OIDCIdentityProvider.java", "diffHunk": "@@ -317,6 +321,27 @@ public OIDCEndpoint(AuthenticationCallback callback, RealmModel realm, EventBuil\n             super(callback, realm, event);\n         }\n \n+        @Override\n+        public SimpleHttp generateTokenRequest(String authorizationCode) {\n+            SimpleHttp simpleHttp = super.generateTokenRequest(authorizationCode);\n+\n+            if (getConfig().isPkceEnabled()) {\n+\n+                // reconstruct the original code verifier that was used to generate the code challenge.\n+                String stateParam = httpRequest.getUri().getQueryParameters().getFirst(OAuth2Constants.STATE);\n+                // TODO handle state param missing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b886d04c29aac5896eb687cb8c0fefa8440e02e9"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjQ2MzMxOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/broker/oidc/OIDCIdentityProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNjowNDowNlrOHmpHhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNjowNDowNlrOHmpHhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI4MTYwNg==", "bodyText": "What to do if the authSession is missing?", "url": "https://github.com/keycloak/keycloak/pull/7381#discussion_r510281606", "createdAt": "2020-10-22T16:04:06Z", "author": {"login": "thomasdarimont"}, "path": "services/src/main/java/org/keycloak/broker/oidc/OIDCIdentityProvider.java", "diffHunk": "@@ -317,6 +321,27 @@ public OIDCEndpoint(AuthenticationCallback callback, RealmModel realm, EventBuil\n             super(callback, realm, event);\n         }\n \n+        @Override\n+        public SimpleHttp generateTokenRequest(String authorizationCode) {\n+            SimpleHttp simpleHttp = super.generateTokenRequest(authorizationCode);\n+\n+            if (getConfig().isPkceEnabled()) {\n+\n+                // reconstruct the original code verifier that was used to generate the code challenge.\n+                String stateParam = httpRequest.getUri().getQueryParameters().getFirst(OAuth2Constants.STATE);\n+                // TODO handle state param missing\n+\n+                IdentityBrokerState idpBrokerState = IdentityBrokerState.encoded(stateParam);\n+                ClientModel client = realm.getClientByClientId(idpBrokerState.getClientId());\n+                AuthenticationSessionModel authSession = ClientSessionCode.getClientSession(idpBrokerState.getEncoded(), idpBrokerState.getTabId(), session, realm, client, event, AuthenticationSessionModel.class);\n+                // TODO handle authSession missing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b886d04c29aac5896eb687cb8c0fefa8440e02e9"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTc3NDgwOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/broker/oidc/OIDCIdentityProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzo0NTo1MlrOH16lsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQyMjo1NTowNVrOIJIjkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI5NjQ5Nw==", "bodyText": "I think makes more sense the PKCE code here org.keycloak.broker.oidc.AbstractOAuth2IdentityProvider#authenticateTokenRequest. As this may also be useful for OAuth2-based brokers.", "url": "https://github.com/keycloak/keycloak/pull/7381#discussion_r526296497", "createdAt": "2020-11-18T17:45:52Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/broker/oidc/OIDCIdentityProvider.java", "diffHunk": "@@ -317,6 +321,39 @@ public OIDCEndpoint(AuthenticationCallback callback, RealmModel realm, EventBuil\n             super(callback, realm, event);\n         }\n \n+        @Override\n+        public SimpleHttp generateTokenRequest(String authorizationCode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc6ecc60c946c17fef56392f1f03e655588b1882"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ0ODI3NA==", "bodyText": "I gave this idea a spin, but in that case I'm missing the EventBuilder dependencies. Also IMHO the main purpose of PKCE is to protect the authorizationCode, which is handled in generateTokenRequest(...).\nThe main purpose of the authenticateTokenRequest(..) seems to be to add the proper authentication for the authorization  as well as token refresh requests. Therefore I think the proper place would be org.keycloak.broker.oidc.AbstractOAuth2IdentityProvider.Endpoint#generateTokenRequest(..).\nWhat do you think? I just changed the code to reflect my thinking.", "url": "https://github.com/keycloak/keycloak/pull/7381#discussion_r546448274", "createdAt": "2020-12-20T22:55:05Z", "author": {"login": "thomasdarimont"}, "path": "services/src/main/java/org/keycloak/broker/oidc/OIDCIdentityProvider.java", "diffHunk": "@@ -317,6 +321,39 @@ public OIDCEndpoint(AuthenticationCallback callback, RealmModel realm, EventBuil\n             super(callback, realm, event);\n         }\n \n+        @Override\n+        public SimpleHttp generateTokenRequest(String authorizationCode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI5NjQ5Nw=="}, "originalCommit": {"oid": "fc6ecc60c946c17fef56392f1f03e655588b1882"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MzQyNTMxOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/broker/oidc/AbstractOAuth2IdentityProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMTo1MTo0OFrOIOUaKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMTo1MTo0OFrOIOUaKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTg4NTM1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            String stateParam = httpRequest.getUri().getQueryParameters().getFirst(OAuth2Constants.STATE);\n          \n          \n            \n                            String stateParam = session.getContext().getUri().getQueryParameters().getFirst(OAuth2Constants.STATE);", "url": "https://github.com/keycloak/keycloak/pull/7381#discussion_r551885353", "createdAt": "2021-01-05T11:51:48Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/broker/oidc/AbstractOAuth2IdentityProvider.java", "diffHunk": "@@ -507,6 +530,45 @@ public SimpleHttp generateTokenRequest(String authorizationCode) {\n                     .param(OAUTH2_PARAMETER_REDIRECT_URI, Urls.identityProviderAuthnResponse(context.getUri().getBaseUri(),\n                             getConfig().getAlias(), context.getRealm().getName()).toString())\n                     .param(OAUTH2_PARAMETER_GRANT_TYPE, OAUTH2_GRANT_TYPE_AUTHORIZATION_CODE);\n+\n+            if (getConfig().isPkceEnabled()) {\n+\n+                // reconstruct the original code verifier that was used to generate the code challenge from the HttpRequest.\n+                String stateParam = httpRequest.getUri().getQueryParameters().getFirst(OAuth2Constants.STATE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66fb57486ab01c88eea08fed2149eb70f42e0ac9"}, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3408, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}