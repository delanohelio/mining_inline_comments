{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwNzc3MzIy", "number": 6726, "title": "KEYCLOAK-10898 WildFly Adapter CLI based installation scripts", "bodyText": "", "createdAt": "2020-02-04T11:09:41Z", "url": "https://github.com/keycloak/keycloak/pull/6726", "merged": true, "mergeCommit": {"oid": "7c91e36e43599a25b008c9b09afd3145c3f4da4d"}, "closed": true, "closedAt": "2020-03-02T09:08:47Z", "author": {"login": "vramik"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBDB4zgBqjMwMDY0ODAzNTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcJp_ungFqTM2NzAzODIzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "839df592b0f14f2a58131857b44fd31ef7f32dd4", "author": {"user": {"login": "vramik", "name": "Vlasta Ramik"}}, "url": "https://github.com/keycloak/keycloak/commit/839df592b0f14f2a58131857b44fd31ef7f32dd4", "committedDate": "2020-02-04T10:59:06Z", "message": "KEYCLOAK-10898 WildFly Adapter CLI based installation scripts"}, "afterCommit": {"oid": "a0c57e6326008cc3f9622a2c966ca602dfb22771", "author": {"user": {"login": "vramik", "name": "Vlasta Ramik"}}, "url": "https://github.com/keycloak/keycloak/commit/a0c57e6326008cc3f9622a2c966ca602dfb22771", "committedDate": "2020-02-04T15:11:35Z", "message": "KEYCLOAK-10898 WildFly Adapter CLI based installation scripts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNjA5ODE0", "url": "https://github.com/keycloak/keycloak/pull/6726#pullrequestreview-353609814", "createdAt": "2020-02-05T10:28:20Z", "commit": {"oid": "a0c57e6326008cc3f9622a2c966ca602dfb22771"}, "state": "DISMISSED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMDoyODoyMFrOFly0Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMDozMTo1MlrOFly7SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE3NDE1NQ==", "bodyText": "deploymentName should have quotes around it, otherwise spaces are lost and it becomes \"WARMODULENAME.war\" in standalone.xml.", "url": "https://github.com/keycloak/keycloak/pull/6726#discussion_r375174155", "createdAt": "2020-02-05T10:28:20Z", "author": {"login": "stianst"}, "path": "services/src/main/java/org/keycloak/protocol/oidc/installation/KeycloakOIDCJbossSubsystemClientCliInstallation.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.protocol.oidc.installation;\n+\n+import org.keycloak.Config;\n+import org.keycloak.models.ClientModel;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.KeycloakSessionFactory;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.protocol.ClientInstallationProvider;\n+import org.keycloak.protocol.oidc.OIDCLoginProtocol;\n+\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import java.net.URI;\n+import java.util.Map;\n+\n+public class KeycloakOIDCJbossSubsystemClientCliInstallation implements ClientInstallationProvider {\n+\n+    @Override\n+    public Response generateInstallation(KeycloakSession session, RealmModel realm, ClientModel client, URI baseUri) {\n+        String deploymentName = \"WAR MODULE NAME.war\";\n+        StringBuilder builder = new StringBuilder();\n+        \n+        builder\n+                .append(\"/subsystem=keycloak/secure-deployment=\").append(deploymentName).append(\"/:add( \\\\\\n\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0c57e6326008cc3f9622a2c966ca602dfb22771"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE3NTc4OA==", "bodyText": "Use quotes instead of _ to make it consistent with XML download.", "url": "https://github.com/keycloak/keycloak/pull/6726#discussion_r375175788", "createdAt": "2020-02-05T10:31:26Z", "author": {"login": "stianst"}, "path": "services/src/main/java/org/keycloak/protocol/saml/installation/KeycloakSamlSubsystemCliInstallation.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.protocol.saml.installation;\n+\n+import org.keycloak.Config;\n+import org.keycloak.models.ClientModel;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.KeycloakSessionFactory;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.protocol.ClientInstallationProvider;\n+import org.keycloak.protocol.saml.SamlClient;\n+import org.keycloak.protocol.saml.SamlProtocol;\n+\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import java.net.URI;\n+import javax.ws.rs.core.UriBuilder;\n+import org.keycloak.services.resources.RealmsResource;\n+\n+public class KeycloakSamlSubsystemCliInstallation implements ClientInstallationProvider {\n+\n+    @Override\n+    public Response generateInstallation(KeycloakSession session, RealmModel realm, ClientModel client, URI baseUri) {\n+        SamlClient samlClient = new SamlClient(client);\n+        StringBuilder builder = new StringBuilder();\n+        String entityId = client.getBaseUrl() == null ? \"SPECIFY_YOUR_entityID!\" : client.getBaseUrl();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0c57e6326008cc3f9622a2c966ca602dfb22771"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE3NTgxNw==", "bodyText": "Use quotes instead of _ to make it consistent with XML download.", "url": "https://github.com/keycloak/keycloak/pull/6726#discussion_r375175817", "createdAt": "2020-02-05T10:31:30Z", "author": {"login": "stianst"}, "path": "services/src/main/java/org/keycloak/protocol/saml/installation/KeycloakSamlSubsystemCliInstallation.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.protocol.saml.installation;\n+\n+import org.keycloak.Config;\n+import org.keycloak.models.ClientModel;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.KeycloakSessionFactory;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.protocol.ClientInstallationProvider;\n+import org.keycloak.protocol.saml.SamlClient;\n+import org.keycloak.protocol.saml.SamlProtocol;\n+\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import java.net.URI;\n+import javax.ws.rs.core.UriBuilder;\n+import org.keycloak.services.resources.RealmsResource;\n+\n+public class KeycloakSamlSubsystemCliInstallation implements ClientInstallationProvider {\n+\n+    @Override\n+    public Response generateInstallation(KeycloakSession session, RealmModel realm, ClientModel client, URI baseUri) {\n+        SamlClient samlClient = new SamlClient(client);\n+        StringBuilder builder = new StringBuilder();\n+        String entityId = client.getBaseUrl() == null ? \"SPECIFY_YOUR_entityID!\" : client.getBaseUrl();\n+        String bindingUrl = RealmsResource.protocolUrl(UriBuilder.fromUri(baseUri))\n+                .build(realm.getName(), SamlProtocol.LOGIN_PROTOCOL).toString();\n+        \n+        builder.append(\"/subsystem=keycloak-saml/secure-deployment=YOUR-WAR.war/:add\\n\\n\")\n+                .append(\"/subsystem=keycloak-saml/secure-deployment=YOUR-WAR.war/SP=\")\n+                .append(entityId)\n+                .append(\"/:add(sslPolicy=\")\n+                .append(realm.getSslRequired().name())\n+                .append(\",logoutPage=SPECIFY_YOUR_LOGOUT_PAGE!)\\n\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0c57e6326008cc3f9622a2c966ca602dfb22771"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE3NTk2Mg==", "bodyText": "Use quotes instead of _ to make it consistent with XML download.", "url": "https://github.com/keycloak/keycloak/pull/6726#discussion_r375175962", "createdAt": "2020-02-05T10:31:46Z", "author": {"login": "stianst"}, "path": "services/src/main/java/org/keycloak/protocol/saml/installation/KeycloakSamlSubsystemCliInstallation.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.protocol.saml.installation;\n+\n+import org.keycloak.Config;\n+import org.keycloak.models.ClientModel;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.KeycloakSessionFactory;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.protocol.ClientInstallationProvider;\n+import org.keycloak.protocol.saml.SamlClient;\n+import org.keycloak.protocol.saml.SamlProtocol;\n+\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import java.net.URI;\n+import javax.ws.rs.core.UriBuilder;\n+import org.keycloak.services.resources.RealmsResource;\n+\n+public class KeycloakSamlSubsystemCliInstallation implements ClientInstallationProvider {\n+\n+    @Override\n+    public Response generateInstallation(KeycloakSession session, RealmModel realm, ClientModel client, URI baseUri) {\n+        SamlClient samlClient = new SamlClient(client);\n+        StringBuilder builder = new StringBuilder();\n+        String entityId = client.getBaseUrl() == null ? \"SPECIFY_YOUR_entityID!\" : client.getBaseUrl();\n+        String bindingUrl = RealmsResource.protocolUrl(UriBuilder.fromUri(baseUri))\n+                .build(realm.getName(), SamlProtocol.LOGIN_PROTOCOL).toString();\n+        \n+        builder.append(\"/subsystem=keycloak-saml/secure-deployment=YOUR-WAR.war/:add\\n\\n\")\n+                .append(\"/subsystem=keycloak-saml/secure-deployment=YOUR-WAR.war/SP=\")\n+                .append(entityId)\n+                .append(\"/:add(sslPolicy=\")\n+                .append(realm.getSslRequired().name())\n+                .append(\",logoutPage=SPECIFY_YOUR_LOGOUT_PAGE!)\\n\\n\");\n+        if (samlClient.requiresClientSignature()) {\n+            builder.append(\"/subsystem=keycloak-saml/secure-deployment=YOUR-WAR.war/SP=\")\n+                    .append(entityId)\n+                    .append(\"/Key=KEY1:add(signing=true, \\\\\\nPrivateKeyPem=\\\"\")\n+                    .append(samlClient.getClientSigningPrivateKey() == null ? \"PRIVATE_KEY_NOT_SET_UP_OR_KNOWN\" : samlClient.getClientSigningPrivateKey())\n+                    .append(\"\\\", \\\\\\nCertificatePem=\\\"\")\n+                    .append(samlClient.getClientSigningCertificate() == null ? \"YOU_MUST_CONFIGURE_YOUR_CLIENT's_SIGNING_CERTIFICATE\" : samlClient.getClientSigningCertificate())\n+                    .append(\"\\\")\\n\\n\");\n+        }\n+        if (samlClient.requiresEncryption()) {\n+            builder.append(\"/subsystem=keycloak-saml/secure-deployment=YOUR-WAR.war/SP=\")\n+                    .append(entityId)\n+                    .append(\"/Key=KEY2:add(encryption=true,PrivateKeyPem=\\\"\")\n+                    .append(samlClient.getClientEncryptingPrivateKey() == null ? \"PRIVATE_KEY_NOT_SET_UP_OR_KNOWN\" : samlClient.getClientEncryptingPrivateKey())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0c57e6326008cc3f9622a2c966ca602dfb22771"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE3NTk4Mw==", "bodyText": "Use quotes instead of _ to make it consistent with XML download.", "url": "https://github.com/keycloak/keycloak/pull/6726#discussion_r375175983", "createdAt": "2020-02-05T10:31:49Z", "author": {"login": "stianst"}, "path": "services/src/main/java/org/keycloak/protocol/saml/installation/KeycloakSamlSubsystemCliInstallation.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.protocol.saml.installation;\n+\n+import org.keycloak.Config;\n+import org.keycloak.models.ClientModel;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.KeycloakSessionFactory;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.protocol.ClientInstallationProvider;\n+import org.keycloak.protocol.saml.SamlClient;\n+import org.keycloak.protocol.saml.SamlProtocol;\n+\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import java.net.URI;\n+import javax.ws.rs.core.UriBuilder;\n+import org.keycloak.services.resources.RealmsResource;\n+\n+public class KeycloakSamlSubsystemCliInstallation implements ClientInstallationProvider {\n+\n+    @Override\n+    public Response generateInstallation(KeycloakSession session, RealmModel realm, ClientModel client, URI baseUri) {\n+        SamlClient samlClient = new SamlClient(client);\n+        StringBuilder builder = new StringBuilder();\n+        String entityId = client.getBaseUrl() == null ? \"SPECIFY_YOUR_entityID!\" : client.getBaseUrl();\n+        String bindingUrl = RealmsResource.protocolUrl(UriBuilder.fromUri(baseUri))\n+                .build(realm.getName(), SamlProtocol.LOGIN_PROTOCOL).toString();\n+        \n+        builder.append(\"/subsystem=keycloak-saml/secure-deployment=YOUR-WAR.war/:add\\n\\n\")\n+                .append(\"/subsystem=keycloak-saml/secure-deployment=YOUR-WAR.war/SP=\")\n+                .append(entityId)\n+                .append(\"/:add(sslPolicy=\")\n+                .append(realm.getSslRequired().name())\n+                .append(\",logoutPage=SPECIFY_YOUR_LOGOUT_PAGE!)\\n\\n\");\n+        if (samlClient.requiresClientSignature()) {\n+            builder.append(\"/subsystem=keycloak-saml/secure-deployment=YOUR-WAR.war/SP=\")\n+                    .append(entityId)\n+                    .append(\"/Key=KEY1:add(signing=true, \\\\\\nPrivateKeyPem=\\\"\")\n+                    .append(samlClient.getClientSigningPrivateKey() == null ? \"PRIVATE_KEY_NOT_SET_UP_OR_KNOWN\" : samlClient.getClientSigningPrivateKey())\n+                    .append(\"\\\", \\\\\\nCertificatePem=\\\"\")\n+                    .append(samlClient.getClientSigningCertificate() == null ? \"YOU_MUST_CONFIGURE_YOUR_CLIENT's_SIGNING_CERTIFICATE\" : samlClient.getClientSigningCertificate())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0c57e6326008cc3f9622a2c966ca602dfb22771"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE3NjAwOA==", "bodyText": "Use quotes instead of _ to make it consistent with XML download.", "url": "https://github.com/keycloak/keycloak/pull/6726#discussion_r375176008", "createdAt": "2020-02-05T10:31:52Z", "author": {"login": "stianst"}, "path": "services/src/main/java/org/keycloak/protocol/saml/installation/KeycloakSamlSubsystemCliInstallation.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.protocol.saml.installation;\n+\n+import org.keycloak.Config;\n+import org.keycloak.models.ClientModel;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.KeycloakSessionFactory;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.protocol.ClientInstallationProvider;\n+import org.keycloak.protocol.saml.SamlClient;\n+import org.keycloak.protocol.saml.SamlProtocol;\n+\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import java.net.URI;\n+import javax.ws.rs.core.UriBuilder;\n+import org.keycloak.services.resources.RealmsResource;\n+\n+public class KeycloakSamlSubsystemCliInstallation implements ClientInstallationProvider {\n+\n+    @Override\n+    public Response generateInstallation(KeycloakSession session, RealmModel realm, ClientModel client, URI baseUri) {\n+        SamlClient samlClient = new SamlClient(client);\n+        StringBuilder builder = new StringBuilder();\n+        String entityId = client.getBaseUrl() == null ? \"SPECIFY_YOUR_entityID!\" : client.getBaseUrl();\n+        String bindingUrl = RealmsResource.protocolUrl(UriBuilder.fromUri(baseUri))\n+                .build(realm.getName(), SamlProtocol.LOGIN_PROTOCOL).toString();\n+        \n+        builder.append(\"/subsystem=keycloak-saml/secure-deployment=YOUR-WAR.war/:add\\n\\n\")\n+                .append(\"/subsystem=keycloak-saml/secure-deployment=YOUR-WAR.war/SP=\")\n+                .append(entityId)\n+                .append(\"/:add(sslPolicy=\")\n+                .append(realm.getSslRequired().name())\n+                .append(\",logoutPage=SPECIFY_YOUR_LOGOUT_PAGE!)\\n\\n\");\n+        if (samlClient.requiresClientSignature()) {\n+            builder.append(\"/subsystem=keycloak-saml/secure-deployment=YOUR-WAR.war/SP=\")\n+                    .append(entityId)\n+                    .append(\"/Key=KEY1:add(signing=true, \\\\\\nPrivateKeyPem=\\\"\")\n+                    .append(samlClient.getClientSigningPrivateKey() == null ? \"PRIVATE_KEY_NOT_SET_UP_OR_KNOWN\" : samlClient.getClientSigningPrivateKey())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0c57e6326008cc3f9622a2c966ca602dfb22771"}, "originalPosition": 55}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a0c57e6326008cc3f9622a2c966ca602dfb22771", "author": {"user": {"login": "vramik", "name": "Vlasta Ramik"}}, "url": "https://github.com/keycloak/keycloak/commit/a0c57e6326008cc3f9622a2c966ca602dfb22771", "committedDate": "2020-02-04T15:11:35Z", "message": "KEYCLOAK-10898 WildFly Adapter CLI based installation scripts"}, "afterCommit": {"oid": "bf321b9ca864ee2830852a31a7d926b3edec3e90", "author": {"user": {"login": "vramik", "name": "Vlasta Ramik"}}, "url": "https://github.com/keycloak/keycloak/commit/bf321b9ca864ee2830852a31a7d926b3edec3e90", "committedDate": "2020-02-05T14:28:31Z", "message": "KEYCLOAK-10898 WildFly Adapter CLI based installation scripts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0NDU0MjE1", "url": "https://github.com/keycloak/keycloak/pull/6726#pullrequestreview-354454215", "createdAt": "2020-02-06T13:38:51Z", "commit": {"oid": "bf321b9ca864ee2830852a31a7d926b3edec3e90"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMzozODo1MlrOFmbS4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMzozODo1MlrOFmbS4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgzNzQxMQ==", "bodyText": "introduce a method for escaping the quotes in any user-entered data: https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.1/html-single/management_cli_guide/index#quotation_marks\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .append(\"/subsystem=keycloak/secure-deployment=\\\"\").append(deploymentName).append(\"\\\"/:add( \\\\\\n\")\n          \n          \n            \n                            .append(\"/subsystem=keycloak/secure-deployment=\\\"\").append(quote(deploymentName)).append(\"\\\"/:add( \\\\\\n\")", "url": "https://github.com/keycloak/keycloak/pull/6726#discussion_r375837411", "createdAt": "2020-02-06T13:38:52Z", "author": {"login": "hmlnarik"}, "path": "services/src/main/java/org/keycloak/protocol/oidc/installation/KeycloakOIDCJbossSubsystemClientCliInstallation.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.protocol.oidc.installation;\n+\n+import org.keycloak.Config;\n+import org.keycloak.models.ClientModel;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.KeycloakSessionFactory;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.protocol.ClientInstallationProvider;\n+import org.keycloak.protocol.oidc.OIDCLoginProtocol;\n+\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import java.net.URI;\n+import java.util.Map;\n+\n+public class KeycloakOIDCJbossSubsystemClientCliInstallation implements ClientInstallationProvider {\n+\n+    @Override\n+    public Response generateInstallation(KeycloakSession session, RealmModel realm, ClientModel client, URI baseUri) {\n+        String deploymentName = \"WAR MODULE NAME.war\";\n+        StringBuilder builder = new StringBuilder();\n+        \n+        builder\n+                .append(\"/subsystem=keycloak/secure-deployment=\\\"\").append(deploymentName).append(\"\\\"/:add( \\\\\\n\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf321b9ca864ee2830852a31a7d926b3edec3e90"}, "originalPosition": 41}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bf321b9ca864ee2830852a31a7d926b3edec3e90", "author": {"user": {"login": "vramik", "name": "Vlasta Ramik"}}, "url": "https://github.com/keycloak/keycloak/commit/bf321b9ca864ee2830852a31a7d926b3edec3e90", "committedDate": "2020-02-05T14:28:31Z", "message": "KEYCLOAK-10898 WildFly Adapter CLI based installation scripts"}, "afterCommit": {"oid": "a3ce9bee5f9b20d45c31a84c39f7b8b3808d6b73", "author": {"user": {"login": "vramik", "name": "Vlasta Ramik"}}, "url": "https://github.com/keycloak/keycloak/commit/a3ce9bee5f9b20d45c31a84c39f7b8b3808d6b73", "committedDate": "2020-02-10T09:49:15Z", "message": "KEYCLOAK-10898 WildFly Adapter CLI based installation scripts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MjMzNjIz", "url": "https://github.com/keycloak/keycloak/pull/6726#pullrequestreview-364233623", "createdAt": "2020-02-25T15:29:22Z", "commit": {"oid": "a3ce9bee5f9b20d45c31a84c39f7b8b3808d6b73"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNToyOToyMlrOFuKklg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNToyOToyMlrOFuKklg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk1MjAyMg==", "bodyText": "The value has to be quoted per https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.2/html-single/management_cli_guide/index#cli_special_characters", "url": "https://github.com/keycloak/keycloak/pull/6726#discussion_r383952022", "createdAt": "2020-02-25T15:29:22Z", "author": {"login": "hmlnarik"}, "path": "services/src/main/java/org/keycloak/protocol/saml/installation/KeycloakSamlSubsystemCliInstallation.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.protocol.saml.installation;\n+\n+import org.keycloak.Config;\n+import org.keycloak.models.ClientModel;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.KeycloakSessionFactory;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.protocol.ClientInstallationProvider;\n+import org.keycloak.protocol.saml.SamlClient;\n+import org.keycloak.protocol.saml.SamlProtocol;\n+\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import java.net.URI;\n+import javax.ws.rs.core.UriBuilder;\n+import org.keycloak.services.resources.RealmsResource;\n+\n+public class KeycloakSamlSubsystemCliInstallation implements ClientInstallationProvider {\n+\n+    @Override\n+    public Response generateInstallation(KeycloakSession session, RealmModel realm, ClientModel client, URI baseUri) {\n+        SamlClient samlClient = new SamlClient(client);\n+        StringBuilder builder = new StringBuilder();\n+        String entityId = client.getBaseUrl() == null ? \"SPECIFY YOUR entityID!\" : client.getBaseUrl();\n+        String bindingUrl = RealmsResource.protocolUrl(UriBuilder.fromUri(baseUri))\n+                .build(realm.getName(), SamlProtocol.LOGIN_PROTOCOL).toString();\n+        \n+        builder.append(\"/subsystem=keycloak-saml/secure-deployment=YOUR-WAR.war/:add\\n\\n\")\n+                .append(\"/subsystem=keycloak-saml/secure-deployment=YOUR-WAR.war/SP=\")\n+                .append(quote(entityId))\n+                .append(\"/:add(sslPolicy=\")\n+                .append(realm.getSslRequired().name())\n+                .append(\",logoutPage=\")\n+                .append(quote(\"SPECIFY YOUR LOGOUT PAGE!\"))\n+                .append(\"\\n\\n\");\n+        if (samlClient.requiresClientSignature()) {\n+            builder.append(\"/subsystem=keycloak-saml/secure-deployment=YOUR-WAR.war/SP=\")\n+                    .append(quote(entityId))\n+                    .append(\"/Key=KEY1:add(signing=true, \\\\\\nPrivateKeyPem=\")\n+                    .append(quote(samlClient.getClientSigningPrivateKey() == null ? \"PRIVATE KEY NOT SET UP OR KNOWN\" : samlClient.getClientSigningPrivateKey()))\n+                    .append(\", \\\\\\nCertificatePem=\")\n+                    .append(quote(samlClient.getClientSigningCertificate() == null ? \"YOU MUST CONFIGURE YOUR_CLIENT's SIGNING CERTIFICATE\" : samlClient.getClientSigningCertificate()))\n+                    .append(\")\\n\\n\");\n+        }\n+        if (samlClient.requiresEncryption()) {\n+            builder.append(\"/subsystem=keycloak-saml/secure-deployment=YOUR-WAR.war/SP=\")\n+                    .append(quote(entityId))\n+                    .append(\"/Key=KEY2:add(encryption=true,PrivateKeyPem=\")\n+                    .append(quote(samlClient.getClientEncryptingPrivateKey() == null ? \"PRIVATE KEY NOT SET UP OR KNOWN\" : samlClient.getClientEncryptingPrivateKey()))\n+                    .append(\")\\n\\n\");\n+        }\n+        \n+        builder.append(\"/subsystem=keycloak-saml/secure-deployment=YOUR-WAR.war/SP=\")\n+                .append(quote(entityId))\n+                .append(\"/IDP=idp/:add( \\\\\\n    SingleSignOnService={ \\\\\\n        signRequest=\")\n+                .append(Boolean.toString(samlClient.requiresClientSignature()))\n+                .append(\", \\\\\\n        validateResponseSignature=\")\n+                .append(Boolean.toString(samlClient.requiresRealmSignature()))\n+                .append(\", \\\\\\n        validateAssertionSignature=\")\n+                .append(Boolean.toString(samlClient.requiresAssertionSignature()))\n+                .append(\", \\\\\\n        requestBinding=POST, \\\\\\n        bindingUrl=\")\n+                .append(bindingUrl)\n+                .append(\"}, \\\\\\n    SingleLogoutService={ \\\\\\n        signRequest=\")\n+                .append(Boolean.toString(samlClient.requiresClientSignature()))\n+                .append(\", \\\\\\n        signResponse=\")\n+                .append(Boolean.toString(samlClient.requiresClientSignature()))\n+                .append(\", \\\\\\n        validateRequestSignature=\")\n+                .append(Boolean.toString(samlClient.requiresRealmSignature()))\n+                .append(\", \\\\\\n        validateResponseSignature=\")\n+                .append(Boolean.toString(samlClient.requiresRealmSignature()))\n+                .append(\", \\\\\\n        requestBinding=POST, \\\\\\n        responseBinding=POST, \\\\\\n        postBindingUrl=\")\n+                .append(bindingUrl)\n+                .append(\", \\\\\\n        redirectBindingUrl=\")\n+                .append(bindingUrl)\n+                .append(\"} \\\\\\n)\\n\\n\");\n+\n+        if (samlClient.requiresClientSignature()) {\n+            builder.append(\"/subsystem=keycloak-saml/secure-deployment=YOUR-WAR.war/SP=\")\n+                    .append(quote(entityId))\n+                    .append(\"/IDP=idp/:write-attribute(name=signatureAlgorithm,value=\")\n+                    .append(samlClient.getSignatureAlgorithm())\n+                    .append(\")\\n\\n\");\n+            if (samlClient.getCanonicalizationMethod() != null) {\n+                builder.append(\"/subsystem=keycloak-saml/secure-deployment=YOUR-WAR.war/SP=\")\n+                        .append(quote(entityId))\n+                        .append(\"/IDP=idp/:write-attribute(name=signatureCanonicalizationMethod,value=\")\n+                        .append(samlClient.getCanonicalizationMethod())\n+                        .append(\")\\n\");\n+            }\n+        }\n+        \n+        return Response.ok(builder.toString(), MediaType.TEXT_PLAIN_TYPE).build();\n+    }\n+\n+    @Override\n+    public String getProtocol() {\n+        return SamlProtocol.LOGIN_PROTOCOL;\n+    }\n+\n+    @Override\n+    public String getDisplayType() {\n+        return \"Keycloak SAML JBoss Subsystem CLI\";\n+    }\n+\n+    @Override\n+    public String getHelpText() {\n+        return \"CLI script you must edit and apply to your client app server. This type of configuration is useful when you can't or don't want to crack open your WAR file.\";\n+    }\n+\n+    @Override\n+    public String getFilename() {\n+        return \"keycloak-saml-subsystem.cli\";\n+    }\n+\n+    @Override\n+    public String getMediaType() {\n+        return MediaType.TEXT_PLAIN;\n+    }\n+\n+    @Override\n+    public boolean isDownloadOnly() {\n+        return false;\n+    }\n+\n+    @Override\n+    public void close() {\n+\n+    }\n+\n+    @Override\n+    public ClientInstallationProvider create(KeycloakSession session) {\n+        return this;\n+    }\n+\n+    @Override\n+    public void init(Config.Scope config) {\n+\n+    }\n+\n+    @Override\n+    public void postInit(KeycloakSessionFactory factory) {\n+\n+    }\n+\n+    @Override\n+    public String getId() {\n+        return \"keycloak-saml-subsystem-cli\";\n+    }\n+\n+    private String quote(String value) {\n+        return \"\\\"\" + value + \"\\\"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3ce9bee5f9b20d45c31a84c39f7b8b3808d6b73"}, "originalPosition": 168}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a3ce9bee5f9b20d45c31a84c39f7b8b3808d6b73", "author": {"user": {"login": "vramik", "name": "Vlasta Ramik"}}, "url": "https://github.com/keycloak/keycloak/commit/a3ce9bee5f9b20d45c31a84c39f7b8b3808d6b73", "committedDate": "2020-02-10T09:49:15Z", "message": "KEYCLOAK-10898 WildFly Adapter CLI based installation scripts"}, "afterCommit": {"oid": "4fda71c80568f01e2564535a31b19479758027de", "author": {"user": {"login": "vramik", "name": "Vlasta Ramik"}}, "url": "https://github.com/keycloak/keycloak/commit/4fda71c80568f01e2564535a31b19479758027de", "committedDate": "2020-02-26T14:28:04Z", "message": "KEYCLOAK-10898 WildFly Adapter CLI based installation scripts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0ca09d1d3ee30ce38c92e7845776a6736fb877e", "author": {"user": {"login": "vramik", "name": "Vlasta Ramik"}}, "url": "https://github.com/keycloak/keycloak/commit/e0ca09d1d3ee30ce38c92e7845776a6736fb877e", "committedDate": "2020-02-28T09:14:53Z", "message": "KEYCLOAK-10898 WildFly Adapter CLI based installation scripts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4fda71c80568f01e2564535a31b19479758027de", "author": {"user": {"login": "vramik", "name": "Vlasta Ramik"}}, "url": "https://github.com/keycloak/keycloak/commit/4fda71c80568f01e2564535a31b19479758027de", "committedDate": "2020-02-26T14:28:04Z", "message": "KEYCLOAK-10898 WildFly Adapter CLI based installation scripts"}, "afterCommit": {"oid": "e0ca09d1d3ee30ce38c92e7845776a6736fb877e", "author": {"user": {"login": "vramik", "name": "Vlasta Ramik"}}, "url": "https://github.com/keycloak/keycloak/commit/e0ca09d1d3ee30ce38c92e7845776a6736fb877e", "committedDate": "2020-02-28T09:14:53Z", "message": "KEYCLOAK-10898 WildFly Adapter CLI based installation scripts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MDM4MjM2", "url": "https://github.com/keycloak/keycloak/pull/6726#pullrequestreview-367038236", "createdAt": "2020-03-02T09:07:07Z", "commit": {"oid": "e0ca09d1d3ee30ce38c92e7845776a6736fb877e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2620, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}