{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNjgwMDk0", "number": 6667, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwODoxMjowOFrODbIVDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDo0NTozNVrOEGGj0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Nzc0NjA2OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/services/resources/admin/UsersResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwODoxMjowOFrOFicDVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMToxOToxM1rOFihbzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY1NTUxMA==", "bodyText": "This is strange, what's the difference between requireManageMembers and requireManageMembership?", "url": "https://github.com/keycloak/keycloak/pull/6667#discussion_r371655510", "createdAt": "2020-01-28T08:12:08Z", "author": {"login": "stianst"}, "path": "services/src/main/java/org/keycloak/services/resources/admin/UsersResource.java", "diffHunk": "@@ -105,7 +100,21 @@ public UsersResource(RealmModel realm, AdminPermissionEvaluator auth, AdminEvent\n     @POST\n     @Consumes(MediaType.APPLICATION_JSON)\n     public Response createUser(final UserRepresentation rep) {\n-        auth.users().requireManage();\n+        // if groups is part of the user rep, check if admin has manage_members and manage_membership on each group\n+        if (rep.getGroups() != null) {\n+            for (String groupId : rep.getGroups()) {\n+                GroupModel group = realm.getGroupById(groupId);\n+                if (group != null) {\n+                    auth.groups().requireManageMembers(group);\n+                    auth.groups().requireManageMembership(group);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e2e89ffb415e485f6ec85eaf6a94199a5a23847"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc0MzY5Mw==", "bodyText": "My understanding is the following:\n\nMANAGE_MEMBERS_SCOPE: allowing an admin to manage users, i.e. create, update and delete users\nMANAGE_MEMBERSHIP_SCOPE: allowing an admin to manage groups membership for a specific user\n\nSo, when creating a new user part of one or more groups, we need both permissions IMO. Let me know your thoughts.", "url": "https://github.com/keycloak/keycloak/pull/6667#discussion_r371743693", "createdAt": "2020-01-28T11:19:13Z", "author": {"login": "clementcur"}, "path": "services/src/main/java/org/keycloak/services/resources/admin/UsersResource.java", "diffHunk": "@@ -105,7 +100,21 @@ public UsersResource(RealmModel realm, AdminPermissionEvaluator auth, AdminEvent\n     @POST\n     @Consumes(MediaType.APPLICATION_JSON)\n     public Response createUser(final UserRepresentation rep) {\n-        auth.users().requireManage();\n+        // if groups is part of the user rep, check if admin has manage_members and manage_membership on each group\n+        if (rep.getGroups() != null) {\n+            for (String groupId : rep.getGroups()) {\n+                GroupModel group = realm.getGroupById(groupId);\n+                if (group != null) {\n+                    auth.groups().requireManageMembers(group);\n+                    auth.groups().requireManageMembership(group);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY1NTUxMA=="}, "originalCommit": {"oid": "2e2e89ffb415e485f6ec85eaf6a94199a5a23847"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTAxNTg2OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/services/resources/admin/UsersResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDo1ODowNlrOFioIDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMzo0NDowN1rOFjrUKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1MzMyNw==", "bodyText": "I think better is a 400 response.", "url": "https://github.com/keycloak/keycloak/pull/6667#discussion_r371853327", "createdAt": "2020-01-28T14:58:06Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/services/resources/admin/UsersResource.java", "diffHunk": "@@ -105,7 +100,21 @@ public UsersResource(RealmModel realm, AdminPermissionEvaluator auth, AdminEvent\n     @POST\n     @Consumes(MediaType.APPLICATION_JSON)\n     public Response createUser(final UserRepresentation rep) {\n-        auth.users().requireManage();\n+        // if groups is part of the user rep, check if admin has manage_members and manage_membership on each group\n+        if (rep.getGroups() != null) {\n+            for (String groupId : rep.getGroups()) {\n+                GroupModel group = realm.getGroupById(groupId);\n+                if (group != null) {\n+                    auth.groups().requireManageMembers(group);\n+                    auth.groups().requireManageMembership(group);\n+                } else {\n+                    // unrecognized group from id\n+                    throw new ForbiddenException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e2e89ffb415e485f6ec85eaf6a94199a5a23847"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk1NDE1NA==", "bodyText": "yeah, makes sense - will update the PR then", "url": "https://github.com/keycloak/keycloak/pull/6667#discussion_r372954154", "createdAt": "2020-01-30T13:44:07Z", "author": {"login": "clementcur"}, "path": "services/src/main/java/org/keycloak/services/resources/admin/UsersResource.java", "diffHunk": "@@ -105,7 +100,21 @@ public UsersResource(RealmModel realm, AdminPermissionEvaluator auth, AdminEvent\n     @POST\n     @Consumes(MediaType.APPLICATION_JSON)\n     public Response createUser(final UserRepresentation rep) {\n-        auth.users().requireManage();\n+        // if groups is part of the user rep, check if admin has manage_members and manage_membership on each group\n+        if (rep.getGroups() != null) {\n+            for (String groupId : rep.getGroups()) {\n+                GroupModel group = realm.getGroupById(groupId);\n+                if (group != null) {\n+                    auth.groups().requireManageMembers(group);\n+                    auth.groups().requireManageMembership(group);\n+                } else {\n+                    // unrecognized group from id\n+                    throw new ForbiddenException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1MzMyNw=="}, "originalCommit": {"oid": "2e2e89ffb415e485f6ec85eaf6a94199a5a23847"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODM0Mzg3OnYy", "diffSide": "LEFT", "path": "services/src/main/java/org/keycloak/services/resources/admin/UsersResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDo0NTozNVrOGkshdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDo0NTozNVrOGkshdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEzMTM4Mg==", "bodyText": "I did not catch this before, but I think we should first try to check requireManage and only in case we get an exception (lacking permission) we fallback to your changes that rely on the fine-grained permission.\nThe reason behind this comment is that we avoid people not using fine-grained permissions to not be impacted by the additional checks you are adding.", "url": "https://github.com/keycloak/keycloak/pull/6667#discussion_r441131382", "createdAt": "2020-06-16T20:45:35Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/services/resources/admin/UsersResource.java", "diffHunk": "@@ -107,7 +109,20 @@ public UsersResource(RealmModel realm, AdminPermissionEvaluator auth, AdminEvent\n     @POST\n     @Consumes(MediaType.APPLICATION_JSON)\n     public Response createUser(final UserRepresentation rep) {\n-        auth.users().requireManage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "714eae52d13f30cae850760756cd2f52b12cae1c"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3946, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}