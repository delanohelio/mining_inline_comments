{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3MzI4Mzky", "number": 6998, "title": "KEYCLOAK-13128 Security Headers SPI and response filter", "bodyText": "In this PR I'm only introducing the SPI and making sure headers are applied to all responses. In follow-up PRs I plan to add a more secure CSP header, as well as consider a different way to configure headers (if we should permit that at all without writing a custom provider)", "createdAt": "2020-04-22T14:29:02Z", "url": "https://github.com/keycloak/keycloak/pull/6998", "merged": true, "mergeCommit": {"oid": "5b017e930dc791f0bdb1a74b31d0852636facb8a"}, "closed": true, "closedAt": "2020-04-28T13:28:25Z", "author": {"login": "stianst"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaYLPpgBqjMyNjM4NTc1OTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABccCdiVAFqTQwMTc1NTcxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "69358544776db9e855baf3299e16e8f6b936f27d", "author": {"user": {"login": "stianst", "name": "Stian Thorgersen"}}, "url": "https://github.com/keycloak/keycloak/commit/69358544776db9e855baf3299e16e8f6b936f27d", "committedDate": "2020-04-23T06:51:34Z", "message": "More fixes"}, "afterCommit": {"oid": "1d99c20b4cc25be04a81f33dcabd6b36b51ed861", "author": {"user": {"login": "stianst", "name": "Stian Thorgersen"}}, "url": "https://github.com/keycloak/keycloak/commit/1d99c20b4cc25be04a81f33dcabd6b36b51ed861", "committedDate": "2020-04-23T07:57:55Z", "message": "KEYCLOAK-13128 Security Headers SPI and response filter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1d99c20b4cc25be04a81f33dcabd6b36b51ed861", "author": {"user": {"login": "stianst", "name": "Stian Thorgersen"}}, "url": "https://github.com/keycloak/keycloak/commit/1d99c20b4cc25be04a81f33dcabd6b36b51ed861", "committedDate": "2020-04-23T07:57:55Z", "message": "KEYCLOAK-13128 Security Headers SPI and response filter"}, "afterCommit": {"oid": "f373a14761825728671610ee99c8fd14a403df82", "author": {"user": {"login": "stianst", "name": "Stian Thorgersen"}}, "url": "https://github.com/keycloak/keycloak/commit/f373a14761825728671610ee99c8fd14a403df82", "committedDate": "2020-04-23T08:22:18Z", "message": "KEYCLOAK-13128 Security Headers SPI and response filter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f373a14761825728671610ee99c8fd14a403df82", "author": {"user": {"login": "stianst", "name": "Stian Thorgersen"}}, "url": "https://github.com/keycloak/keycloak/commit/f373a14761825728671610ee99c8fd14a403df82", "committedDate": "2020-04-23T08:22:18Z", "message": "KEYCLOAK-13128 Security Headers SPI and response filter"}, "afterCommit": {"oid": "7c5f1010f2c7f02bcfd4c9ef976444f15d416a17", "author": {"user": {"login": "stianst", "name": "Stian Thorgersen"}}, "url": "https://github.com/keycloak/keycloak/commit/7c5f1010f2c7f02bcfd4c9ef976444f15d416a17", "committedDate": "2020-04-23T08:49:53Z", "message": "KEYCLOAK-13128 Security Headers SPI and response filter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7c5f1010f2c7f02bcfd4c9ef976444f15d416a17", "author": {"user": {"login": "stianst", "name": "Stian Thorgersen"}}, "url": "https://github.com/keycloak/keycloak/commit/7c5f1010f2c7f02bcfd4c9ef976444f15d416a17", "committedDate": "2020-04-23T08:49:53Z", "message": "KEYCLOAK-13128 Security Headers SPI and response filter"}, "afterCommit": {"oid": "a9d568717402e2226cc44bd2d157a218f98f56bf", "author": {"user": {"login": "stianst", "name": "Stian Thorgersen"}}, "url": "https://github.com/keycloak/keycloak/commit/a9d568717402e2226cc44bd2d157a218f98f56bf", "committedDate": "2020-04-23T09:21:56Z", "message": "KEYCLOAK-13128 Security Headers SPI and response filter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMTQ3NTIw", "url": "https://github.com/keycloak/keycloak/pull/6998#pullrequestreview-400147520", "createdAt": "2020-04-24T17:41:43Z", "commit": {"oid": "a9d568717402e2226cc44bd2d157a218f98f56bf"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNzo0MTo0NFrOGLiXvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODo1ODo0MFrOGLlJAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc1MDY1Mw==", "bodyText": "Is this change required for this PR?", "url": "https://github.com/keycloak/keycloak/pull/6998#discussion_r414750653", "createdAt": "2020-04-24T17:41:44Z", "author": {"login": "pedroigor"}, "path": "model/jpa/src/main/java/org/keycloak/models/jpa/entities/RealmEntity.java", "diffHunk": "@@ -137,7 +137,7 @@\n     @Column(name=\"EMAIL_THEME\")\n     protected String emailTheme;\n \n-    @OneToMany(cascade ={CascadeType.REMOVE}, orphanRemoval = true, mappedBy = \"realm\")\n+    @OneToMany(cascade ={CascadeType.REMOVE}, orphanRemoval = true, mappedBy = \"realm\", fetch = FetchType.EAGER)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d568717402e2226cc44bd2d157a218f98f56bf"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc1OTkyMQ==", "bodyText": "I guess it is expected options set to null. Isn't better to always obtain it from the options method?", "url": "https://github.com/keycloak/keycloak/pull/6998#discussion_r414759921", "createdAt": "2020-04-24T17:57:01Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/headers/DefaultSecurityHeadersProvider.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.headers;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.models.BrowserSecurityHeaders;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+\n+import javax.ws.rs.InternalServerErrorException;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import java.util.Map;\n+\n+public class DefaultSecurityHeadersProvider implements SecurityHeadersProvider {\n+\n+    private static final Logger LOGGER = Logger.getLogger(DefaultSecurityHeadersProvider.class);\n+\n+    private final Map<String, String> headerValues;\n+    private final KeycloakSession session;\n+\n+    private DefaultSecurityHeadersOptions options;\n+\n+    public DefaultSecurityHeadersProvider(KeycloakSession session) {\n+        this.session = session;\n+\n+        RealmModel realm = session.getContext().getRealm();\n+        if (realm != null) {\n+            headerValues = realm.getBrowserSecurityHeaders();\n+        } else {\n+            headerValues = BrowserSecurityHeaders.defaultHeaders;\n+        }\n+    }\n+\n+    @Override\n+    public SecurityHeadersOptions options() {\n+        if (options == null) {\n+            options = new DefaultSecurityHeadersOptions();\n+        }\n+        return options;\n+    }\n+\n+    @Override\n+    public void addHeaders(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        if (options != null && options.isSkipHeaders()) {\n+            return;\n+        }\n+\n+        MediaType requestType = requestContext.getMediaType();\n+        MediaType responseType = responseContext.getMediaType();\n+        MultivaluedMap<String, Object> headers = responseContext.getHeaders();\n+\n+        if (responseType == null && !isEmptyMediaTypeAllowed(requestContext, responseContext)) {\n+            LOGGER.errorv(\"MediaType not set on path {0}, with response status {1}\", session.getContext().getUri().getRequestUri().getPath(), responseContext.getStatus());\n+            throw new InternalServerErrorException();\n+        }\n+\n+        if (isRest(requestType, responseType)) {\n+            addRestHeaders(headers);\n+        } else if (isHtml(requestType, responseType)) {\n+            addHtmlHeaders(headers);\n+        } else {\n+            addGenericHeaders(headers);\n+        }\n+    }\n+\n+    private void addGenericHeaders(MultivaluedMap<String, Object> headers) {\n+        addHeader(BrowserSecurityHeaders.STRICT_TRANSPORT_SECURITY_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_CONTENT_TYPE_OPTIONS_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_XSS_PROTECTION_KEY, headers);\n+    }\n+\n+    private void addRestHeaders(MultivaluedMap<String, Object> headers) {\n+        addHeader(BrowserSecurityHeaders.STRICT_TRANSPORT_SECURITY_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_FRAME_OPTIONS_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_CONTENT_TYPE_OPTIONS_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_XSS_PROTECTION_KEY, headers);\n+    }\n+\n+    private void addHtmlHeaders(MultivaluedMap<String, Object> headers) {\n+        BrowserSecurityHeaders.headerAttributeMap.keySet().forEach(k -> addHeader(k, headers));\n+\n+        // TODO This will be refactored as part of introducing a more strict CSP header\n+        if (options != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d568717402e2226cc44bd2d157a218f98f56bf"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc2NzM2Nw==", "bodyText": "I'm wondering if you really need to allow set object-src. Looking at the CSP header documentation, it seems to be recommended to always set as none as they are related to legacy HTML elements.", "url": "https://github.com/keycloak/keycloak/pull/6998#discussion_r414767367", "createdAt": "2020-04-24T18:09:21Z", "author": {"login": "pedroigor"}, "path": "server-spi-private/src/main/java/org/keycloak/models/BrowserSecurityHeaders.java", "diffHunk": "@@ -94,4 +94,57 @@\n         defaultHeaders = Collections.unmodifiableMap(dh);\n         headerAttributeMap = Collections.unmodifiableMap(headerMap);\n     }\n+\n+    public static class ContentSecurityPolicyBuilder {\n+\n+        private String frameSrc = \"self\";\n+        private String frameAncestors = \"self\";\n+        private String objectSrc = \"none\";\n+\n+        private boolean first;\n+        private StringBuilder sb;\n+\n+        public static ContentSecurityPolicyBuilder create() {\n+            return new ContentSecurityPolicyBuilder();\n+        }\n+\n+        public ContentSecurityPolicyBuilder frameSrc(String frameSrc) {\n+            this.frameSrc = frameSrc;\n+            return this;\n+        }\n+\n+        public ContentSecurityPolicyBuilder frameAncestors(String frameancestors) {\n+            this.frameAncestors = frameancestors;\n+            return this;\n+        }\n+\n+        public ContentSecurityPolicyBuilder objectSrc(String objectSrc) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d568717402e2226cc44bd2d157a218f98f56bf"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc5MDE4OA==", "bodyText": "Shouldn't this method change to allowIframeAnyAncestor?\nIf I understood it correctly, it servers to indicate that the iframe is allowed to be included regardless of the ancestor, like when redenring the login-status-iframe.html. It would make a bit more clear what is going on.", "url": "https://github.com/keycloak/keycloak/pull/6998#discussion_r414790188", "createdAt": "2020-04-24T18:48:27Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/headers/DefaultSecurityHeadersProvider.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.headers;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.models.BrowserSecurityHeaders;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+\n+import javax.ws.rs.InternalServerErrorException;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import java.util.Map;\n+\n+public class DefaultSecurityHeadersProvider implements SecurityHeadersProvider {\n+\n+    private static final Logger LOGGER = Logger.getLogger(DefaultSecurityHeadersProvider.class);\n+\n+    private final Map<String, String> headerValues;\n+    private final KeycloakSession session;\n+\n+    private DefaultSecurityHeadersOptions options;\n+\n+    public DefaultSecurityHeadersProvider(KeycloakSession session) {\n+        this.session = session;\n+\n+        RealmModel realm = session.getContext().getRealm();\n+        if (realm != null) {\n+            headerValues = realm.getBrowserSecurityHeaders();\n+        } else {\n+            headerValues = BrowserSecurityHeaders.defaultHeaders;\n+        }\n+    }\n+\n+    @Override\n+    public SecurityHeadersOptions options() {\n+        if (options == null) {\n+            options = new DefaultSecurityHeadersOptions();\n+        }\n+        return options;\n+    }\n+\n+    @Override\n+    public void addHeaders(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        if (options != null && options.isSkipHeaders()) {\n+            return;\n+        }\n+\n+        MediaType requestType = requestContext.getMediaType();\n+        MediaType responseType = responseContext.getMediaType();\n+        MultivaluedMap<String, Object> headers = responseContext.getHeaders();\n+\n+        if (responseType == null && !isEmptyMediaTypeAllowed(requestContext, responseContext)) {\n+            LOGGER.errorv(\"MediaType not set on path {0}, with response status {1}\", session.getContext().getUri().getRequestUri().getPath(), responseContext.getStatus());\n+            throw new InternalServerErrorException();\n+        }\n+\n+        if (isRest(requestType, responseType)) {\n+            addRestHeaders(headers);\n+        } else if (isHtml(requestType, responseType)) {\n+            addHtmlHeaders(headers);\n+        } else {\n+            addGenericHeaders(headers);\n+        }\n+    }\n+\n+    private void addGenericHeaders(MultivaluedMap<String, Object> headers) {\n+        addHeader(BrowserSecurityHeaders.STRICT_TRANSPORT_SECURITY_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_CONTENT_TYPE_OPTIONS_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_XSS_PROTECTION_KEY, headers);\n+    }\n+\n+    private void addRestHeaders(MultivaluedMap<String, Object> headers) {\n+        addHeader(BrowserSecurityHeaders.STRICT_TRANSPORT_SECURITY_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_FRAME_OPTIONS_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_CONTENT_TYPE_OPTIONS_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_XSS_PROTECTION_KEY, headers);\n+    }\n+\n+    private void addHtmlHeaders(MultivaluedMap<String, Object> headers) {\n+        BrowserSecurityHeaders.headerAttributeMap.keySet().forEach(k -> addHeader(k, headers));\n+\n+        // TODO This will be refactored as part of introducing a more strict CSP header\n+        if (options != null) {\n+            if (options.isAllowAsIframe()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d568717402e2226cc44bd2d157a218f98f56bf"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc5NjAzMw==", "bodyText": "If isAllowAsIframe is true you also don't want to have the frame-ancestor set to null too?", "url": "https://github.com/keycloak/keycloak/pull/6998#discussion_r414796033", "createdAt": "2020-04-24T18:58:40Z", "author": {"login": "pedroigor"}, "path": "services/src/main/java/org/keycloak/headers/DefaultSecurityHeadersProvider.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.headers;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.models.BrowserSecurityHeaders;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+\n+import javax.ws.rs.InternalServerErrorException;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import java.util.Map;\n+\n+public class DefaultSecurityHeadersProvider implements SecurityHeadersProvider {\n+\n+    private static final Logger LOGGER = Logger.getLogger(DefaultSecurityHeadersProvider.class);\n+\n+    private final Map<String, String> headerValues;\n+    private final KeycloakSession session;\n+\n+    private DefaultSecurityHeadersOptions options;\n+\n+    public DefaultSecurityHeadersProvider(KeycloakSession session) {\n+        this.session = session;\n+\n+        RealmModel realm = session.getContext().getRealm();\n+        if (realm != null) {\n+            headerValues = realm.getBrowserSecurityHeaders();\n+        } else {\n+            headerValues = BrowserSecurityHeaders.defaultHeaders;\n+        }\n+    }\n+\n+    @Override\n+    public SecurityHeadersOptions options() {\n+        if (options == null) {\n+            options = new DefaultSecurityHeadersOptions();\n+        }\n+        return options;\n+    }\n+\n+    @Override\n+    public void addHeaders(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        if (options != null && options.isSkipHeaders()) {\n+            return;\n+        }\n+\n+        MediaType requestType = requestContext.getMediaType();\n+        MediaType responseType = responseContext.getMediaType();\n+        MultivaluedMap<String, Object> headers = responseContext.getHeaders();\n+\n+        if (responseType == null && !isEmptyMediaTypeAllowed(requestContext, responseContext)) {\n+            LOGGER.errorv(\"MediaType not set on path {0}, with response status {1}\", session.getContext().getUri().getRequestUri().getPath(), responseContext.getStatus());\n+            throw new InternalServerErrorException();\n+        }\n+\n+        if (isRest(requestType, responseType)) {\n+            addRestHeaders(headers);\n+        } else if (isHtml(requestType, responseType)) {\n+            addHtmlHeaders(headers);\n+        } else {\n+            addGenericHeaders(headers);\n+        }\n+    }\n+\n+    private void addGenericHeaders(MultivaluedMap<String, Object> headers) {\n+        addHeader(BrowserSecurityHeaders.STRICT_TRANSPORT_SECURITY_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_CONTENT_TYPE_OPTIONS_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_XSS_PROTECTION_KEY, headers);\n+    }\n+\n+    private void addRestHeaders(MultivaluedMap<String, Object> headers) {\n+        addHeader(BrowserSecurityHeaders.STRICT_TRANSPORT_SECURITY_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_FRAME_OPTIONS_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_CONTENT_TYPE_OPTIONS_KEY, headers);\n+        addHeader(BrowserSecurityHeaders.X_XSS_PROTECTION_KEY, headers);\n+    }\n+\n+    private void addHtmlHeaders(MultivaluedMap<String, Object> headers) {\n+        BrowserSecurityHeaders.headerAttributeMap.keySet().forEach(k -> addHeader(k, headers));\n+\n+        // TODO This will be refactored as part of introducing a more strict CSP header\n+        if (options != null) {\n+            if (options.isAllowAsIframe()) {\n+                headers.remove(BrowserSecurityHeaders.X_FRAME_OPTIONS);\n+\n+                String value = BrowserSecurityHeaders.ContentSecurityPolicyBuilder.create().frameAncestors(null).build();\n+                headers.putSingle(BrowserSecurityHeaders.CONTENT_SECURITY_POLICY, value);\n+            }\n+\n+            String allowedFrameSrc = options.getAllowedFrameSrc();\n+            if (allowedFrameSrc != null) {\n+                if (BrowserSecurityHeaders.CONTENT_SECURITY_POLICY_DEFAULT.equals(headers.getFirst(BrowserSecurityHeaders.CONTENT_SECURITY_POLICY))) {\n+                    String value = BrowserSecurityHeaders.ContentSecurityPolicyBuilder.create().frameSrc(allowedFrameSrc).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d568717402e2226cc44bd2d157a218f98f56bf"}, "originalPosition": 111}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d0e9ad85eec5eca3e4104ad4e30f3a3328bee8b", "author": {"user": {"login": "stianst", "name": "Stian Thorgersen"}}, "url": "https://github.com/keycloak/keycloak/commit/3d0e9ad85eec5eca3e4104ad4e30f3a3328bee8b", "committedDate": "2020-04-27T06:51:49Z", "message": "KEYCLOAK-13128 Security Headers SPI and response filter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a9d568717402e2226cc44bd2d157a218f98f56bf", "author": {"user": {"login": "stianst", "name": "Stian Thorgersen"}}, "url": "https://github.com/keycloak/keycloak/commit/a9d568717402e2226cc44bd2d157a218f98f56bf", "committedDate": "2020-04-23T09:21:56Z", "message": "KEYCLOAK-13128 Security Headers SPI and response filter"}, "afterCommit": {"oid": "3d0e9ad85eec5eca3e4104ad4e30f3a3328bee8b", "author": {"user": {"login": "stianst", "name": "Stian Thorgersen"}}, "url": "https://github.com/keycloak/keycloak/commit/3d0e9ad85eec5eca3e4104ad4e30f3a3328bee8b", "committedDate": "2020-04-27T06:51:49Z", "message": "KEYCLOAK-13128 Security Headers SPI and response filter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMDI0Mzc0", "url": "https://github.com/keycloak/keycloak/pull/6998#pullrequestreview-401024374", "createdAt": "2020-04-27T14:45:19Z", "commit": {"oid": "3d0e9ad85eec5eca3e4104ad4e30f3a3328bee8b"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDo0NToyMFrOGMm_7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNToxODowMlrOGMovEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg3NTA1NA==", "bodyText": "Is it intentional, that ability to set \"objectSrc\" is missing?", "url": "https://github.com/keycloak/keycloak/pull/6998#discussion_r415875054", "createdAt": "2020-04-27T14:45:20Z", "author": {"login": "mposolda"}, "path": "server-spi-private/src/main/java/org/keycloak/models/BrowserSecurityHeaders.java", "diffHunk": "@@ -94,4 +94,52 @@\n         defaultHeaders = Collections.unmodifiableMap(dh);\n         headerAttributeMap = Collections.unmodifiableMap(headerMap);\n     }\n+\n+    public static class ContentSecurityPolicyBuilder {\n+\n+        private String frameSrc = \"self\";\n+        private String frameAncestors = \"self\";\n+        private String objectSrc = \"none\";\n+\n+        private boolean first;\n+        private StringBuilder sb;\n+\n+        public static ContentSecurityPolicyBuilder create() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d0e9ad85eec5eca3e4104ad4e30f3a3328bee8b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkwMzUwNg==", "bodyText": "Not sure if it will be beneficial to have this method \"protected\" to allow easier overriding of this method in case that someone wants to have custom provider? Same question for \"addRestHeaders\", \"addHtmlHeaders\", \"addHeader\" .", "url": "https://github.com/keycloak/keycloak/pull/6998#discussion_r415903506", "createdAt": "2020-04-27T15:18:02Z", "author": {"login": "mposolda"}, "path": "services/src/main/java/org/keycloak/headers/DefaultSecurityHeadersProvider.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.keycloak.headers;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.models.BrowserSecurityHeaders;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+\n+import javax.ws.rs.InternalServerErrorException;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import java.util.Map;\n+\n+public class DefaultSecurityHeadersProvider implements SecurityHeadersProvider {\n+\n+    private static final Logger LOGGER = Logger.getLogger(DefaultSecurityHeadersProvider.class);\n+\n+    private final Map<String, String> headerValues;\n+    private final KeycloakSession session;\n+\n+    private DefaultSecurityHeadersOptions options;\n+\n+    public DefaultSecurityHeadersProvider(KeycloakSession session) {\n+        this.session = session;\n+\n+        RealmModel realm = session.getContext().getRealm();\n+        if (realm != null) {\n+            headerValues = realm.getBrowserSecurityHeaders();\n+        } else {\n+            headerValues = BrowserSecurityHeaders.defaultHeaders;\n+        }\n+    }\n+\n+    @Override\n+    public SecurityHeadersOptions options() {\n+        if (options == null) {\n+            options = new DefaultSecurityHeadersOptions();\n+        }\n+        return options;\n+    }\n+\n+    @Override\n+    public void addHeaders(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        if (options != null && options.isSkipHeaders()) {\n+            return;\n+        }\n+\n+        MediaType requestType = requestContext.getMediaType();\n+        MediaType responseType = responseContext.getMediaType();\n+        MultivaluedMap<String, Object> headers = responseContext.getHeaders();\n+\n+        if (responseType == null && !isEmptyMediaTypeAllowed(requestContext, responseContext)) {\n+            LOGGER.errorv(\"MediaType not set on path {0}, with response status {1}\", session.getContext().getUri().getRequestUri().getPath(), responseContext.getStatus());\n+            throw new InternalServerErrorException();\n+        }\n+\n+        if (isRest(requestType, responseType)) {\n+            addRestHeaders(headers);\n+        } else if (isHtml(requestType, responseType)) {\n+            addHtmlHeaders(headers);\n+        } else {\n+            addGenericHeaders(headers);\n+        }\n+    }\n+\n+    private void addGenericHeaders(MultivaluedMap<String, Object> headers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d0e9ad85eec5eca3e4104ad4e30f3a3328bee8b"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNzU1NzEz", "url": "https://github.com/keycloak/keycloak/pull/6998#pullrequestreview-401755713", "createdAt": "2020-04-28T11:48:02Z", "commit": {"oid": "3d0e9ad85eec5eca3e4104ad4e30f3a3328bee8b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3170, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}