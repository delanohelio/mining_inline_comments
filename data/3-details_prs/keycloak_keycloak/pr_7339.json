{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4Mjg0Nzgw", "number": 7339, "title": "KEYCLOAK-14919 Dynamic registration - Scope ignored", "bodyText": "This PR is for KEYCLOAK-14919.\nThe following shows brief specification.\n\n\nClient Scope Type Used\nOptional Client Scope\n\n\nDynamic Client Registration\n\nCREATE\n\nwith registered scope\nno default client scope is set onto the client\nspecified optional client scopes are set onto the client\nwith not registered scope\n403 Forbidden due to default Client Registration Policy\nwithout scope\noperated as usual\nall default client scope are set onto the client\nall optional client scopes are set onto the client\n\n\nGET\n\nwith registered scope\noptional client scopes that were specified on client registration are returned\nwith not registered scope\nN/A\nwithout scope\noperated as usual\nall optional client scopes are returned\n\n\nUPDATE\nout of scope\n\n\n\nAdmin REST API\n\nwith registered scope\nno default client scope is set onto the client\nspecified optional client scopes are set onto the client\nwith not registered scope\n403 Forbidden due to default Client Registration Policy\nwithout scope\noperated as usual\nall default client scope are set onto the client\nall optional client scopes are set onto the client\nGET\n\nwith registered scope\nvacant default scopes are returned as defaultClientScopes\noptional client scopes that were specified on client registration are returned as optionalClientScopes\nwith not registered scope\nN/A\nwithout scope\noperated as usual\nall defult client scopes are returned as defaultClientScopes\nall optional client scopes are returned as optionalClientScopes\n\n\nUPDATE\nout of scope", "createdAt": "2020-08-15T09:23:58Z", "url": "https://github.com/keycloak/keycloak/pull/7339", "merged": true, "mergeCommit": {"oid": "b93a6ed19fa69becca18e07e6e672fadc464497c"}, "closed": true, "closedAt": "2020-09-02T11:59:24Z", "author": {"login": "tnorimat"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc_F4ttgBqjM2NTgzNzMwNDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdE6vcjgFqTQ4MDc0NzM2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "38c30a18564b274cf913cc0f46e0da85b235e644", "author": {"user": {"login": "tnorimat", "name": "Takashi Norimatsu"}}, "url": "https://github.com/keycloak/keycloak/commit/38c30a18564b274cf913cc0f46e0da85b235e644", "committedDate": "2020-08-15T09:21:31Z", "message": "KEYCLOAK-14919 Dynamic registration - Scope ignored"}, "afterCommit": {"oid": "8754c42b60c55e33efb804b83a3382fd0c18052e", "author": {"user": {"login": "tnorimat", "name": "Takashi Norimatsu"}}, "url": "https://github.com/keycloak/keycloak/commit/8754c42b60c55e33efb804b83a3382fd0c18052e", "committedDate": "2020-08-15T09:34:15Z", "message": "KEYCLOAK-14919 Dynamic registration - Scope ignored"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwNTgwNjA0", "url": "https://github.com/keycloak/keycloak/pull/7339#pullrequestreview-480580604", "createdAt": "2020-09-02T08:07:21Z", "commit": {"oid": "8754c42b60c55e33efb804b83a3382fd0c18052e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwODowNzoyMVrOHLipmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwODowNzo0OVrOHLirRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg2NDA4OA==", "bodyText": "Is it possible to test retrieving client with admin REST API and doublecheck that \"defaultScopes\" on the client are empty?\nIMO will be good to test that, so if we do some changes in the future, we can detect regressions and clarify if the behaviour is as expected (also with relation to client policies, which we will add etc.)", "url": "https://github.com/keycloak/keycloak/pull/7339#discussion_r481864088", "createdAt": "2020-09-02T08:07:21Z", "author": {"login": "mposolda"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/OIDCClientRegistrationTest.java", "diffHunk": "@@ -468,5 +470,50 @@ private ClientRepresentation getKeycloakClient(String clientId) {\n         return ApiUtil.findClientByClientId(adminClient.realms().realm(REALM_NAME), clientId).toRepresentation();\n     }\n \n+    @Test\n+    public void testClientWithScope() throws Exception {\n+        OIDCClientRepresentation clientRep = null;\n+        OIDCClientRepresentation response = null;\n+        String clientScope = \"phone address\";\n+\n+        clientRep = createRep();\n+        clientRep.setScope(clientScope);\n+        response = reg.oidc().create(clientRep);\n+\n+        Set<String> clientScopes = new HashSet<>(Arrays.asList(clientScope.split(\" \")));\n+        Set<String> registeredClientScopes = new HashSet<>(Arrays.asList(response.getScope().split(\" \")));\n+        assertTrue(clientScopes.equals(registeredClientScopes));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8754c42b60c55e33efb804b83a3382fd0c18052e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg2NDUxNw==", "bodyText": "Same as above. Is it possible to obtain client through admin REST API and doublecheck that default client scopes are realm default client scopes?", "url": "https://github.com/keycloak/keycloak/pull/7339#discussion_r481864517", "createdAt": "2020-09-02T08:07:49Z", "author": {"login": "mposolda"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/client/OIDCClientRegistrationTest.java", "diffHunk": "@@ -468,5 +470,50 @@ private ClientRepresentation getKeycloakClient(String clientId) {\n         return ApiUtil.findClientByClientId(adminClient.realms().realm(REALM_NAME), clientId).toRepresentation();\n     }\n \n+    @Test\n+    public void testClientWithScope() throws Exception {\n+        OIDCClientRepresentation clientRep = null;\n+        OIDCClientRepresentation response = null;\n+        String clientScope = \"phone address\";\n+\n+        clientRep = createRep();\n+        clientRep.setScope(clientScope);\n+        response = reg.oidc().create(clientRep);\n+\n+        Set<String> clientScopes = new HashSet<>(Arrays.asList(clientScope.split(\" \")));\n+        Set<String> registeredClientScopes = new HashSet<>(Arrays.asList(response.getScope().split(\" \")));\n+        assertTrue(clientScopes.equals(registeredClientScopes));\n+    }\n \n+    @Test\n+    public void testClientWithNotDefinedScope() throws Exception {\n+        OIDCClientRepresentation clientRep = null;\n+        OIDCClientRepresentation response = null;\n+\n+        String clientScope = \"notdefinedscope address\";\n+\n+        clientRep = createRep();\n+        clientRep.setScope(clientScope);\n+        try {\n+            response = reg.oidc().create(clientRep);\n+            fail(\"Expected 403\");\n+        } catch (ClientRegistrationException e) {\n+            assertEquals(403, ((HttpErrorException) e.getCause()).getStatusLine().getStatusCode());\n+        }\n+    }\n+\n+    @Test\n+    public void testClientWithoutScope() throws ClientRegistrationException {\n+        Set<String> realmOptionalClientScopes = new HashSet<>(adminClient.realm(REALM_NAME).getDefaultOptionalClientScopes()\n+                .stream().map(i->i.getName()).collect(Collectors.toList()));\n+\n+        OIDCClientRepresentation clientRep = null;\n+        OIDCClientRepresentation response = null;\n+\n+        clientRep = createRep();\n+        response = reg.oidc().create(clientRep);\n+\n+        Set<String> registeredClientScopes = new HashSet<>(Arrays.asList(response.getScope().split(\" \")));\n+        assertTrue(realmOptionalClientScopes.equals(new HashSet<>(registeredClientScopes)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8754c42b60c55e33efb804b83a3382fd0c18052e"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f5626da7d7e98ee153a8abbbcadf7ab28e38a5f", "author": {"user": {"login": "tnorimat", "name": "Takashi Norimatsu"}}, "url": "https://github.com/keycloak/keycloak/commit/8f5626da7d7e98ee153a8abbbcadf7ab28e38a5f", "committedDate": "2020-09-02T09:37:12Z", "message": "KEYCLOAK-14919 Dynamic registration - Scope ignored"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8754c42b60c55e33efb804b83a3382fd0c18052e", "author": {"user": {"login": "tnorimat", "name": "Takashi Norimatsu"}}, "url": "https://github.com/keycloak/keycloak/commit/8754c42b60c55e33efb804b83a3382fd0c18052e", "committedDate": "2020-08-15T09:34:15Z", "message": "KEYCLOAK-14919 Dynamic registration - Scope ignored"}, "afterCommit": {"oid": "8f5626da7d7e98ee153a8abbbcadf7ab28e38a5f", "author": {"user": {"login": "tnorimat", "name": "Takashi Norimatsu"}}, "url": "https://github.com/keycloak/keycloak/commit/8f5626da7d7e98ee153a8abbbcadf7ab28e38a5f", "committedDate": "2020-09-02T09:37:12Z", "message": "KEYCLOAK-14919 Dynamic registration - Scope ignored"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwNzQ3MzYw", "url": "https://github.com/keycloak/keycloak/pull/7339#pullrequestreview-480747360", "createdAt": "2020-09-02T11:59:15Z", "commit": {"oid": "8f5626da7d7e98ee153a8abbbcadf7ab28e38a5f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2752, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}