{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NDI5MDA4", "number": 7302, "title": "KEYCLOAK-14901 Replace deprecated ClientProvider related methods acro\u2026", "bodyText": "\u2026ss Keycloak", "createdAt": "2020-07-29T13:10:02Z", "url": "https://github.com/keycloak/keycloak/pull/7302", "merged": true, "mergeCommit": {"oid": "4e9bdd44f3893b19d5c85ad3ca771d37c3a301a1"}, "closed": true, "closedAt": "2020-09-07T11:11:56Z", "author": {"login": "martin-kanis"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5661FgBqjM2MDI1NTUwNzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdGhDtbAFqTQ4MzQ3MjI2Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "45ed080262806c64974481b00245be538ec27ecd", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/45ed080262806c64974481b00245be538ec27ecd", "committedDate": "2020-07-29T13:07:52Z", "message": "KEYCLOAK-14901 Replace deprecated ClientProvider related methods across Keycloak"}, "afterCommit": {"oid": "74b7fbc22b2aead8013202c76b347c1231ae4ad8", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/74b7fbc22b2aead8013202c76b347c1231ae4ad8", "committedDate": "2020-07-30T07:58:09Z", "message": "KEYCLOAK-14901 Replace deprecated ClientProvider related methods across Keycloak"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "74b7fbc22b2aead8013202c76b347c1231ae4ad8", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/74b7fbc22b2aead8013202c76b347c1231ae4ad8", "committedDate": "2020-07-30T07:58:09Z", "message": "KEYCLOAK-14901 Replace deprecated ClientProvider related methods across Keycloak"}, "afterCommit": {"oid": "dd088fc7c63bb0064ec41285b5fffa5bcc50ecc7", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/dd088fc7c63bb0064ec41285b5fffa5bcc50ecc7", "committedDate": "2020-07-30T14:27:34Z", "message": "KEYCLOAK-14901 Replace deprecated ClientProvider related methods across Keycloak"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dd088fc7c63bb0064ec41285b5fffa5bcc50ecc7", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/dd088fc7c63bb0064ec41285b5fffa5bcc50ecc7", "committedDate": "2020-07-30T14:27:34Z", "message": "KEYCLOAK-14901 Replace deprecated ClientProvider related methods across Keycloak"}, "afterCommit": {"oid": "5a3cfd0c08455f4f50f15fea3adf98cb138934c8", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/5a3cfd0c08455f4f50f15fea3adf98cb138934c8", "committedDate": "2020-07-31T06:24:37Z", "message": "KEYCLOAK-14901 Replace deprecated ClientProvider related methods across Keycloak"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5a3cfd0c08455f4f50f15fea3adf98cb138934c8", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/5a3cfd0c08455f4f50f15fea3adf98cb138934c8", "committedDate": "2020-07-31T06:24:37Z", "message": "KEYCLOAK-14901 Replace deprecated ClientProvider related methods across Keycloak"}, "afterCommit": {"oid": "9f48916752c48aff5bbbfcb52dc8236b2d41c78d", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/9f48916752c48aff5bbbfcb52dc8236b2d41c78d", "committedDate": "2020-07-31T15:25:11Z", "message": "KEYCLOAK-14901 Replace deprecated ClientProvider related methods across Keycloak"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9f48916752c48aff5bbbfcb52dc8236b2d41c78d", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/9f48916752c48aff5bbbfcb52dc8236b2d41c78d", "committedDate": "2020-07-31T15:25:11Z", "message": "KEYCLOAK-14901 Replace deprecated ClientProvider related methods across Keycloak"}, "afterCommit": {"oid": "6a549eee6b1e8e2c0b188bd52a24c047b0ecc209", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/6a549eee6b1e8e2c0b188bd52a24c047b0ecc209", "committedDate": "2020-08-04T11:47:53Z", "message": "KEYCLOAK-14901 Replace deprecated ClientProvider related methods across Keycloak"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6a549eee6b1e8e2c0b188bd52a24c047b0ecc209", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/6a549eee6b1e8e2c0b188bd52a24c047b0ecc209", "committedDate": "2020-08-04T11:47:53Z", "message": "KEYCLOAK-14901 Replace deprecated ClientProvider related methods across Keycloak"}, "afterCommit": {"oid": "fc0c2cc17ab655db5a7834f64e5f9a2b9e751bfd", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/fc0c2cc17ab655db5a7834f64e5f9a2b9e751bfd", "committedDate": "2020-08-04T12:47:01Z", "message": "KEYCLOAK-14901 Replace deprecated ClientProvider related methods across Keycloak"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fc0c2cc17ab655db5a7834f64e5f9a2b9e751bfd", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/fc0c2cc17ab655db5a7834f64e5f9a2b9e751bfd", "committedDate": "2020-08-04T12:47:01Z", "message": "KEYCLOAK-14901 Replace deprecated ClientProvider related methods across Keycloak"}, "afterCommit": {"oid": "478c6d87e91dd557920e842f7af7a95634c9c5e6", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/478c6d87e91dd557920e842f7af7a95634c9c5e6", "committedDate": "2020-08-10T12:05:53Z", "message": "KEYCLOAK-14901 Replace deprecated ClientProvider related methods across Keycloak"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "478c6d87e91dd557920e842f7af7a95634c9c5e6", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/478c6d87e91dd557920e842f7af7a95634c9c5e6", "committedDate": "2020-08-10T12:05:53Z", "message": "KEYCLOAK-14901 Replace deprecated ClientProvider related methods across Keycloak"}, "afterCommit": {"oid": "a20d0ef10d44f94262abb9d4c613902d84cdec80", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/a20d0ef10d44f94262abb9d4c613902d84cdec80", "committedDate": "2020-08-18T13:33:47Z", "message": "KEYCLOAK-14901 Replace deprecated ClientProvider related methods across Keycloak"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5ODAxNDYz", "url": "https://github.com/keycloak/keycloak/pull/7302#pullrequestreview-469801463", "createdAt": "2020-08-18T20:20:11Z", "commit": {"oid": "a20d0ef10d44f94262abb9d4c613902d84cdec80"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDoyMDoxMVrOHCk3Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODo1Mjo1NFrOHDU5Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ2MzE1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    .peek(c -> {\n          \n          \n            \n                                    .forEach(c -> {", "url": "https://github.com/keycloak/keycloak/pull/7302#discussion_r472463154", "createdAt": "2020-08-18T20:20:11Z", "author": {"login": "hmlnarik"}, "path": "server-spi-private/src/main/java/org/keycloak/migration/migrators/MigrateTo4_0_0.java", "diffHunk": "@@ -94,40 +94,40 @@ protected void migrateRealm(KeycloakSession session, RealmModel realm, boolean j\n         // If client has scope for offline_access role (either directly or through fullScopeAllowed), then add offline_access client\n         // scope as optional scope to the client. If it's indirectly (no fullScopeAllowed), then remove role from the scoped roles\n         RoleModel offlineAccessRole = realm.getRole(OAuth2Constants.OFFLINE_ACCESS);\n-        ClientScopeModel offlineAccessScope = null;\n+        ClientScopeModel offlineAccessScope;\n         if (offlineAccessRole == null) {\n             LOG.infof(\"Role 'offline_access' not available in realm '%s'. Skip migration of offline_access client scope.\", realm.getName());\n         } else {\n             offlineAccessScope = KeycloakModelUtils.getClientScopeByName(realm, OAuth2Constants.OFFLINE_ACCESS);\n             if (offlineAccessScope == null) {\n                 LOG.infof(\"Client scope 'offline_access' not available in realm '%s'. Skip migration of offline_access client scope.\", realm.getName());\n             } else {\n-                for (ClientModel client : realm.getClients()) {\n-                    if (\"openid-connect\".equals(client.getProtocol())\n-                            && !client.isBearerOnly()\n-                            && client.hasScope(offlineAccessRole)\n-                            && !client.getClientScopes(false, true).containsKey(OAuth2Constants.OFFLINE_ACCESS)) {\n-                        LOG.debugf(\"Adding client scope 'offline_access' as optional scope to client '%s' in realm '%s'.\", client.getClientId(), realm.getName());\n-                        client.addClientScope(offlineAccessScope, false);\n-\n-                        if (!client.isFullScopeAllowed()) {\n-                            LOG.debugf(\"Removing role scope mapping for role 'offline_access' from client '%s' in realm '%s'.\", client.getClientId(), realm.getName());\n-                            client.deleteScopeMapping(offlineAccessRole);\n-                        }\n-                    }\n-                }\n+                session.clients().getClientsStream(realm)\n+                        .filter(MigrationUtils::isOIDCNonBearerOnlyClient)\n+                        .filter(c -> c.hasScope(offlineAccessRole))\n+                        .filter(c -> !c.getClientScopes(false, true).containsKey(OAuth2Constants.OFFLINE_ACCESS))\n+                        .peek(c -> {\n+                            LOG.debugf(\"Adding client scope 'offline_access' as optional scope to client '%s' in realm '%s'.\", c.getClientId(), realm.getName());\n+                            c.addClientScope(offlineAccessScope, false);\n+                        })\n+                        .filter(c -> !c.isFullScopeAllowed())\n+                        .peek(c -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a20d0ef10d44f94262abb9d4c613902d84cdec80"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ3MDU5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (role.isPresent()) {\n          \n          \n            \n                        return role.get().getId();\n          \n          \n            \n                    }\n          \n          \n            \n                    return null;\n          \n          \n            \n                    return role.map(RoleModel::getId).orElse(null);", "url": "https://github.com/keycloak/keycloak/pull/7302#discussion_r472470591", "createdAt": "2020-08-18T20:28:00Z", "author": {"login": "hmlnarik"}, "path": "services/src/main/java/org/keycloak/partialimport/RealmRolesPartialImport.java", "diffHunk": "@@ -56,20 +58,17 @@ public String getName(RoleRepresentation roleRep) {\n \n     @Override\n     public String getModelId(RealmModel realm, KeycloakSession session, RoleRepresentation roleRep) {\n-        for (RoleModel role : realm.getRoles()) {\n-            if (getName(roleRep).equals(role.getName())) return role.getId();\n-        }\n+        Optional<RoleModel> role = realm.getRolesStream().filter(r -> Objects.equals(getName(roleRep), r.getName())).findFirst();\n \n+        if (role.isPresent()) {\n+            return role.get().getId();\n+        }\n         return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a20d0ef10d44f94262abb9d4c613902d84cdec80"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA0MzgwMQ==", "bodyText": "Can this be broken down to remove dependency on offlineClients and extracted to a named method rather than anonymous method?", "url": "https://github.com/keycloak/keycloak/pull/7302#discussion_r473043801", "createdAt": "2020-08-19T13:49:16Z", "author": {"login": "hmlnarik"}, "path": "services/src/main/java/org/keycloak/services/resources/admin/UserResource.java", "diffHunk": "@@ -465,40 +465,39 @@ public void removeFederatedIdentity(final @PathParam(\"provider\") String provider\n     @Produces(MediaType.APPLICATION_JSON)\n     public List<Map<String, Object>> getConsents() {\n         auth.users().requireView(user);\n-        List<Map<String, Object>> result = new LinkedList<>();\n \n         Set<ClientModel> offlineClients = new UserSessionManager(session).findClientsWithOfflineToken(realm, user);\n \n-        for (ClientModel client : realm.getClients()) {\n-            UserConsentModel consent = session.users().getConsentByClient(realm, user.getId(), client.getId());\n-            boolean hasOfflineToken = offlineClients.contains(client);\n-\n-            if (consent == null && !hasOfflineToken) {\n-                continue;\n-            }\n-\n-            UserConsentRepresentation rep = (consent == null) ? null : ModelToRepresentation.toRepresentation(consent);\n-\n-            Map<String, Object> currentRep = new HashMap<>();\n-            currentRep.put(\"clientId\", client.getClientId());\n-            currentRep.put(\"grantedClientScopes\", (rep==null ? Collections.emptyList() : rep.getGrantedClientScopes()));\n-            currentRep.put(\"createdDate\", (rep==null ? null : rep.getCreatedDate()));\n-            currentRep.put(\"lastUpdatedDate\", (rep==null ? null : rep.getLastUpdatedDate()));\n-\n-            List<Map<String, String>> additionalGrants = new LinkedList<>();\n-            if (hasOfflineToken) {\n-                Map<String, String> offlineTokens = new HashMap<>();\n-                offlineTokens.put(\"client\", client.getId());\n-                // TODO: translate\n-                offlineTokens.put(\"key\", \"Offline Token\");\n-                additionalGrants.add(offlineTokens);\n-            }\n-            currentRep.put(\"additionalGrants\", additionalGrants);\n-\n-            result.add(currentRep);\n-        }\n-\n-        return result;\n+        return session.clients().getClientsStream(realm)\n+                .map(client -> {\n+                    UserConsentModel consent = session.users().getConsentByClient(realm, user.getId(), client.getId());\n+                    boolean hasOfflineToken = offlineClients.contains(client);\n+\n+                    if (consent == null && !hasOfflineToken) {\n+                        return null;\n+                    }\n+\n+                    UserConsentRepresentation rep = (consent == null) ? null : ModelToRepresentation.toRepresentation(consent);\n+\n+                    Map<String, Object> currentRep = new HashMap<>();\n+                    currentRep.put(\"clientId\", client.getClientId());\n+                    currentRep.put(\"grantedClientScopes\", (rep == null ? Collections.emptyList() : rep.getGrantedClientScopes()));\n+                    currentRep.put(\"createdDate\", (rep == null ? null : rep.getCreatedDate()));\n+                    currentRep.put(\"lastUpdatedDate\", (rep == null ? null : rep.getLastUpdatedDate()));\n+\n+                    List<Map<String, String>> additionalGrants = new LinkedList<>();\n+                    if (hasOfflineToken) {\n+                        Map<String, String> offlineTokens = new HashMap<>();\n+                        offlineTokens.put(\"client\", client.getId());\n+                        // TODO: translate\n+                        offlineTokens.put(\"key\", \"Offline Token\");\n+                        additionalGrants.add(offlineTokens);\n+                    }\n+                    currentRep.put(\"additionalGrants\", additionalGrants);\n+                    return currentRep;\n+                })\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a20d0ef10d44f94262abb9d4c613902d84cdec80"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA0ODkyOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        List<RoleRepresentation> roles = new ArrayList<>();\n          \n          \n            \n                        List<RoleRepresentation> roles = new LinkedList<>();", "url": "https://github.com/keycloak/keycloak/pull/7302#discussion_r473048929", "createdAt": "2020-08-19T13:56:17Z", "author": {"login": "hmlnarik"}, "path": "services/src/main/java/org/keycloak/services/util/ScopeMappedUtil.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.services.util;\n+\n+import org.keycloak.models.ClientModel;\n+import org.keycloak.models.RoleModel;\n+import org.keycloak.models.ScopeContainerModel;\n+import org.keycloak.models.utils.KeycloakModelUtils;\n+import org.keycloak.models.utils.ModelToRepresentation;\n+import org.keycloak.representations.idm.ClientMappingsRepresentation;\n+import org.keycloak.representations.idm.RoleRepresentation;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class ScopeMappedUtil {\n+    public static ClientMappingsRepresentation toClientMappingsRepresentation(ClientModel client, ScopeContainerModel scopeContainer) {\n+        Set<RoleModel> roleMappings = KeycloakModelUtils.getClientScopeMappings(client, scopeContainer);\n+\n+        if (roleMappings.size() > 0) {\n+\n+            ClientMappingsRepresentation mappings = new ClientMappingsRepresentation();\n+            mappings.setId(client.getId());\n+            mappings.setClient(client.getClientId());\n+            List<RoleRepresentation> roles = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a20d0ef10d44f94262abb9d4c613902d84cdec80"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA0OTM2Mg==", "bodyText": "For performance, prefer:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (roleMappings.size() > 0) {\n          \n          \n            \n                    if (! roleMappings.isEmpty()) {", "url": "https://github.com/keycloak/keycloak/pull/7302#discussion_r473049362", "createdAt": "2020-08-19T13:56:50Z", "author": {"login": "hmlnarik"}, "path": "services/src/main/java/org/keycloak/services/util/ScopeMappedUtil.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.services.util;\n+\n+import org.keycloak.models.ClientModel;\n+import org.keycloak.models.RoleModel;\n+import org.keycloak.models.ScopeContainerModel;\n+import org.keycloak.models.utils.KeycloakModelUtils;\n+import org.keycloak.models.utils.ModelToRepresentation;\n+import org.keycloak.representations.idm.ClientMappingsRepresentation;\n+import org.keycloak.representations.idm.RoleRepresentation;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class ScopeMappedUtil {\n+    public static ClientMappingsRepresentation toClientMappingsRepresentation(ClientModel client, ScopeContainerModel scopeContainer) {\n+        Set<RoleModel> roleMappings = KeycloakModelUtils.getClientScopeMappings(client, scopeContainer);\n+\n+        if (roleMappings.size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a20d0ef10d44f94262abb9d4c613902d84cdec80"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI0ODgzNw==", "bodyText": "Can this code be simplified?", "url": "https://github.com/keycloak/keycloak/pull/7302#discussion_r473248837", "createdAt": "2020-08-19T18:50:09Z", "author": {"login": "hmlnarik"}, "path": "services/src/main/java/org/keycloak/services/resources/admin/UserResource.java", "diffHunk": "@@ -465,40 +465,39 @@ public void removeFederatedIdentity(final @PathParam(\"provider\") String provider\n     @Produces(MediaType.APPLICATION_JSON)\n     public List<Map<String, Object>> getConsents() {\n         auth.users().requireView(user);\n-        List<Map<String, Object>> result = new LinkedList<>();\n \n         Set<ClientModel> offlineClients = new UserSessionManager(session).findClientsWithOfflineToken(realm, user);\n \n-        for (ClientModel client : realm.getClients()) {\n-            UserConsentModel consent = session.users().getConsentByClient(realm, user.getId(), client.getId());\n-            boolean hasOfflineToken = offlineClients.contains(client);\n-\n-            if (consent == null && !hasOfflineToken) {\n-                continue;\n-            }\n-\n-            UserConsentRepresentation rep = (consent == null) ? null : ModelToRepresentation.toRepresentation(consent);\n-\n-            Map<String, Object> currentRep = new HashMap<>();\n-            currentRep.put(\"clientId\", client.getClientId());\n-            currentRep.put(\"grantedClientScopes\", (rep==null ? Collections.emptyList() : rep.getGrantedClientScopes()));\n-            currentRep.put(\"createdDate\", (rep==null ? null : rep.getCreatedDate()));\n-            currentRep.put(\"lastUpdatedDate\", (rep==null ? null : rep.getLastUpdatedDate()));\n-\n-            List<Map<String, String>> additionalGrants = new LinkedList<>();\n-            if (hasOfflineToken) {\n-                Map<String, String> offlineTokens = new HashMap<>();\n-                offlineTokens.put(\"client\", client.getId());\n-                // TODO: translate\n-                offlineTokens.put(\"key\", \"Offline Token\");\n-                additionalGrants.add(offlineTokens);\n-            }\n-            currentRep.put(\"additionalGrants\", additionalGrants);\n-\n-            result.add(currentRep);\n-        }\n-\n-        return result;\n+        return session.clients().getClientsStream(realm)\n+                .map(client -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a20d0ef10d44f94262abb9d4c613902d84cdec80"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI0OTY0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        List<RoleRepresentation> realmRep = new ArrayList<>();\n          \n          \n            \n                        List<RoleRepresentation> realmRep = new LinkedList<>();", "url": "https://github.com/keycloak/keycloak/pull/7302#discussion_r473249640", "createdAt": "2020-08-19T18:51:48Z", "author": {"login": "hmlnarik"}, "path": "services/src/main/java/org/keycloak/services/resources/admin/ScopeMappedResource.java", "diffHunk": "@@ -98,31 +102,21 @@ public MappingsRepresentation getScopeMappings() {\n         MappingsRepresentation all = new MappingsRepresentation();\n         Set<RoleModel> realmMappings = scopeContainer.getRealmScopeMappings();\n         if (realmMappings.size() > 0) {\n-            List<RoleRepresentation> realmRep = new ArrayList<RoleRepresentation>();\n+            List<RoleRepresentation> realmRep = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a20d0ef10d44f94262abb9d4c613902d84cdec80"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1MDEzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Stream<ClientModel> clients = session.clients().getClientsStream(realm);\n          \n          \n            \n                    Map<String, ClientMappingsRepresentation> clientMappings = clients\n          \n          \n            \n                            .map(c -> ScopeMappedUtil.toClientMappingsRepresentation(c, scopeContainer))\n          \n          \n            \n                            .filter(Objects::nonNull)\n          \n          \n            \n                            .collect(Collectors.toMap(ClientMappingsRepresentation::getClient, Function.identity()));\n          \n          \n            \n            \n          \n          \n            \n                    if (clientMappings.size() > 0) {\n          \n          \n            \n                        all.setClientMappings(clientMappings);\n          \n          \n            \n                    }\n          \n          \n            \n                    try (Stream<ClientModel> clients = session.clients().getClientsStream(realm)) {\n          \n          \n            \n                        Map<String, ClientMappingsRepresentation> clientMappings = clients\n          \n          \n            \n                                .map(c -> ScopeMappedUtil.toClientMappingsRepresentation(c, scopeContainer))\n          \n          \n            \n                                .filter(Objects::nonNull)\n          \n          \n            \n                                .collect(Collectors.toMap(ClientMappingsRepresentation::getClient, Function.identity()));\n          \n          \n            \n            \n          \n          \n            \n                        if (clientMappings.size() > 0) {\n          \n          \n            \n                            all.setClientMappings(clientMappings);\n          \n          \n            \n                        }\n          \n          \n            \n                    }", "url": "https://github.com/keycloak/keycloak/pull/7302#discussion_r473250138", "createdAt": "2020-08-19T18:52:54Z", "author": {"login": "hmlnarik"}, "path": "services/src/main/java/org/keycloak/services/resources/admin/ScopeMappedResource.java", "diffHunk": "@@ -98,31 +102,21 @@ public MappingsRepresentation getScopeMappings() {\n         MappingsRepresentation all = new MappingsRepresentation();\n         Set<RoleModel> realmMappings = scopeContainer.getRealmScopeMappings();\n         if (realmMappings.size() > 0) {\n-            List<RoleRepresentation> realmRep = new ArrayList<RoleRepresentation>();\n+            List<RoleRepresentation> realmRep = new ArrayList<>();\n             for (RoleModel roleModel : realmMappings) {\n                 realmRep.add(ModelToRepresentation.toBriefRepresentation(roleModel));\n             }\n             all.setRealmMappings(realmRep);\n         }\n \n-        List<ClientModel> clients = realm.getClients();\n-        if (clients.size() > 0) {\n-            Map<String, ClientMappingsRepresentation> clientMappings = new HashMap<String, ClientMappingsRepresentation>();\n-            for (ClientModel client : clients) {\n-                Set<RoleModel> roleMappings = KeycloakModelUtils.getClientScopeMappings(client, this.scopeContainer); //client.getClientScopeMappings(this.client);\n-                if (roleMappings.size() > 0) {\n-                    ClientMappingsRepresentation mappings = new ClientMappingsRepresentation();\n-                    mappings.setId(client.getId());\n-                    mappings.setClient(client.getClientId());\n-                    List<RoleRepresentation> roles = new ArrayList<RoleRepresentation>();\n-                    mappings.setMappings(roles);\n-                    for (RoleModel role : roleMappings) {\n-                        roles.add(ModelToRepresentation.toBriefRepresentation(role));\n-                    }\n-                    clientMappings.put(client.getClientId(), mappings);\n-                    all.setClientMappings(clientMappings);\n-                }\n-            }\n+        Stream<ClientModel> clients = session.clients().getClientsStream(realm);\n+        Map<String, ClientMappingsRepresentation> clientMappings = clients\n+                .map(c -> ScopeMappedUtil.toClientMappingsRepresentation(c, scopeContainer))\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toMap(ClientMappingsRepresentation::getClient, Function.identity()));\n+\n+        if (clientMappings.size() > 0) {\n+            all.setClientMappings(clientMappings);\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a20d0ef10d44f94262abb9d4c613902d84cdec80"}, "originalPosition": 69}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a20d0ef10d44f94262abb9d4c613902d84cdec80", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/a20d0ef10d44f94262abb9d4c613902d84cdec80", "committedDate": "2020-08-18T13:33:47Z", "message": "KEYCLOAK-14901 Replace deprecated ClientProvider related methods across Keycloak"}, "afterCommit": {"oid": "09a946ab52c9d7f5d7add3584746b5e6f6196d0e", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/09a946ab52c9d7f5d7add3584746b5e6f6196d0e", "committedDate": "2020-08-26T13:59:53Z", "message": "KEYCLOAK-14901 Replace deprecated ClientProvider related methods across Keycloak"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "09a946ab52c9d7f5d7add3584746b5e6f6196d0e", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/09a946ab52c9d7f5d7add3584746b5e6f6196d0e", "committedDate": "2020-08-26T13:59:53Z", "message": "KEYCLOAK-14901 Replace deprecated ClientProvider related methods across Keycloak"}, "afterCommit": {"oid": "64746b742f24cc02899d91d8fcba20c7520b0899", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/64746b742f24cc02899d91d8fcba20c7520b0899", "committedDate": "2020-08-26T14:13:51Z", "message": "KEYCLOAK-14901 Replace deprecated ClientProvider related methods across Keycloak"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwNzI1OTYx", "url": "https://github.com/keycloak/keycloak/pull/7302#pullrequestreview-480725961", "createdAt": "2020-09-02T11:27:21Z", "commit": {"oid": "64746b742f24cc02899d91d8fcba20c7520b0899"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMToyNzoyMVrOHLqv7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMToyNzoyMVrOHLqv7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5Njc4MA==", "bodyText": "Are we going to replace any other occurrence of RealmModel.getClientByClientId(String) with session.clients().getClientByClientId(RealmModel, String)? It's not clear to me why we update it here but not on all other places. Are all other occurrences used becouse we don't have access to keycloak session there?\nThe same question applies to RealmModel.getClientById(String).", "url": "https://github.com/keycloak/keycloak/pull/7302#discussion_r481996780", "createdAt": "2020-09-02T11:27:21Z", "author": {"login": "vramik"}, "path": "authz/policy/common/src/main/java/org/keycloak/authorization/policy/provider/role/RolePolicyProviderFactory.java", "diffHunk": "@@ -163,7 +164,7 @@ private void updateRoles(Policy policy, AuthorizationProvider authorization, Set\n                         role = realm.getRoleById(roleName);\n                     }\n                 } else {\n-                    ClientModel client = realm.getClientByClientId(clientId);\n+                    ClientModel client = session.clients().getClientByClientId(realm, clientId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64746b742f24cc02899d91d8fcba20c7520b0899"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwOTI0MDQ2", "url": "https://github.com/keycloak/keycloak/pull/7302#pullrequestreview-480924046", "createdAt": "2020-09-02T15:09:57Z", "commit": {"oid": "64746b742f24cc02899d91d8fcba20c7520b0899"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6e771c5846c46ccc790a928ae2cbf3402f0ed3b", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/a6e771c5846c46ccc790a928ae2cbf3402f0ed3b", "committedDate": "2020-09-03T11:29:02Z", "message": "KEYCLOAK-14901 Replace deprecated ClientProvider related methods across Keycloak"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "64746b742f24cc02899d91d8fcba20c7520b0899", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/64746b742f24cc02899d91d8fcba20c7520b0899", "committedDate": "2020-08-26T14:13:51Z", "message": "KEYCLOAK-14901 Replace deprecated ClientProvider related methods across Keycloak"}, "afterCommit": {"oid": "a6e771c5846c46ccc790a928ae2cbf3402f0ed3b", "author": {"user": {"login": "martin-kanis", "name": "Martin Kanis"}}, "url": "https://github.com/keycloak/keycloak/commit/a6e771c5846c46ccc790a928ae2cbf3402f0ed3b", "committedDate": "2020-09-03T11:29:02Z", "message": "KEYCLOAK-14901 Replace deprecated ClientProvider related methods across Keycloak"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNzQ5NTYx", "url": "https://github.com/keycloak/keycloak/pull/7302#pullrequestreview-482749561", "createdAt": "2020-09-04T15:26:20Z", "commit": {"oid": "a6e771c5846c46ccc790a928ae2cbf3402f0ed3b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyODM1MDgw", "url": "https://github.com/keycloak/keycloak/pull/7302#pullrequestreview-482835080", "createdAt": "2020-09-04T17:30:35Z", "commit": {"oid": "a6e771c5846c46ccc790a928ae2cbf3402f0ed3b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNDcyMjYz", "url": "https://github.com/keycloak/keycloak/pull/7302#pullrequestreview-483472263", "createdAt": "2020-09-07T11:11:42Z", "commit": {"oid": "a6e771c5846c46ccc790a928ae2cbf3402f0ed3b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2880, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}