{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxMDg3OTEw", "number": 6649, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMToxMDo1MVrODXtNXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMToxMDo1MVrODXtNXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTg0NTQxOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/keycloak/authentication/authenticators/browser/WebAuthnPasswordlessAuthenticator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMToxMDo1MVrOFdJlPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjo1MDoyNlrOFdoYPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjExMDAxMw==", "bodyText": "It seems that no one calls this method getCredentialProvider. Could you confirm it? If so, IMO, it might be better to delete this method.", "url": "https://github.com/keycloak/keycloak/pull/6649#discussion_r366110013", "createdAt": "2020-01-14T01:10:51Z", "author": {"login": "tnorimat"}, "path": "services/src/main/java/org/keycloak/authentication/authenticators/browser/WebAuthnPasswordlessAuthenticator.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.keycloak.authentication.authenticators.browser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.keycloak.authentication.AuthenticationFlowContext;\n+import org.keycloak.authentication.RequiredActionFactory;\n+import org.keycloak.authentication.RequiredActionProvider;\n+import org.keycloak.authentication.requiredactions.WebAuthnPasswordlessRegisterFactory;\n+import org.keycloak.credential.CredentialProvider;\n+import org.keycloak.credential.WebAuthnPasswordlessCredentialProvider;\n+import org.keycloak.credential.WebAuthnPasswordlessCredentialProviderFactory;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserModel;\n+import org.keycloak.models.WebAuthnPolicy;\n+import org.keycloak.models.credential.WebAuthnCredentialModel;\n+\n+/**\n+ * Authenticator for WebAuthn authentication with passwordless credential. This class is temporary and will be likely\n+ * removed in the future during future improvements in authentication SPI\n+ */\n+public class WebAuthnPasswordlessAuthenticator extends WebAuthnAuthenticator {\n+\n+    public WebAuthnPasswordlessAuthenticator(KeycloakSession session) {\n+        super(session);\n+    }\n+\n+    @Override\n+    protected WebAuthnPolicy getWebAuthnPolicy(AuthenticationFlowContext context) {\n+        return context.getRealm().getWebAuthnPolicyPasswordless();\n+    }\n+\n+    @Override\n+    protected String getCredentialType() {\n+        return WebAuthnCredentialModel.TYPE_PASSWORDLESS;\n+    }\n+\n+    @Override\n+    public void setRequiredActions(KeycloakSession session, RealmModel realm, UserModel user) {\n+        // ask the user to do required action to register webauthn authenticator\n+        if (!user.getRequiredActions().contains(WebAuthnPasswordlessRegisterFactory.PROVIDER_ID)) {\n+            user.addRequiredAction(WebAuthnPasswordlessRegisterFactory.PROVIDER_ID);\n+        }\n+    }\n+\n+    @Override\n+    public List<RequiredActionFactory> getRequiredActions(KeycloakSession session) {\n+        return Collections.singletonList((WebAuthnPasswordlessRegisterFactory)session.getKeycloakSessionFactory().getProviderFactory(RequiredActionProvider.class, WebAuthnPasswordlessRegisterFactory.PROVIDER_ID));\n+    }\n+\n+\n+    public WebAuthnPasswordlessCredentialProvider getCredentialProvider(KeycloakSession session) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0af8e873ea5014a2a33551fb4aed5520b028853a"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4MDY0Ng==", "bodyText": "Thanks, the only reason why I kept this method was, that I originally worked on this on top of the other branch for introduce \"Try another way\" link. That task changed some stuff in WebAuthnAuthenticator class (added CredentialValidator as an implementing interface among other things).\nNow that other PR is merged in Keycloak master, which means that the method \"getCredentialProvider\" became to be used :) I needed to do few more very small changes in the WebAuthnAuthenticator and WebAuthnPasswordlessAuthenticator class. Do you have a chance to re-review?", "url": "https://github.com/keycloak/keycloak/pull/6649#discussion_r366580646", "createdAt": "2020-01-14T21:26:40Z", "author": {"login": "mposolda"}, "path": "services/src/main/java/org/keycloak/authentication/authenticators/browser/WebAuthnPasswordlessAuthenticator.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.keycloak.authentication.authenticators.browser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.keycloak.authentication.AuthenticationFlowContext;\n+import org.keycloak.authentication.RequiredActionFactory;\n+import org.keycloak.authentication.RequiredActionProvider;\n+import org.keycloak.authentication.requiredactions.WebAuthnPasswordlessRegisterFactory;\n+import org.keycloak.credential.CredentialProvider;\n+import org.keycloak.credential.WebAuthnPasswordlessCredentialProvider;\n+import org.keycloak.credential.WebAuthnPasswordlessCredentialProviderFactory;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserModel;\n+import org.keycloak.models.WebAuthnPolicy;\n+import org.keycloak.models.credential.WebAuthnCredentialModel;\n+\n+/**\n+ * Authenticator for WebAuthn authentication with passwordless credential. This class is temporary and will be likely\n+ * removed in the future during future improvements in authentication SPI\n+ */\n+public class WebAuthnPasswordlessAuthenticator extends WebAuthnAuthenticator {\n+\n+    public WebAuthnPasswordlessAuthenticator(KeycloakSession session) {\n+        super(session);\n+    }\n+\n+    @Override\n+    protected WebAuthnPolicy getWebAuthnPolicy(AuthenticationFlowContext context) {\n+        return context.getRealm().getWebAuthnPolicyPasswordless();\n+    }\n+\n+    @Override\n+    protected String getCredentialType() {\n+        return WebAuthnCredentialModel.TYPE_PASSWORDLESS;\n+    }\n+\n+    @Override\n+    public void setRequiredActions(KeycloakSession session, RealmModel realm, UserModel user) {\n+        // ask the user to do required action to register webauthn authenticator\n+        if (!user.getRequiredActions().contains(WebAuthnPasswordlessRegisterFactory.PROVIDER_ID)) {\n+            user.addRequiredAction(WebAuthnPasswordlessRegisterFactory.PROVIDER_ID);\n+        }\n+    }\n+\n+    @Override\n+    public List<RequiredActionFactory> getRequiredActions(KeycloakSession session) {\n+        return Collections.singletonList((WebAuthnPasswordlessRegisterFactory)session.getKeycloakSessionFactory().getProviderFactory(RequiredActionProvider.class, WebAuthnPasswordlessRegisterFactory.PROVIDER_ID));\n+    }\n+\n+\n+    public WebAuthnPasswordlessCredentialProvider getCredentialProvider(KeycloakSession session) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjExMDAxMw=="}, "originalCommit": {"oid": "0af8e873ea5014a2a33551fb4aed5520b028853a"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxNDU4OA==", "bodyText": "Yes, I'll try to re-review.", "url": "https://github.com/keycloak/keycloak/pull/6649#discussion_r366614588", "createdAt": "2020-01-14T22:50:26Z", "author": {"login": "tnorimat"}, "path": "services/src/main/java/org/keycloak/authentication/authenticators/browser/WebAuthnPasswordlessAuthenticator.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.keycloak.authentication.authenticators.browser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.keycloak.authentication.AuthenticationFlowContext;\n+import org.keycloak.authentication.RequiredActionFactory;\n+import org.keycloak.authentication.RequiredActionProvider;\n+import org.keycloak.authentication.requiredactions.WebAuthnPasswordlessRegisterFactory;\n+import org.keycloak.credential.CredentialProvider;\n+import org.keycloak.credential.WebAuthnPasswordlessCredentialProvider;\n+import org.keycloak.credential.WebAuthnPasswordlessCredentialProviderFactory;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserModel;\n+import org.keycloak.models.WebAuthnPolicy;\n+import org.keycloak.models.credential.WebAuthnCredentialModel;\n+\n+/**\n+ * Authenticator for WebAuthn authentication with passwordless credential. This class is temporary and will be likely\n+ * removed in the future during future improvements in authentication SPI\n+ */\n+public class WebAuthnPasswordlessAuthenticator extends WebAuthnAuthenticator {\n+\n+    public WebAuthnPasswordlessAuthenticator(KeycloakSession session) {\n+        super(session);\n+    }\n+\n+    @Override\n+    protected WebAuthnPolicy getWebAuthnPolicy(AuthenticationFlowContext context) {\n+        return context.getRealm().getWebAuthnPolicyPasswordless();\n+    }\n+\n+    @Override\n+    protected String getCredentialType() {\n+        return WebAuthnCredentialModel.TYPE_PASSWORDLESS;\n+    }\n+\n+    @Override\n+    public void setRequiredActions(KeycloakSession session, RealmModel realm, UserModel user) {\n+        // ask the user to do required action to register webauthn authenticator\n+        if (!user.getRequiredActions().contains(WebAuthnPasswordlessRegisterFactory.PROVIDER_ID)) {\n+            user.addRequiredAction(WebAuthnPasswordlessRegisterFactory.PROVIDER_ID);\n+        }\n+    }\n+\n+    @Override\n+    public List<RequiredActionFactory> getRequiredActions(KeycloakSession session) {\n+        return Collections.singletonList((WebAuthnPasswordlessRegisterFactory)session.getKeycloakSessionFactory().getProviderFactory(RequiredActionProvider.class, WebAuthnPasswordlessRegisterFactory.PROVIDER_ID));\n+    }\n+\n+\n+    public WebAuthnPasswordlessCredentialProvider getCredentialProvider(KeycloakSession session) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjExMDAxMw=="}, "originalCommit": {"oid": "0af8e873ea5014a2a33551fb4aed5520b028853a"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3931, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}