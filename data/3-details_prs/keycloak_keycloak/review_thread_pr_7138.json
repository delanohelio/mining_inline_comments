{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3Mzk1MjU4", "number": 7138, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxOTo1NTo1MlrOECTNAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDowMToxNFrOECTTIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODQ3MjM0OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/org/keycloak/common/util/DelegatingSerializationFilter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxOTo1NTo1MlrOGerMZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODoyNjo0MVrOGe7MPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxODE0OA==", "bodyText": "Shouldn't we use the EmptyFilter here too instead of setting null values?", "url": "https://github.com/keycloak/keycloak/pull/7138#discussion_r434818148", "createdAt": "2020-06-03T19:55:52Z", "author": {"login": "sguilhen"}, "path": "common/src/main/java/org/keycloak/common/util/DelegatingSerializationFilter.java", "diffHunk": "@@ -0,0 +1,215 @@\n+package org.keycloak.common.util;\n+\n+import org.jboss.logging.Logger;\n+\n+import java.io.ObjectInputStream;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class DelegatingSerializationFilter {\n+    private static final Logger LOG = Logger.getLogger(DelegatingSerializationFilter.class.getName());\n+\n+    private static final SerializationFilterAdapter serializationFilterAdapter = isJava6To8() ? createOnJava6To8Adapter() : new OnJavaAfter8();\n+\n+    private static boolean isJava6To8() {\n+        List<String> olderVersions = Arrays.asList(\"1.6\", \"1.7\", \"1.8\");\n+        return olderVersions.contains(System.getProperty(\"java.specification.version\"));\n+    }\n+\n+    private DelegatingSerializationFilter() {\n+    }\n+\n+    public static DelegatingSerializationFilter.FilterPatternBuilder builder() {\n+        return new DelegatingSerializationFilter.FilterPatternBuilder();\n+    }\n+\n+    private void setFilter(ObjectInputStream ois, String filterPattern) {\n+        LOG.debug(\"Using: \" + serializationFilterAdapter.getClass().getSimpleName());\n+\n+        if (serializationFilterAdapter.getObjectInputFilter(ois) == null) {\n+            serializationFilterAdapter.setObjectInputFilter(ois, filterPattern);\n+        }\n+    }\n+\n+    interface SerializationFilterAdapter {\n+\n+        Object getObjectInputFilter(ObjectInputStream ois);\n+\n+        void setObjectInputFilter(ObjectInputStream ois, String filterPattern);\n+    }\n+\n+    private static SerializationFilterAdapter createOnJava6To8Adapter() {\n+        try {\n+            ClassLoader cl = Thread.currentThread().getContextClassLoader();\n+            Class<?> objectInputFilterClass = cl.loadClass(\"sun.misc.ObjectInputFilter\");\n+            Class<?> objectInputFilterConfigClass = cl.loadClass(\"sun.misc.ObjectInputFilter$Config\");\n+            Method getObjectInputFilter = objectInputFilterConfigClass.getDeclaredMethod(\"getObjectInputFilter\", ObjectInputStream.class);\n+            Method setObjectInputFilter = objectInputFilterConfigClass.getDeclaredMethod(\"setObjectInputFilter\", ObjectInputStream.class, objectInputFilterClass);\n+            Method createFilter = objectInputFilterConfigClass.getDeclaredMethod(\"createFilter\", String.class);\n+            LOG.info(\"Using OnJava6To8 serialization filter adapter\");\n+            return new OnJava6To8(getObjectInputFilter, setObjectInputFilter, createFilter);\n+        } catch (ClassNotFoundException | NoSuchMethodException e) {\n+            // This can happen for older JDK updates.\n+            LOG.warn(\"Could not configure SerializationFilterAdapter. For better security, it is highly recommended to upgrade to newer JDK version update!\");\n+            LOG.warn(\"For the Java 7, the recommended update is at least 131 (1.7.0_131 or newer). For the Java 8, the recommended update is at least 121 (1.8.0_121 or newer).\");\n+            LOG.warn(\"Error details\", e);\n+            return new EmptyFilterAdapter();\n+        }\n+    }\n+\n+    // If codebase stays on Java 8 for a while you could use Java 8 classes directly without reflection\n+    static class OnJava6To8 implements SerializationFilterAdapter {\n+\n+        private final Method getObjectInputFilterMethod;\n+        private final Method setObjectInputFilterMethod;\n+        private final Method createFilterMethod;\n+\n+        private OnJava6To8(Method getObjectInputFilterMethod, Method setObjectInputFilterMethod, Method createFilterMethod) {\n+            this.getObjectInputFilterMethod = getObjectInputFilterMethod;\n+            this.setObjectInputFilterMethod = setObjectInputFilterMethod;\n+            this.createFilterMethod = createFilterMethod;\n+        }\n+\n+        public Object getObjectInputFilter(ObjectInputStream ois) {\n+            try {\n+                return getObjectInputFilterMethod.invoke(null, ois);\n+            } catch (IllegalAccessException | InvocationTargetException e) {\n+                LOG.warn(\"Could not read ObjectFilter from ObjectInputStream: \" + e.getMessage());\n+                return null;\n+            }\n+        }\n+\n+        public void setObjectInputFilter(ObjectInputStream ois, String filterPattern) {\n+            try {\n+                Object objectFilter = createFilterMethod.invoke(null, filterPattern);\n+                setObjectInputFilterMethod.invoke(null, ois, objectFilter);\n+            } catch (IllegalAccessException | InvocationTargetException e) {\n+                LOG.warn(\"Could not set ObjectFilter: \" + e.getMessage());\n+            }\n+        }\n+    }\n+\n+\n+    static class EmptyFilterAdapter implements SerializationFilterAdapter {\n+\n+        @Override\n+        public Object getObjectInputFilter(ObjectInputStream ois) {\n+            return null;\n+        }\n+\n+        @Override\n+        public void setObjectInputFilter(ObjectInputStream ois, String filterPattern) {\n+\n+        }\n+\n+    }\n+\n+\n+    // If codebase moves to Java 9+ could use Java 9+ classes directly without reflection and keep the old variant with reflection\n+    static class OnJavaAfter8 implements SerializationFilterAdapter {\n+\n+        private static final Method getObjectInputFilterMethod;\n+        private static final Method setObjectInputFilterMethod;\n+        private static final Method createFilterMethod;\n+\n+        static {\n+\n+            Method getObjectInputFilter;\n+            Method setObjectInputFilter;\n+            Method createFilter;\n+\n+            try {\n+                ClassLoader cl = Thread.currentThread().getContextClassLoader();\n+                Class<?> objectInputFilterClass = cl.loadClass(\"java.io.ObjectInputFilter\");\n+                Class<?> objectInputFilterConfigClass = cl.loadClass(\"java.io.ObjectInputFilter$Config\");\n+                Class<?> objectInputStreamClass = cl.loadClass(\"java.io.ObjectInputStream\");\n+                getObjectInputFilter = objectInputStreamClass.getDeclaredMethod(\"getObjectInputFilter\");\n+                setObjectInputFilter = objectInputStreamClass.getDeclaredMethod(\"setObjectInputFilter\", objectInputFilterClass);\n+                createFilter = objectInputFilterConfigClass.getDeclaredMethod(\"createFilter\", String.class);\n+                LOG.info(\"Using OnJavaAfter8 serialization filter adapter\");\n+            } catch (ClassNotFoundException | NoSuchMethodException e) {\n+                LOG.warn(\"Could not configure SerializationFilterAdapter: \" + e.getMessage());\n+                getObjectInputFilter = null;\n+                setObjectInputFilter = null;\n+                createFilter = null;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b229637757e5686518eb0a1ef32af1ffd2fdbb5"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4MDI1Mg==", "bodyText": "Yes, it will be slightly better. Even though in theory it shouldn't happen in newer JDK versions as methods should be there, but I am not 100% sure...", "url": "https://github.com/keycloak/keycloak/pull/7138#discussion_r435080252", "createdAt": "2020-06-04T08:26:41Z", "author": {"login": "mposolda"}, "path": "common/src/main/java/org/keycloak/common/util/DelegatingSerializationFilter.java", "diffHunk": "@@ -0,0 +1,215 @@\n+package org.keycloak.common.util;\n+\n+import org.jboss.logging.Logger;\n+\n+import java.io.ObjectInputStream;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class DelegatingSerializationFilter {\n+    private static final Logger LOG = Logger.getLogger(DelegatingSerializationFilter.class.getName());\n+\n+    private static final SerializationFilterAdapter serializationFilterAdapter = isJava6To8() ? createOnJava6To8Adapter() : new OnJavaAfter8();\n+\n+    private static boolean isJava6To8() {\n+        List<String> olderVersions = Arrays.asList(\"1.6\", \"1.7\", \"1.8\");\n+        return olderVersions.contains(System.getProperty(\"java.specification.version\"));\n+    }\n+\n+    private DelegatingSerializationFilter() {\n+    }\n+\n+    public static DelegatingSerializationFilter.FilterPatternBuilder builder() {\n+        return new DelegatingSerializationFilter.FilterPatternBuilder();\n+    }\n+\n+    private void setFilter(ObjectInputStream ois, String filterPattern) {\n+        LOG.debug(\"Using: \" + serializationFilterAdapter.getClass().getSimpleName());\n+\n+        if (serializationFilterAdapter.getObjectInputFilter(ois) == null) {\n+            serializationFilterAdapter.setObjectInputFilter(ois, filterPattern);\n+        }\n+    }\n+\n+    interface SerializationFilterAdapter {\n+\n+        Object getObjectInputFilter(ObjectInputStream ois);\n+\n+        void setObjectInputFilter(ObjectInputStream ois, String filterPattern);\n+    }\n+\n+    private static SerializationFilterAdapter createOnJava6To8Adapter() {\n+        try {\n+            ClassLoader cl = Thread.currentThread().getContextClassLoader();\n+            Class<?> objectInputFilterClass = cl.loadClass(\"sun.misc.ObjectInputFilter\");\n+            Class<?> objectInputFilterConfigClass = cl.loadClass(\"sun.misc.ObjectInputFilter$Config\");\n+            Method getObjectInputFilter = objectInputFilterConfigClass.getDeclaredMethod(\"getObjectInputFilter\", ObjectInputStream.class);\n+            Method setObjectInputFilter = objectInputFilterConfigClass.getDeclaredMethod(\"setObjectInputFilter\", ObjectInputStream.class, objectInputFilterClass);\n+            Method createFilter = objectInputFilterConfigClass.getDeclaredMethod(\"createFilter\", String.class);\n+            LOG.info(\"Using OnJava6To8 serialization filter adapter\");\n+            return new OnJava6To8(getObjectInputFilter, setObjectInputFilter, createFilter);\n+        } catch (ClassNotFoundException | NoSuchMethodException e) {\n+            // This can happen for older JDK updates.\n+            LOG.warn(\"Could not configure SerializationFilterAdapter. For better security, it is highly recommended to upgrade to newer JDK version update!\");\n+            LOG.warn(\"For the Java 7, the recommended update is at least 131 (1.7.0_131 or newer). For the Java 8, the recommended update is at least 121 (1.8.0_121 or newer).\");\n+            LOG.warn(\"Error details\", e);\n+            return new EmptyFilterAdapter();\n+        }\n+    }\n+\n+    // If codebase stays on Java 8 for a while you could use Java 8 classes directly without reflection\n+    static class OnJava6To8 implements SerializationFilterAdapter {\n+\n+        private final Method getObjectInputFilterMethod;\n+        private final Method setObjectInputFilterMethod;\n+        private final Method createFilterMethod;\n+\n+        private OnJava6To8(Method getObjectInputFilterMethod, Method setObjectInputFilterMethod, Method createFilterMethod) {\n+            this.getObjectInputFilterMethod = getObjectInputFilterMethod;\n+            this.setObjectInputFilterMethod = setObjectInputFilterMethod;\n+            this.createFilterMethod = createFilterMethod;\n+        }\n+\n+        public Object getObjectInputFilter(ObjectInputStream ois) {\n+            try {\n+                return getObjectInputFilterMethod.invoke(null, ois);\n+            } catch (IllegalAccessException | InvocationTargetException e) {\n+                LOG.warn(\"Could not read ObjectFilter from ObjectInputStream: \" + e.getMessage());\n+                return null;\n+            }\n+        }\n+\n+        public void setObjectInputFilter(ObjectInputStream ois, String filterPattern) {\n+            try {\n+                Object objectFilter = createFilterMethod.invoke(null, filterPattern);\n+                setObjectInputFilterMethod.invoke(null, ois, objectFilter);\n+            } catch (IllegalAccessException | InvocationTargetException e) {\n+                LOG.warn(\"Could not set ObjectFilter: \" + e.getMessage());\n+            }\n+        }\n+    }\n+\n+\n+    static class EmptyFilterAdapter implements SerializationFilterAdapter {\n+\n+        @Override\n+        public Object getObjectInputFilter(ObjectInputStream ois) {\n+            return null;\n+        }\n+\n+        @Override\n+        public void setObjectInputFilter(ObjectInputStream ois, String filterPattern) {\n+\n+        }\n+\n+    }\n+\n+\n+    // If codebase moves to Java 9+ could use Java 9+ classes directly without reflection and keep the old variant with reflection\n+    static class OnJavaAfter8 implements SerializationFilterAdapter {\n+\n+        private static final Method getObjectInputFilterMethod;\n+        private static final Method setObjectInputFilterMethod;\n+        private static final Method createFilterMethod;\n+\n+        static {\n+\n+            Method getObjectInputFilter;\n+            Method setObjectInputFilter;\n+            Method createFilter;\n+\n+            try {\n+                ClassLoader cl = Thread.currentThread().getContextClassLoader();\n+                Class<?> objectInputFilterClass = cl.loadClass(\"java.io.ObjectInputFilter\");\n+                Class<?> objectInputFilterConfigClass = cl.loadClass(\"java.io.ObjectInputFilter$Config\");\n+                Class<?> objectInputStreamClass = cl.loadClass(\"java.io.ObjectInputStream\");\n+                getObjectInputFilter = objectInputStreamClass.getDeclaredMethod(\"getObjectInputFilter\");\n+                setObjectInputFilter = objectInputStreamClass.getDeclaredMethod(\"setObjectInputFilter\", objectInputFilterClass);\n+                createFilter = objectInputFilterConfigClass.getDeclaredMethod(\"createFilter\", String.class);\n+                LOG.info(\"Using OnJavaAfter8 serialization filter adapter\");\n+            } catch (ClassNotFoundException | NoSuchMethodException e) {\n+                LOG.warn(\"Could not configure SerializationFilterAdapter: \" + e.getMessage());\n+                getObjectInputFilter = null;\n+                setObjectInputFilter = null;\n+                createFilter = null;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxODE0OA=="}, "originalCommit": {"oid": "6b229637757e5686518eb0a1ef32af1ffd2fdbb5"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODQ4MDI0OnYy", "diffSide": "RIGHT", "path": "adapters/oidc/tomcat/tomcat-core/src/main/java/org/keycloak/adapters/tomcat/CatalinaSessionTokenStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxOTo1ODozOFrOGerRkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODoyNzoxOVrOGe7N3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxOTQ3Mg==", "bodyText": "Just thinking if we shouldn't add a similar method to OIDCFilterSessionStore.SerializableKeycloakAccount, which is an exact copy of this class.", "url": "https://github.com/keycloak/keycloak/pull/7138#discussion_r434819472", "createdAt": "2020-06-03T19:58:38Z", "author": {"login": "sguilhen"}, "path": "adapters/oidc/tomcat/tomcat-core/src/main/java/org/keycloak/adapters/tomcat/CatalinaSessionTokenStore.java", "diffHunk": "@@ -163,6 +167,17 @@ public Principal getPrincipal() {\n         public RefreshableKeycloakSecurityContext getKeycloakSecurityContext() {\n             return securityContext;\n         }\n+\n+        private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+            DelegatingSerializationFilter.builder()\n+                    .addAllowedClass(CatalinaSessionTokenStore.SerializableKeycloakAccount.class)\n+                    .addAllowedClass(RefreshableKeycloakSecurityContext.class)\n+                    .addAllowedClass(KeycloakSecurityContext.class)\n+                    .addAllowedClass(KeycloakPrincipal.class)\n+                    .setFilter(in);\n+\n+            in.defaultReadObject();\n+        }\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b229637757e5686518eb0a1ef32af1ffd2fdbb5"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4MDY2OA==", "bodyText": "Yes, done. Also added OIDCFilterAdapterClusterTest as we did not have the test for OIDC filter and adapter clustering.", "url": "https://github.com/keycloak/keycloak/pull/7138#discussion_r435080668", "createdAt": "2020-06-04T08:27:19Z", "author": {"login": "mposolda"}, "path": "adapters/oidc/tomcat/tomcat-core/src/main/java/org/keycloak/adapters/tomcat/CatalinaSessionTokenStore.java", "diffHunk": "@@ -163,6 +167,17 @@ public Principal getPrincipal() {\n         public RefreshableKeycloakSecurityContext getKeycloakSecurityContext() {\n             return securityContext;\n         }\n+\n+        private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+            DelegatingSerializationFilter.builder()\n+                    .addAllowedClass(CatalinaSessionTokenStore.SerializableKeycloakAccount.class)\n+                    .addAllowedClass(RefreshableKeycloakSecurityContext.class)\n+                    .addAllowedClass(KeycloakSecurityContext.class)\n+                    .addAllowedClass(KeycloakPrincipal.class)\n+                    .setFilter(in);\n+\n+            in.defaultReadObject();\n+        }\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxOTQ3Mg=="}, "originalCommit": {"oid": "6b229637757e5686518eb0a1ef32af1ffd2fdbb5"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODQ4ODAyOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/org/keycloak/common/util/DelegatingSerializationFilter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDowMToxNFrOGerWmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODoyNTo0MlrOGe7J5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyMDc2Mg==", "bodyText": "Missing license header", "url": "https://github.com/keycloak/keycloak/pull/7138#discussion_r434820762", "createdAt": "2020-06-03T20:01:14Z", "author": {"login": "sguilhen"}, "path": "common/src/main/java/org/keycloak/common/util/DelegatingSerializationFilter.java", "diffHunk": "@@ -0,0 +1,215 @@\n+package org.keycloak.common.util;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b229637757e5686518eb0a1ef32af1ffd2fdbb5"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA3OTY1NA==", "bodyText": "Should be fine now", "url": "https://github.com/keycloak/keycloak/pull/7138#discussion_r435079654", "createdAt": "2020-06-04T08:25:42Z", "author": {"login": "mposolda"}, "path": "common/src/main/java/org/keycloak/common/util/DelegatingSerializationFilter.java", "diffHunk": "@@ -0,0 +1,215 @@\n+package org.keycloak.common.util;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyMDc2Mg=="}, "originalCommit": {"oid": "6b229637757e5686518eb0a1ef32af1ffd2fdbb5"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3527, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}