{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5NzQ1MjU2", "number": 7600, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMToxODozN1rOE4HZXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMToxODozN1rOE4HZXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3Mjc2ODk1OnYy", "diffSide": "RIGHT", "path": "quarkus/deployment/src/test/java/test/org/keycloak/quarkus/services/health/KeycloakReadyHealthCheckTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMToxODozN1rOHx2M1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMjo0OTowM1rOHytE_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzMDI5Mw==", "bodyText": "I believe one more test - simulate that a database is down and check if the Readiness Probe returns a failure.\nI believe the easiest way to do it is to modify the way we wire the Agroal bean. Maybe we should create an adapter there (e.g. DelegatingDatasource) and inject a mock during testing there.", "url": "https://github.com/keycloak/keycloak/pull/7600#discussion_r522030293", "createdAt": "2020-11-12T11:18:37Z", "author": {"login": "slaskawi"}, "path": "quarkus/deployment/src/test/java/test/org/keycloak/quarkus/services/health/KeycloakReadyHealthCheckTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package test.org.keycloak.quarkus.services.health;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+import org.hamcrest.Matchers;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import java.sql.SQLException;\n+\n+import static io.restassured.RestAssured.given;\n+\n+public class KeycloakReadyHealthCheckTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest test = new QuarkusUnitTest()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d194d34b9aaf1ad3f83991847b80daca2efbd0e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI5Nzc4NA==", "bodyText": "You should be able to inject the datasource bean and then try to call close (or reset metrics). I did a quick test here and it seems to work.\nYou may want a separate test for down status though.", "url": "https://github.com/keycloak/keycloak/pull/7600#discussion_r522297784", "createdAt": "2020-11-12T17:47:01Z", "author": {"login": "pedroigor"}, "path": "quarkus/deployment/src/test/java/test/org/keycloak/quarkus/services/health/KeycloakReadyHealthCheckTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package test.org.keycloak.quarkus.services.health;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+import org.hamcrest.Matchers;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import java.sql.SQLException;\n+\n+import static io.restassured.RestAssured.given;\n+\n+public class KeycloakReadyHealthCheckTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest test = new QuarkusUnitTest()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzMDI5Mw=="}, "originalCommit": {"oid": "4d194d34b9aaf1ad3f83991847b80daca2efbd0e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0NDMyMA==", "bodyText": "Clever idea @pedroigor ! Thanks for the hint.\nTogether with @miquelsi we agreed to see if we could somehow inject a mock there to manipulate the metrics. This would allow us to test all crazy scenarios in the future. If that won't work - we agreed to try killing the H2 DB (essentially calling #close() as you suggested). We'll see how it goes.", "url": "https://github.com/keycloak/keycloak/pull/7600#discussion_r522344320", "createdAt": "2020-11-12T19:01:51Z", "author": {"login": "slaskawi"}, "path": "quarkus/deployment/src/test/java/test/org/keycloak/quarkus/services/health/KeycloakReadyHealthCheckTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package test.org.keycloak.quarkus.services.health;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+import org.hamcrest.Matchers;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import java.sql.SQLException;\n+\n+import static io.restassured.RestAssured.given;\n+\n+public class KeycloakReadyHealthCheckTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest test = new QuarkusUnitTest()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzMDI5Mw=="}, "originalCommit": {"oid": "4d194d34b9aaf1ad3f83991847b80daca2efbd0e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM2ODI1MQ==", "bodyText": "@slaskawi It may be an option to not boot the application at all (considering we have integration already) for more advanced scenarios so you can just set some impl directly to the health check class. It should help with crazy scenarios and much easier to implement.\nAdding a bean to just allow testing seems too much because at runtime we only need the real datasource. You may also consider @Priority annotation. Not sure if it may help here.", "url": "https://github.com/keycloak/keycloak/pull/7600#discussion_r522368251", "createdAt": "2020-11-12T19:31:29Z", "author": {"login": "pedroigor"}, "path": "quarkus/deployment/src/test/java/test/org/keycloak/quarkus/services/health/KeycloakReadyHealthCheckTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package test.org.keycloak.quarkus.services.health;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+import org.hamcrest.Matchers;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import java.sql.SQLException;\n+\n+import static io.restassured.RestAssured.given;\n+\n+public class KeycloakReadyHealthCheckTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest test = new QuarkusUnitTest()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzMDI5Mw=="}, "originalCommit": {"oid": "4d194d34b9aaf1ad3f83991847b80daca2efbd0e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkyOTQwNw==", "bodyText": "Thanks for the tip @pedroigor. I've added a new test class for negative cases.", "url": "https://github.com/keycloak/keycloak/pull/7600#discussion_r522929407", "createdAt": "2020-11-13T12:49:03Z", "author": {"login": "miquelsi"}, "path": "quarkus/deployment/src/test/java/test/org/keycloak/quarkus/services/health/KeycloakReadyHealthCheckTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package test.org.keycloak.quarkus.services.health;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+import org.hamcrest.Matchers;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import java.sql.SQLException;\n+\n+import static io.restassured.RestAssured.given;\n+\n+public class KeycloakReadyHealthCheckTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest test = new QuarkusUnitTest()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzMDI5Mw=="}, "originalCommit": {"oid": "4d194d34b9aaf1ad3f83991847b80daca2efbd0e"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3190, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}