{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1OTQ2NzIx", "number": 7290, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjozMDo0N1rOETO04A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMzo0NToyMlrOETQs2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjAxMzEyOnYy", "diffSide": "RIGHT", "path": "distribution/server-x/src/main/content/bin/kc.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjozMDo0N1rOG42MQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzozNjo0MlrOG5DADw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI2MTMxMw==", "bodyText": "Is this change correct? Under https://github.com/keycloak/keycloak-community/blob/master/design/keycloak.x/configuration.md#installation-layout I see keycloak.config-file .", "url": "https://github.com/keycloak/keycloak/pull/7290#discussion_r462261313", "createdAt": "2020-07-29T12:30:47Z", "author": {"login": "mposolda"}, "path": "distribution/server-x/src/main/content/bin/kc.sh", "diffHunk": "@@ -41,7 +42,11 @@ do\n           fi\n           ;;\n       --config-file)\n-          SERVER_OPTS=\"$SERVER_OPTS -Dkeycloak.config.file=$2\"\n+          SERVER_OPTS=\"$SERVER_OPTS -Dkc.config.file=$2\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d261ab7053e3512d7f7685d7ffc9ed89a14b5d9c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3MTE4Mw==", "bodyText": "This is something we need to discuss because there we also say that ENV vars should be prefixed with KC_, so to keep consistency across both ENV and PROP I decided to use the kc prefix and drop keycloak.\nIt is a good point and I'm good with both approaches, although kc is shorter.", "url": "https://github.com/keycloak/keycloak/pull/7290#discussion_r462471183", "createdAt": "2020-07-29T17:36:42Z", "author": {"login": "pedroigor"}, "path": "distribution/server-x/src/main/content/bin/kc.sh", "diffHunk": "@@ -41,7 +42,11 @@ do\n           fi\n           ;;\n       --config-file)\n-          SERVER_OPTS=\"$SERVER_OPTS -Dkeycloak.config.file=$2\"\n+          SERVER_OPTS=\"$SERVER_OPTS -Dkc.config.file=$2\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI2MTMxMw=="}, "originalCommit": {"oid": "d261ab7053e3512d7f7685d7ffc9ed89a14b5d9c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjAxMzkxOnYy", "diffSide": "RIGHT", "path": "distribution/server-x/src/main/content/bin/kc.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjozMTowMFrOG42Muw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjozMTowMFrOG42Muw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI2MTQzNQ==", "bodyText": "Similar to the comment related to keycloak.config-file", "url": "https://github.com/keycloak/keycloak/pull/7290#discussion_r462261435", "createdAt": "2020-07-29T12:31:00Z", "author": {"login": "mposolda"}, "path": "distribution/server-x/src/main/content/bin/kc.sh", "diffHunk": "@@ -41,7 +42,11 @@ do\n           fi\n           ;;\n       --config-file)\n-          SERVER_OPTS=\"$SERVER_OPTS -Dkeycloak.config.file=$2\"\n+          SERVER_OPTS=\"$SERVER_OPTS -Dkc.config.file=$2\"\n+          shift\n+          ;;\n+      --profile)\n+          SERVER_OPTS=\"$SERVER_OPTS -Dkc.profile=$2\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d261ab7053e3512d7f7685d7ffc9ed89a14b5d9c"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjAyNDgxOnYy", "diffSide": "RIGHT", "path": "distribution/server-x/src/main/content/bin/kc.sh", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjozMzo1NVrOG42TPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwOTo1MjozMVrOG5cMmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI2MzEwMw==", "bodyText": "The \"keycloak.config.args\" is also not mentioned anywhere under https://github.com/keycloak/keycloak-community/blob/master/design/keycloak.x/configuration.md, but I suppose you guys agree on this before?", "url": "https://github.com/keycloak/keycloak/pull/7290#discussion_r462263103", "createdAt": "2020-07-29T12:33:55Z", "author": {"login": "mposolda"}, "path": "distribution/server-x/src/main/content/bin/kc.sh", "diffHunk": "@@ -77,10 +86,11 @@ if [ \"$DEBUG_MODE\" = \"true\" ]; then\n fi\n \n CLASSPATH_OPTS=\"$DIRNAME/../lib/quarkus-run.jar:$DIRNAME/../lib/main/*\"\n+CONFIG_ARGS=\"-Dkeycloak.config.args=${CONFIG_ARGS#?}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d261ab7053e3512d7f7685d7ffc9ed89a14b5d9c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3MTc5NQ==", "bodyText": "This is an implementation detail so that we can handle arguments without necessarily implementing code in scripts. It will be processed and transformed internally to the corresponding properties.", "url": "https://github.com/keycloak/keycloak/pull/7290#discussion_r462471795", "createdAt": "2020-07-29T17:37:42Z", "author": {"login": "pedroigor"}, "path": "distribution/server-x/src/main/content/bin/kc.sh", "diffHunk": "@@ -77,10 +86,11 @@ if [ \"$DEBUG_MODE\" = \"true\" ]; then\n fi\n \n CLASSPATH_OPTS=\"$DIRNAME/../lib/quarkus-run.jar:$DIRNAME/../lib/main/*\"\n+CONFIG_ARGS=\"-Dkeycloak.config.args=${CONFIG_ARGS#?}\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI2MzEwMw=="}, "originalCommit": {"oid": "d261ab7053e3512d7f7685d7ffc9ed89a14b5d9c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg4Mzk5Mg==", "bodyText": "Yes, I see. I was wondering that this is not exposed to the end users. Thanks!", "url": "https://github.com/keycloak/keycloak/pull/7290#discussion_r462883992", "createdAt": "2020-07-30T09:52:31Z", "author": {"login": "mposolda"}, "path": "distribution/server-x/src/main/content/bin/kc.sh", "diffHunk": "@@ -77,10 +86,11 @@ if [ \"$DEBUG_MODE\" = \"true\" ]; then\n fi\n \n CLASSPATH_OPTS=\"$DIRNAME/../lib/quarkus-run.jar:$DIRNAME/../lib/main/*\"\n+CONFIG_ARGS=\"-Dkeycloak.config.args=${CONFIG_ARGS#?}\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI2MzEwMw=="}, "originalCommit": {"oid": "d261ab7053e3512d7f7685d7ffc9ed89a14b5d9c"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjAzMjQ4OnYy", "diffSide": "RIGHT", "path": "distribution/server-x/src/main/content/conf/keycloak.properties", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjozNjowNVrOG42X2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzozOTo0MVrOG5DG1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI2NDI4Mg==", "bodyText": "This is bit different than the proposed value here https://github.com/keycloak/keycloak-community/blob/master/design/keycloak.x/configuration.md#database, but I suppose this is implementation detail? Having \"keycloakdb\" is probably better, so maybe alternative is to fix the specification page rather than this PR?", "url": "https://github.com/keycloak/keycloak/pull/7290#discussion_r462264282", "createdAt": "2020-07-29T12:36:05Z", "author": {"login": "mposolda"}, "path": "distribution/server-x/src/main/content/conf/keycloak.properties", "diffHunk": "@@ -1,7 +1,5 @@\n # Default Non-Production Grade Datasource\n-hibernate-orm.dialect=org.hibernate.dialect.H2Dialect\n-datasource.driver=org.h2.jdbcx.JdbcDataSource\n-datasource.url = jdbc:h2:file:${keycloak.home.dir}/data/keycloakdb;;AUTO_SERVER=TRUE\n-datasource.username = sa\n-datasource.password = keycloak\n-datasource.jdbc.transactions=xa\n\\ No newline at end of file\n+database.vendor=h2\n+database.url = jdbc:h2:file:${keycloak.home.dir}/data/keycloakdb;;AUTO_SERVER=TRUE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d261ab7053e3512d7f7685d7ffc9ed89a14b5d9c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3MjkxOA==", "bodyText": "Another point of discussion, the distribution should default to h2 == file. But nothing stop us to also have a database.vendor == h2-mem.", "url": "https://github.com/keycloak/keycloak/pull/7290#discussion_r462472918", "createdAt": "2020-07-29T17:39:41Z", "author": {"login": "pedroigor"}, "path": "distribution/server-x/src/main/content/conf/keycloak.properties", "diffHunk": "@@ -1,7 +1,5 @@\n # Default Non-Production Grade Datasource\n-hibernate-orm.dialect=org.hibernate.dialect.H2Dialect\n-datasource.driver=org.h2.jdbcx.JdbcDataSource\n-datasource.url = jdbc:h2:file:${keycloak.home.dir}/data/keycloakdb;;AUTO_SERVER=TRUE\n-datasource.username = sa\n-datasource.password = keycloak\n-datasource.jdbc.transactions=xa\n\\ No newline at end of file\n+database.vendor=h2\n+database.url = jdbc:h2:file:${keycloak.home.dir}/data/keycloakdb;;AUTO_SERVER=TRUE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI2NDI4Mg=="}, "originalCommit": {"oid": "d261ab7053e3512d7f7685d7ffc9ed89a14b5d9c"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjA0MTUzOnYy", "diffSide": "RIGHT", "path": "quarkus/README.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjozODo0NlrOG42deg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwOTo1OTo1OVrOG5ccsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI2NTcyMg==", "bodyText": "Is this instructions up-to-date? I am seeing:\n\nhttps://github.com/keycloak/keycloak-community/blob/master/design/keycloak.x/configuration.md#quarkus-options mentions that we may not expose quarkus options directly\nhttps://github.com/keycloak/keycloak-community/blob/master/design/keycloak.x/configuration.md#profile mentions only \"profile.dev\" without the \"quarkus\" prefix.", "url": "https://github.com/keycloak/keycloak/pull/7290#discussion_r462265722", "createdAt": "2020-07-29T12:38:46Z", "author": {"login": "mposolda"}, "path": "quarkus/README.md", "diffHunk": "@@ -32,8 +32,11 @@ The distribution packages (ZIP and TAR) should be available at [../distribution/\n \n ## Running\n \n-    java -jar server/target/lib/quarkus-run.jar\n-    \n+By default, the HTTP port is disabled and you need to provide the key material to configure HTTPS. If you want to enable\n+the HTTP port, run the server in development mode as follows:\n+\n+    java -Dquarkus.profile=dev -jar server/target/lib/quarkus-run.jar", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d261ab7053e3512d7f7685d7ffc9ed89a14b5d9c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3NDA5OQ==", "bodyText": "It is not, will fix it. It should be kc.profile=dev.\nAnother point of discussion is if we should just go for profile={value} instead of profile.dev. The reason being it should just be like any other property.\nAt it stands now, you are going to pass the profile like that: kc.sh --profile dev", "url": "https://github.com/keycloak/keycloak/pull/7290#discussion_r462474099", "createdAt": "2020-07-29T17:41:29Z", "author": {"login": "pedroigor"}, "path": "quarkus/README.md", "diffHunk": "@@ -32,8 +32,11 @@ The distribution packages (ZIP and TAR) should be available at [../distribution/\n \n ## Running\n \n-    java -jar server/target/lib/quarkus-run.jar\n-    \n+By default, the HTTP port is disabled and you need to provide the key material to configure HTTPS. If you want to enable\n+the HTTP port, run the server in development mode as follows:\n+\n+    java -Dquarkus.profile=dev -jar server/target/lib/quarkus-run.jar", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI2NTcyMg=="}, "originalCommit": {"oid": "d261ab7053e3512d7f7685d7ffc9ed89a14b5d9c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg4ODExMg==", "bodyText": "+1 for \"kc.profile=dev\"", "url": "https://github.com/keycloak/keycloak/pull/7290#discussion_r462888112", "createdAt": "2020-07-30T09:59:59Z", "author": {"login": "mposolda"}, "path": "quarkus/README.md", "diffHunk": "@@ -32,8 +32,11 @@ The distribution packages (ZIP and TAR) should be available at [../distribution/\n \n ## Running\n \n-    java -jar server/target/lib/quarkus-run.jar\n-    \n+By default, the HTTP port is disabled and you need to provide the key material to configure HTTPS. If you want to enable\n+the HTTP port, run the server in development mode as follows:\n+\n+    java -Dquarkus.profile=dev -jar server/target/lib/quarkus-run.jar", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI2NTcyMg=="}, "originalCommit": {"oid": "d261ab7053e3512d7f7685d7ffc9ed89a14b5d9c"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjA1NjA2OnYy", "diffSide": "RIGHT", "path": "quarkus/deployment/src/main/java/org/keycloak/quarkus/deployment/Providers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjo0Mjo0MlrOG42mTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzo0MjozN1rOG5DOPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI2Nzk4Mg==", "bodyText": "The \"providers\" field is again not mentioned anywhere under https://github.com/keycloak/keycloak-community/blob/master/design/keycloak.x/configuration.md#spis-and-provider-configuration , but I suppose you guys agree on this?", "url": "https://github.com/keycloak/keycloak/pull/7290#discussion_r462267982", "createdAt": "2020-07-29T12:42:42Z", "author": {"login": "mposolda"}, "path": "quarkus/deployment/src/main/java/org/keycloak/quarkus/deployment/Providers.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.keycloak.quarkus.deployment;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.keycloak.Config;\n+import org.keycloak.connections.jpa.DefaultJpaConnectionProviderFactory;\n+import org.keycloak.connections.jpa.updater.liquibase.LiquibaseJpaUpdaterProviderFactory;\n+import org.keycloak.connections.jpa.updater.liquibase.conn.DefaultLiquibaseConnectionProvider;\n+import org.keycloak.provider.KeycloakDeploymentInfo;\n+import org.keycloak.provider.ProviderFactory;\n+import org.keycloak.provider.ProviderManager;\n+import org.keycloak.provider.Spi;\n+import org.keycloak.transaction.JBossJtaTransactionManagerLookup;\n+\n+public final class Providers {\n+\n+    public static Map<Spi, Set<Class<? extends ProviderFactory>>> load() {\n+        ProviderManager pm = new ProviderManager(\n+                KeycloakDeploymentInfo.create().services(), new BuildClassLoader(),\n+                Config.scope().getArray(\"providers\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3576b1345582b877a072f5394ad5ed0a878f2d5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3NDgxNA==", "bodyText": "As mentioned in the description, provider configuration is not yet implemented. This code is how it stands today and I think we don't even need that part.", "url": "https://github.com/keycloak/keycloak/pull/7290#discussion_r462474814", "createdAt": "2020-07-29T17:42:37Z", "author": {"login": "pedroigor"}, "path": "quarkus/deployment/src/main/java/org/keycloak/quarkus/deployment/Providers.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.keycloak.quarkus.deployment;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.keycloak.Config;\n+import org.keycloak.connections.jpa.DefaultJpaConnectionProviderFactory;\n+import org.keycloak.connections.jpa.updater.liquibase.LiquibaseJpaUpdaterProviderFactory;\n+import org.keycloak.connections.jpa.updater.liquibase.conn.DefaultLiquibaseConnectionProvider;\n+import org.keycloak.provider.KeycloakDeploymentInfo;\n+import org.keycloak.provider.ProviderFactory;\n+import org.keycloak.provider.ProviderManager;\n+import org.keycloak.provider.Spi;\n+import org.keycloak.transaction.JBossJtaTransactionManagerLookup;\n+\n+public final class Providers {\n+\n+    public static Map<Spi, Set<Class<? extends ProviderFactory>>> load() {\n+        ProviderManager pm = new ProviderManager(\n+                KeycloakDeploymentInfo.create().services(), new BuildClassLoader(),\n+                Config.scope().getArray(\"providers\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI2Nzk4Mg=="}, "originalCommit": {"oid": "b3576b1345582b877a072f5394ad5ed0a878f2d5"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjA4NDk1OnYy", "diffSide": "RIGHT", "path": "quarkus/runtime/src/main/java/org/keycloak/configuration/KeycloakConfigSourceProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjo1MDoxM1rOG423rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDowMDozNVrOG5cd_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI3MjQyOQ==", "bodyText": "Again \"kc.profile\" and fallback to \"quarkus.profile\" is not inline with what is mentioned in the design and in the comments of this PR. Is this ok?", "url": "https://github.com/keycloak/keycloak/pull/7290#discussion_r462272429", "createdAt": "2020-07-29T12:50:13Z", "author": {"login": "mposolda"}, "path": "quarkus/runtime/src/main/java/org/keycloak/configuration/KeycloakConfigSourceProvider.java", "diffHunk": "@@ -15,28 +15,61 @@\n  * limitations under the License.\n  */\n \n-package org.keycloak.provider.quarkus;\n+package org.keycloak.configuration;\n \n import java.io.File;\n+import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.ArrayList;\n import java.util.List;\n \n+import io.quarkus.runtime.configuration.ProfileManager;\n import org.eclipse.microprofile.config.spi.ConfigSource;\n import org.eclipse.microprofile.config.spi.ConfigSourceProvider;\n import org.jboss.logging.Logger;\n \n public class KeycloakConfigSourceProvider implements ConfigSourceProvider {\n \n     private static final Logger log = Logger.getLogger(KeycloakConfigSourceProvider.class);\n-    private static final String KEYCLOAK_CONFIG_FILE_PROP = \"keycloak.config.file\";\n-    private static final String KEYCLOAK_CONFIG_FILE_ENV = \"KEYCLOAK_CONFIG_FILE\";\n \n-    @Override\n-    public Iterable<ConfigSource> getConfigSources(ClassLoader forClassLoader) {\n+    public static final String KEYCLOAK_CONFIG_FILE_ENV = \"KEYCLOAK_CONFIG_FILE\";\n+    public static final String KEYCLOAK_CONFIG_FILE_PROP = MicroProfileConfigProvider.NS_KEYCLOAK + \".config.file\";\n+    private static final List<ConfigSource> CONFIG_SOURCES = new ArrayList<>();\n+    \n+    // we initialize in a static block to avoid discovering the config sources multiple times when starting the application\n+    static {\n+        initializeSources();\n+    }\n+\n+    private static void initializeSources() {\n+        String profile = System.getProperty(\"kc.profile\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3576b1345582b877a072f5394ad5ed0a878f2d5"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3NTQ3Ng==", "bodyText": "We are not really dropping Quarkus specific configuration but wrapping it and adding our own. So we should still support quarkus.profile.", "url": "https://github.com/keycloak/keycloak/pull/7290#discussion_r462475476", "createdAt": "2020-07-29T17:43:41Z", "author": {"login": "pedroigor"}, "path": "quarkus/runtime/src/main/java/org/keycloak/configuration/KeycloakConfigSourceProvider.java", "diffHunk": "@@ -15,28 +15,61 @@\n  * limitations under the License.\n  */\n \n-package org.keycloak.provider.quarkus;\n+package org.keycloak.configuration;\n \n import java.io.File;\n+import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.ArrayList;\n import java.util.List;\n \n+import io.quarkus.runtime.configuration.ProfileManager;\n import org.eclipse.microprofile.config.spi.ConfigSource;\n import org.eclipse.microprofile.config.spi.ConfigSourceProvider;\n import org.jboss.logging.Logger;\n \n public class KeycloakConfigSourceProvider implements ConfigSourceProvider {\n \n     private static final Logger log = Logger.getLogger(KeycloakConfigSourceProvider.class);\n-    private static final String KEYCLOAK_CONFIG_FILE_PROP = \"keycloak.config.file\";\n-    private static final String KEYCLOAK_CONFIG_FILE_ENV = \"KEYCLOAK_CONFIG_FILE\";\n \n-    @Override\n-    public Iterable<ConfigSource> getConfigSources(ClassLoader forClassLoader) {\n+    public static final String KEYCLOAK_CONFIG_FILE_ENV = \"KEYCLOAK_CONFIG_FILE\";\n+    public static final String KEYCLOAK_CONFIG_FILE_PROP = MicroProfileConfigProvider.NS_KEYCLOAK + \".config.file\";\n+    private static final List<ConfigSource> CONFIG_SOURCES = new ArrayList<>();\n+    \n+    // we initialize in a static block to avoid discovering the config sources multiple times when starting the application\n+    static {\n+        initializeSources();\n+    }\n+\n+    private static void initializeSources() {\n+        String profile = System.getProperty(\"kc.profile\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI3MjQyOQ=="}, "originalCommit": {"oid": "b3576b1345582b877a072f5394ad5ed0a878f2d5"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg4ODQ0Nw==", "bodyText": "Ok, Thanks", "url": "https://github.com/keycloak/keycloak/pull/7290#discussion_r462888447", "createdAt": "2020-07-30T10:00:35Z", "author": {"login": "mposolda"}, "path": "quarkus/runtime/src/main/java/org/keycloak/configuration/KeycloakConfigSourceProvider.java", "diffHunk": "@@ -15,28 +15,61 @@\n  * limitations under the License.\n  */\n \n-package org.keycloak.provider.quarkus;\n+package org.keycloak.configuration;\n \n import java.io.File;\n+import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.ArrayList;\n import java.util.List;\n \n+import io.quarkus.runtime.configuration.ProfileManager;\n import org.eclipse.microprofile.config.spi.ConfigSource;\n import org.eclipse.microprofile.config.spi.ConfigSourceProvider;\n import org.jboss.logging.Logger;\n \n public class KeycloakConfigSourceProvider implements ConfigSourceProvider {\n \n     private static final Logger log = Logger.getLogger(KeycloakConfigSourceProvider.class);\n-    private static final String KEYCLOAK_CONFIG_FILE_PROP = \"keycloak.config.file\";\n-    private static final String KEYCLOAK_CONFIG_FILE_ENV = \"KEYCLOAK_CONFIG_FILE\";\n \n-    @Override\n-    public Iterable<ConfigSource> getConfigSources(ClassLoader forClassLoader) {\n+    public static final String KEYCLOAK_CONFIG_FILE_ENV = \"KEYCLOAK_CONFIG_FILE\";\n+    public static final String KEYCLOAK_CONFIG_FILE_PROP = MicroProfileConfigProvider.NS_KEYCLOAK + \".config.file\";\n+    private static final List<ConfigSource> CONFIG_SOURCES = new ArrayList<>();\n+    \n+    // we initialize in a static block to avoid discovering the config sources multiple times when starting the application\n+    static {\n+        initializeSources();\n+    }\n+\n+    private static void initializeSources() {\n+        String profile = System.getProperty(\"kc.profile\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI3MjQyOQ=="}, "originalCommit": {"oid": "b3576b1345582b877a072f5394ad5ed0a878f2d5"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjI5NzMxOnYy", "diffSide": "RIGHT", "path": "quarkus/runtime/src/test/java/org/keycloak/provider/quarkus/ConfigurationTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMzo0MDoxNFrOG447Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDowMToyNVrOG5cfkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMwNjEwNw==", "bodyText": "Will this work for various java versions etc? I found this https://stackoverflow.com/questions/8168884/how-to-test-code-dependent-on-environment-variables-using-junit and I wonder if its better alternative?", "url": "https://github.com/keycloak/keycloak/pull/7290#discussion_r462306107", "createdAt": "2020-07-29T13:40:14Z", "author": {"login": "mposolda"}, "path": "quarkus/runtime/src/test/java/org/keycloak/provider/quarkus/ConfigurationTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.provider.quarkus;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.lang.reflect.Field;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.smallrye.config.SmallRyeConfig;\n+import org.eclipse.microprofile.config.ConfigProvider;\n+import org.eclipse.microprofile.config.spi.ConfigProviderResolver;\n+import org.junit.After;\n+import org.junit.Test;\n+import org.keycloak.Config;\n+import org.keycloak.configuration.KeycloakConfigSourceProvider;\n+import org.keycloak.configuration.MicroProfileConfigProvider;\n+\n+import io.quarkus.runtime.configuration.ConfigUtils;\n+import io.smallrye.config.SmallRyeConfigProviderResolver;\n+\n+public class ConfigurationTest {\n+\n+    private static final Properties SYSTEM_PROPERTIES = (Properties) System.getProperties().clone();\n+    private static final Map<String, String> ENVIRONMENT_VARIABLES = new HashMap<>(System.getenv());\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static void putEnvVar(String name, String value) {\n+        Map<String, String> env = System.getenv();\n+        Field field = null;\n+        try {\n+            field = env.getClass().getDeclaredField(\"m\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dfb9bd92512a0131e0ddc0090f278e10f85902a"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMxNTY5Nw==", "bodyText": "On the other hand, I guess we may not want to introduce dependency on another library even for tests? Maybe just inspire from it or just go with you what you have (if you know it will work in various java versions we need to support).", "url": "https://github.com/keycloak/keycloak/pull/7290#discussion_r462315697", "createdAt": "2020-07-29T13:53:03Z", "author": {"login": "mposolda"}, "path": "quarkus/runtime/src/test/java/org/keycloak/provider/quarkus/ConfigurationTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.provider.quarkus;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.lang.reflect.Field;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.smallrye.config.SmallRyeConfig;\n+import org.eclipse.microprofile.config.ConfigProvider;\n+import org.eclipse.microprofile.config.spi.ConfigProviderResolver;\n+import org.junit.After;\n+import org.junit.Test;\n+import org.keycloak.Config;\n+import org.keycloak.configuration.KeycloakConfigSourceProvider;\n+import org.keycloak.configuration.MicroProfileConfigProvider;\n+\n+import io.quarkus.runtime.configuration.ConfigUtils;\n+import io.smallrye.config.SmallRyeConfigProviderResolver;\n+\n+public class ConfigurationTest {\n+\n+    private static final Properties SYSTEM_PROPERTIES = (Properties) System.getProperties().clone();\n+    private static final Map<String, String> ENVIRONMENT_VARIABLES = new HashMap<>(System.getenv());\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static void putEnvVar(String name, String value) {\n+        Map<String, String> env = System.getenv();\n+        Field field = null;\n+        try {\n+            field = env.getClass().getDeclaredField(\"m\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMwNjEwNw=="}, "originalCommit": {"oid": "1dfb9bd92512a0131e0ddc0090f278e10f85902a"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3NTcyNg==", "bodyText": "Yeah, for now it works fine. I did not want to introduce another lib.", "url": "https://github.com/keycloak/keycloak/pull/7290#discussion_r462475726", "createdAt": "2020-07-29T17:44:05Z", "author": {"login": "pedroigor"}, "path": "quarkus/runtime/src/test/java/org/keycloak/provider/quarkus/ConfigurationTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.provider.quarkus;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.lang.reflect.Field;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.smallrye.config.SmallRyeConfig;\n+import org.eclipse.microprofile.config.ConfigProvider;\n+import org.eclipse.microprofile.config.spi.ConfigProviderResolver;\n+import org.junit.After;\n+import org.junit.Test;\n+import org.keycloak.Config;\n+import org.keycloak.configuration.KeycloakConfigSourceProvider;\n+import org.keycloak.configuration.MicroProfileConfigProvider;\n+\n+import io.quarkus.runtime.configuration.ConfigUtils;\n+import io.smallrye.config.SmallRyeConfigProviderResolver;\n+\n+public class ConfigurationTest {\n+\n+    private static final Properties SYSTEM_PROPERTIES = (Properties) System.getProperties().clone();\n+    private static final Map<String, String> ENVIRONMENT_VARIABLES = new HashMap<>(System.getenv());\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static void putEnvVar(String name, String value) {\n+        Map<String, String> env = System.getenv();\n+        Field field = null;\n+        try {\n+            field = env.getClass().getDeclaredField(\"m\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMwNjEwNw=="}, "originalCommit": {"oid": "1dfb9bd92512a0131e0ddc0090f278e10f85902a"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg4ODg0OQ==", "bodyText": "Ok, that works for me. Thanks", "url": "https://github.com/keycloak/keycloak/pull/7290#discussion_r462888849", "createdAt": "2020-07-30T10:01:25Z", "author": {"login": "mposolda"}, "path": "quarkus/runtime/src/test/java/org/keycloak/provider/quarkus/ConfigurationTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates\n+ * and other contributors as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.keycloak.provider.quarkus;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.lang.reflect.Field;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.smallrye.config.SmallRyeConfig;\n+import org.eclipse.microprofile.config.ConfigProvider;\n+import org.eclipse.microprofile.config.spi.ConfigProviderResolver;\n+import org.junit.After;\n+import org.junit.Test;\n+import org.keycloak.Config;\n+import org.keycloak.configuration.KeycloakConfigSourceProvider;\n+import org.keycloak.configuration.MicroProfileConfigProvider;\n+\n+import io.quarkus.runtime.configuration.ConfigUtils;\n+import io.smallrye.config.SmallRyeConfigProviderResolver;\n+\n+public class ConfigurationTest {\n+\n+    private static final Properties SYSTEM_PROPERTIES = (Properties) System.getProperties().clone();\n+    private static final Map<String, String> ENVIRONMENT_VARIABLES = new HashMap<>(System.getenv());\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static void putEnvVar(String name, String value) {\n+        Map<String, String> env = System.getenv();\n+        Field field = null;\n+        try {\n+            field = env.getClass().getDeclaredField(\"m\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMwNjEwNw=="}, "originalCommit": {"oid": "1dfb9bd92512a0131e0ddc0090f278e10f85902a"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjMyMDI1OnYy", "diffSide": "RIGHT", "path": "testsuite/integration-arquillian/servers/auth-server/quarkus/src/main/content/conf/keycloak.properties", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMzo0NToyMlrOG45J-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDowMjoxN1rOG5chiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMwOTg4Mw==", "bodyText": "Should this be changed to \"proxy.mode\" as mentioned in https://github.com/keycloak/keycloak-community/blob/master/design/keycloak.x/configuration.md#proxy-mode .", "url": "https://github.com/keycloak/keycloak/pull/7290#discussion_r462309883", "createdAt": "2020-07-29T13:45:22Z", "author": {"login": "mposolda"}, "path": "testsuite/integration-arquillian/servers/auth-server/quarkus/src/main/content/conf/keycloak.properties", "diffHunk": "@@ -1,24 +1,20 @@\n hostname.default.frontendUrl = ${keycloak.frontendUrl:}\n \n-# Datasource\n-datasource.jdbc.transactions=xa\n-\n # H2\n-hibernate-orm.dialect=org.hibernate.dialect.H2Dialect\n-datasource.driver=org.h2.jdbcx.JdbcDataSource\n-datasource.url = jdbc:h2:file:${keycloak.home.dir}/data/keycloakdb;AUTO_SERVER=TRUE;DB_CLOSE_DELAY=-1\n-datasource.username = sa\n-datasource.password = keycloak\n+database.vendor=h2\n+database.url = jdbc:h2:file:${keycloak.home.dir}/data/keycloakdb;AUTO_SERVER=TRUE;DB_CLOSE_DELAY=-1\n+database.username = sa\n+database.password = keycloak\n \n # SSL\n-http.ssl.certificate.key-store-file=${keycloak.home.dir}/conf/keycloak.jks\n-http.ssl.certificate.key-store-password=secret\n-http.ssl.certificate.trust-store-file=${keycloak.home.dir}/conf/keycloak.truststore\n-http.ssl.certificate.trust-store-password=secret\n-http.ssl.client-auth=REQUEST\n+https.certificate.key-store-file=${keycloak.home.dir}/conf/keycloak.jks\n+https.certificate.key-store-password=secret\n+https.certificate.trust-store-file=${keycloak.home.dir}/conf/keycloak.truststore\n+https.certificate.trust-store-password=secret\n+https.client-auth=REQUEST\n \n # Proxy\n-http.proxy-address-forwarding=true\n+quarkus.http.proxy-address-forwarding=true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dfb9bd92512a0131e0ddc0090f278e10f85902a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3NTg5NA==", "bodyText": "Yes, but as stated in the description this is not implemented yet.", "url": "https://github.com/keycloak/keycloak/pull/7290#discussion_r462475894", "createdAt": "2020-07-29T17:44:22Z", "author": {"login": "pedroigor"}, "path": "testsuite/integration-arquillian/servers/auth-server/quarkus/src/main/content/conf/keycloak.properties", "diffHunk": "@@ -1,24 +1,20 @@\n hostname.default.frontendUrl = ${keycloak.frontendUrl:}\n \n-# Datasource\n-datasource.jdbc.transactions=xa\n-\n # H2\n-hibernate-orm.dialect=org.hibernate.dialect.H2Dialect\n-datasource.driver=org.h2.jdbcx.JdbcDataSource\n-datasource.url = jdbc:h2:file:${keycloak.home.dir}/data/keycloakdb;AUTO_SERVER=TRUE;DB_CLOSE_DELAY=-1\n-datasource.username = sa\n-datasource.password = keycloak\n+database.vendor=h2\n+database.url = jdbc:h2:file:${keycloak.home.dir}/data/keycloakdb;AUTO_SERVER=TRUE;DB_CLOSE_DELAY=-1\n+database.username = sa\n+database.password = keycloak\n \n # SSL\n-http.ssl.certificate.key-store-file=${keycloak.home.dir}/conf/keycloak.jks\n-http.ssl.certificate.key-store-password=secret\n-http.ssl.certificate.trust-store-file=${keycloak.home.dir}/conf/keycloak.truststore\n-http.ssl.certificate.trust-store-password=secret\n-http.ssl.client-auth=REQUEST\n+https.certificate.key-store-file=${keycloak.home.dir}/conf/keycloak.jks\n+https.certificate.key-store-password=secret\n+https.certificate.trust-store-file=${keycloak.home.dir}/conf/keycloak.truststore\n+https.certificate.trust-store-password=secret\n+https.client-auth=REQUEST\n \n # Proxy\n-http.proxy-address-forwarding=true\n+quarkus.http.proxy-address-forwarding=true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMwOTg4Mw=="}, "originalCommit": {"oid": "1dfb9bd92512a0131e0ddc0090f278e10f85902a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg4OTM1Mw==", "bodyText": "Ok", "url": "https://github.com/keycloak/keycloak/pull/7290#discussion_r462889353", "createdAt": "2020-07-30T10:02:17Z", "author": {"login": "mposolda"}, "path": "testsuite/integration-arquillian/servers/auth-server/quarkus/src/main/content/conf/keycloak.properties", "diffHunk": "@@ -1,24 +1,20 @@\n hostname.default.frontendUrl = ${keycloak.frontendUrl:}\n \n-# Datasource\n-datasource.jdbc.transactions=xa\n-\n # H2\n-hibernate-orm.dialect=org.hibernate.dialect.H2Dialect\n-datasource.driver=org.h2.jdbcx.JdbcDataSource\n-datasource.url = jdbc:h2:file:${keycloak.home.dir}/data/keycloakdb;AUTO_SERVER=TRUE;DB_CLOSE_DELAY=-1\n-datasource.username = sa\n-datasource.password = keycloak\n+database.vendor=h2\n+database.url = jdbc:h2:file:${keycloak.home.dir}/data/keycloakdb;AUTO_SERVER=TRUE;DB_CLOSE_DELAY=-1\n+database.username = sa\n+database.password = keycloak\n \n # SSL\n-http.ssl.certificate.key-store-file=${keycloak.home.dir}/conf/keycloak.jks\n-http.ssl.certificate.key-store-password=secret\n-http.ssl.certificate.trust-store-file=${keycloak.home.dir}/conf/keycloak.truststore\n-http.ssl.certificate.trust-store-password=secret\n-http.ssl.client-auth=REQUEST\n+https.certificate.key-store-file=${keycloak.home.dir}/conf/keycloak.jks\n+https.certificate.key-store-password=secret\n+https.certificate.trust-store-file=${keycloak.home.dir}/conf/keycloak.truststore\n+https.certificate.trust-store-password=secret\n+https.client-auth=REQUEST\n \n # Proxy\n-http.proxy-address-forwarding=true\n+quarkus.http.proxy-address-forwarding=true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMwOTg4Mw=="}, "originalCommit": {"oid": "1dfb9bd92512a0131e0ddc0090f278e10f85902a"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3489, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}