{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MDA2MzA2", "number": 6705, "title": "KEYCLOAK-11862 Add Sync mode option", "bodyText": "This PR introduces the sync mode option.\nTo make an initial review of the functionality and implementation strategy simpler, I only adapted the oidc frontend and did not adapt the tests (nor write new tests).\nRegarding the proposal in https://issues.redhat.com/browse/KEYCLOAK-11862?_sscc=t this PR introduces the \"legacy\", \"import\" and \"force\" mode (since the \"owner\" mode requires additions to the user model and therefore introduces further complexity, I would rather do it in a future PR). It also adapts all existing mappers to honour those flags.\nThe sync mode observes the following behaviour:\n\nOld SPI extensions will continue to work and don't need any code changes. Their behaviour in \"legacy\" mode will be exactly the same. The behaviour in \"import\" mode will be always correct while the behaviour in \"force\" mode will only be correct by default if the legacy implementation would always update\nIn order to get correct \"force\" behaviour for custom SPIs where it is not automatically correct, the authors of those SPIs only have to override one method.\nNo change to the database model (we store the sync mode in the config map).\nWhen existing IDPs get imported, everything will be set to legacy and they should work exactly as before (no config change necessary)\nNew IDPs will default to \"import\" (new mappers to \"no override\", keeping the same sync mode as the IDP)\n\nOnce the general strategy is deemed good to go, I will update the PR according to the contribution guidelines:\n\n Update all IDP frontends\n Update functional tests\n Include new functional/integration tests\n Includes documentation\n Squash to one commit", "createdAt": "2020-01-30T10:51:23Z", "url": "https://github.com/keycloak/keycloak/pull/6705", "merged": true, "mergeCommit": {"oid": "7e8018c7ca3572a5e7b0de1864a65b6745bd5bd4"}, "closed": true, "closedAt": "2020-04-24T13:54:33Z", "author": {"login": "Martin-Idel-SI"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcF1vpfgBqjMwNTE1NTA1NTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaHT_YgFqTM5ODEzMTEzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "28336e62be871c0ee23b6b7fcd92bc2c98d0f752", "author": {"user": {"login": "Martin-Idel-SI", "name": "Martin Idel"}}, "url": "https://github.com/keycloak/keycloak/commit/28336e62be871c0ee23b6b7fcd92bc2c98d0f752", "committedDate": "2020-01-30T10:37:58Z", "message": "KEYCLOAK-11862 Add Sync mode option\n\n- Store in config map in database but use as field in model\n- Expose the field in the OIDC-IDP (other IDPs to follow)\n- Write logic for import, force and legacy mode\n- Show how mappers can be updated keeping correct legacy mode\n- Show how mappers that work correctly don't have to be modified"}, "afterCommit": {"oid": "b7e1bcde21160d977ff12dd3400c04c14c7f33ce", "author": {"user": {"login": "Martin-Idel-SI", "name": "Martin Idel"}}, "url": "https://github.com/keycloak/keycloak/commit/b7e1bcde21160d977ff12dd3400c04c14c7f33ce", "committedDate": "2020-02-19T11:19:32Z", "message": "Log an error if sync mode is not supported"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b7e1bcde21160d977ff12dd3400c04c14c7f33ce", "author": {"user": {"login": "Martin-Idel-SI", "name": "Martin Idel"}}, "url": "https://github.com/keycloak/keycloak/commit/b7e1bcde21160d977ff12dd3400c04c14c7f33ce", "committedDate": "2020-02-19T11:19:32Z", "message": "Log an error if sync mode is not supported"}, "afterCommit": {"oid": "ee0add94b75266137b9ec4708586de7e30b04b1d", "author": {"user": {"login": "Martin-Idel-SI", "name": "Martin Idel"}}, "url": "https://github.com/keycloak/keycloak/commit/ee0add94b75266137b9ec4708586de7e30b04b1d", "committedDate": "2020-02-19T12:40:07Z", "message": "Log an error if sync mode is not supported"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ee0add94b75266137b9ec4708586de7e30b04b1d", "author": {"user": {"login": "Martin-Idel-SI", "name": "Martin Idel"}}, "url": "https://github.com/keycloak/keycloak/commit/ee0add94b75266137b9ec4708586de7e30b04b1d", "committedDate": "2020-02-19T12:40:07Z", "message": "Log an error if sync mode is not supported"}, "afterCommit": {"oid": "7df70530fc19825320325838dc178afd59ed229f", "author": {"user": {"login": "Martin-Idel-SI", "name": "Martin Idel"}}, "url": "https://github.com/keycloak/keycloak/commit/7df70530fc19825320325838dc178afd59ed229f", "committedDate": "2020-04-03T10:48:13Z", "message": "Add German translation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NTIyMDEx", "url": "https://github.com/keycloak/keycloak/pull/6705#pullrequestreview-396522011", "createdAt": "2020-04-20T14:44:06Z", "commit": {"oid": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDo0NDowNlrOGIYFkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjowMjozNlrOGIb7QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNjQzNA==", "bodyText": "Will be nice to add a little bit more details. Similarly like I mentioned in the docs PR :) Maybe something like \"... 'import' to only import the user once during first login of this user with this identity provider, 'force' to always update the user during every login with this identity provider\"", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r411436434", "createdAt": "2020-04-20T14:44:06Z", "author": {"login": "mposolda"}, "path": "themes/src/main/resources/theme/base/admin/messages/admin-messages_en.properties", "diffHunk": "@@ -540,6 +540,14 @@ provider=Provider\n gui-order=GUI order\n first-broker-login-flow=First Login Flow\n post-broker-login-flow=Post Login Flow\n+sync-mode=Sync Mode\n+sync-mode.tooltip=Default sync mode for all mappers. The sync mode determines when user data will be synced using the mappers. Possible values are: 'legacy' to keep the behaviour before this option was introduced, 'import' to only import the user once, 'force' to always update the user.\n+sync-mode.inherit=inherit\n+sync-mode.legacy=legacy\n+sync-mode.import=import\n+sync-mode.force=force\n+sync-mode-override=Sync Mode Override\n+sync-mode-override.tooltip=Overrides the default sync mode of the IDP for this mapper. Values are: 'legacy' to keep the behaviour before this option was introduced, 'import' to only import the user once, 'force' to always update the user.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNjcwMQ==", "bodyText": "See my note above for the similar tooltip", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r411436701", "createdAt": "2020-04-20T14:44:27Z", "author": {"login": "mposolda"}, "path": "themes/src/main/resources/theme/base/admin/messages/admin-messages_en.properties", "diffHunk": "@@ -540,6 +540,14 @@ provider=Provider\n gui-order=GUI order\n first-broker-login-flow=First Login Flow\n post-broker-login-flow=Post Login Flow\n+sync-mode=Sync Mode\n+sync-mode.tooltip=Default sync mode for all mappers. The sync mode determines when user data will be synced using the mappers. Possible values are: 'legacy' to keep the behaviour before this option was introduced, 'import' to only import the user once, 'force' to always update the user.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ0ODE3Mg==", "bodyText": "Is it possible to remove this field entirely and change getter/setter to directly read the value from the \"config\" ? For example something like:\npublic IdentityProviderSyncMode getSyncMode() {\n    return getConfig().containsKey(IdentityProviderModel.SYNC_MODE)\n                ? IdentityProviderSyncMode.valueOf(getConfig().get(IdentityProviderModel.SYNC_MODE))\n                : IdentityProviderSyncMode.LEGACY);\n}\n\npublic void setSyncMode(IdentityProviderSyncMode syncMode) {\n    getConfig().put(IdentityProviderModel.SYNC_MODE, syncMode);\n}\n\nSee for example classes like OIDCIdentityProviderConfig or OAuth2IdentityProviderConfig, which contains bunch of other similar options.\nI think this will simplify lots of other things and reduce the amount of changes at the model classes you needed to do in this PR. For example classes like RealmAdapter, ModelToRepresentation, RepresentationToModel etc won't be needed to be changed at all in this PR IMO.", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r411448172", "createdAt": "2020-04-20T14:58:42Z", "author": {"login": "mposolda"}, "path": "server-spi/src/main/java/org/keycloak/models/IdentityProviderModel.java", "diffHunk": "@@ -64,6 +66,8 @@\n \n     private String displayName;\n \n+    private IdentityProviderSyncMode syncMode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ0OTkzMA==", "bodyText": "See my comment for the class IdentityProviderModel.java. I think same can be applied here.", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r411449930", "createdAt": "2020-04-20T15:00:52Z", "author": {"login": "mposolda"}, "path": "server-spi/src/main/java/org/keycloak/models/IdentityProviderMapperModel.java", "diffHunk": "@@ -41,6 +42,7 @@\n     protected String name;\n     protected String identityProviderAlias;\n     protected String identityProviderMapper;\n+    protected IdentityProviderMapperSyncMode syncMode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2NTA4NQ==", "bodyText": "IMO there is no need to have 1st level field at the IdentityProviderMapperRepresentation level. It can just use the \"config\" map to hold the value. This means the UI HTML files will just reference to \"identityProviderMapper.config.syncMode\" instead of \"identityProviderMapper.syncMode\" . See the other fields for inspiration, which are backed by the values from \"config\" map.", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r411465085", "createdAt": "2020-04-20T15:19:45Z", "author": {"login": "mposolda"}, "path": "core/src/main/java/org/keycloak/representations/idm/IdentityProviderMapperRepresentation.java", "diffHunk": "@@ -29,6 +29,7 @@\n     protected String name;\n     protected String identityProviderAlias;\n     protected String identityProviderMapper;\n+    protected String syncMode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2NTM0Nw==", "bodyText": "See my comment for IdentityProviderMapperRepresentation. I believe same applies here as well.", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r411465347", "createdAt": "2020-04-20T15:20:05Z", "author": {"login": "mposolda"}, "path": "core/src/main/java/org/keycloak/representations/idm/IdentityProviderRepresentation.java", "diffHunk": "@@ -56,6 +56,7 @@\n     protected boolean linkOnly;\n     protected String firstBrokerLoginFlowAlias;\n     protected String postBrokerLoginFlowAlias;\n+    protected String syncMode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ5OTMyOA==", "bodyText": "I wonder that many of the existing tests possibly won't need to be changed? Assuming that you remove the field like \"syncMode\" directly from the representation and model classes as I proposed in the comments. This will mean it will use the default value \"Legacy\" and the behaviour will be same as before AFAIK?\nThis doesn't apply just for AccountFormServiceTest, but many other tests where you explicitly added \".syncMode(IdentityProviderSyncMode.IMPORT)\" . I won't repeat this comment to all those places.", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r411499328", "createdAt": "2020-04-20T16:02:36Z", "author": {"login": "mposolda"}, "path": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/account/AccountFormServiceTest.java", "diffHunk": "@@ -121,20 +122,24 @@ public void configureTestRealm(RealmRepresentation testRealm) {\n         testRealm.addIdentityProvider(IdentityProviderBuilder.create()\n                                               .providerId(\"github\")\n                                               .alias(\"github\")\n+                                              .syncMode(IdentityProviderSyncMode.IMPORT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3MzM1MjQz", "url": "https://github.com/keycloak/keycloak/pull/6705#pullrequestreview-397335243", "createdAt": "2020-04-21T13:34:58Z", "commit": {"oid": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzozNDo1OFrOGJGCvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzo0MDowMlrOGJGSPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE4OTM3Mw==", "bodyText": "This can be changed to a single line:\nreturn IdentityProviderSyncMode.INHERIT.equals(mapperSyncMode) ? syncMode : mapperSyncMode", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r412189373", "createdAt": "2020-04-21T13:34:58Z", "author": {"login": "stianst"}, "path": "server-spi-private/src/main/java/org/keycloak/broker/provider/IdentityProviderMapperSyncModeDelegate.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.keycloak.broker.provider;\n+\n+import org.jboss.logging.Logger;\n+import org.keycloak.models.IdentityProviderMapperModel;\n+import org.keycloak.models.IdentityProviderMapperSyncMode;\n+import org.keycloak.models.IdentityProviderSyncMode;\n+import org.keycloak.models.KeycloakSession;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserModel;\n+\n+public final class IdentityProviderMapperSyncModeDelegate {\n+\n+    protected static final Logger logger = Logger.getLogger(IdentityProviderMapperSyncModeDelegate.class);\n+\n+    public static void delegateUpdateBrokeredUser(KeycloakSession session, RealmModel realm, UserModel user, IdentityProviderMapperModel mapperModel, BrokeredIdentityContext context, IdentityProviderMapper mapper) {\n+        IdentityProviderSyncMode effectiveSyncMode = combineIdpAndMapperSyncMode(context.getIdpConfig().getSyncMode(), mapperModel.getSyncMode());\n+\n+        if (!mapper.supportedSyncModes().contains(effectiveSyncMode)) {\n+            logger.warnf(\"The mapper %s does not explicitly support sync mode %s. Please ensure that the SPI supports the sync mode correctly and update it to reflect this.\", mapper.getDisplayType(), effectiveSyncMode);\n+        }\n+\n+        if (effectiveSyncMode == IdentityProviderSyncMode.LEGACY) {\n+            mapper.updateBrokeredUserLegacy(session, realm, user, mapperModel, context);\n+        } else if (effectiveSyncMode == IdentityProviderSyncMode.FORCE) {\n+            mapper.updateBrokeredUser(session, realm, user, mapperModel, context);\n+        }\n+    }\n+\n+    public static IdentityProviderSyncMode combineIdpAndMapperSyncMode(IdentityProviderSyncMode syncMode, IdentityProviderMapperSyncMode mapperSyncMode) {\n+        switch (mapperSyncMode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE5MDIyNg==", "bodyText": "Not super keen on this refactoring - as it makes it more costly to review this. @mposolda did you review this properly?", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r412190226", "createdAt": "2020-04-21T13:36:05Z", "author": {"login": "stianst"}, "path": "model/jpa/src/main/java/org/keycloak/models/jpa/RealmAdapter.java", "diffHunk": "@@ -1287,25 +1291,31 @@ public void addIdentityProvider(IdentityProviderModel identityProvider) {\n         } else {\n             entity.setInternalId(identityProvider.getInternalId());\n         }\n+        fillEntity(identityProvider, entity);\n+        entity.setProviderId(identityProvider.getProviderId());\n+\n+        realm.addIdentityProvider(entity);\n+\n+        identityProvider.setInternalId(entity.getInternalId());\n+\n+        em.persist(entity);\n+        em.flush();\n+    }\n+\n+    private void fillEntity(IdentityProviderModel identityProvider, IdentityProviderEntity entity) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE5MDc5MA==", "bodyText": "Please don't use '*' imports", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r412190790", "createdAt": "2020-04-21T13:36:47Z", "author": {"login": "stianst"}, "path": "server-spi-private/src/main/java/org/keycloak/broker/provider/IdentityProviderMapper.java", "diffHunk": "@@ -17,25 +17,31 @@\n \n package org.keycloak.broker.provider;\n \n-import org.keycloak.models.IdentityProviderMapperModel;\n-import org.keycloak.models.KeycloakSession;\n-import org.keycloak.models.RealmModel;\n-import org.keycloak.models.UserModel;\n+import org.keycloak.models.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE5MjA5OQ==", "bodyText": "Perhaps it would be cleaner to do:\nboolean supportsSyncMode(IdentityProviderSyncMode syncMode)", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r412192099", "createdAt": "2020-04-21T13:38:23Z", "author": {"login": "stianst"}, "path": "server-spi-private/src/main/java/org/keycloak/broker/provider/IdentityProviderMapper.java", "diffHunk": "@@ -17,25 +17,31 @@\n \n package org.keycloak.broker.provider;\n \n-import org.keycloak.models.IdentityProviderMapperModel;\n-import org.keycloak.models.KeycloakSession;\n-import org.keycloak.models.RealmModel;\n-import org.keycloak.models.UserModel;\n+import org.keycloak.models.*;\n import org.keycloak.provider.ConfiguredProvider;\n import org.keycloak.provider.Provider;\n import org.keycloak.provider.ProviderFactory;\n \n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n /**\n  * @author <a href=\"mailto:bill@burkecentral.com\">Bill Burke</a>\n  * @version $Revision: 1 $\n  */\n public interface IdentityProviderMapper extends Provider, ProviderFactory<IdentityProviderMapper>,ConfiguredProvider {\n     String ANY_PROVIDER = \"*\";\n+    Set<IdentityProviderSyncMode> DEFAULT_IDENTITY_PROVIDER_MAPPER_SYNC_MODES = new HashSet<>(Arrays.asList(IdentityProviderSyncMode.LEGACY, IdentityProviderSyncMode.IMPORT));\n \n     String[] getCompatibleProviders();\n     String getDisplayCategory();\n     String getDisplayType();\n \n+    default Set<IdentityProviderSyncMode> supportedSyncModes() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE5MzM0MA==", "bodyText": "+1", "url": "https://github.com/keycloak/keycloak/pull/6705#discussion_r412193340", "createdAt": "2020-04-21T13:40:02Z", "author": {"login": "stianst"}, "path": "server-spi/src/main/java/org/keycloak/models/IdentityProviderModel.java", "diffHunk": "@@ -64,6 +66,8 @@\n \n     private String displayName;\n \n+    private IdentityProviderSyncMode syncMode;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ0ODE3Mg=="}, "originalCommit": {"oid": "bc4f8b44afbf2e4106640a13da6821fc0f7f80ca"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "190407a58f5adadf21251efc40e14b535eea752f", "author": {"user": {"login": "Martin-Idel-SI", "name": "Martin Idel"}}, "url": "https://github.com/keycloak/keycloak/commit/190407a58f5adadf21251efc40e14b535eea752f", "committedDate": "2020-04-22T08:04:37Z", "message": "KEYCLOAK-11862 Add Sync mode option\n\n- Store in config map in database and model\n- Expose the field in the OIDC-IDP\n- Write logic for import, force and legacy mode\n- Show how mappers can be updated keeping correct legacy mode\n- Show how mappers that work correctly don't have to be modified\n- Log an error if sync mode is not supported\n\nFix updateBrokeredUser method for all mappers\n\n- Allow updating of username (UsernameTemplateMapper)\n- Delete UserAttributeStatementMapper: mapper isn't even registered\n  Was actually rejected but never cleaned up: https://github.com/keycloak/keycloak/pull/4513\n  The mapper won't work as specified and it's not easy to tests here\n- Fixup json mapper\n- Fix ExternalKeycloakRoleToRoleMapper:\n  Bug: delete cannot work - just delete it. Don't fix it in legacy mode\n\nRework mapper tests\n\n- Fix old tests for Identity Broker:\n  Old tests did not work at all:\n  They tested that if you take a realm and assign the role,\n  this role is then assigned to the user in that realm,\n  which has nothing to do with identity brokering\n  Simplify logic in OidcClaimToRoleMapperTests\n- Add SyncMode tests to most mappers\n  Added tests for UsernameTemplateMapper\n  Added tests to all RoleMappers\n  Add test for json attribute mapper (Github as example)\n- Extract common test setup(s)\n- Extend admin console tests for sync mode\n\nSigned-off-by: Martin Idel <external.Martin.Idel@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2fd74816f8e1be5975bdb4cd5fa3aeb3af03b64e", "author": {"user": {"login": "Martin-Idel-SI", "name": "Martin Idel"}}, "url": "https://github.com/keycloak/keycloak/commit/2fd74816f8e1be5975bdb4cd5fa3aeb3af03b64e", "committedDate": "2020-04-21T17:05:40Z", "message": "Small review comments regarding sync mode logic"}, "afterCommit": {"oid": "190407a58f5adadf21251efc40e14b535eea752f", "author": {"user": {"login": "Martin-Idel-SI", "name": "Martin Idel"}}, "url": "https://github.com/keycloak/keycloak/commit/190407a58f5adadf21251efc40e14b535eea752f", "committedDate": "2020-04-22T08:04:37Z", "message": "KEYCLOAK-11862 Add Sync mode option\n\n- Store in config map in database and model\n- Expose the field in the OIDC-IDP\n- Write logic for import, force and legacy mode\n- Show how mappers can be updated keeping correct legacy mode\n- Show how mappers that work correctly don't have to be modified\n- Log an error if sync mode is not supported\n\nFix updateBrokeredUser method for all mappers\n\n- Allow updating of username (UsernameTemplateMapper)\n- Delete UserAttributeStatementMapper: mapper isn't even registered\n  Was actually rejected but never cleaned up: https://github.com/keycloak/keycloak/pull/4513\n  The mapper won't work as specified and it's not easy to tests here\n- Fixup json mapper\n- Fix ExternalKeycloakRoleToRoleMapper:\n  Bug: delete cannot work - just delete it. Don't fix it in legacy mode\n\nRework mapper tests\n\n- Fix old tests for Identity Broker:\n  Old tests did not work at all:\n  They tested that if you take a realm and assign the role,\n  this role is then assigned to the user in that realm,\n  which has nothing to do with identity brokering\n  Simplify logic in OidcClaimToRoleMapperTests\n- Add SyncMode tests to most mappers\n  Added tests for UsernameTemplateMapper\n  Added tests to all RoleMappers\n  Add test for json attribute mapper (Github as example)\n- Extract common test setup(s)\n- Extend admin console tests for sync mode\n\nSigned-off-by: Martin Idel <external.Martin.Idel@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MDU0ODUz", "url": "https://github.com/keycloak/keycloak/pull/6705#pullrequestreview-398054853", "createdAt": "2020-04-22T10:28:25Z", "commit": {"oid": "190407a58f5adadf21251efc40e14b535eea752f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MTMxMTMy", "url": "https://github.com/keycloak/keycloak/pull/6705#pullrequestreview-398131132", "createdAt": "2020-04-22T12:19:17Z", "commit": {"oid": "190407a58f5adadf21251efc40e14b535eea752f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2601, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}