{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxNzk2Nzk2", "number": 579, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMDozNDoyOVrOFH-rnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNTo0MDowMlrOFIB-iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTExMzI1OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/work/UpdateProfileWorker.kt", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMDozNDoyOVrOIJqUIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwNjowNDozMVrOIMHqSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAwMTM3OA==", "bodyText": "this is leftover code from a previous story.  It is not currently used.", "url": "https://github.com/dashevo/dash-wallet/pull/579#discussion_r547001378", "createdAt": "2020-12-22T00:34:29Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/work/UpdateProfileWorker.kt", "diffHunk": "@@ -72,20 +72,27 @@ class UpdateProfileWorker(context: Context, parameters: WorkerParameters)\n             }\n         }\n \n+        val avatarHash: ByteArray?\n+\n         // Perform the image upload here\n         val avatarUrlToUpload = inputData.getString(KEY_LOCAL_AVATAR_URL_TO_UPLOAD)?:\"\"\n         val uploadService = inputData.getString(KEY_UPLOAD_SERVICE)?:\"\"\n         if (avatarUrlToUpload.isNotEmpty()) {\n+            val avatarFile = File(avatarUrlToUpload)\n+            @Suppress(\"BlockingMethodInNonBlockingContext\")\n+            avatarHash = Sha256Hash.of(avatarFile).bytes\n             when (uploadService) {\n                 EditProfileViewModel.ProfilePictureStorageService.GOOGLE_DRIVE.name -> {\n-                    val avatarFileBytes = File(avatarUrlToUpload).readBytes()\n+                    val avatarFileBytes = avatarFile.readBytes()\n                     val fileId = saveToGoogleDrive(applicationContext, avatarFileBytes)\n                     avatarUrl = \"https://drive.google.com/uc?export=view&id=$fileId\"\n                 }\n                 EditProfileViewModel.ProfilePictureStorageService.IMGUR.name -> {\n                     //TODO:\n                 }\n             }\n+        } else {\n+            avatarHash = inputData.getByteArray(KEY_AVATAR_HASH)\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "676573e5f1efb18ee42fb923a7d7158ce12bd81f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ0NjMyOA==", "bodyText": "What do you mean by that @HashEngineering?\nAre you referring to a particular line or rather to the whole code?", "url": "https://github.com/dashevo/dash-wallet/pull/579#discussion_r549446328", "createdAt": "2020-12-28T18:32:27Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/work/UpdateProfileWorker.kt", "diffHunk": "@@ -72,20 +72,27 @@ class UpdateProfileWorker(context: Context, parameters: WorkerParameters)\n             }\n         }\n \n+        val avatarHash: ByteArray?\n+\n         // Perform the image upload here\n         val avatarUrlToUpload = inputData.getString(KEY_LOCAL_AVATAR_URL_TO_UPLOAD)?:\"\"\n         val uploadService = inputData.getString(KEY_UPLOAD_SERVICE)?:\"\"\n         if (avatarUrlToUpload.isNotEmpty()) {\n+            val avatarFile = File(avatarUrlToUpload)\n+            @Suppress(\"BlockingMethodInNonBlockingContext\")\n+            avatarHash = Sha256Hash.of(avatarFile).bytes\n             when (uploadService) {\n                 EditProfileViewModel.ProfilePictureStorageService.GOOGLE_DRIVE.name -> {\n-                    val avatarFileBytes = File(avatarUrlToUpload).readBytes()\n+                    val avatarFileBytes = avatarFile.readBytes()\n                     val fileId = saveToGoogleDrive(applicationContext, avatarFileBytes)\n                     avatarUrl = \"https://drive.google.com/uc?export=view&id=$fileId\"\n                 }\n                 EditProfileViewModel.ProfilePictureStorageService.IMGUR.name -> {\n                     //TODO:\n                 }\n             }\n+        } else {\n+            avatarHash = inputData.getByteArray(KEY_AVATAR_HASH)\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAwMTM3OA=="}, "originalCommit": {"oid": "676573e5f1efb18ee42fb923a7d7158ce12bd81f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ2NDk1MQ==", "bodyText": "The entire block of code.  We are not currently performing the image upload with the UpdateProfileWorker.  As can be seen in this block, the IMGUR section has no code.\nThis line can be put outside this block:\n            avatarHash = inputData.getByteArray(KEY_AVATAR_HASH)", "url": "https://github.com/dashevo/dash-wallet/pull/579#discussion_r549464951", "createdAt": "2020-12-28T19:40:54Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/work/UpdateProfileWorker.kt", "diffHunk": "@@ -72,20 +72,27 @@ class UpdateProfileWorker(context: Context, parameters: WorkerParameters)\n             }\n         }\n \n+        val avatarHash: ByteArray?\n+\n         // Perform the image upload here\n         val avatarUrlToUpload = inputData.getString(KEY_LOCAL_AVATAR_URL_TO_UPLOAD)?:\"\"\n         val uploadService = inputData.getString(KEY_UPLOAD_SERVICE)?:\"\"\n         if (avatarUrlToUpload.isNotEmpty()) {\n+            val avatarFile = File(avatarUrlToUpload)\n+            @Suppress(\"BlockingMethodInNonBlockingContext\")\n+            avatarHash = Sha256Hash.of(avatarFile).bytes\n             when (uploadService) {\n                 EditProfileViewModel.ProfilePictureStorageService.GOOGLE_DRIVE.name -> {\n-                    val avatarFileBytes = File(avatarUrlToUpload).readBytes()\n+                    val avatarFileBytes = avatarFile.readBytes()\n                     val fileId = saveToGoogleDrive(applicationContext, avatarFileBytes)\n                     avatarUrl = \"https://drive.google.com/uc?export=view&id=$fileId\"\n                 }\n                 EditProfileViewModel.ProfilePictureStorageService.IMGUR.name -> {\n                     //TODO:\n                 }\n             }\n+        } else {\n+            avatarHash = inputData.getByteArray(KEY_AVATAR_HASH)\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAwMTM3OA=="}, "originalCommit": {"oid": "676573e5f1efb18ee42fb923a7d7158ce12bd81f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU3OTMzOA==", "bodyText": "Fixed", "url": "https://github.com/dashevo/dash-wallet/pull/579#discussion_r549579338", "createdAt": "2020-12-29T06:04:31Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/work/UpdateProfileWorker.kt", "diffHunk": "@@ -72,20 +72,27 @@ class UpdateProfileWorker(context: Context, parameters: WorkerParameters)\n             }\n         }\n \n+        val avatarHash: ByteArray?\n+\n         // Perform the image upload here\n         val avatarUrlToUpload = inputData.getString(KEY_LOCAL_AVATAR_URL_TO_UPLOAD)?:\"\"\n         val uploadService = inputData.getString(KEY_UPLOAD_SERVICE)?:\"\"\n         if (avatarUrlToUpload.isNotEmpty()) {\n+            val avatarFile = File(avatarUrlToUpload)\n+            @Suppress(\"BlockingMethodInNonBlockingContext\")\n+            avatarHash = Sha256Hash.of(avatarFile).bytes\n             when (uploadService) {\n                 EditProfileViewModel.ProfilePictureStorageService.GOOGLE_DRIVE.name -> {\n-                    val avatarFileBytes = File(avatarUrlToUpload).readBytes()\n+                    val avatarFileBytes = avatarFile.readBytes()\n                     val fileId = saveToGoogleDrive(applicationContext, avatarFileBytes)\n                     avatarUrl = \"https://drive.google.com/uc?export=view&id=$fileId\"\n                 }\n                 EditProfileViewModel.ProfilePictureStorageService.IMGUR.name -> {\n                     //TODO:\n                 }\n             }\n+        } else {\n+            avatarHash = inputData.getByteArray(KEY_AVATAR_HASH)\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAwMTM3OA=="}, "originalCommit": {"oid": "676573e5f1efb18ee42fb923a7d7158ce12bd81f"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTY1MzIwOnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/utils/DHash.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNTo0MDowMlrOIJvDKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxODoyODoyMlrOIL_ehQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA3ODk1NA==", "bodyText": "Some commented code here.", "url": "https://github.com/dashevo/dash-wallet/pull/579#discussion_r547078954", "createdAt": "2020-12-22T05:40:02Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/utils/DHash.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 Dash Core Group\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package de.schildbach.wallet.ui.dashpay.utils;\n+\n+import android.graphics.Bitmap;\n+import android.graphics.Canvas;\n+import android.graphics.ColorMatrix;\n+import android.graphics.ColorMatrixColorFilter;\n+import android.graphics.Paint;\n+\n+import java.math.BigInteger;\n+\n+// base on:\n+// https://benhoyt.com/writings/duplicate-image-detection/\n+// https://www.hackerfactor.com/blog/index.php?/archives/529-Kind-of-Like-That.html\n+// https://github.com/tistaharahap/android-dhash/blob/master/src/com/bango/imagereco/Reco.java\n+\n+public class DHash {\n+\n+    private static final int HASH_SIZE = 8;\n+\n+    public static BigInteger of(Bitmap srcBmp) {\n+        Bitmap resizedBmp = Bitmap.createScaledBitmap(srcBmp, HASH_SIZE + 1, HASH_SIZE + 1, false);\n+        if (resizedBmp != srcBmp) {\n+            srcBmp.recycle();\n+        }\n+        Bitmap resizedGrayscaleBmp = toGrayscale(resizedBmp);\n+        if (resizedGrayscaleBmp != resizedBmp) {\n+            resizedBmp.recycle();\n+        }\n+\n+//        String fileName = \"test1.png\";\n+//        File file = new File(storageDir, fileName);\n+//        resizedGrayscaleBmp = BitmapFactory.decodeFile(file.getPath());\n+\n+        String dHashH = getHorizontalDifferences(resizedGrayscaleBmp);\n+//        String dHashV = getVerticalDifferences(resizedGrayscaleBmp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8577999902eea3f2892d7a0af58a604dd1075c19"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ0NTI1Mw==", "bodyText": "Fixed", "url": "https://github.com/dashevo/dash-wallet/pull/579#discussion_r549445253", "createdAt": "2020-12-28T18:28:22Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/utils/DHash.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 Dash Core Group\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package de.schildbach.wallet.ui.dashpay.utils;\n+\n+import android.graphics.Bitmap;\n+import android.graphics.Canvas;\n+import android.graphics.ColorMatrix;\n+import android.graphics.ColorMatrixColorFilter;\n+import android.graphics.Paint;\n+\n+import java.math.BigInteger;\n+\n+// base on:\n+// https://benhoyt.com/writings/duplicate-image-detection/\n+// https://www.hackerfactor.com/blog/index.php?/archives/529-Kind-of-Like-That.html\n+// https://github.com/tistaharahap/android-dhash/blob/master/src/com/bango/imagereco/Reco.java\n+\n+public class DHash {\n+\n+    private static final int HASH_SIZE = 8;\n+\n+    public static BigInteger of(Bitmap srcBmp) {\n+        Bitmap resizedBmp = Bitmap.createScaledBitmap(srcBmp, HASH_SIZE + 1, HASH_SIZE + 1, false);\n+        if (resizedBmp != srcBmp) {\n+            srcBmp.recycle();\n+        }\n+        Bitmap resizedGrayscaleBmp = toGrayscale(resizedBmp);\n+        if (resizedGrayscaleBmp != resizedBmp) {\n+            resizedBmp.recycle();\n+        }\n+\n+//        String fileName = \"test1.png\";\n+//        File file = new File(storageDir, fileName);\n+//        resizedGrayscaleBmp = BitmapFactory.decodeFile(file.getPath());\n+\n+        String dHashH = getHorizontalDifferences(resizedGrayscaleBmp);\n+//        String dHashV = getVerticalDifferences(resizedGrayscaleBmp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA3ODk1NA=="}, "originalCommit": {"oid": "8577999902eea3f2892d7a0af58a604dd1075c19"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 553, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}