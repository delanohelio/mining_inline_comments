{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5NzcxNDI4", "number": 482, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMTozODoyNVrOEigjyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMTozODoyNVrOEigjyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjIwNDg4OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMTozODoyNlrOHQbXxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMTozODoyNlrOHQbXxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk4NzcxOQ==", "bodyText": "This whole method is duplicated below.", "url": "https://github.com/dashevo/dash-wallet/pull/482#discussion_r486987719", "createdAt": "2020-09-11T11:38:26Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -798,7 +801,66 @@ class PlatformRepo private constructor(val walletApplication: WalletApplication)\n             log.error(formatExceptionMessage(\"error updating contacts\", e))\n         } finally {\n             updatingContacts.set(false)\n+            if (preDownloadBlocks.get()) {\n+                log.info(\"PreDownloadBlocks: complete\")\n+                preDownloadBlocksFuture?.set(true)\n+                preDownloadBlocks.set(false)\n+            }\n+        }\n+    }\n+\n+    // This will check for missing profiles, download them and update the database\n+    private suspend fun checkDatabaseIntegrity() {\n+        val watch = Stopwatch.createStarted()\n+        log.info(\"check database integrity: starting\");\n+\n+        val userIdList = HashSet<String>()\n+        val missingProfiles = HashSet<String>()\n+        val userId = blockchainIdentity.uniqueIdString\n+\n+        var toContactDocuments = dashPayContactRequestDaoAsync.loadToOthers(userId)\n+        val toContactMap = HashMap<String, DashPayContactRequest>()\n+        toContactDocuments!!.forEach {\n+            userIdList.add(it.toUserId)\n+            toContactMap[it.toUserId] = it\n+        }\n+        // Get all contact requests where toUserId == userId, the users who have added me\n+        val fromContactDocuments = dashPayContactRequestDaoAsync.loadFromOthers(userId)\n+        val fromContactMap = HashMap<String, DashPayContactRequest>()\n+        fromContactDocuments!!.forEach {\n+            userIdList.add(it.userId)\n+            fromContactMap[it.userId] = it\n+        }\n+\n+        for (user in userIdList) {\n+            val profile = dashPayProfileDaoAsync.load(user)\n+            if (profile == null) {\n+                missingProfiles.add(user)\n+            }\n+        }\n+\n+        if (missingProfiles.isNotEmpty()) {\n+            val profileDocuments = Profiles(platform).getList(missingProfiles.toList()) //only handles 100 userIds\n+            val profileById = profileDocuments.associateBy({ it.ownerId }, { it })\n+\n+            val nameDocuments = platform.names.getList(missingProfiles.toList())\n+            val nameById = nameDocuments.associateBy({ getIdentityForName(it) }, { it })\n+\n+            for (id in missingProfiles) {\n+                val nameDocument = nameById[id] // what happens if there is no username for the identity? crash\n+                val username = nameDocument!!.data[\"normalizedLabel\"] as String\n+                val identityId = getIdentityForName(nameDocument)\n+\n+                val profileDocument = profileById[id] ?: profiles.createProfileDocument(\"\", \"\",\n+                        \"\", platform.identities.get(identityId)!!)\n+\n+                val profile = DashPayProfile.fromDocument(profileDocument, username)\n+                dashPayProfileDaoAsync.insert(profile!!)\n+                log.info(\"check database integrity: adding missing profile $username:$id\")\n+            }\n         }\n+\n+        log.info(\"check database integrity complete in $watch\")\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89ae0fe2964c58079ffa8dcb85d1da6b81d6ce82"}, "originalPosition": 143}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 568, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}