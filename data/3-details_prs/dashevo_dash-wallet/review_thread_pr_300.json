{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxMjE3Mjk3", "number": 300, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjoxMDo1NFrODX5zPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjoyMTo0OFrODX6D1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzkwODQ0OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/DecryptSeedWithPinDialog.kt", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjoxMDo1NFrOFddFrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNzowNjowN1rOFdfEMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQyOTYxMw==", "bodyText": "@HashEngineering ,\nin order to condense the code even more and avoid duplicates, instead of overriding the whole startFingerprintListener() method, you can \"override\" just the onSuccess(savedPass: String) by extracting its content into a separate method.\nTo be more clear. In the CheckPinDialog add the method like onSuccessFingerprint(savedPass: String) and call it instead of dismiss(savedPass). The base version of this method (in CheckPinDialog) will then call dismiss(savedPass) whereas the overridden version (in DecryptSeedWithPinDialog) (viewModel as DecryptSeedViewModel).checkPin(savedPass)", "url": "https://github.com/dashevo/dash-wallet/pull/300#discussion_r366429613", "createdAt": "2020-01-14T16:10:54Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/ui/DecryptSeedWithPinDialog.kt", "diffHunk": "@@ -0,0 +1,114 @@\n+package de.schildbach.wallet.ui\n+\n+import android.os.Build\n+import android.os.Bundle\n+import androidx.annotation.RequiresApi\n+import androidx.appcompat.app.AppCompatActivity\n+import androidx.core.os.CancellationSignal\n+import androidx.lifecycle.Observer\n+import androidx.lifecycle.ViewModelProviders\n+import de.schildbach.wallet.livedata.Status\n+import de.schildbach.wallet.ui.preference.PinRetryController\n+import de.schildbach.wallet.util.FingerprintHelper\n+import kotlinx.android.synthetic.main.fragment_enter_pin.*\n+import org.bitcoinj.wallet.DeterministicSeed\n+\n+/**\n+ * @author:  Eric Britten\n+ *\n+ * DecryptSeedWithPinDialog uses DecryptSeedSharedModel which is derived\n+ * from CheckPinShared model but does not call the onCorrectPinCallback\n+ * event\n+ */\n+\n+class DecryptSeedWithPinDialog : CheckPinDialog() {\n+\n+    companion object {\n+\n+        private val FRAGMENT_TAG = DecryptSeedWithPinDialog::class.java.simpleName\n+\n+        private const val ARG_REQUEST_CODE = \"arg_request_code\"\n+        private const val ARG_PIN_ONLY = \"arg_pin_only\"\n+\n+        @JvmStatic\n+        fun show(activity: AppCompatActivity, requestCode: Int = 0, pinOnly: Boolean = false) {\n+            val checkPinDialog = DecryptSeedWithPinDialog()\n+            if (PinRetryController.getInstance().isLocked) {\n+                checkPinDialog.showLockedAlert(activity)\n+            } else {\n+                val args = Bundle()\n+                args.putInt(ARG_REQUEST_CODE, requestCode)\n+                args.putBoolean(ARG_PIN_ONLY, pinOnly)\n+                checkPinDialog.arguments = args\n+                checkPinDialog.show(activity.supportFragmentManager, FRAGMENT_TAG)\n+            }\n+        }\n+\n+        @JvmStatic\n+        fun show(activity: AppCompatActivity, requestCode: Int = 0) {\n+            show(activity, requestCode, false)\n+        }\n+\n+    }\n+\n+    override fun initViewModel() {\n+        viewModel = ViewModelProviders.of(this).get(DecryptSeedViewModel::class.java)\n+        (viewModel as DecryptSeedViewModel).decryptSeedLiveData.observe(viewLifecycleOwner, Observer {\n+            when (it.status) {\n+                Status.ERROR -> {\n+                    pinRetryController.failedAttempt(it.data!!.second!!)\n+                    if (pinRetryController.isLocked) {\n+                        showLockedAlert(context!!)\n+                        dismiss()\n+                        return@Observer\n+                    }\n+                    setState(State.INVALID_PIN)\n+                }\n+                Status.LOADING -> {\n+                    setState(State.DECRYPTING)\n+                }\n+                Status.SUCCESS -> {\n+                    dismiss(it.data!!.first!!, it.data!!.second!!)\n+                }\n+            }\n+        })\n+    }\n+\n+    private fun dismiss(seed : DeterministicSeed, pin: String) {\n+        if (pinRetryController.isLocked) {\n+            return\n+        }\n+        val requestCode = arguments!!.getInt(ARG_REQUEST_CODE)\n+        (sharedModel as DecryptSeedSharedModel).onDecryptSeedCallback.value = Pair(requestCode, seed)\n+        pinRetryController.clearPinFailPrefs()\n+        dismiss()\n+    }\n+\n+    override fun onActivityCreated(savedInstanceState: Bundle?) {\n+        super.onActivityCreated(savedInstanceState)\n+        activity?.run {\n+            sharedModel = ViewModelProviders.of(this)[DecryptSeedSharedModel::class.java]\n+        } ?: throw IllegalStateException(\"Invalid Activity\")\n+    }\n+\n+    @RequiresApi(api = Build.VERSION_CODES.M)\n+    override fun startFingerprintListener() {\n+        fingerprintCancellationSignal = CancellationSignal()\n+        fingerprintHelper!!.getPassword(fingerprintCancellationSignal, object : FingerprintHelper.Callback {\n+            override fun onSuccess(savedPass: String) {\n+                //dismiss(savedPass)\n+                (viewModel as DecryptSeedViewModel).checkPin(savedPass)\n+            }\n+\n+            override fun onFailure(message: String, canceled: Boolean, exceededMaxAttempts: Boolean) {\n+                if (!canceled) {\n+                    fingerprint_view.showError(exceededMaxAttempts)\n+                }\n+            }\n+\n+            override fun onHelp(helpCode: Int, helpString: String) {\n+                fingerprint_view.showError(false)\n+            }\n+        })\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c252f3fd4e99de0e3348177fb214b6ec0fd474e7"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ0NTIzMw==", "bodyText": "Excellent idea.", "url": "https://github.com/dashevo/dash-wallet/pull/300#discussion_r366445233", "createdAt": "2020-01-14T16:36:30Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/DecryptSeedWithPinDialog.kt", "diffHunk": "@@ -0,0 +1,114 @@\n+package de.schildbach.wallet.ui\n+\n+import android.os.Build\n+import android.os.Bundle\n+import androidx.annotation.RequiresApi\n+import androidx.appcompat.app.AppCompatActivity\n+import androidx.core.os.CancellationSignal\n+import androidx.lifecycle.Observer\n+import androidx.lifecycle.ViewModelProviders\n+import de.schildbach.wallet.livedata.Status\n+import de.schildbach.wallet.ui.preference.PinRetryController\n+import de.schildbach.wallet.util.FingerprintHelper\n+import kotlinx.android.synthetic.main.fragment_enter_pin.*\n+import org.bitcoinj.wallet.DeterministicSeed\n+\n+/**\n+ * @author:  Eric Britten\n+ *\n+ * DecryptSeedWithPinDialog uses DecryptSeedSharedModel which is derived\n+ * from CheckPinShared model but does not call the onCorrectPinCallback\n+ * event\n+ */\n+\n+class DecryptSeedWithPinDialog : CheckPinDialog() {\n+\n+    companion object {\n+\n+        private val FRAGMENT_TAG = DecryptSeedWithPinDialog::class.java.simpleName\n+\n+        private const val ARG_REQUEST_CODE = \"arg_request_code\"\n+        private const val ARG_PIN_ONLY = \"arg_pin_only\"\n+\n+        @JvmStatic\n+        fun show(activity: AppCompatActivity, requestCode: Int = 0, pinOnly: Boolean = false) {\n+            val checkPinDialog = DecryptSeedWithPinDialog()\n+            if (PinRetryController.getInstance().isLocked) {\n+                checkPinDialog.showLockedAlert(activity)\n+            } else {\n+                val args = Bundle()\n+                args.putInt(ARG_REQUEST_CODE, requestCode)\n+                args.putBoolean(ARG_PIN_ONLY, pinOnly)\n+                checkPinDialog.arguments = args\n+                checkPinDialog.show(activity.supportFragmentManager, FRAGMENT_TAG)\n+            }\n+        }\n+\n+        @JvmStatic\n+        fun show(activity: AppCompatActivity, requestCode: Int = 0) {\n+            show(activity, requestCode, false)\n+        }\n+\n+    }\n+\n+    override fun initViewModel() {\n+        viewModel = ViewModelProviders.of(this).get(DecryptSeedViewModel::class.java)\n+        (viewModel as DecryptSeedViewModel).decryptSeedLiveData.observe(viewLifecycleOwner, Observer {\n+            when (it.status) {\n+                Status.ERROR -> {\n+                    pinRetryController.failedAttempt(it.data!!.second!!)\n+                    if (pinRetryController.isLocked) {\n+                        showLockedAlert(context!!)\n+                        dismiss()\n+                        return@Observer\n+                    }\n+                    setState(State.INVALID_PIN)\n+                }\n+                Status.LOADING -> {\n+                    setState(State.DECRYPTING)\n+                }\n+                Status.SUCCESS -> {\n+                    dismiss(it.data!!.first!!, it.data!!.second!!)\n+                }\n+            }\n+        })\n+    }\n+\n+    private fun dismiss(seed : DeterministicSeed, pin: String) {\n+        if (pinRetryController.isLocked) {\n+            return\n+        }\n+        val requestCode = arguments!!.getInt(ARG_REQUEST_CODE)\n+        (sharedModel as DecryptSeedSharedModel).onDecryptSeedCallback.value = Pair(requestCode, seed)\n+        pinRetryController.clearPinFailPrefs()\n+        dismiss()\n+    }\n+\n+    override fun onActivityCreated(savedInstanceState: Bundle?) {\n+        super.onActivityCreated(savedInstanceState)\n+        activity?.run {\n+            sharedModel = ViewModelProviders.of(this)[DecryptSeedSharedModel::class.java]\n+        } ?: throw IllegalStateException(\"Invalid Activity\")\n+    }\n+\n+    @RequiresApi(api = Build.VERSION_CODES.M)\n+    override fun startFingerprintListener() {\n+        fingerprintCancellationSignal = CancellationSignal()\n+        fingerprintHelper!!.getPassword(fingerprintCancellationSignal, object : FingerprintHelper.Callback {\n+            override fun onSuccess(savedPass: String) {\n+                //dismiss(savedPass)\n+                (viewModel as DecryptSeedViewModel).checkPin(savedPass)\n+            }\n+\n+            override fun onFailure(message: String, canceled: Boolean, exceededMaxAttempts: Boolean) {\n+                if (!canceled) {\n+                    fingerprint_view.showError(exceededMaxAttempts)\n+                }\n+            }\n+\n+            override fun onHelp(helpCode: Int, helpString: String) {\n+                fingerprint_view.showError(false)\n+            }\n+        })\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQyOTYxMw=="}, "originalCommit": {"oid": "c252f3fd4e99de0e3348177fb214b6ec0fd474e7"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ1MjU5Mg==", "bodyText": "I think we can do this in a few more places also.", "url": "https://github.com/dashevo/dash-wallet/pull/300#discussion_r366452592", "createdAt": "2020-01-14T16:49:15Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/DecryptSeedWithPinDialog.kt", "diffHunk": "@@ -0,0 +1,114 @@\n+package de.schildbach.wallet.ui\n+\n+import android.os.Build\n+import android.os.Bundle\n+import androidx.annotation.RequiresApi\n+import androidx.appcompat.app.AppCompatActivity\n+import androidx.core.os.CancellationSignal\n+import androidx.lifecycle.Observer\n+import androidx.lifecycle.ViewModelProviders\n+import de.schildbach.wallet.livedata.Status\n+import de.schildbach.wallet.ui.preference.PinRetryController\n+import de.schildbach.wallet.util.FingerprintHelper\n+import kotlinx.android.synthetic.main.fragment_enter_pin.*\n+import org.bitcoinj.wallet.DeterministicSeed\n+\n+/**\n+ * @author:  Eric Britten\n+ *\n+ * DecryptSeedWithPinDialog uses DecryptSeedSharedModel which is derived\n+ * from CheckPinShared model but does not call the onCorrectPinCallback\n+ * event\n+ */\n+\n+class DecryptSeedWithPinDialog : CheckPinDialog() {\n+\n+    companion object {\n+\n+        private val FRAGMENT_TAG = DecryptSeedWithPinDialog::class.java.simpleName\n+\n+        private const val ARG_REQUEST_CODE = \"arg_request_code\"\n+        private const val ARG_PIN_ONLY = \"arg_pin_only\"\n+\n+        @JvmStatic\n+        fun show(activity: AppCompatActivity, requestCode: Int = 0, pinOnly: Boolean = false) {\n+            val checkPinDialog = DecryptSeedWithPinDialog()\n+            if (PinRetryController.getInstance().isLocked) {\n+                checkPinDialog.showLockedAlert(activity)\n+            } else {\n+                val args = Bundle()\n+                args.putInt(ARG_REQUEST_CODE, requestCode)\n+                args.putBoolean(ARG_PIN_ONLY, pinOnly)\n+                checkPinDialog.arguments = args\n+                checkPinDialog.show(activity.supportFragmentManager, FRAGMENT_TAG)\n+            }\n+        }\n+\n+        @JvmStatic\n+        fun show(activity: AppCompatActivity, requestCode: Int = 0) {\n+            show(activity, requestCode, false)\n+        }\n+\n+    }\n+\n+    override fun initViewModel() {\n+        viewModel = ViewModelProviders.of(this).get(DecryptSeedViewModel::class.java)\n+        (viewModel as DecryptSeedViewModel).decryptSeedLiveData.observe(viewLifecycleOwner, Observer {\n+            when (it.status) {\n+                Status.ERROR -> {\n+                    pinRetryController.failedAttempt(it.data!!.second!!)\n+                    if (pinRetryController.isLocked) {\n+                        showLockedAlert(context!!)\n+                        dismiss()\n+                        return@Observer\n+                    }\n+                    setState(State.INVALID_PIN)\n+                }\n+                Status.LOADING -> {\n+                    setState(State.DECRYPTING)\n+                }\n+                Status.SUCCESS -> {\n+                    dismiss(it.data!!.first!!, it.data!!.second!!)\n+                }\n+            }\n+        })\n+    }\n+\n+    private fun dismiss(seed : DeterministicSeed, pin: String) {\n+        if (pinRetryController.isLocked) {\n+            return\n+        }\n+        val requestCode = arguments!!.getInt(ARG_REQUEST_CODE)\n+        (sharedModel as DecryptSeedSharedModel).onDecryptSeedCallback.value = Pair(requestCode, seed)\n+        pinRetryController.clearPinFailPrefs()\n+        dismiss()\n+    }\n+\n+    override fun onActivityCreated(savedInstanceState: Bundle?) {\n+        super.onActivityCreated(savedInstanceState)\n+        activity?.run {\n+            sharedModel = ViewModelProviders.of(this)[DecryptSeedSharedModel::class.java]\n+        } ?: throw IllegalStateException(\"Invalid Activity\")\n+    }\n+\n+    @RequiresApi(api = Build.VERSION_CODES.M)\n+    override fun startFingerprintListener() {\n+        fingerprintCancellationSignal = CancellationSignal()\n+        fingerprintHelper!!.getPassword(fingerprintCancellationSignal, object : FingerprintHelper.Callback {\n+            override fun onSuccess(savedPass: String) {\n+                //dismiss(savedPass)\n+                (viewModel as DecryptSeedViewModel).checkPin(savedPass)\n+            }\n+\n+            override fun onFailure(message: String, canceled: Boolean, exceededMaxAttempts: Boolean) {\n+                if (!canceled) {\n+                    fingerprint_view.showError(exceededMaxAttempts)\n+                }\n+            }\n+\n+            override fun onHelp(helpCode: Int, helpString: String) {\n+                fingerprint_view.showError(false)\n+            }\n+        })\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQyOTYxMw=="}, "originalCommit": {"oid": "c252f3fd4e99de0e3348177fb214b6ec0fd474e7"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ2MjAwMA==", "bodyText": "be53292", "url": "https://github.com/dashevo/dash-wallet/pull/300#discussion_r366462000", "createdAt": "2020-01-14T17:06:07Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/DecryptSeedWithPinDialog.kt", "diffHunk": "@@ -0,0 +1,114 @@\n+package de.schildbach.wallet.ui\n+\n+import android.os.Build\n+import android.os.Bundle\n+import androidx.annotation.RequiresApi\n+import androidx.appcompat.app.AppCompatActivity\n+import androidx.core.os.CancellationSignal\n+import androidx.lifecycle.Observer\n+import androidx.lifecycle.ViewModelProviders\n+import de.schildbach.wallet.livedata.Status\n+import de.schildbach.wallet.ui.preference.PinRetryController\n+import de.schildbach.wallet.util.FingerprintHelper\n+import kotlinx.android.synthetic.main.fragment_enter_pin.*\n+import org.bitcoinj.wallet.DeterministicSeed\n+\n+/**\n+ * @author:  Eric Britten\n+ *\n+ * DecryptSeedWithPinDialog uses DecryptSeedSharedModel which is derived\n+ * from CheckPinShared model but does not call the onCorrectPinCallback\n+ * event\n+ */\n+\n+class DecryptSeedWithPinDialog : CheckPinDialog() {\n+\n+    companion object {\n+\n+        private val FRAGMENT_TAG = DecryptSeedWithPinDialog::class.java.simpleName\n+\n+        private const val ARG_REQUEST_CODE = \"arg_request_code\"\n+        private const val ARG_PIN_ONLY = \"arg_pin_only\"\n+\n+        @JvmStatic\n+        fun show(activity: AppCompatActivity, requestCode: Int = 0, pinOnly: Boolean = false) {\n+            val checkPinDialog = DecryptSeedWithPinDialog()\n+            if (PinRetryController.getInstance().isLocked) {\n+                checkPinDialog.showLockedAlert(activity)\n+            } else {\n+                val args = Bundle()\n+                args.putInt(ARG_REQUEST_CODE, requestCode)\n+                args.putBoolean(ARG_PIN_ONLY, pinOnly)\n+                checkPinDialog.arguments = args\n+                checkPinDialog.show(activity.supportFragmentManager, FRAGMENT_TAG)\n+            }\n+        }\n+\n+        @JvmStatic\n+        fun show(activity: AppCompatActivity, requestCode: Int = 0) {\n+            show(activity, requestCode, false)\n+        }\n+\n+    }\n+\n+    override fun initViewModel() {\n+        viewModel = ViewModelProviders.of(this).get(DecryptSeedViewModel::class.java)\n+        (viewModel as DecryptSeedViewModel).decryptSeedLiveData.observe(viewLifecycleOwner, Observer {\n+            when (it.status) {\n+                Status.ERROR -> {\n+                    pinRetryController.failedAttempt(it.data!!.second!!)\n+                    if (pinRetryController.isLocked) {\n+                        showLockedAlert(context!!)\n+                        dismiss()\n+                        return@Observer\n+                    }\n+                    setState(State.INVALID_PIN)\n+                }\n+                Status.LOADING -> {\n+                    setState(State.DECRYPTING)\n+                }\n+                Status.SUCCESS -> {\n+                    dismiss(it.data!!.first!!, it.data!!.second!!)\n+                }\n+            }\n+        })\n+    }\n+\n+    private fun dismiss(seed : DeterministicSeed, pin: String) {\n+        if (pinRetryController.isLocked) {\n+            return\n+        }\n+        val requestCode = arguments!!.getInt(ARG_REQUEST_CODE)\n+        (sharedModel as DecryptSeedSharedModel).onDecryptSeedCallback.value = Pair(requestCode, seed)\n+        pinRetryController.clearPinFailPrefs()\n+        dismiss()\n+    }\n+\n+    override fun onActivityCreated(savedInstanceState: Bundle?) {\n+        super.onActivityCreated(savedInstanceState)\n+        activity?.run {\n+            sharedModel = ViewModelProviders.of(this)[DecryptSeedSharedModel::class.java]\n+        } ?: throw IllegalStateException(\"Invalid Activity\")\n+    }\n+\n+    @RequiresApi(api = Build.VERSION_CODES.M)\n+    override fun startFingerprintListener() {\n+        fingerprintCancellationSignal = CancellationSignal()\n+        fingerprintHelper!!.getPassword(fingerprintCancellationSignal, object : FingerprintHelper.Callback {\n+            override fun onSuccess(savedPass: String) {\n+                //dismiss(savedPass)\n+                (viewModel as DecryptSeedViewModel).checkPin(savedPass)\n+            }\n+\n+            override fun onFailure(message: String, canceled: Boolean, exceededMaxAttempts: Boolean) {\n+                if (!canceled) {\n+                    fingerprint_view.showError(exceededMaxAttempts)\n+                }\n+            }\n+\n+            override fun onHelp(helpCode: Int, helpString: String) {\n+                fingerprint_view.showError(false)\n+            }\n+        })\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQyOTYxMw=="}, "originalCommit": {"oid": "c252f3fd4e99de0e3348177fb214b6ec0fd474e7"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzkzMzg5OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/ViewSeedActivity.kt", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjoxNzozNlrOFddVdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNzowNTo1MVrOFdfDpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQzMzY1Mg==", "bodyText": "This can be replaced by simple seed.joinToString(\"  \")", "url": "https://github.com/dashevo/dash-wallet/pull/300#discussion_r366433652", "createdAt": "2020-01-14T16:17:36Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/ui/ViewSeedActivity.kt", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2019 Dash Core Group\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package de.schildbach.wallet.ui\n+\n+import android.content.Context\n+import android.content.Intent\n+import android.os.Bundle\n+import de.schildbach.wallet.WalletApplication\n+import de.schildbach.wallet_test.R\n+import kotlinx.android.synthetic.main.activity_view_seed.*\n+\n+/**\n+ * @author Eric Britten\n+ */\n+class ViewSeedActivity : BaseMenuActivity() {\n+\n+    companion object {\n+\n+        private const val EXTRA_SEED = \"extra_seed\"\n+\n+        fun createIntent(context: Context, seed: Array<String>): Intent {\n+            val intent = Intent(context, ViewSeedActivity::class.java)\n+            intent.putExtra(EXTRA_SEED, seed)\n+            return intent\n+        }\n+    }\n+\n+    override fun getLayoutId(): Int {\n+        return R.layout.activity_view_seed\n+    }\n+\n+    private var seed: Array<String> = arrayOf()\n+\n+    override fun onCreate(savedInstanceState: Bundle?) {\n+        super.onCreate(savedInstanceState)\n+        //setContentView(R.layout.activity_verify_seed)\n+\n+        seed = if (intent.extras?.containsKey(EXTRA_SEED)!!) {\n+            intent.extras!!.getStringArray(EXTRA_SEED)!!\n+        } else {\n+            throw IllegalStateException(\"This activity needs to receive a String[] Intent Extra \" +\n+                    \"containing the recovery seed.\")\n+        }\n+\n+        val sb = StringBuilder(12)\n+        seed.forEach {\n+            sb.append(\"$it  \")\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c252f3fd4e99de0e3348177fb214b6ec0fd474e7"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ0Nzg2MA==", "bodyText": "Excellent.", "url": "https://github.com/dashevo/dash-wallet/pull/300#discussion_r366447860", "createdAt": "2020-01-14T16:40:56Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/ViewSeedActivity.kt", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2019 Dash Core Group\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package de.schildbach.wallet.ui\n+\n+import android.content.Context\n+import android.content.Intent\n+import android.os.Bundle\n+import de.schildbach.wallet.WalletApplication\n+import de.schildbach.wallet_test.R\n+import kotlinx.android.synthetic.main.activity_view_seed.*\n+\n+/**\n+ * @author Eric Britten\n+ */\n+class ViewSeedActivity : BaseMenuActivity() {\n+\n+    companion object {\n+\n+        private const val EXTRA_SEED = \"extra_seed\"\n+\n+        fun createIntent(context: Context, seed: Array<String>): Intent {\n+            val intent = Intent(context, ViewSeedActivity::class.java)\n+            intent.putExtra(EXTRA_SEED, seed)\n+            return intent\n+        }\n+    }\n+\n+    override fun getLayoutId(): Int {\n+        return R.layout.activity_view_seed\n+    }\n+\n+    private var seed: Array<String> = arrayOf()\n+\n+    override fun onCreate(savedInstanceState: Bundle?) {\n+        super.onCreate(savedInstanceState)\n+        //setContentView(R.layout.activity_verify_seed)\n+\n+        seed = if (intent.extras?.containsKey(EXTRA_SEED)!!) {\n+            intent.extras!!.getStringArray(EXTRA_SEED)!!\n+        } else {\n+            throw IllegalStateException(\"This activity needs to receive a String[] Intent Extra \" +\n+                    \"containing the recovery seed.\")\n+        }\n+\n+        val sb = StringBuilder(12)\n+        seed.forEach {\n+            sb.append(\"$it  \")\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQzMzY1Mg=="}, "originalCommit": {"oid": "c252f3fd4e99de0e3348177fb214b6ec0fd474e7"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ2MTg2MQ==", "bodyText": "e556361", "url": "https://github.com/dashevo/dash-wallet/pull/300#discussion_r366461861", "createdAt": "2020-01-14T17:05:51Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/ViewSeedActivity.kt", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2019 Dash Core Group\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package de.schildbach.wallet.ui\n+\n+import android.content.Context\n+import android.content.Intent\n+import android.os.Bundle\n+import de.schildbach.wallet.WalletApplication\n+import de.schildbach.wallet_test.R\n+import kotlinx.android.synthetic.main.activity_view_seed.*\n+\n+/**\n+ * @author Eric Britten\n+ */\n+class ViewSeedActivity : BaseMenuActivity() {\n+\n+    companion object {\n+\n+        private const val EXTRA_SEED = \"extra_seed\"\n+\n+        fun createIntent(context: Context, seed: Array<String>): Intent {\n+            val intent = Intent(context, ViewSeedActivity::class.java)\n+            intent.putExtra(EXTRA_SEED, seed)\n+            return intent\n+        }\n+    }\n+\n+    override fun getLayoutId(): Int {\n+        return R.layout.activity_view_seed\n+    }\n+\n+    private var seed: Array<String> = arrayOf()\n+\n+    override fun onCreate(savedInstanceState: Bundle?) {\n+        super.onCreate(savedInstanceState)\n+        //setContentView(R.layout.activity_verify_seed)\n+\n+        seed = if (intent.extras?.containsKey(EXTRA_SEED)!!) {\n+            intent.extras!!.getStringArray(EXTRA_SEED)!!\n+        } else {\n+            throw IllegalStateException(\"This activity needs to receive a String[] Intent Extra \" +\n+                    \"containing the recovery seed.\")\n+        }\n+\n+        val sb = StringBuilder(12)\n+        seed.forEach {\n+            sb.append(\"$it  \")\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQzMzY1Mg=="}, "originalCommit": {"oid": "c252f3fd4e99de0e3348177fb214b6ec0fd474e7"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Mzk1MDk0OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/WalletActivity.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjoyMTo0OFrOFddfrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNzowNTozNlrOFdfDGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQzNjI3MQ==", "bodyText": "You can add the @JvmStatic annotation to createIntent(context: Context, seed: Array<String>) method definition in VerifySeedActivity class in order to be able to simply call VerifySeedActivity.createIntent(this, seedArray) without Companion.", "url": "https://github.com/dashevo/dash-wallet/pull/300#discussion_r366436271", "createdAt": "2020-01-14T16:21:48Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/ui/WalletActivity.java", "diffHunk": "@@ -529,7 +531,31 @@ public void handleRestoreWallet() {\n     }\n \n     public void handleBackupWalletToSeed() {\n-        BackupWalletToSeedDialogFragment.show(getSupportFragmentManager());\n+        handleVerifySeed();\n+    }\n+\n+    private void handleVerifySeed() {\n+        final int AUTH_REQUEST_CODE_VIEW_RECOVERYPHRASE = 1;\n+        DecryptSeedSharedModel decryptSeedSharedModel = ViewModelProviders.of(this).get(DecryptSeedSharedModel.class);\n+        decryptSeedSharedModel.getOnDecryptSeedCallback().observe(this, new Observer<Pair<Integer, DeterministicSeed>>() {\n+\n+            @Override\n+            public void onChanged(Pair<Integer, DeterministicSeed> data) {\n+                switch (data.getFirst()) {\n+                    case AUTH_REQUEST_CODE_VIEW_RECOVERYPHRASE:\n+                        startVerifySeedActivity(data.getSecond());\n+                        break;\n+                }\n+            }\n+        });\n+        DecryptSeedWithPinDialog.show(this, AUTH_REQUEST_CODE_VIEW_RECOVERYPHRASE);\n+    }\n+\n+    private void startVerifySeedActivity(DeterministicSeed seed) {\n+        List<String> mnemonicCode = seed.getMnemonicCode();\n+        String [] seedArray = mnemonicCode.toArray(new String[0]);\n+        Intent intent = VerifySeedActivity.Companion.createIntent(this, seedArray);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c252f3fd4e99de0e3348177fb214b6ec0fd474e7"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ0NjIxMw==", "bodyText": "Thank you for this idea.", "url": "https://github.com/dashevo/dash-wallet/pull/300#discussion_r366446213", "createdAt": "2020-01-14T16:38:10Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/WalletActivity.java", "diffHunk": "@@ -529,7 +531,31 @@ public void handleRestoreWallet() {\n     }\n \n     public void handleBackupWalletToSeed() {\n-        BackupWalletToSeedDialogFragment.show(getSupportFragmentManager());\n+        handleVerifySeed();\n+    }\n+\n+    private void handleVerifySeed() {\n+        final int AUTH_REQUEST_CODE_VIEW_RECOVERYPHRASE = 1;\n+        DecryptSeedSharedModel decryptSeedSharedModel = ViewModelProviders.of(this).get(DecryptSeedSharedModel.class);\n+        decryptSeedSharedModel.getOnDecryptSeedCallback().observe(this, new Observer<Pair<Integer, DeterministicSeed>>() {\n+\n+            @Override\n+            public void onChanged(Pair<Integer, DeterministicSeed> data) {\n+                switch (data.getFirst()) {\n+                    case AUTH_REQUEST_CODE_VIEW_RECOVERYPHRASE:\n+                        startVerifySeedActivity(data.getSecond());\n+                        break;\n+                }\n+            }\n+        });\n+        DecryptSeedWithPinDialog.show(this, AUTH_REQUEST_CODE_VIEW_RECOVERYPHRASE);\n+    }\n+\n+    private void startVerifySeedActivity(DeterministicSeed seed) {\n+        List<String> mnemonicCode = seed.getMnemonicCode();\n+        String [] seedArray = mnemonicCode.toArray(new String[0]);\n+        Intent intent = VerifySeedActivity.Companion.createIntent(this, seedArray);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQzNjI3MQ=="}, "originalCommit": {"oid": "c252f3fd4e99de0e3348177fb214b6ec0fd474e7"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ2MTcyMA==", "bodyText": "82fc9d1", "url": "https://github.com/dashevo/dash-wallet/pull/300#discussion_r366461720", "createdAt": "2020-01-14T17:05:36Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/WalletActivity.java", "diffHunk": "@@ -529,7 +531,31 @@ public void handleRestoreWallet() {\n     }\n \n     public void handleBackupWalletToSeed() {\n-        BackupWalletToSeedDialogFragment.show(getSupportFragmentManager());\n+        handleVerifySeed();\n+    }\n+\n+    private void handleVerifySeed() {\n+        final int AUTH_REQUEST_CODE_VIEW_RECOVERYPHRASE = 1;\n+        DecryptSeedSharedModel decryptSeedSharedModel = ViewModelProviders.of(this).get(DecryptSeedSharedModel.class);\n+        decryptSeedSharedModel.getOnDecryptSeedCallback().observe(this, new Observer<Pair<Integer, DeterministicSeed>>() {\n+\n+            @Override\n+            public void onChanged(Pair<Integer, DeterministicSeed> data) {\n+                switch (data.getFirst()) {\n+                    case AUTH_REQUEST_CODE_VIEW_RECOVERYPHRASE:\n+                        startVerifySeedActivity(data.getSecond());\n+                        break;\n+                }\n+            }\n+        });\n+        DecryptSeedWithPinDialog.show(this, AUTH_REQUEST_CODE_VIEW_RECOVERYPHRASE);\n+    }\n+\n+    private void startVerifySeedActivity(DeterministicSeed seed) {\n+        List<String> mnemonicCode = seed.getMnemonicCode();\n+        String [] seedArray = mnemonicCode.toArray(new String[0]);\n+        Intent intent = VerifySeedActivity.Companion.createIntent(this, seedArray);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQzNjI3MQ=="}, "originalCommit": {"oid": "c252f3fd4e99de0e3348177fb214b6ec0fd474e7"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 695, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}