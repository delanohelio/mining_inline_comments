{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NzE3MzAy", "number": 477, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMDowODo1OFrOEXbIYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMTo0MTo0MlrOEYPxuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTk3MjE5OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/NotificationsForUserLiveData.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMDowODo1OFrOG_NWHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNDowNzozMVrOG_REJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkzMjEyNQ==", "bodyText": "Is it the right approach?\nI generate \"invitationItem\" for each established contacts so that it could be displayed in the history.", "url": "https://github.com/dashevo/dash-wallet/pull/477#discussion_r468932125", "createdAt": "2020-08-12T00:08:58Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/NotificationsForUserLiveData.kt", "diffHunk": "@@ -13,13 +12,17 @@ class NotificationsForUserLiveData(walletApplication: WalletApplication, platfor\n         this.query = userId\n         GlobalScope.launch {\n             val results = arrayListOf<NotificationItem>()\n-            val contactRequests = platformRepo.searchContacts(\"\", UsernameSortOrderBy.DATE_ADDED)\n+            val contactRequests = platformRepo.searchContacts(\"\", UsernameSortOrderBy.DATE_ADDED, true)\n \n-            if(contactRequests.data != null) {\n-                contactRequests.data.filter {\n-                    cr -> cr.dashPayProfile.userId == userId\n+            if (contactRequests.data != null) {\n+                contactRequests.data.filter { cr ->\n+                    cr.dashPayProfile.userId == userId\n                 }.forEach {\n-                    results.add(NotificationItem(it))\n+                    results.add(NotificationItemContact(it))\n+                    if (it.type == UsernameSearchResult.Type.CONTACT_ESTABLISHED) {\n+                        val invitationItem = if (it.incoming) it.copy(toContactRequest = null) else it.copy(fromContactRequest = null)\n+                        results.add(NotificationItemContact(invitationItem, isInvitationOfEstablished = true))\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd7dfccaf81d12e4b0aeeca6db222e470d2b88f5"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk5MzA2Mw==", "bodyText": "very cool.  Splitting into two items seems like a good way to do it.  But I will need to review this more to get a better idea of how it will work.", "url": "https://github.com/dashevo/dash-wallet/pull/477#discussion_r468993063", "createdAt": "2020-08-12T04:07:31Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/NotificationsForUserLiveData.kt", "diffHunk": "@@ -13,13 +12,17 @@ class NotificationsForUserLiveData(walletApplication: WalletApplication, platfor\n         this.query = userId\n         GlobalScope.launch {\n             val results = arrayListOf<NotificationItem>()\n-            val contactRequests = platformRepo.searchContacts(\"\", UsernameSortOrderBy.DATE_ADDED)\n+            val contactRequests = platformRepo.searchContacts(\"\", UsernameSortOrderBy.DATE_ADDED, true)\n \n-            if(contactRequests.data != null) {\n-                contactRequests.data.filter {\n-                    cr -> cr.dashPayProfile.userId == userId\n+            if (contactRequests.data != null) {\n+                contactRequests.data.filter { cr ->\n+                    cr.dashPayProfile.userId == userId\n                 }.forEach {\n-                    results.add(NotificationItem(it))\n+                    results.add(NotificationItemContact(it))\n+                    if (it.type == UsernameSearchResult.Type.CONTACT_ESTABLISHED) {\n+                        val invitationItem = if (it.incoming) it.copy(toContactRequest = null) else it.copy(fromContactRequest = null)\n+                        results.add(NotificationItemContact(invitationItem, isInvitationOfEstablished = true))\n+                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkzMjEyNQ=="}, "originalCommit": {"oid": "bd7dfccaf81d12e4b0aeeca6db222e470d2b88f5"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDM5NDk3OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/data/UsernameSearchResult.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNDoxNjozMVrOG_RMdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTozMjoxNVrOHAapmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk5NTE4OA==", "bodyText": "Here, incoming appears to mean that we received a request first, then we sent our request later.\nOne issue here is that a UserSearchResult is also used for pending contact requests, in which cases toContactRequest will be null.  The NotificationActivity and ContactsFragment.  At this time, I don't think incoming will be used on either screen.\nFor the DashPayUserActivity screen, currently, or at least the way I wrote it, the history is only shown when there is a contact request going both ways (neither toContactRequest or fromContactRequest is null).\nAlso, I think the SearchUserActivity screen also uses UsernameSearchResult to hold a sent request where fromContactRequest is null.  While we don't use incoming in that activity, maybe it is better to make this getter null pointer exception proof.", "url": "https://github.com/dashevo/dash-wallet/pull/477#discussion_r468995188", "createdAt": "2020-08-12T04:16:31Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/data/UsernameSearchResult.kt", "diffHunk": "@@ -1,30 +1,45 @@\n package de.schildbach.wallet.data\n \n-import kotlin.math.max\n-\n data class UsernameSearchResult(val username: String,\n                                 val dashPayProfile: DashPayProfile,\n                                 var toContactRequest: DashPayContactRequest?,\n                                 var fromContactRequest: DashPayContactRequest?) {\n     val requestSent: Boolean\n-            get() = toContactRequest != null\n+        get() = toContactRequest != null\n     val requestReceived: Boolean\n-            get () = fromContactRequest != null\n+        get() = fromContactRequest != null\n     val isPendingRequest: Boolean\n-            get() = requestReceived && !requestSent\n+        get() = requestReceived && !requestSent\n+\n     val date: Long // milliseconds\n-            get() {\n-                return when (requestSent to requestReceived) {\n-                    true to true -> {\n-                        fromContactRequest!!.timestamp\n-                    }\n-                    true to false -> {\n-                        toContactRequest!!.timestamp\n-                    }\n-                    false to true -> {\n-                        fromContactRequest!!.timestamp\n-                    }\n-                    else -> 0.00\n-                }.toLong() * 1000\n-            }\n+        get() {\n+            return when (type) {\n+                Type.CONTACT_ESTABLISHED -> {\n+                    fromContactRequest!!.timestamp\n+                }\n+                Type.REQUEST_SENT -> {\n+                    toContactRequest!!.timestamp\n+                }\n+                Type.REQUEST_RECEIVED -> {\n+                    fromContactRequest!!.timestamp\n+                }\n+            }.toLong() * 1000\n+        }\n+\n+    val type: Type\n+        get() = when (requestSent to requestReceived) {\n+            true to true -> Type.CONTACT_ESTABLISHED\n+            false to true -> Type.REQUEST_RECEIVED\n+            true to false -> Type.REQUEST_SENT\n+            else -> throw IllegalStateException(\"toContactRequest and fromContactRequest can't both be null at the same time\")\n+        }\n+\n+    val incoming: Boolean\n+        get() = toContactRequest!!.timestamp > fromContactRequest!!.timestamp", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd7dfccaf81d12e4b0aeeca6db222e470d2b88f5"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5ODY4Mg==", "bodyText": "I replaced it with a local variable inside NotificationsForUserLiveData.searchNotifications", "url": "https://github.com/dashevo/dash-wallet/pull/477#discussion_r470198682", "createdAt": "2020-08-13T19:32:15Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/data/UsernameSearchResult.kt", "diffHunk": "@@ -1,30 +1,45 @@\n package de.schildbach.wallet.data\n \n-import kotlin.math.max\n-\n data class UsernameSearchResult(val username: String,\n                                 val dashPayProfile: DashPayProfile,\n                                 var toContactRequest: DashPayContactRequest?,\n                                 var fromContactRequest: DashPayContactRequest?) {\n     val requestSent: Boolean\n-            get() = toContactRequest != null\n+        get() = toContactRequest != null\n     val requestReceived: Boolean\n-            get () = fromContactRequest != null\n+        get() = fromContactRequest != null\n     val isPendingRequest: Boolean\n-            get() = requestReceived && !requestSent\n+        get() = requestReceived && !requestSent\n+\n     val date: Long // milliseconds\n-            get() {\n-                return when (requestSent to requestReceived) {\n-                    true to true -> {\n-                        fromContactRequest!!.timestamp\n-                    }\n-                    true to false -> {\n-                        toContactRequest!!.timestamp\n-                    }\n-                    false to true -> {\n-                        fromContactRequest!!.timestamp\n-                    }\n-                    else -> 0.00\n-                }.toLong() * 1000\n-            }\n+        get() {\n+            return when (type) {\n+                Type.CONTACT_ESTABLISHED -> {\n+                    fromContactRequest!!.timestamp\n+                }\n+                Type.REQUEST_SENT -> {\n+                    toContactRequest!!.timestamp\n+                }\n+                Type.REQUEST_RECEIVED -> {\n+                    fromContactRequest!!.timestamp\n+                }\n+            }.toLong() * 1000\n+        }\n+\n+    val type: Type\n+        get() = when (requestSent to requestReceived) {\n+            true to true -> Type.CONTACT_ESTABLISHED\n+            false to true -> Type.REQUEST_RECEIVED\n+            true to false -> Type.REQUEST_SENT\n+            else -> throw IllegalStateException(\"toContactRequest and fromContactRequest can't both be null at the same time\")\n+        }\n+\n+    val incoming: Boolean\n+        get() = toContactRequest!!.timestamp > fromContactRequest!!.timestamp", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk5NTE4OA=="}, "originalCommit": {"oid": "bd7dfccaf81d12e4b0aeeca6db222e470d2b88f5"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODUyNjcyOnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/WalletFragment.kt", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMToxODowNVrOHAeCsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOToyNToyNFrOHAt44A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI1NDI1OA==", "bodyText": "are these changes for debugging?", "url": "https://github.com/dashevo/dash-wallet/pull/477#discussion_r470254258", "createdAt": "2020-08-13T21:18:05Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/WalletFragment.kt", "diffHunk": "@@ -86,9 +91,23 @@ class WalletFragment : Fragment() {\n         if (walletFragmentView == null) {\n             walletFragmentView = inflater.inflate(R.layout.home_content, container, false)\n         }\n+\n+        process()\n+\n         return walletFragmentView\n     }\n \n+    private fun process() {\n+        GlobalScope.launch {\n+            val contactRequests = PlatformRepo1.getInstance().searchContacts(\"\", UsernameSortOrderBy.DATE_ADDED, true)\n+            if(contactRequests.data != null) {\n+                contactRequests.data.forEach {\n+                    println(\"contactRequests:\\t$it\")\n+                }\n+            }\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c9125288946d9b76ed2014017aac470731af40d"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ5OTg1NQ==", "bodyText": "Yeap, I removed them. Good find! :)", "url": "https://github.com/dashevo/dash-wallet/pull/477#discussion_r470499855", "createdAt": "2020-08-14T08:56:58Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/ui/WalletFragment.kt", "diffHunk": "@@ -86,9 +91,23 @@ class WalletFragment : Fragment() {\n         if (walletFragmentView == null) {\n             walletFragmentView = inflater.inflate(R.layout.home_content, container, false)\n         }\n+\n+        process()\n+\n         return walletFragmentView\n     }\n \n+    private fun process() {\n+        GlobalScope.launch {\n+            val contactRequests = PlatformRepo1.getInstance().searchContacts(\"\", UsernameSortOrderBy.DATE_ADDED, true)\n+            if(contactRequests.data != null) {\n+                contactRequests.data.forEach {\n+                    println(\"contactRequests:\\t$it\")\n+                }\n+            }\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI1NDI1OA=="}, "originalCommit": {"oid": "5c9125288946d9b76ed2014017aac470731af40d"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxMzg4OA==", "bodyText": "Removed", "url": "https://github.com/dashevo/dash-wallet/pull/477#discussion_r470513888", "createdAt": "2020-08-14T09:25:24Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/ui/WalletFragment.kt", "diffHunk": "@@ -86,9 +91,23 @@ class WalletFragment : Fragment() {\n         if (walletFragmentView == null) {\n             walletFragmentView = inflater.inflate(R.layout.home_content, container, false)\n         }\n+\n+        process()\n+\n         return walletFragmentView\n     }\n \n+    private fun process() {\n+        GlobalScope.launch {\n+            val contactRequests = PlatformRepo1.getInstance().searchContacts(\"\", UsernameSortOrderBy.DATE_ADDED, true)\n+            if(contactRequests.data != null) {\n+                contactRequests.data.forEach {\n+                    println(\"contactRequests:\\t$it\")\n+                }\n+            }\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI1NDI1OA=="}, "originalCommit": {"oid": "5c9125288946d9b76ed2014017aac470731af40d"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODUzNjAzOnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/NotificationsAdapter.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMToyMTowMFrOHAeITg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOToyNDo0MFrOHAt3Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI1NTY5NA==", "bodyText": "This is the only place that has a conflict with my PR #475, which is pretty impressive.  there are some imports, so the merge process will very easy.", "url": "https://github.com/dashevo/dash-wallet/pull/477#discussion_r470255694", "createdAt": "2020-08-13T21:21:00Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/NotificationsAdapter.kt", "diffHunk": "@@ -115,321 +82,64 @@ class NotificationsAdapter(val context: Context, val wallet: Wallet, val onConta\n     }\n \n     override fun getItemId(position: Int): Long {\n-        return when (results[position].viewType) {\n-            NOTIFICATION_NEW_HEADER -> 1L\n-            NOTIFICATION_NEW_EMPTY -> 2L\n-            NOTIFICATION_CONTACT_REQUEST_RECEIVED -> getLongValue(results[position].notificationItem!!.id)\n-            NOTIFICATION_EARLIER_HEADER -> 3L\n-            NOTIFICATION_CONTACT_ADDED -> getLongValue(results[position].notificationItem!!.id)\n-            NOTIFICATION_PAYMENT -> getLongValue(results[position].notificationItem!!.id)\n-            else -> throw IllegalArgumentException(\"Invalid viewType ${results[position].viewType}\")\n-        }\n-    }\n-\n-    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n-        when (results[position].viewType) {\n-            NOTIFICATION_CONTACT_REQUEST_RECEIVED,\n-            NOTIFICATION_CONTACT_ADDED -> holder.bind(results[position].notificationItem!!.usernameSearchResult!!, results[position].isNew)\n-            NOTIFICATION_NEW_HEADER -> (holder as HeaderViewHolder).bind(R.string.notifications_new)\n-            NOTIFICATION_EARLIER_HEADER -> (holder as HeaderViewHolder).bind(R.string.notifications_earlier)\n-            NOTIFICATION_NEW_EMPTY -> (holder as ImageViewHolder).bind(R.drawable.ic_notification_new_empty, R.string.notifications_none_new)\n-            NOTIFICATION_PAYMENT -> (holder as TransactionViewHolder).bind(results[position].notificationItem!!.tx!!)\n-            else -> throw IllegalArgumentException(\"Invalid viewType ${results[position].viewType}\")\n+        return when (getItemViewType(position)) {\n+            NOTIFICATION_HEADER -> 1L\n+            NOTIFICATION_EMPTY -> 2L\n+            else -> getLongValue(getItem(position).notificationItem.getId())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c9125288946d9b76ed2014017aac470731af40d"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxMzUwMg==", "bodyText": "New polymorphic data model allowed me to simplify this method even more :)\nAlso, I used UUID.randomUUID() for NOTIFICATION_HEADER ID instead of hardcoded number because in NotificationActivity we have two items of this type (New/Earlier) whereas ID should be unique as we as we use the setHasStableIds(true). Previously, when there was a separate type NOTIFICATION_EARLIER_HEADER the uniqueness was assured by hardcoded values. One of advantage of the new approach is that we can have as much header items as we want without the need of creating new item type for each.", "url": "https://github.com/dashevo/dash-wallet/pull/477#discussion_r470513502", "createdAt": "2020-08-14T09:24:40Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/NotificationsAdapter.kt", "diffHunk": "@@ -115,321 +82,64 @@ class NotificationsAdapter(val context: Context, val wallet: Wallet, val onConta\n     }\n \n     override fun getItemId(position: Int): Long {\n-        return when (results[position].viewType) {\n-            NOTIFICATION_NEW_HEADER -> 1L\n-            NOTIFICATION_NEW_EMPTY -> 2L\n-            NOTIFICATION_CONTACT_REQUEST_RECEIVED -> getLongValue(results[position].notificationItem!!.id)\n-            NOTIFICATION_EARLIER_HEADER -> 3L\n-            NOTIFICATION_CONTACT_ADDED -> getLongValue(results[position].notificationItem!!.id)\n-            NOTIFICATION_PAYMENT -> getLongValue(results[position].notificationItem!!.id)\n-            else -> throw IllegalArgumentException(\"Invalid viewType ${results[position].viewType}\")\n-        }\n-    }\n-\n-    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n-        when (results[position].viewType) {\n-            NOTIFICATION_CONTACT_REQUEST_RECEIVED,\n-            NOTIFICATION_CONTACT_ADDED -> holder.bind(results[position].notificationItem!!.usernameSearchResult!!, results[position].isNew)\n-            NOTIFICATION_NEW_HEADER -> (holder as HeaderViewHolder).bind(R.string.notifications_new)\n-            NOTIFICATION_EARLIER_HEADER -> (holder as HeaderViewHolder).bind(R.string.notifications_earlier)\n-            NOTIFICATION_NEW_EMPTY -> (holder as ImageViewHolder).bind(R.drawable.ic_notification_new_empty, R.string.notifications_none_new)\n-            NOTIFICATION_PAYMENT -> (holder as TransactionViewHolder).bind(results[position].notificationItem!!.tx!!)\n-            else -> throw IllegalArgumentException(\"Invalid viewType ${results[position].viewType}\")\n+        return when (getItemViewType(position)) {\n+            NOTIFICATION_HEADER -> 1L\n+            NOTIFICATION_EMPTY -> 2L\n+            else -> getLongValue(getItem(position).notificationItem.getId())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI1NTY5NA=="}, "originalCommit": {"oid": "5c9125288946d9b76ed2014017aac470731af40d"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODU0MDY5OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMToyMjoyNFrOHAeLBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMToyMjoyNFrOHAeLBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI1NjM4OA==", "bodyText": "very good!", "url": "https://github.com/dashevo/dash-wallet/pull/477#discussion_r470256388", "createdAt": "2020-08-13T21:22:24Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -299,9 +299,7 @@ class PlatformRepo private constructor(val walletApplication: WalletApplication)\n                 val usernameSearchResult = UsernameSearchResult(profile.value!!.username,\n                         profile.value!!, toContact, fromContact)\n \n-                // only include contacts that have sent requests to us (we may have accepted them)\n-                // do not include contactRequest that we have sent but have not been accepted\n-                if (usernameSearchResult.requestReceived)\n+                if (usernameSearchResult.requestReceived || (includeSentPending && usernameSearchResult.requestSent))\n                     usernameSearchResults.add(usernameSearchResult)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c9125288946d9b76ed2014017aac470731af40d"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODU5NzcxOnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/notification/ContactViewHolder.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMTo0MTo0MlrOHAet0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOTo0MjowNlrOHAuZwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI2NTI5Ng==", "bodyText": "Very good! this gets the formatting to match the designs. I had no idea how make the display name bold.", "url": "https://github.com/dashevo/dash-wallet/pull/477#discussion_r470265296", "createdAt": "2020-08-13T21:41:42Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/notification/ContactViewHolder.kt", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 Dash Core Group.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package de.schildbach.wallet.ui.dashpay.notification\n+\n+import android.text.Html\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import com.bumptech.glide.Glide\n+import de.schildbach.wallet.data.NotificationItem\n+import de.schildbach.wallet.data.NotificationItemContact\n+import de.schildbach.wallet.data.UsernameSearchResult\n+import de.schildbach.wallet.ui.UserAvatarPlaceholderDrawable\n+import de.schildbach.wallet_test.R\n+import kotlinx.android.synthetic.main.notification_contact_request_received_row.view.*\n+import java.text.SimpleDateFormat\n+import java.util.*\n+\n+open class ContactViewHolder(inflater: LayoutInflater, parent: ViewGroup) :\n+        NotificationViewHolder(R.layout.notification_contact_request_received_row, inflater, parent) {\n+\n+    private val dateFormat = SimpleDateFormat(\"MMM dd, yyyy KK:mm a\", Locale.getDefault())\n+\n+    private fun formatDate(timeStamp: Long): String {\n+        return dateFormat.format(timeStamp).replace(\"AM\", \"am\").replace(\"PM\",\"pm\")\n+    }\n+\n+    override fun bind(notificationItem: NotificationItem, vararg args: Any) {\n+        (notificationItem as NotificationItemContact).run {\n+            bind(usernameSearchResult, (args[0] as Boolean), isInvitationOfEstablished, (args[1] as Boolean), (args[2] as OnContactActionClickListener))\n+        }\n+    }\n+\n+    private fun bind(usernameSearchResult: UsernameSearchResult, isNew: Boolean, isInvitationOfEstablished: Boolean,\n+                     showAvatar: Boolean, onActionClickListener: OnContactActionClickListener? = null) {\n+\n+        val defaultAvatar = UserAvatarPlaceholderDrawable.getDrawable(itemView.context,\n+                usernameSearchResult.username[0])\n+\n+        itemView.apply {\n+            setBackgroundResource(if (isNew) R.drawable.selectable_round_corners else R.drawable.selectable_round_corners_dark)\n+            date.text = formatDate(usernameSearchResult.date)\n+\n+            val dashPayProfile = usernameSearchResult.dashPayProfile\n+            val name = if (dashPayProfile.displayName.isEmpty()) {\n+                dashPayProfile.username\n+            } else {\n+                dashPayProfile.displayName\n+            }\n+\n+            val displayNameResId = when (usernameSearchResult.type) {\n+                UsernameSearchResult.Type.CONTACT_ESTABLISHED -> {\n+                    contact_added.setImageResource(R.drawable.ic_contact_added)\n+                    val sentDate = usernameSearchResult.toContactRequest!!.timestamp\n+                    val receivedDate = usernameSearchResult.fromContactRequest!!.timestamp\n+                    if (sentDate > receivedDate) {\n+                        R.string.notifications_you_have_accepted\n+                    } else {\n+                        R.string.notifications_contact_has_accepted\n+                    }\n+                }\n+                UsernameSearchResult.Type.REQUEST_RECEIVED -> {\n+                    contact_added.setImageResource(R.drawable.ic_add_contact)\n+                    R.string.notifications_you_received\n+                }\n+                UsernameSearchResult.Type.REQUEST_SENT -> {\n+                    contact_added.setImageResource(R.drawable.ic_add_contact)\n+                    R.string.notifications_you_sent\n+                }\n+            }\n+\n+            @Suppress(\"DEPRECATION\")\n+            val displayNameText = context.getString(displayNameResId, \"<b>$name</b>\")\n+            displayName.text = Html.fromHtml(displayNameText)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c9125288946d9b76ed2014017aac470731af40d"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUyMjMwNg==", "bodyText": "I had few ideas, but this one seems to be the best for different languages.", "url": "https://github.com/dashevo/dash-wallet/pull/477#discussion_r470522306", "createdAt": "2020-08-14T09:42:06Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/notification/ContactViewHolder.kt", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 Dash Core Group.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package de.schildbach.wallet.ui.dashpay.notification\n+\n+import android.text.Html\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import com.bumptech.glide.Glide\n+import de.schildbach.wallet.data.NotificationItem\n+import de.schildbach.wallet.data.NotificationItemContact\n+import de.schildbach.wallet.data.UsernameSearchResult\n+import de.schildbach.wallet.ui.UserAvatarPlaceholderDrawable\n+import de.schildbach.wallet_test.R\n+import kotlinx.android.synthetic.main.notification_contact_request_received_row.view.*\n+import java.text.SimpleDateFormat\n+import java.util.*\n+\n+open class ContactViewHolder(inflater: LayoutInflater, parent: ViewGroup) :\n+        NotificationViewHolder(R.layout.notification_contact_request_received_row, inflater, parent) {\n+\n+    private val dateFormat = SimpleDateFormat(\"MMM dd, yyyy KK:mm a\", Locale.getDefault())\n+\n+    private fun formatDate(timeStamp: Long): String {\n+        return dateFormat.format(timeStamp).replace(\"AM\", \"am\").replace(\"PM\",\"pm\")\n+    }\n+\n+    override fun bind(notificationItem: NotificationItem, vararg args: Any) {\n+        (notificationItem as NotificationItemContact).run {\n+            bind(usernameSearchResult, (args[0] as Boolean), isInvitationOfEstablished, (args[1] as Boolean), (args[2] as OnContactActionClickListener))\n+        }\n+    }\n+\n+    private fun bind(usernameSearchResult: UsernameSearchResult, isNew: Boolean, isInvitationOfEstablished: Boolean,\n+                     showAvatar: Boolean, onActionClickListener: OnContactActionClickListener? = null) {\n+\n+        val defaultAvatar = UserAvatarPlaceholderDrawable.getDrawable(itemView.context,\n+                usernameSearchResult.username[0])\n+\n+        itemView.apply {\n+            setBackgroundResource(if (isNew) R.drawable.selectable_round_corners else R.drawable.selectable_round_corners_dark)\n+            date.text = formatDate(usernameSearchResult.date)\n+\n+            val dashPayProfile = usernameSearchResult.dashPayProfile\n+            val name = if (dashPayProfile.displayName.isEmpty()) {\n+                dashPayProfile.username\n+            } else {\n+                dashPayProfile.displayName\n+            }\n+\n+            val displayNameResId = when (usernameSearchResult.type) {\n+                UsernameSearchResult.Type.CONTACT_ESTABLISHED -> {\n+                    contact_added.setImageResource(R.drawable.ic_contact_added)\n+                    val sentDate = usernameSearchResult.toContactRequest!!.timestamp\n+                    val receivedDate = usernameSearchResult.fromContactRequest!!.timestamp\n+                    if (sentDate > receivedDate) {\n+                        R.string.notifications_you_have_accepted\n+                    } else {\n+                        R.string.notifications_contact_has_accepted\n+                    }\n+                }\n+                UsernameSearchResult.Type.REQUEST_RECEIVED -> {\n+                    contact_added.setImageResource(R.drawable.ic_add_contact)\n+                    R.string.notifications_you_received\n+                }\n+                UsernameSearchResult.Type.REQUEST_SENT -> {\n+                    contact_added.setImageResource(R.drawable.ic_add_contact)\n+                    R.string.notifications_you_sent\n+                }\n+            }\n+\n+            @Suppress(\"DEPRECATION\")\n+            val displayNameText = context.getString(displayNameResId, \"<b>$name</b>\")\n+            displayName.text = Html.fromHtml(displayNameText)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI2NTI5Ng=="}, "originalCommit": {"oid": "5c9125288946d9b76ed2014017aac470731af40d"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 567, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}