{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4MzQ1MjIw", "number": 503, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMTozNjozOVrOEnOmiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDozMjo1NVrOEolKtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTY5MTYxOnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/data/DashPayProfileDao.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMTozNjozOVrOHXtgxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjoyNTo1OVrOHY7Qfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYyNDk2NA==", "bodyText": "This looks like my code.  It doesn't match that of DashPayProfileDaoAsync which has better names.\nThese methods should be called loadByUsername and loadByUsernameDistinct\nWe are missing a loadByUserId here compared to DashPayProfileDaoAsync, it is still called load.", "url": "https://github.com/dashevo/dash-wallet/pull/503#discussion_r494624964", "createdAt": "2020-09-24T21:36:39Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/data/DashPayProfileDao.kt", "diffHunk": "@@ -17,6 +17,12 @@ interface DashPayProfileDao {\n     fun loadDistinct(userId: String):\n             LiveData<DashPayProfile?> = load(userId).getDistinct()\n \n+    @Query(\"SELECT * FROM dashpay_profile where username = :username\")\n+    fun loadFromUsername(username: String): LiveData<DashPayProfile?>\n+\n+    fun loadFromUsernameDistinct(userId: String):\n+            LiveData<DashPayProfile?> = loadFromUsername(userId).getDistinct()\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db464b1f2a43227670096381e71f05b8e8a7146b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5ODc1MQ==", "bodyText": "Missing loadByUserId added", "url": "https://github.com/dashevo/dash-wallet/pull/503#discussion_r495898751", "createdAt": "2020-09-28T12:25:59Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/data/DashPayProfileDao.kt", "diffHunk": "@@ -17,6 +17,12 @@ interface DashPayProfileDao {\n     fun loadDistinct(userId: String):\n             LiveData<DashPayProfile?> = load(userId).getDistinct()\n \n+    @Query(\"SELECT * FROM dashpay_profile where username = :username\")\n+    fun loadFromUsername(username: String): LiveData<DashPayProfile?>\n+\n+    fun loadFromUsernameDistinct(userId: String):\n+            LiveData<DashPayProfile?> = loadFromUsername(userId).getDistinct()\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYyNDk2NA=="}, "originalCommit": {"oid": "db464b1f2a43227670096381e71f05b8e8a7146b"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTcxNTY1OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/ContactsBasedLiveData.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMTo0NTo1MVrOHXtvfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMTo0NTo1MVrOHXtvfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYyODczNA==", "bodyText": "Good idea to refactor this code out to a new class, rather than have duplicate code in many classes.", "url": "https://github.com/dashevo/dash-wallet/pull/503#discussion_r494628734", "createdAt": "2020-09-24T21:45:51Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/ContactsBasedLiveData.kt", "diffHunk": "@@ -0,0 +1,35 @@\n+package de.schildbach.wallet.ui.dashpay\n+\n+import androidx.lifecycle.LiveData\n+import de.schildbach.wallet.WalletApplication\n+\n+abstract class ContactsBasedLiveData<T>(val walletApplication: WalletApplication,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db464b1f2a43227670096381e71f05b8e8a7146b"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTg1MzQ4OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/DashPayUserActivityViewModel.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDoyODo0M1rOHZwGGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNTowNzoyMlrOHZyAWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2NDQ0Mw==", "bodyText": "Can this be removed?", "url": "https://github.com/dashevo/dash-wallet/pull/503#discussion_r496764443", "createdAt": "2020-09-29T14:28:43Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/DashPayUserActivityViewModel.kt", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 Dash Core Group.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package de.schildbach.wallet.ui\n+\n+import android.app.Application\n+import androidx.lifecycle.*\n+import de.schildbach.wallet.AppDatabase\n+import de.schildbach.wallet.WalletApplication\n+import de.schildbach.wallet.data.UsernameSearchResult\n+import de.schildbach.wallet.ui.dashpay.NotificationsForUserLiveData\n+import de.schildbach.wallet.ui.dashpay.PlatformRepo\n+import de.schildbach.wallet.ui.dashpay.work.SendContactRequestOperation\n+import kotlinx.coroutines.Dispatchers\n+import org.slf4j.LoggerFactory\n+\n+class DashPayUserActivityViewModel(application: Application) : AndroidViewModel(application) {\n+\n+    companion object {\n+        val log = LoggerFactory.getLogger(DashPayUserActivityViewModel::class.java)\n+    }\n+\n+    private val platformRepo = PlatformRepo.getInstance()\n+    private val walletApplication = application as WalletApplication\n+\n+    lateinit var userData: UsernameSearchResult\n+\n+//    val userLiveData by lazy {\n+//        AppDatabase.getAppDatabase().dashPayProfileDaoAsync().loadByUserIdDistinct(userData.dashPayProfile.userId).switchMap {\n+//            return@switchMap liveData(Dispatchers.IO) {\n+//                userData = platformRepo.loadContactRequestsAndReturn(it)!!\n+//                emit(userData)\n+//            }\n+//        }\n+//    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a30d01d2aef7bb9cadcb0d647a55d13d44e45fc"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc5NTczOQ==", "bodyText": "Removed", "url": "https://github.com/dashevo/dash-wallet/pull/503#discussion_r496795739", "createdAt": "2020-09-29T15:07:22Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/ui/DashPayUserActivityViewModel.kt", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 Dash Core Group.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package de.schildbach.wallet.ui\n+\n+import android.app.Application\n+import androidx.lifecycle.*\n+import de.schildbach.wallet.AppDatabase\n+import de.schildbach.wallet.WalletApplication\n+import de.schildbach.wallet.data.UsernameSearchResult\n+import de.schildbach.wallet.ui.dashpay.NotificationsForUserLiveData\n+import de.schildbach.wallet.ui.dashpay.PlatformRepo\n+import de.schildbach.wallet.ui.dashpay.work.SendContactRequestOperation\n+import kotlinx.coroutines.Dispatchers\n+import org.slf4j.LoggerFactory\n+\n+class DashPayUserActivityViewModel(application: Application) : AndroidViewModel(application) {\n+\n+    companion object {\n+        val log = LoggerFactory.getLogger(DashPayUserActivityViewModel::class.java)\n+    }\n+\n+    private val platformRepo = PlatformRepo.getInstance()\n+    private val walletApplication = application as WalletApplication\n+\n+    lateinit var userData: UsernameSearchResult\n+\n+//    val userLiveData by lazy {\n+//        AppDatabase.getAppDatabase().dashPayProfileDaoAsync().loadByUserIdDistinct(userData.dashPayProfile.userId).switchMap {\n+//            return@switchMap liveData(Dispatchers.IO) {\n+//                userData = platformRepo.loadContactRequestsAndReturn(it)!!\n+//                emit(userData)\n+//            }\n+//        }\n+//    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2NDQ0Mw=="}, "originalCommit": {"oid": "9a30d01d2aef7bb9cadcb0d647a55d13d44e45fc"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTg1NTE1OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/DashPayUserActivityViewModel.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDoyOTowNFrOHZwHLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNTowNzoxMlrOHZx_zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2NDcxOA==", "bodyText": "Can this be removed?", "url": "https://github.com/dashevo/dash-wallet/pull/503#discussion_r496764718", "createdAt": "2020-09-29T14:29:04Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/DashPayUserActivityViewModel.kt", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 Dash Core Group.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package de.schildbach.wallet.ui\n+\n+import android.app.Application\n+import androidx.lifecycle.*\n+import de.schildbach.wallet.AppDatabase\n+import de.schildbach.wallet.WalletApplication\n+import de.schildbach.wallet.data.UsernameSearchResult\n+import de.schildbach.wallet.ui.dashpay.NotificationsForUserLiveData\n+import de.schildbach.wallet.ui.dashpay.PlatformRepo\n+import de.schildbach.wallet.ui.dashpay.work.SendContactRequestOperation\n+import kotlinx.coroutines.Dispatchers\n+import org.slf4j.LoggerFactory\n+\n+class DashPayUserActivityViewModel(application: Application) : AndroidViewModel(application) {\n+\n+    companion object {\n+        val log = LoggerFactory.getLogger(DashPayUserActivityViewModel::class.java)\n+    }\n+\n+    private val platformRepo = PlatformRepo.getInstance()\n+    private val walletApplication = application as WalletApplication\n+\n+    lateinit var userData: UsernameSearchResult\n+\n+//    val userLiveData by lazy {\n+//        AppDatabase.getAppDatabase().dashPayProfileDaoAsync().loadByUserIdDistinct(userData.dashPayProfile.userId).switchMap {\n+//            return@switchMap liveData(Dispatchers.IO) {\n+//                userData = platformRepo.loadContactRequestsAndReturn(it)!!\n+//                emit(userData)\n+//            }\n+//        }\n+//    }\n+\n+    val userLiveData by lazy {\n+        liveData(Dispatchers.IO) {\n+            userData = platformRepo.getUser(userData.username).first()\n+            sendContactRequestState\n+            emit(userData)\n+        }\n+    }\n+\n+    val sendContactRequestState by lazy {\n+        SendContactRequestOperation.operationStatus(application, userData.dashPayProfile.userId)\n+    }\n+\n+//    val userLiveDataObservable by lazy {\n+//        AppDatabase.getAppDatabase().dashPayProfileDaoAsync().loadDistinct(userData.dashPayProfile.userId)\n+//    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a30d01d2aef7bb9cadcb0d647a55d13d44e45fc"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc5NTU5OA==", "bodyText": "Removed", "url": "https://github.com/dashevo/dash-wallet/pull/503#discussion_r496795598", "createdAt": "2020-09-29T15:07:12Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/ui/DashPayUserActivityViewModel.kt", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 Dash Core Group.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package de.schildbach.wallet.ui\n+\n+import android.app.Application\n+import androidx.lifecycle.*\n+import de.schildbach.wallet.AppDatabase\n+import de.schildbach.wallet.WalletApplication\n+import de.schildbach.wallet.data.UsernameSearchResult\n+import de.schildbach.wallet.ui.dashpay.NotificationsForUserLiveData\n+import de.schildbach.wallet.ui.dashpay.PlatformRepo\n+import de.schildbach.wallet.ui.dashpay.work.SendContactRequestOperation\n+import kotlinx.coroutines.Dispatchers\n+import org.slf4j.LoggerFactory\n+\n+class DashPayUserActivityViewModel(application: Application) : AndroidViewModel(application) {\n+\n+    companion object {\n+        val log = LoggerFactory.getLogger(DashPayUserActivityViewModel::class.java)\n+    }\n+\n+    private val platformRepo = PlatformRepo.getInstance()\n+    private val walletApplication = application as WalletApplication\n+\n+    lateinit var userData: UsernameSearchResult\n+\n+//    val userLiveData by lazy {\n+//        AppDatabase.getAppDatabase().dashPayProfileDaoAsync().loadByUserIdDistinct(userData.dashPayProfile.userId).switchMap {\n+//            return@switchMap liveData(Dispatchers.IO) {\n+//                userData = platformRepo.loadContactRequestsAndReturn(it)!!\n+//                emit(userData)\n+//            }\n+//        }\n+//    }\n+\n+    val userLiveData by lazy {\n+        liveData(Dispatchers.IO) {\n+            userData = platformRepo.getUser(userData.username).first()\n+            sendContactRequestState\n+            emit(userData)\n+        }\n+    }\n+\n+    val sendContactRequestState by lazy {\n+        SendContactRequestOperation.operationStatus(application, userData.dashPayProfile.userId)\n+    }\n+\n+//    val userLiveDataObservable by lazy {\n+//        AppDatabase.getAppDatabase().dashPayProfileDaoAsync().loadDistinct(userData.dashPayProfile.userId)\n+//    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2NDcxOA=="}, "originalCommit": {"oid": "9a30d01d2aef7bb9cadcb0d647a55d13d44e45fc"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTg1ODIzOnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/DashPayUserActivityViewModel.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDoyOTozOVrOHZwJEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNTowNzowM1rOHZx_Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2NTIwMw==", "bodyText": "Can this be removed?", "url": "https://github.com/dashevo/dash-wallet/pull/503#discussion_r496765203", "createdAt": "2020-09-29T14:29:39Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/DashPayUserActivityViewModel.kt", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 Dash Core Group.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package de.schildbach.wallet.ui\n+\n+import android.app.Application\n+import androidx.lifecycle.*\n+import de.schildbach.wallet.AppDatabase\n+import de.schildbach.wallet.WalletApplication\n+import de.schildbach.wallet.data.UsernameSearchResult\n+import de.schildbach.wallet.ui.dashpay.NotificationsForUserLiveData\n+import de.schildbach.wallet.ui.dashpay.PlatformRepo\n+import de.schildbach.wallet.ui.dashpay.work.SendContactRequestOperation\n+import kotlinx.coroutines.Dispatchers\n+import org.slf4j.LoggerFactory\n+\n+class DashPayUserActivityViewModel(application: Application) : AndroidViewModel(application) {\n+\n+    companion object {\n+        val log = LoggerFactory.getLogger(DashPayUserActivityViewModel::class.java)\n+    }\n+\n+    private val platformRepo = PlatformRepo.getInstance()\n+    private val walletApplication = application as WalletApplication\n+\n+    lateinit var userData: UsernameSearchResult\n+\n+//    val userLiveData by lazy {\n+//        AppDatabase.getAppDatabase().dashPayProfileDaoAsync().loadByUserIdDistinct(userData.dashPayProfile.userId).switchMap {\n+//            return@switchMap liveData(Dispatchers.IO) {\n+//                userData = platformRepo.loadContactRequestsAndReturn(it)!!\n+//                emit(userData)\n+//            }\n+//        }\n+//    }\n+\n+    val userLiveData by lazy {\n+        liveData(Dispatchers.IO) {\n+            userData = platformRepo.getUser(userData.username).first()\n+            sendContactRequestState\n+            emit(userData)\n+        }\n+    }\n+\n+    val sendContactRequestState by lazy {\n+        SendContactRequestOperation.operationStatus(application, userData.dashPayProfile.userId)\n+    }\n+\n+//    val userLiveDataObservable by lazy {\n+//        AppDatabase.getAppDatabase().dashPayProfileDaoAsync().loadDistinct(userData.dashPayProfile.userId)\n+//    }\n+\n+    fun a() {\n+        val a = MediatorLiveData<UsernameSearchResult>()\n+        a.addSource(AppDatabase.getAppDatabase().dashPayProfileDaoAsync().loadByUserIdDistinct(userData.dashPayProfile.userId), Observer {\n+\n+        })\n+        a.addSource(AppDatabase.getAppDatabase().dashPayContactRequestDaoAsync().loadDistinctToOthers(userData.dashPayProfile.userId), Observer {\n+\n+        })\n+        a.addSource(AppDatabase.getAppDatabase().dashPayContactRequestDaoAsync().loadDistinctFromOthers(userData.dashPayProfile.userId), Observer {\n+\n+        })\n+    }\n+\n+\n+//    fun sendContactRequest(refreshUserData: Boolean) {\n+//        viewModelScope.launch(Dispatchers.IO) {\n+//            try {\n+//                val toUserId = userLiveData.value!!.dashPayProfile.userId\n+//                val username = userLiveData.value!!.username\n+//                val result = platformRepo.sendContactRequest(toUserId)\n+//                if (refreshUserData) {\n+//                    userLiveData.postValue(platformRepo.getUser(userData.username).first())\n+//                } else {\n+//                    userLiveData.value!!.toContactRequest = result\n+//                    userLiveData.postValue(userLiveData.value)  //notify observers\n+//                }\n+//            } catch (ex: Exception) {\n+//                log.error(ex.message, ex)\n+//                userLiveData.postValue(userLiveData.value)  //notify observers\n+//            }\n+//        }\n+//    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a30d01d2aef7bb9cadcb0d647a55d13d44e45fc"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc5NTQ2Nw==", "bodyText": "Removed", "url": "https://github.com/dashevo/dash-wallet/pull/503#discussion_r496795467", "createdAt": "2020-09-29T15:07:03Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/ui/DashPayUserActivityViewModel.kt", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 Dash Core Group.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package de.schildbach.wallet.ui\n+\n+import android.app.Application\n+import androidx.lifecycle.*\n+import de.schildbach.wallet.AppDatabase\n+import de.schildbach.wallet.WalletApplication\n+import de.schildbach.wallet.data.UsernameSearchResult\n+import de.schildbach.wallet.ui.dashpay.NotificationsForUserLiveData\n+import de.schildbach.wallet.ui.dashpay.PlatformRepo\n+import de.schildbach.wallet.ui.dashpay.work.SendContactRequestOperation\n+import kotlinx.coroutines.Dispatchers\n+import org.slf4j.LoggerFactory\n+\n+class DashPayUserActivityViewModel(application: Application) : AndroidViewModel(application) {\n+\n+    companion object {\n+        val log = LoggerFactory.getLogger(DashPayUserActivityViewModel::class.java)\n+    }\n+\n+    private val platformRepo = PlatformRepo.getInstance()\n+    private val walletApplication = application as WalletApplication\n+\n+    lateinit var userData: UsernameSearchResult\n+\n+//    val userLiveData by lazy {\n+//        AppDatabase.getAppDatabase().dashPayProfileDaoAsync().loadByUserIdDistinct(userData.dashPayProfile.userId).switchMap {\n+//            return@switchMap liveData(Dispatchers.IO) {\n+//                userData = platformRepo.loadContactRequestsAndReturn(it)!!\n+//                emit(userData)\n+//            }\n+//        }\n+//    }\n+\n+    val userLiveData by lazy {\n+        liveData(Dispatchers.IO) {\n+            userData = platformRepo.getUser(userData.username).first()\n+            sendContactRequestState\n+            emit(userData)\n+        }\n+    }\n+\n+    val sendContactRequestState by lazy {\n+        SendContactRequestOperation.operationStatus(application, userData.dashPayProfile.userId)\n+    }\n+\n+//    val userLiveDataObservable by lazy {\n+//        AppDatabase.getAppDatabase().dashPayProfileDaoAsync().loadDistinct(userData.dashPayProfile.userId)\n+//    }\n+\n+    fun a() {\n+        val a = MediatorLiveData<UsernameSearchResult>()\n+        a.addSource(AppDatabase.getAppDatabase().dashPayProfileDaoAsync().loadByUserIdDistinct(userData.dashPayProfile.userId), Observer {\n+\n+        })\n+        a.addSource(AppDatabase.getAppDatabase().dashPayContactRequestDaoAsync().loadDistinctToOthers(userData.dashPayProfile.userId), Observer {\n+\n+        })\n+        a.addSource(AppDatabase.getAppDatabase().dashPayContactRequestDaoAsync().loadDistinctFromOthers(userData.dashPayProfile.userId), Observer {\n+\n+        })\n+    }\n+\n+\n+//    fun sendContactRequest(refreshUserData: Boolean) {\n+//        viewModelScope.launch(Dispatchers.IO) {\n+//            try {\n+//                val toUserId = userLiveData.value!!.dashPayProfile.userId\n+//                val username = userLiveData.value!!.username\n+//                val result = platformRepo.sendContactRequest(toUserId)\n+//                if (refreshUserData) {\n+//                    userLiveData.postValue(platformRepo.getUser(userData.username).first())\n+//                } else {\n+//                    userLiveData.value!!.toContactRequest = result\n+//                    userLiveData.postValue(userLiveData.value)  //notify observers\n+//                }\n+//            } catch (ex: Exception) {\n+//                log.error(ex.message, ex)\n+//                userLiveData.postValue(userLiveData.value)  //notify observers\n+//            }\n+//        }\n+//    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2NTIwMw=="}, "originalCommit": {"oid": "9a30d01d2aef7bb9cadcb0d647a55d13d44e45fc"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTg2MDQzOnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/DashPayUserActivityViewModel.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDozMDowNFrOHZwKZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNTowNjowNFrOHZx8YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2NTU0Mw==", "bodyText": "is there a better name for this method?", "url": "https://github.com/dashevo/dash-wallet/pull/503#discussion_r496765543", "createdAt": "2020-09-29T14:30:04Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/DashPayUserActivityViewModel.kt", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 Dash Core Group.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package de.schildbach.wallet.ui\n+\n+import android.app.Application\n+import androidx.lifecycle.*\n+import de.schildbach.wallet.AppDatabase\n+import de.schildbach.wallet.WalletApplication\n+import de.schildbach.wallet.data.UsernameSearchResult\n+import de.schildbach.wallet.ui.dashpay.NotificationsForUserLiveData\n+import de.schildbach.wallet.ui.dashpay.PlatformRepo\n+import de.schildbach.wallet.ui.dashpay.work.SendContactRequestOperation\n+import kotlinx.coroutines.Dispatchers\n+import org.slf4j.LoggerFactory\n+\n+class DashPayUserActivityViewModel(application: Application) : AndroidViewModel(application) {\n+\n+    companion object {\n+        val log = LoggerFactory.getLogger(DashPayUserActivityViewModel::class.java)\n+    }\n+\n+    private val platformRepo = PlatformRepo.getInstance()\n+    private val walletApplication = application as WalletApplication\n+\n+    lateinit var userData: UsernameSearchResult\n+\n+//    val userLiveData by lazy {\n+//        AppDatabase.getAppDatabase().dashPayProfileDaoAsync().loadByUserIdDistinct(userData.dashPayProfile.userId).switchMap {\n+//            return@switchMap liveData(Dispatchers.IO) {\n+//                userData = platformRepo.loadContactRequestsAndReturn(it)!!\n+//                emit(userData)\n+//            }\n+//        }\n+//    }\n+\n+    val userLiveData by lazy {\n+        liveData(Dispatchers.IO) {\n+            userData = platformRepo.getUser(userData.username).first()\n+            sendContactRequestState\n+            emit(userData)\n+        }\n+    }\n+\n+    val sendContactRequestState by lazy {\n+        SendContactRequestOperation.operationStatus(application, userData.dashPayProfile.userId)\n+    }\n+\n+//    val userLiveDataObservable by lazy {\n+//        AppDatabase.getAppDatabase().dashPayProfileDaoAsync().loadDistinct(userData.dashPayProfile.userId)\n+//    }\n+\n+    fun a() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a30d01d2aef7bb9cadcb0d647a55d13d44e45fc"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc5NDcyMA==", "bodyText": "It was a test code.\nRemoved", "url": "https://github.com/dashevo/dash-wallet/pull/503#discussion_r496794720", "createdAt": "2020-09-29T15:06:04Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/ui/DashPayUserActivityViewModel.kt", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 Dash Core Group.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package de.schildbach.wallet.ui\n+\n+import android.app.Application\n+import androidx.lifecycle.*\n+import de.schildbach.wallet.AppDatabase\n+import de.schildbach.wallet.WalletApplication\n+import de.schildbach.wallet.data.UsernameSearchResult\n+import de.schildbach.wallet.ui.dashpay.NotificationsForUserLiveData\n+import de.schildbach.wallet.ui.dashpay.PlatformRepo\n+import de.schildbach.wallet.ui.dashpay.work.SendContactRequestOperation\n+import kotlinx.coroutines.Dispatchers\n+import org.slf4j.LoggerFactory\n+\n+class DashPayUserActivityViewModel(application: Application) : AndroidViewModel(application) {\n+\n+    companion object {\n+        val log = LoggerFactory.getLogger(DashPayUserActivityViewModel::class.java)\n+    }\n+\n+    private val platformRepo = PlatformRepo.getInstance()\n+    private val walletApplication = application as WalletApplication\n+\n+    lateinit var userData: UsernameSearchResult\n+\n+//    val userLiveData by lazy {\n+//        AppDatabase.getAppDatabase().dashPayProfileDaoAsync().loadByUserIdDistinct(userData.dashPayProfile.userId).switchMap {\n+//            return@switchMap liveData(Dispatchers.IO) {\n+//                userData = platformRepo.loadContactRequestsAndReturn(it)!!\n+//                emit(userData)\n+//            }\n+//        }\n+//    }\n+\n+    val userLiveData by lazy {\n+        liveData(Dispatchers.IO) {\n+            userData = platformRepo.getUser(userData.username).first()\n+            sendContactRequestState\n+            emit(userData)\n+        }\n+    }\n+\n+    val sendContactRequestState by lazy {\n+        SendContactRequestOperation.operationStatus(application, userData.dashPayProfile.userId)\n+    }\n+\n+//    val userLiveDataObservable by lazy {\n+//        AppDatabase.getAppDatabase().dashPayProfileDaoAsync().loadDistinct(userData.dashPayProfile.userId)\n+//    }\n+\n+    fun a() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2NTU0Mw=="}, "originalCommit": {"oid": "9a30d01d2aef7bb9cadcb0d647a55d13d44e45fc"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTg3NDQ1OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/ContactSearchResultsAdapter.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDozMjo1NVrOHZwTaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNTowMzozNVrOHZx07A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2Nzg0OQ==", "bodyText": "This alternating background color code was removed in a merged PR from last week:\nhttps://github.com/dashevo/dash-wallet/pull/514/files", "url": "https://github.com/dashevo/dash-wallet/pull/503#discussion_r496767849", "createdAt": "2020-09-29T14:32:55Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/ContactSearchResultsAdapter.kt", "diffHunk": "@@ -78,26 +71,59 @@ class ContactSearchResultsAdapter(private val listener: Listener,\n         return results.size\n     }\n \n+    var sendContactRequestWorkStateMap: Map<String, Resource<WorkInfo>> = mapOf()\n+        set(value) {\n+            field = value\n+            notifyDataSetChanged()\n+        }\n+\n     override fun getItemId(position: Int): Long {\n-        return when (results[position].viewType) {\n-            CONTACT -> PlatformUtils.longHashFromEncodedString(results[position].usernameSearchResult!!.toContactRequest!!.toUserId)\n-            CONTACT_REQUEST -> PlatformUtils.longHashFromEncodedString(results[position].usernameSearchResult!!.fromContactRequest!!.userId)\n+        val item = results[position]\n+        return when (item.viewType) {\n+            CONTACT -> {\n+                if (item.usernameSearchResult!!.type == UsernameSearchResult.Type.CONTACT_ESTABLISHED) {\n+                    PlatformUtils.longHashFromEncodedString(item.usernameSearchResult.toContactRequest!!.toUserId)\n+                } else {\n+                    PlatformUtils.longHashFromEncodedString(item.usernameSearchResult.fromContactRequest!!.userId)\n+                }\n+            }\n             CONTACT_REQUEST_HEADER -> 1L\n             CONTACT_HEADER -> 2L\n-            else -> throw IllegalArgumentException(\"Invalid viewType ${results[position].viewType}\")\n+            else -> throw IllegalArgumentException(\"Invalid viewType ${item.viewType}\")\n         }\n     }\n \n-    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n-        when (results[position].viewType) {\n-            CONTACT, CONTACT_REQUEST -> holder.bind(results[position].usernameSearchResult!!)\n+    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\n+        val item = results[position]\n+        when (item.viewType) {\n+            CONTACT -> {\n+                val sendContactRequestWorkState = sendContactRequestWorkStateMap[item.usernameSearchResult!!.dashPayProfile.userId]\n+                (holder as ContactViewHolder).apply {\n+                    bind(item.usernameSearchResult, sendContactRequestWorkState, itemClickListener, listener)\n+                    if (item.usernameSearchResult.isPendingRequest) {\n+                        setMarginsDp(20, 3, 20, 3)\n+                        setBackgroundResource(R.drawable.selectable_round_corners)\n+                    } else {\n+                        setMarginsDp(0, 0, 0, 0)\n+                        // background color alternates based on first letter\n+                        val colorResId = if (item.usernameSearchResult.dashPayProfile.username[0].toLowerCase().toInt() % 2 != 0) {\n+                            R.color.white\n+                        } else {\n+                            R.color.dash_lighter_gray\n+                        }\n+                        val color = ResourcesCompat.getColor(holder.itemView.resources, colorResId, null)\n+                        setBackgroundColor(color)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a30d01d2aef7bb9cadcb0d647a55d13d44e45fc"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc5MjgxMg==", "bodyText": "This explains my confusion when merging evonet-develop into my code.\nFixed", "url": "https://github.com/dashevo/dash-wallet/pull/503#discussion_r496792812", "createdAt": "2020-09-29T15:03:35Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/ContactSearchResultsAdapter.kt", "diffHunk": "@@ -78,26 +71,59 @@ class ContactSearchResultsAdapter(private val listener: Listener,\n         return results.size\n     }\n \n+    var sendContactRequestWorkStateMap: Map<String, Resource<WorkInfo>> = mapOf()\n+        set(value) {\n+            field = value\n+            notifyDataSetChanged()\n+        }\n+\n     override fun getItemId(position: Int): Long {\n-        return when (results[position].viewType) {\n-            CONTACT -> PlatformUtils.longHashFromEncodedString(results[position].usernameSearchResult!!.toContactRequest!!.toUserId)\n-            CONTACT_REQUEST -> PlatformUtils.longHashFromEncodedString(results[position].usernameSearchResult!!.fromContactRequest!!.userId)\n+        val item = results[position]\n+        return when (item.viewType) {\n+            CONTACT -> {\n+                if (item.usernameSearchResult!!.type == UsernameSearchResult.Type.CONTACT_ESTABLISHED) {\n+                    PlatformUtils.longHashFromEncodedString(item.usernameSearchResult.toContactRequest!!.toUserId)\n+                } else {\n+                    PlatformUtils.longHashFromEncodedString(item.usernameSearchResult.fromContactRequest!!.userId)\n+                }\n+            }\n             CONTACT_REQUEST_HEADER -> 1L\n             CONTACT_HEADER -> 2L\n-            else -> throw IllegalArgumentException(\"Invalid viewType ${results[position].viewType}\")\n+            else -> throw IllegalArgumentException(\"Invalid viewType ${item.viewType}\")\n         }\n     }\n \n-    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n-        when (results[position].viewType) {\n-            CONTACT, CONTACT_REQUEST -> holder.bind(results[position].usernameSearchResult!!)\n+    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\n+        val item = results[position]\n+        when (item.viewType) {\n+            CONTACT -> {\n+                val sendContactRequestWorkState = sendContactRequestWorkStateMap[item.usernameSearchResult!!.dashPayProfile.userId]\n+                (holder as ContactViewHolder).apply {\n+                    bind(item.usernameSearchResult, sendContactRequestWorkState, itemClickListener, listener)\n+                    if (item.usernameSearchResult.isPendingRequest) {\n+                        setMarginsDp(20, 3, 20, 3)\n+                        setBackgroundResource(R.drawable.selectable_round_corners)\n+                    } else {\n+                        setMarginsDp(0, 0, 0, 0)\n+                        // background color alternates based on first letter\n+                        val colorResId = if (item.usernameSearchResult.dashPayProfile.username[0].toLowerCase().toInt() % 2 != 0) {\n+                            R.color.white\n+                        } else {\n+                            R.color.dash_lighter_gray\n+                        }\n+                        val color = ResourcesCompat.getColor(holder.itemView.resources, colorResId, null)\n+                        setBackgroundColor(color)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2Nzg0OQ=="}, "originalCommit": {"oid": "9a30d01d2aef7bb9cadcb0d647a55d13d44e45fc"}, "originalPosition": 112}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 583, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}