{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5ODcwMDgy", "number": 393, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwODozNToxOVrOD3Fe5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjo1Njo1OVrOD72mig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDg4MTAyOnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwODozNToxOVrOGNJCjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMjo1OTo0NVrOGNqEOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQzMjc4Mg==", "bodyText": "This line is redundant", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r416432782", "createdAt": "2020-04-28T08:35:19Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -50,4 +59,68 @@ class PlatformRepo(walletApplication: WalletApplication) {\n             Resource.error(e.localizedMessage, null)\n         }\n     }\n+\n+    //\n+    // Step 1 is to upgrade the wallet to support AuthenticationKeyChains\n+    //\n+    fun addWalletAuthenticationKeys(seed: DeterministicSeed, keyParameter: KeyParameter?): RegistrationResource<Boolean> {\n+        val wallet = walletApplication.wallet\n+        val hasKeys = wallet.hasAuthenticationKeyChains()\n+        if(!hasKeys) {\n+            wallet.initializeAuthenticationKeyChains(seed, keyParameter)\n+            return RegistrationResource.success(RegistrationStep.UPGRADING_WALLET, hasKeys)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dafcc3247a2323d113657e5c6015d366dc974b34"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3Mzg4Mg==", "bodyText": "sure is", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r416973882", "createdAt": "2020-04-28T22:59:45Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -50,4 +59,68 @@ class PlatformRepo(walletApplication: WalletApplication) {\n             Resource.error(e.localizedMessage, null)\n         }\n     }\n+\n+    //\n+    // Step 1 is to upgrade the wallet to support AuthenticationKeyChains\n+    //\n+    fun addWalletAuthenticationKeys(seed: DeterministicSeed, keyParameter: KeyParameter?): RegistrationResource<Boolean> {\n+        val wallet = walletApplication.wallet\n+        val hasKeys = wallet.hasAuthenticationKeyChains()\n+        if(!hasKeys) {\n+            wallet.initializeAuthenticationKeyChains(seed, keyParameter)\n+            return RegistrationResource.success(RegistrationStep.UPGRADING_WALLET, hasKeys)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQzMjc4Mg=="}, "originalCommit": {"oid": "dafcc3247a2323d113657e5c6015d366dc974b34"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDkwMTMwOnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/DashPayViewModel.kt", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwODo0MDoxN1rOGNJPXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNTozMzo0NlrOGPM-3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQzNjA2MA==", "bodyText": "We should probably use a wider scope for this operation, I need to think of it.", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r416436060", "createdAt": "2020-04-28T08:40:17Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/DashPayViewModel.kt", "diffHunk": "@@ -56,4 +72,60 @@ class DashPayViewModel(application: Application) : AndroidViewModel(application)\n         emit(Resource.loading(null))\n         emit(platformRepo.isPlatformAvailable())\n     }\n+    // username registration functions\n+\n+    val createUsernameLiveData = Transformations.switchMap(registerUsernameLiveData) { usernameInfo ->\n+        val wallet = walletApplication.wallet\n+        liveData(Dispatchers.IO) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dafcc3247a2323d113657e5c6015d366dc974b34"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxMDAxMg==", "bodyText": "if we update the database with the identity creation status, then do we need to have the createUsernameLiveData in this view model?\nWhat if we created a thread or used a coroutine to run the createUserName process.  As the process proceeds through each step, we update the database with the current status.  Then views (such as the home screen or others) subscribe to that database.  As the database changes, the views are updated?\nIs that what you mean by scope?", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r418310012", "createdAt": "2020-04-30T21:52:15Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/DashPayViewModel.kt", "diffHunk": "@@ -56,4 +72,60 @@ class DashPayViewModel(application: Application) : AndroidViewModel(application)\n         emit(Resource.loading(null))\n         emit(platformRepo.isPlatformAvailable())\n     }\n+    // username registration functions\n+\n+    val createUsernameLiveData = Transformations.switchMap(registerUsernameLiveData) { usernameInfo ->\n+        val wallet = walletApplication.wallet\n+        liveData(Dispatchers.IO) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQzNjA2MA=="}, "originalCommit": {"oid": "dafcc3247a2323d113657e5c6015d366dc974b34"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ3NDA5OQ==", "bodyText": "Not exactly, I was rather referring to the coroutines scope (https://developer.android.com/topic/libraries/architecture/coroutines). In the current implementation we use livedata scope so the coroutine is only active as long as the createUsernameLiveData is observed by at least one observer (ie CreateUsernameActivity) if you for instance move to the to background before finishing the job it can be suspended or even canceled by the system.\nInitially I was thinking about using an GlobalScope.launch or something similar but finally I came to the conclusion that the identity creating should be treated as a long-running operation and managed by WorkManager (https://developer.android.com/topic/libraries/architecture/workmanager/basics).\nI'm preparing the patch transferring your code to the Worker.\nThe rest remains as you described: the process (managed by WorkManager) proceeds through each step, we update the database with the current status. Then views subscribe to that database. As the database changes, the views are updated.", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r418474099", "createdAt": "2020-05-01T09:18:03Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/DashPayViewModel.kt", "diffHunk": "@@ -56,4 +72,60 @@ class DashPayViewModel(application: Application) : AndroidViewModel(application)\n         emit(Resource.loading(null))\n         emit(platformRepo.isPlatformAvailable())\n     }\n+    // username registration functions\n+\n+    val createUsernameLiveData = Transformations.switchMap(registerUsernameLiveData) { usernameInfo ->\n+        val wallet = walletApplication.wallet\n+        liveData(Dispatchers.IO) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQzNjA2MA=="}, "originalCommit": {"oid": "dafcc3247a2323d113657e5c6015d366dc974b34"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU0MzM2Nw==", "bodyText": "A perfect thing for our use case provided by WorkManager is chained tasks feature. We can define a chain of tasks that has to be completed in order to create identity and the WorkManager will take care of correct execution of each task handling loses oh connectivity etc https://developer.android.com/topic/libraries/architecture/workmanager/advanced", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r418543367", "createdAt": "2020-05-01T13:36:02Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/DashPayViewModel.kt", "diffHunk": "@@ -56,4 +72,60 @@ class DashPayViewModel(application: Application) : AndroidViewModel(application)\n         emit(Resource.loading(null))\n         emit(platformRepo.isPlatformAvailable())\n     }\n+    // username registration functions\n+\n+    val createUsernameLiveData = Transformations.switchMap(registerUsernameLiveData) { usernameInfo ->\n+        val wallet = walletApplication.wallet\n+        liveData(Dispatchers.IO) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQzNjA2MA=="}, "originalCommit": {"oid": "dafcc3247a2323d113657e5c6015d366dc974b34"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU5NDUyNQ==", "bodyText": "That sounds great.", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r418594525", "createdAt": "2020-05-01T15:33:46Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/DashPayViewModel.kt", "diffHunk": "@@ -56,4 +72,60 @@ class DashPayViewModel(application: Application) : AndroidViewModel(application)\n         emit(Resource.loading(null))\n         emit(platformRepo.isPlatformAvailable())\n     }\n+    // username registration functions\n+\n+    val createUsernameLiveData = Transformations.switchMap(registerUsernameLiveData) { usernameInfo ->\n+        val wallet = walletApplication.wallet\n+        liveData(Dispatchers.IO) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQzNjA2MA=="}, "originalCommit": {"oid": "dafcc3247a2323d113657e5c6015d366dc974b34"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODI2NDE4OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/livedata/RegistrationResource.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzoyMDoyMFrOGRGxHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMDoyMToxMlrOGRp-Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU4OTg1NA==", "bodyText": "We can give the val exception a default null value, so we don't have to explicitly pass it as null on lines 25 and 33.", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r420589854", "createdAt": "2020-05-06T07:20:20Z", "author": {"login": "sambarboza"}, "path": "wallet/src/de/schildbach/wallet/livedata/RegistrationResource.kt", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020 Dash Core Group\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package de.schildbach.wallet.livedata\n+\n+import de.schildbach.wallet.livedata.Status.*\n+import java.lang.Exception\n+\n+data class RegistrationResource<out T>(val status: Status, val step: RegistrationStep, val data: T?, val exception: Exception?) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad0a85db7f3bf97c5cfb32a5b578b590543c4eaa"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2NjY4Ng==", "bodyText": "RegistrationResource has been removed", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r421166686", "createdAt": "2020-05-07T00:21:12Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/livedata/RegistrationResource.kt", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020 Dash Core Group\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package de.schildbach.wallet.livedata\n+\n+import de.schildbach.wallet.livedata.Status.*\n+import java.lang.Exception\n+\n+data class RegistrationResource<out T>(val status: Status, val step: RegistrationStep, val data: T?, val exception: Exception?) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU4OTg1NA=="}, "originalCommit": {"oid": "ad0a85db7f3bf97c5cfb32a5b578b590543c4eaa"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODI4NTgwOnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/livedata/RegistrationStep.kt", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzoyNzoxOFrOGRG-QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNTowMTo1M1rOGT2I_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU5MzIxNw==", "bodyText": "Any reason to not use IdentityCreationState.State or replace it? Both seems to contain the same information.", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r420593217", "createdAt": "2020-05-06T07:27:18Z", "author": {"login": "sambarboza"}, "path": "wallet/src/de/schildbach/wallet/livedata/RegistrationStep.kt", "diffHunk": "@@ -0,0 +1,16 @@\n+package de.schildbach.wallet.livedata\n+\n+enum class RegistrationStep {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad0a85db7f3bf97c5cfb32a5b578b590543c4eaa"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2NjU3MA==", "bodyText": "RegistrationStep has been removed.", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r421166570", "createdAt": "2020-05-07T00:20:51Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/livedata/RegistrationStep.kt", "diffHunk": "@@ -0,0 +1,16 @@\n+package de.schildbach.wallet.livedata\n+\n+enum class RegistrationStep {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU5MzIxNw=="}, "originalCommit": {"oid": "ad0a85db7f3bf97c5cfb32a5b578b590543c4eaa"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ2MzE2Nw==", "bodyText": "Removed here: 1df4586", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r423463167", "createdAt": "2020-05-12T05:01:53Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/livedata/RegistrationStep.kt", "diffHunk": "@@ -0,0 +1,16 @@\n+package de.schildbach.wallet.livedata\n+\n+enum class RegistrationStep {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU5MzIxNw=="}, "originalCommit": {"oid": "ad0a85db7f3bf97c5cfb32a5b578b590543c4eaa"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTQ3ODAwOnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/CreateUsernameActivity.kt", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMTozMDo1MlrOGRmMHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNTowMToxNVrOGT2IeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEwNDY3MA==", "bodyText": "Can we move the two observers below, or their setup, outside the onCreated method?", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r421104670", "createdAt": "2020-05-06T21:30:52Z", "author": {"login": "sambarboza"}, "path": "wallet/src/de/schildbach/wallet/ui/CreateUsernameActivity.kt", "diffHunk": "@@ -78,44 +85,100 @@ class CreateUsernameActivity : InteractionAwareActivity(), TextWatcher {\n             showCompleteState()\n         }\n \n+        walletApplication = application as WalletApplication", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad0a85db7f3bf97c5cfb32a5b578b590543c4eaa"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2NjQ1MA==", "bodyText": "yes", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r421166450", "createdAt": "2020-05-07T00:20:29Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/CreateUsernameActivity.kt", "diffHunk": "@@ -78,44 +85,100 @@ class CreateUsernameActivity : InteractionAwareActivity(), TextWatcher {\n             showCompleteState()\n         }\n \n+        walletApplication = application as WalletApplication", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEwNDY3MA=="}, "originalCommit": {"oid": "ad0a85db7f3bf97c5cfb32a5b578b590543c4eaa"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ2MzAzMg==", "bodyText": "observers moved to initViewModel method here:  07f06f1", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r423463032", "createdAt": "2020-05-12T05:01:15Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/CreateUsernameActivity.kt", "diffHunk": "@@ -78,44 +85,100 @@ class CreateUsernameActivity : InteractionAwareActivity(), TextWatcher {\n             showCompleteState()\n         }\n \n+        walletApplication = application as WalletApplication", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEwNDY3MA=="}, "originalCommit": {"oid": "ad0a85db7f3bf97c5cfb32a5b578b590543c4eaa"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTQ4NTQ2OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/CreateUsernameActivity.kt", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMTozMzoyN1rOGRmQug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNToxOToyOFrOGT2bDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEwNTg1MA==", "bodyText": "We can use walletApplication.wallet, since walletApplication was already defined in line 88.", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r421105850", "createdAt": "2020-05-06T21:33:27Z", "author": {"login": "sambarboza"}, "path": "wallet/src/de/schildbach/wallet/ui/CreateUsernameActivity.kt", "diffHunk": "@@ -78,44 +85,100 @@ class CreateUsernameActivity : InteractionAwareActivity(), TextWatcher {\n             showCompleteState()\n         }\n \n+        walletApplication = application as WalletApplication\n+\n         val confirmTransactionSharedViewModel = ViewModelProviders.of(this)\n                 .get(SingleActionSharedViewModel::class.java)\n         confirmTransactionSharedViewModel.clickConfirmButtonEvent.observe(this, Observer {\n+            // setup the wallet\n+            val wallet = (application as WalletApplication).wallet", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad0a85db7f3bf97c5cfb32a5b578b590543c4eaa"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2NjQwNg==", "bodyText": "excellent", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r421166406", "createdAt": "2020-05-07T00:20:22Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/CreateUsernameActivity.kt", "diffHunk": "@@ -78,44 +85,100 @@ class CreateUsernameActivity : InteractionAwareActivity(), TextWatcher {\n             showCompleteState()\n         }\n \n+        walletApplication = application as WalletApplication\n+\n         val confirmTransactionSharedViewModel = ViewModelProviders.of(this)\n                 .get(SingleActionSharedViewModel::class.java)\n         confirmTransactionSharedViewModel.clickConfirmButtonEvent.observe(this, Observer {\n+            // setup the wallet\n+            val wallet = (application as WalletApplication).wallet", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEwNTg1MA=="}, "originalCommit": {"oid": "ad0a85db7f3bf97c5cfb32a5b578b590543c4eaa"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ2Nzc4OQ==", "bodyText": "I think that was changed here:  07f06f1", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r423467789", "createdAt": "2020-05-12T05:19:28Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/CreateUsernameActivity.kt", "diffHunk": "@@ -78,44 +85,100 @@ class CreateUsernameActivity : InteractionAwareActivity(), TextWatcher {\n             showCompleteState()\n         }\n \n+        walletApplication = application as WalletApplication\n+\n         val confirmTransactionSharedViewModel = ViewModelProviders.of(this)\n                 .get(SingleActionSharedViewModel::class.java)\n         confirmTransactionSharedViewModel.clickConfirmButtonEvent.observe(this, Observer {\n+            // setup the wallet\n+            val wallet = (application as WalletApplication).wallet", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEwNTg1MA=="}, "originalCommit": {"oid": "ad0a85db7f3bf97c5cfb32a5b578b590543c4eaa"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTQ5MDY4OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/CreateUsernameActivity.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMTozNToxM1rOGRmT4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMDoxNzoxOVrOGRp5RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEwNjY1Ng==", "bodyText": "Will we still need this code?", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r421106656", "createdAt": "2020-05-06T21:35:13Z", "author": {"login": "sambarboza"}, "path": "wallet/src/de/schildbach/wallet/ui/CreateUsernameActivity.kt", "diffHunk": "@@ -78,44 +85,100 @@ class CreateUsernameActivity : InteractionAwareActivity(), TextWatcher {\n             showCompleteState()\n         }\n \n+        walletApplication = application as WalletApplication\n+\n         val confirmTransactionSharedViewModel = ViewModelProviders.of(this)\n                 .get(SingleActionSharedViewModel::class.java)\n         confirmTransactionSharedViewModel.clickConfirmButtonEvent.observe(this, Observer {\n+            // setup the wallet\n+            val wallet = (application as WalletApplication).wallet\n+\n+            //get key parameter\n+            val username = username.text.toString()\n+            if (wallet.isEncrypted) {\n+                ContextCompat.startForegroundService(this, createIntent(this, username))\n+\n+                // finish this activity on error or when registration is complete\n+                AppDatabase.getAppDatabase().identityCreationStateDao().load().observe(this, Observer {\n+                    if (it != null && it.error) {\n+                        finish()\n+                    } else when (it?.state) {\n+                        IdentityCreationState.State.USERNAME_REGISTERED -> {\n+                            finish()\n+                        }\n+                    }\n+                })\n+            } else {\n+                dashPayViewModel.createUsername(username, wallet.keyChainSeed, null)\n+            }\n             showProcessingState()\n         })\n \n         dashPayViewModel = ViewModelProvider(this).get(DashPayViewModel::class.java)\n \n         dashPayViewModel.getUsernameLiveData.observe(this, Observer {\n+            username_exists_req.visibility = View.VISIBLE\n+            username_exists_req_label.visibility = View.VISIBLE\n             when (it.status) {\n                 Status.LOADING -> {\n-                    register_btn.isEnabled = false\n-                    username_exists_req_label.visibility = View.GONE\n-                    username_exists_req_img.visibility = View.GONE\n+                    // this is delayed therefore the UI state is configured before calling checkUsernameNotExist(...)\n                 }\n                 Status.ERROR -> {\n-                    // Some error happened when communicating with Platform\n-                    // nothing is currently reported to the user\n+                    username_exists_req_progress.visibility = View.INVISIBLE\n+                    username_exists_req_img.visibility = View.VISIBLE\n+                    username_exists_req_img.setImageResource(R.drawable.ic_username_requirement_x)\n+                    username_exists_req_label.typeface = mediumTypeFace\n+                    username_exists_req_label.setTextColor(ResourcesCompat.getColor(resources, R.color.dash_red, null))\n+                    username_exists_req_label.setText(R.string.platform_communication_error)\n                     register_btn.isEnabled = false\n-                    username_exists_req_label.visibility = View.GONE\n-                    username_exists_req_img.visibility = View.GONE\n                 }\n                 Status.SUCCESS -> {\n                     if (it.data != null) {\n                         // This user name exists\n-                        register_btn.isEnabled = false\n-                        username_exists_req_label.visibility = View.VISIBLE\n+                        username_exists_req_progress.visibility = View.INVISIBLE\n                         username_exists_req_img.visibility = View.VISIBLE\n+                        username_exists_req_img.setImageResource(R.drawable.ic_username_requirement_x)\n+                        username_exists_req_label.typeface = mediumTypeFace\n+                        username_exists_req_label.setTextColor(ResourcesCompat.getColor(resources, R.color.dash_red, null))\n+                        username_exists_req_label.setText(R.string.identity_username_taken)\n+                        register_btn.isEnabled = false\n                     } else {\n+                        username_exists_req_progress.visibility = View.INVISIBLE\n+                        username_exists_req_img.visibility = View.VISIBLE\n+                        username_exists_req_img.setImageResource(R.drawable.ic_username_requirement_checkmark)\n+                        username_exists_req_label.typeface = mediumTypeFace\n+                        username_exists_req_label.setTextColor(ResourcesCompat.getColor(resources, R.color.dark_text, null))\n+                        username_exists_req_label.setText(R.string.identity__username_available)\n                         register_btn.isEnabled = true\n-                        username_exists_req_label.visibility = View.GONE\n-                        username_exists_req_img.visibility = View.GONE\n                     }\n                 }\n             }\n         })\n+\n+//        dashPayViewModel.createUsernameLiveData.observe(this, Observer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad0a85db7f3bf97c5cfb32a5b578b590543c4eaa"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2NTM4MA==", "bodyText": "This is not needed and will be removed", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r421165380", "createdAt": "2020-05-07T00:17:19Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/CreateUsernameActivity.kt", "diffHunk": "@@ -78,44 +85,100 @@ class CreateUsernameActivity : InteractionAwareActivity(), TextWatcher {\n             showCompleteState()\n         }\n \n+        walletApplication = application as WalletApplication\n+\n         val confirmTransactionSharedViewModel = ViewModelProviders.of(this)\n                 .get(SingleActionSharedViewModel::class.java)\n         confirmTransactionSharedViewModel.clickConfirmButtonEvent.observe(this, Observer {\n+            // setup the wallet\n+            val wallet = (application as WalletApplication).wallet\n+\n+            //get key parameter\n+            val username = username.text.toString()\n+            if (wallet.isEncrypted) {\n+                ContextCompat.startForegroundService(this, createIntent(this, username))\n+\n+                // finish this activity on error or when registration is complete\n+                AppDatabase.getAppDatabase().identityCreationStateDao().load().observe(this, Observer {\n+                    if (it != null && it.error) {\n+                        finish()\n+                    } else when (it?.state) {\n+                        IdentityCreationState.State.USERNAME_REGISTERED -> {\n+                            finish()\n+                        }\n+                    }\n+                })\n+            } else {\n+                dashPayViewModel.createUsername(username, wallet.keyChainSeed, null)\n+            }\n             showProcessingState()\n         })\n \n         dashPayViewModel = ViewModelProvider(this).get(DashPayViewModel::class.java)\n \n         dashPayViewModel.getUsernameLiveData.observe(this, Observer {\n+            username_exists_req.visibility = View.VISIBLE\n+            username_exists_req_label.visibility = View.VISIBLE\n             when (it.status) {\n                 Status.LOADING -> {\n-                    register_btn.isEnabled = false\n-                    username_exists_req_label.visibility = View.GONE\n-                    username_exists_req_img.visibility = View.GONE\n+                    // this is delayed therefore the UI state is configured before calling checkUsernameNotExist(...)\n                 }\n                 Status.ERROR -> {\n-                    // Some error happened when communicating with Platform\n-                    // nothing is currently reported to the user\n+                    username_exists_req_progress.visibility = View.INVISIBLE\n+                    username_exists_req_img.visibility = View.VISIBLE\n+                    username_exists_req_img.setImageResource(R.drawable.ic_username_requirement_x)\n+                    username_exists_req_label.typeface = mediumTypeFace\n+                    username_exists_req_label.setTextColor(ResourcesCompat.getColor(resources, R.color.dash_red, null))\n+                    username_exists_req_label.setText(R.string.platform_communication_error)\n                     register_btn.isEnabled = false\n-                    username_exists_req_label.visibility = View.GONE\n-                    username_exists_req_img.visibility = View.GONE\n                 }\n                 Status.SUCCESS -> {\n                     if (it.data != null) {\n                         // This user name exists\n-                        register_btn.isEnabled = false\n-                        username_exists_req_label.visibility = View.VISIBLE\n+                        username_exists_req_progress.visibility = View.INVISIBLE\n                         username_exists_req_img.visibility = View.VISIBLE\n+                        username_exists_req_img.setImageResource(R.drawable.ic_username_requirement_x)\n+                        username_exists_req_label.typeface = mediumTypeFace\n+                        username_exists_req_label.setTextColor(ResourcesCompat.getColor(resources, R.color.dash_red, null))\n+                        username_exists_req_label.setText(R.string.identity_username_taken)\n+                        register_btn.isEnabled = false\n                     } else {\n+                        username_exists_req_progress.visibility = View.INVISIBLE\n+                        username_exists_req_img.visibility = View.VISIBLE\n+                        username_exists_req_img.setImageResource(R.drawable.ic_username_requirement_checkmark)\n+                        username_exists_req_label.typeface = mediumTypeFace\n+                        username_exists_req_label.setTextColor(ResourcesCompat.getColor(resources, R.color.dark_text, null))\n+                        username_exists_req_label.setText(R.string.identity__username_available)\n                         register_btn.isEnabled = true\n-                        username_exists_req_label.visibility = View.GONE\n-                        username_exists_req_img.visibility = View.GONE\n                     }\n                 }\n             }\n         })\n+\n+//        dashPayViewModel.createUsernameLiveData.observe(this, Observer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEwNjY1Ng=="}, "originalCommit": {"oid": "ad0a85db7f3bf97c5cfb32a5b578b590543c4eaa"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTQ5MzAxOnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/CreateUsernameActivity.kt", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMTozNTo1OFrOGRmVNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNToxODo0OVrOGT2agA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEwNjk5OA==", "bodyText": "Will we need this?", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r421106998", "createdAt": "2020-05-06T21:35:58Z", "author": {"login": "sambarboza"}, "path": "wallet/src/de/schildbach/wallet/ui/CreateUsernameActivity.kt", "diffHunk": "@@ -229,4 +299,33 @@ class CreateUsernameActivity : InteractionAwareActivity(), TextWatcher {\n     override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\n     }\n \n+//    private fun handleDecryptPIN(password: String) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad0a85db7f3bf97c5cfb32a5b578b590543c4eaa"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2NDkwNw==", "bodyText": "we won't need this. the code was \"moved\" to the service", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r421164907", "createdAt": "2020-05-07T00:15:39Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/CreateUsernameActivity.kt", "diffHunk": "@@ -229,4 +299,33 @@ class CreateUsernameActivity : InteractionAwareActivity(), TextWatcher {\n     override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\n     }\n \n+//    private fun handleDecryptPIN(password: String) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEwNjk5OA=="}, "originalCommit": {"oid": "ad0a85db7f3bf97c5cfb32a5b578b590543c4eaa"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2NTE5OQ==", "bodyText": "now this code has been removed", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r421165199", "createdAt": "2020-05-07T00:16:37Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/CreateUsernameActivity.kt", "diffHunk": "@@ -229,4 +299,33 @@ class CreateUsernameActivity : InteractionAwareActivity(), TextWatcher {\n     override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\n     }\n \n+//    private fun handleDecryptPIN(password: String) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEwNjk5OA=="}, "originalCommit": {"oid": "ad0a85db7f3bf97c5cfb32a5b578b590543c4eaa"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ2NzY0OA==", "bodyText": "removed:  1df4586", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r423467648", "createdAt": "2020-05-12T05:18:49Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/CreateUsernameActivity.kt", "diffHunk": "@@ -229,4 +299,33 @@ class CreateUsernameActivity : InteractionAwareActivity(), TextWatcher {\n     override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\n     }\n \n+//    private fun handleDecryptPIN(password: String) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEwNjk5OA=="}, "originalCommit": {"oid": "ad0a85db7f3bf97c5cfb32a5b578b590543c4eaa"}, "originalPosition": 198}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTQ5NTQ3OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/WalletActivity.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMTozNjo0MlrOGRmWlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNToxNzo0M1rOGT2ZUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEwNzM0OA==", "bodyText": "It seems that these imports are not being used.", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r421107348", "createdAt": "2020-05-06T21:36:42Z", "author": {"login": "sambarboza"}, "path": "wallet/src/de/schildbach/wallet/ui/WalletActivity.java", "diffHunk": "@@ -65,6 +65,8 @@\n \n import de.schildbach.wallet.livedata.Resource;\n import de.schildbach.wallet.livedata.Status;\n+import de.schildbach.wallet.service.InactivityNotificationService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad0a85db7f3bf97c5cfb32a5b578b590543c4eaa"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ2NzM0NA==", "bodyText": "Removed: a97121d", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r423467344", "createdAt": "2020-05-12T05:17:43Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/WalletActivity.java", "diffHunk": "@@ -65,6 +65,8 @@\n \n import de.schildbach.wallet.livedata.Resource;\n import de.schildbach.wallet.livedata.Status;\n+import de.schildbach.wallet.service.InactivityNotificationService;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEwNzM0OA=="}, "originalCommit": {"oid": "ad0a85db7f3bf97c5cfb32a5b578b590543c4eaa"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTUwMzMwOnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/CreateIdentityService.kt", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMTozOToyMlrOGRmbOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNToxODowOFrOGT2Zyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEwODUzOQ==", "bodyText": "Is the code below for testing purposes only?", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r421108539", "createdAt": "2020-05-06T21:39:22Z", "author": {"login": "sambarboza"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/CreateIdentityService.kt", "diffHunk": "@@ -0,0 +1,228 @@\n+package de.schildbach.wallet.ui.dashpay\n+\n+import android.content.Context\n+import android.content.Intent\n+import android.os.Handler\n+import androidx.lifecycle.LifecycleService\n+import de.schildbach.wallet.AppDatabase\n+import de.schildbach.wallet.WalletApplication\n+import de.schildbach.wallet.data.IdentityCreationState\n+import de.schildbach.wallet.ui.security.SecurityGuard\n+import de.schildbach.wallet.ui.send.DecryptSeedTask\n+import de.schildbach.wallet.ui.send.DeriveKeyTask\n+import kotlinx.coroutines.*\n+import org.bitcoinj.crypto.KeyCrypterException\n+import org.bitcoinj.wallet.DeterministicSeed\n+import org.bitcoinj.wallet.Wallet\n+import org.bouncycastle.crypto.params.KeyParameter\n+import org.dashevo.dashpay.BlockchainIdentity\n+import org.dashevo.dpp.identity.Identity\n+import org.slf4j.LoggerFactory\n+import java.io.IOException\n+import kotlin.coroutines.resume\n+import kotlin.coroutines.resumeWithException\n+import kotlin.coroutines.suspendCoroutine\n+import kotlin.random.Random\n+\n+\n+class CreateIdentityService : LifecycleService() {\n+\n+    companion object {\n+        private val log = LoggerFactory.getLogger(CreateIdentityService::class.java)\n+\n+        private const val ACTION_CREATE_IDENTITY = \"org.dash.dashpay.action.CREATE_IDENTITY\"\n+\n+        private const val EXTRA_USERNAME = \"org.dash.dashpay.extra.USERNAME\"\n+\n+        @JvmStatic\n+        fun createIntent(context: Context, username: String): Intent {\n+            return Intent(context, CreateIdentityService::class.java).apply {\n+                action = ACTION_CREATE_IDENTITY\n+                putExtra(EXTRA_USERNAME, username)\n+            }\n+        }\n+    }\n+\n+    private val walletApplication by lazy { application as WalletApplication }\n+    private val platformRepo by lazy { PlatformRepo(walletApplication) }\n+    private lateinit var securityGuard: SecurityGuard\n+\n+    private val identityCreationStateDaoAsync = AppDatabase.getAppDatabase().identityCreationStateDaoAsync()\n+\n+    private val createIdentityNotification by lazy { CreateIdentityNotification(this) }\n+\n+    private val serviceJob = Job()\n+    private val serviceScope = CoroutineScope(serviceJob + Dispatchers.Main)\n+\n+    lateinit var identityCreationState: IdentityCreationState\n+\n+    override fun onCreate() {\n+        super.onCreate()\n+        try {\n+            securityGuard = SecurityGuard()\n+        } catch (e: Exception) {\n+            log.error(\"Unable to instantiate SecurityGuard\", e)\n+            stopSelf()\n+            return\n+        }\n+        createIdentityNotification.startServiceForeground()\n+    }\n+\n+    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\n+        super.onStartCommand(intent, flags, startId)\n+\n+        if (intent != null) {\n+\n+            when (intent.action) {\n+                ACTION_CREATE_IDENTITY -> handleCreateIdentityAction(intent)\n+            }\n+        }\n+\n+        return START_NOT_STICKY\n+    }\n+\n+    private fun handleCreateIdentityAction(intent: Intent) {\n+        val username = intent.getStringExtra(EXTRA_USERNAME)\n+\n+        val exceptionHandler = CoroutineExceptionHandler { _, exception ->\n+            log.error(\"[${identityCreationState.state}(error)]\", exception)\n+            GlobalScope.launch {\n+                updateState(identityCreationState.state, true)\n+//                stopSelf()\n+            }\n+        }\n+\n+        serviceScope.launch(exceptionHandler) {\n+            createIdentity(username)\n+            stopSelf()\n+        }\n+    }\n+\n+    private suspend fun createIdentity(username: String) {\n+\n+        //identityCreationState = identityCreationStateDaoAsync.load()\n+        //        ?: IdentityCreationState(IdentityCreationState.State.UPGRADING_WALLET, false, username)\n+        identityCreationState = IdentityCreationState(IdentityCreationState.State.UPGRADING_WALLET, false, username)\n+        identityCreationStateDaoAsync.insert(identityCreationState)\n+\n+        if (identityCreationState.state != IdentityCreationState.State.UPGRADING_WALLET || identityCreationState.error) {\n+            log.info(\"resuming identity creation process [${identityCreationState.state}${if (identityCreationState.error) \"(error)\" else \"\"}]\")\n+        }\n+\n+        val handler = Handler()\n+        val wallet = walletApplication.wallet\n+        val password = securityGuard.retrievePassword()\n+\n+        val encryptionKey = deriveKey(handler, wallet, password)\n+        val seed = decryptSeed(handler, wallet, encryptionKey)\n+\n+//        val usernameInfo = CreateUsernameInfo(username, seed, encryptionKey)\n+\n+\n+        platformRepo.addWalletAuthenticationKeysAsync(seed, encryptionKey)\n+\n+        updateState(IdentityCreationState.State.CREDIT_FUNDING_TX_SENDING)\n+\n+        //create the Blockchain Identity object (this needs to be saved somewhere eventually)\n+        val blockchainIdentity = BlockchainIdentity(Identity.IdentityType.USER, 0, wallet)\n+\n+        platformRepo.createCreditFundingTransactionAsync(blockchainIdentity, encryptionKey)\n+\n+        walletApplication.broadcastTransaction(blockchainIdentity.creditFundingTransaction)\n+\n+        updateState(IdentityCreationState.State.CREDIT_FUNDING_TX_SENT)\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad0a85db7f3bf97c5cfb32a5b578b590543c4eaa"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0ODkwNQ==", "bodyText": "Some of it is for testing purposes.\nThe 2 second delay between steps is for testing purposes (to watch process bars).\nCurrently there are several states for the Credit Funding Transaction (Create, Sending, Sent, Confirmed), but not all may be necessary to keep track of.  Also, this is still missing the code to determine that the transaction was sent and acknowledged by the network.\nThe remaining steps that handle registering the identity and username are working.", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r421148905", "createdAt": "2020-05-06T23:24:04Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/CreateIdentityService.kt", "diffHunk": "@@ -0,0 +1,228 @@\n+package de.schildbach.wallet.ui.dashpay\n+\n+import android.content.Context\n+import android.content.Intent\n+import android.os.Handler\n+import androidx.lifecycle.LifecycleService\n+import de.schildbach.wallet.AppDatabase\n+import de.schildbach.wallet.WalletApplication\n+import de.schildbach.wallet.data.IdentityCreationState\n+import de.schildbach.wallet.ui.security.SecurityGuard\n+import de.schildbach.wallet.ui.send.DecryptSeedTask\n+import de.schildbach.wallet.ui.send.DeriveKeyTask\n+import kotlinx.coroutines.*\n+import org.bitcoinj.crypto.KeyCrypterException\n+import org.bitcoinj.wallet.DeterministicSeed\n+import org.bitcoinj.wallet.Wallet\n+import org.bouncycastle.crypto.params.KeyParameter\n+import org.dashevo.dashpay.BlockchainIdentity\n+import org.dashevo.dpp.identity.Identity\n+import org.slf4j.LoggerFactory\n+import java.io.IOException\n+import kotlin.coroutines.resume\n+import kotlin.coroutines.resumeWithException\n+import kotlin.coroutines.suspendCoroutine\n+import kotlin.random.Random\n+\n+\n+class CreateIdentityService : LifecycleService() {\n+\n+    companion object {\n+        private val log = LoggerFactory.getLogger(CreateIdentityService::class.java)\n+\n+        private const val ACTION_CREATE_IDENTITY = \"org.dash.dashpay.action.CREATE_IDENTITY\"\n+\n+        private const val EXTRA_USERNAME = \"org.dash.dashpay.extra.USERNAME\"\n+\n+        @JvmStatic\n+        fun createIntent(context: Context, username: String): Intent {\n+            return Intent(context, CreateIdentityService::class.java).apply {\n+                action = ACTION_CREATE_IDENTITY\n+                putExtra(EXTRA_USERNAME, username)\n+            }\n+        }\n+    }\n+\n+    private val walletApplication by lazy { application as WalletApplication }\n+    private val platformRepo by lazy { PlatformRepo(walletApplication) }\n+    private lateinit var securityGuard: SecurityGuard\n+\n+    private val identityCreationStateDaoAsync = AppDatabase.getAppDatabase().identityCreationStateDaoAsync()\n+\n+    private val createIdentityNotification by lazy { CreateIdentityNotification(this) }\n+\n+    private val serviceJob = Job()\n+    private val serviceScope = CoroutineScope(serviceJob + Dispatchers.Main)\n+\n+    lateinit var identityCreationState: IdentityCreationState\n+\n+    override fun onCreate() {\n+        super.onCreate()\n+        try {\n+            securityGuard = SecurityGuard()\n+        } catch (e: Exception) {\n+            log.error(\"Unable to instantiate SecurityGuard\", e)\n+            stopSelf()\n+            return\n+        }\n+        createIdentityNotification.startServiceForeground()\n+    }\n+\n+    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\n+        super.onStartCommand(intent, flags, startId)\n+\n+        if (intent != null) {\n+\n+            when (intent.action) {\n+                ACTION_CREATE_IDENTITY -> handleCreateIdentityAction(intent)\n+            }\n+        }\n+\n+        return START_NOT_STICKY\n+    }\n+\n+    private fun handleCreateIdentityAction(intent: Intent) {\n+        val username = intent.getStringExtra(EXTRA_USERNAME)\n+\n+        val exceptionHandler = CoroutineExceptionHandler { _, exception ->\n+            log.error(\"[${identityCreationState.state}(error)]\", exception)\n+            GlobalScope.launch {\n+                updateState(identityCreationState.state, true)\n+//                stopSelf()\n+            }\n+        }\n+\n+        serviceScope.launch(exceptionHandler) {\n+            createIdentity(username)\n+            stopSelf()\n+        }\n+    }\n+\n+    private suspend fun createIdentity(username: String) {\n+\n+        //identityCreationState = identityCreationStateDaoAsync.load()\n+        //        ?: IdentityCreationState(IdentityCreationState.State.UPGRADING_WALLET, false, username)\n+        identityCreationState = IdentityCreationState(IdentityCreationState.State.UPGRADING_WALLET, false, username)\n+        identityCreationStateDaoAsync.insert(identityCreationState)\n+\n+        if (identityCreationState.state != IdentityCreationState.State.UPGRADING_WALLET || identityCreationState.error) {\n+            log.info(\"resuming identity creation process [${identityCreationState.state}${if (identityCreationState.error) \"(error)\" else \"\"}]\")\n+        }\n+\n+        val handler = Handler()\n+        val wallet = walletApplication.wallet\n+        val password = securityGuard.retrievePassword()\n+\n+        val encryptionKey = deriveKey(handler, wallet, password)\n+        val seed = decryptSeed(handler, wallet, encryptionKey)\n+\n+//        val usernameInfo = CreateUsernameInfo(username, seed, encryptionKey)\n+\n+\n+        platformRepo.addWalletAuthenticationKeysAsync(seed, encryptionKey)\n+\n+        updateState(IdentityCreationState.State.CREDIT_FUNDING_TX_SENDING)\n+\n+        //create the Blockchain Identity object (this needs to be saved somewhere eventually)\n+        val blockchainIdentity = BlockchainIdentity(Identity.IdentityType.USER, 0, wallet)\n+\n+        platformRepo.createCreditFundingTransactionAsync(blockchainIdentity, encryptionKey)\n+\n+        walletApplication.broadcastTransaction(blockchainIdentity.creditFundingTransaction)\n+\n+        updateState(IdentityCreationState.State.CREDIT_FUNDING_TX_SENT)\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEwODUzOQ=="}, "originalCommit": {"oid": "ad0a85db7f3bf97c5cfb32a5b578b590543c4eaa"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ2NzQ2Ng==", "bodyText": "Delays are removed: df09a47", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r423467466", "createdAt": "2020-05-12T05:18:08Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/CreateIdentityService.kt", "diffHunk": "@@ -0,0 +1,228 @@\n+package de.schildbach.wallet.ui.dashpay\n+\n+import android.content.Context\n+import android.content.Intent\n+import android.os.Handler\n+import androidx.lifecycle.LifecycleService\n+import de.schildbach.wallet.AppDatabase\n+import de.schildbach.wallet.WalletApplication\n+import de.schildbach.wallet.data.IdentityCreationState\n+import de.schildbach.wallet.ui.security.SecurityGuard\n+import de.schildbach.wallet.ui.send.DecryptSeedTask\n+import de.schildbach.wallet.ui.send.DeriveKeyTask\n+import kotlinx.coroutines.*\n+import org.bitcoinj.crypto.KeyCrypterException\n+import org.bitcoinj.wallet.DeterministicSeed\n+import org.bitcoinj.wallet.Wallet\n+import org.bouncycastle.crypto.params.KeyParameter\n+import org.dashevo.dashpay.BlockchainIdentity\n+import org.dashevo.dpp.identity.Identity\n+import org.slf4j.LoggerFactory\n+import java.io.IOException\n+import kotlin.coroutines.resume\n+import kotlin.coroutines.resumeWithException\n+import kotlin.coroutines.suspendCoroutine\n+import kotlin.random.Random\n+\n+\n+class CreateIdentityService : LifecycleService() {\n+\n+    companion object {\n+        private val log = LoggerFactory.getLogger(CreateIdentityService::class.java)\n+\n+        private const val ACTION_CREATE_IDENTITY = \"org.dash.dashpay.action.CREATE_IDENTITY\"\n+\n+        private const val EXTRA_USERNAME = \"org.dash.dashpay.extra.USERNAME\"\n+\n+        @JvmStatic\n+        fun createIntent(context: Context, username: String): Intent {\n+            return Intent(context, CreateIdentityService::class.java).apply {\n+                action = ACTION_CREATE_IDENTITY\n+                putExtra(EXTRA_USERNAME, username)\n+            }\n+        }\n+    }\n+\n+    private val walletApplication by lazy { application as WalletApplication }\n+    private val platformRepo by lazy { PlatformRepo(walletApplication) }\n+    private lateinit var securityGuard: SecurityGuard\n+\n+    private val identityCreationStateDaoAsync = AppDatabase.getAppDatabase().identityCreationStateDaoAsync()\n+\n+    private val createIdentityNotification by lazy { CreateIdentityNotification(this) }\n+\n+    private val serviceJob = Job()\n+    private val serviceScope = CoroutineScope(serviceJob + Dispatchers.Main)\n+\n+    lateinit var identityCreationState: IdentityCreationState\n+\n+    override fun onCreate() {\n+        super.onCreate()\n+        try {\n+            securityGuard = SecurityGuard()\n+        } catch (e: Exception) {\n+            log.error(\"Unable to instantiate SecurityGuard\", e)\n+            stopSelf()\n+            return\n+        }\n+        createIdentityNotification.startServiceForeground()\n+    }\n+\n+    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\n+        super.onStartCommand(intent, flags, startId)\n+\n+        if (intent != null) {\n+\n+            when (intent.action) {\n+                ACTION_CREATE_IDENTITY -> handleCreateIdentityAction(intent)\n+            }\n+        }\n+\n+        return START_NOT_STICKY\n+    }\n+\n+    private fun handleCreateIdentityAction(intent: Intent) {\n+        val username = intent.getStringExtra(EXTRA_USERNAME)\n+\n+        val exceptionHandler = CoroutineExceptionHandler { _, exception ->\n+            log.error(\"[${identityCreationState.state}(error)]\", exception)\n+            GlobalScope.launch {\n+                updateState(identityCreationState.state, true)\n+//                stopSelf()\n+            }\n+        }\n+\n+        serviceScope.launch(exceptionHandler) {\n+            createIdentity(username)\n+            stopSelf()\n+        }\n+    }\n+\n+    private suspend fun createIdentity(username: String) {\n+\n+        //identityCreationState = identityCreationStateDaoAsync.load()\n+        //        ?: IdentityCreationState(IdentityCreationState.State.UPGRADING_WALLET, false, username)\n+        identityCreationState = IdentityCreationState(IdentityCreationState.State.UPGRADING_WALLET, false, username)\n+        identityCreationStateDaoAsync.insert(identityCreationState)\n+\n+        if (identityCreationState.state != IdentityCreationState.State.UPGRADING_WALLET || identityCreationState.error) {\n+            log.info(\"resuming identity creation process [${identityCreationState.state}${if (identityCreationState.error) \"(error)\" else \"\"}]\")\n+        }\n+\n+        val handler = Handler()\n+        val wallet = walletApplication.wallet\n+        val password = securityGuard.retrievePassword()\n+\n+        val encryptionKey = deriveKey(handler, wallet, password)\n+        val seed = decryptSeed(handler, wallet, encryptionKey)\n+\n+//        val usernameInfo = CreateUsernameInfo(username, seed, encryptionKey)\n+\n+\n+        platformRepo.addWalletAuthenticationKeysAsync(seed, encryptionKey)\n+\n+        updateState(IdentityCreationState.State.CREDIT_FUNDING_TX_SENDING)\n+\n+        //create the Blockchain Identity object (this needs to be saved somewhere eventually)\n+        val blockchainIdentity = BlockchainIdentity(Identity.IdentityType.USER, 0, wallet)\n+\n+        platformRepo.createCreditFundingTransactionAsync(blockchainIdentity, encryptionKey)\n+\n+        walletApplication.broadcastTransaction(blockchainIdentity.creditFundingTransaction)\n+\n+        updateState(IdentityCreationState.State.CREDIT_FUNDING_TX_SENT)\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEwODUzOQ=="}, "originalCommit": {"oid": "ad0a85db7f3bf97c5cfb32a5b578b590543c4eaa"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDc1MjI2OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/CreateIdentityService.kt", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjowNToyNlrOGUaosg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxOToyN1rOGVVvag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2MTEwNg==", "bodyText": "Can we please remove this line or add a //TODO?", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r424061106", "createdAt": "2020-05-12T22:05:26Z", "author": {"login": "sambarboza"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/CreateIdentityService.kt", "diffHunk": "@@ -0,0 +1,329 @@\n+package de.schildbach.wallet.ui.dashpay\n+\n+import android.content.Context\n+import android.content.Intent\n+import android.os.Handler\n+import androidx.lifecycle.LifecycleService\n+import de.schildbach.wallet.AppDatabase\n+import de.schildbach.wallet.Constants\n+import de.schildbach.wallet.WalletApplication\n+import de.schildbach.wallet.data.BlockchainIdentityData\n+import de.schildbach.wallet.data.IdentityCreationState\n+import de.schildbach.wallet.ui.security.SecurityGuard\n+import de.schildbach.wallet.ui.send.DecryptSeedTask\n+import de.schildbach.wallet.ui.send.DeriveKeyTask\n+import kotlinx.coroutines.*\n+import org.bitcoinj.core.RejectMessage\n+import org.bitcoinj.core.RejectedTransactionException\n+import org.bitcoinj.core.TransactionConfidence\n+import org.bitcoinj.crypto.KeyCrypterException\n+import org.bitcoinj.evolution.CreditFundingTransaction\n+import org.bitcoinj.wallet.DeterministicSeed\n+import org.bitcoinj.wallet.Wallet\n+import org.bouncycastle.crypto.params.KeyParameter\n+import org.dashevo.dashpay.BlockchainIdentity\n+import org.dashevo.dpp.identity.Identity\n+import org.dashevo.platform.Names\n+import org.slf4j.LoggerFactory\n+import java.io.IOException\n+import kotlin.coroutines.resume\n+import kotlin.coroutines.resumeWithException\n+import kotlin.coroutines.suspendCoroutine\n+\n+\n+class CreateIdentityService : LifecycleService() {\n+\n+    companion object {\n+        private val log = LoggerFactory.getLogger(CreateIdentityService::class.java)\n+\n+        private const val ACTION_CREATE_IDENTITY = \"org.dash.dashpay.action.CREATE_IDENTITY\"\n+\n+        private const val EXTRA_USERNAME = \"org.dash.dashpay.extra.USERNAME\"\n+\n+        @JvmStatic\n+        fun createIntent(context: Context, username: String): Intent {\n+            return Intent(context, CreateIdentityService::class.java).apply {\n+                action = ACTION_CREATE_IDENTITY\n+                putExtra(EXTRA_USERNAME, username)\n+            }\n+        }\n+    }\n+\n+    private val walletApplication by lazy { application as WalletApplication }\n+    private val platformRepo by lazy { PlatformRepo(walletApplication) }\n+    private lateinit var securityGuard: SecurityGuard\n+\n+    private val identityCreationStateDaoAsync = AppDatabase.getAppDatabase().identityCreationStateDaoAsync()\n+    private val blockchainIdentityDataDaoAsync = AppDatabase.getAppDatabase().blockchainIdentityDataDaoAsync()\n+\n+    private val createIdentityNotification by lazy { CreateIdentityNotification(this) }\n+\n+    private val serviceJob = Job()\n+    private val serviceScope = CoroutineScope(serviceJob + Dispatchers.Main)\n+\n+    lateinit var identityCreationState: IdentityCreationState\n+    lateinit var blockchainIdentityData: BlockchainIdentityData\n+\n+    override fun onCreate() {\n+        super.onCreate()\n+        try {\n+            securityGuard = SecurityGuard()\n+        } catch (e: Exception) {\n+            log.error(\"Unable to instantiate SecurityGuard\", e)\n+            stopSelf()\n+            return\n+        }\n+        createIdentityNotification.startServiceForeground()\n+    }\n+\n+    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\n+        super.onStartCommand(intent, flags, startId)\n+\n+        if (intent != null) {\n+\n+            when (intent.action) {\n+                ACTION_CREATE_IDENTITY -> handleCreateIdentityAction(intent)\n+            }\n+        }\n+\n+        return START_NOT_STICKY\n+    }\n+\n+    private fun handleCreateIdentityAction(intent: Intent) {\n+        val username = intent.getStringExtra(EXTRA_USERNAME)\n+\n+        val exceptionHandler = CoroutineExceptionHandler { _, exception ->\n+            log.error(\"[${identityCreationState.state}(error)]\", exception)\n+            GlobalScope.launch {\n+                updateState(identityCreationState.state, true)\n+//                stopSelf()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df09a470bc2902a7daa055eb72faffd22280083b"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ5ODM1Nw==", "bodyText": "Changed to a TODO.  I don't know if we need to call stopSelf() when an exception is caught.  Does stopSelf() get called implicitly?  @tomasz-ludek\n17fca77", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r424498357", "createdAt": "2020-05-13T14:48:50Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/CreateIdentityService.kt", "diffHunk": "@@ -0,0 +1,329 @@\n+package de.schildbach.wallet.ui.dashpay\n+\n+import android.content.Context\n+import android.content.Intent\n+import android.os.Handler\n+import androidx.lifecycle.LifecycleService\n+import de.schildbach.wallet.AppDatabase\n+import de.schildbach.wallet.Constants\n+import de.schildbach.wallet.WalletApplication\n+import de.schildbach.wallet.data.BlockchainIdentityData\n+import de.schildbach.wallet.data.IdentityCreationState\n+import de.schildbach.wallet.ui.security.SecurityGuard\n+import de.schildbach.wallet.ui.send.DecryptSeedTask\n+import de.schildbach.wallet.ui.send.DeriveKeyTask\n+import kotlinx.coroutines.*\n+import org.bitcoinj.core.RejectMessage\n+import org.bitcoinj.core.RejectedTransactionException\n+import org.bitcoinj.core.TransactionConfidence\n+import org.bitcoinj.crypto.KeyCrypterException\n+import org.bitcoinj.evolution.CreditFundingTransaction\n+import org.bitcoinj.wallet.DeterministicSeed\n+import org.bitcoinj.wallet.Wallet\n+import org.bouncycastle.crypto.params.KeyParameter\n+import org.dashevo.dashpay.BlockchainIdentity\n+import org.dashevo.dpp.identity.Identity\n+import org.dashevo.platform.Names\n+import org.slf4j.LoggerFactory\n+import java.io.IOException\n+import kotlin.coroutines.resume\n+import kotlin.coroutines.resumeWithException\n+import kotlin.coroutines.suspendCoroutine\n+\n+\n+class CreateIdentityService : LifecycleService() {\n+\n+    companion object {\n+        private val log = LoggerFactory.getLogger(CreateIdentityService::class.java)\n+\n+        private const val ACTION_CREATE_IDENTITY = \"org.dash.dashpay.action.CREATE_IDENTITY\"\n+\n+        private const val EXTRA_USERNAME = \"org.dash.dashpay.extra.USERNAME\"\n+\n+        @JvmStatic\n+        fun createIntent(context: Context, username: String): Intent {\n+            return Intent(context, CreateIdentityService::class.java).apply {\n+                action = ACTION_CREATE_IDENTITY\n+                putExtra(EXTRA_USERNAME, username)\n+            }\n+        }\n+    }\n+\n+    private val walletApplication by lazy { application as WalletApplication }\n+    private val platformRepo by lazy { PlatformRepo(walletApplication) }\n+    private lateinit var securityGuard: SecurityGuard\n+\n+    private val identityCreationStateDaoAsync = AppDatabase.getAppDatabase().identityCreationStateDaoAsync()\n+    private val blockchainIdentityDataDaoAsync = AppDatabase.getAppDatabase().blockchainIdentityDataDaoAsync()\n+\n+    private val createIdentityNotification by lazy { CreateIdentityNotification(this) }\n+\n+    private val serviceJob = Job()\n+    private val serviceScope = CoroutineScope(serviceJob + Dispatchers.Main)\n+\n+    lateinit var identityCreationState: IdentityCreationState\n+    lateinit var blockchainIdentityData: BlockchainIdentityData\n+\n+    override fun onCreate() {\n+        super.onCreate()\n+        try {\n+            securityGuard = SecurityGuard()\n+        } catch (e: Exception) {\n+            log.error(\"Unable to instantiate SecurityGuard\", e)\n+            stopSelf()\n+            return\n+        }\n+        createIdentityNotification.startServiceForeground()\n+    }\n+\n+    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\n+        super.onStartCommand(intent, flags, startId)\n+\n+        if (intent != null) {\n+\n+            when (intent.action) {\n+                ACTION_CREATE_IDENTITY -> handleCreateIdentityAction(intent)\n+            }\n+        }\n+\n+        return START_NOT_STICKY\n+    }\n+\n+    private fun handleCreateIdentityAction(intent: Intent) {\n+        val username = intent.getStringExtra(EXTRA_USERNAME)\n+\n+        val exceptionHandler = CoroutineExceptionHandler { _, exception ->\n+            log.error(\"[${identityCreationState.state}(error)]\", exception)\n+            GlobalScope.launch {\n+                updateState(identityCreationState.state, true)\n+//                stopSelf()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2MTEwNg=="}, "originalCommit": {"oid": "df09a470bc2902a7daa055eb72faffd22280083b"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyOTQ4Mg==", "bodyText": "Let's not call the stopSelf() for now, it causes the notification informing about the error to be dismissed. I'll elaborate a better solution within https://dashpay.atlassian.net/browse/NMA-309.", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r425029482", "createdAt": "2020-05-14T10:19:27Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/CreateIdentityService.kt", "diffHunk": "@@ -0,0 +1,329 @@\n+package de.schildbach.wallet.ui.dashpay\n+\n+import android.content.Context\n+import android.content.Intent\n+import android.os.Handler\n+import androidx.lifecycle.LifecycleService\n+import de.schildbach.wallet.AppDatabase\n+import de.schildbach.wallet.Constants\n+import de.schildbach.wallet.WalletApplication\n+import de.schildbach.wallet.data.BlockchainIdentityData\n+import de.schildbach.wallet.data.IdentityCreationState\n+import de.schildbach.wallet.ui.security.SecurityGuard\n+import de.schildbach.wallet.ui.send.DecryptSeedTask\n+import de.schildbach.wallet.ui.send.DeriveKeyTask\n+import kotlinx.coroutines.*\n+import org.bitcoinj.core.RejectMessage\n+import org.bitcoinj.core.RejectedTransactionException\n+import org.bitcoinj.core.TransactionConfidence\n+import org.bitcoinj.crypto.KeyCrypterException\n+import org.bitcoinj.evolution.CreditFundingTransaction\n+import org.bitcoinj.wallet.DeterministicSeed\n+import org.bitcoinj.wallet.Wallet\n+import org.bouncycastle.crypto.params.KeyParameter\n+import org.dashevo.dashpay.BlockchainIdentity\n+import org.dashevo.dpp.identity.Identity\n+import org.dashevo.platform.Names\n+import org.slf4j.LoggerFactory\n+import java.io.IOException\n+import kotlin.coroutines.resume\n+import kotlin.coroutines.resumeWithException\n+import kotlin.coroutines.suspendCoroutine\n+\n+\n+class CreateIdentityService : LifecycleService() {\n+\n+    companion object {\n+        private val log = LoggerFactory.getLogger(CreateIdentityService::class.java)\n+\n+        private const val ACTION_CREATE_IDENTITY = \"org.dash.dashpay.action.CREATE_IDENTITY\"\n+\n+        private const val EXTRA_USERNAME = \"org.dash.dashpay.extra.USERNAME\"\n+\n+        @JvmStatic\n+        fun createIntent(context: Context, username: String): Intent {\n+            return Intent(context, CreateIdentityService::class.java).apply {\n+                action = ACTION_CREATE_IDENTITY\n+                putExtra(EXTRA_USERNAME, username)\n+            }\n+        }\n+    }\n+\n+    private val walletApplication by lazy { application as WalletApplication }\n+    private val platformRepo by lazy { PlatformRepo(walletApplication) }\n+    private lateinit var securityGuard: SecurityGuard\n+\n+    private val identityCreationStateDaoAsync = AppDatabase.getAppDatabase().identityCreationStateDaoAsync()\n+    private val blockchainIdentityDataDaoAsync = AppDatabase.getAppDatabase().blockchainIdentityDataDaoAsync()\n+\n+    private val createIdentityNotification by lazy { CreateIdentityNotification(this) }\n+\n+    private val serviceJob = Job()\n+    private val serviceScope = CoroutineScope(serviceJob + Dispatchers.Main)\n+\n+    lateinit var identityCreationState: IdentityCreationState\n+    lateinit var blockchainIdentityData: BlockchainIdentityData\n+\n+    override fun onCreate() {\n+        super.onCreate()\n+        try {\n+            securityGuard = SecurityGuard()\n+        } catch (e: Exception) {\n+            log.error(\"Unable to instantiate SecurityGuard\", e)\n+            stopSelf()\n+            return\n+        }\n+        createIdentityNotification.startServiceForeground()\n+    }\n+\n+    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\n+        super.onStartCommand(intent, flags, startId)\n+\n+        if (intent != null) {\n+\n+            when (intent.action) {\n+                ACTION_CREATE_IDENTITY -> handleCreateIdentityAction(intent)\n+            }\n+        }\n+\n+        return START_NOT_STICKY\n+    }\n+\n+    private fun handleCreateIdentityAction(intent: Intent) {\n+        val username = intent.getStringExtra(EXTRA_USERNAME)\n+\n+        val exceptionHandler = CoroutineExceptionHandler { _, exception ->\n+            log.error(\"[${identityCreationState.state}(error)]\", exception)\n+            GlobalScope.launch {\n+                updateState(identityCreationState.state, true)\n+//                stopSelf()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2MTEwNg=="}, "originalCommit": {"oid": "df09a470bc2902a7daa055eb72faffd22280083b"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDgwMjIxOnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/AppDatabase.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjoyNjowN1rOGUbIKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoyMjoxOFrOGVV1Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2OTE2Mg==", "bodyText": "Any reason we're jumping from version 5 to 7?", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r424069162", "createdAt": "2020-05-12T22:26:07Z", "author": {"login": "sambarboza"}, "path": "wallet/src/de/schildbach/wallet/AppDatabase.java", "diffHunk": "@@ -5,27 +5,38 @@\n import androidx.room.RoomDatabase;\n import androidx.room.TypeConverters;\n \n+import de.schildbach.wallet.data.BlockchainIdentityData;\n+import de.schildbach.wallet.data.BlockchainIdentityDataDao;\n+import de.schildbach.wallet.data.BlockchainIdentityDataDaoAsync;\n import de.schildbach.wallet.data.BlockchainState;\n import de.schildbach.wallet.data.BlockchainStateDao;\n import de.schildbach.wallet.data.IdentityCreationState;\n import de.schildbach.wallet.data.IdentityCreationStateDao;\n+import de.schildbach.wallet.data.IdentityCreationStateDaoAsync;\n import de.schildbach.wallet.data.RoomConverters;\n import de.schildbach.wallet.rates.ExchangeRate;\n import de.schildbach.wallet.rates.ExchangeRatesDao;\n \n /**\n  * @author Samuel Barbosa\n  */\n-@Database(entities = {ExchangeRate.class, BlockchainState.class, IdentityCreationState.class}, version = 5)\n+@Database(entities = {ExchangeRate.class, BlockchainState.class, IdentityCreationState.class, BlockchainIdentityData.class}, version = 7)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df09a470bc2902a7daa055eb72faffd22280083b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ4NDQ5NQ==", "bodyText": "Version 6 was in a previous commit in this PR.  Since we are not releasing any of these apk's into production, is there need to keep incrementing the version number when we make changes.  The master branch is still on Version 2.  Couldn't we keep this version at 3?  or would we do that later? or does it not matter?", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r424484495", "createdAt": "2020-05-13T14:31:10Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/AppDatabase.java", "diffHunk": "@@ -5,27 +5,38 @@\n import androidx.room.RoomDatabase;\n import androidx.room.TypeConverters;\n \n+import de.schildbach.wallet.data.BlockchainIdentityData;\n+import de.schildbach.wallet.data.BlockchainIdentityDataDao;\n+import de.schildbach.wallet.data.BlockchainIdentityDataDaoAsync;\n import de.schildbach.wallet.data.BlockchainState;\n import de.schildbach.wallet.data.BlockchainStateDao;\n import de.schildbach.wallet.data.IdentityCreationState;\n import de.schildbach.wallet.data.IdentityCreationStateDao;\n+import de.schildbach.wallet.data.IdentityCreationStateDaoAsync;\n import de.schildbach.wallet.data.RoomConverters;\n import de.schildbach.wallet.rates.ExchangeRate;\n import de.schildbach.wallet.rates.ExchangeRatesDao;\n \n /**\n  * @author Samuel Barbosa\n  */\n-@Database(entities = {ExchangeRate.class, BlockchainState.class, IdentityCreationState.class}, version = 5)\n+@Database(entities = {ExchangeRate.class, BlockchainState.class, IdentityCreationState.class, BlockchainIdentityData.class}, version = 7)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2OTE2Mg=="}, "originalCommit": {"oid": "df09a470bc2902a7daa055eb72faffd22280083b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUwMDMwOQ==", "bodyText": "Lowered to 6:  66c8716", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r424500309", "createdAt": "2020-05-13T14:51:15Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/AppDatabase.java", "diffHunk": "@@ -5,27 +5,38 @@\n import androidx.room.RoomDatabase;\n import androidx.room.TypeConverters;\n \n+import de.schildbach.wallet.data.BlockchainIdentityData;\n+import de.schildbach.wallet.data.BlockchainIdentityDataDao;\n+import de.schildbach.wallet.data.BlockchainIdentityDataDaoAsync;\n import de.schildbach.wallet.data.BlockchainState;\n import de.schildbach.wallet.data.BlockchainStateDao;\n import de.schildbach.wallet.data.IdentityCreationState;\n import de.schildbach.wallet.data.IdentityCreationStateDao;\n+import de.schildbach.wallet.data.IdentityCreationStateDaoAsync;\n import de.schildbach.wallet.data.RoomConverters;\n import de.schildbach.wallet.rates.ExchangeRate;\n import de.schildbach.wallet.rates.ExchangeRatesDao;\n \n /**\n  * @author Samuel Barbosa\n  */\n-@Database(entities = {ExchangeRate.class, BlockchainState.class, IdentityCreationState.class}, version = 5)\n+@Database(entities = {ExchangeRate.class, BlockchainState.class, IdentityCreationState.class, BlockchainIdentityData.class}, version = 7)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2OTE2Mg=="}, "originalCommit": {"oid": "df09a470bc2902a7daa055eb72faffd22280083b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUwMTQ1OQ==", "bodyText": "Do we need to commit the 6.json file also?  It is not included in this PR.", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r424501459", "createdAt": "2020-05-13T14:52:41Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/AppDatabase.java", "diffHunk": "@@ -5,27 +5,38 @@\n import androidx.room.RoomDatabase;\n import androidx.room.TypeConverters;\n \n+import de.schildbach.wallet.data.BlockchainIdentityData;\n+import de.schildbach.wallet.data.BlockchainIdentityDataDao;\n+import de.schildbach.wallet.data.BlockchainIdentityDataDaoAsync;\n import de.schildbach.wallet.data.BlockchainState;\n import de.schildbach.wallet.data.BlockchainStateDao;\n import de.schildbach.wallet.data.IdentityCreationState;\n import de.schildbach.wallet.data.IdentityCreationStateDao;\n+import de.schildbach.wallet.data.IdentityCreationStateDaoAsync;\n import de.schildbach.wallet.data.RoomConverters;\n import de.schildbach.wallet.rates.ExchangeRate;\n import de.schildbach.wallet.rates.ExchangeRatesDao;\n \n /**\n  * @author Samuel Barbosa\n  */\n-@Database(entities = {ExchangeRate.class, BlockchainState.class, IdentityCreationState.class}, version = 5)\n+@Database(entities = {ExchangeRate.class, BlockchainState.class, IdentityCreationState.class, BlockchainIdentityData.class}, version = 7)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2OTE2Mg=="}, "originalCommit": {"oid": "df09a470bc2902a7daa055eb72faffd22280083b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAzMDk1NA==", "bodyText": "No, it shouldn't be added to VCS it is generated automatically by Room.", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r425030954", "createdAt": "2020-05-14T10:22:18Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/AppDatabase.java", "diffHunk": "@@ -5,27 +5,38 @@\n import androidx.room.RoomDatabase;\n import androidx.room.TypeConverters;\n \n+import de.schildbach.wallet.data.BlockchainIdentityData;\n+import de.schildbach.wallet.data.BlockchainIdentityDataDao;\n+import de.schildbach.wallet.data.BlockchainIdentityDataDaoAsync;\n import de.schildbach.wallet.data.BlockchainState;\n import de.schildbach.wallet.data.BlockchainStateDao;\n import de.schildbach.wallet.data.IdentityCreationState;\n import de.schildbach.wallet.data.IdentityCreationStateDao;\n+import de.schildbach.wallet.data.IdentityCreationStateDaoAsync;\n import de.schildbach.wallet.data.RoomConverters;\n import de.schildbach.wallet.rates.ExchangeRate;\n import de.schildbach.wallet.rates.ExchangeRatesDao;\n \n /**\n  * @author Samuel Barbosa\n  */\n-@Database(entities = {ExchangeRate.class, BlockchainState.class, IdentityCreationState.class}, version = 5)\n+@Database(entities = {ExchangeRate.class, BlockchainState.class, IdentityCreationState.class, BlockchainIdentityData.class}, version = 7)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2OTE2Mg=="}, "originalCommit": {"oid": "df09a470bc2902a7daa055eb72faffd22280083b"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDg2Mzg3OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/CreateIdentityService.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjo1MzoxN1rOGUbuZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDo0OToyMVrOGU1WRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3ODk1MQ==", "bodyText": "If we reorder BlockchainIdentityData constructor parameters and add some default values, we can call this as:\nBlockchainIdentityData(0, username).\nThe refactored constructor would look like this:\nclass BlockchainIdentityData(var index: Int?,\n                             var username: String?,\n                             var creditFundingTxId: Sha256Hash? = null,\n                             var lockedOutpoint: TransactionOutPoint? = null,\n                             var preorderSalt: ByteArray? = null,\n                             var registrationStatus: BlockchainIdentity.RegistrationStatus? = null,\n                             var usernameStatus: BlockchainIdentity.UsernameStatus? = null,\n                             var domain: String? = null) {", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r424078951", "createdAt": "2020-05-12T22:53:17Z", "author": {"login": "sambarboza"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/CreateIdentityService.kt", "diffHunk": "@@ -0,0 +1,329 @@\n+package de.schildbach.wallet.ui.dashpay\n+\n+import android.content.Context\n+import android.content.Intent\n+import android.os.Handler\n+import androidx.lifecycle.LifecycleService\n+import de.schildbach.wallet.AppDatabase\n+import de.schildbach.wallet.Constants\n+import de.schildbach.wallet.WalletApplication\n+import de.schildbach.wallet.data.BlockchainIdentityData\n+import de.schildbach.wallet.data.IdentityCreationState\n+import de.schildbach.wallet.ui.security.SecurityGuard\n+import de.schildbach.wallet.ui.send.DecryptSeedTask\n+import de.schildbach.wallet.ui.send.DeriveKeyTask\n+import kotlinx.coroutines.*\n+import org.bitcoinj.core.RejectMessage\n+import org.bitcoinj.core.RejectedTransactionException\n+import org.bitcoinj.core.TransactionConfidence\n+import org.bitcoinj.crypto.KeyCrypterException\n+import org.bitcoinj.evolution.CreditFundingTransaction\n+import org.bitcoinj.wallet.DeterministicSeed\n+import org.bitcoinj.wallet.Wallet\n+import org.bouncycastle.crypto.params.KeyParameter\n+import org.dashevo.dashpay.BlockchainIdentity\n+import org.dashevo.dpp.identity.Identity\n+import org.dashevo.platform.Names\n+import org.slf4j.LoggerFactory\n+import java.io.IOException\n+import kotlin.coroutines.resume\n+import kotlin.coroutines.resumeWithException\n+import kotlin.coroutines.suspendCoroutine\n+\n+\n+class CreateIdentityService : LifecycleService() {\n+\n+    companion object {\n+        private val log = LoggerFactory.getLogger(CreateIdentityService::class.java)\n+\n+        private const val ACTION_CREATE_IDENTITY = \"org.dash.dashpay.action.CREATE_IDENTITY\"\n+\n+        private const val EXTRA_USERNAME = \"org.dash.dashpay.extra.USERNAME\"\n+\n+        @JvmStatic\n+        fun createIntent(context: Context, username: String): Intent {\n+            return Intent(context, CreateIdentityService::class.java).apply {\n+                action = ACTION_CREATE_IDENTITY\n+                putExtra(EXTRA_USERNAME, username)\n+            }\n+        }\n+    }\n+\n+    private val walletApplication by lazy { application as WalletApplication }\n+    private val platformRepo by lazy { PlatformRepo(walletApplication) }\n+    private lateinit var securityGuard: SecurityGuard\n+\n+    private val identityCreationStateDaoAsync = AppDatabase.getAppDatabase().identityCreationStateDaoAsync()\n+    private val blockchainIdentityDataDaoAsync = AppDatabase.getAppDatabase().blockchainIdentityDataDaoAsync()\n+\n+    private val createIdentityNotification by lazy { CreateIdentityNotification(this) }\n+\n+    private val serviceJob = Job()\n+    private val serviceScope = CoroutineScope(serviceJob + Dispatchers.Main)\n+\n+    lateinit var identityCreationState: IdentityCreationState\n+    lateinit var blockchainIdentityData: BlockchainIdentityData\n+\n+    override fun onCreate() {\n+        super.onCreate()\n+        try {\n+            securityGuard = SecurityGuard()\n+        } catch (e: Exception) {\n+            log.error(\"Unable to instantiate SecurityGuard\", e)\n+            stopSelf()\n+            return\n+        }\n+        createIdentityNotification.startServiceForeground()\n+    }\n+\n+    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\n+        super.onStartCommand(intent, flags, startId)\n+\n+        if (intent != null) {\n+\n+            when (intent.action) {\n+                ACTION_CREATE_IDENTITY -> handleCreateIdentityAction(intent)\n+            }\n+        }\n+\n+        return START_NOT_STICKY\n+    }\n+\n+    private fun handleCreateIdentityAction(intent: Intent) {\n+        val username = intent.getStringExtra(EXTRA_USERNAME)\n+\n+        val exceptionHandler = CoroutineExceptionHandler { _, exception ->\n+            log.error(\"[${identityCreationState.state}(error)]\", exception)\n+            GlobalScope.launch {\n+                updateState(identityCreationState.state, true)\n+//                stopSelf()\n+            }\n+        }\n+\n+        serviceScope.launch(exceptionHandler) {\n+            createIdentity(username)\n+            stopSelf()\n+        }\n+    }\n+\n+    private suspend fun createIdentity(username: String) {\n+        log.info(\"Username registration starting\")\n+\n+        identityCreationState = identityCreationStateDaoAsync.load()\n+                ?: IdentityCreationState(IdentityCreationState.State.UPGRADING_WALLET, false, username)\n+        blockchainIdentityData = blockchainIdentityDataDaoAsync.load()\n+                ?: BlockchainIdentityData(0, null ,null, null, null, null, null, username)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df09a470bc2902a7daa055eb72faffd22280083b"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ5ODc1OQ==", "bodyText": "This was done here:  b0dba0d", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r424498759", "createdAt": "2020-05-13T14:49:21Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/CreateIdentityService.kt", "diffHunk": "@@ -0,0 +1,329 @@\n+package de.schildbach.wallet.ui.dashpay\n+\n+import android.content.Context\n+import android.content.Intent\n+import android.os.Handler\n+import androidx.lifecycle.LifecycleService\n+import de.schildbach.wallet.AppDatabase\n+import de.schildbach.wallet.Constants\n+import de.schildbach.wallet.WalletApplication\n+import de.schildbach.wallet.data.BlockchainIdentityData\n+import de.schildbach.wallet.data.IdentityCreationState\n+import de.schildbach.wallet.ui.security.SecurityGuard\n+import de.schildbach.wallet.ui.send.DecryptSeedTask\n+import de.schildbach.wallet.ui.send.DeriveKeyTask\n+import kotlinx.coroutines.*\n+import org.bitcoinj.core.RejectMessage\n+import org.bitcoinj.core.RejectedTransactionException\n+import org.bitcoinj.core.TransactionConfidence\n+import org.bitcoinj.crypto.KeyCrypterException\n+import org.bitcoinj.evolution.CreditFundingTransaction\n+import org.bitcoinj.wallet.DeterministicSeed\n+import org.bitcoinj.wallet.Wallet\n+import org.bouncycastle.crypto.params.KeyParameter\n+import org.dashevo.dashpay.BlockchainIdentity\n+import org.dashevo.dpp.identity.Identity\n+import org.dashevo.platform.Names\n+import org.slf4j.LoggerFactory\n+import java.io.IOException\n+import kotlin.coroutines.resume\n+import kotlin.coroutines.resumeWithException\n+import kotlin.coroutines.suspendCoroutine\n+\n+\n+class CreateIdentityService : LifecycleService() {\n+\n+    companion object {\n+        private val log = LoggerFactory.getLogger(CreateIdentityService::class.java)\n+\n+        private const val ACTION_CREATE_IDENTITY = \"org.dash.dashpay.action.CREATE_IDENTITY\"\n+\n+        private const val EXTRA_USERNAME = \"org.dash.dashpay.extra.USERNAME\"\n+\n+        @JvmStatic\n+        fun createIntent(context: Context, username: String): Intent {\n+            return Intent(context, CreateIdentityService::class.java).apply {\n+                action = ACTION_CREATE_IDENTITY\n+                putExtra(EXTRA_USERNAME, username)\n+            }\n+        }\n+    }\n+\n+    private val walletApplication by lazy { application as WalletApplication }\n+    private val platformRepo by lazy { PlatformRepo(walletApplication) }\n+    private lateinit var securityGuard: SecurityGuard\n+\n+    private val identityCreationStateDaoAsync = AppDatabase.getAppDatabase().identityCreationStateDaoAsync()\n+    private val blockchainIdentityDataDaoAsync = AppDatabase.getAppDatabase().blockchainIdentityDataDaoAsync()\n+\n+    private val createIdentityNotification by lazy { CreateIdentityNotification(this) }\n+\n+    private val serviceJob = Job()\n+    private val serviceScope = CoroutineScope(serviceJob + Dispatchers.Main)\n+\n+    lateinit var identityCreationState: IdentityCreationState\n+    lateinit var blockchainIdentityData: BlockchainIdentityData\n+\n+    override fun onCreate() {\n+        super.onCreate()\n+        try {\n+            securityGuard = SecurityGuard()\n+        } catch (e: Exception) {\n+            log.error(\"Unable to instantiate SecurityGuard\", e)\n+            stopSelf()\n+            return\n+        }\n+        createIdentityNotification.startServiceForeground()\n+    }\n+\n+    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\n+        super.onStartCommand(intent, flags, startId)\n+\n+        if (intent != null) {\n+\n+            when (intent.action) {\n+                ACTION_CREATE_IDENTITY -> handleCreateIdentityAction(intent)\n+            }\n+        }\n+\n+        return START_NOT_STICKY\n+    }\n+\n+    private fun handleCreateIdentityAction(intent: Intent) {\n+        val username = intent.getStringExtra(EXTRA_USERNAME)\n+\n+        val exceptionHandler = CoroutineExceptionHandler { _, exception ->\n+            log.error(\"[${identityCreationState.state}(error)]\", exception)\n+            GlobalScope.launch {\n+                updateState(identityCreationState.state, true)\n+//                stopSelf()\n+            }\n+        }\n+\n+        serviceScope.launch(exceptionHandler) {\n+            createIdentity(username)\n+            stopSelf()\n+        }\n+    }\n+\n+    private suspend fun createIdentity(username: String) {\n+        log.info(\"Username registration starting\")\n+\n+        identityCreationState = identityCreationStateDaoAsync.load()\n+                ?: IdentityCreationState(IdentityCreationState.State.UPGRADING_WALLET, false, username)\n+        blockchainIdentityData = blockchainIdentityDataDaoAsync.load()\n+                ?: BlockchainIdentityData(0, null ,null, null, null, null, null, username)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3ODk1MQ=="}, "originalCommit": {"oid": "df09a470bc2902a7daa055eb72faffd22280083b"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDg2OTk1OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/data/RoomConverters.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjo1NjowOFrOGUbyFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDo0NzoyNlrOGU1Qcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3OTg5Mg==", "bodyText": "Can we rename to toUsernameStatus to match the casing of the type?", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r424079892", "createdAt": "2020-05-12T22:56:08Z", "author": {"login": "sambarboza"}, "path": "wallet/src/de/schildbach/wallet/data/RoomConverters.kt", "diffHunk": "@@ -67,4 +72,43 @@ class RoomConverters {\n         return identityCreationState.ordinal\n     }\n \n+    @TypeConverter\n+    fun fromHash(hash: Sha256Hash?): ByteArray? {\n+        return hash?.reversedBytes\n+    }\n+\n+    @TypeConverter\n+    fun byteArrayToHash(bytes: ByteArray?): Sha256Hash? {\n+        return bytes?.let { Sha256Hash.wrapReversed(it) }\n+    }\n+\n+    @TypeConverter\n+    fun fromTransactionOutPoint(outpoint: TransactionOutPoint?): ByteArray? {\n+        return outpoint?.bitcoinSerialize()\n+    }\n+\n+    @TypeConverter\n+    fun toTransactionOutPoint(bytes: ByteArray?): TransactionOutPoint? {\n+        return bytes?.let { TransactionOutPoint(Constants.NETWORK_PARAMETERS, it, 0) }\n+    }\n+\n+    @TypeConverter\n+    fun toUserNameStatus(value: Int): BlockchainIdentity.UsernameStatus {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df09a470bc2902a7daa055eb72faffd22280083b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ5NzI2Nw==", "bodyText": "Fixed here:  84472a5", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r424497267", "createdAt": "2020-05-13T14:47:26Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/data/RoomConverters.kt", "diffHunk": "@@ -67,4 +72,43 @@ class RoomConverters {\n         return identityCreationState.ordinal\n     }\n \n+    @TypeConverter\n+    fun fromHash(hash: Sha256Hash?): ByteArray? {\n+        return hash?.reversedBytes\n+    }\n+\n+    @TypeConverter\n+    fun byteArrayToHash(bytes: ByteArray?): Sha256Hash? {\n+        return bytes?.let { Sha256Hash.wrapReversed(it) }\n+    }\n+\n+    @TypeConverter\n+    fun fromTransactionOutPoint(outpoint: TransactionOutPoint?): ByteArray? {\n+        return outpoint?.bitcoinSerialize()\n+    }\n+\n+    @TypeConverter\n+    fun toTransactionOutPoint(bytes: ByteArray?): TransactionOutPoint? {\n+        return bytes?.let { TransactionOutPoint(Constants.NETWORK_PARAMETERS, it, 0) }\n+    }\n+\n+    @TypeConverter\n+    fun toUserNameStatus(value: Int): BlockchainIdentity.UsernameStatus {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3OTg5Mg=="}, "originalCommit": {"oid": "df09a470bc2902a7daa055eb72faffd22280083b"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDg3MTc4OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/CreateUsernameActivity.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjo1Njo1OVrOGUbzLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDo0NzowOVrOGU1Pnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4MDE3NA==", "bodyText": "Please remove or add a //TODO.", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r424080174", "createdAt": "2020-05-12T22:56:59Z", "author": {"login": "sambarboza"}, "path": "wallet/src/de/schildbach/wallet/ui/CreateUsernameActivity.kt", "diffHunk": "@@ -51,13 +54,17 @@ class CreateUsernameActivity : InteractionAwareActivity(), TextWatcher {\n     private val fadeOutAnimation by lazy { AnimationUtils.loadAnimation(this, R.anim.fade_out) }\n     private lateinit var completeUsername: String\n     private lateinit var dashPayViewModel: DashPayViewModel\n+    //    private lateinit var securityGuard: SecurityGuard", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df09a470bc2902a7daa055eb72faffd22280083b"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ5NzA1NQ==", "bodyText": "This line is no longer necessary.\nRemoved:\n458f7f6", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r424497055", "createdAt": "2020-05-13T14:47:09Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/CreateUsernameActivity.kt", "diffHunk": "@@ -51,13 +54,17 @@ class CreateUsernameActivity : InteractionAwareActivity(), TextWatcher {\n     private val fadeOutAnimation by lazy { AnimationUtils.loadAnimation(this, R.anim.fade_out) }\n     private lateinit var completeUsername: String\n     private lateinit var dashPayViewModel: DashPayViewModel\n+    //    private lateinit var securityGuard: SecurityGuard", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4MDE3NA=="}, "originalCommit": {"oid": "df09a470bc2902a7daa055eb72faffd22280083b"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 644, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}