{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyMTkxMzk3", "number": 470, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzo1ODoxN1rOEWTiKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzo1ODoxN1rOEWTiKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODI0MTY5OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/WalletApplication.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzo1ODoxN1rOG9i7XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMDo0Njo0OVrOG-JoYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE4ODU3Mg==", "bodyText": "Lets report the interval in minutes.", "url": "https://github.com/dashevo/dash-wallet/pull/470#discussion_r467188572", "createdAt": "2020-08-07T17:58:17Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/WalletApplication.java", "diffHunk": "@@ -713,10 +720,27 @@ else if (lastUsedAgo < Constants.LAST_USAGE_THRESHOLD_RECENTLY_MS)\n         }\n         alarmManager.cancel(alarmIntent);\n \n-        // workaround for no inexact set() before KitKat\n-        final long now = System.currentTimeMillis();\n-        alarmManager.setInexactRepeating(AlarmManager.RTC_WAKEUP, now + alarmInterval, AlarmManager.INTERVAL_DAY,\n-                alarmIntent);\n+        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.O || Build.VERSION.SDK_INT == Build.VERSION_CODES.O_MR1) {\n+            log.info(\"custom sync scheduling with JobScheduler for Android 8 and 8.1\");\n+            JobScheduler jobScheduler = (JobScheduler) context.getSystemService(Context.JOB_SCHEDULER_SERVICE);\n+            JobInfo pendingJob = jobScheduler.getPendingJob(BLOCKCHAIN_SYNC_JOB_ID);\n+            if (pendingJob == null || pendingJob.getIntervalMillis() != alarmInterval) {\n+                ComponentName jobService = new ComponentName(context, BlockchainSyncJobService.class);\n+                JobInfo jobInfo = new JobInfo.Builder(BLOCKCHAIN_SYNC_JOB_ID, jobService)\n+                        .setPeriodic(alarmInterval)\n+                        .setPersisted(true)\n+                        .build();\n+                int scheduleResult = jobScheduler.schedule(jobInfo);\n+                log.info(\"scheduling blockchain sync job with interval of {}s, result: {}\", alarmInterval / 1000, scheduleResult);\n+            } else {\n+                log.info(\"blockchain sync job already scheduled with interval of {}s\", alarmInterval / 1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91474fb2861fc7637f61e60ca1682c1c69da94c9"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgyMjY4OQ==", "bodyText": "Fixed", "url": "https://github.com/dashevo/dash-wallet/pull/470#discussion_r467822689", "createdAt": "2020-08-10T10:46:49Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/WalletApplication.java", "diffHunk": "@@ -713,10 +720,27 @@ else if (lastUsedAgo < Constants.LAST_USAGE_THRESHOLD_RECENTLY_MS)\n         }\n         alarmManager.cancel(alarmIntent);\n \n-        // workaround for no inexact set() before KitKat\n-        final long now = System.currentTimeMillis();\n-        alarmManager.setInexactRepeating(AlarmManager.RTC_WAKEUP, now + alarmInterval, AlarmManager.INTERVAL_DAY,\n-                alarmIntent);\n+        if (Build.VERSION.SDK_INT == Build.VERSION_CODES.O || Build.VERSION.SDK_INT == Build.VERSION_CODES.O_MR1) {\n+            log.info(\"custom sync scheduling with JobScheduler for Android 8 and 8.1\");\n+            JobScheduler jobScheduler = (JobScheduler) context.getSystemService(Context.JOB_SCHEDULER_SERVICE);\n+            JobInfo pendingJob = jobScheduler.getPendingJob(BLOCKCHAIN_SYNC_JOB_ID);\n+            if (pendingJob == null || pendingJob.getIntervalMillis() != alarmInterval) {\n+                ComponentName jobService = new ComponentName(context, BlockchainSyncJobService.class);\n+                JobInfo jobInfo = new JobInfo.Builder(BLOCKCHAIN_SYNC_JOB_ID, jobService)\n+                        .setPeriodic(alarmInterval)\n+                        .setPersisted(true)\n+                        .build();\n+                int scheduleResult = jobScheduler.schedule(jobInfo);\n+                log.info(\"scheduling blockchain sync job with interval of {}s, result: {}\", alarmInterval / 1000, scheduleResult);\n+            } else {\n+                log.info(\"blockchain sync job already scheduled with interval of {}s\", alarmInterval / 1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE4ODU3Mg=="}, "originalCommit": {"oid": "91474fb2861fc7637f61e60ca1682c1c69da94c9"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 564, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}