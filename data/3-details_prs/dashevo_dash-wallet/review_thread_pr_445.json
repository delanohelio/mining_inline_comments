{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5Mzg3Nzc1", "number": 445, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDo0MjowMlrOEIkxsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMzoxMTo1N1rOEI9Ciw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDI2NjA5OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/DashPayViewModel.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDo0MjowM1rOGonsqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDo1ODo0NlrOGon8vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI0NjYzMw==", "bodyText": "https://github.com/dashevo/dash-wallet/blob/evonet-develop/wallet/src/de/schildbach/wallet/ui/dashpay/CreateIdentityService.kt#L400\nWe have a co-routine version here.", "url": "https://github.com/dashevo/dash-wallet/pull/445#discussion_r445246633", "createdAt": "2020-06-25T00:42:03Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/DashPayViewModel.kt", "diffHunk": "@@ -104,4 +113,43 @@ class DashPayViewModel(application: Application) : AndroidViewModel(application)\n             platformRepo.doneAndDismiss()\n         }\n     }\n+\n+    //TODO: this can probably be simplified using coroutines\n+    private fun deriveEncryptionKey(onSuccess: (KeyParameter) -> Unit, onError: (Exception) -> Unit) {\n+        val walletApplication = WalletApplication.getInstance()\n+        val backgroundThread = HandlerThread(\"background\", Process.THREAD_PRIORITY_BACKGROUND)\n+        backgroundThread.start()\n+        val backgroundHandler = android.os.Handler(backgroundThread.looper)\n+        val securityGuard = SecurityGuard()\n+        val password = securityGuard.retrievePassword()\n+        object : DeriveKeyTask(backgroundHandler, walletApplication.scryptIterationsTarget()) {\n+            override fun onSuccess(encryptionKey: KeyParameter, wasChanged: Boolean) {\n+                onSuccess(encryptionKey)\n+            }\n+\n+            override fun onFailure(ex: KeyCrypterException) {\n+                onError(ex)\n+            }\n+        }.deriveKey(walletApplication.wallet, password)\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0294039c749446a45210c5598403722e1fa58ead"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1MDc1MQ==", "bodyText": "I see that you put the Co-routine method in PlatformRepo, though it is not used here.  I suppose we choose chose a place for it and use it from there.", "url": "https://github.com/dashevo/dash-wallet/pull/445#discussion_r445250751", "createdAt": "2020-06-25T00:58:46Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/DashPayViewModel.kt", "diffHunk": "@@ -104,4 +113,43 @@ class DashPayViewModel(application: Application) : AndroidViewModel(application)\n             platformRepo.doneAndDismiss()\n         }\n     }\n+\n+    //TODO: this can probably be simplified using coroutines\n+    private fun deriveEncryptionKey(onSuccess: (KeyParameter) -> Unit, onError: (Exception) -> Unit) {\n+        val walletApplication = WalletApplication.getInstance()\n+        val backgroundThread = HandlerThread(\"background\", Process.THREAD_PRIORITY_BACKGROUND)\n+        backgroundThread.start()\n+        val backgroundHandler = android.os.Handler(backgroundThread.looper)\n+        val securityGuard = SecurityGuard()\n+        val password = securityGuard.retrievePassword()\n+        object : DeriveKeyTask(backgroundHandler, walletApplication.scryptIterationsTarget()) {\n+            override fun onSuccess(encryptionKey: KeyParameter, wasChanged: Boolean) {\n+                onSuccess(encryptionKey)\n+            }\n+\n+            override fun onFailure(ex: KeyCrypterException) {\n+                onError(ex)\n+            }\n+        }.deriveKey(walletApplication.wallet, password)\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI0NjYzMw=="}, "originalCommit": {"oid": "0294039c749446a45210c5598403722e1fa58ead"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDI3MDg2OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDo0NTowMVrOGonvrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMTowMjoyM1rOGooAPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI0NzQwNA==", "bodyText": "This does not appear to be used, but having this method in here could help remove a lot of callback type methods.", "url": "https://github.com/dashevo/dash-wallet/pull/445#discussion_r445247404", "createdAt": "2020-06-25T00:45:01Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -239,6 +250,51 @@ class PlatformRepo(val walletApplication: WalletApplication) {\n         }\n     }\n \n+    /**\n+     *  Wraps callbacks of DeriveKeyTask as Coroutine\n+     */\n+    private suspend fun deriveKey(handler: Handler, wallet: Wallet, password: String): KeyParameter {\n+        return suspendCoroutine { continuation ->\n+            object : DeriveKeyTask(handler, walletApplication.scryptIterationsTarget()) {\n+\n+                override fun onSuccess(encryptionKey: KeyParameter, wasChanged: Boolean) {\n+                    continuation.resume(encryptionKey)\n+                }\n+\n+                override fun onFailure(ex: KeyCrypterException?) {\n+                    //CreateIdentityService.log.error(\"unable to decrypt wallet\", ex)\n+                    continuation.resumeWithException(ex as Throwable)\n+                }\n+\n+            }.deriveKey(wallet, password)\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0294039c749446a45210c5598403722e1fa58ead"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1MTY0Ng==", "bodyText": "One thing I wonder is if there is an exception, what gets executed after this:  continuation.resumeWithException", "url": "https://github.com/dashevo/dash-wallet/pull/445#discussion_r445251646", "createdAt": "2020-06-25T01:02:23Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -239,6 +250,51 @@ class PlatformRepo(val walletApplication: WalletApplication) {\n         }\n     }\n \n+    /**\n+     *  Wraps callbacks of DeriveKeyTask as Coroutine\n+     */\n+    private suspend fun deriveKey(handler: Handler, wallet: Wallet, password: String): KeyParameter {\n+        return suspendCoroutine { continuation ->\n+            object : DeriveKeyTask(handler, walletApplication.scryptIterationsTarget()) {\n+\n+                override fun onSuccess(encryptionKey: KeyParameter, wasChanged: Boolean) {\n+                    continuation.resume(encryptionKey)\n+                }\n+\n+                override fun onFailure(ex: KeyCrypterException?) {\n+                    //CreateIdentityService.log.error(\"unable to decrypt wallet\", ex)\n+                    continuation.resumeWithException(ex as Throwable)\n+                }\n+\n+            }.deriveKey(wallet, password)\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI0NzQwNA=="}, "originalCommit": {"oid": "0294039c749446a45210c5598403722e1fa58ead"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDI4Mzk5OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDo1MzozMlrOGon3ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDo1MzozMlrOGon3ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI0OTQ2Ng==", "bodyText": "We get this userId from this.blockchainIdentity.uniqueIdString\nWhat is the purpose of making a query to Platform to verify the existance of our identity?", "url": "https://github.com/dashevo/dash-wallet/pull/445#discussion_r445249466", "createdAt": "2020-06-25T00:53:32Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -239,6 +250,51 @@ class PlatformRepo(val walletApplication: WalletApplication) {\n         }\n     }\n \n+    /**\n+     *  Wraps callbacks of DeriveKeyTask as Coroutine\n+     */\n+    private suspend fun deriveKey(handler: Handler, wallet: Wallet, password: String): KeyParameter {\n+        return suspendCoroutine { continuation ->\n+            object : DeriveKeyTask(handler, walletApplication.scryptIterationsTarget()) {\n+\n+                override fun onSuccess(encryptionKey: KeyParameter, wasChanged: Boolean) {\n+                    continuation.resume(encryptionKey)\n+                }\n+\n+                override fun onFailure(ex: KeyCrypterException?) {\n+                    //CreateIdentityService.log.error(\"unable to decrypt wallet\", ex)\n+                    continuation.resumeWithException(ex as Throwable)\n+                }\n+\n+            }.deriveKey(wallet, password)\n+        }\n+    }\n+\n+    suspend fun sendContactRequest(userId: String, encryptionKey: KeyParameter): Resource<Nothing> {\n+        return try {\n+            val identity = platform.identities.get(userId)\n+            println(\"identity: $identity\")\n+            val blockchainIdentityData = blockchainIdentityDataDaoAsync.load()!!\n+            this.blockchainIdentity = initBlockchainIdentity(blockchainIdentityData,\n+                    walletApplication.wallet)\n+\n+            val userId = this.blockchainIdentity.watchIdentity(3, 500, RetryDelayType.SLOW20)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0294039c749446a45210c5598403722e1fa58ead"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDI4NDc1OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDo1Mzo1OVrOGon4Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDo1Mzo1OVrOGon4Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI0OTU3MA==", "bodyText": "these println should be log.info", "url": "https://github.com/dashevo/dash-wallet/pull/445#discussion_r445249570", "createdAt": "2020-06-25T00:53:59Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -239,6 +250,51 @@ class PlatformRepo(val walletApplication: WalletApplication) {\n         }\n     }\n \n+    /**\n+     *  Wraps callbacks of DeriveKeyTask as Coroutine\n+     */\n+    private suspend fun deriveKey(handler: Handler, wallet: Wallet, password: String): KeyParameter {\n+        return suspendCoroutine { continuation ->\n+            object : DeriveKeyTask(handler, walletApplication.scryptIterationsTarget()) {\n+\n+                override fun onSuccess(encryptionKey: KeyParameter, wasChanged: Boolean) {\n+                    continuation.resume(encryptionKey)\n+                }\n+\n+                override fun onFailure(ex: KeyCrypterException?) {\n+                    //CreateIdentityService.log.error(\"unable to decrypt wallet\", ex)\n+                    continuation.resumeWithException(ex as Throwable)\n+                }\n+\n+            }.deriveKey(wallet, password)\n+        }\n+    }\n+\n+    suspend fun sendContactRequest(userId: String, encryptionKey: KeyParameter): Resource<Nothing> {\n+        return try {\n+            val identity = platform.identities.get(userId)\n+            println(\"identity: $identity\")\n+            val blockchainIdentityData = blockchainIdentityDataDaoAsync.load()!!\n+            this.blockchainIdentity = initBlockchainIdentity(blockchainIdentityData,\n+                    walletApplication.wallet)\n+\n+            val userId = this.blockchainIdentity.watchIdentity(3, 500, RetryDelayType.SLOW20)\n+            if (userId != null) {\n+                val contactRequests = ContactRequests(platform)\n+                contactRequests.create(blockchainIdentity, identity!!, encryptionKey)\n+                println(\"contact request sent\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0294039c749446a45210c5598403722e1fa58ead"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDI4ODQ2OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDo1NjoyMlrOGon6Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDo1NjoyMlrOGon6Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1MDEzMQ==", "bodyText": "Recently, I have found that if there is a KotlinNullPointerException, then e.localizedMessage is null, which results in another crash.\nadding logging to this for the various status results.", "url": "https://github.com/dashevo/dash-wallet/pull/445#discussion_r445250131", "createdAt": "2020-06-25T00:56:22Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -239,6 +250,51 @@ class PlatformRepo(val walletApplication: WalletApplication) {\n         }\n     }\n \n+    /**\n+     *  Wraps callbacks of DeriveKeyTask as Coroutine\n+     */\n+    private suspend fun deriveKey(handler: Handler, wallet: Wallet, password: String): KeyParameter {\n+        return suspendCoroutine { continuation ->\n+            object : DeriveKeyTask(handler, walletApplication.scryptIterationsTarget()) {\n+\n+                override fun onSuccess(encryptionKey: KeyParameter, wasChanged: Boolean) {\n+                    continuation.resume(encryptionKey)\n+                }\n+\n+                override fun onFailure(ex: KeyCrypterException?) {\n+                    //CreateIdentityService.log.error(\"unable to decrypt wallet\", ex)\n+                    continuation.resumeWithException(ex as Throwable)\n+                }\n+\n+            }.deriveKey(wallet, password)\n+        }\n+    }\n+\n+    suspend fun sendContactRequest(userId: String, encryptionKey: KeyParameter): Resource<Nothing> {\n+        return try {\n+            val identity = platform.identities.get(userId)\n+            println(\"identity: $identity\")\n+            val blockchainIdentityData = blockchainIdentityDataDaoAsync.load()!!\n+            this.blockchainIdentity = initBlockchainIdentity(blockchainIdentityData,\n+                    walletApplication.wallet)\n+\n+            val userId = this.blockchainIdentity.watchIdentity(3, 500, RetryDelayType.SLOW20)\n+            if (userId != null) {\n+                val contactRequests = ContactRequests(platform)\n+                contactRequests.create(blockchainIdentity, identity!!, encryptionKey)\n+                println(\"contact request sent\")\n+                val cr = contactRequests.watchContactRequest(this.blockchainIdentity.uniqueIdString, userId, 100, 500, RetryDelayType.LINEAR)\n+                println(\"contact request: $cr\")\n+\n+                Resource.success(null)\n+            } else {\n+                Resource.error(\"failed to get contact identity\")\n+            }\n+        } catch (e: Exception) {\n+            Resource.error(e.localizedMessage)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0294039c749446a45210c5598403722e1fa58ead"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDI5MDAxOnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDo1NzoyMFrOGon7VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMzo1NjoyMlrOGpPkMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1MDM4OA==", "bodyText": "Travis CI failed due to RetryDelayType being an undefined symbol.", "url": "https://github.com/dashevo/dash-wallet/pull/445#discussion_r445250388", "createdAt": "2020-06-25T00:57:20Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -277,7 +333,7 @@ class PlatformRepo(val walletApplication: WalletApplication) {\n     //\n     suspend fun verifyIdentityRegisteredAsync(blockchainIdentity: BlockchainIdentity) {\n         withContext(Dispatchers.IO) {\n-            blockchainIdentity.watchIdentity(10, 5000, BlockchainIdentity.RetryDelayType.SLOW20)\n+            blockchainIdentity.watchIdentity(10, 5000, RetryDelayType.SLOW20)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0294039c749446a45210c5598403722e1fa58ead"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1MzA0Ng==", "bodyText": "I see that it was moved in dashpay.  That explains that.", "url": "https://github.com/dashevo/dash-wallet/pull/445#discussion_r445253046", "createdAt": "2020-06-25T01:07:16Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -277,7 +333,7 @@ class PlatformRepo(val walletApplication: WalletApplication) {\n     //\n     suspend fun verifyIdentityRegisteredAsync(blockchainIdentity: BlockchainIdentity) {\n         withContext(Dispatchers.IO) {\n-            blockchainIdentity.watchIdentity(10, 5000, BlockchainIdentity.RetryDelayType.SLOW20)\n+            blockchainIdentity.watchIdentity(10, 5000, RetryDelayType.SLOW20)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1MDM4OA=="}, "originalCommit": {"oid": "0294039c749446a45210c5598403722e1fa58ead"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg5OTgyNQ==", "bodyText": "It was moved to be reused, yes.", "url": "https://github.com/dashevo/dash-wallet/pull/445#discussion_r445899825", "createdAt": "2020-06-25T23:56:22Z", "author": {"login": "sambarboza"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -277,7 +333,7 @@ class PlatformRepo(val walletApplication: WalletApplication) {\n     //\n     suspend fun verifyIdentityRegisteredAsync(blockchainIdentity: BlockchainIdentity) {\n         withContext(Dispatchers.IO) {\n-            blockchainIdentity.watchIdentity(10, 5000, BlockchainIdentity.RetryDelayType.SLOW20)\n+            blockchainIdentity.watchIdentity(10, 5000, RetryDelayType.SLOW20)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1MDM4OA=="}, "originalCommit": {"oid": "0294039c749446a45210c5598403722e1fa58ead"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODI0MTM5OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMzoxMTo1N1rOGpOy5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMzoxMTo1N1rOGpOy5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg4NzIwNg==", "bodyText": "this watchContactRequest method is called with the same userId for the first and second parameter.  Therefore it will return no documents.", "url": "https://github.com/dashevo/dash-wallet/pull/445#discussion_r445887206", "createdAt": "2020-06-25T23:11:57Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -239,6 +250,51 @@ class PlatformRepo(val walletApplication: WalletApplication) {\n         }\n     }\n \n+    /**\n+     *  Wraps callbacks of DeriveKeyTask as Coroutine\n+     */\n+    private suspend fun deriveKey(handler: Handler, wallet: Wallet, password: String): KeyParameter {\n+        return suspendCoroutine { continuation ->\n+            object : DeriveKeyTask(handler, walletApplication.scryptIterationsTarget()) {\n+\n+                override fun onSuccess(encryptionKey: KeyParameter, wasChanged: Boolean) {\n+                    continuation.resume(encryptionKey)\n+                }\n+\n+                override fun onFailure(ex: KeyCrypterException?) {\n+                    //CreateIdentityService.log.error(\"unable to decrypt wallet\", ex)\n+                    continuation.resumeWithException(ex as Throwable)\n+                }\n+\n+            }.deriveKey(wallet, password)\n+        }\n+    }\n+\n+    suspend fun sendContactRequest(userId: String, encryptionKey: KeyParameter): Resource<Nothing> {\n+        return try {\n+            val identity = platform.identities.get(userId)\n+            println(\"identity: $identity\")\n+            val blockchainIdentityData = blockchainIdentityDataDaoAsync.load()!!\n+            this.blockchainIdentity = initBlockchainIdentity(blockchainIdentityData,\n+                    walletApplication.wallet)\n+\n+            val userId = this.blockchainIdentity.watchIdentity(3, 500, RetryDelayType.SLOW20)\n+            if (userId != null) {\n+                val contactRequests = ContactRequests(platform)\n+                contactRequests.create(blockchainIdentity, identity!!, encryptionKey)\n+                println(\"contact request sent\")\n+                val cr = contactRequests.watchContactRequest(this.blockchainIdentity.uniqueIdString, userId, 100, 500, RetryDelayType.LINEAR)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0294039c749446a45210c5598403722e1fa58ead"}, "originalPosition": 112}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 677, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}