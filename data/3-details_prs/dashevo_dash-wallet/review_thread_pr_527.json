{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNDM1OTYz", "number": 527, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwODo0NDowMFrOEr9UZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwODo1MjowMVrOEr9f1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NTI4ODcxOnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/WalletTransactionsFragment.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwODo0NDowMFrOHfAshA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwOTozODoxNFrOHfCk3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI3OTMwMA==", "bodyText": "Most of the below code should be handled by LiveData/ViewModel, however walletChangeReceiver part can be ignored since we do not use ACTION_WALLET_REFERENCE_CHANGED anymore (it is a legacy code).", "url": "https://github.com/dashevo/dash-wallet/pull/527#discussion_r502279300", "createdAt": "2020-10-09T08:44:00Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/ui/WalletTransactionsFragment.java", "diffHunk": "@@ -317,10 +272,8 @@ private void showEmptyView() {\n         recyclerView.setVisibility(View.INVISIBLE);\n     }\n \n-    @Override\n-    public void onLoaderReset(final Loader<List<Transaction>> loader) {\n-        // don't clear the adapter, because it will confuse users\n-    }\n+    //TODO: Do we need to handle this?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dbe0c4de76a75fcf648033ce44b751e84dfb206"}, "originalPosition": 229}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMxMDEwOQ==", "bodyText": "As agreed with @tomasz-ludek , throttling will be implemented in #526.", "url": "https://github.com/dashevo/dash-wallet/pull/527#discussion_r502310109", "createdAt": "2020-10-09T09:38:14Z", "author": {"login": "sambarboza"}, "path": "wallet/src/de/schildbach/wallet/ui/WalletTransactionsFragment.java", "diffHunk": "@@ -317,10 +272,8 @@ private void showEmptyView() {\n         recyclerView.setVisibility(View.INVISIBLE);\n     }\n \n-    @Override\n-    public void onLoaderReset(final Loader<List<Transaction>> loader) {\n-        // don't clear the adapter, because it will confuse users\n-    }\n+    //TODO: Do we need to handle this?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI3OTMwMA=="}, "originalCommit": {"oid": "5dbe0c4de76a75fcf648033ce44b751e84dfb206"}, "originalPosition": 229}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NTMxMTU3OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/TransactionsViewModel.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwODo1MDowNFrOHfA6pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwOTozODo1NFrOHfCmKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI4MjkxOQ==", "bodyText": "the wallet val should be moved inside the method body", "url": "https://github.com/dashevo/dash-wallet/pull/527#discussion_r502282919", "createdAt": "2020-10-09T08:50:04Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/TransactionsViewModel.kt", "diffHunk": "@@ -0,0 +1,95 @@\n+package de.schildbach.wallet.ui.dashpay\n+\n+import android.app.Application\n+import androidx.lifecycle.AndroidViewModel\n+import androidx.lifecycle.MediatorLiveData\n+import androidx.lifecycle.MutableLiveData\n+import androidx.lifecycle.viewModelScope\n+import de.schildbach.wallet.Constants\n+import de.schildbach.wallet.WalletApplication\n+import de.schildbach.wallet.data.DashPayProfile\n+import de.schildbach.wallet.data.UsernameSortOrderBy\n+import kotlinx.coroutines.launch\n+import org.bitcoinj.core.Context\n+import org.bitcoinj.core.Sha256Hash\n+import org.bitcoinj.core.Transaction\n+import org.bitcoinj.core.TransactionConfidence\n+import org.bitcoinj.wallet.Wallet\n+import java.util.*\n+import kotlin.collections.HashMap\n+\n+class TransactionsViewModel(application: Application) : AndroidViewModel(application) {\n+\n+    enum class Direction {\n+        RECEIVED, SENT\n+    }\n+\n+    val direction = MutableLiveData<Direction?>()\n+    val transactionsLiveData = MediatorLiveData<Pair<List<Transaction>,\n+            Map<Sha256Hash, DashPayProfile>>>()\n+    private val balanceLiveData = WalletBalanceLiveData()\n+\n+    init {\n+        load()\n+        transactionsLiveData.addSource(direction) {\n+            load()\n+        }\n+        transactionsLiveData.addSource(balanceLiveData) {\n+            load()\n+        }\n+    }\n+\n+    fun load(wallet: Wallet = WalletApplication.getInstance().wallet) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dbe0c4de76a75fcf648033ce44b751e84dfb206"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMxMDQ0Mg==", "bodyText": "Fixed in 55f7a80", "url": "https://github.com/dashevo/dash-wallet/pull/527#discussion_r502310442", "createdAt": "2020-10-09T09:38:54Z", "author": {"login": "sambarboza"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/TransactionsViewModel.kt", "diffHunk": "@@ -0,0 +1,95 @@\n+package de.schildbach.wallet.ui.dashpay\n+\n+import android.app.Application\n+import androidx.lifecycle.AndroidViewModel\n+import androidx.lifecycle.MediatorLiveData\n+import androidx.lifecycle.MutableLiveData\n+import androidx.lifecycle.viewModelScope\n+import de.schildbach.wallet.Constants\n+import de.schildbach.wallet.WalletApplication\n+import de.schildbach.wallet.data.DashPayProfile\n+import de.schildbach.wallet.data.UsernameSortOrderBy\n+import kotlinx.coroutines.launch\n+import org.bitcoinj.core.Context\n+import org.bitcoinj.core.Sha256Hash\n+import org.bitcoinj.core.Transaction\n+import org.bitcoinj.core.TransactionConfidence\n+import org.bitcoinj.wallet.Wallet\n+import java.util.*\n+import kotlin.collections.HashMap\n+\n+class TransactionsViewModel(application: Application) : AndroidViewModel(application) {\n+\n+    enum class Direction {\n+        RECEIVED, SENT\n+    }\n+\n+    val direction = MutableLiveData<Direction?>()\n+    val transactionsLiveData = MediatorLiveData<Pair<List<Transaction>,\n+            Map<Sha256Hash, DashPayProfile>>>()\n+    private val balanceLiveData = WalletBalanceLiveData()\n+\n+    init {\n+        load()\n+        transactionsLiveData.addSource(direction) {\n+            load()\n+        }\n+        transactionsLiveData.addSource(balanceLiveData) {\n+            load()\n+        }\n+    }\n+\n+    fun load(wallet: Wallet = WalletApplication.getInstance().wallet) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI4MjkxOQ=="}, "originalCommit": {"oid": "5dbe0c4de76a75fcf648033ce44b751e84dfb206"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NTMxNzk4OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/TransactionsViewModel.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwODo1MjowMVrOHfA-tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwODo1MjowMVrOHfA-tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI4Mzk1OA==", "bodyText": "This part will be changed by #526 but is ok for this PR", "url": "https://github.com/dashevo/dash-wallet/pull/527#discussion_r502283958", "createdAt": "2020-10-09T08:52:01Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/TransactionsViewModel.kt", "diffHunk": "@@ -0,0 +1,95 @@\n+package de.schildbach.wallet.ui.dashpay\n+\n+import android.app.Application\n+import androidx.lifecycle.AndroidViewModel\n+import androidx.lifecycle.MediatorLiveData\n+import androidx.lifecycle.MutableLiveData\n+import androidx.lifecycle.viewModelScope\n+import de.schildbach.wallet.Constants\n+import de.schildbach.wallet.WalletApplication\n+import de.schildbach.wallet.data.DashPayProfile\n+import de.schildbach.wallet.data.UsernameSortOrderBy\n+import kotlinx.coroutines.launch\n+import org.bitcoinj.core.Context\n+import org.bitcoinj.core.Sha256Hash\n+import org.bitcoinj.core.Transaction\n+import org.bitcoinj.core.TransactionConfidence\n+import org.bitcoinj.wallet.Wallet\n+import java.util.*\n+import kotlin.collections.HashMap\n+\n+class TransactionsViewModel(application: Application) : AndroidViewModel(application) {\n+\n+    enum class Direction {\n+        RECEIVED, SENT\n+    }\n+\n+    val direction = MutableLiveData<Direction?>()\n+    val transactionsLiveData = MediatorLiveData<Pair<List<Transaction>,\n+            Map<Sha256Hash, DashPayProfile>>>()\n+    private val balanceLiveData = WalletBalanceLiveData()\n+\n+    init {\n+        load()\n+        transactionsLiveData.addSource(direction) {\n+            load()\n+        }\n+        transactionsLiveData.addSource(balanceLiveData) {\n+            load()\n+        }\n+    }\n+\n+    fun load(wallet: Wallet = WalletApplication.getInstance().wallet) {\n+        viewModelScope.launch {\n+            Context.propagate(Constants.CONTEXT)\n+\n+            val contactsTransactions: HashMap<Sha256Hash, DashPayProfile> = hashMapOf()\n+            val contactsByIdentity: HashMap<String, DashPayProfile> = hashMapOf()\n+            val platformRepo = PlatformRepo.getInstance()\n+            val userIdentity = platformRepo.getBlockchainIdentity()\n+            if (userIdentity != null) {\n+                val contacts = PlatformRepo.getInstance().searchContacts(\"\",\n+                        UsernameSortOrderBy.LAST_ACTIVITY, false)\n+                contacts.data?.forEach {\n+                    contactsByIdentity[it.dashPayProfile.userId] = it.dashPayProfile\n+                }\n+            }\n+\n+            val transactions = wallet.getTransactions(true)\n+            val filteredTransactions = arrayListOf<Transaction>()\n+            transactions.filterTo(filteredTransactions, {\n+                val sent = it.getValue(wallet).signum() < 0\n+                val isInternal = it.purpose == Transaction.Purpose.KEY_ROTATION\n+                direction.value == Direction.RECEIVED && !sent\n+                        && !isInternal || direction.value == null ||\n+                        direction.value == Direction.SENT && sent && !isInternal\n+            })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dbe0c4de76a75fcf648033ce44b751e84dfb206"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 604, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}