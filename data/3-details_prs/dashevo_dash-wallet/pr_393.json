{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5ODcwMDgy", "number": 393, "title": "NMA-498: Connect UI to Backend, Part II - Create Username", "bodyText": "This PR has the ability to create 1 username and then disables the ability to create another.  This uses a foreground service to create a username.  The service uses kotlin coroutines and in some cases will suspend the coroutine and wait for the result of a call back (deriving the encryption key, decrypting the wallet seed and when waiting for the transaction to be broadcast).\nWhat is missing (some to be covered by other PR's):\n\nRestoring a Wallet with username does not restore the username (this sort of goes with the first acceptance criteria)\nIf there is an error, you can restart the process from the beginning (not yet from where it failed)\nThere are probably optimizations that can be done on the database, currently two tables are used, one for the status, one for the identity data\nContacts will need to go in the database eventually, should it go in the same table as the identity data?", "createdAt": "2020-04-28T04:09:19Z", "url": "https://github.com/dashevo/dash-wallet/pull/393", "merged": true, "mergeCommit": {"oid": "ab0e6595b31f82b41e9119c02a1a753f33aa7ecf"}, "closed": true, "closedAt": "2020-05-18T15:13:27Z", "author": {"login": "HashEngineering"}, "timelineItems": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcb73R6gH2gAyNDA5ODcwMDgyOmRhZmNjMzI0N2EyMzIzZDExMzY1N2U1YzYwMTVkMzY2ZGM5NzRiMzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcieP97AFqTQxMzUwODY1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dafcc3247a2323d113657e5c6015d366dc974b34", "author": {"user": {"login": "HashEngineering", "name": "Hash Engineering Solutions"}}, "url": "https://github.com/dashevo/dash-wallet/commit/dafcc3247a2323d113657e5c6015d366dc974b34", "committedDate": "2020-04-28T04:06:49Z", "message": "Add Create Username: Part I"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNjE2Mjcy", "url": "https://github.com/dashevo/dash-wallet/pull/393#pullrequestreview-401616272", "createdAt": "2020-04-28T08:35:19Z", "commit": {"oid": "dafcc3247a2323d113657e5c6015d366dc974b34"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwODozNToxOVrOGNJCjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwODozNToxOVrOGNJCjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQzMjc4Mg==", "bodyText": "This line is redundant", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r416432782", "createdAt": "2020-04-28T08:35:19Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -50,4 +59,68 @@ class PlatformRepo(walletApplication: WalletApplication) {\n             Resource.error(e.localizedMessage, null)\n         }\n     }\n+\n+    //\n+    // Step 1 is to upgrade the wallet to support AuthenticationKeyChains\n+    //\n+    fun addWalletAuthenticationKeys(seed: DeterministicSeed, keyParameter: KeyParameter?): RegistrationResource<Boolean> {\n+        val wallet = walletApplication.wallet\n+        val hasKeys = wallet.hasAuthenticationKeyChains()\n+        if(!hasKeys) {\n+            wallet.initializeAuthenticationKeyChains(seed, keyParameter)\n+            return RegistrationResource.success(RegistrationStep.UPGRADING_WALLET, hasKeys)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dafcc3247a2323d113657e5c6015d366dc974b34"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNjIwMTg2", "url": "https://github.com/dashevo/dash-wallet/pull/393#pullrequestreview-401620186", "createdAt": "2020-04-28T08:40:16Z", "commit": {"oid": "dafcc3247a2323d113657e5c6015d366dc974b34"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwODo0MDoxN1rOGNJPXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwODo0MDoxN1rOGNJPXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQzNjA2MA==", "bodyText": "We should probably use a wider scope for this operation, I need to think of it.", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r416436060", "createdAt": "2020-04-28T08:40:17Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/DashPayViewModel.kt", "diffHunk": "@@ -56,4 +72,60 @@ class DashPayViewModel(application: Application) : AndroidViewModel(application)\n         emit(Resource.loading(null))\n         emit(platformRepo.isPlatformAvailable())\n     }\n+    // username registration functions\n+\n+    val createUsernameLiveData = Transformations.switchMap(registerUsernameLiveData) { usernameInfo ->\n+        val wallet = walletApplication.wallet\n+        liveData(Dispatchers.IO) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dafcc3247a2323d113657e5c6015d366dc974b34"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f5c841527dc066c86ba349beecf82fd145b7236", "author": {"user": {"login": "tomasz-ludek", "name": null}}, "url": "https://github.com/dashevo/dash-wallet/commit/0f5c841527dc066c86ba349beecf82fd145b7236", "committedDate": "2020-05-04T17:26:05Z", "message": "Initial implementation of CreateIdentityService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3975aa4e5c3108ffe0d6dbfe4c1b16f72220e1d4", "author": {"user": {"login": "tomasz-ludek", "name": null}}, "url": "https://github.com/dashevo/dash-wallet/commit/3975aa4e5c3108ffe0d6dbfe4c1b16f72220e1d4", "committedDate": "2020-05-04T19:15:45Z", "message": "Handling new IdentityCreationState. Performing first operations directly from CreateIdentityService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d16a706a73a3e82d59ad788b64e58472a5f9608", "author": {"user": {"login": "tomasz-ludek", "name": null}}, "url": "https://github.com/dashevo/dash-wallet/commit/9d16a706a73a3e82d59ad788b64e58472a5f9608", "committedDate": "2020-05-05T10:36:36Z", "message": "Improved exception handling in CreateIdentityService.\nMoved notification related code to dedicated class CreateIdentityNotification."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36ba8beeae80102da73129028b28d3076eb87673", "author": {"user": {"login": "tomasz-ludek", "name": null}}, "url": "https://github.com/dashevo/dash-wallet/commit/36ba8beeae80102da73129028b28d3076eb87673", "committedDate": "2020-05-05T10:45:45Z", "message": "Fixed database version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e287fc5407f10646641d37a4c700148ee2c1c4b7", "author": {"user": {"login": "HashEngineering", "name": "Hash Engineering Solutions"}}, "url": "https://github.com/dashevo/dash-wallet/commit/e287fc5407f10646641d37a4c700148ee2c1c4b7", "committedDate": "2020-05-05T16:20:36Z", "message": "CreateIdentityService: Add remaining steps (with 2 second delay between steps)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e08cd6fb8bd50e39620768932705edf1626c60a", "author": {"user": {"login": "HashEngineering", "name": "Hash Engineering Solutions"}}, "url": "https://github.com/dashevo/dash-wallet/commit/6e08cd6fb8bd50e39620768932705edf1626c60a", "committedDate": "2020-05-05T16:22:04Z", "message": "CreateUserNameActivity: add observer to close activity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69f562c290c9583662b3cc2b02f3d21bb9010ddf", "author": {"user": {"login": "HashEngineering", "name": "Hash Engineering Solutions"}}, "url": "https://github.com/dashevo/dash-wallet/commit/69f562c290c9583662b3cc2b02f3d21bb9010ddf", "committedDate": "2020-05-05T16:22:38Z", "message": "DashPayViewModel: fix compile issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc2ea0856fc165b78cbcc784c75cfccb75c7c7f9", "author": {"user": {"login": "HashEngineering", "name": "Hash Engineering Solutions"}}, "url": "https://github.com/dashevo/dash-wallet/commit/bc2ea0856fc165b78cbcc784c75cfccb75c7c7f9", "committedDate": "2020-05-05T16:23:05Z", "message": "PlatformRepo:  add remaining steps"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29cfe2d0294c3cd9db2dbeeb2e7ee2ecf2f11a7c", "author": {"user": {"login": "HashEngineering", "name": "Hash Engineering Solutions"}}, "url": "https://github.com/dashevo/dash-wallet/commit/29cfe2d0294c3cd9db2dbeeb2e7ee2ecf2f11a7c", "committedDate": "2020-05-05T16:23:43Z", "message": "WalletActivity: change onClick to start create activity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad0a85db7f3bf97c5cfb32a5b578b590543c4eaa", "author": {"user": {"login": "tomasz-ludek", "name": null}}, "url": "https://github.com/dashevo/dash-wallet/commit/ad0a85db7f3bf97c5cfb32a5b578b590543c4eaa", "committedDate": "2020-05-05T22:09:53Z", "message": "Unify display of user validation on network (applied iOS styling) (#399)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "801a4497d924e630269ffec701033a4733da1ba2", "author": {"user": {"login": "HashEngineering", "name": "Hash Engineering Solutions"}}, "url": "https://github.com/dashevo/dash-wallet/commit/801a4497d924e630269ffec701033a4733da1ba2", "committedDate": "2020-05-05T22:24:42Z", "message": "Disable Register button when the username is not valid"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MzU2Njg3", "url": "https://github.com/dashevo/dash-wallet/pull/393#pullrequestreview-406356687", "createdAt": "2020-05-06T07:20:19Z", "commit": {"oid": "ad0a85db7f3bf97c5cfb32a5b578b590543c4eaa"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzoyMDoyMFrOGRGxHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMTozOToyMlrOGRmbOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU4OTg1NA==", "bodyText": "We can give the val exception a default null value, so we don't have to explicitly pass it as null on lines 25 and 33.", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r420589854", "createdAt": "2020-05-06T07:20:20Z", "author": {"login": "sambarboza"}, "path": "wallet/src/de/schildbach/wallet/livedata/RegistrationResource.kt", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020 Dash Core Group\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package de.schildbach.wallet.livedata\n+\n+import de.schildbach.wallet.livedata.Status.*\n+import java.lang.Exception\n+\n+data class RegistrationResource<out T>(val status: Status, val step: RegistrationStep, val data: T?, val exception: Exception?) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad0a85db7f3bf97c5cfb32a5b578b590543c4eaa"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU5MzIxNw==", "bodyText": "Any reason to not use IdentityCreationState.State or replace it? Both seems to contain the same information.", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r420593217", "createdAt": "2020-05-06T07:27:18Z", "author": {"login": "sambarboza"}, "path": "wallet/src/de/schildbach/wallet/livedata/RegistrationStep.kt", "diffHunk": "@@ -0,0 +1,16 @@\n+package de.schildbach.wallet.livedata\n+\n+enum class RegistrationStep {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad0a85db7f3bf97c5cfb32a5b578b590543c4eaa"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEwNDY3MA==", "bodyText": "Can we move the two observers below, or their setup, outside the onCreated method?", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r421104670", "createdAt": "2020-05-06T21:30:52Z", "author": {"login": "sambarboza"}, "path": "wallet/src/de/schildbach/wallet/ui/CreateUsernameActivity.kt", "diffHunk": "@@ -78,44 +85,100 @@ class CreateUsernameActivity : InteractionAwareActivity(), TextWatcher {\n             showCompleteState()\n         }\n \n+        walletApplication = application as WalletApplication", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad0a85db7f3bf97c5cfb32a5b578b590543c4eaa"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEwNTg1MA==", "bodyText": "We can use walletApplication.wallet, since walletApplication was already defined in line 88.", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r421105850", "createdAt": "2020-05-06T21:33:27Z", "author": {"login": "sambarboza"}, "path": "wallet/src/de/schildbach/wallet/ui/CreateUsernameActivity.kt", "diffHunk": "@@ -78,44 +85,100 @@ class CreateUsernameActivity : InteractionAwareActivity(), TextWatcher {\n             showCompleteState()\n         }\n \n+        walletApplication = application as WalletApplication\n+\n         val confirmTransactionSharedViewModel = ViewModelProviders.of(this)\n                 .get(SingleActionSharedViewModel::class.java)\n         confirmTransactionSharedViewModel.clickConfirmButtonEvent.observe(this, Observer {\n+            // setup the wallet\n+            val wallet = (application as WalletApplication).wallet", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad0a85db7f3bf97c5cfb32a5b578b590543c4eaa"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEwNjY1Ng==", "bodyText": "Will we still need this code?", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r421106656", "createdAt": "2020-05-06T21:35:13Z", "author": {"login": "sambarboza"}, "path": "wallet/src/de/schildbach/wallet/ui/CreateUsernameActivity.kt", "diffHunk": "@@ -78,44 +85,100 @@ class CreateUsernameActivity : InteractionAwareActivity(), TextWatcher {\n             showCompleteState()\n         }\n \n+        walletApplication = application as WalletApplication\n+\n         val confirmTransactionSharedViewModel = ViewModelProviders.of(this)\n                 .get(SingleActionSharedViewModel::class.java)\n         confirmTransactionSharedViewModel.clickConfirmButtonEvent.observe(this, Observer {\n+            // setup the wallet\n+            val wallet = (application as WalletApplication).wallet\n+\n+            //get key parameter\n+            val username = username.text.toString()\n+            if (wallet.isEncrypted) {\n+                ContextCompat.startForegroundService(this, createIntent(this, username))\n+\n+                // finish this activity on error or when registration is complete\n+                AppDatabase.getAppDatabase().identityCreationStateDao().load().observe(this, Observer {\n+                    if (it != null && it.error) {\n+                        finish()\n+                    } else when (it?.state) {\n+                        IdentityCreationState.State.USERNAME_REGISTERED -> {\n+                            finish()\n+                        }\n+                    }\n+                })\n+            } else {\n+                dashPayViewModel.createUsername(username, wallet.keyChainSeed, null)\n+            }\n             showProcessingState()\n         })\n \n         dashPayViewModel = ViewModelProvider(this).get(DashPayViewModel::class.java)\n \n         dashPayViewModel.getUsernameLiveData.observe(this, Observer {\n+            username_exists_req.visibility = View.VISIBLE\n+            username_exists_req_label.visibility = View.VISIBLE\n             when (it.status) {\n                 Status.LOADING -> {\n-                    register_btn.isEnabled = false\n-                    username_exists_req_label.visibility = View.GONE\n-                    username_exists_req_img.visibility = View.GONE\n+                    // this is delayed therefore the UI state is configured before calling checkUsernameNotExist(...)\n                 }\n                 Status.ERROR -> {\n-                    // Some error happened when communicating with Platform\n-                    // nothing is currently reported to the user\n+                    username_exists_req_progress.visibility = View.INVISIBLE\n+                    username_exists_req_img.visibility = View.VISIBLE\n+                    username_exists_req_img.setImageResource(R.drawable.ic_username_requirement_x)\n+                    username_exists_req_label.typeface = mediumTypeFace\n+                    username_exists_req_label.setTextColor(ResourcesCompat.getColor(resources, R.color.dash_red, null))\n+                    username_exists_req_label.setText(R.string.platform_communication_error)\n                     register_btn.isEnabled = false\n-                    username_exists_req_label.visibility = View.GONE\n-                    username_exists_req_img.visibility = View.GONE\n                 }\n                 Status.SUCCESS -> {\n                     if (it.data != null) {\n                         // This user name exists\n-                        register_btn.isEnabled = false\n-                        username_exists_req_label.visibility = View.VISIBLE\n+                        username_exists_req_progress.visibility = View.INVISIBLE\n                         username_exists_req_img.visibility = View.VISIBLE\n+                        username_exists_req_img.setImageResource(R.drawable.ic_username_requirement_x)\n+                        username_exists_req_label.typeface = mediumTypeFace\n+                        username_exists_req_label.setTextColor(ResourcesCompat.getColor(resources, R.color.dash_red, null))\n+                        username_exists_req_label.setText(R.string.identity_username_taken)\n+                        register_btn.isEnabled = false\n                     } else {\n+                        username_exists_req_progress.visibility = View.INVISIBLE\n+                        username_exists_req_img.visibility = View.VISIBLE\n+                        username_exists_req_img.setImageResource(R.drawable.ic_username_requirement_checkmark)\n+                        username_exists_req_label.typeface = mediumTypeFace\n+                        username_exists_req_label.setTextColor(ResourcesCompat.getColor(resources, R.color.dark_text, null))\n+                        username_exists_req_label.setText(R.string.identity__username_available)\n                         register_btn.isEnabled = true\n-                        username_exists_req_label.visibility = View.GONE\n-                        username_exists_req_img.visibility = View.GONE\n                     }\n                 }\n             }\n         })\n+\n+//        dashPayViewModel.createUsernameLiveData.observe(this, Observer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad0a85db7f3bf97c5cfb32a5b578b590543c4eaa"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEwNjk5OA==", "bodyText": "Will we need this?", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r421106998", "createdAt": "2020-05-06T21:35:58Z", "author": {"login": "sambarboza"}, "path": "wallet/src/de/schildbach/wallet/ui/CreateUsernameActivity.kt", "diffHunk": "@@ -229,4 +299,33 @@ class CreateUsernameActivity : InteractionAwareActivity(), TextWatcher {\n     override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\n     }\n \n+//    private fun handleDecryptPIN(password: String) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad0a85db7f3bf97c5cfb32a5b578b590543c4eaa"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEwNzM0OA==", "bodyText": "It seems that these imports are not being used.", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r421107348", "createdAt": "2020-05-06T21:36:42Z", "author": {"login": "sambarboza"}, "path": "wallet/src/de/schildbach/wallet/ui/WalletActivity.java", "diffHunk": "@@ -65,6 +65,8 @@\n \n import de.schildbach.wallet.livedata.Resource;\n import de.schildbach.wallet.livedata.Status;\n+import de.schildbach.wallet.service.InactivityNotificationService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad0a85db7f3bf97c5cfb32a5b578b590543c4eaa"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEwODUzOQ==", "bodyText": "Is the code below for testing purposes only?", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r421108539", "createdAt": "2020-05-06T21:39:22Z", "author": {"login": "sambarboza"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/CreateIdentityService.kt", "diffHunk": "@@ -0,0 +1,228 @@\n+package de.schildbach.wallet.ui.dashpay\n+\n+import android.content.Context\n+import android.content.Intent\n+import android.os.Handler\n+import androidx.lifecycle.LifecycleService\n+import de.schildbach.wallet.AppDatabase\n+import de.schildbach.wallet.WalletApplication\n+import de.schildbach.wallet.data.IdentityCreationState\n+import de.schildbach.wallet.ui.security.SecurityGuard\n+import de.schildbach.wallet.ui.send.DecryptSeedTask\n+import de.schildbach.wallet.ui.send.DeriveKeyTask\n+import kotlinx.coroutines.*\n+import org.bitcoinj.crypto.KeyCrypterException\n+import org.bitcoinj.wallet.DeterministicSeed\n+import org.bitcoinj.wallet.Wallet\n+import org.bouncycastle.crypto.params.KeyParameter\n+import org.dashevo.dashpay.BlockchainIdentity\n+import org.dashevo.dpp.identity.Identity\n+import org.slf4j.LoggerFactory\n+import java.io.IOException\n+import kotlin.coroutines.resume\n+import kotlin.coroutines.resumeWithException\n+import kotlin.coroutines.suspendCoroutine\n+import kotlin.random.Random\n+\n+\n+class CreateIdentityService : LifecycleService() {\n+\n+    companion object {\n+        private val log = LoggerFactory.getLogger(CreateIdentityService::class.java)\n+\n+        private const val ACTION_CREATE_IDENTITY = \"org.dash.dashpay.action.CREATE_IDENTITY\"\n+\n+        private const val EXTRA_USERNAME = \"org.dash.dashpay.extra.USERNAME\"\n+\n+        @JvmStatic\n+        fun createIntent(context: Context, username: String): Intent {\n+            return Intent(context, CreateIdentityService::class.java).apply {\n+                action = ACTION_CREATE_IDENTITY\n+                putExtra(EXTRA_USERNAME, username)\n+            }\n+        }\n+    }\n+\n+    private val walletApplication by lazy { application as WalletApplication }\n+    private val platformRepo by lazy { PlatformRepo(walletApplication) }\n+    private lateinit var securityGuard: SecurityGuard\n+\n+    private val identityCreationStateDaoAsync = AppDatabase.getAppDatabase().identityCreationStateDaoAsync()\n+\n+    private val createIdentityNotification by lazy { CreateIdentityNotification(this) }\n+\n+    private val serviceJob = Job()\n+    private val serviceScope = CoroutineScope(serviceJob + Dispatchers.Main)\n+\n+    lateinit var identityCreationState: IdentityCreationState\n+\n+    override fun onCreate() {\n+        super.onCreate()\n+        try {\n+            securityGuard = SecurityGuard()\n+        } catch (e: Exception) {\n+            log.error(\"Unable to instantiate SecurityGuard\", e)\n+            stopSelf()\n+            return\n+        }\n+        createIdentityNotification.startServiceForeground()\n+    }\n+\n+    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\n+        super.onStartCommand(intent, flags, startId)\n+\n+        if (intent != null) {\n+\n+            when (intent.action) {\n+                ACTION_CREATE_IDENTITY -> handleCreateIdentityAction(intent)\n+            }\n+        }\n+\n+        return START_NOT_STICKY\n+    }\n+\n+    private fun handleCreateIdentityAction(intent: Intent) {\n+        val username = intent.getStringExtra(EXTRA_USERNAME)\n+\n+        val exceptionHandler = CoroutineExceptionHandler { _, exception ->\n+            log.error(\"[${identityCreationState.state}(error)]\", exception)\n+            GlobalScope.launch {\n+                updateState(identityCreationState.state, true)\n+//                stopSelf()\n+            }\n+        }\n+\n+        serviceScope.launch(exceptionHandler) {\n+            createIdentity(username)\n+            stopSelf()\n+        }\n+    }\n+\n+    private suspend fun createIdentity(username: String) {\n+\n+        //identityCreationState = identityCreationStateDaoAsync.load()\n+        //        ?: IdentityCreationState(IdentityCreationState.State.UPGRADING_WALLET, false, username)\n+        identityCreationState = IdentityCreationState(IdentityCreationState.State.UPGRADING_WALLET, false, username)\n+        identityCreationStateDaoAsync.insert(identityCreationState)\n+\n+        if (identityCreationState.state != IdentityCreationState.State.UPGRADING_WALLET || identityCreationState.error) {\n+            log.info(\"resuming identity creation process [${identityCreationState.state}${if (identityCreationState.error) \"(error)\" else \"\"}]\")\n+        }\n+\n+        val handler = Handler()\n+        val wallet = walletApplication.wallet\n+        val password = securityGuard.retrievePassword()\n+\n+        val encryptionKey = deriveKey(handler, wallet, password)\n+        val seed = decryptSeed(handler, wallet, encryptionKey)\n+\n+//        val usernameInfo = CreateUsernameInfo(username, seed, encryptionKey)\n+\n+\n+        platformRepo.addWalletAuthenticationKeysAsync(seed, encryptionKey)\n+\n+        updateState(IdentityCreationState.State.CREDIT_FUNDING_TX_SENDING)\n+\n+        //create the Blockchain Identity object (this needs to be saved somewhere eventually)\n+        val blockchainIdentity = BlockchainIdentity(Identity.IdentityType.USER, 0, wallet)\n+\n+        platformRepo.createCreditFundingTransactionAsync(blockchainIdentity, encryptionKey)\n+\n+        walletApplication.broadcastTransaction(blockchainIdentity.creditFundingTransaction)\n+\n+        updateState(IdentityCreationState.State.CREDIT_FUNDING_TX_SENT)\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad0a85db7f3bf97c5cfb32a5b578b590543c4eaa"}, "originalPosition": 134}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d0cbd5e82c867691b1e57819c097720cb1fe2f4", "author": {"user": {"login": "HashEngineering", "name": "Hash Engineering Solutions"}}, "url": "https://github.com/dashevo/dash-wallet/commit/6d0cbd5e82c867691b1e57819c097720cb1fe2f4", "committedDate": "2020-05-07T00:08:30Z", "message": "Remove obsolete code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a75d006a476d4cfbcc6ce4099bc8736d6bbebcd2", "author": {"user": {"login": "HashEngineering", "name": "Hash Engineering Solutions"}}, "url": "https://github.com/dashevo/dash-wallet/commit/a75d006a476d4cfbcc6ce4099bc8736d6bbebcd2", "committedDate": "2020-05-07T00:12:31Z", "message": "Add comments for steps"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c1eab2641f3b8c61e62e2e267c582543bd6d09c", "author": {"user": {"login": "HashEngineering", "name": "Hash Engineering Solutions"}}, "url": "https://github.com/dashevo/dash-wallet/commit/5c1eab2641f3b8c61e62e2e267c582543bd6d09c", "committedDate": "2020-05-07T00:13:45Z", "message": "Use a suspendCoroutine to send a transaction and wait for feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1df45863dd61ec1ce62105038f5247f9243a14a4", "author": {"user": {"login": "HashEngineering", "name": "Hash Engineering Solutions"}}, "url": "https://github.com/dashevo/dash-wallet/commit/1df45863dd61ec1ce62105038f5247f9243a14a4", "committedDate": "2020-05-07T00:16:18Z", "message": "CreateUsernameActivity: remove obsolete code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07f06f10cd749c36d273323945784ef61d47cbae", "author": {"user": {"login": "HashEngineering", "name": "Hash Engineering Solutions"}}, "url": "https://github.com/dashevo/dash-wallet/commit/07f06f10cd749c36d273323945784ef61d47cbae", "committedDate": "2020-05-07T00:22:07Z", "message": "CreateUsernameActivity: Refactor initViewModel and wallet"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20dc2df50ba74e7b3d767f79537090a15dac38b7", "author": {"user": {"login": "HashEngineering", "name": "Hash Engineering Solutions"}}, "url": "https://github.com/dashevo/dash-wallet/commit/20dc2df50ba74e7b3d767f79537090a15dac38b7", "committedDate": "2020-05-08T00:06:58Z", "message": "Add BlockchainIdentity table to the app database"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a2f16148d743e94485994dd208f8a852fad3baa", "author": {"user": {"login": "HashEngineering", "name": "Hash Engineering Solutions"}}, "url": "https://github.com/dashevo/dash-wallet/commit/9a2f16148d743e94485994dd208f8a852fad3baa", "committedDate": "2020-05-08T00:08:01Z", "message": "Save the BlockchainIdentity to the database along the way"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a1da3425ac5fae24f0b6a2e3c110068b3de8045", "author": {"user": {"login": "HashEngineering", "name": "Hash Engineering Solutions"}}, "url": "https://github.com/dashevo/dash-wallet/commit/5a1da3425ac5fae24f0b6a2e3c110068b3de8045", "committedDate": "2020-05-08T00:08:30Z", "message": "Show the complete status at the end of the process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "193219fe36654003e7cf12b53aabefc480ca61df", "author": {"user": {"login": "HashEngineering", "name": "Hash Engineering Solutions"}}, "url": "https://github.com/dashevo/dash-wallet/commit/193219fe36654003e7cf12b53aabefc480ca61df", "committedDate": "2020-05-08T00:09:13Z", "message": "Don't show Join DashPay if an identity exists"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fe43ed6e993ae8b3814de07f28909bbf96c9c3b", "author": {"user": {"login": "HashEngineering", "name": "Hash Engineering Solutions"}}, "url": "https://github.com/dashevo/dash-wallet/commit/8fe43ed6e993ae8b3814de07f28909bbf96c9c3b", "committedDate": "2020-05-08T00:09:40Z", "message": "Add possible error states (not used)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a97121de3c2191f9550a247870638dcadf76b503", "author": {"user": {"login": "HashEngineering", "name": "Hash Engineering Solutions"}}, "url": "https://github.com/dashevo/dash-wallet/commit/a97121de3c2191f9550a247870638dcadf76b503", "committedDate": "2020-05-12T05:07:02Z", "message": "WalletActivity: Remove unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df09a470bc2902a7daa055eb72faffd22280083b", "author": {"user": {"login": "HashEngineering", "name": "Hash Engineering Solutions"}}, "url": "https://github.com/dashevo/dash-wallet/commit/df09a470bc2902a7daa055eb72faffd22280083b", "committedDate": "2020-05-12T05:15:33Z", "message": "CreateIdentityService: Remove delays and temp code, add comments, logs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNDU2NDkx", "url": "https://github.com/dashevo/dash-wallet/pull/393#pullrequestreview-410456491", "createdAt": "2020-05-12T22:05:25Z", "commit": {"oid": "df09a470bc2902a7daa055eb72faffd22280083b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjowNToyNlrOGUaosg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjo1Njo1OVrOGUbzLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2MTEwNg==", "bodyText": "Can we please remove this line or add a //TODO?", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r424061106", "createdAt": "2020-05-12T22:05:26Z", "author": {"login": "sambarboza"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/CreateIdentityService.kt", "diffHunk": "@@ -0,0 +1,329 @@\n+package de.schildbach.wallet.ui.dashpay\n+\n+import android.content.Context\n+import android.content.Intent\n+import android.os.Handler\n+import androidx.lifecycle.LifecycleService\n+import de.schildbach.wallet.AppDatabase\n+import de.schildbach.wallet.Constants\n+import de.schildbach.wallet.WalletApplication\n+import de.schildbach.wallet.data.BlockchainIdentityData\n+import de.schildbach.wallet.data.IdentityCreationState\n+import de.schildbach.wallet.ui.security.SecurityGuard\n+import de.schildbach.wallet.ui.send.DecryptSeedTask\n+import de.schildbach.wallet.ui.send.DeriveKeyTask\n+import kotlinx.coroutines.*\n+import org.bitcoinj.core.RejectMessage\n+import org.bitcoinj.core.RejectedTransactionException\n+import org.bitcoinj.core.TransactionConfidence\n+import org.bitcoinj.crypto.KeyCrypterException\n+import org.bitcoinj.evolution.CreditFundingTransaction\n+import org.bitcoinj.wallet.DeterministicSeed\n+import org.bitcoinj.wallet.Wallet\n+import org.bouncycastle.crypto.params.KeyParameter\n+import org.dashevo.dashpay.BlockchainIdentity\n+import org.dashevo.dpp.identity.Identity\n+import org.dashevo.platform.Names\n+import org.slf4j.LoggerFactory\n+import java.io.IOException\n+import kotlin.coroutines.resume\n+import kotlin.coroutines.resumeWithException\n+import kotlin.coroutines.suspendCoroutine\n+\n+\n+class CreateIdentityService : LifecycleService() {\n+\n+    companion object {\n+        private val log = LoggerFactory.getLogger(CreateIdentityService::class.java)\n+\n+        private const val ACTION_CREATE_IDENTITY = \"org.dash.dashpay.action.CREATE_IDENTITY\"\n+\n+        private const val EXTRA_USERNAME = \"org.dash.dashpay.extra.USERNAME\"\n+\n+        @JvmStatic\n+        fun createIntent(context: Context, username: String): Intent {\n+            return Intent(context, CreateIdentityService::class.java).apply {\n+                action = ACTION_CREATE_IDENTITY\n+                putExtra(EXTRA_USERNAME, username)\n+            }\n+        }\n+    }\n+\n+    private val walletApplication by lazy { application as WalletApplication }\n+    private val platformRepo by lazy { PlatformRepo(walletApplication) }\n+    private lateinit var securityGuard: SecurityGuard\n+\n+    private val identityCreationStateDaoAsync = AppDatabase.getAppDatabase().identityCreationStateDaoAsync()\n+    private val blockchainIdentityDataDaoAsync = AppDatabase.getAppDatabase().blockchainIdentityDataDaoAsync()\n+\n+    private val createIdentityNotification by lazy { CreateIdentityNotification(this) }\n+\n+    private val serviceJob = Job()\n+    private val serviceScope = CoroutineScope(serviceJob + Dispatchers.Main)\n+\n+    lateinit var identityCreationState: IdentityCreationState\n+    lateinit var blockchainIdentityData: BlockchainIdentityData\n+\n+    override fun onCreate() {\n+        super.onCreate()\n+        try {\n+            securityGuard = SecurityGuard()\n+        } catch (e: Exception) {\n+            log.error(\"Unable to instantiate SecurityGuard\", e)\n+            stopSelf()\n+            return\n+        }\n+        createIdentityNotification.startServiceForeground()\n+    }\n+\n+    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\n+        super.onStartCommand(intent, flags, startId)\n+\n+        if (intent != null) {\n+\n+            when (intent.action) {\n+                ACTION_CREATE_IDENTITY -> handleCreateIdentityAction(intent)\n+            }\n+        }\n+\n+        return START_NOT_STICKY\n+    }\n+\n+    private fun handleCreateIdentityAction(intent: Intent) {\n+        val username = intent.getStringExtra(EXTRA_USERNAME)\n+\n+        val exceptionHandler = CoroutineExceptionHandler { _, exception ->\n+            log.error(\"[${identityCreationState.state}(error)]\", exception)\n+            GlobalScope.launch {\n+                updateState(identityCreationState.state, true)\n+//                stopSelf()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df09a470bc2902a7daa055eb72faffd22280083b"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2OTE2Mg==", "bodyText": "Any reason we're jumping from version 5 to 7?", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r424069162", "createdAt": "2020-05-12T22:26:07Z", "author": {"login": "sambarboza"}, "path": "wallet/src/de/schildbach/wallet/AppDatabase.java", "diffHunk": "@@ -5,27 +5,38 @@\n import androidx.room.RoomDatabase;\n import androidx.room.TypeConverters;\n \n+import de.schildbach.wallet.data.BlockchainIdentityData;\n+import de.schildbach.wallet.data.BlockchainIdentityDataDao;\n+import de.schildbach.wallet.data.BlockchainIdentityDataDaoAsync;\n import de.schildbach.wallet.data.BlockchainState;\n import de.schildbach.wallet.data.BlockchainStateDao;\n import de.schildbach.wallet.data.IdentityCreationState;\n import de.schildbach.wallet.data.IdentityCreationStateDao;\n+import de.schildbach.wallet.data.IdentityCreationStateDaoAsync;\n import de.schildbach.wallet.data.RoomConverters;\n import de.schildbach.wallet.rates.ExchangeRate;\n import de.schildbach.wallet.rates.ExchangeRatesDao;\n \n /**\n  * @author Samuel Barbosa\n  */\n-@Database(entities = {ExchangeRate.class, BlockchainState.class, IdentityCreationState.class}, version = 5)\n+@Database(entities = {ExchangeRate.class, BlockchainState.class, IdentityCreationState.class, BlockchainIdentityData.class}, version = 7)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df09a470bc2902a7daa055eb72faffd22280083b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3ODk1MQ==", "bodyText": "If we reorder BlockchainIdentityData constructor parameters and add some default values, we can call this as:\nBlockchainIdentityData(0, username).\nThe refactored constructor would look like this:\nclass BlockchainIdentityData(var index: Int?,\n                             var username: String?,\n                             var creditFundingTxId: Sha256Hash? = null,\n                             var lockedOutpoint: TransactionOutPoint? = null,\n                             var preorderSalt: ByteArray? = null,\n                             var registrationStatus: BlockchainIdentity.RegistrationStatus? = null,\n                             var usernameStatus: BlockchainIdentity.UsernameStatus? = null,\n                             var domain: String? = null) {", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r424078951", "createdAt": "2020-05-12T22:53:17Z", "author": {"login": "sambarboza"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/CreateIdentityService.kt", "diffHunk": "@@ -0,0 +1,329 @@\n+package de.schildbach.wallet.ui.dashpay\n+\n+import android.content.Context\n+import android.content.Intent\n+import android.os.Handler\n+import androidx.lifecycle.LifecycleService\n+import de.schildbach.wallet.AppDatabase\n+import de.schildbach.wallet.Constants\n+import de.schildbach.wallet.WalletApplication\n+import de.schildbach.wallet.data.BlockchainIdentityData\n+import de.schildbach.wallet.data.IdentityCreationState\n+import de.schildbach.wallet.ui.security.SecurityGuard\n+import de.schildbach.wallet.ui.send.DecryptSeedTask\n+import de.schildbach.wallet.ui.send.DeriveKeyTask\n+import kotlinx.coroutines.*\n+import org.bitcoinj.core.RejectMessage\n+import org.bitcoinj.core.RejectedTransactionException\n+import org.bitcoinj.core.TransactionConfidence\n+import org.bitcoinj.crypto.KeyCrypterException\n+import org.bitcoinj.evolution.CreditFundingTransaction\n+import org.bitcoinj.wallet.DeterministicSeed\n+import org.bitcoinj.wallet.Wallet\n+import org.bouncycastle.crypto.params.KeyParameter\n+import org.dashevo.dashpay.BlockchainIdentity\n+import org.dashevo.dpp.identity.Identity\n+import org.dashevo.platform.Names\n+import org.slf4j.LoggerFactory\n+import java.io.IOException\n+import kotlin.coroutines.resume\n+import kotlin.coroutines.resumeWithException\n+import kotlin.coroutines.suspendCoroutine\n+\n+\n+class CreateIdentityService : LifecycleService() {\n+\n+    companion object {\n+        private val log = LoggerFactory.getLogger(CreateIdentityService::class.java)\n+\n+        private const val ACTION_CREATE_IDENTITY = \"org.dash.dashpay.action.CREATE_IDENTITY\"\n+\n+        private const val EXTRA_USERNAME = \"org.dash.dashpay.extra.USERNAME\"\n+\n+        @JvmStatic\n+        fun createIntent(context: Context, username: String): Intent {\n+            return Intent(context, CreateIdentityService::class.java).apply {\n+                action = ACTION_CREATE_IDENTITY\n+                putExtra(EXTRA_USERNAME, username)\n+            }\n+        }\n+    }\n+\n+    private val walletApplication by lazy { application as WalletApplication }\n+    private val platformRepo by lazy { PlatformRepo(walletApplication) }\n+    private lateinit var securityGuard: SecurityGuard\n+\n+    private val identityCreationStateDaoAsync = AppDatabase.getAppDatabase().identityCreationStateDaoAsync()\n+    private val blockchainIdentityDataDaoAsync = AppDatabase.getAppDatabase().blockchainIdentityDataDaoAsync()\n+\n+    private val createIdentityNotification by lazy { CreateIdentityNotification(this) }\n+\n+    private val serviceJob = Job()\n+    private val serviceScope = CoroutineScope(serviceJob + Dispatchers.Main)\n+\n+    lateinit var identityCreationState: IdentityCreationState\n+    lateinit var blockchainIdentityData: BlockchainIdentityData\n+\n+    override fun onCreate() {\n+        super.onCreate()\n+        try {\n+            securityGuard = SecurityGuard()\n+        } catch (e: Exception) {\n+            log.error(\"Unable to instantiate SecurityGuard\", e)\n+            stopSelf()\n+            return\n+        }\n+        createIdentityNotification.startServiceForeground()\n+    }\n+\n+    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\n+        super.onStartCommand(intent, flags, startId)\n+\n+        if (intent != null) {\n+\n+            when (intent.action) {\n+                ACTION_CREATE_IDENTITY -> handleCreateIdentityAction(intent)\n+            }\n+        }\n+\n+        return START_NOT_STICKY\n+    }\n+\n+    private fun handleCreateIdentityAction(intent: Intent) {\n+        val username = intent.getStringExtra(EXTRA_USERNAME)\n+\n+        val exceptionHandler = CoroutineExceptionHandler { _, exception ->\n+            log.error(\"[${identityCreationState.state}(error)]\", exception)\n+            GlobalScope.launch {\n+                updateState(identityCreationState.state, true)\n+//                stopSelf()\n+            }\n+        }\n+\n+        serviceScope.launch(exceptionHandler) {\n+            createIdentity(username)\n+            stopSelf()\n+        }\n+    }\n+\n+    private suspend fun createIdentity(username: String) {\n+        log.info(\"Username registration starting\")\n+\n+        identityCreationState = identityCreationStateDaoAsync.load()\n+                ?: IdentityCreationState(IdentityCreationState.State.UPGRADING_WALLET, false, username)\n+        blockchainIdentityData = blockchainIdentityDataDaoAsync.load()\n+                ?: BlockchainIdentityData(0, null ,null, null, null, null, null, username)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df09a470bc2902a7daa055eb72faffd22280083b"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3OTg5Mg==", "bodyText": "Can we rename to toUsernameStatus to match the casing of the type?", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r424079892", "createdAt": "2020-05-12T22:56:08Z", "author": {"login": "sambarboza"}, "path": "wallet/src/de/schildbach/wallet/data/RoomConverters.kt", "diffHunk": "@@ -67,4 +72,43 @@ class RoomConverters {\n         return identityCreationState.ordinal\n     }\n \n+    @TypeConverter\n+    fun fromHash(hash: Sha256Hash?): ByteArray? {\n+        return hash?.reversedBytes\n+    }\n+\n+    @TypeConverter\n+    fun byteArrayToHash(bytes: ByteArray?): Sha256Hash? {\n+        return bytes?.let { Sha256Hash.wrapReversed(it) }\n+    }\n+\n+    @TypeConverter\n+    fun fromTransactionOutPoint(outpoint: TransactionOutPoint?): ByteArray? {\n+        return outpoint?.bitcoinSerialize()\n+    }\n+\n+    @TypeConverter\n+    fun toTransactionOutPoint(bytes: ByteArray?): TransactionOutPoint? {\n+        return bytes?.let { TransactionOutPoint(Constants.NETWORK_PARAMETERS, it, 0) }\n+    }\n+\n+    @TypeConverter\n+    fun toUserNameStatus(value: Int): BlockchainIdentity.UsernameStatus {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df09a470bc2902a7daa055eb72faffd22280083b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4MDE3NA==", "bodyText": "Please remove or add a //TODO.", "url": "https://github.com/dashevo/dash-wallet/pull/393#discussion_r424080174", "createdAt": "2020-05-12T22:56:59Z", "author": {"login": "sambarboza"}, "path": "wallet/src/de/schildbach/wallet/ui/CreateUsernameActivity.kt", "diffHunk": "@@ -51,13 +54,17 @@ class CreateUsernameActivity : InteractionAwareActivity(), TextWatcher {\n     private val fadeOutAnimation by lazy { AnimationUtils.loadAnimation(this, R.anim.fade_out) }\n     private lateinit var completeUsername: String\n     private lateinit var dashPayViewModel: DashPayViewModel\n+    //    private lateinit var securityGuard: SecurityGuard", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df09a470bc2902a7daa055eb72faffd22280083b"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0dba0d0d862e46d99111b8e00dafd1139e0863a", "author": {"user": {"login": "HashEngineering", "name": "Hash Engineering Solutions"}}, "url": "https://github.com/dashevo/dash-wallet/commit/b0dba0d0d862e46d99111b8e00dafd1139e0863a", "committedDate": "2020-05-13T14:40:48Z", "message": "BlockchainIdentityData: Refactor constructor to use default values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17fca77c65ade7eb934521d2f0e9c35d93d04b22", "author": {"user": {"login": "HashEngineering", "name": "Hash Engineering Solutions"}}, "url": "https://github.com/dashevo/dash-wallet/commit/17fca77c65ade7eb934521d2f0e9c35d93d04b22", "committedDate": "2020-05-13T14:43:52Z", "message": "CreateIdentityService: Add TODO comment in the exception handler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84472a5b082d1c4fec611f656fcad0b7de8a0d61", "author": {"user": {"login": "HashEngineering", "name": "Hash Engineering Solutions"}}, "url": "https://github.com/dashevo/dash-wallet/commit/84472a5b082d1c4fec611f656fcad0b7de8a0d61", "committedDate": "2020-05-13T14:44:59Z", "message": "Rename type converter (toUsernameStatus)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "458f7f65d2d74056f8784831ba4c90b2df8ae82b", "author": {"user": {"login": "HashEngineering", "name": "Hash Engineering Solutions"}}, "url": "https://github.com/dashevo/dash-wallet/commit/458f7f65d2d74056f8784831ba4c90b2df8ae82b", "committedDate": "2020-05-13T14:46:07Z", "message": "CreateUsernameActivity: Remove comment for obsolete item"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66c8716a0809b9c5bcd6d5c1315afa490d260416", "author": {"user": {"login": "HashEngineering", "name": "Hash Engineering Solutions"}}, "url": "https://github.com/dashevo/dash-wallet/commit/66c8716a0809b9c5bcd6d5c1315afa490d260416", "committedDate": "2020-05-13T14:50:40Z", "message": "AppDatabase: Lower version to 6, since previous version was 5."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExODEyOTky", "url": "https://github.com/dashevo/dash-wallet/pull/393#pullrequestreview-411812992", "createdAt": "2020-05-14T13:39:06Z", "commit": {"oid": "66c8716a0809b9c5bcd6d5c1315afa490d260416"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNTA4NjU1", "url": "https://github.com/dashevo/dash-wallet/pull/393#pullrequestreview-413508655", "createdAt": "2020-05-18T11:34:06Z", "commit": {"oid": "66c8716a0809b9c5bcd6d5c1315afa490d260416"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2896, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}