{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyNTUzMzgx", "number": 513, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo0MjowNFrOEpPcqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzoyNTowNFrOEq2IKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjgwMTcwOnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/Extensions.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo0MjowNFrOHay8HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo0MjowNFrOHay8HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1OTYxMw==", "bodyText": "I needed a way to get the LifeCycleOwner of a View that is derived from a ConstraintLayout for an observer.", "url": "https://github.com/dashevo/dash-wallet/pull/513#discussion_r497859613", "createdAt": "2020-09-30T23:42:04Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/Extensions.kt", "diffHunk": "@@ -0,0 +1,35 @@\n+package de.schildbach.wallet\n+\n+import android.content.Context\n+import android.content.ContextWrapper\n+import androidx.fragment.app.FragmentActivity\n+import androidx.lifecycle.LifecycleOwner\n+\n+//\n+// https://stackoverflow.com/questions/49075413/easy-way-to-get-current-activity-fragment-lifecycleowner-from-within-view\n+//\n+\n+fun Context.fragmentActivity(): FragmentActivity? {\n+    var curContext = this\n+    var maxDepth = 20\n+    while (--maxDepth > 0 && curContext !is FragmentActivity) {\n+        curContext = (curContext as ContextWrapper).baseContext\n+    }\n+    return if(curContext is FragmentActivity)\n+        curContext\n+    else\n+        null\n+}\n+\n+fun Context.lifecycleOwner(): LifecycleOwner? {\n+    var curContext = this\n+    var maxDepth = 20\n+    while (maxDepth-- > 0 && curContext !is LifecycleOwner) {\n+        curContext = (curContext as ContextWrapper).baseContext\n+    }\n+    return if (curContext is LifecycleOwner) {\n+        curContext as LifecycleOwner\n+    } else {\n+        null\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "983529e01a4381dc89932979bb018a948a197c03"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjgwNDI5OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/service/BlockchainServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo0MzozNFrOHay9nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo0MzozNFrOHay9nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1OTk5Ng==", "bodyText": "Not sure if FORCE_SEND_FOR_REFRESH is required vs SEND_IF_CHANGED, but that is how most of the testing was done.", "url": "https://github.com/dashevo/dash-wallet/pull/513#discussion_r497859996", "createdAt": "2020-09-30T23:43:34Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/service/BlockchainServiceImpl.java", "diffHunk": "@@ -904,7 +904,7 @@ public int onStartCommand(final Intent intent, final int flags, final int startI\n             } else if(BlockchainService.ACTION_RESET_BLOOMFILTERS.equals(action)) {\n                 if (peerGroup != null) {\n                     log.info(\"recalculating bloom filters\");\n-                    peerGroup.recalculateFastCatchupAndFilter(PeerGroup.FilterRecalculateMode.SEND_IF_CHANGED);\n+                    peerGroup.recalculateFastCatchupAndFilter(PeerGroup.FilterRecalculateMode.FORCE_SEND_FOR_REFRESH);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "983529e01a4381dc89932979bb018a948a197c03"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjgwNTYyOnYy", "diffSide": "RIGHT", "path": "wallet/res/values/strings.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo0NDoxNlrOHay-YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo0NDo0NVrOHay-7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2MDE5Mg==", "bodyText": "This is used by the Notification for the foreground service.", "url": "https://github.com/dashevo/dash-wallet/pull/513#discussion_r497860192", "createdAt": "2020-09-30T23:44:16Z", "author": {"login": "HashEngineering"}, "path": "wallet/res/values/strings.xml", "diffHunk": "@@ -8,7 +8,7 @@\n     <string name=\"blockchain_state_progress_days\">%1$s, %2$d days behind</string>\n     <string name=\"blockchain_state_progress_weeks\">%1$s, %2$d weeks behind</string>\n     <string name=\"blockchain_state_progress_months\">%1$s, %2$d months behind</string>\n-    <string name=\"blockchain_state_progress_downloading\">Synchronizing with network</string>\n+    <string name=\"blockchain_state_progress_downloading\">Synchronizing with network (%1$s%%)</string>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "983529e01a4381dc89932979bb018a948a197c03"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2MDMzNQ==", "bodyText": "To display the percent complete like this (5%)", "url": "https://github.com/dashevo/dash-wallet/pull/513#discussion_r497860335", "createdAt": "2020-09-30T23:44:45Z", "author": {"login": "HashEngineering"}, "path": "wallet/res/values/strings.xml", "diffHunk": "@@ -8,7 +8,7 @@\n     <string name=\"blockchain_state_progress_days\">%1$s, %2$d days behind</string>\n     <string name=\"blockchain_state_progress_weeks\">%1$s, %2$d weeks behind</string>\n     <string name=\"blockchain_state_progress_months\">%1$s, %2$d months behind</string>\n-    <string name=\"blockchain_state_progress_downloading\">Synchronizing with network</string>\n+    <string name=\"blockchain_state_progress_downloading\">Synchronizing with network (%1$s%%)</string>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2MDE5Mg=="}, "originalCommit": {"oid": "983529e01a4381dc89932979bb018a948a197c03"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjgwODgxOnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/data/BlockchainIdentityData.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo0NTo0NlrOHazALQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo0NTo0NlrOHazALQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2MDY1Mw==", "bodyText": "We need to store the userId because if we are restoring a recovery phrase, we won't have the credit funding transaction until later in the sync process.", "url": "https://github.com/dashevo/dash-wallet/pull/513#discussion_r497860653", "createdAt": "2020-09-30T23:45:46Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/data/BlockchainIdentityData.kt", "diffHunk": "@@ -31,6 +31,7 @@ import org.dashevo.dpp.identity.IdentityPublicKey\n data class BlockchainIdentityData(var creationState: CreationState = CreationState.NONE,\n                                   var creationStateErrorMessage: String?,\n                                   var username: String?,\n+                                  var userId: String?,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "983529e01a4381dc89932979bb018a948a197c03"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjgxMDEyOnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/MoreFragment.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo0NjoxNFrOHazA2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo0NjoxNFrOHazA2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2MDgyNw==", "bodyText": "Prevents crash if no user is registered on the More Screen.", "url": "https://github.com/dashevo/dash-wallet/pull/513#discussion_r497860827", "createdAt": "2020-09-30T23:46:14Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/MoreFragment.kt", "diffHunk": "@@ -66,7 +67,7 @@ class MoreFragment : Fragment(R.layout.activity_more) {\n         }\n \n         val blockchainIdentity = PlatformRepo.getInstance().getBlockchainIdentity()\n-        if (blockchainIdentity != null) {\n+        if (blockchainIdentity != null && blockchainIdentity.registrationStatus == BlockchainIdentity.RegistrationStatus.REGISTERED) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "983529e01a4381dc89932979bb018a948a197c03"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjgxMjI5OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo0NzoyMlrOHazCIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo0NzoyMlrOHazCIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2MTE1Mg==", "bodyText": "since the userId is saved in the database, we don't need to load it from the wallet.", "url": "https://github.com/dashevo/dash-wallet/pull/513#discussion_r497861152", "createdAt": "2020-09-30T23:47:22Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -180,14 +187,13 @@ class PlatformRepo private constructor(val walletApplication: WalletApplication)\n      * @param text The beginning of a username to search for\n      * @return\n      */\n+\n     @Throws(Exception::class)\n     suspend fun searchUsernames(text: String, onlyExactUsername: Boolean = false): List<UsernameSearchResult> {\n         val wallet = walletApplication.wallet\n         val blockchainIdentityData = blockchainIdentityDataDao.load()!!\n-        //We don't check for nullity here because if it's null, it'll be thrown, captured below\n-        //and sent as a Resource.error\n-        val creditFundingTx = wallet.getCreditFundingTransaction(wallet.getTransaction(blockchainIdentityData.creditFundingTxId))\n-        val userId = creditFundingTx.creditBurnIdentityIdentifier.toStringBase58()\n+        val userId = blockchainIdentity.uniqueIdString", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "983529e01a4381dc89932979bb018a948a197c03"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjgxNDUyOnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo0ODo1MlrOHazDdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo0ODo1MlrOHazDdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2MTQ5Mw==", "bodyText": "we return the blockchainIdentity because this is during the registration process and there is no other data to load.", "url": "https://github.com/dashevo/dash-wallet/pull/513#discussion_r497861493", "createdAt": "2020-09-30T23:48:52Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -576,8 +583,20 @@ class PlatformRepo private constructor(val walletApplication: WalletApplication)\n \n     fun initBlockchainIdentity(blockchainIdentityData: BlockchainIdentityData, wallet: Wallet): BlockchainIdentity {\n         val creditFundingTransaction = blockchainIdentityData.findCreditFundingTransaction(wallet)\n-        if (creditFundingTransaction != null) {\n-            return BlockchainIdentity(platform, creditFundingTransaction, wallet).apply {\n+        val blockchainIdentity = if (creditFundingTransaction != null) {\n+            BlockchainIdentity(platform, creditFundingTransaction, wallet)\n+        } else {\n+            val blockchainIdentity = BlockchainIdentity(platform, 0, wallet)\n+            if (blockchainIdentityData.creationState >= BlockchainIdentityData.CreationState.DONE) {\n+                blockchainIdentity.apply {\n+                    uniqueId = Sha256Hash.wrap(Base58.decode(blockchainIdentityData.userId))\n+                }\n+            } else {\n+                return blockchainIdentity", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "983529e01a4381dc89932979bb018a948a197c03"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjgxNTQwOnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo0OToyMVrOHazD-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo0OToyMVrOHazD-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2MTYyNA==", "bodyText": "oops.  left a comment", "url": "https://github.com/dashevo/dash-wallet/pull/513#discussion_r497861624", "createdAt": "2020-09-30T23:49:21Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -719,14 +739,22 @@ class PlatformRepo private constructor(val walletApplication: WalletApplication)\n             }\n \n             if (!platform.hasApp(\"dashpay\")) {\n+                log.info(\"update contacts not completed because there is no dashpay contract\")\n                 return\n             }\n \n             val blockchainIdentityData = blockchainIdentityDataDao.load() ?: return\n             if (blockchainIdentityData.creationState < BlockchainIdentityData.CreationState.DONE) {\n+                log.info(\"update contacts not completed username registration/recovery is not complete\")\n                 return\n             }\n-            val userId = blockchainIdentityData.getIdentity(walletApplication.wallet) ?: return\n+\n+            if (blockchainIdentity == null) {\n+                log.info(\"update contacts not completed: blockchainIdentity has not been initialized\")\n+            }\n+\n+            val userId = blockchainIdentity.uniqueIdString!! //blockchainIdentityData!!.getIdentity(walletApplication.wallet) ?: return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "983529e01a4381dc89932979bb018a948a197c03"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjgxNjkyOnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo1MDowMFrOHazEwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo1MDowMFrOHazEwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2MTgyNQ==", "bodyText": "This was moved up in case there is an exception when processing profiles.", "url": "https://github.com/dashevo/dash-wallet/pull/513#discussion_r497861825", "createdAt": "2020-09-30T23:50:00Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -795,6 +823,13 @@ class PlatformRepo private constructor(val walletApplication: WalletApplication)\n                 }\n             }\n \n+            // If new keychains were added to the wallet, then update the bloom filters\n+            if (addedContact) {\n+                val intent = Intent(BlockchainService.ACTION_RESET_BLOOMFILTERS, null, walletApplication,\n+                        BlockchainServiceImpl::class.java)\n+                walletApplication.startService(intent)\n+            }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "983529e01a4381dc89932979bb018a948a197c03"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjgxODEyOnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo1MDozNlrOHazFYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo1MDozNlrOHazFYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2MTk4NA==", "bodyText": "comment", "url": "https://github.com/dashevo/dash-wallet/pull/513#discussion_r497861984", "createdAt": "2020-09-30T23:50:36Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -959,9 +995,48 @@ class PlatformRepo private constructor(val walletApplication: WalletApplication)\n             preDownloadBlocks.set(true)\n             preDownloadBlocksFuture = future\n             log.info(\"PreDownloadBlocks: starting\")\n+\n+            //first check to see if there is a blockchain identity\n+            if (blockchainIdentityDataDao.load() == null) {\n+                log.info(\"PreDownloadBlocks: checking for existing associated identity\")\n+\n+                //val fundingKey = walletApplication.wallet.watchingKey\n+                val identity = getIdentityFromPublicKeyId()\n+                //log.info(\"key hash: ${fundingKey.pubKeyHash.toHexString()}, identityBytes: ${identityBytes != null}\")\n+                if (identity != null) {\n+                    log.info(\"PreDownloadBlocks: initiate recovery of existing identity ${identity.id}\")\n+                    ContextCompat.startForegroundService(walletApplication, createIntentForRestore(walletApplication, identity.id))\n+                    return@launch\n+                } else {\n+                    log.info(\"PreDownloadBlocks: no existing identity found\")\n+                }\n+            }\n+\n+            // update contacts, profiles and other platform data\n             if (!updatingContacts.get()) {\n                 updateContactRequests()\n             }\n         }\n     }\n+\n+    /**\n+        This is used by java code, outside of coroutines\n+     */\n+    fun clearDatabases() {\n+        val database = AppDatabase.getAppDatabase()\n+        database.blockchainIdentityDataDaoAsync().clear()\n+        database.dashPayProfileDaoAsync().clear()\n+        database.dashPayContactRequestDaoAsync().clear()\n+\n+        // TODO: how do we make the blockchainIdentity == null\n+    }\n+\n+    fun getIdentityFromPublicKeyId(): Identity? {\n+        val fundingKey = walletApplication.wallet.blockchainIdentityKeyChain.watchingKey//currentAuthenticationKey(AuthenticationKeyChain.KeyChainType.BLOCKCHAIN_IDENTITY)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "983529e01a4381dc89932979bb018a948a197c03"}, "originalPosition": 244}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjgxODg4OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo1MDo1M1rOHazFvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMzo1MDo1M1rOHazFvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2MjA3OA==", "bodyText": "extra comments", "url": "https://github.com/dashevo/dash-wallet/pull/513#discussion_r497862078", "createdAt": "2020-09-30T23:50:53Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -959,9 +995,48 @@ class PlatformRepo private constructor(val walletApplication: WalletApplication)\n             preDownloadBlocks.set(true)\n             preDownloadBlocksFuture = future\n             log.info(\"PreDownloadBlocks: starting\")\n+\n+            //first check to see if there is a blockchain identity\n+            if (blockchainIdentityDataDao.load() == null) {\n+                log.info(\"PreDownloadBlocks: checking for existing associated identity\")\n+\n+                //val fundingKey = walletApplication.wallet.watchingKey\n+                val identity = getIdentityFromPublicKeyId()\n+                //log.info(\"key hash: ${fundingKey.pubKeyHash.toHexString()}, identityBytes: ${identityBytes != null}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "983529e01a4381dc89932979bb018a948a197c03"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzU5NDQ2OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/data/DashPayProfile.kt", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzoxNjo1OFrOHdSAaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODoyNzowN1rOHdUp7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2NTc3MQ==", "bodyText": "The defaultValue argument is not being used.", "url": "https://github.com/dashevo/dash-wallet/pull/513#discussion_r500465771", "createdAt": "2020-10-06T17:16:58Z", "author": {"login": "sambarboza"}, "path": "wallet/src/de/schildbach/wallet/data/DashPayProfile.kt", "diffHunk": "@@ -16,18 +16,28 @@ data class DashPayProfile(@PrimaryKey val userId: String,\n                           val createdAt: Long = 0,\n                           val updatedAt: Long = 0) : Parcelable {\n     companion object {\n-        fun fromDocument(document: Document, username: String): DashPayProfile? {\n-            return try {\n-                DashPayProfile(document.ownerId,\n-                        username,\n-                        document.data[\"displayName\"] as String,\n-                        document.data[\"publicMessage\"] as String,\n-                        document.data[\"avatarUrl\"] as String,\n-                        if (document.createdAt != null) document.createdAt!! else 0L,\n-                        if (document.updatedAt != null) document.updatedAt!! else 0L)\n-            } catch (e: Exception) {\n-                null\n+\n+        private fun getField(document: Document, field: String, defaultValue: String = \"\"): String {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb810f968f2392ed107d6d6f7293d6dbbea4bdd"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ4ODAzMA==", "bodyText": "oh wow, good catch.", "url": "https://github.com/dashevo/dash-wallet/pull/513#discussion_r500488030", "createdAt": "2020-10-06T17:53:36Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/data/DashPayProfile.kt", "diffHunk": "@@ -16,18 +16,28 @@ data class DashPayProfile(@PrimaryKey val userId: String,\n                           val createdAt: Long = 0,\n                           val updatedAt: Long = 0) : Parcelable {\n     companion object {\n-        fun fromDocument(document: Document, username: String): DashPayProfile? {\n-            return try {\n-                DashPayProfile(document.ownerId,\n-                        username,\n-                        document.data[\"displayName\"] as String,\n-                        document.data[\"publicMessage\"] as String,\n-                        document.data[\"avatarUrl\"] as String,\n-                        if (document.createdAt != null) document.createdAt!! else 0L,\n-                        if (document.updatedAt != null) document.updatedAt!! else 0L)\n-            } catch (e: Exception) {\n-                null\n+\n+        private fun getField(document: Document, field: String, defaultValue: String = \"\"): String {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2NTc3MQ=="}, "originalCommit": {"oid": "ebb810f968f2392ed107d6d6f7293d6dbbea4bdd"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwOTE2NQ==", "bodyText": "e994500", "url": "https://github.com/dashevo/dash-wallet/pull/513#discussion_r500509165", "createdAt": "2020-10-06T18:27:07Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/data/DashPayProfile.kt", "diffHunk": "@@ -16,18 +16,28 @@ data class DashPayProfile(@PrimaryKey val userId: String,\n                           val createdAt: Long = 0,\n                           val updatedAt: Long = 0) : Parcelable {\n     companion object {\n-        fun fromDocument(document: Document, username: String): DashPayProfile? {\n-            return try {\n-                DashPayProfile(document.ownerId,\n-                        username,\n-                        document.data[\"displayName\"] as String,\n-                        document.data[\"publicMessage\"] as String,\n-                        document.data[\"avatarUrl\"] as String,\n-                        if (document.createdAt != null) document.createdAt!! else 0L,\n-                        if (document.updatedAt != null) document.updatedAt!! else 0L)\n-            } catch (e: Exception) {\n-                null\n+\n+        private fun getField(document: Document, field: String, defaultValue: String = \"\"): String {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2NTc3MQ=="}, "originalCommit": {"oid": "ebb810f968f2392ed107d6d6f7293d6dbbea4bdd"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzYyNDc0OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzoyNTowNFrOHdSTug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODoyMjoxN1rOHdUdPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3MDcxNA==", "bodyText": "Since we have a single database, shouldn't this be called clearDatabase (in singular) or clearTables?", "url": "https://github.com/dashevo/dash-wallet/pull/513#discussion_r500470714", "createdAt": "2020-10-06T17:25:04Z", "author": {"login": "sambarboza"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -959,9 +995,45 @@ class PlatformRepo private constructor(val walletApplication: WalletApplication)\n             preDownloadBlocks.set(true)\n             preDownloadBlocksFuture = future\n             log.info(\"PreDownloadBlocks: starting\")\n+\n+            //first check to see if there is a blockchain identity\n+            if (blockchainIdentityDataDao.load() == null) {\n+                log.info(\"PreDownloadBlocks: checking for existing associated identity\")\n+\n+                val identity = getIdentityFromPublicKeyId()\n+                if (identity != null) {\n+                    log.info(\"PreDownloadBlocks: initiate recovery of existing identity ${identity.id}\")\n+                    ContextCompat.startForegroundService(walletApplication, createIntentForRestore(walletApplication, identity.id))\n+                    return@launch\n+                } else {\n+                    log.info(\"PreDownloadBlocks: no existing identity found\")\n+                }\n+            }\n+\n+            // update contacts, profiles and other platform data\n             if (!updatingContacts.get()) {\n                 updateContactRequests()\n             }\n         }\n     }\n+\n+    /**\n+    This is used by java code, outside of coroutines\n+\n+    This should not be a suspended method.\n+     */\n+    fun clearDatabases() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb810f968f2392ed107d6d6f7293d6dbbea4bdd"}, "originalPosition": 265}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ4ODgxNA==", "bodyText": "yes, I will change this to clearDatabase()", "url": "https://github.com/dashevo/dash-wallet/pull/513#discussion_r500488814", "createdAt": "2020-10-06T17:54:50Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -959,9 +995,45 @@ class PlatformRepo private constructor(val walletApplication: WalletApplication)\n             preDownloadBlocks.set(true)\n             preDownloadBlocksFuture = future\n             log.info(\"PreDownloadBlocks: starting\")\n+\n+            //first check to see if there is a blockchain identity\n+            if (blockchainIdentityDataDao.load() == null) {\n+                log.info(\"PreDownloadBlocks: checking for existing associated identity\")\n+\n+                val identity = getIdentityFromPublicKeyId()\n+                if (identity != null) {\n+                    log.info(\"PreDownloadBlocks: initiate recovery of existing identity ${identity.id}\")\n+                    ContextCompat.startForegroundService(walletApplication, createIntentForRestore(walletApplication, identity.id))\n+                    return@launch\n+                } else {\n+                    log.info(\"PreDownloadBlocks: no existing identity found\")\n+                }\n+            }\n+\n+            // update contacts, profiles and other platform data\n             if (!updatingContacts.get()) {\n                 updateContactRequests()\n             }\n         }\n     }\n+\n+    /**\n+    This is used by java code, outside of coroutines\n+\n+    This should not be a suspended method.\n+     */\n+    fun clearDatabases() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3MDcxNA=="}, "originalCommit": {"oid": "ebb810f968f2392ed107d6d6f7293d6dbbea4bdd"}, "originalPosition": 265}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNTkxOQ==", "bodyText": "Fixed here: 4e26f7b", "url": "https://github.com/dashevo/dash-wallet/pull/513#discussion_r500505919", "createdAt": "2020-10-06T18:22:17Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -959,9 +995,45 @@ class PlatformRepo private constructor(val walletApplication: WalletApplication)\n             preDownloadBlocks.set(true)\n             preDownloadBlocksFuture = future\n             log.info(\"PreDownloadBlocks: starting\")\n+\n+            //first check to see if there is a blockchain identity\n+            if (blockchainIdentityDataDao.load() == null) {\n+                log.info(\"PreDownloadBlocks: checking for existing associated identity\")\n+\n+                val identity = getIdentityFromPublicKeyId()\n+                if (identity != null) {\n+                    log.info(\"PreDownloadBlocks: initiate recovery of existing identity ${identity.id}\")\n+                    ContextCompat.startForegroundService(walletApplication, createIntentForRestore(walletApplication, identity.id))\n+                    return@launch\n+                } else {\n+                    log.info(\"PreDownloadBlocks: no existing identity found\")\n+                }\n+            }\n+\n+            // update contacts, profiles and other platform data\n             if (!updatingContacts.get()) {\n                 updateContactRequests()\n             }\n         }\n     }\n+\n+    /**\n+    This is used by java code, outside of coroutines\n+\n+    This should not be a suspended method.\n+     */\n+    fun clearDatabases() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3MDcxNA=="}, "originalCommit": {"oid": "ebb810f968f2392ed107d6d6f7293d6dbbea4bdd"}, "originalPosition": 265}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 589, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}