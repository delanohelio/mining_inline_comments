{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NDIxMDY4", "number": 419, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMjozNDoxOFrOEAfMbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMjo1MzozNlrOEAfnfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTQ2NTQxOnYy", "diffSide": "LEFT", "path": "wallet/src/de/schildbach/wallet/data/BlockchainIdentityData.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMjozNDoxOFrOGbzAGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzoxMToyMVrOGb0XMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgwMDM0NQ==", "bodyText": "Technically, we don't need to save this (lockedOutpoint) in the database because it is part of the credit funding transaction.", "url": "https://github.com/dashevo/dash-wallet/pull/419#discussion_r431800345", "createdAt": "2020-05-28T12:34:18Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/data/BlockchainIdentityData.kt", "diffHunk": "@@ -19,24 +19,44 @@ package de.schildbach.wallet.data\n \n import androidx.room.Entity\n import androidx.room.PrimaryKey\n+import org.bitcoinj.core.Coin\n import org.bitcoinj.core.Sha256Hash\n-import org.bitcoinj.core.TransactionOutPoint\n-import org.bitcoinj.evolution.CreditFundingTransaction\n import org.dashevo.dashpay.BlockchainIdentity\n+import org.dashevo.dpp.identity.IdentityPublicKey\n \n @Entity(tableName = \"blockchain_identity\")\n-class BlockchainIdentityData(var index: Int?,\n+data class BlockchainIdentityData(var creationState: State?,\n+                             var creationStateError: Boolean,\n                              var username: String?,\n                              var creditFundingTxId: Sha256Hash? = null,\n-                             var lockedOutpoint: TransactionOutPoint? = null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cd06941d7fcf9c43adc45bcca1421b55cb094d3"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgyMjY0MA==", "bodyText": "The CreditFundingTransaction data will be most likely very useful when using this class so I think we should add it as a field that is somehow automatically loaded from the wallet when during retrieving BlockchainIdentityData from database.", "url": "https://github.com/dashevo/dash-wallet/pull/419#discussion_r431822640", "createdAt": "2020-05-28T13:11:21Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/data/BlockchainIdentityData.kt", "diffHunk": "@@ -19,24 +19,44 @@ package de.schildbach.wallet.data\n \n import androidx.room.Entity\n import androidx.room.PrimaryKey\n+import org.bitcoinj.core.Coin\n import org.bitcoinj.core.Sha256Hash\n-import org.bitcoinj.core.TransactionOutPoint\n-import org.bitcoinj.evolution.CreditFundingTransaction\n import org.dashevo.dashpay.BlockchainIdentity\n+import org.dashevo.dpp.identity.IdentityPublicKey\n \n @Entity(tableName = \"blockchain_identity\")\n-class BlockchainIdentityData(var index: Int?,\n+data class BlockchainIdentityData(var creationState: State?,\n+                             var creationStateError: Boolean,\n                              var username: String?,\n                              var creditFundingTxId: Sha256Hash? = null,\n-                             var lockedOutpoint: TransactionOutPoint? = null,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgwMDM0NQ=="}, "originalCommit": {"oid": "1cd06941d7fcf9c43adc45bcca1421b55cb094d3"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTQ3ODcyOnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/WalletActivity.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMjozODoxN1rOGbzI3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzowODozM1rOGb0P9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgwMjU4OQ==", "bodyText": "I think I had a check for status == null because it could be null, perhaps this problem is addressed elsewhere.", "url": "https://github.com/dashevo/dash-wallet/pull/419#discussion_r431802589", "createdAt": "2020-05-28T12:38:17Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/WalletActivity.java", "diffHunk": "@@ -326,9 +326,9 @@ public void onChanged(Resource<Boolean> status) {\n         AppDatabase.getAppDatabase().blockchainIdentityDataDao().load().observe(this, new Observer<BlockchainIdentityData>() {\n             @Override\n             public void onChanged(BlockchainIdentityData blockchainIdentityData) {\n-                if(blockchainIdentityData != null) {\n+                if (blockchainIdentityData != null) {\n                     BlockchainIdentity.RegistrationStatus status = blockchainIdentityData.getRegistrationStatus();\n-                    hasIdentity = status != null ? status == BlockchainIdentity.RegistrationStatus.REGISTERED : false;\n+                    hasIdentity = (status == BlockchainIdentity.RegistrationStatus.REGISTERED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cd06941d7fcf9c43adc45bcca1421b55cb094d3"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgyMDc5MA==", "bodyText": "yea, basically it doesn't matter since == operator doesn't throw NPE", "url": "https://github.com/dashevo/dash-wallet/pull/419#discussion_r431820790", "createdAt": "2020-05-28T13:08:33Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/ui/WalletActivity.java", "diffHunk": "@@ -326,9 +326,9 @@ public void onChanged(Resource<Boolean> status) {\n         AppDatabase.getAppDatabase().blockchainIdentityDataDao().load().observe(this, new Observer<BlockchainIdentityData>() {\n             @Override\n             public void onChanged(BlockchainIdentityData blockchainIdentityData) {\n-                if(blockchainIdentityData != null) {\n+                if (blockchainIdentityData != null) {\n                     BlockchainIdentity.RegistrationStatus status = blockchainIdentityData.getRegistrationStatus();\n-                    hasIdentity = status != null ? status == BlockchainIdentity.RegistrationStatus.REGISTERED : false;\n+                    hasIdentity = (status == BlockchainIdentity.RegistrationStatus.REGISTERED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgwMjU4OQ=="}, "originalCommit": {"oid": "1cd06941d7fcf9c43adc45bcca1421b55cb094d3"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTQ4OTU5OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMjo0MTozMlrOGbzP9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMjo0MTozMlrOGbzP9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgwNDQwNQ==", "bodyText": "Domain will probably be a default that won't change.  Currently it is \"\", but later will be \"dash\".", "url": "https://github.com/dashevo/dash-wallet/pull/419#discussion_r431804405", "createdAt": "2020-05-28T12:41:32Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -142,9 +150,66 @@ class PlatformRepo(val walletApplication: WalletApplication) {\n     suspend fun isNameRegisteredAsync(blockchainIdentity: BlockchainIdentity) {\n         withContext(Dispatchers.IO) {\n             val (result, usernames) = blockchainIdentity.watchUsernames(blockchainIdentity.getUsernamesWithStatus(BlockchainIdentity.UsernameStatus.REGISTRATION_PENDING), 10, 5000, BlockchainIdentity.RetryDelayType.SLOW20)\n-            if(!result) {\n+            if (!result) {\n                 throw TimeoutException(\"the usernames: $usernames were not found to be registered in the allotted amount of time\")\n             }\n         }\n     }\n+\n+    suspend fun initBlockchainIdentityData(username: String): BlockchainIdentityData {\n+        return blockchainIdentityDataDaoAsync.load()\n+                ?: BlockchainIdentityData(BlockchainIdentityData.State.UPGRADING_WALLET, false, username)\n+    }\n+\n+    fun initBlockchainIdentity(blockchainIdentityData: BlockchainIdentityData, wallet: Wallet): BlockchainIdentity {\n+        if (blockchainIdentityData.creditFundingTxId != null) {\n+            val creditFundingTx = wallet.getTransaction(blockchainIdentityData.creditFundingTxId)\n+            if (creditFundingTx != null) {\n+                val creditFundingTransaction = wallet.getCreditFundingTransaction(creditFundingTx)\n+                return BlockchainIdentity(Identity.IdentityType.USER, creditFundingTransaction, wallet).apply {\n+                    currentUsername = blockchainIdentityData.username\n+                    // should we load `preorderSalt` somehow?\n+                    registrationStatus = blockchainIdentityData.registrationStatus!!\n+                    // should we load `usernameStatus` somehow?\n+                    // should we load `domain` somehow?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cd06941d7fcf9c43adc45bcca1421b55cb094d3"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTUxODg0OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMjo0OTozMVrOGbzh_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMjo1MDoxM1rOGbzjqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgwOTAyMQ==", "bodyText": "Yes.\nvar usernameStatus = HashMap<String, Any>()\nusernameStatus[BLOCKCHAIN_USERNAME_STATUS] = blockchainIdentityData.usernameStatus\nusernameStatus[BLOCKCHAIN_USERNAME_SALT] = blockchainIdentityData.preorderSalt\nusernameStatuses[username] = usernameStatus\n\nThere may be a cooler way to do the code in Kotlin.", "url": "https://github.com/dashevo/dash-wallet/pull/419#discussion_r431809021", "createdAt": "2020-05-28T12:49:31Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -142,9 +150,66 @@ class PlatformRepo(val walletApplication: WalletApplication) {\n     suspend fun isNameRegisteredAsync(blockchainIdentity: BlockchainIdentity) {\n         withContext(Dispatchers.IO) {\n             val (result, usernames) = blockchainIdentity.watchUsernames(blockchainIdentity.getUsernamesWithStatus(BlockchainIdentity.UsernameStatus.REGISTRATION_PENDING), 10, 5000, BlockchainIdentity.RetryDelayType.SLOW20)\n-            if(!result) {\n+            if (!result) {\n                 throw TimeoutException(\"the usernames: $usernames were not found to be registered in the allotted amount of time\")\n             }\n         }\n     }\n+\n+    suspend fun initBlockchainIdentityData(username: String): BlockchainIdentityData {\n+        return blockchainIdentityDataDaoAsync.load()\n+                ?: BlockchainIdentityData(BlockchainIdentityData.State.UPGRADING_WALLET, false, username)\n+    }\n+\n+    fun initBlockchainIdentity(blockchainIdentityData: BlockchainIdentityData, wallet: Wallet): BlockchainIdentity {\n+        if (blockchainIdentityData.creditFundingTxId != null) {\n+            val creditFundingTx = wallet.getTransaction(blockchainIdentityData.creditFundingTxId)\n+            if (creditFundingTx != null) {\n+                val creditFundingTransaction = wallet.getCreditFundingTransaction(creditFundingTx)\n+                return BlockchainIdentity(Identity.IdentityType.USER, creditFundingTransaction, wallet).apply {\n+                    currentUsername = blockchainIdentityData.username\n+                    // should we load `preorderSalt` somehow?\n+                    registrationStatus = blockchainIdentityData.registrationStatus!!\n+                    // should we load `usernameStatus` somehow?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cd06941d7fcf9c43adc45bcca1421b55cb094d3"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgwOTQ0OQ==", "bodyText": "Maybe later we can do a data class for the username status instead of these maps [but that is to be done in DashPay library first].", "url": "https://github.com/dashevo/dash-wallet/pull/419#discussion_r431809449", "createdAt": "2020-05-28T12:50:13Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -142,9 +150,66 @@ class PlatformRepo(val walletApplication: WalletApplication) {\n     suspend fun isNameRegisteredAsync(blockchainIdentity: BlockchainIdentity) {\n         withContext(Dispatchers.IO) {\n             val (result, usernames) = blockchainIdentity.watchUsernames(blockchainIdentity.getUsernamesWithStatus(BlockchainIdentity.UsernameStatus.REGISTRATION_PENDING), 10, 5000, BlockchainIdentity.RetryDelayType.SLOW20)\n-            if(!result) {\n+            if (!result) {\n                 throw TimeoutException(\"the usernames: $usernames were not found to be registered in the allotted amount of time\")\n             }\n         }\n     }\n+\n+    suspend fun initBlockchainIdentityData(username: String): BlockchainIdentityData {\n+        return blockchainIdentityDataDaoAsync.load()\n+                ?: BlockchainIdentityData(BlockchainIdentityData.State.UPGRADING_WALLET, false, username)\n+    }\n+\n+    fun initBlockchainIdentity(blockchainIdentityData: BlockchainIdentityData, wallet: Wallet): BlockchainIdentity {\n+        if (blockchainIdentityData.creditFundingTxId != null) {\n+            val creditFundingTx = wallet.getTransaction(blockchainIdentityData.creditFundingTxId)\n+            if (creditFundingTx != null) {\n+                val creditFundingTransaction = wallet.getCreditFundingTransaction(creditFundingTx)\n+                return BlockchainIdentity(Identity.IdentityType.USER, creditFundingTransaction, wallet).apply {\n+                    currentUsername = blockchainIdentityData.username\n+                    // should we load `preorderSalt` somehow?\n+                    registrationStatus = blockchainIdentityData.registrationStatus!!\n+                    // should we load `usernameStatus` somehow?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgwOTAyMQ=="}, "originalCommit": {"oid": "1cd06941d7fcf9c43adc45bcca1421b55cb094d3"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTUyNzE4OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMjo1MTo0NFrOGbznVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNToyNjozNlrOGb6mIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgxMDM5MQ==", "bodyText": "Domain will probably be removed.", "url": "https://github.com/dashevo/dash-wallet/pull/419#discussion_r431810391", "createdAt": "2020-05-28T12:51:44Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -142,9 +150,66 @@ class PlatformRepo(val walletApplication: WalletApplication) {\n     suspend fun isNameRegisteredAsync(blockchainIdentity: BlockchainIdentity) {\n         withContext(Dispatchers.IO) {\n             val (result, usernames) = blockchainIdentity.watchUsernames(blockchainIdentity.getUsernamesWithStatus(BlockchainIdentity.UsernameStatus.REGISTRATION_PENDING), 10, 5000, BlockchainIdentity.RetryDelayType.SLOW20)\n-            if(!result) {\n+            if (!result) {\n                 throw TimeoutException(\"the usernames: $usernames were not found to be registered in the allotted amount of time\")\n             }\n         }\n     }\n+\n+    suspend fun initBlockchainIdentityData(username: String): BlockchainIdentityData {\n+        return blockchainIdentityDataDaoAsync.load()\n+                ?: BlockchainIdentityData(BlockchainIdentityData.State.UPGRADING_WALLET, false, username)\n+    }\n+\n+    fun initBlockchainIdentity(blockchainIdentityData: BlockchainIdentityData, wallet: Wallet): BlockchainIdentity {\n+        if (blockchainIdentityData.creditFundingTxId != null) {\n+            val creditFundingTx = wallet.getTransaction(blockchainIdentityData.creditFundingTxId)\n+            if (creditFundingTx != null) {\n+                val creditFundingTransaction = wallet.getCreditFundingTransaction(creditFundingTx)\n+                return BlockchainIdentity(Identity.IdentityType.USER, creditFundingTransaction, wallet).apply {\n+                    currentUsername = blockchainIdentityData.username\n+                    // should we load `preorderSalt` somehow?\n+                    registrationStatus = blockchainIdentityData.registrationStatus!!\n+                    // should we load `usernameStatus` somehow?\n+                    // should we load `domain` somehow?\n+                    creditBalance = blockchainIdentityData.creditBalance ?: Coin.ZERO\n+                    activeKeyCount = blockchainIdentityData.activeKeyCount ?: 0\n+                    totalKeyCount = blockchainIdentityData.totalKeyCount ?: 0\n+                    keysCreated = blockchainIdentityData.keysCreated ?: 0\n+                    currentMainKeyIndex = blockchainIdentityData.currentMainKeyIndex ?: 0\n+                    currentMainKeyType = blockchainIdentityData.currentMainKeyType\n+                            ?: IdentityPublicKey.TYPES.ECDSA_SECP256K1\n+                }\n+            }\n+        }\n+        return BlockchainIdentity(Identity.IdentityType.USER, 0, wallet)\n+    }\n+\n+    suspend fun updateBlockchainIdentityData(blockchainIdentityData: BlockchainIdentityData, blockchainIdentity: BlockchainIdentity) {\n+        blockchainIdentityData.apply {\n+            if (blockchainIdentity.creditFundingTransaction != null) {\n+                creditFundingTxId = blockchainIdentity.creditFundingTransaction!!.txId\n+            }\n+            registrationStatus = blockchainIdentity.registrationStatus\n+            if (blockchainIdentity.currentUsername != null &&\n+                    blockchainIdentity.registrationStatus == BlockchainIdentity.RegistrationStatus.REGISTERED) {\n+                domain = Names.DEFAULT_PARENT_DOMAIN\n+                username = blockchainIdentity.currentUsername\n+                preorderSalt = blockchainIdentity.saltForUsername(blockchainIdentity.currentUsername!!, false)\n+                usernameStatus = blockchainIdentity.statusOfUsername(blockchainIdentity.currentUsername!!)\n+\n+                // should we load `preorderSalt` somehow?\n+                registrationStatus = blockchainIdentity.registrationStatus\n+                // should we load `usernameStatus` somehow?\n+                // should we load `domain` somehow?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cd06941d7fcf9c43adc45bcca1421b55cb094d3"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgyNDU5NA==", "bodyText": "Is this comment still valid?\n(there is another one about domain: #419 (comment))", "url": "https://github.com/dashevo/dash-wallet/pull/419#discussion_r431824594", "createdAt": "2020-05-28T13:14:24Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -142,9 +150,66 @@ class PlatformRepo(val walletApplication: WalletApplication) {\n     suspend fun isNameRegisteredAsync(blockchainIdentity: BlockchainIdentity) {\n         withContext(Dispatchers.IO) {\n             val (result, usernames) = blockchainIdentity.watchUsernames(blockchainIdentity.getUsernamesWithStatus(BlockchainIdentity.UsernameStatus.REGISTRATION_PENDING), 10, 5000, BlockchainIdentity.RetryDelayType.SLOW20)\n-            if(!result) {\n+            if (!result) {\n                 throw TimeoutException(\"the usernames: $usernames were not found to be registered in the allotted amount of time\")\n             }\n         }\n     }\n+\n+    suspend fun initBlockchainIdentityData(username: String): BlockchainIdentityData {\n+        return blockchainIdentityDataDaoAsync.load()\n+                ?: BlockchainIdentityData(BlockchainIdentityData.State.UPGRADING_WALLET, false, username)\n+    }\n+\n+    fun initBlockchainIdentity(blockchainIdentityData: BlockchainIdentityData, wallet: Wallet): BlockchainIdentity {\n+        if (blockchainIdentityData.creditFundingTxId != null) {\n+            val creditFundingTx = wallet.getTransaction(blockchainIdentityData.creditFundingTxId)\n+            if (creditFundingTx != null) {\n+                val creditFundingTransaction = wallet.getCreditFundingTransaction(creditFundingTx)\n+                return BlockchainIdentity(Identity.IdentityType.USER, creditFundingTransaction, wallet).apply {\n+                    currentUsername = blockchainIdentityData.username\n+                    // should we load `preorderSalt` somehow?\n+                    registrationStatus = blockchainIdentityData.registrationStatus!!\n+                    // should we load `usernameStatus` somehow?\n+                    // should we load `domain` somehow?\n+                    creditBalance = blockchainIdentityData.creditBalance ?: Coin.ZERO\n+                    activeKeyCount = blockchainIdentityData.activeKeyCount ?: 0\n+                    totalKeyCount = blockchainIdentityData.totalKeyCount ?: 0\n+                    keysCreated = blockchainIdentityData.keysCreated ?: 0\n+                    currentMainKeyIndex = blockchainIdentityData.currentMainKeyIndex ?: 0\n+                    currentMainKeyType = blockchainIdentityData.currentMainKeyType\n+                            ?: IdentityPublicKey.TYPES.ECDSA_SECP256K1\n+                }\n+            }\n+        }\n+        return BlockchainIdentity(Identity.IdentityType.USER, 0, wallet)\n+    }\n+\n+    suspend fun updateBlockchainIdentityData(blockchainIdentityData: BlockchainIdentityData, blockchainIdentity: BlockchainIdentity) {\n+        blockchainIdentityData.apply {\n+            if (blockchainIdentity.creditFundingTransaction != null) {\n+                creditFundingTxId = blockchainIdentity.creditFundingTransaction!!.txId\n+            }\n+            registrationStatus = blockchainIdentity.registrationStatus\n+            if (blockchainIdentity.currentUsername != null &&\n+                    blockchainIdentity.registrationStatus == BlockchainIdentity.RegistrationStatus.REGISTERED) {\n+                domain = Names.DEFAULT_PARENT_DOMAIN\n+                username = blockchainIdentity.currentUsername\n+                preorderSalt = blockchainIdentity.saltForUsername(blockchainIdentity.currentUsername!!, false)\n+                usernameStatus = blockchainIdentity.statusOfUsername(blockchainIdentity.currentUsername!!)\n+\n+                // should we load `preorderSalt` somehow?\n+                registrationStatus = blockchainIdentity.registrationStatus\n+                // should we load `usernameStatus` somehow?\n+                // should we load `domain` somehow?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgxMDM5MQ=="}, "originalCommit": {"oid": "1cd06941d7fcf9c43adc45bcca1421b55cb094d3"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyNDc3MQ==", "bodyText": "Let's not store the \"domain\" -- it will be hard coded in the dashpay library.", "url": "https://github.com/dashevo/dash-wallet/pull/419#discussion_r431924771", "createdAt": "2020-05-28T15:26:36Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -142,9 +150,66 @@ class PlatformRepo(val walletApplication: WalletApplication) {\n     suspend fun isNameRegisteredAsync(blockchainIdentity: BlockchainIdentity) {\n         withContext(Dispatchers.IO) {\n             val (result, usernames) = blockchainIdentity.watchUsernames(blockchainIdentity.getUsernamesWithStatus(BlockchainIdentity.UsernameStatus.REGISTRATION_PENDING), 10, 5000, BlockchainIdentity.RetryDelayType.SLOW20)\n-            if(!result) {\n+            if (!result) {\n                 throw TimeoutException(\"the usernames: $usernames were not found to be registered in the allotted amount of time\")\n             }\n         }\n     }\n+\n+    suspend fun initBlockchainIdentityData(username: String): BlockchainIdentityData {\n+        return blockchainIdentityDataDaoAsync.load()\n+                ?: BlockchainIdentityData(BlockchainIdentityData.State.UPGRADING_WALLET, false, username)\n+    }\n+\n+    fun initBlockchainIdentity(blockchainIdentityData: BlockchainIdentityData, wallet: Wallet): BlockchainIdentity {\n+        if (blockchainIdentityData.creditFundingTxId != null) {\n+            val creditFundingTx = wallet.getTransaction(blockchainIdentityData.creditFundingTxId)\n+            if (creditFundingTx != null) {\n+                val creditFundingTransaction = wallet.getCreditFundingTransaction(creditFundingTx)\n+                return BlockchainIdentity(Identity.IdentityType.USER, creditFundingTransaction, wallet).apply {\n+                    currentUsername = blockchainIdentityData.username\n+                    // should we load `preorderSalt` somehow?\n+                    registrationStatus = blockchainIdentityData.registrationStatus!!\n+                    // should we load `usernameStatus` somehow?\n+                    // should we load `domain` somehow?\n+                    creditBalance = blockchainIdentityData.creditBalance ?: Coin.ZERO\n+                    activeKeyCount = blockchainIdentityData.activeKeyCount ?: 0\n+                    totalKeyCount = blockchainIdentityData.totalKeyCount ?: 0\n+                    keysCreated = blockchainIdentityData.keysCreated ?: 0\n+                    currentMainKeyIndex = blockchainIdentityData.currentMainKeyIndex ?: 0\n+                    currentMainKeyType = blockchainIdentityData.currentMainKeyType\n+                            ?: IdentityPublicKey.TYPES.ECDSA_SECP256K1\n+                }\n+            }\n+        }\n+        return BlockchainIdentity(Identity.IdentityType.USER, 0, wallet)\n+    }\n+\n+    suspend fun updateBlockchainIdentityData(blockchainIdentityData: BlockchainIdentityData, blockchainIdentity: BlockchainIdentity) {\n+        blockchainIdentityData.apply {\n+            if (blockchainIdentity.creditFundingTransaction != null) {\n+                creditFundingTxId = blockchainIdentity.creditFundingTransaction!!.txId\n+            }\n+            registrationStatus = blockchainIdentity.registrationStatus\n+            if (blockchainIdentity.currentUsername != null &&\n+                    blockchainIdentity.registrationStatus == BlockchainIdentity.RegistrationStatus.REGISTERED) {\n+                domain = Names.DEFAULT_PARENT_DOMAIN\n+                username = blockchainIdentity.currentUsername\n+                preorderSalt = blockchainIdentity.saltForUsername(blockchainIdentity.currentUsername!!, false)\n+                usernameStatus = blockchainIdentity.statusOfUsername(blockchainIdentity.currentUsername!!)\n+\n+                // should we load `preorderSalt` somehow?\n+                registrationStatus = blockchainIdentity.registrationStatus\n+                // should we load `usernameStatus` somehow?\n+                // should we load `domain` somehow?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgxMDM5MQ=="}, "originalCommit": {"oid": "1cd06941d7fcf9c43adc45bcca1421b55cb094d3"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTUzNDY5OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMjo1MzozNlrOGbzr_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMjo1MzozNlrOGbzr_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgxMTU4MQ==", "bodyText": "We can use this code that was removed from a previous file:  https://github.com/dashevo/dash-wallet/pull/419/files#diff-52bbf8452a1888bfec68c85225efb675L198\nblockchainIdentityData.preorderSalt = blockchainIdentity.saltForUsername(blockchainIdentity.currentUsername!!, false)\nblockchainIdentityData.usernameStatus = blockchainIdentity.statusOfUsername(blockchainIdentity.currentUsername!!)", "url": "https://github.com/dashevo/dash-wallet/pull/419#discussion_r431811581", "createdAt": "2020-05-28T12:53:36Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -142,9 +150,66 @@ class PlatformRepo(val walletApplication: WalletApplication) {\n     suspend fun isNameRegisteredAsync(blockchainIdentity: BlockchainIdentity) {\n         withContext(Dispatchers.IO) {\n             val (result, usernames) = blockchainIdentity.watchUsernames(blockchainIdentity.getUsernamesWithStatus(BlockchainIdentity.UsernameStatus.REGISTRATION_PENDING), 10, 5000, BlockchainIdentity.RetryDelayType.SLOW20)\n-            if(!result) {\n+            if (!result) {\n                 throw TimeoutException(\"the usernames: $usernames were not found to be registered in the allotted amount of time\")\n             }\n         }\n     }\n+\n+    suspend fun initBlockchainIdentityData(username: String): BlockchainIdentityData {\n+        return blockchainIdentityDataDaoAsync.load()\n+                ?: BlockchainIdentityData(BlockchainIdentityData.State.UPGRADING_WALLET, false, username)\n+    }\n+\n+    fun initBlockchainIdentity(blockchainIdentityData: BlockchainIdentityData, wallet: Wallet): BlockchainIdentity {\n+        if (blockchainIdentityData.creditFundingTxId != null) {\n+            val creditFundingTx = wallet.getTransaction(blockchainIdentityData.creditFundingTxId)\n+            if (creditFundingTx != null) {\n+                val creditFundingTransaction = wallet.getCreditFundingTransaction(creditFundingTx)\n+                return BlockchainIdentity(Identity.IdentityType.USER, creditFundingTransaction, wallet).apply {\n+                    currentUsername = blockchainIdentityData.username\n+                    // should we load `preorderSalt` somehow?\n+                    registrationStatus = blockchainIdentityData.registrationStatus!!\n+                    // should we load `usernameStatus` somehow?\n+                    // should we load `domain` somehow?\n+                    creditBalance = blockchainIdentityData.creditBalance ?: Coin.ZERO\n+                    activeKeyCount = blockchainIdentityData.activeKeyCount ?: 0\n+                    totalKeyCount = blockchainIdentityData.totalKeyCount ?: 0\n+                    keysCreated = blockchainIdentityData.keysCreated ?: 0\n+                    currentMainKeyIndex = blockchainIdentityData.currentMainKeyIndex ?: 0\n+                    currentMainKeyType = blockchainIdentityData.currentMainKeyType\n+                            ?: IdentityPublicKey.TYPES.ECDSA_SECP256K1\n+                }\n+            }\n+        }\n+        return BlockchainIdentity(Identity.IdentityType.USER, 0, wallet)\n+    }\n+\n+    suspend fun updateBlockchainIdentityData(blockchainIdentityData: BlockchainIdentityData, blockchainIdentity: BlockchainIdentity) {\n+        blockchainIdentityData.apply {\n+            if (blockchainIdentity.creditFundingTransaction != null) {\n+                creditFundingTxId = blockchainIdentity.creditFundingTransaction!!.txId\n+            }\n+            registrationStatus = blockchainIdentity.registrationStatus\n+            if (blockchainIdentity.currentUsername != null &&\n+                    blockchainIdentity.registrationStatus == BlockchainIdentity.RegistrationStatus.REGISTERED) {\n+                domain = Names.DEFAULT_PARENT_DOMAIN\n+                username = blockchainIdentity.currentUsername\n+                preorderSalt = blockchainIdentity.saltForUsername(blockchainIdentity.currentUsername!!, false)\n+                usernameStatus = blockchainIdentity.statusOfUsername(blockchainIdentity.currentUsername!!)\n+\n+                // should we load `preorderSalt` somehow?\n+                registrationStatus = blockchainIdentity.registrationStatus\n+                // should we load `usernameStatus` somehow?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cd06941d7fcf9c43adc45bcca1421b55cb094d3"}, "originalPosition": 98}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 662, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}