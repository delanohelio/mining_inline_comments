{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0MDA3MzQ3", "number": 542, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzo0MjowOFrOE1BV5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODozMDoxNVrOE1WOSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDMxOTc0OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/EditProfileActivity.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzo0MjowOFrOHtEWhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMzowMjoyM1rOHtXG8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxOTI3MA==", "bodyText": "prosilePictureChanged - profile is mispelled.", "url": "https://github.com/dashevo/dash-wallet/pull/542#discussion_r517019270", "createdAt": "2020-11-03T23:42:08Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/EditProfileActivity.kt", "diffHunk": "@@ -66,9 +63,13 @@ class EditProfileActivity : BaseMenuActivity() {\n \n     private lateinit var editProfileViewModel: EditProfileViewModel\n     private lateinit var selectProfilePictureSharedViewModel: SelectProfilePictureSharedViewModel\n+    private lateinit var externalUrlSharedViewModel: ExternalUrlProfilePictureViewModel\n+\n     private var isEditing: Boolean = false\n     private var defaultAvatar: TextDrawable? = null\n \n+    private var prosilePictureChanged = false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77b0a3448917fea5c17f861602dc7805bd32d7c9"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMyNjU3Nw==", "bodyText": "Fixed", "url": "https://github.com/dashevo/dash-wallet/pull/542#discussion_r517326577", "createdAt": "2020-11-04T13:02:23Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/ui/EditProfileActivity.kt", "diffHunk": "@@ -66,9 +63,13 @@ class EditProfileActivity : BaseMenuActivity() {\n \n     private lateinit var editProfileViewModel: EditProfileViewModel\n     private lateinit var selectProfilePictureSharedViewModel: SelectProfilePictureSharedViewModel\n+    private lateinit var externalUrlSharedViewModel: ExternalUrlProfilePictureViewModel\n+\n     private var isEditing: Boolean = false\n     private var defaultAvatar: TextDrawable? = null\n \n+    private var prosilePictureChanged = false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxOTI3MA=="}, "originalCommit": {"oid": "77b0a3448917fea5c17f861602dc7805bd32d7c9"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDMyNDM3OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/CropImageActivity.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzo0NDoyOFrOHtEZPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMzowMjowNlrOHtXGTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxOTk2Ng==", "bodyText": "Is this commented line not needed?", "url": "https://github.com/dashevo/dash-wallet/pull/542#discussion_r517019966", "createdAt": "2020-11-03T23:44:28Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/CropImageActivity.kt", "diffHunk": "@@ -41,25 +57,41 @@ class CropImageActivity : InteractionAwareActivity() {\n \n         val tempFile = intent.getParcelableExtra<Uri>(TEMP_FILE)\n         val destinationFile = intent.getParcelableExtra<Uri>(DESTINATION_FILE)\n-        Glide.with(this).load(tempFile).listener(object : RequestListener<Drawable> {\n-            override fun onLoadFailed(e: GlideException?, model: Any?, target: Target<Drawable>?, isFirstResource: Boolean): Boolean {\n-                Toast.makeText(this@CropImageActivity,\n-                        R.string.unable_to_load_image, Toast.LENGTH_SHORT).show()\n-                finish()\n-                return false\n-            }\n+        Glide.with(this)\n+                .load(tempFile)\n+//                .override(Target.SIZE_ORIGINAL, Target.SIZE_ORIGINAL)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77b0a3448917fea5c17f861602dc7805bd32d7c9"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMyNjQxMw==", "bodyText": "Removed", "url": "https://github.com/dashevo/dash-wallet/pull/542#discussion_r517326413", "createdAt": "2020-11-04T13:02:06Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/CropImageActivity.kt", "diffHunk": "@@ -41,25 +57,41 @@ class CropImageActivity : InteractionAwareActivity() {\n \n         val tempFile = intent.getParcelableExtra<Uri>(TEMP_FILE)\n         val destinationFile = intent.getParcelableExtra<Uri>(DESTINATION_FILE)\n-        Glide.with(this).load(tempFile).listener(object : RequestListener<Drawable> {\n-            override fun onLoadFailed(e: GlideException?, model: Any?, target: Target<Drawable>?, isFirstResource: Boolean): Boolean {\n-                Toast.makeText(this@CropImageActivity,\n-                        R.string.unable_to_load_image, Toast.LENGTH_SHORT).show()\n-                finish()\n-                return false\n-            }\n+        Glide.with(this)\n+                .load(tempFile)\n+//                .override(Target.SIZE_ORIGINAL, Target.SIZE_ORIGINAL)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxOTk2Ng=="}, "originalCommit": {"oid": "77b0a3448917fea5c17f861602dc7805bd32d7c9"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDMyNjQ4OnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/ExternalUrlProfilePictureDialog.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzo0NToyNVrOHtEaZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMzowMjoxNFrOHtXGmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyMDI2Mw==", "bodyText": "is this commented coded not needed?", "url": "https://github.com/dashevo/dash-wallet/pull/542#discussion_r517020263", "createdAt": "2020-11-03T23:45:25Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/ExternalUrlProfilePictureDialog.kt", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright 2020 Dash Core Group\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package de.schildbach.wallet.ui.dashpay\n+\n+import android.annotation.SuppressLint\n+import android.app.Dialog\n+import android.graphics.Bitmap\n+import android.graphics.drawable.BitmapDrawable\n+import android.graphics.drawable.Drawable\n+import android.net.Uri\n+import android.os.Bundle\n+import android.text.Editable\n+import android.text.TextWatcher\n+import android.view.View\n+import android.widget.Button\n+import android.widget.EditText\n+import android.widget.ImageView\n+import android.widget.Toast\n+import androidx.annotation.NonNull\n+import androidx.annotation.Nullable\n+import androidx.appcompat.app.AlertDialog\n+import androidx.fragment.app.DialogFragment\n+import androidx.lifecycle.ViewModelProvider\n+import com.bumptech.glide.Glide\n+import com.bumptech.glide.load.DataSource\n+import com.bumptech.glide.load.engine.GlideException\n+import com.bumptech.glide.request.RequestListener\n+import com.bumptech.glide.request.target.CustomTarget\n+import com.bumptech.glide.request.target.Target\n+import com.bumptech.glide.request.transition.Transition\n+import de.schildbach.wallet.ui.ExternalUrlProfilePictureViewModel\n+import de.schildbach.wallet.ui.RestoreWalletFromFileViewModel\n+import de.schildbach.wallet.util.KeyboardUtil\n+import de.schildbach.wallet_test.R\n+import org.slf4j.LoggerFactory\n+\n+\n+class ExternalUrlProfilePictureDialog : DialogFragment() {\n+\n+    companion object {\n+\n+        private val log = LoggerFactory.getLogger(RestoreWalletFromFileViewModel::class.java)\n+\n+        private const val ARG_INITIAL_URL = \"arg_initial_url\"\n+\n+        @JvmStatic\n+        fun newInstance(initialUrl: String?): ExternalUrlProfilePictureDialog {\n+            val dialog = ExternalUrlProfilePictureDialog()\n+            dialog.arguments = Bundle().apply {\n+                putString(ARG_INITIAL_URL, initialUrl)\n+            }\n+            return dialog\n+        }\n+    }\n+\n+    private val initialUrl by lazy {\n+        arguments?.getString(ARG_INITIAL_URL)\n+    }\n+\n+    private lateinit var customView: View\n+    private lateinit var edit: EditText\n+    private lateinit var urlPreviewPane: View\n+    private lateinit var urlPreview: ImageView\n+    private lateinit var positiveButton: Button\n+    private lateinit var neutralButton: Button\n+\n+    private lateinit var sharedViewModel: ExternalUrlProfilePictureViewModel\n+\n+    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {\n+        val dialogBuilder = AlertDialog.Builder(requireContext())\n+                .setTitle(\"External URL\")\n+                .setPositiveButton(R.string.button_ok) { _, _ ->\n+                    sharedViewModel.confirm()\n+                    KeyboardUtil.hideKeyboard(requireContext(), edit)\n+                }\n+                .setNegativeButton(android.R.string.cancel) { _, _ ->\n+                    KeyboardUtil.hideKeyboard(requireContext(), edit)\n+                }\n+                .setNeutralButton(\"clear\", null)\n+                .setView(initCustomView())\n+\n+        val dialog = dialogBuilder.create()\n+        dialog.setOnShowListener {\n+            positiveButton = dialog.getButton(AlertDialog.BUTTON_POSITIVE)\n+            positiveButton.isEnabled = false\n+            neutralButton = dialog.getButton(AlertDialog.BUTTON_NEUTRAL)\n+            neutralButton.setOnClickListener {\n+                edit.text = null\n+            }\n+            if (edit.length() == 0) {\n+                neutralButton.visibility = View.GONE\n+            }\n+            if (initialUrl != null) {\n+                edit.setText(initialUrl)\n+            }\n+        }\n+        return dialog\n+    }\n+\n+    @SuppressLint(\"InflateParams\")\n+    private fun initCustomView(): View {\n+        customView = requireActivity().layoutInflater.inflate(R.layout.dialog_input_text, null)\n+        edit = customView.findViewById(R.id.input)\n+        urlPreviewPane = customView.findViewById(R.id.url_preview_pane)\n+        urlPreview = customView.findViewById(R.id.url_preview)\n+        edit.addTextChangedListener(object : TextWatcher {\n+            override fun afterTextChanged(s: Editable?) {\n+                urlPreviewPane.visibility = View.GONE\n+                neutralButton.visibility = if (edit.length() > 0) View.VISIBLE else View.GONE\n+\n+                cleanup()\n+\n+                if (edit.text.isEmpty()) {\n+                    positiveButton.isEnabled = true\n+                    return\n+                }\n+                val pictureUrl = edit.text.trim().toString()\n+                loadUrl(pictureUrl)\n+            }\n+\n+            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}\n+\n+            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}\n+        })\n+        return customView\n+    }\n+\n+    private fun cleanup() {\n+        urlPreview.setImageBitmap(null)\n+//        sharedViewModel.bitmapCache?.recycle()\n+        sharedViewModel.bitmapCache = null\n+        sharedViewModel.externalUrl = null\n+    }\n+\n+    private fun loadUrl(pictureUrlBase: String) {\n+        val googleDrivePreview = \"https://drive.google.com/file/d/\"\n+        val googleDrivePublic = \"http://drive.google.com/uc?export=view&id=\"\n+        val pictureUrl = if (pictureUrlBase.startsWith(googleDrivePreview)) {\n+            pictureUrlBase.replace(googleDrivePreview, googleDrivePublic).replace(\"/view\", \"\").replace(\"?usp=drivesdk\", \"\")\n+        } else {\n+            pictureUrlBase\n+        }\n+        Glide.with(requireContext())\n+                .load(pictureUrl)\n+                .override(Target.SIZE_ORIGINAL, Target.SIZE_ORIGINAL)\n+//                        .listener(object : RequestListener<Drawable> {\n+//                            override fun onLoadFailed(e: GlideException?, model: Any?, target: Target<Drawable>?, isFirstResource: Boolean): Boolean {\n+//                                urlPreviewPane.visibility = View.GONE\n+//                                positiveButton.isEnabled = false\n+//                                return false\n+//                            }\n+//                            override fun onResourceReady(resource: Drawable?, model: Any?, target: Target<Drawable>?, dataSource: DataSource?, isFirstResource: Boolean): Boolean {\n+//                                urlPreviewPane.visibility = View.VISIBLE\n+//                                positiveButton.isEnabled = true\n+//                                return false\n+//                            }\n+//                        })\n+//                        .into(urlPreview)\n+                .listener(object : RequestListener<Drawable> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77b0a3448917fea5c17f861602dc7805bd32d7c9"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMyNjQ4OA==", "bodyText": "Removed", "url": "https://github.com/dashevo/dash-wallet/pull/542#discussion_r517326488", "createdAt": "2020-11-04T13:02:14Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/ui/dashpay/ExternalUrlProfilePictureDialog.kt", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright 2020 Dash Core Group\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package de.schildbach.wallet.ui.dashpay\n+\n+import android.annotation.SuppressLint\n+import android.app.Dialog\n+import android.graphics.Bitmap\n+import android.graphics.drawable.BitmapDrawable\n+import android.graphics.drawable.Drawable\n+import android.net.Uri\n+import android.os.Bundle\n+import android.text.Editable\n+import android.text.TextWatcher\n+import android.view.View\n+import android.widget.Button\n+import android.widget.EditText\n+import android.widget.ImageView\n+import android.widget.Toast\n+import androidx.annotation.NonNull\n+import androidx.annotation.Nullable\n+import androidx.appcompat.app.AlertDialog\n+import androidx.fragment.app.DialogFragment\n+import androidx.lifecycle.ViewModelProvider\n+import com.bumptech.glide.Glide\n+import com.bumptech.glide.load.DataSource\n+import com.bumptech.glide.load.engine.GlideException\n+import com.bumptech.glide.request.RequestListener\n+import com.bumptech.glide.request.target.CustomTarget\n+import com.bumptech.glide.request.target.Target\n+import com.bumptech.glide.request.transition.Transition\n+import de.schildbach.wallet.ui.ExternalUrlProfilePictureViewModel\n+import de.schildbach.wallet.ui.RestoreWalletFromFileViewModel\n+import de.schildbach.wallet.util.KeyboardUtil\n+import de.schildbach.wallet_test.R\n+import org.slf4j.LoggerFactory\n+\n+\n+class ExternalUrlProfilePictureDialog : DialogFragment() {\n+\n+    companion object {\n+\n+        private val log = LoggerFactory.getLogger(RestoreWalletFromFileViewModel::class.java)\n+\n+        private const val ARG_INITIAL_URL = \"arg_initial_url\"\n+\n+        @JvmStatic\n+        fun newInstance(initialUrl: String?): ExternalUrlProfilePictureDialog {\n+            val dialog = ExternalUrlProfilePictureDialog()\n+            dialog.arguments = Bundle().apply {\n+                putString(ARG_INITIAL_URL, initialUrl)\n+            }\n+            return dialog\n+        }\n+    }\n+\n+    private val initialUrl by lazy {\n+        arguments?.getString(ARG_INITIAL_URL)\n+    }\n+\n+    private lateinit var customView: View\n+    private lateinit var edit: EditText\n+    private lateinit var urlPreviewPane: View\n+    private lateinit var urlPreview: ImageView\n+    private lateinit var positiveButton: Button\n+    private lateinit var neutralButton: Button\n+\n+    private lateinit var sharedViewModel: ExternalUrlProfilePictureViewModel\n+\n+    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {\n+        val dialogBuilder = AlertDialog.Builder(requireContext())\n+                .setTitle(\"External URL\")\n+                .setPositiveButton(R.string.button_ok) { _, _ ->\n+                    sharedViewModel.confirm()\n+                    KeyboardUtil.hideKeyboard(requireContext(), edit)\n+                }\n+                .setNegativeButton(android.R.string.cancel) { _, _ ->\n+                    KeyboardUtil.hideKeyboard(requireContext(), edit)\n+                }\n+                .setNeutralButton(\"clear\", null)\n+                .setView(initCustomView())\n+\n+        val dialog = dialogBuilder.create()\n+        dialog.setOnShowListener {\n+            positiveButton = dialog.getButton(AlertDialog.BUTTON_POSITIVE)\n+            positiveButton.isEnabled = false\n+            neutralButton = dialog.getButton(AlertDialog.BUTTON_NEUTRAL)\n+            neutralButton.setOnClickListener {\n+                edit.text = null\n+            }\n+            if (edit.length() == 0) {\n+                neutralButton.visibility = View.GONE\n+            }\n+            if (initialUrl != null) {\n+                edit.setText(initialUrl)\n+            }\n+        }\n+        return dialog\n+    }\n+\n+    @SuppressLint(\"InflateParams\")\n+    private fun initCustomView(): View {\n+        customView = requireActivity().layoutInflater.inflate(R.layout.dialog_input_text, null)\n+        edit = customView.findViewById(R.id.input)\n+        urlPreviewPane = customView.findViewById(R.id.url_preview_pane)\n+        urlPreview = customView.findViewById(R.id.url_preview)\n+        edit.addTextChangedListener(object : TextWatcher {\n+            override fun afterTextChanged(s: Editable?) {\n+                urlPreviewPane.visibility = View.GONE\n+                neutralButton.visibility = if (edit.length() > 0) View.VISIBLE else View.GONE\n+\n+                cleanup()\n+\n+                if (edit.text.isEmpty()) {\n+                    positiveButton.isEnabled = true\n+                    return\n+                }\n+                val pictureUrl = edit.text.trim().toString()\n+                loadUrl(pictureUrl)\n+            }\n+\n+            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}\n+\n+            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}\n+        })\n+        return customView\n+    }\n+\n+    private fun cleanup() {\n+        urlPreview.setImageBitmap(null)\n+//        sharedViewModel.bitmapCache?.recycle()\n+        sharedViewModel.bitmapCache = null\n+        sharedViewModel.externalUrl = null\n+    }\n+\n+    private fun loadUrl(pictureUrlBase: String) {\n+        val googleDrivePreview = \"https://drive.google.com/file/d/\"\n+        val googleDrivePublic = \"http://drive.google.com/uc?export=view&id=\"\n+        val pictureUrl = if (pictureUrlBase.startsWith(googleDrivePreview)) {\n+            pictureUrlBase.replace(googleDrivePreview, googleDrivePublic).replace(\"/view\", \"\").replace(\"?usp=drivesdk\", \"\")\n+        } else {\n+            pictureUrlBase\n+        }\n+        Glide.with(requireContext())\n+                .load(pictureUrl)\n+                .override(Target.SIZE_ORIGINAL, Target.SIZE_ORIGINAL)\n+//                        .listener(object : RequestListener<Drawable> {\n+//                            override fun onLoadFailed(e: GlideException?, model: Any?, target: Target<Drawable>?, isFirstResource: Boolean): Boolean {\n+//                                urlPreviewPane.visibility = View.GONE\n+//                                positiveButton.isEnabled = false\n+//                                return false\n+//                            }\n+//                            override fun onResourceReady(resource: Drawable?, model: Any?, target: Target<Drawable>?, dataSource: DataSource?, isFirstResource: Boolean): Boolean {\n+//                                urlPreviewPane.visibility = View.VISIBLE\n+//                                positiveButton.isEnabled = true\n+//                                return false\n+//                            }\n+//                        })\n+//                        .into(urlPreview)\n+                .listener(object : RequestListener<Drawable> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyMDI2Mw=="}, "originalCommit": {"oid": "77b0a3448917fea5c17f861602dc7805bd32d7c9"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0Mzc0MDkwOnYy", "diffSide": "RIGHT", "path": "wallet/src/de/schildbach/wallet/ui/EditProfileActivity.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODozMDoxNVrOHtkpaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOToyODoyM1rOHumZsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU0ODM5Mw==", "bodyText": "externalUrlSharedViewModel.externalUrl is null when selecting a picture from Camera or Device.", "url": "https://github.com/dashevo/dash-wallet/pull/542#discussion_r517548393", "createdAt": "2020-11-04T18:30:15Z", "author": {"login": "HashEngineering"}, "path": "wallet/src/de/schildbach/wallet/ui/EditProfileActivity.kt", "diffHunk": "@@ -311,17 +333,51 @@ class EditProfileActivity : BaseMenuActivity() {\n                 }\n                 REQUEST_CODE_CROP_IMAGE -> {\n                     if (resultCode == Activity.RESULT_OK) {\n-                        setAvatarFromFile(editProfileViewModel.profilePictureFile!!)\n+                        if (externalUrlSharedViewModel.externalUrl != null) {\n+                            saveUrl(CropImageActivity.extractZoomedRect(data!!))\n+                        } else {\n+                            setAvatarFromFile(editProfileViewModel.profilePictureFile!!)\n+                        }\n                     }\n                 }\n             }\n         }\n     }\n \n+    private fun saveUrl(zoomedRect: RectF) {\n+        if (externalUrlSharedViewModel.externalUrl != null) {\n+            val zoomedRectStr = \"${zoomedRect.left},${zoomedRect.top},${zoomedRect.right},${zoomedRect.bottom}\"\n+            externalUrlSharedViewModel.externalUrl = setUriParameter(externalUrlSharedViewModel.externalUrl!!, \"dashpay-profile-pic-zoom\", zoomedRectStr)\n+\n+            val file = editProfileViewModel.tmpPictureFile\n+            val imgUri = getFileUri(file)\n+            Glide.with(dashpayUserAvatar).load(imgUri)\n+                    .signature(ObjectKey(file.lastModified()))\n+                    .placeholder(defaultAvatar)\n+                    .transform(ProfilePictureTransformation.create(zoomedRect))\n+                    .into(dashpayUserAvatar)\n+        }\n+    }\n+\n+    private fun setUriParameter(uri: Uri, key: String, newValue: String): Uri {\n+        val newUriBuilder = uri.buildUpon()\n+        if (uri.getQueryParameter(key) == null) {\n+            newUriBuilder.appendQueryParameter(key, newValue)\n+        } else {\n+            newUriBuilder.clearQuery()\n+            for (param in uri.queryParameterNames) {\n+                newUriBuilder.appendQueryParameter(param,\n+                        if (param == key) newValue else uri.getQueryParameter(param))\n+            }\n+        }\n+        return newUriBuilder.build()\n+    }\n+\n     private fun cropProfilePicture() {\n         val tmpPictureUri = editProfileViewModel.tmpPictureFile.toUri()\n         val profilePictureUri = editProfileViewModel.profilePictureFile!!.toUri()\n-        val intent = CropImageActivity.createIntent(this, tmpPictureUri, profilePictureUri)\n+        val initZoomedRect = ProfilePictureTransformation.extractZoomedRect(externalUrlSharedViewModel.externalUrl)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98a92e06b664eeabc054f176797a215004b900db"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYyNTcxNA==", "bodyText": "Fixed", "url": "https://github.com/dashevo/dash-wallet/pull/542#discussion_r518625714", "createdAt": "2020-11-06T09:28:23Z", "author": {"login": "tomasz-ludek"}, "path": "wallet/src/de/schildbach/wallet/ui/EditProfileActivity.kt", "diffHunk": "@@ -311,17 +333,51 @@ class EditProfileActivity : BaseMenuActivity() {\n                 }\n                 REQUEST_CODE_CROP_IMAGE -> {\n                     if (resultCode == Activity.RESULT_OK) {\n-                        setAvatarFromFile(editProfileViewModel.profilePictureFile!!)\n+                        if (externalUrlSharedViewModel.externalUrl != null) {\n+                            saveUrl(CropImageActivity.extractZoomedRect(data!!))\n+                        } else {\n+                            setAvatarFromFile(editProfileViewModel.profilePictureFile!!)\n+                        }\n                     }\n                 }\n             }\n         }\n     }\n \n+    private fun saveUrl(zoomedRect: RectF) {\n+        if (externalUrlSharedViewModel.externalUrl != null) {\n+            val zoomedRectStr = \"${zoomedRect.left},${zoomedRect.top},${zoomedRect.right},${zoomedRect.bottom}\"\n+            externalUrlSharedViewModel.externalUrl = setUriParameter(externalUrlSharedViewModel.externalUrl!!, \"dashpay-profile-pic-zoom\", zoomedRectStr)\n+\n+            val file = editProfileViewModel.tmpPictureFile\n+            val imgUri = getFileUri(file)\n+            Glide.with(dashpayUserAvatar).load(imgUri)\n+                    .signature(ObjectKey(file.lastModified()))\n+                    .placeholder(defaultAvatar)\n+                    .transform(ProfilePictureTransformation.create(zoomedRect))\n+                    .into(dashpayUserAvatar)\n+        }\n+    }\n+\n+    private fun setUriParameter(uri: Uri, key: String, newValue: String): Uri {\n+        val newUriBuilder = uri.buildUpon()\n+        if (uri.getQueryParameter(key) == null) {\n+            newUriBuilder.appendQueryParameter(key, newValue)\n+        } else {\n+            newUriBuilder.clearQuery()\n+            for (param in uri.queryParameterNames) {\n+                newUriBuilder.appendQueryParameter(param,\n+                        if (param == key) newValue else uri.getQueryParameter(param))\n+            }\n+        }\n+        return newUriBuilder.build()\n+    }\n+\n     private fun cropProfilePicture() {\n         val tmpPictureUri = editProfileViewModel.tmpPictureFile.toUri()\n         val profilePictureUri = editProfileViewModel.profilePictureFile!!.toUri()\n-        val intent = CropImageActivity.createIntent(this, tmpPictureUri, profilePictureUri)\n+        val initZoomedRect = ProfilePictureTransformation.extractZoomedRect(externalUrlSharedViewModel.externalUrl)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU0ODM5Mw=="}, "originalCommit": {"oid": "98a92e06b664eeabc054f176797a215004b900db"}, "originalPosition": 182}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 615, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}