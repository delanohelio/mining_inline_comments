{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4NjUyODYz", "number": 3868, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMDoxNTowMlrOD3bfPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMDoxOTo0MFrOD3bi6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDQ4NjM5OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/components/modal-status/modal-status.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMDoxNTowMlrOGNrpBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjo0NTo0OVrOGOxsSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk5OTY4NQ==", "bodyText": "can we get rid of this debug from the test.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3868#discussion_r416999685", "createdAt": "2020-04-29T00:15:02Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/modal-status/modal-status.test.tsx", "diffHunk": "@@ -1,12 +1,211 @@\n import React from 'react';\n-import { render } from '@testing-library/react';\n+import { BrowserRouter as Router } from 'react-router-dom';\n+import { render, wait } from '@testing-library/react';\n+import axiosMock from 'axios'\n+import userEvent from \"@testing-library/user-event\";\n+\n import ModalStatus from './modal-status';\n+import NoMatchRedirect from '../../pages/noMatchRedirect';\n+import { UserContext } from '../../util/user-context';\n+\n+jest.mock('axios');\n \n describe('Modal Status Component', () => {\n-  test('Modal session status renders', () => {\n-    const { getByTestId } = render( <ModalStatus visible={true} />);\n-      expect(getByTestId('inactivity')).toBeInTheDocument();\n-  })\n+  afterEach(() => {\n+    jest.clearAllMocks();\n+  });\n+\n+  test('Modal session status renders and click continue session', async () => {\n+    axiosMock.get.mockImplementation(() => Promise.resolve({ status: 200 }));\n+\n+    const context = {\n+      user: {\n+        error : { \n+          title: '', \n+          message: '',\n+          type: ''\n+        },\n+        maxSessionTime: 300,\n+        sessionWarning: true\n+      },\n+      userNotAuthenticated: jest.fn(),\n+      handleError: jest.fn(),\n+      resetSessionTime: jest.fn(),\n+      setSessionWarning: jest.fn(),\n+      clearErrorMessage: jest.fn()\n+    }\n+    const { getByText } = render( \n+      <Router>\n+        <UserContext.Provider value={context}>\n+          <ModalStatus/>\n+        </UserContext.Provider>\n+      </Router>);\n+\n+      expect(getByText('Due to Inactivity, you will be logged out in')).toBeInTheDocument();\n+\n+      await wait(() => {\n+        userEvent.click(getByText('Continue Session'));\n+      });\n+      expect(axiosMock.get).toHaveBeenCalledTimes(1);\n+  });\n+\n+  test('Modal session status renders and can click logout', async () => {\n+    axiosMock.get.mockImplementation(() => Promise.resolve({ status: 200 }));\n+\n+    const context = {\n+      user: {\n+        error : { \n+          title: '', \n+          message: '',\n+          type: ''\n+        },\n+        maxSessionTime: 300,\n+        sessionWarning: true\n+      },\n+      userNotAuthenticated: jest.fn(),\n+      handleError: jest.fn(),\n+      resetSessionTime: jest.fn(),\n+      setSessionWarning: jest.fn(),\n+      clearErrorMessage: jest.fn()\n+    }\n+    const { getByText } = render( \n+      <Router>\n+        <UserContext.Provider value={context}>\n+          <ModalStatus/>\n+        </UserContext.Provider>\n+      </Router>);\n+\n+      expect(getByText('Due to Inactivity, you will be logged out in')).toBeInTheDocument();\n+\n+      await wait(() => {\n+        userEvent.click(getByText('Log Out'));\n+      });\n+      expect(axiosMock.get).toHaveBeenCalledTimes(1);\n+  });\n+\n+  test('Modal can render 500 error and can click OK', async () => {\n+    const context = {\n+      user: {\n+        error : { \n+          title: '500 Internal Server Error', \n+          message: 'java.net.ConnectException: Failed to connect to localhost/0:0:0:0:0:0:0:1:8011',\n+          type: 'MODAL'\n+        },\n+        maxSessionTime: 300,\n+        sessionWarning: false\n+      },\n+      userNotAuthenticated: jest.fn(),\n+      handleError: jest.fn(),\n+      resetSessionTime: jest.fn(),\n+      setSessionWarning: jest.fn(),\n+      clearErrorMessage: jest.fn()\n+    }\n+    const { getByText } = render( \n+      <Router>\n+        <UserContext.Provider value={context}>\n+          <ModalStatus/>\n+        </UserContext.Provider>\n+      </Router>);\n+\n+      expect(getByText('500 Internal Server Error')).toBeInTheDocument();\n+      expect(getByText('java.net.ConnectException: Failed to connect to localhost/0:0:0:0:0:0:0:1:8011')).toBeInTheDocument();\n+\n+      await wait(() => {\n+        userEvent.click(getByText('OK'));\n+      });\n+      expect(context.clearErrorMessage).toBeCalledTimes(1);\n+  });\n+\n+  test('Modal can render 500 error and can click Cancel', async () => {\n+    const context = {\n+      user: {\n+        error : { \n+          title: '500 Internal Server Error', \n+          message: 'java.net.ConnectException: Failed to connect to localhost/0:0:0:0:0:0:0:1:8011',\n+          type: 'MODAL'\n+        },\n+        maxSessionTime: 300,\n+        sessionWarning: false\n+      },\n+      userNotAuthenticated: jest.fn(),\n+      handleError: jest.fn(),\n+      resetSessionTime: jest.fn(),\n+      setSessionWarning: jest.fn(),\n+      clearErrorMessage: jest.fn()\n+    }\n+    const { getByText, debug } = render( \n+      <Router>\n+        <UserContext.Provider value={context}>\n+          <ModalStatus/>\n+          <NoMatchRedirect/>\n+        </UserContext.Provider>\n+      </Router>);\n+\n+      expect(getByText('500 Internal Server Error')).toBeInTheDocument();\n+      expect(getByText('java.net.ConnectException: Failed to connect to localhost/0:0:0:0:0:0:0:1:8011')).toBeInTheDocument();\n+\n+      await wait(() => {\n+        userEvent.click(getByText('Cancel'));\n+      });\n+\n+      debug()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "922b6b24b46e967262cf2857b52ab58d108d553d"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE0NzQwMw==", "bodyText": "Removed the debug", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3868#discussion_r418147403", "createdAt": "2020-04-30T16:45:49Z", "author": {"login": "brucean52"}, "path": "marklogic-data-hub-central/ui/src/components/modal-status/modal-status.test.tsx", "diffHunk": "@@ -1,12 +1,211 @@\n import React from 'react';\n-import { render } from '@testing-library/react';\n+import { BrowserRouter as Router } from 'react-router-dom';\n+import { render, wait } from '@testing-library/react';\n+import axiosMock from 'axios'\n+import userEvent from \"@testing-library/user-event\";\n+\n import ModalStatus from './modal-status';\n+import NoMatchRedirect from '../../pages/noMatchRedirect';\n+import { UserContext } from '../../util/user-context';\n+\n+jest.mock('axios');\n \n describe('Modal Status Component', () => {\n-  test('Modal session status renders', () => {\n-    const { getByTestId } = render( <ModalStatus visible={true} />);\n-      expect(getByTestId('inactivity')).toBeInTheDocument();\n-  })\n+  afterEach(() => {\n+    jest.clearAllMocks();\n+  });\n+\n+  test('Modal session status renders and click continue session', async () => {\n+    axiosMock.get.mockImplementation(() => Promise.resolve({ status: 200 }));\n+\n+    const context = {\n+      user: {\n+        error : { \n+          title: '', \n+          message: '',\n+          type: ''\n+        },\n+        maxSessionTime: 300,\n+        sessionWarning: true\n+      },\n+      userNotAuthenticated: jest.fn(),\n+      handleError: jest.fn(),\n+      resetSessionTime: jest.fn(),\n+      setSessionWarning: jest.fn(),\n+      clearErrorMessage: jest.fn()\n+    }\n+    const { getByText } = render( \n+      <Router>\n+        <UserContext.Provider value={context}>\n+          <ModalStatus/>\n+        </UserContext.Provider>\n+      </Router>);\n+\n+      expect(getByText('Due to Inactivity, you will be logged out in')).toBeInTheDocument();\n+\n+      await wait(() => {\n+        userEvent.click(getByText('Continue Session'));\n+      });\n+      expect(axiosMock.get).toHaveBeenCalledTimes(1);\n+  });\n+\n+  test('Modal session status renders and can click logout', async () => {\n+    axiosMock.get.mockImplementation(() => Promise.resolve({ status: 200 }));\n+\n+    const context = {\n+      user: {\n+        error : { \n+          title: '', \n+          message: '',\n+          type: ''\n+        },\n+        maxSessionTime: 300,\n+        sessionWarning: true\n+      },\n+      userNotAuthenticated: jest.fn(),\n+      handleError: jest.fn(),\n+      resetSessionTime: jest.fn(),\n+      setSessionWarning: jest.fn(),\n+      clearErrorMessage: jest.fn()\n+    }\n+    const { getByText } = render( \n+      <Router>\n+        <UserContext.Provider value={context}>\n+          <ModalStatus/>\n+        </UserContext.Provider>\n+      </Router>);\n+\n+      expect(getByText('Due to Inactivity, you will be logged out in')).toBeInTheDocument();\n+\n+      await wait(() => {\n+        userEvent.click(getByText('Log Out'));\n+      });\n+      expect(axiosMock.get).toHaveBeenCalledTimes(1);\n+  });\n+\n+  test('Modal can render 500 error and can click OK', async () => {\n+    const context = {\n+      user: {\n+        error : { \n+          title: '500 Internal Server Error', \n+          message: 'java.net.ConnectException: Failed to connect to localhost/0:0:0:0:0:0:0:1:8011',\n+          type: 'MODAL'\n+        },\n+        maxSessionTime: 300,\n+        sessionWarning: false\n+      },\n+      userNotAuthenticated: jest.fn(),\n+      handleError: jest.fn(),\n+      resetSessionTime: jest.fn(),\n+      setSessionWarning: jest.fn(),\n+      clearErrorMessage: jest.fn()\n+    }\n+    const { getByText } = render( \n+      <Router>\n+        <UserContext.Provider value={context}>\n+          <ModalStatus/>\n+        </UserContext.Provider>\n+      </Router>);\n+\n+      expect(getByText('500 Internal Server Error')).toBeInTheDocument();\n+      expect(getByText('java.net.ConnectException: Failed to connect to localhost/0:0:0:0:0:0:0:1:8011')).toBeInTheDocument();\n+\n+      await wait(() => {\n+        userEvent.click(getByText('OK'));\n+      });\n+      expect(context.clearErrorMessage).toBeCalledTimes(1);\n+  });\n+\n+  test('Modal can render 500 error and can click Cancel', async () => {\n+    const context = {\n+      user: {\n+        error : { \n+          title: '500 Internal Server Error', \n+          message: 'java.net.ConnectException: Failed to connect to localhost/0:0:0:0:0:0:0:1:8011',\n+          type: 'MODAL'\n+        },\n+        maxSessionTime: 300,\n+        sessionWarning: false\n+      },\n+      userNotAuthenticated: jest.fn(),\n+      handleError: jest.fn(),\n+      resetSessionTime: jest.fn(),\n+      setSessionWarning: jest.fn(),\n+      clearErrorMessage: jest.fn()\n+    }\n+    const { getByText, debug } = render( \n+      <Router>\n+        <UserContext.Provider value={context}>\n+          <ModalStatus/>\n+          <NoMatchRedirect/>\n+        </UserContext.Provider>\n+      </Router>);\n+\n+      expect(getByText('500 Internal Server Error')).toBeInTheDocument();\n+      expect(getByText('java.net.ConnectException: Failed to connect to localhost/0:0:0:0:0:0:0:1:8011')).toBeInTheDocument();\n+\n+      await wait(() => {\n+        userEvent.click(getByText('Cancel'));\n+      });\n+\n+      debug()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk5OTY4NQ=="}, "originalCommit": {"oid": "922b6b24b46e967262cf2857b52ab58d108d553d"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDQ5NTc3OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/components/modal-status/modal-status.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMDoxOTo0MFrOGNruXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjo0Njo1NVrOGOxutg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwMTA1NQ==", "bodyText": "Can you pls create a test config file to keep the context and export that to the test. This is being used in several tests, so it will be great if we can extract that out. Similar thing for the error context..\nFor mapping tests we have created a data.config.js under config directory. Probably not the right place to mix test data config with application configs, and I plan to move them to a better place later.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3868#discussion_r417001055", "createdAt": "2020-04-29T00:19:40Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/modal-status/modal-status.test.tsx", "diffHunk": "@@ -1,12 +1,211 @@\n import React from 'react';\n-import { render } from '@testing-library/react';\n+import { BrowserRouter as Router } from 'react-router-dom';\n+import { render, wait } from '@testing-library/react';\n+import axiosMock from 'axios'\n+import userEvent from \"@testing-library/user-event\";\n+\n import ModalStatus from './modal-status';\n+import NoMatchRedirect from '../../pages/noMatchRedirect';\n+import { UserContext } from '../../util/user-context';\n+\n+jest.mock('axios');\n \n describe('Modal Status Component', () => {\n-  test('Modal session status renders', () => {\n-    const { getByTestId } = render( <ModalStatus visible={true} />);\n-      expect(getByTestId('inactivity')).toBeInTheDocument();\n-  })\n+  afterEach(() => {\n+    jest.clearAllMocks();\n+  });\n+\n+  test('Modal session status renders and click continue session', async () => {\n+    axiosMock.get.mockImplementation(() => Promise.resolve({ status: 200 }));\n+\n+    const context = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "922b6b24b46e967262cf2857b52ab58d108d553d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE0ODAyMg==", "bodyText": "I created a user-context-mock under '/assets/mock-data' since it's mocking Context data and not configuration for the app.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3868#discussion_r418148022", "createdAt": "2020-04-30T16:46:55Z", "author": {"login": "brucean52"}, "path": "marklogic-data-hub-central/ui/src/components/modal-status/modal-status.test.tsx", "diffHunk": "@@ -1,12 +1,211 @@\n import React from 'react';\n-import { render } from '@testing-library/react';\n+import { BrowserRouter as Router } from 'react-router-dom';\n+import { render, wait } from '@testing-library/react';\n+import axiosMock from 'axios'\n+import userEvent from \"@testing-library/user-event\";\n+\n import ModalStatus from './modal-status';\n+import NoMatchRedirect from '../../pages/noMatchRedirect';\n+import { UserContext } from '../../util/user-context';\n+\n+jest.mock('axios');\n \n describe('Modal Status Component', () => {\n-  test('Modal session status renders', () => {\n-    const { getByTestId } = render( <ModalStatus visible={true} />);\n-      expect(getByTestId('inactivity')).toBeInTheDocument();\n-  })\n+  afterEach(() => {\n+    jest.clearAllMocks();\n+  });\n+\n+  test('Modal session status renders and click continue session', async () => {\n+    axiosMock.get.mockImplementation(() => Promise.resolve({ status: 200 }));\n+\n+    const context = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwMTA1NQ=="}, "originalCommit": {"oid": "922b6b24b46e967262cf2857b52ab58d108d553d"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3445, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}