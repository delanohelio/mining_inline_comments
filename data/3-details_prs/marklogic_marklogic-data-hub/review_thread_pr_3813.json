{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzMDU0MTEy", "number": 3813, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjo0NToxMlrODxoLFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNzozMDowNlrODzPmVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzY1MDE0OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/deploy/commands/LoadUserArtifactsCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjo0NToxMlrOGFM2UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDowNzoxN1rOGG7aiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwNjU3Ng==", "bodyText": "Why does stepDefinition needs it own code here?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r408106576", "createdAt": "2020-04-14T12:45:12Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/deploy/commands/LoadUserArtifactsCommand.java", "diffHunk": "@@ -142,15 +142,23 @@ protected Modules findModulesWithResolvedBaseDir(String resolvedBaseDir) {\n                         return modules;\n                     }\n                 };\n-                Files.walkFileTree(artifactPath, new SimpleFileVisitor<Path>() {\n-                    @Override\n-                    public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n-                        if (dir.toFile().isDirectory()) {\n-                            executeWalkWithDataService(dir, modulesFinder, artifactService, typeInfo);\n+                if(\"stepDefinition\".equals(artifactType)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ed16cf6c854d816cd3b2734bd602cc030a18f38"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkxODA5MQ==", "bodyText": "All artifacts are present in base dir except stepdef, hence calling File.walk in case of stepdef,\nalso we don't want to reload the previously loaded mappings(using REST) using DS.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r409918091", "createdAt": "2020-04-17T00:07:17Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/deploy/commands/LoadUserArtifactsCommand.java", "diffHunk": "@@ -142,15 +142,23 @@ protected Modules findModulesWithResolvedBaseDir(String resolvedBaseDir) {\n                         return modules;\n                     }\n                 };\n-                Files.walkFileTree(artifactPath, new SimpleFileVisitor<Path>() {\n-                    @Override\n-                    public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n-                        if (dir.toFile().isDirectory()) {\n-                            executeWalkWithDataService(dir, modulesFinder, artifactService, typeInfo);\n+                if(\"stepDefinition\".equals(artifactType)){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwNjU3Ng=="}, "originalCommit": {"oid": "6ed16cf6c854d816cd3b2734bd602cc030a18f38"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzY2NDYzOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/hub-internal-config/triggers/ml-dh-json-new-mapping-create.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjo0OTowMFrOGFM_Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDoxMzo1MlrOGG7iRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwODg5MQ==", "bodyText": "Why aren't we still using http://marklogic.com/data-hub/mappings ?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r408108891", "createdAt": "2020-04-14T12:49:00Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/hub-internal-config/triggers/ml-dh-json-new-mapping-create.json", "diffHunk": "@@ -0,0 +1,39 @@\n+{\n+  \"name\": \"ml-dh-json-new-mapping-create\",\n+  \"description\": \"MarkLogic Data Hub JSON mapping creation trigger\",\n+  \"event\": {\n+    \"data-event\": {\n+      \"collection-scope\": {\n+        \"uri\": \"http://marklogic.com/data-hub/mapping-artifact\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ed16cf6c854d816cd3b2734bd602cc030a18f38"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkyMDA3MQ==", "bodyText": "Reverted to  http://marklogic.com/data-hub/mappings", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r409920071", "createdAt": "2020-04-17T00:13:52Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub/src/main/resources/hub-internal-config/triggers/ml-dh-json-new-mapping-create.json", "diffHunk": "@@ -0,0 +1,39 @@\n+{\n+  \"name\": \"ml-dh-json-new-mapping-create\",\n+  \"description\": \"MarkLogic Data Hub JSON mapping creation trigger\",\n+  \"event\": {\n+    \"data-event\": {\n+      \"collection-scope\": {\n+        \"uri\": \"http://marklogic.com/data-hub/mapping-artifact\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwODg5MQ=="}, "originalCommit": {"oid": "6ed16cf6c854d816cd3b2734bd602cc030a18f38"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzY3NTY2OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/builtins/steps/mapping/default/lib.sjs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjo1MToyNFrOGFNGHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjo1MToyNFrOGFNGHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODExMDYyMA==", "bodyText": "Assuming we do need a new collection (that's a separate question), should at least avoid the duplication of the query construction and make a function that accepts a collection name and returns the cts.andQuery.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r408110620", "createdAt": "2020-04-14T12:51:24Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/builtins/steps/mapping/default/lib.sjs", "diffHunk": "@@ -15,7 +15,12 @@ function getModel(targetEntity, version = '0.0.1') {\n }\n \n function getMapping(mappingName) {\n-  return fn.head(cts.search(cts.andQuery([cts.collectionQuery('http://marklogic.com/data-hub/mappings'), cts.jsonPropertyValueQuery('name', mappingName, ['case-insensitive'])]), [\"unfiltered\", cts.indexOrder(cts.uriReference(), \"descending\")]));\n+  //Look in new collection, if artifact is not present fallback to the old collection\n+  let mapping =  fn.head(cts.search(cts.andQuery([cts.collectionQuery('http://marklogic.com/data-hub/mapping-artifact'), cts.jsonPropertyValueQuery('name', mappingName, ['case-insensitive'])]), [\"unfiltered\", cts.indexOrder(cts.uriReference(), \"descending\")]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ed16cf6c854d816cd3b2734bd602cc030a18f38"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzY4MTgxOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/endpoints/collectorLib.sjs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjo1Mjo1OVrOGFNKJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjo1Mjo1OVrOGFNKJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODExMTY1NA==", "bodyText": "Whoa - why are we supporting another location for the sourceQuery? Why would it be on the mapping?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r408111654", "createdAt": "2020-04-14T12:52:59Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/endpoints/collectorLib.sjs", "diffHunk": "@@ -39,11 +43,25 @@ class CollectorLib {\n       return fn.normalizeSpace(`${sourceQuery}`);\n     }\n \n+    //Get sourceQuery from mapping artifact if present\n+    if(combinedOptions.mapping) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ed16cf6c854d816cd3b2734bd602cc030a18f38"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzY5MTk4OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/curation/controllers/FlowControllerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjo1NToxMVrOGFNP9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjo1NToxMVrOGFNP9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODExMzE0MQ==", "bodyText": "If the purpose of this test is to run a flow and not to test the creation of a step, I think it's better just to add the step to the test flow file.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r408113141", "createdAt": "2020-04-14T12:55:11Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/curation/controllers/FlowControllerTest.java", "diffHunk": "@@ -177,6 +178,39 @@ void runFlow() {\n         JsonNode job = jobsController.getJob(resp.getJobId());\n         String jobStatus = job.get(\"jobStatus\").asText();\n         assertEquals(\"finished\", jobStatus, \"Job status should be 'finished' once threads complete; job doc: \" + job);\n+\n+\n+        addStagingDoc(\"input/mapInput.json\", \"/input/mapInput.json\", \"default-ingestion\");\n+\n+        //Equivalent to adding a step from GUI\n+        controller.createStep(\"testFlow\" , 2, \"{\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ed16cf6c854d816cd3b2734bd602cc030a18f38"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzY5ODU1OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/curation/controllers/FlowControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjo1Njo1MVrOGFNUIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDowODowNVrOGG7bgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODExNDIwOQ==", "bodyText": "Can you switch this to use the reference project instead of \"run-flow-test\"? I'd like for as many tests as possible to use the reference project. Adding a flow there with an entity-services-mapping would be a very useful addition.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r408114209", "createdAt": "2020-04-14T12:56:51Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/curation/controllers/FlowControllerTest.java", "diffHunk": "@@ -166,7 +167,7 @@ void getFlow() throws IOException {\n     }\n \n     @Test\n-    void runFlow() {\n+    void runFlow() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ed16cf6c854d816cd3b2734bd602cc030a18f38"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkxODMzOA==", "bodyText": "Used reference-project for the tests", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r409918338", "createdAt": "2020-04-17T00:08:05Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/curation/controllers/FlowControllerTest.java", "diffHunk": "@@ -166,7 +167,7 @@ void getFlow() throws IOException {\n     }\n \n     @Test\n-    void runFlow() {\n+    void runFlow() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODExNDIwOQ=="}, "originalCommit": {"oid": "6ed16cf6c854d816cd3b2734bd602cc030a18f38"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTA5Njg4OnYy", "diffSide": "LEFT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/step/impl/MappingStepDefinitionImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDoxMzoxMlrOGG7hUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDoxMzoxMlrOGG7hUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkxOTgyNQ==", "bodyText": "Spoke with @sbayatpur , she said DHF 5.3.0 will be supported on ML servers  >=9.0-11 for 9.x and >=10.0-2.1 for 10.x. Hence removed the check.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r409919825", "createdAt": "2020-04-17T00:13:12Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/step/impl/MappingStepDefinitionImpl.java", "diffHunk": "@@ -42,14 +40,7 @@ public MappingStepDefinitionImpl(String name) {\n \n         options.put(\"sourceDatabase\", HubConfig.DEFAULT_STAGING_NAME);\n         options.put(\"targetDatabase\", HubConfig.DEFAULT_FINAL_NAME);\n-        Versions versions = ApplicationContextReference.getBean(Versions.class);\n-        if (versions == null || versions.isVersionCompatibleWithES()){\n-            setModulePath(\"/data-hub/5/builtins/steps/mapping/entity-services/main.sjs\");\n-        }\n-        else {\n-            setModulePath(\"/data-hub/5/builtins/steps/mapping/default/main.sjs\");\n-        }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbda5fd10133f3b38da5603af334ac8abbaa599e"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTE2MDAxOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/impl/ArtifactManagerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDo0NDozNVrOGG8FPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDo0NDozNVrOGG8FPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkyOTAyMQ==", "bodyText": "You can remove this, as I'm just going to end up removing it in 4757 since it involves the filesystem. Can remove the line above it too, though you can leave it if you want and I'll delete it as part of 4757.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r409929021", "createdAt": "2020-04-17T00:44:35Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/impl/ArtifactManagerImpl.java", "diffHunk": "@@ -52,7 +52,15 @@ public ArrayNode getArtifacts(String artifactType) {\n     public ObjectNode updateArtifact(String artifactType, String artifactName, JsonNode artifactJson) {\n         ObjectNode resp = (ObjectNode) getArtifactService().setArtifact(artifactType, artifactName, artifactJson);\n         writeArtifactInProject(artifactType, (ObjectNode) artifactJson, false);\n-        return resp;\n+        //Write default settings to project", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbda5fd10133f3b38da5603af334ac8abbaa599e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTE2MTU4OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/step/impl/Step.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDo0NTozMVrOGG8GIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDo0NTozMVrOGG8GIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkyOTI1MA==", "bodyText": "Can you remove this line of code? retryLimit isn't used anywhere, no need to set it.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r409929250", "createdAt": "2020-04-17T00:45:31Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/step/impl/Step.java", "diffHunk": "@@ -134,9 +133,9 @@ public static Step deserialize(JsonNode json) {\n         step.setDescription(jsonObject.getString(\"description\"));\n         step.setOptions(jsonObject.getMap(\"options\"));\n         step.setCustomHook(jsonObject.getNode(\"customHook\"));\n-        step.setRetryLimit(jsonObject.getInt(\"retryLimit\"));\n-        step.setBatchSize(jsonObject.getInt(\"batchSize\"));\n-        step.setThreadCount(jsonObject.getInt(\"threadCount\"));\n+        step.setRetryLimit(jsonObject.getIntValue(\"retryLimit\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbda5fd10133f3b38da5603af334ac8abbaa599e"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTE2OTgxOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/data-services/artifacts/mappingTest.sjs", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDo1MDo0MFrOGG8LKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMToyMDo1M1rOGG8qYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzMDUzNw==", "bodyText": "I think this needs to be populated so that you can verify that these are concatenated to the collections specified below. Really need three tests - one where this doesn't exist, one where it's empty, and one where it has at least one value.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r409930537", "createdAt": "2020-04-17T00:50:40Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/data-services/artifacts/mappingTest.sjs", "diffHunk": "@@ -1,11 +1,64 @@\n const test = require(\"/test/test-helper.xqy\");\n+const DataHubSingleton = require('/data-hub/5/datahub-singleton.sjs');\n+const dataHub = DataHubSingleton.instance();\n const Artifacts = require('/data-hub/5/artifacts/core.sjs');\n+const flowNode  =\n+  {\n+  \"name\": \"testFlow\",\n+  \"steps\": {\n+    \"1\": {\n+      \"name\": \"rty\",\n+      \"options\": {\n+        \"loadData\": {\n+          \"name\": \"rty\"\n+        }\n+      },\n+      \"stepDefinitionName\": \"default-ingestion\",\n+      \"stepDefinitionType\": \"INGESTION\"\n+    },\n+    \"2\": {\n+      \"name\": \"TestMapping\",\n+      \"options\": {\n+        \"mapping\": {\n+          \"name\": \"TestMapping\"\n+        }\n+      },\n+      \"stepDefinitionName\": \"entity-services-mapping\",\n+      \"stepDefinitionType\": \"MAPPING\"\n+    },\n+    \"3\": {\n+      \"name\": \"mapjson\",\n+      \"description\": \"\",\n+      \"options\": {\n+        \"additionalCollections\": [],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbda5fd10133f3b38da5603af334ac8abbaa599e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzODUyOA==", "bodyText": "flow.addSettingsToFlow() method adds settings to the step options (for all artifacts except 'loadData') only if it looks like this\n    \"<artifact_type>\": {\n      \"name\": \"<artifact_name>\"\n    }\n  } ```\n\n\n\nElse, it should just return the step as is (old versions of step). This is an old version of step. So, the test was to ensure it is returned as is.\n2.  I agree , I will add test to ensure that 'additionalCollections' is concatenated to 'collections' array", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r409938528", "createdAt": "2020-04-17T01:20:53Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/data-services/artifacts/mappingTest.sjs", "diffHunk": "@@ -1,11 +1,64 @@\n const test = require(\"/test/test-helper.xqy\");\n+const DataHubSingleton = require('/data-hub/5/datahub-singleton.sjs');\n+const dataHub = DataHubSingleton.instance();\n const Artifacts = require('/data-hub/5/artifacts/core.sjs');\n+const flowNode  =\n+  {\n+  \"name\": \"testFlow\",\n+  \"steps\": {\n+    \"1\": {\n+      \"name\": \"rty\",\n+      \"options\": {\n+        \"loadData\": {\n+          \"name\": \"rty\"\n+        }\n+      },\n+      \"stepDefinitionName\": \"default-ingestion\",\n+      \"stepDefinitionType\": \"INGESTION\"\n+    },\n+    \"2\": {\n+      \"name\": \"TestMapping\",\n+      \"options\": {\n+        \"mapping\": {\n+          \"name\": \"TestMapping\"\n+        }\n+      },\n+      \"stepDefinitionName\": \"entity-services-mapping\",\n+      \"stepDefinitionType\": \"MAPPING\"\n+    },\n+    \"3\": {\n+      \"name\": \"mapjson\",\n+      \"description\": \"\",\n+      \"options\": {\n+        \"additionalCollections\": [],", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzMDUzNw=="}, "originalCommit": {"oid": "fbda5fd10133f3b38da5603af334ac8abbaa599e"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTE3MTUwOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/data-services/artifacts/suite-setup.xqy", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDo1MTo1NFrOGG8MMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjoxNDo0M1rOGHUWwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzMDgwMQ==", "bodyText": "hub-test:load-artifacts should load your entity models for you, no need for this. That avoids duplicating knowledge of how to insert entity models.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r409930801", "createdAt": "2020-04-17T00:51:54Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/data-services/artifacts/suite-setup.xqy", "diffHunk": "@@ -5,4 +5,18 @@ xquery version \"1.0-ml\";\n import module namespace hub-test = \"http://marklogic.com/data-hub/test\" at \"/test/data-hub-test-helper.xqy\";\n import module namespace test = \"http://marklogic.com/test\" at \"/test/test-helper.xqy\";\n \n+xdmp:invoke-function(function() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbda5fd10133f3b38da5603af334ac8abbaa599e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzNTkzOA==", "bodyText": "It loads it to final db, I want entities to be load to staging db . I used hub-test:load-artifacts for loading it to final.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r409935938", "createdAt": "2020-04-17T01:11:22Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/data-services/artifacts/suite-setup.xqy", "diffHunk": "@@ -5,4 +5,18 @@ xquery version \"1.0-ml\";\n import module namespace hub-test = \"http://marklogic.com/data-hub/test\" at \"/test/data-hub-test-helper.xqy\";\n import module namespace test = \"http://marklogic.com/test\" at \"/test/test-helper.xqy\";\n \n+xdmp:invoke-function(function() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzMDgwMQ=="}, "originalCommit": {"oid": "fbda5fd10133f3b38da5603af334ac8abbaa599e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE2MDY3OQ==", "bodyText": "Okay - I think it'd be better to add a new function to data-hub-test-helper - e.g. \"load-artifacts-into-staging\" - but that can be done later, don't need to do that in this PR.\nI'm missing why the staging db matters though for the test - are there assertions on making sure something exists in both the staging and final db?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r410160679", "createdAt": "2020-04-17T11:24:45Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/data-services/artifacts/suite-setup.xqy", "diffHunk": "@@ -5,4 +5,18 @@ xquery version \"1.0-ml\";\n import module namespace hub-test = \"http://marklogic.com/data-hub/test\" at \"/test/data-hub-test-helper.xqy\";\n import module namespace test = \"http://marklogic.com/test\" at \"/test/test-helper.xqy\";\n \n+xdmp:invoke-function(function() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzMDgwMQ=="}, "originalCommit": {"oid": "fbda5fd10133f3b38da5603af334ac8abbaa599e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMyNjcyMA==", "bodyText": "So, the artifact service writes mappings to both staging and final db. In order to write the mappings in both the db, the entities should be present(this is necessitated by the fact that we now write mappings to same collection (http://marklogic.com/data-hub/mappings) as before and it has associate triggers which will fail in generating xslt if entity is not found in staging db.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r410326720", "createdAt": "2020-04-17T16:14:43Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/data-services/artifacts/suite-setup.xqy", "diffHunk": "@@ -5,4 +5,18 @@ xquery version \"1.0-ml\";\n import module namespace hub-test = \"http://marklogic.com/data-hub/test\" at \"/test/data-hub-test-helper.xqy\";\n import module namespace test = \"http://marklogic.com/test\" at \"/test/test-helper.xqy\";\n \n+xdmp:invoke-function(function() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzMDgwMQ=="}, "originalCommit": {"oid": "fbda5fd10133f3b38da5603af334ac8abbaa599e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTE3MjA1OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/data-services/artifacts/suite-teardown.xqy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDo1MjoxM1rOGG8MfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMToxMjoxNVrOGG8hIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzMDg3Ng==", "bodyText": "And delete-artifacts should delete your entity models for you too.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r409930876", "createdAt": "2020-04-17T00:52:13Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/data-services/artifacts/suite-teardown.xqy", "diffHunk": "@@ -3,4 +3,11 @@ xquery version \"1.0-ml\";\n import module namespace hub-test = \"http://marklogic.com/data-hub/test\" at \"/test/data-hub-test-helper.xqy\";\n import module namespace test = \"http://marklogic.com/test\" at \"/test/test-helper.xqy\";\n \n+xdmp:invoke-function(function() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbda5fd10133f3b38da5603af334ac8abbaa599e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzNjE2MQ==", "bodyText": "I have used hub-test:delete-artifacts which deletes from final db, this code is to delete from staging db", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r409936161", "createdAt": "2020-04-17T01:12:15Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/data-services/artifacts/suite-teardown.xqy", "diffHunk": "@@ -3,4 +3,11 @@ xquery version \"1.0-ml\";\n import module namespace hub-test = \"http://marklogic.com/data-hub/test\" at \"/test/data-hub-test-helper.xqy\";\n import module namespace test = \"http://marklogic.com/test\" at \"/test/test-helper.xqy\";\n \n+xdmp:invoke-function(function() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzMDg3Ng=="}, "originalCommit": {"oid": "fbda5fd10133f3b38da5603af334ac8abbaa599e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTE3NjMyOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/test/resources/test-projects/reference-project/entities/Item.entity.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDo1NDozNlrOGG8O8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMTozNDoyNFrOGG848A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzMTUwNw==", "bodyText": "Do you need a new entity type here - can't Customer or Order work? I'd like to keep the reference project down to the bare minimum number of things needed for our tests. It's fine to add some new mappings, I just don't want to add a new entity type unless there's something that Customer and Order aren't sufficient for.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r409931507", "createdAt": "2020-04-17T00:54:36Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/test/resources/test-projects/reference-project/entities/Item.entity.json", "diffHunk": "@@ -0,0 +1,30 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbda5fd10133f3b38da5603af334ac8abbaa599e"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk0MjI1Ng==", "bodyText": "I will rework the test to use Customer or Order", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r409942256", "createdAt": "2020-04-17T01:34:24Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub-central/src/test/resources/test-projects/reference-project/entities/Item.entity.json", "diffHunk": "@@ -0,0 +1,30 @@\n+{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzMTUwNw=="}, "originalCommit": {"oid": "fbda5fd10133f3b38da5603af334ac8abbaa599e"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTE3ODY0OnYy", "diffSide": "LEFT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/FlowController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDo1NjowOVrOGG8QWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMToyMDoxOVrOGHKGjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzMTg2NA==", "bodyText": "This is great that this is all going away - is there just not a need for StepModel anymore, and Step is sufficient?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r409931864", "createdAt": "2020-04-17T00:56:09Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/FlowController.java", "diffHunk": "@@ -379,100 +370,13 @@ public StepModel createStep(String flowName, Integer stepOrder, String stepId, S\n         }\n \n         if (existingStep != null && existingStep.isEqual(step)) {\n-            return transformStepToWebModel(existingStep);\n+            return existingStep;\n         }\n \n         flowManager.saveFlow(flow);\n-        return transformStepToWebModel(step);\n-    }\n-\n-    private List<StepModel> getStepsToWebModel(String flowName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbda5fd10133f3b38da5603af334ac8abbaa599e"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk0NDk4MA==", "bodyText": "If the step is going to look something like the one below, I don't think it's needed. We allowed creating custom steps in QS, hence StepModel contained \"modulePath\"  (which was not in Step) which was used to create a step definition and a step in the backend. Since we won't do that, I believe it wouldn't be necessary. We can include it if there is a need\n    \"1\" : {\n      \"name\" : \"mapItem\",\n      \"options\" : {\n        \"mapping\" : {\n          \"name\" : \"mapItem\"\n        }\n      },\n      \"stepDefinitionName\" : \"entity-services-mapping\",\n      \"stepDefinitionType\" : \"MAPPING\"\n    }", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r409944980", "createdAt": "2020-04-17T01:44:30Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/FlowController.java", "diffHunk": "@@ -379,100 +370,13 @@ public StepModel createStep(String flowName, Integer stepOrder, String stepId, S\n         }\n \n         if (existingStep != null && existingStep.isEqual(step)) {\n-            return transformStepToWebModel(existingStep);\n+            return existingStep;\n         }\n \n         flowManager.saveFlow(flow);\n-        return transformStepToWebModel(step);\n-    }\n-\n-    private List<StepModel> getStepsToWebModel(String flowName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzMTg2NA=="}, "originalCommit": {"oid": "fbda5fd10133f3b38da5603af334ac8abbaa599e"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE1ODczMw==", "bodyText": "Sounds good!", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r410158733", "createdAt": "2020-04-17T11:20:19Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/FlowController.java", "diffHunk": "@@ -379,100 +370,13 @@ public StepModel createStep(String flowName, Integer stepOrder, String stepId, S\n         }\n \n         if (existingStep != null && existingStep.isEqual(step)) {\n-            return transformStepToWebModel(existingStep);\n+            return existingStep;\n         }\n \n         flowManager.saveFlow(flow);\n-        return transformStepToWebModel(step);\n-    }\n-\n-    private List<StepModel> getStepsToWebModel(String flowName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzMTg2NA=="}, "originalCommit": {"oid": "fbda5fd10133f3b38da5603af334ac8abbaa599e"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTE4NDUxOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/impl/flow.sjs", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMDo1OTo0N1rOGG8T1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNTo0NDoxOVrOGHr_3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzMjc1Ng==", "bodyText": "Does FlowRunnerImpl not need the \"fully populated\" flow document? Only the ML code needs it?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r409932756", "createdAt": "2020-04-17T00:59:47Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/impl/flow.sjs", "diffHunk": "@@ -102,22 +103,53 @@ class Flow {\n     if (cachedFlows[name] === undefined) {\n       let uriMatches = cts.uriMatch('/flows/' + name + '.flow.json', ['case-insensitive'], cts.directoryQuery(\"/flows/\"));\n       // cache flow to prevent repeated calls.\n+      let flowObject;\n       if (fn.count(uriMatches) === 1) {\n-        cachedFlows[name] = cts.doc(fn.head(uriMatches)).toObject();\n+        flowObject = cts.doc(fn.head(uriMatches)).toObject();\n       } else if (fn.count(uriMatches) > 1) {\n         for (let uri of uriMatches) {\n           if (uri === '/flows/' + name + '.flow.json') {\n-            cachedFlows[name] = cts.doc(uriMatches).toObject();\n+            flowObject  = cts.doc(uriMatches).toObject();\n             break;\n           }\n         }\n       } else {\n         cachedFlows[name] = null;\n+        return null;\n       }\n+      flowObject = this.addSettingsToFlow(name, flowObject);\n+      cachedFlows[name] = flowObject;\n     }\n     return cachedFlows[name];\n   }\n \n+  addSettingsToFlow(flowName, flowNode){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbda5fd10133f3b38da5603af334ac8abbaa599e"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk0MTEzMQ==", "bodyText": "WriteStepRunner requires the \"fully populated\" document, I believe steps that use QueryStepRunner don't (except for 'disableJobOutput' property which is not part of settings artifact). I think Ryan's code takes care of getting the settings doc and applying them in case of WriteStepRunner\nI initially changed core.sjs/getArtifact() to return \"fully populated\" flow doc  (FlowManager.getFlow()  and in turn FlowRunner uses it).  It worked fine but whenever a flow is edited (add/remove step) , the flows that gets written back has  the fully populated document (since when creating/deleting a new step, we get the flow (fully populated doc) and adds steps to it and persists it (unless we choose to create and use a different method to get the flow doc in the db in case of creating/deleting a step). So, I moved this method from core.sjs 's getArtifact to impl/flows.sjs 's getFlow() method", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r409941131", "createdAt": "2020-04-17T01:30:15Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/impl/flow.sjs", "diffHunk": "@@ -102,22 +103,53 @@ class Flow {\n     if (cachedFlows[name] === undefined) {\n       let uriMatches = cts.uriMatch('/flows/' + name + '.flow.json', ['case-insensitive'], cts.directoryQuery(\"/flows/\"));\n       // cache flow to prevent repeated calls.\n+      let flowObject;\n       if (fn.count(uriMatches) === 1) {\n-        cachedFlows[name] = cts.doc(fn.head(uriMatches)).toObject();\n+        flowObject = cts.doc(fn.head(uriMatches)).toObject();\n       } else if (fn.count(uriMatches) > 1) {\n         for (let uri of uriMatches) {\n           if (uri === '/flows/' + name + '.flow.json') {\n-            cachedFlows[name] = cts.doc(uriMatches).toObject();\n+            flowObject  = cts.doc(uriMatches).toObject();\n             break;\n           }\n         }\n       } else {\n         cachedFlows[name] = null;\n+        return null;\n       }\n+      flowObject = this.addSettingsToFlow(name, flowObject);\n+      cachedFlows[name] = flowObject;\n     }\n     return cachedFlows[name];\n   }\n \n+  addSettingsToFlow(flowName, flowNode){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzMjc1Ng=="}, "originalCommit": {"oid": "fbda5fd10133f3b38da5603af334ac8abbaa599e"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcxNDA3OA==", "bodyText": "Added a new endpoint that gets fullFlow() to be used by FlowRunner", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r410714078", "createdAt": "2020-04-18T15:44:19Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/impl/flow.sjs", "diffHunk": "@@ -102,22 +103,53 @@ class Flow {\n     if (cachedFlows[name] === undefined) {\n       let uriMatches = cts.uriMatch('/flows/' + name + '.flow.json', ['case-insensitive'], cts.directoryQuery(\"/flows/\"));\n       // cache flow to prevent repeated calls.\n+      let flowObject;\n       if (fn.count(uriMatches) === 1) {\n-        cachedFlows[name] = cts.doc(fn.head(uriMatches)).toObject();\n+        flowObject = cts.doc(fn.head(uriMatches)).toObject();\n       } else if (fn.count(uriMatches) > 1) {\n         for (let uri of uriMatches) {\n           if (uri === '/flows/' + name + '.flow.json') {\n-            cachedFlows[name] = cts.doc(uriMatches).toObject();\n+            flowObject  = cts.doc(uriMatches).toObject();\n             break;\n           }\n         }\n       } else {\n         cachedFlows[name] = null;\n+        return null;\n       }\n+      flowObject = this.addSettingsToFlow(name, flowObject);\n+      cachedFlows[name] = flowObject;\n     }\n     return cachedFlows[name];\n   }\n \n+  addSettingsToFlow(flowName, flowNode){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzMjc1Ng=="}, "originalCommit": {"oid": "fbda5fd10133f3b38da5603af334ac8abbaa599e"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDU5MTY2OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNzoyNjoxNFrOGHsuWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNzo1NzozNlrOGHs8gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcyNTk3OA==", "bodyText": "You don't need this, the task is generated dynamically based on your service.json file. In fact, you can delete the two task definitions above it.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r410725978", "createdAt": "2020-04-18T17:26:14Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/build.gradle", "diffHunk": "@@ -200,6 +200,10 @@ task generateEntitySearchInterface(type: com.marklogic.client.tools.gradle.Endpo\n     serviceDeclarationFile = dataServicesPath + \"/entitySearch/service.json\"\n }\n \n+task generateFlowInterface(type: com.marklogic.client.tools.gradle.EndpointProxiesGenTask, group: dataServicesGroup) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "125c93b8b721de50d1d649918d25e61b23a7a2dc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcyOTYwMw==", "bodyText": "Removed all 3 tasks", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r410729603", "createdAt": "2020-04-18T17:57:36Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub/build.gradle", "diffHunk": "@@ -200,6 +200,10 @@ task generateEntitySearchInterface(type: com.marklogic.client.tools.gradle.Endpo\n     serviceDeclarationFile = dataServicesPath + \"/entitySearch/service.json\"\n }\n \n+task generateFlowInterface(type: com.marklogic.client.tools.gradle.EndpointProxiesGenTask, group: dataServicesGroup) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcyNTk3OA=="}, "originalCommit": {"oid": "125c93b8b721de50d1d649918d25e61b23a7a2dc"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDU5NTQyOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/artifacts/core.sjs", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNzozMDowNlrOGHswKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNzo1ODowNVrOGHs82Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcyNjQ0MQ==", "bodyText": "This looks good, but shouldn't this go into artifacts/flows.sjs since it's flow-specific?\nAlso @ryanjdew - do we really get any benefit from caching artifacts? That's only good for the duration of the transaction, right? I doubt we need any caching in this function.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r410726441", "createdAt": "2020-04-18T17:30:06Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/artifacts/core.sjs", "diffHunk": "@@ -341,6 +353,82 @@ function getEntityTitles() {\n     return cts.search(cts.collectionQuery(\"http://marklogic.com/entity-services/models\")).toArray().map(e => e.xpath(\"//info//title\"));\n }\n \n+function getFullFlow(flowName, artifactVersion = 'latest') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "125c93b8b721de50d1d649918d25e61b23a7a2dc"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcyNzkxMg==", "bodyText": "getFullFlow() has to fetch 'loadData', 'mapping', 'matching' artifacts and settings to build full flow. core.sjs provides a generic interface regardless of artifact type to access them(getArtifact, getArtifactSettings), otherwise if this is in flow.sjs, I will have to include each and every module('loadData'.sjs', 'mapping.sjs' etc) and have multiple 'if' conditions for each type of artifact. It seems better to add it here", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r410727912", "createdAt": "2020-04-18T17:42:36Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/artifacts/core.sjs", "diffHunk": "@@ -341,6 +353,82 @@ function getEntityTitles() {\n     return cts.search(cts.collectionQuery(\"http://marklogic.com/entity-services/models\")).toArray().map(e => e.xpath(\"//info//title\"));\n }\n \n+function getFullFlow(flowName, artifactVersion = 'latest') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcyNjQ0MQ=="}, "originalCommit": {"oid": "125c93b8b721de50d1d649918d25e61b23a7a2dc"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcyOTY4OQ==", "bodyText": "Removed caching for fullFlow()", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3813#discussion_r410729689", "createdAt": "2020-04-18T17:58:05Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/artifacts/core.sjs", "diffHunk": "@@ -341,6 +353,82 @@ function getEntityTitles() {\n     return cts.search(cts.collectionQuery(\"http://marklogic.com/entity-services/models\")).toArray().map(e => e.xpath(\"//info//title\"));\n }\n \n+function getFullFlow(flowName, artifactVersion = 'latest') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcyNjQ0MQ=="}, "originalCommit": {"oid": "125c93b8b721de50d1d649918d25e61b23a7a2dc"}, "originalPosition": 91}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3403, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}