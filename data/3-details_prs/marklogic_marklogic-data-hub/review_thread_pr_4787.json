{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyMDQxNTk5", "number": 4787, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMTo1Njo1M1rOEzQ6cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODo1OTo1MlrOEz7BRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTg5OTM4OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/config/tooltips.config.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMTo1Njo1M1rOHqYbWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMTo1Njo1M1rOHqYbWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIwMjQ1OQ==", "bodyText": "For these, let's do \"The name of the source of the files\" and \"The type of source of the files\"", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4787#discussion_r514202459", "createdAt": "2020-10-29T11:56:53Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/ui/src/config/tooltips.config.js", "diffHunk": "@@ -30,6 +30,8 @@ const NewLoadTooltips = {\n     'files' : 'Click *Upload* to select the source files. The total size of the files must be 100MB or less.',\n     'sourceFormat': 'The format of the source files to load.',\n     'targetFormat': 'The format of the processed record.',\n+    'sourceName': 'The source of the record.',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e702448a07593f68ada7fb42916ba424781f9049"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTkwMTcwOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/artifacts/loadData.sjs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMTo1NzozN1rOHqYc1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMTo1NzozN1rOHqYc1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIwMjgzNg==", "bodyText": "I don't think there's any reason to have an empty sources object here, is there? We should only create this if the user specifies either sourceName or sourceType.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4787#discussion_r514202836", "createdAt": "2020-10-29T11:57:37Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/artifacts/loadData.sjs", "diffHunk": "@@ -64,7 +64,12 @@ function defaultArtifact(artifactName) {\n   const defaultPermissions = 'data-hub-common,read,data-hub-common,update';\n   return {\n     headers: {\n-      sources: [{name: artifactName}],\n+      sources: [", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e702448a07593f68ada7fb42916ba424781f9049"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTkwNTEwOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/impl/flow-utils.sjs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMTo1ODozN1rOHqYe_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMTo1ODozN1rOHqYe_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIwMzM4OQ==", "bodyText": "You can do these 3 lines in one line - headers.sources = [headers.sources];", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4787#discussion_r514203389", "createdAt": "2020-10-29T11:58:37Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/impl/flow-utils.sjs", "diffHunk": "@@ -546,6 +546,22 @@ class FlowUtils {\n     if(options.file) {\n         headers[\"createdUsingFile\"] = options.file;\n     }\n+\n+    const sourceName = options.sourceName ? options.sourceName : \"\";\n+    const sourceType = options.sourceType ? options.sourceType : \"\";\n+\n+    if(headers[\"sources\"] && !Array.isArray(headers[\"sources\"])) {\n+      let tempSourcesArray = [];\n+      tempSourcesArray.push(headers[\"sources\"]);\n+      headers[\"sources\"] = tempSourcesArray;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e702448a07593f68ada7fb42916ba424781f9049"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTkxMjU0OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/impl/flow-utils.sjs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMjowMDo0NlrOHqYjfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMjowMDo0NlrOHqYjfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIwNDU0MQ==", "bodyText": "Let's only populate something if it's not null - this will result in \"datahubSourceType\": \"\" if it's not specified. So above, default sourceName and sourceType to null if they're not in options. And then only do any of this code if either sourceName or sourceType is not null. And only add them to the source object if they're not null.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4787#discussion_r514204541", "createdAt": "2020-10-29T12:00:46Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/impl/flow-utils.sjs", "diffHunk": "@@ -546,6 +546,22 @@ class FlowUtils {\n     if(options.file) {\n         headers[\"createdUsingFile\"] = options.file;\n     }\n+\n+    const sourceName = options.sourceName ? options.sourceName : \"\";\n+    const sourceType = options.sourceType ? options.sourceType : \"\";\n+\n+    if(headers[\"sources\"] && !Array.isArray(headers[\"sources\"])) {\n+      let tempSourcesArray = [];\n+      tempSourcesArray.push(headers[\"sources\"]);\n+      headers[\"sources\"] = tempSourcesArray;\n+    }\n+\n+    if(sourceName || sourceType) {\n+      if(!headers[\"sources\"] || headers[\"sources\"].length == 0) {\n+        headers[\"sources\"] = [];\n+      }\n+      headers[\"sources\"].push({\"name\": sourceName, \"datahubSourceType\": sourceType});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e702448a07593f68ada7fb42916ba424781f9049"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTkxNDI3OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/data-services/step/convertIngestionStep.sjs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMjowMToxNFrOHqYkfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMjowMToxNFrOHqYkfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIwNDc5Ng==", "bodyText": "This should instead assert that \"sources\" doesn't even exist.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4787#discussion_r514204796", "createdAt": "2020-10-29T12:01:14Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/data-services/step/convertIngestionStep.sjs", "diffHunk": "@@ -75,7 +75,7 @@ assertions.push(\n   test.assertEqual(\"\", flowStep.fileLocations.outputURIPrefix),\n   test.assertEqual(\",\", flowStep.fileLocations.separator),\n \n-  test.assertEqual(\"myIngester\", options.headers.sources[0].name),\n+  test.assertEqual(\"\", options.headers.sources[0].name),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e702448a07593f68ada7fb42916ba424781f9049"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzc5NjIyOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/artifacts/core.sjs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxOToxNDo0NlrOHqq42g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxOToxNDo0NlrOHqq42g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUwNDkyMg==", "bodyText": "I don't think this is needed. To find out,  there should be a JUnit test for this story that creates an ingestion step with sourceName and sourceType populated, and then the test runs the ingestion step to ensure that each ingested document (only need to ingest one, really) ends up with headers/source set correctly.\nTo make that test pass - I don't think you need anything here. Instead, you just need to confirm that when the createHeaders is called by the default ingestion step module, sourceName and sourceType are both present in the options object (which I think will happen by default, I don't think you'll need to do anything for that). And then createHeaders will do all the work.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4787#discussion_r514504922", "createdAt": "2020-10-29T19:14:46Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/artifacts/core.sjs", "diffHunk": "@@ -162,6 +162,13 @@ function setArtifact(artifactType, artifactName, artifact) {\n     } catch (e) {}\n     if (fn.empty(existingArtifact) && artifactLibrary.defaultArtifact) {\n         artifact = Object.assign({}, artifactLibrary.defaultArtifact(artifactName, artifact.targetEntityType), artifact);\n+        if(artifact.sourceName || artifact.sourceType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f08db80c81b8cb730bd0479e613dcb282cbfb6ae"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzY0ODc0OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/components/search-result/search-result.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNDoxNjo1M1rOHrRDjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNToyNDoxM1rOHrUA1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTEzMDI1NQ==", "bodyText": "Do we know of examples where sources is an object and not an array? Pinging @srinathgit  and @ryanjdew  - that would violate the schema, and hopefully that's not something we've created. I think it's fine to have this code as a sanity check in case sources is an object somehow, but I want to make sure that we're not making sources an object somehow.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4787#discussion_r515130255", "createdAt": "2020-10-30T14:16:53Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/ui/src/components/search-result/search-result.tsx", "diffHunk": "@@ -50,17 +50,12 @@ const SearchResult: React.FC<Props> = (props) => {\n     }\n \n     if ((props.item.format === 'json' || props.item.format === 'xml') && props.item.hasOwnProperty('sources')) {\n-        if (!props.item.sources.length) {\n-            // content data does not exist in payload\n-            setAlertMessage('Error', 'No instance information in payload');\n+        if (Array.isArray(props.item.sources)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfe367f2c1d27dc7200305fbbb6e7a45487359de"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3ODcxMA==", "bodyText": "Yes. In createHeaders, even if it is an object, it is converted to an array.\nIn entity-search-lib.sjs as well, sources array is returned. The check can be removed.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4787#discussion_r515178710", "createdAt": "2020-10-30T15:24:13Z", "author": {"login": "rahulvudutala"}, "path": "marklogic-data-hub-central/ui/src/components/search-result/search-result.tsx", "diffHunk": "@@ -50,17 +50,12 @@ const SearchResult: React.FC<Props> = (props) => {\n     }\n \n     if ((props.item.format === 'json' || props.item.format === 'xml') && props.item.hasOwnProperty('sources')) {\n-        if (!props.item.sources.length) {\n-            // content data does not exist in payload\n-            setAlertMessage('Error', 'No instance information in payload');\n+        if (Array.isArray(props.item.sources)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTEzMDI1NQ=="}, "originalCommit": {"oid": "bfe367f2c1d27dc7200305fbbb6e7a45487359de"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzY2OTkxOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/step/impl/IngestWithSourceNameAndSourceTypeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNDoyMjowNVrOHrRQ6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNDoyMjowNVrOHrRQ6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTEzMzY3NA==", "bodyText": "We still want to run the ingestion step here via FlowRunner. The reason that @srinathgit  uses WriteBatcher directly in RunDefaultIngestionTest is so that he can test the mlRunIngest transform in isolation, without running a step.\nBut for this test, we need to run a step. You can use the all-steps-referenced test project - it has some test data in it along with an ingestion step. See AllStepsReferencedTest as an example.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4787#discussion_r515133674", "createdAt": "2020-10-30T14:22:05Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/step/impl/IngestWithSourceNameAndSourceTypeTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.marklogic.hub.step.impl;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.marklogic.client.DatabaseClient;\n+import com.marklogic.client.datamovement.WriteBatcher;\n+import com.marklogic.client.document.ServerTransform;\n+import com.marklogic.client.io.DocumentMetadataHandle;\n+import com.marklogic.client.io.Format;\n+import com.marklogic.client.io.JacksonHandle;\n+import com.marklogic.client.io.StringHandle;\n+import com.marklogic.hub.AbstractHubCoreTest;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class IngestWithSourceNameAndSourceTypeTest extends AbstractHubCoreTest {\n+\n+    @Test\n+    void runDefaultIngestionWithSourceNameAndSourceType(){\n+        ServerTransform serverTransform = new ServerTransform(\"mlRunIngest\");\n+        Map<String, Object> options = new HashMap<>();\n+        options.put(\"sourceName\", \"user-defined-source-name\");\n+        options.put(\"sourceType\", \"user-defined-source-type\");\n+        String optionString = jsonToString(options);\n+        serverTransform.addParameter(\"options\", optionString);\n+\n+        DatabaseClient stagingClient = getHubClient().getStagingClient();\n+        WriteBatcher writeBatcher = stagingClient.newDataMovementManager().newWriteBatcher()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfe367f2c1d27dc7200305fbbb6e7a45487359de"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODc5NTQ4OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/step/impl/IngestWithSourceNameAndSourceTypeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODo1OTowMVrOHrcU7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOTo0MToyNFrOHrdnzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMxNDkyNg==", "bodyText": "Use runFlow(FlowInputs) instead - that will call makeInputFilePathsAbsoluteInFlow for you, which means you don't need to call inputs.setInputFilePath above either.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4787#discussion_r515314926", "createdAt": "2020-10-30T18:59:01Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/step/impl/IngestWithSourceNameAndSourceTypeTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.marklogic.hub.step.impl;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.io.JacksonHandle;\n+import com.marklogic.hub.AbstractHubCoreTest;\n+import com.marklogic.hub.dataservices.FlowService;\n+import com.marklogic.hub.dataservices.StepService;\n+import com.marklogic.hub.flow.FlowInputs;\n+import com.marklogic.hub.flow.FlowRunner;\n+import com.marklogic.hub.flow.RunFlowResponse;\n+import com.marklogic.hub.flow.impl.FlowRunnerImpl;\n+import com.marklogic.hub.job.JobStatus;\n+import com.marklogic.hub.test.ReferenceModelProject;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class IngestWithSourceNameAndSourceTypeTest extends AbstractHubCoreTest {\n+\n+    ReferenceModelProject project;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        project = installReferenceModelProject();\n+    }\n+\n+    @Test\n+    void runDefaultIngestionWithSourceNameAndSourceType(){\n+        String path = \"entity-reference-model/data/customers\";\n+        ObjectNode info = new ObjectMapper().createObjectNode();\n+        info.put(\"name\", \"sources-test\");\n+        info.put(\"description\", \"step to test source name and source type\");\n+        info.put(\"sourceFormat\", \"json\");\n+        info.put(\"targetFormat\", \"json\");\n+        info.put(\"sourceName\", \"sample-source\");\n+        info.put(\"sourceType\", \"employee\");\n+        info.put(\"outputURIPrefix\", \"\");\n+\n+        StepService.on(getHubClient().getStagingClient()).saveStep(\"ingestion\", info, false);\n+\n+        // Add it to the existing echoFlow, which is assumed to have one step\n+        FlowService.on(getHubClient().getStagingClient()).addStepToFlow(\"echoFlow\", \"sources-test\", \"ingestion\");\n+\n+        // And run the flow\n+        FlowInputs inputs = new FlowInputs(\"echoFlow\", \"2\");\n+        inputs.setInputFilePath(getClass().getClassLoader().getResource(path).getPath());\n+\n+        FlowRunner flowRunner = new FlowRunnerImpl(getHubClient());\n+        RunFlowResponse response = flowRunner.runFlow(inputs);\n+        flowRunner.awaitCompletion();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c9f170aac408e5ed0135d583ba1c7778d1cd2b2"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMzNjE0Mg==", "bodyText": "makeInputFilePathsAbsoluteInFlow in runFlow method is reading the flow from the project directory. In the test, a new step is added which is saved in the database but not on the directory. So the step that the test is trying to add is overridden to what is in the project by makeInputFilePathsAbsoluteInFlow.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4787#discussion_r515336142", "createdAt": "2020-10-30T19:41:24Z", "author": {"login": "rahulvudutala"}, "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/step/impl/IngestWithSourceNameAndSourceTypeTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.marklogic.hub.step.impl;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.io.JacksonHandle;\n+import com.marklogic.hub.AbstractHubCoreTest;\n+import com.marklogic.hub.dataservices.FlowService;\n+import com.marklogic.hub.dataservices.StepService;\n+import com.marklogic.hub.flow.FlowInputs;\n+import com.marklogic.hub.flow.FlowRunner;\n+import com.marklogic.hub.flow.RunFlowResponse;\n+import com.marklogic.hub.flow.impl.FlowRunnerImpl;\n+import com.marklogic.hub.job.JobStatus;\n+import com.marklogic.hub.test.ReferenceModelProject;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class IngestWithSourceNameAndSourceTypeTest extends AbstractHubCoreTest {\n+\n+    ReferenceModelProject project;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        project = installReferenceModelProject();\n+    }\n+\n+    @Test\n+    void runDefaultIngestionWithSourceNameAndSourceType(){\n+        String path = \"entity-reference-model/data/customers\";\n+        ObjectNode info = new ObjectMapper().createObjectNode();\n+        info.put(\"name\", \"sources-test\");\n+        info.put(\"description\", \"step to test source name and source type\");\n+        info.put(\"sourceFormat\", \"json\");\n+        info.put(\"targetFormat\", \"json\");\n+        info.put(\"sourceName\", \"sample-source\");\n+        info.put(\"sourceType\", \"employee\");\n+        info.put(\"outputURIPrefix\", \"\");\n+\n+        StepService.on(getHubClient().getStagingClient()).saveStep(\"ingestion\", info, false);\n+\n+        // Add it to the existing echoFlow, which is assumed to have one step\n+        FlowService.on(getHubClient().getStagingClient()).addStepToFlow(\"echoFlow\", \"sources-test\", \"ingestion\");\n+\n+        // And run the flow\n+        FlowInputs inputs = new FlowInputs(\"echoFlow\", \"2\");\n+        inputs.setInputFilePath(getClass().getClassLoader().getResource(path).getPath());\n+\n+        FlowRunner flowRunner = new FlowRunnerImpl(getHubClient());\n+        RunFlowResponse response = flowRunner.runFlow(inputs);\n+        flowRunner.awaitCompletion();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMxNDkyNg=="}, "originalCommit": {"oid": "8c9f170aac408e5ed0135d583ba1c7778d1cd2b2"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODc5ODEzOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/step/impl/IngestWithSourceNameAndSourceTypeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODo1OTo1MlrOHrcWgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODo1OTo1MlrOHrcWgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMxNTMzMQ==", "bodyText": "Can use getStagingDoc instead - less lines of code is almost always good in a test, as it makes it easier to read and understand.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4787#discussion_r515315331", "createdAt": "2020-10-30T18:59:52Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/step/impl/IngestWithSourceNameAndSourceTypeTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.marklogic.hub.step.impl;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.io.JacksonHandle;\n+import com.marklogic.hub.AbstractHubCoreTest;\n+import com.marklogic.hub.dataservices.FlowService;\n+import com.marklogic.hub.dataservices.StepService;\n+import com.marklogic.hub.flow.FlowInputs;\n+import com.marklogic.hub.flow.FlowRunner;\n+import com.marklogic.hub.flow.RunFlowResponse;\n+import com.marklogic.hub.flow.impl.FlowRunnerImpl;\n+import com.marklogic.hub.job.JobStatus;\n+import com.marklogic.hub.test.ReferenceModelProject;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class IngestWithSourceNameAndSourceTypeTest extends AbstractHubCoreTest {\n+\n+    ReferenceModelProject project;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        project = installReferenceModelProject();\n+    }\n+\n+    @Test\n+    void runDefaultIngestionWithSourceNameAndSourceType(){\n+        String path = \"entity-reference-model/data/customers\";\n+        ObjectNode info = new ObjectMapper().createObjectNode();\n+        info.put(\"name\", \"sources-test\");\n+        info.put(\"description\", \"step to test source name and source type\");\n+        info.put(\"sourceFormat\", \"json\");\n+        info.put(\"targetFormat\", \"json\");\n+        info.put(\"sourceName\", \"sample-source\");\n+        info.put(\"sourceType\", \"employee\");\n+        info.put(\"outputURIPrefix\", \"\");\n+\n+        StepService.on(getHubClient().getStagingClient()).saveStep(\"ingestion\", info, false);\n+\n+        // Add it to the existing echoFlow, which is assumed to have one step\n+        FlowService.on(getHubClient().getStagingClient()).addStepToFlow(\"echoFlow\", \"sources-test\", \"ingestion\");\n+\n+        // And run the flow\n+        FlowInputs inputs = new FlowInputs(\"echoFlow\", \"2\");\n+        inputs.setInputFilePath(getClass().getClassLoader().getResource(path).getPath());\n+\n+        FlowRunner flowRunner = new FlowRunnerImpl(getHubClient());\n+        RunFlowResponse response = flowRunner.runFlow(inputs);\n+        flowRunner.awaitCompletion();\n+        assertEquals(JobStatus.FINISHED.toString(), response.getJobStatus());\n+        JsonNode sourceDoc = getHubClient().getStagingClient().newJSONDocumentManager().read(\"customer1.json\").next().getContent(new JacksonHandle()).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c9f170aac408e5ed0135d583ba1c7778d1cd2b2"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3197, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}