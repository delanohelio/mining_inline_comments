{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0MDU3NDcy", "number": 4955, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNTo0ODowOVrOFCbLcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOTowODozNlrOFFwngw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MDg2NzY4OnYy", "diffSide": "RIGHT", "path": "Jenkinsfile", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNTo0ODowOVrOIBkuBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNTo0ODowOVrOIBkuBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUyMTA5Mg==", "bodyText": "Add these to Jenkins credentials and use Jenkins credentials plugin to extract these", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4955#discussion_r538521092", "createdAt": "2020-12-08T15:48:09Z", "author": {"login": "SameeraPriyathamTadikonda"}, "path": "Jenkinsfile", "diffHunk": "@@ -636,7 +636,70 @@ pipeline{\n                   }\n                   }\n \t\t}\n-            stage('publishAnddhs'){\n+        stage('FlexCodeScan'){\n+            when {\n+                expression{\n+                    node('dhmaster'){\n+                        props = readProperties file:'data-hub/pipeline.properties';\n+                        println(props['ExecutionBranch'])\n+                        return (env.BRANCH_NAME==props['ExecutionBranch'])\n+                    }\n+                }\n+            }\n+            agent {label 'dhfLinuxAgent'}\n+            steps{\n+                script {\n+\n+                    def palamida_url=\"http://palamida-2.marklogic.com:8888\"\n+                    def jwt=\"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJwYWxhbWlkYSIsInVzZXJJZCI6MywiaWF0IjoxNjA1NTYxMTc5fQ.5NaV_E4FHSe6vJMTX1siZa6f0U-uKm3ssZIfmsPEPzmdkDvtnNxsXRxI1Mj4mHq0i9cBNEHW_ePYKdFh97Sd9Q\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d679476d02cb31fa1f00187ba9d3e819790424fe"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODI2MTY4OnYy", "diffSide": "RIGHT", "path": "Jenkinsfile", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzoxNToxNlrOIECKIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMjo1MjoyOFrOIETamw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEwMDU3Ng==", "bodyText": "you don't need to send the email twice. An email will be sent in the post stage. If required include Kavitha to the recipient list.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4955#discussion_r541100576", "createdAt": "2020-12-11T17:15:16Z", "author": {"login": "SameeraPriyathamTadikonda"}, "path": "Jenkinsfile", "diffHunk": "@@ -229,6 +229,161 @@ def runCypressE2e(){\n         junit '**/e2e/**/*.xml'\n     }\n }\n+\n+void postFailureFiexcodeScanAndReport(){\n+    def email=''\n+    if(env.CHANGE_AUTHOR){\n+        def author=env.CHANGE_AUTHOR.toString().trim().toLowerCase()\n+        email=getEmailFromGITUser author\n+    }\n+    else {\n+       email=Email\n+    }\n+    sendMail email,\"<h3>Pipeline FAILED in stage ${STAGE_NAME} <a href=${BUILD_URL}/console> Check Console Output Here</a></h4>\",false,\" pipeline Failed in ${STAGE_NAME} \"\n+}\n+\n+void fiexcodeScanAndReport(){\n+    def palamida_url=\"http://palamida-2.marklogic.com:8888\"\n+    def inventoriesRprt=''\n+\n+    withCredentials([string(credentialsId: 'palamida_jwt', variable: 'jwt')]) {\n+\n+        StartScan(baseUrl: palamida_url, projectName: 'ml-dhf', token: jwt)\n+\n+        inventoriesRprt = sh(returnStdout: true, script: '''curl -X GET ''' + palamida_url + '''/codeinsight/api/project/inventory/21 -H \"Authorization: Bearer $jwt\" ''')\n+    }\n+\n+    writeFile(file: 'inventoriesRprt.report.json', text: inventoriesRprt)\n+\n+    def slurper = new JsonSlurperClassic().parseText(inventoriesRprt.toString().trim())\n+\n+    def failures = []\n+    slurper.inventoryItems.each { key, value ->\n+        key.vulnerabilities.each { key1, value1 ->\n+            if(key1.vulnerabilityCvssV3Severity == 'CRITICAL' || key1.vulnerabilityCvssV3Severity == 'HIGH'){\n+                def msg = \" inventory name: $key.name  volnarability name: $key1.vulnerabilityName with Severity V2: $key1.vulnerabilityCvssV2Severity with Severity V3: $key1.vulnerabilityCvssV3Severity \"\n+                failures.add(msg)\n+\n+            }\n+        }}\n+\n+    archiveArtifacts artifacts: 'inventoriesRprt.report.json'\n+\n+    //Send email\n+    if(failures.size()!=0){\n+        def body=''\n+        failures.each { msg -> body=body+msg + '\\n' }\n+        sendMail 'Kavitha.Sivagnanam@marklogic.com,yakov.feldman@marklogic.com', body,false,'Flexcode FAILED. HIGH vulnerabilities','inventoriesRprt.report.json'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a41ec74491732a638816c0e87d61328613abc8b"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzMTE3MQ==", "bodyText": "Then email in post would need to include attached report and P1 vulnerabilities info in the body of the email. Is it OK?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4955#discussion_r541131171", "createdAt": "2020-12-11T18:06:19Z", "author": {"login": "yafeldman"}, "path": "Jenkinsfile", "diffHunk": "@@ -229,6 +229,161 @@ def runCypressE2e(){\n         junit '**/e2e/**/*.xml'\n     }\n }\n+\n+void postFailureFiexcodeScanAndReport(){\n+    def email=''\n+    if(env.CHANGE_AUTHOR){\n+        def author=env.CHANGE_AUTHOR.toString().trim().toLowerCase()\n+        email=getEmailFromGITUser author\n+    }\n+    else {\n+       email=Email\n+    }\n+    sendMail email,\"<h3>Pipeline FAILED in stage ${STAGE_NAME} <a href=${BUILD_URL}/console> Check Console Output Here</a></h4>\",false,\" pipeline Failed in ${STAGE_NAME} \"\n+}\n+\n+void fiexcodeScanAndReport(){\n+    def palamida_url=\"http://palamida-2.marklogic.com:8888\"\n+    def inventoriesRprt=''\n+\n+    withCredentials([string(credentialsId: 'palamida_jwt', variable: 'jwt')]) {\n+\n+        StartScan(baseUrl: palamida_url, projectName: 'ml-dhf', token: jwt)\n+\n+        inventoriesRprt = sh(returnStdout: true, script: '''curl -X GET ''' + palamida_url + '''/codeinsight/api/project/inventory/21 -H \"Authorization: Bearer $jwt\" ''')\n+    }\n+\n+    writeFile(file: 'inventoriesRprt.report.json', text: inventoriesRprt)\n+\n+    def slurper = new JsonSlurperClassic().parseText(inventoriesRprt.toString().trim())\n+\n+    def failures = []\n+    slurper.inventoryItems.each { key, value ->\n+        key.vulnerabilities.each { key1, value1 ->\n+            if(key1.vulnerabilityCvssV3Severity == 'CRITICAL' || key1.vulnerabilityCvssV3Severity == 'HIGH'){\n+                def msg = \" inventory name: $key.name  volnarability name: $key1.vulnerabilityName with Severity V2: $key1.vulnerabilityCvssV2Severity with Severity V3: $key1.vulnerabilityCvssV3Severity \"\n+                failures.add(msg)\n+\n+            }\n+        }}\n+\n+    archiveArtifacts artifacts: 'inventoriesRprt.report.json'\n+\n+    //Send email\n+    if(failures.size()!=0){\n+        def body=''\n+        failures.each { msg -> body=body+msg + '\\n' }\n+        sendMail 'Kavitha.Sivagnanam@marklogic.com,yakov.feldman@marklogic.com', body,false,'Flexcode FAILED. HIGH vulnerabilities','inventoriesRprt.report.json'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEwMDU3Ng=="}, "originalCommit": {"oid": "5a41ec74491732a638816c0e87d61328613abc8b"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM4MzMyMw==", "bodyText": "yes", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4955#discussion_r541383323", "createdAt": "2020-12-11T22:52:28Z", "author": {"login": "SameeraPriyathamTadikonda"}, "path": "Jenkinsfile", "diffHunk": "@@ -229,6 +229,161 @@ def runCypressE2e(){\n         junit '**/e2e/**/*.xml'\n     }\n }\n+\n+void postFailureFiexcodeScanAndReport(){\n+    def email=''\n+    if(env.CHANGE_AUTHOR){\n+        def author=env.CHANGE_AUTHOR.toString().trim().toLowerCase()\n+        email=getEmailFromGITUser author\n+    }\n+    else {\n+       email=Email\n+    }\n+    sendMail email,\"<h3>Pipeline FAILED in stage ${STAGE_NAME} <a href=${BUILD_URL}/console> Check Console Output Here</a></h4>\",false,\" pipeline Failed in ${STAGE_NAME} \"\n+}\n+\n+void fiexcodeScanAndReport(){\n+    def palamida_url=\"http://palamida-2.marklogic.com:8888\"\n+    def inventoriesRprt=''\n+\n+    withCredentials([string(credentialsId: 'palamida_jwt', variable: 'jwt')]) {\n+\n+        StartScan(baseUrl: palamida_url, projectName: 'ml-dhf', token: jwt)\n+\n+        inventoriesRprt = sh(returnStdout: true, script: '''curl -X GET ''' + palamida_url + '''/codeinsight/api/project/inventory/21 -H \"Authorization: Bearer $jwt\" ''')\n+    }\n+\n+    writeFile(file: 'inventoriesRprt.report.json', text: inventoriesRprt)\n+\n+    def slurper = new JsonSlurperClassic().parseText(inventoriesRprt.toString().trim())\n+\n+    def failures = []\n+    slurper.inventoryItems.each { key, value ->\n+        key.vulnerabilities.each { key1, value1 ->\n+            if(key1.vulnerabilityCvssV3Severity == 'CRITICAL' || key1.vulnerabilityCvssV3Severity == 'HIGH'){\n+                def msg = \" inventory name: $key.name  volnarability name: $key1.vulnerabilityName with Severity V2: $key1.vulnerabilityCvssV2Severity with Severity V3: $key1.vulnerabilityCvssV3Severity \"\n+                failures.add(msg)\n+\n+            }\n+        }}\n+\n+    archiveArtifacts artifacts: 'inventoriesRprt.report.json'\n+\n+    //Send email\n+    if(failures.size()!=0){\n+        def body=''\n+        failures.each { msg -> body=body+msg + '\\n' }\n+        sendMail 'Kavitha.Sivagnanam@marklogic.com,yakov.feldman@marklogic.com', body,false,'Flexcode FAILED. HIGH vulnerabilities','inventoriesRprt.report.json'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEwMDU3Ng=="}, "originalCommit": {"oid": "5a41ec74491732a638816c0e87d61328613abc8b"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODI2NDM1OnYy", "diffSide": "RIGHT", "path": "Jenkinsfile", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzoxNTo1OVrOIECLsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzoxNTo1OVrOIECLsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEwMDk3Ng==", "bodyText": "Add an OR check for DEVO project too.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4955#discussion_r541100976", "createdAt": "2020-12-11T17:15:59Z", "author": {"login": "SameeraPriyathamTadikonda"}, "path": "Jenkinsfile", "diffHunk": "@@ -229,6 +229,161 @@ def runCypressE2e(){\n         junit '**/e2e/**/*.xml'\n     }\n }\n+\n+void postFailureFiexcodeScanAndReport(){\n+    def email=''\n+    if(env.CHANGE_AUTHOR){\n+        def author=env.CHANGE_AUTHOR.toString().trim().toLowerCase()\n+        email=getEmailFromGITUser author\n+    }\n+    else {\n+       email=Email\n+    }\n+    sendMail email,\"<h3>Pipeline FAILED in stage ${STAGE_NAME} <a href=${BUILD_URL}/console> Check Console Output Here</a></h4>\",false,\" pipeline Failed in ${STAGE_NAME} \"\n+}\n+\n+void fiexcodeScanAndReport(){\n+    def palamida_url=\"http://palamida-2.marklogic.com:8888\"\n+    def inventoriesRprt=''\n+\n+    withCredentials([string(credentialsId: 'palamida_jwt', variable: 'jwt')]) {\n+\n+        StartScan(baseUrl: palamida_url, projectName: 'ml-dhf', token: jwt)\n+\n+        inventoriesRprt = sh(returnStdout: true, script: '''curl -X GET ''' + palamida_url + '''/codeinsight/api/project/inventory/21 -H \"Authorization: Bearer $jwt\" ''')\n+    }\n+\n+    writeFile(file: 'inventoriesRprt.report.json', text: inventoriesRprt)\n+\n+    def slurper = new JsonSlurperClassic().parseText(inventoriesRprt.toString().trim())\n+\n+    def failures = []\n+    slurper.inventoryItems.each { key, value ->\n+        key.vulnerabilities.each { key1, value1 ->\n+            if(key1.vulnerabilityCvssV3Severity == 'CRITICAL' || key1.vulnerabilityCvssV3Severity == 'HIGH'){\n+                def msg = \" inventory name: $key.name  volnarability name: $key1.vulnerabilityName with Severity V2: $key1.vulnerabilityCvssV2Severity with Severity V3: $key1.vulnerabilityCvssV3Severity \"\n+                failures.add(msg)\n+\n+            }\n+        }}\n+\n+    archiveArtifacts artifacts: 'inventoriesRprt.report.json'\n+\n+    //Send email\n+    if(failures.size()!=0){\n+        def body=''\n+        failures.each { msg -> body=body+msg + '\\n' }\n+        sendMail 'Kavitha.Sivagnanam@marklogic.com,yakov.feldman@marklogic.com', body,false,'Flexcode FAILED. HIGH vulnerabilities','inventoriesRprt.report.json'\n+        sh 'exit 1'\n+    }\n+}\n+\n+void UnitTest(){\n+    script{\n+        props = readProperties file:'data-hub/pipeline.properties';\n+        copyRPM 'Release','10.0-5'\n+        setUpML '$WORKSPACE/xdmp/src/Mark*.rpm'\n+        sh 'export JAVA_HOME=`eval echo \"$JAVA_HOME_DIR\"`;export GRADLE_USER_HOME=$WORKSPACE$GRADLE_DIR;export M2_HOME=$MAVEN_HOME/bin;export PATH=$JAVA_HOME/bin:$GRADLE_USER_HOME:$PATH:$MAVEN_HOME/bin;cd $WORKSPACE/data-hub;rm -rf $GRADLE_USER_HOME/caches;set +e;./gradlew clean;./gradlew marklogic-data-hub:bootstrap -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/;sleep 10s;./gradlew marklogic-data-hub-central:test -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/ |& tee console.log;sleep 10s;./gradlew ml-data-hub:test -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/;./gradlew web:test -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/;sleep 10s;./gradlew marklogic-data-hub-spark-connector:test -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/;'\n+        junit '**/TEST-*.xml'\n+        cobertura coberturaReportFile: '**/cobertura-coverage.xml'\n+        jacoco()\n+        def output=readFile 'data-hub/console.log'\n+        def result=false;\n+        if(output.contains(\"npm ERR!\")){\n+            result=true;\n+        }\n+        if(result){\n+            currentBuild.result='UNSTABLE'\n+        }\n+        if(env.CHANGE_TITLE){\n+            JIRA_ID=env.CHANGE_TITLE.split(':')[0]\n+            jiraAddComment comment: 'Jenkins Unit Test Results For PR Available', idOrKey: JIRA_ID, site: 'JIRA'\n+        }\n+        if(!env.CHANGE_URL){\n+            env.CHANGE_URL=\" \"\n+        }\n+    }\n+}\n+\n+void PreBuildCheck() {\n+    script{\n+        if(env.CHANGE_ID){\n+            if(PRDraftCheck()){\n+                sh 'exit 1'\n+            }\n+            def reviewState=getReviewState()\n+            if((!env.CHANGE_TITLE.startsWith(\"DHFPROD-\"))){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a41ec74491732a638816c0e87d61328613abc8b"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODI3MTg2OnYy", "diffSide": "RIGHT", "path": "Jenkinsfile", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzoxNzo0M1rOIECP3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzoxNzo0M1rOIECP3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEwMjA0NQ==", "bodyText": "These stages FlexCodeScan and PUblishAnddhs should run in parallel.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4955#discussion_r541102045", "createdAt": "2020-12-11T17:17:43Z", "author": {"login": "SameeraPriyathamTadikonda"}, "path": "Jenkinsfile", "diffHunk": "@@ -636,7 +719,22 @@ pipeline{\n                   }\n                   }\n \t\t}\n-            stage('publishAnddhs'){\n+        stage('FlexCodeScan'){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a41ec74491732a638816c0e87d61328613abc8b"}, "originalPosition": 275}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTA0Njg5OnYy", "diffSide": "RIGHT", "path": "Jenkinsfile", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzo1NToyNFrOIFc6YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODo0Nzo1M1rOIFf2aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU4NzQ4OA==", "bodyText": "Should be || instead of &&", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4955#discussion_r542587488", "createdAt": "2020-12-14T17:55:24Z", "author": {"login": "SameeraPriyathamTadikonda"}, "path": "Jenkinsfile", "diffHunk": "@@ -229,6 +230,152 @@ def runCypressE2e(){\n         junit '**/e2e/**/*.xml'\n     }\n }\n+\n+void postFailureFiexcodeScanAndReport(def vulnerabilities){\n+    def email=''\n+    if(env.CHANGE_AUTHOR){\n+        def author=env.CHANGE_AUTHOR.toString().trim().toLowerCase()\n+        email=getEmailFromGITUser author\n+    }\n+    else { email=Email }\n+\n+    def body=''\n+    vulnerabilities.each { msg -> body=body+msg + '<p>' }\n+    body = body + '<p>scan report is attached.'\n+\n+    sendMail email,\"<h3>Pipeline FAILED in stage ${STAGE_NAME} <a href=${BUILD_URL}/console> Check Console Output Here</a></h4>  High vulneribilities: <p> $body\",false,\" pipeline FAILED in ${STAGE_NAME} \", 'inventoriesRprt.report.json'\n+}\n+\n+def fiexcodeScanAndReport(){\n+\n+    def palamida_url=\"http://palamida-2.marklogic.com:8888\"\n+    def inventoriesRprt=''\n+\n+    withCredentials([string(credentialsId: 'palamida_jwt', variable: 'jwt')]) {\n+\n+        StartScan(baseUrl: palamida_url, projectName: 'ml-dhf', token: jwt)\n+\n+        inventoriesRprt = sh(returnStdout: true, script: '''curl -X GET ''' + palamida_url + '''/codeinsight/api/project/inventory/21 -H \"Authorization: Bearer $jwt\" ''')\n+    }\n+\n+    writeFile(file: 'inventoriesRprt.report.json', text: inventoriesRprt)\n+\n+    def slurper = new JsonSlurperClassic().parseText(inventoriesRprt.toString().trim())\n+\n+    def vulnerabilities = []\n+    slurper.inventoryItems.each { key, value ->\n+        key.vulnerabilities.each { key1, value1 ->\n+            if(key1.vulnerabilityCvssV3Severity == 'CRITICAL' || key1.vulnerabilityCvssV3Severity == 'HIGH'){\n+                def msg = \"    inventory name: $key.name; volnarability name: $key1.vulnerabilityName; with Severity V2: $key1.vulnerabilityCvssV2Severity; with Severity V3: $key1.vulnerabilityCvssV3Severity; \"\n+                vulnerabilities.add(msg)\n+            }\n+        }}\n+\n+    archiveArtifacts artifacts: 'inventoriesRprt.report.json'\n+\n+    return vulnerabilities\n+\n+}\n+\n+void UnitTest(){\n+    script{\n+        props = readProperties file:'data-hub/pipeline.properties';\n+        copyRPM 'Release','10.0-5'\n+        setUpML '$WORKSPACE/xdmp/src/Mark*.rpm'\n+        sh 'export JAVA_HOME=`eval echo \"$JAVA_HOME_DIR\"`;export GRADLE_USER_HOME=$WORKSPACE$GRADLE_DIR;export M2_HOME=$MAVEN_HOME/bin;export PATH=$JAVA_HOME/bin:$GRADLE_USER_HOME:$PATH:$MAVEN_HOME/bin;cd $WORKSPACE/data-hub;rm -rf $GRADLE_USER_HOME/caches;set +e;./gradlew clean;./gradlew marklogic-data-hub:bootstrap -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/;sleep 10s;./gradlew marklogic-data-hub-central:test -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/ |& tee console.log;sleep 10s;./gradlew ml-data-hub:test -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/;./gradlew web:test -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/;sleep 10s;./gradlew marklogic-data-hub-spark-connector:test -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/;'\n+        junit '**/TEST-*.xml'\n+        cobertura coberturaReportFile: '**/cobertura-coverage.xml'\n+        jacoco()\n+        def output=readFile 'data-hub/console.log'\n+        def result=false;\n+        if(output.contains(\"npm ERR!\")){\n+            result=true;\n+        }\n+        if(result){\n+            currentBuild.result='UNSTABLE'\n+        }\n+        if(env.CHANGE_TITLE){\n+            JIRA_ID=env.CHANGE_TITLE.split(':')[0]\n+            jiraAddComment comment: 'Jenkins Unit Test Results For PR Available', idOrKey: JIRA_ID, site: 'JIRA'\n+        }\n+        if(!env.CHANGE_URL){\n+            env.CHANGE_URL=\" \"\n+        }\n+    }\n+}\n+\n+void PreBuildCheck() {\n+ if(env.CHANGE_ID){\n+   if(PRDraftCheck()){ sh 'exit 1' }\n+   def reviewState=getReviewState()\n+   if((!env.CHANGE_TITLE.startsWith(\"DHFPROD-\")) && (!env.CHANGE_TITLE.startsWith(\"DEVO-\"))){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dab3ae4d7e2ef69f6beb3e92d344ca8cd00f39ce"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYzNTYyNA==", "bodyText": "I believe it has to be && since it negative condition:\n**!**env.CHANGE_TITLE.startsWith(\"DHFPROD-\")", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4955#discussion_r542635624", "createdAt": "2020-12-14T18:47:53Z", "author": {"login": "yafeldman"}, "path": "Jenkinsfile", "diffHunk": "@@ -229,6 +230,152 @@ def runCypressE2e(){\n         junit '**/e2e/**/*.xml'\n     }\n }\n+\n+void postFailureFiexcodeScanAndReport(def vulnerabilities){\n+    def email=''\n+    if(env.CHANGE_AUTHOR){\n+        def author=env.CHANGE_AUTHOR.toString().trim().toLowerCase()\n+        email=getEmailFromGITUser author\n+    }\n+    else { email=Email }\n+\n+    def body=''\n+    vulnerabilities.each { msg -> body=body+msg + '<p>' }\n+    body = body + '<p>scan report is attached.'\n+\n+    sendMail email,\"<h3>Pipeline FAILED in stage ${STAGE_NAME} <a href=${BUILD_URL}/console> Check Console Output Here</a></h4>  High vulneribilities: <p> $body\",false,\" pipeline FAILED in ${STAGE_NAME} \", 'inventoriesRprt.report.json'\n+}\n+\n+def fiexcodeScanAndReport(){\n+\n+    def palamida_url=\"http://palamida-2.marklogic.com:8888\"\n+    def inventoriesRprt=''\n+\n+    withCredentials([string(credentialsId: 'palamida_jwt', variable: 'jwt')]) {\n+\n+        StartScan(baseUrl: palamida_url, projectName: 'ml-dhf', token: jwt)\n+\n+        inventoriesRprt = sh(returnStdout: true, script: '''curl -X GET ''' + palamida_url + '''/codeinsight/api/project/inventory/21 -H \"Authorization: Bearer $jwt\" ''')\n+    }\n+\n+    writeFile(file: 'inventoriesRprt.report.json', text: inventoriesRprt)\n+\n+    def slurper = new JsonSlurperClassic().parseText(inventoriesRprt.toString().trim())\n+\n+    def vulnerabilities = []\n+    slurper.inventoryItems.each { key, value ->\n+        key.vulnerabilities.each { key1, value1 ->\n+            if(key1.vulnerabilityCvssV3Severity == 'CRITICAL' || key1.vulnerabilityCvssV3Severity == 'HIGH'){\n+                def msg = \"    inventory name: $key.name; volnarability name: $key1.vulnerabilityName; with Severity V2: $key1.vulnerabilityCvssV2Severity; with Severity V3: $key1.vulnerabilityCvssV3Severity; \"\n+                vulnerabilities.add(msg)\n+            }\n+        }}\n+\n+    archiveArtifacts artifacts: 'inventoriesRprt.report.json'\n+\n+    return vulnerabilities\n+\n+}\n+\n+void UnitTest(){\n+    script{\n+        props = readProperties file:'data-hub/pipeline.properties';\n+        copyRPM 'Release','10.0-5'\n+        setUpML '$WORKSPACE/xdmp/src/Mark*.rpm'\n+        sh 'export JAVA_HOME=`eval echo \"$JAVA_HOME_DIR\"`;export GRADLE_USER_HOME=$WORKSPACE$GRADLE_DIR;export M2_HOME=$MAVEN_HOME/bin;export PATH=$JAVA_HOME/bin:$GRADLE_USER_HOME:$PATH:$MAVEN_HOME/bin;cd $WORKSPACE/data-hub;rm -rf $GRADLE_USER_HOME/caches;set +e;./gradlew clean;./gradlew marklogic-data-hub:bootstrap -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/;sleep 10s;./gradlew marklogic-data-hub-central:test -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/ |& tee console.log;sleep 10s;./gradlew ml-data-hub:test -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/;./gradlew web:test -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/;sleep 10s;./gradlew marklogic-data-hub-spark-connector:test -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/;'\n+        junit '**/TEST-*.xml'\n+        cobertura coberturaReportFile: '**/cobertura-coverage.xml'\n+        jacoco()\n+        def output=readFile 'data-hub/console.log'\n+        def result=false;\n+        if(output.contains(\"npm ERR!\")){\n+            result=true;\n+        }\n+        if(result){\n+            currentBuild.result='UNSTABLE'\n+        }\n+        if(env.CHANGE_TITLE){\n+            JIRA_ID=env.CHANGE_TITLE.split(':')[0]\n+            jiraAddComment comment: 'Jenkins Unit Test Results For PR Available', idOrKey: JIRA_ID, site: 'JIRA'\n+        }\n+        if(!env.CHANGE_URL){\n+            env.CHANGE_URL=\" \"\n+        }\n+    }\n+}\n+\n+void PreBuildCheck() {\n+ if(env.CHANGE_ID){\n+   if(PRDraftCheck()){ sh 'exit 1' }\n+   def reviewState=getReviewState()\n+   if((!env.CHANGE_TITLE.startsWith(\"DHFPROD-\")) && (!env.CHANGE_TITLE.startsWith(\"DEVO-\"))){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU4NzQ4OA=="}, "originalCommit": {"oid": "dab3ae4d7e2ef69f6beb3e92d344ca8cd00f39ce"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDY1MDEwOnYy", "diffSide": "RIGHT", "path": "Jenkinsfile", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNToxNToyM1rOIGQh9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxODozMTowMFrOIGZ2xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQzMzIwNA==", "bodyText": "Why are these changed?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4955#discussion_r543433204", "createdAt": "2020-12-15T15:15:23Z", "author": {"login": "SameeraPriyathamTadikonda"}, "path": "Jenkinsfile", "diffHunk": "@@ -21,17 +22,18 @@ def dhflinuxTests(String mlVersion,String type){\n     \t\tprops = readProperties file:'data-hub/pipeline.properties';\n     \t\tcopyRPM type,mlVersion\n     \t\tdef dockerhost=setupMLDockerCluster 3\n-    \t\tsh 'docker exec -u builder -i '+dockerhost+' /bin/sh -c \"su -builder;export JAVA_HOME=`eval echo \"$JAVA_HOME_DIR\"`;export GRADLE_USER_HOME=$WORKSPACE$GRADLE_DIR;export M2_HOME=$MAVEN_HOME/bin;export PATH=$JAVA_HOME/bin:$GRADLE_USER_HOME:$PATH:$MAVEN_HOME/bin;cd $WORKSPACE/data-hub;rm -rf $GRADLE_USER_HOME/caches;./gradlew clean;set +e;./gradlew marklogic-data-hub:bootstrapAndTest -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/;sleep 10s;./gradlew marklogic-data-hub-central:test -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/ |& tee console.log;sleep 10s;./gradlew ml-data-hub:test -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/;sleep 10s;./gradlew web:test -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/;sleep 10s;./gradlew marklogic-data-hub-spark-connector:test -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/;sleep 10s; ./gradlew marklogic-data-hub:testBootstrap -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/;sleep 10s;./gradlew ml-data-hub:testFullCycle -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/;sleep 10s;\"'\n+    \t\tsh 'docker exec -u builder -i '+dockerhost+' /bin/sh -c \"su -builder;export JAVA_HOME=`eval echo \"$JAVA_HOME_DIR\"`;export GRADLE_USER_HOME=$WORKSPACE$GRADLE_DIR;export M2_HOME=$MAVEN_HOME/bin;export PATH=$JAVA_HOME/bin:$GRADLE_USER_HOME:$PATH:$MAVEN_HOME/bin;cd $WORKSPACE/data-hub;rm -rf $GRADLE_USER_HOME/caches;./gradlew clean;set +e;./gradlew marklogic-data-hub:bootstrapAndTest -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/;sleep 10s;./gradlew marklogic-data-hub-central:test -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/ |& tee console.log;sleep 10s;./gradlew ml-data-hub:test -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/;sleep 10s;./gradlew web:test -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/;sleep 10s;./gradlew marklogic-data-hub-spark-connector:test -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/;sleep 10s;./gradlew ml-data-hub:testFullCycle -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/;sleep 10s;\"'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef3c325b4afdc8fb122541700db81f2ac1908f13"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU4NTk4OQ==", "bodyText": "Tried to fix conflict which I am not sure why this conflict happened. Most likely came form IDE editing.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4955#discussion_r543585989", "createdAt": "2020-12-15T18:31:00Z", "author": {"login": "yafeldman"}, "path": "Jenkinsfile", "diffHunk": "@@ -21,17 +22,18 @@ def dhflinuxTests(String mlVersion,String type){\n     \t\tprops = readProperties file:'data-hub/pipeline.properties';\n     \t\tcopyRPM type,mlVersion\n     \t\tdef dockerhost=setupMLDockerCluster 3\n-    \t\tsh 'docker exec -u builder -i '+dockerhost+' /bin/sh -c \"su -builder;export JAVA_HOME=`eval echo \"$JAVA_HOME_DIR\"`;export GRADLE_USER_HOME=$WORKSPACE$GRADLE_DIR;export M2_HOME=$MAVEN_HOME/bin;export PATH=$JAVA_HOME/bin:$GRADLE_USER_HOME:$PATH:$MAVEN_HOME/bin;cd $WORKSPACE/data-hub;rm -rf $GRADLE_USER_HOME/caches;./gradlew clean;set +e;./gradlew marklogic-data-hub:bootstrapAndTest -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/;sleep 10s;./gradlew marklogic-data-hub-central:test -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/ |& tee console.log;sleep 10s;./gradlew ml-data-hub:test -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/;sleep 10s;./gradlew web:test -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/;sleep 10s;./gradlew marklogic-data-hub-spark-connector:test -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/;sleep 10s; ./gradlew marklogic-data-hub:testBootstrap -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/;sleep 10s;./gradlew ml-data-hub:testFullCycle -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/;sleep 10s;\"'\n+    \t\tsh 'docker exec -u builder -i '+dockerhost+' /bin/sh -c \"su -builder;export JAVA_HOME=`eval echo \"$JAVA_HOME_DIR\"`;export GRADLE_USER_HOME=$WORKSPACE$GRADLE_DIR;export M2_HOME=$MAVEN_HOME/bin;export PATH=$JAVA_HOME/bin:$GRADLE_USER_HOME:$PATH:$MAVEN_HOME/bin;cd $WORKSPACE/data-hub;rm -rf $GRADLE_USER_HOME/caches;./gradlew clean;set +e;./gradlew marklogic-data-hub:bootstrapAndTest -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/;sleep 10s;./gradlew marklogic-data-hub-central:test -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/ |& tee console.log;sleep 10s;./gradlew ml-data-hub:test -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/;sleep 10s;./gradlew web:test -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/;sleep 10s;./gradlew marklogic-data-hub-spark-connector:test -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/;sleep 10s;./gradlew ml-data-hub:testFullCycle -i --stacktrace -PnodeDistributionBaseUrl=http://node-mirror.eng.marklogic.com:8080/;sleep 10s;\"'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQzMzIwNA=="}, "originalCommit": {"oid": "ef3c325b4afdc8fb122541700db81f2ac1908f13"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTU0MDEzOnYy", "diffSide": "RIGHT", "path": "Jenkinsfile", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxODowNToyOFrOIGYzVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxODozMToxMVrOIGZ3Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU2ODcyNw==", "bodyText": "Should it be Flex instead of Fiex?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4955#discussion_r543568727", "createdAt": "2020-12-15T18:05:28Z", "author": {"login": "akshaysonvane"}, "path": "Jenkinsfile", "diffHunk": "@@ -229,6 +231,154 @@ def runCypressE2e(){\n         junit '**/e2e/**/*.xml'\n     }\n }\n+\n+void postFailureFiexcodeScanAndReport(def vulnerabilities){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef3c325b4afdc8fb122541700db81f2ac1908f13"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU4NjA5NA==", "bodyText": "fixed", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4955#discussion_r543586094", "createdAt": "2020-12-15T18:31:11Z", "author": {"login": "yafeldman"}, "path": "Jenkinsfile", "diffHunk": "@@ -229,6 +231,154 @@ def runCypressE2e(){\n         junit '**/e2e/**/*.xml'\n     }\n }\n+\n+void postFailureFiexcodeScanAndReport(def vulnerabilities){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU2ODcyNw=="}, "originalCommit": {"oid": "ef3c325b4afdc8fb122541700db81f2ac1908f13"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTgzNzQ3OnYy", "diffSide": "RIGHT", "path": "Jenkinsfile", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOTowODozNlrOIGbiKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDoxMzozNlrOIGeFJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYxMzQ4MQ==", "bodyText": "Need the typo fix here as well.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4955#discussion_r543613481", "createdAt": "2020-12-15T19:08:36Z", "author": {"login": "akshaysonvane"}, "path": "Jenkinsfile", "diffHunk": "@@ -229,6 +231,154 @@ def runCypressE2e(){\n         junit '**/e2e/**/*.xml'\n     }\n }\n+\n+void postFailureFlexcodeScanAndReport(def vulnerabilities){\n+    def email=''\n+    if(env.CHANGE_AUTHOR){\n+        def author=env.CHANGE_AUTHOR.toString().trim().toLowerCase()\n+        email=getEmailFromGITUser author\n+    }\n+    else { email=Email }\n+\n+    email = email + ',Kavitha.Sivagnanam@marklogic.com'\n+\n+    def body=''\n+    vulnerabilities.each { msg -> body=body+msg + '<p>' }\n+    body = body + '<p>scan report is attached.'\n+\n+    sendMail email,\"<h3>Pipeline FAILED in stage ${STAGE_NAME} <a href=${BUILD_URL}/console> Check Console Output Here</a></h4>  High vulneribilities: <p> $body\",false,\" pipeline FAILED in ${STAGE_NAME} \", 'inventoriesRprt.report.json'\n+}\n+\n+def fiexcodeScanAndReport(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6ae46404b4ea6884a9473a4449ae3cdf60c8bbe"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY1NTIwNg==", "bodyText": "fixed", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4955#discussion_r543655206", "createdAt": "2020-12-15T20:13:36Z", "author": {"login": "yafeldman"}, "path": "Jenkinsfile", "diffHunk": "@@ -229,6 +231,154 @@ def runCypressE2e(){\n         junit '**/e2e/**/*.xml'\n     }\n }\n+\n+void postFailureFlexcodeScanAndReport(def vulnerabilities){\n+    def email=''\n+    if(env.CHANGE_AUTHOR){\n+        def author=env.CHANGE_AUTHOR.toString().trim().toLowerCase()\n+        email=getEmailFromGITUser author\n+    }\n+    else { email=Email }\n+\n+    email = email + ',Kavitha.Sivagnanam@marklogic.com'\n+\n+    def body=''\n+    vulnerabilities.each { msg -> body=body+msg + '<p>' }\n+    body = body + '<p>scan report is attached.'\n+\n+    sendMail email,\"<h3>Pipeline FAILED in stage ${STAGE_NAME} <a href=${BUILD_URL}/console> Check Console Output Here</a></h4>  High vulneribilities: <p> $body\",false,\" pipeline FAILED in ${STAGE_NAME} \", 'inventoriesRprt.report.json'\n+}\n+\n+def fiexcodeScanAndReport(){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYxMzQ4MQ=="}, "originalCommit": {"oid": "e6ae46404b4ea6884a9473a4449ae3cdf60c8bbe"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3021, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}