{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2Mjk0MDc5", "number": 3845, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMzo0Nzo0NlrODz-RnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzowMTo1NVrOD2y2bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODI0Mjg0OnYy", "diffSide": "RIGHT", "path": "specs/models/ArtifactSettings.v1.json", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMzo0Nzo0NlrOGIsUTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMjo0Mjo1MFrOGJbhRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc2Nzg4NA==", "bodyText": "I feel like we don't need \"additionalCollections\" and can just have \"collections\". We save default artifact settings with \"collections\" set when someone creates an artifact. When users update the settings from UI, \"collections\" gets reset (as collections is not part of the payload or UI property) .", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3845#discussion_r411767884", "createdAt": "2020-04-20T23:47:46Z", "author": {"login": "srinathgit"}, "path": "specs/models/ArtifactSettings.v1.json", "diffHunk": "@@ -0,0 +1,157 @@\n+{\n+  \"title\": \"ArtifactSettings.v1\",\n+  \"type\": \"object\",\n+  \"description\": \"Settings for an artifact\",\n+  \"properties\": {\n+    \"customHook\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"module\": {\n+          \"type\": \"string\"\n+        },\n+        \"parameters\": {\n+          \"type\": \"string\"\n+        },\n+        \"user\": {\n+          \"type\": \"string\"\n+        },\n+        \"runBefore\": {\n+          \"type\": \"boolean\"\n+        }\n+      }\n+    },\n+    \"provenanceGranularityLevel\": {\n+      \"type\": \"string\",\n+      \"enum\": [\n+        \"off\",\n+        \"coarse\",\n+        \"fine\"\n+      ]\n+    },\n+    \"permissions\": {\n+      \"type\": \"string\"\n+    },\n+    \"targetFormat\": {\n+      \"type\": \"string\",\n+      \"enum\": [\n+        \"json\",\n+        \"xml\"\n+      ]\n+    },\n+    \"targetDatabase\": {\n+      \"type\": \"string\"\n+    },\n+    \"sourceDatabase\": {\n+      \"type\": \"string\"\n+    },\n+    \"additionalCollections\": {\n+      \"type\": \"array\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eaee90fd6c502cea543fec5f59ddb5e7dc20224"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0MTI1Mw==", "bodyText": "We need a way to differentiate between default collections that can't be removed in the UI and user-defined collections that can. Perhaps just have \"collections\" and \"defaultCollections\" can be added in on reading the step out?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3845#discussion_r412541253", "createdAt": "2020-04-21T22:42:50Z", "author": {"login": "ryanjdew"}, "path": "specs/models/ArtifactSettings.v1.json", "diffHunk": "@@ -0,0 +1,157 @@\n+{\n+  \"title\": \"ArtifactSettings.v1\",\n+  \"type\": \"object\",\n+  \"description\": \"Settings for an artifact\",\n+  \"properties\": {\n+    \"customHook\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"module\": {\n+          \"type\": \"string\"\n+        },\n+        \"parameters\": {\n+          \"type\": \"string\"\n+        },\n+        \"user\": {\n+          \"type\": \"string\"\n+        },\n+        \"runBefore\": {\n+          \"type\": \"boolean\"\n+        }\n+      }\n+    },\n+    \"provenanceGranularityLevel\": {\n+      \"type\": \"string\",\n+      \"enum\": [\n+        \"off\",\n+        \"coarse\",\n+        \"fine\"\n+      ]\n+    },\n+    \"permissions\": {\n+      \"type\": \"string\"\n+    },\n+    \"targetFormat\": {\n+      \"type\": \"string\",\n+      \"enum\": [\n+        \"json\",\n+        \"xml\"\n+      ]\n+    },\n+    \"targetDatabase\": {\n+      \"type\": \"string\"\n+    },\n+    \"sourceDatabase\": {\n+      \"type\": \"string\"\n+    },\n+    \"additionalCollections\": {\n+      \"type\": \"array\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc2Nzg4NA=="}, "originalCommit": {"oid": "6eaee90fd6c502cea543fec5f59ddb5e7dc20224"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTIxNzQ3OnYy", "diffSide": "RIGHT", "path": "specs/models/Flow.schema.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzo1MzoyN1rOGJG9dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzo1MzoyN1rOGJG9dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwNDQwNw==", "bodyText": "Can you fix my terrible spelling of \"of\" while you're at it? :)", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3845#discussion_r412204407", "createdAt": "2020-04-21T13:53:27Z", "author": {"login": "rjrudin"}, "path": "specs/models/Flow.schema.json", "diffHunk": "@@ -48,7 +51,7 @@\n             },\n             \"description\": {\n               \"type\": \"string\",\n-              \"description\": \"Optional description fo the step\",\n+              \"description\": \"Optional description fo the step\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eaee90fd6c502cea543fec5f59ddb5e7dc20224"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTIyMTM2OnYy", "diffSide": "RIGHT", "path": "specs/models/MasterCollections.v1.json", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzo1NDowNFrOGJG_yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODo1NDozMVrOGJThDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwNTAwMA==", "bodyText": "I think the file and title should have the same name - \"MasteringCollections\" seems appropriate.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3845#discussion_r412205000", "createdAt": "2020-04-21T13:54:04Z", "author": {"login": "rjrudin"}, "path": "specs/models/MasterCollections.v1.json", "diffHunk": "@@ -0,0 +1,52 @@\n+{\n+  \"title\": \"MasteringCollections.v1\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eaee90fd6c502cea543fec5f59ddb5e7dc20224"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM1MDIwNA==", "bodyText": "The UX designs are using \"Match\" and \"Merge\" in the UI, so I recommended leaving off the \"ing\" for related files in the code. Should we do the same for Mastering, so \"Master\"? I see \"Load\" and \"Map\" and \"Curate\" in the UI as well. Shorter is better.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3845#discussion_r412350204", "createdAt": "2020-04-21T17:28:14Z", "author": {"login": "wooldridge"}, "path": "specs/models/MasterCollections.v1.json", "diffHunk": "@@ -0,0 +1,52 @@\n+{\n+  \"title\": \"MasteringCollections.v1\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwNTAwMA=="}, "originalCommit": {"oid": "6eaee90fd6c502cea543fec5f59ddb5e7dc20224"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQxMDEyNw==", "bodyText": "Existing DH core uses mapping/matching/merging/mastering.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3845#discussion_r412410127", "createdAt": "2020-04-21T18:54:31Z", "author": {"login": "rjrudin"}, "path": "specs/models/MasterCollections.v1.json", "diffHunk": "@@ -0,0 +1,52 @@\n+{\n+  \"title\": \"MasteringCollections.v1\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwNTAwMA=="}, "originalCommit": {"oid": "6eaee90fd6c502cea543fec5f59ddb5e7dc20224"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTIzODk2OnYy", "diffSide": "RIGHT", "path": "specs/models/ArtifactSettings.v1.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzo1NzoyM1rOGJHKsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzo1NzoyM1rOGJHKsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwNzc5Mw==", "bodyText": "I think these properties make it clear that an \"Artifact\", as defined here, is really a \"Step\".\nOur existing (e.g. LoadHubArtifactsCommand and LoadUserArtifactsCommand) code also refers to flows and entity models as artifacts, but those concepts do not support properties like customHook and targetDatabase/sourceDatabase.\nOf course, if this is just capturing the as-is, that's fine, and this is correct. But I think it's critical that we rework the concept of the \"artifact service\" into a \"step service\", because we're really describing steps.\n\"Artifact\" will then continue to have its current meaning of \"Config files created by users\", which will consist of flows, entity models, steps, step definitions, and mappings (with mappings being separate from mapping steps because of the existing code that expects things to be that way).", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3845#discussion_r412207793", "createdAt": "2020-04-21T13:57:23Z", "author": {"login": "rjrudin"}, "path": "specs/models/ArtifactSettings.v1.json", "diffHunk": "@@ -0,0 +1,157 @@\n+{\n+  \"title\": \"ArtifactSettings.v1\",\n+  \"type\": \"object\",\n+  \"description\": \"Settings for an artifact\",\n+  \"properties\": {\n+    \"customHook\": {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eaee90fd6c502cea543fec5f59ddb5e7dc20224"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODAyNjI0OnYy", "diffSide": "RIGHT", "path": "specs/models/Flow.schema.json", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODozNDoxOFrOGKFIzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODoyMDoxNFrOGK13Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIyMzExOQ==", "bodyText": "I included this at first to document it, but now I'm thinking we should remove it.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3845#discussion_r413223119", "createdAt": "2020-04-22T18:34:18Z", "author": {"login": "rjrudin"}, "path": "specs/models/Flow.schema.json", "diffHunk": "@@ -40,178 +43,195 @@\n       \"additionalProperties\": false,\n       \"patternProperties\": {\n         \"^[0-9]+$\": {\n-          \"type\": \"object\",\n-          \"properties\": {\n-            \"name\": {\n-              \"type\": \"string\",\n-              \"description\": \"Name of step, though the 'step number' is how a step is referred to when running a flow\"\n-            },\n-            \"description\": {\n-              \"type\": \"string\",\n-              \"description\": \"Optional description fo the step\",\n-            },\n-            \"stepDefinitionName\": {\n-              \"type\": \"string\"\n-            },\n-            \"stepDefinitionType\": {\n-              \"type\": \"string\"\n-            },\n-            \"batchSize\": {\n-              \"type\": \"number\",\n-              \"description\": \"If set, overrides the batchSize defined at the flow level and in the step definition\"\n-            },\n-            \"threadCount\": {\n-              \"type\": \"number\",\n-              \"description\": \"If set, overrides the threadCount defined at the flow level and in the step definition\"\n-            },\n-            \"retryLimit\": {\n-              \"type\": \"number\",\n-              \"description\": \"Unused, has no effect if set\"\n-            },\n-            \"customHook\": {\n-              \"type\": \"object\",\n+          \"oneOf\": [\n+            {\n               \"properties\": {\n-                \"module\": {\n-                  \"type\": \"string\"\n-                },\n-                \"parameters\": {\n-                  \"type\": \"object\"\n-                },\n-                \"user\": {\n-                  \"type\": \"string\"\n-                },\n-                \"runBefore\": {\n-                  \"type\": \"boolean\"\n-                }\n-              }\n-            },\n-            \"processors\": {\n-              \"type\": \"array\",\n-              \"items\": {\n-                \"type\": \"object\",\n-                \"properties\": {\n-                  \"path\": {\n-                    \"type\": \"string\",\n-                    \"description\": \"Path to a module in the modules database that will be invoked via xdmp.invoke\"\n-                  },\n-                  \"when\": {\n-                    \"type\": \"string\",\n-                    \"description\": \"When the processor should be invoked. Only 'beforeContentPersisted' is supported.\"\n-                  },\n-                  \"vars\": {\n-                    \"type\": \"object\",\n-                    \"description\": \"Any properties defined in this object are passed to the invoked module\"\n-                  }\n-                }\n-              }\n-            },\n-            \"options\": {\n-              \"type\": \"object\",\n-              \"properties\": {\n-                \"sourceQuery\": {\n+                \"name\": {\n                   \"type\": \"string\",\n-                  \"description\": \"Defines the items to be processed by the step; must be a cts.query or cts.uris statement if sourceQueryIsScript is false\"\n-                },\n-                \"sourceQueryIsScript\": {\n-                  \"type\": \"boolean\",\n-                  \"description\": \"Added in 5.3.0; if true, then sourceQuery can be any JavaScript statement that can be passed into xdmp.eval\"\n-                },\n-                \"constrainSourceQueryToJob\": {\n-                  \"type\": \"boolean\",\n-                  \"description\": \"If true, the query is applied to the documents that were created or modified in the same job that executes the step\"\n-                },\n-                \"provenanceGranularityLevel\": {\n-                  \"type\": \"string\",\n-                  \"description\": \"The granularity of the provenance tracking information: coarse (default) to store document-level provenance information only, fine to store document-level and property-level provenance information, or off to disable provenance tracking in future job runs. Applies only to mapping, matching, merging, mastering, and custom steps.\"\n-                },\n-                \"stepUpdate\": {\n-                  \"type\": \"boolean\",\n-                  \"description\": \"If true, custom modules can make changes directly to records in the database\"\n-                },\n-                \"acceptsBatch\": {\n-                  \"type\": \"boolean\",\n-                  \"description\": \"If true, the step module is invoked once with all records in the batch passed to it\"\n+                  \"description\": \"Name of step, though the 'step number' is how a step is referred to when running a flow\"\n                 },\n-                \"collections\": {\n-                  \"type\": \"array\",\n-                  \"items\" : {\n-                    \"type\": \"string\"\n-                  }\n-                },\n-                \"additionalCollections\": {\n-                  \"type\": \"array\",\n-                  \"items\" : {\n-                    \"type\": \"string\"\n-                  }\n-                },\n-                \"permissions\": {\n+                \"description\": {\n                   \"type\": \"string\",\n-                  \"description\": \"Comma-delimited string of role,capability,role,capability,etc\"\n+                  \"description\": \"Optional description of the step\"\n                 },\n-                \"outputFormat\": {\n+                \"stepDefinitionName\": {\n                   \"type\": \"string\"\n                 },\n-                \"sourceDatabase\": {\n+                \"stepDefinitionType\": {\n                   \"type\": \"string\"\n                 },\n-                \"targetDatabase\": {\n-                  \"type\": \"string\"\n+                \"batchSize\": {\n+                  \"type\": \"number\",\n+                  \"description\": \"If set, overrides the batchSize defined at the flow level and in the step definition\"\n                 },\n-                \"targetEntity\": {\n-                  \"type\": \"string\",\n-                  \"description\": \"Name of the entity type associated with the output of the step\"\n+                \"threadCount\": {\n+                  \"type\": \"number\",\n+                  \"description\": \"If set, overrides the threadCount defined at the flow level and in the step definition\"\n                 },\n-                \"validateEntity\": {\n-                  \"type\": \"boolean\",\n-                  \"description\": \"Applicable to mapping steps only\"\n+                \"retryLimit\": {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f7eae916e14edc6b1d536de682b0abe392d9f46"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAyMTQwMw==", "bodyText": "removed", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3845#discussion_r414021403", "createdAt": "2020-04-23T18:20:14Z", "author": {"login": "ryanjdew"}, "path": "specs/models/Flow.schema.json", "diffHunk": "@@ -40,178 +43,195 @@\n       \"additionalProperties\": false,\n       \"patternProperties\": {\n         \"^[0-9]+$\": {\n-          \"type\": \"object\",\n-          \"properties\": {\n-            \"name\": {\n-              \"type\": \"string\",\n-              \"description\": \"Name of step, though the 'step number' is how a step is referred to when running a flow\"\n-            },\n-            \"description\": {\n-              \"type\": \"string\",\n-              \"description\": \"Optional description fo the step\",\n-            },\n-            \"stepDefinitionName\": {\n-              \"type\": \"string\"\n-            },\n-            \"stepDefinitionType\": {\n-              \"type\": \"string\"\n-            },\n-            \"batchSize\": {\n-              \"type\": \"number\",\n-              \"description\": \"If set, overrides the batchSize defined at the flow level and in the step definition\"\n-            },\n-            \"threadCount\": {\n-              \"type\": \"number\",\n-              \"description\": \"If set, overrides the threadCount defined at the flow level and in the step definition\"\n-            },\n-            \"retryLimit\": {\n-              \"type\": \"number\",\n-              \"description\": \"Unused, has no effect if set\"\n-            },\n-            \"customHook\": {\n-              \"type\": \"object\",\n+          \"oneOf\": [\n+            {\n               \"properties\": {\n-                \"module\": {\n-                  \"type\": \"string\"\n-                },\n-                \"parameters\": {\n-                  \"type\": \"object\"\n-                },\n-                \"user\": {\n-                  \"type\": \"string\"\n-                },\n-                \"runBefore\": {\n-                  \"type\": \"boolean\"\n-                }\n-              }\n-            },\n-            \"processors\": {\n-              \"type\": \"array\",\n-              \"items\": {\n-                \"type\": \"object\",\n-                \"properties\": {\n-                  \"path\": {\n-                    \"type\": \"string\",\n-                    \"description\": \"Path to a module in the modules database that will be invoked via xdmp.invoke\"\n-                  },\n-                  \"when\": {\n-                    \"type\": \"string\",\n-                    \"description\": \"When the processor should be invoked. Only 'beforeContentPersisted' is supported.\"\n-                  },\n-                  \"vars\": {\n-                    \"type\": \"object\",\n-                    \"description\": \"Any properties defined in this object are passed to the invoked module\"\n-                  }\n-                }\n-              }\n-            },\n-            \"options\": {\n-              \"type\": \"object\",\n-              \"properties\": {\n-                \"sourceQuery\": {\n+                \"name\": {\n                   \"type\": \"string\",\n-                  \"description\": \"Defines the items to be processed by the step; must be a cts.query or cts.uris statement if sourceQueryIsScript is false\"\n-                },\n-                \"sourceQueryIsScript\": {\n-                  \"type\": \"boolean\",\n-                  \"description\": \"Added in 5.3.0; if true, then sourceQuery can be any JavaScript statement that can be passed into xdmp.eval\"\n-                },\n-                \"constrainSourceQueryToJob\": {\n-                  \"type\": \"boolean\",\n-                  \"description\": \"If true, the query is applied to the documents that were created or modified in the same job that executes the step\"\n-                },\n-                \"provenanceGranularityLevel\": {\n-                  \"type\": \"string\",\n-                  \"description\": \"The granularity of the provenance tracking information: coarse (default) to store document-level provenance information only, fine to store document-level and property-level provenance information, or off to disable provenance tracking in future job runs. Applies only to mapping, matching, merging, mastering, and custom steps.\"\n-                },\n-                \"stepUpdate\": {\n-                  \"type\": \"boolean\",\n-                  \"description\": \"If true, custom modules can make changes directly to records in the database\"\n-                },\n-                \"acceptsBatch\": {\n-                  \"type\": \"boolean\",\n-                  \"description\": \"If true, the step module is invoked once with all records in the batch passed to it\"\n+                  \"description\": \"Name of step, though the 'step number' is how a step is referred to when running a flow\"\n                 },\n-                \"collections\": {\n-                  \"type\": \"array\",\n-                  \"items\" : {\n-                    \"type\": \"string\"\n-                  }\n-                },\n-                \"additionalCollections\": {\n-                  \"type\": \"array\",\n-                  \"items\" : {\n-                    \"type\": \"string\"\n-                  }\n-                },\n-                \"permissions\": {\n+                \"description\": {\n                   \"type\": \"string\",\n-                  \"description\": \"Comma-delimited string of role,capability,role,capability,etc\"\n+                  \"description\": \"Optional description of the step\"\n                 },\n-                \"outputFormat\": {\n+                \"stepDefinitionName\": {\n                   \"type\": \"string\"\n                 },\n-                \"sourceDatabase\": {\n+                \"stepDefinitionType\": {\n                   \"type\": \"string\"\n                 },\n-                \"targetDatabase\": {\n-                  \"type\": \"string\"\n+                \"batchSize\": {\n+                  \"type\": \"number\",\n+                  \"description\": \"If set, overrides the batchSize defined at the flow level and in the step definition\"\n                 },\n-                \"targetEntity\": {\n-                  \"type\": \"string\",\n-                  \"description\": \"Name of the entity type associated with the output of the step\"\n+                \"threadCount\": {\n+                  \"type\": \"number\",\n+                  \"description\": \"If set, overrides the threadCount defined at the flow level and in the step definition\"\n                 },\n-                \"validateEntity\": {\n-                  \"type\": \"boolean\",\n-                  \"description\": \"Applicable to mapping steps only\"\n+                \"retryLimit\": {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIyMzExOQ=="}, "originalCommit": {"oid": "6f7eae916e14edc6b1d536de682b0abe392d9f46"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODA0NDY3OnYy", "diffSide": "RIGHT", "path": "specs/models/Step.v1.json", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODozODozNVrOGKFUCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODoyMToyNFrOGK16ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIyNTk5Mw==", "bodyText": "If the intent is to define a new Step schema that uses \"options\" strictly for things that make sense to override at runtime... you know, I'm wondering if \"options\" should be purely a runtime thing in the first place? i.e. put sourceQuery directly under Step, and a Step has no understanding of \"options\" in the first place. Then, some chunk of code can look at the options defined at runtime when a flow is run, and it'll use e.g. Object.assign to overwrite what's in the step definition. So e.g.:\noptions = {}; // provided by user at runtime\nflow = getFlow();\nstepId = flow.steps[\"1\"].stepId;\nstep = getStep(stepId); // loads a step document from the database\nstep = applyOptionsToStep(step);\nflow.steps[\"1\"] = step;\n\nThat makes the data model much easier to design and understand, because now we don't need to think about \"Which of these things would a user want to override at runtime?\" If needed, the \"applyOptionsToStep\" function could prohibit certain things from being overridden.\nThoughts on dumping \"options\" completely from a Step?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3845#discussion_r413225993", "createdAt": "2020-04-22T18:38:35Z", "author": {"login": "rjrudin"}, "path": "specs/models/Step.v1.json", "diffHunk": "@@ -0,0 +1,181 @@\n+{\n+  \"title\": \"Step.v1\",\n+  \"type\": \"object\",\n+  \"properties\": {\n+    \"options\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"sourceQuery\": {\n+          \"type\": \"string\",\n+          \"description\": \"Defines the items to be processed by the step; must be a cts.query or cts.uris statement if sourceQueryIsScript is false\"\n+        },\n+        \"sourceQueryIsScript\": {\n+          \"type\": \"boolean\",\n+          \"description\": \"Added in 5.3.0; if true, then sourceQuery can be any JavaScript statement that can be passed into xdmp.eval\"\n+        },\n+        \"constrainSourceQueryToJob\": {\n+          \"type\": \"boolean\",\n+          \"description\": \"If true, the query is applied to the documents that were created or modified in the same job that executes the step\"\n+        },\n+        \"provenanceGranularityLevel\": {\n+          \"type\": \"string\",\n+          \"description\": \"The granularity of the provenance tracking information: coarse (default) to store document-level provenance information only, fine to store document-level and property-level provenance information, or off to disable provenance tracking in future job runs. Applies only to mapping, matching, merging, mastering, and custom steps.\",\n+          \"enum\": [\n+            \"off\",\n+            \"coarse\",\n+            \"fine\"\n+          ]\n+        },\n+        \"stepUpdate\": {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f7eae916e14edc6b1d536de682b0abe392d9f46"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI4MzkxOQ==", "bodyText": "\"options\" for a Step(as they appear in a flow) really are \"settings\" based on current implementation right?\n\"steps\": {\n  \"1\": {\n    \"name\": \"dhsLoadData\", \n    \"description\": \"\", \n    \"options\": {\n        \"sourceQuery\": null, \n        \"collections\": [\"default-ingestion\"], \n        \"loadData\": {\n            \"name\": \"dhsLoadData\"\n        }, \n        \"outputFormat\": \"json\", \n        \"targetDatabase\": \"data-hub-STAGING\"\n    },", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3845#discussion_r413283919", "createdAt": "2020-04-22T19:58:06Z", "author": {"login": "bsrikan"}, "path": "specs/models/Step.v1.json", "diffHunk": "@@ -0,0 +1,181 @@\n+{\n+  \"title\": \"Step.v1\",\n+  \"type\": \"object\",\n+  \"properties\": {\n+    \"options\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"sourceQuery\": {\n+          \"type\": \"string\",\n+          \"description\": \"Defines the items to be processed by the step; must be a cts.query or cts.uris statement if sourceQueryIsScript is false\"\n+        },\n+        \"sourceQueryIsScript\": {\n+          \"type\": \"boolean\",\n+          \"description\": \"Added in 5.3.0; if true, then sourceQuery can be any JavaScript statement that can be passed into xdmp.eval\"\n+        },\n+        \"constrainSourceQueryToJob\": {\n+          \"type\": \"boolean\",\n+          \"description\": \"If true, the query is applied to the documents that were created or modified in the same job that executes the step\"\n+        },\n+        \"provenanceGranularityLevel\": {\n+          \"type\": \"string\",\n+          \"description\": \"The granularity of the provenance tracking information: coarse (default) to store document-level provenance information only, fine to store document-level and property-level provenance information, or off to disable provenance tracking in future job runs. Applies only to mapping, matching, merging, mastering, and custom steps.\",\n+          \"enum\": [\n+            \"off\",\n+            \"coarse\",\n+            \"fine\"\n+          ]\n+        },\n+        \"stepUpdate\": {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIyNTk5Mw=="}, "originalCommit": {"oid": "6f7eae916e14edc6b1d536de682b0abe392d9f46"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMyNzg2OQ==", "bodyText": "\"Settings\" is an arbitrary concept that appears in the UI but could change at any point. We don't want to model our data based how form dialogs are constructed in the UI.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3845#discussion_r413327869", "createdAt": "2020-04-22T20:58:05Z", "author": {"login": "rjrudin"}, "path": "specs/models/Step.v1.json", "diffHunk": "@@ -0,0 +1,181 @@\n+{\n+  \"title\": \"Step.v1\",\n+  \"type\": \"object\",\n+  \"properties\": {\n+    \"options\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"sourceQuery\": {\n+          \"type\": \"string\",\n+          \"description\": \"Defines the items to be processed by the step; must be a cts.query or cts.uris statement if sourceQueryIsScript is false\"\n+        },\n+        \"sourceQueryIsScript\": {\n+          \"type\": \"boolean\",\n+          \"description\": \"Added in 5.3.0; if true, then sourceQuery can be any JavaScript statement that can be passed into xdmp.eval\"\n+        },\n+        \"constrainSourceQueryToJob\": {\n+          \"type\": \"boolean\",\n+          \"description\": \"If true, the query is applied to the documents that were created or modified in the same job that executes the step\"\n+        },\n+        \"provenanceGranularityLevel\": {\n+          \"type\": \"string\",\n+          \"description\": \"The granularity of the provenance tracking information: coarse (default) to store document-level provenance information only, fine to store document-level and property-level provenance information, or off to disable provenance tracking in future job runs. Applies only to mapping, matching, merging, mastering, and custom steps.\",\n+          \"enum\": [\n+            \"off\",\n+            \"coarse\",\n+            \"fine\"\n+          ]\n+        },\n+        \"stepUpdate\": {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIyNTk5Mw=="}, "originalCommit": {"oid": "6f7eae916e14edc6b1d536de682b0abe392d9f46"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMzMjQ1OA==", "bodyText": "@rjrudin  The only scenario where I'm not certain about dropping options all together is the scenario of custom steps. Do we just pass in the entire step into the step function instead of options in that case? If not, I'm not certain how we'd determine what qualifies as \"options\" for the custom step.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3845#discussion_r413332458", "createdAt": "2020-04-22T21:05:39Z", "author": {"login": "ryanjdew"}, "path": "specs/models/Step.v1.json", "diffHunk": "@@ -0,0 +1,181 @@\n+{\n+  \"title\": \"Step.v1\",\n+  \"type\": \"object\",\n+  \"properties\": {\n+    \"options\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"sourceQuery\": {\n+          \"type\": \"string\",\n+          \"description\": \"Defines the items to be processed by the step; must be a cts.query or cts.uris statement if sourceQueryIsScript is false\"\n+        },\n+        \"sourceQueryIsScript\": {\n+          \"type\": \"boolean\",\n+          \"description\": \"Added in 5.3.0; if true, then sourceQuery can be any JavaScript statement that can be passed into xdmp.eval\"\n+        },\n+        \"constrainSourceQueryToJob\": {\n+          \"type\": \"boolean\",\n+          \"description\": \"If true, the query is applied to the documents that were created or modified in the same job that executes the step\"\n+        },\n+        \"provenanceGranularityLevel\": {\n+          \"type\": \"string\",\n+          \"description\": \"The granularity of the provenance tracking information: coarse (default) to store document-level provenance information only, fine to store document-level and property-level provenance information, or off to disable provenance tracking in future job runs. Applies only to mapping, matching, merging, mastering, and custom steps.\",\n+          \"enum\": [\n+            \"off\",\n+            \"coarse\",\n+            \"fine\"\n+          ]\n+        },\n+        \"stepUpdate\": {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIyNTk5Mw=="}, "originalCommit": {"oid": "6f7eae916e14edc6b1d536de682b0abe392d9f46"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM0NTg4NQ==", "bodyText": "Each Step might need a different set of options. Runtime options would apply it commonly across all steps right?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3845#discussion_r413345885", "createdAt": "2020-04-22T21:28:34Z", "author": {"login": "bsrikan"}, "path": "specs/models/Step.v1.json", "diffHunk": "@@ -0,0 +1,181 @@\n+{\n+  \"title\": \"Step.v1\",\n+  \"type\": \"object\",\n+  \"properties\": {\n+    \"options\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"sourceQuery\": {\n+          \"type\": \"string\",\n+          \"description\": \"Defines the items to be processed by the step; must be a cts.query or cts.uris statement if sourceQueryIsScript is false\"\n+        },\n+        \"sourceQueryIsScript\": {\n+          \"type\": \"boolean\",\n+          \"description\": \"Added in 5.3.0; if true, then sourceQuery can be any JavaScript statement that can be passed into xdmp.eval\"\n+        },\n+        \"constrainSourceQueryToJob\": {\n+          \"type\": \"boolean\",\n+          \"description\": \"If true, the query is applied to the documents that were created or modified in the same job that executes the step\"\n+        },\n+        \"provenanceGranularityLevel\": {\n+          \"type\": \"string\",\n+          \"description\": \"The granularity of the provenance tracking information: coarse (default) to store document-level provenance information only, fine to store document-level and property-level provenance information, or off to disable provenance tracking in future job runs. Applies only to mapping, matching, merging, mastering, and custom steps.\",\n+          \"enum\": [\n+            \"off\",\n+            \"coarse\",\n+            \"fine\"\n+          ]\n+        },\n+        \"stepUpdate\": {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIyNTk5Mw=="}, "originalCommit": {"oid": "6f7eae916e14edc6b1d536de682b0abe392d9f46"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM5NjUyMQ==", "bodyText": "The intent of options is to allow for some parts of a step to be overridden at runtime. But \"some\" is not clearly defined, and there are clear instances where what's in and what's not in \"options\" doesn't make sense:\n\nbatchSize and threadCount are not in options, but those clearly would be overridden at runtime\nfileLocations/input-file-path is not in options, but is likely to be overridden at runtime\nExamples of properties in options that are extremely unlikely to be overridden at runtime: outputFormat, acceptsBatch, stepUpdate, mapping\n\nMy point is that \"options\" as defined in a step are meaningless today. We should discard it - it's an unnecessary level of nesting in a step that provides no meaning, as demonstrated above.\nRuntime options make sense though. This should be an object that can overwrite any part of a step, though the function that applies options to a step can always prohibit certain things from being overridden as needed. For example, we likely don't want to allow for name/stepDefinitionName/stepDefinitionType to be overridden.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3845#discussion_r413396521", "createdAt": "2020-04-22T23:17:16Z", "author": {"login": "rjrudin"}, "path": "specs/models/Step.v1.json", "diffHunk": "@@ -0,0 +1,181 @@\n+{\n+  \"title\": \"Step.v1\",\n+  \"type\": \"object\",\n+  \"properties\": {\n+    \"options\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"sourceQuery\": {\n+          \"type\": \"string\",\n+          \"description\": \"Defines the items to be processed by the step; must be a cts.query or cts.uris statement if sourceQueryIsScript is false\"\n+        },\n+        \"sourceQueryIsScript\": {\n+          \"type\": \"boolean\",\n+          \"description\": \"Added in 5.3.0; if true, then sourceQuery can be any JavaScript statement that can be passed into xdmp.eval\"\n+        },\n+        \"constrainSourceQueryToJob\": {\n+          \"type\": \"boolean\",\n+          \"description\": \"If true, the query is applied to the documents that were created or modified in the same job that executes the step\"\n+        },\n+        \"provenanceGranularityLevel\": {\n+          \"type\": \"string\",\n+          \"description\": \"The granularity of the provenance tracking information: coarse (default) to store document-level provenance information only, fine to store document-level and property-level provenance information, or off to disable provenance tracking in future job runs. Applies only to mapping, matching, merging, mastering, and custom steps.\",\n+          \"enum\": [\n+            \"off\",\n+            \"coarse\",\n+            \"fine\"\n+          ]\n+        },\n+        \"stepUpdate\": {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIyNTk5Mw=="}, "originalCommit": {"oid": "6f7eae916e14edc6b1d536de682b0abe392d9f46"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAyMjI1MA==", "bodyText": "removed \"options\" from the \"Step.v1\" model. Left \"options\" as is in the Flow schema.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3845#discussion_r414022250", "createdAt": "2020-04-23T18:21:24Z", "author": {"login": "ryanjdew"}, "path": "specs/models/Step.v1.json", "diffHunk": "@@ -0,0 +1,181 @@\n+{\n+  \"title\": \"Step.v1\",\n+  \"type\": \"object\",\n+  \"properties\": {\n+    \"options\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"sourceQuery\": {\n+          \"type\": \"string\",\n+          \"description\": \"Defines the items to be processed by the step; must be a cts.query or cts.uris statement if sourceQueryIsScript is false\"\n+        },\n+        \"sourceQueryIsScript\": {\n+          \"type\": \"boolean\",\n+          \"description\": \"Added in 5.3.0; if true, then sourceQuery can be any JavaScript statement that can be passed into xdmp.eval\"\n+        },\n+        \"constrainSourceQueryToJob\": {\n+          \"type\": \"boolean\",\n+          \"description\": \"If true, the query is applied to the documents that were created or modified in the same job that executes the step\"\n+        },\n+        \"provenanceGranularityLevel\": {\n+          \"type\": \"string\",\n+          \"description\": \"The granularity of the provenance tracking information: coarse (default) to store document-level provenance information only, fine to store document-level and property-level provenance information, or off to disable provenance tracking in future job runs. Applies only to mapping, matching, merging, mastering, and custom steps.\",\n+          \"enum\": [\n+            \"off\",\n+            \"coarse\",\n+            \"fine\"\n+          ]\n+        },\n+        \"stepUpdate\": {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIyNTk5Mw=="}, "originalCommit": {"oid": "6f7eae916e14edc6b1d536de682b0abe392d9f46"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODA1MjgzOnYy", "diffSide": "RIGHT", "path": "specs/models/Step.v1.json", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODo0MDoyOVrOGKFY2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODoyMTo1OVrOGK18AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIyNzIyNw==", "bodyText": "Taking a page out of mlcp's book here - how about \"outputCollections\" to make it clear that these are applied to documents outputted by the step? Likewise for \"outputPermissions\", and I'd do \"outputAdditionalCollections\" as well. I remember being confused at first about what the scope of \"collections\" is - does that affect the query for documents to process, or are they applied to documents that will be written, or is it something else? \"outputCollections\" works well for mlcp, I think we should copy it here.\n(Note that the function that adapts the new Step schema to what the existing Flow schema expects would then rename this to \"collections\").", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3845#discussion_r413227227", "createdAt": "2020-04-22T18:40:29Z", "author": {"login": "rjrudin"}, "path": "specs/models/Step.v1.json", "diffHunk": "@@ -0,0 +1,181 @@\n+{\n+  \"title\": \"Step.v1\",\n+  \"type\": \"object\",\n+  \"properties\": {\n+    \"options\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"sourceQuery\": {\n+          \"type\": \"string\",\n+          \"description\": \"Defines the items to be processed by the step; must be a cts.query or cts.uris statement if sourceQueryIsScript is false\"\n+        },\n+        \"sourceQueryIsScript\": {\n+          \"type\": \"boolean\",\n+          \"description\": \"Added in 5.3.0; if true, then sourceQuery can be any JavaScript statement that can be passed into xdmp.eval\"\n+        },\n+        \"constrainSourceQueryToJob\": {\n+          \"type\": \"boolean\",\n+          \"description\": \"If true, the query is applied to the documents that were created or modified in the same job that executes the step\"\n+        },\n+        \"provenanceGranularityLevel\": {\n+          \"type\": \"string\",\n+          \"description\": \"The granularity of the provenance tracking information: coarse (default) to store document-level provenance information only, fine to store document-level and property-level provenance information, or off to disable provenance tracking in future job runs. Applies only to mapping, matching, merging, mastering, and custom steps.\",\n+          \"enum\": [\n+            \"off\",\n+            \"coarse\",\n+            \"fine\"\n+          ]\n+        },\n+        \"stepUpdate\": {\n+          \"type\": \"boolean\",\n+          \"description\": \"If true, custom modules can make changes directly to records in the database\"\n+        },\n+        \"acceptsBatch\": {\n+          \"type\": \"boolean\",\n+          \"description\": \"If true, the step module is invoked once with all records in the batch passed to it\"\n+        },\n+        \"collections\": {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f7eae916e14edc6b1d536de682b0abe392d9f46"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAyMjY1Nw==", "bodyText": "I've updated this to use \"outputCollections\" and \"defaultOutputCollections\".", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3845#discussion_r414022657", "createdAt": "2020-04-23T18:21:59Z", "author": {"login": "ryanjdew"}, "path": "specs/models/Step.v1.json", "diffHunk": "@@ -0,0 +1,181 @@\n+{\n+  \"title\": \"Step.v1\",\n+  \"type\": \"object\",\n+  \"properties\": {\n+    \"options\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"sourceQuery\": {\n+          \"type\": \"string\",\n+          \"description\": \"Defines the items to be processed by the step; must be a cts.query or cts.uris statement if sourceQueryIsScript is false\"\n+        },\n+        \"sourceQueryIsScript\": {\n+          \"type\": \"boolean\",\n+          \"description\": \"Added in 5.3.0; if true, then sourceQuery can be any JavaScript statement that can be passed into xdmp.eval\"\n+        },\n+        \"constrainSourceQueryToJob\": {\n+          \"type\": \"boolean\",\n+          \"description\": \"If true, the query is applied to the documents that were created or modified in the same job that executes the step\"\n+        },\n+        \"provenanceGranularityLevel\": {\n+          \"type\": \"string\",\n+          \"description\": \"The granularity of the provenance tracking information: coarse (default) to store document-level provenance information only, fine to store document-level and property-level provenance information, or off to disable provenance tracking in future job runs. Applies only to mapping, matching, merging, mastering, and custom steps.\",\n+          \"enum\": [\n+            \"off\",\n+            \"coarse\",\n+            \"fine\"\n+          ]\n+        },\n+        \"stepUpdate\": {\n+          \"type\": \"boolean\",\n+          \"description\": \"If true, custom modules can make changes directly to records in the database\"\n+        },\n+        \"acceptsBatch\": {\n+          \"type\": \"boolean\",\n+          \"description\": \"If true, the step module is invoked once with all records in the batch passed to it\"\n+        },\n+        \"collections\": {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIyNzIyNw=="}, "originalCommit": {"oid": "6f7eae916e14edc6b1d536de682b0abe392d9f46"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODA4OTgyOnYy", "diffSide": "RIGHT", "path": "specs/models/Step.v1.json", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODo0OTowMlrOGKFvQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODoyMzozMVrOGK1_qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIzMjk2MQ==", "bodyText": "I think we should at a minimum say \"targetEntityTypeId\" here, as \"entityTypeId\" is our agreed-upon name for a unique identifier for an entity type. We can have code that accepts a name in here as well.\nAlso, I'm proposing \"inputDatabase\" and \"outputDatabase\" to be consistent not just with mlcp, but also with the evolving concepts of a Step having an Input and an Output. Gorbet pointed out how the word \"source\" is a bit loaded because it has been typically used to refer to a source of data outside of ML, like some external system. So we want to move away from \"sourceQuery\" - though I wouldn't rename that yet. I don't know, if this is just a draft, I think we can stay with sourceDatabase/targetDatabase, but I think we'll need to get Gorbet and likely PAT involved because we're really defining critical concepts here.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3845#discussion_r413232961", "createdAt": "2020-04-22T18:49:02Z", "author": {"login": "rjrudin"}, "path": "specs/models/Step.v1.json", "diffHunk": "@@ -0,0 +1,181 @@\n+{\n+  \"title\": \"Step.v1\",\n+  \"type\": \"object\",\n+  \"properties\": {\n+    \"options\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"sourceQuery\": {\n+          \"type\": \"string\",\n+          \"description\": \"Defines the items to be processed by the step; must be a cts.query or cts.uris statement if sourceQueryIsScript is false\"\n+        },\n+        \"sourceQueryIsScript\": {\n+          \"type\": \"boolean\",\n+          \"description\": \"Added in 5.3.0; if true, then sourceQuery can be any JavaScript statement that can be passed into xdmp.eval\"\n+        },\n+        \"constrainSourceQueryToJob\": {\n+          \"type\": \"boolean\",\n+          \"description\": \"If true, the query is applied to the documents that were created or modified in the same job that executes the step\"\n+        },\n+        \"provenanceGranularityLevel\": {\n+          \"type\": \"string\",\n+          \"description\": \"The granularity of the provenance tracking information: coarse (default) to store document-level provenance information only, fine to store document-level and property-level provenance information, or off to disable provenance tracking in future job runs. Applies only to mapping, matching, merging, mastering, and custom steps.\",\n+          \"enum\": [\n+            \"off\",\n+            \"coarse\",\n+            \"fine\"\n+          ]\n+        },\n+        \"stepUpdate\": {\n+          \"type\": \"boolean\",\n+          \"description\": \"If true, custom modules can make changes directly to records in the database\"\n+        },\n+        \"acceptsBatch\": {\n+          \"type\": \"boolean\",\n+          \"description\": \"If true, the step module is invoked once with all records in the batch passed to it\"\n+        },\n+        \"collections\": {\n+          \"type\": \"array\",\n+          \"items\": {\n+            \"type\": \"string\"\n+          }\n+        },\n+        \"additionalCollections\": {\n+          \"type\": \"array\",\n+          \"items\": {\n+            \"type\": \"string\"\n+          }\n+        },\n+        \"permissions\": {\n+          \"type\": \"string\",\n+          \"description\": \"Comma-delimited string of role,capability,role,capability,etc\"\n+        },\n+        \"outputFormat\": {\n+          \"type\": \"string\",\n+          \"enum\": [\n+            \"json\",\n+            \"xml\"\n+          ]\n+        },\n+        \"sourceDatabase\": {\n+          \"type\": \"string\"\n+        },\n+        \"targetDatabase\": {\n+          \"type\": \"string\"\n+        },\n+        \"targetEntity\": {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f7eae916e14edc6b1d536de682b0abe392d9f46"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAyMzU5NQ==", "bodyText": "changed to \"targetEntityTypeId\" and made the changes to input/output database", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3845#discussion_r414023595", "createdAt": "2020-04-23T18:23:31Z", "author": {"login": "ryanjdew"}, "path": "specs/models/Step.v1.json", "diffHunk": "@@ -0,0 +1,181 @@\n+{\n+  \"title\": \"Step.v1\",\n+  \"type\": \"object\",\n+  \"properties\": {\n+    \"options\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"sourceQuery\": {\n+          \"type\": \"string\",\n+          \"description\": \"Defines the items to be processed by the step; must be a cts.query or cts.uris statement if sourceQueryIsScript is false\"\n+        },\n+        \"sourceQueryIsScript\": {\n+          \"type\": \"boolean\",\n+          \"description\": \"Added in 5.3.0; if true, then sourceQuery can be any JavaScript statement that can be passed into xdmp.eval\"\n+        },\n+        \"constrainSourceQueryToJob\": {\n+          \"type\": \"boolean\",\n+          \"description\": \"If true, the query is applied to the documents that were created or modified in the same job that executes the step\"\n+        },\n+        \"provenanceGranularityLevel\": {\n+          \"type\": \"string\",\n+          \"description\": \"The granularity of the provenance tracking information: coarse (default) to store document-level provenance information only, fine to store document-level and property-level provenance information, or off to disable provenance tracking in future job runs. Applies only to mapping, matching, merging, mastering, and custom steps.\",\n+          \"enum\": [\n+            \"off\",\n+            \"coarse\",\n+            \"fine\"\n+          ]\n+        },\n+        \"stepUpdate\": {\n+          \"type\": \"boolean\",\n+          \"description\": \"If true, custom modules can make changes directly to records in the database\"\n+        },\n+        \"acceptsBatch\": {\n+          \"type\": \"boolean\",\n+          \"description\": \"If true, the step module is invoked once with all records in the batch passed to it\"\n+        },\n+        \"collections\": {\n+          \"type\": \"array\",\n+          \"items\": {\n+            \"type\": \"string\"\n+          }\n+        },\n+        \"additionalCollections\": {\n+          \"type\": \"array\",\n+          \"items\": {\n+            \"type\": \"string\"\n+          }\n+        },\n+        \"permissions\": {\n+          \"type\": \"string\",\n+          \"description\": \"Comma-delimited string of role,capability,role,capability,etc\"\n+        },\n+        \"outputFormat\": {\n+          \"type\": \"string\",\n+          \"enum\": [\n+            \"json\",\n+            \"xml\"\n+          ]\n+        },\n+        \"sourceDatabase\": {\n+          \"type\": \"string\"\n+        },\n+        \"targetDatabase\": {\n+          \"type\": \"string\"\n+        },\n+        \"targetEntity\": {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIzMjk2MQ=="}, "originalCommit": {"oid": "6f7eae916e14edc6b1d536de682b0abe392d9f46"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzcwNzU5OnYy", "diffSide": "RIGHT", "path": "specs/models/Step.v1.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTo1MDo0NlrOGK5YUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNToxNDoxMlrOGMoipQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3OTA1OA==", "bodyText": "Little tweak - I think \"outputPermissions\" here, for consistency with mlcp and to make it explicit how these will be applied.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3845#discussion_r414079058", "createdAt": "2020-04-23T19:50:46Z", "author": {"login": "rjrudin"}, "path": "specs/models/Step.v1.json", "diffHunk": "@@ -0,0 +1,142 @@\n+{\n+  \"title\": \"Step.v1\",\n+  \"type\": \"object\",\n+  \"properties\": {\n+    \"processors\": {\n+      \"type\": \"array\",\n+      \"items\": {\n+        \"type\": \"object\",\n+        \"properties\": {\n+          \"path\": {\n+            \"type\": \"string\",\n+            \"description\": \"Path to a module in the modules database that will be invoked via xdmp.invoke\"\n+          },\n+          \"when\": {\n+            \"type\": \"string\",\n+            \"description\": \"When the processor should be invoked. Only 'beforeContentPersisted' is supported.\"\n+          },\n+          \"vars\": {\n+            \"type\": \"object\",\n+            \"description\": \"Any properties defined in this object are passed to the invoked module\"\n+          }\n+        }\n+      }\n+    },\n+    \"customHook\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"module\": {\n+          \"type\": \"string\"\n+        },\n+        \"parameters\": {\n+          \"type\": \"object\"\n+        },\n+        \"user\": {\n+          \"type\": \"string\"\n+        },\n+        \"runBefore\": {\n+          \"type\": \"boolean\"\n+        }\n+      }\n+    },\n+    \"threadCount\": {\n+      \"type\": \"number\",\n+      \"description\": \"If set, overrides the threadCount defined at the flow level and in the step definition\"\n+    },\n+    \"batchSize\": {\n+      \"type\": \"number\",\n+      \"description\": \"If set, overrides the batchSize defined at the flow level and in the step definition\"\n+    },\n+    \"stepDefinitionType\": {\n+      \"type\": \"string\"\n+    },\n+    \"stepDefinitionName\": {\n+      \"type\": \"string\"\n+    },\n+    \"description\": {\n+      \"type\": \"string\",\n+      \"description\": \"Optional description fo the step\"\n+    },\n+    \"stepId\": {\n+      \"type\": \"string\",\n+      \"description\": \"This is generated on the server-side\"\n+    },\n+    \"headers\": {\n+      \"type\": \"object\",\n+      \"description\": \"Any properties in this object will be copied into the headers of each document processed by the step\"\n+    },\n+    \"validateEntity\": {\n+      \"type\": \"boolean\",\n+      \"description\": \"Applicable to mapping steps only\"\n+    },\n+    \"outputDatabase\": {\n+      \"type\": \"string\"\n+    },\n+    \"inputDatabase\": {\n+      \"type\": \"string\"\n+    },\n+    \"outputFormat\": {\n+      \"type\": \"string\",\n+      \"enum\": [\n+        \"json\",\n+        \"xml\"\n+      ]\n+    },\n+    \"permissions\": {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcb9e56a7fccee23c6ee714bfb5814280b0d820"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkwMDMyNQ==", "bodyText": "updated to use outputPermissions", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3845#discussion_r415900325", "createdAt": "2020-04-27T15:14:12Z", "author": {"login": "ryanjdew"}, "path": "specs/models/Step.v1.json", "diffHunk": "@@ -0,0 +1,142 @@\n+{\n+  \"title\": \"Step.v1\",\n+  \"type\": \"object\",\n+  \"properties\": {\n+    \"processors\": {\n+      \"type\": \"array\",\n+      \"items\": {\n+        \"type\": \"object\",\n+        \"properties\": {\n+          \"path\": {\n+            \"type\": \"string\",\n+            \"description\": \"Path to a module in the modules database that will be invoked via xdmp.invoke\"\n+          },\n+          \"when\": {\n+            \"type\": \"string\",\n+            \"description\": \"When the processor should be invoked. Only 'beforeContentPersisted' is supported.\"\n+          },\n+          \"vars\": {\n+            \"type\": \"object\",\n+            \"description\": \"Any properties defined in this object are passed to the invoked module\"\n+          }\n+        }\n+      }\n+    },\n+    \"customHook\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"module\": {\n+          \"type\": \"string\"\n+        },\n+        \"parameters\": {\n+          \"type\": \"object\"\n+        },\n+        \"user\": {\n+          \"type\": \"string\"\n+        },\n+        \"runBefore\": {\n+          \"type\": \"boolean\"\n+        }\n+      }\n+    },\n+    \"threadCount\": {\n+      \"type\": \"number\",\n+      \"description\": \"If set, overrides the threadCount defined at the flow level and in the step definition\"\n+    },\n+    \"batchSize\": {\n+      \"type\": \"number\",\n+      \"description\": \"If set, overrides the batchSize defined at the flow level and in the step definition\"\n+    },\n+    \"stepDefinitionType\": {\n+      \"type\": \"string\"\n+    },\n+    \"stepDefinitionName\": {\n+      \"type\": \"string\"\n+    },\n+    \"description\": {\n+      \"type\": \"string\",\n+      \"description\": \"Optional description fo the step\"\n+    },\n+    \"stepId\": {\n+      \"type\": \"string\",\n+      \"description\": \"This is generated on the server-side\"\n+    },\n+    \"headers\": {\n+      \"type\": \"object\",\n+      \"description\": \"Any properties in this object will be copied into the headers of each document processed by the step\"\n+    },\n+    \"validateEntity\": {\n+      \"type\": \"boolean\",\n+      \"description\": \"Applicable to mapping steps only\"\n+    },\n+    \"outputDatabase\": {\n+      \"type\": \"string\"\n+    },\n+    \"inputDatabase\": {\n+      \"type\": \"string\"\n+    },\n+    \"outputFormat\": {\n+      \"type\": \"string\",\n+      \"enum\": [\n+        \"json\",\n+        \"xml\"\n+      ]\n+    },\n+    \"permissions\": {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3OTA1OA=="}, "originalCommit": {"oid": "0fcb9e56a7fccee23c6ee714bfb5814280b0d820"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzcxMjExOnYy", "diffSide": "RIGHT", "path": "specs/models/StepSettings.v1.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTo1MTo1M1rOGK5bCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTo1MTo1M1rOGK5bCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3OTc1NA==", "bodyText": "I think since the UI is under development, we should use the same terms here. It's fine that we have to translate the new terms to the existing Flow schema, but for the UI, it'll never be easier than now to change it to use these new terms.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3845#discussion_r414079754", "createdAt": "2020-04-23T19:51:53Z", "author": {"login": "rjrudin"}, "path": "specs/models/StepSettings.v1.json", "diffHunk": "@@ -0,0 +1,157 @@\n+{\n+  \"title\": \"StepSettings.v1\",\n+  \"type\": \"object\",\n+  \"description\": \"Settings for a step. This is a logical structure to simplify front-end/middle-tier APIs\",\n+  \"properties\": {\n+    \"customHook\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"module\": {\n+          \"type\": \"string\"\n+        },\n+        \"parameters\": {\n+          \"type\": \"string\"\n+        },\n+        \"user\": {\n+          \"type\": \"string\"\n+        },\n+        \"runBefore\": {\n+          \"type\": \"boolean\"\n+        }\n+      }\n+    },\n+    \"provenanceGranularityLevel\": {\n+      \"type\": \"string\",\n+      \"enum\": [\n+        \"off\",\n+        \"coarse\",\n+        \"fine\"\n+      ]\n+    },\n+    \"permissions\": {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcb9e56a7fccee23c6ee714bfb5814280b0d820"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NzgyODMxOnYy", "diffSide": "RIGHT", "path": "specs/models/Step.v1.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzowMTo1NVrOGMt6dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzowMTo1NVrOGMt6dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk4ODM0MQ==", "bodyText": "I'm realizing now that we really have a lot of interchangeability between input/source and output/target/destination in DH today. I think this should likely be \"outputEntityTypeId\", and \"sourceQuery\" should be \"inputQuery\", but I think we can hold off on those changes for now because I'm expecting there to be new abstractions we add soon. So I think these are fine for now, even though we still have consistency with input vs source and output vs target/destination.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3845#discussion_r415988341", "createdAt": "2020-04-27T17:01:55Z", "author": {"login": "rjrudin"}, "path": "specs/models/Step.v1.json", "diffHunk": "@@ -0,0 +1,142 @@\n+{\n+  \"title\": \"Step.v1\",\n+  \"type\": \"object\",\n+  \"properties\": {\n+    \"processors\": {\n+      \"type\": \"array\",\n+      \"items\": {\n+        \"type\": \"object\",\n+        \"properties\": {\n+          \"path\": {\n+            \"type\": \"string\",\n+            \"description\": \"Path to a module in the modules database that will be invoked via xdmp.invoke\"\n+          },\n+          \"when\": {\n+            \"type\": \"string\",\n+            \"description\": \"When the processor should be invoked. Only 'beforeContentPersisted' is supported.\"\n+          },\n+          \"vars\": {\n+            \"type\": \"object\",\n+            \"description\": \"Any properties defined in this object are passed to the invoked module\"\n+          }\n+        }\n+      }\n+    },\n+    \"customHook\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"module\": {\n+          \"type\": \"string\"\n+        },\n+        \"parameters\": {\n+          \"type\": \"object\"\n+        },\n+        \"user\": {\n+          \"type\": \"string\"\n+        },\n+        \"runBefore\": {\n+          \"type\": \"boolean\"\n+        }\n+      }\n+    },\n+    \"threadCount\": {\n+      \"type\": \"number\",\n+      \"description\": \"If set, overrides the threadCount defined at the flow level and in the step definition\"\n+    },\n+    \"batchSize\": {\n+      \"type\": \"number\",\n+      \"description\": \"If set, overrides the batchSize defined at the flow level and in the step definition\"\n+    },\n+    \"stepDefinitionType\": {\n+      \"type\": \"string\"\n+    },\n+    \"stepDefinitionName\": {\n+      \"type\": \"string\"\n+    },\n+    \"description\": {\n+      \"type\": \"string\",\n+      \"description\": \"Optional description fo the step\"\n+    },\n+    \"stepId\": {\n+      \"type\": \"string\",\n+      \"description\": \"This is generated on the server-side\"\n+    },\n+    \"headers\": {\n+      \"type\": \"object\",\n+      \"description\": \"Any properties in this object will be copied into the headers of each document processed by the step\"\n+    },\n+    \"validateEntity\": {\n+      \"type\": \"boolean\",\n+      \"description\": \"Applicable to mapping steps only\"\n+    },\n+    \"outputDatabase\": {\n+      \"type\": \"string\"\n+    },\n+    \"inputDatabase\": {\n+      \"type\": \"string\"\n+    },\n+    \"outputFormat\": {\n+      \"type\": \"string\",\n+      \"enum\": [\n+        \"json\",\n+        \"xml\"\n+      ]\n+    },\n+    \"outputPermissions\": {\n+      \"type\": \"string\",\n+      \"description\": \"Comma-delimited string of role,capability,role,capability,etc\"\n+    },\n+    \"outputCollections\": {\n+      \"type\": \"array\",\n+      \"description\": \"additional collections provided by the user that get applied to the step output\",\n+      \"items\": {\n+        \"type\": \"string\"\n+      }\n+    },\n+    \"defaultOutputCollections\": {\n+      \"type\": \"array\",\n+      \"description\": \"default collections associated with a step that are applied to the step output\",\n+      \"items\": {\n+        \"type\": \"string\"\n+      }\n+    },\n+    \"acceptsBatch\": {\n+      \"type\": \"boolean\",\n+      \"default\": \"false\",\n+      \"description\": \"If true, the step module is invoked once with all records in the batch passed to it\"\n+    },\n+    \"stepUpdate\": {\n+      \"type\": \"boolean\",\n+      \"default\": \"false\",\n+      \"description\": \"If true, custom modules can make changes directly to records in the database\"\n+    },\n+    \"provenanceGranularityLevel\": {\n+      \"type\": \"string\",\n+      \"description\": \"The granularity of the provenance tracking information: coarse (default) to store document-level provenance information only, fine to store document-level and property-level provenance information, or off to disable provenance tracking in future job runs. Applies only to mapping, matching, merging, mastering, and custom steps.\",\n+      \"enum\": [\n+        \"off\",\n+        \"coarse\",\n+        \"fine\"\n+      ]\n+    },\n+    \"constrainSourceQueryToJob\": {\n+      \"type\": \"boolean\",\n+      \"description\": \"If true, the query is applied to the documents that were created or modified in the same job that executes the step\"\n+    },\n+    \"sourceQueryIsScript\": {\n+      \"type\": \"boolean\",\n+      \"description\": \"Added in 5.3.0; if true, then sourceQuery can be any JavaScript statement that can be passed into xdmp.eval\"\n+    },\n+    \"sourceQuery\": {\n+      \"type\": \"string\",\n+      \"description\": \"Defines the items to be processed by the step; must be a cts.query or cts.uris statement if sourceQueryIsScript is false\"\n+    },\n+    \"targetEntityTypeId\": {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b921f8d8e809e45c3d03b4c1fe6d7ec4c9acc20f"}, "originalPosition": 134}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3423, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}