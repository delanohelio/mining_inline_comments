{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwMTExODkz", "number": 4855, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMzoyMDozNlrOE4ZaiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMzoyMDozNlrOE4ZaiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NTcyMTA0OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/components/entities/matching/threshold-modal/threshold-modal.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMzoyMDozNlrOHySsyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMzo1NTowNVrOHyT0wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ5NzIyNA==", "bodyText": "We need to check for duplicate names when the action is custom as well.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4855#discussion_r522497224", "createdAt": "2020-11-12T23:20:36Z", "author": {"login": "ryanjdew"}, "path": "marklogic-data-hub-central/ui/src/components/entities/matching/threshold-modal/threshold-modal.tsx", "diffHunk": "@@ -0,0 +1,412 @@\n+import React, { useState, useEffect, useContext } from 'react';\n+import { Modal, Form, Input, Icon } from 'antd';\n+import { MLButton, MLTooltip, MLSelect } from '@marklogic/design-system';\n+import styles from './threshold-modal.module.scss';\n+\n+import { CurationContext } from '../../../../util/curation-context';\n+import { MatchingStep, Threshold } from '../../../../types/curation-types';\n+import { Definition } from '../../../../types/modeling-types';\n+import { NewMatchTooltips } from '../../../../config/tooltips.config';\n+import { updateMatchingArtifact } from '../../../../api/matching';\n+\n+type Props = {\n+  isVisible: boolean;\n+  editThreshold: any;\n+  toggleModal: (isVisible: boolean) => void;\n+};\n+\n+const layout = {\n+  labelCol: { span: 8 },\n+  wrapperCol: { span: 16 },\n+};\n+\n+const THRESHOLD_TYPE_OPTIONS = [\n+  { name: 'Merge', value: 'merge' },\n+  { name: 'Notify', value: 'notify' },\n+  { name: 'Custom', value: 'custom' },\n+];\n+\n+const { MLOption } = MLSelect;\n+ \n+const ThresholdModal: React.FC<Props> = (props) => {\n+  const { curationOptions, updateActiveStepArtifact } = useContext(CurationContext);\n+\n+  const [nameValue, setNameValue] = useState('');\n+  const [nameErrorMessage, setNameErrorMessage] = useState('');\n+\n+  const [actionType, setActionType] = useState<string | undefined>(undefined);\n+  const [actionTypeErrorMessage, setActionTypeErrorMessage] = useState('');\n+\n+  const [uriValue, setUriValue] = useState('');\n+  const [uriErrorMessage, setUriErrorMessage] = useState('');\n+  const [functionValue, setFunctionValue] = useState('');\n+  const [functionErrorMessage, setFunctionErrorMessage] = useState('');\n+  const [namespaceValue, setNamespaceValue] = useState('');\n+\n+  useEffect(() => {\n+    if (Object.keys(props.editThreshold).length !== 0 && props.isVisible) {\n+      let editThreshold = props.editThreshold;\n+      setNameValue(editThreshold['thresholdName']);\n+      setActionType(editThreshold['action']);\n+      if (editThreshold['action'] === 'custom') {\n+        setUriValue(editThreshold['actionModulePath'])\n+        if (editThreshold.hasOwnProperty('actionModuleNamespace')) {\n+          setNamespaceValue(editThreshold['actionModuleNamespace'])\n+        }\n+        if (editThreshold.hasOwnProperty('actionModuleFunction')) {\n+          setFunctionValue(editThreshold['actionModuleFunction'])\n+        }\n+      }\n+    }\n+  }, [JSON.stringify(props.editThreshold)]);\n+\n+  const handleInputChange = (event) => {\n+    switch(event.target.id) {\n+      case 'name-input':\n+        if (event.target.value === '') {\n+          setNameErrorMessage('A threshold name is required');\n+        } else {\n+          setNameErrorMessage('');\n+        }\n+        setNameValue(event.target.value);\n+        break;\n+\n+      case 'uri-input':\n+        if (event.target.value === '') {\n+          setUriErrorMessage('A URI is required');\n+        } else {\n+          setUriErrorMessage('');\n+        }\n+        setUriValue(event.target.value);\n+        break;\n+\n+      case 'function-input':\n+        if (event.target.value === '') {\n+          setFunctionErrorMessage('A function is required');\n+        } else {\n+          setFunctionErrorMessage('');\n+        }\n+        setFunctionValue(event.target.value);\n+        break;\n+\n+      case 'namespace-input':\n+        setNamespaceValue(event.target.value);\n+        break;\n+\n+      default:\n+        break;\n+    }\n+  };\n+\n+  const closeModal = () => {\n+    resetModal();\n+    props.toggleModal(false);\n+  };\n+\n+  const resetModal = () => {\n+    setNameValue('');\n+    setNameErrorMessage('');\n+    setActionType(undefined);\n+    setActionTypeErrorMessage('');\n+    setUriValue('');\n+    setUriErrorMessage('');\n+    setFunctionValue('');\n+    setFunctionErrorMessage('');\n+    setNamespaceValue('');\n+  };\n+\n+  const onSubmit = async (event) => {\n+    event.preventDefault();\n+    let nameErrorMessage = '';\n+    let actionErrorMessage = '';\n+    let thresholdName = nameValue || '';\n+    if (thresholdName === '') {\n+      nameErrorMessage = 'A threshold name is required';\n+    }\n+\n+    if (actionType === '' || actionType === undefined) {\n+      actionErrorMessage = 'An action is required';\n+    }\n+    switch(actionType) {\n+      case 'merge':\n+      case 'notify':\n+        {\n+\n+          if (actionErrorMessage === '' && nameErrorMessage === '' && Object.keys(props.editThreshold).length === 0) {\n+            let newThreshold: Threshold = {\n+              thresholdName,\n+              action: actionType,\n+              score: 0\n+            };\n+\n+            let newStepArtifact: MatchingStep = curationOptions.activeStep.stepArtifact;\n+            let duplicateNames = newStepArtifact.thresholds.filter( threshold => threshold.thresholdName === thresholdName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51920593278ac19b86df559ea7235330f2379015"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNTY0OQ==", "bodyText": "Fixed this and made UX change to delete threshold confirmation", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4855#discussion_r522515649", "createdAt": "2020-11-12T23:55:05Z", "author": {"login": "brucean52"}, "path": "marklogic-data-hub-central/ui/src/components/entities/matching/threshold-modal/threshold-modal.tsx", "diffHunk": "@@ -0,0 +1,412 @@\n+import React, { useState, useEffect, useContext } from 'react';\n+import { Modal, Form, Input, Icon } from 'antd';\n+import { MLButton, MLTooltip, MLSelect } from '@marklogic/design-system';\n+import styles from './threshold-modal.module.scss';\n+\n+import { CurationContext } from '../../../../util/curation-context';\n+import { MatchingStep, Threshold } from '../../../../types/curation-types';\n+import { Definition } from '../../../../types/modeling-types';\n+import { NewMatchTooltips } from '../../../../config/tooltips.config';\n+import { updateMatchingArtifact } from '../../../../api/matching';\n+\n+type Props = {\n+  isVisible: boolean;\n+  editThreshold: any;\n+  toggleModal: (isVisible: boolean) => void;\n+};\n+\n+const layout = {\n+  labelCol: { span: 8 },\n+  wrapperCol: { span: 16 },\n+};\n+\n+const THRESHOLD_TYPE_OPTIONS = [\n+  { name: 'Merge', value: 'merge' },\n+  { name: 'Notify', value: 'notify' },\n+  { name: 'Custom', value: 'custom' },\n+];\n+\n+const { MLOption } = MLSelect;\n+ \n+const ThresholdModal: React.FC<Props> = (props) => {\n+  const { curationOptions, updateActiveStepArtifact } = useContext(CurationContext);\n+\n+  const [nameValue, setNameValue] = useState('');\n+  const [nameErrorMessage, setNameErrorMessage] = useState('');\n+\n+  const [actionType, setActionType] = useState<string | undefined>(undefined);\n+  const [actionTypeErrorMessage, setActionTypeErrorMessage] = useState('');\n+\n+  const [uriValue, setUriValue] = useState('');\n+  const [uriErrorMessage, setUriErrorMessage] = useState('');\n+  const [functionValue, setFunctionValue] = useState('');\n+  const [functionErrorMessage, setFunctionErrorMessage] = useState('');\n+  const [namespaceValue, setNamespaceValue] = useState('');\n+\n+  useEffect(() => {\n+    if (Object.keys(props.editThreshold).length !== 0 && props.isVisible) {\n+      let editThreshold = props.editThreshold;\n+      setNameValue(editThreshold['thresholdName']);\n+      setActionType(editThreshold['action']);\n+      if (editThreshold['action'] === 'custom') {\n+        setUriValue(editThreshold['actionModulePath'])\n+        if (editThreshold.hasOwnProperty('actionModuleNamespace')) {\n+          setNamespaceValue(editThreshold['actionModuleNamespace'])\n+        }\n+        if (editThreshold.hasOwnProperty('actionModuleFunction')) {\n+          setFunctionValue(editThreshold['actionModuleFunction'])\n+        }\n+      }\n+    }\n+  }, [JSON.stringify(props.editThreshold)]);\n+\n+  const handleInputChange = (event) => {\n+    switch(event.target.id) {\n+      case 'name-input':\n+        if (event.target.value === '') {\n+          setNameErrorMessage('A threshold name is required');\n+        } else {\n+          setNameErrorMessage('');\n+        }\n+        setNameValue(event.target.value);\n+        break;\n+\n+      case 'uri-input':\n+        if (event.target.value === '') {\n+          setUriErrorMessage('A URI is required');\n+        } else {\n+          setUriErrorMessage('');\n+        }\n+        setUriValue(event.target.value);\n+        break;\n+\n+      case 'function-input':\n+        if (event.target.value === '') {\n+          setFunctionErrorMessage('A function is required');\n+        } else {\n+          setFunctionErrorMessage('');\n+        }\n+        setFunctionValue(event.target.value);\n+        break;\n+\n+      case 'namespace-input':\n+        setNamespaceValue(event.target.value);\n+        break;\n+\n+      default:\n+        break;\n+    }\n+  };\n+\n+  const closeModal = () => {\n+    resetModal();\n+    props.toggleModal(false);\n+  };\n+\n+  const resetModal = () => {\n+    setNameValue('');\n+    setNameErrorMessage('');\n+    setActionType(undefined);\n+    setActionTypeErrorMessage('');\n+    setUriValue('');\n+    setUriErrorMessage('');\n+    setFunctionValue('');\n+    setFunctionErrorMessage('');\n+    setNamespaceValue('');\n+  };\n+\n+  const onSubmit = async (event) => {\n+    event.preventDefault();\n+    let nameErrorMessage = '';\n+    let actionErrorMessage = '';\n+    let thresholdName = nameValue || '';\n+    if (thresholdName === '') {\n+      nameErrorMessage = 'A threshold name is required';\n+    }\n+\n+    if (actionType === '' || actionType === undefined) {\n+      actionErrorMessage = 'An action is required';\n+    }\n+    switch(actionType) {\n+      case 'merge':\n+      case 'notify':\n+        {\n+\n+          if (actionErrorMessage === '' && nameErrorMessage === '' && Object.keys(props.editThreshold).length === 0) {\n+            let newThreshold: Threshold = {\n+              thresholdName,\n+              action: actionType,\n+              score: 0\n+            };\n+\n+            let newStepArtifact: MatchingStep = curationOptions.activeStep.stepArtifact;\n+            let duplicateNames = newStepArtifact.thresholds.filter( threshold => threshold.thresholdName === thresholdName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ5NzIyNA=="}, "originalCommit": {"oid": "51920593278ac19b86df559ea7235330f2379015"}, "originalPosition": 143}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3103, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}