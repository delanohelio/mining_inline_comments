{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5NzAxODEy", "number": 4995, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjoxNzo0OVrOFF1UnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjoxNzo0OVrOFF1UnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjYwODI4OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/components/entities/matching/matching-card.test.tsx", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjoxNzo0OVrOIGigCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjo1OToyM1rOIGj0HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcyNzYyNQ==", "bodyText": "@brucean52 can we also add validations for checking whether we are getting redirected to flows and the match step is added to the existing flow/the newly added flow.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4995#discussion_r543727625", "createdAt": "2020-12-15T22:17:49Z", "author": {"login": "ngodugu-marklogic"}, "path": "marklogic-data-hub-central/ui/src/components/entities/matching/matching-card.test.tsx", "diffHunk": "@@ -116,4 +119,161 @@ describe(\"Matching cards view component\", () => {\n     expect(queryAllByText(\"Yes\")).toHaveLength(0);\n     expect(deleteMatchingArtifact).not.toBeCalled();\n   });\n+\n+  it(\"can render/edit match steps with writeMatchMerge authority\", () => {\n+    const deleteMatchingArtifact = jest.fn();\n+    const {getByText, getByLabelText, getByTestId, queryAllByRole} =  render(\n+      <Router>\n+        <MatchingCard\n+          {...defaultProps}\n+          deleteMatchingArtifact={deleteMatchingArtifact}\n+        />\n+      </Router>\n+    );\n+\n+    expect(getByLabelText(\"icon: plus-circle\")).toBeInTheDocument();\n+    expect(getByText(\"matchCustomers\")).toBeInTheDocument();\n+    expect(getByText(\"matchCustomersEmpty\")).toBeInTheDocument();\n+\n+    //Verify if the card renders fine\n+    expect(getByTestId(\"matchCustomers-edit\")).toBeInTheDocument();\n+    expect(getByTestId(\"matchCustomersEmpty-edit\")).toBeInTheDocument();\n+    expect(queryAllByRole(\"disabled-delete-matching\")).toHaveLength(0);\n+\n+    // check if delete tooltip appears and user is able to proceed with deletion of the step\n+    userEvent.hover(getByTestId(\"matchCustomers-delete\"));\n+    wait(() => expect(getByText(\"Delete\")).toBeInTheDocument());\n+    userEvent.click(getByTestId(\"matchCustomers-delete\"));\n+    wait(() => expect(getByLabelText(\"delete-step-text\")).toBeInTheDocument());\n+    userEvent.click(getByText(\"Yes\"));\n+    expect(deleteMatchingArtifact).toBeCalled();\n+  });\n+\n+  it(\"can add a step to a new flow\", () => {\n+    const {getByText, getByTestId} =  render(\n+      <Router>\n+        <MatchingCard {...defaultProps}/>\n+      </Router>\n+    );\n+\n+    expect(getByText(\"matchCustomers\")).toBeInTheDocument();\n+    expect(getByText(\"matchCustomersEmpty\")).toBeInTheDocument();\n+    fireEvent.mouseOver(getByTestId(\"Customer-matchCustomers-step\"));\n+\n+    wait(() => {\n+      expect(getByText(\"Add Step to a new flow\")).toBeInTheDocument();\n+      userEvent.click(getByText(\"Add Step to a new flow\"));\n+    });\n+    wait(() => {\n+      expect(screen.getByText(\"NewFlow\")).toBeInTheDocument();\n+      userEvent.type(screen.getByPlaceholderText(\"Enter name\"), \"testFlow\");\n+      userEvent.click(screen.getByText(\"Save\"));\n+    });\n+    // Check if the /tiles/run/add route has been called\n+    wait(() => { expect(mockHistoryPush).toHaveBeenCalledWith(\"/tiles/run/add\"); });\n+  });\n+\n+  it(\"can add a step to new flow from run menu\", () => {\n+    const {getByText, getByTestId} =  render(\n+      <Router>\n+        <MatchingCard {...defaultProps}/>\n+      </Router>\n+    );\n+\n+    expect(getByText(\"matchCustomers\")).toBeInTheDocument();\n+    expect(getByText(\"matchCustomersEmpty\")).toBeInTheDocument();\n+    userEvent.click(getByTestId(\"matchCustomers-run\"));\n+    wait(() => {\n+      expect(getByText(\"Run Step in a new flow\")).toBeInTheDocument();\n+      userEvent.click(getByText(\"Run Step in a new flow\"));\n+    });\n+    wait(() => {\n+      expect(screen.getByText(\"NewFlow\")).toBeInTheDocument();\n+      userEvent.type(screen.getByPlaceholderText(\"Enter name\"), \"testFlow\");\n+      userEvent.click(screen.getByText(\"Save\"));\n+    });\n+    // Check if the /tiles/run/add route has been called\n+    wait(() => { expect(mockHistoryPush).toHaveBeenCalledWith(\"/tiles/run/add\"); });\n+  });\n+\n+  it(\"can add a step to an existing flow\", () => {\n+    const {getByText, getByTestId, getByLabelText, queryByText} =  render(\n+      <Router>\n+        <MatchingCard {...defaultProps}/>\n+      </Router>\n+    );\n+\n+    expect(getByText(\"matchCustomers\")).toBeInTheDocument();\n+\n+    //mouseover to trigger flow menu\n+    fireEvent.mouseOver(getByTestId(\"Customer-matchCustomers-step\"));\n+    wait(() => {\n+      expect(getByText(\"Run Step in an existing flow\")).toBeInTheDocument();\n+      //mouse out for card view\n+      fireEvent.mouseOut(getByTestId(\"Customer-matchCustomers-step\"));\n+    });\n+\n+    wait(() => {\n+      expect(queryByText(\"Run Step in an existing flow\")).toBeNull();\n+      fireEvent.mouseOver(getByTestId(\"Customer-matchCustomers-step\"));\n+    });\n+\n+    wait(() => {\n+      expect(getByText(\"Run Step in an existing flow\")).toBeInTheDocument();\n+      userEvent.click(getByTestId(\"matchCustomers-flowsList\"));\n+      userEvent.click(getByLabelText(\"customerJSONFlow-option\"));\n+    });\n+\n+    wait(() => {\n+      expect(getByLabelText(\"step-not-in-flow-run\")).toBeInTheDocument();\n+      userEvent.click(getByTestId(\"matchCustomers-to-test-Confirm\"));\n+    });\n+    // Check if the /tiles/run/add route has been called\n+    wait(() => { expect(mockHistoryPush).toHaveBeenCalledWith(\"/tiles/run/add\"); });\n+  });\n+\n+  it(\"can add a step to an existing flow from run menu\", () => {\n+    const {getByText, getByTestId, getByLabelText} =  render(\n+      <Router>\n+        <MatchingCard {...defaultProps}/>\n+      </Router>\n+    );\n+\n+    expect(getByText(\"matchCustomers\")).toBeInTheDocument();\n+    expect(getByText(\"matchCustomersEmpty\")).toBeInTheDocument();\n+    userEvent.click(getByTestId(\"matchCustomers-run\"));\n+    wait(() => {\n+      expect(getByText(\"Run Step in an existing flow\")).toBeInTheDocument();\n+      userEvent.click(getByTestId(\"matchCustomers-run-flowsList\"));\n+      userEvent.click(getByLabelText(\"customerJSONFlow-run-option\"));\n+    });\n+    wait(() => {\n+      expect(getByLabelText(\"step-not-in-flow-run\")).toBeInTheDocument();\n+      userEvent.click(getByTestId(\"matchCustomers-to-test-Confirm\"));\n+    });\n+    // Check if the /tiles/run/add route has been called\n+    wait(() => { expect(mockHistoryPush).toHaveBeenCalledWith(\"/tiles/run/add\"); });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc9143385f28332a71856f7edddefaa883321a6c"}, "originalPosition": 248}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc0ODQxMw==", "bodyText": "As per discussion with Bruce, will be taken care as part of DHFPROD-4548.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4995#discussion_r543748413", "createdAt": "2020-12-15T22:57:49Z", "author": {"login": "ngodugu-marklogic"}, "path": "marklogic-data-hub-central/ui/src/components/entities/matching/matching-card.test.tsx", "diffHunk": "@@ -116,4 +119,161 @@ describe(\"Matching cards view component\", () => {\n     expect(queryAllByText(\"Yes\")).toHaveLength(0);\n     expect(deleteMatchingArtifact).not.toBeCalled();\n   });\n+\n+  it(\"can render/edit match steps with writeMatchMerge authority\", () => {\n+    const deleteMatchingArtifact = jest.fn();\n+    const {getByText, getByLabelText, getByTestId, queryAllByRole} =  render(\n+      <Router>\n+        <MatchingCard\n+          {...defaultProps}\n+          deleteMatchingArtifact={deleteMatchingArtifact}\n+        />\n+      </Router>\n+    );\n+\n+    expect(getByLabelText(\"icon: plus-circle\")).toBeInTheDocument();\n+    expect(getByText(\"matchCustomers\")).toBeInTheDocument();\n+    expect(getByText(\"matchCustomersEmpty\")).toBeInTheDocument();\n+\n+    //Verify if the card renders fine\n+    expect(getByTestId(\"matchCustomers-edit\")).toBeInTheDocument();\n+    expect(getByTestId(\"matchCustomersEmpty-edit\")).toBeInTheDocument();\n+    expect(queryAllByRole(\"disabled-delete-matching\")).toHaveLength(0);\n+\n+    // check if delete tooltip appears and user is able to proceed with deletion of the step\n+    userEvent.hover(getByTestId(\"matchCustomers-delete\"));\n+    wait(() => expect(getByText(\"Delete\")).toBeInTheDocument());\n+    userEvent.click(getByTestId(\"matchCustomers-delete\"));\n+    wait(() => expect(getByLabelText(\"delete-step-text\")).toBeInTheDocument());\n+    userEvent.click(getByText(\"Yes\"));\n+    expect(deleteMatchingArtifact).toBeCalled();\n+  });\n+\n+  it(\"can add a step to a new flow\", () => {\n+    const {getByText, getByTestId} =  render(\n+      <Router>\n+        <MatchingCard {...defaultProps}/>\n+      </Router>\n+    );\n+\n+    expect(getByText(\"matchCustomers\")).toBeInTheDocument();\n+    expect(getByText(\"matchCustomersEmpty\")).toBeInTheDocument();\n+    fireEvent.mouseOver(getByTestId(\"Customer-matchCustomers-step\"));\n+\n+    wait(() => {\n+      expect(getByText(\"Add Step to a new flow\")).toBeInTheDocument();\n+      userEvent.click(getByText(\"Add Step to a new flow\"));\n+    });\n+    wait(() => {\n+      expect(screen.getByText(\"NewFlow\")).toBeInTheDocument();\n+      userEvent.type(screen.getByPlaceholderText(\"Enter name\"), \"testFlow\");\n+      userEvent.click(screen.getByText(\"Save\"));\n+    });\n+    // Check if the /tiles/run/add route has been called\n+    wait(() => { expect(mockHistoryPush).toHaveBeenCalledWith(\"/tiles/run/add\"); });\n+  });\n+\n+  it(\"can add a step to new flow from run menu\", () => {\n+    const {getByText, getByTestId} =  render(\n+      <Router>\n+        <MatchingCard {...defaultProps}/>\n+      </Router>\n+    );\n+\n+    expect(getByText(\"matchCustomers\")).toBeInTheDocument();\n+    expect(getByText(\"matchCustomersEmpty\")).toBeInTheDocument();\n+    userEvent.click(getByTestId(\"matchCustomers-run\"));\n+    wait(() => {\n+      expect(getByText(\"Run Step in a new flow\")).toBeInTheDocument();\n+      userEvent.click(getByText(\"Run Step in a new flow\"));\n+    });\n+    wait(() => {\n+      expect(screen.getByText(\"NewFlow\")).toBeInTheDocument();\n+      userEvent.type(screen.getByPlaceholderText(\"Enter name\"), \"testFlow\");\n+      userEvent.click(screen.getByText(\"Save\"));\n+    });\n+    // Check if the /tiles/run/add route has been called\n+    wait(() => { expect(mockHistoryPush).toHaveBeenCalledWith(\"/tiles/run/add\"); });\n+  });\n+\n+  it(\"can add a step to an existing flow\", () => {\n+    const {getByText, getByTestId, getByLabelText, queryByText} =  render(\n+      <Router>\n+        <MatchingCard {...defaultProps}/>\n+      </Router>\n+    );\n+\n+    expect(getByText(\"matchCustomers\")).toBeInTheDocument();\n+\n+    //mouseover to trigger flow menu\n+    fireEvent.mouseOver(getByTestId(\"Customer-matchCustomers-step\"));\n+    wait(() => {\n+      expect(getByText(\"Run Step in an existing flow\")).toBeInTheDocument();\n+      //mouse out for card view\n+      fireEvent.mouseOut(getByTestId(\"Customer-matchCustomers-step\"));\n+    });\n+\n+    wait(() => {\n+      expect(queryByText(\"Run Step in an existing flow\")).toBeNull();\n+      fireEvent.mouseOver(getByTestId(\"Customer-matchCustomers-step\"));\n+    });\n+\n+    wait(() => {\n+      expect(getByText(\"Run Step in an existing flow\")).toBeInTheDocument();\n+      userEvent.click(getByTestId(\"matchCustomers-flowsList\"));\n+      userEvent.click(getByLabelText(\"customerJSONFlow-option\"));\n+    });\n+\n+    wait(() => {\n+      expect(getByLabelText(\"step-not-in-flow-run\")).toBeInTheDocument();\n+      userEvent.click(getByTestId(\"matchCustomers-to-test-Confirm\"));\n+    });\n+    // Check if the /tiles/run/add route has been called\n+    wait(() => { expect(mockHistoryPush).toHaveBeenCalledWith(\"/tiles/run/add\"); });\n+  });\n+\n+  it(\"can add a step to an existing flow from run menu\", () => {\n+    const {getByText, getByTestId, getByLabelText} =  render(\n+      <Router>\n+        <MatchingCard {...defaultProps}/>\n+      </Router>\n+    );\n+\n+    expect(getByText(\"matchCustomers\")).toBeInTheDocument();\n+    expect(getByText(\"matchCustomersEmpty\")).toBeInTheDocument();\n+    userEvent.click(getByTestId(\"matchCustomers-run\"));\n+    wait(() => {\n+      expect(getByText(\"Run Step in an existing flow\")).toBeInTheDocument();\n+      userEvent.click(getByTestId(\"matchCustomers-run-flowsList\"));\n+      userEvent.click(getByLabelText(\"customerJSONFlow-run-option\"));\n+    });\n+    wait(() => {\n+      expect(getByLabelText(\"step-not-in-flow-run\")).toBeInTheDocument();\n+      userEvent.click(getByTestId(\"matchCustomers-to-test-Confirm\"));\n+    });\n+    // Check if the /tiles/run/add route has been called\n+    wait(() => { expect(mockHistoryPush).toHaveBeenCalledWith(\"/tiles/run/add\"); });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcyNzYyNQ=="}, "originalCommit": {"oid": "fc9143385f28332a71856f7edddefaa883321a6c"}, "originalPosition": 248}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc0OTE0OQ==", "bodyText": "As we discussed, there's already a RTL test for this and I will add additional e2e testing for this in a later PR.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4995#discussion_r543749149", "createdAt": "2020-12-15T22:59:23Z", "author": {"login": "brucean52"}, "path": "marklogic-data-hub-central/ui/src/components/entities/matching/matching-card.test.tsx", "diffHunk": "@@ -116,4 +119,161 @@ describe(\"Matching cards view component\", () => {\n     expect(queryAllByText(\"Yes\")).toHaveLength(0);\n     expect(deleteMatchingArtifact).not.toBeCalled();\n   });\n+\n+  it(\"can render/edit match steps with writeMatchMerge authority\", () => {\n+    const deleteMatchingArtifact = jest.fn();\n+    const {getByText, getByLabelText, getByTestId, queryAllByRole} =  render(\n+      <Router>\n+        <MatchingCard\n+          {...defaultProps}\n+          deleteMatchingArtifact={deleteMatchingArtifact}\n+        />\n+      </Router>\n+    );\n+\n+    expect(getByLabelText(\"icon: plus-circle\")).toBeInTheDocument();\n+    expect(getByText(\"matchCustomers\")).toBeInTheDocument();\n+    expect(getByText(\"matchCustomersEmpty\")).toBeInTheDocument();\n+\n+    //Verify if the card renders fine\n+    expect(getByTestId(\"matchCustomers-edit\")).toBeInTheDocument();\n+    expect(getByTestId(\"matchCustomersEmpty-edit\")).toBeInTheDocument();\n+    expect(queryAllByRole(\"disabled-delete-matching\")).toHaveLength(0);\n+\n+    // check if delete tooltip appears and user is able to proceed with deletion of the step\n+    userEvent.hover(getByTestId(\"matchCustomers-delete\"));\n+    wait(() => expect(getByText(\"Delete\")).toBeInTheDocument());\n+    userEvent.click(getByTestId(\"matchCustomers-delete\"));\n+    wait(() => expect(getByLabelText(\"delete-step-text\")).toBeInTheDocument());\n+    userEvent.click(getByText(\"Yes\"));\n+    expect(deleteMatchingArtifact).toBeCalled();\n+  });\n+\n+  it(\"can add a step to a new flow\", () => {\n+    const {getByText, getByTestId} =  render(\n+      <Router>\n+        <MatchingCard {...defaultProps}/>\n+      </Router>\n+    );\n+\n+    expect(getByText(\"matchCustomers\")).toBeInTheDocument();\n+    expect(getByText(\"matchCustomersEmpty\")).toBeInTheDocument();\n+    fireEvent.mouseOver(getByTestId(\"Customer-matchCustomers-step\"));\n+\n+    wait(() => {\n+      expect(getByText(\"Add Step to a new flow\")).toBeInTheDocument();\n+      userEvent.click(getByText(\"Add Step to a new flow\"));\n+    });\n+    wait(() => {\n+      expect(screen.getByText(\"NewFlow\")).toBeInTheDocument();\n+      userEvent.type(screen.getByPlaceholderText(\"Enter name\"), \"testFlow\");\n+      userEvent.click(screen.getByText(\"Save\"));\n+    });\n+    // Check if the /tiles/run/add route has been called\n+    wait(() => { expect(mockHistoryPush).toHaveBeenCalledWith(\"/tiles/run/add\"); });\n+  });\n+\n+  it(\"can add a step to new flow from run menu\", () => {\n+    const {getByText, getByTestId} =  render(\n+      <Router>\n+        <MatchingCard {...defaultProps}/>\n+      </Router>\n+    );\n+\n+    expect(getByText(\"matchCustomers\")).toBeInTheDocument();\n+    expect(getByText(\"matchCustomersEmpty\")).toBeInTheDocument();\n+    userEvent.click(getByTestId(\"matchCustomers-run\"));\n+    wait(() => {\n+      expect(getByText(\"Run Step in a new flow\")).toBeInTheDocument();\n+      userEvent.click(getByText(\"Run Step in a new flow\"));\n+    });\n+    wait(() => {\n+      expect(screen.getByText(\"NewFlow\")).toBeInTheDocument();\n+      userEvent.type(screen.getByPlaceholderText(\"Enter name\"), \"testFlow\");\n+      userEvent.click(screen.getByText(\"Save\"));\n+    });\n+    // Check if the /tiles/run/add route has been called\n+    wait(() => { expect(mockHistoryPush).toHaveBeenCalledWith(\"/tiles/run/add\"); });\n+  });\n+\n+  it(\"can add a step to an existing flow\", () => {\n+    const {getByText, getByTestId, getByLabelText, queryByText} =  render(\n+      <Router>\n+        <MatchingCard {...defaultProps}/>\n+      </Router>\n+    );\n+\n+    expect(getByText(\"matchCustomers\")).toBeInTheDocument();\n+\n+    //mouseover to trigger flow menu\n+    fireEvent.mouseOver(getByTestId(\"Customer-matchCustomers-step\"));\n+    wait(() => {\n+      expect(getByText(\"Run Step in an existing flow\")).toBeInTheDocument();\n+      //mouse out for card view\n+      fireEvent.mouseOut(getByTestId(\"Customer-matchCustomers-step\"));\n+    });\n+\n+    wait(() => {\n+      expect(queryByText(\"Run Step in an existing flow\")).toBeNull();\n+      fireEvent.mouseOver(getByTestId(\"Customer-matchCustomers-step\"));\n+    });\n+\n+    wait(() => {\n+      expect(getByText(\"Run Step in an existing flow\")).toBeInTheDocument();\n+      userEvent.click(getByTestId(\"matchCustomers-flowsList\"));\n+      userEvent.click(getByLabelText(\"customerJSONFlow-option\"));\n+    });\n+\n+    wait(() => {\n+      expect(getByLabelText(\"step-not-in-flow-run\")).toBeInTheDocument();\n+      userEvent.click(getByTestId(\"matchCustomers-to-test-Confirm\"));\n+    });\n+    // Check if the /tiles/run/add route has been called\n+    wait(() => { expect(mockHistoryPush).toHaveBeenCalledWith(\"/tiles/run/add\"); });\n+  });\n+\n+  it(\"can add a step to an existing flow from run menu\", () => {\n+    const {getByText, getByTestId, getByLabelText} =  render(\n+      <Router>\n+        <MatchingCard {...defaultProps}/>\n+      </Router>\n+    );\n+\n+    expect(getByText(\"matchCustomers\")).toBeInTheDocument();\n+    expect(getByText(\"matchCustomersEmpty\")).toBeInTheDocument();\n+    userEvent.click(getByTestId(\"matchCustomers-run\"));\n+    wait(() => {\n+      expect(getByText(\"Run Step in an existing flow\")).toBeInTheDocument();\n+      userEvent.click(getByTestId(\"matchCustomers-run-flowsList\"));\n+      userEvent.click(getByLabelText(\"customerJSONFlow-run-option\"));\n+    });\n+    wait(() => {\n+      expect(getByLabelText(\"step-not-in-flow-run\")).toBeInTheDocument();\n+      userEvent.click(getByTestId(\"matchCustomers-to-test-Confirm\"));\n+    });\n+    // Check if the /tiles/run/add route has been called\n+    wait(() => { expect(mockHistoryPush).toHaveBeenCalledWith(\"/tiles/run/add\"); });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcyNzYyNQ=="}, "originalCommit": {"oid": "fc9143385f28332a71856f7edddefaa883321a6c"}, "originalPosition": 248}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3051, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}