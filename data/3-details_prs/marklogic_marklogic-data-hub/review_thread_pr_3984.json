{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxNTgwODQy", "number": 3984, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMDo1Mzo1OVrOD-y8LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTo0NDo1NVrOD_0qHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTcyOTA4OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/steps/IngestionStepControllerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMDo1Mzo1OVrOGZHc7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMDo1Mzo1OVrOGZHc7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4OTY3Ng==", "bodyText": "No need to change, but just for future reference, you can do loginAsTestUserWithRoles(\"hub-central-load-reader\")", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3984#discussion_r428989676", "createdAt": "2020-05-22T00:53:59Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/steps/IngestionStepControllerTest.java", "diffHunk": "@@ -46,4 +53,39 @@ void getIngestionSteps() throws Exception {\n                 assertEquals(\"secondStep\", array.get(1).get(\"name\").asText());\n             });\n     }\n+\n+    @Test\n+    void permittedReadUser() throws Exception {\n+        installReferenceModelProject();\n+        postJson(PATH + \"/firstStep\", newDefaultIngestionStep(\"firstStep\"));\n+\n+        setTestUserRoles(\"hub-central-load-reader\");\n+\n+        loginAsTestUser();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3c8ddbd97a125c9dd41ba3761a387e32c7892bd"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTc0NDQ4OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/steps/IngestionStepControllerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMTowNDowOFrOGZHmaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMTowNDowOFrOGZHmaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk5MjEwNw==", "bodyText": "I think you can just do getJson here?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3984#discussion_r428992107", "createdAt": "2020-05-22T01:04:08Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/steps/IngestionStepControllerTest.java", "diffHunk": "@@ -46,4 +53,39 @@ void getIngestionSteps() throws Exception {\n                 assertEquals(\"secondStep\", array.get(1).get(\"name\").asText());\n             });\n     }\n+\n+    @Test\n+    void permittedReadUser() throws Exception {\n+        installReferenceModelProject();\n+        postJson(PATH + \"/firstStep\", newDefaultIngestionStep(\"firstStep\"));\n+\n+        setTestUserRoles(\"hub-central-load-reader\");\n+\n+        loginAsTestUser();\n+\n+        mockMvc.perform(get(PATH + \"/{stepName}\", \"firstStep\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3c8ddbd97a125c9dd41ba3761a387e32c7892bd"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTc0Nzk5OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/steps/IngestionStepControllerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMTowNjozM1rOGZHojA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMTowNjozM1rOGZHojA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk5MjY1Mg==", "bodyText": "Just an FYI, there's a verifyRequestIsForbidden helper method coming in the 4820 PR. I'll see if I can get that merged into develop tomorrow so you can use it.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3984#discussion_r428992652", "createdAt": "2020-05-22T01:06:33Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/steps/IngestionStepControllerTest.java", "diffHunk": "@@ -46,4 +53,39 @@ void getIngestionSteps() throws Exception {\n                 assertEquals(\"secondStep\", array.get(1).get(\"name\").asText());\n             });\n     }\n+\n+    @Test\n+    void permittedReadUser() throws Exception {\n+        installReferenceModelProject();\n+        postJson(PATH + \"/firstStep\", newDefaultIngestionStep(\"firstStep\"));\n+\n+        setTestUserRoles(\"hub-central-load-reader\");\n+\n+        loginAsTestUser();\n+\n+        mockMvc.perform(get(PATH + \"/{stepName}\", \"firstStep\")\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .session(mockHttpSession))\n+                .andDo(result -> {\n+                    MockHttpServletResponse response = result.getResponse();\n+                    assertEquals(HttpStatus.OK.value(), response.getStatus());\n+                });\n+    }\n+\n+    @Test\n+    void forbiddenReadUser() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3c8ddbd97a125c9dd41ba3761a387e32c7892bd"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTc0OTAzOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/impl/HubProjectImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMTowNzoyM1rOGZHpPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMTowNzoyM1rOGZHpPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk5MjgzMQ==", "bodyText": "The 4820 PR will also do this automatically for you.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3984#discussion_r428992831", "createdAt": "2020-05-22T01:07:23Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/impl/HubProjectImpl.java", "diffHunk": "@@ -369,15 +367,16 @@ public Path getCustomMappingFunctionsDir() {\n         writeRoleFile(rolesDir, \"data-hub-common.json\");\n         writeRoleFile(rolesDir, \"data-hub-common-writer.json\");\n         writeRoleFile(rolesDir, \"data-hub-security-internal.json\");\n-        writeRoleFile(rolesDir, \"data-hub-load-data-reader.json\");\n-        writeRoleFile(rolesDir, \"data-hub-load-data-writer.json\");\n+        writeRoleFile(rolesDir, \"data-hub-load-reader.json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3c8ddbd97a125c9dd41ba3761a387e32c7892bd"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTc1MTkxOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/hub-internal-config/security/roles/data-hub-load-reader.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMTowOTozMFrOGZHrIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMToxNDo0NFrOGZHvlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk5MzMxNA==", "bodyText": "Shouldn't this be \"data-hub-ingestion-reader\" for consistency with \"data-hub-mapping-reader\"? I think \"hub-central-load-reader\" is fine since HC wants to use the term \"load\", but for core DH, I think we should stay with \"ingestion\" for consistency with existing core DH capabilities.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3984#discussion_r428993314", "createdAt": "2020-05-22T01:09:30Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/hub-internal-config/security/roles/data-hub-load-reader.json", "diffHunk": "@@ -1,4 +1,4 @@\n {\n-  \"role-name\": \"data-hub-load-data-reader\",\n+  \"role-name\": \"data-hub-load-reader\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3c8ddbd97a125c9dd41ba3761a387e32c7892bd"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk5NDQ1Mg==", "bodyText": "I'm good with that. Makes sense to make it consistent.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3984#discussion_r428994452", "createdAt": "2020-05-22T01:14:44Z", "author": {"login": "ryanjdew"}, "path": "marklogic-data-hub/src/main/resources/hub-internal-config/security/roles/data-hub-load-reader.json", "diffHunk": "@@ -1,4 +1,4 @@\n {\n-  \"role-name\": \"data-hub-load-data-reader\",\n+  \"role-name\": \"data-hub-load-reader\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk5MzMxNA=="}, "originalCommit": {"oid": "b3c8ddbd97a125c9dd41ba3761a387e32c7892bd"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTc2MDE1OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/e2e/cypress/fixtures/users/developer.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjoyNzowMlrOGamabA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzozNDowOVrOGao-cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU0NTUxNg==", "bodyText": "Cypress tests only test explorer for now, so its ok to not update developer and operator users. There also is an open PR with which Cypress tests can run with any roles, just like we set roles to a user in core HC tests.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3984#discussion_r430545516", "createdAt": "2020-05-26T16:27:02Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/e2e/cypress/fixtures/users/developer.json", "diffHunk": "@@ -2,5 +2,5 @@\n     \"user-name\": \"dh-dev\",\n     \"description\": \"A data hub dev user\",\n     \"password\": \"dh-dev\",\n-    \"role\": [\"data-hub-developer\", \"hub-central-entity-exporter\", \"hub-central-mapping-reader\", \"hub-central-mapping-writer\"]\n+    \"role\": [\"data-hub-developer\", \"hub-central-entity-exporter\", \"hub-central-load-reader\", \"hub-central-mapping-reader\", \"hub-central-mapping-writer\"]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3c8ddbd97a125c9dd41ba3761a387e32c7892bd"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU4NzUwNA==", "bodyText": "Thanks. Good to know. I've removed the unnecessary roles with my latest PR updates.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3984#discussion_r430587504", "createdAt": "2020-05-26T17:34:09Z", "author": {"login": "ryanjdew"}, "path": "marklogic-data-hub-central/ui/e2e/cypress/fixtures/users/developer.json", "diffHunk": "@@ -2,5 +2,5 @@\n     \"user-name\": \"dh-dev\",\n     \"description\": \"A data hub dev user\",\n     \"password\": \"dh-dev\",\n-    \"role\": [\"data-hub-developer\", \"hub-central-entity-exporter\", \"hub-central-mapping-reader\", \"hub-central-mapping-writer\"]\n+    \"role\": [\"data-hub-developer\", \"hub-central-entity-exporter\", \"hub-central-load-reader\", \"hub-central-mapping-reader\", \"hub-central-mapping-writer\"]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU0NTUxNg=="}, "originalCommit": {"oid": "b3c8ddbd97a125c9dd41ba3761a387e32c7892bd"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjE1Mjc5OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/config/bench.config.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxODowOTo1M1rOGaqVXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMjowOTowNFrOGax_AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYwOTc1Nw==", "bodyText": "In the UI work, we typically use JSON as the default case. Can we have setupMockAPIs use the loads object (the JSON version) for /api/steps/ingestion instead of loadsXML? That will also make the test data more consistent since the flows test data has a step with a sourceFormat of 'json'.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3984#discussion_r430609757", "createdAt": "2020-05-26T18:09:53Z", "author": {"login": "wooldridge"}, "path": "marklogic-data-hub-central/ui/src/config/bench.config.ts", "diffHunk": "@@ -347,6 +347,25 @@ const loadsXML = {\"data\" :\n   \"status\" :200\n };\n \n+const setupMockAPIs = (axiosMock) => {\n+  return axiosMock.get['mockImplementation']((url) => {\n+    switch (url) {\n+      case '/api/flows':\n+        return Promise.resolve(flows)\n+      case '/api/models/primaryEntityTypes':\n+        return Promise.resolve(primaryEntityTypes)\n+      case '/api/steps/ingestion':\n+        return Promise.resolve(loadsXML)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a06dafa3532db6e74d93e5e1f8626712ad8551f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDczNTEwNQ==", "bodyText": "updated to use the loads object.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3984#discussion_r430735105", "createdAt": "2020-05-26T22:09:04Z", "author": {"login": "ryanjdew"}, "path": "marklogic-data-hub-central/ui/src/config/bench.config.ts", "diffHunk": "@@ -347,6 +347,25 @@ const loadsXML = {\"data\" :\n   \"status\" :200\n };\n \n+const setupMockAPIs = (axiosMock) => {\n+  return axiosMock.get['mockImplementation']((url) => {\n+    switch (url) {\n+      case '/api/flows':\n+        return Promise.resolve(flows)\n+      case '/api/models/primaryEntityTypes':\n+        return Promise.resolve(primaryEntityTypes)\n+      case '/api/steps/ingestion':\n+        return Promise.resolve(loadsXML)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYwOTc1Nw=="}, "originalCommit": {"oid": "1a06dafa3532db6e74d93e5e1f8626712ad8551f"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjQzMDc1OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/pages/LoadData.test.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTozMDozOFrOGatG0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTozMDozOFrOGatG0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY1NTE4Ng==", "bodyText": "This is ok now, but for future tests, lets just do click, since successful click validates that the item was in the document.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3984#discussion_r430655186", "createdAt": "2020-05-26T19:30:38Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/pages/LoadData.test.tsx", "diffHunk": "@@ -0,0 +1,84 @@\n+import React, {useContext} from 'react';\n+import { render, fireEvent, waitForElement, cleanup } from '@testing-library/react'\n+import '@testing-library/jest-dom/extend-expect'\n+import TilesView from './TilesView';\n+import {AuthoritiesContext, AuthoritiesService} from '../util/authorities';\n+import axiosMock from 'axios';\n+import curateData from '../config/bench.config';\n+import authorities from '../config/authorities.config';\n+import data from \"../config/bench.config\";\n+import LoadData from \"./LoadData\";\n+\n+jest.mock('axios');\n+\n+describe('LoadData component', () => {\n+  test('Verify LoadData component cannot edit with only readIngestion authority', async () => {\n+      const authorityService = new AuthoritiesService();\n+      authorityService.setAuthorities(['readIngestion']);\n+\n+      await curateData.setupMockAPIs(axiosMock);\n+\n+      const { getByText, getByTitle, getByLabelText, getByTestId } = render(<AuthoritiesContext.Provider value={authorityService}><LoadData/></AuthoritiesContext.Provider>);\n+\n+      expect(await(waitForElement(() => getByTitle('table')))).toBeInTheDocument();\n+\n+      // Check for steps to be populated\n+      expect(axiosMock.get).toBeCalledWith('/api/steps/ingestion');\n+      expect(getByText('loadXML')).toBeInTheDocument();\n+\n+      // Check table layout\n+      const tableMenuItem = getByTitle('table');\n+      expect(tableMenuItem).toBeInTheDocument();\n+      await fireEvent.click(tableMenuItem);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd5b9dc7c5db7b0edfc7dd114ff294bf7ccee5c8"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjQ4NzY5OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/pages/LoadData.test.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTo0MjoyMVrOGatqLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMDowNzozNVrOGa0UhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY2NDIzOQ==", "bodyText": "just like update here, can we add assertions for create(Add New) and delete as well for both readIngestion and writeIngestion.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3984#discussion_r430664239", "createdAt": "2020-05-26T19:42:21Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/pages/LoadData.test.tsx", "diffHunk": "@@ -0,0 +1,84 @@\n+import React, {useContext} from 'react';\n+import { render, fireEvent, waitForElement, cleanup } from '@testing-library/react'\n+import '@testing-library/jest-dom/extend-expect'\n+import TilesView from './TilesView';\n+import {AuthoritiesContext, AuthoritiesService} from '../util/authorities';\n+import axiosMock from 'axios';\n+import curateData from '../config/bench.config';\n+import authorities from '../config/authorities.config';\n+import data from \"../config/bench.config\";\n+import LoadData from \"./LoadData\";\n+\n+jest.mock('axios');\n+\n+describe('LoadData component', () => {\n+  test('Verify LoadData component cannot edit with only readIngestion authority', async () => {\n+      const authorityService = new AuthoritiesService();\n+      authorityService.setAuthorities(['readIngestion']);\n+\n+      await curateData.setupMockAPIs(axiosMock);\n+\n+      const { getByText, getByTitle, getByLabelText, getByTestId } = render(<AuthoritiesContext.Provider value={authorityService}><LoadData/></AuthoritiesContext.Provider>);\n+\n+      expect(await(waitForElement(() => getByTitle('table')))).toBeInTheDocument();\n+\n+      // Check for steps to be populated\n+      expect(axiosMock.get).toBeCalledWith('/api/steps/ingestion');\n+      expect(getByText('loadXML')).toBeInTheDocument();\n+\n+      // Check table layout\n+      const tableMenuItem = getByTitle('table');\n+      expect(tableMenuItem).toBeInTheDocument();\n+      await fireEvent.click(tableMenuItem);\n+\n+      await fireEvent.click(getByTestId('loadXML-settings'));\n+      expect(await(waitForElement(() => getByText('Target Database:')))).toBeInTheDocument();\n+\n+      expect(getByText('Save')).toBeDisabled();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd5b9dc7c5db7b0edfc7dd114ff294bf7ccee5c8"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc3MzM4MQ==", "bodyText": "@ryanjdew this is the only missing scenario in the tests. Approving the PR. Have noted this in the test plan as well. Maybe we can cover this when writing tests for hc-load-writer", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3984#discussion_r430773381", "createdAt": "2020-05-27T00:07:35Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/pages/LoadData.test.tsx", "diffHunk": "@@ -0,0 +1,84 @@\n+import React, {useContext} from 'react';\n+import { render, fireEvent, waitForElement, cleanup } from '@testing-library/react'\n+import '@testing-library/jest-dom/extend-expect'\n+import TilesView from './TilesView';\n+import {AuthoritiesContext, AuthoritiesService} from '../util/authorities';\n+import axiosMock from 'axios';\n+import curateData from '../config/bench.config';\n+import authorities from '../config/authorities.config';\n+import data from \"../config/bench.config\";\n+import LoadData from \"./LoadData\";\n+\n+jest.mock('axios');\n+\n+describe('LoadData component', () => {\n+  test('Verify LoadData component cannot edit with only readIngestion authority', async () => {\n+      const authorityService = new AuthoritiesService();\n+      authorityService.setAuthorities(['readIngestion']);\n+\n+      await curateData.setupMockAPIs(axiosMock);\n+\n+      const { getByText, getByTitle, getByLabelText, getByTestId } = render(<AuthoritiesContext.Provider value={authorityService}><LoadData/></AuthoritiesContext.Provider>);\n+\n+      expect(await(waitForElement(() => getByTitle('table')))).toBeInTheDocument();\n+\n+      // Check for steps to be populated\n+      expect(axiosMock.get).toBeCalledWith('/api/steps/ingestion');\n+      expect(getByText('loadXML')).toBeInTheDocument();\n+\n+      // Check table layout\n+      const tableMenuItem = getByTitle('table');\n+      expect(tableMenuItem).toBeInTheDocument();\n+      await fireEvent.click(tableMenuItem);\n+\n+      await fireEvent.click(getByTestId('loadXML-settings'));\n+      expect(await(waitForElement(() => getByText('Target Database:')))).toBeInTheDocument();\n+\n+      expect(getByText('Save')).toBeDisabled();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY2NDIzOQ=="}, "originalCommit": {"oid": "fd5b9dc7c5db7b0edfc7dd114ff294bf7ccee5c8"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjQ5NjMwOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/pages/TilesView.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTo0NDo1NVrOGatvkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMjowOTo1MVrOGayAJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY2NTYxOQ==", "bodyText": "Can we also add a test to verify readIngestion can not access Model, Curate and Run to ensure coverage per test plan.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3984#discussion_r430665619", "createdAt": "2020-05-26T19:44:55Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/pages/TilesView.test.tsx", "diffHunk": "@@ -82,25 +56,49 @@ describe('TilesView component', () => {\n         expect(getByText('Customer')).toBeInTheDocument();\n     });\n \n+    test('Verify Load tile displays from toolbar with readIngestion authority', async () => {\n+        const authorityService = new AuthoritiesService();\n+        authorityService.setAuthorities(['readIngestion']);\n+        const {getByLabelText, getByText, queryByText} = render(<AuthoritiesContext.Provider value={authorityService}><TilesView/></AuthoritiesContext.Provider>);\n+\n+        // Curate tile not shown initially\n+        expect(queryByText(\"icon-load\")).not.toBeInTheDocument();\n+        expect(queryByText(\"title-load\")).not.toBeInTheDocument();\n+\n+        await curateData.setupMockAPIs(axiosMock);\n+        fireEvent.click(getByLabelText(\"tool-load\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9689021f3ee50254dcd0930bd66d59682ac5ed2b"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDczNTM5OA==", "bodyText": "added the check for access to other tiles.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3984#discussion_r430735398", "createdAt": "2020-05-26T22:09:51Z", "author": {"login": "ryanjdew"}, "path": "marklogic-data-hub-central/ui/src/pages/TilesView.test.tsx", "diffHunk": "@@ -82,25 +56,49 @@ describe('TilesView component', () => {\n         expect(getByText('Customer')).toBeInTheDocument();\n     });\n \n+    test('Verify Load tile displays from toolbar with readIngestion authority', async () => {\n+        const authorityService = new AuthoritiesService();\n+        authorityService.setAuthorities(['readIngestion']);\n+        const {getByLabelText, getByText, queryByText} = render(<AuthoritiesContext.Provider value={authorityService}><TilesView/></AuthoritiesContext.Provider>);\n+\n+        // Curate tile not shown initially\n+        expect(queryByText(\"icon-load\")).not.toBeInTheDocument();\n+        expect(queryByText(\"title-load\")).not.toBeInTheDocument();\n+\n+        await curateData.setupMockAPIs(axiosMock);\n+        fireEvent.click(getByLabelText(\"tool-load\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY2NTYxOQ=="}, "originalCommit": {"oid": "9689021f3ee50254dcd0930bd66d59682ac5ed2b"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4149, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}