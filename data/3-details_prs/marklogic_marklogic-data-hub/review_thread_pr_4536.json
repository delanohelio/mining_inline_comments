{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMTYwMDgy", "number": 4536, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjozMzozM1rOEhU9Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzoyNjoyM1rOEiOB5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzgxNzc0OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/impl/HubRowManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjozMzozM1rOHOlP6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjozMzozM1rOHOlP6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1MjM5NQ==", "bodyText": "What is this for? I don't see any references to it.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4536#discussion_r485052395", "createdAt": "2020-09-08T16:33:33Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/impl/HubRowManager.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package com.marklogic.hub.central.entities.search.impl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c34cb70b83bfaebe065fb6ac7a10635de44e1bfc"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzgyNDA2OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/EntitySearchManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjozNToxNFrOHOlTxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo1MzowOFrOHOp66g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1MzM4MQ==", "bodyText": "If the intent of this operation is to export search results as CSV, I think the method name should imply that - e.g. \"exportSearchResultsAsCsv\".", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4536#discussion_r485053381", "createdAt": "2020-09-08T16:35:14Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/EntitySearchManager.java", "diffHunk": "@@ -246,18 +247,23 @@ public void exportRows(JsonNode queryDocument, Long limit, OutputStream out) {\n         List<SearchQuery.SortOrder> sortOrder = searchQuery.getSortOrder().orElse(new ArrayList<>());\n         ArrayNode sortOrderNode = sortOrderToArrayNode(sortOrder);\n \n-\n-        JsonNode opticPlanNode = EntitySearchService.on(finalDatabaseClient).getOpticPlan(structuredQuery, searchText, queryOptions, entityTypeId, entityTypeId, limit, sortOrderNode, columns.stream());\n-        StringHandle stringHandle = new StringHandle(opticPlanNode.toString());\n-        RowManager rowManager = finalDatabaseClient.newRowManager();\n-        try (ReaderHandle readerHandle = new ReaderHandle()) {\n-            rowManager.resultDoc(rowManager.newRawPlanDefinition(stringHandle), readerHandle.withMimetype(CSV_CONTENT_TYPE));\n-            readerHandle.write(out);\n-        } catch (IOException e) {\n-            throw new RuntimeException(e);\n-        } finally {\n-            IOUtils.closeQuietly(out);\n-        }\n+        EntitySearchService entitySearchService = EntitySearchService.on(finalDatabaseClient);\n+        // Exporting directly from Data Service to avoid bug https://bugtrack.marklogic.com/55338 related to namespaced path range indexes\n+        Stream<Reader> export = entitySearchService.exportSearch(structuredQuery, searchText, queryOptions, entityTypeId, entityTypeId, limit, sortOrderNode, columns.stream(), CSV_CONTENT_TYPE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c34cb70b83bfaebe065fb6ac7a10635de44e1bfc"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyODkzOA==", "bodyText": "It is passed the acceptType and the server then determines if it should be CSV. Right now CSV is the only format that will work, but I was trying to open that to be configurable. Similar to the REST rows endpoint.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4536#discussion_r485128938", "createdAt": "2020-09-08T18:53:08Z", "author": {"login": "ryanjdew"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/EntitySearchManager.java", "diffHunk": "@@ -246,18 +247,23 @@ public void exportRows(JsonNode queryDocument, Long limit, OutputStream out) {\n         List<SearchQuery.SortOrder> sortOrder = searchQuery.getSortOrder().orElse(new ArrayList<>());\n         ArrayNode sortOrderNode = sortOrderToArrayNode(sortOrder);\n \n-\n-        JsonNode opticPlanNode = EntitySearchService.on(finalDatabaseClient).getOpticPlan(structuredQuery, searchText, queryOptions, entityTypeId, entityTypeId, limit, sortOrderNode, columns.stream());\n-        StringHandle stringHandle = new StringHandle(opticPlanNode.toString());\n-        RowManager rowManager = finalDatabaseClient.newRowManager();\n-        try (ReaderHandle readerHandle = new ReaderHandle()) {\n-            rowManager.resultDoc(rowManager.newRawPlanDefinition(stringHandle), readerHandle.withMimetype(CSV_CONTENT_TYPE));\n-            readerHandle.write(out);\n-        } catch (IOException e) {\n-            throw new RuntimeException(e);\n-        } finally {\n-            IOUtils.closeQuietly(out);\n-        }\n+        EntitySearchService entitySearchService = EntitySearchService.on(finalDatabaseClient);\n+        // Exporting directly from Data Service to avoid bug https://bugtrack.marklogic.com/55338 related to namespaced path range indexes\n+        Stream<Reader> export = entitySearchService.exportSearch(structuredQuery, searchText, queryOptions, entityTypeId, entityTypeId, limit, sortOrderNode, columns.stream(), CSV_CONTENT_TYPE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1MzM4MQ=="}, "originalCommit": {"oid": "c34cb70b83bfaebe065fb6ac7a10635de44e1bfc"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzg4MTMyOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/entitySearch/exportSearch.api", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo1MDo1MFrOHOl2vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODozODowM1rOHPU4gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2MjMzMw==", "bodyText": "Is one Reader returned for every row? If so, I think this description should make that clear (the fact that an optic plan is used is an implementation detail) - e.g. \"Returns an array of Reader objects, one for each search result represented as CSV\"", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4536#discussion_r485062333", "createdAt": "2020-09-08T16:50:50Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/entitySearch/exportSearch.api", "diffHunk": "@@ -36,11 +36,16 @@\n             \"name\": \"columns\",\n             \"datatype\": \"string\",\n             \"multiple\" : true\n+        },\n+        {\n+            \"name\": \"acceptType\",\n+            \"datatype\": \"string\"\n         }\n     ],\n     \"return\": {\n-        \"datatype\": \"jsonDocument\",\n-        \"$javaClass\": \"com.fasterxml.jackson.databind.JsonNode\",\n-        \"description\": \"Returns a json representation (AST) of an optic plan.\"\n+        \"datatype\": \"textDocument\",\n+        \"$javaClass\": \"java.io.Reader\",\n+        \"description\": \"Returns the results of an optic plan\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c34cb70b83bfaebe065fb6ac7a10635de44e1bfc"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEzMTUwNg==", "bodyText": "It only does one reader for the CSV, but the signature allows for multiple, should we want to export them as separate JSON documents for example.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4536#discussion_r485131506", "createdAt": "2020-09-08T18:57:48Z", "author": {"login": "ryanjdew"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/entitySearch/exportSearch.api", "diffHunk": "@@ -36,11 +36,16 @@\n             \"name\": \"columns\",\n             \"datatype\": \"string\",\n             \"multiple\" : true\n+        },\n+        {\n+            \"name\": \"acceptType\",\n+            \"datatype\": \"string\"\n         }\n     ],\n     \"return\": {\n-        \"datatype\": \"jsonDocument\",\n-        \"$javaClass\": \"com.fasterxml.jackson.databind.JsonNode\",\n-        \"description\": \"Returns a json representation (AST) of an optic plan.\"\n+        \"datatype\": \"textDocument\",\n+        \"$javaClass\": \"java.io.Reader\",\n+        \"description\": \"Returns the results of an optic plan\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2MjMzMw=="}, "originalCommit": {"oid": "c34cb70b83bfaebe065fb6ac7a10635de44e1bfc"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgyNzk4Mg==", "bodyText": "Although I understand the intention behind this, I feel like this creates some confusion wrt the returned reader and its relationship with the CSV. For the sake of simplicity should we change the signature to represent what's currently being returned?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4536#discussion_r485827982", "createdAt": "2020-09-09T18:29:01Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/entitySearch/exportSearch.api", "diffHunk": "@@ -36,11 +36,16 @@\n             \"name\": \"columns\",\n             \"datatype\": \"string\",\n             \"multiple\" : true\n+        },\n+        {\n+            \"name\": \"acceptType\",\n+            \"datatype\": \"string\"\n         }\n     ],\n     \"return\": {\n-        \"datatype\": \"jsonDocument\",\n-        \"$javaClass\": \"com.fasterxml.jackson.databind.JsonNode\",\n-        \"description\": \"Returns a json representation (AST) of an optic plan.\"\n+        \"datatype\": \"textDocument\",\n+        \"$javaClass\": \"java.io.Reader\",\n+        \"description\": \"Returns the results of an optic plan\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2MjMzMw=="}, "originalCommit": {"oid": "c34cb70b83bfaebe065fb6ac7a10635de44e1bfc"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzMjgzMw==", "bodyText": "I feel endpoints are cheap, and reuse can always be done via library modules. So I lean towards fine-grained, explicitly-named endpoints - e.g. \"exportSearchResultsAsCsv\" - that reuse libraries to avoid duplication. We can always create more generic endpoints in the future as we learn more.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4536#discussion_r485832833", "createdAt": "2020-09-09T18:38:03Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/entitySearch/exportSearch.api", "diffHunk": "@@ -36,11 +36,16 @@\n             \"name\": \"columns\",\n             \"datatype\": \"string\",\n             \"multiple\" : true\n+        },\n+        {\n+            \"name\": \"acceptType\",\n+            \"datatype\": \"string\"\n         }\n     ],\n     \"return\": {\n-        \"datatype\": \"jsonDocument\",\n-        \"$javaClass\": \"com.fasterxml.jackson.databind.JsonNode\",\n-        \"description\": \"Returns a json representation (AST) of an optic plan.\"\n+        \"datatype\": \"textDocument\",\n+        \"$javaClass\": \"java.io.Reader\",\n+        \"description\": \"Returns the results of an optic plan\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2MjMzMw=="}, "originalCommit": {"oid": "c34cb70b83bfaebe065fb6ac7a10635de44e1bfc"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzg4NDYzOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/entitySearch/exportSearch.api", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo1MTo0NVrOHOl4qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo1MTo0NVrOHOl4qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2MjgyNQ==", "bodyText": "I think we really need a description for this - based on the code, I'm thinking: \"Evaluates the given search query against the given TDE view, returning the results as CSV\"", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4536#discussion_r485062825", "createdAt": "2020-09-08T16:51:45Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/entitySearch/exportSearch.api", "diffHunk": "@@ -1,5 +1,5 @@\n {\n-    \"functionName\": \"getOpticPlan\",\n+    \"functionName\": \"exportSearch\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c34cb70b83bfaebe065fb6ac7a10635de44e1bfc"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODU2NzQzOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/entitySearch/exportSearch.sjs", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNzoyMToyN1rOHPSSog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjoyNjoyNlrOHPcZjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc5MDM3MA==", "bodyText": "What do you think would be another future value for acceptType? And do you anticipate most of this code being reused? I assume the ideal is if we just needed to pass in a different argument in the call to xdmp.quote.\nIn general though, I'd avoid adding a parameter that we don't yet need and wait until we need it, as at that point, then we'll know exactly how to account for it. But I'm fine if you want to leave it in if you think most of this code will be reused for a future acceptType value.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4536#discussion_r485790370", "createdAt": "2020-09-09T17:21:27Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/entitySearch/exportSearch.sjs", "diffHunk": "@@ -115,13 +116,23 @@ if (sortOrder) {\n   }\n }\n const columnIdentifiers = columns.map((colName) => op.col(colName));\n-// Workaround since there's a bug in the bridge between v8 and ML builtin functions\n-const qryString = xdmp.describe(ctsQry, null, null);\n-const opticPlan = eval(`op.fromView(schemaName, viewName)\n-  .where(${qryString})\n-  ${orderDefinitions.length ? '.orderBy(orderDefinitions)': ''}\n-  .limit(limit)\n-  .select(columnIdentifiers)\n-  .export()`);\n-\n-opticPlan;\n+let opticPlan = op.fromView(schemaName, viewName).where(ctsQry);\n+if (limit) {\n+  opticPlan = opticPlan.limit(limit);\n+}\n+if (orderDefinitions.length > 0) {\n+  opticPlan = opticPlan.orderBy(orderDefinitions);\n+}\n+opticPlan = opticPlan.select(columnIdentifiers);\n+// Not using the rows REST API due to https://bugtrack.marklogic.com/55338\n+let result = opticPlan.result('object');\n+switch(acceptType) {\n+  case 'text/csv':\n+    if (!(result instanceof Sequence)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f03660e7c1f4c2becefe37b68649b7c2cf7cbdb4"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk1NTk4Mg==", "bodyText": "Changed to be a CSV specific endpoint.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4536#discussion_r485955982", "createdAt": "2020-09-09T22:26:26Z", "author": {"login": "ryanjdew"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/entitySearch/exportSearch.sjs", "diffHunk": "@@ -115,13 +116,23 @@ if (sortOrder) {\n   }\n }\n const columnIdentifiers = columns.map((colName) => op.col(colName));\n-// Workaround since there's a bug in the bridge between v8 and ML builtin functions\n-const qryString = xdmp.describe(ctsQry, null, null);\n-const opticPlan = eval(`op.fromView(schemaName, viewName)\n-  .where(${qryString})\n-  ${orderDefinitions.length ? '.orderBy(orderDefinitions)': ''}\n-  .limit(limit)\n-  .select(columnIdentifiers)\n-  .export()`);\n-\n-opticPlan;\n+let opticPlan = op.fromView(schemaName, viewName).where(ctsQry);\n+if (limit) {\n+  opticPlan = opticPlan.limit(limit);\n+}\n+if (orderDefinitions.length > 0) {\n+  opticPlan = opticPlan.orderBy(orderDefinitions);\n+}\n+opticPlan = opticPlan.select(columnIdentifiers);\n+// Not using the rows REST API due to https://bugtrack.marklogic.com/55338\n+let result = opticPlan.result('object');\n+switch(acceptType) {\n+  case 'text/csv':\n+    if (!(result instanceof Sequence)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc5MDM3MA=="}, "originalCommit": {"oid": "f03660e7c1f4c2becefe37b68649b7c2cf7cbdb4"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODc3MDQyOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/EntitySearchControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODoyMDo0MFrOHPUTCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjoyNTo1N1rOHPcYzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgyMzI0Mg==", "bodyText": "I believe dataHub.updateIndexes(); will work here too - can you try that? I recently used it in DeployProtectedPaths..Test and it worked well.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4536#discussion_r485823242", "createdAt": "2020-09-09T18:20:40Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/EntitySearchControllerTest.java", "diffHunk": "@@ -245,9 +245,85 @@ void testRowExport() throws Exception {\n             });\n     }\n \n-    private void assertRowsAndColumns(int limit, int totalColumns, String response) {\n+    @Test\n+    void testRowExportWithPathRangeQuery() throws Exception {\n+        runAsDataHubDeveloper();\n+        ReferenceModelProject project = installOnlyReferenceModelEntities(true);\n+        deployEntityIndexes(getHubConfig());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f03660e7c1f4c2becefe37b68649b7c2cf7cbdb4"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk1NTc5MA==", "bodyText": "dataHub isn't available to the hub central tests, unless I'm missing a function someplace. I believe the DataHub class is still depending on the auto-wiring of the HubConfig.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4536#discussion_r485955790", "createdAt": "2020-09-09T22:25:57Z", "author": {"login": "ryanjdew"}, "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/EntitySearchControllerTest.java", "diffHunk": "@@ -245,9 +245,85 @@ void testRowExport() throws Exception {\n             });\n     }\n \n-    private void assertRowsAndColumns(int limit, int totalColumns, String response) {\n+    @Test\n+    void testRowExportWithPathRangeQuery() throws Exception {\n+        runAsDataHubDeveloper();\n+        ReferenceModelProject project = installOnlyReferenceModelEntities(true);\n+        deployEntityIndexes(getHubConfig());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgyMzI0Mg=="}, "originalCommit": {"oid": "f03660e7c1f4c2becefe37b68649b7c2cf7cbdb4"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODc3NjY3OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/EntitySearchControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODoyMjoyMFrOHPUW0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODoyMjoyMFrOHPUW0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgyNDIxMQ==", "bodyText": "@rahulvudutala  @akshaysonvane We've got several instances of inline JSON like this. Thoughts on simplifying this? I see a maintenance burden here where if we want to change something about this data structure, we'll need to update all of these tests. Ideally, @ryanjdew  can obtain a saved query here without having to copy/paste one from another test. (This would be a future cleanup, not something to address in this ticket)", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4536#discussion_r485824211", "createdAt": "2020-09-09T18:22:20Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/EntitySearchControllerTest.java", "diffHunk": "@@ -245,9 +245,85 @@ void testRowExport() throws Exception {\n             });\n     }\n \n-    private void assertRowsAndColumns(int limit, int totalColumns, String response) {\n+    @Test\n+    void testRowExportWithPathRangeQuery() throws Exception {\n+        runAsDataHubDeveloper();\n+        ReferenceModelProject project = installOnlyReferenceModelEntities(true);\n+        deployEntityIndexes(getHubConfig());\n+\n+        Customer customer1 = new Customer();\n+        customer1.setCustomerId(1);\n+        customer1.setName(\"Jane\");\n+        customer1.setCustomerNumber(123456789);\n+        customer1.setCustomerSince(\"2012-05-16\");\n+        project.createCustomerInstance(customer1);\n+\n+        Customer customer2 = new Customer();\n+        customer2.setCustomerId(2);\n+        customer2.setName(\"John\");\n+        customer2.setCustomerNumber(987654321);\n+        customer2.setCustomerSince(\"2013-06-16\");\n+        project.createCustomerInstance(customer2);\n+\n+        String json = \"{\\n\" +\n+                \"    \\\"savedQuery\\\": {\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f03660e7c1f4c2becefe37b68649b7c2cf7cbdb4"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODc4MjQxOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/test/resources/test-projects/reference-project/entities/Customer.entity.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODoyNDowNFrOHPUabg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODoyNDowNFrOHPUabg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgyNTEzNA==", "bodyText": "You shouldn't need this - the fact that sortable=true means a path range index will be added automatically.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4536#discussion_r485825134", "createdAt": "2020-09-09T18:24:04Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/test/resources/test-projects/reference-project/entities/Customer.entity.json", "diffHunk": "@@ -9,9 +9,11 @@\n       \"required\": [\n         \"name\"\n       ],\n+      \"rangeIndex\": [\"customerId\"],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f03660e7c1f4c2becefe37b68649b7c2cf7cbdb4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODc5MTYwOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/resources/entity-reference-model/entities/Customer.entity.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODoyNjozOVrOHPUgHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODoyNjozOVrOHPUgHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgyNjU4OA==", "bodyText": "Same thing here, shouldn't need this - should just be able to add sortable=true or facetable=true to customerId. That's important because as part of converting to HC, rangeIndex/pathRangeIndex/elementRangeIndex are all removed so that HC only deals with sortable and facetable.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4536#discussion_r485826588", "createdAt": "2020-09-09T18:26:39Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/resources/entity-reference-model/entities/Customer.entity.json", "diffHunk": "@@ -9,6 +9,9 @@\n       \"required\": [\n         \"name\"\n       ],\n+      \"rangeIndex\": [", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f03660e7c1f4c2becefe37b68649b7c2cf7cbdb4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODgwNjcyOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/EntitySearchManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODozMDozN1rOHPUpBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODozMDozN1rOHPUpBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgyODg2OQ==", "bodyText": "Changing the DS signature will also allow us to simplify this.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4536#discussion_r485828869", "createdAt": "2020-09-09T18:30:37Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/EntitySearchManager.java", "diffHunk": "@@ -246,18 +247,23 @@ public void exportRows(JsonNode queryDocument, Long limit, OutputStream out) {\n         List<SearchQuery.SortOrder> sortOrder = searchQuery.getSortOrder().orElse(new ArrayList<>());\n         ArrayNode sortOrderNode = sortOrderToArrayNode(sortOrder);\n \n-\n-        JsonNode opticPlanNode = EntitySearchService.on(finalDatabaseClient).getOpticPlan(structuredQuery, searchText, queryOptions, entityTypeId, entityTypeId, limit, sortOrderNode, columns.stream());\n-        StringHandle stringHandle = new StringHandle(opticPlanNode.toString());\n-        RowManager rowManager = finalDatabaseClient.newRowManager();\n-        try (ReaderHandle readerHandle = new ReaderHandle()) {\n-            rowManager.resultDoc(rowManager.newRawPlanDefinition(stringHandle), readerHandle.withMimetype(CSV_CONTENT_TYPE));\n-            readerHandle.write(out);\n-        } catch (IOException e) {\n-            throw new RuntimeException(e);\n-        } finally {\n-            IOUtils.closeQuietly(out);\n-        }\n+        EntitySearchService entitySearchService = EntitySearchService.on(finalDatabaseClient);\n+        // Exporting directly from Data Service to avoid bug https://bugtrack.marklogic.com/55338 related to namespaced path range indexes\n+        Stream<Reader> export = entitySearchService.exportSearch(structuredQuery, searchText, queryOptions, entityTypeId, entityTypeId, limit, sortOrderNode, columns.stream(), CSV_CONTENT_TYPE);\n+        export.forEachOrdered(\n+                reader -> {\n+                    try (ReaderHandle readerHandle = new ReaderHandle()) {\n+                        readerHandle.setMimetype(CSV_CONTENT_TYPE);\n+                        readerHandle.set(reader);\n+                        readerHandle.write(out);\n+                    } catch (IOException e) {\n+                        IOUtils.closeQuietly(out);\n+                        throw new RuntimeException(e);\n+                    } finally {\n+                        IOUtils.closeQuietly(reader);\n+                    }\n+                });\n+        IOUtils.closeQuietly(out);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f03660e7c1f4c2becefe37b68649b7c2cf7cbdb4"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTg0MTMzOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/EntitySearchManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDoxODoyOVrOHPegAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDoxODoyOVrOHPegAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5MDQwMg==", "bodyText": "We don't need this here since the \"finally\" block will always close the resource.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4536#discussion_r485990402", "createdAt": "2020-09-10T00:18:29Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/EntitySearchManager.java", "diffHunk": "@@ -246,16 +247,16 @@ public void exportRows(JsonNode queryDocument, Long limit, OutputStream out) {\n         List<SearchQuery.SortOrder> sortOrder = searchQuery.getSortOrder().orElse(new ArrayList<>());\n         ArrayNode sortOrderNode = sortOrderToArrayNode(sortOrder);\n \n-\n-        JsonNode opticPlanNode = EntitySearchService.on(finalDatabaseClient).getOpticPlan(structuredQuery, searchText, queryOptions, entityTypeId, entityTypeId, limit, sortOrderNode, columns.stream());\n-        StringHandle stringHandle = new StringHandle(opticPlanNode.toString());\n-        RowManager rowManager = finalDatabaseClient.newRowManager();\n-        try (ReaderHandle readerHandle = new ReaderHandle()) {\n-            rowManager.resultDoc(rowManager.newRawPlanDefinition(stringHandle), readerHandle.withMimetype(CSV_CONTENT_TYPE));\n+        EntitySearchService entitySearchService = EntitySearchService.on(finalDatabaseClient);\n+        // Exporting directly from Data Service to avoid bug https://bugtrack.marklogic.com/55338 related to namespaced path range indexes\n+        Reader export = entitySearchService.exportSearchAsCSV(structuredQuery, searchText, queryOptions, entityTypeId, entityTypeId, limit, sortOrderNode, columns.stream());\n+        try (ReaderHandle readerHandle = new ReaderHandle(export).withMimetype(CSV_CONTENT_TYPE)) {\n             readerHandle.write(out);\n         } catch (IOException e) {\n+            IOUtils.closeQuietly(out);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19aeb4d7b553c3abcec1fb837ab1b8cb2428afba"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTg0MTYyOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/EntitySearchManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDoxODo0MFrOHPegMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjo0NToyN1rOHP827A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5MDQ0OA==", "bodyText": "We can get rid of this since ReaderHandle will internally close the \"export\" reader in the try-with-resource above.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4536#discussion_r485990448", "createdAt": "2020-09-10T00:18:40Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/EntitySearchManager.java", "diffHunk": "@@ -246,16 +247,16 @@ public void exportRows(JsonNode queryDocument, Long limit, OutputStream out) {\n         List<SearchQuery.SortOrder> sortOrder = searchQuery.getSortOrder().orElse(new ArrayList<>());\n         ArrayNode sortOrderNode = sortOrderToArrayNode(sortOrder);\n \n-\n-        JsonNode opticPlanNode = EntitySearchService.on(finalDatabaseClient).getOpticPlan(structuredQuery, searchText, queryOptions, entityTypeId, entityTypeId, limit, sortOrderNode, columns.stream());\n-        StringHandle stringHandle = new StringHandle(opticPlanNode.toString());\n-        RowManager rowManager = finalDatabaseClient.newRowManager();\n-        try (ReaderHandle readerHandle = new ReaderHandle()) {\n-            rowManager.resultDoc(rowManager.newRawPlanDefinition(stringHandle), readerHandle.withMimetype(CSV_CONTENT_TYPE));\n+        EntitySearchService entitySearchService = EntitySearchService.on(finalDatabaseClient);\n+        // Exporting directly from Data Service to avoid bug https://bugtrack.marklogic.com/55338 related to namespaced path range indexes\n+        Reader export = entitySearchService.exportSearchAsCSV(structuredQuery, searchText, queryOptions, entityTypeId, entityTypeId, limit, sortOrderNode, columns.stream());\n+        try (ReaderHandle readerHandle = new ReaderHandle(export).withMimetype(CSV_CONTENT_TYPE)) {\n             readerHandle.write(out);\n         } catch (IOException e) {\n+            IOUtils.closeQuietly(out);\n             throw new RuntimeException(e);\n         } finally {\n+            IOUtils.closeQuietly(export);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19aeb4d7b553c3abcec1fb837ab1b8cb2428afba"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4Nzc4OA==", "bodyText": "updated", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4536#discussion_r486487788", "createdAt": "2020-09-10T16:45:27Z", "author": {"login": "ryanjdew"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/EntitySearchManager.java", "diffHunk": "@@ -246,16 +247,16 @@ public void exportRows(JsonNode queryDocument, Long limit, OutputStream out) {\n         List<SearchQuery.SortOrder> sortOrder = searchQuery.getSortOrder().orElse(new ArrayList<>());\n         ArrayNode sortOrderNode = sortOrderToArrayNode(sortOrder);\n \n-\n-        JsonNode opticPlanNode = EntitySearchService.on(finalDatabaseClient).getOpticPlan(structuredQuery, searchText, queryOptions, entityTypeId, entityTypeId, limit, sortOrderNode, columns.stream());\n-        StringHandle stringHandle = new StringHandle(opticPlanNode.toString());\n-        RowManager rowManager = finalDatabaseClient.newRowManager();\n-        try (ReaderHandle readerHandle = new ReaderHandle()) {\n-            rowManager.resultDoc(rowManager.newRawPlanDefinition(stringHandle), readerHandle.withMimetype(CSV_CONTENT_TYPE));\n+        EntitySearchService entitySearchService = EntitySearchService.on(finalDatabaseClient);\n+        // Exporting directly from Data Service to avoid bug https://bugtrack.marklogic.com/55338 related to namespaced path range indexes\n+        Reader export = entitySearchService.exportSearchAsCSV(structuredQuery, searchText, queryOptions, entityTypeId, entityTypeId, limit, sortOrderNode, columns.stream());\n+        try (ReaderHandle readerHandle = new ReaderHandle(export).withMimetype(CSV_CONTENT_TYPE)) {\n             readerHandle.write(out);\n         } catch (IOException e) {\n+            IOUtils.closeQuietly(out);\n             throw new RuntimeException(e);\n         } finally {\n+            IOUtils.closeQuietly(export);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5MDQ0OA=="}, "originalCommit": {"oid": "19aeb4d7b553c3abcec1fb837ab1b8cb2428afba"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTg1MjQ5OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/data-services/entitySearch/exportSearchTest.sjs", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDoyNDoyN1rOHPemfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjo0NToyNFrOHP821Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5MjA2MA==", "bodyText": "Needs to be updated to the new name exportSearchAsCSV", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4536#discussion_r485992060", "createdAt": "2020-09-10T00:24:27Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/data-services/entitySearch/exportSearchTest.sjs", "diffHunk": "@@ -1,18 +1,29 @@\n const search = require('/MarkLogic/appservices/search/search');\n const test = require(\"/test/test-helper.xqy\");\n const hubTest = require(\"/test/data-hub-test-helper.sjs\");\n-const op = require('/MarkLogic/optic');\n \n-const queryOptions = '<options xmlns=\"http://marklogic.com/appservices/search\"/>';\n+const queryOptions = `<options xmlns=\"http://marklogic.com/appservices/search\"/>`;\n \n-function invokeOpticPlanService(schemaName, viewName, limit, structuredQuery, searchText, sortOrder, columns, retries=0) {\n-    try {\n-        // Need to clear the modules cache or unrelated error could be thrown. Investigating to file a bugtrack.\n-        if (retries === 0) {\n-            xdmp.moduleCacheClear();\n+// This is a simple CSV parser intended for simplifying tests only.\n+function basicCsvParser(csv) {\n+    const lines = csv.split('\\n').map((line) => fn.normalizeSpace(line)).filter((line) => line !== '');\n+    const results = [];\n+    const headers = lines[0].split(',').map((header) => fn.normalizeSpace(header));\n+    for (const line of lines.slice(1)) {\n+        const obj = {};\n+        let properties = line.split(',').map((val) => fn.normalizeSpace(val));\n+        for (let i = 0; i < properties.length; i++) {\n+            obj[headers[i]] = properties[i];\n         }\n+        results.push(obj);\n+    }\n+    return Sequence.from(results);\n+}\n+\n+function invokeExportSearchService(schemaName, viewName, limit, structuredQuery, searchText, sortOrder, columns, retries=0) {\n+    try {\n         return fn.head(xdmp.invoke(\n-            \"/data-hub/5/data-services/entitySearch/getOpticPlan.sjs\",\n+            \"/data-hub/5/data-services/entitySearch/exportSearch.sjs\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19aeb4d7b553c3abcec1fb837ab1b8cb2428afba"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4Nzc2NQ==", "bodyText": "renamed", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4536#discussion_r486487765", "createdAt": "2020-09-10T16:45:24Z", "author": {"login": "ryanjdew"}, "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/data-services/entitySearch/exportSearchTest.sjs", "diffHunk": "@@ -1,18 +1,29 @@\n const search = require('/MarkLogic/appservices/search/search');\n const test = require(\"/test/test-helper.xqy\");\n const hubTest = require(\"/test/data-hub-test-helper.sjs\");\n-const op = require('/MarkLogic/optic');\n \n-const queryOptions = '<options xmlns=\"http://marklogic.com/appservices/search\"/>';\n+const queryOptions = `<options xmlns=\"http://marklogic.com/appservices/search\"/>`;\n \n-function invokeOpticPlanService(schemaName, viewName, limit, structuredQuery, searchText, sortOrder, columns, retries=0) {\n-    try {\n-        // Need to clear the modules cache or unrelated error could be thrown. Investigating to file a bugtrack.\n-        if (retries === 0) {\n-            xdmp.moduleCacheClear();\n+// This is a simple CSV parser intended for simplifying tests only.\n+function basicCsvParser(csv) {\n+    const lines = csv.split('\\n').map((line) => fn.normalizeSpace(line)).filter((line) => line !== '');\n+    const results = [];\n+    const headers = lines[0].split(',').map((header) => fn.normalizeSpace(header));\n+    for (const line of lines.slice(1)) {\n+        const obj = {};\n+        let properties = line.split(',').map((val) => fn.normalizeSpace(val));\n+        for (let i = 0; i < properties.length; i++) {\n+            obj[headers[i]] = properties[i];\n         }\n+        results.push(obj);\n+    }\n+    return Sequence.from(results);\n+}\n+\n+function invokeExportSearchService(schemaName, viewName, limit, structuredQuery, searchText, sortOrder, columns, retries=0) {\n+    try {\n         return fn.head(xdmp.invoke(\n-            \"/data-hub/5/data-services/entitySearch/getOpticPlan.sjs\",\n+            \"/data-hub/5/data-services/entitySearch/exportSearch.sjs\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5MjA2MA=="}, "originalCommit": {"oid": "19aeb4d7b553c3abcec1fb837ab1b8cb2428afba"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTg1NTAxOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/data-services/entitySearch/exportSearchTest.sjs", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDoyNTo1MVrOHPen9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjo0NTo0MVrOHP83cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5MjQzOA==", "bodyText": "Also can get rid of the acceptType param since we elected to drop it.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4536#discussion_r485992438", "createdAt": "2020-09-10T00:25:51Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/data-services/entitySearch/exportSearchTest.sjs", "diffHunk": "@@ -21,7 +32,8 @@ function invokeOpticPlanService(schemaName, viewName, limit, structuredQuery, se\n                 searchText,\n                 queryOptions,\n                 sortOrder: xdmp.toJSON(sortOrder).root,\n-                columns: Sequence.from(columns)\n+                columns: Sequence.from(columns),\n+                acceptType: 'text/csv'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19aeb4d7b553c3abcec1fb837ab1b8cb2428afba"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4NzkyMA==", "bodyText": "removed", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4536#discussion_r486487920", "createdAt": "2020-09-10T16:45:41Z", "author": {"login": "ryanjdew"}, "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/data-services/entitySearch/exportSearchTest.sjs", "diffHunk": "@@ -21,7 +32,8 @@ function invokeOpticPlanService(schemaName, viewName, limit, structuredQuery, se\n                 searchText,\n                 queryOptions,\n                 sortOrder: xdmp.toJSON(sortOrder).root,\n-                columns: Sequence.from(columns)\n+                columns: Sequence.from(columns),\n+                acceptType: 'text/csv'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5MjQzOA=="}, "originalCommit": {"oid": "19aeb4d7b553c3abcec1fb837ab1b8cb2428afba"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MTc2NjY0OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/EntitySearchManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMjoxMTo0M1rOHPwisw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjo0Mjo1M1rOHP8woA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI4NjAwMw==", "bodyText": "@akshaysonvane I know this code existed already, but I don't think it's necessary to call withMimetype. I looked at the underlying code, and I don't think it cares. It's using a Java Client class called Utilities, which does the same thing as the Spring class FileCopyUtils. I think to avoid confusion about the necessity of withMimetype (I'm 99% sure it's not needed) and for consistency (FileCopyUtils is a favorite class of mine since it solves the terrible user experience in Java of copying data around), it'd be better to just do:\nFileCopyUtils.copy(export, new OutputStreamWriter(out));\n(which will still need to be in a try/catch block)", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4536#discussion_r486286003", "createdAt": "2020-09-10T12:11:43Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/EntitySearchManager.java", "diffHunk": "@@ -246,12 +247,10 @@ public void exportRows(JsonNode queryDocument, Long limit, OutputStream out) {\n         List<SearchQuery.SortOrder> sortOrder = searchQuery.getSortOrder().orElse(new ArrayList<>());\n         ArrayNode sortOrderNode = sortOrderToArrayNode(sortOrder);\n \n-\n-        JsonNode opticPlanNode = EntitySearchService.on(finalDatabaseClient).getOpticPlan(structuredQuery, searchText, queryOptions, entityTypeId, entityTypeId, limit, sortOrderNode, columns.stream());\n-        StringHandle stringHandle = new StringHandle(opticPlanNode.toString());\n-        RowManager rowManager = finalDatabaseClient.newRowManager();\n-        try (ReaderHandle readerHandle = new ReaderHandle()) {\n-            rowManager.resultDoc(rowManager.newRawPlanDefinition(stringHandle), readerHandle.withMimetype(CSV_CONTENT_TYPE));\n+        EntitySearchService entitySearchService = EntitySearchService.on(finalDatabaseClient);\n+        // Exporting directly from Data Service to avoid bug https://bugtrack.marklogic.com/55338 related to namespaced path range indexes\n+        Reader export = entitySearchService.exportSearchAsCSV(structuredQuery, searchText, queryOptions, entityTypeId, entityTypeId, limit, sortOrderNode, columns.stream());\n+        try (ReaderHandle readerHandle = new ReaderHandle(export).withMimetype(CSV_CONTENT_TYPE)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b58f5ae1ce6608936a561f780137e83b2ce8fb0"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ3NzkzMg==", "bodyText": "Yes, that's right. I looked and it seems withMimetype was required earlier when we were sending the optic plan to the RowManager as the default was JSON. Now that we are generating the CSV in the DS itself FileCopyUtils can be used for copying.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4536#discussion_r486477932", "createdAt": "2020-09-10T16:29:43Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/EntitySearchManager.java", "diffHunk": "@@ -246,12 +247,10 @@ public void exportRows(JsonNode queryDocument, Long limit, OutputStream out) {\n         List<SearchQuery.SortOrder> sortOrder = searchQuery.getSortOrder().orElse(new ArrayList<>());\n         ArrayNode sortOrderNode = sortOrderToArrayNode(sortOrder);\n \n-\n-        JsonNode opticPlanNode = EntitySearchService.on(finalDatabaseClient).getOpticPlan(structuredQuery, searchText, queryOptions, entityTypeId, entityTypeId, limit, sortOrderNode, columns.stream());\n-        StringHandle stringHandle = new StringHandle(opticPlanNode.toString());\n-        RowManager rowManager = finalDatabaseClient.newRowManager();\n-        try (ReaderHandle readerHandle = new ReaderHandle()) {\n-            rowManager.resultDoc(rowManager.newRawPlanDefinition(stringHandle), readerHandle.withMimetype(CSV_CONTENT_TYPE));\n+        EntitySearchService entitySearchService = EntitySearchService.on(finalDatabaseClient);\n+        // Exporting directly from Data Service to avoid bug https://bugtrack.marklogic.com/55338 related to namespaced path range indexes\n+        Reader export = entitySearchService.exportSearchAsCSV(structuredQuery, searchText, queryOptions, entityTypeId, entityTypeId, limit, sortOrderNode, columns.stream());\n+        try (ReaderHandle readerHandle = new ReaderHandle(export).withMimetype(CSV_CONTENT_TYPE)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI4NjAwMw=="}, "originalCommit": {"oid": "3b58f5ae1ce6608936a561f780137e83b2ce8fb0"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4NjE3Ng==", "bodyText": "Updated to use FileCopyUtils.copy.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4536#discussion_r486486176", "createdAt": "2020-09-10T16:42:53Z", "author": {"login": "ryanjdew"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/EntitySearchManager.java", "diffHunk": "@@ -246,12 +247,10 @@ public void exportRows(JsonNode queryDocument, Long limit, OutputStream out) {\n         List<SearchQuery.SortOrder> sortOrder = searchQuery.getSortOrder().orElse(new ArrayList<>());\n         ArrayNode sortOrderNode = sortOrderToArrayNode(sortOrder);\n \n-\n-        JsonNode opticPlanNode = EntitySearchService.on(finalDatabaseClient).getOpticPlan(structuredQuery, searchText, queryOptions, entityTypeId, entityTypeId, limit, sortOrderNode, columns.stream());\n-        StringHandle stringHandle = new StringHandle(opticPlanNode.toString());\n-        RowManager rowManager = finalDatabaseClient.newRowManager();\n-        try (ReaderHandle readerHandle = new ReaderHandle()) {\n-            rowManager.resultDoc(rowManager.newRawPlanDefinition(stringHandle), readerHandle.withMimetype(CSV_CONTENT_TYPE));\n+        EntitySearchService entitySearchService = EntitySearchService.on(finalDatabaseClient);\n+        // Exporting directly from Data Service to avoid bug https://bugtrack.marklogic.com/55338 related to namespaced path range indexes\n+        Reader export = entitySearchService.exportSearchAsCSV(structuredQuery, searchText, queryOptions, entityTypeId, entityTypeId, limit, sortOrderNode, columns.stream());\n+        try (ReaderHandle readerHandle = new ReaderHandle(export).withMimetype(CSV_CONTENT_TYPE)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI4NjAwMw=="}, "originalCommit": {"oid": "3b58f5ae1ce6608936a561f780137e83b2ce8fb0"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MTc4NTMyOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/testFixtures/java/com/marklogic/hub/test/AbstractHubTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMjoxNjo1NlrOHPwt3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjo0MzozOVrOHP8yjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI4ODg2MA==", "bodyText": "Let's not put this here yet, as it only deals with the final file but the method name implies that both staging and final would be updated. I'll add a ticket to the 5.4.0 backend tech debt epic to make it easier to save indexes / deploy them in a test, as a quick search showed that we have a number of tests looking to do this.\nOne simplification you can do is this:\ndbCommand.execute(newCommandContext());\nThat avoids having to create a list of commands and a SimpleAppDeployer.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4536#discussion_r486288860", "createdAt": "2020-09-10T12:16:56Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/testFixtures/java/com/marklogic/hub/test/AbstractHubTest.java", "diffHunk": "@@ -374,6 +371,27 @@ protected void installUserModulesAndArtifacts(HubConfig hubConfig, boolean force\n \n     }\n \n+    protected void deployEntityIndexes(HubConfig hubConfig) {\n+        EntityManager entityManager = new EntityManagerImpl(hubConfig);\n+        entityManager.saveDbIndexes();\n+        List<Command> commands = new ArrayList<>();\n+\n+        Path dir = hubConfig.getEntityDatabaseDir();\n+        File finalFile = Paths.get(dir.toString(), HubConfig.FINAL_ENTITY_DATABASE_FILE).toFile();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b58f5ae1ce6608936a561f780137e83b2ce8fb0"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4NjY3MA==", "bodyText": "Updated to use dbCommand.execute(newCommandContext()) and deploy both staging and final indexes", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4536#discussion_r486486670", "createdAt": "2020-09-10T16:43:39Z", "author": {"login": "ryanjdew"}, "path": "marklogic-data-hub/src/testFixtures/java/com/marklogic/hub/test/AbstractHubTest.java", "diffHunk": "@@ -374,6 +371,27 @@ protected void installUserModulesAndArtifacts(HubConfig hubConfig, boolean force\n \n     }\n \n+    protected void deployEntityIndexes(HubConfig hubConfig) {\n+        EntityManager entityManager = new EntityManagerImpl(hubConfig);\n+        entityManager.saveDbIndexes();\n+        List<Command> commands = new ArrayList<>();\n+\n+        Path dir = hubConfig.getEntityDatabaseDir();\n+        File finalFile = Paths.get(dir.toString(), HubConfig.FINAL_ENTITY_DATABASE_FILE).toFile();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI4ODg2MA=="}, "originalCommit": {"oid": "3b58f5ae1ce6608936a561f780137e83b2ce8fb0"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzE2OTAwOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/EntitySearchManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzoyNjoyM1rOHP-WEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzoyNjoyM1rOHP-WEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUxMjE0Ng==", "bodyText": "I believe FileCopyUtils.copy will close the streams for us even if an error occurs.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4536#discussion_r486512146", "createdAt": "2020-09-10T17:26:23Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/EntitySearchManager.java", "diffHunk": "@@ -246,17 +249,16 @@ public void exportRows(JsonNode queryDocument, Long limit, OutputStream out) {\n         List<SearchQuery.SortOrder> sortOrder = searchQuery.getSortOrder().orElse(new ArrayList<>());\n         ArrayNode sortOrderNode = sortOrderToArrayNode(sortOrder);\n \n-\n-        JsonNode opticPlanNode = EntitySearchService.on(finalDatabaseClient).getOpticPlan(structuredQuery, searchText, queryOptions, entityTypeId, entityTypeId, limit, sortOrderNode, columns.stream());\n-        StringHandle stringHandle = new StringHandle(opticPlanNode.toString());\n-        RowManager rowManager = finalDatabaseClient.newRowManager();\n-        try (ReaderHandle readerHandle = new ReaderHandle()) {\n-            rowManager.resultDoc(rowManager.newRawPlanDefinition(stringHandle), readerHandle.withMimetype(CSV_CONTENT_TYPE));\n-            readerHandle.write(out);\n+        EntitySearchService entitySearchService = EntitySearchService.on(finalDatabaseClient);\n+        // Exporting directly from Data Service to avoid bug https://bugtrack.marklogic.com/55338 related to namespaced path range indexes\n+        Reader export = entitySearchService.exportSearchAsCSV(structuredQuery, searchText, queryOptions, entityTypeId, entityTypeId, limit, sortOrderNode, columns.stream());\n+        try {\n+            FileCopyUtils.copy(export, new OutputStreamWriter(out));\n         } catch (IOException e) {\n-            throw new RuntimeException(e);\n-        } finally {\n+            // Ensure both streams are closed if an error occurs\n+            IOUtils.closeQuietly(export);\n             IOUtils.closeQuietly(out);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c4c8591b7fdd430dee16e2ac69a888bf62929f5"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3306, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}