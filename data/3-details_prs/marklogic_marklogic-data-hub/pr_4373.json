{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NjY5OTI0", "number": 4373, "title": "DHFPROD-5663: Migrate matching, merging, and mastering steps", "bodyText": "Description\nChecklist:\n- Note: do not change the below\n\n\nOwner:\n\n\n JIRA_ID included in all the commit messages\n\n\n PR title is in the format JIRA_ID:Title\n\n\n Rebase the branch with upstream\n\n\n Squashed all commits into a single commit\n\n\n Added Tests\n\n\nReviewer:\n\n\n Reviewed Tests", "createdAt": "2020-08-10T18:49:57Z", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4373", "merged": true, "mergeCommit": {"oid": "cea861f6bfcf2cd9e9b0b0fc66b0169fca43960c"}, "closed": true, "closedAt": "2020-08-12T20:38:33Z", "author": {"login": "fsnow"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc9o9eqgFqTQ2NDU4NTk2NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-RC-EgFqTQ2NjIzMDY2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NTg1OTY0", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4373#pullrequestreview-464585964", "createdAt": "2020-08-10T21:02:46Z", "commit": {"oid": "d97735156910ba497cdc14be659627df2a4ea4e2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTowMjo0N1rOG-fsmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMToxNjowNFrOG-gE-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE4NDIxOA==", "bodyText": "Can you include the value of type in here - e.g. \"Invalid step type: \" + type", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4373#discussion_r468184218", "createdAt": "2020-08-10T21:02:47Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/impl/HubProjectImpl.java", "diffHunk": "@@ -769,6 +769,43 @@ public Path getStepsPath() {\n         return this.projectDir.resolve(\"steps\");\n     }\n \n+    @Override\n+    public Path getStepsPath(StepDefinition.StepDefinitionType type) {\n+        Path path;\n+\n+        Path parent = this.getStepsPath();\n+\n+        if (type == null) {\n+            throw new DataHubProjectException(\"Invalid Step type\");\n+        }\n+        else {\n+            switch (type) {\n+                case CUSTOM:\n+                    path = parent.resolve(\"custom\");\n+                    break;\n+                case INGESTION:\n+                    path = parent.resolve(\"ingestion\");\n+                    break;\n+                case MAPPING:\n+                    path = parent.resolve(\"mapping\");\n+                    break;\n+                case MASTERING:\n+                    path = parent.resolve(\"mastering\");\n+                    break;\n+                case MATCHING:\n+                    path = parent.resolve(\"matching\");\n+                    break;\n+                case MERGING:\n+                    path = parent.resolve(\"merging\");\n+                    break;\n+                default:\n+                    throw new DataHubProjectException(\"Invalid Step type\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d97735156910ba497cdc14be659627df2a4ea4e2"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE4NDU4NQ==", "bodyText": "I think targetEntityType and selectedSource are supposed to stay here - did you mean to remove them? They don't need to exist in matching/merging yet.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4373#discussion_r468184585", "createdAt": "2020-08-10T21:03:34Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/artifacts/mapping.sjs", "diffHunk": "@@ -24,7 +24,7 @@ const hubEs = require(\"/data-hub/5/impl/hub-es.sjs\");\n const collections = ['http://marklogic.com/data-hub/mappings', 'http://marklogic.com/data-hub/steps/mapping', 'http://marklogic.com/data-hub/steps'];\n const databases = [dataHub.config.STAGINGDATABASE, dataHub.config.FINALDATABASE];\n const permissions = [xdmp.permission(dataHub.consts.DATA_HUB_MAPPING_WRITE_ROLE, 'update'), xdmp.permission(dataHub.consts.DATA_HUB_MAPPING_READ_ROLE, 'read')];\n-const requiredProperties = ['name', 'targetEntityType', 'selectedSource'];\n+const requiredProperties = ['name'];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d97735156910ba497cdc14be659627df2a4ea4e2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE4NDk2Mw==", "bodyText": "Per the story, let's stick with match-merge-reader/writer here instead of flow-reader/writer.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4373#discussion_r468184963", "createdAt": "2020-08-10T21:04:23Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/artifacts/mastering.sjs", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ Copyright (c) 2020 MarkLogic Corporation\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+'use strict';\n+\n+const DataHubSingleton = require('/data-hub/5/datahub-singleton.sjs');\n+\n+// define constants for caching expensive operations\n+const dataHub = DataHubSingleton.instance();\n+\n+const collections = ['http://marklogic.com/data-hub/steps/mastering', 'http://marklogic.com/data-hub/steps'];\n+const databases = [dataHub.config.STAGINGDATABASE, dataHub.config.FINALDATABASE];\n+const permissions = [xdmp.permission(dataHub.consts.DATA_HUB_FLOW_WRITE_ROLE, 'update'), xdmp.permission(dataHub.consts.DATA_HUB_FLOW_READ_ROLE, 'read')];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d97735156910ba497cdc14be659627df2a4ea4e2"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE4NTk3Mw==", "bodyText": "Mastering/matching/merging actually use \"targetEntity\" instead of targetEntityType - that's something we'll be making consistent in 5.4. But while this should be \"targetEntity\", I think you can safely remove this function altogether, as it's not exported below. Can also remove - getSelectedSourceProperty and getVersionProperty (getVersionProperty really needs to be removed in a separate JIRA ticket altogether, as \"version\" isn't being used by artifacts yet).", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4373#discussion_r468185973", "createdAt": "2020-08-10T21:06:31Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/artifacts/mastering.sjs", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ Copyright (c) 2020 MarkLogic Corporation\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+'use strict';\n+\n+const DataHubSingleton = require('/data-hub/5/datahub-singleton.sjs');\n+\n+// define constants for caching expensive operations\n+const dataHub = DataHubSingleton.instance();\n+\n+const collections = ['http://marklogic.com/data-hub/steps/mastering', 'http://marklogic.com/data-hub/steps'];\n+const databases = [dataHub.config.STAGINGDATABASE, dataHub.config.FINALDATABASE];\n+const permissions = [xdmp.permission(dataHub.consts.DATA_HUB_FLOW_WRITE_ROLE, 'update'), xdmp.permission(dataHub.consts.DATA_HUB_FLOW_READ_ROLE, 'read')];\n+const requiredProperties = ['name'];\n+\n+function getNameProperty() {\n+    return 'name';\n+}\n+\n+function getEntityNameProperty() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d97735156910ba497cdc14be659627df2a4ea4e2"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE4NjA5Ng==", "bodyText": "I don't think any validation is required here - it's best just to return the artifact.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4373#discussion_r468186096", "createdAt": "2020-08-10T21:06:46Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/artifacts/mastering.sjs", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ Copyright (c) 2020 MarkLogic Corporation\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+'use strict';\n+\n+const DataHubSingleton = require('/data-hub/5/datahub-singleton.sjs');\n+\n+// define constants for caching expensive operations\n+const dataHub = DataHubSingleton.instance();\n+\n+const collections = ['http://marklogic.com/data-hub/steps/mastering', 'http://marklogic.com/data-hub/steps'];\n+const databases = [dataHub.config.STAGINGDATABASE, dataHub.config.FINALDATABASE];\n+const permissions = [xdmp.permission(dataHub.consts.DATA_HUB_FLOW_WRITE_ROLE, 'update'), xdmp.permission(dataHub.consts.DATA_HUB_FLOW_READ_ROLE, 'read')];\n+const requiredProperties = ['name'];\n+\n+function getNameProperty() {\n+    return 'name';\n+}\n+\n+function getEntityNameProperty() {\n+    return 'targetEntityType';\n+}\n+\n+function getSelectedSourceProperty() {\n+    return 'selectedSource';\n+}\n+\n+function getVersionProperty() {\n+    return null;\n+}\n+\n+function getCollections() {\n+    return collections;\n+}\n+\n+function getStorageDatabases() {\n+    return databases;\n+}\n+\n+function getPermissions() {\n+    return permissions;\n+}\n+\n+function getFileExtension() {\n+  return '.step.json';\n+}\n+\n+function getDirectory() {\n+  return \"/steps/mastering/\";\n+}\n+\n+function getArtifactNode(artifactName, artifactVersion) {\n+    const results = cts.search(cts.andQuery([cts.collectionQuery(collections[0]), cts.jsonPropertyValueQuery('name', artifactName)]));\n+    return fn.head(results);\n+}\n+\n+function validateArtifact(artifact) {\n+    const missingProperties = requiredProperties.filter((propName) => !artifact[propName]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d97735156910ba497cdc14be659627df2a4ea4e2"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE4NjMzNA==", "bodyText": "Use match-merge-reader/writer here too.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4373#discussion_r468186334", "createdAt": "2020-08-10T21:07:15Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/artifacts/matching.sjs", "diffHunk": "@@ -20,10 +20,10 @@ const DataHubSingleton = require('/data-hub/5/datahub-singleton.sjs');\n // define constants for caching expensive operations\n const dataHub = DataHubSingleton.instance();\n \n-const collections = ['http://marklogic.com/data-hub/matching-artifact'];\n+const collections = ['http://marklogic.com/data-hub/steps/matching', 'http://marklogic.com/data-hub/steps'];\n const databases = [dataHub.config.STAGINGDATABASE, dataHub.config.FINALDATABASE];\n-const permissions = [xdmp.permission(dataHub.consts.DATA_HUB_MATCHING_WRITE_ROLE, 'update'), xdmp.permission(dataHub.consts.DATA_HUB_MATCHING_READ_ROLE, 'read')];\n-const requiredProperties = ['name', 'targetEntityType', 'selectedSource'];\n+const permissions = [xdmp.permission(dataHub.consts.DATA_HUB_FLOW_WRITE_ROLE, 'update'), xdmp.permission(dataHub.consts.DATA_HUB_FLOW_READ_ROLE, 'read')];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d97735156910ba497cdc14be659627df2a4ea4e2"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE4NzA1MA==", "bodyText": "@ryanjdew There's currently validation in here, and I agree with dropping targetEntityType and selectedSource. But I'm thinking we shouldn't do any validation at all, as I don't think there's a requirement that matching steps currently have a \"name\". I think we can tackle validation in 5.4.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4373#discussion_r468187050", "createdAt": "2020-08-10T21:08:53Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/artifacts/matching.sjs", "diffHunk": "@@ -20,10 +20,10 @@ const DataHubSingleton = require('/data-hub/5/datahub-singleton.sjs');\n // define constants for caching expensive operations\n const dataHub = DataHubSingleton.instance();\n \n-const collections = ['http://marklogic.com/data-hub/matching-artifact'];\n+const collections = ['http://marklogic.com/data-hub/steps/matching', 'http://marklogic.com/data-hub/steps'];\n const databases = [dataHub.config.STAGINGDATABASE, dataHub.config.FINALDATABASE];\n-const permissions = [xdmp.permission(dataHub.consts.DATA_HUB_MATCHING_WRITE_ROLE, 'update'), xdmp.permission(dataHub.consts.DATA_HUB_MATCHING_READ_ROLE, 'read')];\n-const requiredProperties = ['name', 'targetEntityType', 'selectedSource'];\n+const permissions = [xdmp.permission(dataHub.consts.DATA_HUB_FLOW_WRITE_ROLE, 'update'), xdmp.permission(dataHub.consts.DATA_HUB_FLOW_READ_ROLE, 'read')];\n+const requiredProperties = ['name'];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d97735156910ba497cdc14be659627df2a4ea4e2"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE4NzU2Mg==", "bodyText": "Same as above - use match-merge-reader/writer and drop validation, along with getEntityNameProperty and getSelectedSourceProperty and getVersionProperty.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4373#discussion_r468187562", "createdAt": "2020-08-10T21:09:56Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/artifacts/merging.sjs", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ Copyright (c) 2020 MarkLogic Corporation\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+'use strict';\n+\n+const DataHubSingleton = require('/data-hub/5/datahub-singleton.sjs');\n+\n+// define constants for caching expensive operations\n+const dataHub = DataHubSingleton.instance();\n+\n+const collections = ['http://marklogic.com/data-hub/steps/merging', 'http://marklogic.com/data-hub/steps'];\n+const databases = [dataHub.config.STAGINGDATABASE, dataHub.config.FINALDATABASE];\n+const permissions = [xdmp.permission(dataHub.consts.DATA_HUB_FLOW_WRITE_ROLE, 'update'), xdmp.permission(dataHub.consts.DATA_HUB_FLOW_READ_ROLE, 'read')];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d97735156910ba497cdc14be659627df2a4ea4e2"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE4ODg3OA==", "bodyText": "I think this should have \"@test\" on it?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4373#discussion_r468188878", "createdAt": "2020-08-10T21:12:51Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/hubcentral/migration/AllStepsReferencedTest.java", "diffHunk": "@@ -0,0 +1,429 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+//import com.marklogic.client.document.JSONDocumentManager;\n+import com.marklogic.client.eval.EvalResult;\n+import com.marklogic.client.eval.EvalResultIterator;\n+import com.marklogic.hub.*;\n+import com.marklogic.hub.dataservices.FlowService;\n+import com.marklogic.hub.flow.Flow;\n+import com.marklogic.hub.flow.FlowInputs;\n+import com.marklogic.hub.flow.FlowRunner;\n+import com.marklogic.hub.flow.RunFlowResponse;\n+import com.marklogic.hub.impl.FlowManagerImpl;\n+import com.marklogic.hub.impl.MappingManagerImpl;\n+import com.marklogic.hub.mapping.Mapping;\n+import com.marklogic.hub.step.RunStepResponse;\n+import com.marklogic.hub.step.StepDefinition;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.ClassPathResource;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.*;\n+import java.util.stream.Stream;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class AllStepsReferencedTest extends AbstractHubCoreTest {\n+\n+    ObjectMapper mapper = new ObjectMapper();\n+\n+    @Autowired\n+    FlowRunner flowRunner;\n+\n+    @BeforeEach\n+    void setUp() {\n+        String folderInClasspath = \"test-projects/all-steps-referenced\";\n+        installProjectInFolder(folderInClasspath);\n+\n+        // copy input directory to ye-olde-project\n+        try {\n+            File testProjectDir = new ClassPathResource(folderInClasspath).getFile();\n+            HubProject hubProject = getHubConfig().getHubProject();\n+            File inputDir = new File(testProjectDir, \"input\");\n+            File copyToDir = new File(hubProject.getProjectDir().toFile(), \"input\");\n+            if (inputDir.exists()) {\n+                FileUtils.copyDirectory(inputDir, copyToDir);\n+            }\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Unable to load project files: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    @Test\n+    void validateMigratedFlowsAndSteps() {\n+        HubConfig hubConfig = getHubConfig();\n+\n+        FlowMigrator flowMigrator = new FlowMigrator(hubConfig);\n+        flowMigrator.migrateFlows();\n+\n+        validateFullyReferencedFlowsAndSteps();\n+    }\n+\n+    @Test\n+    void migrateAndRunCompleteFlow() {\n+        HubConfig hubConfig = getHubConfig();\n+\n+        FlowMigrator flowMigrator = new FlowMigrator(hubConfig);\n+        flowMigrator.migrateFlows();\n+        installUserArtifacts();\n+\n+        RunFlowResponse flowResponse = flowRunner.runFlow(new FlowInputs(\"CurateCustomerJSON\", \"1\", \"2\", \"3\", \"4\"));\n+        flowRunner.awaitCompletion();\n+        RunStepResponse runStepResponse = flowResponse.getStepResponses().get(\"1\");\n+        assertTrue(runStepResponse.isSuccess(), \"Ingestion step failed!\");\n+        runStepResponse = flowResponse.getStepResponses().get(\"2\");\n+        assertTrue(runStepResponse.isSuccess(), \"Mapping step failed!\");\n+        runStepResponse = flowResponse.getStepResponses().get(\"3\");\n+        assertTrue(runStepResponse.isSuccess(), \"Matching step failed!\");\n+        runStepResponse = flowResponse.getStepResponses().get(\"4\");\n+        assertTrue(runStepResponse.isSuccess(), \"Merging step failed!\");\n+\n+        assertTrue(getFinalDocCount(\"merged-customer\") == 6,\"Expected 6 merged-customer docs\");\n+    }\n+\n+    void migrateAndRunMasteringFlow() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d97735156910ba497cdc14be659627df2a4ea4e2"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE4OTIzMw==", "bodyText": "There are unfortunately a lot of equality assertions in the DHF codebase that use assertTrue instead of assertEquals - this should be \"assertEquals(6, getFinalDocCount(...), \"message\").", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4373#discussion_r468189233", "createdAt": "2020-08-10T21:13:31Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/hubcentral/migration/AllStepsReferencedTest.java", "diffHunk": "@@ -0,0 +1,429 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+//import com.marklogic.client.document.JSONDocumentManager;\n+import com.marklogic.client.eval.EvalResult;\n+import com.marklogic.client.eval.EvalResultIterator;\n+import com.marklogic.hub.*;\n+import com.marklogic.hub.dataservices.FlowService;\n+import com.marklogic.hub.flow.Flow;\n+import com.marklogic.hub.flow.FlowInputs;\n+import com.marklogic.hub.flow.FlowRunner;\n+import com.marklogic.hub.flow.RunFlowResponse;\n+import com.marklogic.hub.impl.FlowManagerImpl;\n+import com.marklogic.hub.impl.MappingManagerImpl;\n+import com.marklogic.hub.mapping.Mapping;\n+import com.marklogic.hub.step.RunStepResponse;\n+import com.marklogic.hub.step.StepDefinition;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.ClassPathResource;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.*;\n+import java.util.stream.Stream;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class AllStepsReferencedTest extends AbstractHubCoreTest {\n+\n+    ObjectMapper mapper = new ObjectMapper();\n+\n+    @Autowired\n+    FlowRunner flowRunner;\n+\n+    @BeforeEach\n+    void setUp() {\n+        String folderInClasspath = \"test-projects/all-steps-referenced\";\n+        installProjectInFolder(folderInClasspath);\n+\n+        // copy input directory to ye-olde-project\n+        try {\n+            File testProjectDir = new ClassPathResource(folderInClasspath).getFile();\n+            HubProject hubProject = getHubConfig().getHubProject();\n+            File inputDir = new File(testProjectDir, \"input\");\n+            File copyToDir = new File(hubProject.getProjectDir().toFile(), \"input\");\n+            if (inputDir.exists()) {\n+                FileUtils.copyDirectory(inputDir, copyToDir);\n+            }\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Unable to load project files: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    @Test\n+    void validateMigratedFlowsAndSteps() {\n+        HubConfig hubConfig = getHubConfig();\n+\n+        FlowMigrator flowMigrator = new FlowMigrator(hubConfig);\n+        flowMigrator.migrateFlows();\n+\n+        validateFullyReferencedFlowsAndSteps();\n+    }\n+\n+    @Test\n+    void migrateAndRunCompleteFlow() {\n+        HubConfig hubConfig = getHubConfig();\n+\n+        FlowMigrator flowMigrator = new FlowMigrator(hubConfig);\n+        flowMigrator.migrateFlows();\n+        installUserArtifacts();\n+\n+        RunFlowResponse flowResponse = flowRunner.runFlow(new FlowInputs(\"CurateCustomerJSON\", \"1\", \"2\", \"3\", \"4\"));\n+        flowRunner.awaitCompletion();\n+        RunStepResponse runStepResponse = flowResponse.getStepResponses().get(\"1\");\n+        assertTrue(runStepResponse.isSuccess(), \"Ingestion step failed!\");\n+        runStepResponse = flowResponse.getStepResponses().get(\"2\");\n+        assertTrue(runStepResponse.isSuccess(), \"Mapping step failed!\");\n+        runStepResponse = flowResponse.getStepResponses().get(\"3\");\n+        assertTrue(runStepResponse.isSuccess(), \"Matching step failed!\");\n+        runStepResponse = flowResponse.getStepResponses().get(\"4\");\n+        assertTrue(runStepResponse.isSuccess(), \"Merging step failed!\");\n+\n+        assertTrue(getFinalDocCount(\"merged-customer\") == 6,\"Expected 6 merged-customer docs\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d97735156910ba497cdc14be659627df2a4ea4e2"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE4OTY3MA==", "bodyText": "installProjectInFolder will do this automatically for you, but the folder has to be named \"data\" instead of \"input\"", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4373#discussion_r468189670", "createdAt": "2020-08-10T21:14:31Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/hubcentral/migration/AllStepsReferencedTest.java", "diffHunk": "@@ -0,0 +1,429 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+//import com.marklogic.client.document.JSONDocumentManager;\n+import com.marklogic.client.eval.EvalResult;\n+import com.marklogic.client.eval.EvalResultIterator;\n+import com.marklogic.hub.*;\n+import com.marklogic.hub.dataservices.FlowService;\n+import com.marklogic.hub.flow.Flow;\n+import com.marklogic.hub.flow.FlowInputs;\n+import com.marklogic.hub.flow.FlowRunner;\n+import com.marklogic.hub.flow.RunFlowResponse;\n+import com.marklogic.hub.impl.FlowManagerImpl;\n+import com.marklogic.hub.impl.MappingManagerImpl;\n+import com.marklogic.hub.mapping.Mapping;\n+import com.marklogic.hub.step.RunStepResponse;\n+import com.marklogic.hub.step.StepDefinition;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.ClassPathResource;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.*;\n+import java.util.stream.Stream;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class AllStepsReferencedTest extends AbstractHubCoreTest {\n+\n+    ObjectMapper mapper = new ObjectMapper();\n+\n+    @Autowired\n+    FlowRunner flowRunner;\n+\n+    @BeforeEach\n+    void setUp() {\n+        String folderInClasspath = \"test-projects/all-steps-referenced\";\n+        installProjectInFolder(folderInClasspath);\n+\n+        // copy input directory to ye-olde-project", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d97735156910ba497cdc14be659627df2a4ea4e2"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5MDQ1Nw==", "bodyText": "I think you should be able to run the mastering test on the same data that you used for the matching and merging test, which I highly recommend because we know there's exactly one match expected. We don't want to repeat the assertions from MasterTest, where we expect a very high count of documents, and when that count isn't met, it's nearly impossible to determine why not.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4373#discussion_r468190457", "createdAt": "2020-08-10T21:16:04Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/hubcentral/migration/AllStepsReferencedTest.java", "diffHunk": "@@ -0,0 +1,429 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+//import com.marklogic.client.document.JSONDocumentManager;\n+import com.marklogic.client.eval.EvalResult;\n+import com.marklogic.client.eval.EvalResultIterator;\n+import com.marklogic.hub.*;\n+import com.marklogic.hub.dataservices.FlowService;\n+import com.marklogic.hub.flow.Flow;\n+import com.marklogic.hub.flow.FlowInputs;\n+import com.marklogic.hub.flow.FlowRunner;\n+import com.marklogic.hub.flow.RunFlowResponse;\n+import com.marklogic.hub.impl.FlowManagerImpl;\n+import com.marklogic.hub.impl.MappingManagerImpl;\n+import com.marklogic.hub.mapping.Mapping;\n+import com.marklogic.hub.step.RunStepResponse;\n+import com.marklogic.hub.step.StepDefinition;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.ClassPathResource;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.*;\n+import java.util.stream.Stream;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class AllStepsReferencedTest extends AbstractHubCoreTest {\n+\n+    ObjectMapper mapper = new ObjectMapper();\n+\n+    @Autowired\n+    FlowRunner flowRunner;\n+\n+    @BeforeEach\n+    void setUp() {\n+        String folderInClasspath = \"test-projects/all-steps-referenced\";\n+        installProjectInFolder(folderInClasspath);\n+\n+        // copy input directory to ye-olde-project\n+        try {\n+            File testProjectDir = new ClassPathResource(folderInClasspath).getFile();\n+            HubProject hubProject = getHubConfig().getHubProject();\n+            File inputDir = new File(testProjectDir, \"input\");\n+            File copyToDir = new File(hubProject.getProjectDir().toFile(), \"input\");\n+            if (inputDir.exists()) {\n+                FileUtils.copyDirectory(inputDir, copyToDir);\n+            }\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Unable to load project files: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    @Test\n+    void validateMigratedFlowsAndSteps() {\n+        HubConfig hubConfig = getHubConfig();\n+\n+        FlowMigrator flowMigrator = new FlowMigrator(hubConfig);\n+        flowMigrator.migrateFlows();\n+\n+        validateFullyReferencedFlowsAndSteps();\n+    }\n+\n+    @Test\n+    void migrateAndRunCompleteFlow() {\n+        HubConfig hubConfig = getHubConfig();\n+\n+        FlowMigrator flowMigrator = new FlowMigrator(hubConfig);\n+        flowMigrator.migrateFlows();\n+        installUserArtifacts();\n+\n+        RunFlowResponse flowResponse = flowRunner.runFlow(new FlowInputs(\"CurateCustomerJSON\", \"1\", \"2\", \"3\", \"4\"));\n+        flowRunner.awaitCompletion();\n+        RunStepResponse runStepResponse = flowResponse.getStepResponses().get(\"1\");\n+        assertTrue(runStepResponse.isSuccess(), \"Ingestion step failed!\");\n+        runStepResponse = flowResponse.getStepResponses().get(\"2\");\n+        assertTrue(runStepResponse.isSuccess(), \"Mapping step failed!\");\n+        runStepResponse = flowResponse.getStepResponses().get(\"3\");\n+        assertTrue(runStepResponse.isSuccess(), \"Matching step failed!\");\n+        runStepResponse = flowResponse.getStepResponses().get(\"4\");\n+        assertTrue(runStepResponse.isSuccess(), \"Merging step failed!\");\n+\n+        assertTrue(getFinalDocCount(\"merged-customer\") == 6,\"Expected 6 merged-customer docs\");\n+    }\n+\n+    void migrateAndRunMasteringFlow() {\n+        HubConfig hubConfig = getHubConfig();\n+\n+        FlowMigrator flowMigrator = new FlowMigrator(hubConfig);\n+        flowMigrator.migrateFlows();\n+        installUserArtifacts();\n+\n+        // The following test was copied from MasterTest\n+\n+        RunFlowResponse flowResponse = flowRunner.runFlow(new FlowInputs(\"myNewFlow\", \"1\",\"2\",\"3\"));\n+        flowRunner.awaitCompletion();\n+        RunStepResponse masterJob = flowResponse.getStepResponses().get(\"3\");\n+        assertTrue(masterJob.isSuccess(), \"Mastering job failed!\");\n+        assertTrue(getFinalDocCount(\"sm-person-merged\") >= 10,\"At least 10 merges occur\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d97735156910ba497cdc14be659627df2a4ea4e2"}, "originalPosition": 104}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NjYzMjk0", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4373#pullrequestreview-464663294", "createdAt": "2020-08-10T23:59:32Z", "commit": {"oid": "7404a8fecf3bf70acfc29a1fece947c64b04685f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzo1OTozMlrOG-jtlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMDowODozNVrOG-j3vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1MDAwNg==", "bodyText": "This same method exists in MasterTest. I think it can be moved to AbstractHubCoreTest and called in both the tests.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4373#discussion_r468250006", "createdAt": "2020-08-10T23:59:32Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/hubcentral/migration/AllStepsReferencedTest.java", "diffHunk": "@@ -0,0 +1,429 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+//import com.marklogic.client.document.JSONDocumentManager;\n+import com.marklogic.client.eval.EvalResult;\n+import com.marklogic.client.eval.EvalResultIterator;\n+import com.marklogic.hub.*;\n+import com.marklogic.hub.dataservices.FlowService;\n+import com.marklogic.hub.flow.Flow;\n+import com.marklogic.hub.flow.FlowInputs;\n+import com.marklogic.hub.flow.FlowRunner;\n+import com.marklogic.hub.flow.RunFlowResponse;\n+import com.marklogic.hub.impl.FlowManagerImpl;\n+import com.marklogic.hub.impl.MappingManagerImpl;\n+import com.marklogic.hub.mapping.Mapping;\n+import com.marklogic.hub.step.RunStepResponse;\n+import com.marklogic.hub.step.StepDefinition;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.ClassPathResource;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.*;\n+import java.util.stream.Stream;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class AllStepsReferencedTest extends AbstractHubCoreTest {\n+\n+    ObjectMapper mapper = new ObjectMapper();\n+\n+    @Autowired\n+    FlowRunner flowRunner;\n+\n+    @BeforeEach\n+    void setUp() {\n+        String folderInClasspath = \"test-projects/all-steps-referenced\";\n+        installProjectInFolder(folderInClasspath);\n+\n+        // copy input directory to ye-olde-project\n+        try {\n+            File testProjectDir = new ClassPathResource(folderInClasspath).getFile();\n+            HubProject hubProject = getHubConfig().getHubProject();\n+            File inputDir = new File(testProjectDir, \"input\");\n+            File copyToDir = new File(hubProject.getProjectDir().toFile(), \"input\");\n+            if (inputDir.exists()) {\n+                FileUtils.copyDirectory(inputDir, copyToDir);\n+            }\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Unable to load project files: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    @Test\n+    void validateMigratedFlowsAndSteps() {\n+        HubConfig hubConfig = getHubConfig();\n+\n+        FlowMigrator flowMigrator = new FlowMigrator(hubConfig);\n+        flowMigrator.migrateFlows();\n+\n+        validateFullyReferencedFlowsAndSteps();\n+    }\n+\n+    @Test\n+    void migrateAndRunCompleteFlow() {\n+        HubConfig hubConfig = getHubConfig();\n+\n+        FlowMigrator flowMigrator = new FlowMigrator(hubConfig);\n+        flowMigrator.migrateFlows();\n+        installUserArtifacts();\n+\n+        RunFlowResponse flowResponse = flowRunner.runFlow(new FlowInputs(\"CurateCustomerJSON\", \"1\", \"2\", \"3\", \"4\"));\n+        flowRunner.awaitCompletion();\n+        RunStepResponse runStepResponse = flowResponse.getStepResponses().get(\"1\");\n+        assertTrue(runStepResponse.isSuccess(), \"Ingestion step failed!\");\n+        runStepResponse = flowResponse.getStepResponses().get(\"2\");\n+        assertTrue(runStepResponse.isSuccess(), \"Mapping step failed!\");\n+        runStepResponse = flowResponse.getStepResponses().get(\"3\");\n+        assertTrue(runStepResponse.isSuccess(), \"Matching step failed!\");\n+        runStepResponse = flowResponse.getStepResponses().get(\"4\");\n+        assertTrue(runStepResponse.isSuccess(), \"Merging step failed!\");\n+\n+        assertEquals(6, getFinalDocCount(\"merged-customer\"),\"Expected 6 merged-customer docs\");\n+    }\n+\n+    void migrateAndRunMasteringFlow() {\n+        HubConfig hubConfig = getHubConfig();\n+\n+        FlowMigrator flowMigrator = new FlowMigrator(hubConfig);\n+        flowMigrator.migrateFlows();\n+        installUserArtifacts();\n+\n+        // The following test was copied from MasterTest\n+\n+        RunFlowResponse flowResponse = flowRunner.runFlow(new FlowInputs(\"myNewFlow\", \"1\",\"2\",\"3\"));\n+        flowRunner.awaitCompletion();\n+        RunStepResponse masterJob = flowResponse.getStepResponses().get(\"3\");\n+        assertTrue(masterJob.isSuccess(), \"Mastering job failed!\");\n+        assertTrue(getFinalDocCount(\"sm-person-merged\") >= 10,\"At least 10 merges occur\");\n+        assertTrue(getFinalDocCount(\"master\") > 0, \"Documents didn't receive master collection\");\n+\n+        // This occasionally fails both locally and in Jenkins with a result of 205. 208 was the original expected value.\n+        // More than half of the time, 208 will be the result. So the test seems to verify a mastering step, and the fact\n+        // that it fails sometimes is being ignored enough that there's no value in having Jenkins test runs fail solely\n+        // because this returns 205 instead of 208. The ideal solution is likely to narrow down the set of documents\n+        // that are expected to be merged together, as it's very difficult right now to know why only 205 are in the\n+        // collection and which 3 are \"missing\".\n+        int masteredCount = getFinalDocCount(\"sm-person-mastered\");\n+        assertTrue(masteredCount >= 205, \"Expecting at least 205 documents to be in the 'sm-person-mastered' collection, but only found: \"+ masteredCount);\n+\n+        // Setting this to 40 or greater as occasionally we get 41 in the pipeline. See bug https://project.marklogic.com/jira/browse/DHFPROD-3178\n+        assertTrue(getFinalDocCount(\"sm-person-notification\") >= 40, \"Not enough notifications are created\");\n+        // Check for JobReport for mastering with correct count\n+        String reportQueryText =\n+            \"cts:and-query((\" +\n+              \"cts:collection-query('JobReport'),\" +\n+              \"cts:json-property-value-query('jobID', '\"+ masterJob.getJobId() +\"'),\" +\n+              \"cts:json-property-value-query('count', \" + masteredCount + \")\" +\n+            \"))\";\n+        assertTrue(existsByQuery(reportQueryText, HubConfig.DEFAULT_JOB_NAME), \"Missing valid mastering job report!\");\n+    }\n+\n+    private Boolean existsByQuery(String query, String database) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7404a8fecf3bf70acfc29a1fece947c64b04685f"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1MDcyMw==", "bodyText": "There seems to be a lot of overlap (and duplication) between this test and FlowMigratorTest. I think it would be better to have one test  class in which a project can be migrated, the artifacts verified and then run.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4373#discussion_r468250723", "createdAt": "2020-08-11T00:02:04Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/hubcentral/migration/AllStepsReferencedTest.java", "diffHunk": "@@ -0,0 +1,429 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+//import com.marklogic.client.document.JSONDocumentManager;\n+import com.marklogic.client.eval.EvalResult;\n+import com.marklogic.client.eval.EvalResultIterator;\n+import com.marklogic.hub.*;\n+import com.marklogic.hub.dataservices.FlowService;\n+import com.marklogic.hub.flow.Flow;\n+import com.marklogic.hub.flow.FlowInputs;\n+import com.marklogic.hub.flow.FlowRunner;\n+import com.marklogic.hub.flow.RunFlowResponse;\n+import com.marklogic.hub.impl.FlowManagerImpl;\n+import com.marklogic.hub.impl.MappingManagerImpl;\n+import com.marklogic.hub.mapping.Mapping;\n+import com.marklogic.hub.step.RunStepResponse;\n+import com.marklogic.hub.step.StepDefinition;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.ClassPathResource;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.*;\n+import java.util.stream.Stream;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class AllStepsReferencedTest extends AbstractHubCoreTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7404a8fecf3bf70acfc29a1fece947c64b04685f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1MjYwNw==", "bodyText": "I think it would be good to have similar methods for mastering, matching and merging steps and make sure that the files are created and looks as expected.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4373#discussion_r468252607", "createdAt": "2020-08-11T00:08:35Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/hubcentral/migration/AllStepsReferencedTest.java", "diffHunk": "@@ -0,0 +1,429 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+//import com.marklogic.client.document.JSONDocumentManager;\n+import com.marklogic.client.eval.EvalResult;\n+import com.marklogic.client.eval.EvalResultIterator;\n+import com.marklogic.hub.*;\n+import com.marklogic.hub.dataservices.FlowService;\n+import com.marklogic.hub.flow.Flow;\n+import com.marklogic.hub.flow.FlowInputs;\n+import com.marklogic.hub.flow.FlowRunner;\n+import com.marklogic.hub.flow.RunFlowResponse;\n+import com.marklogic.hub.impl.FlowManagerImpl;\n+import com.marklogic.hub.impl.MappingManagerImpl;\n+import com.marklogic.hub.mapping.Mapping;\n+import com.marklogic.hub.step.RunStepResponse;\n+import com.marklogic.hub.step.StepDefinition;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.ClassPathResource;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.*;\n+import java.util.stream.Stream;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class AllStepsReferencedTest extends AbstractHubCoreTest {\n+\n+    ObjectMapper mapper = new ObjectMapper();\n+\n+    @Autowired\n+    FlowRunner flowRunner;\n+\n+    @BeforeEach\n+    void setUp() {\n+        String folderInClasspath = \"test-projects/all-steps-referenced\";\n+        installProjectInFolder(folderInClasspath);\n+\n+        // copy input directory to ye-olde-project\n+        try {\n+            File testProjectDir = new ClassPathResource(folderInClasspath).getFile();\n+            HubProject hubProject = getHubConfig().getHubProject();\n+            File inputDir = new File(testProjectDir, \"input\");\n+            File copyToDir = new File(hubProject.getProjectDir().toFile(), \"input\");\n+            if (inputDir.exists()) {\n+                FileUtils.copyDirectory(inputDir, copyToDir);\n+            }\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Unable to load project files: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    @Test\n+    void validateMigratedFlowsAndSteps() {\n+        HubConfig hubConfig = getHubConfig();\n+\n+        FlowMigrator flowMigrator = new FlowMigrator(hubConfig);\n+        flowMigrator.migrateFlows();\n+\n+        validateFullyReferencedFlowsAndSteps();\n+    }\n+\n+    @Test\n+    void migrateAndRunCompleteFlow() {\n+        HubConfig hubConfig = getHubConfig();\n+\n+        FlowMigrator flowMigrator = new FlowMigrator(hubConfig);\n+        flowMigrator.migrateFlows();\n+        installUserArtifacts();\n+\n+        RunFlowResponse flowResponse = flowRunner.runFlow(new FlowInputs(\"CurateCustomerJSON\", \"1\", \"2\", \"3\", \"4\"));\n+        flowRunner.awaitCompletion();\n+        RunStepResponse runStepResponse = flowResponse.getStepResponses().get(\"1\");\n+        assertTrue(runStepResponse.isSuccess(), \"Ingestion step failed!\");\n+        runStepResponse = flowResponse.getStepResponses().get(\"2\");\n+        assertTrue(runStepResponse.isSuccess(), \"Mapping step failed!\");\n+        runStepResponse = flowResponse.getStepResponses().get(\"3\");\n+        assertTrue(runStepResponse.isSuccess(), \"Matching step failed!\");\n+        runStepResponse = flowResponse.getStepResponses().get(\"4\");\n+        assertTrue(runStepResponse.isSuccess(), \"Merging step failed!\");\n+\n+        assertEquals(6, getFinalDocCount(\"merged-customer\"),\"Expected 6 merged-customer docs\");\n+    }\n+\n+    void migrateAndRunMasteringFlow() {\n+        HubConfig hubConfig = getHubConfig();\n+\n+        FlowMigrator flowMigrator = new FlowMigrator(hubConfig);\n+        flowMigrator.migrateFlows();\n+        installUserArtifacts();\n+\n+        // The following test was copied from MasterTest\n+\n+        RunFlowResponse flowResponse = flowRunner.runFlow(new FlowInputs(\"myNewFlow\", \"1\",\"2\",\"3\"));\n+        flowRunner.awaitCompletion();\n+        RunStepResponse masterJob = flowResponse.getStepResponses().get(\"3\");\n+        assertTrue(masterJob.isSuccess(), \"Mastering job failed!\");\n+        assertTrue(getFinalDocCount(\"sm-person-merged\") >= 10,\"At least 10 merges occur\");\n+        assertTrue(getFinalDocCount(\"master\") > 0, \"Documents didn't receive master collection\");\n+\n+        // This occasionally fails both locally and in Jenkins with a result of 205. 208 was the original expected value.\n+        // More than half of the time, 208 will be the result. So the test seems to verify a mastering step, and the fact\n+        // that it fails sometimes is being ignored enough that there's no value in having Jenkins test runs fail solely\n+        // because this returns 205 instead of 208. The ideal solution is likely to narrow down the set of documents\n+        // that are expected to be merged together, as it's very difficult right now to know why only 205 are in the\n+        // collection and which 3 are \"missing\".\n+        int masteredCount = getFinalDocCount(\"sm-person-mastered\");\n+        assertTrue(masteredCount >= 205, \"Expecting at least 205 documents to be in the 'sm-person-mastered' collection, but only found: \"+ masteredCount);\n+\n+        // Setting this to 40 or greater as occasionally we get 41 in the pipeline. See bug https://project.marklogic.com/jira/browse/DHFPROD-3178\n+        assertTrue(getFinalDocCount(\"sm-person-notification\") >= 40, \"Not enough notifications are created\");\n+        // Check for JobReport for mastering with correct count\n+        String reportQueryText =\n+            \"cts:and-query((\" +\n+              \"cts:collection-query('JobReport'),\" +\n+              \"cts:json-property-value-query('jobID', '\"+ masterJob.getJobId() +\"'),\" +\n+              \"cts:json-property-value-query('count', \" + masteredCount + \")\" +\n+            \"))\";\n+        assertTrue(existsByQuery(reportQueryText, HubConfig.DEFAULT_JOB_NAME), \"Missing valid mastering job report!\");\n+    }\n+\n+    private Boolean existsByQuery(String query, String database) {\n+        Boolean exists = Boolean.FALSE;\n+        EvalResultIterator resultItr = runInDatabase(\"xdmp:exists(cts:search(fn:doc(),\" + query + \"))\", database);\n+        if (resultItr == null || ! resultItr.hasNext()) {\n+            return exists;\n+        }\n+        EvalResult res = resultItr.next();\n+        exists = res.getBoolean();\n+        return exists;\n+    }\n+\n+    private void validateFullyReferencedFlowsAndSteps() {\n+        HubProject hubProject = getHubConfig().getHubProject();\n+\n+        ArrayList<StepDefinition.StepDefinitionType> stepDefTypes = StepDefinition.StepDefinitionType.getStepDefinitionTypes();\n+\n+        File[] flowFiles = hubProject.getFlowsDir().toFile().listFiles();\n+        assertEquals(flowFiles.length, 1);\n+\n+        for (File flowFile : flowFiles) {\n+            JsonNode flowNode = readJsonObject(flowFile);\n+            JsonNode stepsNode = flowNode.get(\"steps\");\n+            assertNotNull(stepsNode, \"The steps key should exist in the flow document\");\n+             Iterator<String> fieldNames = stepsNode.fieldNames();\n+            int stepNum = 1;\n+            while (fieldNames.hasNext()) {\n+                String fieldName = fieldNames.next();\n+                assertEquals(fieldName, Integer.toString(stepNum),\n+                    \"Step numbers should be sequential positive integers starting with one.\");\n+                JsonNode innerObj = stepsNode.get(fieldName);\n+                assertNotNull(innerObj);\n+\n+                String stepId = innerObj.get(\"stepId\").asText();\n+                assertNotNull(stepId, \"stepId should be not null\");\n+\n+                String[] stepIdParts = stepId.split(\"-\");\n+                assertTrue(stepIdParts.length > 1,\n+                    format(\"Step name should be consist of multiple hyphen-separated parts. (%s)\", stepId));\n+                // the last part of the step name is the step definition type\n+                String stepType = stepIdParts[stepIdParts.length - 1];\n+                assertNotNull(StepDefinition.StepDefinitionType.getStepDefinitionType(stepType),\n+                    \"The final part of the stepId should be a step definition type\");\n+\n+                Path stepsPath = hubProject.getStepsPath(StepDefinition.StepDefinitionType.getStepDefinitionType(stepType));\n+                // derive the step name by omitting the final hyphen and step definition type\n+                String stepName = String.join(\"-\", Arrays.copyOfRange(stepIdParts, 0, stepIdParts.length - 1));\n+                assertTrue(stepsPath.resolve(stepName + \".step.json\").toFile().exists(),\n+                    format(\"The step file should exist in the correct step directory. (name: %s, stepId: %s, stepDefinitionType: %s)\", stepName, stepId, stepType));\n+\n+                stepNum++;\n+            }\n+        }\n+\n+        /*\n+        Path migratedFlows = hubProject.getProjectDir().resolve(\"migrated-flows\");\n+\n+        assertTrue(migratedFlows.toFile().exists());\n+        assertFalse(hubProject.getHubMappingsDir().toFile().exists());\n+\n+        assertTrue(migratedFlows.resolve(\"flows\").toFile().listFiles().length > 0);\n+        assertTrue(migratedFlows.resolve(\"mappings\").toFile().listFiles().length > 0);\n+\n+        verifyFlows(hubProject);\n+        verifyIngestionSteps(hubProject, flowMap);\n+        verifyMappingSteps(hubProject, mappingMap, flowMap);\n+        verifyCustomSteps(hubProject, flowMap);\n+\n+        // Deploy artifacts to server\n+        installUserArtifacts();\n+        FlowService flowService = FlowService.on(getHubClient().getStagingClient());\n+        JsonNode flows = flowService.getFlowsWithStepDetails();\n+        // Confirms that endpoint returns 4 flows.\n+        assertEquals(4, flows.size());\n+        for (JsonNode flow: flows){\n+            String flowName = flow.get(\"name\").asText();\n+            //Checks the number of steps is same in the original flow and the flow returned by the ds endpoint\n+            assertEquals(flowMap.get(flowName).getSteps().size(), flow.get(\"steps\").size());\n+        }\n+\n+         */\n+    }\n+\n+    private void verifyCustomSteps(HubProject hubProject, Map<String, Flow> flowMap) {\n+        Path customSteps = hubProject.getProjectDir().resolve(\"steps\").resolve(\"custom\");\n+        Flow customOnlyFlow = flowMap.get(\"custom_only-flow\");\n+        Flow customMasterFlow = flowMap.get(\"custom-master\");\n+\n+        JsonNode customStep1 = readJsonObject(customSteps.resolve(\"custom-mastering.step.json\").toFile());\n+        JsonNode customStep2 = readJsonObject(customSteps.resolve(\"generate-dictionary.step.json\").toFile());\n+        JsonNode customStep3 = readJsonObject(customSteps.resolve(\"custom-mapping-step.step.json\").toFile());\n+\n+        assertEquals(List.of(\"master-customer\", \"Customer\", \"custom-mastering\" ), getCollectionsAsList(customStep1));\n+        assertEquals(List.of(\"generate-dictionary\", \"Customer\"), getCollectionsAsList(customStep2));\n+        assertEquals(List.of(\"custom-mapping-step\" ), getCollectionsAsList(customStep3));\n+\n+        verifyOptions(customStep1, mapper.valueToTree(customMasterFlow.getStep(\"3\").getOptions()));\n+        verifyOptions(customStep2, mapper.valueToTree(customMasterFlow.getStep(\"1\").getOptions()));\n+        verifyOptions(customStep3, mapper.valueToTree(customOnlyFlow.getStep(\"1\").getOptions()));\n+\n+        assertEquals(\"custom-mastering\", customStep1.get(\"name\").asText());\n+        assertEquals(\"This is a custom mastering step\", customStep1.get(\"description\").asText());\n+        assertEquals(\"custom\", customStep1.get(\"stepDefinitionType\").asText().toLowerCase());\n+        assertEquals(\"Customer\", customStep1.get(\"targetEntityType\").asText());\n+        assertEquals(\"json\", customStep1.get(\"targetFormat\").asText());\n+        assertEquals(\"custom-mastering-custom\", customStep1.get(\"stepId\").asText());\n+\n+        assertEquals(\"generate-dictionary\", customStep2.get(\"name\").asText());\n+        assertEquals(\"Generate dictionary custom step\", customStep2.get(\"description\").asText());\n+        assertEquals(\"custom\", customStep2.get(\"stepDefinitionType\").asText().toLowerCase());\n+        assertEquals(\"Customer\", customStep2.get(\"targetEntityType\").asText());\n+        assertEquals(\"json\", customStep2.get(\"targetFormat\").asText());\n+        assertEquals(\"generate-dictionary-custom\", customStep2.get(\"stepId\").asText());\n+\n+        assertEquals(\"custom-mapping-step\", customStep3.get(\"name\").asText());\n+        assertEquals(\"maps and harmonizes XML docs to data-hub-FINAL\", customStep3.get(\"description\").asText());\n+        assertEquals(\"custom\", customStep3.get(\"stepDefinitionType\").asText().toLowerCase());\n+        assertEquals(\"xml\", customStep3.get(\"targetFormat\").asText());\n+        //\"mapping\" is copied over in case of custom mapping step with no valid mapping\n+        assertNotNull(customStep3.get(\"mapping\"));\n+        assertEquals(\"custom-mapping-step-custom\", customStep3.get(\"stepId\").asText());\n+    }\n+\n+    private List getCollectionsAsList(JsonNode customStep){\n+        JsonNode collectionsNode = customStep.get(\"collections\");\n+        List<String> collectionList = new ArrayList<>();\n+        for (JsonNode node : collectionsNode) {\n+            collectionList.add(node.asText());\n+        }\n+        return collectionList;\n+    }\n+\n+    private void verifyMappingSteps(HubProject hubProject, Map<String, Mapping> mappingMap, Map<String, Flow> flowMap) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7404a8fecf3bf70acfc29a1fece947c64b04685f"}, "originalPosition": 259}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MDA3NjA5", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4373#pullrequestreview-465007609", "createdAt": "2020-08-11T12:17:08Z", "commit": {"oid": "7404a8fecf3bf70acfc29a1fece947c64b04685f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjoxNzowOFrOG-1Jpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjoxNzowOFrOG-1Jpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUzNTcxOQ==", "bodyText": "Can remove this and \"requiredProperties\" above too; can remove this function from matching and merging too", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4373#discussion_r468535719", "createdAt": "2020-08-11T12:17:08Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/artifacts/mastering.sjs", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ Copyright (c) 2020 MarkLogic Corporation\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+'use strict';\n+\n+const DataHubSingleton = require('/data-hub/5/datahub-singleton.sjs');\n+\n+// define constants for caching expensive operations\n+const dataHub = DataHubSingleton.instance();\n+\n+const collections = ['http://marklogic.com/data-hub/steps/mastering', 'http://marklogic.com/data-hub/steps'];\n+const databases = [dataHub.config.STAGINGDATABASE, dataHub.config.FINALDATABASE];\n+const permissions =\n+  [\n+    xdmp.permission(dataHub.consts.DATA_HUB_MATCHING_WRITE_ROLE, 'update'),\n+    xdmp.permission(dataHub.consts.DATA_HUB_MATCHING_READ_ROLE, 'read')\n+  ];\n+const requiredProperties = ['name'];\n+\n+function getNameProperty() {\n+    return 'name';\n+}\n+\n+function getVersionProperty() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7404a8fecf3bf70acfc29a1fece947c64b04685f"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MjYyMjAw", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4373#pullrequestreview-465262200", "createdAt": "2020-08-11T17:05:02Z", "commit": {"oid": "b7e551fc735089bc5d18449c7670f7dee7590d75"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNzowNTowMlrOG_BJvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNzowNjowM1rOG_BL-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODczMjM0OA==", "bodyText": "I don't mind a separate test class, as long as we have separate scenarios (in fact, complex scenarios often warrant their own test class with a single test method). I agree that duplication of assertions on ingestions and mapping steps can be removed. But I don't mind a separate class.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4373#discussion_r468732348", "createdAt": "2020-08-11T17:05:02Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/hubcentral/migration/AllStepsReferencedTest.java", "diffHunk": "@@ -0,0 +1,429 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+//import com.marklogic.client.document.JSONDocumentManager;\n+import com.marklogic.client.eval.EvalResult;\n+import com.marklogic.client.eval.EvalResultIterator;\n+import com.marklogic.hub.*;\n+import com.marklogic.hub.dataservices.FlowService;\n+import com.marklogic.hub.flow.Flow;\n+import com.marklogic.hub.flow.FlowInputs;\n+import com.marklogic.hub.flow.FlowRunner;\n+import com.marklogic.hub.flow.RunFlowResponse;\n+import com.marklogic.hub.impl.FlowManagerImpl;\n+import com.marklogic.hub.impl.MappingManagerImpl;\n+import com.marklogic.hub.mapping.Mapping;\n+import com.marklogic.hub.step.RunStepResponse;\n+import com.marklogic.hub.step.StepDefinition;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.ClassPathResource;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.*;\n+import java.util.stream.Stream;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class AllStepsReferencedTest extends AbstractHubCoreTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1MDcyMw=="}, "originalCommit": {"oid": "7404a8fecf3bf70acfc29a1fece947c64b04685f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODczMjU0NQ==", "bodyText": "I believe you can delete this whole try/catch block then, correct?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4373#discussion_r468732545", "createdAt": "2020-08-11T17:05:21Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/hubcentral/migration/AllStepsReferencedTest.java", "diffHunk": "@@ -0,0 +1,429 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+//import com.marklogic.client.document.JSONDocumentManager;\n+import com.marklogic.client.eval.EvalResult;\n+import com.marklogic.client.eval.EvalResultIterator;\n+import com.marklogic.hub.*;\n+import com.marklogic.hub.dataservices.FlowService;\n+import com.marklogic.hub.flow.Flow;\n+import com.marklogic.hub.flow.FlowInputs;\n+import com.marklogic.hub.flow.FlowRunner;\n+import com.marklogic.hub.flow.RunFlowResponse;\n+import com.marklogic.hub.impl.FlowManagerImpl;\n+import com.marklogic.hub.impl.MappingManagerImpl;\n+import com.marklogic.hub.mapping.Mapping;\n+import com.marklogic.hub.step.RunStepResponse;\n+import com.marklogic.hub.step.StepDefinition;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.ClassPathResource;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.*;\n+import java.util.stream.Stream;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class AllStepsReferencedTest extends AbstractHubCoreTest {\n+\n+    ObjectMapper mapper = new ObjectMapper();\n+\n+    @Autowired\n+    FlowRunner flowRunner;\n+\n+    @BeforeEach\n+    void setUp() {\n+        String folderInClasspath = \"test-projects/all-steps-referenced\";\n+        installProjectInFolder(folderInClasspath);\n+\n+        // copy input directory to ye-olde-project", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE4OTY3MA=="}, "originalCommit": {"oid": "d97735156910ba497cdc14be659627df2a4ea4e2"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODczMjkyMA==", "bodyText": "To Srinath's point above - if we're not introducing any new assertions in the AllSteps class, you could remove the ingestion and mapping steps to simplify the test class.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4373#discussion_r468732920", "createdAt": "2020-08-11T17:06:03Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/resources/test-projects/all-steps-referenced/flows/CurateCustomerJSON.flow.json", "diffHunk": "@@ -0,0 +1,160 @@\n+{\n+  \"name\": \"CurateCustomerJSON\",\n+  \"steps\": {\n+    \"1\": {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e551fc735089bc5d18449c7670f7dee7590d75"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MzIyMDQw", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4373#pullrequestreview-465322040", "createdAt": "2020-08-11T18:27:51Z", "commit": {"oid": "c1f5b56fc9ad8dec2430fc6b7bb95ee036d8a743"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MzQ2NTE3", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4373#pullrequestreview-465346517", "createdAt": "2020-08-11T19:00:36Z", "commit": {"oid": "c1f5b56fc9ad8dec2430fc6b7bb95ee036d8a743"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NDcyMzE5", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4373#pullrequestreview-465472319", "createdAt": "2020-08-11T22:30:20Z", "commit": {"oid": "c1f5b56fc9ad8dec2430fc6b7bb95ee036d8a743"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1OTc5NjMy", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4373#pullrequestreview-465979632", "createdAt": "2020-08-12T14:36:01Z", "commit": {"oid": "791b97234a9078f104ad24e60d683cd5c327fe57"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MDU5OTAy", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4373#pullrequestreview-466059902", "createdAt": "2020-08-12T16:01:32Z", "commit": {"oid": "791b97234a9078f104ad24e60d683cd5c327fe57"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e230c89e2c5e552976e0d54e792c184e324aaa3c", "author": {"user": {"login": "fsnow", "name": "Frank Snow"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/e230c89e2c5e552976e0d54e792c184e324aaa3c", "committedDate": "2020-08-12T16:36:32Z", "message": "DHFPROD-5663: Migrate matching, merging, and mastering steps"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTYyOTE5", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4373#pullrequestreview-466162919", "createdAt": "2020-08-12T18:19:56Z", "commit": {"oid": "e230c89e2c5e552976e0d54e792c184e324aaa3c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MjMwNjY0", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4373#pullrequestreview-466230664", "createdAt": "2020-08-12T20:01:01Z", "commit": {"oid": "e230c89e2c5e552976e0d54e792c184e324aaa3c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2279, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}