{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5NDQxOTky", "number": 4317, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODo0MzowMFrOETzOew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQyMjoxMjozOVrOEUbFjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTk3NjkxOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/EntitySearchManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODo0MzowMFrOG5vX4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODo0MzowMFrOG5vX4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5ODE3Ng==", "bodyText": "You can use StringUtils.capitalize() here", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4317#discussion_r463198176", "createdAt": "2020-07-30T18:43:00Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/EntitySearchManager.java", "diffHunk": "@@ -371,32 +346,14 @@ private String getFileNameForDownload(JsonNode queryDocument, String fileExtensi\n         return FILE_PREFIX + queryInfo + SEPARATOR + timestamp + fileExtension;\n     }\n \n-    private void buildSortOrderOptions(StringBuilder sb, SearchQuery searchQuery) {\n+    private void buildSearchTextWithSortOperator(SearchQuery searchQuery) {\n+        StringBuilder searchTextBuilder = new StringBuilder(searchQuery.getQuery().getSearchText());\n         Optional<List<SearchQuery.SortOrder>> sortOrders = searchQuery.getSortOrder();\n-        sortOrders.ifPresent(so -> {\n-            sb.append(\"<options>\");\n-            so.forEach(o -> {\n-                sb.append(\"<sort-order\");\n-                if (!METADATA_FIELD_NAME.contains(o.getName())) {\n-                    sb.append(String.format(\" type=\\\"xs:%s\\\"\", StringEscapeUtils.escapeXml10(o.getDataType())));\n-                }\n-\n-                if (o.isAscending()) {\n-                    sb.append(\" direction=\\\"ascending\\\">\");\n-                }\n-                else {\n-                    sb.append(\" direction=\\\"descending\\\">\");\n-                }\n-\n-                if (METADATA_FIELD_NAME.contains(o.getName())) {\n-                    sb.append(String.format(\"<field name=\\\"%s\\\"/>\\n\", StringEscapeUtils.escapeXml10(o.getName())));\n-                }\n-                else {\n-                    sb.append(String.format(\"<element ns=\\\"\\\" name=\\\"%s\\\"/>\\n\", StringEscapeUtils.escapeXml10(o.getName())));\n-                }\n-                sb.append(\"</sort-order>\");\n-            });\n-            sb.append(\"</options>\");\n-        });\n+        sortOrders.ifPresent(sortOrderList -> sortOrderList.forEach(sortOrder -> {\n+            String sortOperator = \"sort\".concat(sortOrder.getSortOperator().substring(0, 1).toUpperCase()).concat(sortOrder.getSortOperator().substring(1));\n+            String sortDirection = sortOperator.concat(sortOrder.getSortDirection().substring(0, 1).toUpperCase()).concat(sortOrder.getSortDirection().substring(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea9cad1264d14cf44d85f6829f6bc9fa170fbb0c"}, "originalPosition": 204}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjE1OTIxOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/impl/hub-entities.xqy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOTozODo0MFrOG5xIlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOTo0NDozNVrOG5xUgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIyNzAzMQ==", "bodyText": "Are there tests for this line of code? This seems brittle - what if the the namespace prefix is \"aes\"? Then an occurrence of \"aes:\" would end up as \"a*:\", which I believe will fail.\nI recommend putting the conversion of a property path into a constraint name into a separate non-private function and writing unit tests for that. That will both verify and document the behavior of the function.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4317#discussion_r463227031", "createdAt": "2020-07-30T19:38:40Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/impl/hub-entities.xqy", "diffHunk": "@@ -235,6 +237,28 @@ declare %private function hent:fix-options-exp($nodes as node()*, $sortable-prop\n       default return $n\n };\n \n+declare %private function hent:add-sort-operators-to-search-options($sortable-properties as map:map)\n+{\n+  let $sort-operators :=\n+    for $property-path in map:keys($sortable-properties)\n+      let $property-path := fn:replace($property-path, \"es:\", \"*:\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1fb0d277de0cd6c5ed38b0e20343e2d01aa7d39"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIzMDA4Mw==", "bodyText": "Also, see my comment below - I don't think we need property paths here, because for 5.3.0, we're only supporting sorting on top-level properties. Thus, a simple property name will suffice. And I don't think that should have a namespace prefix in it, in which case there's no need to replace \"es:\".", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4317#discussion_r463230083", "createdAt": "2020-07-30T19:44:35Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/impl/hub-entities.xqy", "diffHunk": "@@ -235,6 +237,28 @@ declare %private function hent:fix-options-exp($nodes as node()*, $sortable-prop\n       default return $n\n };\n \n+declare %private function hent:add-sort-operators-to-search-options($sortable-properties as map:map)\n+{\n+  let $sort-operators :=\n+    for $property-path in map:keys($sortable-properties)\n+      let $property-path := fn:replace($property-path, \"es:\", \"*:\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIyNzAzMQ=="}, "originalCommit": {"oid": "e1fb0d277de0cd6c5ed38b0e20343e2d01aa7d39"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjE3NTM5OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/impl/hub-entities.xqy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOTo0Mzo0NFrOG5xSxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOTo0Mzo0NFrOG5xSxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIyOTYzNg==", "bodyText": "We only need a single operator with a name of \"sort\". Then, for every sortable property, we have two states - \"(propertyName)Ascending\" and \"(propertyName)Descending\".\nI believe you can get away with \"propertyName\" and not property path because for 5.3.0, we're only supporting sorting on top-level properties. Thus, we do not need to worry about property paths (we may never have to).", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4317#discussion_r463229636", "createdAt": "2020-07-30T19:43:44Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/impl/hub-entities.xqy", "diffHunk": "@@ -235,6 +237,28 @@ declare %private function hent:fix-options-exp($nodes as node()*, $sortable-prop\n       default return $n\n };\n \n+declare %private function hent:add-sort-operators-to-search-options($sortable-properties as map:map)\n+{\n+  let $sort-operators :=\n+    for $property-path in map:keys($sortable-properties)\n+      let $property-path := fn:replace($property-path, \"es:\", \"*:\")\n+      let $constraint-name := fn:concat(\"sort\", xdmp:initcap(fn:tokenize($property-path, \"/\")[last()]))\n+      return\n+        <search:operator name=\"{$constraint-name}\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1fb0d277de0cd6c5ed38b0e20343e2d01aa7d39"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjE4NTkyOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/entities/search/EntitySearchManagerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOTo0NzowNFrOG5xZbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOTo0NzowNFrOG5xZbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIzMTM0Mg==", "bodyText": "I believe we need two kinds of tests in this class:\n\nOne or more tests that verify that the correct \"criteria\" is constructed based on the SortOrder objects in the SearchQuery\nA test that verifies that inserts two customer entity instances and verifies that sorting on a property in ascending and then descending order returns the 2 instances in the correct order.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4317#discussion_r463231342", "createdAt": "2020-07-30T19:47:04Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/entities/search/EntitySearchManagerTest.java", "diffHunk": "@@ -122,41 +122,6 @@ public void testSearchResultsOnNoData() {\n         assertTrue(new EntitySearchManager(getHubClient()).search(query).get().isEmpty());\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1fb0d277de0cd6c5ed38b0e20343e2d01aa7d39"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODUwNjc1OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/impl/hub-entities/generateSearchOptions.sjs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQyMjoxMToyMlrOG6oNkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQyMjoxMToyMlrOG6oNkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyOTQyNA==", "bodyText": "This is fine to keep here - 5626 will turns this into \"/:envelope/:instance/:Book/:title\", just an FYI.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4317#discussion_r464129424", "createdAt": "2020-08-02T22:11:22Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/impl/hub-entities/generateSearchOptions.sjs", "diffHunk": "@@ -135,7 +135,73 @@ function generateExplorerWithFacetableAndSortableProperties() {\n   ];\n }\n \n+function verifySortOperatorsForSortableProperties() {\n+  const input = [{\n+    \"info\" : {\n+      \"title\": \"Book\"\n+    },\n+    \"definitions\": {\n+      \"Book\": {\n+        \"elementRangeIndex\": [\"bookId\"],\n+        \"properties\": {\n+          \"title\": {\"datatype\": \"string\", \"facetable\": true, \"sortable\": true, \"collation\": \"http://marklogic.com/collation/\"},\n+          \"authors\": {\"datatype\": \"array\", \"sortable\": true, \"items\": {\"datatype\": \"string\"}},\n+          \"bookId\": {\"datatype\": \"string\", \"collation\": \"http://marklogic.com/collation/\"},\n+          \"completedDate\": {\"datatype\": \"dateTime\", \"facetable\": true},\n+        }\n+      }\n+    }\n+  }];\n+\n+  const expOptions = hent.dumpSearchOptions(input, true);\n+  return [\n+    test.assertEqual(\"sort\", xs.string(fn.head(expOptions.xpath(\"/*:operator/@name\")))),\n+    test.assertExists(expOptions.xpath(\"/*:operator/*:state[@name = 'titleDescending']\")),\n+    test.assertEqual(\"descending\", xs.string(fn.head(expOptions.xpath(\"/*:operator[@name = 'sort']/*:state[@name = 'titleDescending']/*:sort-order/@direction\")))),\n+    test.assertEqual(\"//*:instance/Book/title\", xs.string(fn.head(expOptions.xpath(\"/*:operator[@name = 'sort']/*:state[@name = 'titleDescending']/*:sort-order/*:path-index\")))),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28911c6bcb881fcee6257c4aa9292ff8823e5b65"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODUwNzIxOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/impl/hub-entities/generateSearchOptions.sjs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQyMjoxMjowMFrOG6oNyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQyMjoxMjowMFrOG6oNyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyOTQ4MQ==", "bodyText": "I am hoping 5626 removes the need for this, as path expressions will now always have \"/*:\" in them instead of \"/es:\", but I'm not 100% sure of that yet.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4317#discussion_r464129481", "createdAt": "2020-08-02T22:12:00Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/impl/hub-entities/generateSearchOptions.sjs", "diffHunk": "@@ -135,7 +135,73 @@ function generateExplorerWithFacetableAndSortableProperties() {\n   ];\n }\n \n+function verifySortOperatorsForSortableProperties() {\n+  const input = [{\n+    \"info\" : {\n+      \"title\": \"Book\"\n+    },\n+    \"definitions\": {\n+      \"Book\": {\n+        \"elementRangeIndex\": [\"bookId\"],\n+        \"properties\": {\n+          \"title\": {\"datatype\": \"string\", \"facetable\": true, \"sortable\": true, \"collation\": \"http://marklogic.com/collation/\"},\n+          \"authors\": {\"datatype\": \"array\", \"sortable\": true, \"items\": {\"datatype\": \"string\"}},\n+          \"bookId\": {\"datatype\": \"string\", \"collation\": \"http://marklogic.com/collation/\"},\n+          \"completedDate\": {\"datatype\": \"dateTime\", \"facetable\": true},\n+        }\n+      }\n+    }\n+  }];\n+\n+  const expOptions = hent.dumpSearchOptions(input, true);\n+  return [\n+    test.assertEqual(\"sort\", xs.string(fn.head(expOptions.xpath(\"/*:operator/@name\")))),\n+    test.assertExists(expOptions.xpath(\"/*:operator/*:state[@name = 'titleDescending']\")),\n+    test.assertEqual(\"descending\", xs.string(fn.head(expOptions.xpath(\"/*:operator[@name = 'sort']/*:state[@name = 'titleDescending']/*:sort-order/@direction\")))),\n+    test.assertEqual(\"//*:instance/Book/title\", xs.string(fn.head(expOptions.xpath(\"/*:operator[@name = 'sort']/*:state[@name = 'titleDescending']/*:sort-order/*:path-index\")))),\n+    test.assertExists(expOptions.xpath(\"/*:operator/*:state[@name = 'titleAscending']\")),\n+    test.assertEqual(\"ascending\", xs.string(fn.head(expOptions.xpath(\"/*:operator[@name = 'sort']/*:state[@name = 'titleAscending']/*:sort-order/@direction\")))),\n+    test.assertEqual(\"//*:instance/Book/title\", xs.string(fn.head(expOptions.xpath(\"/*:operator[@name = 'sort']/*:state[@name = 'titleAscending']/*:sort-order/*:path-index\")))),\n+    test.assertExists(expOptions.xpath(\"/*:operator/*:state[@name = 'authorsDescending']\")),\n+    test.assertEqual(\"descending\", xs.string(fn.head(expOptions.xpath(\"/*:operator[@name = 'sort']/*:state[@name = 'authorsDescending']/*:sort-order/@direction\")))),\n+    test.assertEqual(\"//*:instance/Book/authors\", xs.string(fn.head(expOptions.xpath(\"/*:operator[@name = 'sort']/*:state[@name = 'authorsDescending']/*:sort-order/*:path-index\")))),\n+    test.assertExists(expOptions.xpath(\"/*:operator/*:state[@name = 'authorsAscending']\")),\n+    test.assertEqual(\"ascending\", xs.string(fn.head(expOptions.xpath(\"/*:operator[@name = 'sort']/*:state[@name = 'authorsAscending']/*:sort-order/@direction\")))),\n+    test.assertEqual(\"//*:instance/Book/authors\", xs.string(fn.head(expOptions.xpath(\"/*:operator[@name = 'sort']/*:state[@name = 'authorsAscending']/*:sort-order/*:path-index\")))),\n+    test.assertNotExists(expOptions.xpath(\"/*:operator[@name = 'bookId']\")),\n+    test.assertNotExists(expOptions.xpath(\"/*:operator[@name = 'completedDate']\"))\n+  ];\n+}\n+\n+function verifyReplaceEsNamespace() {\n+  let propertyPath = \"/es:instance/es:entityType/es:value\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28911c6bcb881fcee6257c4aa9292ff8823e5b65"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODUwNzY0OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/resources/test-config/databases/staging-database.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQyMjoxMjozOVrOG6oN_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMzoxMzo0NVrOG6q4qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyOTUzNA==", "bodyText": "Are these empty arrays intentionally here to clear out the indexes?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4317#discussion_r464129534", "createdAt": "2020-08-02T22:12:39Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/resources/test-config/databases/staging-database.json", "diffHunk": "@@ -0,0 +1,5 @@\n+{\n+  \"database-name\": \"data-hub-STAGING\",\n+  \"range-element-index\" : [],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28911c6bcb881fcee6257c4aa9292ff8823e5b65"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MzIyNA==", "bodyText": "Yes. To restore the staging database index config to the previous state, just as for data-hub-FINAL database. Since there were no indexes previously, I have added empty arrays", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4317#discussion_r464173224", "createdAt": "2020-08-03T03:13:45Z", "author": {"login": "rahulvudutala"}, "path": "marklogic-data-hub/src/test/resources/test-config/databases/staging-database.json", "diffHunk": "@@ -0,0 +1,5 @@\n+{\n+  \"database-name\": \"data-hub-STAGING\",\n+  \"range-element-index\" : [],", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyOTUzNA=="}, "originalCommit": {"oid": "28911c6bcb881fcee6257c4aa9292ff8823e5b65"}, "originalPosition": 3}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3898, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}