{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3MzY0NTQ2", "number": 4049, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxODoyMjoyN1rOECRSww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMjozMjoyNFrOEC7_fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODE1OTM5OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/entitySearch/getOpticPlan.sjs", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxODoyMjoyN1rOGeoEFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNzoxOTozNVrOGf2zDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc2Njg3MQ==", "bodyText": "This is a tangent to this PR, but what is the minimum role assigned to the user that should be able to use this data service? I believe we'll need to add the xslt-eval privilege to that role as part of another ticket.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4049#discussion_r434766871", "createdAt": "2020-06-03T18:22:27Z", "author": {"login": "ryanjdew"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/entitySearch/getOpticPlan.sjs", "diffHunk": "@@ -58,6 +80,15 @@ structuredQuery = fn.head(xdmp.unquote(structuredQuery)).root;\n searchText = searchText || '';\n queryOptions = fn.head(xdmp.unquote(queryOptions)).root;\n \n+/*\n+ * Filtering out columns (properties) that are of object/array type since we don't support them for now.\n+ * Also replacing hyphen with underscore for column names (entity property names), schema names and view names since TDE's do the same.\n+ */\n+const simplePropertySet = filterObjectAndArrayTypeProperties(schemaName);\n+columns = columns.filter(column => simplePropertySet.has(column)).map(column => replaceHyphenWithUnderscore(column));\n+viewName = replaceHyphenWithUnderscore(viewName);\n+schemaName = replaceHyphenWithUnderscore(schemaName);\n+\n const newOptions = fn.head(xdmp.xsltEval(stylesheet, queryOptions)).root;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf8332ec2c46260277b21c05a1ffc938dba96212"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5MjY2MQ==", "bodyText": "Good point.\nThis means we need to add the xslt-eval privilege to hub-central-entity-exporter role.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4049#discussion_r434792661", "createdAt": "2020-06-03T19:09:29Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/entitySearch/getOpticPlan.sjs", "diffHunk": "@@ -58,6 +80,15 @@ structuredQuery = fn.head(xdmp.unquote(structuredQuery)).root;\n searchText = searchText || '';\n queryOptions = fn.head(xdmp.unquote(queryOptions)).root;\n \n+/*\n+ * Filtering out columns (properties) that are of object/array type since we don't support them for now.\n+ * Also replacing hyphen with underscore for column names (entity property names), schema names and view names since TDE's do the same.\n+ */\n+const simplePropertySet = filterObjectAndArrayTypeProperties(schemaName);\n+columns = columns.filter(column => simplePropertySet.has(column)).map(column => replaceHyphenWithUnderscore(column));\n+viewName = replaceHyphenWithUnderscore(viewName);\n+schemaName = replaceHyphenWithUnderscore(schemaName);\n+\n const newOptions = fn.head(xdmp.xsltEval(stylesheet, queryOptions)).root;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc2Njg3MQ=="}, "originalCommit": {"oid": "cf8332ec2c46260277b21c05a1ffc938dba96212"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA1Njg0Ng==", "bodyText": "Added a ticket: https://project.marklogic.com/jira/browse/DHFPROD-5139", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4049#discussion_r436056846", "createdAt": "2020-06-05T17:19:35Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/entitySearch/getOpticPlan.sjs", "diffHunk": "@@ -58,6 +80,15 @@ structuredQuery = fn.head(xdmp.unquote(structuredQuery)).root;\n searchText = searchText || '';\n queryOptions = fn.head(xdmp.unquote(queryOptions)).root;\n \n+/*\n+ * Filtering out columns (properties) that are of object/array type since we don't support them for now.\n+ * Also replacing hyphen with underscore for column names (entity property names), schema names and view names since TDE's do the same.\n+ */\n+const simplePropertySet = filterObjectAndArrayTypeProperties(schemaName);\n+columns = columns.filter(column => simplePropertySet.has(column)).map(column => replaceHyphenWithUnderscore(column));\n+viewName = replaceHyphenWithUnderscore(viewName);\n+schemaName = replaceHyphenWithUnderscore(schemaName);\n+\n const newOptions = fn.head(xdmp.xsltEval(stylesheet, queryOptions)).root;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc2Njg3MQ=="}, "originalCommit": {"oid": "cf8332ec2c46260277b21c05a1ffc938dba96212"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDkxMzIxOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/managers/EntitySearchManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjoxNjoyNVrOGfC9gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjoxNjoyNVrOGfC9gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIwNzU1Mg==", "bodyText": "Something to consider as this grows - a switch statement is often a bad practice because it naturally creates a large block of code with explicit knowledge of the various choices for the value being switched on. Switch statements can usually be replaced by a more \"open/closed\" mechanism via an interface like this:\n public interface FacetHandler \n   StructuredQueryDefinition buildQuery(FacetData data, StructuredQueryBuilder queryBuilder)\n\nThis class then has a Map<String, FacetHandler>, where String is the constraint name. And for each selected facet, it finds the matching FacetHandler and asks it to build an SQD.\nThe benefit of this is that you can easily unit-test each implementation of FacetHandler in isolation. And you avoid an ungainly switch statement and have a much more extensible design - when it's time to support a new constraint, you just create a new instance of FacetHandler and add it to the map.\nIt may be worth making that change now, particularly if there's not enough coverage of the code in each switch block here.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4049#discussion_r435207552", "createdAt": "2020-06-04T12:16:25Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/managers/EntitySearchManager.java", "diffHunk": "@@ -190,33 +189,35 @@ private StructuredQueryDefinition buildQuery(QueryManager queryMgr, SearchQuery\n         searchQuery.getQuery().getSelectedFacets().forEach((facetType, data) -> {\n             StructuredQueryDefinition facetDef = null;\n \n-            if (facetType.equals(COLLECTION_CONSTRAINT_NAME)) {\n-                facetDef = queryBuilder\n-                    .collectionConstraint(facetType, data.getStringValues().toArray(new String[0]));\n-            }\n-            else if (facetType.equals(JOB_RANGE_CONSTRAINT_NAME)) {\n-                facetDef = queryBuilder\n-                    .wordConstraint(JOB_WORD_CONSTRAINT_NAME,\n-                        data.getStringValues().toArray(new String[0]));\n-            }\n-            else if (facetType.equals(CREATED_ON_CONSTRAINT_NAME)) {\n-                // Converting the date in string format from yyyy-MM-dd format to yyyy-MM-dd HH:mm:ss format\n-                LocalDate startDate = LocalDate.parse(data.getRangeValues().getLowerBound(), DATE_FORMAT);\n-                String startDateTime = startDate.atStartOfDay(ZoneId.systemDefault())\n-                    .format(DATE_TIME_FORMAT);\n-\n-                // Converting the date in string format from yyyy-MM-dd format to yyyy-MM-dd HH:mm:ss format\n-                // Adding 1 day to end date to get docs harmonized on the end date as well.\n-                LocalDate endDate = LocalDate.parse(data.getRangeValues().getUpperBound(), DATE_FORMAT)\n-                    .plusDays(1);\n-                String endDateTime = endDate.atStartOfDay(ZoneId.systemDefault()).format(DATE_TIME_FORMAT);\n-\n-                facetDef = queryBuilder\n-                    .and(queryBuilder.rangeConstraint(facetType, Operator.GE, startDateTime),\n-                        queryBuilder.rangeConstraint(facetType, Operator.LT, endDateTime));\n-            }\n-            else { // If a property is not a Hub property, then it is an Entity Property\n-                facetDef = getEntityPropertyConstraints(facetType, data, queryBuilder);\n+            switch (facetType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf8332ec2c46260277b21c05a1ffc938dba96212"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTE0MDIzOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/FacetHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMjoyNzo1MVrOGfseFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjoxMjoyM1rOGf0uxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg4NzYzOA==", "bodyText": "I think it's better not to define these, because this ends up causing the interface to know about all the possible implementations, which runs counter to the purpose of an interface.\nIn EntitySearchManager on the develop branch, there's only one reference to each of these constants. If that's still the case, I wouldn't even bother making them constants.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4049#discussion_r435887638", "createdAt": "2020-06-05T12:27:51Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/FacetHandler.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package com.marklogic.hub.central.entities.search;\n+\n+import com.marklogic.client.query.StructuredQueryBuilder;\n+import com.marklogic.client.query.StructuredQueryDefinition;\n+import com.marklogic.hub.central.entities.search.models.DocSearchQueryInfo;\n+\n+public interface FacetHandler {\n+    String COLLECTION_CONSTRAINT_NAME = \"Collection\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1740c2f4a3aa5290c11ac9081f7661a2ec6af70"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAyMjk4Mw==", "bodyText": "That's right, my bad.\nI'll add it to a Constants class specific to entity search as they are used in a couple of places.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4049#discussion_r436022983", "createdAt": "2020-06-05T16:12:23Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/FacetHandler.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package com.marklogic.hub.central.entities.search;\n+\n+import com.marklogic.client.query.StructuredQueryBuilder;\n+import com.marklogic.client.query.StructuredQueryDefinition;\n+import com.marklogic.hub.central.entities.search.models.DocSearchQueryInfo;\n+\n+public interface FacetHandler {\n+    String COLLECTION_CONSTRAINT_NAME = \"Collection\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg4NzYzOA=="}, "originalCommit": {"oid": "b1740c2f4a3aa5290c11ac9081f7661a2ec6af70"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTE0NjY0OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/impl/CreatedOnFacetHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMjoyOTo0MVrOGfsh-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMjoyOTo0MVrOGfsh-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg4ODYzNQ==", "bodyText": "This is another benefit of having a bunch of small Handler implementations - instead of packing all this state into EntitySearchManager, it's tightly associated with the Handler it belongs to.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4049#discussion_r435888635", "createdAt": "2020-06-05T12:29:41Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/impl/CreatedOnFacetHandler.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package com.marklogic.hub.central.entities.search.impl;\n+\n+import com.marklogic.client.query.StructuredQueryBuilder;\n+import com.marklogic.client.query.StructuredQueryDefinition;\n+import com.marklogic.hub.central.entities.search.FacetHandler;\n+import com.marklogic.hub.central.entities.search.models.DocSearchQueryInfo;\n+\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+\n+public class CreatedOnFacetHandler implements FacetHandler {\n+\n+    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1740c2f4a3aa5290c11ac9081f7661a2ec6af70"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTE1MTczOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/entities/search/impl/CollectionFacetHandlerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMjozMToxMlrOGfslKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjoxMzowMlrOGf0wMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg4OTQ0OQ==", "bodyText": "Sorry for the nit-pick here, but can you use \"search\" instead of \"sch\"? \"search\" is widely used in ML code as the prefix for this namespace.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4049#discussion_r435889449", "createdAt": "2020-06-05T12:31:12Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/entities/search/impl/CollectionFacetHandlerTest.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.marklogic.hub.central.entities.search.impl;\n+\n+import com.marklogic.client.query.StructuredQueryBuilder;\n+import com.marklogic.client.query.StructuredQueryDefinition;\n+import com.marklogic.hub.central.entities.search.models.DocSearchQueryInfo;\n+import com.marklogic.rest.util.Fragment;\n+import org.jdom2.Namespace;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Collections;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class CollectionFacetHandlerTest {\n+\n+    @Test\n+    public void testCollectionFacet() {\n+        String uri = \"myCollection\";\n+        String constraintName = \"Collection\";\n+        DocSearchQueryInfo.FacetData facetData = new DocSearchQueryInfo.FacetData();\n+        facetData.setStringValues(Collections.singletonList(uri));\n+        CollectionFacetHandler collectionFacetHandler = new CollectionFacetHandler();\n+        StructuredQueryBuilder queryBuilder = new StructuredQueryBuilder();\n+\n+        StructuredQueryDefinition queryDefinition = collectionFacetHandler.buildQuery(facetData, queryBuilder);\n+        Fragment fragment = new Fragment(queryDefinition.serialize(), Namespace.getNamespace(\"sch\", \"http://marklogic.com/appservices/search\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1740c2f4a3aa5290c11ac9081f7661a2ec6af70"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAyMzM0Ng==", "bodyText": "Sure.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4049#discussion_r436023346", "createdAt": "2020-06-05T16:13:02Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/entities/search/impl/CollectionFacetHandlerTest.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.marklogic.hub.central.entities.search.impl;\n+\n+import com.marklogic.client.query.StructuredQueryBuilder;\n+import com.marklogic.client.query.StructuredQueryDefinition;\n+import com.marklogic.hub.central.entities.search.models.DocSearchQueryInfo;\n+import com.marklogic.rest.util.Fragment;\n+import org.jdom2.Namespace;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Collections;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class CollectionFacetHandlerTest {\n+\n+    @Test\n+    public void testCollectionFacet() {\n+        String uri = \"myCollection\";\n+        String constraintName = \"Collection\";\n+        DocSearchQueryInfo.FacetData facetData = new DocSearchQueryInfo.FacetData();\n+        facetData.setStringValues(Collections.singletonList(uri));\n+        CollectionFacetHandler collectionFacetHandler = new CollectionFacetHandler();\n+        StructuredQueryBuilder queryBuilder = new StructuredQueryBuilder();\n+\n+        StructuredQueryDefinition queryDefinition = collectionFacetHandler.buildQuery(facetData, queryBuilder);\n+        Fragment fragment = new Fragment(queryDefinition.serialize(), Namespace.getNamespace(\"sch\", \"http://marklogic.com/appservices/search\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg4OTQ0OQ=="}, "originalCommit": {"oid": "b1740c2f4a3aa5290c11ac9081f7661a2ec6af70"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTE1NTE5OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/entities/search/impl/CreatedOnFacetHandlerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMjozMjoyNFrOGfsnSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjoxMzoyMVrOGf0w7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg4OTk5NA==", "bodyText": "To avoid duplication, I recommend an AbstractFacetHandlerTest that has a \"protected Fragment toFragment(StructuredQueryDefinition)\" method which will construct the Fragment and initialize the needed Namespace.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4049#discussion_r435889994", "createdAt": "2020-06-05T12:32:24Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/entities/search/impl/CreatedOnFacetHandlerTest.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.marklogic.hub.central.entities.search.impl;\n+\n+import com.marklogic.client.query.StructuredQueryBuilder;\n+import com.marklogic.client.query.StructuredQueryDefinition;\n+import com.marklogic.hub.central.entities.search.models.DocSearchQueryInfo;\n+import com.marklogic.rest.util.Fragment;\n+import org.jdom2.Namespace;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Arrays;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class CreatedOnFacetHandlerTest {\n+\n+    @Test\n+    public void testCreatedOnDateRangeFacet() {\n+        String constraintName = \"createdOnRange\";\n+        String lowerBound = \"2020-06-14\";\n+        String upperBound = \"2020-06-17\";\n+        String expectedUpperBound = \"2020-06-18\";\n+        DocSearchQueryInfo.FacetData facetData = new DocSearchQueryInfo.FacetData();\n+        DocSearchQueryInfo.RangeValues rangeValues = new DocSearchQueryInfo.RangeValues();\n+        rangeValues.setLowerBound(lowerBound);\n+        rangeValues.setUpperBound(upperBound);\n+        facetData.setRangeValues(rangeValues);\n+        CreatedOnFacetHandler createdOnFacetHandler = new CreatedOnFacetHandler();\n+        StructuredQueryBuilder queryBuilder = new StructuredQueryBuilder();\n+\n+        StructuredQueryDefinition queryDefinition = createdOnFacetHandler.buildQuery(facetData, queryBuilder);\n+        Fragment fragment = new Fragment(queryDefinition.serialize(), Namespace.getNamespace(\"sch\", \"http://marklogic.com/appservices/search\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1740c2f4a3aa5290c11ac9081f7661a2ec6af70"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAyMzUzMg==", "bodyText": "Good idea.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4049#discussion_r436023532", "createdAt": "2020-06-05T16:13:21Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/entities/search/impl/CreatedOnFacetHandlerTest.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.marklogic.hub.central.entities.search.impl;\n+\n+import com.marklogic.client.query.StructuredQueryBuilder;\n+import com.marklogic.client.query.StructuredQueryDefinition;\n+import com.marklogic.hub.central.entities.search.models.DocSearchQueryInfo;\n+import com.marklogic.rest.util.Fragment;\n+import org.jdom2.Namespace;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Arrays;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class CreatedOnFacetHandlerTest {\n+\n+    @Test\n+    public void testCreatedOnDateRangeFacet() {\n+        String constraintName = \"createdOnRange\";\n+        String lowerBound = \"2020-06-14\";\n+        String upperBound = \"2020-06-17\";\n+        String expectedUpperBound = \"2020-06-18\";\n+        DocSearchQueryInfo.FacetData facetData = new DocSearchQueryInfo.FacetData();\n+        DocSearchQueryInfo.RangeValues rangeValues = new DocSearchQueryInfo.RangeValues();\n+        rangeValues.setLowerBound(lowerBound);\n+        rangeValues.setUpperBound(upperBound);\n+        facetData.setRangeValues(rangeValues);\n+        CreatedOnFacetHandler createdOnFacetHandler = new CreatedOnFacetHandler();\n+        StructuredQueryBuilder queryBuilder = new StructuredQueryBuilder();\n+\n+        StructuredQueryDefinition queryDefinition = createdOnFacetHandler.buildQuery(facetData, queryBuilder);\n+        Fragment fragment = new Fragment(queryDefinition.serialize(), Namespace.getNamespace(\"sch\", \"http://marklogic.com/appservices/search\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg4OTk5NA=="}, "originalCommit": {"oid": "b1740c2f4a3aa5290c11ac9081f7661a2ec6af70"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4017, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}