{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwOTQxOTEz", "number": 3892, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMTowMzowM1rOD3zOrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMToxMDoxM1rOD3zXfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODM3NjEyOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/auth/AuthenticationFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMTowMzowM1rOGOQ49A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMTowMzowM1rOGOQ49A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYwOTk3Mg==", "bodyText": "Nice - no more roles!", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3892#discussion_r417609972", "createdAt": "2020-04-29T21:03:03Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/auth/AuthenticationFilter.java", "diffHunk": "@@ -106,6 +106,6 @@ protected AuthenticationToken authenticateUser(String username, String password)\n             authorities.add(new SimpleGrantedAuthority(\"ROLE_\" + authority));\n         });\n \n-        return new AuthenticationToken(username, password, hubCentral.getProjectName(), (ArrayNode) response.get(\"roles\"), authorities);\n+        return new AuthenticationToken(username, password, hubCentral.getProjectName(), authorities);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bef9cdefa6f675cdb7f797686104b12139f5bd5e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODM4NTY3OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/util/authorities.tsx", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMTowNjoxNFrOGOQ_LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjo0MzozNlrOGOxm6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYxMTU2NQ==", "bodyText": "Could the UI just use \"readMapping\" as well? It seems simpler and less effort to not have to map e.g. \"readMapping\" to \"canReadMapping\".", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3892#discussion_r417611565", "createdAt": "2020-04-29T21:06:14Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/ui/src/util/authorities.tsx", "diffHunk": "@@ -0,0 +1,76 @@\n+import React from 'react';\n+\n+export interface IAuthoritiesContextInterface {\n+    authorities: string[];\n+    setAuthorities: (authorities: string[]) => void;\n+    canReadMapping: () => boolean;\n+    canWriteMapping: () => boolean;\n+    canReadMatchMerge: () => boolean;\n+    canWriteMatchMerge: () => boolean;\n+    canReadLoadData: () => boolean;\n+    canWriteLoadData: () => boolean;\n+    canReadEntityModel: () => boolean;\n+    canWriteEntityModel: () => boolean;\n+    canReadFlow: () => boolean;\n+    canWriteFlow: () => boolean;\n+    canReadStepDefinition: () => boolean;\n+    canWriteStepDefinition: () => boolean;\n+    hasOperatorRole: () => boolean;\n+}\n+\n+/**\n+ *  Authorities Service that has authorities read in at login\n+ *\n+ * @description This service provides information about what capabilities the user has.\n+ */\n+export class AuthoritiesService implements IAuthoritiesContextInterface {\n+    public authorities: string[] = [];\n+\n+    public setAuthorities: (authorities: string[]) => void = (authorities: string[]) => {\n+        this.authorities = authorities;\n+    };\n+\n+    public canReadMapping:() => boolean = () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bef9cdefa6f675cdb7f797686104b12139f5bd5e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYyMzA3OA==", "bodyText": "@rjrudin I was wondering if we need 2 authorities, 1 each for read and write. Wouldnt canWrite*=false would mean its a read only authority. Please clarify.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3892#discussion_r417623078", "createdAt": "2020-04-29T21:28:15Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/util/authorities.tsx", "diffHunk": "@@ -0,0 +1,76 @@\n+import React from 'react';\n+\n+export interface IAuthoritiesContextInterface {\n+    authorities: string[];\n+    setAuthorities: (authorities: string[]) => void;\n+    canReadMapping: () => boolean;\n+    canWriteMapping: () => boolean;\n+    canReadMatchMerge: () => boolean;\n+    canWriteMatchMerge: () => boolean;\n+    canReadLoadData: () => boolean;\n+    canWriteLoadData: () => boolean;\n+    canReadEntityModel: () => boolean;\n+    canWriteEntityModel: () => boolean;\n+    canReadFlow: () => boolean;\n+    canWriteFlow: () => boolean;\n+    canReadStepDefinition: () => boolean;\n+    canWriteStepDefinition: () => boolean;\n+    hasOperatorRole: () => boolean;\n+}\n+\n+/**\n+ *  Authorities Service that has authorities read in at login\n+ *\n+ * @description This service provides information about what capabilities the user has.\n+ */\n+export class AuthoritiesService implements IAuthoritiesContextInterface {\n+    public authorities: string[] = [];\n+\n+    public setAuthorities: (authorities: string[]) => void = (authorities: string[]) => {\n+        this.authorities = authorities;\n+    };\n+\n+    public canReadMapping:() => boolean = () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYxMTU2NQ=="}, "originalCommit": {"oid": "bef9cdefa6f675cdb7f797686104b12139f5bd5e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY3NzM3NA==", "bodyText": "I think having one for read and one for write avoids confusion. Either you have the ability to do something - you have the authority - or you don't.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3892#discussion_r417677374", "createdAt": "2020-04-29T23:50:02Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/ui/src/util/authorities.tsx", "diffHunk": "@@ -0,0 +1,76 @@\n+import React from 'react';\n+\n+export interface IAuthoritiesContextInterface {\n+    authorities: string[];\n+    setAuthorities: (authorities: string[]) => void;\n+    canReadMapping: () => boolean;\n+    canWriteMapping: () => boolean;\n+    canReadMatchMerge: () => boolean;\n+    canWriteMatchMerge: () => boolean;\n+    canReadLoadData: () => boolean;\n+    canWriteLoadData: () => boolean;\n+    canReadEntityModel: () => boolean;\n+    canWriteEntityModel: () => boolean;\n+    canReadFlow: () => boolean;\n+    canWriteFlow: () => boolean;\n+    canReadStepDefinition: () => boolean;\n+    canWriteStepDefinition: () => boolean;\n+    hasOperatorRole: () => boolean;\n+}\n+\n+/**\n+ *  Authorities Service that has authorities read in at login\n+ *\n+ * @description This service provides information about what capabilities the user has.\n+ */\n+export class AuthoritiesService implements IAuthoritiesContextInterface {\n+    public authorities: string[] = [];\n+\n+    public setAuthorities: (authorities: string[]) => void = (authorities: string[]) => {\n+        this.authorities = authorities;\n+    };\n+\n+    public canReadMapping:() => boolean = () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYxMTU2NQ=="}, "originalCommit": {"oid": "bef9cdefa6f675cdb7f797686104b12139f5bd5e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY5MDczMA==", "bodyText": "Thanks!", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3892#discussion_r417690730", "createdAt": "2020-04-30T00:33:50Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/util/authorities.tsx", "diffHunk": "@@ -0,0 +1,76 @@\n+import React from 'react';\n+\n+export interface IAuthoritiesContextInterface {\n+    authorities: string[];\n+    setAuthorities: (authorities: string[]) => void;\n+    canReadMapping: () => boolean;\n+    canWriteMapping: () => boolean;\n+    canReadMatchMerge: () => boolean;\n+    canWriteMatchMerge: () => boolean;\n+    canReadLoadData: () => boolean;\n+    canWriteLoadData: () => boolean;\n+    canReadEntityModel: () => boolean;\n+    canWriteEntityModel: () => boolean;\n+    canReadFlow: () => boolean;\n+    canWriteFlow: () => boolean;\n+    canReadStepDefinition: () => boolean;\n+    canWriteStepDefinition: () => boolean;\n+    hasOperatorRole: () => boolean;\n+}\n+\n+/**\n+ *  Authorities Service that has authorities read in at login\n+ *\n+ * @description This service provides information about what capabilities the user has.\n+ */\n+export class AuthoritiesService implements IAuthoritiesContextInterface {\n+    public authorities: string[] = [];\n+\n+    public setAuthorities: (authorities: string[]) => void = (authorities: string[]) => {\n+        this.authorities = authorities;\n+    };\n+\n+    public canReadMapping:() => boolean = () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYxMTU2NQ=="}, "originalCommit": {"oid": "bef9cdefa6f675cdb7f797686104b12139f5bd5e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEzNTAyOA==", "bodyText": "I'm not too strongly opposed to \"readMapping\". I just thought I'd leave \"canReadMapping\" as it makes clear it is a method that returns a boolean, rather than performing an action like \"reading a mapping\", whatever that action would entail.\n@wooldridge @xnikhil08  Any preference here?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3892#discussion_r418135028", "createdAt": "2020-04-30T16:25:46Z", "author": {"login": "ryanjdew"}, "path": "marklogic-data-hub-central/ui/src/util/authorities.tsx", "diffHunk": "@@ -0,0 +1,76 @@\n+import React from 'react';\n+\n+export interface IAuthoritiesContextInterface {\n+    authorities: string[];\n+    setAuthorities: (authorities: string[]) => void;\n+    canReadMapping: () => boolean;\n+    canWriteMapping: () => boolean;\n+    canReadMatchMerge: () => boolean;\n+    canWriteMatchMerge: () => boolean;\n+    canReadLoadData: () => boolean;\n+    canWriteLoadData: () => boolean;\n+    canReadEntityModel: () => boolean;\n+    canWriteEntityModel: () => boolean;\n+    canReadFlow: () => boolean;\n+    canWriteFlow: () => boolean;\n+    canReadStepDefinition: () => boolean;\n+    canWriteStepDefinition: () => boolean;\n+    hasOperatorRole: () => boolean;\n+}\n+\n+/**\n+ *  Authorities Service that has authorities read in at login\n+ *\n+ * @description This service provides information about what capabilities the user has.\n+ */\n+export class AuthoritiesService implements IAuthoritiesContextInterface {\n+    public authorities: string[] = [];\n+\n+    public setAuthorities: (authorities: string[]) => void = (authorities: string[]) => {\n+        this.authorities = authorities;\n+    };\n+\n+    public canReadMapping:() => boolean = () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYxMTU2NQ=="}, "originalCommit": {"oid": "bef9cdefa6f675cdb7f797686104b12139f5bd5e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE0NjAyNQ==", "bodyText": "Yeah, I'll withdraw my comment here - I think it's fine to do this in the UI, particularly if that makes the code read more nicely.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3892#discussion_r418146025", "createdAt": "2020-04-30T16:43:36Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/ui/src/util/authorities.tsx", "diffHunk": "@@ -0,0 +1,76 @@\n+import React from 'react';\n+\n+export interface IAuthoritiesContextInterface {\n+    authorities: string[];\n+    setAuthorities: (authorities: string[]) => void;\n+    canReadMapping: () => boolean;\n+    canWriteMapping: () => boolean;\n+    canReadMatchMerge: () => boolean;\n+    canWriteMatchMerge: () => boolean;\n+    canReadLoadData: () => boolean;\n+    canWriteLoadData: () => boolean;\n+    canReadEntityModel: () => boolean;\n+    canWriteEntityModel: () => boolean;\n+    canReadFlow: () => boolean;\n+    canWriteFlow: () => boolean;\n+    canReadStepDefinition: () => boolean;\n+    canWriteStepDefinition: () => boolean;\n+    hasOperatorRole: () => boolean;\n+}\n+\n+/**\n+ *  Authorities Service that has authorities read in at login\n+ *\n+ * @description This service provides information about what capabilities the user has.\n+ */\n+export class AuthoritiesService implements IAuthoritiesContextInterface {\n+    public authorities: string[] = [];\n+\n+    public setAuthorities: (authorities: string[]) => void = (authorities: string[]) => {\n+        this.authorities = authorities;\n+    };\n+\n+    public canReadMapping:() => boolean = () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYxMTU2NQ=="}, "originalCommit": {"oid": "bef9cdefa6f675cdb7f797686104b12139f5bd5e"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODM5NjQ1OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/entitySearch/saveSavedQuery.sjs", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMTowOTozM1rOGORGMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjoyNjo0MVrOGOw-MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYxMzM2MQ==", "bodyText": "I agree with not using \"Security\" as the variable name here, but I think we need something besides \"sec\" because a reader could easily think that's an ML function that starts with \"sec.\". How about \"dhsec\", or \"hubsec\"? (hubsec is kind of cool, like infosec).", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3892#discussion_r417613361", "createdAt": "2020-04-29T21:09:33Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/entitySearch/saveSavedQuery.sjs", "diffHunk": "@@ -24,11 +24,9 @@ var saveQuery;\n var userCollections = [\"http://marklogic.com/data-hub/saved-query\"];\n var queryDocument = JSON.parse(saveQuery);\n \n-let authorized = new Security().getRolesAndAuthorities().authorities.includes(\"canManageSavedQuery\");\n-\n-if(!authorized) {\n-    ds.throwForbidden(xdmp.getCurrentUser() + \" user doesn't have authority to save or update query\");\n-}\n+const sec = new Security();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bef9cdefa6f675cdb7f797686104b12139f5bd5e"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEzNTYwMQ==", "bodyText": "good point. will address that.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3892#discussion_r418135601", "createdAt": "2020-04-30T16:26:41Z", "author": {"login": "ryanjdew"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/entitySearch/saveSavedQuery.sjs", "diffHunk": "@@ -24,11 +24,9 @@ var saveQuery;\n var userCollections = [\"http://marklogic.com/data-hub/saved-query\"];\n var queryDocument = JSON.parse(saveQuery);\n \n-let authorized = new Security().getRolesAndAuthorities().authorities.includes(\"canManageSavedQuery\");\n-\n-if(!authorized) {\n-    ds.throwForbidden(xdmp.getCurrentUser() + \" user doesn't have authority to save or update query\");\n-}\n+const sec = new Security();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYxMzM2MQ=="}, "originalCommit": {"oid": "bef9cdefa6f675cdb7f797686104b12139f5bd5e"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODM5ODcxOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/entitySearch/saveSavedQuery.sjs", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMToxMDoxM1rOGORHmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMToxMDoxM1rOGORHmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYxMzcyMQ==", "bodyText": "Do you still need this line of code? I would think the sec.dataHubAuthorityAssert function would suffice.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3892#discussion_r417613721", "createdAt": "2020-04-29T21:10:13Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/entitySearch/saveSavedQuery.sjs", "diffHunk": "@@ -24,11 +24,9 @@ var saveQuery;\n var userCollections = [\"http://marklogic.com/data-hub/saved-query\"];\n var queryDocument = JSON.parse(saveQuery);\n \n-let authorized = new Security().getRolesAndAuthorities().authorities.includes(\"canManageSavedQuery\");\n-\n-if(!authorized) {\n-    ds.throwForbidden(xdmp.getCurrentUser() + \" user doesn't have authority to save or update query\");\n-}\n+const sec = new Security();\n+let authorized = new Security().getRolesAndAuthorities().authorities.includes(\"manageSavedQuery\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bef9cdefa6f675cdb7f797686104b12139f5bd5e"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4169, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}