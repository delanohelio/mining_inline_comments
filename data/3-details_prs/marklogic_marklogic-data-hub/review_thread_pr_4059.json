{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4ODEwODI1", "number": 4059, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyMzoyN1rOEDceKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTo1OTozOFrOEDhJbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDQ3NjU2OnYy", "diffSide": "RIGHT", "path": "examples/reference-entity-model/input/json/Cust2.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyMzoyN1rOGgd1Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyMzoyN1rOGgd1Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5NjM2Nw==", "bodyText": "Is this supposed to differ from the first shipping address?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4059#discussion_r436696367", "createdAt": "2020-06-08T13:23:27Z", "author": {"login": "rjrudin"}, "path": "examples/reference-entity-model/input/json/Cust2.json", "diffHunk": "@@ -4,21 +4,37 @@\n     \"FirstName\": \"Adams\",\n     \"LastName\": \"Cole\"\n   },\n+  \"nicknames\": [\n+    \"ad\",\n+    \"coley\"\n+  ],\n   \"Email\": \"adamscole@nutralab.com\",\n-  \"Address\": {\n-    \"Shipping\": {\n-      \"Street\": \"Lefferts Place\",\n-      \"City\": \"Marenisco\",\n-      \"State\": \"Maryland\",\n-      \"Postal\": \"44582-8427\"\n+  \"Address\": [\n+    {\n+      \"Shipping\": {\n+        \"Street\": \"Lefferts Place\",\n+        \"City\": \"Marenisco\",\n+        \"State\": \"Maryland\",\n+        \"Postal\": \"44582-8427\"\n+      }\n     },\n-    \"Billing\": {\n-      \"Street\": \"Varick Avenue\",\n-      \"City\": \"Mooresburg\",\n-      \"State\": \"Delaware\",\n-      \"Postal\": \"17654-1292\"\n+    {\n+      \"Shipping\": {\n+        \"Street\": \"Lefferts Place\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5d8acb8cfc26c60942b76372643817bec449100"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDQ4MjUzOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/EntitySearchManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyNDoyN1rOGgd4xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzo0OTo0MlrOGgfJZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5NzI4Nw==", "bodyText": "Is it possible to select more than one entity type? If not, can we change this to a string instead of a List? We don't want the code to imply that something is possible when it's not.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4059#discussion_r436697287", "createdAt": "2020-06-08T13:24:27Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/EntitySearchManager.java", "diffHunk": "@@ -96,6 +97,14 @@ public StringHandle search(SearchQuery searchQuery) {\n             String query = queryDef.serialize();\n             StructureWriteHandle handle = new StringHandle(buildSearchOptions(query, searchQuery)).withMimetype(\"application/xml\");\n             RawCombinedQueryDefinition rcQueryDef = queryMgr.newRawCombinedQueryDefinition(handle, queryDef.getOptionsName());\n+\n+            // If an entity has been selected, then apply this transform\n+            List<String> entityTypeIds = searchQuery.getQuery().getEntityTypeIds();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5d8acb8cfc26c60942b76372643817bec449100"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcxNzkyNw==", "bodyText": "@rjrudin When AllEntities are selected, there can be more than 1 entityTypeId", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4059#discussion_r436717927", "createdAt": "2020-06-08T13:49:42Z", "author": {"login": "rahulvudutala"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/EntitySearchManager.java", "diffHunk": "@@ -96,6 +97,14 @@ public StringHandle search(SearchQuery searchQuery) {\n             String query = queryDef.serialize();\n             StructureWriteHandle handle = new StringHandle(buildSearchOptions(query, searchQuery)).withMimetype(\"application/xml\");\n             RawCombinedQueryDefinition rcQueryDef = queryMgr.newRawCombinedQueryDefinition(handle, queryDef.getOptionsName());\n+\n+            // If an entity has been selected, then apply this transform\n+            List<String> entityTypeIds = searchQuery.getQuery().getEntityTypeIds();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5NzI4Nw=="}, "originalCommit": {"oid": "d5d8acb8cfc26c60942b76372643817bec449100"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDUyMDgwOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/transforms/hubEntitySearchTransform.sjs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzozMjoxM1rOGgeQkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzozMjoxM1rOGgeQkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwMzM3Ng==", "bodyText": "Need a nice error here - I think you can use the \"throw\"* functions in ds-util.sjs to get it done easily - e.g. throwBadRequest(\"entityName is required to generate search results containing entity properties\");", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4059#discussion_r436703376", "createdAt": "2020-06-08T13:32:13Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/transforms/hubEntitySearchTransform.sjs", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ Copyright (c) 2020 MarkLogic Corporation\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+'use strict';\n+\n+const entitySearchLib = require(\"/data-hub/5/entities/entity-search-lib.sjs\");\n+\n+// Expects JSON content\n+function transform(context, params, content) {\n+  // TODO If entityName isn't defined, throw a nice error", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5d8acb8cfc26c60942b76372643817bec449100"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTA3MzY5OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/entities/entity-search-lib.sjs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNToyMTowNlrOGgjlPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNToyMTowNlrOGgjlPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5MDU5MA==", "bodyText": "Is this here in case \"envelope.instance\" does not exist? If so, we shouldn't return - this might be one of 10 results, and the other 9 are fine. I also don't think it's an error - it simply means we can't add entity properties to that result. I think it's worth xdmp.tracing this - you can add a \"TRACE_ENTITY_SEARCH\" constant to consts.sjs to use as a trace event, with a value of \"data-hub-entity-search\". But just log that an instance could not be found and thus entity properties will not be added.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4059#discussion_r436790590", "createdAt": "2020-06-08T15:21:06Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/entities/entity-search-lib.sjs", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ Copyright (c) 2020 MarkLogic Corporation\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+'use strict';\n+\n+// TODO Will move this to /data-hub/5/entities soon\n+const entityLib = require(\"/data-hub/5/impl/entity-lib.sjs\");\n+const DataHub = require(\"/data-hub/5/datahub.sjs\");\n+const datahub = new DataHub();\n+\n+\n+function addPropertiesToSearchResponse(entityName, searchResponse) {\n+  const maxDefaultProperties = 5;\n+  const allProperties = generateEntityProperties(\"\", entityName, entityName);\n+  const defaultProperties = allProperties.slice(0, maxDefaultProperties);\n+\n+  // Add entityProperties to each search result\n+  searchResponse.results.forEach(result => {\n+    let instance = {};\n+    try {\n+      instance = cts.doc(result.uri).toObject().envelope.instance;\n+    } catch (error) {\n+      datahub.debug.log({message: error, type: 'error'});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d720d52b1b73dd88e41b6dc248d7ffd5a3e7332"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTEzNjE2OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/entities/entity-search-lib.sjs", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTozNTo0NFrOGgkNNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjo0MToyMFrOGgm5Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgwMDgyMQ==", "bodyText": "When would \"#\" not be the first token?\nI think it'd be good to move all of the logic in this for loop into a separate function that can be easily unit-tested - i.e. you want to make sure that the propertyMetadata returned for a given property definition is correct.\nThat also provides a good way of documenting all the different property definitions we support, which in theory would provide an example too of a \"$ref\" that does not start with \"#\".", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4059#discussion_r436800821", "createdAt": "2020-06-08T15:35:44Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/entities/entity-search-lib.sjs", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ Copyright (c) 2020 MarkLogic Corporation\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+'use strict';\n+\n+// TODO Will move this to /data-hub/5/entities soon\n+const entityLib = require(\"/data-hub/5/impl/entity-lib.sjs\");\n+const DataHub = require(\"/data-hub/5/datahub.sjs\");\n+const datahub = new DataHub();\n+\n+\n+function addPropertiesToSearchResponse(entityName, searchResponse) {\n+  const maxDefaultProperties = 5;\n+  const allProperties = generateEntityProperties(\"\", entityName, entityName);\n+  const defaultProperties = allProperties.slice(0, maxDefaultProperties);\n+\n+  // Add entityProperties to each search result\n+  searchResponse.results.forEach(result => {\n+    let instance = {};\n+    try {\n+      instance = cts.doc(result.uri).toObject().envelope.instance;\n+    } catch (error) {\n+      datahub.debug.log({message: error, type: 'error'});\n+      return;\n+    }\n+\n+    const entityInstance = instance[entityName];\n+    result.entityProperties = [];\n+    defaultProperties.forEach(parentProperty => {\n+      result.entityProperties.push(getPropertyValues(parentProperty, entityInstance));\n+    });\n+  });\n+\n+  // Make it easy for the client to know which property names were used, and which ones exist\n+  searchResponse.selectedPropertyDefinitions = defaultProperties;\n+  searchResponse.entityPropertyDefinitions = allProperties;\n+}\n+\n+function generateEntityProperties(parentPropertyName, entityName, entityTypeName) {\n+  const allProperties = [];\n+  const entityType = entityLib.findEntityTypeFromModelByEntityName(entityName, entityTypeName);\n+  if(!entityType) {\n+    return allProperties;\n+  }\n+\n+  for (var propertyName of Object.keys(entityType.properties)) {\n+    const property = entityType.properties[propertyName];\n+\n+    const isSimpleProperty = property.datatype != \"array\" && !property[\"$ref\"];\n+    const isSimpleArrayProperty = property.datatype == \"array\" && (property[\"items\"] && !property[\"items\"][\"$ref\"]);\n+    const isStructuredProperty = property.datatype != \"array\" && property[\"$ref\"];\n+    const isStructuredArrayProperty = property.datatype == \"array\" && (property[\"items\"] && property[\"items\"][\"$ref\"]);\n+\n+    const propertyMetadata = {};\n+    propertyMetadata[\"propertyPath\"] = parentPropertyName ? parentPropertyName + \".\" + propertyName : propertyName;\n+    propertyMetadata[\"propertyLabel\"] = propertyName;\n+    propertyMetadata[\"datatype\"] = (isSimpleProperty || isSimpleArrayProperty) ? (isSimpleProperty ? property.datatype : property[\"items\"][\"datatype\"]) : \"object\";\n+    propertyMetadata[\"multiple\"] = (isSimpleArrayProperty || isStructuredArrayProperty) ? true : false;\n+\n+    if(isStructuredProperty || isStructuredArrayProperty) {\n+      let referenceInfo = isStructuredProperty ? property[\"$ref\"].split(\"/\") : property[\"items\"][\"$ref\"].split(\"/\");\n+      entityTypeName =  referenceInfo.pop();\n+      entityName = referenceInfo[0] === \"#\" ? entityName : referenceInfo.pop().toString().split(\"-\")[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d720d52b1b73dd88e41b6dc248d7ffd5a3e7332"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgyMTA2NQ==", "bodyText": "Hold off on this - I'm going to try writing these tests myself, just to get familiar with the code. I'll submit a PR into your PR.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4059#discussion_r436821065", "createdAt": "2020-06-08T16:04:39Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/entities/entity-search-lib.sjs", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ Copyright (c) 2020 MarkLogic Corporation\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+'use strict';\n+\n+// TODO Will move this to /data-hub/5/entities soon\n+const entityLib = require(\"/data-hub/5/impl/entity-lib.sjs\");\n+const DataHub = require(\"/data-hub/5/datahub.sjs\");\n+const datahub = new DataHub();\n+\n+\n+function addPropertiesToSearchResponse(entityName, searchResponse) {\n+  const maxDefaultProperties = 5;\n+  const allProperties = generateEntityProperties(\"\", entityName, entityName);\n+  const defaultProperties = allProperties.slice(0, maxDefaultProperties);\n+\n+  // Add entityProperties to each search result\n+  searchResponse.results.forEach(result => {\n+    let instance = {};\n+    try {\n+      instance = cts.doc(result.uri).toObject().envelope.instance;\n+    } catch (error) {\n+      datahub.debug.log({message: error, type: 'error'});\n+      return;\n+    }\n+\n+    const entityInstance = instance[entityName];\n+    result.entityProperties = [];\n+    defaultProperties.forEach(parentProperty => {\n+      result.entityProperties.push(getPropertyValues(parentProperty, entityInstance));\n+    });\n+  });\n+\n+  // Make it easy for the client to know which property names were used, and which ones exist\n+  searchResponse.selectedPropertyDefinitions = defaultProperties;\n+  searchResponse.entityPropertyDefinitions = allProperties;\n+}\n+\n+function generateEntityProperties(parentPropertyName, entityName, entityTypeName) {\n+  const allProperties = [];\n+  const entityType = entityLib.findEntityTypeFromModelByEntityName(entityName, entityTypeName);\n+  if(!entityType) {\n+    return allProperties;\n+  }\n+\n+  for (var propertyName of Object.keys(entityType.properties)) {\n+    const property = entityType.properties[propertyName];\n+\n+    const isSimpleProperty = property.datatype != \"array\" && !property[\"$ref\"];\n+    const isSimpleArrayProperty = property.datatype == \"array\" && (property[\"items\"] && !property[\"items\"][\"$ref\"]);\n+    const isStructuredProperty = property.datatype != \"array\" && property[\"$ref\"];\n+    const isStructuredArrayProperty = property.datatype == \"array\" && (property[\"items\"] && property[\"items\"][\"$ref\"]);\n+\n+    const propertyMetadata = {};\n+    propertyMetadata[\"propertyPath\"] = parentPropertyName ? parentPropertyName + \".\" + propertyName : propertyName;\n+    propertyMetadata[\"propertyLabel\"] = propertyName;\n+    propertyMetadata[\"datatype\"] = (isSimpleProperty || isSimpleArrayProperty) ? (isSimpleProperty ? property.datatype : property[\"items\"][\"datatype\"]) : \"object\";\n+    propertyMetadata[\"multiple\"] = (isSimpleArrayProperty || isStructuredArrayProperty) ? true : false;\n+\n+    if(isStructuredProperty || isStructuredArrayProperty) {\n+      let referenceInfo = isStructuredProperty ? property[\"$ref\"].split(\"/\") : property[\"items\"][\"$ref\"].split(\"/\");\n+      entityTypeName =  referenceInfo.pop();\n+      entityName = referenceInfo[0] === \"#\" ? entityName : referenceInfo.pop().toString().split(\"-\")[0];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgwMDgyMQ=="}, "originalCommit": {"oid": "7d720d52b1b73dd88e41b6dc248d7ffd5a3e7332"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg0NDgxNQ==", "bodyText": "When would \"#\" not be the first token?\nI think it'd be good to move all of the logic in this for loop into a separate function that can be easily unit-tested - i.e. you want to make sure that the propertyMetadata returned for a given property definition is correct.\nThat also provides a good way of documenting all the different property definitions we support, which in theory would provide an example too of a \"$ref\" that does not start with \"#\".\n\nWhen we referencing an entityType property from another entityModel. For example, orders from reference-entity-model project", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4059#discussion_r436844815", "createdAt": "2020-06-08T16:41:20Z", "author": {"login": "rahulvudutala"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/entities/entity-search-lib.sjs", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ Copyright (c) 2020 MarkLogic Corporation\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+'use strict';\n+\n+// TODO Will move this to /data-hub/5/entities soon\n+const entityLib = require(\"/data-hub/5/impl/entity-lib.sjs\");\n+const DataHub = require(\"/data-hub/5/datahub.sjs\");\n+const datahub = new DataHub();\n+\n+\n+function addPropertiesToSearchResponse(entityName, searchResponse) {\n+  const maxDefaultProperties = 5;\n+  const allProperties = generateEntityProperties(\"\", entityName, entityName);\n+  const defaultProperties = allProperties.slice(0, maxDefaultProperties);\n+\n+  // Add entityProperties to each search result\n+  searchResponse.results.forEach(result => {\n+    let instance = {};\n+    try {\n+      instance = cts.doc(result.uri).toObject().envelope.instance;\n+    } catch (error) {\n+      datahub.debug.log({message: error, type: 'error'});\n+      return;\n+    }\n+\n+    const entityInstance = instance[entityName];\n+    result.entityProperties = [];\n+    defaultProperties.forEach(parentProperty => {\n+      result.entityProperties.push(getPropertyValues(parentProperty, entityInstance));\n+    });\n+  });\n+\n+  // Make it easy for the client to know which property names were used, and which ones exist\n+  searchResponse.selectedPropertyDefinitions = defaultProperties;\n+  searchResponse.entityPropertyDefinitions = allProperties;\n+}\n+\n+function generateEntityProperties(parentPropertyName, entityName, entityTypeName) {\n+  const allProperties = [];\n+  const entityType = entityLib.findEntityTypeFromModelByEntityName(entityName, entityTypeName);\n+  if(!entityType) {\n+    return allProperties;\n+  }\n+\n+  for (var propertyName of Object.keys(entityType.properties)) {\n+    const property = entityType.properties[propertyName];\n+\n+    const isSimpleProperty = property.datatype != \"array\" && !property[\"$ref\"];\n+    const isSimpleArrayProperty = property.datatype == \"array\" && (property[\"items\"] && !property[\"items\"][\"$ref\"]);\n+    const isStructuredProperty = property.datatype != \"array\" && property[\"$ref\"];\n+    const isStructuredArrayProperty = property.datatype == \"array\" && (property[\"items\"] && property[\"items\"][\"$ref\"]);\n+\n+    const propertyMetadata = {};\n+    propertyMetadata[\"propertyPath\"] = parentPropertyName ? parentPropertyName + \".\" + propertyName : propertyName;\n+    propertyMetadata[\"propertyLabel\"] = propertyName;\n+    propertyMetadata[\"datatype\"] = (isSimpleProperty || isSimpleArrayProperty) ? (isSimpleProperty ? property.datatype : property[\"items\"][\"datatype\"]) : \"object\";\n+    propertyMetadata[\"multiple\"] = (isSimpleArrayProperty || isStructuredArrayProperty) ? true : false;\n+\n+    if(isStructuredProperty || isStructuredArrayProperty) {\n+      let referenceInfo = isStructuredProperty ? property[\"$ref\"].split(\"/\") : property[\"items\"][\"$ref\"].split(\"/\");\n+      entityTypeName =  referenceInfo.pop();\n+      entityName = referenceInfo[0] === \"#\" ? entityName : referenceInfo.pop().toString().split(\"-\")[0];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgwMDgyMQ=="}, "originalCommit": {"oid": "7d720d52b1b73dd88e41b6dc248d7ffd5a3e7332"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTE2MjgwOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/entities/entity-search-lib.sjs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTo0MjoxN1rOGgkeUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTo0MjoxN1rOGgkeUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgwNTIwMA==", "bodyText": "We want to be careful about when we're dealing with \"properties\" and \"property definitions\" - the distinction between the two is critical, and we want the code to make it easy to know when we're dealing with one vs the other.\nAnd really, I think calling this \"property metadata\" - as you're doing below - is better, as a \"property definition\" should exclusively refer to how a property is defined within an entity type.\nTo that end, let's standardize on \"property metadata\" here:\n\nselectedPropertyMetadata\nentityPropertyMetadata\nAnd then call this function buildPropertyMetadata (I prefer \"build\" for when in-memory data is built and not persisted)", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4059#discussion_r436805200", "createdAt": "2020-06-08T15:42:17Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/entities/entity-search-lib.sjs", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ Copyright (c) 2020 MarkLogic Corporation\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+'use strict';\n+\n+// TODO Will move this to /data-hub/5/entities soon\n+const entityLib = require(\"/data-hub/5/impl/entity-lib.sjs\");\n+const DataHub = require(\"/data-hub/5/datahub.sjs\");\n+const datahub = new DataHub();\n+\n+\n+function addPropertiesToSearchResponse(entityName, searchResponse) {\n+  const maxDefaultProperties = 5;\n+  const allProperties = generateEntityProperties(\"\", entityName, entityName);\n+  const defaultProperties = allProperties.slice(0, maxDefaultProperties);\n+\n+  // Add entityProperties to each search result\n+  searchResponse.results.forEach(result => {\n+    let instance = {};\n+    try {\n+      instance = cts.doc(result.uri).toObject().envelope.instance;\n+    } catch (error) {\n+      datahub.debug.log({message: error, type: 'error'});\n+      return;\n+    }\n+\n+    const entityInstance = instance[entityName];\n+    result.entityProperties = [];\n+    defaultProperties.forEach(parentProperty => {\n+      result.entityProperties.push(getPropertyValues(parentProperty, entityInstance));\n+    });\n+  });\n+\n+  // Make it easy for the client to know which property names were used, and which ones exist\n+  searchResponse.selectedPropertyDefinitions = defaultProperties;\n+  searchResponse.entityPropertyDefinitions = allProperties;\n+}\n+\n+function generateEntityProperties(parentPropertyName, entityName, entityTypeName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d720d52b1b73dd88e41b6dc248d7ffd5a3e7332"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTE2NjY5OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/entities/entity-search-lib.sjs", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTo0MzowNlrOGgkguA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjo0MzoyN1rOGgm93g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgwNTgxNg==", "bodyText": "I think we need to throw an error here, as something is very wrong if we cannot find the model. Should do a ds.throwServerError with a message indicating what entity cannot be found.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4059#discussion_r436805816", "createdAt": "2020-06-08T15:43:06Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/entities/entity-search-lib.sjs", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ Copyright (c) 2020 MarkLogic Corporation\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+'use strict';\n+\n+// TODO Will move this to /data-hub/5/entities soon\n+const entityLib = require(\"/data-hub/5/impl/entity-lib.sjs\");\n+const DataHub = require(\"/data-hub/5/datahub.sjs\");\n+const datahub = new DataHub();\n+\n+\n+function addPropertiesToSearchResponse(entityName, searchResponse) {\n+  const maxDefaultProperties = 5;\n+  const allProperties = generateEntityProperties(\"\", entityName, entityName);\n+  const defaultProperties = allProperties.slice(0, maxDefaultProperties);\n+\n+  // Add entityProperties to each search result\n+  searchResponse.results.forEach(result => {\n+    let instance = {};\n+    try {\n+      instance = cts.doc(result.uri).toObject().envelope.instance;\n+    } catch (error) {\n+      datahub.debug.log({message: error, type: 'error'});\n+      return;\n+    }\n+\n+    const entityInstance = instance[entityName];\n+    result.entityProperties = [];\n+    defaultProperties.forEach(parentProperty => {\n+      result.entityProperties.push(getPropertyValues(parentProperty, entityInstance));\n+    });\n+  });\n+\n+  // Make it easy for the client to know which property names were used, and which ones exist\n+  searchResponse.selectedPropertyDefinitions = defaultProperties;\n+  searchResponse.entityPropertyDefinitions = allProperties;\n+}\n+\n+function generateEntityProperties(parentPropertyName, entityName, entityTypeName) {\n+  const allProperties = [];\n+  const entityType = entityLib.findEntityTypeFromModelByEntityName(entityName, entityTypeName);\n+  if(!entityType) {\n+    return allProperties;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d720d52b1b73dd88e41b6dc248d7ffd5a3e7332"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg0NjA0Ng==", "bodyText": "If a user does not permissions on entityModels, the data returned should be empty rather than throwing an error.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4059#discussion_r436846046", "createdAt": "2020-06-08T16:43:27Z", "author": {"login": "rahulvudutala"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/entities/entity-search-lib.sjs", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ Copyright (c) 2020 MarkLogic Corporation\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+'use strict';\n+\n+// TODO Will move this to /data-hub/5/entities soon\n+const entityLib = require(\"/data-hub/5/impl/entity-lib.sjs\");\n+const DataHub = require(\"/data-hub/5/datahub.sjs\");\n+const datahub = new DataHub();\n+\n+\n+function addPropertiesToSearchResponse(entityName, searchResponse) {\n+  const maxDefaultProperties = 5;\n+  const allProperties = generateEntityProperties(\"\", entityName, entityName);\n+  const defaultProperties = allProperties.slice(0, maxDefaultProperties);\n+\n+  // Add entityProperties to each search result\n+  searchResponse.results.forEach(result => {\n+    let instance = {};\n+    try {\n+      instance = cts.doc(result.uri).toObject().envelope.instance;\n+    } catch (error) {\n+      datahub.debug.log({message: error, type: 'error'});\n+      return;\n+    }\n+\n+    const entityInstance = instance[entityName];\n+    result.entityProperties = [];\n+    defaultProperties.forEach(parentProperty => {\n+      result.entityProperties.push(getPropertyValues(parentProperty, entityInstance));\n+    });\n+  });\n+\n+  // Make it easy for the client to know which property names were used, and which ones exist\n+  searchResponse.selectedPropertyDefinitions = defaultProperties;\n+  searchResponse.entityPropertyDefinitions = allProperties;\n+}\n+\n+function generateEntityProperties(parentPropertyName, entityName, entityTypeName) {\n+  const allProperties = [];\n+  const entityType = entityLib.findEntityTypeFromModelByEntityName(entityName, entityTypeName);\n+  if(!entityType) {\n+    return allProperties;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgwNTgxNg=="}, "originalCommit": {"oid": "7d720d52b1b73dd88e41b6dc248d7ffd5a3e7332"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTI0MjY5OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/entities/entity-search-lib.sjs", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTo1OTozOFrOGglOvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjoxMjozNFrOGglyIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgxNzU5Ng==", "bodyText": "What's an example that requires the second part of this conditional to be present? I think the first part of the conditional would suffice?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4059#discussion_r436817596", "createdAt": "2020-06-08T15:59:38Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/entities/entity-search-lib.sjs", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ Copyright (c) 2020 MarkLogic Corporation\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+'use strict';\n+\n+// TODO Will move this to /data-hub/5/entities soon\n+const entityLib = require(\"/data-hub/5/impl/entity-lib.sjs\");\n+const DataHub = require(\"/data-hub/5/datahub.sjs\");\n+const datahub = new DataHub();\n+\n+\n+function addPropertiesToSearchResponse(entityName, searchResponse) {\n+  const maxDefaultProperties = 5;\n+  const allProperties = generateEntityProperties(\"\", entityName, entityName);\n+  const defaultProperties = allProperties.slice(0, maxDefaultProperties);\n+\n+  // Add entityProperties to each search result\n+  searchResponse.results.forEach(result => {\n+    let instance = {};\n+    try {\n+      instance = cts.doc(result.uri).toObject().envelope.instance;\n+    } catch (error) {\n+      datahub.debug.log({message: error, type: 'error'});\n+      return;\n+    }\n+\n+    const entityInstance = instance[entityName];\n+    result.entityProperties = [];\n+    defaultProperties.forEach(parentProperty => {\n+      result.entityProperties.push(getPropertyValues(parentProperty, entityInstance));\n+    });\n+  });\n+\n+  // Make it easy for the client to know which property names were used, and which ones exist\n+  searchResponse.selectedPropertyDefinitions = defaultProperties;\n+  searchResponse.entityPropertyDefinitions = allProperties;\n+}\n+\n+function generateEntityProperties(parentPropertyName, entityName, entityTypeName) {\n+  const allProperties = [];\n+  const entityType = entityLib.findEntityTypeFromModelByEntityName(entityName, entityTypeName);\n+  if(!entityType) {\n+    return allProperties;\n+  }\n+\n+  for (var propertyName of Object.keys(entityType.properties)) {\n+    const property = entityType.properties[propertyName];\n+\n+    const isSimpleProperty = property.datatype != \"array\" && !property[\"$ref\"];\n+    const isSimpleArrayProperty = property.datatype == \"array\" && (property[\"items\"] && !property[\"items\"][\"$ref\"]);\n+    const isStructuredProperty = property.datatype != \"array\" && property[\"$ref\"];\n+    const isStructuredArrayProperty = property.datatype == \"array\" && (property[\"items\"] && property[\"items\"][\"$ref\"]);\n+\n+    const propertyMetadata = {};\n+    propertyMetadata[\"propertyPath\"] = parentPropertyName ? parentPropertyName + \".\" + propertyName : propertyName;\n+    propertyMetadata[\"propertyLabel\"] = propertyName;\n+    propertyMetadata[\"datatype\"] = (isSimpleProperty || isSimpleArrayProperty) ? (isSimpleProperty ? property.datatype : property[\"items\"][\"datatype\"]) : \"object\";\n+    propertyMetadata[\"multiple\"] = (isSimpleArrayProperty || isStructuredArrayProperty) ? true : false;\n+\n+    if(isStructuredProperty || isStructuredArrayProperty) {\n+      let referenceInfo = isStructuredProperty ? property[\"$ref\"].split(\"/\") : property[\"items\"][\"$ref\"].split(\"/\");\n+      entityTypeName =  referenceInfo.pop();\n+      entityName = referenceInfo[0] === \"#\" ? entityName : referenceInfo.pop().toString().split(\"-\")[0];\n+      propertyMetadata[\"properties\"] = generateEntityProperties(propertyMetadata[\"propertyPath\"], entityName, entityTypeName);\n+    }\n+    allProperties.push(propertyMetadata);\n+  }\n+  return allProperties;\n+}\n+\n+function getPropertyValues(currentProperty, entityInstance) {\n+  let resultObject = {};\n+  resultObject.propertyPath = currentProperty.propertyPath;\n+  if(currentProperty.datatype === \"object\") {\n+    resultObject.propertyValue = [];\n+\n+    let propertyName = currentProperty.propertyPath.split(\".\").pop();\n+    if(!entityInstance[propertyName] || Object.keys(entityInstance[propertyName]).length == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d720d52b1b73dd88e41b6dc248d7ffd5a3e7332"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgyNjY1OQ==", "bodyText": "billingAddress: { }", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4059#discussion_r436826659", "createdAt": "2020-06-08T16:12:34Z", "author": {"login": "rahulvudutala"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/entities/entity-search-lib.sjs", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ Copyright (c) 2020 MarkLogic Corporation\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+'use strict';\n+\n+// TODO Will move this to /data-hub/5/entities soon\n+const entityLib = require(\"/data-hub/5/impl/entity-lib.sjs\");\n+const DataHub = require(\"/data-hub/5/datahub.sjs\");\n+const datahub = new DataHub();\n+\n+\n+function addPropertiesToSearchResponse(entityName, searchResponse) {\n+  const maxDefaultProperties = 5;\n+  const allProperties = generateEntityProperties(\"\", entityName, entityName);\n+  const defaultProperties = allProperties.slice(0, maxDefaultProperties);\n+\n+  // Add entityProperties to each search result\n+  searchResponse.results.forEach(result => {\n+    let instance = {};\n+    try {\n+      instance = cts.doc(result.uri).toObject().envelope.instance;\n+    } catch (error) {\n+      datahub.debug.log({message: error, type: 'error'});\n+      return;\n+    }\n+\n+    const entityInstance = instance[entityName];\n+    result.entityProperties = [];\n+    defaultProperties.forEach(parentProperty => {\n+      result.entityProperties.push(getPropertyValues(parentProperty, entityInstance));\n+    });\n+  });\n+\n+  // Make it easy for the client to know which property names were used, and which ones exist\n+  searchResponse.selectedPropertyDefinitions = defaultProperties;\n+  searchResponse.entityPropertyDefinitions = allProperties;\n+}\n+\n+function generateEntityProperties(parentPropertyName, entityName, entityTypeName) {\n+  const allProperties = [];\n+  const entityType = entityLib.findEntityTypeFromModelByEntityName(entityName, entityTypeName);\n+  if(!entityType) {\n+    return allProperties;\n+  }\n+\n+  for (var propertyName of Object.keys(entityType.properties)) {\n+    const property = entityType.properties[propertyName];\n+\n+    const isSimpleProperty = property.datatype != \"array\" && !property[\"$ref\"];\n+    const isSimpleArrayProperty = property.datatype == \"array\" && (property[\"items\"] && !property[\"items\"][\"$ref\"]);\n+    const isStructuredProperty = property.datatype != \"array\" && property[\"$ref\"];\n+    const isStructuredArrayProperty = property.datatype == \"array\" && (property[\"items\"] && property[\"items\"][\"$ref\"]);\n+\n+    const propertyMetadata = {};\n+    propertyMetadata[\"propertyPath\"] = parentPropertyName ? parentPropertyName + \".\" + propertyName : propertyName;\n+    propertyMetadata[\"propertyLabel\"] = propertyName;\n+    propertyMetadata[\"datatype\"] = (isSimpleProperty || isSimpleArrayProperty) ? (isSimpleProperty ? property.datatype : property[\"items\"][\"datatype\"]) : \"object\";\n+    propertyMetadata[\"multiple\"] = (isSimpleArrayProperty || isStructuredArrayProperty) ? true : false;\n+\n+    if(isStructuredProperty || isStructuredArrayProperty) {\n+      let referenceInfo = isStructuredProperty ? property[\"$ref\"].split(\"/\") : property[\"items\"][\"$ref\"].split(\"/\");\n+      entityTypeName =  referenceInfo.pop();\n+      entityName = referenceInfo[0] === \"#\" ? entityName : referenceInfo.pop().toString().split(\"-\")[0];\n+      propertyMetadata[\"properties\"] = generateEntityProperties(propertyMetadata[\"propertyPath\"], entityName, entityTypeName);\n+    }\n+    allProperties.push(propertyMetadata);\n+  }\n+  return allProperties;\n+}\n+\n+function getPropertyValues(currentProperty, entityInstance) {\n+  let resultObject = {};\n+  resultObject.propertyPath = currentProperty.propertyPath;\n+  if(currentProperty.datatype === \"object\") {\n+    resultObject.propertyValue = [];\n+\n+    let propertyName = currentProperty.propertyPath.split(\".\").pop();\n+    if(!entityInstance[propertyName] || Object.keys(entityInstance[propertyName]).length == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgxNzU5Ng=="}, "originalCommit": {"oid": "7d720d52b1b73dd88e41b6dc248d7ffd5a3e7332"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4030, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}