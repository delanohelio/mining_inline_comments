{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNzgwNjUx", "number": 3889, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoxNDoyN1rOD3sz8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoxNDoyN1rOD3sz8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzMyNDY3OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/collector/impl/CollectorImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoxNDoyN1rOGOGeig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODoxMTo1N1rOGO0xdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQzOTM3MA==", "bodyText": "We don't need the check since IOUtils.closeQuietly will check and close.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3889#discussion_r417439370", "createdAt": "2020-04-29T16:14:27Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/collector/impl/CollectorImpl.java", "diffHunk": "@@ -96,147 +64,29 @@ public CollectorImpl(HubClient hubClient, String sourceDatabase) {\n                 uriString += \"&options=\" + URLEncoder.encode(objectMapper.writeValueAsString(options), \"UTF-8\");\n             }\n \n-            URI uri = new URI(uriString);\n-\n-            RequestCallback requestCallback = request -> request.getHeaders()\n-                .setAccept(Arrays.asList(MediaType.APPLICATION_OCTET_STREAM, MediaType.ALL));\n+            /**\n+             * The underlying OkHttpClient is used for performance reasons, as trying to invoke a REST extension or\n+             * invoking /v1/eval results in far worse performance. See the comments in DHFPROD-4533 for more information.\n+             */\n+            OkHttpClient ok = (OkHttpClient) stagingClient.getClientImplementation();\n+            Request request = new Request.Builder().url(uriString).get().build();\n+            Response response = ok.newCall(request).execute();\n \n-            // Streams the response instead of loading it all in memory\n-            ResponseExtractor<Void> responseExtractor = response -> {\n-                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(response.getBody(), \"UTF-8\"));\n+            BufferedReader bufferedReader = null;\n+            try {\n+                bufferedReader = new BufferedReader(response.body().charStream());\n                 String line;\n                 while ((line = bufferedReader.readLine()) != null) {\n                     results.add(line);\n                 }\n-                bufferedReader.close();\n-                return null;\n-            };\n-\n-            hubClient.getStagingRestTemplate().execute(uri, HttpMethod.GET, requestCallback, responseExtractor);\n-\n-            return results;\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    public static RestTemplate newRestTemplate(DatabaseClient collectorClient, String username, String password) {\n-        DatabaseClientFactory.SecurityContext securityContext = collectorClient.getSecurityContext();\n-\n-        BasicCredentialsProvider prov = new BasicCredentialsProvider();\n-        prov.setCredentials(\n-            new AuthScope(collectorClient.getHost(), collectorClient.getPort(), AuthScope.ANY_REALM),\n-            new UsernamePasswordCredentials(username, password));\n-\n-        HttpClientBuilder httpClientBuilder = HttpClientBuilder.create().setDefaultCredentialsProvider(prov);\n-\n-        if (securityContext != null) {\n-            SSLContext sslContext = securityContext.getSSLContext();\n-            if (sslContext != null) {\n-                httpClientBuilder.setSslcontext(sslContext);\n-            }\n-\n-            SSLHostnameVerifier verifier = securityContext.getSSLHostnameVerifier();\n-            X509HostnameVerifier hostnameVerifier = null;\n-            if (verifier == SSLHostnameVerifier.ANY) {\n-                hostnameVerifier = new X509HostnameVerifier() {\n-                    @Override\n-                    public boolean verify(String paramString, SSLSession paramSSLSession) {\n-                        return true;\n-                    }\n-\n-                    @Override\n-                    public void verify(String host, SSLSocket ssl) throws IOException {\n-                    }\n-\n-                    @Override\n-                    public void verify(String host, X509Certificate cert) throws SSLException {\n-                    }\n-\n-                    @Override\n-                    public void verify(String host, String[] cns, String[] subjectAlts) throws SSLException {\n-                    }\n-                };\n-\n-            } else if (verifier == SSLHostnameVerifier.COMMON) {\n-                hostnameVerifier = null;\n-            } else if (verifier == SSLHostnameVerifier.STRICT) {\n-                hostnameVerifier = null;\n-            } else if (verifier != null) {\n-                hostnameVerifier = new HostnameVerifierAdapter(verifier);\n-            }\n-            httpClientBuilder.setHostnameVerifier(hostnameVerifier);\n-        }\n-\n-        HttpClient client = httpClientBuilder.build();\n-\n-        RestTemplate rt = new RestTemplate(new HttpComponentsClientHttpRequestFactory(client));\n-        rt.setErrorHandler(new MgmtResponseErrorHandler());\n-        return rt;\n-    }\n-\n-    static private class HostnameVerifierAdapter implements X509HostnameVerifier {\n-        private SSLHostnameVerifier verifier;\n-\n-        protected HostnameVerifierAdapter(SSLHostnameVerifier verifier) {\n-            this.verifier = verifier;\n-        }\n-\n-        public void verify(String hostname, X509Certificate cert) throws SSLException {\n-            ArrayList<String> cnArray = new ArrayList<>();\n-            try {\n-                LdapName ldapDN = new LdapName(cert.getSubjectX500Principal().getName());\n-                for (Rdn rdn : ldapDN.getRdns()) {\n-                    Object value = rdn.getValue();\n-                    if (\"CN\".equalsIgnoreCase(rdn.getType()) && value instanceof String) {\n-                        cnArray.add((String) value);\n-                    }\n-                }\n-                int type_dnsName = 2;\n-                int type_ipAddress = 7;\n-                ArrayList<String> subjectAltArray = new ArrayList<>();\n-                Collection<List<?>> alts = cert.getSubjectAlternativeNames();\n-                if (alts != null) {\n-                    for (List<?> alt : alts) {\n-                        if (alt != null && alt.size() == 2 && alt.get(1) instanceof String) {\n-                            Integer type = (Integer) alt.get(0);\n-                            if (type == type_dnsName || type == type_ipAddress) {\n-                                subjectAltArray.add((String) alt.get(1));\n-                            }\n-                        }\n-                    }\n+            } finally {\n+                if (bufferedReader != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34dbc68895741179a1a686edf73ab0e76a8b0b5b"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE5MzkzMA==", "bodyText": "Antoher option would be to use a try-with-resource statement, since the bufferedReader isn't required outside of the try block. https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3889#discussion_r418193930", "createdAt": "2020-04-30T18:04:41Z", "author": {"login": "ryanjdew"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/collector/impl/CollectorImpl.java", "diffHunk": "@@ -96,147 +64,29 @@ public CollectorImpl(HubClient hubClient, String sourceDatabase) {\n                 uriString += \"&options=\" + URLEncoder.encode(objectMapper.writeValueAsString(options), \"UTF-8\");\n             }\n \n-            URI uri = new URI(uriString);\n-\n-            RequestCallback requestCallback = request -> request.getHeaders()\n-                .setAccept(Arrays.asList(MediaType.APPLICATION_OCTET_STREAM, MediaType.ALL));\n+            /**\n+             * The underlying OkHttpClient is used for performance reasons, as trying to invoke a REST extension or\n+             * invoking /v1/eval results in far worse performance. See the comments in DHFPROD-4533 for more information.\n+             */\n+            OkHttpClient ok = (OkHttpClient) stagingClient.getClientImplementation();\n+            Request request = new Request.Builder().url(uriString).get().build();\n+            Response response = ok.newCall(request).execute();\n \n-            // Streams the response instead of loading it all in memory\n-            ResponseExtractor<Void> responseExtractor = response -> {\n-                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(response.getBody(), \"UTF-8\"));\n+            BufferedReader bufferedReader = null;\n+            try {\n+                bufferedReader = new BufferedReader(response.body().charStream());\n                 String line;\n                 while ((line = bufferedReader.readLine()) != null) {\n                     results.add(line);\n                 }\n-                bufferedReader.close();\n-                return null;\n-            };\n-\n-            hubClient.getStagingRestTemplate().execute(uri, HttpMethod.GET, requestCallback, responseExtractor);\n-\n-            return results;\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    public static RestTemplate newRestTemplate(DatabaseClient collectorClient, String username, String password) {\n-        DatabaseClientFactory.SecurityContext securityContext = collectorClient.getSecurityContext();\n-\n-        BasicCredentialsProvider prov = new BasicCredentialsProvider();\n-        prov.setCredentials(\n-            new AuthScope(collectorClient.getHost(), collectorClient.getPort(), AuthScope.ANY_REALM),\n-            new UsernamePasswordCredentials(username, password));\n-\n-        HttpClientBuilder httpClientBuilder = HttpClientBuilder.create().setDefaultCredentialsProvider(prov);\n-\n-        if (securityContext != null) {\n-            SSLContext sslContext = securityContext.getSSLContext();\n-            if (sslContext != null) {\n-                httpClientBuilder.setSslcontext(sslContext);\n-            }\n-\n-            SSLHostnameVerifier verifier = securityContext.getSSLHostnameVerifier();\n-            X509HostnameVerifier hostnameVerifier = null;\n-            if (verifier == SSLHostnameVerifier.ANY) {\n-                hostnameVerifier = new X509HostnameVerifier() {\n-                    @Override\n-                    public boolean verify(String paramString, SSLSession paramSSLSession) {\n-                        return true;\n-                    }\n-\n-                    @Override\n-                    public void verify(String host, SSLSocket ssl) throws IOException {\n-                    }\n-\n-                    @Override\n-                    public void verify(String host, X509Certificate cert) throws SSLException {\n-                    }\n-\n-                    @Override\n-                    public void verify(String host, String[] cns, String[] subjectAlts) throws SSLException {\n-                    }\n-                };\n-\n-            } else if (verifier == SSLHostnameVerifier.COMMON) {\n-                hostnameVerifier = null;\n-            } else if (verifier == SSLHostnameVerifier.STRICT) {\n-                hostnameVerifier = null;\n-            } else if (verifier != null) {\n-                hostnameVerifier = new HostnameVerifierAdapter(verifier);\n-            }\n-            httpClientBuilder.setHostnameVerifier(hostnameVerifier);\n-        }\n-\n-        HttpClient client = httpClientBuilder.build();\n-\n-        RestTemplate rt = new RestTemplate(new HttpComponentsClientHttpRequestFactory(client));\n-        rt.setErrorHandler(new MgmtResponseErrorHandler());\n-        return rt;\n-    }\n-\n-    static private class HostnameVerifierAdapter implements X509HostnameVerifier {\n-        private SSLHostnameVerifier verifier;\n-\n-        protected HostnameVerifierAdapter(SSLHostnameVerifier verifier) {\n-            this.verifier = verifier;\n-        }\n-\n-        public void verify(String hostname, X509Certificate cert) throws SSLException {\n-            ArrayList<String> cnArray = new ArrayList<>();\n-            try {\n-                LdapName ldapDN = new LdapName(cert.getSubjectX500Principal().getName());\n-                for (Rdn rdn : ldapDN.getRdns()) {\n-                    Object value = rdn.getValue();\n-                    if (\"CN\".equalsIgnoreCase(rdn.getType()) && value instanceof String) {\n-                        cnArray.add((String) value);\n-                    }\n-                }\n-                int type_dnsName = 2;\n-                int type_ipAddress = 7;\n-                ArrayList<String> subjectAltArray = new ArrayList<>();\n-                Collection<List<?>> alts = cert.getSubjectAlternativeNames();\n-                if (alts != null) {\n-                    for (List<?> alt : alts) {\n-                        if (alt != null && alt.size() == 2 && alt.get(1) instanceof String) {\n-                            Integer type = (Integer) alt.get(0);\n-                            if (type == type_dnsName || type == type_ipAddress) {\n-                                subjectAltArray.add((String) alt.get(1));\n-                            }\n-                        }\n-                    }\n+            } finally {\n+                if (bufferedReader != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQzOTM3MA=="}, "originalCommit": {"oid": "34dbc68895741179a1a686edf73ab0e76a8b0b5b"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE5Nzg3OA==", "bodyText": "This PR also requires a rebase", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3889#discussion_r418197878", "createdAt": "2020-04-30T18:11:57Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/collector/impl/CollectorImpl.java", "diffHunk": "@@ -96,147 +64,29 @@ public CollectorImpl(HubClient hubClient, String sourceDatabase) {\n                 uriString += \"&options=\" + URLEncoder.encode(objectMapper.writeValueAsString(options), \"UTF-8\");\n             }\n \n-            URI uri = new URI(uriString);\n-\n-            RequestCallback requestCallback = request -> request.getHeaders()\n-                .setAccept(Arrays.asList(MediaType.APPLICATION_OCTET_STREAM, MediaType.ALL));\n+            /**\n+             * The underlying OkHttpClient is used for performance reasons, as trying to invoke a REST extension or\n+             * invoking /v1/eval results in far worse performance. See the comments in DHFPROD-4533 for more information.\n+             */\n+            OkHttpClient ok = (OkHttpClient) stagingClient.getClientImplementation();\n+            Request request = new Request.Builder().url(uriString).get().build();\n+            Response response = ok.newCall(request).execute();\n \n-            // Streams the response instead of loading it all in memory\n-            ResponseExtractor<Void> responseExtractor = response -> {\n-                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(response.getBody(), \"UTF-8\"));\n+            BufferedReader bufferedReader = null;\n+            try {\n+                bufferedReader = new BufferedReader(response.body().charStream());\n                 String line;\n                 while ((line = bufferedReader.readLine()) != null) {\n                     results.add(line);\n                 }\n-                bufferedReader.close();\n-                return null;\n-            };\n-\n-            hubClient.getStagingRestTemplate().execute(uri, HttpMethod.GET, requestCallback, responseExtractor);\n-\n-            return results;\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    public static RestTemplate newRestTemplate(DatabaseClient collectorClient, String username, String password) {\n-        DatabaseClientFactory.SecurityContext securityContext = collectorClient.getSecurityContext();\n-\n-        BasicCredentialsProvider prov = new BasicCredentialsProvider();\n-        prov.setCredentials(\n-            new AuthScope(collectorClient.getHost(), collectorClient.getPort(), AuthScope.ANY_REALM),\n-            new UsernamePasswordCredentials(username, password));\n-\n-        HttpClientBuilder httpClientBuilder = HttpClientBuilder.create().setDefaultCredentialsProvider(prov);\n-\n-        if (securityContext != null) {\n-            SSLContext sslContext = securityContext.getSSLContext();\n-            if (sslContext != null) {\n-                httpClientBuilder.setSslcontext(sslContext);\n-            }\n-\n-            SSLHostnameVerifier verifier = securityContext.getSSLHostnameVerifier();\n-            X509HostnameVerifier hostnameVerifier = null;\n-            if (verifier == SSLHostnameVerifier.ANY) {\n-                hostnameVerifier = new X509HostnameVerifier() {\n-                    @Override\n-                    public boolean verify(String paramString, SSLSession paramSSLSession) {\n-                        return true;\n-                    }\n-\n-                    @Override\n-                    public void verify(String host, SSLSocket ssl) throws IOException {\n-                    }\n-\n-                    @Override\n-                    public void verify(String host, X509Certificate cert) throws SSLException {\n-                    }\n-\n-                    @Override\n-                    public void verify(String host, String[] cns, String[] subjectAlts) throws SSLException {\n-                    }\n-                };\n-\n-            } else if (verifier == SSLHostnameVerifier.COMMON) {\n-                hostnameVerifier = null;\n-            } else if (verifier == SSLHostnameVerifier.STRICT) {\n-                hostnameVerifier = null;\n-            } else if (verifier != null) {\n-                hostnameVerifier = new HostnameVerifierAdapter(verifier);\n-            }\n-            httpClientBuilder.setHostnameVerifier(hostnameVerifier);\n-        }\n-\n-        HttpClient client = httpClientBuilder.build();\n-\n-        RestTemplate rt = new RestTemplate(new HttpComponentsClientHttpRequestFactory(client));\n-        rt.setErrorHandler(new MgmtResponseErrorHandler());\n-        return rt;\n-    }\n-\n-    static private class HostnameVerifierAdapter implements X509HostnameVerifier {\n-        private SSLHostnameVerifier verifier;\n-\n-        protected HostnameVerifierAdapter(SSLHostnameVerifier verifier) {\n-            this.verifier = verifier;\n-        }\n-\n-        public void verify(String hostname, X509Certificate cert) throws SSLException {\n-            ArrayList<String> cnArray = new ArrayList<>();\n-            try {\n-                LdapName ldapDN = new LdapName(cert.getSubjectX500Principal().getName());\n-                for (Rdn rdn : ldapDN.getRdns()) {\n-                    Object value = rdn.getValue();\n-                    if (\"CN\".equalsIgnoreCase(rdn.getType()) && value instanceof String) {\n-                        cnArray.add((String) value);\n-                    }\n-                }\n-                int type_dnsName = 2;\n-                int type_ipAddress = 7;\n-                ArrayList<String> subjectAltArray = new ArrayList<>();\n-                Collection<List<?>> alts = cert.getSubjectAlternativeNames();\n-                if (alts != null) {\n-                    for (List<?> alt : alts) {\n-                        if (alt != null && alt.size() == 2 && alt.get(1) instanceof String) {\n-                            Integer type = (Integer) alt.get(0);\n-                            if (type == type_dnsName || type == type_ipAddress) {\n-                                subjectAltArray.add((String) alt.get(1));\n-                            }\n-                        }\n-                    }\n+            } finally {\n+                if (bufferedReader != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQzOTM3MA=="}, "originalCommit": {"oid": "34dbc68895741179a1a686edf73ab0e76a8b0b5b"}, "originalPosition": 193}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4164, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}