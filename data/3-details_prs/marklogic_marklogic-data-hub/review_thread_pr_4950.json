{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0MDA3MDA3", "number": 4950, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzo0NDoxMVrOFCC4ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDoxMzoxNVrOFCkx_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Njg4NzM0OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/EntitySearchController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzo0NDoxMVrOIBAD3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzo0NDoxMVrOIBAD3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyMDQ3Ng==", "bodyText": "I think this can be simpler and wholly implemented in the controller by using a DocumentManager from a DatabaseClient. Just read the URI as an InputStreamHandle, then use Spring's FileCopyUtils class to copy that class's InputStream to the HTTP response's OutputStream. You can remove all the code from the Manager (which doesn't really add any value here), and only have one try/catch too.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4950#discussion_r537920476", "createdAt": "2020-12-07T23:44:11Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/EntitySearchController.java", "diffHunk": "@@ -54,7 +57,22 @@ public String search(@RequestBody SearchQuery searchQuery, @RequestParam(default\n     @RequestMapping(method = RequestMethod.GET)\n     @ResponseBody\n     public JsonNode getRecord(@RequestParam String docUri, @RequestParam(defaultValue = \"final\") String database) {\n-        return getEntitySearchService(database).getRecord(docUri);\n+        return getEntitySearchService(database).getRecord(docUri, true);\n+    }\n+\n+    @RequestMapping(value = \"/downloadRecord\", method = RequestMethod.GET)\n+    public void downloadRecord(@RequestParam String docUri, @RequestParam(defaultValue = \"final\") String database, HttpServletResponse response) {\n+        String[] docUriArray = docUri.split(\"/\");\n+        String fileName = docUriArray[docUriArray.length-1];\n+        response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);\n+        response.addHeader(\"Content-Disposition\", String.format(\"attachment; filename=%s\", fileName));\n+\n+        try (OutputStream out = response.getOutputStream()) {\n+            newEntitySearchManager(database).downloadRecord(docUri, out);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed377a7f5cbeea76b5c42a5e04cb7c5b7e423c2"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Njg4OTg4OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/entitySearch/getRecord.api", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzo0NDo1M1rOIBAFMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzo0NDo1M1rOIBAFMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyMDgxOQ==", "bodyText": "Can undo this, assuming just using DatabaseClient.newDocumentManager works.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4950#discussion_r537920819", "createdAt": "2020-12-07T23:44:53Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/entitySearch/getRecord.api", "diffHunk": "@@ -1,10 +1,17 @@\n {\n   \"functionName\" : \"getRecord\",\n-  \"params\" : [ {\n+  \"params\" : [", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed377a7f5cbeea76b5c42a5e04cb7c5b7e423c2"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Njg5MzQwOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/entities/entity-search-lib.sjs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzo0NjoxNVrOIBAHRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzo0NjoxNVrOIBAHRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyMTM0OQ==", "bodyText": "Should be \"getDocumentSize\", since \"record\" refers to the abstraction containing the URI, the document, metadata, etc - we're only interested in the document size.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4950#discussion_r537921349", "createdAt": "2020-12-07T23:46:15Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/entities/entity-search-lib.sjs", "diffHunk": "@@ -637,12 +638,30 @@ function findFlowsAsMap() {\n   return flows;\n }\n \n+function getRecordSize(docUri) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed377a7f5cbeea76b5c42a5e04cb7c5b7e423c2"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Njg5ODEwOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/entities/search/EntitySearchManagerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzo0Nzo0NFrOIBAJxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzo1MToyMVrOIBAPkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyMTk4OQ==", "bodyText": "Just test the controller instead via an AbstractMvcTest - that gives us coverage over the controller as well, which is missing right now.\nShould test downloading a binary as well - that could be as simple as capturing the bytes of the string \"hello world\" and storing that as a document. Can assert on its size too.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4950#discussion_r537921989", "createdAt": "2020-12-07T23:47:44Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/entities/search/EntitySearchManagerTest.java", "diffHunk": "@@ -274,6 +279,39 @@ void testGetQueryOptions() {\n         assertThrows(RuntimeException.class, () -> new EntitySearchManager(getHubClient()).getQueryOptions(\"non-existent-options\"), \"Search options doesn't exist\");\n     }\n \n+    @Test\n+    void testDownloadRecord() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed377a7f5cbeea76b5c42a5e04cb7c5b7e423c2"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyMzQ3NQ==", "bodyText": "Also, no need to install the reference project and create customer entities. The \"download\" feature doesn't care about whether the doc is an entity or not - it just takes a URI as an input and returns the document in the HTTP response output stream.\nFor testing then, I'd have 5 separate tests - one a JSON doc, one for XML, one for Text, one for Binary, and one for a missing URI (verify you get an appropriate error message).", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4950#discussion_r537923475", "createdAt": "2020-12-07T23:51:21Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/entities/search/EntitySearchManagerTest.java", "diffHunk": "@@ -274,6 +279,39 @@ void testGetQueryOptions() {\n         assertThrows(RuntimeException.class, () -> new EntitySearchManager(getHubClient()).getQueryOptions(\"non-existent-options\"), \"Search options doesn't exist\");\n     }\n \n+    @Test\n+    void testDownloadRecord() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyMTk4OQ=="}, "originalCommit": {"oid": "4ed377a7f5cbeea76b5c42a5e04cb7c5b7e423c2"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjkwMzQxOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/entities/entity-search-lib.sjs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzo0OTozNVrOIBAMuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzo0OTozNVrOIBAMuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyMjc0Nw==", "bodyText": "I didn't see any tests for record size? I recommend doing some unit tests here to verify you're getting the correct result. And instead of passing in a URI, pass in the document itself - that makes it easier to test, as you don't have to persist a document first.\nShould test documents that result in each of the 3 sizes being used too.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4950#discussion_r537922747", "createdAt": "2020-12-07T23:49:35Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/entities/entity-search-lib.sjs", "diffHunk": "@@ -637,12 +638,30 @@ function findFlowsAsMap() {\n   return flows;\n }\n \n+function getRecordSize(docUri) {\n+  const doc = cts.doc(docUri);\n+  const sizes = ['B', 'KB', 'MB'];\n+  const nodeKind = xdmp.nodeKind(doc.root);\n+  let bytes = 0;\n+\n+  if(nodeKind === 'binary') {\n+    bytes = xdmp.binarySize(fn.head(doc).root);\n+  } else {\n+    bytes = xdmp.binarySize(fn.head(xdmp.unquote(xdmp.quote(doc), null, \"format-binary\")).root)\n+  }\n+\n+  let power = Math.floor(Math.log(bytes) / Math.log(1024));\n+  power = power > 2 ? 2 : power;\n+  return (bytes / Math.pow(1024, power)).toFixed(2) * 1 + ' ' + sizes[power];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed377a7f5cbeea76b5c42a5e04cb7c5b7e423c2"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjkwOTkxOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/EntitySearchController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzo1MTo0OVrOIBAQYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzo1MTo0OVrOIBAQYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyMzY4Mw==", "bodyText": "Use \"URI\" in the error message ; \"docUri\" is a variable name that is not as meaningful to a user like Pari as \"URI\" is.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4950#discussion_r537923683", "createdAt": "2020-12-07T23:51:49Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/EntitySearchController.java", "diffHunk": "@@ -54,7 +57,22 @@ public String search(@RequestBody SearchQuery searchQuery, @RequestParam(default\n     @RequestMapping(method = RequestMethod.GET)\n     @ResponseBody\n     public JsonNode getRecord(@RequestParam String docUri, @RequestParam(defaultValue = \"final\") String database) {\n-        return getEntitySearchService(database).getRecord(docUri);\n+        return getEntitySearchService(database).getRecord(docUri, true);\n+    }\n+\n+    @RequestMapping(value = \"/downloadRecord\", method = RequestMethod.GET)\n+    public void downloadRecord(@RequestParam String docUri, @RequestParam(defaultValue = \"final\") String database, HttpServletResponse response) {\n+        String[] docUriArray = docUri.split(\"/\");\n+        String fileName = docUriArray[docUriArray.length-1];\n+        response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);\n+        response.addHeader(\"Content-Disposition\", String.format(\"attachment; filename=%s\", fileName));\n+\n+        try (OutputStream out = response.getOutputStream()) {\n+            newEntitySearchManager(database).downloadRecord(docUri, out);\n+            response.flushBuffer();\n+        } catch (IOException e) {\n+            throw new RuntimeException(String.format(\"Unable to download record with docUri: %s with cause: %s\", docUri, e.getMessage()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed377a7f5cbeea76b5c42a5e04cb7c5b7e423c2"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjQ0MDkzOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/entities/entity-search-lib.sjs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDoxMzoxNVrOIB0J5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDoxMzoxNVrOIB0J5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc3Mzk5MA==", "bodyText": "Can you return recordSize as a two parameters, recordSize and recordSizeUnit ?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4950#discussion_r538773990", "createdAt": "2020-12-08T20:13:15Z", "author": {"login": "timur-isangulov"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/entities/entity-search-lib.sjs", "diffHunk": "@@ -494,6 +494,7 @@ function addDocumentMetadataToSearchResults(searchResponse) {\n       hubMetadata[\"lastProcessedByStep\"] = documentMetadata.datahubCreatedByStep;\n       hubMetadata[\"lastProcessedDateTime\"] = documentMetadata.datahubCreatedOn;\n       hubMetadata[\"sources\"] = getEntitySources(docUri);\n+      hubMetadata[\"recordSize\"] = getRecordSize(docUri);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed377a7f5cbeea76b5c42a5e04cb7c5b7e423c2"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3018, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}