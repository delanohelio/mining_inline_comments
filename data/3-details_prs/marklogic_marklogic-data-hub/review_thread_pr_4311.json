{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NjY4NjM4", "number": 4311, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo0NDoyOFrOETa4RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMzowODo0N1rOEVm46A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Nzk4Nzg4OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/exceptions/CustomExceptionHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo0NDoyOFrOG5Jdtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMjowOTo0M1rOG5MAwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3NzA3OQ==", "bodyText": "These should be removed, as @akshaysonvane has a separate ticket for logging these via logger.error.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4311#discussion_r462577079", "createdAt": "2020-07-29T20:44:28Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/exceptions/CustomExceptionHandler.java", "diffHunk": "@@ -41,6 +41,7 @@\n     @ExceptionHandler(FailedRequestException.class)\n     protected ResponseEntity<JsonNode> handleFailedRequestExceptionRequest(\n         FailedRequestException failedRequestException) {\n+        failedRequestException.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f676373951c97acc4170db971ae5db80afe5b13"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYxODgxOA==", "bodyText": "Yeah. Meant to back those changes out before pushing.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4311#discussion_r462618818", "createdAt": "2020-07-29T22:09:43Z", "author": {"login": "ryanjdew"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/exceptions/CustomExceptionHandler.java", "diffHunk": "@@ -41,6 +41,7 @@\n     @ExceptionHandler(FailedRequestException.class)\n     protected ResponseEntity<JsonNode> handleFailedRequestExceptionRequest(\n         FailedRequestException failedRequestException) {\n+        failedRequestException.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3NzA3OQ=="}, "originalCommit": {"oid": "8f676373951c97acc4170db971ae5db80afe5b13"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODAwMDgzOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/EnvironmentController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo0ODoyMVrOG5Jldg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNjo1Nzo1NFrOG6PcJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3OTA2Mg==", "bodyText": "Autowiring in the HttpSession makes me nervous - I think it's simpler just to declare an HttpServletRequest as a parameter of getSystemInfo() (you may be able to declare HttpSession as a parameter too, I forget if Spring MVC will populate it automatically). You can get the session from the HttpServletRequest.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4311#discussion_r462579062", "createdAt": "2020-07-29T20:48:21Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/EnvironmentController.java", "diffHunk": "@@ -76,6 +81,11 @@ public SystemInfo getSystemInfo() {\n         info.marklogicVersion = versionInfo.getMarkLogicVersion();\n         info.host = hubCentral.getHost();\n         info.sessionTimeout = environment.getProperty(\"server.servlet.session.timeout\");\n+        Optional.of(session).ifPresent((session) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f676373951c97acc4170db971ae5db80afe5b13"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk0NzU2Nw==", "bodyText": "Just verified, you can just declare HttpSession as a parameter - https://www.logicbig.com/tutorials/spring-framework/spring-web-mvc/http-session-param.html - I think that's the better way to go, also makes testing easier. Note that the session will never be null too.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4311#discussion_r462947567", "createdAt": "2020-07-30T12:03:53Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/EnvironmentController.java", "diffHunk": "@@ -76,6 +81,11 @@ public SystemInfo getSystemInfo() {\n         info.marklogicVersion = versionInfo.getMarkLogicVersion();\n         info.host = hubCentral.getHost();\n         info.sessionTimeout = environment.getProperty(\"server.servlet.session.timeout\");\n+        Optional.of(session).ifPresent((session) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3OTA2Mg=="}, "originalCommit": {"oid": "8f676373951c97acc4170db971ae5db80afe5b13"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcyMzU1OQ==", "bodyText": "Moved to a parameter.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4311#discussion_r463723559", "createdAt": "2020-07-31T16:57:54Z", "author": {"login": "ryanjdew"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/EnvironmentController.java", "diffHunk": "@@ -76,6 +81,11 @@ public SystemInfo getSystemInfo() {\n         info.marklogicVersion = versionInfo.getMarkLogicVersion();\n         info.host = hubCentral.getHost();\n         info.sessionTimeout = environment.getProperty(\"server.servlet.session.timeout\");\n+        Optional.of(session).ifPresent((session) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3OTA2Mg=="}, "originalCommit": {"oid": "8f676373951c97acc4170db971ae5db80afe5b13"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODAwNTU1OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/auth/WebSecurityConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo0OTo0NlrOG5JodQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNzowNDo0OFrOG6Po_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3OTgyOQ==", "bodyText": "I feel it'd be safer for this to be explicitly named for its purpose today, which is for checking session status, right? So this could be \"/websocket/sessionStatus\", and we'd want to explicitly list that here instead of allowing anything under \"/websocket/\" (as we could add another path under \"/websocket/\" that does require authentication and forget to update this).", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4311#discussion_r462579829", "createdAt": "2020-07-29T20:49:46Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/auth/WebSecurityConfiguration.java", "diffHunk": "@@ -71,6 +71,7 @@ protected void configure(HttpSecurity http) throws Exception {\n      */\n     protected String[] getAlwaysPermittedPatterns() {\n         return new String[]{\n+            \"/websocket/**\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f676373951c97acc4170db971ae5db80afe5b13"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcyNjg0Ng==", "bodyText": "There are a lot more endpoints called for setting up WebSockets and they include randomly generated paths, so determining all the patterns that should be permitted isn't really practical.\nI was able to remove the WebSockets permitted pattern by refactoring the front-end to not attempt to connect to WebSockets when logged out, which was bring the browser its knees with connection attempts.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4311#discussion_r463726846", "createdAt": "2020-07-31T17:04:48Z", "author": {"login": "ryanjdew"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/auth/WebSecurityConfiguration.java", "diffHunk": "@@ -71,6 +71,7 @@ protected void configure(HttpSecurity http) throws Exception {\n      */\n     protected String[] getAlwaysPermittedPatterns() {\n         return new String[]{\n+            \"/websocket/**\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3OTgyOQ=="}, "originalCommit": {"oid": "8f676373951c97acc4170db971ae5db80afe5b13"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODAxMDQzOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/auth/SessionMonitorInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1MTowNFrOG5JrTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1MTowNFrOG5JrTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4MDU1Ng==", "bodyText": "How could the template be null, since it's passed into the constructor? If it could be null, then the constructor should throw an exception because the system is ostensibly misconfigured.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4311#discussion_r462580556", "createdAt": "2020-07-29T20:51:04Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/auth/SessionMonitorInterceptor.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.marklogic.hub.central.auth;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.messaging.simp.SimpMessagingTemplate;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.servlet.HandlerInterceptor;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class SessionMonitorInterceptor implements HandlerInterceptor {\n+    static final Map<String, Object> stompHeaders = new HashMap<>() {{\n+        put(\"content-type\",\"application/json\");\n+    }};\n+\n+    private SimpMessagingTemplate template;\n+\n+    public SessionMonitorInterceptor(SimpMessagingTemplate template) {\n+        this.template = template;\n+    }\n+\n+    @Override\n+    public boolean preHandle(\n+            HttpServletRequest request, @NotNull HttpServletResponse response, @NotNull Object handler) throws Exception {\n+        HttpSession session = request.getSession();\n+        if (!(template == null || session == null)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f676373951c97acc4170db971ae5db80afe5b13"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODAxMjU5OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/auth/SessionMonitorInterceptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1MTozOVrOG5Jsiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1MTozOVrOG5Jsiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4MDg3NQ==", "bodyText": "I think this \"else\" block goes away since we don't need to check for the template being null.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4311#discussion_r462580875", "createdAt": "2020-07-29T20:51:39Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/auth/SessionMonitorInterceptor.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.marklogic.hub.central.auth;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.messaging.simp.SimpMessagingTemplate;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.servlet.HandlerInterceptor;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class SessionMonitorInterceptor implements HandlerInterceptor {\n+    static final Map<String, Object> stompHeaders = new HashMap<>() {{\n+        put(\"content-type\",\"application/json\");\n+    }};\n+\n+    private SimpMessagingTemplate template;\n+\n+    public SessionMonitorInterceptor(SimpMessagingTemplate template) {\n+        this.template = template;\n+    }\n+\n+    @Override\n+    public boolean preHandle(\n+            HttpServletRequest request, @NotNull HttpServletResponse response, @NotNull Object handler) throws Exception {\n+        HttpSession session = request.getSession();\n+        if (!(template == null || session == null)) {\n+            int sessionTimeout = session.getMaxInactiveInterval();\n+            template.convertAndSend(\"/topic/sessionStatus/\"+session.getAttribute(\"hubCentralSessionToken\"), new SessionStatus(sessionTimeout), stompHeaders);\n+        } else {\n+            System.out.println(\"Template: \" + template + \"\\nSession: \" + session);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f676373951c97acc4170db971ae5db80afe5b13"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODAxNjkwOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/WebSocketConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1Mjo1NFrOG5JvKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1Mjo1NFrOG5JvKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4MTU0NQ==", "bodyText": "I think both of these beans need comments to explain what's going on here. Referencing Spring docs on this is fine too. But the typical problem with Spring beans like this is they get a lot done in a small amount of code, but it's not clear why we're doing this.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4311#discussion_r462581545", "createdAt": "2020-07-29T20:52:54Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/WebSocketConfig.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package com.marklogic.hub.central;\n+\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.messaging.simp.config.MessageBrokerRegistry;\n+import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;\n+import org.springframework.web.socket.config.annotation.StompEndpointRegistry;\n+import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;\n+\n+@Configuration\n+@EnableWebSocketMessageBroker\n+public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {\n+\n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f676373951c97acc4170db971ae5db80afe5b13"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODMzNTI2OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/auth/SessionMonitorInterceptor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMjo0MDoyOVrOG5MwaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNzoyNjo1MFrOG6QQvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzMTAxNg==", "bodyText": "Why do we need a WebSocket to send the session timeout value continuously?\nWouldn't getMaxInactiveInterval always return 300 (5 minutes) in our case?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4311#discussion_r462631016", "createdAt": "2020-07-29T22:40:29Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/auth/SessionMonitorInterceptor.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.marklogic.hub.central.auth;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.messaging.simp.SimpMessagingTemplate;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.servlet.HandlerInterceptor;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class SessionMonitorInterceptor implements HandlerInterceptor {\n+    static final Map<String, Object> stompHeaders = new HashMap<>() {{\n+        put(\"content-type\",\"application/json\");\n+    }};\n+\n+    private SimpMessagingTemplate template;\n+\n+    public SessionMonitorInterceptor(SimpMessagingTemplate template) {\n+        this.template = template;\n+    }\n+\n+    @Override\n+    public boolean preHandle(\n+            HttpServletRequest request, @NotNull HttpServletResponse response, @NotNull Object handler) throws Exception {\n+        HttpSession session = request.getSession();\n+        if (!(template == null || session == null)) {\n+            int sessionTimeout = session.getMaxInactiveInterval();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f676373951c97acc4170db971ae5db80afe5b13"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk1MjE2MA==", "bodyText": "I'm puzzled by that too - this is a constant value. I thought the intent was for the middle tier to send a message when the session expired, and/or when there are N seconds remaining before session expiration.\nAn HttpSessionListener can be used for sending a message when the session expires.\nIf there's a requirement for sending a message N seconds before expiration - I'm not sure how to do that. I could imagine some object we store in the HttpSession that waits until N seconds before expiration to send a message. That object would be overridden/reset every time a request is received.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4311#discussion_r462952160", "createdAt": "2020-07-30T12:13:20Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/auth/SessionMonitorInterceptor.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.marklogic.hub.central.auth;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.messaging.simp.SimpMessagingTemplate;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.servlet.HandlerInterceptor;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class SessionMonitorInterceptor implements HandlerInterceptor {\n+    static final Map<String, Object> stompHeaders = new HashMap<>() {{\n+        put(\"content-type\",\"application/json\");\n+    }};\n+\n+    private SimpMessagingTemplate template;\n+\n+    public SessionMonitorInterceptor(SimpMessagingTemplate template) {\n+        this.template = template;\n+    }\n+\n+    @Override\n+    public boolean preHandle(\n+            HttpServletRequest request, @NotNull HttpServletResponse response, @NotNull Object handler) throws Exception {\n+        HttpSession session = request.getSession();\n+        if (!(template == null || session == null)) {\n+            int sessionTimeout = session.getMaxInactiveInterval();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzMTAxNg=="}, "originalCommit": {"oid": "8f676373951c97acc4170db971ae5db80afe5b13"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzczNzAyMw==", "bodyText": "As @rjrudin points out, the HtttpSessionListener doesn't allow us to catch the situation where we are N seconds before closing the connection. The only opportunity to catch that is with each request. So with each request, I'm using the interceptor to reset the session count down on the front-end side.\nI'll make an update to only send out the update if the session last accessed time was more than a second ago to cut down on some of the chatter.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4311#discussion_r463737023", "createdAt": "2020-07-31T17:26:50Z", "author": {"login": "ryanjdew"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/auth/SessionMonitorInterceptor.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.marklogic.hub.central.auth;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.messaging.simp.SimpMessagingTemplate;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.servlet.HandlerInterceptor;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class SessionMonitorInterceptor implements HandlerInterceptor {\n+    static final Map<String, Object> stompHeaders = new HashMap<>() {{\n+        put(\"content-type\",\"application/json\");\n+    }};\n+\n+    private SimpMessagingTemplate template;\n+\n+    public SessionMonitorInterceptor(SimpMessagingTemplate template) {\n+        this.template = template;\n+    }\n+\n+    @Override\n+    public boolean preHandle(\n+            HttpServletRequest request, @NotNull HttpServletResponse response, @NotNull Object handler) throws Exception {\n+        HttpSession session = request.getSession();\n+        if (!(template == null || session == null)) {\n+            int sessionTimeout = session.getMaxInactiveInterval();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzMTAxNg=="}, "originalCommit": {"oid": "8f676373951c97acc4170db971ae5db80afe5b13"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODM0ODE1OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/util/user-context.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMjo0NTo1N1rOG5M4FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNjo1MToxNVrOG6PP-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzMjk4MQ==", "bodyText": "Do we need some sort of cross tab communication to propagate the timeout events on all tabs  https://dev.to/naismith/cross-tab-communication-with-javascript-1hc9", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4311#discussion_r462632981", "createdAt": "2020-07-29T22:45:57Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub-central/ui/src/util/user-context.tsx", "diffHunk": "@@ -40,8 +41,27 @@ const UserProvider: React.FC<{ children: any }> = ({children}) => {\n   const [user, setUser] = useState<UserContextInterface>(defaultUserData);\n   const sessionUser = localStorage.getItem('dataHubUser');\n   const authoritiesService = useContext(AuthoritiesContext);\n+  const stompService = useContext(StompContext);\n   let sessionCount = 300;\n   let sessionTimer = true;\n+  let unsubscribeId;\n+  const monitorSession = async () => {\n+    stompService.onConnected().then(() => {\n+      const hubCentralSessionToken = localStorage.getItem('hubCentralSessionToken');\n+      stompService.messages.subscribe((message) => {\n+        sessionCount = parseInt(JSON.parse(message.body).sessionTimeout);\n+      });\n+      stompService.subscribe(`/topic/sessionStatus/${hubCentralSessionToken}`, (msgId: string) => {\n+        unsubscribeId = msgId;\n+      });\n+    });\n+  };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f676373951c97acc4170db971ae5db80afe5b13"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcyMDQ0Mg==", "bodyText": "Each tab will be subscribed to the same sessionToken via WebSockets, so each tab will have sessionCount updated.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4311#discussion_r463720442", "createdAt": "2020-07-31T16:51:15Z", "author": {"login": "ryanjdew"}, "path": "marklogic-data-hub-central/ui/src/util/user-context.tsx", "diffHunk": "@@ -40,8 +41,27 @@ const UserProvider: React.FC<{ children: any }> = ({children}) => {\n   const [user, setUser] = useState<UserContextInterface>(defaultUserData);\n   const sessionUser = localStorage.getItem('dataHubUser');\n   const authoritiesService = useContext(AuthoritiesContext);\n+  const stompService = useContext(StompContext);\n   let sessionCount = 300;\n   let sessionTimer = true;\n+  let unsubscribeId;\n+  const monitorSession = async () => {\n+    stompService.onConnected().then(() => {\n+      const hubCentralSessionToken = localStorage.getItem('hubCentralSessionToken');\n+      stompService.messages.subscribe((message) => {\n+        sessionCount = parseInt(JSON.parse(message.body).sessionTimeout);\n+      });\n+      stompService.subscribe(`/topic/sessionStatus/${hubCentralSessionToken}`, (msgId: string) => {\n+        unsubscribeId = msgId;\n+      });\n+    });\n+  };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzMjk4MQ=="}, "originalCommit": {"oid": "8f676373951c97acc4170db971ae5db80afe5b13"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDkyNTYzOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/auth/WebSecurityConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMzowODoxMlrOG8dmGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMzowODoxMlrOG8dmGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA1MjYzNA==", "bodyText": "Minor nitpick, no need to change, for now, we can get rid of these commented out lines.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4311#discussion_r466052634", "createdAt": "2020-08-05T23:08:12Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/auth/WebSecurityConfiguration.java", "diffHunk": "@@ -55,12 +59,19 @@ protected void configure(HttpSecurity http) throws Exception {\n             .and()\n             // Define requests that are always permitted, regardless of whether the user is authenticated or not\n             .authorizeRequests()\n+                // Needed for websocket tests\n+//                .antMatchers(\"/websocket/**\").permitAll()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f091bc133444570fcb958534be543334101b036"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDkyNzEyOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/auth/WebSecurityConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMzowODo0N1rOG8dm-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMzowODo0N1rOG8dm-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA1Mjg1Ng==", "bodyText": "@rjrudin, FYI, we are permitting access to /websocket/** only while running tests.  So the production app has all endpoints behind spring security.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4311#discussion_r466052856", "createdAt": "2020-08-05T23:08:47Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/auth/WebSecurityConfiguration.java", "diffHunk": "@@ -55,12 +59,19 @@ protected void configure(HttpSecurity http) throws Exception {\n             .and()\n             // Define requests that are always permitted, regardless of whether the user is authenticated or not\n             .authorizeRequests()\n+                // Needed for websocket tests\n+//                .antMatchers(\"/websocket/**\").permitAll()\n                 // Needed for springfox to work - see https://github.com/springfox/springfox/issues/1996#issuecomment-335155187\n                 .antMatchers(\"/swagger-resources/**\", \"/swagger-ui.html\", \"/v2/api-docs\", \"/webjars/**\").permitAll()\n                 // Non-springfox patterns to permit\n-                .antMatchers(getAlwaysPermittedPatterns()).permitAll().anyRequest().authenticated()\n-            .and()\n-            .logout().logoutUrl(\"/api/logout\").logoutSuccessHandler(((request, response, authentication) -> request.getSession().invalidate()));\n+                .antMatchers(getAlwaysPermittedPatterns()).permitAll();\n+        // needed for WebSocket test\n+        if (environment.getProperty(\"hub.websocket.securityDisabled\",\"false\").equals(\"true\")) {\n+            http.authorizeRequests().antMatchers(\"/websocket/**\").permitAll();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f091bc133444570fcb958534be543334101b036"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3889, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}