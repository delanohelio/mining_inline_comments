{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4OTU4Mjc3", "number": 3791, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNDoxNjo1MFrODvJi1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzoyMzowMVrODwF0NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNzY2MDM5OnYy", "diffSide": "RIGHT", "path": "one-ui/ui/src/pages/Bench.test.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNDoxNjo1MFrOGBZ6MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNDoxNjo1MFrOGBZ6MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEyNjI1Nw==", "bodyText": "MockRolesService is something that can be reused by other \"pages\" in test, so we should probably create a separate module. There is a __mocks__ folder under src/api to store mock functions", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3791#discussion_r404126257", "createdAt": "2020-04-06T14:16:50Z", "author": {"login": "bsrikan"}, "path": "one-ui/ui/src/pages/Bench.test.tsx", "diffHunk": "@@ -1,9 +1,185 @@\n import React from 'react';\n-import { shallow } from 'enzyme';\n-import Bench from './Bench';\n-\n-describe('Bench component', () => {\n-  it('should render correctly', () => {\n-    shallow(<Bench />);\n-  });\n-});\n\\ No newline at end of file\n+import { render, fireEvent, waitForElement, cleanup } from '@testing-library/react'\n+import '@testing-library/jest-dom/extend-expect'\n+import axiosMock from 'axios'\n+import  Bench from '../pages/Bench';\n+import {IRolesContextInterface, RolesContext} from '../util/roles';\n+\n+jest.mock('axios');\n+\n+class MockRolesService implements IRolesContextInterface{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f7d8a9d2cde625be66b864edfde0f730716a700"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNzcxNTc5OnYy", "diffSide": "RIGHT", "path": "one-ui/ui/src/pages/Bench.test.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNDoyODowNlrOGBadSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNDoyODowNlrOGBadSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEzNTI0Mw==", "bodyText": "Mock responses below can also be reused. Can you pls move them into data.config.\nAlso pls change the flow/step name and uri", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3791#discussion_r404135243", "createdAt": "2020-04-06T14:28:06Z", "author": {"login": "bsrikan"}, "path": "one-ui/ui/src/pages/Bench.test.tsx", "diffHunk": "@@ -1,9 +1,185 @@\n import React from 'react';\n-import { shallow } from 'enzyme';\n-import Bench from './Bench';\n-\n-describe('Bench component', () => {\n-  it('should render correctly', () => {\n-    shallow(<Bench />);\n-  });\n-});\n\\ No newline at end of file\n+import { render, fireEvent, waitForElement, cleanup } from '@testing-library/react'\n+import '@testing-library/jest-dom/extend-expect'\n+import axiosMock from 'axios'\n+import  Bench from '../pages/Bench';\n+import {IRolesContextInterface, RolesContext} from '../util/roles';\n+\n+jest.mock('axios');\n+\n+class MockRolesService implements IRolesContextInterface{\n+    public roles: string[] = [];\n+\n+    public setRoles: (roles: string[]) => void = (roles: string[]) => {\n+        this.roles = roles;\n+    };\n+    public canReadMappings:() => boolean = () => {\n+        return false;\n+    };\n+    public canWriteMappings:() => boolean = () => {\n+        return false;\n+    };\n+    public canReadMatchMerge:() => boolean = () => {\n+        return false;\n+    };\n+    public canWriteMatchMerge:() => boolean = () => {\n+        return false;\n+    };\n+    public canReadLoadData:() => boolean = () => {\n+        return true;\n+    };\n+    public canWriteLoadData:() => boolean = () => {\n+        return true;\n+    };\n+    public canReadEntityModels:() => boolean = () => {\n+        return false;\n+    };\n+    public canWriteEntityModels:() => boolean = () => {\n+        return false;\n+    };\n+    public canReadFlows:() => boolean = () => {\n+        return true;\n+    };\n+    public canWriteFlows:() => boolean = () => {\n+        return true;\n+    };\n+    public canReadStepDefinitions:() => boolean = () => {\n+        return false;\n+    };\n+    public canWriteStepDefinitions:() => boolean = () => {\n+        return false;\n+    };\n+    public hasOperatorRole:() => boolean = () => {\n+        return true;\n+    };\n+}\n+\n+//Mock Responses", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f7d8a9d2cde625be66b864edfde0f730716a700"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzUzNTI1OnYy", "diffSide": "RIGHT", "path": "one-ui/ui/src/config/bench.config.ts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzoyMzowMVrOGC5UGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODoyNzozOVrOGC7o2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4OTM2OA==", "bodyText": "Should the stepName and definitions be mapping since its a test for mapping story. We have to create a similar one for ingestion as well and have a separate story for that.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3791#discussion_r405689368", "createdAt": "2020-04-08T17:23:01Z", "author": {"login": "bsrikan"}, "path": "one-ui/ui/src/config/bench.config.ts", "diffHunk": "@@ -0,0 +1,145 @@\n+import {IRolesContextInterface} from \"../util/roles\";\n+\n+class MockRolesService implements IRolesContextInterface{\n+  public roles: string[] = [];\n+\n+  public setRoles: (roles: string[]) => void = (roles: string[]) => {\n+    this.roles = roles;\n+  };\n+  public canReadMappings:() => boolean = () => {\n+    return false;\n+  };\n+  public canWriteMappings:() => boolean = () => {\n+    return false;\n+  };\n+  public canReadMatchMerge:() => boolean = () => {\n+    return false;\n+  };\n+  public canWriteMatchMerge:() => boolean = () => {\n+    return false;\n+  };\n+  public canReadLoadData:() => boolean = () => {\n+    return true;\n+  };\n+  public canWriteLoadData:() => boolean = () => {\n+    return true;\n+  };\n+  public canReadEntityModels:() => boolean = () => {\n+    return false;\n+  };\n+  public canWriteEntityModels:() => boolean = () => {\n+    return false;\n+  };\n+  public canReadFlows:() => boolean = () => {\n+    return true;\n+  };\n+  public canWriteFlows:() => boolean = () => {\n+    return true;\n+  };\n+  public canReadStepDefinitions:() => boolean = () => {\n+    return false;\n+  };\n+  public canWriteStepDefinitions:() => boolean = () => {\n+    return false;\n+  };\n+  public hasOperatorRole:() => boolean = () => {\n+    return true;\n+  };\n+}\n+\n+const response = {\"data\":{\"jobId\": \"350da405-c1e9-4fa7-8269-d9aefe3b4b9a\"}, \"status\": 200};\n+const jobResp = {\n+  \"data\": {\n+    \"jobId\": \"350da405-c1e9-4fa7-8269-d9aefe3b4b9a\",\n+    \"flow\": \"testFlow\",\n+    \"user\": \"admin\",\n+    \"lastAttemptedStep\": \"1\",\n+    \"lastCompletedStep\": \"1\",\n+    \"timeStarted\": \"2020-04-04T01:17:44.918282-07:00\",\n+    \"timeEnded\": \"2020-04-04T01:17:45.012137-07:00\",\n+    \"stepResponses\": {\n+      \"1\": {\n+        \"flowName\": \"testFlow\",\n+        \"stepName\": \"failedIngest\",\n+        \"stepDefinitionName\": \"default-ingestion\",\n+        \"stepDefinitionType\": \"ingestion\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49a1a479a11f9464858c3fb65b02622931a16e88"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY5NTAxMQ==", "bodyText": "It can be either, this is just mock data. The UI code for rendering mapping is not in place yet, so used ingestion", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3791#discussion_r405695011", "createdAt": "2020-04-08T17:32:20Z", "author": {"login": "srinathgit"}, "path": "one-ui/ui/src/config/bench.config.ts", "diffHunk": "@@ -0,0 +1,145 @@\n+import {IRolesContextInterface} from \"../util/roles\";\n+\n+class MockRolesService implements IRolesContextInterface{\n+  public roles: string[] = [];\n+\n+  public setRoles: (roles: string[]) => void = (roles: string[]) => {\n+    this.roles = roles;\n+  };\n+  public canReadMappings:() => boolean = () => {\n+    return false;\n+  };\n+  public canWriteMappings:() => boolean = () => {\n+    return false;\n+  };\n+  public canReadMatchMerge:() => boolean = () => {\n+    return false;\n+  };\n+  public canWriteMatchMerge:() => boolean = () => {\n+    return false;\n+  };\n+  public canReadLoadData:() => boolean = () => {\n+    return true;\n+  };\n+  public canWriteLoadData:() => boolean = () => {\n+    return true;\n+  };\n+  public canReadEntityModels:() => boolean = () => {\n+    return false;\n+  };\n+  public canWriteEntityModels:() => boolean = () => {\n+    return false;\n+  };\n+  public canReadFlows:() => boolean = () => {\n+    return true;\n+  };\n+  public canWriteFlows:() => boolean = () => {\n+    return true;\n+  };\n+  public canReadStepDefinitions:() => boolean = () => {\n+    return false;\n+  };\n+  public canWriteStepDefinitions:() => boolean = () => {\n+    return false;\n+  };\n+  public hasOperatorRole:() => boolean = () => {\n+    return true;\n+  };\n+}\n+\n+const response = {\"data\":{\"jobId\": \"350da405-c1e9-4fa7-8269-d9aefe3b4b9a\"}, \"status\": 200};\n+const jobResp = {\n+  \"data\": {\n+    \"jobId\": \"350da405-c1e9-4fa7-8269-d9aefe3b4b9a\",\n+    \"flow\": \"testFlow\",\n+    \"user\": \"admin\",\n+    \"lastAttemptedStep\": \"1\",\n+    \"lastCompletedStep\": \"1\",\n+    \"timeStarted\": \"2020-04-04T01:17:44.918282-07:00\",\n+    \"timeEnded\": \"2020-04-04T01:17:45.012137-07:00\",\n+    \"stepResponses\": {\n+      \"1\": {\n+        \"flowName\": \"testFlow\",\n+        \"stepName\": \"failedIngest\",\n+        \"stepDefinitionName\": \"default-ingestion\",\n+        \"stepDefinitionType\": \"ingestion\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4OTM2OA=="}, "originalCommit": {"oid": "49a1a479a11f9464858c3fb65b02622931a16e88"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyNzQ0OQ==", "bodyText": "Fair enough.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3791#discussion_r405727449", "createdAt": "2020-04-08T18:27:39Z", "author": {"login": "bsrikan"}, "path": "one-ui/ui/src/config/bench.config.ts", "diffHunk": "@@ -0,0 +1,145 @@\n+import {IRolesContextInterface} from \"../util/roles\";\n+\n+class MockRolesService implements IRolesContextInterface{\n+  public roles: string[] = [];\n+\n+  public setRoles: (roles: string[]) => void = (roles: string[]) => {\n+    this.roles = roles;\n+  };\n+  public canReadMappings:() => boolean = () => {\n+    return false;\n+  };\n+  public canWriteMappings:() => boolean = () => {\n+    return false;\n+  };\n+  public canReadMatchMerge:() => boolean = () => {\n+    return false;\n+  };\n+  public canWriteMatchMerge:() => boolean = () => {\n+    return false;\n+  };\n+  public canReadLoadData:() => boolean = () => {\n+    return true;\n+  };\n+  public canWriteLoadData:() => boolean = () => {\n+    return true;\n+  };\n+  public canReadEntityModels:() => boolean = () => {\n+    return false;\n+  };\n+  public canWriteEntityModels:() => boolean = () => {\n+    return false;\n+  };\n+  public canReadFlows:() => boolean = () => {\n+    return true;\n+  };\n+  public canWriteFlows:() => boolean = () => {\n+    return true;\n+  };\n+  public canReadStepDefinitions:() => boolean = () => {\n+    return false;\n+  };\n+  public canWriteStepDefinitions:() => boolean = () => {\n+    return false;\n+  };\n+  public hasOperatorRole:() => boolean = () => {\n+    return true;\n+  };\n+}\n+\n+const response = {\"data\":{\"jobId\": \"350da405-c1e9-4fa7-8269-d9aefe3b4b9a\"}, \"status\": 200};\n+const jobResp = {\n+  \"data\": {\n+    \"jobId\": \"350da405-c1e9-4fa7-8269-d9aefe3b4b9a\",\n+    \"flow\": \"testFlow\",\n+    \"user\": \"admin\",\n+    \"lastAttemptedStep\": \"1\",\n+    \"lastCompletedStep\": \"1\",\n+    \"timeStarted\": \"2020-04-04T01:17:44.918282-07:00\",\n+    \"timeEnded\": \"2020-04-04T01:17:45.012137-07:00\",\n+    \"stepResponses\": {\n+      \"1\": {\n+        \"flowName\": \"testFlow\",\n+        \"stepName\": \"failedIngest\",\n+        \"stepDefinitionName\": \"default-ingestion\",\n+        \"stepDefinitionType\": \"ingestion\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4OTM2OA=="}, "originalCommit": {"oid": "49a1a479a11f9464858c3fb65b02622931a16e88"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3385, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}