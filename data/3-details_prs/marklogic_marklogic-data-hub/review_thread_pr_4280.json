{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2OTQ1MjAx", "number": 4280, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMTo0ODozOVrOESWlCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMTo1NDo0NVrOESWsnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Njc5NzU1OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/dhs/installer/command/AbstractInstallerCommand.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMTo0ODozOVrOG3fE0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNToxNDoxN1rOG3nGfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgzNDAwMQ==", "bodyText": "Since this class has a reference to HubConfig, I don't think it needs any inputs here, and it should do the work of using Versions to get the needed data. That will simplify what the subclass has to do.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4280#discussion_r460834001", "createdAt": "2020-07-27T11:48:39Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/dhs/installer/command/AbstractInstallerCommand.java", "diffHunk": "@@ -81,4 +84,21 @@ protected String getServerMajorVersion() {\n             return \"9\";\n         }\n     }\n+\n+    protected ObjectNode canInstallDhs(String installedHubVersion, MarkLogicVersion mlVersion){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be1508beb14c3c9b1c89157f97fd92fa832672db"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk2MDA1NQ==", "bodyText": "The only reason I had the 2 parameters for this method is for using it in the CanInstallDhsCommandTest. Without the 2 params, I can't test this method for various inputs.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4280#discussion_r460960055", "createdAt": "2020-07-27T15:06:37Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/dhs/installer/command/AbstractInstallerCommand.java", "diffHunk": "@@ -81,4 +84,21 @@ protected String getServerMajorVersion() {\n             return \"9\";\n         }\n     }\n+\n+    protected ObjectNode canInstallDhs(String installedHubVersion, MarkLogicVersion mlVersion){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgzNDAwMQ=="}, "originalCommit": {"oid": "be1508beb14c3c9b1c89157f97fd92fa832672db"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk2NTUwMg==", "bodyText": "Ah, that's a good reason. I think the way to go then is keep this method, and add a protected method above it that calls it and that the subclasses use. That eliminates the duplication in the subclasses.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4280#discussion_r460965502", "createdAt": "2020-07-27T15:14:17Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/dhs/installer/command/AbstractInstallerCommand.java", "diffHunk": "@@ -81,4 +84,21 @@ protected String getServerMajorVersion() {\n             return \"9\";\n         }\n     }\n+\n+    protected ObjectNode canInstallDhs(String installedHubVersion, MarkLogicVersion mlVersion){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgzNDAwMQ=="}, "originalCommit": {"oid": "be1508beb14c3c9b1c89157f97fd92fa832672db"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjgwMjE5OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/dhs/installer/command/AbstractInstallerCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMTo1MDowM1rOG3fHkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMTo1MDowM1rOG3fHkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgzNDcwNw==", "bodyText": "A scenario I forgot in the story is - DHF isn't installed yet. Thus, we should have a try/catch on getInstalledVersion(), so that if we get an exception, we know DHF isn't installed, and thus we don't need to check anything here.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4280#discussion_r460834707", "createdAt": "2020-07-27T11:50:03Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/dhs/installer/command/AbstractInstallerCommand.java", "diffHunk": "@@ -81,4 +84,21 @@ protected String getServerMajorVersion() {\n             return \"9\";\n         }\n     }\n+\n+    protected ObjectNode canInstallDhs(String installedHubVersion, MarkLogicVersion mlVersion){\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectNode node = mapper.createObjectNode();\n+        if(Character.getNumericValue(installedHubVersion.charAt(0)) < 5){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be1508beb14c3c9b1c89157f97fd92fa832672db"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjgwOTM4OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/dhs/installer/command/AbstractInstallerCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMTo1MjoyM1rOG3fL2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMTo1MjoyM1rOG3fL2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgzNTgwMw==", "bodyText": "I think a better way of implementing this to future-proof it is to say:\n\nIf major version is higher than 10, then can install\nIf major version is 10, and minor version is 3 or higher, then can install\nElse, cannot install", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4280#discussion_r460835803", "createdAt": "2020-07-27T11:52:23Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/dhs/installer/command/AbstractInstallerCommand.java", "diffHunk": "@@ -81,4 +84,21 @@ protected String getServerMajorVersion() {\n             return \"9\";\n         }\n     }\n+\n+    protected ObjectNode canInstallDhs(String installedHubVersion, MarkLogicVersion mlVersion){\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectNode node = mapper.createObjectNode();\n+        if(Character.getNumericValue(installedHubVersion.charAt(0)) < 5){\n+            node.put(\"canBeInstalled\", false);\n+            node.put(\"message\", \"DHF cannot be upgraded when the major version of the existing DHF instance is 4\");\n+        }\n+        else if(mlVersion.getMajor().equals(9) || (mlVersion.getMajor().equals(10) && mlVersion.getMinor() < 300)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be1508beb14c3c9b1c89157f97fd92fa832672db"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjgxMjA0OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/dhs/installer/command/InstallIntoDhsCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMTo1MzoxMlrOG3fNZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMTo1MzoxMlrOG3fNZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgzNjE5OQ==", "bodyText": "I think this message should be \"Unable to install \", as a failure hasn't occurred yet.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4280#discussion_r460836199", "createdAt": "2020-07-27T11:53:12Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/dhs/installer/command/InstallIntoDhsCommand.java", "diffHunk": "@@ -29,22 +32,34 @@\n     public void run(ApplicationContext context, Options options) {\n         initializeProject(context, options, buildDefaultProjectProperties(options));\n \n-        logger.info(\"Installing DHF version \" + hubConfig.getJarVersion());\n+        Versions versions = new Versions(hubConfig);\n+        String installedHubVersion = versions.getInstalledVersion();\n+        MarkLogicVersion mlVersion = versions.getMLVersion(serverVersion);\n \n-        HubAppDeployer deployer = new HubAppDeployer(hubConfig.getManageClient(), hubConfig.getAdminManager(), null, null);\n+        ObjectNode canInstall = canInstallDhs(installedHubVersion, mlVersion);\n+        if(canInstall.get(\"canBeInstalled\").asBoolean()){\n+            logger.info(\"Installing DHF version \" + hubConfig.getJarVersion());\n \n-        String groupName = \"Evaluator\";\n-        modifyHubConfigForDhs(groupName);\n-        deployer.setCommands(buildCommandsForDhs(options));\n-        deployer.deploy(hubConfig.getAppConfig());\n+            HubAppDeployer deployer = new HubAppDeployer(hubConfig.getManageClient(), hubConfig.getAdminManager(), null, null);\n \n-        // Update the servers in the Curator group\n-        groupName = \"Curator\";\n-        modifyHubConfigForDhs(groupName);\n-        DhsDeployServersCommand dhsDeployServersCommand = new DhsDeployServersCommand();\n-        dhsDeployServersCommand.setServerVersion(serverVersion);\n-        deployer.setCommands(Arrays.asList(dhsDeployServersCommand));\n-        deployer.deploy(hubConfig.getAppConfig());\n+            String groupName = \"Evaluator\";\n+            modifyHubConfigForDhs(groupName);\n+            deployer.setCommands(buildCommandsForDhs(options));\n+            deployer.deploy(hubConfig.getAppConfig());\n+\n+            // Update the servers in the Curator group\n+            groupName = \"Curator\";\n+            modifyHubConfigForDhs(groupName);\n+            DhsDeployServersCommand dhsDeployServersCommand = new DhsDeployServersCommand();\n+            dhsDeployServersCommand.setServerVersion(serverVersion);\n+            deployer.setCommands(Arrays.asList(dhsDeployServersCommand));\n+            deployer.deploy(hubConfig.getAppConfig());\n+        }\n+        else {\n+            logger.error(\"Failed to install DHF version \" + hubConfig.getJarVersion());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be1508beb14c3c9b1c89157f97fd92fa832672db"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjgxNjkzOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/dhs/installer/command/CanInstallDhsCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMTo1NDo0NVrOG3fQRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMTo1NDo0NVrOG3fQRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgzNjkzMw==", "bodyText": "As a sanity check, I think all of what this method does should be put into a try/catch. And if any exception occurs, when create an ObjectNode with canBeInstalled=false and message = ex.getMessage(), and write that to stdout (which you can do with just node.toString(), I don't think we need to worry about pretty-printing here - or at least, we should write it in a way that avoids the chance of a JsonProcessingException).", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4280#discussion_r460836933", "createdAt": "2020-07-27T11:54:45Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/dhs/installer/command/CanInstallDhsCommand.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package com.marklogic.hub.dhs.installer.command;\n+\n+import com.beust.jcommander.Parameters;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.hub.dhs.installer.Options;\n+import com.marklogic.hub.impl.Versions;\n+import com.marklogic.hub.impl.Versions.MarkLogicVersion;\n+import org.springframework.context.ApplicationContext;\n+\n+@Parameters(commandDescription = \"Verify if current version of DHF can be installed in a DHS environment\")\n+public class CanInstallDhsCommand extends AbstractInstallerCommand {\n+\n+    ObjectMapper mapper = new ObjectMapper();\n+\n+    @Override\n+    public void run(ApplicationContext context, Options options) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be1508beb14c3c9b1c89157f97fd92fa832672db"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3872, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}