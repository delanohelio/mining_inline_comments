{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2MDU1Njk1", "number": 3490, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMToxNjoxMVrODZ-nsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMDowOToyOVrODaBLWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTY2OTYwOnYy", "diffSide": "RIGHT", "path": "one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMToxNjoxMVrOFgrQZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMDowMTowOFrOFgvJhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgwNzQ2Mg==", "bodyText": "we can remove @EnableAsync for the implmentation.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3490#discussion_r369807462", "createdAt": "2020-01-22T21:16:11Z", "author": {"login": "hao1st"}, "path": "one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2012-2019 MarkLogic Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.marklogic.hub.curation.controllers;\n+\n+import com.marklogic.hub.curation.services.FlowManagerService;\n+import com.marklogic.hub.error.DataHubProjectException;\n+import com.marklogic.hub.flow.Flow;\n+import com.marklogic.hub.oneui.exceptions.DataHubException;\n+import com.marklogic.hub.oneui.models.StepModel;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.scheduling.annotation.EnableAsync;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.*;\n+\n+@Controller\n+@RequestMapping(\"/api/flows\")\n+@EnableAsync", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1806dfe7a7c6d1be2b3d1a962b5b888d9ce203b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3MTIzOA==", "bodyText": "That sounds right. Also, if we did need it, I think a comment would be very helpful. Spring annotations can be powerful, but they often beg the question - why is this annotation here?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3490#discussion_r369871238", "createdAt": "2020-01-23T00:01:08Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2012-2019 MarkLogic Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.marklogic.hub.curation.controllers;\n+\n+import com.marklogic.hub.curation.services.FlowManagerService;\n+import com.marklogic.hub.error.DataHubProjectException;\n+import com.marklogic.hub.flow.Flow;\n+import com.marklogic.hub.oneui.exceptions.DataHubException;\n+import com.marklogic.hub.oneui.models.StepModel;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.scheduling.annotation.EnableAsync;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.*;\n+\n+@Controller\n+@RequestMapping(\"/api/flows\")\n+@EnableAsync", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgwNzQ2Mg=="}, "originalCommit": {"oid": "e1806dfe7a7c6d1be2b3d1a962b5b888d9ce203b"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjA3ODc5OnYy", "diffSide": "RIGHT", "path": "one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMDowMzoyMVrOFgvL7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMDowMzoyMVrOFgvL7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3MTg1NQ==", "bodyText": "Shouldn't the service throw a useful exception here if the payload is invalid? The controller should be as thin as possible, just passing inputs and outputs around. I think all of these methods should roughly be:\nreturn new ResponseEntity<>(service.createFlow(flowJson, false), HttpStatus.OK);", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3490#discussion_r369871855", "createdAt": "2020-01-23T00:03:21Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2012-2019 MarkLogic Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.marklogic.hub.curation.controllers;\n+\n+import com.marklogic.hub.curation.services.FlowManagerService;\n+import com.marklogic.hub.error.DataHubProjectException;\n+import com.marklogic.hub.flow.Flow;\n+import com.marklogic.hub.oneui.exceptions.DataHubException;\n+import com.marklogic.hub.oneui.models.StepModel;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.scheduling.annotation.EnableAsync;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.*;\n+\n+@Controller\n+@RequestMapping(\"/api/flows\")\n+@EnableAsync\n+public class FlowController {\n+\n+    @Autowired\n+    private FlowManagerService flowManagerService;\n+\n+    @RequestMapping(method = RequestMethod.POST)\n+    @ResponseBody\n+    public ResponseEntity<?> createFlow(@RequestBody String flowJson) {\n+        Flow flow;\n+        try {\n+            flow = flowManagerService.createFlow(flowJson, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1806dfe7a7c6d1be2b3d1a962b5b888d9ce203b"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjA3OTY3OnYy", "diffSide": "RIGHT", "path": "one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMDowMzo0OVrOFgvMcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMDowMzo0OVrOFgvMcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3MTk4NA==", "bodyText": "Same thing here, createFlow should throw a useful exception. There shouldn't be any need for the controller to do anything other than call the service method.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3490#discussion_r369871984", "createdAt": "2020-01-23T00:03:49Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2012-2019 MarkLogic Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.marklogic.hub.curation.controllers;\n+\n+import com.marklogic.hub.curation.services.FlowManagerService;\n+import com.marklogic.hub.error.DataHubProjectException;\n+import com.marklogic.hub.flow.Flow;\n+import com.marklogic.hub.oneui.exceptions.DataHubException;\n+import com.marklogic.hub.oneui.models.StepModel;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.scheduling.annotation.EnableAsync;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.*;\n+\n+@Controller\n+@RequestMapping(\"/api/flows\")\n+@EnableAsync\n+public class FlowController {\n+\n+    @Autowired\n+    private FlowManagerService flowManagerService;\n+\n+    @RequestMapping(method = RequestMethod.POST)\n+    @ResponseBody\n+    public ResponseEntity<?> createFlow(@RequestBody String flowJson) {\n+        Flow flow;\n+        try {\n+            flow = flowManagerService.createFlow(flowJson, false);\n+            if (flow == null) {\n+                throw new DataHubException(\"Flow request payload is invalid.\");\n+            }\n+        } catch (Exception dpe) {\n+            throw new DataHubException(dpe.getMessage());\n+        }\n+        return new ResponseEntity<>(flow, HttpStatus.OK);\n+    }\n+\n+    @RequestMapping(value = \"/{flowName}\", method = RequestMethod.PUT)\n+    @ResponseBody\n+    public ResponseEntity<?> updateFlow(@PathVariable String flowName, @RequestBody String flowJson) {\n+        Flow flow;\n+        try {\n+            flow = flowManagerService.createFlow(flowJson, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1806dfe7a7c6d1be2b3d1a962b5b888d9ce203b"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjA4MTQ1OnYy", "diffSide": "RIGHT", "path": "one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMDowNToxMVrOFgvNow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOToyMzoxMVrOFhJ3GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3MjI5MQ==", "bodyText": "What's the point of using JSONObject? Why not just accept a JsonNode instead? The Spring controller can convert the RequestBody automatically into a JsonNode as well. That will cut out a lot of code and make for a richer method interface, as createFlow(JsonNode) is better than createFlow(String).", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3490#discussion_r369872291", "createdAt": "2020-01-23T00:05:11Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java", "diffHunk": "@@ -0,0 +1,288 @@\n+package com.marklogic.hub.curation.services;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.marklogic.hub.FlowManager;\n+import com.marklogic.hub.StepDefinitionManager;\n+import com.marklogic.hub.error.DataHubProjectException;\n+import com.marklogic.hub.oneui.exceptions.DataHubException;\n+import com.marklogic.hub.flow.Flow;\n+import com.marklogic.hub.flow.impl.FlowImpl;\n+import com.marklogic.hub.oneui.models.StepModel;\n+import com.marklogic.hub.scaffold.Scaffolding;\n+import com.marklogic.hub.step.StepDefinition;\n+import com.marklogic.hub.step.impl.Step;\n+import com.marklogic.hub.util.json.JSONObject;\n+import com.marklogic.hub.util.json.JSONUtils;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.EnumUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.NotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+@Service\n+public class FlowManagerService {\n+\n+    @Autowired\n+    private FlowManager flowManager;\n+\n+    @Autowired\n+    private StepDefinitionManager stepDefinitionManager;\n+\n+    @Autowired\n+    private Scaffolding scaffolding;\n+\n+    public Flow createFlow(String flowJson, boolean isFlowPresent) {\n+        JSONObject jsonObject;\n+        try {\n+            jsonObject = new JSONObject(flowJson);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1806dfe7a7c6d1be2b3d1a962b5b888d9ce203b"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMwODg4OA==", "bodyText": "JSONObject (com.marklogic.hub.util.json) is a utility class that is composed of JsonNode  and has a bunch of other utility methods", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3490#discussion_r370308888", "createdAt": "2020-01-23T19:23:11Z", "author": {"login": "srinathgit"}, "path": "one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java", "diffHunk": "@@ -0,0 +1,288 @@\n+package com.marklogic.hub.curation.services;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.marklogic.hub.FlowManager;\n+import com.marklogic.hub.StepDefinitionManager;\n+import com.marklogic.hub.error.DataHubProjectException;\n+import com.marklogic.hub.oneui.exceptions.DataHubException;\n+import com.marklogic.hub.flow.Flow;\n+import com.marklogic.hub.flow.impl.FlowImpl;\n+import com.marklogic.hub.oneui.models.StepModel;\n+import com.marklogic.hub.scaffold.Scaffolding;\n+import com.marklogic.hub.step.StepDefinition;\n+import com.marklogic.hub.step.impl.Step;\n+import com.marklogic.hub.util.json.JSONObject;\n+import com.marklogic.hub.util.json.JSONUtils;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.EnumUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.NotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+@Service\n+public class FlowManagerService {\n+\n+    @Autowired\n+    private FlowManager flowManager;\n+\n+    @Autowired\n+    private StepDefinitionManager stepDefinitionManager;\n+\n+    @Autowired\n+    private Scaffolding scaffolding;\n+\n+    public Flow createFlow(String flowJson, boolean isFlowPresent) {\n+        JSONObject jsonObject;\n+        try {\n+            jsonObject = new JSONObject(flowJson);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3MjI5MQ=="}, "originalCommit": {"oid": "e1806dfe7a7c6d1be2b3d1a962b5b888d9ce203b"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjA4NTEyOnYy", "diffSide": "RIGHT", "path": "one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMDowNzoxOVrOFgvP0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMDowNzoxOVrOFgvP0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3Mjg1MQ==", "bodyText": "This all seems logic that would go into the DS endpoint. @aebadirad What are your thoughts on that? That would require calling ML first. But it would get rid of a ton of code in Java and move it into a more interesting DS endpoint that can see if the flow exists already, and create it if not or update it otherwise.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3490#discussion_r369872851", "createdAt": "2020-01-23T00:07:19Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java", "diffHunk": "@@ -0,0 +1,288 @@\n+package com.marklogic.hub.curation.services;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.marklogic.hub.FlowManager;\n+import com.marklogic.hub.StepDefinitionManager;\n+import com.marklogic.hub.error.DataHubProjectException;\n+import com.marklogic.hub.oneui.exceptions.DataHubException;\n+import com.marklogic.hub.flow.Flow;\n+import com.marklogic.hub.flow.impl.FlowImpl;\n+import com.marklogic.hub.oneui.models.StepModel;\n+import com.marklogic.hub.scaffold.Scaffolding;\n+import com.marklogic.hub.step.StepDefinition;\n+import com.marklogic.hub.step.impl.Step;\n+import com.marklogic.hub.util.json.JSONObject;\n+import com.marklogic.hub.util.json.JSONUtils;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.EnumUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.NotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+@Service\n+public class FlowManagerService {\n+\n+    @Autowired\n+    private FlowManager flowManager;\n+\n+    @Autowired\n+    private StepDefinitionManager stepDefinitionManager;\n+\n+    @Autowired\n+    private Scaffolding scaffolding;\n+\n+    public Flow createFlow(String flowJson, boolean isFlowPresent) {\n+        JSONObject jsonObject;\n+        try {\n+            jsonObject = new JSONObject(flowJson);\n+\n+            JSONUtils.trimText(jsonObject, \"separator\");\n+        }\n+        catch (IOException e) {\n+            throw new DataHubException(\"Unable to parse flow json string : \" + e.getMessage());\n+        }\n+\n+        if (!jsonObject.isExist(\"name\") || StringUtils.isEmpty(jsonObject.getString(\"name\"))) {\n+            throw new BadRequestException(\"Flow Name not provided. Flow Name is required.\");\n+        }\n+\n+        String flowName = jsonObject.getString(\"name\");\n+        Flow flow;\n+        if (!isFlowPresent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1806dfe7a7c6d1be2b3d1a962b5b888d9ce203b"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjA4NTkwOnYy", "diffSide": "RIGHT", "path": "one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMDowNzo1MVrOFgvQUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMDowNzo1MVrOFgvQUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3Mjk3OQ==", "bodyText": "I would think the client shouldn't have to tell the service whether the flow exists yet or not - the service should know how to figure that out. The client just wants to say - here's my JSON, please save it.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3490#discussion_r369872979", "createdAt": "2020-01-23T00:07:51Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java", "diffHunk": "@@ -0,0 +1,288 @@\n+package com.marklogic.hub.curation.services;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.marklogic.hub.FlowManager;\n+import com.marklogic.hub.StepDefinitionManager;\n+import com.marklogic.hub.error.DataHubProjectException;\n+import com.marklogic.hub.oneui.exceptions.DataHubException;\n+import com.marklogic.hub.flow.Flow;\n+import com.marklogic.hub.flow.impl.FlowImpl;\n+import com.marklogic.hub.oneui.models.StepModel;\n+import com.marklogic.hub.scaffold.Scaffolding;\n+import com.marklogic.hub.step.StepDefinition;\n+import com.marklogic.hub.step.impl.Step;\n+import com.marklogic.hub.util.json.JSONObject;\n+import com.marklogic.hub.util.json.JSONUtils;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.EnumUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.NotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+@Service\n+public class FlowManagerService {\n+\n+    @Autowired\n+    private FlowManager flowManager;\n+\n+    @Autowired\n+    private StepDefinitionManager stepDefinitionManager;\n+\n+    @Autowired\n+    private Scaffolding scaffolding;\n+\n+    public Flow createFlow(String flowJson, boolean isFlowPresent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1806dfe7a7c6d1be2b3d1a962b5b888d9ce203b"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjA4ODU5OnYy", "diffSide": "RIGHT", "path": "one-ui/src/main/java/com/marklogic/hub/oneui/models/StepModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMDowOToyOVrOFgvR5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOToyNjoxM1rOFhJ8rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3MzM4Mw==", "bodyText": "What's the benefit of this class? Can't we just pass a JsonNode between the browser and ML? That would significantly reduce the code in the Java middle tier and put a lot more smarts into ML. And we wouldn't need to convert a JsonNode into some other class and then back to a JsonNode.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3490#discussion_r369873383", "createdAt": "2020-01-23T00:09:29Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/oneui/models/StepModel.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/*\n+ * Copyright 2012-2019 MarkLogic Corporation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package com.marklogic.hub.oneui.models;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.hub.step.StepDefinition;\n+import com.marklogic.hub.step.impl.Step;\n+import com.marklogic.hub.util.json.JSONObject;\n+\n+import java.util.Iterator;\n+\n+public class StepModel {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1806dfe7a7c6d1be2b3d1a962b5b888d9ce203b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMxMDMxOQ==", "bodyText": "The UI doesn't know anything about step definition. So, when some one creates a custom step, we have to create a custom step definition, main.sjs in addition to the step itself that goes inside the flow. So, the core and web models for steps are different, webModel (called StepModel.java) has 'modulePath' which provides the uri of the main.sjs\nwhereas it is not present in the core step model (Step.java). This is all inherited from 5.0 code codebase .", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3490#discussion_r370310319", "createdAt": "2020-01-23T19:26:13Z", "author": {"login": "srinathgit"}, "path": "one-ui/src/main/java/com/marklogic/hub/oneui/models/StepModel.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/*\n+ * Copyright 2012-2019 MarkLogic Corporation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package com.marklogic.hub.oneui.models;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.hub.step.StepDefinition;\n+import com.marklogic.hub.step.impl.Step;\n+import com.marklogic.hub.util.json.JSONObject;\n+\n+import java.util.Iterator;\n+\n+public class StepModel {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3MzM4Mw=="}, "originalCommit": {"oid": "e1806dfe7a7c6d1be2b3d1a962b5b888d9ce203b"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3650, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}