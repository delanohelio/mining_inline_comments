{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwNzI5NTk2", "number": 3724, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzozODoxMFrODpnFZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxMTozNlrODpqU_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTU4NTY2OnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzozODoxMFrOF45ZIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjozNjowMlrOF5CtKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIwNDg5Ng==", "bodyText": "Should It be Java 8 or 11?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3724#discussion_r395204896", "createdAt": "2020-03-19T17:38:10Z", "author": {"login": "SameeraPriyathamTadikonda"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,425 +1,365 @@\n-# Contributing to MarkLogic Data Hub\r\n-\r\n-MarkLogic Data Hub welcomes new contributors. This document will guide you\r\n-through the process.\r\n-\r\n- - [Issues and Bugs](#found-an-issue)\r\n- - [Feature Requests](#want-a-feature)\r\n- - [Building from Source](#building-marklogic-data-hub-from-source)\r\n- - [Submission Guidelines](#submission-guidelines)\r\n-\r\n-\r\n-## Found an Issue?\r\n-If you find a bug in the source code or a mistake in the documentation, you can help us by submitting an issue to our [GitHub Issue Tracker][issue tracker]. Even better, you can submit a Pull Request with a fix for the issue you filed.\r\n-\r\n-\r\n-## Want a Feature?\r\n-You can request a new feature by submitting an issue to our [GitHub Issue Tracker][issue tracker].  If you\r\n-would like to implement a new feature then first create a new issue and discuss it with one of our\r\n-project maintainers.\r\n-#####Note: As of version 2.0.3, pull requests will only be accepted for MarkLogic 9. Only critical bug fixes will be accepted for MarkLogic 8 on the legacy 2.0.2 or earlier branches.\r\n-\r\n-\r\n-## Building MarkLogic Data Hub from Source\r\n-Looking to build the code from source? Look no further.\r\n-\r\n-\r\n-#### Prerequisites\r\n-You need:\r\n-\r\n-- MarkLogic Server (see [Version Compatibility](https://docs.marklogic.com/datahub/refs/version-compatibility.html) for the correct version)\r\n-- Java JDK 8 or later\r\n-- Gradle 4.6 or later\r\n-- A decent IDE. (Recommended: IntelliJ)\r\n-\r\n-\r\n-#### Building from the command line\r\n-**WARNING:** _The Data Hub build includes a large number of tests which take a total of approximately 30 minutes. You can skip the tests; however, you must run the tests before submitting changes._\r\n-\r\n-The build script builds ALL the Data Hub deliverables (marklogic-data-hub.jar, marklogic-datahub-<version>.war, and ml-data-hub-plugin for Gradle). To build, run:\r\n-\r\n-```bash\r\n-cd /path/to/data-hub-project/\r\n-./gradlew build -x test\r\n-```\r\n-\r\n-\r\n-#### Building and using the Data Hub Java library\r\n-\r\n-If you wish to make changes to or try out the latest code in the Data Hub Java library (marklogic-data-hub-(version).jar), follow \r\n-these instructions:\r\n-\r\n-1. Publish the library to your local Maven repository (defaults to ~/.m2/repository).\r\n-\r\n-  ```bash\r\n-  cd /path/to/marklogic-data-hub/\r\n-  ./gradlew publishToMavenLocal\r\n-  ```\r\n- \r\n-2. In the build.gradle file for the project that will use the library, add your local Maven repository as a repository if it's not alreaded included:\r\n-\r\n-  ```bash\r\n-  repositories {\r\n-    mavenLocal()\r\n-  }\r\n-  ```\r\n-\r\n-3. Assuming that you're using Gradle's java plugin, add the library as a dependency to your project:\r\n-\r\n-  ```bash\r\n-  dependencies {\r\n-    compile \"com.marklogic:marklogic-data-hub:(version)\"\r\n-  ```\r\n-\r\n-The version is defined in gradle.properties in the marklogic-data-hub root project directory. You can override this if \r\n-desired when publishing to your local Maven repository - e.g.\r\n-\r\n-    ./gradlew publishToMavenLocal -Pversion=myVersion\r\n-\r\n-\r\n-#### Building and using the Data Hub Gradle Plugin\r\n-\r\n-If you are testing a change to the ml-data-hub Gradle plugin or a cutting-edge development version, you might want to use a local copy of the Gradle plugin in your Data Hub project. \r\n-To use a local copy of the Gradle plugin in your Data Hub project, you must tell Gradle to use your local copy instead of the one in the cloud.\r\n-\r\n-1. Publish the plugin to your local Maven repository (defaults to ~/.m2/repository).\r\n-\r\n-  ```bash\r\n-  cd /path/to/marklogic-data-hub/\r\n-  ./gradlew publishToMavenLocal\r\n-  ```\r\n-\r\n-2. In your Data Hub project's `build.gradle` file, enter the local version:\r\n-\r\n-  ```groovy\r\n-\r\n-  // this goes at the top above the plugins section\r\n-\r\n-  buildscript {\r\n-    repositories {\r\n-      mavenLocal()\r\n-      jcenter()\r\n-    }\r\n-    dependencies {\r\n-      classpath \"com.marklogic:ml-data-hub:(the version number you chose)\"\r\n-    }\r\n-  }\r\n-\r\n-  plugins {\r\n-     ...\r\n-\r\n-     // comment out this line. It pulls the version from the cloud\r\n-     // id 'com.marklogic.ml-data-hub' version '4.0.0'\r\n-  }\r\n-\r\n-  // this tells gradle to apply the plugin you included above in the buildscript section\r\n-  apply plugin: \"com.marklogic.ml-data-hub\"\r\n-  ```\r\n-\r\n-3. To run the plugin's unit tests, navigate to the ml-data-hub-plugin directory, then do the following:\r\n-\r\n-  a. Run all unit tests\r\n-\r\n-    ../gradlew test\r\n-\r\n-\r\n-  b. Run one unit test\r\n-\r\n-    ../gradlew -Dtest.single=CreateEntityTask test\r\n-\r\n-\r\n-**Note**: This change goes in a Data Hub project's `build.gradle`. Not the Data Hub source code's build.gradle.\r\n-\r\n-\r\n-#### Running QuickStart from Source\r\n-\r\n-1. Install the prerequisites.\r\n-\r\n-2. Open two terminal windows.\r\n-\r\n-  **Terminal window 1** - This runs the webapp.\r\n-\r\n-      ```bash\r\n-      cd /path/to/data-hub-project\r\n-      ./gradlew bootrun\r\n-      ```\r\n-\r\n-  **NOTE:** The progress indicator stops around 90%. This is normal. In Gradle, 100% means it finished running. This stays running indefinitely and thus shows 90%.\r\n-\r\n-      ```\r\n-      > Building 90% > :web:bootRun\r\n-      ```\r\n-\r\n-  **Terminal window 2** - This runs QuickStart.\r\n-\r\n-      ```\r\n-      cd /path/to/data-hub-project\r\n-      ./gradlew runui\r\n-      ```\r\n-\r\n-In a web browser, navigate to [http://localhost:4200](http://localhost:4200) to use the debug version of QuickStart.\r\n-\r\n-\r\n-### Troubleshooting\r\n-\r\n-If the `gradle runui` command fails, try the following to troubleshoot.\r\n-\r\n-\r\n-#### Do you have Gradle 3.4 or newer?\r\n-\r\n-Using gradle directly:\r\n-  ```\r\n-  gradle -v\r\n-  ```\r\n-or if you are using the wrapper:\r\n-  ```\r\n-  ./gradlew -v\r\n-  ```\r\n-\r\n-If your gradle wrapper is older than `3.4`:\r\n-  ```\r\n-  gradle wrapper --gradle-version 3.4\r\n-  ```\r\n-\r\n-\r\n-#### Are you on the develop branch?\r\n-\r\n-_Hint: You should be._\r\n-\r\n-To check:\r\n-  ```bash\r\n-  git branch\r\n-  ```\r\n-\r\n-To switch to the develop branch:\r\n-  ```bash\r\n-  git checkout develop\r\n-  ```\r\n-\r\n-\r\n-#### Do you have the latest code?\r\n-\r\n-  Better make sure...\r\n-\r\n-\r\n-##### If you cloned from the github.com/marklogic/marklogic-data-hub repo:\r\n-\r\n-  ```bash\r\n-  git pull origin develop\r\n-  ```\r\n-\r\n-##### If you forked then cloned your fork:\r\n-\r\n-  1. Make sure you have the upstream files:\r\n-\r\n-      ```bash\r\n-      $ git remote add upstream git://github.com/marklogic/marklogic-data-hub.git\r\n-      ```\r\n-\r\n-  2. Fetch the upstream files:\r\n-\r\n-      ```bash\r\n-      git fetch upstream develop\r\n-      ```\r\n-\r\n-  3. Merge it:\r\n-\r\n-      ```bash\r\n-      git rebase upstream/develop\r\n-      ```\r\n-\r\n-#### Remove the `web/node_modules` directory.\r\n-\r\n-If you see several javascript errors, you might have a corrupted `node_modules` directory. Remove it then run again.\r\n-\r\n-  ```bash\r\n-  rm -rf web/node_modules\r\n-  ```\r\n-\r\n-\r\n-## Submission Guidelines\r\n-\r\n-\r\n-### Submitting an Issue\r\n-\r\n-Before you submit your issue, search the archive to check if your question has been answered.\r\n-\r\n-If your issue appears to be a bug and hasn't been reported, open a new issue.\r\n-\r\n-By not reporting duplicate issues, you help us maximize the time we spend fixing issues and adding new features.\r\n-\r\n-Please fill out the issue template so that your issue can be dealt with quickly.\r\n-\r\n-\r\n-### Submitting a Pull Request\r\n-\r\n-#### Fork marklogic-data-hub\r\n-\r\n-Fork the project [on GitHub](https://github.com/marklogic/marklogic-data-hub/fork) and clone your copy.\r\n-\r\n-  ```sh\r\n-  $ git clone git@github.com:username/marklogic-data-hub.git\r\n-  $ cd marklogic-data-hub\r\n-  $ git remote add upstream git://github.com/marklogic/marklogic-data-hub.git\r\n-  ```\r\n-\r\n-**Important:** Please open an issue in the [issue tracker][] and get your proposed changes pre-approved by at least one of the project maintainers before you start coding. Nothing is more frustrating than seeing your hard work go to waste because your vision does not align with that of the project maintainers.\r\n-\r\n-\r\n-#### Create a branch for your changes\r\n-\r\n-If you decide to fix something, create a feature branch and start hacking.\r\n-\r\n-**Note:** We use `git flow` and our most recent changes live on the `develop` branch.\r\n-\r\n-  ```sh\r\n-  $ git checkout -b my-feature-branch -t origin/develop\r\n-  ```\r\n-\r\n-\r\n-#### Formatting code\r\n-\r\n-We use `[.editorconfig][]` to configure our editors for proper code formatting. If you don't\r\n-use a tool that supports editorconfig, be sure to configure your editor to use the settings\r\n-equivalent to our .editorconfig file.\r\n-\r\n-\r\n-#### Commit your changes\r\n-\r\n-Make sure git knows your name and email address:\r\n-\r\n-  ```sh\r\n-  $ git config --global user.name \"J. Random User\"\r\n-  $ git config --global user.email \"j.random.user@example.com\"\r\n-  ```\r\n-\r\n-Writing good commit logs is important. A commit log should describe what\r\n-changed and why. Follow these guidelines when writing one:\r\n-\r\n-1. The first line should be 50 characters or less and contain a short\r\n-   description of the change including the issue number prefixed by a hash (#).\r\n-2. Keep the second line blank.\r\n-3. Wrap all other lines at 72 columns.\r\n-\r\n-Example of a good commit log:\r\n-\r\n-```\r\n-Fixing Issue #123: make the whatchamajigger work in MarkLogic 9\r\n-\r\n-Body of commit message is a few lines of text, explaining things\r\n-in more detail, possibly giving some background about the issue\r\n-being fixed, etc.\r\n-\r\n-The body of the commit message can be several paragraphs, and\r\n-please do proper word-wrap and keep columns shorter than about\r\n-72 characters or so. That way `git log` will show things\r\n-nicely even when it is indented.\r\n-```\r\n-\r\n-The header line should be meaningful; it is what other people see when they\r\n-run `git shortlog` or `git log --oneline`.\r\n-\r\n-\r\n-#### Rebase your repo\r\n-\r\n-Use `git rebase` (not `git merge`) to sync your work from time to time.\r\n-\r\n-  ```sh\r\n-  $ git fetch upstream\r\n-  $ git rebase upstream/develop\r\n-  ```\r\n-\r\n-\r\n-#### Test your code\r\n-\r\n-- Run the JUnit tests.\r\n-\r\n-  ```sh\r\n-  $ ./gradlew test\r\n-  ```\r\n-\r\n-- To run a single test:\r\n-\r\n-  ```sh\r\n-  $ ./gradlew -Dtest.single=TestName test\r\n-  ```\r\n-\r\n-- For best results, do not include the final word test. For example, suppose you want to run FlowRunnerTest:\r\n-\r\n-  ```sh\r\n-  $ ./gradlew -Dtest.single=FlowRunner test\r\n-  ```\r\n-\r\n-- To run the QuickStart end-to-end tests, you need Node.js 8.9.1 or later and run:\r\n-  ```jshelllanguage\r\n-  gradlew bootrun\r\n-  cd web\r\n-  npm install\r\n-  npm install -g protractor\r\n-  npm run webdriver-update\r\n-  npm run e2e\r\n-  ```\r\n-*Note: For end-to-end (e2e) tests, Data Hub must be running and so must a MarkLogic instance with available appservers for the ports 8010-8014.*\r\n-\r\n-You can run the e2e tests from Intellij or another IDE to perform fullstack debugging. To do so, add a run/debug\r\n-task that runs the script \"e2e\". Make sure to add a 'before launch' task as folows: `npm run \"webdriver-update\"`.\r\n-\r\n-**IMPORTANT: All submitted patches must pass ALL tests.**\r\n-\r\n-\r\n-#### Push your changes\r\n-\r\n-  ```sh\r\n-  $ git push origin my-feature-branch\r\n-  ```\r\n-\r\n-\r\n-#### Agree to the contributor License\r\n-\r\n-Before we can accept and merge your changes, you must sign a [Contributor License Agreement](http://developer.marklogic.com/products/cla). You only need to do this once.\r\n-\r\n-\r\n-#### Submit the pull request\r\n-\r\n-Go to https://github.com/username/marklogic-data-hub and select your feature branch. Click\r\n-the 'Pull Request' button and fill out the form.\r\n-\r\n-Pull requests are usually reviewed within a few days. If you get comments\r\n-that need to be to addressed, apply your changes in a separate commit and push that to your\r\n-feature branch. Post a comment in the pull request afterwards; GitHub does\r\n-not send out notifications when you add commits to existing pull requests.\r\n-\r\n-That's it! Thank you for your contribution!\r\n-\r\n-\r\n-#### After your pull request is merged\r\n-\r\n-After your pull request is merged, you can safely delete your branch and pull the changes\r\n-from the main (upstream) repository:\r\n-\r\n-* Delete the remote branch on GitHub either through the GitHub web UI or your local shell as follows:\r\n-\r\n-    ```shell\r\n-    git push origin --delete my-feature-branch\r\n-    ```\r\n-\r\n-* Check out the develop branch:\r\n-\r\n-    ```shell\r\n-    git checkout develop -f\r\n-    ```\r\n-\r\n-* Delete the local branch:\r\n-\r\n-    ```shell\r\n-    git branch -D my-feature-branch\r\n-    ```\r\n-\r\n-* Update your develop with the latest upstream version:\r\n-\r\n-    ```shell\r\n-    git pull --ff upstream develop\r\n-    ```\r\n-\r\n-[issue tracker]: https://github.com/marklogic/marklogic-data-hub/issues\r\n-[.editorconfig]: http://editorconfig.org/\r\n+# Contributing to MarkLogic Data Hub\n+\n+MarkLogic Data Hub welcomes new contributors. This document will guide you\n+through the process.\n+\n+ - [Issues and Bugs](#found-an-issue)\n+ - [Feature Requests](#want-a-feature)\n+ - [Developing Data Hub](#developing-data-hub)\n+ - [Submission Guidelines](#submission-guidelines)\n+\n+\n+## Found an Issue?\n+If you find a bug in the source code or a mistake in the documentation, you can help us by submitting an issue to our [GitHub Issue Tracker][issue tracker]. Even better, you can submit a Pull Request with a fix for the issue you filed.\n+\n+\n+## Want a Feature?\n+You can request a new feature by submitting an issue to our [GitHub Issue Tracker][issue tracker].  If you\n+would like to implement a new feature then first create a new issue and discuss it with one of our\n+project maintainers.\n+\n+\n+## Developing Data Hub \n+\n+This section describes how to build and test new features and fixes in Data Hub. This includes changes to the following subprojects in this project:\n+\n+- the Data Hub library in ./marklogic-data-hub\n+- the Data Hub Gradle plugin in ./ml-data-hub-plugin\n+- the One-UI web application in ./one-ui\n+- the QuickStart web application in ./web\n+\n+### Prerequisites\n+\n+You need:\n+\n+- MarkLogic Server (see [Version Compatibility](https://docs.marklogic.com/datahub/refs/version-compatibility.html) for the correct version)\n+- Java JDK 8 or later", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4129b1dc9bdd501bc40c3644372804ede574b4c7"}, "originalPosition": 461}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI0OTQ1Nw==", "bodyText": "Good catch - technically, it should be Java 9, as that's what is in our build.gradle files. I'll update.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3724#discussion_r395249457", "createdAt": "2020-03-19T18:53:32Z", "author": {"login": "rjrudin"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,425 +1,365 @@\n-# Contributing to MarkLogic Data Hub\r\n-\r\n-MarkLogic Data Hub welcomes new contributors. This document will guide you\r\n-through the process.\r\n-\r\n- - [Issues and Bugs](#found-an-issue)\r\n- - [Feature Requests](#want-a-feature)\r\n- - [Building from Source](#building-marklogic-data-hub-from-source)\r\n- - [Submission Guidelines](#submission-guidelines)\r\n-\r\n-\r\n-## Found an Issue?\r\n-If you find a bug in the source code or a mistake in the documentation, you can help us by submitting an issue to our [GitHub Issue Tracker][issue tracker]. Even better, you can submit a Pull Request with a fix for the issue you filed.\r\n-\r\n-\r\n-## Want a Feature?\r\n-You can request a new feature by submitting an issue to our [GitHub Issue Tracker][issue tracker].  If you\r\n-would like to implement a new feature then first create a new issue and discuss it with one of our\r\n-project maintainers.\r\n-#####Note: As of version 2.0.3, pull requests will only be accepted for MarkLogic 9. Only critical bug fixes will be accepted for MarkLogic 8 on the legacy 2.0.2 or earlier branches.\r\n-\r\n-\r\n-## Building MarkLogic Data Hub from Source\r\n-Looking to build the code from source? Look no further.\r\n-\r\n-\r\n-#### Prerequisites\r\n-You need:\r\n-\r\n-- MarkLogic Server (see [Version Compatibility](https://docs.marklogic.com/datahub/refs/version-compatibility.html) for the correct version)\r\n-- Java JDK 8 or later\r\n-- Gradle 4.6 or later\r\n-- A decent IDE. (Recommended: IntelliJ)\r\n-\r\n-\r\n-#### Building from the command line\r\n-**WARNING:** _The Data Hub build includes a large number of tests which take a total of approximately 30 minutes. You can skip the tests; however, you must run the tests before submitting changes._\r\n-\r\n-The build script builds ALL the Data Hub deliverables (marklogic-data-hub.jar, marklogic-datahub-<version>.war, and ml-data-hub-plugin for Gradle). To build, run:\r\n-\r\n-```bash\r\n-cd /path/to/data-hub-project/\r\n-./gradlew build -x test\r\n-```\r\n-\r\n-\r\n-#### Building and using the Data Hub Java library\r\n-\r\n-If you wish to make changes to or try out the latest code in the Data Hub Java library (marklogic-data-hub-(version).jar), follow \r\n-these instructions:\r\n-\r\n-1. Publish the library to your local Maven repository (defaults to ~/.m2/repository).\r\n-\r\n-  ```bash\r\n-  cd /path/to/marklogic-data-hub/\r\n-  ./gradlew publishToMavenLocal\r\n-  ```\r\n- \r\n-2. In the build.gradle file for the project that will use the library, add your local Maven repository as a repository if it's not alreaded included:\r\n-\r\n-  ```bash\r\n-  repositories {\r\n-    mavenLocal()\r\n-  }\r\n-  ```\r\n-\r\n-3. Assuming that you're using Gradle's java plugin, add the library as a dependency to your project:\r\n-\r\n-  ```bash\r\n-  dependencies {\r\n-    compile \"com.marklogic:marklogic-data-hub:(version)\"\r\n-  ```\r\n-\r\n-The version is defined in gradle.properties in the marklogic-data-hub root project directory. You can override this if \r\n-desired when publishing to your local Maven repository - e.g.\r\n-\r\n-    ./gradlew publishToMavenLocal -Pversion=myVersion\r\n-\r\n-\r\n-#### Building and using the Data Hub Gradle Plugin\r\n-\r\n-If you are testing a change to the ml-data-hub Gradle plugin or a cutting-edge development version, you might want to use a local copy of the Gradle plugin in your Data Hub project. \r\n-To use a local copy of the Gradle plugin in your Data Hub project, you must tell Gradle to use your local copy instead of the one in the cloud.\r\n-\r\n-1. Publish the plugin to your local Maven repository (defaults to ~/.m2/repository).\r\n-\r\n-  ```bash\r\n-  cd /path/to/marklogic-data-hub/\r\n-  ./gradlew publishToMavenLocal\r\n-  ```\r\n-\r\n-2. In your Data Hub project's `build.gradle` file, enter the local version:\r\n-\r\n-  ```groovy\r\n-\r\n-  // this goes at the top above the plugins section\r\n-\r\n-  buildscript {\r\n-    repositories {\r\n-      mavenLocal()\r\n-      jcenter()\r\n-    }\r\n-    dependencies {\r\n-      classpath \"com.marklogic:ml-data-hub:(the version number you chose)\"\r\n-    }\r\n-  }\r\n-\r\n-  plugins {\r\n-     ...\r\n-\r\n-     // comment out this line. It pulls the version from the cloud\r\n-     // id 'com.marklogic.ml-data-hub' version '4.0.0'\r\n-  }\r\n-\r\n-  // this tells gradle to apply the plugin you included above in the buildscript section\r\n-  apply plugin: \"com.marklogic.ml-data-hub\"\r\n-  ```\r\n-\r\n-3. To run the plugin's unit tests, navigate to the ml-data-hub-plugin directory, then do the following:\r\n-\r\n-  a. Run all unit tests\r\n-\r\n-    ../gradlew test\r\n-\r\n-\r\n-  b. Run one unit test\r\n-\r\n-    ../gradlew -Dtest.single=CreateEntityTask test\r\n-\r\n-\r\n-**Note**: This change goes in a Data Hub project's `build.gradle`. Not the Data Hub source code's build.gradle.\r\n-\r\n-\r\n-#### Running QuickStart from Source\r\n-\r\n-1. Install the prerequisites.\r\n-\r\n-2. Open two terminal windows.\r\n-\r\n-  **Terminal window 1** - This runs the webapp.\r\n-\r\n-      ```bash\r\n-      cd /path/to/data-hub-project\r\n-      ./gradlew bootrun\r\n-      ```\r\n-\r\n-  **NOTE:** The progress indicator stops around 90%. This is normal. In Gradle, 100% means it finished running. This stays running indefinitely and thus shows 90%.\r\n-\r\n-      ```\r\n-      > Building 90% > :web:bootRun\r\n-      ```\r\n-\r\n-  **Terminal window 2** - This runs QuickStart.\r\n-\r\n-      ```\r\n-      cd /path/to/data-hub-project\r\n-      ./gradlew runui\r\n-      ```\r\n-\r\n-In a web browser, navigate to [http://localhost:4200](http://localhost:4200) to use the debug version of QuickStart.\r\n-\r\n-\r\n-### Troubleshooting\r\n-\r\n-If the `gradle runui` command fails, try the following to troubleshoot.\r\n-\r\n-\r\n-#### Do you have Gradle 3.4 or newer?\r\n-\r\n-Using gradle directly:\r\n-  ```\r\n-  gradle -v\r\n-  ```\r\n-or if you are using the wrapper:\r\n-  ```\r\n-  ./gradlew -v\r\n-  ```\r\n-\r\n-If your gradle wrapper is older than `3.4`:\r\n-  ```\r\n-  gradle wrapper --gradle-version 3.4\r\n-  ```\r\n-\r\n-\r\n-#### Are you on the develop branch?\r\n-\r\n-_Hint: You should be._\r\n-\r\n-To check:\r\n-  ```bash\r\n-  git branch\r\n-  ```\r\n-\r\n-To switch to the develop branch:\r\n-  ```bash\r\n-  git checkout develop\r\n-  ```\r\n-\r\n-\r\n-#### Do you have the latest code?\r\n-\r\n-  Better make sure...\r\n-\r\n-\r\n-##### If you cloned from the github.com/marklogic/marklogic-data-hub repo:\r\n-\r\n-  ```bash\r\n-  git pull origin develop\r\n-  ```\r\n-\r\n-##### If you forked then cloned your fork:\r\n-\r\n-  1. Make sure you have the upstream files:\r\n-\r\n-      ```bash\r\n-      $ git remote add upstream git://github.com/marklogic/marklogic-data-hub.git\r\n-      ```\r\n-\r\n-  2. Fetch the upstream files:\r\n-\r\n-      ```bash\r\n-      git fetch upstream develop\r\n-      ```\r\n-\r\n-  3. Merge it:\r\n-\r\n-      ```bash\r\n-      git rebase upstream/develop\r\n-      ```\r\n-\r\n-#### Remove the `web/node_modules` directory.\r\n-\r\n-If you see several javascript errors, you might have a corrupted `node_modules` directory. Remove it then run again.\r\n-\r\n-  ```bash\r\n-  rm -rf web/node_modules\r\n-  ```\r\n-\r\n-\r\n-## Submission Guidelines\r\n-\r\n-\r\n-### Submitting an Issue\r\n-\r\n-Before you submit your issue, search the archive to check if your question has been answered.\r\n-\r\n-If your issue appears to be a bug and hasn't been reported, open a new issue.\r\n-\r\n-By not reporting duplicate issues, you help us maximize the time we spend fixing issues and adding new features.\r\n-\r\n-Please fill out the issue template so that your issue can be dealt with quickly.\r\n-\r\n-\r\n-### Submitting a Pull Request\r\n-\r\n-#### Fork marklogic-data-hub\r\n-\r\n-Fork the project [on GitHub](https://github.com/marklogic/marklogic-data-hub/fork) and clone your copy.\r\n-\r\n-  ```sh\r\n-  $ git clone git@github.com:username/marklogic-data-hub.git\r\n-  $ cd marklogic-data-hub\r\n-  $ git remote add upstream git://github.com/marklogic/marklogic-data-hub.git\r\n-  ```\r\n-\r\n-**Important:** Please open an issue in the [issue tracker][] and get your proposed changes pre-approved by at least one of the project maintainers before you start coding. Nothing is more frustrating than seeing your hard work go to waste because your vision does not align with that of the project maintainers.\r\n-\r\n-\r\n-#### Create a branch for your changes\r\n-\r\n-If you decide to fix something, create a feature branch and start hacking.\r\n-\r\n-**Note:** We use `git flow` and our most recent changes live on the `develop` branch.\r\n-\r\n-  ```sh\r\n-  $ git checkout -b my-feature-branch -t origin/develop\r\n-  ```\r\n-\r\n-\r\n-#### Formatting code\r\n-\r\n-We use `[.editorconfig][]` to configure our editors for proper code formatting. If you don't\r\n-use a tool that supports editorconfig, be sure to configure your editor to use the settings\r\n-equivalent to our .editorconfig file.\r\n-\r\n-\r\n-#### Commit your changes\r\n-\r\n-Make sure git knows your name and email address:\r\n-\r\n-  ```sh\r\n-  $ git config --global user.name \"J. Random User\"\r\n-  $ git config --global user.email \"j.random.user@example.com\"\r\n-  ```\r\n-\r\n-Writing good commit logs is important. A commit log should describe what\r\n-changed and why. Follow these guidelines when writing one:\r\n-\r\n-1. The first line should be 50 characters or less and contain a short\r\n-   description of the change including the issue number prefixed by a hash (#).\r\n-2. Keep the second line blank.\r\n-3. Wrap all other lines at 72 columns.\r\n-\r\n-Example of a good commit log:\r\n-\r\n-```\r\n-Fixing Issue #123: make the whatchamajigger work in MarkLogic 9\r\n-\r\n-Body of commit message is a few lines of text, explaining things\r\n-in more detail, possibly giving some background about the issue\r\n-being fixed, etc.\r\n-\r\n-The body of the commit message can be several paragraphs, and\r\n-please do proper word-wrap and keep columns shorter than about\r\n-72 characters or so. That way `git log` will show things\r\n-nicely even when it is indented.\r\n-```\r\n-\r\n-The header line should be meaningful; it is what other people see when they\r\n-run `git shortlog` or `git log --oneline`.\r\n-\r\n-\r\n-#### Rebase your repo\r\n-\r\n-Use `git rebase` (not `git merge`) to sync your work from time to time.\r\n-\r\n-  ```sh\r\n-  $ git fetch upstream\r\n-  $ git rebase upstream/develop\r\n-  ```\r\n-\r\n-\r\n-#### Test your code\r\n-\r\n-- Run the JUnit tests.\r\n-\r\n-  ```sh\r\n-  $ ./gradlew test\r\n-  ```\r\n-\r\n-- To run a single test:\r\n-\r\n-  ```sh\r\n-  $ ./gradlew -Dtest.single=TestName test\r\n-  ```\r\n-\r\n-- For best results, do not include the final word test. For example, suppose you want to run FlowRunnerTest:\r\n-\r\n-  ```sh\r\n-  $ ./gradlew -Dtest.single=FlowRunner test\r\n-  ```\r\n-\r\n-- To run the QuickStart end-to-end tests, you need Node.js 8.9.1 or later and run:\r\n-  ```jshelllanguage\r\n-  gradlew bootrun\r\n-  cd web\r\n-  npm install\r\n-  npm install -g protractor\r\n-  npm run webdriver-update\r\n-  npm run e2e\r\n-  ```\r\n-*Note: For end-to-end (e2e) tests, Data Hub must be running and so must a MarkLogic instance with available appservers for the ports 8010-8014.*\r\n-\r\n-You can run the e2e tests from Intellij or another IDE to perform fullstack debugging. To do so, add a run/debug\r\n-task that runs the script \"e2e\". Make sure to add a 'before launch' task as folows: `npm run \"webdriver-update\"`.\r\n-\r\n-**IMPORTANT: All submitted patches must pass ALL tests.**\r\n-\r\n-\r\n-#### Push your changes\r\n-\r\n-  ```sh\r\n-  $ git push origin my-feature-branch\r\n-  ```\r\n-\r\n-\r\n-#### Agree to the contributor License\r\n-\r\n-Before we can accept and merge your changes, you must sign a [Contributor License Agreement](http://developer.marklogic.com/products/cla). You only need to do this once.\r\n-\r\n-\r\n-#### Submit the pull request\r\n-\r\n-Go to https://github.com/username/marklogic-data-hub and select your feature branch. Click\r\n-the 'Pull Request' button and fill out the form.\r\n-\r\n-Pull requests are usually reviewed within a few days. If you get comments\r\n-that need to be to addressed, apply your changes in a separate commit and push that to your\r\n-feature branch. Post a comment in the pull request afterwards; GitHub does\r\n-not send out notifications when you add commits to existing pull requests.\r\n-\r\n-That's it! Thank you for your contribution!\r\n-\r\n-\r\n-#### After your pull request is merged\r\n-\r\n-After your pull request is merged, you can safely delete your branch and pull the changes\r\n-from the main (upstream) repository:\r\n-\r\n-* Delete the remote branch on GitHub either through the GitHub web UI or your local shell as follows:\r\n-\r\n-    ```shell\r\n-    git push origin --delete my-feature-branch\r\n-    ```\r\n-\r\n-* Check out the develop branch:\r\n-\r\n-    ```shell\r\n-    git checkout develop -f\r\n-    ```\r\n-\r\n-* Delete the local branch:\r\n-\r\n-    ```shell\r\n-    git branch -D my-feature-branch\r\n-    ```\r\n-\r\n-* Update your develop with the latest upstream version:\r\n-\r\n-    ```shell\r\n-    git pull --ff upstream develop\r\n-    ```\r\n-\r\n-[issue tracker]: https://github.com/marklogic/marklogic-data-hub/issues\r\n-[.editorconfig]: http://editorconfig.org/\r\n+# Contributing to MarkLogic Data Hub\n+\n+MarkLogic Data Hub welcomes new contributors. This document will guide you\n+through the process.\n+\n+ - [Issues and Bugs](#found-an-issue)\n+ - [Feature Requests](#want-a-feature)\n+ - [Developing Data Hub](#developing-data-hub)\n+ - [Submission Guidelines](#submission-guidelines)\n+\n+\n+## Found an Issue?\n+If you find a bug in the source code or a mistake in the documentation, you can help us by submitting an issue to our [GitHub Issue Tracker][issue tracker]. Even better, you can submit a Pull Request with a fix for the issue you filed.\n+\n+\n+## Want a Feature?\n+You can request a new feature by submitting an issue to our [GitHub Issue Tracker][issue tracker].  If you\n+would like to implement a new feature then first create a new issue and discuss it with one of our\n+project maintainers.\n+\n+\n+## Developing Data Hub \n+\n+This section describes how to build and test new features and fixes in Data Hub. This includes changes to the following subprojects in this project:\n+\n+- the Data Hub library in ./marklogic-data-hub\n+- the Data Hub Gradle plugin in ./ml-data-hub-plugin\n+- the One-UI web application in ./one-ui\n+- the QuickStart web application in ./web\n+\n+### Prerequisites\n+\n+You need:\n+\n+- MarkLogic Server (see [Version Compatibility](https://docs.marklogic.com/datahub/refs/version-compatibility.html) for the correct version)\n+- Java JDK 8 or later", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIwNDg5Ng=="}, "originalCommit": {"oid": "4129b1dc9bdd501bc40c3644372804ede574b4c7"}, "originalPosition": 461}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM1NjU4MQ==", "bodyText": "@rjrudin Can we build the project using java9? currently we are building using 11.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3724#discussion_r395356581", "createdAt": "2020-03-19T22:33:19Z", "author": {"login": "SameeraPriyathamTadikonda"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,425 +1,365 @@\n-# Contributing to MarkLogic Data Hub\r\n-\r\n-MarkLogic Data Hub welcomes new contributors. This document will guide you\r\n-through the process.\r\n-\r\n- - [Issues and Bugs](#found-an-issue)\r\n- - [Feature Requests](#want-a-feature)\r\n- - [Building from Source](#building-marklogic-data-hub-from-source)\r\n- - [Submission Guidelines](#submission-guidelines)\r\n-\r\n-\r\n-## Found an Issue?\r\n-If you find a bug in the source code or a mistake in the documentation, you can help us by submitting an issue to our [GitHub Issue Tracker][issue tracker]. Even better, you can submit a Pull Request with a fix for the issue you filed.\r\n-\r\n-\r\n-## Want a Feature?\r\n-You can request a new feature by submitting an issue to our [GitHub Issue Tracker][issue tracker].  If you\r\n-would like to implement a new feature then first create a new issue and discuss it with one of our\r\n-project maintainers.\r\n-#####Note: As of version 2.0.3, pull requests will only be accepted for MarkLogic 9. Only critical bug fixes will be accepted for MarkLogic 8 on the legacy 2.0.2 or earlier branches.\r\n-\r\n-\r\n-## Building MarkLogic Data Hub from Source\r\n-Looking to build the code from source? Look no further.\r\n-\r\n-\r\n-#### Prerequisites\r\n-You need:\r\n-\r\n-- MarkLogic Server (see [Version Compatibility](https://docs.marklogic.com/datahub/refs/version-compatibility.html) for the correct version)\r\n-- Java JDK 8 or later\r\n-- Gradle 4.6 or later\r\n-- A decent IDE. (Recommended: IntelliJ)\r\n-\r\n-\r\n-#### Building from the command line\r\n-**WARNING:** _The Data Hub build includes a large number of tests which take a total of approximately 30 minutes. You can skip the tests; however, you must run the tests before submitting changes._\r\n-\r\n-The build script builds ALL the Data Hub deliverables (marklogic-data-hub.jar, marklogic-datahub-<version>.war, and ml-data-hub-plugin for Gradle). To build, run:\r\n-\r\n-```bash\r\n-cd /path/to/data-hub-project/\r\n-./gradlew build -x test\r\n-```\r\n-\r\n-\r\n-#### Building and using the Data Hub Java library\r\n-\r\n-If you wish to make changes to or try out the latest code in the Data Hub Java library (marklogic-data-hub-(version).jar), follow \r\n-these instructions:\r\n-\r\n-1. Publish the library to your local Maven repository (defaults to ~/.m2/repository).\r\n-\r\n-  ```bash\r\n-  cd /path/to/marklogic-data-hub/\r\n-  ./gradlew publishToMavenLocal\r\n-  ```\r\n- \r\n-2. In the build.gradle file for the project that will use the library, add your local Maven repository as a repository if it's not alreaded included:\r\n-\r\n-  ```bash\r\n-  repositories {\r\n-    mavenLocal()\r\n-  }\r\n-  ```\r\n-\r\n-3. Assuming that you're using Gradle's java plugin, add the library as a dependency to your project:\r\n-\r\n-  ```bash\r\n-  dependencies {\r\n-    compile \"com.marklogic:marklogic-data-hub:(version)\"\r\n-  ```\r\n-\r\n-The version is defined in gradle.properties in the marklogic-data-hub root project directory. You can override this if \r\n-desired when publishing to your local Maven repository - e.g.\r\n-\r\n-    ./gradlew publishToMavenLocal -Pversion=myVersion\r\n-\r\n-\r\n-#### Building and using the Data Hub Gradle Plugin\r\n-\r\n-If you are testing a change to the ml-data-hub Gradle plugin or a cutting-edge development version, you might want to use a local copy of the Gradle plugin in your Data Hub project. \r\n-To use a local copy of the Gradle plugin in your Data Hub project, you must tell Gradle to use your local copy instead of the one in the cloud.\r\n-\r\n-1. Publish the plugin to your local Maven repository (defaults to ~/.m2/repository).\r\n-\r\n-  ```bash\r\n-  cd /path/to/marklogic-data-hub/\r\n-  ./gradlew publishToMavenLocal\r\n-  ```\r\n-\r\n-2. In your Data Hub project's `build.gradle` file, enter the local version:\r\n-\r\n-  ```groovy\r\n-\r\n-  // this goes at the top above the plugins section\r\n-\r\n-  buildscript {\r\n-    repositories {\r\n-      mavenLocal()\r\n-      jcenter()\r\n-    }\r\n-    dependencies {\r\n-      classpath \"com.marklogic:ml-data-hub:(the version number you chose)\"\r\n-    }\r\n-  }\r\n-\r\n-  plugins {\r\n-     ...\r\n-\r\n-     // comment out this line. It pulls the version from the cloud\r\n-     // id 'com.marklogic.ml-data-hub' version '4.0.0'\r\n-  }\r\n-\r\n-  // this tells gradle to apply the plugin you included above in the buildscript section\r\n-  apply plugin: \"com.marklogic.ml-data-hub\"\r\n-  ```\r\n-\r\n-3. To run the plugin's unit tests, navigate to the ml-data-hub-plugin directory, then do the following:\r\n-\r\n-  a. Run all unit tests\r\n-\r\n-    ../gradlew test\r\n-\r\n-\r\n-  b. Run one unit test\r\n-\r\n-    ../gradlew -Dtest.single=CreateEntityTask test\r\n-\r\n-\r\n-**Note**: This change goes in a Data Hub project's `build.gradle`. Not the Data Hub source code's build.gradle.\r\n-\r\n-\r\n-#### Running QuickStart from Source\r\n-\r\n-1. Install the prerequisites.\r\n-\r\n-2. Open two terminal windows.\r\n-\r\n-  **Terminal window 1** - This runs the webapp.\r\n-\r\n-      ```bash\r\n-      cd /path/to/data-hub-project\r\n-      ./gradlew bootrun\r\n-      ```\r\n-\r\n-  **NOTE:** The progress indicator stops around 90%. This is normal. In Gradle, 100% means it finished running. This stays running indefinitely and thus shows 90%.\r\n-\r\n-      ```\r\n-      > Building 90% > :web:bootRun\r\n-      ```\r\n-\r\n-  **Terminal window 2** - This runs QuickStart.\r\n-\r\n-      ```\r\n-      cd /path/to/data-hub-project\r\n-      ./gradlew runui\r\n-      ```\r\n-\r\n-In a web browser, navigate to [http://localhost:4200](http://localhost:4200) to use the debug version of QuickStart.\r\n-\r\n-\r\n-### Troubleshooting\r\n-\r\n-If the `gradle runui` command fails, try the following to troubleshoot.\r\n-\r\n-\r\n-#### Do you have Gradle 3.4 or newer?\r\n-\r\n-Using gradle directly:\r\n-  ```\r\n-  gradle -v\r\n-  ```\r\n-or if you are using the wrapper:\r\n-  ```\r\n-  ./gradlew -v\r\n-  ```\r\n-\r\n-If your gradle wrapper is older than `3.4`:\r\n-  ```\r\n-  gradle wrapper --gradle-version 3.4\r\n-  ```\r\n-\r\n-\r\n-#### Are you on the develop branch?\r\n-\r\n-_Hint: You should be._\r\n-\r\n-To check:\r\n-  ```bash\r\n-  git branch\r\n-  ```\r\n-\r\n-To switch to the develop branch:\r\n-  ```bash\r\n-  git checkout develop\r\n-  ```\r\n-\r\n-\r\n-#### Do you have the latest code?\r\n-\r\n-  Better make sure...\r\n-\r\n-\r\n-##### If you cloned from the github.com/marklogic/marklogic-data-hub repo:\r\n-\r\n-  ```bash\r\n-  git pull origin develop\r\n-  ```\r\n-\r\n-##### If you forked then cloned your fork:\r\n-\r\n-  1. Make sure you have the upstream files:\r\n-\r\n-      ```bash\r\n-      $ git remote add upstream git://github.com/marklogic/marklogic-data-hub.git\r\n-      ```\r\n-\r\n-  2. Fetch the upstream files:\r\n-\r\n-      ```bash\r\n-      git fetch upstream develop\r\n-      ```\r\n-\r\n-  3. Merge it:\r\n-\r\n-      ```bash\r\n-      git rebase upstream/develop\r\n-      ```\r\n-\r\n-#### Remove the `web/node_modules` directory.\r\n-\r\n-If you see several javascript errors, you might have a corrupted `node_modules` directory. Remove it then run again.\r\n-\r\n-  ```bash\r\n-  rm -rf web/node_modules\r\n-  ```\r\n-\r\n-\r\n-## Submission Guidelines\r\n-\r\n-\r\n-### Submitting an Issue\r\n-\r\n-Before you submit your issue, search the archive to check if your question has been answered.\r\n-\r\n-If your issue appears to be a bug and hasn't been reported, open a new issue.\r\n-\r\n-By not reporting duplicate issues, you help us maximize the time we spend fixing issues and adding new features.\r\n-\r\n-Please fill out the issue template so that your issue can be dealt with quickly.\r\n-\r\n-\r\n-### Submitting a Pull Request\r\n-\r\n-#### Fork marklogic-data-hub\r\n-\r\n-Fork the project [on GitHub](https://github.com/marklogic/marklogic-data-hub/fork) and clone your copy.\r\n-\r\n-  ```sh\r\n-  $ git clone git@github.com:username/marklogic-data-hub.git\r\n-  $ cd marklogic-data-hub\r\n-  $ git remote add upstream git://github.com/marklogic/marklogic-data-hub.git\r\n-  ```\r\n-\r\n-**Important:** Please open an issue in the [issue tracker][] and get your proposed changes pre-approved by at least one of the project maintainers before you start coding. Nothing is more frustrating than seeing your hard work go to waste because your vision does not align with that of the project maintainers.\r\n-\r\n-\r\n-#### Create a branch for your changes\r\n-\r\n-If you decide to fix something, create a feature branch and start hacking.\r\n-\r\n-**Note:** We use `git flow` and our most recent changes live on the `develop` branch.\r\n-\r\n-  ```sh\r\n-  $ git checkout -b my-feature-branch -t origin/develop\r\n-  ```\r\n-\r\n-\r\n-#### Formatting code\r\n-\r\n-We use `[.editorconfig][]` to configure our editors for proper code formatting. If you don't\r\n-use a tool that supports editorconfig, be sure to configure your editor to use the settings\r\n-equivalent to our .editorconfig file.\r\n-\r\n-\r\n-#### Commit your changes\r\n-\r\n-Make sure git knows your name and email address:\r\n-\r\n-  ```sh\r\n-  $ git config --global user.name \"J. Random User\"\r\n-  $ git config --global user.email \"j.random.user@example.com\"\r\n-  ```\r\n-\r\n-Writing good commit logs is important. A commit log should describe what\r\n-changed and why. Follow these guidelines when writing one:\r\n-\r\n-1. The first line should be 50 characters or less and contain a short\r\n-   description of the change including the issue number prefixed by a hash (#).\r\n-2. Keep the second line blank.\r\n-3. Wrap all other lines at 72 columns.\r\n-\r\n-Example of a good commit log:\r\n-\r\n-```\r\n-Fixing Issue #123: make the whatchamajigger work in MarkLogic 9\r\n-\r\n-Body of commit message is a few lines of text, explaining things\r\n-in more detail, possibly giving some background about the issue\r\n-being fixed, etc.\r\n-\r\n-The body of the commit message can be several paragraphs, and\r\n-please do proper word-wrap and keep columns shorter than about\r\n-72 characters or so. That way `git log` will show things\r\n-nicely even when it is indented.\r\n-```\r\n-\r\n-The header line should be meaningful; it is what other people see when they\r\n-run `git shortlog` or `git log --oneline`.\r\n-\r\n-\r\n-#### Rebase your repo\r\n-\r\n-Use `git rebase` (not `git merge`) to sync your work from time to time.\r\n-\r\n-  ```sh\r\n-  $ git fetch upstream\r\n-  $ git rebase upstream/develop\r\n-  ```\r\n-\r\n-\r\n-#### Test your code\r\n-\r\n-- Run the JUnit tests.\r\n-\r\n-  ```sh\r\n-  $ ./gradlew test\r\n-  ```\r\n-\r\n-- To run a single test:\r\n-\r\n-  ```sh\r\n-  $ ./gradlew -Dtest.single=TestName test\r\n-  ```\r\n-\r\n-- For best results, do not include the final word test. For example, suppose you want to run FlowRunnerTest:\r\n-\r\n-  ```sh\r\n-  $ ./gradlew -Dtest.single=FlowRunner test\r\n-  ```\r\n-\r\n-- To run the QuickStart end-to-end tests, you need Node.js 8.9.1 or later and run:\r\n-  ```jshelllanguage\r\n-  gradlew bootrun\r\n-  cd web\r\n-  npm install\r\n-  npm install -g protractor\r\n-  npm run webdriver-update\r\n-  npm run e2e\r\n-  ```\r\n-*Note: For end-to-end (e2e) tests, Data Hub must be running and so must a MarkLogic instance with available appservers for the ports 8010-8014.*\r\n-\r\n-You can run the e2e tests from Intellij or another IDE to perform fullstack debugging. To do so, add a run/debug\r\n-task that runs the script \"e2e\". Make sure to add a 'before launch' task as folows: `npm run \"webdriver-update\"`.\r\n-\r\n-**IMPORTANT: All submitted patches must pass ALL tests.**\r\n-\r\n-\r\n-#### Push your changes\r\n-\r\n-  ```sh\r\n-  $ git push origin my-feature-branch\r\n-  ```\r\n-\r\n-\r\n-#### Agree to the contributor License\r\n-\r\n-Before we can accept and merge your changes, you must sign a [Contributor License Agreement](http://developer.marklogic.com/products/cla). You only need to do this once.\r\n-\r\n-\r\n-#### Submit the pull request\r\n-\r\n-Go to https://github.com/username/marklogic-data-hub and select your feature branch. Click\r\n-the 'Pull Request' button and fill out the form.\r\n-\r\n-Pull requests are usually reviewed within a few days. If you get comments\r\n-that need to be to addressed, apply your changes in a separate commit and push that to your\r\n-feature branch. Post a comment in the pull request afterwards; GitHub does\r\n-not send out notifications when you add commits to existing pull requests.\r\n-\r\n-That's it! Thank you for your contribution!\r\n-\r\n-\r\n-#### After your pull request is merged\r\n-\r\n-After your pull request is merged, you can safely delete your branch and pull the changes\r\n-from the main (upstream) repository:\r\n-\r\n-* Delete the remote branch on GitHub either through the GitHub web UI or your local shell as follows:\r\n-\r\n-    ```shell\r\n-    git push origin --delete my-feature-branch\r\n-    ```\r\n-\r\n-* Check out the develop branch:\r\n-\r\n-    ```shell\r\n-    git checkout develop -f\r\n-    ```\r\n-\r\n-* Delete the local branch:\r\n-\r\n-    ```shell\r\n-    git branch -D my-feature-branch\r\n-    ```\r\n-\r\n-* Update your develop with the latest upstream version:\r\n-\r\n-    ```shell\r\n-    git pull --ff upstream develop\r\n-    ```\r\n-\r\n-[issue tracker]: https://github.com/marklogic/marklogic-data-hub/issues\r\n-[.editorconfig]: http://editorconfig.org/\r\n+# Contributing to MarkLogic Data Hub\n+\n+MarkLogic Data Hub welcomes new contributors. This document will guide you\n+through the process.\n+\n+ - [Issues and Bugs](#found-an-issue)\n+ - [Feature Requests](#want-a-feature)\n+ - [Developing Data Hub](#developing-data-hub)\n+ - [Submission Guidelines](#submission-guidelines)\n+\n+\n+## Found an Issue?\n+If you find a bug in the source code or a mistake in the documentation, you can help us by submitting an issue to our [GitHub Issue Tracker][issue tracker]. Even better, you can submit a Pull Request with a fix for the issue you filed.\n+\n+\n+## Want a Feature?\n+You can request a new feature by submitting an issue to our [GitHub Issue Tracker][issue tracker].  If you\n+would like to implement a new feature then first create a new issue and discuss it with one of our\n+project maintainers.\n+\n+\n+## Developing Data Hub \n+\n+This section describes how to build and test new features and fixes in Data Hub. This includes changes to the following subprojects in this project:\n+\n+- the Data Hub library in ./marklogic-data-hub\n+- the Data Hub Gradle plugin in ./ml-data-hub-plugin\n+- the One-UI web application in ./one-ui\n+- the QuickStart web application in ./web\n+\n+### Prerequisites\n+\n+You need:\n+\n+- MarkLogic Server (see [Version Compatibility](https://docs.marklogic.com/datahub/refs/version-compatibility.html) for the correct version)\n+- Java JDK 8 or later", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIwNDg5Ng=="}, "originalCommit": {"oid": "4129b1dc9bdd501bc40c3644372804ede574b4c7"}, "originalPosition": 461}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM1NzQxMQ==", "bodyText": "We can - our build.gradle files have source and target compatibilities of Java 9.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3724#discussion_r395357411", "createdAt": "2020-03-19T22:35:51Z", "author": {"login": "rjrudin"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,425 +1,365 @@\n-# Contributing to MarkLogic Data Hub\r\n-\r\n-MarkLogic Data Hub welcomes new contributors. This document will guide you\r\n-through the process.\r\n-\r\n- - [Issues and Bugs](#found-an-issue)\r\n- - [Feature Requests](#want-a-feature)\r\n- - [Building from Source](#building-marklogic-data-hub-from-source)\r\n- - [Submission Guidelines](#submission-guidelines)\r\n-\r\n-\r\n-## Found an Issue?\r\n-If you find a bug in the source code or a mistake in the documentation, you can help us by submitting an issue to our [GitHub Issue Tracker][issue tracker]. Even better, you can submit a Pull Request with a fix for the issue you filed.\r\n-\r\n-\r\n-## Want a Feature?\r\n-You can request a new feature by submitting an issue to our [GitHub Issue Tracker][issue tracker].  If you\r\n-would like to implement a new feature then first create a new issue and discuss it with one of our\r\n-project maintainers.\r\n-#####Note: As of version 2.0.3, pull requests will only be accepted for MarkLogic 9. Only critical bug fixes will be accepted for MarkLogic 8 on the legacy 2.0.2 or earlier branches.\r\n-\r\n-\r\n-## Building MarkLogic Data Hub from Source\r\n-Looking to build the code from source? Look no further.\r\n-\r\n-\r\n-#### Prerequisites\r\n-You need:\r\n-\r\n-- MarkLogic Server (see [Version Compatibility](https://docs.marklogic.com/datahub/refs/version-compatibility.html) for the correct version)\r\n-- Java JDK 8 or later\r\n-- Gradle 4.6 or later\r\n-- A decent IDE. (Recommended: IntelliJ)\r\n-\r\n-\r\n-#### Building from the command line\r\n-**WARNING:** _The Data Hub build includes a large number of tests which take a total of approximately 30 minutes. You can skip the tests; however, you must run the tests before submitting changes._\r\n-\r\n-The build script builds ALL the Data Hub deliverables (marklogic-data-hub.jar, marklogic-datahub-<version>.war, and ml-data-hub-plugin for Gradle). To build, run:\r\n-\r\n-```bash\r\n-cd /path/to/data-hub-project/\r\n-./gradlew build -x test\r\n-```\r\n-\r\n-\r\n-#### Building and using the Data Hub Java library\r\n-\r\n-If you wish to make changes to or try out the latest code in the Data Hub Java library (marklogic-data-hub-(version).jar), follow \r\n-these instructions:\r\n-\r\n-1. Publish the library to your local Maven repository (defaults to ~/.m2/repository).\r\n-\r\n-  ```bash\r\n-  cd /path/to/marklogic-data-hub/\r\n-  ./gradlew publishToMavenLocal\r\n-  ```\r\n- \r\n-2. In the build.gradle file for the project that will use the library, add your local Maven repository as a repository if it's not alreaded included:\r\n-\r\n-  ```bash\r\n-  repositories {\r\n-    mavenLocal()\r\n-  }\r\n-  ```\r\n-\r\n-3. Assuming that you're using Gradle's java plugin, add the library as a dependency to your project:\r\n-\r\n-  ```bash\r\n-  dependencies {\r\n-    compile \"com.marklogic:marklogic-data-hub:(version)\"\r\n-  ```\r\n-\r\n-The version is defined in gradle.properties in the marklogic-data-hub root project directory. You can override this if \r\n-desired when publishing to your local Maven repository - e.g.\r\n-\r\n-    ./gradlew publishToMavenLocal -Pversion=myVersion\r\n-\r\n-\r\n-#### Building and using the Data Hub Gradle Plugin\r\n-\r\n-If you are testing a change to the ml-data-hub Gradle plugin or a cutting-edge development version, you might want to use a local copy of the Gradle plugin in your Data Hub project. \r\n-To use a local copy of the Gradle plugin in your Data Hub project, you must tell Gradle to use your local copy instead of the one in the cloud.\r\n-\r\n-1. Publish the plugin to your local Maven repository (defaults to ~/.m2/repository).\r\n-\r\n-  ```bash\r\n-  cd /path/to/marklogic-data-hub/\r\n-  ./gradlew publishToMavenLocal\r\n-  ```\r\n-\r\n-2. In your Data Hub project's `build.gradle` file, enter the local version:\r\n-\r\n-  ```groovy\r\n-\r\n-  // this goes at the top above the plugins section\r\n-\r\n-  buildscript {\r\n-    repositories {\r\n-      mavenLocal()\r\n-      jcenter()\r\n-    }\r\n-    dependencies {\r\n-      classpath \"com.marklogic:ml-data-hub:(the version number you chose)\"\r\n-    }\r\n-  }\r\n-\r\n-  plugins {\r\n-     ...\r\n-\r\n-     // comment out this line. It pulls the version from the cloud\r\n-     // id 'com.marklogic.ml-data-hub' version '4.0.0'\r\n-  }\r\n-\r\n-  // this tells gradle to apply the plugin you included above in the buildscript section\r\n-  apply plugin: \"com.marklogic.ml-data-hub\"\r\n-  ```\r\n-\r\n-3. To run the plugin's unit tests, navigate to the ml-data-hub-plugin directory, then do the following:\r\n-\r\n-  a. Run all unit tests\r\n-\r\n-    ../gradlew test\r\n-\r\n-\r\n-  b. Run one unit test\r\n-\r\n-    ../gradlew -Dtest.single=CreateEntityTask test\r\n-\r\n-\r\n-**Note**: This change goes in a Data Hub project's `build.gradle`. Not the Data Hub source code's build.gradle.\r\n-\r\n-\r\n-#### Running QuickStart from Source\r\n-\r\n-1. Install the prerequisites.\r\n-\r\n-2. Open two terminal windows.\r\n-\r\n-  **Terminal window 1** - This runs the webapp.\r\n-\r\n-      ```bash\r\n-      cd /path/to/data-hub-project\r\n-      ./gradlew bootrun\r\n-      ```\r\n-\r\n-  **NOTE:** The progress indicator stops around 90%. This is normal. In Gradle, 100% means it finished running. This stays running indefinitely and thus shows 90%.\r\n-\r\n-      ```\r\n-      > Building 90% > :web:bootRun\r\n-      ```\r\n-\r\n-  **Terminal window 2** - This runs QuickStart.\r\n-\r\n-      ```\r\n-      cd /path/to/data-hub-project\r\n-      ./gradlew runui\r\n-      ```\r\n-\r\n-In a web browser, navigate to [http://localhost:4200](http://localhost:4200) to use the debug version of QuickStart.\r\n-\r\n-\r\n-### Troubleshooting\r\n-\r\n-If the `gradle runui` command fails, try the following to troubleshoot.\r\n-\r\n-\r\n-#### Do you have Gradle 3.4 or newer?\r\n-\r\n-Using gradle directly:\r\n-  ```\r\n-  gradle -v\r\n-  ```\r\n-or if you are using the wrapper:\r\n-  ```\r\n-  ./gradlew -v\r\n-  ```\r\n-\r\n-If your gradle wrapper is older than `3.4`:\r\n-  ```\r\n-  gradle wrapper --gradle-version 3.4\r\n-  ```\r\n-\r\n-\r\n-#### Are you on the develop branch?\r\n-\r\n-_Hint: You should be._\r\n-\r\n-To check:\r\n-  ```bash\r\n-  git branch\r\n-  ```\r\n-\r\n-To switch to the develop branch:\r\n-  ```bash\r\n-  git checkout develop\r\n-  ```\r\n-\r\n-\r\n-#### Do you have the latest code?\r\n-\r\n-  Better make sure...\r\n-\r\n-\r\n-##### If you cloned from the github.com/marklogic/marklogic-data-hub repo:\r\n-\r\n-  ```bash\r\n-  git pull origin develop\r\n-  ```\r\n-\r\n-##### If you forked then cloned your fork:\r\n-\r\n-  1. Make sure you have the upstream files:\r\n-\r\n-      ```bash\r\n-      $ git remote add upstream git://github.com/marklogic/marklogic-data-hub.git\r\n-      ```\r\n-\r\n-  2. Fetch the upstream files:\r\n-\r\n-      ```bash\r\n-      git fetch upstream develop\r\n-      ```\r\n-\r\n-  3. Merge it:\r\n-\r\n-      ```bash\r\n-      git rebase upstream/develop\r\n-      ```\r\n-\r\n-#### Remove the `web/node_modules` directory.\r\n-\r\n-If you see several javascript errors, you might have a corrupted `node_modules` directory. Remove it then run again.\r\n-\r\n-  ```bash\r\n-  rm -rf web/node_modules\r\n-  ```\r\n-\r\n-\r\n-## Submission Guidelines\r\n-\r\n-\r\n-### Submitting an Issue\r\n-\r\n-Before you submit your issue, search the archive to check if your question has been answered.\r\n-\r\n-If your issue appears to be a bug and hasn't been reported, open a new issue.\r\n-\r\n-By not reporting duplicate issues, you help us maximize the time we spend fixing issues and adding new features.\r\n-\r\n-Please fill out the issue template so that your issue can be dealt with quickly.\r\n-\r\n-\r\n-### Submitting a Pull Request\r\n-\r\n-#### Fork marklogic-data-hub\r\n-\r\n-Fork the project [on GitHub](https://github.com/marklogic/marklogic-data-hub/fork) and clone your copy.\r\n-\r\n-  ```sh\r\n-  $ git clone git@github.com:username/marklogic-data-hub.git\r\n-  $ cd marklogic-data-hub\r\n-  $ git remote add upstream git://github.com/marklogic/marklogic-data-hub.git\r\n-  ```\r\n-\r\n-**Important:** Please open an issue in the [issue tracker][] and get your proposed changes pre-approved by at least one of the project maintainers before you start coding. Nothing is more frustrating than seeing your hard work go to waste because your vision does not align with that of the project maintainers.\r\n-\r\n-\r\n-#### Create a branch for your changes\r\n-\r\n-If you decide to fix something, create a feature branch and start hacking.\r\n-\r\n-**Note:** We use `git flow` and our most recent changes live on the `develop` branch.\r\n-\r\n-  ```sh\r\n-  $ git checkout -b my-feature-branch -t origin/develop\r\n-  ```\r\n-\r\n-\r\n-#### Formatting code\r\n-\r\n-We use `[.editorconfig][]` to configure our editors for proper code formatting. If you don't\r\n-use a tool that supports editorconfig, be sure to configure your editor to use the settings\r\n-equivalent to our .editorconfig file.\r\n-\r\n-\r\n-#### Commit your changes\r\n-\r\n-Make sure git knows your name and email address:\r\n-\r\n-  ```sh\r\n-  $ git config --global user.name \"J. Random User\"\r\n-  $ git config --global user.email \"j.random.user@example.com\"\r\n-  ```\r\n-\r\n-Writing good commit logs is important. A commit log should describe what\r\n-changed and why. Follow these guidelines when writing one:\r\n-\r\n-1. The first line should be 50 characters or less and contain a short\r\n-   description of the change including the issue number prefixed by a hash (#).\r\n-2. Keep the second line blank.\r\n-3. Wrap all other lines at 72 columns.\r\n-\r\n-Example of a good commit log:\r\n-\r\n-```\r\n-Fixing Issue #123: make the whatchamajigger work in MarkLogic 9\r\n-\r\n-Body of commit message is a few lines of text, explaining things\r\n-in more detail, possibly giving some background about the issue\r\n-being fixed, etc.\r\n-\r\n-The body of the commit message can be several paragraphs, and\r\n-please do proper word-wrap and keep columns shorter than about\r\n-72 characters or so. That way `git log` will show things\r\n-nicely even when it is indented.\r\n-```\r\n-\r\n-The header line should be meaningful; it is what other people see when they\r\n-run `git shortlog` or `git log --oneline`.\r\n-\r\n-\r\n-#### Rebase your repo\r\n-\r\n-Use `git rebase` (not `git merge`) to sync your work from time to time.\r\n-\r\n-  ```sh\r\n-  $ git fetch upstream\r\n-  $ git rebase upstream/develop\r\n-  ```\r\n-\r\n-\r\n-#### Test your code\r\n-\r\n-- Run the JUnit tests.\r\n-\r\n-  ```sh\r\n-  $ ./gradlew test\r\n-  ```\r\n-\r\n-- To run a single test:\r\n-\r\n-  ```sh\r\n-  $ ./gradlew -Dtest.single=TestName test\r\n-  ```\r\n-\r\n-- For best results, do not include the final word test. For example, suppose you want to run FlowRunnerTest:\r\n-\r\n-  ```sh\r\n-  $ ./gradlew -Dtest.single=FlowRunner test\r\n-  ```\r\n-\r\n-- To run the QuickStart end-to-end tests, you need Node.js 8.9.1 or later and run:\r\n-  ```jshelllanguage\r\n-  gradlew bootrun\r\n-  cd web\r\n-  npm install\r\n-  npm install -g protractor\r\n-  npm run webdriver-update\r\n-  npm run e2e\r\n-  ```\r\n-*Note: For end-to-end (e2e) tests, Data Hub must be running and so must a MarkLogic instance with available appservers for the ports 8010-8014.*\r\n-\r\n-You can run the e2e tests from Intellij or another IDE to perform fullstack debugging. To do so, add a run/debug\r\n-task that runs the script \"e2e\". Make sure to add a 'before launch' task as folows: `npm run \"webdriver-update\"`.\r\n-\r\n-**IMPORTANT: All submitted patches must pass ALL tests.**\r\n-\r\n-\r\n-#### Push your changes\r\n-\r\n-  ```sh\r\n-  $ git push origin my-feature-branch\r\n-  ```\r\n-\r\n-\r\n-#### Agree to the contributor License\r\n-\r\n-Before we can accept and merge your changes, you must sign a [Contributor License Agreement](http://developer.marklogic.com/products/cla). You only need to do this once.\r\n-\r\n-\r\n-#### Submit the pull request\r\n-\r\n-Go to https://github.com/username/marklogic-data-hub and select your feature branch. Click\r\n-the 'Pull Request' button and fill out the form.\r\n-\r\n-Pull requests are usually reviewed within a few days. If you get comments\r\n-that need to be to addressed, apply your changes in a separate commit and push that to your\r\n-feature branch. Post a comment in the pull request afterwards; GitHub does\r\n-not send out notifications when you add commits to existing pull requests.\r\n-\r\n-That's it! Thank you for your contribution!\r\n-\r\n-\r\n-#### After your pull request is merged\r\n-\r\n-After your pull request is merged, you can safely delete your branch and pull the changes\r\n-from the main (upstream) repository:\r\n-\r\n-* Delete the remote branch on GitHub either through the GitHub web UI or your local shell as follows:\r\n-\r\n-    ```shell\r\n-    git push origin --delete my-feature-branch\r\n-    ```\r\n-\r\n-* Check out the develop branch:\r\n-\r\n-    ```shell\r\n-    git checkout develop -f\r\n-    ```\r\n-\r\n-* Delete the local branch:\r\n-\r\n-    ```shell\r\n-    git branch -D my-feature-branch\r\n-    ```\r\n-\r\n-* Update your develop with the latest upstream version:\r\n-\r\n-    ```shell\r\n-    git pull --ff upstream develop\r\n-    ```\r\n-\r\n-[issue tracker]: https://github.com/marklogic/marklogic-data-hub/issues\r\n-[.editorconfig]: http://editorconfig.org/\r\n+# Contributing to MarkLogic Data Hub\n+\n+MarkLogic Data Hub welcomes new contributors. This document will guide you\n+through the process.\n+\n+ - [Issues and Bugs](#found-an-issue)\n+ - [Feature Requests](#want-a-feature)\n+ - [Developing Data Hub](#developing-data-hub)\n+ - [Submission Guidelines](#submission-guidelines)\n+\n+\n+## Found an Issue?\n+If you find a bug in the source code or a mistake in the documentation, you can help us by submitting an issue to our [GitHub Issue Tracker][issue tracker]. Even better, you can submit a Pull Request with a fix for the issue you filed.\n+\n+\n+## Want a Feature?\n+You can request a new feature by submitting an issue to our [GitHub Issue Tracker][issue tracker].  If you\n+would like to implement a new feature then first create a new issue and discuss it with one of our\n+project maintainers.\n+\n+\n+## Developing Data Hub \n+\n+This section describes how to build and test new features and fixes in Data Hub. This includes changes to the following subprojects in this project:\n+\n+- the Data Hub library in ./marklogic-data-hub\n+- the Data Hub Gradle plugin in ./ml-data-hub-plugin\n+- the One-UI web application in ./one-ui\n+- the QuickStart web application in ./web\n+\n+### Prerequisites\n+\n+You need:\n+\n+- MarkLogic Server (see [Version Compatibility](https://docs.marklogic.com/datahub/refs/version-compatibility.html) for the correct version)\n+- Java JDK 8 or later", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIwNDg5Ng=="}, "originalCommit": {"oid": "4129b1dc9bdd501bc40c3644372804ede574b4c7"}, "originalPosition": 461}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM1NzQ4MA==", "bodyText": "In practice though, people are likely using Java 11.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3724#discussion_r395357480", "createdAt": "2020-03-19T22:36:02Z", "author": {"login": "rjrudin"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,425 +1,365 @@\n-# Contributing to MarkLogic Data Hub\r\n-\r\n-MarkLogic Data Hub welcomes new contributors. This document will guide you\r\n-through the process.\r\n-\r\n- - [Issues and Bugs](#found-an-issue)\r\n- - [Feature Requests](#want-a-feature)\r\n- - [Building from Source](#building-marklogic-data-hub-from-source)\r\n- - [Submission Guidelines](#submission-guidelines)\r\n-\r\n-\r\n-## Found an Issue?\r\n-If you find a bug in the source code or a mistake in the documentation, you can help us by submitting an issue to our [GitHub Issue Tracker][issue tracker]. Even better, you can submit a Pull Request with a fix for the issue you filed.\r\n-\r\n-\r\n-## Want a Feature?\r\n-You can request a new feature by submitting an issue to our [GitHub Issue Tracker][issue tracker].  If you\r\n-would like to implement a new feature then first create a new issue and discuss it with one of our\r\n-project maintainers.\r\n-#####Note: As of version 2.0.3, pull requests will only be accepted for MarkLogic 9. Only critical bug fixes will be accepted for MarkLogic 8 on the legacy 2.0.2 or earlier branches.\r\n-\r\n-\r\n-## Building MarkLogic Data Hub from Source\r\n-Looking to build the code from source? Look no further.\r\n-\r\n-\r\n-#### Prerequisites\r\n-You need:\r\n-\r\n-- MarkLogic Server (see [Version Compatibility](https://docs.marklogic.com/datahub/refs/version-compatibility.html) for the correct version)\r\n-- Java JDK 8 or later\r\n-- Gradle 4.6 or later\r\n-- A decent IDE. (Recommended: IntelliJ)\r\n-\r\n-\r\n-#### Building from the command line\r\n-**WARNING:** _The Data Hub build includes a large number of tests which take a total of approximately 30 minutes. You can skip the tests; however, you must run the tests before submitting changes._\r\n-\r\n-The build script builds ALL the Data Hub deliverables (marklogic-data-hub.jar, marklogic-datahub-<version>.war, and ml-data-hub-plugin for Gradle). To build, run:\r\n-\r\n-```bash\r\n-cd /path/to/data-hub-project/\r\n-./gradlew build -x test\r\n-```\r\n-\r\n-\r\n-#### Building and using the Data Hub Java library\r\n-\r\n-If you wish to make changes to or try out the latest code in the Data Hub Java library (marklogic-data-hub-(version).jar), follow \r\n-these instructions:\r\n-\r\n-1. Publish the library to your local Maven repository (defaults to ~/.m2/repository).\r\n-\r\n-  ```bash\r\n-  cd /path/to/marklogic-data-hub/\r\n-  ./gradlew publishToMavenLocal\r\n-  ```\r\n- \r\n-2. In the build.gradle file for the project that will use the library, add your local Maven repository as a repository if it's not alreaded included:\r\n-\r\n-  ```bash\r\n-  repositories {\r\n-    mavenLocal()\r\n-  }\r\n-  ```\r\n-\r\n-3. Assuming that you're using Gradle's java plugin, add the library as a dependency to your project:\r\n-\r\n-  ```bash\r\n-  dependencies {\r\n-    compile \"com.marklogic:marklogic-data-hub:(version)\"\r\n-  ```\r\n-\r\n-The version is defined in gradle.properties in the marklogic-data-hub root project directory. You can override this if \r\n-desired when publishing to your local Maven repository - e.g.\r\n-\r\n-    ./gradlew publishToMavenLocal -Pversion=myVersion\r\n-\r\n-\r\n-#### Building and using the Data Hub Gradle Plugin\r\n-\r\n-If you are testing a change to the ml-data-hub Gradle plugin or a cutting-edge development version, you might want to use a local copy of the Gradle plugin in your Data Hub project. \r\n-To use a local copy of the Gradle plugin in your Data Hub project, you must tell Gradle to use your local copy instead of the one in the cloud.\r\n-\r\n-1. Publish the plugin to your local Maven repository (defaults to ~/.m2/repository).\r\n-\r\n-  ```bash\r\n-  cd /path/to/marklogic-data-hub/\r\n-  ./gradlew publishToMavenLocal\r\n-  ```\r\n-\r\n-2. In your Data Hub project's `build.gradle` file, enter the local version:\r\n-\r\n-  ```groovy\r\n-\r\n-  // this goes at the top above the plugins section\r\n-\r\n-  buildscript {\r\n-    repositories {\r\n-      mavenLocal()\r\n-      jcenter()\r\n-    }\r\n-    dependencies {\r\n-      classpath \"com.marklogic:ml-data-hub:(the version number you chose)\"\r\n-    }\r\n-  }\r\n-\r\n-  plugins {\r\n-     ...\r\n-\r\n-     // comment out this line. It pulls the version from the cloud\r\n-     // id 'com.marklogic.ml-data-hub' version '4.0.0'\r\n-  }\r\n-\r\n-  // this tells gradle to apply the plugin you included above in the buildscript section\r\n-  apply plugin: \"com.marklogic.ml-data-hub\"\r\n-  ```\r\n-\r\n-3. To run the plugin's unit tests, navigate to the ml-data-hub-plugin directory, then do the following:\r\n-\r\n-  a. Run all unit tests\r\n-\r\n-    ../gradlew test\r\n-\r\n-\r\n-  b. Run one unit test\r\n-\r\n-    ../gradlew -Dtest.single=CreateEntityTask test\r\n-\r\n-\r\n-**Note**: This change goes in a Data Hub project's `build.gradle`. Not the Data Hub source code's build.gradle.\r\n-\r\n-\r\n-#### Running QuickStart from Source\r\n-\r\n-1. Install the prerequisites.\r\n-\r\n-2. Open two terminal windows.\r\n-\r\n-  **Terminal window 1** - This runs the webapp.\r\n-\r\n-      ```bash\r\n-      cd /path/to/data-hub-project\r\n-      ./gradlew bootrun\r\n-      ```\r\n-\r\n-  **NOTE:** The progress indicator stops around 90%. This is normal. In Gradle, 100% means it finished running. This stays running indefinitely and thus shows 90%.\r\n-\r\n-      ```\r\n-      > Building 90% > :web:bootRun\r\n-      ```\r\n-\r\n-  **Terminal window 2** - This runs QuickStart.\r\n-\r\n-      ```\r\n-      cd /path/to/data-hub-project\r\n-      ./gradlew runui\r\n-      ```\r\n-\r\n-In a web browser, navigate to [http://localhost:4200](http://localhost:4200) to use the debug version of QuickStart.\r\n-\r\n-\r\n-### Troubleshooting\r\n-\r\n-If the `gradle runui` command fails, try the following to troubleshoot.\r\n-\r\n-\r\n-#### Do you have Gradle 3.4 or newer?\r\n-\r\n-Using gradle directly:\r\n-  ```\r\n-  gradle -v\r\n-  ```\r\n-or if you are using the wrapper:\r\n-  ```\r\n-  ./gradlew -v\r\n-  ```\r\n-\r\n-If your gradle wrapper is older than `3.4`:\r\n-  ```\r\n-  gradle wrapper --gradle-version 3.4\r\n-  ```\r\n-\r\n-\r\n-#### Are you on the develop branch?\r\n-\r\n-_Hint: You should be._\r\n-\r\n-To check:\r\n-  ```bash\r\n-  git branch\r\n-  ```\r\n-\r\n-To switch to the develop branch:\r\n-  ```bash\r\n-  git checkout develop\r\n-  ```\r\n-\r\n-\r\n-#### Do you have the latest code?\r\n-\r\n-  Better make sure...\r\n-\r\n-\r\n-##### If you cloned from the github.com/marklogic/marklogic-data-hub repo:\r\n-\r\n-  ```bash\r\n-  git pull origin develop\r\n-  ```\r\n-\r\n-##### If you forked then cloned your fork:\r\n-\r\n-  1. Make sure you have the upstream files:\r\n-\r\n-      ```bash\r\n-      $ git remote add upstream git://github.com/marklogic/marklogic-data-hub.git\r\n-      ```\r\n-\r\n-  2. Fetch the upstream files:\r\n-\r\n-      ```bash\r\n-      git fetch upstream develop\r\n-      ```\r\n-\r\n-  3. Merge it:\r\n-\r\n-      ```bash\r\n-      git rebase upstream/develop\r\n-      ```\r\n-\r\n-#### Remove the `web/node_modules` directory.\r\n-\r\n-If you see several javascript errors, you might have a corrupted `node_modules` directory. Remove it then run again.\r\n-\r\n-  ```bash\r\n-  rm -rf web/node_modules\r\n-  ```\r\n-\r\n-\r\n-## Submission Guidelines\r\n-\r\n-\r\n-### Submitting an Issue\r\n-\r\n-Before you submit your issue, search the archive to check if your question has been answered.\r\n-\r\n-If your issue appears to be a bug and hasn't been reported, open a new issue.\r\n-\r\n-By not reporting duplicate issues, you help us maximize the time we spend fixing issues and adding new features.\r\n-\r\n-Please fill out the issue template so that your issue can be dealt with quickly.\r\n-\r\n-\r\n-### Submitting a Pull Request\r\n-\r\n-#### Fork marklogic-data-hub\r\n-\r\n-Fork the project [on GitHub](https://github.com/marklogic/marklogic-data-hub/fork) and clone your copy.\r\n-\r\n-  ```sh\r\n-  $ git clone git@github.com:username/marklogic-data-hub.git\r\n-  $ cd marklogic-data-hub\r\n-  $ git remote add upstream git://github.com/marklogic/marklogic-data-hub.git\r\n-  ```\r\n-\r\n-**Important:** Please open an issue in the [issue tracker][] and get your proposed changes pre-approved by at least one of the project maintainers before you start coding. Nothing is more frustrating than seeing your hard work go to waste because your vision does not align with that of the project maintainers.\r\n-\r\n-\r\n-#### Create a branch for your changes\r\n-\r\n-If you decide to fix something, create a feature branch and start hacking.\r\n-\r\n-**Note:** We use `git flow` and our most recent changes live on the `develop` branch.\r\n-\r\n-  ```sh\r\n-  $ git checkout -b my-feature-branch -t origin/develop\r\n-  ```\r\n-\r\n-\r\n-#### Formatting code\r\n-\r\n-We use `[.editorconfig][]` to configure our editors for proper code formatting. If you don't\r\n-use a tool that supports editorconfig, be sure to configure your editor to use the settings\r\n-equivalent to our .editorconfig file.\r\n-\r\n-\r\n-#### Commit your changes\r\n-\r\n-Make sure git knows your name and email address:\r\n-\r\n-  ```sh\r\n-  $ git config --global user.name \"J. Random User\"\r\n-  $ git config --global user.email \"j.random.user@example.com\"\r\n-  ```\r\n-\r\n-Writing good commit logs is important. A commit log should describe what\r\n-changed and why. Follow these guidelines when writing one:\r\n-\r\n-1. The first line should be 50 characters or less and contain a short\r\n-   description of the change including the issue number prefixed by a hash (#).\r\n-2. Keep the second line blank.\r\n-3. Wrap all other lines at 72 columns.\r\n-\r\n-Example of a good commit log:\r\n-\r\n-```\r\n-Fixing Issue #123: make the whatchamajigger work in MarkLogic 9\r\n-\r\n-Body of commit message is a few lines of text, explaining things\r\n-in more detail, possibly giving some background about the issue\r\n-being fixed, etc.\r\n-\r\n-The body of the commit message can be several paragraphs, and\r\n-please do proper word-wrap and keep columns shorter than about\r\n-72 characters or so. That way `git log` will show things\r\n-nicely even when it is indented.\r\n-```\r\n-\r\n-The header line should be meaningful; it is what other people see when they\r\n-run `git shortlog` or `git log --oneline`.\r\n-\r\n-\r\n-#### Rebase your repo\r\n-\r\n-Use `git rebase` (not `git merge`) to sync your work from time to time.\r\n-\r\n-  ```sh\r\n-  $ git fetch upstream\r\n-  $ git rebase upstream/develop\r\n-  ```\r\n-\r\n-\r\n-#### Test your code\r\n-\r\n-- Run the JUnit tests.\r\n-\r\n-  ```sh\r\n-  $ ./gradlew test\r\n-  ```\r\n-\r\n-- To run a single test:\r\n-\r\n-  ```sh\r\n-  $ ./gradlew -Dtest.single=TestName test\r\n-  ```\r\n-\r\n-- For best results, do not include the final word test. For example, suppose you want to run FlowRunnerTest:\r\n-\r\n-  ```sh\r\n-  $ ./gradlew -Dtest.single=FlowRunner test\r\n-  ```\r\n-\r\n-- To run the QuickStart end-to-end tests, you need Node.js 8.9.1 or later and run:\r\n-  ```jshelllanguage\r\n-  gradlew bootrun\r\n-  cd web\r\n-  npm install\r\n-  npm install -g protractor\r\n-  npm run webdriver-update\r\n-  npm run e2e\r\n-  ```\r\n-*Note: For end-to-end (e2e) tests, Data Hub must be running and so must a MarkLogic instance with available appservers for the ports 8010-8014.*\r\n-\r\n-You can run the e2e tests from Intellij or another IDE to perform fullstack debugging. To do so, add a run/debug\r\n-task that runs the script \"e2e\". Make sure to add a 'before launch' task as folows: `npm run \"webdriver-update\"`.\r\n-\r\n-**IMPORTANT: All submitted patches must pass ALL tests.**\r\n-\r\n-\r\n-#### Push your changes\r\n-\r\n-  ```sh\r\n-  $ git push origin my-feature-branch\r\n-  ```\r\n-\r\n-\r\n-#### Agree to the contributor License\r\n-\r\n-Before we can accept and merge your changes, you must sign a [Contributor License Agreement](http://developer.marklogic.com/products/cla). You only need to do this once.\r\n-\r\n-\r\n-#### Submit the pull request\r\n-\r\n-Go to https://github.com/username/marklogic-data-hub and select your feature branch. Click\r\n-the 'Pull Request' button and fill out the form.\r\n-\r\n-Pull requests are usually reviewed within a few days. If you get comments\r\n-that need to be to addressed, apply your changes in a separate commit and push that to your\r\n-feature branch. Post a comment in the pull request afterwards; GitHub does\r\n-not send out notifications when you add commits to existing pull requests.\r\n-\r\n-That's it! Thank you for your contribution!\r\n-\r\n-\r\n-#### After your pull request is merged\r\n-\r\n-After your pull request is merged, you can safely delete your branch and pull the changes\r\n-from the main (upstream) repository:\r\n-\r\n-* Delete the remote branch on GitHub either through the GitHub web UI or your local shell as follows:\r\n-\r\n-    ```shell\r\n-    git push origin --delete my-feature-branch\r\n-    ```\r\n-\r\n-* Check out the develop branch:\r\n-\r\n-    ```shell\r\n-    git checkout develop -f\r\n-    ```\r\n-\r\n-* Delete the local branch:\r\n-\r\n-    ```shell\r\n-    git branch -D my-feature-branch\r\n-    ```\r\n-\r\n-* Update your develop with the latest upstream version:\r\n-\r\n-    ```shell\r\n-    git pull --ff upstream develop\r\n-    ```\r\n-\r\n-[issue tracker]: https://github.com/marklogic/marklogic-data-hub/issues\r\n-[.editorconfig]: http://editorconfig.org/\r\n+# Contributing to MarkLogic Data Hub\n+\n+MarkLogic Data Hub welcomes new contributors. This document will guide you\n+through the process.\n+\n+ - [Issues and Bugs](#found-an-issue)\n+ - [Feature Requests](#want-a-feature)\n+ - [Developing Data Hub](#developing-data-hub)\n+ - [Submission Guidelines](#submission-guidelines)\n+\n+\n+## Found an Issue?\n+If you find a bug in the source code or a mistake in the documentation, you can help us by submitting an issue to our [GitHub Issue Tracker][issue tracker]. Even better, you can submit a Pull Request with a fix for the issue you filed.\n+\n+\n+## Want a Feature?\n+You can request a new feature by submitting an issue to our [GitHub Issue Tracker][issue tracker].  If you\n+would like to implement a new feature then first create a new issue and discuss it with one of our\n+project maintainers.\n+\n+\n+## Developing Data Hub \n+\n+This section describes how to build and test new features and fixes in Data Hub. This includes changes to the following subprojects in this project:\n+\n+- the Data Hub library in ./marklogic-data-hub\n+- the Data Hub Gradle plugin in ./ml-data-hub-plugin\n+- the One-UI web application in ./one-ui\n+- the QuickStart web application in ./web\n+\n+### Prerequisites\n+\n+You need:\n+\n+- MarkLogic Server (see [Version Compatibility](https://docs.marklogic.com/datahub/refs/version-compatibility.html) for the correct version)\n+- Java JDK 8 or later", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIwNDg5Ng=="}, "originalCommit": {"oid": "4129b1dc9bdd501bc40c3644372804ede574b4c7"}, "originalPosition": 461}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDExNzEwOnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoxMTozNlrOF4-tQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDozOTozNlrOF4_l-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI5MTk2OA==", "bodyText": "should we add -Pskipui=true? missing \"true\"", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3724#discussion_r395291968", "createdAt": "2020-03-19T20:11:36Z", "author": {"login": "SameeraPriyathamTadikonda"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,425 +1,365 @@\n-# Contributing to MarkLogic Data Hub\r\n-\r\n-MarkLogic Data Hub welcomes new contributors. This document will guide you\r\n-through the process.\r\n-\r\n- - [Issues and Bugs](#found-an-issue)\r\n- - [Feature Requests](#want-a-feature)\r\n- - [Building from Source](#building-marklogic-data-hub-from-source)\r\n- - [Submission Guidelines](#submission-guidelines)\r\n-\r\n-\r\n-## Found an Issue?\r\n-If you find a bug in the source code or a mistake in the documentation, you can help us by submitting an issue to our [GitHub Issue Tracker][issue tracker]. Even better, you can submit a Pull Request with a fix for the issue you filed.\r\n-\r\n-\r\n-## Want a Feature?\r\n-You can request a new feature by submitting an issue to our [GitHub Issue Tracker][issue tracker].  If you\r\n-would like to implement a new feature then first create a new issue and discuss it with one of our\r\n-project maintainers.\r\n-#####Note: As of version 2.0.3, pull requests will only be accepted for MarkLogic 9. Only critical bug fixes will be accepted for MarkLogic 8 on the legacy 2.0.2 or earlier branches.\r\n-\r\n-\r\n-## Building MarkLogic Data Hub from Source\r\n-Looking to build the code from source? Look no further.\r\n-\r\n-\r\n-#### Prerequisites\r\n-You need:\r\n-\r\n-- MarkLogic Server (see [Version Compatibility](https://docs.marklogic.com/datahub/refs/version-compatibility.html) for the correct version)\r\n-- Java JDK 8 or later\r\n-- Gradle 4.6 or later\r\n-- A decent IDE. (Recommended: IntelliJ)\r\n-\r\n-\r\n-#### Building from the command line\r\n-**WARNING:** _The Data Hub build includes a large number of tests which take a total of approximately 30 minutes. You can skip the tests; however, you must run the tests before submitting changes._\r\n-\r\n-The build script builds ALL the Data Hub deliverables (marklogic-data-hub.jar, marklogic-datahub-<version>.war, and ml-data-hub-plugin for Gradle). To build, run:\r\n-\r\n-```bash\r\n-cd /path/to/data-hub-project/\r\n-./gradlew build -x test\r\n-```\r\n-\r\n-\r\n-#### Building and using the Data Hub Java library\r\n-\r\n-If you wish to make changes to or try out the latest code in the Data Hub Java library (marklogic-data-hub-(version).jar), follow \r\n-these instructions:\r\n-\r\n-1. Publish the library to your local Maven repository (defaults to ~/.m2/repository).\r\n-\r\n-  ```bash\r\n-  cd /path/to/marklogic-data-hub/\r\n-  ./gradlew publishToMavenLocal\r\n-  ```\r\n- \r\n-2. In the build.gradle file for the project that will use the library, add your local Maven repository as a repository if it's not alreaded included:\r\n-\r\n-  ```bash\r\n-  repositories {\r\n-    mavenLocal()\r\n-  }\r\n-  ```\r\n-\r\n-3. Assuming that you're using Gradle's java plugin, add the library as a dependency to your project:\r\n-\r\n-  ```bash\r\n-  dependencies {\r\n-    compile \"com.marklogic:marklogic-data-hub:(version)\"\r\n-  ```\r\n-\r\n-The version is defined in gradle.properties in the marklogic-data-hub root project directory. You can override this if \r\n-desired when publishing to your local Maven repository - e.g.\r\n-\r\n-    ./gradlew publishToMavenLocal -Pversion=myVersion\r\n-\r\n-\r\n-#### Building and using the Data Hub Gradle Plugin\r\n-\r\n-If you are testing a change to the ml-data-hub Gradle plugin or a cutting-edge development version, you might want to use a local copy of the Gradle plugin in your Data Hub project. \r\n-To use a local copy of the Gradle plugin in your Data Hub project, you must tell Gradle to use your local copy instead of the one in the cloud.\r\n-\r\n-1. Publish the plugin to your local Maven repository (defaults to ~/.m2/repository).\r\n-\r\n-  ```bash\r\n-  cd /path/to/marklogic-data-hub/\r\n-  ./gradlew publishToMavenLocal\r\n-  ```\r\n-\r\n-2. In your Data Hub project's `build.gradle` file, enter the local version:\r\n-\r\n-  ```groovy\r\n-\r\n-  // this goes at the top above the plugins section\r\n-\r\n-  buildscript {\r\n-    repositories {\r\n-      mavenLocal()\r\n-      jcenter()\r\n-    }\r\n-    dependencies {\r\n-      classpath \"com.marklogic:ml-data-hub:(the version number you chose)\"\r\n-    }\r\n-  }\r\n-\r\n-  plugins {\r\n-     ...\r\n-\r\n-     // comment out this line. It pulls the version from the cloud\r\n-     // id 'com.marklogic.ml-data-hub' version '4.0.0'\r\n-  }\r\n-\r\n-  // this tells gradle to apply the plugin you included above in the buildscript section\r\n-  apply plugin: \"com.marklogic.ml-data-hub\"\r\n-  ```\r\n-\r\n-3. To run the plugin's unit tests, navigate to the ml-data-hub-plugin directory, then do the following:\r\n-\r\n-  a. Run all unit tests\r\n-\r\n-    ../gradlew test\r\n-\r\n-\r\n-  b. Run one unit test\r\n-\r\n-    ../gradlew -Dtest.single=CreateEntityTask test\r\n-\r\n-\r\n-**Note**: This change goes in a Data Hub project's `build.gradle`. Not the Data Hub source code's build.gradle.\r\n-\r\n-\r\n-#### Running QuickStart from Source\r\n-\r\n-1. Install the prerequisites.\r\n-\r\n-2. Open two terminal windows.\r\n-\r\n-  **Terminal window 1** - This runs the webapp.\r\n-\r\n-      ```bash\r\n-      cd /path/to/data-hub-project\r\n-      ./gradlew bootrun\r\n-      ```\r\n-\r\n-  **NOTE:** The progress indicator stops around 90%. This is normal. In Gradle, 100% means it finished running. This stays running indefinitely and thus shows 90%.\r\n-\r\n-      ```\r\n-      > Building 90% > :web:bootRun\r\n-      ```\r\n-\r\n-  **Terminal window 2** - This runs QuickStart.\r\n-\r\n-      ```\r\n-      cd /path/to/data-hub-project\r\n-      ./gradlew runui\r\n-      ```\r\n-\r\n-In a web browser, navigate to [http://localhost:4200](http://localhost:4200) to use the debug version of QuickStart.\r\n-\r\n-\r\n-### Troubleshooting\r\n-\r\n-If the `gradle runui` command fails, try the following to troubleshoot.\r\n-\r\n-\r\n-#### Do you have Gradle 3.4 or newer?\r\n-\r\n-Using gradle directly:\r\n-  ```\r\n-  gradle -v\r\n-  ```\r\n-or if you are using the wrapper:\r\n-  ```\r\n-  ./gradlew -v\r\n-  ```\r\n-\r\n-If your gradle wrapper is older than `3.4`:\r\n-  ```\r\n-  gradle wrapper --gradle-version 3.4\r\n-  ```\r\n-\r\n-\r\n-#### Are you on the develop branch?\r\n-\r\n-_Hint: You should be._\r\n-\r\n-To check:\r\n-  ```bash\r\n-  git branch\r\n-  ```\r\n-\r\n-To switch to the develop branch:\r\n-  ```bash\r\n-  git checkout develop\r\n-  ```\r\n-\r\n-\r\n-#### Do you have the latest code?\r\n-\r\n-  Better make sure...\r\n-\r\n-\r\n-##### If you cloned from the github.com/marklogic/marklogic-data-hub repo:\r\n-\r\n-  ```bash\r\n-  git pull origin develop\r\n-  ```\r\n-\r\n-##### If you forked then cloned your fork:\r\n-\r\n-  1. Make sure you have the upstream files:\r\n-\r\n-      ```bash\r\n-      $ git remote add upstream git://github.com/marklogic/marklogic-data-hub.git\r\n-      ```\r\n-\r\n-  2. Fetch the upstream files:\r\n-\r\n-      ```bash\r\n-      git fetch upstream develop\r\n-      ```\r\n-\r\n-  3. Merge it:\r\n-\r\n-      ```bash\r\n-      git rebase upstream/develop\r\n-      ```\r\n-\r\n-#### Remove the `web/node_modules` directory.\r\n-\r\n-If you see several javascript errors, you might have a corrupted `node_modules` directory. Remove it then run again.\r\n-\r\n-  ```bash\r\n-  rm -rf web/node_modules\r\n-  ```\r\n-\r\n-\r\n-## Submission Guidelines\r\n-\r\n-\r\n-### Submitting an Issue\r\n-\r\n-Before you submit your issue, search the archive to check if your question has been answered.\r\n-\r\n-If your issue appears to be a bug and hasn't been reported, open a new issue.\r\n-\r\n-By not reporting duplicate issues, you help us maximize the time we spend fixing issues and adding new features.\r\n-\r\n-Please fill out the issue template so that your issue can be dealt with quickly.\r\n-\r\n-\r\n-### Submitting a Pull Request\r\n-\r\n-#### Fork marklogic-data-hub\r\n-\r\n-Fork the project [on GitHub](https://github.com/marklogic/marklogic-data-hub/fork) and clone your copy.\r\n-\r\n-  ```sh\r\n-  $ git clone git@github.com:username/marklogic-data-hub.git\r\n-  $ cd marklogic-data-hub\r\n-  $ git remote add upstream git://github.com/marklogic/marklogic-data-hub.git\r\n-  ```\r\n-\r\n-**Important:** Please open an issue in the [issue tracker][] and get your proposed changes pre-approved by at least one of the project maintainers before you start coding. Nothing is more frustrating than seeing your hard work go to waste because your vision does not align with that of the project maintainers.\r\n-\r\n-\r\n-#### Create a branch for your changes\r\n-\r\n-If you decide to fix something, create a feature branch and start hacking.\r\n-\r\n-**Note:** We use `git flow` and our most recent changes live on the `develop` branch.\r\n-\r\n-  ```sh\r\n-  $ git checkout -b my-feature-branch -t origin/develop\r\n-  ```\r\n-\r\n-\r\n-#### Formatting code\r\n-\r\n-We use `[.editorconfig][]` to configure our editors for proper code formatting. If you don't\r\n-use a tool that supports editorconfig, be sure to configure your editor to use the settings\r\n-equivalent to our .editorconfig file.\r\n-\r\n-\r\n-#### Commit your changes\r\n-\r\n-Make sure git knows your name and email address:\r\n-\r\n-  ```sh\r\n-  $ git config --global user.name \"J. Random User\"\r\n-  $ git config --global user.email \"j.random.user@example.com\"\r\n-  ```\r\n-\r\n-Writing good commit logs is important. A commit log should describe what\r\n-changed and why. Follow these guidelines when writing one:\r\n-\r\n-1. The first line should be 50 characters or less and contain a short\r\n-   description of the change including the issue number prefixed by a hash (#).\r\n-2. Keep the second line blank.\r\n-3. Wrap all other lines at 72 columns.\r\n-\r\n-Example of a good commit log:\r\n-\r\n-```\r\n-Fixing Issue #123: make the whatchamajigger work in MarkLogic 9\r\n-\r\n-Body of commit message is a few lines of text, explaining things\r\n-in more detail, possibly giving some background about the issue\r\n-being fixed, etc.\r\n-\r\n-The body of the commit message can be several paragraphs, and\r\n-please do proper word-wrap and keep columns shorter than about\r\n-72 characters or so. That way `git log` will show things\r\n-nicely even when it is indented.\r\n-```\r\n-\r\n-The header line should be meaningful; it is what other people see when they\r\n-run `git shortlog` or `git log --oneline`.\r\n-\r\n-\r\n-#### Rebase your repo\r\n-\r\n-Use `git rebase` (not `git merge`) to sync your work from time to time.\r\n-\r\n-  ```sh\r\n-  $ git fetch upstream\r\n-  $ git rebase upstream/develop\r\n-  ```\r\n-\r\n-\r\n-#### Test your code\r\n-\r\n-- Run the JUnit tests.\r\n-\r\n-  ```sh\r\n-  $ ./gradlew test\r\n-  ```\r\n-\r\n-- To run a single test:\r\n-\r\n-  ```sh\r\n-  $ ./gradlew -Dtest.single=TestName test\r\n-  ```\r\n-\r\n-- For best results, do not include the final word test. For example, suppose you want to run FlowRunnerTest:\r\n-\r\n-  ```sh\r\n-  $ ./gradlew -Dtest.single=FlowRunner test\r\n-  ```\r\n-\r\n-- To run the QuickStart end-to-end tests, you need Node.js 8.9.1 or later and run:\r\n-  ```jshelllanguage\r\n-  gradlew bootrun\r\n-  cd web\r\n-  npm install\r\n-  npm install -g protractor\r\n-  npm run webdriver-update\r\n-  npm run e2e\r\n-  ```\r\n-*Note: For end-to-end (e2e) tests, Data Hub must be running and so must a MarkLogic instance with available appservers for the ports 8010-8014.*\r\n-\r\n-You can run the e2e tests from Intellij or another IDE to perform fullstack debugging. To do so, add a run/debug\r\n-task that runs the script \"e2e\". Make sure to add a 'before launch' task as folows: `npm run \"webdriver-update\"`.\r\n-\r\n-**IMPORTANT: All submitted patches must pass ALL tests.**\r\n-\r\n-\r\n-#### Push your changes\r\n-\r\n-  ```sh\r\n-  $ git push origin my-feature-branch\r\n-  ```\r\n-\r\n-\r\n-#### Agree to the contributor License\r\n-\r\n-Before we can accept and merge your changes, you must sign a [Contributor License Agreement](http://developer.marklogic.com/products/cla). You only need to do this once.\r\n-\r\n-\r\n-#### Submit the pull request\r\n-\r\n-Go to https://github.com/username/marklogic-data-hub and select your feature branch. Click\r\n-the 'Pull Request' button and fill out the form.\r\n-\r\n-Pull requests are usually reviewed within a few days. If you get comments\r\n-that need to be to addressed, apply your changes in a separate commit and push that to your\r\n-feature branch. Post a comment in the pull request afterwards; GitHub does\r\n-not send out notifications when you add commits to existing pull requests.\r\n-\r\n-That's it! Thank you for your contribution!\r\n-\r\n-\r\n-#### After your pull request is merged\r\n-\r\n-After your pull request is merged, you can safely delete your branch and pull the changes\r\n-from the main (upstream) repository:\r\n-\r\n-* Delete the remote branch on GitHub either through the GitHub web UI or your local shell as follows:\r\n-\r\n-    ```shell\r\n-    git push origin --delete my-feature-branch\r\n-    ```\r\n-\r\n-* Check out the develop branch:\r\n-\r\n-    ```shell\r\n-    git checkout develop -f\r\n-    ```\r\n-\r\n-* Delete the local branch:\r\n-\r\n-    ```shell\r\n-    git branch -D my-feature-branch\r\n-    ```\r\n-\r\n-* Update your develop with the latest upstream version:\r\n-\r\n-    ```shell\r\n-    git pull --ff upstream develop\r\n-    ```\r\n-\r\n-[issue tracker]: https://github.com/marklogic/marklogic-data-hub/issues\r\n-[.editorconfig]: http://editorconfig.org/\r\n+# Contributing to MarkLogic Data Hub\n+\n+MarkLogic Data Hub welcomes new contributors. This document will guide you\n+through the process.\n+\n+ - [Issues and Bugs](#found-an-issue)\n+ - [Feature Requests](#want-a-feature)\n+ - [Developing Data Hub](#developing-data-hub)\n+ - [Submission Guidelines](#submission-guidelines)\n+\n+\n+## Found an Issue?\n+If you find a bug in the source code or a mistake in the documentation, you can help us by submitting an issue to our [GitHub Issue Tracker][issue tracker]. Even better, you can submit a Pull Request with a fix for the issue you filed.\n+\n+\n+## Want a Feature?\n+You can request a new feature by submitting an issue to our [GitHub Issue Tracker][issue tracker].  If you\n+would like to implement a new feature then first create a new issue and discuss it with one of our\n+project maintainers.\n+\n+\n+## Developing Data Hub \n+\n+This section describes how to build and test new features and fixes in Data Hub. This includes changes to the following subprojects in this project:\n+\n+- the Data Hub library in ./marklogic-data-hub\n+- the Data Hub Gradle plugin in ./ml-data-hub-plugin\n+- the One-UI web application in ./one-ui\n+- the QuickStart web application in ./web\n+\n+### Prerequisites\n+\n+You need:\n+\n+- MarkLogic Server (see [Version Compatibility](https://docs.marklogic.com/datahub/refs/version-compatibility.html) for the correct version)\n+- Java JDK 9 or later\n+- Gradle 5.x or later\n+\n+### Testing changes to the Data Hub library\n+\n+The source code for the Data Hub library is in the ./marklogic-data-hub subproject. This project contains hundreds of \n+tests, written in JUnit and also written using [marklogic-unit-test](https://github.com/marklogic-community/marklogic-unit-test). \n+While developing, you'll create/modify/run tests to verify the changes that you're making. \n+\n+To run the tests, you first need to deploy a test instance of Data Hub to MarkLogic. The configuration for this instance\n+is in the ./marklogic-data-hub/gradle.properties; you can override these values in gradle-local.properties. Verify\n+that the values for mlSecurityUsername and mlSecurityPassword are correct, as that user will be used to deploy the test\n+instance of Data Hub. Also, ensure that you do not have a Data Hub instance already deployed to the MarkLogic that you \n+will connect to. Then, run the following Gradle task from the root project:\n+\n+    ./gradlew -Pskipui= bootstrap", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4463f6b5ed3f3ea5ebd5501a1bc5ef26946a6f3"}, "originalPosition": 476}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMwNjQ5MQ==", "bodyText": "Nope, as long as the property is defined, it'll achieve the desired effect.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3724#discussion_r395306491", "createdAt": "2020-03-19T20:39:36Z", "author": {"login": "rjrudin"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,425 +1,365 @@\n-# Contributing to MarkLogic Data Hub\r\n-\r\n-MarkLogic Data Hub welcomes new contributors. This document will guide you\r\n-through the process.\r\n-\r\n- - [Issues and Bugs](#found-an-issue)\r\n- - [Feature Requests](#want-a-feature)\r\n- - [Building from Source](#building-marklogic-data-hub-from-source)\r\n- - [Submission Guidelines](#submission-guidelines)\r\n-\r\n-\r\n-## Found an Issue?\r\n-If you find a bug in the source code or a mistake in the documentation, you can help us by submitting an issue to our [GitHub Issue Tracker][issue tracker]. Even better, you can submit a Pull Request with a fix for the issue you filed.\r\n-\r\n-\r\n-## Want a Feature?\r\n-You can request a new feature by submitting an issue to our [GitHub Issue Tracker][issue tracker].  If you\r\n-would like to implement a new feature then first create a new issue and discuss it with one of our\r\n-project maintainers.\r\n-#####Note: As of version 2.0.3, pull requests will only be accepted for MarkLogic 9. Only critical bug fixes will be accepted for MarkLogic 8 on the legacy 2.0.2 or earlier branches.\r\n-\r\n-\r\n-## Building MarkLogic Data Hub from Source\r\n-Looking to build the code from source? Look no further.\r\n-\r\n-\r\n-#### Prerequisites\r\n-You need:\r\n-\r\n-- MarkLogic Server (see [Version Compatibility](https://docs.marklogic.com/datahub/refs/version-compatibility.html) for the correct version)\r\n-- Java JDK 8 or later\r\n-- Gradle 4.6 or later\r\n-- A decent IDE. (Recommended: IntelliJ)\r\n-\r\n-\r\n-#### Building from the command line\r\n-**WARNING:** _The Data Hub build includes a large number of tests which take a total of approximately 30 minutes. You can skip the tests; however, you must run the tests before submitting changes._\r\n-\r\n-The build script builds ALL the Data Hub deliverables (marklogic-data-hub.jar, marklogic-datahub-<version>.war, and ml-data-hub-plugin for Gradle). To build, run:\r\n-\r\n-```bash\r\n-cd /path/to/data-hub-project/\r\n-./gradlew build -x test\r\n-```\r\n-\r\n-\r\n-#### Building and using the Data Hub Java library\r\n-\r\n-If you wish to make changes to or try out the latest code in the Data Hub Java library (marklogic-data-hub-(version).jar), follow \r\n-these instructions:\r\n-\r\n-1. Publish the library to your local Maven repository (defaults to ~/.m2/repository).\r\n-\r\n-  ```bash\r\n-  cd /path/to/marklogic-data-hub/\r\n-  ./gradlew publishToMavenLocal\r\n-  ```\r\n- \r\n-2. In the build.gradle file for the project that will use the library, add your local Maven repository as a repository if it's not alreaded included:\r\n-\r\n-  ```bash\r\n-  repositories {\r\n-    mavenLocal()\r\n-  }\r\n-  ```\r\n-\r\n-3. Assuming that you're using Gradle's java plugin, add the library as a dependency to your project:\r\n-\r\n-  ```bash\r\n-  dependencies {\r\n-    compile \"com.marklogic:marklogic-data-hub:(version)\"\r\n-  ```\r\n-\r\n-The version is defined in gradle.properties in the marklogic-data-hub root project directory. You can override this if \r\n-desired when publishing to your local Maven repository - e.g.\r\n-\r\n-    ./gradlew publishToMavenLocal -Pversion=myVersion\r\n-\r\n-\r\n-#### Building and using the Data Hub Gradle Plugin\r\n-\r\n-If you are testing a change to the ml-data-hub Gradle plugin or a cutting-edge development version, you might want to use a local copy of the Gradle plugin in your Data Hub project. \r\n-To use a local copy of the Gradle plugin in your Data Hub project, you must tell Gradle to use your local copy instead of the one in the cloud.\r\n-\r\n-1. Publish the plugin to your local Maven repository (defaults to ~/.m2/repository).\r\n-\r\n-  ```bash\r\n-  cd /path/to/marklogic-data-hub/\r\n-  ./gradlew publishToMavenLocal\r\n-  ```\r\n-\r\n-2. In your Data Hub project's `build.gradle` file, enter the local version:\r\n-\r\n-  ```groovy\r\n-\r\n-  // this goes at the top above the plugins section\r\n-\r\n-  buildscript {\r\n-    repositories {\r\n-      mavenLocal()\r\n-      jcenter()\r\n-    }\r\n-    dependencies {\r\n-      classpath \"com.marklogic:ml-data-hub:(the version number you chose)\"\r\n-    }\r\n-  }\r\n-\r\n-  plugins {\r\n-     ...\r\n-\r\n-     // comment out this line. It pulls the version from the cloud\r\n-     // id 'com.marklogic.ml-data-hub' version '4.0.0'\r\n-  }\r\n-\r\n-  // this tells gradle to apply the plugin you included above in the buildscript section\r\n-  apply plugin: \"com.marklogic.ml-data-hub\"\r\n-  ```\r\n-\r\n-3. To run the plugin's unit tests, navigate to the ml-data-hub-plugin directory, then do the following:\r\n-\r\n-  a. Run all unit tests\r\n-\r\n-    ../gradlew test\r\n-\r\n-\r\n-  b. Run one unit test\r\n-\r\n-    ../gradlew -Dtest.single=CreateEntityTask test\r\n-\r\n-\r\n-**Note**: This change goes in a Data Hub project's `build.gradle`. Not the Data Hub source code's build.gradle.\r\n-\r\n-\r\n-#### Running QuickStart from Source\r\n-\r\n-1. Install the prerequisites.\r\n-\r\n-2. Open two terminal windows.\r\n-\r\n-  **Terminal window 1** - This runs the webapp.\r\n-\r\n-      ```bash\r\n-      cd /path/to/data-hub-project\r\n-      ./gradlew bootrun\r\n-      ```\r\n-\r\n-  **NOTE:** The progress indicator stops around 90%. This is normal. In Gradle, 100% means it finished running. This stays running indefinitely and thus shows 90%.\r\n-\r\n-      ```\r\n-      > Building 90% > :web:bootRun\r\n-      ```\r\n-\r\n-  **Terminal window 2** - This runs QuickStart.\r\n-\r\n-      ```\r\n-      cd /path/to/data-hub-project\r\n-      ./gradlew runui\r\n-      ```\r\n-\r\n-In a web browser, navigate to [http://localhost:4200](http://localhost:4200) to use the debug version of QuickStart.\r\n-\r\n-\r\n-### Troubleshooting\r\n-\r\n-If the `gradle runui` command fails, try the following to troubleshoot.\r\n-\r\n-\r\n-#### Do you have Gradle 3.4 or newer?\r\n-\r\n-Using gradle directly:\r\n-  ```\r\n-  gradle -v\r\n-  ```\r\n-or if you are using the wrapper:\r\n-  ```\r\n-  ./gradlew -v\r\n-  ```\r\n-\r\n-If your gradle wrapper is older than `3.4`:\r\n-  ```\r\n-  gradle wrapper --gradle-version 3.4\r\n-  ```\r\n-\r\n-\r\n-#### Are you on the develop branch?\r\n-\r\n-_Hint: You should be._\r\n-\r\n-To check:\r\n-  ```bash\r\n-  git branch\r\n-  ```\r\n-\r\n-To switch to the develop branch:\r\n-  ```bash\r\n-  git checkout develop\r\n-  ```\r\n-\r\n-\r\n-#### Do you have the latest code?\r\n-\r\n-  Better make sure...\r\n-\r\n-\r\n-##### If you cloned from the github.com/marklogic/marklogic-data-hub repo:\r\n-\r\n-  ```bash\r\n-  git pull origin develop\r\n-  ```\r\n-\r\n-##### If you forked then cloned your fork:\r\n-\r\n-  1. Make sure you have the upstream files:\r\n-\r\n-      ```bash\r\n-      $ git remote add upstream git://github.com/marklogic/marklogic-data-hub.git\r\n-      ```\r\n-\r\n-  2. Fetch the upstream files:\r\n-\r\n-      ```bash\r\n-      git fetch upstream develop\r\n-      ```\r\n-\r\n-  3. Merge it:\r\n-\r\n-      ```bash\r\n-      git rebase upstream/develop\r\n-      ```\r\n-\r\n-#### Remove the `web/node_modules` directory.\r\n-\r\n-If you see several javascript errors, you might have a corrupted `node_modules` directory. Remove it then run again.\r\n-\r\n-  ```bash\r\n-  rm -rf web/node_modules\r\n-  ```\r\n-\r\n-\r\n-## Submission Guidelines\r\n-\r\n-\r\n-### Submitting an Issue\r\n-\r\n-Before you submit your issue, search the archive to check if your question has been answered.\r\n-\r\n-If your issue appears to be a bug and hasn't been reported, open a new issue.\r\n-\r\n-By not reporting duplicate issues, you help us maximize the time we spend fixing issues and adding new features.\r\n-\r\n-Please fill out the issue template so that your issue can be dealt with quickly.\r\n-\r\n-\r\n-### Submitting a Pull Request\r\n-\r\n-#### Fork marklogic-data-hub\r\n-\r\n-Fork the project [on GitHub](https://github.com/marklogic/marklogic-data-hub/fork) and clone your copy.\r\n-\r\n-  ```sh\r\n-  $ git clone git@github.com:username/marklogic-data-hub.git\r\n-  $ cd marklogic-data-hub\r\n-  $ git remote add upstream git://github.com/marklogic/marklogic-data-hub.git\r\n-  ```\r\n-\r\n-**Important:** Please open an issue in the [issue tracker][] and get your proposed changes pre-approved by at least one of the project maintainers before you start coding. Nothing is more frustrating than seeing your hard work go to waste because your vision does not align with that of the project maintainers.\r\n-\r\n-\r\n-#### Create a branch for your changes\r\n-\r\n-If you decide to fix something, create a feature branch and start hacking.\r\n-\r\n-**Note:** We use `git flow` and our most recent changes live on the `develop` branch.\r\n-\r\n-  ```sh\r\n-  $ git checkout -b my-feature-branch -t origin/develop\r\n-  ```\r\n-\r\n-\r\n-#### Formatting code\r\n-\r\n-We use `[.editorconfig][]` to configure our editors for proper code formatting. If you don't\r\n-use a tool that supports editorconfig, be sure to configure your editor to use the settings\r\n-equivalent to our .editorconfig file.\r\n-\r\n-\r\n-#### Commit your changes\r\n-\r\n-Make sure git knows your name and email address:\r\n-\r\n-  ```sh\r\n-  $ git config --global user.name \"J. Random User\"\r\n-  $ git config --global user.email \"j.random.user@example.com\"\r\n-  ```\r\n-\r\n-Writing good commit logs is important. A commit log should describe what\r\n-changed and why. Follow these guidelines when writing one:\r\n-\r\n-1. The first line should be 50 characters or less and contain a short\r\n-   description of the change including the issue number prefixed by a hash (#).\r\n-2. Keep the second line blank.\r\n-3. Wrap all other lines at 72 columns.\r\n-\r\n-Example of a good commit log:\r\n-\r\n-```\r\n-Fixing Issue #123: make the whatchamajigger work in MarkLogic 9\r\n-\r\n-Body of commit message is a few lines of text, explaining things\r\n-in more detail, possibly giving some background about the issue\r\n-being fixed, etc.\r\n-\r\n-The body of the commit message can be several paragraphs, and\r\n-please do proper word-wrap and keep columns shorter than about\r\n-72 characters or so. That way `git log` will show things\r\n-nicely even when it is indented.\r\n-```\r\n-\r\n-The header line should be meaningful; it is what other people see when they\r\n-run `git shortlog` or `git log --oneline`.\r\n-\r\n-\r\n-#### Rebase your repo\r\n-\r\n-Use `git rebase` (not `git merge`) to sync your work from time to time.\r\n-\r\n-  ```sh\r\n-  $ git fetch upstream\r\n-  $ git rebase upstream/develop\r\n-  ```\r\n-\r\n-\r\n-#### Test your code\r\n-\r\n-- Run the JUnit tests.\r\n-\r\n-  ```sh\r\n-  $ ./gradlew test\r\n-  ```\r\n-\r\n-- To run a single test:\r\n-\r\n-  ```sh\r\n-  $ ./gradlew -Dtest.single=TestName test\r\n-  ```\r\n-\r\n-- For best results, do not include the final word test. For example, suppose you want to run FlowRunnerTest:\r\n-\r\n-  ```sh\r\n-  $ ./gradlew -Dtest.single=FlowRunner test\r\n-  ```\r\n-\r\n-- To run the QuickStart end-to-end tests, you need Node.js 8.9.1 or later and run:\r\n-  ```jshelllanguage\r\n-  gradlew bootrun\r\n-  cd web\r\n-  npm install\r\n-  npm install -g protractor\r\n-  npm run webdriver-update\r\n-  npm run e2e\r\n-  ```\r\n-*Note: For end-to-end (e2e) tests, Data Hub must be running and so must a MarkLogic instance with available appservers for the ports 8010-8014.*\r\n-\r\n-You can run the e2e tests from Intellij or another IDE to perform fullstack debugging. To do so, add a run/debug\r\n-task that runs the script \"e2e\". Make sure to add a 'before launch' task as folows: `npm run \"webdriver-update\"`.\r\n-\r\n-**IMPORTANT: All submitted patches must pass ALL tests.**\r\n-\r\n-\r\n-#### Push your changes\r\n-\r\n-  ```sh\r\n-  $ git push origin my-feature-branch\r\n-  ```\r\n-\r\n-\r\n-#### Agree to the contributor License\r\n-\r\n-Before we can accept and merge your changes, you must sign a [Contributor License Agreement](http://developer.marklogic.com/products/cla). You only need to do this once.\r\n-\r\n-\r\n-#### Submit the pull request\r\n-\r\n-Go to https://github.com/username/marklogic-data-hub and select your feature branch. Click\r\n-the 'Pull Request' button and fill out the form.\r\n-\r\n-Pull requests are usually reviewed within a few days. If you get comments\r\n-that need to be to addressed, apply your changes in a separate commit and push that to your\r\n-feature branch. Post a comment in the pull request afterwards; GitHub does\r\n-not send out notifications when you add commits to existing pull requests.\r\n-\r\n-That's it! Thank you for your contribution!\r\n-\r\n-\r\n-#### After your pull request is merged\r\n-\r\n-After your pull request is merged, you can safely delete your branch and pull the changes\r\n-from the main (upstream) repository:\r\n-\r\n-* Delete the remote branch on GitHub either through the GitHub web UI or your local shell as follows:\r\n-\r\n-    ```shell\r\n-    git push origin --delete my-feature-branch\r\n-    ```\r\n-\r\n-* Check out the develop branch:\r\n-\r\n-    ```shell\r\n-    git checkout develop -f\r\n-    ```\r\n-\r\n-* Delete the local branch:\r\n-\r\n-    ```shell\r\n-    git branch -D my-feature-branch\r\n-    ```\r\n-\r\n-* Update your develop with the latest upstream version:\r\n-\r\n-    ```shell\r\n-    git pull --ff upstream develop\r\n-    ```\r\n-\r\n-[issue tracker]: https://github.com/marklogic/marklogic-data-hub/issues\r\n-[.editorconfig]: http://editorconfig.org/\r\n+# Contributing to MarkLogic Data Hub\n+\n+MarkLogic Data Hub welcomes new contributors. This document will guide you\n+through the process.\n+\n+ - [Issues and Bugs](#found-an-issue)\n+ - [Feature Requests](#want-a-feature)\n+ - [Developing Data Hub](#developing-data-hub)\n+ - [Submission Guidelines](#submission-guidelines)\n+\n+\n+## Found an Issue?\n+If you find a bug in the source code or a mistake in the documentation, you can help us by submitting an issue to our [GitHub Issue Tracker][issue tracker]. Even better, you can submit a Pull Request with a fix for the issue you filed.\n+\n+\n+## Want a Feature?\n+You can request a new feature by submitting an issue to our [GitHub Issue Tracker][issue tracker].  If you\n+would like to implement a new feature then first create a new issue and discuss it with one of our\n+project maintainers.\n+\n+\n+## Developing Data Hub \n+\n+This section describes how to build and test new features and fixes in Data Hub. This includes changes to the following subprojects in this project:\n+\n+- the Data Hub library in ./marklogic-data-hub\n+- the Data Hub Gradle plugin in ./ml-data-hub-plugin\n+- the One-UI web application in ./one-ui\n+- the QuickStart web application in ./web\n+\n+### Prerequisites\n+\n+You need:\n+\n+- MarkLogic Server (see [Version Compatibility](https://docs.marklogic.com/datahub/refs/version-compatibility.html) for the correct version)\n+- Java JDK 9 or later\n+- Gradle 5.x or later\n+\n+### Testing changes to the Data Hub library\n+\n+The source code for the Data Hub library is in the ./marklogic-data-hub subproject. This project contains hundreds of \n+tests, written in JUnit and also written using [marklogic-unit-test](https://github.com/marklogic-community/marklogic-unit-test). \n+While developing, you'll create/modify/run tests to verify the changes that you're making. \n+\n+To run the tests, you first need to deploy a test instance of Data Hub to MarkLogic. The configuration for this instance\n+is in the ./marklogic-data-hub/gradle.properties; you can override these values in gradle-local.properties. Verify\n+that the values for mlSecurityUsername and mlSecurityPassword are correct, as that user will be used to deploy the test\n+instance of Data Hub. Also, ensure that you do not have a Data Hub instance already deployed to the MarkLogic that you \n+will connect to. Then, run the following Gradle task from the root project:\n+\n+    ./gradlew -Pskipui= bootstrap", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI5MTk2OA=="}, "originalCommit": {"oid": "f4463f6b5ed3f3ea5ebd5501a1bc5ef26946a6f3"}, "originalPosition": 476}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3493, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}