{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MjAyOTAx", "number": 3843, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNzo1ODoyN1rODz2jGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODowNToyNFrODz2uHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Njk3NjkwOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/pages/EntityTypes.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNzo1ODoyN1rOGIgy1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNzo1ODoyN1rOGIgy1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU3OTA5Mg==", "bodyText": "Can we please get rid of all the console.log and only have console.error where applicable.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3843#discussion_r411579092", "createdAt": "2020-04-20T17:58:27Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/pages/EntityTypes.tsx", "diffHunk": "@@ -43,18 +47,92 @@ const EntityTypes: React.FC = () => {\n           }\n \n     }\n+\n+  //GET all the flow artifacts\n+  const getFlows = async () => {\n+        try {\n+            let response = await axios.get('/api/flows');\n+            if (response.status === 200) {\n+                setFlows(response.data);\n+                console.log('GET flows successful', response);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f30208c4ea6a4f88d30b2b6c1e2e59256f9777ec"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Njk5NjEyOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/pages/EntityTypes.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODowMzowNlrOGIg-Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODowMzowNlrOGIg-Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU4MjA1MQ==", "bodyText": "Are these specific to loadData?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3843#discussion_r411582051", "createdAt": "2020-04-20T18:03:06Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/pages/EntityTypes.tsx", "diffHunk": "@@ -43,18 +47,92 @@ const EntityTypes: React.FC = () => {\n           }\n \n     }\n+\n+  //GET all the flow artifacts\n+  const getFlows = async () => {\n+        try {\n+            let response = await axios.get('/api/flows');\n+            if (response.status === 200) {\n+                setFlows(response.data);\n+                console.log('GET flows successful', response);\n+            } \n+        } catch (error) {\n+            let message = error.response.data.message;\n+            console.log('Error getting flows', message);\n+        } finally {\n+        resetSessionTime();\n+        }\n+    }\n+\n+  // POST load data step to new flow\n+  const addStepToNew = async () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f30208c4ea6a4f88d30b2b6c1e2e59256f9777ec"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Njk5OTk3OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/pages/EntityTypes.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODowMzo1N1rOGIhAng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODowMzo1N1rOGIhAng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU4MjYyMg==", "bodyText": "Same as above. Is this specific to loadData?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3843#discussion_r411582622", "createdAt": "2020-04-20T18:03:57Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/pages/EntityTypes.tsx", "diffHunk": "@@ -43,18 +47,92 @@ const EntityTypes: React.FC = () => {\n           }\n \n     }\n+\n+  //GET all the flow artifacts\n+  const getFlows = async () => {\n+        try {\n+            let response = await axios.get('/api/flows');\n+            if (response.status === 200) {\n+                setFlows(response.data);\n+                console.log('GET flows successful', response);\n+            } \n+        } catch (error) {\n+            let message = error.response.data.message;\n+            console.log('Error getting flows', message);\n+        } finally {\n+        resetSessionTime();\n+        }\n+    }\n+\n+  // POST load data step to new flow\n+  const addStepToNew = async () => {\n+    try {\n+      setIsLoading(true);\n+      //let response = await axios.post(`/api/artifacts/????/${flowName}`);\n+      \n+      //if (response.status === 200) {\n+        console.log('POST addStepToNew');\n+        setIsLoading(false);\n+      //} \n+    } catch (error) {\n+        let message = error.response.data.message;\n+        console.log('Error while adding load data step to new flow.', message);\n+        setIsLoading(false);\n+        handleError(error);\n+    } finally {\n+      resetSessionTime();\n+    }\n+  }\n+\n+  // POST load data step to existing flow\n+  const addStepToFlow = async (loadArtifactName, flowName) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f30208c4ea6a4f88d30b2b6c1e2e59256f9777ec"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzAwNTEwOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/pages/EntityTypes.tsx", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODowNToyNFrOGIhD3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMToyMzoyOFrOGIoRxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU4MzQ1Mg==", "bodyText": "We should try and refactor api calls under \" marklogic-data-hub-central/ui/src/api/\" for anything that gets committed to develop. I will create a story for refactoring existing axios get and post requests in develop branch.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3843#discussion_r411583452", "createdAt": "2020-04-20T18:05:24Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/pages/EntityTypes.tsx", "diffHunk": "@@ -43,18 +47,92 @@ const EntityTypes: React.FC = () => {\n           }\n \n     }\n+\n+  //GET all the flow artifacts\n+  const getFlows = async () => {\n+        try {\n+            let response = await axios.get('/api/flows');\n+            if (response.status === 200) {\n+                setFlows(response.data);\n+                console.log('GET flows successful', response);\n+            } \n+        } catch (error) {\n+            let message = error.response.data.message;\n+            console.log('Error getting flows', message);\n+        } finally {\n+        resetSessionTime();\n+        }\n+    }\n+\n+  // POST load data step to new flow\n+  const addStepToNew = async () => {\n+    try {\n+      setIsLoading(true);\n+      //let response = await axios.post(`/api/artifacts/????/${flowName}`);\n+      \n+      //if (response.status === 200) {\n+        console.log('POST addStepToNew');\n+        setIsLoading(false);\n+      //} \n+    } catch (error) {\n+        let message = error.response.data.message;\n+        console.log('Error while adding load data step to new flow.', message);\n+        setIsLoading(false);\n+        handleError(error);\n+    } finally {\n+      resetSessionTime();\n+    }\n+  }\n+\n+  // POST load data step to existing flow\n+  const addStepToFlow = async (loadArtifactName, flowName) => {\n+    let stepToAdd = {\n+      \"name\": loadArtifactName,\n+      \"stepDefinitionName\": \"default-ingestion\",\n+      \"stepDefinitionType\": \"INGESTION\",\n+      options: {\n+        \"loadData\": { \n+          \"name\": loadArtifactName\n+        }\n+      }\n+    };\n+    try {\n+      setIsLoading(true);\n+      let url = '/api/flows/' + flowName + '/steps';\n+      let body = stepToAdd;\n+      let response = await axios.post(url, body);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f30208c4ea6a4f88d30b2b6c1e2e59256f9777ec"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYyNjM4Nw==", "bodyText": "Refactoring will be done in separate story", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3843#discussion_r411626387", "createdAt": "2020-04-20T19:15:36Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub-central/ui/src/pages/EntityTypes.tsx", "diffHunk": "@@ -43,18 +47,92 @@ const EntityTypes: React.FC = () => {\n           }\n \n     }\n+\n+  //GET all the flow artifacts\n+  const getFlows = async () => {\n+        try {\n+            let response = await axios.get('/api/flows');\n+            if (response.status === 200) {\n+                setFlows(response.data);\n+                console.log('GET flows successful', response);\n+            } \n+        } catch (error) {\n+            let message = error.response.data.message;\n+            console.log('Error getting flows', message);\n+        } finally {\n+        resetSessionTime();\n+        }\n+    }\n+\n+  // POST load data step to new flow\n+  const addStepToNew = async () => {\n+    try {\n+      setIsLoading(true);\n+      //let response = await axios.post(`/api/artifacts/????/${flowName}`);\n+      \n+      //if (response.status === 200) {\n+        console.log('POST addStepToNew');\n+        setIsLoading(false);\n+      //} \n+    } catch (error) {\n+        let message = error.response.data.message;\n+        console.log('Error while adding load data step to new flow.', message);\n+        setIsLoading(false);\n+        handleError(error);\n+    } finally {\n+      resetSessionTime();\n+    }\n+  }\n+\n+  // POST load data step to existing flow\n+  const addStepToFlow = async (loadArtifactName, flowName) => {\n+    let stepToAdd = {\n+      \"name\": loadArtifactName,\n+      \"stepDefinitionName\": \"default-ingestion\",\n+      \"stepDefinitionType\": \"INGESTION\",\n+      options: {\n+        \"loadData\": { \n+          \"name\": loadArtifactName\n+        }\n+      }\n+    };\n+    try {\n+      setIsLoading(true);\n+      let url = '/api/flows/' + flowName + '/steps';\n+      let body = stepToAdd;\n+      let response = await axios.post(url, body);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU4MzQ1Mg=="}, "originalCommit": {"oid": "f30208c4ea6a4f88d30b2b6c1e2e59256f9777ec"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY5NjQ3NQ==", "bodyText": "Refactoring existing code can be part of a separate story. These are new API requests right?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3843#discussion_r411696475", "createdAt": "2020-04-20T21:14:03Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/pages/EntityTypes.tsx", "diffHunk": "@@ -43,18 +47,92 @@ const EntityTypes: React.FC = () => {\n           }\n \n     }\n+\n+  //GET all the flow artifacts\n+  const getFlows = async () => {\n+        try {\n+            let response = await axios.get('/api/flows');\n+            if (response.status === 200) {\n+                setFlows(response.data);\n+                console.log('GET flows successful', response);\n+            } \n+        } catch (error) {\n+            let message = error.response.data.message;\n+            console.log('Error getting flows', message);\n+        } finally {\n+        resetSessionTime();\n+        }\n+    }\n+\n+  // POST load data step to new flow\n+  const addStepToNew = async () => {\n+    try {\n+      setIsLoading(true);\n+      //let response = await axios.post(`/api/artifacts/????/${flowName}`);\n+      \n+      //if (response.status === 200) {\n+        console.log('POST addStepToNew');\n+        setIsLoading(false);\n+      //} \n+    } catch (error) {\n+        let message = error.response.data.message;\n+        console.log('Error while adding load data step to new flow.', message);\n+        setIsLoading(false);\n+        handleError(error);\n+    } finally {\n+      resetSessionTime();\n+    }\n+  }\n+\n+  // POST load data step to existing flow\n+  const addStepToFlow = async (loadArtifactName, flowName) => {\n+    let stepToAdd = {\n+      \"name\": loadArtifactName,\n+      \"stepDefinitionName\": \"default-ingestion\",\n+      \"stepDefinitionType\": \"INGESTION\",\n+      options: {\n+        \"loadData\": { \n+          \"name\": loadArtifactName\n+        }\n+      }\n+    };\n+    try {\n+      setIsLoading(true);\n+      let url = '/api/flows/' + flowName + '/steps';\n+      let body = stepToAdd;\n+      let response = await axios.post(url, body);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU4MzQ1Mg=="}, "originalCommit": {"oid": "f30208c4ea6a4f88d30b2b6c1e2e59256f9777ec"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcwMTcwMw==", "bodyText": "Adding loadData, mapping and other artifacts to flow will all be using the same endpoint which will be created in that new refactoring storing .", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3843#discussion_r411701703", "createdAt": "2020-04-20T21:23:28Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub-central/ui/src/pages/EntityTypes.tsx", "diffHunk": "@@ -43,18 +47,92 @@ const EntityTypes: React.FC = () => {\n           }\n \n     }\n+\n+  //GET all the flow artifacts\n+  const getFlows = async () => {\n+        try {\n+            let response = await axios.get('/api/flows');\n+            if (response.status === 200) {\n+                setFlows(response.data);\n+                console.log('GET flows successful', response);\n+            } \n+        } catch (error) {\n+            let message = error.response.data.message;\n+            console.log('Error getting flows', message);\n+        } finally {\n+        resetSessionTime();\n+        }\n+    }\n+\n+  // POST load data step to new flow\n+  const addStepToNew = async () => {\n+    try {\n+      setIsLoading(true);\n+      //let response = await axios.post(`/api/artifacts/????/${flowName}`);\n+      \n+      //if (response.status === 200) {\n+        console.log('POST addStepToNew');\n+        setIsLoading(false);\n+      //} \n+    } catch (error) {\n+        let message = error.response.data.message;\n+        console.log('Error while adding load data step to new flow.', message);\n+        setIsLoading(false);\n+        handleError(error);\n+    } finally {\n+      resetSessionTime();\n+    }\n+  }\n+\n+  // POST load data step to existing flow\n+  const addStepToFlow = async (loadArtifactName, flowName) => {\n+    let stepToAdd = {\n+      \"name\": loadArtifactName,\n+      \"stepDefinitionName\": \"default-ingestion\",\n+      \"stepDefinitionType\": \"INGESTION\",\n+      options: {\n+        \"loadData\": { \n+          \"name\": loadArtifactName\n+        }\n+      }\n+    };\n+    try {\n+      setIsLoading(true);\n+      let url = '/api/flows/' + flowName + '/steps';\n+      let body = stepToAdd;\n+      let response = await axios.post(url, body);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU4MzQ1Mg=="}, "originalCommit": {"oid": "f30208c4ea6a4f88d30b2b6c1e2e59256f9777ec"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3419, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}