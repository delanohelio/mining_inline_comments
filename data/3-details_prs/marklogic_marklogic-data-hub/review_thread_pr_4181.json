{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0ODUyNTgw", "number": 4181, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNTozNzo0MVrOELvV7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODoyMjo0MVrOENAaxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNzQ1NDU1OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/artifacts/core.sjs", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNTozNzo0MVrOGtcoaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNTozNzo0MVrOGtcoaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMwODIwMQ==", "bodyText": "Since matching/merging/mastering don't exist yet, I removed them from this constant. They can be added in once those step types are created.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4181#discussion_r450308201", "createdAt": "2020-07-06T15:37:41Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/artifacts/core.sjs", "diffHunk": "@@ -38,39 +38,7 @@ const registeredArtifactTypes = {\n     custom: CustomStep\n };\n \n-function getTypesInfo() {\n-    const typesInfo = [];\n-    for (const artifactType of Object.keys(registeredArtifactTypes)) {\n-        if (registeredArtifactTypes.hasOwnProperty(artifactType)) {\n-            const artifactLibrary = registeredArtifactTypes[artifactType];\n-            const updateRoles = artifactLibrary.getPermissions().filter((perm) => perm.capability === 'update').map((perm) => String(perm.roleId));\n-            const readRoles = artifactLibrary.getPermissions().filter((perm) => perm.capability === 'read').map((perm) => String(perm.roleId));\n-            const currentRoles = xdmp.getCurrentRoles().toArray().map(String);\n-            const manageAdminRolesMustAllMatched = ['manage-admin', 'security'].map((roleName) => String(xdmp.role(roleName)));\n-            const hasManageAdminAndSecurity = manageAdminRolesMustAllMatched.every((role) => currentRoles.indexOf(role) !== -1);\n-            let currentRoleNames = currentRoles.map(roleId => xdmp.roleName(roleId));\n-            let userCanUpdate = false;\n-            if (currentRoleNames.includes('admin') || hasManageAdminAndSecurity) {\n-                userCanUpdate = true;\n-            } else {\n-                userCanUpdate = updateRoles.some((roleId) => currentRoles.includes(roleId));\n-            }\n-            const userCanRead = readRoles.some((roleId) => currentRoles.includes(roleId));\n-            typesInfo.push({\n-                type: artifactType,\n-                fileExtension: getArtifactFileExtension(artifactType),\n-                directory: getArtifactDirectory(artifactType),\n-                nameProperty: artifactLibrary.getNameProperty(),\n-                versionProperty: artifactLibrary.getVersionProperty(),\n-                userCanUpdate: userCanUpdate,\n-                userCanRead: userCanRead\n-            });\n-        }\n-    }\n-    return typesInfo;\n-}\n-\n-const entityServiceDrivenArtifactTypes = ['mapping', 'matching', 'merging', 'mastering', 'custom'];\n+const entityServiceDrivenArtifactTypes = ['mapping', 'custom'];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e328544aa0778573b1af18a5a666730ead3a118"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDczNjI5OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/deploy/commands/LoadUserArtifactsCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODoyMjowOFrOGvcujA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODoyNzowMFrOGvc5CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwNjkyNA==", "bodyText": "/data-hub/5/artifacts/flow.sjs has 'name' as a requiredProperty. Do we need this validation in the client ?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4181#discussion_r452406924", "createdAt": "2020-07-09T18:22:08Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/deploy/commands/LoadUserArtifactsCommand.java", "diffHunk": "@@ -362,23 +290,65 @@ private void loadSteps(DatabaseClient stagingClient) throws IOException {\n         if (stepsPath.toFile().exists()) {\n             ObjectMapper objectMapper = new ObjectMapper();\n             StepService stepService = StepService.on(stagingClient);\n-            for (File stepTypeDir : stepsPath.toFile().listFiles(file -> file.isDirectory())) {\n+            for (File stepTypeDir : stepsPath.toFile().listFiles(File::isDirectory)) {\n                 final String stepType = stepTypeDir.getName();\n                 for (File stepFile : stepTypeDir.listFiles((File d, String name) -> name.endsWith(\".step.json\"))) {\n                     JsonNode step = objectMapper.readTree(stepFile);\n                     if (!step.has(\"name\")) {\n                         throw new RuntimeException(\"Unable to load step from file: \" + stepFile + \"; no 'name' property found\");\n                     }\n                     final String stepName = step.get(\"name\").asText();\n-                    if (logger.isInfoEnabled()) {\n-                        logger.info(format(\"Loading step of type '%s' with name '%s'\", stepType, stepName));\n-                    }\n+                    logger.info(format(\"Loading step of type '%s' with name '%s'\", stepType, stepName));\n                     stepService.saveStep(stepType, step);\n                 }\n             }\n         }\n     }\n \n+    private void loadFlows(DatabaseClient stagingClient) throws IOException {\n+        final Path flowsPath = hubConfig.getHubProject().getFlowsDir();\n+        if (flowsPath.toFile().exists()) {\n+            ObjectMapper objectMapper = new ObjectMapper();\n+            ArtifactService service = ArtifactService.on(stagingClient);\n+            for (File file : flowsPath.toFile().listFiles(f -> f.isFile() && f.getName().endsWith(\".flow.json\"))) {\n+                JsonNode flow = objectMapper.readTree(file);\n+                if (!flow.has(\"name\")) {\n+                    throw new RuntimeException(\"Unable to load flow from file: \" + file + \"; no 'name' property found\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e328544aa0778573b1af18a5a666730ead3a118"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwOTYwOQ==", "bodyText": "Yes, because if name isn't found, then we can't call setArtifact, which requires name as the second parameter.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4181#discussion_r452409609", "createdAt": "2020-07-09T18:27:00Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/deploy/commands/LoadUserArtifactsCommand.java", "diffHunk": "@@ -362,23 +290,65 @@ private void loadSteps(DatabaseClient stagingClient) throws IOException {\n         if (stepsPath.toFile().exists()) {\n             ObjectMapper objectMapper = new ObjectMapper();\n             StepService stepService = StepService.on(stagingClient);\n-            for (File stepTypeDir : stepsPath.toFile().listFiles(file -> file.isDirectory())) {\n+            for (File stepTypeDir : stepsPath.toFile().listFiles(File::isDirectory)) {\n                 final String stepType = stepTypeDir.getName();\n                 for (File stepFile : stepTypeDir.listFiles((File d, String name) -> name.endsWith(\".step.json\"))) {\n                     JsonNode step = objectMapper.readTree(stepFile);\n                     if (!step.has(\"name\")) {\n                         throw new RuntimeException(\"Unable to load step from file: \" + stepFile + \"; no 'name' property found\");\n                     }\n                     final String stepName = step.get(\"name\").asText();\n-                    if (logger.isInfoEnabled()) {\n-                        logger.info(format(\"Loading step of type '%s' with name '%s'\", stepType, stepName));\n-                    }\n+                    logger.info(format(\"Loading step of type '%s' with name '%s'\", stepType, stepName));\n                     stepService.saveStep(stepType, step);\n                 }\n             }\n         }\n     }\n \n+    private void loadFlows(DatabaseClient stagingClient) throws IOException {\n+        final Path flowsPath = hubConfig.getHubProject().getFlowsDir();\n+        if (flowsPath.toFile().exists()) {\n+            ObjectMapper objectMapper = new ObjectMapper();\n+            ArtifactService service = ArtifactService.on(stagingClient);\n+            for (File file : flowsPath.toFile().listFiles(f -> f.isFile() && f.getName().endsWith(\".flow.json\"))) {\n+                JsonNode flow = objectMapper.readTree(file);\n+                if (!flow.has(\"name\")) {\n+                    throw new RuntimeException(\"Unable to load flow from file: \" + file + \"; no 'name' property found\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwNjkyNA=="}, "originalCommit": {"oid": "1e328544aa0778573b1af18a5a666730ead3a118"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDczNzk5OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/deploy/commands/LoadUserArtifactsCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODoyMjo0MVrOGvcvrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODoyNzoxNFrOGvc5iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwNzIxNA==", "bodyText": "Same as previous comment. /data-hub/5/artifacts/stepDefinition.sjs has 'name' as a requiredProperty. Do we need this additional validation in the client ?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4181#discussion_r452407214", "createdAt": "2020-07-09T18:22:41Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/deploy/commands/LoadUserArtifactsCommand.java", "diffHunk": "@@ -362,23 +290,65 @@ private void loadSteps(DatabaseClient stagingClient) throws IOException {\n         if (stepsPath.toFile().exists()) {\n             ObjectMapper objectMapper = new ObjectMapper();\n             StepService stepService = StepService.on(stagingClient);\n-            for (File stepTypeDir : stepsPath.toFile().listFiles(file -> file.isDirectory())) {\n+            for (File stepTypeDir : stepsPath.toFile().listFiles(File::isDirectory)) {\n                 final String stepType = stepTypeDir.getName();\n                 for (File stepFile : stepTypeDir.listFiles((File d, String name) -> name.endsWith(\".step.json\"))) {\n                     JsonNode step = objectMapper.readTree(stepFile);\n                     if (!step.has(\"name\")) {\n                         throw new RuntimeException(\"Unable to load step from file: \" + stepFile + \"; no 'name' property found\");\n                     }\n                     final String stepName = step.get(\"name\").asText();\n-                    if (logger.isInfoEnabled()) {\n-                        logger.info(format(\"Loading step of type '%s' with name '%s'\", stepType, stepName));\n-                    }\n+                    logger.info(format(\"Loading step of type '%s' with name '%s'\", stepType, stepName));\n                     stepService.saveStep(stepType, step);\n                 }\n             }\n         }\n     }\n \n+    private void loadFlows(DatabaseClient stagingClient) throws IOException {\n+        final Path flowsPath = hubConfig.getHubProject().getFlowsDir();\n+        if (flowsPath.toFile().exists()) {\n+            ObjectMapper objectMapper = new ObjectMapper();\n+            ArtifactService service = ArtifactService.on(stagingClient);\n+            for (File file : flowsPath.toFile().listFiles(f -> f.isFile() && f.getName().endsWith(\".flow.json\"))) {\n+                JsonNode flow = objectMapper.readTree(file);\n+                if (!flow.has(\"name\")) {\n+                    throw new RuntimeException(\"Unable to load flow from file: \" + file + \"; no 'name' property found\");\n+                }\n+                final String flowName = flow.get(\"name\").asText();\n+                logger.info(format(\"Loading flow with name '%s'\", flowName));\n+                service.setArtifact(\"flow\", flowName, flow);\n+            }\n+        }\n+    }\n+\n+    private void loadStepDefinitions(DatabaseClient stagingClient) throws IOException {\n+        final Path stepDefsPath = hubConfig.getHubProject().getStepDefinitionsDir();\n+        if (stepDefsPath.toFile().exists()) {\n+            ObjectMapper objectMapper = new ObjectMapper();\n+            ArtifactService service = ArtifactService.on(stagingClient);\n+            for (File typeDir : stepDefsPath.toFile().listFiles(File::isDirectory)) {\n+                final String stepDefType = typeDir.getName();\n+                for (File defDir : typeDir.listFiles(File::isDirectory)) {\n+                    final String stepDefName = defDir.getName();\n+                    File stepDefFile = new File(defDir, stepDefName + \".step.json\");\n+                    if (stepDefFile.exists()) {\n+                        JsonNode stepDef = objectMapper.readTree(stepDefFile);\n+                        if (!stepDef.has(\"name\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e328544aa0778573b1af18a5a666730ead3a118"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwOTczNw==", "bodyText": "Same thing here too, we need it for the second parameter.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4181#discussion_r452409737", "createdAt": "2020-07-09T18:27:14Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/deploy/commands/LoadUserArtifactsCommand.java", "diffHunk": "@@ -362,23 +290,65 @@ private void loadSteps(DatabaseClient stagingClient) throws IOException {\n         if (stepsPath.toFile().exists()) {\n             ObjectMapper objectMapper = new ObjectMapper();\n             StepService stepService = StepService.on(stagingClient);\n-            for (File stepTypeDir : stepsPath.toFile().listFiles(file -> file.isDirectory())) {\n+            for (File stepTypeDir : stepsPath.toFile().listFiles(File::isDirectory)) {\n                 final String stepType = stepTypeDir.getName();\n                 for (File stepFile : stepTypeDir.listFiles((File d, String name) -> name.endsWith(\".step.json\"))) {\n                     JsonNode step = objectMapper.readTree(stepFile);\n                     if (!step.has(\"name\")) {\n                         throw new RuntimeException(\"Unable to load step from file: \" + stepFile + \"; no 'name' property found\");\n                     }\n                     final String stepName = step.get(\"name\").asText();\n-                    if (logger.isInfoEnabled()) {\n-                        logger.info(format(\"Loading step of type '%s' with name '%s'\", stepType, stepName));\n-                    }\n+                    logger.info(format(\"Loading step of type '%s' with name '%s'\", stepType, stepName));\n                     stepService.saveStep(stepType, step);\n                 }\n             }\n         }\n     }\n \n+    private void loadFlows(DatabaseClient stagingClient) throws IOException {\n+        final Path flowsPath = hubConfig.getHubProject().getFlowsDir();\n+        if (flowsPath.toFile().exists()) {\n+            ObjectMapper objectMapper = new ObjectMapper();\n+            ArtifactService service = ArtifactService.on(stagingClient);\n+            for (File file : flowsPath.toFile().listFiles(f -> f.isFile() && f.getName().endsWith(\".flow.json\"))) {\n+                JsonNode flow = objectMapper.readTree(file);\n+                if (!flow.has(\"name\")) {\n+                    throw new RuntimeException(\"Unable to load flow from file: \" + file + \"; no 'name' property found\");\n+                }\n+                final String flowName = flow.get(\"name\").asText();\n+                logger.info(format(\"Loading flow with name '%s'\", flowName));\n+                service.setArtifact(\"flow\", flowName, flow);\n+            }\n+        }\n+    }\n+\n+    private void loadStepDefinitions(DatabaseClient stagingClient) throws IOException {\n+        final Path stepDefsPath = hubConfig.getHubProject().getStepDefinitionsDir();\n+        if (stepDefsPath.toFile().exists()) {\n+            ObjectMapper objectMapper = new ObjectMapper();\n+            ArtifactService service = ArtifactService.on(stagingClient);\n+            for (File typeDir : stepDefsPath.toFile().listFiles(File::isDirectory)) {\n+                final String stepDefType = typeDir.getName();\n+                for (File defDir : typeDir.listFiles(File::isDirectory)) {\n+                    final String stepDefName = defDir.getName();\n+                    File stepDefFile = new File(defDir, stepDefName + \".step.json\");\n+                    if (stepDefFile.exists()) {\n+                        JsonNode stepDef = objectMapper.readTree(stepDefFile);\n+                        if (!stepDef.has(\"name\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwNzIxNA=="}, "originalCommit": {"oid": "1e328544aa0778573b1af18a5a666730ead3a118"}, "originalPosition": 162}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3962, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}