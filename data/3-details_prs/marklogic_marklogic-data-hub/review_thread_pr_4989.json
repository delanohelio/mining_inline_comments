{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM3Mzg4NTY2", "number": 4989, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMToyMjoxM1rOFENOqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMzo0MjoyMlrOFE_Qag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTU1MzY5OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/builtins/steps/mapping/entity-services/xquery-lib.xqy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMToyMjoxM1rOIEOpYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMDoxNDo0OFrOIEXUmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMwNTE4Nw==", "bodyText": "Since the if condition returns an empty sequence, this could be changed to a where clause with a not().", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4989#discussion_r541305187", "createdAt": "2020-12-11T21:22:13Z", "author": {"login": "ryanjdew"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/builtins/steps/mapping/entity-services/xquery-lib.xqy", "diffHunk": "@@ -61,8 +62,34 @@ declare function data-hub-map-to-canonical(\n     else map:map()=>map:with(\"template\", $target-entity-name)\n   let $results :=\n     xdmp:xslt-invoke($mapping-uri||\".xslt\", $input, $user-params, $parms)\n+  let $x := xdmp:log($results)\n   return\n     if ($format=\"xml\")\n     then inst:canonical-xml($results)\n-    else inst:canonical-json($results)\n+    else(\n+      let $element := $results/element()\n+      return\n+      (: This change is necessitated by DHFPROD-6219. In case the entity doesn't have strucutred properties, it\n+         returns empty json object. If it has structured properties, the empty structured properties are removed.\n+         inst:canonical-json() method introduces the '$ref' .  :)\n+      if (empty($element/*)) then\n+        document{json:object()=>map:with(string(fn:node-name($element)), json:object())}\n+      else\n+        inst:canonical-json(xquery-lib:clean-xml($element))\n+    )\n+};\n+\n+\n+declare function clean-xml($element as item()*) as document-node() {\n+  document{\n+    element {fn:node-name($element)} {\n+      $element/namespace::node(),\n+      $element/@*,\n+      for $child in $element/element()\n+      return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "472b3de3aa5f7fbc5f0b86ac804a2a893860d9a3"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ0NzMyMw==", "bodyText": "Added a where clause with a not()", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4989#discussion_r541447323", "createdAt": "2020-12-12T00:14:48Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/builtins/steps/mapping/entity-services/xquery-lib.xqy", "diffHunk": "@@ -61,8 +62,34 @@ declare function data-hub-map-to-canonical(\n     else map:map()=>map:with(\"template\", $target-entity-name)\n   let $results :=\n     xdmp:xslt-invoke($mapping-uri||\".xslt\", $input, $user-params, $parms)\n+  let $x := xdmp:log($results)\n   return\n     if ($format=\"xml\")\n     then inst:canonical-xml($results)\n-    else inst:canonical-json($results)\n+    else(\n+      let $element := $results/element()\n+      return\n+      (: This change is necessitated by DHFPROD-6219. In case the entity doesn't have strucutred properties, it\n+         returns empty json object. If it has structured properties, the empty structured properties are removed.\n+         inst:canonical-json() method introduces the '$ref' .  :)\n+      if (empty($element/*)) then\n+        document{json:object()=>map:with(string(fn:node-name($element)), json:object())}\n+      else\n+        inst:canonical-json(xquery-lib:clean-xml($element))\n+    )\n+};\n+\n+\n+declare function clean-xml($element as item()*) as document-node() {\n+  document{\n+    element {fn:node-name($element)} {\n+      $element/namespace::node(),\n+      $element/@*,\n+      for $child in $element/element()\n+      return", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMwNTE4Nw=="}, "originalCommit": {"oid": "472b3de3aa5f7fbc5f0b86ac804a2a893860d9a3"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNDQxMjA3OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/builtins/steps/mapping/entity-services/xquery-lib.xqy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxNToxNzozMlrOIE1tKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxNToxNzozMlrOIE1tKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0NTEyOA==", "bodyText": "Let's call this something more descriptive than \"clean\", which doesn't describe what it's doing. I think your comment indicates what the function name should be - perhaps \"remove-empty-structured-properties\"?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4989#discussion_r541945128", "createdAt": "2020-12-13T15:17:32Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/builtins/steps/mapping/entity-services/xquery-lib.xqy", "diffHunk": "@@ -64,5 +65,28 @@ declare function data-hub-map-to-canonical(\n   return\n     if ($format=\"xml\")\n     then inst:canonical-xml($results)\n-    else inst:canonical-json($results)\n+    else(\n+      let $element := $results/element()\n+      return\n+      (: This change is necessitated by DHFPROD-6219. In case the entity doesn't have strucutred properties, it\n+         returns empty json object. If it has structured properties, the empty structured properties are removed.\n+         inst:canonical-json() method introduces the '$ref' .  :)\n+      if (empty($element/*)) then\n+        document{json:object()=>map:with(string(fn:node-name($element)), json:object())}\n+      else\n+        inst:canonical-json(xquery-lib:clean-xml($element))\n+    )\n+};\n+\n+\n+declare function clean-xml($element as item()*) as document-node() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd7ee1fa8eb7070fd697fcb9306691c7a8f9910d"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNDQxNTMyOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/builtins/steps/mapping/entity-services/test-data/mappings/CustomerMapping/CustomerMapping-1.mapping.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxNToxOToyOFrOIE1umg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxNToxOToyOFrOIE1umg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0NTQ5OA==", "bodyText": "These aren't really invalid, they're just missing, right? \"invalid\" implies to me that some sort of error should be thrown.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4989#discussion_r541945498", "createdAt": "2020-12-13T15:19:28Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/builtins/steps/mapping/entity-services/test-data/mappings/CustomerMapping/CustomerMapping-1.mapping.json", "diffHunk": "@@ -0,0 +1,15 @@\n+{\n+  \"lang\": \"zxx\",\n+  \"name\": \"CustomerMapping\",\n+  \"description\": \"This is intentionally mapping with invalid source properties\",\n+  \"version\": 1,\n+  \"targetEntityType\": \"http://marklogic.com/data-hub/example/CustomerType-0.0.1/CustomerType\",\n+  \"properties\": {\n+    \"id\": {\n+      \"sourcedFrom\": \"invalidProp1\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd7ee1fa8eb7070fd697fcb9306691c7a8f9910d"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNDQxODYxOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/builtins/steps/mapping/entity-services/test-data/mappings/OrdersMapping/OrdersMapping-4.mapping.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxNToyMTo0MFrOIE1wDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMjoyOTo0OVrOIE9YIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0NTg3MQ==", "bodyText": "Do we need anything more than id and customer here? If not, let's remove these other mapping expressions, as they complicate the test. We want the bare minimum of everything to isolate the problem and verify it's fixed.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4989#discussion_r541945871", "createdAt": "2020-12-13T15:21:40Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/builtins/steps/mapping/entity-services/test-data/mappings/OrdersMapping/OrdersMapping-4.mapping.json", "diffHunk": "@@ -0,0 +1,37 @@\n+{\n+  \"lang\": \"zxx\",\n+  \"name\": \"OrdersMapping\",\n+  \"description\": \"The structured properties are mapped to invalid properties\",\n+  \"version\": 4,\n+  \"targetEntityType\": \"http://marklogic.com/data-hub/example/OrderType-0.0.1/OrderType\",\n+  \"sourceContext\": \"/\",\n+  \"properties\": {\n+    \"id\": {\n+      \"sourcedFrom\": \"id\"\n+    },\n+    \"purchaseDate\": {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd7ee1fa8eb7070fd697fcb9306691c7a8f9910d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA3MDgxOQ==", "bodyText": "\"items\" is of type 'array'. I want to make sure it works fine as well.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4989#discussion_r542070819", "createdAt": "2020-12-14T02:29:49Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/builtins/steps/mapping/entity-services/test-data/mappings/OrdersMapping/OrdersMapping-4.mapping.json", "diffHunk": "@@ -0,0 +1,37 @@\n+{\n+  \"lang\": \"zxx\",\n+  \"name\": \"OrdersMapping\",\n+  \"description\": \"The structured properties are mapped to invalid properties\",\n+  \"version\": 4,\n+  \"targetEntityType\": \"http://marklogic.com/data-hub/example/OrderType-0.0.1/OrderType\",\n+  \"sourceContext\": \"/\",\n+  \"properties\": {\n+    \"id\": {\n+      \"sourcedFrom\": \"id\"\n+    },\n+    \"purchaseDate\": {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0NTg3MQ=="}, "originalCommit": {"oid": "fd7ee1fa8eb7070fd697fcb9306691c7a8f9910d"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNDQxOTEzOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/builtins/steps/mapping/entity-services/test-data/mappings/OrdersMapping/OrdersMapping-4.mapping.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxNToyMTo1OFrOIE1wSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxNToyMTo1OFrOIE1wSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0NTkzMQ==", "bodyText": "This doesn't look right - shouldn't \"items\" either be under \"customer/properties\" or at the same level as \"customer\"?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4989#discussion_r541945931", "createdAt": "2020-12-13T15:21:58Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/builtins/steps/mapping/entity-services/test-data/mappings/OrdersMapping/OrdersMapping-4.mapping.json", "diffHunk": "@@ -0,0 +1,37 @@\n+{\n+  \"lang\": \"zxx\",\n+  \"name\": \"OrdersMapping\",\n+  \"description\": \"The structured properties are mapped to invalid properties\",\n+  \"version\": 4,\n+  \"targetEntityType\": \"http://marklogic.com/data-hub/example/OrderType-0.0.1/OrderType\",\n+  \"sourceContext\": \"/\",\n+  \"properties\": {\n+    \"id\": {\n+      \"sourcedFrom\": \"id\"\n+    },\n+    \"purchaseDate\": {\n+      \"sourcedFrom\": \"parseDate(transactionDate, 'MM/DD/YYYY')\"\n+    },\n+    \"orderCost\": {\n+      \"sourcedFrom\": \"sum(items ! (quantity * price))\"\n+    },\n+    \"customer\": {\n+      \"targetEntityType\": \"http://marklogic.com/data-hub/example/CustomerType-0.0.1/CustomerType\",\n+      \"sourcedFrom\": \"customer\",\n+      \"properties\": {\n+        \"firstname\": {\n+          \"sourcedFrom\": \"invalidFirstName\"\n+        }\n+      },\n+      \"items\": {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd7ee1fa8eb7070fd697fcb9306691c7a8f9910d"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNDQyMDYwOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/builtins/steps/mapping/entity-services/runEmptyMapping.sjs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxNToyMjo0MVrOIE1w6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxNToyMjo0MVrOIE1w6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0NjA4OA==", "bodyText": "Same as above, use the simplest input doc possible to verify the problem is fixed.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4989#discussion_r541946088", "createdAt": "2020-12-13T15:22:41Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/builtins/steps/mapping/entity-services/runEmptyMapping.sjs", "diffHunk": "@@ -0,0 +1,35 @@\n+const mapping = require(\"/data-hub/5/builtins/steps/mapping/entity-services/main.sjs\");\n+const test = require(\"/test/test-helper.xqy\");\n+\n+let assertions = [];\n+function runStructuredPropertyMapping () {\n+  let doc = fn.head(xdmp.unquote(`{\"id\":1,\"transactionDate\":\"12/7/2019\",\"customer\":{\"firstName\":\"Oralia\",\"lastName\":\"Dinesen\",\"gender\":\"F\"},\"items\":[{\"name\":\"Voltsillam\",\"price\":2.0,\"quantity\":7},{\"name\":\"Latlux\",\"price\":7.17,\"quantity\":10},{\"name\":\"Biodex\",\"price\":5.01,\"quantity\":2},{\"name\":\"Fixflex\",\"price\":8.77,\"quantity\":6},{\"name\":\"Keylex\",\"price\":5.57,\"quantity\":3}]}`));\n+  let result = mapping.main({uri: '/test.json', value: doc}, {\n+    mapping: {name: 'OrdersMapping', version: 4},\n+    outputFormat: 'json'\n+  }).value.root;\n+  let instance = result.envelope.instance;\n+  assertions = assertions.concat([\n+    test.assertEqual(null, instance.OrderType.customer),\n+    test.assertEqual(null, instance.OrderType.items),\n+    test.assertEqual(\"1\", fn.string(instance.OrderType.id)),\n+    test.assertEqual('2019-12-07', fn.string(instance.OrderType.purchaseDate))\n+  ]);\n+}\n+\n+function runSimplePropertyMapping() {\n+  let doc = fn.head(xdmp.unquote(`{\"id\":1,\"transactionDate\":\"12/7/2019\",\"customer\":{\"firstName\":\"Oralia\",\"lastName\":\"Dinesen\",\"gender\":\"F\"},\"items\":[{\"name\":\"Voltsillam\",\"price\":2.0,\"quantity\":7},{\"name\":\"Latlux\",\"price\":7.17,\"quantity\":10},{\"name\":\"Biodex\",\"price\":5.01,\"quantity\":2},{\"name\":\"Fixflex\",\"price\":8.77,\"quantity\":6},{\"name\":\"Keylex\",\"price\":5.57,\"quantity\":3}]}`));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd7ee1fa8eb7070fd697fcb9306691c7a8f9910d"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNDQyMTA4OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/builtins/steps/mapping/entity-services/runEmptyMapping.sjs", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxNToyMjo1OFrOIE1xJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMjozNToxN1rOIE9dmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0NjE1MA==", "bodyText": "Let's simplify the input doc to the bare minimum here - no transactionDate needed, and only need one item.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4989#discussion_r541946150", "createdAt": "2020-12-13T15:22:58Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/builtins/steps/mapping/entity-services/runEmptyMapping.sjs", "diffHunk": "@@ -0,0 +1,35 @@\n+const mapping = require(\"/data-hub/5/builtins/steps/mapping/entity-services/main.sjs\");\n+const test = require(\"/test/test-helper.xqy\");\n+\n+let assertions = [];\n+function runStructuredPropertyMapping () {\n+  let doc = fn.head(xdmp.unquote(`{\"id\":1,\"transactionDate\":\"12/7/2019\",\"customer\":{\"firstName\":\"Oralia\",\"lastName\":\"Dinesen\",\"gender\":\"F\"},\"items\":[{\"name\":\"Voltsillam\",\"price\":2.0,\"quantity\":7},{\"name\":\"Latlux\",\"price\":7.17,\"quantity\":10},{\"name\":\"Biodex\",\"price\":5.01,\"quantity\":2},{\"name\":\"Fixflex\",\"price\":8.77,\"quantity\":6},{\"name\":\"Keylex\",\"price\":5.57,\"quantity\":3}]}`));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd7ee1fa8eb7070fd697fcb9306691c7a8f9910d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA3MjIxOQ==", "bodyText": "Removed transactionDate, added 2 items so as to ensure all instances of it get removes from '$results' obtained by calling xdmp:xslt-invoke in line 64.\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OrderType xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:map=\"http://marklogic.com/xdmp/map\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n  <id xsi:type=\"xs:string\">1</id>\n  <customer>\n    <CustomerType/>\n  </customer>\n  <items datatype=\"array\">\n    <ItemType/>\n  </items>\n  <items datatype=\"array\">\n    <ItemType/>\n  </items>\n</OrderType>", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4989#discussion_r542072219", "createdAt": "2020-12-14T02:35:17Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/builtins/steps/mapping/entity-services/runEmptyMapping.sjs", "diffHunk": "@@ -0,0 +1,35 @@\n+const mapping = require(\"/data-hub/5/builtins/steps/mapping/entity-services/main.sjs\");\n+const test = require(\"/test/test-helper.xqy\");\n+\n+let assertions = [];\n+function runStructuredPropertyMapping () {\n+  let doc = fn.head(xdmp.unquote(`{\"id\":1,\"transactionDate\":\"12/7/2019\",\"customer\":{\"firstName\":\"Oralia\",\"lastName\":\"Dinesen\",\"gender\":\"F\"},\"items\":[{\"name\":\"Voltsillam\",\"price\":2.0,\"quantity\":7},{\"name\":\"Latlux\",\"price\":7.17,\"quantity\":10},{\"name\":\"Biodex\",\"price\":5.01,\"quantity\":2},{\"name\":\"Fixflex\",\"price\":8.77,\"quantity\":6},{\"name\":\"Keylex\",\"price\":5.57,\"quantity\":3}]}`));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0NjE1MA=="}, "originalCommit": {"oid": "fd7ee1fa8eb7070fd697fcb9306691c7a8f9910d"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNzc1MDE4OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/builtins/steps/mapping/entity-services/runEmptyMapping.sjs", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMzo0MjoyMlrOIFQ_PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMzo0MjoyMlrOIFQ_PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM5MjEyNQ==", "bodyText": "This is fine - no need to change - but a comment like this is best expressed as the assertion message - e.g.\ntest.assertEqual(null, instance.CustomerType, \"Since none of the Customer properties are mapped, it should not exist in the entity instance\");\n\nThere are two benefits to this:\n\nIf the test fails, we get a nice message as opposed to just that something isn't null\nIf the logic changes, or if the code is reorganized, the assertion message is almost guaranteed to stay in sync with the code, while the comment may not get updated or may not get moved", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4989#discussion_r542392125", "createdAt": "2020-12-14T13:42:22Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/builtins/steps/mapping/entity-services/runEmptyMapping.sjs", "diffHunk": "@@ -0,0 +1,37 @@\n+const mapping = require(\"/data-hub/5/builtins/steps/mapping/entity-services/main.sjs\");\n+const test = require(\"/test/test-helper.xqy\");\n+\n+let assertions = [];\n+\n+//Only 'id' is mapped. Other properties shouldn't be present in entity instance\n+function runStructuredPropertyMapping () {\n+  let doc = fn.head(xdmp.unquote(`{\"id\":1,\"customer\":{\"firstName\":\"Oralia\"},\"items\":[{\"name\":\"Voltsillam\"},{\"name\":\"Latlux\"}]}`));\n+  let result = mapping.main({uri: '/test.json', value: doc}, {\n+    mapping: {name: 'OrdersMapping', version: 4},\n+    outputFormat: 'json'\n+  }).value.root;\n+  let instance = result.envelope.instance;\n+  assertions = assertions.concat([\n+    test.assertEqual(null, instance.OrderType.customer),\n+    test.assertEqual(null, instance.OrderType.items),\n+    test.assertEqual(\"1\", fn.string(instance.OrderType.id))\n+  ]);\n+}\n+\n+//None of the entity properties are mapped, so 'CustomerType' shouldn't be present in entity instance", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44a181f72325839e795b6212a1a7b48680fa15b8"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3045, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}