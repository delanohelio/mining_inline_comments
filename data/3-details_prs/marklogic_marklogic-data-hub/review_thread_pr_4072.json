{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxNDcyNzYz", "number": 4072, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDozODozNFrOED6Xnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODo1ODoxNVrOEEA7ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTM3NTAzOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/impl/CreatedOnFacetHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDozODozNFrOGhNVzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDozODozNFrOGhNVzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ3NDc2NA==", "bodyText": "To make this code easier to understand, move the guts of each case into a private method. That'll slim down this method - which I also think should be protected (if you want to access it via a unit test) or private, definitely not public.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4072#discussion_r437474764", "createdAt": "2020-06-09T14:38:34Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/impl/CreatedOnFacetHandler.java", "diffHunk": "@@ -21,33 +21,91 @@\n import com.marklogic.hub.central.entities.search.Constants;\n import com.marklogic.hub.central.entities.search.FacetHandler;\n import com.marklogic.hub.central.entities.search.models.DocSearchQueryInfo;\n+import com.marklogic.hub.central.exceptions.DataHubException;\n \n import java.time.LocalDate;\n import java.time.ZoneId;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeParseException;\n+import java.time.temporal.TemporalAdjusters;\n+import java.util.HashMap;\n+import java.util.Map;\n \n public class CreatedOnFacetHandler implements FacetHandler {\n \n-    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n-    private static final DateTimeFormatter DATE_TIME_FORMAT = DateTimeFormatter\n-            .ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+    public static final DateTimeFormatter DATE_TIME_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n \n     @Override\n     public StructuredQueryDefinition buildQuery(DocSearchQueryInfo.FacetData data, StructuredQueryBuilder queryBuilder) {\n-        // Converting the date in string format from yyyy-MM-dd format to yyyy-MM-dd HH:mm:ss format\n-        LocalDate startDate = LocalDate.parse(data.getRangeValues().getLowerBound(), DATE_FORMAT);\n-        String startDateTime = startDate.atStartOfDay(ZoneId.systemDefault())\n-                .format(DATE_TIME_FORMAT);\n+        Map<String, String> dateRange = computeDateRange(data);\n+        return queryBuilder.and(\n+            queryBuilder.rangeConstraint(Constants.CREATED_ON_CONSTRAINT_NAME, StructuredQueryBuilder.Operator.GE, dateRange.get(\"startDateTime\")),\n+            queryBuilder.rangeConstraint(Constants.CREATED_ON_CONSTRAINT_NAME, StructuredQueryBuilder.Operator.LT, dateRange.get(\"endDateTime\"))\n+        );\n+    }\n+\n+    public Map<String, String> computeDateRange(DocSearchQueryInfo.FacetData data) {\n+        Map<String, String> dateRange = new HashMap<>();\n+        String timeRange = \"Custom\";\n+        int zoneOffset = 0;\n+\n+        if(data.getStringValues().size() > 0) {\n+            timeRange = data.getStringValues().get(0);\n+        }\n+\n+        if(data.getStringValues().size() > 1) {\n+            zoneOffset = Integer.parseInt(data.getStringValues().get(1));\n+        }\n+\n+        ZoneId zoneId = ZoneId.ofOffset(\"UTC\", ZoneOffset.ofTotalSeconds(zoneOffset*60));\n+        ZonedDateTime startDate = LocalDate.now().atStartOfDay(zoneId);\n+        ZonedDateTime endDate = LocalDate.now().atStartOfDay(zoneId);\n+        String startDateTime;\n+        String endDateTime;\n+\n+        switch (timeRange) {\n+            case \"Today\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9c2930e0a4ae2d2af0cf526bfbf189021d7385d"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTM4NDUyOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/entities/search/impl/CreatedOnFacetHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDo0MDozNVrOGhNb3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDo0MDozNVrOGhNb3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ3NjMxNw==", "bodyText": "Because you have 4 cases in your switch in the implementation, I'd expect at least 4 separate test methods. And because of the presence of \"if\" and \"try\" blocks for \"Custom\", I'd expect multiple test methods for that case, one for each scenario. This will be much more readable than one long test that covers different scenarios, and it'll be easier to debug if/when one of the scenarios breaks.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4072#discussion_r437476317", "createdAt": "2020-06-09T14:40:35Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/entities/search/impl/CreatedOnFacetHandlerTest.java", "diffHunk": "@@ -32,10 +41,73 @@ public void testCreatedOnDateRangeFacet() {\n         Fragment fragment = toFragment(queryDefinition);\n \n         assertEquals(Arrays.asList(constraintName, constraintName), fragment.getElementValues(\"//search:constraint-name\"));\n-        assertTrue(fragment.getElementValue(\"//search:value[../search:range-operator='GE']\").contains(lowerBound),\n-                \"Expected lower bound to include: \" + lowerBound);\n+        assertTrue(fragment.getElementValue(\"//search:value[../search:range-operator='GE']\").contains(expectedLowerBound),\n+                \"Expected lower bound to include: \" + expectedLowerBound);\n         assertTrue(fragment.getElementValue(\"//search:value[../search:range-operator='LT']\").contains(expectedUpperBound),\n                 \"Upper bound is one day more than what was passed in order to include the passed in date as well\" +\n                         \" for comparison. Expected upper bound to include: \" + expectedUpperBound);\n     }\n+\n+    @Test\n+    public void testComputeDateRangeTimeWindows() {\n+        String zoneOffset = \"-420\";\n+        ZoneId zoneId = ZoneId.ofOffset(\"UTC\", ZoneOffset.ofTotalSeconds(Integer.parseInt(zoneOffset)*60));\n+        DocSearchQueryInfo.FacetData facetData = new DocSearchQueryInfo.FacetData();\n+        DocSearchQueryInfo.RangeValues rangeValues = new DocSearchQueryInfo.RangeValues();\n+\n+        // For time window Today.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9c2930e0a4ae2d2af0cf526bfbf189021d7385d"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTkxMjQ3OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/impl/CreatedOnFacetHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjoyNzowNFrOGhSrJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjoyNzowNFrOGhSrJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2MjE1MA==", "bodyText": "These can't be class fields, because EntitySearchManager is storing one instance of it in a static map that is used for all threads. So we'll get thread-safety issues on this and possibly incorrect results.\nA good rule of thumb is that if you have a set of fields that are associated with one another, toss them into a class. So instead of making these class fields of CreatedOnFacetHandler, make an e.g. CreatedOnFacetInputs class and create a new instance of that when buildQuery is called, and then pass it to each case method. This avoids thread-safety issues and reduces the amount of state (which is generally good - the more state, the more problems there are).", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4072#discussion_r437562150", "createdAt": "2020-06-09T16:27:04Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/impl/CreatedOnFacetHandler.java", "diffHunk": "@@ -21,33 +21,115 @@\n import com.marklogic.hub.central.entities.search.Constants;\n import com.marklogic.hub.central.entities.search.FacetHandler;\n import com.marklogic.hub.central.entities.search.models.DocSearchQueryInfo;\n+import com.marklogic.hub.central.exceptions.DataHubException;\n \n import java.time.LocalDate;\n import java.time.ZoneId;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeParseException;\n+import java.time.temporal.TemporalAdjusters;\n+import java.util.HashMap;\n+import java.util.Map;\n \n public class CreatedOnFacetHandler implements FacetHandler {\n \n-    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n-    private static final DateTimeFormatter DATE_TIME_FORMAT = DateTimeFormatter\n-            .ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+    public static final DateTimeFormatter DATE_TIME_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n+\n+    int zoneOffset = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98a962250cc0279bce03c6964798548980619a26"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTkxNTAxOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/entities/search/impl/CreatedOnFacetHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjoyNzo0NlrOGhSs7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjoyNzo0NlrOGhSs7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2MjYwNg==", "bodyText": "Storing these as class fields is fine because we don't have to worry about multiple threads running this same test instance.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4072#discussion_r437562606", "createdAt": "2020-06-09T16:27:46Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/entities/search/impl/CreatedOnFacetHandlerTest.java", "diffHunk": "@@ -4,38 +4,171 @@\n import com.marklogic.client.query.StructuredQueryDefinition;\n import com.marklogic.hub.central.entities.search.Constants;\n import com.marklogic.hub.central.entities.search.models.DocSearchQueryInfo;\n+import com.marklogic.hub.central.exceptions.DataHubException;\n import com.marklogic.rest.util.Fragment;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n+import java.time.Duration;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public class CreatedOnFacetHandlerTest extends AbstractFacetHandlerTest {\n \n+    List<String> stringValues;\n+    Map<String, String> dateRange;\n+\n+    CreatedOnFacetHandler createdOnFacetHandler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98a962250cc0279bce03c6964798548980619a26"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjMwMjg4OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/impl/CreatedOnFacetHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODoxNjoxMFrOGhWnqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODoxNjoxMFrOGhWnqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYyNjc5NA==", "bodyText": "It's fine to pass CreatedOnFacetInputs in here, but you don't really need to because the caller doesn't care about it. You can just instantiate it within this method. No need to change though.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4072#discussion_r437626794", "createdAt": "2020-06-09T18:16:10Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/impl/CreatedOnFacetHandler.java", "diffHunk": "@@ -21,33 +21,113 @@\n import com.marklogic.hub.central.entities.search.Constants;\n import com.marklogic.hub.central.entities.search.FacetHandler;\n import com.marklogic.hub.central.entities.search.models.DocSearchQueryInfo;\n+import com.marklogic.hub.central.exceptions.DataHubException;\n \n import java.time.LocalDate;\n import java.time.ZoneId;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeParseException;\n+import java.time.temporal.TemporalAdjusters;\n+import java.util.HashMap;\n+import java.util.Map;\n \n public class CreatedOnFacetHandler implements FacetHandler {\n \n-    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n-    private static final DateTimeFormatter DATE_TIME_FORMAT = DateTimeFormatter\n-            .ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+    public static final DateTimeFormatter DATE_TIME_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n \n     @Override\n     public StructuredQueryDefinition buildQuery(DocSearchQueryInfo.FacetData data, StructuredQueryBuilder queryBuilder) {\n-        // Converting the date in string format from yyyy-MM-dd format to yyyy-MM-dd HH:mm:ss format\n-        LocalDate startDate = LocalDate.parse(data.getRangeValues().getLowerBound(), DATE_FORMAT);\n-        String startDateTime = startDate.atStartOfDay(ZoneId.systemDefault())\n-                .format(DATE_TIME_FORMAT);\n+        Map<String, String> dateRange = computeDateRange(data, new CreatedOnFacetInputs());\n+        return queryBuilder.and(\n+            queryBuilder.rangeConstraint(Constants.CREATED_ON_CONSTRAINT_NAME, StructuredQueryBuilder.Operator.GE, dateRange.get(\"startDateTime\")),\n+            queryBuilder.rangeConstraint(Constants.CREATED_ON_CONSTRAINT_NAME, StructuredQueryBuilder.Operator.LT, dateRange.get(\"endDateTime\"))\n+        );\n+    }\n+\n+    protected Map<String, String> computeDateRange(DocSearchQueryInfo.FacetData data, CreatedOnFacetInputs facetInputs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "defc8dfb28db7d03a504f371e09205be156e3bf0"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjQ0Nzg1OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/impl/CreatedOnFacetHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODo1NzozMVrOGhYEAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxOTozMTowNFrOGhZJ_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY1MDQzMg==", "bodyText": "Method getTodayTimeWindow also uses the same code, maybe we can extract common code into a method.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4072#discussion_r437650432", "createdAt": "2020-06-09T18:57:31Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/impl/CreatedOnFacetHandler.java", "diffHunk": "@@ -21,33 +21,113 @@\n import com.marklogic.hub.central.entities.search.Constants;\n import com.marklogic.hub.central.entities.search.FacetHandler;\n import com.marklogic.hub.central.entities.search.models.DocSearchQueryInfo;\n+import com.marklogic.hub.central.exceptions.DataHubException;\n \n import java.time.LocalDate;\n import java.time.ZoneId;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeParseException;\n+import java.time.temporal.TemporalAdjusters;\n+import java.util.HashMap;\n+import java.util.Map;\n \n public class CreatedOnFacetHandler implements FacetHandler {\n \n-    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n-    private static final DateTimeFormatter DATE_TIME_FORMAT = DateTimeFormatter\n-            .ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+    public static final DateTimeFormatter DATE_TIME_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n \n     @Override\n     public StructuredQueryDefinition buildQuery(DocSearchQueryInfo.FacetData data, StructuredQueryBuilder queryBuilder) {\n-        // Converting the date in string format from yyyy-MM-dd format to yyyy-MM-dd HH:mm:ss format\n-        LocalDate startDate = LocalDate.parse(data.getRangeValues().getLowerBound(), DATE_FORMAT);\n-        String startDateTime = startDate.atStartOfDay(ZoneId.systemDefault())\n-                .format(DATE_TIME_FORMAT);\n+        Map<String, String> dateRange = computeDateRange(data, new CreatedOnFacetInputs());\n+        return queryBuilder.and(\n+            queryBuilder.rangeConstraint(Constants.CREATED_ON_CONSTRAINT_NAME, StructuredQueryBuilder.Operator.GE, dateRange.get(\"startDateTime\")),\n+            queryBuilder.rangeConstraint(Constants.CREATED_ON_CONSTRAINT_NAME, StructuredQueryBuilder.Operator.LT, dateRange.get(\"endDateTime\"))\n+        );\n+    }\n+\n+    protected Map<String, String> computeDateRange(DocSearchQueryInfo.FacetData data, CreatedOnFacetInputs facetInputs) {\n+\n+        if(data.getStringValues().size() > 0) {\n+            facetInputs.timeRange = data.getStringValues().get(0);\n+        }\n+\n+        if(data.getStringValues().size() > 1) {\n+            facetInputs.zoneOffset = Integer.parseInt(data.getStringValues().get(1));\n+        }\n+\n+        facetInputs.zoneId = ZoneId.ofOffset(\"UTC\", ZoneOffset.ofTotalSeconds(facetInputs.zoneOffset*60));\n+        facetInputs.startDate = LocalDate.now().atStartOfDay(facetInputs.zoneId);\n+        facetInputs.endDate = LocalDate.now().atStartOfDay(facetInputs.zoneId);\n+\n+        switch (facetInputs.timeRange) {\n+            case \"Today\":\n+                getTodayTimeWindow(facetInputs);\n+                break;\n+\n+            case \"This Week\":\n+                getThisWeekTimeWindow(facetInputs);\n+                break;\n+\n+            case \"This Month\":\n+                getThisMonthTimeWindow(facetInputs);\n+                break;\n \n-        // Converting the date in string format from yyyy-MM-dd format to yyyy-MM-dd HH:mm:ss format\n-        // Adding 1 day to end date to get docs harmonized on the end date as well.\n-        LocalDate endDate = LocalDate.parse(data.getRangeValues().getUpperBound(), DATE_FORMAT)\n-                .plusDays(1);\n-        String endDateTime = endDate.atStartOfDay(ZoneId.systemDefault()).format(DATE_TIME_FORMAT);\n+            case \"Custom\":\n+                getCustomTimeWindow(data, facetInputs);\n+                break;\n+        }\n+        return facetInputs.dateRange;\n+    }\n+\n+    private void getTodayTimeWindow(CreatedOnFacetInputs facetInputs) {\n+        facetInputs.startDateTime = facetInputs.startDate.toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"startDateTime\", facetInputs.startDateTime);\n+        facetInputs.endDateTime = facetInputs.endDate.plusDays(1).toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"endDateTime\", facetInputs.endDateTime);\n+    }\n+\n+    private void getThisWeekTimeWindow(CreatedOnFacetInputs facetInputs) {\n+        facetInputs.startDateTime = facetInputs.startDate.plusDays((-1) * (facetInputs.startDate.getDayOfWeek().getValue() % 7)).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"startDateTime\", facetInputs.startDateTime);\n+        facetInputs.endDateTime = facetInputs.endDate.plusDays(1).toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"endDateTime\", facetInputs.endDateTime);\n+    }\n+\n+    private void getThisMonthTimeWindow(CreatedOnFacetInputs facetInputs) {\n+        facetInputs.startDate = facetInputs.startDate.with(TemporalAdjusters.firstDayOfMonth());\n+        facetInputs.startDateTime = facetInputs.startDate.toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"startDateTime\", facetInputs.startDateTime);\n+        facetInputs.endDateTime = facetInputs.endDate.plusDays(1).toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"endDateTime\", facetInputs.endDateTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "defc8dfb28db7d03a504f371e09205be156e3bf0"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY1OTQ3MQ==", "bodyText": "No it doesn't. facetInputs.startDate = facetInputs.startDate.with(TemporalAdjusters.firstDayOfMonth());\nis used here.\nfacetInputs.startDateTime = facetInputs.startDate.toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\nThis is the only common line.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4072#discussion_r437659471", "createdAt": "2020-06-09T19:14:12Z", "author": {"login": "rahulvudutala"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/impl/CreatedOnFacetHandler.java", "diffHunk": "@@ -21,33 +21,113 @@\n import com.marklogic.hub.central.entities.search.Constants;\n import com.marklogic.hub.central.entities.search.FacetHandler;\n import com.marklogic.hub.central.entities.search.models.DocSearchQueryInfo;\n+import com.marklogic.hub.central.exceptions.DataHubException;\n \n import java.time.LocalDate;\n import java.time.ZoneId;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeParseException;\n+import java.time.temporal.TemporalAdjusters;\n+import java.util.HashMap;\n+import java.util.Map;\n \n public class CreatedOnFacetHandler implements FacetHandler {\n \n-    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n-    private static final DateTimeFormatter DATE_TIME_FORMAT = DateTimeFormatter\n-            .ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+    public static final DateTimeFormatter DATE_TIME_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n \n     @Override\n     public StructuredQueryDefinition buildQuery(DocSearchQueryInfo.FacetData data, StructuredQueryBuilder queryBuilder) {\n-        // Converting the date in string format from yyyy-MM-dd format to yyyy-MM-dd HH:mm:ss format\n-        LocalDate startDate = LocalDate.parse(data.getRangeValues().getLowerBound(), DATE_FORMAT);\n-        String startDateTime = startDate.atStartOfDay(ZoneId.systemDefault())\n-                .format(DATE_TIME_FORMAT);\n+        Map<String, String> dateRange = computeDateRange(data, new CreatedOnFacetInputs());\n+        return queryBuilder.and(\n+            queryBuilder.rangeConstraint(Constants.CREATED_ON_CONSTRAINT_NAME, StructuredQueryBuilder.Operator.GE, dateRange.get(\"startDateTime\")),\n+            queryBuilder.rangeConstraint(Constants.CREATED_ON_CONSTRAINT_NAME, StructuredQueryBuilder.Operator.LT, dateRange.get(\"endDateTime\"))\n+        );\n+    }\n+\n+    protected Map<String, String> computeDateRange(DocSearchQueryInfo.FacetData data, CreatedOnFacetInputs facetInputs) {\n+\n+        if(data.getStringValues().size() > 0) {\n+            facetInputs.timeRange = data.getStringValues().get(0);\n+        }\n+\n+        if(data.getStringValues().size() > 1) {\n+            facetInputs.zoneOffset = Integer.parseInt(data.getStringValues().get(1));\n+        }\n+\n+        facetInputs.zoneId = ZoneId.ofOffset(\"UTC\", ZoneOffset.ofTotalSeconds(facetInputs.zoneOffset*60));\n+        facetInputs.startDate = LocalDate.now().atStartOfDay(facetInputs.zoneId);\n+        facetInputs.endDate = LocalDate.now().atStartOfDay(facetInputs.zoneId);\n+\n+        switch (facetInputs.timeRange) {\n+            case \"Today\":\n+                getTodayTimeWindow(facetInputs);\n+                break;\n+\n+            case \"This Week\":\n+                getThisWeekTimeWindow(facetInputs);\n+                break;\n+\n+            case \"This Month\":\n+                getThisMonthTimeWindow(facetInputs);\n+                break;\n \n-        // Converting the date in string format from yyyy-MM-dd format to yyyy-MM-dd HH:mm:ss format\n-        // Adding 1 day to end date to get docs harmonized on the end date as well.\n-        LocalDate endDate = LocalDate.parse(data.getRangeValues().getUpperBound(), DATE_FORMAT)\n-                .plusDays(1);\n-        String endDateTime = endDate.atStartOfDay(ZoneId.systemDefault()).format(DATE_TIME_FORMAT);\n+            case \"Custom\":\n+                getCustomTimeWindow(data, facetInputs);\n+                break;\n+        }\n+        return facetInputs.dateRange;\n+    }\n+\n+    private void getTodayTimeWindow(CreatedOnFacetInputs facetInputs) {\n+        facetInputs.startDateTime = facetInputs.startDate.toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"startDateTime\", facetInputs.startDateTime);\n+        facetInputs.endDateTime = facetInputs.endDate.plusDays(1).toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"endDateTime\", facetInputs.endDateTime);\n+    }\n+\n+    private void getThisWeekTimeWindow(CreatedOnFacetInputs facetInputs) {\n+        facetInputs.startDateTime = facetInputs.startDate.plusDays((-1) * (facetInputs.startDate.getDayOfWeek().getValue() % 7)).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"startDateTime\", facetInputs.startDateTime);\n+        facetInputs.endDateTime = facetInputs.endDate.plusDays(1).toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"endDateTime\", facetInputs.endDateTime);\n+    }\n+\n+    private void getThisMonthTimeWindow(CreatedOnFacetInputs facetInputs) {\n+        facetInputs.startDate = facetInputs.startDate.with(TemporalAdjusters.firstDayOfMonth());\n+        facetInputs.startDateTime = facetInputs.startDate.toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"startDateTime\", facetInputs.startDateTime);\n+        facetInputs.endDateTime = facetInputs.endDate.plusDays(1).toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"endDateTime\", facetInputs.endDateTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY1MDQzMg=="}, "originalCommit": {"oid": "defc8dfb28db7d03a504f371e09205be156e3bf0"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2ODM0OQ==", "bodyText": "I meant lines 99 to 102.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4072#discussion_r437668349", "createdAt": "2020-06-09T19:31:04Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/impl/CreatedOnFacetHandler.java", "diffHunk": "@@ -21,33 +21,113 @@\n import com.marklogic.hub.central.entities.search.Constants;\n import com.marklogic.hub.central.entities.search.FacetHandler;\n import com.marklogic.hub.central.entities.search.models.DocSearchQueryInfo;\n+import com.marklogic.hub.central.exceptions.DataHubException;\n \n import java.time.LocalDate;\n import java.time.ZoneId;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeParseException;\n+import java.time.temporal.TemporalAdjusters;\n+import java.util.HashMap;\n+import java.util.Map;\n \n public class CreatedOnFacetHandler implements FacetHandler {\n \n-    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n-    private static final DateTimeFormatter DATE_TIME_FORMAT = DateTimeFormatter\n-            .ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+    public static final DateTimeFormatter DATE_TIME_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n \n     @Override\n     public StructuredQueryDefinition buildQuery(DocSearchQueryInfo.FacetData data, StructuredQueryBuilder queryBuilder) {\n-        // Converting the date in string format from yyyy-MM-dd format to yyyy-MM-dd HH:mm:ss format\n-        LocalDate startDate = LocalDate.parse(data.getRangeValues().getLowerBound(), DATE_FORMAT);\n-        String startDateTime = startDate.atStartOfDay(ZoneId.systemDefault())\n-                .format(DATE_TIME_FORMAT);\n+        Map<String, String> dateRange = computeDateRange(data, new CreatedOnFacetInputs());\n+        return queryBuilder.and(\n+            queryBuilder.rangeConstraint(Constants.CREATED_ON_CONSTRAINT_NAME, StructuredQueryBuilder.Operator.GE, dateRange.get(\"startDateTime\")),\n+            queryBuilder.rangeConstraint(Constants.CREATED_ON_CONSTRAINT_NAME, StructuredQueryBuilder.Operator.LT, dateRange.get(\"endDateTime\"))\n+        );\n+    }\n+\n+    protected Map<String, String> computeDateRange(DocSearchQueryInfo.FacetData data, CreatedOnFacetInputs facetInputs) {\n+\n+        if(data.getStringValues().size() > 0) {\n+            facetInputs.timeRange = data.getStringValues().get(0);\n+        }\n+\n+        if(data.getStringValues().size() > 1) {\n+            facetInputs.zoneOffset = Integer.parseInt(data.getStringValues().get(1));\n+        }\n+\n+        facetInputs.zoneId = ZoneId.ofOffset(\"UTC\", ZoneOffset.ofTotalSeconds(facetInputs.zoneOffset*60));\n+        facetInputs.startDate = LocalDate.now().atStartOfDay(facetInputs.zoneId);\n+        facetInputs.endDate = LocalDate.now().atStartOfDay(facetInputs.zoneId);\n+\n+        switch (facetInputs.timeRange) {\n+            case \"Today\":\n+                getTodayTimeWindow(facetInputs);\n+                break;\n+\n+            case \"This Week\":\n+                getThisWeekTimeWindow(facetInputs);\n+                break;\n+\n+            case \"This Month\":\n+                getThisMonthTimeWindow(facetInputs);\n+                break;\n \n-        // Converting the date in string format from yyyy-MM-dd format to yyyy-MM-dd HH:mm:ss format\n-        // Adding 1 day to end date to get docs harmonized on the end date as well.\n-        LocalDate endDate = LocalDate.parse(data.getRangeValues().getUpperBound(), DATE_FORMAT)\n-                .plusDays(1);\n-        String endDateTime = endDate.atStartOfDay(ZoneId.systemDefault()).format(DATE_TIME_FORMAT);\n+            case \"Custom\":\n+                getCustomTimeWindow(data, facetInputs);\n+                break;\n+        }\n+        return facetInputs.dateRange;\n+    }\n+\n+    private void getTodayTimeWindow(CreatedOnFacetInputs facetInputs) {\n+        facetInputs.startDateTime = facetInputs.startDate.toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"startDateTime\", facetInputs.startDateTime);\n+        facetInputs.endDateTime = facetInputs.endDate.plusDays(1).toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"endDateTime\", facetInputs.endDateTime);\n+    }\n+\n+    private void getThisWeekTimeWindow(CreatedOnFacetInputs facetInputs) {\n+        facetInputs.startDateTime = facetInputs.startDate.plusDays((-1) * (facetInputs.startDate.getDayOfWeek().getValue() % 7)).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"startDateTime\", facetInputs.startDateTime);\n+        facetInputs.endDateTime = facetInputs.endDate.plusDays(1).toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"endDateTime\", facetInputs.endDateTime);\n+    }\n+\n+    private void getThisMonthTimeWindow(CreatedOnFacetInputs facetInputs) {\n+        facetInputs.startDate = facetInputs.startDate.with(TemporalAdjusters.firstDayOfMonth());\n+        facetInputs.startDateTime = facetInputs.startDate.toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"startDateTime\", facetInputs.startDateTime);\n+        facetInputs.endDateTime = facetInputs.endDate.plusDays(1).toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"endDateTime\", facetInputs.endDateTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY1MDQzMg=="}, "originalCommit": {"oid": "defc8dfb28db7d03a504f371e09205be156e3bf0"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjQ0OTQ3OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/impl/CreatedOnFacetHandler.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODo1ODowMVrOGhYFGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxOTo0NDozMlrOGhZlsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY1MDcxNA==", "bodyText": "It seems that FE now sends both date and time. Do we still need to add a day any more if that's the case?\nCan we use startTime >= && <=endTime for comparison making this more accurate?\nSince the FE still uses a DatePicker and not DateTimePicker maybe we can add the day over there. This would make the BE not deal with the wonky logic of adding days. Also, this would mean when we introduce a DateTimePicker in the FE we don't have to change the BE to support it.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4072#discussion_r437650714", "createdAt": "2020-06-09T18:58:01Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/impl/CreatedOnFacetHandler.java", "diffHunk": "@@ -21,33 +21,113 @@\n import com.marklogic.hub.central.entities.search.Constants;\n import com.marklogic.hub.central.entities.search.FacetHandler;\n import com.marklogic.hub.central.entities.search.models.DocSearchQueryInfo;\n+import com.marklogic.hub.central.exceptions.DataHubException;\n \n import java.time.LocalDate;\n import java.time.ZoneId;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeParseException;\n+import java.time.temporal.TemporalAdjusters;\n+import java.util.HashMap;\n+import java.util.Map;\n \n public class CreatedOnFacetHandler implements FacetHandler {\n \n-    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n-    private static final DateTimeFormatter DATE_TIME_FORMAT = DateTimeFormatter\n-            .ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+    public static final DateTimeFormatter DATE_TIME_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n \n     @Override\n     public StructuredQueryDefinition buildQuery(DocSearchQueryInfo.FacetData data, StructuredQueryBuilder queryBuilder) {\n-        // Converting the date in string format from yyyy-MM-dd format to yyyy-MM-dd HH:mm:ss format\n-        LocalDate startDate = LocalDate.parse(data.getRangeValues().getLowerBound(), DATE_FORMAT);\n-        String startDateTime = startDate.atStartOfDay(ZoneId.systemDefault())\n-                .format(DATE_TIME_FORMAT);\n+        Map<String, String> dateRange = computeDateRange(data, new CreatedOnFacetInputs());\n+        return queryBuilder.and(\n+            queryBuilder.rangeConstraint(Constants.CREATED_ON_CONSTRAINT_NAME, StructuredQueryBuilder.Operator.GE, dateRange.get(\"startDateTime\")),\n+            queryBuilder.rangeConstraint(Constants.CREATED_ON_CONSTRAINT_NAME, StructuredQueryBuilder.Operator.LT, dateRange.get(\"endDateTime\"))\n+        );\n+    }\n+\n+    protected Map<String, String> computeDateRange(DocSearchQueryInfo.FacetData data, CreatedOnFacetInputs facetInputs) {\n+\n+        if(data.getStringValues().size() > 0) {\n+            facetInputs.timeRange = data.getStringValues().get(0);\n+        }\n+\n+        if(data.getStringValues().size() > 1) {\n+            facetInputs.zoneOffset = Integer.parseInt(data.getStringValues().get(1));\n+        }\n+\n+        facetInputs.zoneId = ZoneId.ofOffset(\"UTC\", ZoneOffset.ofTotalSeconds(facetInputs.zoneOffset*60));\n+        facetInputs.startDate = LocalDate.now().atStartOfDay(facetInputs.zoneId);\n+        facetInputs.endDate = LocalDate.now().atStartOfDay(facetInputs.zoneId);\n+\n+        switch (facetInputs.timeRange) {\n+            case \"Today\":\n+                getTodayTimeWindow(facetInputs);\n+                break;\n+\n+            case \"This Week\":\n+                getThisWeekTimeWindow(facetInputs);\n+                break;\n+\n+            case \"This Month\":\n+                getThisMonthTimeWindow(facetInputs);\n+                break;\n \n-        // Converting the date in string format from yyyy-MM-dd format to yyyy-MM-dd HH:mm:ss format\n-        // Adding 1 day to end date to get docs harmonized on the end date as well.\n-        LocalDate endDate = LocalDate.parse(data.getRangeValues().getUpperBound(), DATE_FORMAT)\n-                .plusDays(1);\n-        String endDateTime = endDate.atStartOfDay(ZoneId.systemDefault()).format(DATE_TIME_FORMAT);\n+            case \"Custom\":\n+                getCustomTimeWindow(data, facetInputs);\n+                break;\n+        }\n+        return facetInputs.dateRange;\n+    }\n+\n+    private void getTodayTimeWindow(CreatedOnFacetInputs facetInputs) {\n+        facetInputs.startDateTime = facetInputs.startDate.toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"startDateTime\", facetInputs.startDateTime);\n+        facetInputs.endDateTime = facetInputs.endDate.plusDays(1).toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"endDateTime\", facetInputs.endDateTime);\n+    }\n+\n+    private void getThisWeekTimeWindow(CreatedOnFacetInputs facetInputs) {\n+        facetInputs.startDateTime = facetInputs.startDate.plusDays((-1) * (facetInputs.startDate.getDayOfWeek().getValue() % 7)).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"startDateTime\", facetInputs.startDateTime);\n+        facetInputs.endDateTime = facetInputs.endDate.plusDays(1).toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"endDateTime\", facetInputs.endDateTime);\n+    }\n+\n+    private void getThisMonthTimeWindow(CreatedOnFacetInputs facetInputs) {\n+        facetInputs.startDate = facetInputs.startDate.with(TemporalAdjusters.firstDayOfMonth());\n+        facetInputs.startDateTime = facetInputs.startDate.toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"startDateTime\", facetInputs.startDateTime);\n+        facetInputs.endDateTime = facetInputs.endDate.plusDays(1).toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"endDateTime\", facetInputs.endDateTime);\n+    }\n \n-        return queryBuilder\n-                .and(queryBuilder.rangeConstraint(Constants.CREATED_ON_CONSTRAINT_NAME, StructuredQueryBuilder.Operator.GE, startDateTime),\n-                        queryBuilder.rangeConstraint(Constants.CREATED_ON_CONSTRAINT_NAME, StructuredQueryBuilder.Operator.LT, endDateTime));\n+    private void getCustomTimeWindow(DocSearchQueryInfo.FacetData data, CreatedOnFacetInputs facetInputs) {\n+        if(!data.getRangeValues().getLowerBound().isEmpty() && !data.getRangeValues().getUpperBound().isEmpty()) {\n+            try {\n+                facetInputs.startDateTime = ZonedDateTime.parse(data.getRangeValues().getLowerBound()).format(DATE_TIME_FORMAT);\n+                facetInputs.endDateTime = ZonedDateTime.parse(data.getRangeValues().getUpperBound()).plusDays(1).format(DATE_TIME_FORMAT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "defc8dfb28db7d03a504f371e09205be156e3bf0"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY1MzU2MA==", "bodyText": "Date and time for entity properties. We still have a date picker for hub properties\nIt is more accurate doing < than <= as we don't know appropriate end time for a date.\nThe feature supports client zone offset. To work with zone it has to be date-time, So converted to date-time even if date picker is used", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4072#discussion_r437653560", "createdAt": "2020-06-09T19:03:09Z", "author": {"login": "rahulvudutala"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/impl/CreatedOnFacetHandler.java", "diffHunk": "@@ -21,33 +21,113 @@\n import com.marklogic.hub.central.entities.search.Constants;\n import com.marklogic.hub.central.entities.search.FacetHandler;\n import com.marklogic.hub.central.entities.search.models.DocSearchQueryInfo;\n+import com.marklogic.hub.central.exceptions.DataHubException;\n \n import java.time.LocalDate;\n import java.time.ZoneId;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeParseException;\n+import java.time.temporal.TemporalAdjusters;\n+import java.util.HashMap;\n+import java.util.Map;\n \n public class CreatedOnFacetHandler implements FacetHandler {\n \n-    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n-    private static final DateTimeFormatter DATE_TIME_FORMAT = DateTimeFormatter\n-            .ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+    public static final DateTimeFormatter DATE_TIME_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n \n     @Override\n     public StructuredQueryDefinition buildQuery(DocSearchQueryInfo.FacetData data, StructuredQueryBuilder queryBuilder) {\n-        // Converting the date in string format from yyyy-MM-dd format to yyyy-MM-dd HH:mm:ss format\n-        LocalDate startDate = LocalDate.parse(data.getRangeValues().getLowerBound(), DATE_FORMAT);\n-        String startDateTime = startDate.atStartOfDay(ZoneId.systemDefault())\n-                .format(DATE_TIME_FORMAT);\n+        Map<String, String> dateRange = computeDateRange(data, new CreatedOnFacetInputs());\n+        return queryBuilder.and(\n+            queryBuilder.rangeConstraint(Constants.CREATED_ON_CONSTRAINT_NAME, StructuredQueryBuilder.Operator.GE, dateRange.get(\"startDateTime\")),\n+            queryBuilder.rangeConstraint(Constants.CREATED_ON_CONSTRAINT_NAME, StructuredQueryBuilder.Operator.LT, dateRange.get(\"endDateTime\"))\n+        );\n+    }\n+\n+    protected Map<String, String> computeDateRange(DocSearchQueryInfo.FacetData data, CreatedOnFacetInputs facetInputs) {\n+\n+        if(data.getStringValues().size() > 0) {\n+            facetInputs.timeRange = data.getStringValues().get(0);\n+        }\n+\n+        if(data.getStringValues().size() > 1) {\n+            facetInputs.zoneOffset = Integer.parseInt(data.getStringValues().get(1));\n+        }\n+\n+        facetInputs.zoneId = ZoneId.ofOffset(\"UTC\", ZoneOffset.ofTotalSeconds(facetInputs.zoneOffset*60));\n+        facetInputs.startDate = LocalDate.now().atStartOfDay(facetInputs.zoneId);\n+        facetInputs.endDate = LocalDate.now().atStartOfDay(facetInputs.zoneId);\n+\n+        switch (facetInputs.timeRange) {\n+            case \"Today\":\n+                getTodayTimeWindow(facetInputs);\n+                break;\n+\n+            case \"This Week\":\n+                getThisWeekTimeWindow(facetInputs);\n+                break;\n+\n+            case \"This Month\":\n+                getThisMonthTimeWindow(facetInputs);\n+                break;\n \n-        // Converting the date in string format from yyyy-MM-dd format to yyyy-MM-dd HH:mm:ss format\n-        // Adding 1 day to end date to get docs harmonized on the end date as well.\n-        LocalDate endDate = LocalDate.parse(data.getRangeValues().getUpperBound(), DATE_FORMAT)\n-                .plusDays(1);\n-        String endDateTime = endDate.atStartOfDay(ZoneId.systemDefault()).format(DATE_TIME_FORMAT);\n+            case \"Custom\":\n+                getCustomTimeWindow(data, facetInputs);\n+                break;\n+        }\n+        return facetInputs.dateRange;\n+    }\n+\n+    private void getTodayTimeWindow(CreatedOnFacetInputs facetInputs) {\n+        facetInputs.startDateTime = facetInputs.startDate.toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"startDateTime\", facetInputs.startDateTime);\n+        facetInputs.endDateTime = facetInputs.endDate.plusDays(1).toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"endDateTime\", facetInputs.endDateTime);\n+    }\n+\n+    private void getThisWeekTimeWindow(CreatedOnFacetInputs facetInputs) {\n+        facetInputs.startDateTime = facetInputs.startDate.plusDays((-1) * (facetInputs.startDate.getDayOfWeek().getValue() % 7)).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"startDateTime\", facetInputs.startDateTime);\n+        facetInputs.endDateTime = facetInputs.endDate.plusDays(1).toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"endDateTime\", facetInputs.endDateTime);\n+    }\n+\n+    private void getThisMonthTimeWindow(CreatedOnFacetInputs facetInputs) {\n+        facetInputs.startDate = facetInputs.startDate.with(TemporalAdjusters.firstDayOfMonth());\n+        facetInputs.startDateTime = facetInputs.startDate.toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"startDateTime\", facetInputs.startDateTime);\n+        facetInputs.endDateTime = facetInputs.endDate.plusDays(1).toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"endDateTime\", facetInputs.endDateTime);\n+    }\n \n-        return queryBuilder\n-                .and(queryBuilder.rangeConstraint(Constants.CREATED_ON_CONSTRAINT_NAME, StructuredQueryBuilder.Operator.GE, startDateTime),\n-                        queryBuilder.rangeConstraint(Constants.CREATED_ON_CONSTRAINT_NAME, StructuredQueryBuilder.Operator.LT, endDateTime));\n+    private void getCustomTimeWindow(DocSearchQueryInfo.FacetData data, CreatedOnFacetInputs facetInputs) {\n+        if(!data.getRangeValues().getLowerBound().isEmpty() && !data.getRangeValues().getUpperBound().isEmpty()) {\n+            try {\n+                facetInputs.startDateTime = ZonedDateTime.parse(data.getRangeValues().getLowerBound()).format(DATE_TIME_FORMAT);\n+                facetInputs.endDateTime = ZonedDateTime.parse(data.getRangeValues().getUpperBound()).plusDays(1).format(DATE_TIME_FORMAT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY1MDcxNA=="}, "originalCommit": {"oid": "defc8dfb28db7d03a504f371e09205be156e3bf0"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3MzYwOQ==", "bodyText": "I meant can we add the day in the FE since the only reason we need to add a day here is that we use a date picker and not a date-time picker. Since this seems to be a FE dependency maybe the hack should also be in the FE.\nMoving the logic to the FE would make BE work correctly for all date-time ranges and if/when we add the date-time picker in the FE we dont have to make any changes since we already support the right thing.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4072#discussion_r437673609", "createdAt": "2020-06-09T19:41:02Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/impl/CreatedOnFacetHandler.java", "diffHunk": "@@ -21,33 +21,113 @@\n import com.marklogic.hub.central.entities.search.Constants;\n import com.marklogic.hub.central.entities.search.FacetHandler;\n import com.marklogic.hub.central.entities.search.models.DocSearchQueryInfo;\n+import com.marklogic.hub.central.exceptions.DataHubException;\n \n import java.time.LocalDate;\n import java.time.ZoneId;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeParseException;\n+import java.time.temporal.TemporalAdjusters;\n+import java.util.HashMap;\n+import java.util.Map;\n \n public class CreatedOnFacetHandler implements FacetHandler {\n \n-    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n-    private static final DateTimeFormatter DATE_TIME_FORMAT = DateTimeFormatter\n-            .ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+    public static final DateTimeFormatter DATE_TIME_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n \n     @Override\n     public StructuredQueryDefinition buildQuery(DocSearchQueryInfo.FacetData data, StructuredQueryBuilder queryBuilder) {\n-        // Converting the date in string format from yyyy-MM-dd format to yyyy-MM-dd HH:mm:ss format\n-        LocalDate startDate = LocalDate.parse(data.getRangeValues().getLowerBound(), DATE_FORMAT);\n-        String startDateTime = startDate.atStartOfDay(ZoneId.systemDefault())\n-                .format(DATE_TIME_FORMAT);\n+        Map<String, String> dateRange = computeDateRange(data, new CreatedOnFacetInputs());\n+        return queryBuilder.and(\n+            queryBuilder.rangeConstraint(Constants.CREATED_ON_CONSTRAINT_NAME, StructuredQueryBuilder.Operator.GE, dateRange.get(\"startDateTime\")),\n+            queryBuilder.rangeConstraint(Constants.CREATED_ON_CONSTRAINT_NAME, StructuredQueryBuilder.Operator.LT, dateRange.get(\"endDateTime\"))\n+        );\n+    }\n+\n+    protected Map<String, String> computeDateRange(DocSearchQueryInfo.FacetData data, CreatedOnFacetInputs facetInputs) {\n+\n+        if(data.getStringValues().size() > 0) {\n+            facetInputs.timeRange = data.getStringValues().get(0);\n+        }\n+\n+        if(data.getStringValues().size() > 1) {\n+            facetInputs.zoneOffset = Integer.parseInt(data.getStringValues().get(1));\n+        }\n+\n+        facetInputs.zoneId = ZoneId.ofOffset(\"UTC\", ZoneOffset.ofTotalSeconds(facetInputs.zoneOffset*60));\n+        facetInputs.startDate = LocalDate.now().atStartOfDay(facetInputs.zoneId);\n+        facetInputs.endDate = LocalDate.now().atStartOfDay(facetInputs.zoneId);\n+\n+        switch (facetInputs.timeRange) {\n+            case \"Today\":\n+                getTodayTimeWindow(facetInputs);\n+                break;\n+\n+            case \"This Week\":\n+                getThisWeekTimeWindow(facetInputs);\n+                break;\n+\n+            case \"This Month\":\n+                getThisMonthTimeWindow(facetInputs);\n+                break;\n \n-        // Converting the date in string format from yyyy-MM-dd format to yyyy-MM-dd HH:mm:ss format\n-        // Adding 1 day to end date to get docs harmonized on the end date as well.\n-        LocalDate endDate = LocalDate.parse(data.getRangeValues().getUpperBound(), DATE_FORMAT)\n-                .plusDays(1);\n-        String endDateTime = endDate.atStartOfDay(ZoneId.systemDefault()).format(DATE_TIME_FORMAT);\n+            case \"Custom\":\n+                getCustomTimeWindow(data, facetInputs);\n+                break;\n+        }\n+        return facetInputs.dateRange;\n+    }\n+\n+    private void getTodayTimeWindow(CreatedOnFacetInputs facetInputs) {\n+        facetInputs.startDateTime = facetInputs.startDate.toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"startDateTime\", facetInputs.startDateTime);\n+        facetInputs.endDateTime = facetInputs.endDate.plusDays(1).toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"endDateTime\", facetInputs.endDateTime);\n+    }\n+\n+    private void getThisWeekTimeWindow(CreatedOnFacetInputs facetInputs) {\n+        facetInputs.startDateTime = facetInputs.startDate.plusDays((-1) * (facetInputs.startDate.getDayOfWeek().getValue() % 7)).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"startDateTime\", facetInputs.startDateTime);\n+        facetInputs.endDateTime = facetInputs.endDate.plusDays(1).toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"endDateTime\", facetInputs.endDateTime);\n+    }\n+\n+    private void getThisMonthTimeWindow(CreatedOnFacetInputs facetInputs) {\n+        facetInputs.startDate = facetInputs.startDate.with(TemporalAdjusters.firstDayOfMonth());\n+        facetInputs.startDateTime = facetInputs.startDate.toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"startDateTime\", facetInputs.startDateTime);\n+        facetInputs.endDateTime = facetInputs.endDate.plusDays(1).toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"endDateTime\", facetInputs.endDateTime);\n+    }\n \n-        return queryBuilder\n-                .and(queryBuilder.rangeConstraint(Constants.CREATED_ON_CONSTRAINT_NAME, StructuredQueryBuilder.Operator.GE, startDateTime),\n-                        queryBuilder.rangeConstraint(Constants.CREATED_ON_CONSTRAINT_NAME, StructuredQueryBuilder.Operator.LT, endDateTime));\n+    private void getCustomTimeWindow(DocSearchQueryInfo.FacetData data, CreatedOnFacetInputs facetInputs) {\n+        if(!data.getRangeValues().getLowerBound().isEmpty() && !data.getRangeValues().getUpperBound().isEmpty()) {\n+            try {\n+                facetInputs.startDateTime = ZonedDateTime.parse(data.getRangeValues().getLowerBound()).format(DATE_TIME_FORMAT);\n+                facetInputs.endDateTime = ZonedDateTime.parse(data.getRangeValues().getUpperBound()).plusDays(1).format(DATE_TIME_FORMAT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY1MDcxNA=="}, "originalCommit": {"oid": "defc8dfb28db7d03a504f371e09205be156e3bf0"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3NTQ0MQ==", "bodyText": "The date picker value will change, as we display the same object. Its not just FE, even if the endpoint is hit, it should return the same results no different from UI", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4072#discussion_r437675441", "createdAt": "2020-06-09T19:44:32Z", "author": {"login": "rahulvudutala"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/impl/CreatedOnFacetHandler.java", "diffHunk": "@@ -21,33 +21,113 @@\n import com.marklogic.hub.central.entities.search.Constants;\n import com.marklogic.hub.central.entities.search.FacetHandler;\n import com.marklogic.hub.central.entities.search.models.DocSearchQueryInfo;\n+import com.marklogic.hub.central.exceptions.DataHubException;\n \n import java.time.LocalDate;\n import java.time.ZoneId;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeParseException;\n+import java.time.temporal.TemporalAdjusters;\n+import java.util.HashMap;\n+import java.util.Map;\n \n public class CreatedOnFacetHandler implements FacetHandler {\n \n-    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n-    private static final DateTimeFormatter DATE_TIME_FORMAT = DateTimeFormatter\n-            .ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+    public static final DateTimeFormatter DATE_TIME_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n \n     @Override\n     public StructuredQueryDefinition buildQuery(DocSearchQueryInfo.FacetData data, StructuredQueryBuilder queryBuilder) {\n-        // Converting the date in string format from yyyy-MM-dd format to yyyy-MM-dd HH:mm:ss format\n-        LocalDate startDate = LocalDate.parse(data.getRangeValues().getLowerBound(), DATE_FORMAT);\n-        String startDateTime = startDate.atStartOfDay(ZoneId.systemDefault())\n-                .format(DATE_TIME_FORMAT);\n+        Map<String, String> dateRange = computeDateRange(data, new CreatedOnFacetInputs());\n+        return queryBuilder.and(\n+            queryBuilder.rangeConstraint(Constants.CREATED_ON_CONSTRAINT_NAME, StructuredQueryBuilder.Operator.GE, dateRange.get(\"startDateTime\")),\n+            queryBuilder.rangeConstraint(Constants.CREATED_ON_CONSTRAINT_NAME, StructuredQueryBuilder.Operator.LT, dateRange.get(\"endDateTime\"))\n+        );\n+    }\n+\n+    protected Map<String, String> computeDateRange(DocSearchQueryInfo.FacetData data, CreatedOnFacetInputs facetInputs) {\n+\n+        if(data.getStringValues().size() > 0) {\n+            facetInputs.timeRange = data.getStringValues().get(0);\n+        }\n+\n+        if(data.getStringValues().size() > 1) {\n+            facetInputs.zoneOffset = Integer.parseInt(data.getStringValues().get(1));\n+        }\n+\n+        facetInputs.zoneId = ZoneId.ofOffset(\"UTC\", ZoneOffset.ofTotalSeconds(facetInputs.zoneOffset*60));\n+        facetInputs.startDate = LocalDate.now().atStartOfDay(facetInputs.zoneId);\n+        facetInputs.endDate = LocalDate.now().atStartOfDay(facetInputs.zoneId);\n+\n+        switch (facetInputs.timeRange) {\n+            case \"Today\":\n+                getTodayTimeWindow(facetInputs);\n+                break;\n+\n+            case \"This Week\":\n+                getThisWeekTimeWindow(facetInputs);\n+                break;\n+\n+            case \"This Month\":\n+                getThisMonthTimeWindow(facetInputs);\n+                break;\n \n-        // Converting the date in string format from yyyy-MM-dd format to yyyy-MM-dd HH:mm:ss format\n-        // Adding 1 day to end date to get docs harmonized on the end date as well.\n-        LocalDate endDate = LocalDate.parse(data.getRangeValues().getUpperBound(), DATE_FORMAT)\n-                .plusDays(1);\n-        String endDateTime = endDate.atStartOfDay(ZoneId.systemDefault()).format(DATE_TIME_FORMAT);\n+            case \"Custom\":\n+                getCustomTimeWindow(data, facetInputs);\n+                break;\n+        }\n+        return facetInputs.dateRange;\n+    }\n+\n+    private void getTodayTimeWindow(CreatedOnFacetInputs facetInputs) {\n+        facetInputs.startDateTime = facetInputs.startDate.toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"startDateTime\", facetInputs.startDateTime);\n+        facetInputs.endDateTime = facetInputs.endDate.plusDays(1).toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"endDateTime\", facetInputs.endDateTime);\n+    }\n+\n+    private void getThisWeekTimeWindow(CreatedOnFacetInputs facetInputs) {\n+        facetInputs.startDateTime = facetInputs.startDate.plusDays((-1) * (facetInputs.startDate.getDayOfWeek().getValue() % 7)).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"startDateTime\", facetInputs.startDateTime);\n+        facetInputs.endDateTime = facetInputs.endDate.plusDays(1).toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"endDateTime\", facetInputs.endDateTime);\n+    }\n+\n+    private void getThisMonthTimeWindow(CreatedOnFacetInputs facetInputs) {\n+        facetInputs.startDate = facetInputs.startDate.with(TemporalAdjusters.firstDayOfMonth());\n+        facetInputs.startDateTime = facetInputs.startDate.toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"startDateTime\", facetInputs.startDateTime);\n+        facetInputs.endDateTime = facetInputs.endDate.plusDays(1).toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"endDateTime\", facetInputs.endDateTime);\n+    }\n \n-        return queryBuilder\n-                .and(queryBuilder.rangeConstraint(Constants.CREATED_ON_CONSTRAINT_NAME, StructuredQueryBuilder.Operator.GE, startDateTime),\n-                        queryBuilder.rangeConstraint(Constants.CREATED_ON_CONSTRAINT_NAME, StructuredQueryBuilder.Operator.LT, endDateTime));\n+    private void getCustomTimeWindow(DocSearchQueryInfo.FacetData data, CreatedOnFacetInputs facetInputs) {\n+        if(!data.getRangeValues().getLowerBound().isEmpty() && !data.getRangeValues().getUpperBound().isEmpty()) {\n+            try {\n+                facetInputs.startDateTime = ZonedDateTime.parse(data.getRangeValues().getLowerBound()).format(DATE_TIME_FORMAT);\n+                facetInputs.endDateTime = ZonedDateTime.parse(data.getRangeValues().getUpperBound()).plusDays(1).format(DATE_TIME_FORMAT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY1MDcxNA=="}, "originalCommit": {"oid": "defc8dfb28db7d03a504f371e09205be156e3bf0"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjQ1MDI3OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/impl/CreatedOnFacetHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODo1ODoxNVrOGhYFoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODo1ODoxNVrOGhYFoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY1MDg0OQ==", "bodyText": "We can have protected access for the class.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4072#discussion_r437650849", "createdAt": "2020-06-09T18:58:15Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/impl/CreatedOnFacetHandler.java", "diffHunk": "@@ -21,33 +21,113 @@\n import com.marklogic.hub.central.entities.search.Constants;\n import com.marklogic.hub.central.entities.search.FacetHandler;\n import com.marklogic.hub.central.entities.search.models.DocSearchQueryInfo;\n+import com.marklogic.hub.central.exceptions.DataHubException;\n \n import java.time.LocalDate;\n import java.time.ZoneId;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeParseException;\n+import java.time.temporal.TemporalAdjusters;\n+import java.util.HashMap;\n+import java.util.Map;\n \n public class CreatedOnFacetHandler implements FacetHandler {\n \n-    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n-    private static final DateTimeFormatter DATE_TIME_FORMAT = DateTimeFormatter\n-            .ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+    public static final DateTimeFormatter DATE_TIME_FORMAT = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n \n     @Override\n     public StructuredQueryDefinition buildQuery(DocSearchQueryInfo.FacetData data, StructuredQueryBuilder queryBuilder) {\n-        // Converting the date in string format from yyyy-MM-dd format to yyyy-MM-dd HH:mm:ss format\n-        LocalDate startDate = LocalDate.parse(data.getRangeValues().getLowerBound(), DATE_FORMAT);\n-        String startDateTime = startDate.atStartOfDay(ZoneId.systemDefault())\n-                .format(DATE_TIME_FORMAT);\n+        Map<String, String> dateRange = computeDateRange(data, new CreatedOnFacetInputs());\n+        return queryBuilder.and(\n+            queryBuilder.rangeConstraint(Constants.CREATED_ON_CONSTRAINT_NAME, StructuredQueryBuilder.Operator.GE, dateRange.get(\"startDateTime\")),\n+            queryBuilder.rangeConstraint(Constants.CREATED_ON_CONSTRAINT_NAME, StructuredQueryBuilder.Operator.LT, dateRange.get(\"endDateTime\"))\n+        );\n+    }\n+\n+    protected Map<String, String> computeDateRange(DocSearchQueryInfo.FacetData data, CreatedOnFacetInputs facetInputs) {\n+\n+        if(data.getStringValues().size() > 0) {\n+            facetInputs.timeRange = data.getStringValues().get(0);\n+        }\n+\n+        if(data.getStringValues().size() > 1) {\n+            facetInputs.zoneOffset = Integer.parseInt(data.getStringValues().get(1));\n+        }\n+\n+        facetInputs.zoneId = ZoneId.ofOffset(\"UTC\", ZoneOffset.ofTotalSeconds(facetInputs.zoneOffset*60));\n+        facetInputs.startDate = LocalDate.now().atStartOfDay(facetInputs.zoneId);\n+        facetInputs.endDate = LocalDate.now().atStartOfDay(facetInputs.zoneId);\n+\n+        switch (facetInputs.timeRange) {\n+            case \"Today\":\n+                getTodayTimeWindow(facetInputs);\n+                break;\n+\n+            case \"This Week\":\n+                getThisWeekTimeWindow(facetInputs);\n+                break;\n+\n+            case \"This Month\":\n+                getThisMonthTimeWindow(facetInputs);\n+                break;\n \n-        // Converting the date in string format from yyyy-MM-dd format to yyyy-MM-dd HH:mm:ss format\n-        // Adding 1 day to end date to get docs harmonized on the end date as well.\n-        LocalDate endDate = LocalDate.parse(data.getRangeValues().getUpperBound(), DATE_FORMAT)\n-                .plusDays(1);\n-        String endDateTime = endDate.atStartOfDay(ZoneId.systemDefault()).format(DATE_TIME_FORMAT);\n+            case \"Custom\":\n+                getCustomTimeWindow(data, facetInputs);\n+                break;\n+        }\n+        return facetInputs.dateRange;\n+    }\n+\n+    private void getTodayTimeWindow(CreatedOnFacetInputs facetInputs) {\n+        facetInputs.startDateTime = facetInputs.startDate.toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"startDateTime\", facetInputs.startDateTime);\n+        facetInputs.endDateTime = facetInputs.endDate.plusDays(1).toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"endDateTime\", facetInputs.endDateTime);\n+    }\n+\n+    private void getThisWeekTimeWindow(CreatedOnFacetInputs facetInputs) {\n+        facetInputs.startDateTime = facetInputs.startDate.plusDays((-1) * (facetInputs.startDate.getDayOfWeek().getValue() % 7)).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"startDateTime\", facetInputs.startDateTime);\n+        facetInputs.endDateTime = facetInputs.endDate.plusDays(1).toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"endDateTime\", facetInputs.endDateTime);\n+    }\n+\n+    private void getThisMonthTimeWindow(CreatedOnFacetInputs facetInputs) {\n+        facetInputs.startDate = facetInputs.startDate.with(TemporalAdjusters.firstDayOfMonth());\n+        facetInputs.startDateTime = facetInputs.startDate.toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"startDateTime\", facetInputs.startDateTime);\n+        facetInputs.endDateTime = facetInputs.endDate.plusDays(1).toLocalDate().atStartOfDay(facetInputs.zoneId).format(DATE_TIME_FORMAT);\n+        facetInputs.dateRange.put(\"endDateTime\", facetInputs.endDateTime);\n+    }\n \n-        return queryBuilder\n-                .and(queryBuilder.rangeConstraint(Constants.CREATED_ON_CONSTRAINT_NAME, StructuredQueryBuilder.Operator.GE, startDateTime),\n-                        queryBuilder.rangeConstraint(Constants.CREATED_ON_CONSTRAINT_NAME, StructuredQueryBuilder.Operator.LT, endDateTime));\n+    private void getCustomTimeWindow(DocSearchQueryInfo.FacetData data, CreatedOnFacetInputs facetInputs) {\n+        if(!data.getRangeValues().getLowerBound().isEmpty() && !data.getRangeValues().getUpperBound().isEmpty()) {\n+            try {\n+                facetInputs.startDateTime = ZonedDateTime.parse(data.getRangeValues().getLowerBound()).format(DATE_TIME_FORMAT);\n+                facetInputs.endDateTime = ZonedDateTime.parse(data.getRangeValues().getUpperBound()).plusDays(1).format(DATE_TIME_FORMAT);\n+            } catch (DateTimeParseException dtpe) {\n+                facetInputs.startDate = LocalDate.parse(data.getRangeValues().getLowerBound()).atStartOfDay().atZone(ZoneOffset.UTC);\n+                facetInputs.endDate = LocalDate.parse(data.getRangeValues().getUpperBound()).atStartOfDay().atZone(ZoneOffset.UTC);\n+                facetInputs.startDateTime = facetInputs.startDate.format(DATE_TIME_FORMAT);\n+                facetInputs.endDateTime = facetInputs.endDate.plusDays(1).format(DATE_TIME_FORMAT);\n+            }\n+            facetInputs.dateRange.put(\"startDateTime\", facetInputs.startDateTime);\n+            facetInputs.dateRange.put(\"endDateTime\", facetInputs.endDateTime);\n+        } else {\n+            throw new DataHubException(\"The date range is missing for createdOn in your request\");\n+        }\n+    }\n \n+    public static final class CreatedOnFacetInputs {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "defc8dfb28db7d03a504f371e09205be156e3bf0"}, "originalPosition": 118}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4053, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}