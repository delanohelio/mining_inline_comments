{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNTUzNTg1", "number": 3631, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOTo1OTozNFrODkZ2Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDoyOTozNFrODkaZvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDk4NzYyOnYy", "diffSide": "RIGHT", "path": "one-ui/ui/src/App.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOTo1OTozNFrOFwtSTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOTo1OTozNFrOFwtSTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNzkzMg==", "bodyText": "I recommend naming this \"EntityTypes\", assuming that this page will show entity types vs entity instances. I think this is an area where it's not clear which one is meant.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3631#discussion_r386617932", "createdAt": "2020-03-02T19:59:34Z", "author": {"login": "rjrudin"}, "path": "one-ui/ui/src/App.tsx", "diffHunk": "@@ -103,7 +104,7 @@ const App: React.FC<Props> = ({history, location}) => {\n           <LoadData/>\n         </PrivateRoute>\n         <PrivateRoute path=\"/entity-tiles\" exact>\n-          <EntityTiles/>\n+          <Entities/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8280a4809b609258a8cfd4347d48e3e5c27c60e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDk4ODU4OnYy", "diffSide": "RIGHT", "path": "one-ui/ui/src/components/entities/entity-tiles.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOTo1OTo1MVrOFwtS3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMzo0MjoxN1rOFwzaHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxODA3Nw==", "bodyText": "Should use \"entityTypeTitle\"", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3631#discussion_r386618077", "createdAt": "2020-03-02T19:59:51Z", "author": {"login": "rjrudin"}, "path": "one-ui/ui/src/components/entities/entity-tiles.tsx", "diffHunk": "@@ -47,7 +41,25 @@ const EntityTiles: React.FC = () => {\n           } catch (error) {\n               let message = error;\n               console.log('Error while fetching mapping artifacts', message);\n-              //handleError(error);\n+          }\n+    }\n+\n+    const getMappingArtifactByMapName = async (entityName,mapName) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8280a4809b609258a8cfd4347d48e3e5c27c60e"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcxODIzNg==", "bodyText": "Done.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3631#discussion_r386718236", "createdAt": "2020-03-02T23:42:17Z", "author": {"login": "xnikhil08"}, "path": "one-ui/ui/src/components/entities/entity-tiles.tsx", "diffHunk": "@@ -47,7 +41,25 @@ const EntityTiles: React.FC = () => {\n           } catch (error) {\n               let message = error;\n               console.log('Error while fetching mapping artifacts', message);\n-              //handleError(error);\n+          }\n+    }\n+\n+    const getMappingArtifactByMapName = async (entityName,mapName) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxODA3Nw=="}, "originalCommit": {"oid": "e8280a4809b609258a8cfd4347d48e3e5c27c60e"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDk5MjE1OnYy", "diffSide": "RIGHT", "path": "one-ui/ui/src/components/entities/entity-tiles.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDowMDo1MlrOFwtVDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMzo0MjoyNlrOFwzaSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxODYzOA==", "bodyText": "This is a \"mapping\", right? \"entArt\" implies it's an entity model artifact, but the URL indicates it's a mapping.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3631#discussion_r386618638", "createdAt": "2020-03-02T20:00:52Z", "author": {"login": "rjrudin"}, "path": "one-ui/ui/src/components/entities/entity-tiles.tsx", "diffHunk": "@@ -47,7 +41,25 @@ const EntityTiles: React.FC = () => {\n           } catch (error) {\n               let message = error;\n               console.log('Error while fetching mapping artifacts', message);\n-              //handleError(error);\n+          }\n+    }\n+\n+    const getMappingArtifactByMapName = async (entityName,mapName) => {\n+        try {\n+            let response = await axios.get(`/api/artifacts/mapping/${mapName}`);\n+            \n+            if (response.status === 200) {\n+                let entArt = response.data;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8280a4809b609258a8cfd4347d48e3e5c27c60e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcxODI4Mg==", "bodyText": "Done.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3631#discussion_r386718282", "createdAt": "2020-03-02T23:42:26Z", "author": {"login": "xnikhil08"}, "path": "one-ui/ui/src/components/entities/entity-tiles.tsx", "diffHunk": "@@ -47,7 +41,25 @@ const EntityTiles: React.FC = () => {\n           } catch (error) {\n               let message = error;\n               console.log('Error while fetching mapping artifacts', message);\n-              //handleError(error);\n+          }\n+    }\n+\n+    const getMappingArtifactByMapName = async (entityName,mapName) => {\n+        try {\n+            let response = await axios.get(`/api/artifacts/mapping/${mapName}`);\n+            \n+            if (response.status === 200) {\n+                let entArt = response.data;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxODYzOA=="}, "originalCommit": {"oid": "e8280a4809b609258a8cfd4347d48e3e5c27c60e"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTAwOTkwOnYy", "diffSide": "RIGHT", "path": "one-ui/ui/src/components/entities/entity-tiles.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDowNzowNlrOFwtgUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMzo0MjozOFrOFwzaiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyMTUyMQ==", "bodyText": "If these console.log messages are going to be retained, I recommend some consistency in them - there's \"Mapping Artifacts\", \"MappingArtifact\", \"Mapping artifact\", and \"mapping artifact\". I believe the term \"artifact\" is redundant here and doesn't need to be used - \"mapping\" should suffice, just like \"step definition\" and \"flow\".", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3631#discussion_r386621521", "createdAt": "2020-03-02T20:07:06Z", "author": {"login": "rjrudin"}, "path": "one-ui/ui/src/components/entities/entity-tiles.tsx", "diffHunk": "@@ -63,28 +75,47 @@ const EntityTiles: React.FC = () => {\n             } \n           } catch (error) {\n               let message = error.response.data.message;\n-              console.log('Error while deleting load data artifact.', message);\n+              console.log('Error while deleting mapping artifact.', message);\n               setIsLoading(false);\n-              //handleError(error);\n           }\n     }\n \n     const createMappingArtifact = async (mapObj) => {\n-        console.log('Create API Called!')\n         try {\n             setIsLoading(true);\n       \n             let response = await axios.post(`/api/artifacts/mapping/${mapObj.name}`, mapObj);\n             if (response.status === 200) {\n-              console.log('Create/Update LoadDataArtifact API Called successfully!')\n+              console.log('Create MappingArtifact API Called successfully!')\n               setIsLoading(false);\n+              return true;\n+            } else {\n+                return false;\n             }\n           }\n           catch (error) {\n-            let message = error.response.data.message;\n-            console.log('Error While creating the Load Data artifact!', message)\n+            let message = error;\n+            console.log('Error While creating the Mapping artifact!', message)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8280a4809b609258a8cfd4347d48e3e5c27c60e"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcxODM0Nw==", "bodyText": "Done.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3631#discussion_r386718347", "createdAt": "2020-03-02T23:42:38Z", "author": {"login": "xnikhil08"}, "path": "one-ui/ui/src/components/entities/entity-tiles.tsx", "diffHunk": "@@ -63,28 +75,47 @@ const EntityTiles: React.FC = () => {\n             } \n           } catch (error) {\n               let message = error.response.data.message;\n-              console.log('Error while deleting load data artifact.', message);\n+              console.log('Error while deleting mapping artifact.', message);\n               setIsLoading(false);\n-              //handleError(error);\n           }\n     }\n \n     const createMappingArtifact = async (mapObj) => {\n-        console.log('Create API Called!')\n         try {\n             setIsLoading(true);\n       \n             let response = await axios.post(`/api/artifacts/mapping/${mapObj.name}`, mapObj);\n             if (response.status === 200) {\n-              console.log('Create/Update LoadDataArtifact API Called successfully!')\n+              console.log('Create MappingArtifact API Called successfully!')\n               setIsLoading(false);\n+              return true;\n+            } else {\n+                return false;\n             }\n           }\n           catch (error) {\n-            let message = error.response.data.message;\n-            console.log('Error While creating the Load Data artifact!', message)\n+            let message = error;\n+            console.log('Error While creating the Mapping artifact!', message)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyMTUyMQ=="}, "originalCommit": {"oid": "e8280a4809b609258a8cfd4347d48e3e5c27c60e"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTAxMjgzOnYy", "diffSide": "RIGHT", "path": "one-ui/ui/src/components/entities/entity-tiles.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDowODowOVrOFwtiTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDowODowOVrOFwtiTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyMjAyOQ==", "bodyText": "Can this be \"mapping\" instead of \"mapObj\"? \"mapObj\" makes me think it's different from a \"mapping\" in terms of what data it holds. If they're the same, let's only use one term, that's simpler.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3631#discussion_r386622029", "createdAt": "2020-03-02T20:08:09Z", "author": {"login": "rjrudin"}, "path": "one-ui/ui/src/components/entities/entity-tiles.tsx", "diffHunk": "@@ -63,28 +75,47 @@ const EntityTiles: React.FC = () => {\n             } \n           } catch (error) {\n               let message = error.response.data.message;\n-              console.log('Error while deleting load data artifact.', message);\n+              console.log('Error while deleting mapping artifact.', message);\n               setIsLoading(false);\n-              //handleError(error);\n           }\n     }\n \n     const createMappingArtifact = async (mapObj) => {\n-        console.log('Create API Called!')\n         try {\n             setIsLoading(true);\n       \n             let response = await axios.post(`/api/artifacts/mapping/${mapObj.name}`, mapObj);\n             if (response.status === 200) {\n-              console.log('Create/Update LoadDataArtifact API Called successfully!')\n+              console.log('Create MappingArtifact API Called successfully!')\n               setIsLoading(false);\n+              return true;\n+            } else {\n+                return false;\n             }\n           }\n           catch (error) {\n-            let message = error.response.data.message;\n-            console.log('Error While creating the Load Data artifact!', message)\n+            let message = error;\n+            console.log('Error While creating the Mapping artifact!', message)\n             setIsLoading(false);\n-            //handleError(error);\n+            return false;\n+          }\n+    }\n+\n+    const updateMappingArtifact = async (mapObj) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8280a4809b609258a8cfd4347d48e3e5c27c60e"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTAyMTY2OnYy", "diffSide": "RIGHT", "path": "one-ui/ui/src/components/entities/entity-tiles.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDoxMTowM1rOFwtnfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMzoyMTowNFrOFwy9VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyMzM1OA==", "bodyText": "What does \"entities info\" refer to? I'm guessing it's the entityType? If so, then I think this should be \"entityType={props.entityTypes[entMaps.entityType]}\".\nBut I think \"entMaps\" should be renamed as well to something that's more clear. Based on its usage - it has \"entityType\" and \"artifacts\" as properties - I'm guessing it's a collection of things pertaining to an entityType. Perhaps \"entityCardData\" would be better here, as it seems specific to the data needed to display an entity-specific card?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3631#discussion_r386623358", "createdAt": "2020-03-02T20:11:03Z", "author": {"login": "rjrudin"}, "path": "one-ui/ui/src/components/entities/entity-tiles.tsx", "diffHunk": "@@ -95,10 +126,13 @@ const EntityTiles: React.FC = () => {\n             output = <div className={styles.cardView}>\n                 <MappingCard data={entMaps.artifacts}\n                     entityName={entMaps.entityType}\n+                    getMappingArtifactByMapName={getMappingArtifactByMapName}\n                     deleteMappingArtifact={deleteMappingArtifact}\n                     createMappingArtifact={createMappingArtifact}\n-                    canReadWrite={canReadWrite}\n-                    canReadOnly={canReadOnly} />\n+                    updateMappingArtifact={updateMappingArtifact}\n+                    canReadWrite={props.canReadWrite}\n+                    canReadOnly={props.canReadOnly}\n+                    entitiesInfo={props.entitiesInfo[entMaps.entityType]} />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8280a4809b609258a8cfd4347d48e3e5c27c60e"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcxMDg2OQ==", "bodyText": "Done.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3631#discussion_r386710869", "createdAt": "2020-03-02T23:21:04Z", "author": {"login": "xnikhil08"}, "path": "one-ui/ui/src/components/entities/entity-tiles.tsx", "diffHunk": "@@ -95,10 +126,13 @@ const EntityTiles: React.FC = () => {\n             output = <div className={styles.cardView}>\n                 <MappingCard data={entMaps.artifacts}\n                     entityName={entMaps.entityType}\n+                    getMappingArtifactByMapName={getMappingArtifactByMapName}\n                     deleteMappingArtifact={deleteMappingArtifact}\n                     createMappingArtifact={createMappingArtifact}\n-                    canReadWrite={canReadWrite}\n-                    canReadOnly={canReadOnly} />\n+                    updateMappingArtifact={updateMappingArtifact}\n+                    canReadWrite={props.canReadWrite}\n+                    canReadOnly={props.canReadOnly}\n+                    entitiesInfo={props.entitiesInfo[entMaps.entityType]} />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyMzM1OA=="}, "originalCommit": {"oid": "e8280a4809b609258a8cfd4347d48e3e5c27c60e"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTAyNzgyOnYy", "diffSide": "RIGHT", "path": "one-ui/ui/src/components/entities/mapping/mapping-card.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDoxMzowNFrOFwtrYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMjozMTo1NFrOFwxw7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyNDM1Mg==", "bodyText": "The user is really constructing a mapping artifact, not an entity. Can we instead say there's a \"source table\" and a \"mapping table\"?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3631#discussion_r386624352", "createdAt": "2020-03-02T20:13:04Z", "author": {"login": "rjrudin"}, "path": "one-ui/ui/src/components/entities/mapping/mapping-card.tsx", "diffHunk": "@@ -1,30 +1,47 @@\n-import React, { CSSProperties, useState } from 'react';\n+import React, { CSSProperties, useState, useEffect } from 'react';\n import styles from './mapping-card.module.scss';\n import {Card, Icon, Tooltip, Row, Col, Modal} from 'antd';\n import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n import {faTrashAlt} from '@fortawesome/free-regular-svg-icons';\n import sourceFormatOptions from '../../../config/formats.config';\n-import { convertDateFromISO } from '../../../util/conversionFunctions';\n+import { convertDateFromISO, getInitialChars } from '../../../util/conversionFunctions';\n import CreateEditMappingDialog from './create-edit-mapping-dialog/create-edit-mapping-dialog';\n+import SourceToEntityMap from './source-entity-map/source-to-entity-map';\n+import {getResultsByQuery, getDoc} from '../../../util/search-service'\n \n interface Props {\n     data: any;\n     entityName: any;\n+    getMappingArtifactByMapName: any;\n     deleteMappingArtifact: any;\n     createMappingArtifact: any;\n+    updateMappingArtifact: any;\n     canReadOnly: any;\n     canReadWrite: any;\n+    entitiesInfo: any;\n   }\n \n const MappingCard: React.FC<Props> = (props) => {\n     const [newMap, setNewMap] = useState(false);\n     const [title, setTitle] = useState('');\n     const [mapData, setMapData] = useState({});\n+    const [mapName, setMapName] = useState({});\n     const [dialogVisible, setDialogVisible] = useState(false);\n     const [loadArtifactName, setLoadArtifactName] = useState('');\n+    const [mappingVisible, setMappingVisible] = useState(false);\n+    const [sourceData, setSourceData] = useState<any[]>([]);\n+    const [sourceURI,setSourceURI] = useState('');\n+    const [docNotFound, setDocNotFound] = useState(false);\n+\n+    //For Entity table\n+    const [entityData, setEntityData] = useState<any[]>([]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8280a4809b609258a8cfd4347d48e3e5c27c60e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY5MTMxMA==", "bodyText": "@rjrudin - I used the name 'EntityData' here because it seems consistent with the UI as we have been calling the right-hand side table in mapping UI as Entity table only.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3631#discussion_r386691310", "createdAt": "2020-03-02T22:31:54Z", "author": {"login": "xnikhil08"}, "path": "one-ui/ui/src/components/entities/mapping/mapping-card.tsx", "diffHunk": "@@ -1,30 +1,47 @@\n-import React, { CSSProperties, useState } from 'react';\n+import React, { CSSProperties, useState, useEffect } from 'react';\n import styles from './mapping-card.module.scss';\n import {Card, Icon, Tooltip, Row, Col, Modal} from 'antd';\n import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n import {faTrashAlt} from '@fortawesome/free-regular-svg-icons';\n import sourceFormatOptions from '../../../config/formats.config';\n-import { convertDateFromISO } from '../../../util/conversionFunctions';\n+import { convertDateFromISO, getInitialChars } from '../../../util/conversionFunctions';\n import CreateEditMappingDialog from './create-edit-mapping-dialog/create-edit-mapping-dialog';\n+import SourceToEntityMap from './source-entity-map/source-to-entity-map';\n+import {getResultsByQuery, getDoc} from '../../../util/search-service'\n \n interface Props {\n     data: any;\n     entityName: any;\n+    getMappingArtifactByMapName: any;\n     deleteMappingArtifact: any;\n     createMappingArtifact: any;\n+    updateMappingArtifact: any;\n     canReadOnly: any;\n     canReadWrite: any;\n+    entitiesInfo: any;\n   }\n \n const MappingCard: React.FC<Props> = (props) => {\n     const [newMap, setNewMap] = useState(false);\n     const [title, setTitle] = useState('');\n     const [mapData, setMapData] = useState({});\n+    const [mapName, setMapName] = useState({});\n     const [dialogVisible, setDialogVisible] = useState(false);\n     const [loadArtifactName, setLoadArtifactName] = useState('');\n+    const [mappingVisible, setMappingVisible] = useState(false);\n+    const [sourceData, setSourceData] = useState<any[]>([]);\n+    const [sourceURI,setSourceURI] = useState('');\n+    const [docNotFound, setDocNotFound] = useState(false);\n+\n+    //For Entity table\n+    const [entityData, setEntityData] = useState<any[]>([]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyNDM1Mg=="}, "originalCommit": {"oid": "e8280a4809b609258a8cfd4347d48e3e5c27c60e"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTAzODYzOnYy", "diffSide": "RIGHT", "path": "one-ui/ui/src/components/entities/mapping/mapping-card.tsx", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDoxNjozNlrOFwtyAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMzo1MDozM1rOFxGd-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyNjA1MQ==", "bodyText": "This seems like implementation details that the GUI shouldn't have to worry about. Could the GUI instead say - Hey middle tier, get me a source document for this step?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3631#discussion_r386626051", "createdAt": "2020-03-02T20:16:36Z", "author": {"login": "rjrudin"}, "path": "one-ui/ui/src/components/entities/mapping/mapping-card.tsx", "diffHunk": "@@ -103,6 +110,142 @@ const MappingCard: React.FC<Props> = (props) => {\n         <span style={{fontSize: '16px'}}>Are you sure you want to delete this?</span>\n         </Modal>;\n \n+\n+    const getSourceData = async (index) => {\n+\n+        let database = props.data[index].sourceDatabase || 'data-hub-STAGING';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8280a4809b609258a8cfd4347d48e3e5c27c60e"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcwMTgwMA==", "bodyText": "@rjrudin - This is how it works in the current QS as well. We pass the source database name and Source Query to the middle-tier via the API '/search/sjsSearch' to get the list of URIs and then supply one of those URIs to the endpoint '/search/doc' to get the required Doc.\nIf we want to send only the step number then we will have to redesign this process but the hurdle here is that a mapping artifact will not have a step number unless its added to a flow. Either ways should we take that up in this story itself?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3631#discussion_r386701800", "createdAt": "2020-03-02T22:56:55Z", "author": {"login": "xnikhil08"}, "path": "one-ui/ui/src/components/entities/mapping/mapping-card.tsx", "diffHunk": "@@ -103,6 +110,142 @@ const MappingCard: React.FC<Props> = (props) => {\n         <span style={{fontSize: '16px'}}>Are you sure you want to delete this?</span>\n         </Modal>;\n \n+\n+    const getSourceData = async (index) => {\n+\n+        let database = props.data[index].sourceDatabase || 'data-hub-STAGING';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyNjA1MQ=="}, "originalCommit": {"oid": "e8280a4809b609258a8cfd4347d48e3e5c27c60e"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAzMDUyMA==", "bodyText": "Yes we can revisit later, I may open a ticket to rework this.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3631#discussion_r387030520", "createdAt": "2020-03-03T13:50:33Z", "author": {"login": "rjrudin"}, "path": "one-ui/ui/src/components/entities/mapping/mapping-card.tsx", "diffHunk": "@@ -103,6 +110,142 @@ const MappingCard: React.FC<Props> = (props) => {\n         <span style={{fontSize: '16px'}}>Are you sure you want to delete this?</span>\n         </Modal>;\n \n+\n+    const getSourceData = async (index) => {\n+\n+        let database = props.data[index].sourceDatabase || 'data-hub-STAGING';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyNjA1MQ=="}, "originalCommit": {"oid": "e8280a4809b609258a8cfd4347d48e3e5c27c60e"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTA0NjE2OnYy", "diffSide": "RIGHT", "path": "one-ui/ui/src/components/entities/mapping/mapping-card.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDoxOToxMlrOFwt2pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMzoyMDo0M1rOFwy8sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyNzIzNg==", "bodyText": "I recommend \"entityModel\" instead of \"entitiesInfo\" (though why are there two levels of \"definitions\" here?) and then \"entityTypeTitle\" instead of \"entityName\".", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3631#discussion_r386627236", "createdAt": "2020-03-02T20:19:12Z", "author": {"login": "rjrudin"}, "path": "one-ui/ui/src/components/entities/mapping/mapping-card.tsx", "diffHunk": "@@ -103,6 +110,142 @@ const MappingCard: React.FC<Props> = (props) => {\n         <span style={{fontSize: '16px'}}>Are you sure you want to delete this?</span>\n         </Modal>;\n \n+\n+    const getSourceData = async (index) => {\n+\n+        let database = props.data[index].sourceDatabase || 'data-hub-STAGING';\n+        let sQuery = props.data[index].sourceQuery;\n+        \n+        try{\n+        let response = await getResultsByQuery(database,sQuery,10, true);\n+          if (response.status === 200) {\n+           setSourceURI(response.data[0].uri);\n+           \n+           fetchSrcDocFromUri(response.data[0].uri);\n+        \n+          }\n+        }\n+        catch(error)  {\n+            let message = error;//.response.data.message;\n+            console.log('Error While loading the source data!', message);\n+            setDocNotFound(true);\n+        }\n+           \n+       \n+    }\n+\n+    const fetchSrcDocFromUri = async (uri) => {\n+        try{\n+            let srcDocResp = await getDoc('STAGING', uri);\n+            if (srcDocResp.status === 200) {\n+                let nestedDoc: any = [];\n+                let docRoot = srcDocResp.data['envelope'] ? srcDocResp.data['envelope']['instance'] : srcDocResp.data;\n+                let sDta = generateNestedDataSource(docRoot,nestedDoc);\n+                //setSourceData(prevState => ([ ...prevState, ...sDta]));\n+                setSourceData([...sDta]);\n+            }\n+            } catch(error)  {\n+                let message = error.response.data.message;\n+                console.log('Error While loading the Doc from URI!', message)\n+                setDocNotFound(true);\n+            }\n+    }\n+\n+\n+    // construct infinitely nested source Data\n+    const generateNestedDataSource = (respData, nestedDoc: Array<any>) => {\n+        \n+        Object.keys(respData).map(key => {\n+            let val = respData[key];\n+            if (val != null && val!= \"\") {\n+   \n+                if (val.constructor.name === \"Object\") {\n+     \n+                    let propty = {\n+                        key: key,\n+                        'children': []\n+                    }\n+\n+                    generateNestedDataSource(val, propty.children);\n+                    nestedDoc.push(propty);\n+\n+                } else if (val.constructor.name === \"Array\") {\n+                    //srcData.push({key : key, val: respData[key]})\n+                    \n+                    val.forEach(obj => {\n+                        if(obj.constructor.name == \"String\"){\n+                          let propty = {\n+                            key: key,\n+                            val: obj\n+                          };\n+                          nestedDoc.push(propty);\n+                        } else {\n+                            let propty = {\n+                                key: key,\n+                                children: []\n+                              };\n+                              \n+                          generateNestedDataSource(obj, propty.children);\n+                          nestedDoc.push(propty);\n+                        }\n+                      });\n+\n+                } else {\n+\n+                    let propty = {\n+                        key: key,\n+                        val: String(val)\n+                      };\n+                    nestedDoc.push(propty);\n+                }\n+\n+            } else {\n+\n+                let propty = {\n+                    key: key,\n+                    val: \"\"\n+                  };\n+                nestedDoc.push(propty);\n+            }\n+        });\n+\n+        return nestedDoc;\n+        \n+        \n+        \n+    }\n+    \n+    \n+    const extractEntityInfoForTable = () => {\n+        let entProps = props.entitiesInfo.definitions.definitions[props.entityName].properties;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8280a4809b609258a8cfd4347d48e3e5c27c60e"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcxMDcwNA==", "bodyText": "Done.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3631#discussion_r386710704", "createdAt": "2020-03-02T23:20:43Z", "author": {"login": "xnikhil08"}, "path": "one-ui/ui/src/components/entities/mapping/mapping-card.tsx", "diffHunk": "@@ -103,6 +110,142 @@ const MappingCard: React.FC<Props> = (props) => {\n         <span style={{fontSize: '16px'}}>Are you sure you want to delete this?</span>\n         </Modal>;\n \n+\n+    const getSourceData = async (index) => {\n+\n+        let database = props.data[index].sourceDatabase || 'data-hub-STAGING';\n+        let sQuery = props.data[index].sourceQuery;\n+        \n+        try{\n+        let response = await getResultsByQuery(database,sQuery,10, true);\n+          if (response.status === 200) {\n+           setSourceURI(response.data[0].uri);\n+           \n+           fetchSrcDocFromUri(response.data[0].uri);\n+        \n+          }\n+        }\n+        catch(error)  {\n+            let message = error;//.response.data.message;\n+            console.log('Error While loading the source data!', message);\n+            setDocNotFound(true);\n+        }\n+           \n+       \n+    }\n+\n+    const fetchSrcDocFromUri = async (uri) => {\n+        try{\n+            let srcDocResp = await getDoc('STAGING', uri);\n+            if (srcDocResp.status === 200) {\n+                let nestedDoc: any = [];\n+                let docRoot = srcDocResp.data['envelope'] ? srcDocResp.data['envelope']['instance'] : srcDocResp.data;\n+                let sDta = generateNestedDataSource(docRoot,nestedDoc);\n+                //setSourceData(prevState => ([ ...prevState, ...sDta]));\n+                setSourceData([...sDta]);\n+            }\n+            } catch(error)  {\n+                let message = error.response.data.message;\n+                console.log('Error While loading the Doc from URI!', message)\n+                setDocNotFound(true);\n+            }\n+    }\n+\n+\n+    // construct infinitely nested source Data\n+    const generateNestedDataSource = (respData, nestedDoc: Array<any>) => {\n+        \n+        Object.keys(respData).map(key => {\n+            let val = respData[key];\n+            if (val != null && val!= \"\") {\n+   \n+                if (val.constructor.name === \"Object\") {\n+     \n+                    let propty = {\n+                        key: key,\n+                        'children': []\n+                    }\n+\n+                    generateNestedDataSource(val, propty.children);\n+                    nestedDoc.push(propty);\n+\n+                } else if (val.constructor.name === \"Array\") {\n+                    //srcData.push({key : key, val: respData[key]})\n+                    \n+                    val.forEach(obj => {\n+                        if(obj.constructor.name == \"String\"){\n+                          let propty = {\n+                            key: key,\n+                            val: obj\n+                          };\n+                          nestedDoc.push(propty);\n+                        } else {\n+                            let propty = {\n+                                key: key,\n+                                children: []\n+                              };\n+                              \n+                          generateNestedDataSource(obj, propty.children);\n+                          nestedDoc.push(propty);\n+                        }\n+                      });\n+\n+                } else {\n+\n+                    let propty = {\n+                        key: key,\n+                        val: String(val)\n+                      };\n+                    nestedDoc.push(propty);\n+                }\n+\n+            } else {\n+\n+                let propty = {\n+                    key: key,\n+                    val: \"\"\n+                  };\n+                nestedDoc.push(propty);\n+            }\n+        });\n+\n+        return nestedDoc;\n+        \n+        \n+        \n+    }\n+    \n+    \n+    const extractEntityInfoForTable = () => {\n+        let entProps = props.entitiesInfo.definitions.definitions[props.entityName].properties;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyNzIzNg=="}, "originalCommit": {"oid": "e8280a4809b609258a8cfd4347d48e3e5c27c60e"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTA0ODE1OnYy", "diffSide": "RIGHT", "path": "one-ui/ui/src/components/entities/mapping/mapping-card.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDoxOTo1MFrOFwt33w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMzoyMDoyMFrOFwy8MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyNzU1MQ==", "bodyText": "\"EntityData\" sounds like property values from entity instances. But this is really an array of entity type properties, right? So I'd call it \"setEntityTypeProperties\".", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3631#discussion_r386627551", "createdAt": "2020-03-02T20:19:50Z", "author": {"login": "rjrudin"}, "path": "one-ui/ui/src/components/entities/mapping/mapping-card.tsx", "diffHunk": "@@ -103,6 +110,142 @@ const MappingCard: React.FC<Props> = (props) => {\n         <span style={{fontSize: '16px'}}>Are you sure you want to delete this?</span>\n         </Modal>;\n \n+\n+    const getSourceData = async (index) => {\n+\n+        let database = props.data[index].sourceDatabase || 'data-hub-STAGING';\n+        let sQuery = props.data[index].sourceQuery;\n+        \n+        try{\n+        let response = await getResultsByQuery(database,sQuery,10, true);\n+          if (response.status === 200) {\n+           setSourceURI(response.data[0].uri);\n+           \n+           fetchSrcDocFromUri(response.data[0].uri);\n+        \n+          }\n+        }\n+        catch(error)  {\n+            let message = error;//.response.data.message;\n+            console.log('Error While loading the source data!', message);\n+            setDocNotFound(true);\n+        }\n+           \n+       \n+    }\n+\n+    const fetchSrcDocFromUri = async (uri) => {\n+        try{\n+            let srcDocResp = await getDoc('STAGING', uri);\n+            if (srcDocResp.status === 200) {\n+                let nestedDoc: any = [];\n+                let docRoot = srcDocResp.data['envelope'] ? srcDocResp.data['envelope']['instance'] : srcDocResp.data;\n+                let sDta = generateNestedDataSource(docRoot,nestedDoc);\n+                //setSourceData(prevState => ([ ...prevState, ...sDta]));\n+                setSourceData([...sDta]);\n+            }\n+            } catch(error)  {\n+                let message = error.response.data.message;\n+                console.log('Error While loading the Doc from URI!', message)\n+                setDocNotFound(true);\n+            }\n+    }\n+\n+\n+    // construct infinitely nested source Data\n+    const generateNestedDataSource = (respData, nestedDoc: Array<any>) => {\n+        \n+        Object.keys(respData).map(key => {\n+            let val = respData[key];\n+            if (val != null && val!= \"\") {\n+   \n+                if (val.constructor.name === \"Object\") {\n+     \n+                    let propty = {\n+                        key: key,\n+                        'children': []\n+                    }\n+\n+                    generateNestedDataSource(val, propty.children);\n+                    nestedDoc.push(propty);\n+\n+                } else if (val.constructor.name === \"Array\") {\n+                    //srcData.push({key : key, val: respData[key]})\n+                    \n+                    val.forEach(obj => {\n+                        if(obj.constructor.name == \"String\"){\n+                          let propty = {\n+                            key: key,\n+                            val: obj\n+                          };\n+                          nestedDoc.push(propty);\n+                        } else {\n+                            let propty = {\n+                                key: key,\n+                                children: []\n+                              };\n+                              \n+                          generateNestedDataSource(obj, propty.children);\n+                          nestedDoc.push(propty);\n+                        }\n+                      });\n+\n+                } else {\n+\n+                    let propty = {\n+                        key: key,\n+                        val: String(val)\n+                      };\n+                    nestedDoc.push(propty);\n+                }\n+\n+            } else {\n+\n+                let propty = {\n+                    key: key,\n+                    val: \"\"\n+                  };\n+                nestedDoc.push(propty);\n+            }\n+        });\n+\n+        return nestedDoc;\n+        \n+        \n+        \n+    }\n+    \n+    \n+    const extractEntityInfoForTable = () => {\n+        let entProps = props.entitiesInfo.definitions.definitions[props.entityName].properties;\n+        let entTableTempData: any = [];\n+        entProps.map(prop => {\n+            let propty = {\n+                name : prop.name,\n+                type : prop.datatype\n+            }\n+            entTableTempData.push(propty)\n+        })\n+        setEntityData([...entTableTempData]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8280a4809b609258a8cfd4347d48e3e5c27c60e"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcxMDU3Nw==", "bodyText": "Done", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3631#discussion_r386710577", "createdAt": "2020-03-02T23:20:20Z", "author": {"login": "xnikhil08"}, "path": "one-ui/ui/src/components/entities/mapping/mapping-card.tsx", "diffHunk": "@@ -103,6 +110,142 @@ const MappingCard: React.FC<Props> = (props) => {\n         <span style={{fontSize: '16px'}}>Are you sure you want to delete this?</span>\n         </Modal>;\n \n+\n+    const getSourceData = async (index) => {\n+\n+        let database = props.data[index].sourceDatabase || 'data-hub-STAGING';\n+        let sQuery = props.data[index].sourceQuery;\n+        \n+        try{\n+        let response = await getResultsByQuery(database,sQuery,10, true);\n+          if (response.status === 200) {\n+           setSourceURI(response.data[0].uri);\n+           \n+           fetchSrcDocFromUri(response.data[0].uri);\n+        \n+          }\n+        }\n+        catch(error)  {\n+            let message = error;//.response.data.message;\n+            console.log('Error While loading the source data!', message);\n+            setDocNotFound(true);\n+        }\n+           \n+       \n+    }\n+\n+    const fetchSrcDocFromUri = async (uri) => {\n+        try{\n+            let srcDocResp = await getDoc('STAGING', uri);\n+            if (srcDocResp.status === 200) {\n+                let nestedDoc: any = [];\n+                let docRoot = srcDocResp.data['envelope'] ? srcDocResp.data['envelope']['instance'] : srcDocResp.data;\n+                let sDta = generateNestedDataSource(docRoot,nestedDoc);\n+                //setSourceData(prevState => ([ ...prevState, ...sDta]));\n+                setSourceData([...sDta]);\n+            }\n+            } catch(error)  {\n+                let message = error.response.data.message;\n+                console.log('Error While loading the Doc from URI!', message)\n+                setDocNotFound(true);\n+            }\n+    }\n+\n+\n+    // construct infinitely nested source Data\n+    const generateNestedDataSource = (respData, nestedDoc: Array<any>) => {\n+        \n+        Object.keys(respData).map(key => {\n+            let val = respData[key];\n+            if (val != null && val!= \"\") {\n+   \n+                if (val.constructor.name === \"Object\") {\n+     \n+                    let propty = {\n+                        key: key,\n+                        'children': []\n+                    }\n+\n+                    generateNestedDataSource(val, propty.children);\n+                    nestedDoc.push(propty);\n+\n+                } else if (val.constructor.name === \"Array\") {\n+                    //srcData.push({key : key, val: respData[key]})\n+                    \n+                    val.forEach(obj => {\n+                        if(obj.constructor.name == \"String\"){\n+                          let propty = {\n+                            key: key,\n+                            val: obj\n+                          };\n+                          nestedDoc.push(propty);\n+                        } else {\n+                            let propty = {\n+                                key: key,\n+                                children: []\n+                              };\n+                              \n+                          generateNestedDataSource(obj, propty.children);\n+                          nestedDoc.push(propty);\n+                        }\n+                      });\n+\n+                } else {\n+\n+                    let propty = {\n+                        key: key,\n+                        val: String(val)\n+                      };\n+                    nestedDoc.push(propty);\n+                }\n+\n+            } else {\n+\n+                let propty = {\n+                    key: key,\n+                    val: \"\"\n+                  };\n+                nestedDoc.push(propty);\n+            }\n+        });\n+\n+        return nestedDoc;\n+        \n+        \n+        \n+    }\n+    \n+    \n+    const extractEntityInfoForTable = () => {\n+        let entProps = props.entitiesInfo.definitions.definitions[props.entityName].properties;\n+        let entTableTempData: any = [];\n+        entProps.map(prop => {\n+            let propty = {\n+                name : prop.name,\n+                type : prop.datatype\n+            }\n+            entTableTempData.push(propty)\n+        })\n+        setEntityData([...entTableTempData]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyNzU1MQ=="}, "originalCommit": {"oid": "e8280a4809b609258a8cfd4347d48e3e5c27c60e"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTA1OTgzOnYy", "diffSide": "RIGHT", "path": "one-ui/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.module.scss", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDoyMzozM1rOFwt-3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMzoyODozNVrOFwzHww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyOTM0Mw==", "bodyText": "Is \"Exp\" short for \"Expression\" here? If so, I think since \"mapExpression\" is used below, use \"mapExpression\" here too.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3631#discussion_r386629343", "createdAt": "2020-03-02T20:23:33Z", "author": {"login": "rjrudin"}, "path": "one-ui/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.module.scss", "diffHunk": "@@ -0,0 +1,214 @@\n+\n+.mapContainer{\n+    //padding: 40px 200px 100px 40px;\n+    //margin-bottom: 100px;\n+    height: 100%;\n+    top: 8vh;\n+    //box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n+}\n+.header{\n+    display:inline-flex;\n+}\n+.headerTitle{\n+    font-size: 1.5em;\n+    width: fit-content;\n+    //border: 1px solid red;\n+}\n+\n+.saveMessage{\n+    //width: fit-content;\n+    border: 1px solid #ff0000;\n+    margin-left: 30em;\n+}\n+.noMessage{\n+    padding: 2.25vh 0vh;\n+}\n+.parentContainer{\n+    display: flex;\n+    flex-direction: row;\n+    padding-bottom: 2vh;\n+    padding-top: 1vh;\n+}\n+\n+.sourceContainer{\n+    width: auto;\n+    height: auto;\n+    flex: 4;\n+    display: flex;\n+    flex-direction: column;\n+    padding-right: 20px;\n+    word-break: break-all;\n+}\n+\n+.sourceTable {\n+    & thead > tr > th {\n+        background-color: #fafafa;\n+        line-height: 2px;\n+      };\n+    & tbody > tr > td {\n+        line-height: 2px;\n+    }\n+}\n+.srcTableRows{\n+    line-height: 1px;\n+}\n+\n+.entityContainer{\n+    width: auto;\n+    flex: 9;\n+    display: flex;\n+    flex-direction: column;\n+    padding-right: 20px;\n+    word-break: break-all;\n+}\n+\n+.entityTable {\n+    & thead > tr > th {\n+        background-color: #fafafa;\n+        line-height: 2px;\n+      };\n+    & tbody > tr > td {\n+        line-height: 2px;\n+        vertical-align: top;\n+    }\n+}\n+\n+.mapExpContainer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8280a4809b609258a8cfd4347d48e3e5c27c60e"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcxMzUzOQ==", "bodyText": "Done.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3631#discussion_r386713539", "createdAt": "2020-03-02T23:28:35Z", "author": {"login": "xnikhil08"}, "path": "one-ui/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.module.scss", "diffHunk": "@@ -0,0 +1,214 @@\n+\n+.mapContainer{\n+    //padding: 40px 200px 100px 40px;\n+    //margin-bottom: 100px;\n+    height: 100%;\n+    top: 8vh;\n+    //box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n+}\n+.header{\n+    display:inline-flex;\n+}\n+.headerTitle{\n+    font-size: 1.5em;\n+    width: fit-content;\n+    //border: 1px solid red;\n+}\n+\n+.saveMessage{\n+    //width: fit-content;\n+    border: 1px solid #ff0000;\n+    margin-left: 30em;\n+}\n+.noMessage{\n+    padding: 2.25vh 0vh;\n+}\n+.parentContainer{\n+    display: flex;\n+    flex-direction: row;\n+    padding-bottom: 2vh;\n+    padding-top: 1vh;\n+}\n+\n+.sourceContainer{\n+    width: auto;\n+    height: auto;\n+    flex: 4;\n+    display: flex;\n+    flex-direction: column;\n+    padding-right: 20px;\n+    word-break: break-all;\n+}\n+\n+.sourceTable {\n+    & thead > tr > th {\n+        background-color: #fafafa;\n+        line-height: 2px;\n+      };\n+    & tbody > tr > td {\n+        line-height: 2px;\n+    }\n+}\n+.srcTableRows{\n+    line-height: 1px;\n+}\n+\n+.entityContainer{\n+    width: auto;\n+    flex: 9;\n+    display: flex;\n+    flex-direction: column;\n+    padding-right: 20px;\n+    word-break: break-all;\n+}\n+\n+.entityTable {\n+    & thead > tr > th {\n+        background-color: #fafafa;\n+        line-height: 2px;\n+      };\n+    & tbody > tr > td {\n+        line-height: 2px;\n+        vertical-align: top;\n+    }\n+}\n+\n+.mapExpContainer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyOTM0Mw=="}, "originalCommit": {"oid": "e8280a4809b609258a8cfd4347d48e3e5c27c60e"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTA2MTMyOnYy", "diffSide": "RIGHT", "path": "one-ui/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.module.scss", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDoyNDowM1rOFwt_zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMzozMDozMVrOFwzKSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyOTU4MQ==", "bodyText": "Since \"source\" is used above, use \"source\" instead of \"src\" for consistency here. I don't think there's ever going to be a reason to abbreviate \"source\" or \"entity\".", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3631#discussion_r386629581", "createdAt": "2020-03-02T20:24:03Z", "author": {"login": "rjrudin"}, "path": "one-ui/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.module.scss", "diffHunk": "@@ -0,0 +1,214 @@\n+\n+.mapContainer{\n+    //padding: 40px 200px 100px 40px;\n+    //margin-bottom: 100px;\n+    height: 100%;\n+    top: 8vh;\n+    //box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n+}\n+.header{\n+    display:inline-flex;\n+}\n+.headerTitle{\n+    font-size: 1.5em;\n+    width: fit-content;\n+    //border: 1px solid red;\n+}\n+\n+.saveMessage{\n+    //width: fit-content;\n+    border: 1px solid #ff0000;\n+    margin-left: 30em;\n+}\n+.noMessage{\n+    padding: 2.25vh 0vh;\n+}\n+.parentContainer{\n+    display: flex;\n+    flex-direction: row;\n+    padding-bottom: 2vh;\n+    padding-top: 1vh;\n+}\n+\n+.sourceContainer{\n+    width: auto;\n+    height: auto;\n+    flex: 4;\n+    display: flex;\n+    flex-direction: column;\n+    padding-right: 20px;\n+    word-break: break-all;\n+}\n+\n+.sourceTable {\n+    & thead > tr > th {\n+        background-color: #fafafa;\n+        line-height: 2px;\n+      };\n+    & tbody > tr > td {\n+        line-height: 2px;\n+    }\n+}\n+.srcTableRows{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8280a4809b609258a8cfd4347d48e3e5c27c60e"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcxNDE4NQ==", "bodyText": "Done", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3631#discussion_r386714185", "createdAt": "2020-03-02T23:30:31Z", "author": {"login": "xnikhil08"}, "path": "one-ui/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.module.scss", "diffHunk": "@@ -0,0 +1,214 @@\n+\n+.mapContainer{\n+    //padding: 40px 200px 100px 40px;\n+    //margin-bottom: 100px;\n+    height: 100%;\n+    top: 8vh;\n+    //box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n+}\n+.header{\n+    display:inline-flex;\n+}\n+.headerTitle{\n+    font-size: 1.5em;\n+    width: fit-content;\n+    //border: 1px solid red;\n+}\n+\n+.saveMessage{\n+    //width: fit-content;\n+    border: 1px solid #ff0000;\n+    margin-left: 30em;\n+}\n+.noMessage{\n+    padding: 2.25vh 0vh;\n+}\n+.parentContainer{\n+    display: flex;\n+    flex-direction: row;\n+    padding-bottom: 2vh;\n+    padding-top: 1vh;\n+}\n+\n+.sourceContainer{\n+    width: auto;\n+    height: auto;\n+    flex: 4;\n+    display: flex;\n+    flex-direction: column;\n+    padding-right: 20px;\n+    word-break: break-all;\n+}\n+\n+.sourceTable {\n+    & thead > tr > th {\n+        background-color: #fafafa;\n+        line-height: 2px;\n+      };\n+    & tbody > tr > td {\n+        line-height: 2px;\n+    }\n+}\n+.srcTableRows{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyOTU4MQ=="}, "originalCommit": {"oid": "e8280a4809b609258a8cfd4347d48e3e5c27c60e"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTA3NDI4OnYy", "diffSide": "RIGHT", "path": "one-ui/ui/src/pages/Entities.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDoyODoxMFrOFwuH9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMzozNzozNFrOFwzTwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzMTY3MQ==", "bodyText": "I recommend renaming \"/api/entities\" to \"/api/entityTypes\" and then using \"entityTypes\" here instead of \"entData\" and \"entitiesInfo\".", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3631#discussion_r386631671", "createdAt": "2020-03-02T20:28:10Z", "author": {"login": "rjrudin"}, "path": "one-ui/ui/src/pages/Entities.tsx", "diffHunk": "@@ -0,0 +1,55 @@\n+import React, { useState, useContext, useEffect } from 'react';\n+import { Collapse, Menu } from 'antd';\n+import styles from './Entities.module.scss';\n+import { RolesContext } from '../util/roles';\n+import axios from 'axios'\n+import EntityTiles from '../components/entities/entity-tiles';\n+\n+const Entities: React.FC = () => {\n+\n+    useEffect(() => {\n+        getEntityInfo();\n+    },[]);\n+\n+    const [entitiesInfo, setEntitiesInfo] = useState<any[]>([]);\n+    \n+    //Role based access\n+    const roleService = useContext(RolesContext);\n+    const canReadOnly = roleService.canReadMappings();\n+    const canReadWrite = roleService.canWriteMappings();\n+\n+    const getEntityInfo = async () => {\n+        try {\n+        let response = await axios.get(`/api/entities`);\n+        if(response.status === 200) {\n+            let entData:any = {};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8280a4809b609258a8cfd4347d48e3e5c27c60e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcxNjYwOQ==", "bodyText": "i renamed entityInfo to entityModel and also changed the corresponding temporary variables to maintain consistency. And since we have been using the api '/api/entities' in current QS as well so we may want to use the same naming conventions here as well right?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3631#discussion_r386716609", "createdAt": "2020-03-02T23:37:34Z", "author": {"login": "xnikhil08"}, "path": "one-ui/ui/src/pages/Entities.tsx", "diffHunk": "@@ -0,0 +1,55 @@\n+import React, { useState, useContext, useEffect } from 'react';\n+import { Collapse, Menu } from 'antd';\n+import styles from './Entities.module.scss';\n+import { RolesContext } from '../util/roles';\n+import axios from 'axios'\n+import EntityTiles from '../components/entities/entity-tiles';\n+\n+const Entities: React.FC = () => {\n+\n+    useEffect(() => {\n+        getEntityInfo();\n+    },[]);\n+\n+    const [entitiesInfo, setEntitiesInfo] = useState<any[]>([]);\n+    \n+    //Role based access\n+    const roleService = useContext(RolesContext);\n+    const canReadOnly = roleService.canReadMappings();\n+    const canReadWrite = roleService.canWriteMappings();\n+\n+    const getEntityInfo = async () => {\n+        try {\n+        let response = await axios.get(`/api/entities`);\n+        if(response.status === 200) {\n+            let entData:any = {};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzMTY3MQ=="}, "originalCommit": {"oid": "e8280a4809b609258a8cfd4347d48e3e5c27c60e"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTA3OTAzOnYy", "diffSide": "RIGHT", "path": "one-ui/ui/src/util/search-service.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDoyOTozNFrOFwuKzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMzo0MTo1NVrOFwzZpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzMjM5OA==", "bodyText": "Can this be reworked to accept a flow name and step number? I'd be happy to make the DS endpoint to implement this, as this seems like too much implementation detail in the GUI.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3631#discussion_r386632398", "createdAt": "2020-03-02T20:29:34Z", "author": {"login": "rjrudin"}, "path": "one-ui/ui/src/util/search-service.tsx", "diffHunk": "@@ -0,0 +1,32 @@\n+import axios from 'axios'\n+\n+const getResultsByQuery = async (database: string, ctsQuery: string, count: number, urisOnly: boolean) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8280a4809b609258a8cfd4347d48e3e5c27c60e"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcxODExNw==", "bodyText": "@rjrudin - We can definitely create an endpoint later which accepts only flow name and step number and returns the documents but in this case the mapping artifact is not part of any particular flow unless its added to it, as per the new one-ui design. So we might need to think about it in detail in another story.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3631#discussion_r386718117", "createdAt": "2020-03-02T23:41:55Z", "author": {"login": "xnikhil08"}, "path": "one-ui/ui/src/util/search-service.tsx", "diffHunk": "@@ -0,0 +1,32 @@\n+import axios from 'axios'\n+\n+const getResultsByQuery = async (database: string, ctsQuery: string, count: number, urisOnly: boolean) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzMjM5OA=="}, "originalCommit": {"oid": "e8280a4809b609258a8cfd4347d48e3e5c27c60e"}, "originalPosition": 3}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3585, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}