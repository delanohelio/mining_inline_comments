{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNDMyMzA0", "number": 3573, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjowNTo1OVrODe3QTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjoxMzowNlrODfWdZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjg5MTY2OnYy", "diffSide": "RIGHT", "path": "one-ui/src/main/java/com/marklogic/hub/curation/controllers/AbstractArtifactController.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjowNTo1OVrOFoPBWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMDozOTowOVrOFoYQqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczMzQ2NQ==", "bodyText": "This strikes me as something that would be in an ArtifactManager class that depends on both HubProject and ArtifactService. The controller ideally only has one dependency and only calls a single method; its job is then just to collect inputs from the HTTP request and convert those into a single method call, and then convert whatever the output is into something in the HTTP response.\nThat allows the ArtifactManager to be used in any context and keeps the web tier as thin as possible. Is that possible here?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3573#discussion_r377733465", "createdAt": "2020-02-11T16:05:59Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/curation/controllers/AbstractArtifactController.java", "diffHunk": "@@ -1,31 +1,49 @@\n package com.marklogic.hub.curation.controllers;\n \n import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.marklogic.client.DatabaseClient;\n import com.marklogic.hub.dataservices.ArtifactService;\n import com.marklogic.hub.oneui.models.HubConfigSession;\n+import com.marklogic.hub.oneui.services.EnvironmentService;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n \n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+\n public abstract class AbstractArtifactController {\n     @Autowired\n     HubConfigSession hubConfig;\n \n+    @Autowired\n+    EnvironmentService environmentService;\n+\n+    protected ArrayNode allArtifactTypeInfo = null;\n+\n     protected ResponseEntity<JsonNode> getArtifacts() {\n         return new ResponseEntity<>(getArtifactService().getList(this.getArtifactType()), HttpStatus.OK);\n     }\n \n-    protected ResponseEntity<JsonNode> updateArtifact(String artifactName, JsonNode loadDataJson) {\n-        return new ResponseEntity<>(getArtifactService().setArtifact(this.getArtifactType(), artifactName, loadDataJson), HttpStatus.OK);\n+    protected ResponseEntity<JsonNode> updateArtifact(String artifactName, JsonNode artifactJson) throws IOException {\n+        ResponseEntity<JsonNode> resp = new ResponseEntity<>(getArtifactService().setArtifact(this.getArtifactType(), artifactName, artifactJson), HttpStatus.OK);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f71bf6c1514ade1b1ed4c95e4aa7028da33f6fe4"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc0NzU2MQ==", "bodyText": "It is definitely possible to move it to an Artifact Manager. I thought we wanted to move away from the manager approach, but I guess by having the Artifact Manager we can eventually deprecate the other managers and reduce the overhead of all the managers we maintain that way.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3573#discussion_r377747561", "createdAt": "2020-02-11T16:27:32Z", "author": {"login": "ryanjdew"}, "path": "one-ui/src/main/java/com/marklogic/hub/curation/controllers/AbstractArtifactController.java", "diffHunk": "@@ -1,31 +1,49 @@\n package com.marklogic.hub.curation.controllers;\n \n import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.marklogic.client.DatabaseClient;\n import com.marklogic.hub.dataservices.ArtifactService;\n import com.marklogic.hub.oneui.models.HubConfigSession;\n+import com.marklogic.hub.oneui.services.EnvironmentService;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n \n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+\n public abstract class AbstractArtifactController {\n     @Autowired\n     HubConfigSession hubConfig;\n \n+    @Autowired\n+    EnvironmentService environmentService;\n+\n+    protected ArrayNode allArtifactTypeInfo = null;\n+\n     protected ResponseEntity<JsonNode> getArtifacts() {\n         return new ResponseEntity<>(getArtifactService().getList(this.getArtifactType()), HttpStatus.OK);\n     }\n \n-    protected ResponseEntity<JsonNode> updateArtifact(String artifactName, JsonNode loadDataJson) {\n-        return new ResponseEntity<>(getArtifactService().setArtifact(this.getArtifactType(), artifactName, loadDataJson), HttpStatus.OK);\n+    protected ResponseEntity<JsonNode> updateArtifact(String artifactName, JsonNode artifactJson) throws IOException {\n+        ResponseEntity<JsonNode> resp = new ResponseEntity<>(getArtifactService().setArtifact(this.getArtifactType(), artifactName, artifactJson), HttpStatus.OK);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczMzQ2NQ=="}, "originalCommit": {"oid": "f71bf6c1514ade1b1ed4c95e4aa7028da33f6fe4"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc2MDI1MQ==", "bodyText": "I think the pattern of a Manager having dependencies on both ML and the filesystem makes sense, while a Service only depends on ML (and the Service class is code-generated based on a data service). In some use cases, a Controller may only need to talk to a Service. In probably most use cases for now, a Controller will talk to a Manager who knows how to handle operations that involve both ML and the filesystem.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3573#discussion_r377760251", "createdAt": "2020-02-11T16:47:12Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/curation/controllers/AbstractArtifactController.java", "diffHunk": "@@ -1,31 +1,49 @@\n package com.marklogic.hub.curation.controllers;\n \n import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.marklogic.client.DatabaseClient;\n import com.marklogic.hub.dataservices.ArtifactService;\n import com.marklogic.hub.oneui.models.HubConfigSession;\n+import com.marklogic.hub.oneui.services.EnvironmentService;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n \n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+\n public abstract class AbstractArtifactController {\n     @Autowired\n     HubConfigSession hubConfig;\n \n+    @Autowired\n+    EnvironmentService environmentService;\n+\n+    protected ArrayNode allArtifactTypeInfo = null;\n+\n     protected ResponseEntity<JsonNode> getArtifacts() {\n         return new ResponseEntity<>(getArtifactService().getList(this.getArtifactType()), HttpStatus.OK);\n     }\n \n-    protected ResponseEntity<JsonNode> updateArtifact(String artifactName, JsonNode loadDataJson) {\n-        return new ResponseEntity<>(getArtifactService().setArtifact(this.getArtifactType(), artifactName, loadDataJson), HttpStatus.OK);\n+    protected ResponseEntity<JsonNode> updateArtifact(String artifactName, JsonNode artifactJson) throws IOException {\n+        ResponseEntity<JsonNode> resp = new ResponseEntity<>(getArtifactService().setArtifact(this.getArtifactType(), artifactName, artifactJson), HttpStatus.OK);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczMzQ2NQ=="}, "originalCommit": {"oid": "f71bf6c1514ade1b1ed4c95e4aa7028da33f6fe4"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg4NDg0Mg==", "bodyText": "updated to use an artifact manager", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3573#discussion_r377884842", "createdAt": "2020-02-11T20:39:09Z", "author": {"login": "ryanjdew"}, "path": "one-ui/src/main/java/com/marklogic/hub/curation/controllers/AbstractArtifactController.java", "diffHunk": "@@ -1,31 +1,49 @@\n package com.marklogic.hub.curation.controllers;\n \n import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.marklogic.client.DatabaseClient;\n import com.marklogic.hub.dataservices.ArtifactService;\n import com.marklogic.hub.oneui.models.HubConfigSession;\n+import com.marklogic.hub.oneui.services.EnvironmentService;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n \n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+\n public abstract class AbstractArtifactController {\n     @Autowired\n     HubConfigSession hubConfig;\n \n+    @Autowired\n+    EnvironmentService environmentService;\n+\n+    protected ArrayNode allArtifactTypeInfo = null;\n+\n     protected ResponseEntity<JsonNode> getArtifacts() {\n         return new ResponseEntity<>(getArtifactService().getList(this.getArtifactType()), HttpStatus.OK);\n     }\n \n-    protected ResponseEntity<JsonNode> updateArtifact(String artifactName, JsonNode loadDataJson) {\n-        return new ResponseEntity<>(getArtifactService().setArtifact(this.getArtifactType(), artifactName, loadDataJson), HttpStatus.OK);\n+    protected ResponseEntity<JsonNode> updateArtifact(String artifactName, JsonNode artifactJson) throws IOException {\n+        ResponseEntity<JsonNode> resp = new ResponseEntity<>(getArtifactService().setArtifact(this.getArtifactType(), artifactName, artifactJson), HttpStatus.OK);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczMzQ2NQ=="}, "originalCommit": {"oid": "f71bf6c1514ade1b1ed4c95e4aa7028da33f6fe4"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjg5NDY1OnYy", "diffSide": "RIGHT", "path": "one-ui/src/main/java/com/marklogic/hub/curation/controllers/AbstractArtifactController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjowNjo0M1rOFoPDQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjoyNDoyMVrOFoPwGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczMzk1Mw==", "bodyText": "Do we have any use case for versions yet? Or will the value just be \"1\" for everything until we have a use case for separate versions of an artifact?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3573#discussion_r377733953", "createdAt": "2020-02-11T16:06:43Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/curation/controllers/AbstractArtifactController.java", "diffHunk": "@@ -46,4 +64,62 @@ protected ArtifactService getArtifactService() {\n     }\n \n     protected abstract String getArtifactType();\n+\n+    protected void writeArtifact(ObjectNode artifact) throws IOException {\n+        Path fileLocation = buildArtifactProjectLocation(getNameFromArtifact(artifact), getVersionFromArtifact(artifact));\n+        // create folders if needed\n+        if (!fileLocation.getParent().toFile().exists()) {\n+            fileLocation.getParent().toFile().mkdirs();\n+        }\n+        Files.write(fileLocation, artifact.toPrettyString().getBytes());\n+    }\n+\n+    protected void deleteArtifact(String artifactName, String artifactVersion) throws IOException {\n+        Path fileLocation = buildArtifactProjectLocation(artifactName, artifactVersion);\n+        Files.deleteIfExists(fileLocation);\n+    }\n+\n+    protected String getNameFromArtifact(ObjectNode artifact) {\n+        ObjectNode artifactTypeInfo = getArtifactTypeInfo();\n+        return artifact.get(artifactTypeInfo.get(\"nameProperty\").asText()).asText();\n+    }\n+\n+    protected String getVersionFromArtifact(ObjectNode artifact) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f71bf6c1514ade1b1ed4c95e4aa7028da33f6fe4"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc0NTQzNQ==", "bodyText": "We don't yet. It is more in preparation for when we move mapping to this new pattern. Right now the version is always null and the artifact type info won't provide a version property, so it isn't taken into account.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3573#discussion_r377745435", "createdAt": "2020-02-11T16:24:21Z", "author": {"login": "ryanjdew"}, "path": "one-ui/src/main/java/com/marklogic/hub/curation/controllers/AbstractArtifactController.java", "diffHunk": "@@ -46,4 +64,62 @@ protected ArtifactService getArtifactService() {\n     }\n \n     protected abstract String getArtifactType();\n+\n+    protected void writeArtifact(ObjectNode artifact) throws IOException {\n+        Path fileLocation = buildArtifactProjectLocation(getNameFromArtifact(artifact), getVersionFromArtifact(artifact));\n+        // create folders if needed\n+        if (!fileLocation.getParent().toFile().exists()) {\n+            fileLocation.getParent().toFile().mkdirs();\n+        }\n+        Files.write(fileLocation, artifact.toPrettyString().getBytes());\n+    }\n+\n+    protected void deleteArtifact(String artifactName, String artifactVersion) throws IOException {\n+        Path fileLocation = buildArtifactProjectLocation(artifactName, artifactVersion);\n+        Files.deleteIfExists(fileLocation);\n+    }\n+\n+    protected String getNameFromArtifact(ObjectNode artifact) {\n+        ObjectNode artifactTypeInfo = getArtifactTypeInfo();\n+        return artifact.get(artifactTypeInfo.get(\"nameProperty\").asText()).asText();\n+    }\n+\n+    protected String getVersionFromArtifact(ObjectNode artifact) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczMzk1Mw=="}, "originalCommit": {"oid": "f71bf6c1514ade1b1ed4c95e4aa7028da33f6fe4"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODMxNjU1OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/ArtifactManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzozMToyN1rOFoc-Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzozMToyN1rOFoc-Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk2MjAwNg==", "bodyText": "Can this be more strongly typed as an ArrayNode? Or would it be an ObjectNode if there's a single artifact? I'd lean towards an ArrayNode.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3573#discussion_r377962006", "createdAt": "2020-02-11T23:31:27Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/ArtifactManager.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.marklogic.hub;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+/**\n+ * Handles writing artifacts to ML server and project directory and reading artifacts from ML server\n+ */\n+public interface ArtifactManager {\n+\n+    /**\n+     * Gets artifacts of a given type\n+     *\n+     * @param artifactType - type of artifact the operation is dealing with\n+     * @return JsonNode of the artifacts matching a type\n+     */\n+    public JsonNode getArtifacts(String artifactType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdcd202669b471ead19b8aeeb145793c97e5ab60"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODMxODA3OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/ArtifactManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzozMjoxM1rOFoc_Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzozMjoxM1rOFoc_Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk2MjI1NQ==", "bodyText": "Just to confirm, is this returning a representation of the updated artifact (as opposed to what the artifact currently looks like)? I think that would be good to confirm in the comment.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3573#discussion_r377962255", "createdAt": "2020-02-11T23:32:13Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/ArtifactManager.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.marklogic.hub;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+/**\n+ * Handles writing artifacts to ML server and project directory and reading artifacts from ML server\n+ */\n+public interface ArtifactManager {\n+\n+    /**\n+     * Gets artifacts of a given type\n+     *\n+     * @param artifactType - type of artifact the operation is dealing with\n+     * @return JsonNode of the artifacts matching a type\n+     */\n+    public JsonNode getArtifacts(String artifactType);\n+\n+    /**\n+     * Updates an artifact of a given type and name.\n+     *\n+     * @param artifactType - type of artifact the operation is dealing with\n+     * @param artifactName - identifier of the artifact\n+     * @param artifactJson - JSON of artifact to persist\n+     * @return JsonNode of the artifact matching a type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdcd202669b471ead19b8aeeb145793c97e5ab60"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODMyMDU2OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/ArtifactManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzozMzoyNVrOFodAnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzozMzoyNVrOFodAnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk2MjY1Mw==", "bodyText": "Can this be strongly typed as an ObjectNode since it should be a single thing?\nI mention this for a few other methods. I think the distinction would be useful for clients that aren't just going to be a passthrough. And it's more self-documenting to use ObjectNode or ArrayNode if we know it's going to be one or the other.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3573#discussion_r377962653", "createdAt": "2020-02-11T23:33:25Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/ArtifactManager.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.marklogic.hub;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+/**\n+ * Handles writing artifacts to ML server and project directory and reading artifacts from ML server\n+ */\n+public interface ArtifactManager {\n+\n+    /**\n+     * Gets artifacts of a given type\n+     *\n+     * @param artifactType - type of artifact the operation is dealing with\n+     * @return JsonNode of the artifacts matching a type\n+     */\n+    public JsonNode getArtifacts(String artifactType);\n+\n+    /**\n+     * Updates an artifact of a given type and name.\n+     *\n+     * @param artifactType - type of artifact the operation is dealing with\n+     * @param artifactName - identifier of the artifact\n+     * @param artifactJson - JSON of artifact to persist\n+     * @return JsonNode of the artifact matching a type\n+     */\n+    public JsonNode updateArtifact(String artifactType, String artifactName, JsonNode artifactJson) throws IOException;\n+\n+    /**\n+     * Retrieves an artifact of a given type and name.\n+     *\n+     * @param artifactType - type of artifact the operation is dealing with\n+     * @param artifactName - identifier of the artifact\n+     * @return JsonNode of the artifact matching a type and name\n+     */\n+    public JsonNode getArtifact(String artifactType, String artifactName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdcd202669b471ead19b8aeeb145793c97e5ab60"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODMyMjYyOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/ArtifactManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzozNDoyOVrOFodB5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzozNDoyOVrOFodB5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk2Mjk4Mw==", "bodyText": "Why would this throw an IOException, and what would the client be expected to be able to do with it? I think Java should have made IOException a runtime exception, as it's rare that a client can do anything useful with it.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3573#discussion_r377962983", "createdAt": "2020-02-11T23:34:29Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/ArtifactManager.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.marklogic.hub;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+/**\n+ * Handles writing artifacts to ML server and project directory and reading artifacts from ML server\n+ */\n+public interface ArtifactManager {\n+\n+    /**\n+     * Gets artifacts of a given type\n+     *\n+     * @param artifactType - type of artifact the operation is dealing with\n+     * @return JsonNode of the artifacts matching a type\n+     */\n+    public JsonNode getArtifacts(String artifactType);\n+\n+    /**\n+     * Updates an artifact of a given type and name.\n+     *\n+     * @param artifactType - type of artifact the operation is dealing with\n+     * @param artifactName - identifier of the artifact\n+     * @param artifactJson - JSON of artifact to persist\n+     * @return JsonNode of the artifact matching a type\n+     */\n+    public JsonNode updateArtifact(String artifactType, String artifactName, JsonNode artifactJson) throws IOException;\n+\n+    /**\n+     * Retrieves an artifact of a given type and name.\n+     *\n+     * @param artifactType - type of artifact the operation is dealing with\n+     * @param artifactName - identifier of the artifact\n+     * @return JsonNode of the artifact matching a type and name\n+     */\n+    public JsonNode getArtifact(String artifactType, String artifactName);\n+\n+    /**\n+     * Deletes an artifact of a given type and name.\n+     *\n+     * @param artifactType - type of artifact the operation is dealing with\n+     * @param artifactName - identifier of the artifact\n+     * @return JsonNode\n+     */\n+    public JsonNode deleteArtifact(String artifactType, String artifactName) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdcd202669b471ead19b8aeeb145793c97e5ab60"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODMyMzEwOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/ArtifactManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzozNDo0NlrOFodCPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzozNDo0NlrOFodCPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk2MzA2OQ==", "bodyText": "Is this returning the contents of the artifact before it's deleted?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3573#discussion_r377963069", "createdAt": "2020-02-11T23:34:46Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/ArtifactManager.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.marklogic.hub;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+/**\n+ * Handles writing artifacts to ML server and project directory and reading artifacts from ML server\n+ */\n+public interface ArtifactManager {\n+\n+    /**\n+     * Gets artifacts of a given type\n+     *\n+     * @param artifactType - type of artifact the operation is dealing with\n+     * @return JsonNode of the artifacts matching a type\n+     */\n+    public JsonNode getArtifacts(String artifactType);\n+\n+    /**\n+     * Updates an artifact of a given type and name.\n+     *\n+     * @param artifactType - type of artifact the operation is dealing with\n+     * @param artifactName - identifier of the artifact\n+     * @param artifactJson - JSON of artifact to persist\n+     * @return JsonNode of the artifact matching a type\n+     */\n+    public JsonNode updateArtifact(String artifactType, String artifactName, JsonNode artifactJson) throws IOException;\n+\n+    /**\n+     * Retrieves an artifact of a given type and name.\n+     *\n+     * @param artifactType - type of artifact the operation is dealing with\n+     * @param artifactName - identifier of the artifact\n+     * @return JsonNode of the artifact matching a type and name\n+     */\n+    public JsonNode getArtifact(String artifactType, String artifactName);\n+\n+    /**\n+     * Deletes an artifact of a given type and name.\n+     *\n+     * @param artifactType - type of artifact the operation is dealing with\n+     * @param artifactName - identifier of the artifact\n+     * @return JsonNode", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdcd202669b471ead19b8aeeb145793c97e5ab60"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODMyNDQ4OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/ArtifactManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzozNToyNVrOFodDCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzozNToyNVrOFodDCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk2MzI3NA==", "bodyText": "Can this be an ObjectNode?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3573#discussion_r377963274", "createdAt": "2020-02-11T23:35:25Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/ArtifactManager.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.marklogic.hub;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+/**\n+ * Handles writing artifacts to ML server and project directory and reading artifacts from ML server\n+ */\n+public interface ArtifactManager {\n+\n+    /**\n+     * Gets artifacts of a given type\n+     *\n+     * @param artifactType - type of artifact the operation is dealing with\n+     * @return JsonNode of the artifacts matching a type\n+     */\n+    public JsonNode getArtifacts(String artifactType);\n+\n+    /**\n+     * Updates an artifact of a given type and name.\n+     *\n+     * @param artifactType - type of artifact the operation is dealing with\n+     * @param artifactName - identifier of the artifact\n+     * @param artifactJson - JSON of artifact to persist\n+     * @return JsonNode of the artifact matching a type\n+     */\n+    public JsonNode updateArtifact(String artifactType, String artifactName, JsonNode artifactJson) throws IOException;\n+\n+    /**\n+     * Retrieves an artifact of a given type and name.\n+     *\n+     * @param artifactType - type of artifact the operation is dealing with\n+     * @param artifactName - identifier of the artifact\n+     * @return JsonNode of the artifact matching a type and name\n+     */\n+    public JsonNode getArtifact(String artifactType, String artifactName);\n+\n+    /**\n+     * Deletes an artifact of a given type and name.\n+     *\n+     * @param artifactType - type of artifact the operation is dealing with\n+     * @param artifactName - identifier of the artifact\n+     * @return JsonNode\n+     */\n+    public JsonNode deleteArtifact(String artifactType, String artifactName) throws IOException;\n+\n+    /**\n+     * Validates an artifact of a given type and name.\n+     *\n+     * @param artifactType - type of artifact the operation is dealing with\n+     * @param artifactName - identifier of the artifact\n+     * @param artifactJson - JSON of artifact to persist\n+     * @return JsonNode with validation details\n+     */\n+    public JsonNode validateArtifact(String artifactType, String artifactName, JsonNode artifactJson);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdcd202669b471ead19b8aeeb145793c97e5ab60"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODMyNDczOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/ArtifactManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzozNTozNFrOFodDMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzozNTozNFrOFodDMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk2MzMxNQ==", "bodyText": "Can this be an ObjectNode?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3573#discussion_r377963315", "createdAt": "2020-02-11T23:35:34Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/ArtifactManager.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.marklogic.hub;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+/**\n+ * Handles writing artifacts to ML server and project directory and reading artifacts from ML server\n+ */\n+public interface ArtifactManager {\n+\n+    /**\n+     * Gets artifacts of a given type\n+     *\n+     * @param artifactType - type of artifact the operation is dealing with\n+     * @return JsonNode of the artifacts matching a type\n+     */\n+    public JsonNode getArtifacts(String artifactType);\n+\n+    /**\n+     * Updates an artifact of a given type and name.\n+     *\n+     * @param artifactType - type of artifact the operation is dealing with\n+     * @param artifactName - identifier of the artifact\n+     * @param artifactJson - JSON of artifact to persist\n+     * @return JsonNode of the artifact matching a type\n+     */\n+    public JsonNode updateArtifact(String artifactType, String artifactName, JsonNode artifactJson) throws IOException;\n+\n+    /**\n+     * Retrieves an artifact of a given type and name.\n+     *\n+     * @param artifactType - type of artifact the operation is dealing with\n+     * @param artifactName - identifier of the artifact\n+     * @return JsonNode of the artifact matching a type and name\n+     */\n+    public JsonNode getArtifact(String artifactType, String artifactName);\n+\n+    /**\n+     * Deletes an artifact of a given type and name.\n+     *\n+     * @param artifactType - type of artifact the operation is dealing with\n+     * @param artifactName - identifier of the artifact\n+     * @return JsonNode\n+     */\n+    public JsonNode deleteArtifact(String artifactType, String artifactName) throws IOException;\n+\n+    /**\n+     * Validates an artifact of a given type and name.\n+     *\n+     * @param artifactType - type of artifact the operation is dealing with\n+     * @param artifactName - identifier of the artifact\n+     * @param artifactJson - JSON of artifact to persist\n+     * @return JsonNode with validation details\n+     */\n+    public JsonNode validateArtifact(String artifactType, String artifactName, JsonNode artifactJson);\n+\n+    /**\n+     * Retrieves settings of an artifact of a given type and name.\n+     *\n+     * @param artifactType - type of artifact the operation is dealing with\n+     * @param artifactName - identifier of the artifact\n+     * @return JsonNode of the artifact settings matching a type and name\n+     */\n+    public JsonNode getArtifactSettings(String artifactType, String artifactName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdcd202669b471ead19b8aeeb145793c97e5ab60"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODMzMTQ2OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/ArtifactManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzozOToxMFrOFodHcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzozOToxMFrOFodHcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk2NDQwMw==", "bodyText": "It looks like the only client of this is an automated test. For that reason, I don't think it should be the interface yet. The fewer methods in an interface, the better. The method in the impl can be public if needed, and the test can just call it directly instead of depending on the interface.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3573#discussion_r377964403", "createdAt": "2020-02-11T23:39:10Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/ArtifactManager.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.marklogic.hub;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+/**\n+ * Handles writing artifacts to ML server and project directory and reading artifacts from ML server\n+ */\n+public interface ArtifactManager {\n+\n+    /**\n+     * Gets artifacts of a given type\n+     *\n+     * @param artifactType - type of artifact the operation is dealing with\n+     * @return JsonNode of the artifacts matching a type\n+     */\n+    public JsonNode getArtifacts(String artifactType);\n+\n+    /**\n+     * Updates an artifact of a given type and name.\n+     *\n+     * @param artifactType - type of artifact the operation is dealing with\n+     * @param artifactName - identifier of the artifact\n+     * @param artifactJson - JSON of artifact to persist\n+     * @return JsonNode of the artifact matching a type\n+     */\n+    public JsonNode updateArtifact(String artifactType, String artifactName, JsonNode artifactJson) throws IOException;\n+\n+    /**\n+     * Retrieves an artifact of a given type and name.\n+     *\n+     * @param artifactType - type of artifact the operation is dealing with\n+     * @param artifactName - identifier of the artifact\n+     * @return JsonNode of the artifact matching a type and name\n+     */\n+    public JsonNode getArtifact(String artifactType, String artifactName);\n+\n+    /**\n+     * Deletes an artifact of a given type and name.\n+     *\n+     * @param artifactType - type of artifact the operation is dealing with\n+     * @param artifactName - identifier of the artifact\n+     * @return JsonNode\n+     */\n+    public JsonNode deleteArtifact(String artifactType, String artifactName) throws IOException;\n+\n+    /**\n+     * Validates an artifact of a given type and name.\n+     *\n+     * @param artifactType - type of artifact the operation is dealing with\n+     * @param artifactName - identifier of the artifact\n+     * @param artifactJson - JSON of artifact to persist\n+     * @return JsonNode with validation details\n+     */\n+    public JsonNode validateArtifact(String artifactType, String artifactName, JsonNode artifactJson);\n+\n+    /**\n+     * Retrieves settings of an artifact of a given type and name.\n+     *\n+     * @param artifactType - type of artifact the operation is dealing with\n+     * @param artifactName - identifier of the artifact\n+     * @return JsonNode of the artifact settings matching a type and name\n+     */\n+    public JsonNode getArtifactSettings(String artifactType, String artifactName);\n+\n+    /**\n+     * Updates settings of an artifact of a given type and name.\n+     *\n+     * @param artifactType - type of artifact the operation is dealing with\n+     * @param artifactName - identifier of the artifact\n+     * @param settings - JSON of artifact settings to persist\n+     * @return JsonNode of the artifact settings matching a type and name\n+     */\n+    public JsonNode updateArtifactSettings(String artifactType, String artifactName, JsonNode settings);\n+\n+    /**\n+     * Provides path to artifact in project for an artifact of a given type, name, and (optionally) version.\n+     *\n+     * @param artifactType - type of artifact the operation is dealing with\n+     * @param artifactName - identifier of the artifact\n+     * @param artifactVersion - version of artifact (optional)\n+     * @return Path to artifact in project\n+     */\n+    public Path buildArtifactProjectLocation(String artifactType, String artifactName, String artifactVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdcd202669b471ead19b8aeeb145793c97e5ab60"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODM2NTQ5OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/impl/ArtifactManagerImpl.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzo1NToyOFrOFodbsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzoyNTozOFrOFouYWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk2OTU4NA==", "bodyText": "I'd really like to get away from anything depending on HubConfig to be a singleton. I took a look at the code, and I think it'd be better for ArtifactManagerImpl not to be a Spring component. Rather, just instantiate one when needed by passing in a HubProject and a DatabaseClient (which would be constructed based on a HubConfig, which the client presumably has access to).\nI looked at how allArtifactTypeInfo is used, because if this is no longer a singleton, there won't be a reason to store that as a class field. I think that's fine though. The data is needed during updateArtifact and deleteArtifact. Those should be very fast operations, such that I think it's fine to make a call to ML each time to get the needed artifact type info (particularly since that endpoint looks like it'll be really fast).", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3573#discussion_r377969584", "createdAt": "2020-02-11T23:55:28Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/impl/ArtifactManagerImpl.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.marklogic.hub.impl;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.DatabaseClient;\n+import com.marklogic.hub.ArtifactManager;\n+import com.marklogic.hub.HubConfig;\n+import com.marklogic.hub.dataservices.ArtifactService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+\n+@Component\n+public class ArtifactManagerImpl implements ArtifactManager {\n+    @Autowired\n+    HubConfig hubConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdcd202669b471ead19b8aeeb145793c97e5ab60"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAxMjMwMA==", "bodyText": "I think we can set member allArtifactTypeInfo as static, and some methods can be public static methods too. My initial thought is why we have to get ArtifactTypeInfo from ML server side if we already know those pre-defined supported artifact types, file extensions ? They can simply set as a final static Map without having to keep the allArtifactTypeInfo object instance with extra Json operations.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3573#discussion_r378012300", "createdAt": "2020-02-12T02:38:29Z", "author": {"login": "hao1st"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/impl/ArtifactManagerImpl.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.marklogic.hub.impl;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.DatabaseClient;\n+import com.marklogic.hub.ArtifactManager;\n+import com.marklogic.hub.HubConfig;\n+import com.marklogic.hub.dataservices.ArtifactService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+\n+@Component\n+public class ArtifactManagerImpl implements ArtifactManager {\n+    @Autowired\n+    HubConfig hubConfig;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk2OTU4NA=="}, "originalCommit": {"oid": "fdcd202669b471ead19b8aeeb145793c97e5ab60"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAxMjcxOA==", "bodyText": "If we create different objects for the Singleton (ArtifactManagerImpl), it can cause unnecessary memory footprint...", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3573#discussion_r378012718", "createdAt": "2020-02-12T02:40:16Z", "author": {"login": "hao1st"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/impl/ArtifactManagerImpl.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.marklogic.hub.impl;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.DatabaseClient;\n+import com.marklogic.hub.ArtifactManager;\n+import com.marklogic.hub.HubConfig;\n+import com.marklogic.hub.dataservices.ArtifactService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+\n+@Component\n+public class ArtifactManagerImpl implements ArtifactManager {\n+    @Autowired\n+    HubConfig hubConfig;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk2OTU4NA=="}, "originalCommit": {"oid": "fdcd202669b471ead19b8aeeb145793c97e5ab60"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI0NTk5Mg==", "bodyText": "The memory footprint of ArtifactManagerImpl would be as minimal as possible though, as it would have no state in it. And they'd be eligible for garbage collection immediately after a controller instantiates one and uses it. We'd be better off worrying about creating instances of String.\nIf we feel it's important for ArtifactManagerImpl to be a singleton, then I recommend moving HubConfig from being a class field to being a method argument instead. That's my main goal - that we shouldn't have any classes autowiring in a HubConfig object since that object is tied to one user, and we know that multiple users need to be able to use an object like ArtifactManagerImpl.\nNote that since we don't have a use case for multiple HubProject instances, I think it's fine for that to be a singleton that Spring manages. So having ArtifactManagerImpl autowire in HubProject is fine.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3573#discussion_r378245992", "createdAt": "2020-02-12T13:23:13Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/impl/ArtifactManagerImpl.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.marklogic.hub.impl;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.DatabaseClient;\n+import com.marklogic.hub.ArtifactManager;\n+import com.marklogic.hub.HubConfig;\n+import com.marklogic.hub.dataservices.ArtifactService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+\n+@Component\n+public class ArtifactManagerImpl implements ArtifactManager {\n+    @Autowired\n+    HubConfig hubConfig;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk2OTU4NA=="}, "originalCommit": {"oid": "fdcd202669b471ead19b8aeeb145793c97e5ab60"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI0NzI1Nw==", "bodyText": "Also, I think we want the ML endpoint to be the one that knows about artifact type info. That's knowledge that's derived from code in ML.\nI just wouldn't worry about caching this stuff in ML yet, I think it's premature optimization. Artifacts aren't going to be updated/deleted that often - maybe dozens of times a day? Even hundreds a day would be negligible from a performance perspective. This just isn't something we need to optimize yet, or probably ever.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3573#discussion_r378247257", "createdAt": "2020-02-12T13:25:38Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/impl/ArtifactManagerImpl.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.marklogic.hub.impl;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.DatabaseClient;\n+import com.marklogic.hub.ArtifactManager;\n+import com.marklogic.hub.HubConfig;\n+import com.marklogic.hub.dataservices.ArtifactService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+\n+@Component\n+public class ArtifactManagerImpl implements ArtifactManager {\n+    @Autowired\n+    HubConfig hubConfig;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk2OTU4NA=="}, "originalCommit": {"oid": "fdcd202669b471ead19b8aeeb145793c97e5ab60"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjAwNDIxOnYy", "diffSide": "RIGHT", "path": "one-ui/src/main/java/com/marklogic/hub/curation/controllers/AbstractArtifactController.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjoxMzowNlrOFpAdhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMDoxODowNlrOFpDGfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU0MzQ5NA==", "bodyText": "Because subclasses of this class are Spring Controller beans, and thus managed as singletons, I think this still runs into a problem where there's a single ArtifactManager tied to... I guess the first user that hits this? That's my guess - that if a second user logs in, that user will end up using an ArtifactManager that is tied to the first user's HubConfig. I'm not certain though.\nI think the safer approach is just to instantiate an ArtifactManagerImpl when you need it - i.e. have a \"protected ArtifactManager newArtifactManager()\" method that calls \"new ArtifactManagerImpl(this.hubConfig)\". That ensures you get an ArtifactManager tied to the current user session.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3573#discussion_r378543494", "createdAt": "2020-02-12T22:13:06Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/curation/controllers/AbstractArtifactController.java", "diffHunk": "@@ -1,49 +1,55 @@\n package com.marklogic.hub.curation.controllers;\n \n import com.fasterxml.jackson.databind.JsonNode;\n-import com.marklogic.client.DatabaseClient;\n-import com.marklogic.hub.dataservices.ArtifactService;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.hub.ArtifactManager;\n+import com.marklogic.hub.impl.ArtifactManagerImpl;\n import com.marklogic.hub.oneui.models.HubConfigSession;\n+import org.springframework.beans.factory.InitializingBean;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n \n-public abstract class AbstractArtifactController {\n+import java.io.IOException;\n+\n+public abstract class AbstractArtifactController implements InitializingBean {\n     @Autowired\n-    HubConfigSession hubConfig;\n+    protected HubConfigSession hubConfig;\n \n-    protected ResponseEntity<JsonNode> getArtifacts() {\n-        return new ResponseEntity<>(getArtifactService().getList(this.getArtifactType()), HttpStatus.OK);\n-    }\n+    protected ArtifactManager artifactManager;\n \n-    protected ResponseEntity<JsonNode> updateArtifact(String artifactName, JsonNode loadDataJson) {\n-        return new ResponseEntity<>(getArtifactService().setArtifact(this.getArtifactType(), artifactName, loadDataJson), HttpStatus.OK);\n+    protected ResponseEntity<ArrayNode> getArtifacts() {\n+        return new ResponseEntity<>(artifactManager.getArtifacts(this.getArtifactType()), HttpStatus.OK);\n     }\n \n-    protected ResponseEntity<JsonNode> getArtifact(String artifactName) {\n-        return new ResponseEntity<>(getArtifactService().getArtifact(this.getArtifactType(), artifactName), HttpStatus.OK);\n+    protected ResponseEntity<ObjectNode> updateArtifact(String artifactName, JsonNode artifactJson) {\n+        return new ResponseEntity<>(artifactManager.updateArtifact(this.getArtifactType(), artifactName, artifactJson), HttpStatus.OK);\n     }\n \n-    protected ResponseEntity<JsonNode> deleteArtifact(String artifactName) {\n-        return new ResponseEntity<>(getArtifactService().deleteArtifact(this.getArtifactType(), artifactName), HttpStatus.OK);\n+    protected ResponseEntity<ObjectNode> getArtifact(String artifactName) {\n+        return new ResponseEntity<>(artifactManager.getArtifact(this.getArtifactType(), artifactName), HttpStatus.OK);\n     }\n \n-    protected ResponseEntity<JsonNode> validateArtifact(String artifactName, JsonNode artifactJson) {\n-        return new ResponseEntity<>(getArtifactService().validateArtifact(this.getArtifactType(), artifactName, artifactJson), HttpStatus.OK);\n+    protected void deleteArtifact(String artifactName) throws IOException {\n+       artifactManager.deleteArtifact(this.getArtifactType(), artifactName);\n     }\n \n-    protected ArtifactService getArtifactService() {\n-        DatabaseClient dataServicesClient = hubConfig.newStagingClient(null);\n-        return ArtifactService.on(dataServicesClient);\n+    protected ResponseEntity<ObjectNode> validateArtifact(String artifactName, JsonNode artifactJson) {\n+        return new ResponseEntity<>(artifactManager.validateArtifact(this.getArtifactType(), artifactName, artifactJson), HttpStatus.OK);\n     }\n \n-    protected ResponseEntity<JsonNode> getArtifactSettings(String artifactName) {\n-        return new ResponseEntity<>(getArtifactService().getArtifactSettings(this.getArtifactType(), artifactName), HttpStatus.OK);\n+    protected ResponseEntity<ObjectNode> getArtifactSettings(String artifactName) {\n+        return new ResponseEntity<>(artifactManager.getArtifactSettings(this.getArtifactType(), artifactName), HttpStatus.OK);\n     }\n \n-    protected ResponseEntity<JsonNode> updateArtifactSettings(String artifactName, JsonNode settings) {\n-        return new ResponseEntity<>(getArtifactService().setArtifactSettings(this.getArtifactType(), artifactName, settings), HttpStatus.OK);\n+    protected ResponseEntity<ObjectNode> updateArtifactSettings(String artifactName, JsonNode settings) {\n+        return new ResponseEntity<>(artifactManager.updateArtifactSettings(this.getArtifactType(), artifactName, settings), HttpStatus.OK);\n     }\n \n     protected abstract String getArtifactType();\n+\n+    public void afterPropertiesSet() {\n+        this.artifactManager = new ArtifactManagerImpl(this.hubConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cf19e5862cfcea01c878ab2710996480712c136"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU0OTAwMA==", "bodyText": "@rjrudin I believe that the HubConfig has a separate instance for a different session.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3573#discussion_r378549000", "createdAt": "2020-02-12T22:26:10Z", "author": {"login": "hao1st"}, "path": "one-ui/src/main/java/com/marklogic/hub/curation/controllers/AbstractArtifactController.java", "diffHunk": "@@ -1,49 +1,55 @@\n package com.marklogic.hub.curation.controllers;\n \n import com.fasterxml.jackson.databind.JsonNode;\n-import com.marklogic.client.DatabaseClient;\n-import com.marklogic.hub.dataservices.ArtifactService;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.hub.ArtifactManager;\n+import com.marklogic.hub.impl.ArtifactManagerImpl;\n import com.marklogic.hub.oneui.models.HubConfigSession;\n+import org.springframework.beans.factory.InitializingBean;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n \n-public abstract class AbstractArtifactController {\n+import java.io.IOException;\n+\n+public abstract class AbstractArtifactController implements InitializingBean {\n     @Autowired\n-    HubConfigSession hubConfig;\n+    protected HubConfigSession hubConfig;\n \n-    protected ResponseEntity<JsonNode> getArtifacts() {\n-        return new ResponseEntity<>(getArtifactService().getList(this.getArtifactType()), HttpStatus.OK);\n-    }\n+    protected ArtifactManager artifactManager;\n \n-    protected ResponseEntity<JsonNode> updateArtifact(String artifactName, JsonNode loadDataJson) {\n-        return new ResponseEntity<>(getArtifactService().setArtifact(this.getArtifactType(), artifactName, loadDataJson), HttpStatus.OK);\n+    protected ResponseEntity<ArrayNode> getArtifacts() {\n+        return new ResponseEntity<>(artifactManager.getArtifacts(this.getArtifactType()), HttpStatus.OK);\n     }\n \n-    protected ResponseEntity<JsonNode> getArtifact(String artifactName) {\n-        return new ResponseEntity<>(getArtifactService().getArtifact(this.getArtifactType(), artifactName), HttpStatus.OK);\n+    protected ResponseEntity<ObjectNode> updateArtifact(String artifactName, JsonNode artifactJson) {\n+        return new ResponseEntity<>(artifactManager.updateArtifact(this.getArtifactType(), artifactName, artifactJson), HttpStatus.OK);\n     }\n \n-    protected ResponseEntity<JsonNode> deleteArtifact(String artifactName) {\n-        return new ResponseEntity<>(getArtifactService().deleteArtifact(this.getArtifactType(), artifactName), HttpStatus.OK);\n+    protected ResponseEntity<ObjectNode> getArtifact(String artifactName) {\n+        return new ResponseEntity<>(artifactManager.getArtifact(this.getArtifactType(), artifactName), HttpStatus.OK);\n     }\n \n-    protected ResponseEntity<JsonNode> validateArtifact(String artifactName, JsonNode artifactJson) {\n-        return new ResponseEntity<>(getArtifactService().validateArtifact(this.getArtifactType(), artifactName, artifactJson), HttpStatus.OK);\n+    protected void deleteArtifact(String artifactName) throws IOException {\n+       artifactManager.deleteArtifact(this.getArtifactType(), artifactName);\n     }\n \n-    protected ArtifactService getArtifactService() {\n-        DatabaseClient dataServicesClient = hubConfig.newStagingClient(null);\n-        return ArtifactService.on(dataServicesClient);\n+    protected ResponseEntity<ObjectNode> validateArtifact(String artifactName, JsonNode artifactJson) {\n+        return new ResponseEntity<>(artifactManager.validateArtifact(this.getArtifactType(), artifactName, artifactJson), HttpStatus.OK);\n     }\n \n-    protected ResponseEntity<JsonNode> getArtifactSettings(String artifactName) {\n-        return new ResponseEntity<>(getArtifactService().getArtifactSettings(this.getArtifactType(), artifactName), HttpStatus.OK);\n+    protected ResponseEntity<ObjectNode> getArtifactSettings(String artifactName) {\n+        return new ResponseEntity<>(artifactManager.getArtifactSettings(this.getArtifactType(), artifactName), HttpStatus.OK);\n     }\n \n-    protected ResponseEntity<JsonNode> updateArtifactSettings(String artifactName, JsonNode settings) {\n-        return new ResponseEntity<>(getArtifactService().setArtifactSettings(this.getArtifactType(), artifactName, settings), HttpStatus.OK);\n+    protected ResponseEntity<ObjectNode> updateArtifactSettings(String artifactName, JsonNode settings) {\n+        return new ResponseEntity<>(artifactManager.updateArtifactSettings(this.getArtifactType(), artifactName, settings), HttpStatus.OK);\n     }\n \n     protected abstract String getArtifactType();\n+\n+    public void afterPropertiesSet() {\n+        this.artifactManager = new ArtifactManagerImpl(this.hubConfig);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU0MzQ5NA=="}, "originalCommit": {"oid": "5cf19e5862cfcea01c878ab2710996480712c136"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2MDExMw==", "bodyText": "HubConfigSession is SessionScoped. If we couldn't trust this.artifactManager to not be shared between sessions, I'm not sure how we could trust this.hubConfig to not be shared across sessions.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3573#discussion_r378560113", "createdAt": "2020-02-12T22:53:40Z", "author": {"login": "ryanjdew"}, "path": "one-ui/src/main/java/com/marklogic/hub/curation/controllers/AbstractArtifactController.java", "diffHunk": "@@ -1,49 +1,55 @@\n package com.marklogic.hub.curation.controllers;\n \n import com.fasterxml.jackson.databind.JsonNode;\n-import com.marklogic.client.DatabaseClient;\n-import com.marklogic.hub.dataservices.ArtifactService;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.hub.ArtifactManager;\n+import com.marklogic.hub.impl.ArtifactManagerImpl;\n import com.marklogic.hub.oneui.models.HubConfigSession;\n+import org.springframework.beans.factory.InitializingBean;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n \n-public abstract class AbstractArtifactController {\n+import java.io.IOException;\n+\n+public abstract class AbstractArtifactController implements InitializingBean {\n     @Autowired\n-    HubConfigSession hubConfig;\n+    protected HubConfigSession hubConfig;\n \n-    protected ResponseEntity<JsonNode> getArtifacts() {\n-        return new ResponseEntity<>(getArtifactService().getList(this.getArtifactType()), HttpStatus.OK);\n-    }\n+    protected ArtifactManager artifactManager;\n \n-    protected ResponseEntity<JsonNode> updateArtifact(String artifactName, JsonNode loadDataJson) {\n-        return new ResponseEntity<>(getArtifactService().setArtifact(this.getArtifactType(), artifactName, loadDataJson), HttpStatus.OK);\n+    protected ResponseEntity<ArrayNode> getArtifacts() {\n+        return new ResponseEntity<>(artifactManager.getArtifacts(this.getArtifactType()), HttpStatus.OK);\n     }\n \n-    protected ResponseEntity<JsonNode> getArtifact(String artifactName) {\n-        return new ResponseEntity<>(getArtifactService().getArtifact(this.getArtifactType(), artifactName), HttpStatus.OK);\n+    protected ResponseEntity<ObjectNode> updateArtifact(String artifactName, JsonNode artifactJson) {\n+        return new ResponseEntity<>(artifactManager.updateArtifact(this.getArtifactType(), artifactName, artifactJson), HttpStatus.OK);\n     }\n \n-    protected ResponseEntity<JsonNode> deleteArtifact(String artifactName) {\n-        return new ResponseEntity<>(getArtifactService().deleteArtifact(this.getArtifactType(), artifactName), HttpStatus.OK);\n+    protected ResponseEntity<ObjectNode> getArtifact(String artifactName) {\n+        return new ResponseEntity<>(artifactManager.getArtifact(this.getArtifactType(), artifactName), HttpStatus.OK);\n     }\n \n-    protected ResponseEntity<JsonNode> validateArtifact(String artifactName, JsonNode artifactJson) {\n-        return new ResponseEntity<>(getArtifactService().validateArtifact(this.getArtifactType(), artifactName, artifactJson), HttpStatus.OK);\n+    protected void deleteArtifact(String artifactName) throws IOException {\n+       artifactManager.deleteArtifact(this.getArtifactType(), artifactName);\n     }\n \n-    protected ArtifactService getArtifactService() {\n-        DatabaseClient dataServicesClient = hubConfig.newStagingClient(null);\n-        return ArtifactService.on(dataServicesClient);\n+    protected ResponseEntity<ObjectNode> validateArtifact(String artifactName, JsonNode artifactJson) {\n+        return new ResponseEntity<>(artifactManager.validateArtifact(this.getArtifactType(), artifactName, artifactJson), HttpStatus.OK);\n     }\n \n-    protected ResponseEntity<JsonNode> getArtifactSettings(String artifactName) {\n-        return new ResponseEntity<>(getArtifactService().getArtifactSettings(this.getArtifactType(), artifactName), HttpStatus.OK);\n+    protected ResponseEntity<ObjectNode> getArtifactSettings(String artifactName) {\n+        return new ResponseEntity<>(artifactManager.getArtifactSettings(this.getArtifactType(), artifactName), HttpStatus.OK);\n     }\n \n-    protected ResponseEntity<JsonNode> updateArtifactSettings(String artifactName, JsonNode settings) {\n-        return new ResponseEntity<>(getArtifactService().setArtifactSettings(this.getArtifactType(), artifactName, settings), HttpStatus.OK);\n+    protected ResponseEntity<ObjectNode> updateArtifactSettings(String artifactName, JsonNode settings) {\n+        return new ResponseEntity<>(artifactManager.updateArtifactSettings(this.getArtifactType(), artifactName, settings), HttpStatus.OK);\n     }\n \n     protected abstract String getArtifactType();\n+\n+    public void afterPropertiesSet() {\n+        this.artifactManager = new ArtifactManagerImpl(this.hubConfig);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU0MzQ5NA=="}, "originalCommit": {"oid": "5cf19e5862cfcea01c878ab2710996480712c136"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU4Njc1MQ==", "bodyText": "I think it's worth testing, just to verify that two users don't end up using the same HubConfig.\nI'm mostly wondering if the scoping is \"lost\" somehow when it's used to construct another object.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3573#discussion_r378586751", "createdAt": "2020-02-13T00:18:06Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/curation/controllers/AbstractArtifactController.java", "diffHunk": "@@ -1,49 +1,55 @@\n package com.marklogic.hub.curation.controllers;\n \n import com.fasterxml.jackson.databind.JsonNode;\n-import com.marklogic.client.DatabaseClient;\n-import com.marklogic.hub.dataservices.ArtifactService;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.hub.ArtifactManager;\n+import com.marklogic.hub.impl.ArtifactManagerImpl;\n import com.marklogic.hub.oneui.models.HubConfigSession;\n+import org.springframework.beans.factory.InitializingBean;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n \n-public abstract class AbstractArtifactController {\n+import java.io.IOException;\n+\n+public abstract class AbstractArtifactController implements InitializingBean {\n     @Autowired\n-    HubConfigSession hubConfig;\n+    protected HubConfigSession hubConfig;\n \n-    protected ResponseEntity<JsonNode> getArtifacts() {\n-        return new ResponseEntity<>(getArtifactService().getList(this.getArtifactType()), HttpStatus.OK);\n-    }\n+    protected ArtifactManager artifactManager;\n \n-    protected ResponseEntity<JsonNode> updateArtifact(String artifactName, JsonNode loadDataJson) {\n-        return new ResponseEntity<>(getArtifactService().setArtifact(this.getArtifactType(), artifactName, loadDataJson), HttpStatus.OK);\n+    protected ResponseEntity<ArrayNode> getArtifacts() {\n+        return new ResponseEntity<>(artifactManager.getArtifacts(this.getArtifactType()), HttpStatus.OK);\n     }\n \n-    protected ResponseEntity<JsonNode> getArtifact(String artifactName) {\n-        return new ResponseEntity<>(getArtifactService().getArtifact(this.getArtifactType(), artifactName), HttpStatus.OK);\n+    protected ResponseEntity<ObjectNode> updateArtifact(String artifactName, JsonNode artifactJson) {\n+        return new ResponseEntity<>(artifactManager.updateArtifact(this.getArtifactType(), artifactName, artifactJson), HttpStatus.OK);\n     }\n \n-    protected ResponseEntity<JsonNode> deleteArtifact(String artifactName) {\n-        return new ResponseEntity<>(getArtifactService().deleteArtifact(this.getArtifactType(), artifactName), HttpStatus.OK);\n+    protected ResponseEntity<ObjectNode> getArtifact(String artifactName) {\n+        return new ResponseEntity<>(artifactManager.getArtifact(this.getArtifactType(), artifactName), HttpStatus.OK);\n     }\n \n-    protected ResponseEntity<JsonNode> validateArtifact(String artifactName, JsonNode artifactJson) {\n-        return new ResponseEntity<>(getArtifactService().validateArtifact(this.getArtifactType(), artifactName, artifactJson), HttpStatus.OK);\n+    protected void deleteArtifact(String artifactName) throws IOException {\n+       artifactManager.deleteArtifact(this.getArtifactType(), artifactName);\n     }\n \n-    protected ArtifactService getArtifactService() {\n-        DatabaseClient dataServicesClient = hubConfig.newStagingClient(null);\n-        return ArtifactService.on(dataServicesClient);\n+    protected ResponseEntity<ObjectNode> validateArtifact(String artifactName, JsonNode artifactJson) {\n+        return new ResponseEntity<>(artifactManager.validateArtifact(this.getArtifactType(), artifactName, artifactJson), HttpStatus.OK);\n     }\n \n-    protected ResponseEntity<JsonNode> getArtifactSettings(String artifactName) {\n-        return new ResponseEntity<>(getArtifactService().getArtifactSettings(this.getArtifactType(), artifactName), HttpStatus.OK);\n+    protected ResponseEntity<ObjectNode> getArtifactSettings(String artifactName) {\n+        return new ResponseEntity<>(artifactManager.getArtifactSettings(this.getArtifactType(), artifactName), HttpStatus.OK);\n     }\n \n-    protected ResponseEntity<JsonNode> updateArtifactSettings(String artifactName, JsonNode settings) {\n-        return new ResponseEntity<>(getArtifactService().setArtifactSettings(this.getArtifactType(), artifactName, settings), HttpStatus.OK);\n+    protected ResponseEntity<ObjectNode> updateArtifactSettings(String artifactName, JsonNode settings) {\n+        return new ResponseEntity<>(artifactManager.updateArtifactSettings(this.getArtifactType(), artifactName, settings), HttpStatus.OK);\n     }\n \n     protected abstract String getArtifactType();\n+\n+    public void afterPropertiesSet() {\n+        this.artifactManager = new ArtifactManagerImpl(this.hubConfig);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU0MzQ5NA=="}, "originalCommit": {"oid": "5cf19e5862cfcea01c878ab2710996480712c136"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3537, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}