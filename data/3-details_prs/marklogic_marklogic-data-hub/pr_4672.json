{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4NjczNjAx", "number": 4672, "title": "DHFPROD-4732: Explore All Data", "bodyText": "Description\nChecklist:\n- Note: do not change the below\n\n\nOwner:\n\n\n JIRA_ID included in all the commit messages\n\n\n PR title is in the format JIRA_ID:Title\n\n\n Rebase the branch with upstream\n\n\n Squashed all commits into a single commit\n\n\n Added Tests\n\n\nReviewer:\n\n\n Reviewed Tests", "createdAt": "2020-10-06T16:15:12Z", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4672", "merged": true, "mergeCommit": {"oid": "29b1ea38febd60c75228f65d9fb0dcd50d2d5b99"}, "closed": true, "closedAt": "2020-10-07T20:11:33Z", "author": {"login": "rahulvudutala"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdP7DyTAFqTUwMzE1MDgwNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQRk20AFqTUwNDE3MjAxMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMTUwODA3", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4672#pullrequestreview-503150807", "createdAt": "2020-10-06T16:29:54Z", "commit": {"oid": "d5048df85722f88c14f12953b5deeec75be023d1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjoyOTo1NVrOHdQMLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjozNDoyOVrOHdQYCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNjAxMw==", "bodyText": "Any time there's an assertion on a number, it's helpful to have an assertion message to explain why that number is expected. In this case, you're expecting 14 because that's the number of OOTB DH artifacts. That assertion is a little brittle - if we add a new artifact, this test would break, which would be surprising.\nInstead of assuming 14, do a quick newServerEval and run \"cts.estimate(cts.trueQuery())\" to get back the count of expected documents. That allows you to make a better assertion - i.e. that you expect the count to be that of all documents in the database (which the user has read access to).", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4672#discussion_r500436013", "createdAt": "2020-10-06T16:29:55Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/entities/search/EntitySearchManagerTest.java", "diffHunk": "@@ -70,37 +70,29 @@ void searchWithTransformInStagingDatabase() {\n     }\n \n     @Test\n-    void noEntityTypesSelected() {\n-        runAsDataHubDeveloper();\n-        // Need at least one entity model to exist for this scenario\n-        installOnlyReferenceModelEntities(true);\n-\n-        runAsHubCentralUser();\n-\n-        SearchQuery query = new SearchQuery();\n-        DocSearchQueryInfo info = new DocSearchQueryInfo();\n-        info.setEntityTypeIds(Arrays.asList(\" \"));\n-        query.setQuery(info);\n+    void searchAllDataInStagingDatabase() {\n+        validateAllDataSearch(\"staging\");\n+    }\n \n-        String results = new EntitySearchManager(getHubClient(), \"staging\").search(query).get();\n-        ObjectNode node = readJsonObject(results);\n-        assertEquals(0, node.get(\"total\").asInt(), \"When entityTypeIds has values, but they're all empty strings, the \" +\n-            \"backend should return no results, and not throw an error\");\n+    @Test\n+    void searchAllDataInFinalDatabase() {\n+        validateAllDataSearch(\"final\");\n     }\n \n     @Test\n     public void testSearchResultsOnNoData() {\n         runAsDataHubDeveloper();\n-        EntitySearchManager.QUERY_OPTIONS = \"non-existent-options\";\n         String collectionDeleteQuery = \"declareUpdate(); xdmp.collectionDelete(\\\"http://marklogic.com/entity-services/models\\\")\";\n         getHubClient().getFinalClient().newServerEval().javascript(collectionDeleteQuery).evalAs(String.class);\n \n         runAsHubCentralUser();\n-        assertTrue(new EntitySearchManager(getHubClient()).search(new SearchQuery()).get().isEmpty());\n+        StringHandle results = new EntitySearchManager(getHubClient()).search(new SearchQuery());\n+        ObjectNode node = readJsonObject(results.get());\n+        assertEquals(14, node.get(\"total\").asInt());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5048df85722f88c14f12953b5deeec75be023d1"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNzIxMQ==", "bodyText": "This needs an assertion message too - why do we expect this exception? And what's the point of a DataHubException - what value is that adding over the original exception?\nI noticed that class is used in 7 places, but there's no code that cares about DataHubException. For that reason, I recommend removing it. It's needlessly wrapping the original exception but not providing any value.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4672#discussion_r500437211", "createdAt": "2020-10-06T16:31:37Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/entities/search/EntitySearchManagerTest.java", "diffHunk": "@@ -70,37 +70,29 @@ void searchWithTransformInStagingDatabase() {\n     }\n \n     @Test\n-    void noEntityTypesSelected() {\n-        runAsDataHubDeveloper();\n-        // Need at least one entity model to exist for this scenario\n-        installOnlyReferenceModelEntities(true);\n-\n-        runAsHubCentralUser();\n-\n-        SearchQuery query = new SearchQuery();\n-        DocSearchQueryInfo info = new DocSearchQueryInfo();\n-        info.setEntityTypeIds(Arrays.asList(\" \"));\n-        query.setQuery(info);\n+    void searchAllDataInStagingDatabase() {\n+        validateAllDataSearch(\"staging\");\n+    }\n \n-        String results = new EntitySearchManager(getHubClient(), \"staging\").search(query).get();\n-        ObjectNode node = readJsonObject(results);\n-        assertEquals(0, node.get(\"total\").asInt(), \"When entityTypeIds has values, but they're all empty strings, the \" +\n-            \"backend should return no results, and not throw an error\");\n+    @Test\n+    void searchAllDataInFinalDatabase() {\n+        validateAllDataSearch(\"final\");\n     }\n \n     @Test\n     public void testSearchResultsOnNoData() {\n         runAsDataHubDeveloper();\n-        EntitySearchManager.QUERY_OPTIONS = \"non-existent-options\";\n         String collectionDeleteQuery = \"declareUpdate(); xdmp.collectionDelete(\\\"http://marklogic.com/entity-services/models\\\")\";\n         getHubClient().getFinalClient().newServerEval().javascript(collectionDeleteQuery).evalAs(String.class);\n \n         runAsHubCentralUser();\n-        assertTrue(new EntitySearchManager(getHubClient()).search(new SearchQuery()).get().isEmpty());\n+        StringHandle results = new EntitySearchManager(getHubClient()).search(new SearchQuery());\n+        ObjectNode node = readJsonObject(results.get());\n+        assertEquals(14, node.get(\"total\").asInt());\n \n         SearchQuery query = new SearchQuery();\n         query.getQuery().setEntityTypeIds(Arrays.asList(\"Some-entityType\"));\n-        assertTrue(new EntitySearchManager(getHubClient()).search(query).get().isEmpty());\n+        assertThrows(DataHubException.class, () -> new EntitySearchManager(getHubClient()).search(query));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5048df85722f88c14f12953b5deeec75be023d1"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzOTA1MQ==", "bodyText": "To avoid errors in the future, I think we need to adjust the first case on search:options to exclude \"search:transform-results\" if it exists. So this line needs to be adjusted:\n$n/namespace::node(),\n\nThat should become (I think, need to test):\n$n/node()[fn:not(self::search:transform-results)]\n\nThere's not a test to add because we don't expect the search options generated by ES to return a search:transform-results (though we could add an ML unit test that sends in an options document with an existing transform-results, and then verify that it's discarded in favor of this one). This is just to prevent an error from happening in the future.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4672#discussion_r500439051", "createdAt": "2020-10-06T16:34:29Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/impl/hub-entities.xqy", "diffHunk": "@@ -198,7 +198,12 @@ declare %private function hent:fix-options-for-explorer(\n             </search:range>\n           </search:constraint>,\n           hent:build-sort-operator($sortable-properties, $entity-namespace-map),\n-          hent:fix-options-for-explorer($n/node(), $sortable-properties, $entity-namespace-map)\n+          hent:fix-options-for-explorer($n/node(), $sortable-properties, $entity-namespace-map),\n+          <search:transform-results apply=\"snippet\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5048df85722f88c14f12953b5deeec75be023d1"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d5048df85722f88c14f12953b5deeec75be023d1", "author": {"user": {"login": "rahulvudutala", "name": null}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/d5048df85722f88c14f12953b5deeec75be023d1", "committedDate": "2020-10-06T16:13:39Z", "message": "DHFPROD-4732: Explore All Data"}, "afterCommit": {"oid": "0e1fd0965097721e6ebe2bb5cdb090643d1b7e8e", "author": {"user": {"login": "rahulvudutala", "name": null}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/0e1fd0965097721e6ebe2bb5cdb090643d1b7e8e", "committedDate": "2020-10-06T23:21:28Z", "message": "DHFPROD-4732: Explore All Data"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzODEzODQ5", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4672#pullrequestreview-503813849", "createdAt": "2020-10-07T12:15:40Z", "commit": {"oid": "0e1fd0965097721e6ebe2bb5cdb090643d1b7e8e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMjoxNTo0MFrOHdwW6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMjoxNjo0NlrOHdwZkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk2MzA0OQ==", "bodyText": "Just do \"throw e\" here - MarkLogicServerException is a subclass of RuntimeException, so there's no need to wrap it (vs something like IOException).", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4672#discussion_r500963049", "createdAt": "2020-10-07T12:15:40Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/EntitySearchManager.java", "diffHunk": "@@ -146,9 +139,9 @@ public StringHandle search(SearchQuery searchQuery) {\n                         + \"various search features.\");\n             }\n \n-            throw new DataHubException(e.getServerMessage(), e);\n+            throw new RuntimeException(e.getServerMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e1fd0965097721e6ebe2bb5cdb090643d1b7e8e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk2MzIzOQ==", "bodyText": "And this catch block can be removed entirely. Same goes for the code below.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4672#discussion_r500963239", "createdAt": "2020-10-07T12:15:59Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/EntitySearchManager.java", "diffHunk": "@@ -146,9 +139,9 @@ public StringHandle search(SearchQuery searchQuery) {\n                         + \"various search features.\");\n             }\n \n-            throw new DataHubException(e.getServerMessage(), e);\n+            throw new RuntimeException(e.getServerMessage(), e);\n         } catch (Exception e) { //other runtime exceptions\n-            throw new DataHubException(e.getLocalizedMessage(), e);\n+            throw new RuntimeException(e.getLocalizedMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e1fd0965097721e6ebe2bb5cdb090643d1b7e8e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk2MzczMQ==", "bodyText": "Same thing here - \"throw e\" and remove the catch block.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4672#discussion_r500963731", "createdAt": "2020-10-07T12:16:46Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/managers/ModelManager.java", "diffHunk": "@@ -80,9 +80,9 @@ public JsonNode getModels() {\n             } else { //FailedRequestException || ResourceNotResendableException || other runtime exceptions\n                 logger.error(e.getLocalizedMessage());\n             }\n-            throw new DataHubException(e.getServerMessage(), e);\n+            throw new RuntimeException(e.getServerMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e1fd0965097721e6ebe2bb5cdb090643d1b7e8e"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0e1fd0965097721e6ebe2bb5cdb090643d1b7e8e", "author": {"user": {"login": "rahulvudutala", "name": null}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/0e1fd0965097721e6ebe2bb5cdb090643d1b7e8e", "committedDate": "2020-10-06T23:21:28Z", "message": "DHFPROD-4732: Explore All Data"}, "afterCommit": {"oid": "ccc3087a2b1c001dec569dffefa0ecc902d715a3", "author": {"user": {"login": "rahulvudutala", "name": null}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/ccc3087a2b1c001dec569dffefa0ecc902d715a3", "committedDate": "2020-10-07T16:49:46Z", "message": "DHFPROD-4732: Explore All Data"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ccc3087a2b1c001dec569dffefa0ecc902d715a3", "author": {"user": {"login": "rahulvudutala", "name": null}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/ccc3087a2b1c001dec569dffefa0ecc902d715a3", "committedDate": "2020-10-07T16:49:46Z", "message": "DHFPROD-4732: Explore All Data"}, "afterCommit": {"oid": "e1215ab441d1d512f632a7624856cb3d446051f4", "author": {"user": {"login": "rahulvudutala", "name": null}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/e1215ab441d1d512f632a7624856cb3d446051f4", "committedDate": "2020-10-07T16:51:14Z", "message": "DHFPROD-4732: Explore All Data"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MDgxMDA2", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4672#pullrequestreview-504081006", "createdAt": "2020-10-07T16:52:58Z", "commit": {"oid": "ccc3087a2b1c001dec569dffefa0ecc902d715a3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjo1MzoxMFrOHd8sKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjo1NTowOVrOHd8xTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE2NTA5OA==", "bodyText": "Given that this client is used after runAsHubCentralUser is called, I think you should move this line to after runAsHubCentralUser. Looking at the code, it's not clear what user is associated with this DatabaseClient, but it looks like it's supposed to be running as an HC user.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4672#discussion_r501165098", "createdAt": "2020-10-07T16:53:10Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/entities/search/EntitySearchManagerTest.java", "diffHunk": "@@ -316,4 +312,22 @@ private void validateSearchWithTransform(String databaseType) {\n                 \"entityProperties so that the UI knows what structured values to show for each entity instance\");\n         assertTrue(node.get(\"results\").get(1).has(\"entityProperties\"));\n     }\n+\n+    private void validateAllDataSearch(String databaseType) {\n+        DatabaseClient client = databaseType.equalsIgnoreCase(\"staging\") ? getHubClient().getStagingClient() : getHubClient().getFinalClient();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1215ab441d1d512f632a7624856cb3d446051f4"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE2NjQxMg==", "bodyText": "The assertion message shouldn't assume what's being returned. The benefit of doing an estimate on trueQuery is that you get a count of all the docs that an HC user can see. Then, you want to make sure that when you do an empty search, you get the same count back. You don't care what the count is, nor do you care what docs should be there - you just care that the two counts are the same. So the assertion message should be along the lines of:\n\"Expected \" + count + \" total documents; an empty search should result in a count equal to all the docs that the user can read in the database\"", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4672#discussion_r501166412", "createdAt": "2020-10-07T16:55:09Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/entities/search/EntitySearchManagerTest.java", "diffHunk": "@@ -316,4 +312,22 @@ private void validateSearchWithTransform(String databaseType) {\n                 \"entityProperties so that the UI knows what structured values to show for each entity instance\");\n         assertTrue(node.get(\"results\").get(1).has(\"entityProperties\"));\n     }\n+\n+    private void validateAllDataSearch(String databaseType) {\n+        DatabaseClient client = databaseType.equalsIgnoreCase(\"staging\") ? getHubClient().getStagingClient() : getHubClient().getFinalClient();\n+        runAsDataHubDeveloper();\n+        ReferenceModelProject project = installOnlyReferenceModelEntities(true);\n+        deployEntityIndexes();\n+        project.createCustomerInstance(new Customer(1, \"Jane\"), databaseType);\n+        project.createCustomerInstance(new Customer(2, \"Sally\"), databaseType);\n+\n+        runAsHubCentralUser();\n+\n+        String query = \"cts.estimate(cts.trueQuery())\";\n+        int count = Integer.parseInt(client.newServerEval().javascript(query).evalAs(String.class));\n+        StringHandle results = new EntitySearchManager(getHubClient(), databaseType).search(new SearchQuery());\n+        ObjectNode node = readJsonObject(results.get());\n+        assertEquals(count, node.get(\"total\").asInt(), \"OOTB datahub artifacts, Customer and Order entity models and \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1215ab441d1d512f632a7624856cb3d446051f4"}, "originalPosition": 97}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff3e8ff5ee6fd542ab28652533db366900ebbbe9", "author": {"user": {"login": "rahulvudutala", "name": null}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/ff3e8ff5ee6fd542ab28652533db366900ebbbe9", "committedDate": "2020-10-07T17:54:04Z", "message": "DHFPROD-4732: Explore All Data"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e1215ab441d1d512f632a7624856cb3d446051f4", "author": {"user": {"login": "rahulvudutala", "name": null}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/e1215ab441d1d512f632a7624856cb3d446051f4", "committedDate": "2020-10-07T16:51:14Z", "message": "DHFPROD-4732: Explore All Data"}, "afterCommit": {"oid": "ff3e8ff5ee6fd542ab28652533db366900ebbbe9", "author": {"user": {"login": "rahulvudutala", "name": null}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/ff3e8ff5ee6fd542ab28652533db366900ebbbe9", "committedDate": "2020-10-07T17:54:04Z", "message": "DHFPROD-4732: Explore All Data"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MTU3NDIw", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4672#pullrequestreview-504157420", "createdAt": "2020-10-07T18:28:31Z", "commit": {"oid": "ff3e8ff5ee6fd542ab28652533db366900ebbbe9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MTcyMDEx", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4672#pullrequestreview-504172011", "createdAt": "2020-10-07T18:48:40Z", "commit": {"oid": "ff3e8ff5ee6fd542ab28652533db366900ebbbe9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1954, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}