{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4ODQyNDk5", "number": 4588, "title": "DHFPROD-5940:If user can't read modules, return HTTP 403", "bodyText": "Description\nIf user can't read modules, return HTTP 403\nChecklist:\n- Note: do not change the below\n\n\nOwner:\n\n\n JIRA_ID included in all the commit messages\n\n\n PR title is in the format JIRA_ID:Title\n\n\n Rebase the branch with upstream\n\n\n Squashed all commits into a single commit\n\n\n Added Tests\n\n\nReviewer:\n\n\n Reviewed Tests", "createdAt": "2020-09-17T18:08:21Z", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4588", "merged": true, "mergeCommit": {"oid": "986f8c6d48f61aca729d02f52836b17cbe77fe25"}, "closed": true, "closedAt": "2020-09-21T20:23:55Z", "author": {"login": "srinathgit"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJ1MK-gFqTQ5MDg2OTk0OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLGD3HgFqTQ5Mjc5MTExNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwODY5OTQ5", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4588#pullrequestreview-490869949", "createdAt": "2020-09-17T18:20:49Z", "commit": {"oid": "0ad518e4aa4bfdb2b1063d4f00c0268c15bf3605"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwODc3NzYx", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4588#pullrequestreview-490877761", "createdAt": "2020-09-17T18:31:53Z", "commit": {"oid": "0ad518e4aa4bfdb2b1063d4f00c0268c15bf3605"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxODozMTo1M1rOHTv_Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxODozNjozNlrOHTwJaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ3MTI1MA==", "bodyText": "I don't think you need to check for \"Not Found\" - I think just checking for 404 suffices. We expect the module to exist - we have tests to confirm that. So if a 404 is returned, we're 99.9% sure that's because the user cannot read the module, and thus we should treat it as a 403.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4588#discussion_r490471250", "createdAt": "2020-09-17T18:31:53Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/auth/AuthenticationFilter.java", "diffHunk": "@@ -96,6 +96,10 @@ protected AuthenticationToken authenticateUser(String username, String password)\n                 if (\"Failed Auth\".equals(fre.getServerMessage()) || \"Failed Auth\".equals(fre.getServerStatus())) {\n                     throw new BadCredentialsException(\"Unauthorized\");\n                 }\n+                //In case user can't read the getAuthorities.sjs module\n+                if(fre.getServerStatusCode() == 404 && fre.getMessage() != null && fre.getMessage().contains(\"Not Found\")){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad518e4aa4bfdb2b1063d4f00c0268c15bf3605"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ3MzgzMg==", "bodyText": "I believe \"AccessDeniedException\" is the correct Spring Security exception here. The javadocs for the Insufficient exception state \"credentials are not sufficiently trusted\", which isn't the case here - we don't trust the credentials at all, we just want to say \"Sorry, access denied\".", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4588#discussion_r490473832", "createdAt": "2020-09-17T18:36:36Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/auth/AuthenticationFilter.java", "diffHunk": "@@ -96,6 +96,10 @@ protected AuthenticationToken authenticateUser(String username, String password)\n                 if (\"Failed Auth\".equals(fre.getServerMessage()) || \"Failed Auth\".equals(fre.getServerStatus())) {\n                     throw new BadCredentialsException(\"Unauthorized\");\n                 }\n+                //In case user can't read the getAuthorities.sjs module\n+                if(fre.getServerStatusCode() == 404 && fre.getMessage() != null && fre.getMessage().contains(\"Not Found\")){\n+                    throw new InsufficientAuthenticationException(\"User doesn't have necessary privileges to access Hub Central\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad518e4aa4bfdb2b1063d4f00c0268c15bf3605"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8c3a695018aac72d12dd5663aed8c56222ac543", "author": {"user": {"login": "srinathgit", "name": "Srinath S"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/a8c3a695018aac72d12dd5663aed8c56222ac543", "committedDate": "2020-09-20T08:40:47Z", "message": "DHFPROD-5940:If user can't read modules, return HTTP 403"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0ad518e4aa4bfdb2b1063d4f00c0268c15bf3605", "author": {"user": {"login": "srinathgit", "name": "Srinath S"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/0ad518e4aa4bfdb2b1063d4f00c0268c15bf3605", "committedDate": "2020-09-17T17:38:22Z", "message": "DHFPROD-5940:If user can't read modules, return HTTP 403"}, "afterCommit": {"oid": "a8c3a695018aac72d12dd5663aed8c56222ac543", "author": {"user": {"login": "srinathgit", "name": "Srinath S"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/a8c3a695018aac72d12dd5663aed8c56222ac543", "committedDate": "2020-09-20T08:40:47Z", "message": "DHFPROD-5940:If user can't read modules, return HTTP 403"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyNTQyMjAw", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4588#pullrequestreview-492542200", "createdAt": "2020-09-21T12:24:20Z", "commit": {"oid": "a8c3a695018aac72d12dd5663aed8c56222ac543"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyNzQ5MTY5", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4588#pullrequestreview-492749169", "createdAt": "2020-09-21T15:44:25Z", "commit": {"oid": "a8c3a695018aac72d12dd5663aed8c56222ac543"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTo0NDoyNVrOHVXR5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTo0NDoyNVrOHVXR5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2MzU1Ng==", "bodyText": "Can we authenticate in the AuthenticationFilter? My understanding of spring security is that all authentications should be performed in the authentication filters.\nSince spring performs a lot of stuff under the hood, have we analyzed the consequences of authenticating outside the filter chain in the onAuthenticationSuccess handler?\nOne thing I found is that spring security publishes an InteractiveAuthenticationSuccessEvent on successful authentication. As we authenticate in the onAuthenticationSuccess handler, from the spring security perspective, the authentication was successful so we might still be publishing this event, which would create issues if ever setup event listeners for this event.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4588#discussion_r492163556", "createdAt": "2020-09-21T15:44:25Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/auth/LoginHandler.java", "diffHunk": "@@ -45,28 +43,45 @@\n     @Override\n     public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse httpResponse, Authentication authentication) throws IOException {\n         AuthenticationToken token = (AuthenticationToken) authentication;\n-\n+        Collection<GrantedAuthority> grantedAuthorities = token.getAuthorities();\n+        final boolean[] hasLoginAuthority = {false};\n         ObjectMapper mapper = new ObjectMapper();\n \n         ObjectNode jsonResponse = mapper.createObjectNode();\n \n         List<TextNode> authorities = new ArrayList<>();\n-        token.getAuthorities().forEach(auth -> {\n+\n+        grantedAuthorities.forEach(auth -> {\n             String authority = auth.getAuthority();\n             if (authority.length() > 5) { //trim prefix \"ROLE_\"\n-                authorities.add(new TextNode(auth.getAuthority().substring(5, authority.length())));\n+                String authorityName = authority.substring(5);\n+                hasLoginAuthority[0] = (\"loginToHubCentral\".equals(authorityName)) || hasLoginAuthority[0];\n+                authorities.add(new TextNode(authorityName));\n             }\n         });\n-        jsonResponse.putArray(\"authorities\").addAll(authorities);\n-\n-        clearAuthenticationAttributes(request);\n \n-        httpResponse.setContentType(\"application/json\");\n-        httpResponse.getOutputStream().write(mapper.writeValueAsBytes(jsonResponse));\n+        if (!hasLoginAuthority[0]) {\n+            sendUnauthorizedResponse(httpResponse);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8c3a695018aac72d12dd5663aed8c56222ac543"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyNzkxMTE1", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4588#pullrequestreview-492791115", "createdAt": "2020-09-21T16:34:03Z", "commit": {"oid": "a8c3a695018aac72d12dd5663aed8c56222ac543"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2092, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}