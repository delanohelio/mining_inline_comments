{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MDE0NjE0", "number": 3941, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMjoyODo1MFrOD8Cskw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDowNjoxN1rOD9ADfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mjg1MzMxOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/ModelController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMjoyODo1MFrOGUvKLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMjoyODo1MFrOGUvKLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM5NzM1Ng==", "bodyText": "Yeah I think this is fine here for now. Once we know it's all working correctly, we can consider how to refactor it into DH core and possibly replace parts of EntityManagerImpl with it.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3941#discussion_r424397356", "createdAt": "2020-05-13T12:28:50Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/ModelController.java", "diffHunk": "@@ -76,11 +84,85 @@\n     @RequestMapping(value = \"/{modelName}/entityTypes\", method = RequestMethod.PUT)\n     @ApiImplicitParam(required = true, paramType = \"body\", dataType = \"ModelDefinitions\")\n     public ResponseEntity<Void> updateModelEntityTypes(@ApiParam(hidden = true) @RequestBody JsonNode entityTypes, @PathVariable String modelName) {\n+        // update the model\n         newService().updateModelEntityTypes(modelName, entityTypes);\n+\n+        //deploy updated configs\n+        deployModelConfigs();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25f007b41a746e449effeb2608322abf15c421e6"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mjg2NzIyOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/ModelController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMjozMjoyMFrOGUvScA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODo1MDoxN1rOGWQLcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM5OTQ3Mg==", "bodyText": "Let's put each of these deploy steps in a separate private method and then put each call to ML in a try-catch iof the form:\ntry {\n     make a single call to ML - e.g. to deploy explorer search options to staging\n} catch (Exception ex) {\n     throw new RuntimeException(\"Unable to deploy explorer search options to staging after updating entity models: cause: \" + ex.getMessage(), ex);\n}\n\nThe reason for this is that the typical errors we get back from the Manage API and REST API don't give a ton of context and often lead to the conclusion of \"Gradle is broken, we must replace it\". Gradle isn't being used here, so hopefully it won't be blamed, but providing some context around the source of the error will be helpful.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3941#discussion_r424399472", "createdAt": "2020-05-13T12:32:20Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/ModelController.java", "diffHunk": "@@ -76,11 +84,85 @@\n     @RequestMapping(value = \"/{modelName}/entityTypes\", method = RequestMethod.PUT)\n     @ApiImplicitParam(required = true, paramType = \"body\", dataType = \"ModelDefinitions\")\n     public ResponseEntity<Void> updateModelEntityTypes(@ApiParam(hidden = true) @RequestBody JsonNode entityTypes, @PathVariable String modelName) {\n+        // update the model\n         newService().updateModelEntityTypes(modelName, entityTypes);\n+\n+        //deploy updated configs\n+        deployModelConfigs();\n+\n         return new ResponseEntity<>(HttpStatus.OK);\n     }\n \n \n+    void deployModelConfigs() {\n+        ManageClient manageClient = hubClientProvider.getHubClient().getManageClient();\n+        DatabaseClient finalDatabaseClient = hubClientProvider.getHubClient().getFinalClient();\n+        DatabaseClient stagingDatabaseClient = hubClientProvider.getHubClient().getStagingClient();\n+\n+        JsonNode modelConfigNode = newService().generateModelConfig();\n+\n+        // Deploy search options\n+        String explorerOptions = modelConfigNode.get(\"search-options\").get(\"explorer\").asText();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25f007b41a746e449effeb2608322abf15c421e6"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk4NjkzMA==", "bodyText": "Right, updated in here b6777af", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3941#discussion_r425986930", "createdAt": "2020-05-15T18:50:17Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/ModelController.java", "diffHunk": "@@ -76,11 +84,85 @@\n     @RequestMapping(value = \"/{modelName}/entityTypes\", method = RequestMethod.PUT)\n     @ApiImplicitParam(required = true, paramType = \"body\", dataType = \"ModelDefinitions\")\n     public ResponseEntity<Void> updateModelEntityTypes(@ApiParam(hidden = true) @RequestBody JsonNode entityTypes, @PathVariable String modelName) {\n+        // update the model\n         newService().updateModelEntityTypes(modelName, entityTypes);\n+\n+        //deploy updated configs\n+        deployModelConfigs();\n+\n         return new ResponseEntity<>(HttpStatus.OK);\n     }\n \n \n+    void deployModelConfigs() {\n+        ManageClient manageClient = hubClientProvider.getHubClient().getManageClient();\n+        DatabaseClient finalDatabaseClient = hubClientProvider.getHubClient().getFinalClient();\n+        DatabaseClient stagingDatabaseClient = hubClientProvider.getHubClient().getStagingClient();\n+\n+        JsonNode modelConfigNode = newService().generateModelConfig();\n+\n+        // Deploy search options\n+        String explorerOptions = modelConfigNode.get(\"search-options\").get(\"explorer\").asText();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM5OTQ3Mg=="}, "originalCommit": {"oid": "25f007b41a746e449effeb2608322abf15c421e6"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mjg3MjE2OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/ModelController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMjozMzozNVrOGUvVjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODo1MToxNlrOGWQNNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQwMDI3MQ==", "bodyText": "You need to do a try/catch for each individual postJson call. While we only expect one query roleset for now (pii-reader), there could be more in the future. And if the first one fails because it already exists, we still want to try to deploy the others.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3941#discussion_r424400271", "createdAt": "2020-05-13T12:33:35Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/ModelController.java", "diffHunk": "@@ -76,11 +84,85 @@\n     @RequestMapping(value = \"/{modelName}/entityTypes\", method = RequestMethod.PUT)\n     @ApiImplicitParam(required = true, paramType = \"body\", dataType = \"ModelDefinitions\")\n     public ResponseEntity<Void> updateModelEntityTypes(@ApiParam(hidden = true) @RequestBody JsonNode entityTypes, @PathVariable String modelName) {\n+        // update the model\n         newService().updateModelEntityTypes(modelName, entityTypes);\n+\n+        //deploy updated configs\n+        deployModelConfigs();\n+\n         return new ResponseEntity<>(HttpStatus.OK);\n     }\n \n \n+    void deployModelConfigs() {\n+        ManageClient manageClient = hubClientProvider.getHubClient().getManageClient();\n+        DatabaseClient finalDatabaseClient = hubClientProvider.getHubClient().getFinalClient();\n+        DatabaseClient stagingDatabaseClient = hubClientProvider.getHubClient().getStagingClient();\n+\n+        JsonNode modelConfigNode = newService().generateModelConfig();\n+\n+        // Deploy search options\n+        String explorerOptions = modelConfigNode.get(\"search-options\").get(\"explorer\").asText();\n+        String defaultOptions = modelConfigNode.get(\"search-options\").get(\"default\").asText();\n+        Map<String, DatabaseClient> clientMap = new HashMap<>();\n+        clientMap.put(\"staging\", stagingDatabaseClient);\n+        clientMap.put(\"final\", finalDatabaseClient);\n+        clientMap.forEach((databaseKind, databaseClient) -> {\n+            QueryOptionsManager queryOptionsManager = databaseClient.newServerConfigManager().newQueryOptionsManager();\n+            queryOptionsManager.writeOptionsAs(\"exp-\" + databaseKind + \"-entity-options\", Format.XML, explorerOptions);\n+            queryOptionsManager.writeOptionsAs(databaseKind + \"-entity-options\", Format.XML, defaultOptions);\n+        });\n+\n+        // Deploy protected-paths\n+        modelConfigNode.get(\"protected-paths\").forEach(jsonNode -> manageClient.postJson(\"/manage/v2/protected-paths\", jsonNode.toString()));\n+\n+        // Deploy query-rolesets\n+        try {\n+            modelConfigNode.get(\"query-rolesets\").forEach(jsonNode -> manageClient.postJson(\"/manage/v2/query-rolesets\", jsonNode.toString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25f007b41a746e449effeb2608322abf15c421e6"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk4NzM4MA==", "bodyText": "Good catch. Updated in here b6777af", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3941#discussion_r425987380", "createdAt": "2020-05-15T18:51:16Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/ModelController.java", "diffHunk": "@@ -76,11 +84,85 @@\n     @RequestMapping(value = \"/{modelName}/entityTypes\", method = RequestMethod.PUT)\n     @ApiImplicitParam(required = true, paramType = \"body\", dataType = \"ModelDefinitions\")\n     public ResponseEntity<Void> updateModelEntityTypes(@ApiParam(hidden = true) @RequestBody JsonNode entityTypes, @PathVariable String modelName) {\n+        // update the model\n         newService().updateModelEntityTypes(modelName, entityTypes);\n+\n+        //deploy updated configs\n+        deployModelConfigs();\n+\n         return new ResponseEntity<>(HttpStatus.OK);\n     }\n \n \n+    void deployModelConfigs() {\n+        ManageClient manageClient = hubClientProvider.getHubClient().getManageClient();\n+        DatabaseClient finalDatabaseClient = hubClientProvider.getHubClient().getFinalClient();\n+        DatabaseClient stagingDatabaseClient = hubClientProvider.getHubClient().getStagingClient();\n+\n+        JsonNode modelConfigNode = newService().generateModelConfig();\n+\n+        // Deploy search options\n+        String explorerOptions = modelConfigNode.get(\"search-options\").get(\"explorer\").asText();\n+        String defaultOptions = modelConfigNode.get(\"search-options\").get(\"default\").asText();\n+        Map<String, DatabaseClient> clientMap = new HashMap<>();\n+        clientMap.put(\"staging\", stagingDatabaseClient);\n+        clientMap.put(\"final\", finalDatabaseClient);\n+        clientMap.forEach((databaseKind, databaseClient) -> {\n+            QueryOptionsManager queryOptionsManager = databaseClient.newServerConfigManager().newQueryOptionsManager();\n+            queryOptionsManager.writeOptionsAs(\"exp-\" + databaseKind + \"-entity-options\", Format.XML, explorerOptions);\n+            queryOptionsManager.writeOptionsAs(databaseKind + \"-entity-options\", Format.XML, defaultOptions);\n+        });\n+\n+        // Deploy protected-paths\n+        modelConfigNode.get(\"protected-paths\").forEach(jsonNode -> manageClient.postJson(\"/manage/v2/protected-paths\", jsonNode.toString()));\n+\n+        // Deploy query-rolesets\n+        try {\n+            modelConfigNode.get(\"query-rolesets\").forEach(jsonNode -> manageClient.postJson(\"/manage/v2/query-rolesets\", jsonNode.toString()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQwMDI3MQ=="}, "originalCommit": {"oid": "25f007b41a746e449effeb2608322abf15c421e6"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mjg4Mjg4OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/ModelController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMjozNjozOVrOGUvcdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODo1MTo0MVrOGWQN-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQwMjAzOA==", "bodyText": "Starting with this line, put the rest into a protected method so we can unit-test it easily without depending on ML at all. This is relatively complex logic here, and we want to make sure it behaves correctly. It's easiest to do that if we can pass in our own inputs for the existing dbConfig and the generated indexNode and then verify that they are merged together correctly. Those tests will be much easier to write and will run very quickly - I recommend putting them into a separate test class that doesn't extend anything, can call it \"MergeDatabaseConfigTest\".", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3941#discussion_r424402038", "createdAt": "2020-05-13T12:36:39Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/ModelController.java", "diffHunk": "@@ -76,11 +84,85 @@\n     @RequestMapping(value = \"/{modelName}/entityTypes\", method = RequestMethod.PUT)\n     @ApiImplicitParam(required = true, paramType = \"body\", dataType = \"ModelDefinitions\")\n     public ResponseEntity<Void> updateModelEntityTypes(@ApiParam(hidden = true) @RequestBody JsonNode entityTypes, @PathVariable String modelName) {\n+        // update the model\n         newService().updateModelEntityTypes(modelName, entityTypes);\n+\n+        //deploy updated configs\n+        deployModelConfigs();\n+\n         return new ResponseEntity<>(HttpStatus.OK);\n     }\n \n \n+    void deployModelConfigs() {\n+        ManageClient manageClient = hubClientProvider.getHubClient().getManageClient();\n+        DatabaseClient finalDatabaseClient = hubClientProvider.getHubClient().getFinalClient();\n+        DatabaseClient stagingDatabaseClient = hubClientProvider.getHubClient().getStagingClient();\n+\n+        JsonNode modelConfigNode = newService().generateModelConfig();\n+\n+        // Deploy search options\n+        String explorerOptions = modelConfigNode.get(\"search-options\").get(\"explorer\").asText();\n+        String defaultOptions = modelConfigNode.get(\"search-options\").get(\"default\").asText();\n+        Map<String, DatabaseClient> clientMap = new HashMap<>();\n+        clientMap.put(\"staging\", stagingDatabaseClient);\n+        clientMap.put(\"final\", finalDatabaseClient);\n+        clientMap.forEach((databaseKind, databaseClient) -> {\n+            QueryOptionsManager queryOptionsManager = databaseClient.newServerConfigManager().newQueryOptionsManager();\n+            queryOptionsManager.writeOptionsAs(\"exp-\" + databaseKind + \"-entity-options\", Format.XML, explorerOptions);\n+            queryOptionsManager.writeOptionsAs(databaseKind + \"-entity-options\", Format.XML, defaultOptions);\n+        });\n+\n+        // Deploy protected-paths\n+        modelConfigNode.get(\"protected-paths\").forEach(jsonNode -> manageClient.postJson(\"/manage/v2/protected-paths\", jsonNode.toString()));\n+\n+        // Deploy query-rolesets\n+        try {\n+            modelConfigNode.get(\"query-rolesets\").forEach(jsonNode -> manageClient.postJson(\"/manage/v2/query-rolesets\", jsonNode.toString()));\n+        }\n+        catch (HttpClientErrorException ex) {\n+            QueryRolesetUtil.handleSaveException(ex);\n+        }\n+\n+        // Deploy index configuration\n+        modelConfigNode.get(\"index\").get(\"database-names\").forEach(dbNameNode -> {\n+            // Get updated entity index configs\n+            JsonNode indexNode = modelConfigNode.get(\"index\").get(\"index-config\");\n+\n+            try {\n+                // Get current db configuration\n+                String dbConfig = manageClient.getJson(\"/manage/v2/databases/\" + dbNameNode.asText() + \"/properties\");\n+                JsonNode dbNode = new ObjectMapper().readTree(dbConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25f007b41a746e449effeb2608322abf15c421e6"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk4NzU3Nw==", "bodyText": "Added the test.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3941#discussion_r425987577", "createdAt": "2020-05-15T18:51:41Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/ModelController.java", "diffHunk": "@@ -76,11 +84,85 @@\n     @RequestMapping(value = \"/{modelName}/entityTypes\", method = RequestMethod.PUT)\n     @ApiImplicitParam(required = true, paramType = \"body\", dataType = \"ModelDefinitions\")\n     public ResponseEntity<Void> updateModelEntityTypes(@ApiParam(hidden = true) @RequestBody JsonNode entityTypes, @PathVariable String modelName) {\n+        // update the model\n         newService().updateModelEntityTypes(modelName, entityTypes);\n+\n+        //deploy updated configs\n+        deployModelConfigs();\n+\n         return new ResponseEntity<>(HttpStatus.OK);\n     }\n \n \n+    void deployModelConfigs() {\n+        ManageClient manageClient = hubClientProvider.getHubClient().getManageClient();\n+        DatabaseClient finalDatabaseClient = hubClientProvider.getHubClient().getFinalClient();\n+        DatabaseClient stagingDatabaseClient = hubClientProvider.getHubClient().getStagingClient();\n+\n+        JsonNode modelConfigNode = newService().generateModelConfig();\n+\n+        // Deploy search options\n+        String explorerOptions = modelConfigNode.get(\"search-options\").get(\"explorer\").asText();\n+        String defaultOptions = modelConfigNode.get(\"search-options\").get(\"default\").asText();\n+        Map<String, DatabaseClient> clientMap = new HashMap<>();\n+        clientMap.put(\"staging\", stagingDatabaseClient);\n+        clientMap.put(\"final\", finalDatabaseClient);\n+        clientMap.forEach((databaseKind, databaseClient) -> {\n+            QueryOptionsManager queryOptionsManager = databaseClient.newServerConfigManager().newQueryOptionsManager();\n+            queryOptionsManager.writeOptionsAs(\"exp-\" + databaseKind + \"-entity-options\", Format.XML, explorerOptions);\n+            queryOptionsManager.writeOptionsAs(databaseKind + \"-entity-options\", Format.XML, defaultOptions);\n+        });\n+\n+        // Deploy protected-paths\n+        modelConfigNode.get(\"protected-paths\").forEach(jsonNode -> manageClient.postJson(\"/manage/v2/protected-paths\", jsonNode.toString()));\n+\n+        // Deploy query-rolesets\n+        try {\n+            modelConfigNode.get(\"query-rolesets\").forEach(jsonNode -> manageClient.postJson(\"/manage/v2/query-rolesets\", jsonNode.toString()));\n+        }\n+        catch (HttpClientErrorException ex) {\n+            QueryRolesetUtil.handleSaveException(ex);\n+        }\n+\n+        // Deploy index configuration\n+        modelConfigNode.get(\"index\").get(\"database-names\").forEach(dbNameNode -> {\n+            // Get updated entity index configs\n+            JsonNode indexNode = modelConfigNode.get(\"index\").get(\"index-config\");\n+\n+            try {\n+                // Get current db configuration\n+                String dbConfig = manageClient.getJson(\"/manage/v2/databases/\" + dbNameNode.asText() + \"/properties\");\n+                JsonNode dbNode = new ObjectMapper().readTree(dbConfig);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQwMjAzOA=="}, "originalCommit": {"oid": "25f007b41a746e449effeb2608322abf15c421e6"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mjg4NzQwOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/model/ModelControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMjozNzo1M1rOGUvfVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODo1MjoyNlrOGWQPXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQwMjc3Mw==", "bodyText": "Shouldn't this be a different namespace - isn't this the one that's generated too?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3941#discussion_r424402773", "createdAt": "2020-05-13T12:37:53Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/model/ModelControllerTest.java", "diffHunk": "@@ -60,26 +69,114 @@ private void updateModelInfo() {\n     }\n \n     private void updateModelEntityTypes() {\n+        // Loading unrelated indexes so that we can check for them after updating entity model\n+        loadUnrelatedIndexes();\n+\n         String entityTypes = \"{\\\"\" + MODEL_NAME + \"\\\" : {\\n\" +\n             \"      \\\"required\\\" : [ ],\\n\" +\n+            \"      \\\"pii\\\" : [ \\\"someProperty\\\" ],\" +\n+            \"      \\\"elementRangeIndex\\\" : [ \\\"someProperty\\\" ],\\n\" +\n+            \"      \\\"rangeIndex\\\" : [ \\\"someOtherProperty\\\" ],\" +\n             \"      \\\"properties\\\" : {\\n\" +\n             \"        \\\"someProperty\\\" : {\\n\" +\n             \"          \\\"datatype\\\" : \\\"string\\\",\\n\" +\n             \"          \\\"collation\\\" : \\\"http://marklogic.com/collation/codepoint\\\"\\n\" +\n-            \"        }\\n\" +\n+            \"        },\\n\" +\n+            \"         \\\"someOtherProperty\\\" : {\\n\" +\n+            \"          \\\"datatype\\\" : \\\"string\\\",\\n\" +\n+            \"          \\\"collation\\\" : \\\"http://marklogic.com/collation/codepoint\\\"\\n\" +\n+            \"        }\" +\n             \"      }\\n\" +\n             \"    }}\";\n \n         try {\n             controller.updateModelEntityTypes(objectMapper.readTree(entityTypes), MODEL_NAME);\n-        } catch (JsonProcessingException e) {\n+        }\n+        catch (JsonProcessingException e) {\n             throw new RuntimeException(e);\n         }\n \n+        assertSearchOptionsDeployment();\n+        assertPIIFilesDeployment();\n+        assertIndexDeployment();\n+\n         assertEquals(\"string\", loadModel(getHubClient().getFinalClient()).get(\"definitions\").get(MODEL_NAME).get(\"properties\").get(\"someProperty\").get(\"datatype\").asText());\n     }\n \n     private JsonNode loadModel(DatabaseClient client) {\n         return client.newJSONDocumentManager().read(\"/entities/\" + MODEL_NAME + \".entity.json\", new JacksonHandle()).get();\n     }\n+\n+    private void assertSearchOptionsDeployment() {\n+        DatabaseClient stagingDatabaseClient = getHubClient().getStagingClient();\n+        DatabaseClient finalDatabaseClient = getHubClient().getFinalClient();\n+        Map<String, DatabaseClient> clientMap = new HashMap<>();\n+        clientMap.put(\"staging\", stagingDatabaseClient);\n+        clientMap.put(\"final\", finalDatabaseClient);\n+        clientMap.forEach((databaseKind, databaseClient) -> {\n+            QueryOptionsManager queryOptionsManager = databaseClient.newServerConfigManager().newQueryOptionsManager();\n+            assertTrue(queryOptionsManager.readOptionsAs(\"exp-\" + databaseKind + \"-entity-options\", Format.XML, String.class).contains(MODEL_NAME));\n+            assertTrue(queryOptionsManager.readOptionsAs(databaseKind + \"-entity-options\", Format.XML, String.class).contains(MODEL_NAME));\n+        });\n+    }\n+\n+    private void assertPIIFilesDeployment() {\n+        runAsAdmin();\n+        ManageClient manageClient = getHubClient().getManageClient();\n+\n+        try {\n+            assertTrue(manageClient.getJson(\"/manage/v2/protected-paths\").contains(\"someProperty\"));\n+\n+            JsonNode queryRolesets = objectMapper.readTree(manageClient.getJson(\"/manage/v2/query-rolesets\"));\n+            assertTrue(queryRolesets.get(\"query-roleset-default-list\").get(\"list-items\").get(\"list-count\").get(\"value\").asInt() >= 1);\n+        }\n+        catch (JsonProcessingException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private void assertIndexDeployment() {\n+        ManageClient manageClient = getHubClient().getManageClient();\n+        Stream.of(getHubConfig().getDbName(DatabaseKind.STAGING), getHubConfig().getDbName(DatabaseKind.FINAL)).forEach(databaseKind -> {\n+            String indexConfig = manageClient.getJson(\"/manage/v2/databases/\" + databaseKind + \"/properties\");\n+            assertTrue(indexConfig.contains(\"testRangeIndexForDHFPROD4704\"));\n+            assertTrue(indexConfig.contains(\"testPathIndexForDHFPROD4704\"));\n+            assertTrue(indexConfig.contains(\"someProperty\"));\n+            assertTrue(indexConfig.contains(\"someOtherProperty\"));\n+        });\n+    }\n+\n+    private void loadUnrelatedIndexes() {\n+        String indexConfig = \"{\\n\" +\n+            \"   \\\"lang\\\":\\\"zxx\\\",\\n\" +\n+            \"   \\\"path-namespace\\\":[\\n\" +\n+            \"      {\\n\" +\n+            \"         \\\"prefix\\\":\\\"es\\\",\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25f007b41a746e449effeb2608322abf15c421e6"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk4NzkzNQ==", "bodyText": "Yep, forgot to change it while copying.\nUpdated in here b6777af", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3941#discussion_r425987935", "createdAt": "2020-05-15T18:52:26Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/model/ModelControllerTest.java", "diffHunk": "@@ -60,26 +69,114 @@ private void updateModelInfo() {\n     }\n \n     private void updateModelEntityTypes() {\n+        // Loading unrelated indexes so that we can check for them after updating entity model\n+        loadUnrelatedIndexes();\n+\n         String entityTypes = \"{\\\"\" + MODEL_NAME + \"\\\" : {\\n\" +\n             \"      \\\"required\\\" : [ ],\\n\" +\n+            \"      \\\"pii\\\" : [ \\\"someProperty\\\" ],\" +\n+            \"      \\\"elementRangeIndex\\\" : [ \\\"someProperty\\\" ],\\n\" +\n+            \"      \\\"rangeIndex\\\" : [ \\\"someOtherProperty\\\" ],\" +\n             \"      \\\"properties\\\" : {\\n\" +\n             \"        \\\"someProperty\\\" : {\\n\" +\n             \"          \\\"datatype\\\" : \\\"string\\\",\\n\" +\n             \"          \\\"collation\\\" : \\\"http://marklogic.com/collation/codepoint\\\"\\n\" +\n-            \"        }\\n\" +\n+            \"        },\\n\" +\n+            \"         \\\"someOtherProperty\\\" : {\\n\" +\n+            \"          \\\"datatype\\\" : \\\"string\\\",\\n\" +\n+            \"          \\\"collation\\\" : \\\"http://marklogic.com/collation/codepoint\\\"\\n\" +\n+            \"        }\" +\n             \"      }\\n\" +\n             \"    }}\";\n \n         try {\n             controller.updateModelEntityTypes(objectMapper.readTree(entityTypes), MODEL_NAME);\n-        } catch (JsonProcessingException e) {\n+        }\n+        catch (JsonProcessingException e) {\n             throw new RuntimeException(e);\n         }\n \n+        assertSearchOptionsDeployment();\n+        assertPIIFilesDeployment();\n+        assertIndexDeployment();\n+\n         assertEquals(\"string\", loadModel(getHubClient().getFinalClient()).get(\"definitions\").get(MODEL_NAME).get(\"properties\").get(\"someProperty\").get(\"datatype\").asText());\n     }\n \n     private JsonNode loadModel(DatabaseClient client) {\n         return client.newJSONDocumentManager().read(\"/entities/\" + MODEL_NAME + \".entity.json\", new JacksonHandle()).get();\n     }\n+\n+    private void assertSearchOptionsDeployment() {\n+        DatabaseClient stagingDatabaseClient = getHubClient().getStagingClient();\n+        DatabaseClient finalDatabaseClient = getHubClient().getFinalClient();\n+        Map<String, DatabaseClient> clientMap = new HashMap<>();\n+        clientMap.put(\"staging\", stagingDatabaseClient);\n+        clientMap.put(\"final\", finalDatabaseClient);\n+        clientMap.forEach((databaseKind, databaseClient) -> {\n+            QueryOptionsManager queryOptionsManager = databaseClient.newServerConfigManager().newQueryOptionsManager();\n+            assertTrue(queryOptionsManager.readOptionsAs(\"exp-\" + databaseKind + \"-entity-options\", Format.XML, String.class).contains(MODEL_NAME));\n+            assertTrue(queryOptionsManager.readOptionsAs(databaseKind + \"-entity-options\", Format.XML, String.class).contains(MODEL_NAME));\n+        });\n+    }\n+\n+    private void assertPIIFilesDeployment() {\n+        runAsAdmin();\n+        ManageClient manageClient = getHubClient().getManageClient();\n+\n+        try {\n+            assertTrue(manageClient.getJson(\"/manage/v2/protected-paths\").contains(\"someProperty\"));\n+\n+            JsonNode queryRolesets = objectMapper.readTree(manageClient.getJson(\"/manage/v2/query-rolesets\"));\n+            assertTrue(queryRolesets.get(\"query-roleset-default-list\").get(\"list-items\").get(\"list-count\").get(\"value\").asInt() >= 1);\n+        }\n+        catch (JsonProcessingException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private void assertIndexDeployment() {\n+        ManageClient manageClient = getHubClient().getManageClient();\n+        Stream.of(getHubConfig().getDbName(DatabaseKind.STAGING), getHubConfig().getDbName(DatabaseKind.FINAL)).forEach(databaseKind -> {\n+            String indexConfig = manageClient.getJson(\"/manage/v2/databases/\" + databaseKind + \"/properties\");\n+            assertTrue(indexConfig.contains(\"testRangeIndexForDHFPROD4704\"));\n+            assertTrue(indexConfig.contains(\"testPathIndexForDHFPROD4704\"));\n+            assertTrue(indexConfig.contains(\"someProperty\"));\n+            assertTrue(indexConfig.contains(\"someOtherProperty\"));\n+        });\n+    }\n+\n+    private void loadUnrelatedIndexes() {\n+        String indexConfig = \"{\\n\" +\n+            \"   \\\"lang\\\":\\\"zxx\\\",\\n\" +\n+            \"   \\\"path-namespace\\\":[\\n\" +\n+            \"      {\\n\" +\n+            \"         \\\"prefix\\\":\\\"es\\\",\\n\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQwMjc3Mw=="}, "originalCommit": {"oid": "25f007b41a746e449effeb2608322abf15c421e6"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mjg5NDYxOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/model/ModelControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMjozOTo1MVrOGUvjyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODo1Mjo0MlrOGWQQAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQwMzkxNQ==", "bodyText": "A testing technique - a problem with assertTrue/assertFalse is that if it fails, it's not known why. We really want to see the value of indexConfig to find out what's going on.\nTo improve on that, I'd do this:\n[\"someProperty\", \"someOtherProperty\", etc].forEach(prop -> {\n    assertTrue(indexConfig.contains(property), \"Expected \" + property + \" to be in indexConfig: \" + indexConfig);\n});\n\nThat makes debugging a test failure much easier.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3941#discussion_r424403915", "createdAt": "2020-05-13T12:39:51Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/model/ModelControllerTest.java", "diffHunk": "@@ -60,26 +69,114 @@ private void updateModelInfo() {\n     }\n \n     private void updateModelEntityTypes() {\n+        // Loading unrelated indexes so that we can check for them after updating entity model\n+        loadUnrelatedIndexes();\n+\n         String entityTypes = \"{\\\"\" + MODEL_NAME + \"\\\" : {\\n\" +\n             \"      \\\"required\\\" : [ ],\\n\" +\n+            \"      \\\"pii\\\" : [ \\\"someProperty\\\" ],\" +\n+            \"      \\\"elementRangeIndex\\\" : [ \\\"someProperty\\\" ],\\n\" +\n+            \"      \\\"rangeIndex\\\" : [ \\\"someOtherProperty\\\" ],\" +\n             \"      \\\"properties\\\" : {\\n\" +\n             \"        \\\"someProperty\\\" : {\\n\" +\n             \"          \\\"datatype\\\" : \\\"string\\\",\\n\" +\n             \"          \\\"collation\\\" : \\\"http://marklogic.com/collation/codepoint\\\"\\n\" +\n-            \"        }\\n\" +\n+            \"        },\\n\" +\n+            \"         \\\"someOtherProperty\\\" : {\\n\" +\n+            \"          \\\"datatype\\\" : \\\"string\\\",\\n\" +\n+            \"          \\\"collation\\\" : \\\"http://marklogic.com/collation/codepoint\\\"\\n\" +\n+            \"        }\" +\n             \"      }\\n\" +\n             \"    }}\";\n \n         try {\n             controller.updateModelEntityTypes(objectMapper.readTree(entityTypes), MODEL_NAME);\n-        } catch (JsonProcessingException e) {\n+        }\n+        catch (JsonProcessingException e) {\n             throw new RuntimeException(e);\n         }\n \n+        assertSearchOptionsDeployment();\n+        assertPIIFilesDeployment();\n+        assertIndexDeployment();\n+\n         assertEquals(\"string\", loadModel(getHubClient().getFinalClient()).get(\"definitions\").get(MODEL_NAME).get(\"properties\").get(\"someProperty\").get(\"datatype\").asText());\n     }\n \n     private JsonNode loadModel(DatabaseClient client) {\n         return client.newJSONDocumentManager().read(\"/entities/\" + MODEL_NAME + \".entity.json\", new JacksonHandle()).get();\n     }\n+\n+    private void assertSearchOptionsDeployment() {\n+        DatabaseClient stagingDatabaseClient = getHubClient().getStagingClient();\n+        DatabaseClient finalDatabaseClient = getHubClient().getFinalClient();\n+        Map<String, DatabaseClient> clientMap = new HashMap<>();\n+        clientMap.put(\"staging\", stagingDatabaseClient);\n+        clientMap.put(\"final\", finalDatabaseClient);\n+        clientMap.forEach((databaseKind, databaseClient) -> {\n+            QueryOptionsManager queryOptionsManager = databaseClient.newServerConfigManager().newQueryOptionsManager();\n+            assertTrue(queryOptionsManager.readOptionsAs(\"exp-\" + databaseKind + \"-entity-options\", Format.XML, String.class).contains(MODEL_NAME));\n+            assertTrue(queryOptionsManager.readOptionsAs(databaseKind + \"-entity-options\", Format.XML, String.class).contains(MODEL_NAME));\n+        });\n+    }\n+\n+    private void assertPIIFilesDeployment() {\n+        runAsAdmin();\n+        ManageClient manageClient = getHubClient().getManageClient();\n+\n+        try {\n+            assertTrue(manageClient.getJson(\"/manage/v2/protected-paths\").contains(\"someProperty\"));\n+\n+            JsonNode queryRolesets = objectMapper.readTree(manageClient.getJson(\"/manage/v2/query-rolesets\"));\n+            assertTrue(queryRolesets.get(\"query-roleset-default-list\").get(\"list-items\").get(\"list-count\").get(\"value\").asInt() >= 1);\n+        }\n+        catch (JsonProcessingException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private void assertIndexDeployment() {\n+        ManageClient manageClient = getHubClient().getManageClient();\n+        Stream.of(getHubConfig().getDbName(DatabaseKind.STAGING), getHubConfig().getDbName(DatabaseKind.FINAL)).forEach(databaseKind -> {\n+            String indexConfig = manageClient.getJson(\"/manage/v2/databases/\" + databaseKind + \"/properties\");\n+            assertTrue(indexConfig.contains(\"testRangeIndexForDHFPROD4704\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25f007b41a746e449effeb2608322abf15c421e6"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk4ODA5OQ==", "bodyText": "Makes sense. Updated in here b6777af", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3941#discussion_r425988099", "createdAt": "2020-05-15T18:52:42Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/model/ModelControllerTest.java", "diffHunk": "@@ -60,26 +69,114 @@ private void updateModelInfo() {\n     }\n \n     private void updateModelEntityTypes() {\n+        // Loading unrelated indexes so that we can check for them after updating entity model\n+        loadUnrelatedIndexes();\n+\n         String entityTypes = \"{\\\"\" + MODEL_NAME + \"\\\" : {\\n\" +\n             \"      \\\"required\\\" : [ ],\\n\" +\n+            \"      \\\"pii\\\" : [ \\\"someProperty\\\" ],\" +\n+            \"      \\\"elementRangeIndex\\\" : [ \\\"someProperty\\\" ],\\n\" +\n+            \"      \\\"rangeIndex\\\" : [ \\\"someOtherProperty\\\" ],\" +\n             \"      \\\"properties\\\" : {\\n\" +\n             \"        \\\"someProperty\\\" : {\\n\" +\n             \"          \\\"datatype\\\" : \\\"string\\\",\\n\" +\n             \"          \\\"collation\\\" : \\\"http://marklogic.com/collation/codepoint\\\"\\n\" +\n-            \"        }\\n\" +\n+            \"        },\\n\" +\n+            \"         \\\"someOtherProperty\\\" : {\\n\" +\n+            \"          \\\"datatype\\\" : \\\"string\\\",\\n\" +\n+            \"          \\\"collation\\\" : \\\"http://marklogic.com/collation/codepoint\\\"\\n\" +\n+            \"        }\" +\n             \"      }\\n\" +\n             \"    }}\";\n \n         try {\n             controller.updateModelEntityTypes(objectMapper.readTree(entityTypes), MODEL_NAME);\n-        } catch (JsonProcessingException e) {\n+        }\n+        catch (JsonProcessingException e) {\n             throw new RuntimeException(e);\n         }\n \n+        assertSearchOptionsDeployment();\n+        assertPIIFilesDeployment();\n+        assertIndexDeployment();\n+\n         assertEquals(\"string\", loadModel(getHubClient().getFinalClient()).get(\"definitions\").get(MODEL_NAME).get(\"properties\").get(\"someProperty\").get(\"datatype\").asText());\n     }\n \n     private JsonNode loadModel(DatabaseClient client) {\n         return client.newJSONDocumentManager().read(\"/entities/\" + MODEL_NAME + \".entity.json\", new JacksonHandle()).get();\n     }\n+\n+    private void assertSearchOptionsDeployment() {\n+        DatabaseClient stagingDatabaseClient = getHubClient().getStagingClient();\n+        DatabaseClient finalDatabaseClient = getHubClient().getFinalClient();\n+        Map<String, DatabaseClient> clientMap = new HashMap<>();\n+        clientMap.put(\"staging\", stagingDatabaseClient);\n+        clientMap.put(\"final\", finalDatabaseClient);\n+        clientMap.forEach((databaseKind, databaseClient) -> {\n+            QueryOptionsManager queryOptionsManager = databaseClient.newServerConfigManager().newQueryOptionsManager();\n+            assertTrue(queryOptionsManager.readOptionsAs(\"exp-\" + databaseKind + \"-entity-options\", Format.XML, String.class).contains(MODEL_NAME));\n+            assertTrue(queryOptionsManager.readOptionsAs(databaseKind + \"-entity-options\", Format.XML, String.class).contains(MODEL_NAME));\n+        });\n+    }\n+\n+    private void assertPIIFilesDeployment() {\n+        runAsAdmin();\n+        ManageClient manageClient = getHubClient().getManageClient();\n+\n+        try {\n+            assertTrue(manageClient.getJson(\"/manage/v2/protected-paths\").contains(\"someProperty\"));\n+\n+            JsonNode queryRolesets = objectMapper.readTree(manageClient.getJson(\"/manage/v2/query-rolesets\"));\n+            assertTrue(queryRolesets.get(\"query-roleset-default-list\").get(\"list-items\").get(\"list-count\").get(\"value\").asInt() >= 1);\n+        }\n+        catch (JsonProcessingException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private void assertIndexDeployment() {\n+        ManageClient manageClient = getHubClient().getManageClient();\n+        Stream.of(getHubConfig().getDbName(DatabaseKind.STAGING), getHubConfig().getDbName(DatabaseKind.FINAL)).forEach(databaseKind -> {\n+            String indexConfig = manageClient.getJson(\"/manage/v2/databases/\" + databaseKind + \"/properties\");\n+            assertTrue(indexConfig.contains(\"testRangeIndexForDHFPROD4704\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQwMzkxNQ=="}, "originalCommit": {"oid": "25f007b41a746e449effeb2608322abf15c421e6"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjkwNDA1OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/model/ModelControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMjo0MjowMFrOGUvpfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODo1NzoxMVrOGWQYog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQwNTM3Mw==", "bodyText": "I believe you need to call Installer.applyDatabasePropertiesForTests after each test here because you're modifying the config of the staging/final databases, which could break other tests.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3941#discussion_r424405373", "createdAt": "2020-05-13T12:42:00Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/model/ModelControllerTest.java", "diffHunk": "@@ -60,26 +69,114 @@ private void updateModelInfo() {\n     }\n \n     private void updateModelEntityTypes() {\n+        // Loading unrelated indexes so that we can check for them after updating entity model", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25f007b41a746e449effeb2608322abf15c421e6"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk5MDMwNg==", "bodyText": "Updated in here b6777af", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3941#discussion_r425990306", "createdAt": "2020-05-15T18:57:11Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/model/ModelControllerTest.java", "diffHunk": "@@ -60,26 +69,114 @@ private void updateModelInfo() {\n     }\n \n     private void updateModelEntityTypes() {\n+        // Loading unrelated indexes so that we can check for them after updating entity model", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQwNTM3Mw=="}, "originalCommit": {"oid": "25f007b41a746e449effeb2608322abf15c421e6"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjkxNDY5OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/models/generateModelConfig.sjs", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMjo0NDo1OVrOGUvwkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODo1ODoxMFrOGWQapQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQwNzE4NQ==", "bodyText": "I don't think you should add the database-names here - it's assumed that the client knows what those are, which is the case here. If you were doing it here, you arguably should do it for search-options as well. But I don't think it's necessary - the middle tier has a HubClient, so it's good to go.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3941#discussion_r424407185", "createdAt": "2020-05-13T12:44:59Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/models/generateModelConfig.sjs", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+  Copyright (c) 2020 MarkLogic Corporation\n+\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+     http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+*/\n+'use strict';\n+\n+const consts = require(\"/data-hub/5/impl/consts.sjs\");\n+const config = require(\"/com.marklogic.hub/config.sjs\");\n+const hent = require(\"/data-hub/5/impl/hub-entities.xqy\");\n+\n+\n+const result = {};\n+const protectedPaths = [];\n+const queryRolesets = [];\n+const index = {\n+  \"database-names\": [],\n+  \"index-config\": {}\n+};\n+const options = {};\n+\n+const entityModels = cts.search(cts.collectionQuery(consts.ENTITY_MODEL_COLLECTION)).toArray();\n+if (entityModels.length > 0) {\n+  // Add PII files\n+  const securityConfig = hent.dumpPii(entityModels).toObject();\n+  const protectedPathsExist = securityConfig.config && securityConfig.config[\"protected-path\"] && securityConfig.config[\"protected-path\"].length > 0;\n+  if (protectedPathsExist) {\n+    securityConfig.config[\"protected-path\"].forEach(path => {\n+      protectedPaths.push(xdmp.toJSON(path));\n+    });\n+    if (securityConfig.config[\"query-roleset\"]) {\n+      queryRolesets.push(xdmp.toJSON(securityConfig.config[\"query-roleset\"]));\n+    }\n+  }\n+\n+  // Add search options\n+  options[\"default\"] = hent.dumpSearchOptions(entityModels, false);\n+  options[\"explorer\"] = hent.dumpSearchOptions(entityModels, true);\n+\n+  // Add indexes\n+  const dbProps = hent.dumpIndexes(entityModels);\n+  index[\"index-config\"] = dbProps.toObject();\n+  index[\"database-names\"].push(config.STAGINGDATABASE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25f007b41a746e449effeb2608322abf15c421e6"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk5MDgyMQ==", "bodyText": "Updated in here b6777af to use the middle tier for that database names.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3941#discussion_r425990821", "createdAt": "2020-05-15T18:58:10Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/models/generateModelConfig.sjs", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+  Copyright (c) 2020 MarkLogic Corporation\n+\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+     http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+*/\n+'use strict';\n+\n+const consts = require(\"/data-hub/5/impl/consts.sjs\");\n+const config = require(\"/com.marklogic.hub/config.sjs\");\n+const hent = require(\"/data-hub/5/impl/hub-entities.xqy\");\n+\n+\n+const result = {};\n+const protectedPaths = [];\n+const queryRolesets = [];\n+const index = {\n+  \"database-names\": [],\n+  \"index-config\": {}\n+};\n+const options = {};\n+\n+const entityModels = cts.search(cts.collectionQuery(consts.ENTITY_MODEL_COLLECTION)).toArray();\n+if (entityModels.length > 0) {\n+  // Add PII files\n+  const securityConfig = hent.dumpPii(entityModels).toObject();\n+  const protectedPathsExist = securityConfig.config && securityConfig.config[\"protected-path\"] && securityConfig.config[\"protected-path\"].length > 0;\n+  if (protectedPathsExist) {\n+    securityConfig.config[\"protected-path\"].forEach(path => {\n+      protectedPaths.push(xdmp.toJSON(path));\n+    });\n+    if (securityConfig.config[\"query-roleset\"]) {\n+      queryRolesets.push(xdmp.toJSON(securityConfig.config[\"query-roleset\"]));\n+    }\n+  }\n+\n+  // Add search options\n+  options[\"default\"] = hent.dumpSearchOptions(entityModels, false);\n+  options[\"explorer\"] = hent.dumpSearchOptions(entityModels, true);\n+\n+  // Add indexes\n+  const dbProps = hent.dumpIndexes(entityModels);\n+  index[\"index-config\"] = dbProps.toObject();\n+  index[\"database-names\"].push(config.STAGINGDATABASE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQwNzE4NQ=="}, "originalCommit": {"oid": "25f007b41a746e449effeb2608322abf15c421e6"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjkxNzQzOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/models/generateModelConfig.sjs", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMjo0NTo0MlrOGUvyRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxODo1ODoyMlrOGWQbCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQwNzYyMw==", "bodyText": "There's no need to define these ahead of time. Just assign properties directly to \"result\", makes for less code - i.e. declare \"result\" as:\nresult = {\n  protectedPaths: [],\n  queryRolesets: [],\n  index-config: {},\n  options: {}\n};\n\nThat also has a nice benefit of immediately telling the reader what the response object looks like.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3941#discussion_r424407623", "createdAt": "2020-05-13T12:45:42Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/models/generateModelConfig.sjs", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+  Copyright (c) 2020 MarkLogic Corporation\n+\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+     http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+*/\n+'use strict';\n+\n+const consts = require(\"/data-hub/5/impl/consts.sjs\");\n+const config = require(\"/com.marklogic.hub/config.sjs\");\n+const hent = require(\"/data-hub/5/impl/hub-entities.xqy\");\n+\n+\n+const result = {};\n+const protectedPaths = [];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25f007b41a746e449effeb2608322abf15c421e6"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk5MDkyMQ==", "bodyText": "Makes sense. Updated in here b6777af", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3941#discussion_r425990921", "createdAt": "2020-05-15T18:58:22Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/models/generateModelConfig.sjs", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+  Copyright (c) 2020 MarkLogic Corporation\n+\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+     http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+*/\n+'use strict';\n+\n+const consts = require(\"/data-hub/5/impl/consts.sjs\");\n+const config = require(\"/com.marklogic.hub/config.sjs\");\n+const hent = require(\"/data-hub/5/impl/hub-entities.xqy\");\n+\n+\n+const result = {};\n+const protectedPaths = [];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQwNzYyMw=="}, "originalCommit": {"oid": "25f007b41a746e449effeb2608322abf15c421e6"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mjg4MDU4OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/ModelController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo1NjoyN1rOGWSD5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo1Njo0NVrOGWSEYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxNzc2NQ==", "bodyText": "Nice. I'm such a big fan of this, because these method names immediately answer a reader's question of - what does it mean to \"deploy model configs\"? Answer = it means deploying search options, protected paths, query rolesets, and indexes. No comments needed.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3941#discussion_r426017765", "createdAt": "2020-05-15T19:56:27Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/ModelController.java", "diffHunk": "@@ -76,11 +86,132 @@\n     @RequestMapping(value = \"/{modelName}/entityTypes\", method = RequestMethod.PUT)\n     @ApiImplicitParam(required = true, paramType = \"body\", dataType = \"ModelDefinitions\")\n     public ResponseEntity<Void> updateModelEntityTypes(@ApiParam(hidden = true) @RequestBody JsonNode entityTypes, @PathVariable String modelName) {\n+        // update the model\n         newService().updateModelEntityTypes(modelName, entityTypes);\n+\n+        //deploy updated configs\n+        deployModelConfigs();\n+\n         return new ResponseEntity<>(HttpStatus.OK);\n     }\n \n \n+    void deployModelConfigs() {\n+        ManageClient manageClient = hubClientProvider.getHubClient().getManageClient();\n+\n+        JsonNode modelConfigNode = newService().generateModelConfig();\n+\n+        deploySearchOptions(modelConfigNode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6777afc22dfc3a5bd4d452ff1d0df426f91e0cc"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxNzg5MQ==", "bodyText": "Btw, the book Clean Code is very persuasive in arguing for this style", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3941#discussion_r426017891", "createdAt": "2020-05-15T19:56:45Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/ModelController.java", "diffHunk": "@@ -76,11 +86,132 @@\n     @RequestMapping(value = \"/{modelName}/entityTypes\", method = RequestMethod.PUT)\n     @ApiImplicitParam(required = true, paramType = \"body\", dataType = \"ModelDefinitions\")\n     public ResponseEntity<Void> updateModelEntityTypes(@ApiParam(hidden = true) @RequestBody JsonNode entityTypes, @PathVariable String modelName) {\n+        // update the model\n         newService().updateModelEntityTypes(modelName, entityTypes);\n+\n+        //deploy updated configs\n+        deployModelConfigs();\n+\n         return new ResponseEntity<>(HttpStatus.OK);\n     }\n \n \n+    void deployModelConfigs() {\n+        ManageClient manageClient = hubClientProvider.getHubClient().getManageClient();\n+\n+        JsonNode modelConfigNode = newService().generateModelConfig();\n+\n+        deploySearchOptions(modelConfigNode);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxNzc2NQ=="}, "originalCommit": {"oid": "b6777afc22dfc3a5bd4d452ff1d0df426f91e0cc"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mjg4NDY1OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/ModelController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo1Nzo1NVrOGWSGhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo1Nzo1NVrOGWSGhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxODQzNw==", "bodyText": "I don't think you need this try/catch here - you've already got a try/catch in the method, that'll catch this error (and it's of course very unlikely that the error will occur).", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3941#discussion_r426018437", "createdAt": "2020-05-15T19:57:55Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/ModelController.java", "diffHunk": "@@ -76,11 +86,132 @@\n     @RequestMapping(value = \"/{modelName}/entityTypes\", method = RequestMethod.PUT)\n     @ApiImplicitParam(required = true, paramType = \"body\", dataType = \"ModelDefinitions\")\n     public ResponseEntity<Void> updateModelEntityTypes(@ApiParam(hidden = true) @RequestBody JsonNode entityTypes, @PathVariable String modelName) {\n+        // update the model\n         newService().updateModelEntityTypes(modelName, entityTypes);\n+\n+        //deploy updated configs\n+        deployModelConfigs();\n+\n         return new ResponseEntity<>(HttpStatus.OK);\n     }\n \n \n+    void deployModelConfigs() {\n+        ManageClient manageClient = hubClientProvider.getHubClient().getManageClient();\n+\n+        JsonNode modelConfigNode = newService().generateModelConfig();\n+\n+        deploySearchOptions(modelConfigNode);\n+        deployProtectedPaths(modelConfigNode, manageClient);\n+        deployQueryRolesets(modelConfigNode, manageClient);\n+        deployIndexConfig(modelConfigNode, manageClient);\n+    }\n+\n+    private void deployIndexConfig(JsonNode modelConfigNode, ManageClient manageClient) {\n+        try {\n+            Stream.of(getHubClient().getDbName(DatabaseKind.STAGING), getHubClient().getDbName(DatabaseKind.FINAL)).forEach(databaseName -> {\n+                // Get updated entity index configs\n+                JsonNode indexNode = modelConfigNode.get(\"indexConfig\");\n+\n+                try {\n+                    // Get current db configuration\n+                    String dbConfig = manageClient.getJson(\"/manage/v2/databases/\" + databaseName + \"/properties\");\n+                    JsonNode dbNode = new ObjectMapper().readTree(dbConfig);\n+\n+                    indexNode = mergeIndexConfigs(dbNode, indexNode);\n+                }\n+                catch (JsonProcessingException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6777afc22dfc3a5bd4d452ff1d0df426f91e0cc"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mjg4NzM1OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/ModelController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo1OToxMVrOGWSIYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMjoyNTo0NVrOGWVaeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxODkxMg==", "bodyText": "I like to include the original exception message when rethrowing an error because in many contexts, the user will only see this message, and it can be confusing not to include the more detailed message. So I frequently do this:\nthrow new RuntimeException(\"Unable to deploy databases indexes after updating entity models; cause: \" + e.getMessage(), e);\n\nI also think it's better to say \"Unable to deploy database indexes\", which is more clear than \"index configuration\".", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3941#discussion_r426018912", "createdAt": "2020-05-15T19:59:11Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/ModelController.java", "diffHunk": "@@ -76,11 +86,132 @@\n     @RequestMapping(value = \"/{modelName}/entityTypes\", method = RequestMethod.PUT)\n     @ApiImplicitParam(required = true, paramType = \"body\", dataType = \"ModelDefinitions\")\n     public ResponseEntity<Void> updateModelEntityTypes(@ApiParam(hidden = true) @RequestBody JsonNode entityTypes, @PathVariable String modelName) {\n+        // update the model\n         newService().updateModelEntityTypes(modelName, entityTypes);\n+\n+        //deploy updated configs\n+        deployModelConfigs();\n+\n         return new ResponseEntity<>(HttpStatus.OK);\n     }\n \n \n+    void deployModelConfigs() {\n+        ManageClient manageClient = hubClientProvider.getHubClient().getManageClient();\n+\n+        JsonNode modelConfigNode = newService().generateModelConfig();\n+\n+        deploySearchOptions(modelConfigNode);\n+        deployProtectedPaths(modelConfigNode, manageClient);\n+        deployQueryRolesets(modelConfigNode, manageClient);\n+        deployIndexConfig(modelConfigNode, manageClient);\n+    }\n+\n+    private void deployIndexConfig(JsonNode modelConfigNode, ManageClient manageClient) {\n+        try {\n+            Stream.of(getHubClient().getDbName(DatabaseKind.STAGING), getHubClient().getDbName(DatabaseKind.FINAL)).forEach(databaseName -> {\n+                // Get updated entity index configs\n+                JsonNode indexNode = modelConfigNode.get(\"indexConfig\");\n+\n+                try {\n+                    // Get current db configuration\n+                    String dbConfig = manageClient.getJson(\"/manage/v2/databases/\" + databaseName + \"/properties\");\n+                    JsonNode dbNode = new ObjectMapper().readTree(dbConfig);\n+\n+                    indexNode = mergeIndexConfigs(dbNode, indexNode);\n+                }\n+                catch (JsonProcessingException e) {\n+                    throw new RuntimeException(e);\n+                }\n+\n+                manageClient.putJson(\"/manage/v2/databases/\" + databaseName + \"/properties\", indexNode.toString());\n+            });\n+        }\n+        catch (Exception e) {\n+            throw new RuntimeException(\"Unable to deploy index configuration after updating entity models.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6777afc22dfc3a5bd4d452ff1d0df426f91e0cc"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA3MjY5Nw==", "bodyText": "Makes sense, updated in here da196c8", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3941#discussion_r426072697", "createdAt": "2020-05-15T22:25:45Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/ModelController.java", "diffHunk": "@@ -76,11 +86,132 @@\n     @RequestMapping(value = \"/{modelName}/entityTypes\", method = RequestMethod.PUT)\n     @ApiImplicitParam(required = true, paramType = \"body\", dataType = \"ModelDefinitions\")\n     public ResponseEntity<Void> updateModelEntityTypes(@ApiParam(hidden = true) @RequestBody JsonNode entityTypes, @PathVariable String modelName) {\n+        // update the model\n         newService().updateModelEntityTypes(modelName, entityTypes);\n+\n+        //deploy updated configs\n+        deployModelConfigs();\n+\n         return new ResponseEntity<>(HttpStatus.OK);\n     }\n \n \n+    void deployModelConfigs() {\n+        ManageClient manageClient = hubClientProvider.getHubClient().getManageClient();\n+\n+        JsonNode modelConfigNode = newService().generateModelConfig();\n+\n+        deploySearchOptions(modelConfigNode);\n+        deployProtectedPaths(modelConfigNode, manageClient);\n+        deployQueryRolesets(modelConfigNode, manageClient);\n+        deployIndexConfig(modelConfigNode, manageClient);\n+    }\n+\n+    private void deployIndexConfig(JsonNode modelConfigNode, ManageClient manageClient) {\n+        try {\n+            Stream.of(getHubClient().getDbName(DatabaseKind.STAGING), getHubClient().getDbName(DatabaseKind.FINAL)).forEach(databaseName -> {\n+                // Get updated entity index configs\n+                JsonNode indexNode = modelConfigNode.get(\"indexConfig\");\n+\n+                try {\n+                    // Get current db configuration\n+                    String dbConfig = manageClient.getJson(\"/manage/v2/databases/\" + databaseName + \"/properties\");\n+                    JsonNode dbNode = new ObjectMapper().readTree(dbConfig);\n+\n+                    indexNode = mergeIndexConfigs(dbNode, indexNode);\n+                }\n+                catch (JsonProcessingException e) {\n+                    throw new RuntimeException(e);\n+                }\n+\n+                manageClient.putJson(\"/manage/v2/databases/\" + databaseName + \"/properties\", indexNode.toString());\n+            });\n+        }\n+        catch (Exception e) {\n+            throw new RuntimeException(\"Unable to deploy index configuration after updating entity models.\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxODkxMg=="}, "originalCommit": {"oid": "b6777afc22dfc3a5bd4d452ff1d0df426f91e0cc"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mjg4ODE5OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/ModelController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo1OTozMFrOGWSI5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo1OTozMFrOGWSI5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxOTA0NA==", "bodyText": "Same thing here, include the \"cause\".", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3941#discussion_r426019044", "createdAt": "2020-05-15T19:59:30Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/ModelController.java", "diffHunk": "@@ -76,11 +86,132 @@\n     @RequestMapping(value = \"/{modelName}/entityTypes\", method = RequestMethod.PUT)\n     @ApiImplicitParam(required = true, paramType = \"body\", dataType = \"ModelDefinitions\")\n     public ResponseEntity<Void> updateModelEntityTypes(@ApiParam(hidden = true) @RequestBody JsonNode entityTypes, @PathVariable String modelName) {\n+        // update the model\n         newService().updateModelEntityTypes(modelName, entityTypes);\n+\n+        //deploy updated configs\n+        deployModelConfigs();\n+\n         return new ResponseEntity<>(HttpStatus.OK);\n     }\n \n \n+    void deployModelConfigs() {\n+        ManageClient manageClient = hubClientProvider.getHubClient().getManageClient();\n+\n+        JsonNode modelConfigNode = newService().generateModelConfig();\n+\n+        deploySearchOptions(modelConfigNode);\n+        deployProtectedPaths(modelConfigNode, manageClient);\n+        deployQueryRolesets(modelConfigNode, manageClient);\n+        deployIndexConfig(modelConfigNode, manageClient);\n+    }\n+\n+    private void deployIndexConfig(JsonNode modelConfigNode, ManageClient manageClient) {\n+        try {\n+            Stream.of(getHubClient().getDbName(DatabaseKind.STAGING), getHubClient().getDbName(DatabaseKind.FINAL)).forEach(databaseName -> {\n+                // Get updated entity index configs\n+                JsonNode indexNode = modelConfigNode.get(\"indexConfig\");\n+\n+                try {\n+                    // Get current db configuration\n+                    String dbConfig = manageClient.getJson(\"/manage/v2/databases/\" + databaseName + \"/properties\");\n+                    JsonNode dbNode = new ObjectMapper().readTree(dbConfig);\n+\n+                    indexNode = mergeIndexConfigs(dbNode, indexNode);\n+                }\n+                catch (JsonProcessingException e) {\n+                    throw new RuntimeException(e);\n+                }\n+\n+                manageClient.putJson(\"/manage/v2/databases/\" + databaseName + \"/properties\", indexNode.toString());\n+            });\n+        }\n+        catch (Exception e) {\n+            throw new RuntimeException(\"Unable to deploy index configuration after updating entity models.\", e);\n+        }\n+    }\n+\n+    private void deployQueryRolesets(JsonNode modelConfigNode, ManageClient manageClient) {\n+        try {\n+            modelConfigNode.get(\"queryRolesets\").forEach(jsonNode -> {\n+                try {\n+                    manageClient.postJson(\"/manage/v2/query-rolesets\", jsonNode.toString());\n+                }\n+                catch (HttpClientErrorException ex) {\n+                    QueryRolesetUtil.handleSaveException(ex);\n+                }\n+            });\n+        }\n+        catch (Exception e) {\n+            throw new RuntimeException(\"Unable to deploy query-rolesets after updating entity models.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6777afc22dfc3a5bd4d452ff1d0df426f91e0cc"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mjg5NDQ0OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/MergeDatabaseConfigTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDowMTo1MlrOGWSM5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMjoyNzoxMFrOGWVb1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAyMDA2OQ==", "bodyText": "For future reference - ml-app-deployer has a bunch of POJOs to build this stuff, which is a lot easier to write and read than doing inline JSON in Java. See UpgradeProjectTest for examples of using ElementIndex and Database.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3941#discussion_r426020069", "createdAt": "2020-05-15T20:01:52Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/MergeDatabaseConfigTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.marklogic.hub.central.controllers;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class MergeDatabaseConfigTest {\n+\n+    @Test\n+    public void testMergeIndexConfigs() throws JsonProcessingException {\n+        String entityServicesRangeIndex = \"testEntityServicesRangeIndexForDHFPROD4704\";\n+        String entityServicesPathIndex = \"testEntityServicesPathIndexForDHFPROD4704\";\n+        String databaseRangeIndex = \"testRangeIndexForDHFPROD4704\";\n+        String databasePathIndex = \"testPathIndexForDHFPROD4704\";\n+        String databaseField1 = \"language\";\n+        String databaseField2 = \"forest\";\n+\n+        String indexConfig = \"{\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6777afc22dfc3a5bd4d452ff1d0df426f91e0cc"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA3MzA0Ng==", "bodyText": "Awesome, updated the test to use the POJOs.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3941#discussion_r426073046", "createdAt": "2020-05-15T22:27:10Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/MergeDatabaseConfigTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.marklogic.hub.central.controllers;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class MergeDatabaseConfigTest {\n+\n+    @Test\n+    public void testMergeIndexConfigs() throws JsonProcessingException {\n+        String entityServicesRangeIndex = \"testEntityServicesRangeIndexForDHFPROD4704\";\n+        String entityServicesPathIndex = \"testEntityServicesPathIndexForDHFPROD4704\";\n+        String databaseRangeIndex = \"testRangeIndexForDHFPROD4704\";\n+        String databasePathIndex = \"testPathIndexForDHFPROD4704\";\n+        String databaseField1 = \"language\";\n+        String databaseField2 = \"forest\";\n+\n+        String indexConfig = \"{\\n\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAyMDA2OQ=="}, "originalCommit": {"oid": "b6777afc22dfc3a5bd4d452ff1d0df426f91e0cc"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mjg5Njc4OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/MergeDatabaseConfigTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDowMjo1MVrOGWSOZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMjoyNzo0NFrOGWVclQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAyMDQ1Mg==", "bodyText": "I think you also need a scenario for where the entity indexes already exist. So keep this scenario, and add another one that has the same setup here, and the existing indexes includes the entity indexes.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3941#discussion_r426020452", "createdAt": "2020-05-15T20:02:51Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/MergeDatabaseConfigTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.marklogic.hub.central.controllers;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class MergeDatabaseConfigTest {\n+\n+    @Test\n+    public void testMergeIndexConfigs() throws JsonProcessingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6777afc22dfc3a5bd4d452ff1d0df426f91e0cc"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA3MzIzNw==", "bodyText": "Added the scenario in here da196c8", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3941#discussion_r426073237", "createdAt": "2020-05-15T22:27:44Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/MergeDatabaseConfigTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.marklogic.hub.central.controllers;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class MergeDatabaseConfigTest {\n+\n+    @Test\n+    public void testMergeIndexConfigs() throws JsonProcessingException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAyMDQ1Mg=="}, "originalCommit": {"oid": "b6777afc22dfc3a5bd4d452ff1d0df426f91e0cc"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjkwNjIyOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/model/ModelControllerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDowNjoxN1rOGWSUSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDowNjoxN1rOGWSUSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAyMTk2Mw==", "bodyText": "Food for thought for the future - no change needed now:\n\"NounTest\" - e.g. \"ModelControllerTest\" - is usually a decent approach for the first couple tests. But that doesn't scale well as the \"Noun\" becomes able to do more \"Verbs\". At that points, it's worth refactoring into \"Verb1Test\", \"Verb2Test\", etc, and putting them into a package specific to the Noun.\nI think ModelControllerTest isn't too big yet, but when we add more tests, it's likely going to be worth moving to a VerbTest approach.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3941#discussion_r426021963", "createdAt": "2020-05-15T20:06:17Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/model/ModelControllerTest.java", "diffHunk": "@@ -60,26 +79,115 @@ private void updateModelInfo() {\n     }\n \n     private void updateModelEntityTypes() {\n+        // Loading unrelated indexes so that we can check for them after updating entity model", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6777afc22dfc3a5bd4d452ff1d0df426f91e0cc"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4129, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}