{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4NDUwNDM2", "number": 3789, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxMjo0Nzo1NFrODu35_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMDoxNzozOFrODvWfsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDc3MDUyOnYy", "diffSide": "RIGHT", "path": "one-ui/src/main/java/com/marklogic/hub/oneui/controllers/EntitySearchController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxMjo0Nzo1NFrOGA_uvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxMjo0Nzo1NFrOGA_uvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5NzM0MA==", "bodyText": "I don't think these annotations are needed - they seem redundant with what the method is already doing, which is building a request-based EntitySearchManager with a session-based hubConfig.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3789#discussion_r403697340", "createdAt": "2020-04-05T12:47:54Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/oneui/controllers/EntitySearchController.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package com.marklogic.hub.oneui.controllers;\n+\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.marklogic.hub.dataservices.EntitySearchService;\n+import com.marklogic.hub.oneui.managers.EntitySearchManager;\n+import com.marklogic.hub.oneui.models.Document;\n+import com.marklogic.hub.oneui.models.HubConfigSession;\n+import com.marklogic.hub.oneui.models.SearchQuery;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.context.annotation.ScopedProxyMode;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import java.util.Optional;\n+\n+\n+@Controller\n+@RequestMapping(value = \"/api/entitySearch\")\n+public class EntitySearchController {\n+\n+    @Autowired\n+    private HubConfigSession hubConfig;\n+\n+    @Autowired\n+    private EntitySearchManager entitySearchManager;\n+\n+    @Bean\n+    @Scope(proxyMode = ScopedProxyMode.TARGET_CLASS, value = \"request\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3b36d1a6ae981103788a82d1296ffb4c0ba3581"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDc3MDc1OnYy", "diffSide": "RIGHT", "path": "one-ui/src/main/java/com/marklogic/hub/oneui/controllers/EntitySearchController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxMjo0ODoyNFrOGA_u4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxMjo0ODoyNFrOGA_u4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5NzM3OQ==", "bodyText": "Shouldn't need this, since you have the method below this to construct an EntitySearchManager.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3789#discussion_r403697379", "createdAt": "2020-04-05T12:48:24Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/oneui/controllers/EntitySearchController.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package com.marklogic.hub.oneui.controllers;\n+\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.marklogic.hub.dataservices.EntitySearchService;\n+import com.marklogic.hub.oneui.managers.EntitySearchManager;\n+import com.marklogic.hub.oneui.models.Document;\n+import com.marklogic.hub.oneui.models.HubConfigSession;\n+import com.marklogic.hub.oneui.models.SearchQuery;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.context.annotation.ScopedProxyMode;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import java.util.Optional;\n+\n+\n+@Controller\n+@RequestMapping(value = \"/api/entitySearch\")\n+public class EntitySearchController {\n+\n+    @Autowired\n+    private HubConfigSession hubConfig;\n+\n+    @Autowired\n+    private EntitySearchManager entitySearchManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3b36d1a6ae981103788a82d1296ffb4c0ba3581"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDc3MTk3OnYy", "diffSide": "RIGHT", "path": "one-ui/src/test/java/com/marklogic/hub/oneui/AbstractOneUiTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxMjo0OToyMFrOGA_vgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxMjo0OToyMFrOGA_vgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5NzUzNg==", "bodyText": "If you need a method that returns an ArrayNode, let's not modify this - just add a \"readJsonArray\" method.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3789#discussion_r403697536", "createdAt": "2020-04-05T12:49:20Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/test/java/com/marklogic/hub/oneui/AbstractOneUiTest.java", "diffHunk": "@@ -124,6 +124,11 @@ protected File getFileFromClasspath(String resourceName) {\n \n     protected ObjectNode readJsonObject(String json) {\n         try {\n+            if(objectMapper.readTree(json).isArray()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3b36d1a6ae981103788a82d1296ffb4c0ba3581"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODIyMTAzOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/entitySearch/getMatchingPropertyValues.sjs", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjoxMzo1NFrOGBfYPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDozNzowOVrOGBo8Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIxNTg2OQ==", "bodyText": "Can we handle possible NPE's?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3789#discussion_r404215869", "createdAt": "2020-04-06T16:13:54Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/entitySearch/getMatchingPropertyValues.sjs", "diffHunk": "@@ -1,13 +1,25 @@\n const lib = require('/data-hub/5/impl/hub-es.sjs');\n \n-var entityTypeId;\n-var propertyPath;\n-var referenceType;\n-var pattern;\n-var limit;\n+var facetValuesSearchQuery;\n \n+let queryObj = JSON.parse(facetValuesSearchQuery);\n+let entityTypeId = queryObj.facetInfo.entityTypeId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "937b4dedd867c9a320313125fd5287995bfd2700"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzODkyMA==", "bodyText": "Is facetInfo guaranteed to be non-null? I think including the JSON schema for a search query in the new ./specs folder would be a good step forward to helping anyone know the answer to this.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3789#discussion_r404238920", "createdAt": "2020-04-06T16:48:06Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/entitySearch/getMatchingPropertyValues.sjs", "diffHunk": "@@ -1,13 +1,25 @@\n const lib = require('/data-hub/5/impl/hub-es.sjs');\n \n-var entityTypeId;\n-var propertyPath;\n-var referenceType;\n-var pattern;\n-var limit;\n+var facetValuesSearchQuery;\n \n+let queryObj = JSON.parse(facetValuesSearchQuery);\n+let entityTypeId = queryObj.facetInfo.entityTypeId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIxNTg2OQ=="}, "originalCommit": {"oid": "937b4dedd867c9a320313125fd5287995bfd2700"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3MjUxNQ==", "bodyText": "Removed the facetInfo object from the request as it is not required", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3789#discussion_r404372515", "createdAt": "2020-04-06T20:37:09Z", "author": {"login": "rahulvudutala"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/entitySearch/getMatchingPropertyValues.sjs", "diffHunk": "@@ -1,13 +1,25 @@\n const lib = require('/data-hub/5/impl/hub-es.sjs');\n \n-var entityTypeId;\n-var propertyPath;\n-var referenceType;\n-var pattern;\n-var limit;\n+var facetValuesSearchQuery;\n \n+let queryObj = JSON.parse(facetValuesSearchQuery);\n+let entityTypeId = queryObj.facetInfo.entityTypeId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIxNTg2OQ=="}, "originalCommit": {"oid": "937b4dedd867c9a320313125fd5287995bfd2700"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTc4MjI0OnYy", "diffSide": "RIGHT", "path": "one-ui/src/test/java/com/marklogic/hub/oneui/AbstractOneUiTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMDoxNzozOFrOGBuhkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMDoxNzozOFrOGBuhkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ2NDAxNw==", "bodyText": "It seems you expect an ArrayNode back, right? So just make this \"readJsonArray\" and have it return an ArrayNode.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3789#discussion_r404464017", "createdAt": "2020-04-07T00:17:38Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/test/java/com/marklogic/hub/oneui/AbstractOneUiTest.java", "diffHunk": "@@ -130,6 +130,16 @@ protected ObjectNode readJsonObject(String json) {\n         }\n     }\n \n+    protected ObjectNode readJsonArrayObject(String json) {\n+        try {\n+            ObjectNode objectNode = objectMapper.createObjectNode();\n+            objectNode.putArray(\"arrayKey\").add(objectMapper.readTree(json));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ad04507802f86340bff072b594f6119edec2342"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3383, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}