{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzMTY5NDY0", "number": 5033, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMjoyODo1NFrOFHxj6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMzozNzoyMVrOFH-BNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjk2MzYxOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/HubCentralManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMjoyODo1NFrOIJWqKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMTowODo1MFrOIJl-ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY3OTMzOA==", "bodyText": "I think this needs less knowledge of what's actually in the project, as this is duplicating knowledge that initProject has in HubProject. How about the following approach instead:\n\nCreate a temp directory using java.io.tmpdir\nUse HubProject to initialize a project in that temp dir\nGet all of the project update files and write them over top of the initialized project dir\nZip up the entire project directory\n\nNow, if we add a new project file in initProject in HubProject, we don't have to remember to account for it here too.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/5033#discussion_r546679338", "createdAt": "2020-12-21T12:28:54Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/HubCentralManager.java", "diffHunk": "@@ -31,33 +33,93 @@\n public class HubCentralManager extends LoggingObject {\n \n     public void writeProjectArtifactsAsZip(HubClient hubClient, OutputStream outputStream) {\n-        ArrayNode artifacts = (ArrayNode) ArtifactService.on(hubClient.getStagingClient()).getArtifactsWithProjectPaths();\n-\n         final ZipOutputStream zipOutputStream = new ZipOutputStream(outputStream);\n-        final ObjectWriter prettyWriter = buildPrettyWriter();\n+        try {\n+            writeArtifactsIntoZipOutputStream(hubClient, zipOutputStream);\n+        } finally {\n+           IOUtils.closeQuietly(zipOutputStream);\n+        }\n+    }\n \n+    public void writeProjectAsZip(HubClient hubClient, OutputStream outputStream){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46d347e13bf04f35d373cb9dfc4d01fe1eb019c8"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkzMDM3MQ==", "bodyText": "I have used hubProject.exportProject() for step 4.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/5033#discussion_r546930371", "createdAt": "2020-12-21T21:08:50Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/HubCentralManager.java", "diffHunk": "@@ -31,33 +33,93 @@\n public class HubCentralManager extends LoggingObject {\n \n     public void writeProjectArtifactsAsZip(HubClient hubClient, OutputStream outputStream) {\n-        ArrayNode artifacts = (ArrayNode) ArtifactService.on(hubClient.getStagingClient()).getArtifactsWithProjectPaths();\n-\n         final ZipOutputStream zipOutputStream = new ZipOutputStream(outputStream);\n-        final ObjectWriter prettyWriter = buildPrettyWriter();\n+        try {\n+            writeArtifactsIntoZipOutputStream(hubClient, zipOutputStream);\n+        } finally {\n+           IOUtils.closeQuietly(zipOutputStream);\n+        }\n+    }\n \n+    public void writeProjectAsZip(HubClient hubClient, OutputStream outputStream){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY3OTMzOA=="}, "originalCommit": {"oid": "46d347e13bf04f35d373cb9dfc4d01fe1eb019c8"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODkwOTQ4OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/environment/DownloadProjectFilesMvcTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMjo1NTo1OVrOIJogGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMzoxMDozN1rOIJozNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk3MTY3Mg==", "bodyText": "I'll test this out locally tomorrow morning, but I think we need some more renaming here so that we consistently use \"project updates\" and \"project files\" - i.e. \"artifacts\" is no longer meaningful in this context, because it's not clear what artifacts we're getting.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/5033#discussion_r546971672", "createdAt": "2020-12-21T22:55:59Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/environment/DownloadProjectFilesMvcTest.java", "diffHunk": "@@ -21,7 +21,8 @@\n \n public class DownloadProjectFilesMvcTest extends AbstractMvcTest {\n \n-    private final static String PATH = \"/api/environment/downloadProjectFiles\";\n+    private final static String ARTIFACTS_PATH = \"/api/environment/downloadProjectUpdates\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da9877ab6cd01e541b61520b7631b9e127f93571"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk3NjU2Nw==", "bodyText": "Correction, trying it out now, will try to get feedback soon.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/5033#discussion_r546976567", "createdAt": "2020-12-21T23:10:37Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/test/java/com/marklogic/hub/central/controllers/environment/DownloadProjectFilesMvcTest.java", "diffHunk": "@@ -21,7 +21,8 @@\n \n public class DownloadProjectFilesMvcTest extends AbstractMvcTest {\n \n-    private final static String PATH = \"/api/environment/downloadProjectFiles\";\n+    private final static String ARTIFACTS_PATH = \"/api/environment/downloadProjectUpdates\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk3MTY3Mg=="}, "originalCommit": {"oid": "da9877ab6cd01e541b61520b7631b9e127f93571"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODk4OTU5OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/hubcentral/AllArtifactsProject.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMzozMDoxOVrOIJpOew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMzozMDoxOVrOIJpOew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk4MzU0Nw==", "bodyText": "Let's do \"projectUpdateZipEntries\" to make it clear this is the zip of project updates, not the full project zip.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/5033#discussion_r546983547", "createdAt": "2020-12-21T23:30:19Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/hubcentral/AllArtifactsProject.java", "diffHunk": "@@ -22,9 +22,9 @@\n  */\n public class AllArtifactsProject extends TestObject {\n \n-    private HubClient hubClient;\n-    private Map<String, JsonNode> zipEntries;\n-    private File zipFile;\n+    protected HubClient hubClient;\n+    protected Map<String, JsonNode> zipArtifactEntries;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da9877ab6cd01e541b61520b7631b9e127f93571"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODk4OTkyOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/hubcentral/AllArtifactsProject.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMzozMDoyOVrOIJpOqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMzozMDoyOVrOIJpOqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk4MzU5NQ==", "bodyText": "And then projectUpdatesZipFile", "url": "https://github.com/marklogic/marklogic-data-hub/pull/5033#discussion_r546983595", "createdAt": "2020-12-21T23:30:29Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/hubcentral/AllArtifactsProject.java", "diffHunk": "@@ -22,9 +22,9 @@\n  */\n public class AllArtifactsProject extends TestObject {\n \n-    private HubClient hubClient;\n-    private Map<String, JsonNode> zipEntries;\n-    private File zipFile;\n+    protected HubClient hubClient;\n+    protected Map<String, JsonNode> zipArtifactEntries;\n+    private File zipArtifactsFile;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da9877ab6cd01e541b61520b7631b9e127f93571"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODk5MDQwOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/hubcentral/AllArtifactsProject.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMzozMDo0MlrOIJpO8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMzozMDo0MlrOIJpO8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk4MzY2NQ==", "bodyText": "And \"writeProjectUpdatesToZipFile\", and so on for other uses of the term \"project artifacts\" in this class.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/5033#discussion_r546983665", "createdAt": "2020-12-21T23:30:42Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/hubcentral/AllArtifactsProject.java", "diffHunk": "@@ -34,20 +34,20 @@ public AllArtifactsProject(HubClient hubClient) {\n      * Writes the zip to a file and reads all the entries into memory.\n      */\n     public void writeProjectArtifactsToZipFile() {\n-        try {\n-            zipFile = new File(\"build/allArtifactsProject.zip\");\n-            FileOutputStream fos = new FileOutputStream(zipFile);\n+        try{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da9877ab6cd01e541b61520b7631b9e127f93571"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODk5Nzc0OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/hubcentral/InitializedDataHubProject.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMzozNDozN1rOIJpTGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMzozNDozN1rOIJpTGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk4NDczMA==", "bodyText": "I don't think this class is needed - the methods in here can just be private to the one test class that uses it. The name is a little confusing because it implies that it's a newly initialized project, but it's more than that - it's all the stuff from the \"all-artifacts\" project too.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/5033#discussion_r546984730", "createdAt": "2020-12-21T23:34:37Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/hubcentral/InitializedDataHubProject.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.marklogic.hub.hubcentral;\n+\n+import com.marklogic.hub.HubClient;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class InitializedDataHubProject extends AllArtifactsProject{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da9877ab6cd01e541b61520b7631b9e127f93571"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTAwMjU2OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/hubcentral/InitializedDataHubProject.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMzozNjoyOVrOIJpVnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMzozNjoyOVrOIJpVnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk4NTM3Mw==", "bodyText": "These assertions on exact counts create a maintenance burden, as any time someone adds a new file to hub-internal-config, they have to remember to update this test - which is very unlikely that someone would think to do that, which means this test will fail. And the developer will have to figure out what's going on in this test and how to fix it.\nInstead of exact counts that are brittle, I think we should just verify that one file in each directory exists. That should suffice for verifying that hub-internal-config was written out correctly.\nAlso, by not depending on brittle counts, I don't think you need the additional logic above for making counts of files in directories.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/5033#discussion_r546985373", "createdAt": "2020-12-21T23:36:29Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/hubcentral/InitializedDataHubProject.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.marklogic.hub.hubcentral;\n+\n+import com.marklogic.hub.HubClient;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class InitializedDataHubProject extends AllArtifactsProject{\n+\n+    private Map<String, Integer> zipProjectEntries;\n+    private File zipProjectFile;\n+\n+    public InitializedDataHubProject(HubClient hubClient) {\n+        super(hubClient);\n+    }\n+\n+    public void writeProjectToZipFile() {\n+        try {\n+            zipProjectFile = new File(\"build/allProject.zip\");\n+            FileOutputStream fos = new FileOutputStream(zipProjectFile);\n+            new HubCentralManager().writeProjectAsZip(hubClient, fos);\n+            fos.close();\n+            readZipProject();\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private void readZipProject() throws IOException {\n+        zipProjectEntries = new HashMap<>();\n+        zipArtifactEntries = new HashMap<>();\n+        ZipFile zip = new ZipFile(zipProjectFile);\n+        Enumeration<?> entries = zip.entries();\n+        String[] artifactDirs = {\"flows\", \"steps\", \"entities\", \"src/main/entity-config\", \"src/main/ml-config/security/protected-paths\",\n+            \"src/main/ml-config/security/query-rolesets\"};\n+        while (entries.hasMoreElements()) {\n+            ZipEntry entry = (ZipEntry) entries.nextElement();\n+            if(Stream.of(artifactDirs).anyMatch(entry.getName()::startsWith) && !entry.isDirectory()){\n+                readArtifactZipEntry(zip, entry);\n+            }\n+            else{\n+                String key;\n+                if(!entry.isDirectory()){\n+                    assertTrue(entry.getSize() > 0);\n+                    int index = entry.getName().lastIndexOf('/');\n+                    if(index == -1){\n+                        key = \"rootDir\";\n+                    }\n+                    else{\n+                        key = entry.getName().substring(0, entry.getName().lastIndexOf('/'));\n+                    }\n+                    zipProjectEntries.computeIfPresent(key, (k, v) -> v + 1);\n+                }\n+                else{\n+                    key = entry.getName();\n+                }\n+                zipProjectEntries.putIfAbsent(key, 1);\n+            }\n+        }\n+    }\n+\n+    public void verifyZipProject(){\n+        assertTrue(zipProjectEntries.containsKey(\"src/main/ml-modules/root/custom-modules/custom/\"));\n+        assertTrue(zipProjectEntries.containsKey(\"src/main/ml-modules/root/custom-modules/ingestion/\"));\n+        assertTrue(zipProjectEntries.containsKey(\"src/main/ml-modules/root/custom-modules/mapping/\"));\n+        assertTrue(zipProjectEntries.containsKey(\"src/main/ml-modules/root/custom-modules/mapping-functions/\"));\n+        assertTrue(zipProjectEntries.containsKey(\"src/main/ml-modules/root/custom-modules/mastering/\"));\n+        assertTrue(zipProjectEntries.containsKey(\"src/main/ml-modules/root/custom-modules/matching/\"));\n+        assertTrue(zipProjectEntries.containsKey(\"src/main/ml-modules/root/custom-modules/merging/\"));\n+        assertEquals(5, zipProjectEntries.get(\"rootDir\"));\n+        assertEquals(2, zipProjectEntries.get(\"src/main/hub-internal-config/database-fields\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da9877ab6cd01e541b61520b7631b9e127f93571"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTAwNDcxOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/hubcentral/InitializedDataHubProject.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMzozNzoyMVrOIJpWtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMzozNzoyMVrOIJpWtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk4NTY1NQ==", "bodyText": "Given that there's special logic for ensuring that gradle-local.properties is written, there should be an explicit assertion that it exists. Also, we should spell out exactly which 5 things are expected here - just knowing that 5 exist doesn't really tell us anything.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/5033#discussion_r546985655", "createdAt": "2020-12-21T23:37:21Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/hubcentral/InitializedDataHubProject.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.marklogic.hub.hubcentral;\n+\n+import com.marklogic.hub.HubClient;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class InitializedDataHubProject extends AllArtifactsProject{\n+\n+    private Map<String, Integer> zipProjectEntries;\n+    private File zipProjectFile;\n+\n+    public InitializedDataHubProject(HubClient hubClient) {\n+        super(hubClient);\n+    }\n+\n+    public void writeProjectToZipFile() {\n+        try {\n+            zipProjectFile = new File(\"build/allProject.zip\");\n+            FileOutputStream fos = new FileOutputStream(zipProjectFile);\n+            new HubCentralManager().writeProjectAsZip(hubClient, fos);\n+            fos.close();\n+            readZipProject();\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private void readZipProject() throws IOException {\n+        zipProjectEntries = new HashMap<>();\n+        zipArtifactEntries = new HashMap<>();\n+        ZipFile zip = new ZipFile(zipProjectFile);\n+        Enumeration<?> entries = zip.entries();\n+        String[] artifactDirs = {\"flows\", \"steps\", \"entities\", \"src/main/entity-config\", \"src/main/ml-config/security/protected-paths\",\n+            \"src/main/ml-config/security/query-rolesets\"};\n+        while (entries.hasMoreElements()) {\n+            ZipEntry entry = (ZipEntry) entries.nextElement();\n+            if(Stream.of(artifactDirs).anyMatch(entry.getName()::startsWith) && !entry.isDirectory()){\n+                readArtifactZipEntry(zip, entry);\n+            }\n+            else{\n+                String key;\n+                if(!entry.isDirectory()){\n+                    assertTrue(entry.getSize() > 0);\n+                    int index = entry.getName().lastIndexOf('/');\n+                    if(index == -1){\n+                        key = \"rootDir\";\n+                    }\n+                    else{\n+                        key = entry.getName().substring(0, entry.getName().lastIndexOf('/'));\n+                    }\n+                    zipProjectEntries.computeIfPresent(key, (k, v) -> v + 1);\n+                }\n+                else{\n+                    key = entry.getName();\n+                }\n+                zipProjectEntries.putIfAbsent(key, 1);\n+            }\n+        }\n+    }\n+\n+    public void verifyZipProject(){\n+        assertTrue(zipProjectEntries.containsKey(\"src/main/ml-modules/root/custom-modules/custom/\"));\n+        assertTrue(zipProjectEntries.containsKey(\"src/main/ml-modules/root/custom-modules/ingestion/\"));\n+        assertTrue(zipProjectEntries.containsKey(\"src/main/ml-modules/root/custom-modules/mapping/\"));\n+        assertTrue(zipProjectEntries.containsKey(\"src/main/ml-modules/root/custom-modules/mapping-functions/\"));\n+        assertTrue(zipProjectEntries.containsKey(\"src/main/ml-modules/root/custom-modules/mastering/\"));\n+        assertTrue(zipProjectEntries.containsKey(\"src/main/ml-modules/root/custom-modules/matching/\"));\n+        assertTrue(zipProjectEntries.containsKey(\"src/main/ml-modules/root/custom-modules/merging/\"));\n+        assertEquals(5, zipProjectEntries.get(\"rootDir\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da9877ab6cd01e541b61520b7631b9e127f93571"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2966, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}