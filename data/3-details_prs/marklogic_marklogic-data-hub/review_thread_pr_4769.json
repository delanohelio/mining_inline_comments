{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwMzY0ODYy", "number": 4769, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMzozOTo1OFrOEyINqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNTo1MToyOFrOEybHUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTk4ODI1OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/builtins/steps/mapping/entity-services/lib.sjs", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMzozOTo1OFrOHomSxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMDoyMTozMlrOHonCmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMzMjQ4NQ==", "bodyText": "If there's a test failing for this, can the test be upgraded to verify that there's only one instance of the \"echo\" function? And this seems to be introducing logic that says - if there are duplicates, then whichever one is found last \"wins\" - i.e. the signature is for the last one. Is that the case?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4769#discussion_r512332485", "createdAt": "2020-10-26T23:39:58Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/builtins/steps/mapping/entity-services/lib.sjs", "diffHunk": "@@ -476,21 +476,31 @@ function getMarkLogicMappingFunctions() {\n   return fn.head(datahub.hubUtils.queryLatest(function() {\n     let fnMetadata = fn.collection(\"http://marklogic.com/entity-services/function-metadata\")\n     let ns = {\"m\":\"http://marklogic.com/entity-services/mapping\"};\n+    const functionsAdded = [];\n     let output = [];\n \n     for (const metaData of fnMetadata){\n       if(metaData.xpath(\"/m:function-defs\",ns)) {\n         let j = 1;\n         let fnLocation = metaData.xpath(\"/m:function-defs/@location\",ns)\n         for (const mlFunction of metaData.xpath(\"/m:function-defs/m:function-def\",ns )){\n-          let funcName = metaData.xpath(\"/m:function-defs/m:function-def[\"+j+\"]/@name\", ns);\n+          let funcName = String(metaData.xpath(\"/m:function-defs/m:function-def[\"+j+\"]/@name\", ns));\n           let params = String(metaData.xpath(\"/m:function-defs/m:function-def[\"+j+\"]/m:parameters/m:parameter/@name\",ns)).replace(\"\\n\",\",\");\n           j++;\n-          let singleFunction ={};\n-          singleFunction[\"functionName\"] = funcName;\n-          singleFunction[\"signature\"] = funcName +\"(\"+params+\")\";\n-          singleFunction[\"category\"] = (String(fnLocation).includes(\"/data-hub/5/mapping-functions\")) ? \"builtin\" : \"custom\";\n-          output.push(singleFunction)\n+          if(functionsAdded.includes(funcName)){\n+            let addedFunction = output.find(func => {\n+              return func.functionName == funcName\n+            });\n+            addedFunction[\"signature\"] = funcName +\"(\"+params+\")\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd211be3d55118d729dbad79262085a7b6a9e436"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM0NDczMA==", "bodyText": "The functionality is going to remain the same. Earlier the response was an object, so the last one always wins.\n{\"echo\":\n\"category\":\"custom\"\n\"signature\":\"echo(value1, value2)\"}\n\nNow since it is an array, it can look like the below array, so I will have to include the logic.\n[\n{\n\"functionName\": \"echo,\n\"category\":\"custom\",\n\"signature\": \"echo(value)\"\n},\n{\n\"functionName\": \"echo,\n\"category\":\"custom\",\n\"signature\": \"echo(value1, value2)\"\n}\n]\n\nI will add a test that checks that echo (if present as the function was addd by previous tests) is present only once.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4769#discussion_r512344730", "createdAt": "2020-10-27T00:21:32Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/builtins/steps/mapping/entity-services/lib.sjs", "diffHunk": "@@ -476,21 +476,31 @@ function getMarkLogicMappingFunctions() {\n   return fn.head(datahub.hubUtils.queryLatest(function() {\n     let fnMetadata = fn.collection(\"http://marklogic.com/entity-services/function-metadata\")\n     let ns = {\"m\":\"http://marklogic.com/entity-services/mapping\"};\n+    const functionsAdded = [];\n     let output = [];\n \n     for (const metaData of fnMetadata){\n       if(metaData.xpath(\"/m:function-defs\",ns)) {\n         let j = 1;\n         let fnLocation = metaData.xpath(\"/m:function-defs/@location\",ns)\n         for (const mlFunction of metaData.xpath(\"/m:function-defs/m:function-def\",ns )){\n-          let funcName = metaData.xpath(\"/m:function-defs/m:function-def[\"+j+\"]/@name\", ns);\n+          let funcName = String(metaData.xpath(\"/m:function-defs/m:function-def[\"+j+\"]/@name\", ns));\n           let params = String(metaData.xpath(\"/m:function-defs/m:function-def[\"+j+\"]/m:parameters/m:parameter/@name\",ns)).replace(\"\\n\",\",\");\n           j++;\n-          let singleFunction ={};\n-          singleFunction[\"functionName\"] = funcName;\n-          singleFunction[\"signature\"] = funcName +\"(\"+params+\")\";\n-          singleFunction[\"category\"] = (String(fnLocation).includes(\"/data-hub/5/mapping-functions\")) ? \"builtin\" : \"custom\";\n-          output.push(singleFunction)\n+          if(functionsAdded.includes(funcName)){\n+            let addedFunction = output.find(func => {\n+              return func.functionName == funcName\n+            });\n+            addedFunction[\"signature\"] = funcName +\"(\"+params+\")\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMzMjQ4NQ=="}, "originalCommit": {"oid": "bd211be3d55118d729dbad79262085a7b6a9e436"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzA4NDk2OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/builtins/steps/mapping/entity-services/lib.sjs", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNTo1MToyOFrOHpDkvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMjo0MDo1MVrOHpX6sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgxMjIyMg==", "bodyText": "Instead of searching in both functionsAdded and output arrays, can we use a Map here with the key being the function name and the value being the function object?\nMap also provides an iterator for values that can then be used to create the output array.\nconst map1 = new Map();\nmap1.set('a', {'a':'a'});\nmap1.set('b', {'b':'b'});\nconst ar = [...map1.values()];", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4769#discussion_r512812222", "createdAt": "2020-10-27T15:51:28Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/builtins/steps/mapping/entity-services/lib.sjs", "diffHunk": "@@ -476,21 +476,31 @@ function getMarkLogicMappingFunctions() {\n   return fn.head(datahub.hubUtils.queryLatest(function() {\n     let fnMetadata = fn.collection(\"http://marklogic.com/entity-services/function-metadata\")\n     let ns = {\"m\":\"http://marklogic.com/entity-services/mapping\"};\n+    const functionsAdded = [];\n     let output = [];\n \n     for (const metaData of fnMetadata){\n       if(metaData.xpath(\"/m:function-defs\",ns)) {\n         let j = 1;\n         let fnLocation = metaData.xpath(\"/m:function-defs/@location\",ns)\n         for (const mlFunction of metaData.xpath(\"/m:function-defs/m:function-def\",ns )){\n-          let funcName = metaData.xpath(\"/m:function-defs/m:function-def[\"+j+\"]/@name\", ns);\n+          let funcName = String(metaData.xpath(\"/m:function-defs/m:function-def[\"+j+\"]/@name\", ns));\n           let params = String(metaData.xpath(\"/m:function-defs/m:function-def[\"+j+\"]/m:parameters/m:parameter/@name\",ns)).replace(\"\\n\",\",\");\n           j++;\n-          let singleFunction ={};\n-          singleFunction[\"functionName\"] = funcName;\n-          singleFunction[\"signature\"] = funcName +\"(\"+params+\")\";\n-          singleFunction[\"category\"] = (String(fnLocation).includes(\"/data-hub/5/mapping-functions\")) ? \"builtin\" : \"custom\";\n-          output.push(singleFunction)\n+          if(functionsAdded.includes(funcName)){\n+            let addedFunction = output.find(func => {\n+              return func.functionName == funcName\n+            });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4b99e2e7d4dac4f2687e4c252dda825ed121998"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgxNjczNw==", "bodyText": "That's a good call, that will be a lot faster than calling \"includes\" N times and then having to call \"find\" as well.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4769#discussion_r512816737", "createdAt": "2020-10-27T15:56:34Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/builtins/steps/mapping/entity-services/lib.sjs", "diffHunk": "@@ -476,21 +476,31 @@ function getMarkLogicMappingFunctions() {\n   return fn.head(datahub.hubUtils.queryLatest(function() {\n     let fnMetadata = fn.collection(\"http://marklogic.com/entity-services/function-metadata\")\n     let ns = {\"m\":\"http://marklogic.com/entity-services/mapping\"};\n+    const functionsAdded = [];\n     let output = [];\n \n     for (const metaData of fnMetadata){\n       if(metaData.xpath(\"/m:function-defs\",ns)) {\n         let j = 1;\n         let fnLocation = metaData.xpath(\"/m:function-defs/@location\",ns)\n         for (const mlFunction of metaData.xpath(\"/m:function-defs/m:function-def\",ns )){\n-          let funcName = metaData.xpath(\"/m:function-defs/m:function-def[\"+j+\"]/@name\", ns);\n+          let funcName = String(metaData.xpath(\"/m:function-defs/m:function-def[\"+j+\"]/@name\", ns));\n           let params = String(metaData.xpath(\"/m:function-defs/m:function-def[\"+j+\"]/m:parameters/m:parameter/@name\",ns)).replace(\"\\n\",\",\");\n           j++;\n-          let singleFunction ={};\n-          singleFunction[\"functionName\"] = funcName;\n-          singleFunction[\"signature\"] = funcName +\"(\"+params+\")\";\n-          singleFunction[\"category\"] = (String(fnLocation).includes(\"/data-hub/5/mapping-functions\")) ? \"builtin\" : \"custom\";\n-          output.push(singleFunction)\n+          if(functionsAdded.includes(funcName)){\n+            let addedFunction = output.find(func => {\n+              return func.functionName == funcName\n+            });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgxMjIyMg=="}, "originalCommit": {"oid": "d4b99e2e7d4dac4f2687e4c252dda825ed121998"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE0NTUyMQ==", "bodyText": "The spread operator doesn't work in ML 9. So, iterated through the values.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4769#discussion_r513145521", "createdAt": "2020-10-28T02:40:51Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/builtins/steps/mapping/entity-services/lib.sjs", "diffHunk": "@@ -476,21 +476,31 @@ function getMarkLogicMappingFunctions() {\n   return fn.head(datahub.hubUtils.queryLatest(function() {\n     let fnMetadata = fn.collection(\"http://marklogic.com/entity-services/function-metadata\")\n     let ns = {\"m\":\"http://marklogic.com/entity-services/mapping\"};\n+    const functionsAdded = [];\n     let output = [];\n \n     for (const metaData of fnMetadata){\n       if(metaData.xpath(\"/m:function-defs\",ns)) {\n         let j = 1;\n         let fnLocation = metaData.xpath(\"/m:function-defs/@location\",ns)\n         for (const mlFunction of metaData.xpath(\"/m:function-defs/m:function-def\",ns )){\n-          let funcName = metaData.xpath(\"/m:function-defs/m:function-def[\"+j+\"]/@name\", ns);\n+          let funcName = String(metaData.xpath(\"/m:function-defs/m:function-def[\"+j+\"]/@name\", ns));\n           let params = String(metaData.xpath(\"/m:function-defs/m:function-def[\"+j+\"]/m:parameters/m:parameter/@name\",ns)).replace(\"\\n\",\",\");\n           j++;\n-          let singleFunction ={};\n-          singleFunction[\"functionName\"] = funcName;\n-          singleFunction[\"signature\"] = funcName +\"(\"+params+\")\";\n-          singleFunction[\"category\"] = (String(fnLocation).includes(\"/data-hub/5/mapping-functions\")) ? \"builtin\" : \"custom\";\n-          output.push(singleFunction)\n+          if(functionsAdded.includes(funcName)){\n+            let addedFunction = output.find(func => {\n+              return func.functionName == funcName\n+            });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgxMjIyMg=="}, "originalCommit": {"oid": "d4b99e2e7d4dac4f2687e4c252dda825ed121998"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3182, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}