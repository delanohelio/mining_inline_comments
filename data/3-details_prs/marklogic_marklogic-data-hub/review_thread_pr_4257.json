{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0ODE1MzAz", "number": 4257, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMTo0MjowNlrOERAkXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMjo1ODozMFrOER0Bqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjcwNTU4OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/EntityManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMTo0MjowNlrOG1eq6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMTo0MjowNlrOG1eq6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODczMDIxNw==", "bodyText": "Let's not add a method to this interface. We get almost no value out of the interfaces, except that we imply that the interface will stay constant for someone that wants to use the DHF Java API directly - but we provide no support for that other than publishing the javadocs. Just add the method to EntityManagerImpl and call that directly in the migration class.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r458730217", "createdAt": "2020-07-22T11:42:06Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/EntityManager.java", "diffHunk": "@@ -75,6 +81,8 @@\n \n     List<HubEntity> getEntities();\n \n+    List<JsonNode> getEntitiesJsonNode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8886a9fdc108f3ce19b177dc27b107404c7807c3"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjcwNjkyOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMTo0MjoyOVrOG1ersg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMTo0MjoyOVrOG1ersg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODczMDQxOA==", "bodyText": "Just make this EntityManagerImpl so you can access the method in it.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r458730418", "createdAt": "2020-07-22T11:42:29Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.ext.helper.LoggingObject;\n+import com.marklogic.hub.EntityManager;\n+import com.marklogic.hub.HubConfig;\n+import com.marklogic.hub.HubProject;\n+import com.marklogic.hub.entity.DefinitionType;\n+import com.marklogic.hub.entity.HubEntity;\n+import com.marklogic.hub.impl.EntityManagerImpl;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class HubCentralMigrator extends LoggingObject {\n+    private HubConfig hubConfig;\n+    private EntityManager entityManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8886a9fdc108f3ce19b177dc27b107404c7807c3"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjcwOTkxOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMTo0MzoyOFrOG1etgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMTo0MzoyOFrOG1etgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODczMDg4MA==", "bodyText": "Just call this directly in migrateUserArtifacts, the extra method adds a level of indirection without any benefit.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r458730880", "createdAt": "2020-07-22T11:43:28Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.ext.helper.LoggingObject;\n+import com.marklogic.hub.EntityManager;\n+import com.marklogic.hub.HubConfig;\n+import com.marklogic.hub.HubProject;\n+import com.marklogic.hub.entity.DefinitionType;\n+import com.marklogic.hub.entity.HubEntity;\n+import com.marklogic.hub.impl.EntityManagerImpl;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class HubCentralMigrator extends LoggingObject {\n+    private HubConfig hubConfig;\n+    private EntityManager entityManager;\n+    private FlowMigrator flowMigrator;\n+    private ObjectMapper mapper = new ObjectMapper();\n+\n+    public HubCentralMigrator(HubConfig hubConfig) {\n+        this.hubConfig = hubConfig;\n+        this.entityManager = new EntityManagerImpl(hubConfig);\n+        this.flowMigrator = new FlowMigrator(this.hubConfig);\n+    }\n+\n+    /**\n+     * Migrate the entity model, flow and mapping files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    public void migrateUserArtifacts() {\n+        migrateFlows();\n+        migrateEntityModels();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateFlows() {\n+        flowMigrator.migrateFlows();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8886a9fdc108f3ce19b177dc27b107404c7807c3"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjcxNDAwOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMTo0NDo0MFrOG1evzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMTo0NDo0MFrOG1evzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODczMTQ3MQ==", "bodyText": "We can't assume that anything is valid about the entity models in a user's project. So verify that info exists first, then title exists. If neither exists, then log a warning that it couldn't be found and thus the entity model could not be migrated, and move on to the next entity.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r458731471", "createdAt": "2020-07-22T11:44:40Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.ext.helper.LoggingObject;\n+import com.marklogic.hub.EntityManager;\n+import com.marklogic.hub.HubConfig;\n+import com.marklogic.hub.HubProject;\n+import com.marklogic.hub.entity.DefinitionType;\n+import com.marklogic.hub.entity.HubEntity;\n+import com.marklogic.hub.impl.EntityManagerImpl;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class HubCentralMigrator extends LoggingObject {\n+    private HubConfig hubConfig;\n+    private EntityManager entityManager;\n+    private FlowMigrator flowMigrator;\n+    private ObjectMapper mapper = new ObjectMapper();\n+\n+    public HubCentralMigrator(HubConfig hubConfig) {\n+        this.hubConfig = hubConfig;\n+        this.entityManager = new EntityManagerImpl(hubConfig);\n+        this.flowMigrator = new FlowMigrator(this.hubConfig);\n+    }\n+\n+    /**\n+     * Migrate the entity model, flow and mapping files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    public void migrateUserArtifacts() {\n+        migrateFlows();\n+        migrateEntityModels();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateFlows() {\n+        flowMigrator.migrateFlows();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateEntityModels() {\n+        HubProject hubProject = hubConfig.getHubProject();\n+        final File entityModelsDir = hubProject.getHubEntitiesDir().toFile();\n+        if (!entityModelsDir.exists()) {\n+            logger.warn(\"No entities directory exists, so no entity models will be migrated\");\n+            return;\n+        }\n+\n+        logger.warn(\"Beginning migration of entity models in entities directory\");\n+\n+        ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n+        boolean atLeastOneEntityModelWasMigrated = false;\n+\n+        for (JsonNode entityModel : entityManager.getEntitiesJsonNode()) {\n+            ObjectNode entityModelNode = (ObjectNode) entityModel;\n+            if(entityModelRequiresMigration(entityModelNode)) {\n+                atLeastOneEntityModelWasMigrated = true;\n+                String title = entityModelNode.get(\"info\").get(\"title\").asText();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8886a9fdc108f3ce19b177dc27b107404c7807c3"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjcxNTUxOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMTo0NTowNlrOG1ewwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMTo0NTowNlrOG1ewwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODczMTcxMg==", "bodyText": "Same thing here - check to make sure things exist first, and if not, log a warning and move on.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r458731712", "createdAt": "2020-07-22T11:45:06Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.ext.helper.LoggingObject;\n+import com.marklogic.hub.EntityManager;\n+import com.marklogic.hub.HubConfig;\n+import com.marklogic.hub.HubProject;\n+import com.marklogic.hub.entity.DefinitionType;\n+import com.marklogic.hub.entity.HubEntity;\n+import com.marklogic.hub.impl.EntityManagerImpl;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class HubCentralMigrator extends LoggingObject {\n+    private HubConfig hubConfig;\n+    private EntityManager entityManager;\n+    private FlowMigrator flowMigrator;\n+    private ObjectMapper mapper = new ObjectMapper();\n+\n+    public HubCentralMigrator(HubConfig hubConfig) {\n+        this.hubConfig = hubConfig;\n+        this.entityManager = new EntityManagerImpl(hubConfig);\n+        this.flowMigrator = new FlowMigrator(this.hubConfig);\n+    }\n+\n+    /**\n+     * Migrate the entity model, flow and mapping files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    public void migrateUserArtifacts() {\n+        migrateFlows();\n+        migrateEntityModels();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateFlows() {\n+        flowMigrator.migrateFlows();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateEntityModels() {\n+        HubProject hubProject = hubConfig.getHubProject();\n+        final File entityModelsDir = hubProject.getHubEntitiesDir().toFile();\n+        if (!entityModelsDir.exists()) {\n+            logger.warn(\"No entities directory exists, so no entity models will be migrated\");\n+            return;\n+        }\n+\n+        logger.warn(\"Beginning migration of entity models in entities directory\");\n+\n+        ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n+        boolean atLeastOneEntityModelWasMigrated = false;\n+\n+        for (JsonNode entityModel : entityManager.getEntitiesJsonNode()) {\n+            ObjectNode entityModelNode = (ObjectNode) entityModel;\n+            if(entityModelRequiresMigration(entityModelNode)) {\n+                atLeastOneEntityModelWasMigrated = true;\n+                String title = entityModelNode.get(\"info\").get(\"title\").asText();\n+\n+                ObjectNode entityTypeNode = (ObjectNode) entityModelNode.get(\"definitions\").get(title);\n+                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8886a9fdc108f3ce19b177dc27b107404c7807c3"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjcyNjcxOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMTo0ODoyM1rOG1e3Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMTo0ODoyM1rOG1e3Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODczMzQxNQ==", "bodyText": "Need to support pathRangeIndex as well.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r458733415", "createdAt": "2020-07-22T11:48:23Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.ext.helper.LoggingObject;\n+import com.marklogic.hub.EntityManager;\n+import com.marklogic.hub.HubConfig;\n+import com.marklogic.hub.HubProject;\n+import com.marklogic.hub.entity.DefinitionType;\n+import com.marklogic.hub.entity.HubEntity;\n+import com.marklogic.hub.impl.EntityManagerImpl;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class HubCentralMigrator extends LoggingObject {\n+    private HubConfig hubConfig;\n+    private EntityManager entityManager;\n+    private FlowMigrator flowMigrator;\n+    private ObjectMapper mapper = new ObjectMapper();\n+\n+    public HubCentralMigrator(HubConfig hubConfig) {\n+        this.hubConfig = hubConfig;\n+        this.entityManager = new EntityManagerImpl(hubConfig);\n+        this.flowMigrator = new FlowMigrator(this.hubConfig);\n+    }\n+\n+    /**\n+     * Migrate the entity model, flow and mapping files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    public void migrateUserArtifacts() {\n+        migrateFlows();\n+        migrateEntityModels();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateFlows() {\n+        flowMigrator.migrateFlows();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateEntityModels() {\n+        HubProject hubProject = hubConfig.getHubProject();\n+        final File entityModelsDir = hubProject.getHubEntitiesDir().toFile();\n+        if (!entityModelsDir.exists()) {\n+            logger.warn(\"No entities directory exists, so no entity models will be migrated\");\n+            return;\n+        }\n+\n+        logger.warn(\"Beginning migration of entity models in entities directory\");\n+\n+        ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n+        boolean atLeastOneEntityModelWasMigrated = false;\n+\n+        for (JsonNode entityModel : entityManager.getEntitiesJsonNode()) {\n+            ObjectNode entityModelNode = (ObjectNode) entityModel;\n+            if(entityModelRequiresMigration(entityModelNode)) {\n+                atLeastOneEntityModelWasMigrated = true;\n+                String title = entityModelNode.get(\"info\").get(\"title\").asText();\n+\n+                ObjectNode entityTypeNode = (ObjectNode) entityModelNode.get(\"definitions\").get(title);\n+                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");\n+\n+                List<String> elementRangeIndex = mapper.convertValue(entityTypeNode.get(\"elementRangeIndex\"), ArrayList.class);\n+                List<String> rangeIndex = mapper.convertValue(entityTypeNode.get(\"rangeIndex\"), ArrayList.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8886a9fdc108f3ce19b177dc27b107404c7807c3"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjczMjMwOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMTo1MDoxMlrOG1e64Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMTo1MDoxMlrOG1e64Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODczNDMwNQ==", "bodyText": "I believe you need a \"has\" check on \"$ref\" first - I just did a quick check, and an NPE is thrown on asText() if \"$ref\" doesn't exist.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r458734305", "createdAt": "2020-07-22T11:50:12Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.ext.helper.LoggingObject;\n+import com.marklogic.hub.EntityManager;\n+import com.marklogic.hub.HubConfig;\n+import com.marklogic.hub.HubProject;\n+import com.marklogic.hub.entity.DefinitionType;\n+import com.marklogic.hub.entity.HubEntity;\n+import com.marklogic.hub.impl.EntityManagerImpl;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class HubCentralMigrator extends LoggingObject {\n+    private HubConfig hubConfig;\n+    private EntityManager entityManager;\n+    private FlowMigrator flowMigrator;\n+    private ObjectMapper mapper = new ObjectMapper();\n+\n+    public HubCentralMigrator(HubConfig hubConfig) {\n+        this.hubConfig = hubConfig;\n+        this.entityManager = new EntityManagerImpl(hubConfig);\n+        this.flowMigrator = new FlowMigrator(this.hubConfig);\n+    }\n+\n+    /**\n+     * Migrate the entity model, flow and mapping files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    public void migrateUserArtifacts() {\n+        migrateFlows();\n+        migrateEntityModels();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateFlows() {\n+        flowMigrator.migrateFlows();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateEntityModels() {\n+        HubProject hubProject = hubConfig.getHubProject();\n+        final File entityModelsDir = hubProject.getHubEntitiesDir().toFile();\n+        if (!entityModelsDir.exists()) {\n+            logger.warn(\"No entities directory exists, so no entity models will be migrated\");\n+            return;\n+        }\n+\n+        logger.warn(\"Beginning migration of entity models in entities directory\");\n+\n+        ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n+        boolean atLeastOneEntityModelWasMigrated = false;\n+\n+        for (JsonNode entityModel : entityManager.getEntitiesJsonNode()) {\n+            ObjectNode entityModelNode = (ObjectNode) entityModel;\n+            if(entityModelRequiresMigration(entityModelNode)) {\n+                atLeastOneEntityModelWasMigrated = true;\n+                String title = entityModelNode.get(\"info\").get(\"title\").asText();\n+\n+                ObjectNode entityTypeNode = (ObjectNode) entityModelNode.get(\"definitions\").get(title);\n+                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");\n+\n+                List<String> elementRangeIndex = mapper.convertValue(entityTypeNode.get(\"elementRangeIndex\"), ArrayList.class);\n+                List<String> rangeIndex = mapper.convertValue(entityTypeNode.get(\"rangeIndex\"), ArrayList.class);\n+                elementRangeIndex.removeAll(rangeIndex);\n+                rangeIndex.addAll(elementRangeIndex);\n+\n+                entityTypePropertiesNode.fieldNames().forEachRemaining(propertyName -> {\n+                    if(rangeIndex.contains(propertyName)) {\n+                        ObjectNode entityPropertyNode = (ObjectNode) entityTypePropertiesNode.get(propertyName);\n+                        if(!isStructuredTypeProperty(entityPropertyNode)) {\n+                            entityPropertyNode.put(\"facetable\", true);\n+                        }\n+                    }\n+                });\n+                entityTypeNode.remove(Arrays.asList(\"elementRangeIndex\", \"rangeIndex\"));\n+\n+                File entityModelFile = Paths.get(hubProject.getHubEntitiesDir().toString(), title + EntityManager.ENTITY_FILE_EXTENSION).toFile();\n+                try {\n+                    writer.writeValue(entityModelFile, entityModelNode);\n+                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelFile));\n+                } catch (IOException e) {\n+                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelFile, e.getMessage()), e);\n+                }\n+            }\n+        }\n+\n+        if (atLeastOneEntityModelWasMigrated) {\n+            logger.warn(\"Finished migrating entity models.\");\n+            logger.warn(\"Please examine the migrated entities and check the entity type properties defined as element range indexes and path range indexes are having facetable set to true\");\n+        } else {\n+            logger.warn(\"No entity models required migration, so no project files were modified\");\n+        }\n+    }\n+\n+    protected boolean entityModelRequiresMigration(ObjectNode entityModelNode) {\n+        String firstLevelEntityTypeName= entityModelNode.get(\"info\").get(\"title\").asText();\n+        entityModelNode= (ObjectNode) entityModelNode.get(\"definitions\").get(firstLevelEntityTypeName);\n+        return entityModelNode.get(\"rangeIndex\") != null || entityModelNode.get(\"elementRangeIndex\") != null;\n+    }\n+\n+    private boolean isStructuredTypeProperty(ObjectNode entityPropertyNode) {\n+        // check for simple structured type property or simple relationship property\n+        if (entityPropertyNode.get(\"datatype\") == null && entityPropertyNode.get(\"$ref\").asText() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8886a9fdc108f3ce19b177dc27b107404c7807c3"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjczNDQ5OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMTo1MDo1MFrOG1e8KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMTo1MDo1MFrOG1e8KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODczNDYzMg==", "bodyText": "Same thing here - be very pessimistic about things not existing. Also check for pathRangeIndex.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r458734632", "createdAt": "2020-07-22T11:50:50Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.ext.helper.LoggingObject;\n+import com.marklogic.hub.EntityManager;\n+import com.marklogic.hub.HubConfig;\n+import com.marklogic.hub.HubProject;\n+import com.marklogic.hub.entity.DefinitionType;\n+import com.marklogic.hub.entity.HubEntity;\n+import com.marklogic.hub.impl.EntityManagerImpl;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class HubCentralMigrator extends LoggingObject {\n+    private HubConfig hubConfig;\n+    private EntityManager entityManager;\n+    private FlowMigrator flowMigrator;\n+    private ObjectMapper mapper = new ObjectMapper();\n+\n+    public HubCentralMigrator(HubConfig hubConfig) {\n+        this.hubConfig = hubConfig;\n+        this.entityManager = new EntityManagerImpl(hubConfig);\n+        this.flowMigrator = new FlowMigrator(this.hubConfig);\n+    }\n+\n+    /**\n+     * Migrate the entity model, flow and mapping files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    public void migrateUserArtifacts() {\n+        migrateFlows();\n+        migrateEntityModels();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateFlows() {\n+        flowMigrator.migrateFlows();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateEntityModels() {\n+        HubProject hubProject = hubConfig.getHubProject();\n+        final File entityModelsDir = hubProject.getHubEntitiesDir().toFile();\n+        if (!entityModelsDir.exists()) {\n+            logger.warn(\"No entities directory exists, so no entity models will be migrated\");\n+            return;\n+        }\n+\n+        logger.warn(\"Beginning migration of entity models in entities directory\");\n+\n+        ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n+        boolean atLeastOneEntityModelWasMigrated = false;\n+\n+        for (JsonNode entityModel : entityManager.getEntitiesJsonNode()) {\n+            ObjectNode entityModelNode = (ObjectNode) entityModel;\n+            if(entityModelRequiresMigration(entityModelNode)) {\n+                atLeastOneEntityModelWasMigrated = true;\n+                String title = entityModelNode.get(\"info\").get(\"title\").asText();\n+\n+                ObjectNode entityTypeNode = (ObjectNode) entityModelNode.get(\"definitions\").get(title);\n+                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");\n+\n+                List<String> elementRangeIndex = mapper.convertValue(entityTypeNode.get(\"elementRangeIndex\"), ArrayList.class);\n+                List<String> rangeIndex = mapper.convertValue(entityTypeNode.get(\"rangeIndex\"), ArrayList.class);\n+                elementRangeIndex.removeAll(rangeIndex);\n+                rangeIndex.addAll(elementRangeIndex);\n+\n+                entityTypePropertiesNode.fieldNames().forEachRemaining(propertyName -> {\n+                    if(rangeIndex.contains(propertyName)) {\n+                        ObjectNode entityPropertyNode = (ObjectNode) entityTypePropertiesNode.get(propertyName);\n+                        if(!isStructuredTypeProperty(entityPropertyNode)) {\n+                            entityPropertyNode.put(\"facetable\", true);\n+                        }\n+                    }\n+                });\n+                entityTypeNode.remove(Arrays.asList(\"elementRangeIndex\", \"rangeIndex\"));\n+\n+                File entityModelFile = Paths.get(hubProject.getHubEntitiesDir().toString(), title + EntityManager.ENTITY_FILE_EXTENSION).toFile();\n+                try {\n+                    writer.writeValue(entityModelFile, entityModelNode);\n+                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelFile));\n+                } catch (IOException e) {\n+                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelFile, e.getMessage()), e);\n+                }\n+            }\n+        }\n+\n+        if (atLeastOneEntityModelWasMigrated) {\n+            logger.warn(\"Finished migrating entity models.\");\n+            logger.warn(\"Please examine the migrated entities and check the entity type properties defined as element range indexes and path range indexes are having facetable set to true\");\n+        } else {\n+            logger.warn(\"No entity models required migration, so no project files were modified\");\n+        }\n+    }\n+\n+    protected boolean entityModelRequiresMigration(ObjectNode entityModelNode) {\n+        String firstLevelEntityTypeName= entityModelNode.get(\"info\").get(\"title\").asText();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8886a9fdc108f3ce19b177dc27b107404c7807c3"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjczOTkzOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMTo1MjozOFrOG1e_sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMTo1MjozOFrOG1e_sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODczNTUzNg==", "bodyText": "For the warning, let's do:\nPlease examine your entity model files to verify that properties that were listed in the rangeIndex, pathRangeIndex, or elementRangeIndex arrays now have \"facetable\":true in their property definition.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r458735536", "createdAt": "2020-07-22T11:52:38Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.ext.helper.LoggingObject;\n+import com.marklogic.hub.EntityManager;\n+import com.marklogic.hub.HubConfig;\n+import com.marklogic.hub.HubProject;\n+import com.marklogic.hub.entity.DefinitionType;\n+import com.marklogic.hub.entity.HubEntity;\n+import com.marklogic.hub.impl.EntityManagerImpl;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class HubCentralMigrator extends LoggingObject {\n+    private HubConfig hubConfig;\n+    private EntityManager entityManager;\n+    private FlowMigrator flowMigrator;\n+    private ObjectMapper mapper = new ObjectMapper();\n+\n+    public HubCentralMigrator(HubConfig hubConfig) {\n+        this.hubConfig = hubConfig;\n+        this.entityManager = new EntityManagerImpl(hubConfig);\n+        this.flowMigrator = new FlowMigrator(this.hubConfig);\n+    }\n+\n+    /**\n+     * Migrate the entity model, flow and mapping files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    public void migrateUserArtifacts() {\n+        migrateFlows();\n+        migrateEntityModels();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateFlows() {\n+        flowMigrator.migrateFlows();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateEntityModels() {\n+        HubProject hubProject = hubConfig.getHubProject();\n+        final File entityModelsDir = hubProject.getHubEntitiesDir().toFile();\n+        if (!entityModelsDir.exists()) {\n+            logger.warn(\"No entities directory exists, so no entity models will be migrated\");\n+            return;\n+        }\n+\n+        logger.warn(\"Beginning migration of entity models in entities directory\");\n+\n+        ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n+        boolean atLeastOneEntityModelWasMigrated = false;\n+\n+        for (JsonNode entityModel : entityManager.getEntitiesJsonNode()) {\n+            ObjectNode entityModelNode = (ObjectNode) entityModel;\n+            if(entityModelRequiresMigration(entityModelNode)) {\n+                atLeastOneEntityModelWasMigrated = true;\n+                String title = entityModelNode.get(\"info\").get(\"title\").asText();\n+\n+                ObjectNode entityTypeNode = (ObjectNode) entityModelNode.get(\"definitions\").get(title);\n+                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");\n+\n+                List<String> elementRangeIndex = mapper.convertValue(entityTypeNode.get(\"elementRangeIndex\"), ArrayList.class);\n+                List<String> rangeIndex = mapper.convertValue(entityTypeNode.get(\"rangeIndex\"), ArrayList.class);\n+                elementRangeIndex.removeAll(rangeIndex);\n+                rangeIndex.addAll(elementRangeIndex);\n+\n+                entityTypePropertiesNode.fieldNames().forEachRemaining(propertyName -> {\n+                    if(rangeIndex.contains(propertyName)) {\n+                        ObjectNode entityPropertyNode = (ObjectNode) entityTypePropertiesNode.get(propertyName);\n+                        if(!isStructuredTypeProperty(entityPropertyNode)) {\n+                            entityPropertyNode.put(\"facetable\", true);\n+                        }\n+                    }\n+                });\n+                entityTypeNode.remove(Arrays.asList(\"elementRangeIndex\", \"rangeIndex\"));\n+\n+                File entityModelFile = Paths.get(hubProject.getHubEntitiesDir().toString(), title + EntityManager.ENTITY_FILE_EXTENSION).toFile();\n+                try {\n+                    writer.writeValue(entityModelFile, entityModelNode);\n+                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelFile));\n+                } catch (IOException e) {\n+                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelFile, e.getMessage()), e);\n+                }\n+            }\n+        }\n+\n+        if (atLeastOneEntityModelWasMigrated) {\n+            logger.warn(\"Finished migrating entity models.\");\n+            logger.warn(\"Please examine the migrated entities and check the entity type properties defined as element range indexes and path range indexes are having facetable set to true\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8886a9fdc108f3ce19b177dc27b107404c7807c3"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Mjc0MTY1OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/impl/EntityManagerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMTo1MzoxNVrOG1fA1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMTo1MzoxNVrOG1fA1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODczNTgyOA==", "bodyText": "You can just call getAllEntities, right? No need for a new method?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r458735828", "createdAt": "2020-07-22T11:53:15Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/impl/EntityManagerImpl.java", "diffHunk": "@@ -491,6 +490,10 @@ protected void addSubProperties(HubEntity entity, List<HubEntity> entityDefiniti\n         return getEntities(Boolean.FALSE);\n     }\n \n+    public List<JsonNode> getEntitiesJsonNode() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8886a9fdc108f3ce19b177dc27b107404c7807c3"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Mjc0NDg5OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/resources/entity-migration-test/entities/Customer.entity.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMTo1NDoxMVrOG1fCww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMTo1NDoxMVrOG1fCww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODczNjMyMw==", "bodyText": "Need to add pathRangeIndex. I recommend adding some \"bad\" entity files to the project too - ones that are missing info.title, or where the value of info/title is not found in \"definitions\".", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r458736323", "createdAt": "2020-07-22T11:54:11Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/resources/entity-migration-test/entities/Customer.entity.json", "diffHunk": "@@ -0,0 +1,97 @@\n+{\n+  \"info\": {\n+    \"title\": \"Customer\",\n+    \"version\": \"0.0.1\",\n+    \"baseUri\": \"http://example.org/\"\n+  },\n+  \"definitions\": {\n+    \"Customer\": {\n+      \"elementRangeIndex\": [ \"nicknames\", \"status\" ],\n+      \"rangeIndex\": [ \"name\", \"birthDate\" ],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8886a9fdc108f3ce19b177dc27b107404c7807c3"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Mjc0NjQ3OnYy", "diffSide": "RIGHT", "path": "ml-data-hub-plugin/src/main/groovy/com/marklogic/gradle/DataHubPlugin.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMTo1NDo0NFrOG1fDyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMTo1NDo0NFrOG1fDyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODczNjU4NA==", "bodyText": "For the description, change to \"Migrate flows, mappings, and entity models in the local project...\"", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r458736584", "createdAt": "2020-07-22T11:54:44Z", "author": {"login": "rjrudin"}, "path": "ml-data-hub-plugin/src/main/groovy/com/marklogic/gradle/DataHubPlugin.groovy", "diffHunk": "@@ -115,14 +115,14 @@ class DataHubPlugin implements Plugin<Project> {\n                 \"This will first download the artifacts (entity models, flows, step definitions, and steps) , then delete all user files in the project directory\"+\n                 \" and the contents of the downloaded zip will then be extracted into the project directory.\")\n \n-        String flowMigrationGroup = \"Data Hub Flow Migration\"\n-        project.task(\"hubDeleteInstalledLegacyMappings\", group: flowMigrationGroup, type: DeleteInstalledLegacyMappingsTask,\n+        String hubMigrationGroup = \"Data Hub Migration\"\n+        project.task(\"hubDeleteInstalledLegacyMappings\", group: hubMigrationGroup, type: DeleteInstalledLegacyMappingsTask,\n             description: \"Delete installed legacy mappings, which are mappings that have not been converted into the format required by Hub Central\"\n         ).mustRunAfter(\"hubDeployUserArtifacts\")\n-        project.task(\"hubMigrateProjectFlows\", group: flowMigrationGroup, type: MigrateProjectFlowsTask,\n+        project.task(\"hubMigrateForHubCentral\", group: hubMigrationGroup, type: MigrateProjectForHubCentralTask,\n             description: \"Migrate flows and mappings in the local project that were created before version 5.3.0 into the new format required for usage within Hub Central\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8886a9fdc108f3ce19b177dc27b107404c7807c3"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzEwMTE5OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMjozMzoyOFrOG2IY8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMjozMzoyOFrOG2IY8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQxMzc0Ng==", "bodyText": "This is good - and logging the cause for each issue is good too.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r459413746", "createdAt": "2020-07-23T12:33:28Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.ext.helper.LoggingObject;\n+import com.marklogic.hub.HubConfig;\n+import com.marklogic.hub.HubProject;\n+import com.marklogic.hub.impl.EntityManagerImpl;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+public class HubCentralMigrator extends LoggingObject {\n+    private static final List<String> removableIndexArrays = Arrays.asList(\"elementRangeIndex\", \"rangeIndex\", \"pathRangeIndex\");\n+    private HubConfig hubConfig;\n+    private EntityManagerImpl entityManager;\n+    private FlowMigrator flowMigrator;\n+    private ObjectMapper mapper = new ObjectMapper();\n+\n+    public HubCentralMigrator(HubConfig hubConfig) {\n+        this.hubConfig = hubConfig;\n+        this.entityManager = new EntityManagerImpl(hubConfig);\n+        this.flowMigrator = new FlowMigrator(this.hubConfig);\n+    }\n+\n+    /**\n+     * Migrate the entity model, flow and mapping files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    public void migrateUserArtifacts() {\n+        flowMigrator.migrateFlows();\n+        migrateEntityModels();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateEntityModels() {\n+        HubProject hubProject = hubConfig.getHubProject();\n+        final File entityModelsDir = hubProject.getHubEntitiesDir().toFile();\n+        if (!entityModelsDir.exists()) {\n+            logger.warn(\"No entities directory exists, so no entity models will be migrated\");\n+            return;\n+        }\n+\n+        logger.warn(\"Beginning migration of entity models in entities directory\");\n+\n+        ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n+        boolean atLeastOneEntityModelWasMigrated = false;\n+\n+        for (JsonNode entityModel : entityManager.getAllEntities()) {\n+            ObjectNode entityModelNode = (ObjectNode) entityModel;\n+\n+            if (entityModelRequiresMigration(entityModelNode)) {\n+                String title = entityModelNode.get(\"info\").get(\"title\").asText();\n+                ObjectNode entityTypeNode = (ObjectNode) entityModelNode.get(\"definitions\").get(title);\n+\n+                List<String> elementRangeIndex = mapper.convertValue(entityTypeNode.get(\"elementRangeIndex\"), ArrayList.class);\n+                elementRangeIndex = elementRangeIndex == null ? new ArrayList<>() : elementRangeIndex;\n+                List<String> rangeIndex = mapper.convertValue(entityTypeNode.get(\"rangeIndex\"), ArrayList.class);\n+                rangeIndex = rangeIndex == null ? new ArrayList<>() : rangeIndex;\n+                List<String> pathRangeIndex = mapper.convertValue(entityTypeNode.get(\"pathRangeIndex\"), ArrayList.class);\n+                pathRangeIndex = pathRangeIndex == null ? new ArrayList<>() : pathRangeIndex;\n+                Set<String> mergedIndexArrays = new HashSet<>();\n+                Stream.of(elementRangeIndex, rangeIndex, pathRangeIndex).forEach(mergedIndexArrays::addAll);\n+\n+                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");\n+                if (entityTypePropertiesNode == null) {\n+                    logger.warn(\"entityTypePropertiesNode is null\");\n+                    entityTypeNode.remove(removableIndexArrays);\n+                    atLeastOneEntityModelWasMigrated = true;\n+                    continue;\n+                }\n+\n+                entityTypePropertiesNode.fieldNames().forEachRemaining(propertyName -> {\n+                    if (mergedIndexArrays.contains(propertyName)) {\n+                        ObjectNode entityPropertyNode = (ObjectNode) entityTypePropertiesNode.get(propertyName);\n+                        if (!isStructuredTypeProperty(entityPropertyNode)) {\n+                            entityPropertyNode.put(\"facetable\", true);\n+                        }\n+                    }\n+                });\n+                entityTypeNode.remove(removableIndexArrays);\n+\n+                File entityModelFile = Paths.get(hubProject.getHubEntitiesDir().toString(), title + entityManager.ENTITY_FILE_EXTENSION).toFile();\n+                try {\n+                    writer.writeValue(entityModelFile, entityModelNode);\n+                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelFile));\n+                    atLeastOneEntityModelWasMigrated = true;\n+                } catch (IOException e) {\n+                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelFile, e.getMessage()), e);\n+                }\n+            }\n+        }\n+\n+        if (atLeastOneEntityModelWasMigrated) {\n+            logger.warn(\"Finished migrating entity models.\");\n+            logger.warn(\"Please examine your entity model files to verify that properties that were listed in the rangeIndex, pathRangeIndex, or elementRangeIndex arrays \" +\n+                    \"now have \\\"facetable\\\":true in their property definition.\\n\");\n+        } else {\n+            logger.warn(\"No entity models required migration, so no project files were modified\");\n+        }\n+    }\n+\n+    protected boolean entityModelRequiresMigration(ObjectNode entityModelNode) {\n+        if (!entityModelValidForMigration(entityModelNode)) {\n+            return false;\n+        }\n+        String firstLevelEntityTypeName = entityModelNode.get(\"info\").get(\"title\").asText();\n+        entityModelNode = (ObjectNode) entityModelNode.get(\"definitions\").get(firstLevelEntityTypeName);\n+        return entityModelNode.get(\"rangeIndex\") != null || entityModelNode.get(\"elementRangeIndex\") != null ||\n+                entityModelNode.get(\"pathRangeIndex\") != null;\n+    }\n+\n+    protected boolean entityModelValidForMigration(ObjectNode entityModelNode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06140aad6463887bcb8bf48d5f1edd7cf0aa9c59"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzEwNDMxOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMjozNDoyNFrOG2Ia1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODoyMDoxNVrOG2WSrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQxNDIyOQ==", "bodyText": "Going to be a little picky here - I think it's worth verifying that for each property, it both exists and the array has size of 1 or more. That's because I think it's common for entity definitions to be stubbed out with empty arrays. No need to process those.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r459414229", "createdAt": "2020-07-23T12:34:24Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.ext.helper.LoggingObject;\n+import com.marklogic.hub.HubConfig;\n+import com.marklogic.hub.HubProject;\n+import com.marklogic.hub.impl.EntityManagerImpl;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+public class HubCentralMigrator extends LoggingObject {\n+    private static final List<String> removableIndexArrays = Arrays.asList(\"elementRangeIndex\", \"rangeIndex\", \"pathRangeIndex\");\n+    private HubConfig hubConfig;\n+    private EntityManagerImpl entityManager;\n+    private FlowMigrator flowMigrator;\n+    private ObjectMapper mapper = new ObjectMapper();\n+\n+    public HubCentralMigrator(HubConfig hubConfig) {\n+        this.hubConfig = hubConfig;\n+        this.entityManager = new EntityManagerImpl(hubConfig);\n+        this.flowMigrator = new FlowMigrator(this.hubConfig);\n+    }\n+\n+    /**\n+     * Migrate the entity model, flow and mapping files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    public void migrateUserArtifacts() {\n+        flowMigrator.migrateFlows();\n+        migrateEntityModels();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateEntityModels() {\n+        HubProject hubProject = hubConfig.getHubProject();\n+        final File entityModelsDir = hubProject.getHubEntitiesDir().toFile();\n+        if (!entityModelsDir.exists()) {\n+            logger.warn(\"No entities directory exists, so no entity models will be migrated\");\n+            return;\n+        }\n+\n+        logger.warn(\"Beginning migration of entity models in entities directory\");\n+\n+        ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n+        boolean atLeastOneEntityModelWasMigrated = false;\n+\n+        for (JsonNode entityModel : entityManager.getAllEntities()) {\n+            ObjectNode entityModelNode = (ObjectNode) entityModel;\n+\n+            if (entityModelRequiresMigration(entityModelNode)) {\n+                String title = entityModelNode.get(\"info\").get(\"title\").asText();\n+                ObjectNode entityTypeNode = (ObjectNode) entityModelNode.get(\"definitions\").get(title);\n+\n+                List<String> elementRangeIndex = mapper.convertValue(entityTypeNode.get(\"elementRangeIndex\"), ArrayList.class);\n+                elementRangeIndex = elementRangeIndex == null ? new ArrayList<>() : elementRangeIndex;\n+                List<String> rangeIndex = mapper.convertValue(entityTypeNode.get(\"rangeIndex\"), ArrayList.class);\n+                rangeIndex = rangeIndex == null ? new ArrayList<>() : rangeIndex;\n+                List<String> pathRangeIndex = mapper.convertValue(entityTypeNode.get(\"pathRangeIndex\"), ArrayList.class);\n+                pathRangeIndex = pathRangeIndex == null ? new ArrayList<>() : pathRangeIndex;\n+                Set<String> mergedIndexArrays = new HashSet<>();\n+                Stream.of(elementRangeIndex, rangeIndex, pathRangeIndex).forEach(mergedIndexArrays::addAll);\n+\n+                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");\n+                if (entityTypePropertiesNode == null) {\n+                    logger.warn(\"entityTypePropertiesNode is null\");\n+                    entityTypeNode.remove(removableIndexArrays);\n+                    atLeastOneEntityModelWasMigrated = true;\n+                    continue;\n+                }\n+\n+                entityTypePropertiesNode.fieldNames().forEachRemaining(propertyName -> {\n+                    if (mergedIndexArrays.contains(propertyName)) {\n+                        ObjectNode entityPropertyNode = (ObjectNode) entityTypePropertiesNode.get(propertyName);\n+                        if (!isStructuredTypeProperty(entityPropertyNode)) {\n+                            entityPropertyNode.put(\"facetable\", true);\n+                        }\n+                    }\n+                });\n+                entityTypeNode.remove(removableIndexArrays);\n+\n+                File entityModelFile = Paths.get(hubProject.getHubEntitiesDir().toString(), title + entityManager.ENTITY_FILE_EXTENSION).toFile();\n+                try {\n+                    writer.writeValue(entityModelFile, entityModelNode);\n+                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelFile));\n+                    atLeastOneEntityModelWasMigrated = true;\n+                } catch (IOException e) {\n+                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelFile, e.getMessage()), e);\n+                }\n+            }\n+        }\n+\n+        if (atLeastOneEntityModelWasMigrated) {\n+            logger.warn(\"Finished migrating entity models.\");\n+            logger.warn(\"Please examine your entity model files to verify that properties that were listed in the rangeIndex, pathRangeIndex, or elementRangeIndex arrays \" +\n+                    \"now have \\\"facetable\\\":true in their property definition.\\n\");\n+        } else {\n+            logger.warn(\"No entity models required migration, so no project files were modified\");\n+        }\n+    }\n+\n+    protected boolean entityModelRequiresMigration(ObjectNode entityModelNode) {\n+        if (!entityModelValidForMigration(entityModelNode)) {\n+            return false;\n+        }\n+        String firstLevelEntityTypeName = entityModelNode.get(\"info\").get(\"title\").asText();\n+        entityModelNode = (ObjectNode) entityModelNode.get(\"definitions\").get(firstLevelEntityTypeName);\n+        return entityModelNode.get(\"rangeIndex\") != null || entityModelNode.get(\"elementRangeIndex\") != null ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06140aad6463887bcb8bf48d5f1edd7cf0aa9c59"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0MTUxOA==", "bodyText": "All the entity properties are iterated over to see if an entityPropertyName exist in one of the index arrays. So if something which is in an index array and not defined in entityTypeProperties will not cause an issue and the index arrays are deleted after adding facetable properties.\nIf the array is empty (size is 0), we delete those arrays on migration. (Since we dont want those references existing after migration)", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r459641518", "createdAt": "2020-07-23T18:20:15Z", "author": {"login": "rahulvudutala"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.ext.helper.LoggingObject;\n+import com.marklogic.hub.HubConfig;\n+import com.marklogic.hub.HubProject;\n+import com.marklogic.hub.impl.EntityManagerImpl;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+public class HubCentralMigrator extends LoggingObject {\n+    private static final List<String> removableIndexArrays = Arrays.asList(\"elementRangeIndex\", \"rangeIndex\", \"pathRangeIndex\");\n+    private HubConfig hubConfig;\n+    private EntityManagerImpl entityManager;\n+    private FlowMigrator flowMigrator;\n+    private ObjectMapper mapper = new ObjectMapper();\n+\n+    public HubCentralMigrator(HubConfig hubConfig) {\n+        this.hubConfig = hubConfig;\n+        this.entityManager = new EntityManagerImpl(hubConfig);\n+        this.flowMigrator = new FlowMigrator(this.hubConfig);\n+    }\n+\n+    /**\n+     * Migrate the entity model, flow and mapping files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    public void migrateUserArtifacts() {\n+        flowMigrator.migrateFlows();\n+        migrateEntityModels();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateEntityModels() {\n+        HubProject hubProject = hubConfig.getHubProject();\n+        final File entityModelsDir = hubProject.getHubEntitiesDir().toFile();\n+        if (!entityModelsDir.exists()) {\n+            logger.warn(\"No entities directory exists, so no entity models will be migrated\");\n+            return;\n+        }\n+\n+        logger.warn(\"Beginning migration of entity models in entities directory\");\n+\n+        ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n+        boolean atLeastOneEntityModelWasMigrated = false;\n+\n+        for (JsonNode entityModel : entityManager.getAllEntities()) {\n+            ObjectNode entityModelNode = (ObjectNode) entityModel;\n+\n+            if (entityModelRequiresMigration(entityModelNode)) {\n+                String title = entityModelNode.get(\"info\").get(\"title\").asText();\n+                ObjectNode entityTypeNode = (ObjectNode) entityModelNode.get(\"definitions\").get(title);\n+\n+                List<String> elementRangeIndex = mapper.convertValue(entityTypeNode.get(\"elementRangeIndex\"), ArrayList.class);\n+                elementRangeIndex = elementRangeIndex == null ? new ArrayList<>() : elementRangeIndex;\n+                List<String> rangeIndex = mapper.convertValue(entityTypeNode.get(\"rangeIndex\"), ArrayList.class);\n+                rangeIndex = rangeIndex == null ? new ArrayList<>() : rangeIndex;\n+                List<String> pathRangeIndex = mapper.convertValue(entityTypeNode.get(\"pathRangeIndex\"), ArrayList.class);\n+                pathRangeIndex = pathRangeIndex == null ? new ArrayList<>() : pathRangeIndex;\n+                Set<String> mergedIndexArrays = new HashSet<>();\n+                Stream.of(elementRangeIndex, rangeIndex, pathRangeIndex).forEach(mergedIndexArrays::addAll);\n+\n+                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");\n+                if (entityTypePropertiesNode == null) {\n+                    logger.warn(\"entityTypePropertiesNode is null\");\n+                    entityTypeNode.remove(removableIndexArrays);\n+                    atLeastOneEntityModelWasMigrated = true;\n+                    continue;\n+                }\n+\n+                entityTypePropertiesNode.fieldNames().forEachRemaining(propertyName -> {\n+                    if (mergedIndexArrays.contains(propertyName)) {\n+                        ObjectNode entityPropertyNode = (ObjectNode) entityTypePropertiesNode.get(propertyName);\n+                        if (!isStructuredTypeProperty(entityPropertyNode)) {\n+                            entityPropertyNode.put(\"facetable\", true);\n+                        }\n+                    }\n+                });\n+                entityTypeNode.remove(removableIndexArrays);\n+\n+                File entityModelFile = Paths.get(hubProject.getHubEntitiesDir().toString(), title + entityManager.ENTITY_FILE_EXTENSION).toFile();\n+                try {\n+                    writer.writeValue(entityModelFile, entityModelNode);\n+                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelFile));\n+                    atLeastOneEntityModelWasMigrated = true;\n+                } catch (IOException e) {\n+                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelFile, e.getMessage()), e);\n+                }\n+            }\n+        }\n+\n+        if (atLeastOneEntityModelWasMigrated) {\n+            logger.warn(\"Finished migrating entity models.\");\n+            logger.warn(\"Please examine your entity model files to verify that properties that were listed in the rangeIndex, pathRangeIndex, or elementRangeIndex arrays \" +\n+                    \"now have \\\"facetable\\\":true in their property definition.\\n\");\n+        } else {\n+            logger.warn(\"No entity models required migration, so no project files were modified\");\n+        }\n+    }\n+\n+    protected boolean entityModelRequiresMigration(ObjectNode entityModelNode) {\n+        if (!entityModelValidForMigration(entityModelNode)) {\n+            return false;\n+        }\n+        String firstLevelEntityTypeName = entityModelNode.get(\"info\").get(\"title\").asText();\n+        entityModelNode = (ObjectNode) entityModelNode.get(\"definitions\").get(firstLevelEntityTypeName);\n+        return entityModelNode.get(\"rangeIndex\") != null || entityModelNode.get(\"elementRangeIndex\") != null ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQxNDIyOQ=="}, "originalCommit": {"oid": "06140aad6463887bcb8bf48d5f1edd7cf0aa9c59"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzExOTI3OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMjozODoyOFrOG2IkEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMjozODoyOFrOG2IkEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQxNjU5Mg==", "bodyText": "We unfortunately need null checks on both \"datatype\" and \"items\" here - one may exist, but the other doesn't. We just can't trust that anything about a user's entity definition is valid (I've seen a few support tickets recently where entity models can't be loaded, and the cause is completely invalid ES syntax).", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r459416592", "createdAt": "2020-07-23T12:38:28Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.ext.helper.LoggingObject;\n+import com.marklogic.hub.HubConfig;\n+import com.marklogic.hub.HubProject;\n+import com.marklogic.hub.impl.EntityManagerImpl;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+public class HubCentralMigrator extends LoggingObject {\n+    private static final List<String> removableIndexArrays = Arrays.asList(\"elementRangeIndex\", \"rangeIndex\", \"pathRangeIndex\");\n+    private HubConfig hubConfig;\n+    private EntityManagerImpl entityManager;\n+    private FlowMigrator flowMigrator;\n+    private ObjectMapper mapper = new ObjectMapper();\n+\n+    public HubCentralMigrator(HubConfig hubConfig) {\n+        this.hubConfig = hubConfig;\n+        this.entityManager = new EntityManagerImpl(hubConfig);\n+        this.flowMigrator = new FlowMigrator(this.hubConfig);\n+    }\n+\n+    /**\n+     * Migrate the entity model, flow and mapping files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    public void migrateUserArtifacts() {\n+        flowMigrator.migrateFlows();\n+        migrateEntityModels();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateEntityModels() {\n+        HubProject hubProject = hubConfig.getHubProject();\n+        final File entityModelsDir = hubProject.getHubEntitiesDir().toFile();\n+        if (!entityModelsDir.exists()) {\n+            logger.warn(\"No entities directory exists, so no entity models will be migrated\");\n+            return;\n+        }\n+\n+        logger.warn(\"Beginning migration of entity models in entities directory\");\n+\n+        ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n+        boolean atLeastOneEntityModelWasMigrated = false;\n+\n+        for (JsonNode entityModel : entityManager.getAllEntities()) {\n+            ObjectNode entityModelNode = (ObjectNode) entityModel;\n+\n+            if (entityModelRequiresMigration(entityModelNode)) {\n+                String title = entityModelNode.get(\"info\").get(\"title\").asText();\n+                ObjectNode entityTypeNode = (ObjectNode) entityModelNode.get(\"definitions\").get(title);\n+\n+                List<String> elementRangeIndex = mapper.convertValue(entityTypeNode.get(\"elementRangeIndex\"), ArrayList.class);\n+                elementRangeIndex = elementRangeIndex == null ? new ArrayList<>() : elementRangeIndex;\n+                List<String> rangeIndex = mapper.convertValue(entityTypeNode.get(\"rangeIndex\"), ArrayList.class);\n+                rangeIndex = rangeIndex == null ? new ArrayList<>() : rangeIndex;\n+                List<String> pathRangeIndex = mapper.convertValue(entityTypeNode.get(\"pathRangeIndex\"), ArrayList.class);\n+                pathRangeIndex = pathRangeIndex == null ? new ArrayList<>() : pathRangeIndex;\n+                Set<String> mergedIndexArrays = new HashSet<>();\n+                Stream.of(elementRangeIndex, rangeIndex, pathRangeIndex).forEach(mergedIndexArrays::addAll);\n+\n+                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");\n+                if (entityTypePropertiesNode == null) {\n+                    logger.warn(\"entityTypePropertiesNode is null\");\n+                    entityTypeNode.remove(removableIndexArrays);\n+                    atLeastOneEntityModelWasMigrated = true;\n+                    continue;\n+                }\n+\n+                entityTypePropertiesNode.fieldNames().forEachRemaining(propertyName -> {\n+                    if (mergedIndexArrays.contains(propertyName)) {\n+                        ObjectNode entityPropertyNode = (ObjectNode) entityTypePropertiesNode.get(propertyName);\n+                        if (!isStructuredTypeProperty(entityPropertyNode)) {\n+                            entityPropertyNode.put(\"facetable\", true);\n+                        }\n+                    }\n+                });\n+                entityTypeNode.remove(removableIndexArrays);\n+\n+                File entityModelFile = Paths.get(hubProject.getHubEntitiesDir().toString(), title + entityManager.ENTITY_FILE_EXTENSION).toFile();\n+                try {\n+                    writer.writeValue(entityModelFile, entityModelNode);\n+                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelFile));\n+                    atLeastOneEntityModelWasMigrated = true;\n+                } catch (IOException e) {\n+                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelFile, e.getMessage()), e);\n+                }\n+            }\n+        }\n+\n+        if (atLeastOneEntityModelWasMigrated) {\n+            logger.warn(\"Finished migrating entity models.\");\n+            logger.warn(\"Please examine your entity model files to verify that properties that were listed in the rangeIndex, pathRangeIndex, or elementRangeIndex arrays \" +\n+                    \"now have \\\"facetable\\\":true in their property definition.\\n\");\n+        } else {\n+            logger.warn(\"No entity models required migration, so no project files were modified\");\n+        }\n+    }\n+\n+    protected boolean entityModelRequiresMigration(ObjectNode entityModelNode) {\n+        if (!entityModelValidForMigration(entityModelNode)) {\n+            return false;\n+        }\n+        String firstLevelEntityTypeName = entityModelNode.get(\"info\").get(\"title\").asText();\n+        entityModelNode = (ObjectNode) entityModelNode.get(\"definitions\").get(firstLevelEntityTypeName);\n+        return entityModelNode.get(\"rangeIndex\") != null || entityModelNode.get(\"elementRangeIndex\") != null ||\n+                entityModelNode.get(\"pathRangeIndex\") != null;\n+    }\n+\n+    protected boolean entityModelValidForMigration(ObjectNode entityModelNode) {\n+        if (!entityModelNode.has(\"info\")) {\n+            logger.warn(\"Info doesn't exist for the entity model and can not be migrated\");\n+            return false;\n+        }\n+\n+        if (!entityModelNode.get(\"info\").has(\"title\")) {\n+            logger.warn(\"Title doesn't exist for the entity model in the info and can not be migrated\");\n+            return false;\n+        }\n+\n+        if (entityModelNode.get(\"info\").get(\"title\") == null || entityModelNode.get(\"info\").get(\"title\").asText().isEmpty()) {\n+            logger.warn(\"Title is empty for the entity model in the info and can not be migrated\");\n+            return false;\n+        }\n+        String title = entityModelNode.get(\"info\").get(\"title\").asText();\n+\n+        if (!entityModelNode.has(\"definitions\")) {\n+            logger.warn(\"No definitions found in the entity model and can not be migrated\");\n+            return false;\n+        }\n+\n+        if (entityModelNode.get(\"definitions\").get(title) == null) {\n+            logger.warn(format(\"entityType with title %s does not exist in the entityModel\", title));\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    private boolean isStructuredTypeProperty(ObjectNode entityPropertyNode) {\n+        // check for simple structured type property or simple relationship property\n+        if (entityPropertyNode.get(\"datatype\") == null && entityPropertyNode.get(\"$ref\") != null) {\n+            return true;\n+        }\n+\n+        // check if structured type or relationship type property with array datatype\n+        if (entityPropertyNode.get(\"datatype\").asText().equals(\"array\") && entityPropertyNode.get(\"items\").get(\"$ref\") != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06140aad6463887bcb8bf48d5f1edd7cf0aa9c59"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzEyNTQ0OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMjo0MDoxMlrOG2In0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMjo0MDoxMlrOG2In0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQxNzU1NA==", "bodyText": "Another problem I thought of is that a user may very well have an entity model file with invalid JSON in it. Have seen it happen in support tickets. So we need for \"getAllEntities\" to account for a file being bad. I think modifying that to try/catch an error on each file - instead of throwing it - is a good idea (it'll be beneficial to the current clients of this method too).", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r459417554", "createdAt": "2020-07-23T12:40:12Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.ext.helper.LoggingObject;\n+import com.marklogic.hub.HubConfig;\n+import com.marklogic.hub.HubProject;\n+import com.marklogic.hub.impl.EntityManagerImpl;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+public class HubCentralMigrator extends LoggingObject {\n+    private static final List<String> removableIndexArrays = Arrays.asList(\"elementRangeIndex\", \"rangeIndex\", \"pathRangeIndex\");\n+    private HubConfig hubConfig;\n+    private EntityManagerImpl entityManager;\n+    private FlowMigrator flowMigrator;\n+    private ObjectMapper mapper = new ObjectMapper();\n+\n+    public HubCentralMigrator(HubConfig hubConfig) {\n+        this.hubConfig = hubConfig;\n+        this.entityManager = new EntityManagerImpl(hubConfig);\n+        this.flowMigrator = new FlowMigrator(this.hubConfig);\n+    }\n+\n+    /**\n+     * Migrate the entity model, flow and mapping files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    public void migrateUserArtifacts() {\n+        flowMigrator.migrateFlows();\n+        migrateEntityModels();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateEntityModels() {\n+        HubProject hubProject = hubConfig.getHubProject();\n+        final File entityModelsDir = hubProject.getHubEntitiesDir().toFile();\n+        if (!entityModelsDir.exists()) {\n+            logger.warn(\"No entities directory exists, so no entity models will be migrated\");\n+            return;\n+        }\n+\n+        logger.warn(\"Beginning migration of entity models in entities directory\");\n+\n+        ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n+        boolean atLeastOneEntityModelWasMigrated = false;\n+\n+        for (JsonNode entityModel : entityManager.getAllEntities()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06140aad6463887bcb8bf48d5f1edd7cf0aa9c59"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTEyNTcwOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMjo1NTowNFrOG2uREw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMjo1NTowNFrOG2uREw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzNDMyMw==", "bodyText": "This makes me nervous here, because we don't have a guarantee that this will overwrite the file that the entity was read from. The risk is that we write a new file and now the old file and migrated file both exist, and the user is then confused about what happened.\nFor this reason, I think it's better to not use getAllEntities() from EntityManagerImpl. Instead, just do listFiles (and filter on name endsWith \".entity.json\") on the entities dir and iterate over the list of files. That way, you know you're overwriting the correct File.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r460034323", "createdAt": "2020-07-24T12:55:04Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.ext.helper.LoggingObject;\n+import com.marklogic.hub.HubConfig;\n+import com.marklogic.hub.HubProject;\n+import com.marklogic.hub.impl.EntityManagerImpl;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+public class HubCentralMigrator extends LoggingObject {\n+    private static final List<String> removableIndexArrays = Arrays.asList(\"elementRangeIndex\", \"rangeIndex\", \"pathRangeIndex\");\n+    private HubConfig hubConfig;\n+    private EntityManagerImpl entityManager;\n+    private FlowMigrator flowMigrator;\n+    private ObjectMapper mapper = new ObjectMapper();\n+\n+    public HubCentralMigrator(HubConfig hubConfig) {\n+        this.hubConfig = hubConfig;\n+        this.entityManager = new EntityManagerImpl(hubConfig);\n+        this.flowMigrator = new FlowMigrator(this.hubConfig);\n+    }\n+\n+    /**\n+     * Migrate the entity model, flow and mapping files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    public void migrateUserArtifacts() {\n+        flowMigrator.migrateFlows();\n+        migrateEntityModels();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateEntityModels() {\n+        HubProject hubProject = hubConfig.getHubProject();\n+        final File entityModelsDir = hubProject.getHubEntitiesDir().toFile();\n+        if (!entityModelsDir.exists()) {\n+            logger.warn(\"No entities directory exists, so no entity models will be migrated\");\n+            return;\n+        }\n+\n+        logger.warn(\"Beginning migration of entity models in entities directory\");\n+\n+        ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n+        boolean atLeastOneEntityModelWasMigrated = false;\n+\n+        for (JsonNode entityModel : entityManager.getAllEntities()) {\n+            ObjectNode entityModelNode = (ObjectNode) entityModel;\n+\n+            if (entityModelRequiresMigration(entityModelNode)) {\n+                String title = entityModelNode.get(\"info\").get(\"title\").asText();\n+                ObjectNode entityTypeNode = (ObjectNode) entityModelNode.get(\"definitions\").get(title);\n+\n+                List<String> elementRangeIndex = mapper.convertValue(entityTypeNode.get(\"elementRangeIndex\"), ArrayList.class);\n+                elementRangeIndex = elementRangeIndex == null ? new ArrayList<>() : elementRangeIndex;\n+                List<String> rangeIndex = mapper.convertValue(entityTypeNode.get(\"rangeIndex\"), ArrayList.class);\n+                rangeIndex = rangeIndex == null ? new ArrayList<>() : rangeIndex;\n+                List<String> pathRangeIndex = mapper.convertValue(entityTypeNode.get(\"pathRangeIndex\"), ArrayList.class);\n+                pathRangeIndex = pathRangeIndex == null ? new ArrayList<>() : pathRangeIndex;\n+                Set<String> mergedIndexArrays = new HashSet<>();\n+                Stream.of(elementRangeIndex, rangeIndex, pathRangeIndex).forEach(mergedIndexArrays::addAll);\n+\n+                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");\n+                if (entityTypePropertiesNode == null) {\n+                    logger.warn(\"entityTypePropertiesNode is null\");\n+                    entityTypeNode.remove(removableIndexArrays);\n+                    atLeastOneEntityModelWasMigrated = true;\n+                    continue;\n+                }\n+\n+                entityTypePropertiesNode.fieldNames().forEachRemaining(propertyName -> {\n+                    if (mergedIndexArrays.contains(propertyName)) {\n+                        ObjectNode entityPropertyNode = (ObjectNode) entityTypePropertiesNode.get(propertyName);\n+                        if (!isStructuredTypeProperty(entityPropertyNode)) {\n+                            entityPropertyNode.put(\"facetable\", true);\n+                        }\n+                    }\n+                });\n+                entityTypeNode.remove(removableIndexArrays);\n+\n+                File entityModelFile = Paths.get(hubProject.getHubEntitiesDir().toString(), title + entityManager.ENTITY_FILE_EXTENSION).toFile();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cd1fecc6edd1793201189105f49c449728fb515"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTEzNjQyOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/impl/EntityManagerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMjo1ODozMFrOG2uXsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMjo1ODozMFrOG2uXsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzNjAxOQ==", "bodyText": "I think this is another reason not to use getAllEntities() - I don't think we want legacy entities included. According to our docs - https://docs.marklogic.com/datahub/upgrade.html - hubUpdate will move legacy entities to the ./entities directory. But in case there's anything left in the legacy entities directory, we don't want to touch those files.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r460036019", "createdAt": "2020-07-24T12:58:30Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/impl/EntityManagerImpl.java", "diffHunk": "@@ -244,22 +244,22 @@ private HubModuleManager getPropsMgr() {\n         return new HubModuleManager(timestampFile);\n     }\n \n-    private List<JsonNode> getAllEntities() {\n+    public List<JsonNode> getAllEntities() {\n         List<JsonNode> entities = new ArrayList<>(getAllLegacyEntities());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cd1fecc6edd1793201189105f49c449728fb515"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3861, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}