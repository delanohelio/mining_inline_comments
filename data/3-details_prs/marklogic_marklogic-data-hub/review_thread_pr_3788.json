{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4NDQ3OTE1", "number": 3788, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxMjo1Njo1OFrODu39HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxMjo1ODozOVrODu39xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDc3ODUzOnYy", "diffSide": "RIGHT", "path": "azure/flow-runner-function/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxMjo1Njo1OFrOGA_y5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNjoyMToxNFrOGB0eTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5ODQwNQ==", "bodyText": "Can you use Jackson for JSON parsing instead? That's already included via the ML Java Client and we use it throughout DHF.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3788#discussion_r403698405", "createdAt": "2020-04-05T12:56:58Z", "author": {"login": "rjrudin"}, "path": "azure/flow-runner-function/pom.xml", "diffHunk": "@@ -100,6 +100,11 @@\n             <artifactId>mockito-core</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.json</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da529424a4931453d88e6c544a104bf9a2696f2f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU2MTQ4NQ==", "bodyText": "Updated to use Jackson. So, changes to pom.xml are undone now.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3788#discussion_r404561485", "createdAt": "2020-04-07T06:21:14Z", "author": {"login": "vgouraba"}, "path": "azure/flow-runner-function/pom.xml", "diffHunk": "@@ -100,6 +100,11 @@\n             <artifactId>mockito-core</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.json</groupId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5ODQwNQ=="}, "originalCommit": {"oid": "da529424a4931453d88e6c544a104bf9a2696f2f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDc3OTIwOnYy", "diffSide": "RIGHT", "path": "azure/flow-runner-function/src/main/java/com/marklogic/dhf/azure/FunctionDataHubFlow.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxMjo1Nzo0MlrOGA_zPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMToxODo0OVrOGBvkJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5ODQ5Mg==", "bodyText": "This is good - is it the default that multiple params will be sent as a JSON object to a Function? I know that's how Lambda works in AWS.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3788#discussion_r403698492", "createdAt": "2020-04-05T12:57:42Z", "author": {"login": "rjrudin"}, "path": "azure/flow-runner-function/src/main/java/com/marklogic/dhf/azure/FunctionDataHubFlow.java", "diffHunk": "@@ -25,49 +28,108 @@\n     @FunctionName(\"HttpExampleDataHubFlow\")\n     public HttpResponseMessage run(\n             @HttpTrigger(name = \"req\", methods = {HttpMethod.GET, HttpMethod.POST}, authLevel = AuthorizationLevel.ANONYMOUS) HttpRequestMessage<Optional<String>> request,\n-            @QueueOutput(name = \"msg\", queueName = \"dhf-queue\", connection = \"AzureWebJobsStorage\") OutputBinding<String> msg,\n+            @QueueOutput(name = \"msg\", queueName = \"dhf-queue-az\", connection = \"AzureWebJobsStorage\") OutputBinding<String> msg,\n             final ExecutionContext context) {\n         context.getLogger().info(\"Java HTTP trigger processed a request.\");\n \n-        // Parse query parameter\n-        String query = request.getQueryParameters().get(\"name\");\n-        String name = request.getBody().orElse(query);\n+        context.getLogger().info(\"Preparing jsonObj.\");\n+        JSONObject jsonObj = new JSONObject(request.getBody().orElse(null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da529424a4931453d88e6c544a104bf9a2696f2f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ4MTA2Mw==", "bodyText": "For a POST request, we can get a handle to the entire request body as a valid json string. I'm converting the string into JSON object here. FYI", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3788#discussion_r404481063", "createdAt": "2020-04-07T01:18:49Z", "author": {"login": "vgouraba"}, "path": "azure/flow-runner-function/src/main/java/com/marklogic/dhf/azure/FunctionDataHubFlow.java", "diffHunk": "@@ -25,49 +28,108 @@\n     @FunctionName(\"HttpExampleDataHubFlow\")\n     public HttpResponseMessage run(\n             @HttpTrigger(name = \"req\", methods = {HttpMethod.GET, HttpMethod.POST}, authLevel = AuthorizationLevel.ANONYMOUS) HttpRequestMessage<Optional<String>> request,\n-            @QueueOutput(name = \"msg\", queueName = \"dhf-queue\", connection = \"AzureWebJobsStorage\") OutputBinding<String> msg,\n+            @QueueOutput(name = \"msg\", queueName = \"dhf-queue-az\", connection = \"AzureWebJobsStorage\") OutputBinding<String> msg,\n             final ExecutionContext context) {\n         context.getLogger().info(\"Java HTTP trigger processed a request.\");\n \n-        // Parse query parameter\n-        String query = request.getQueryParameters().get(\"name\");\n-        String name = request.getBody().orElse(query);\n+        context.getLogger().info(\"Preparing jsonObj.\");\n+        JSONObject jsonObj = new JSONObject(request.getBody().orElse(null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5ODQ5Mg=="}, "originalCommit": {"oid": "da529424a4931453d88e6c544a104bf9a2696f2f"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDc4MDIyOnYy", "diffSide": "RIGHT", "path": "azure/flow-runner-function/src/main/java/com/marklogic/dhf/azure/FunctionDataHubFlow.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxMjo1ODozOVrOGA_zwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNjoyMjozMlrOGB0gdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5ODYyNA==", "bodyText": "For consistency elsewhere, can you use these names for the params - \"host\", \"username\", \"password\", \"flowName\", and \"steps.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3788#discussion_r403698624", "createdAt": "2020-04-05T12:58:39Z", "author": {"login": "rjrudin"}, "path": "azure/flow-runner-function/src/main/java/com/marklogic/dhf/azure/FunctionDataHubFlow.java", "diffHunk": "@@ -25,49 +28,108 @@\n     @FunctionName(\"HttpExampleDataHubFlow\")\n     public HttpResponseMessage run(\n             @HttpTrigger(name = \"req\", methods = {HttpMethod.GET, HttpMethod.POST}, authLevel = AuthorizationLevel.ANONYMOUS) HttpRequestMessage<Optional<String>> request,\n-            @QueueOutput(name = \"msg\", queueName = \"dhf-queue\", connection = \"AzureWebJobsStorage\") OutputBinding<String> msg,\n+            @QueueOutput(name = \"msg\", queueName = \"dhf-queue-az\", connection = \"AzureWebJobsStorage\") OutputBinding<String> msg,\n             final ExecutionContext context) {\n         context.getLogger().info(\"Java HTTP trigger processed a request.\");\n \n-        // Parse query parameter\n-        String query = request.getQueryParameters().get(\"name\");\n-        String name = request.getBody().orElse(query);\n+        context.getLogger().info(\"Preparing jsonObj.\");\n+        JSONObject jsonObj = new JSONObject(request.getBody().orElse(null));\n+        context.getLogger().info(\"Done Preparing jsonObj <\" + jsonObj + \">\");\n+        context.getLogger().info(\"json < \" + jsonObj + \">\");  //don't do this to avoid logging password\n+\n+        // Parse request parameters\n+        String mlHost = getValueFromJson (jsonObj, \"ml-host\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da529424a4931453d88e6c544a104bf9a2696f2f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU2MjAzNw==", "bodyText": "modified code to use the names: host/username/password/flowName/steps.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3788#discussion_r404562037", "createdAt": "2020-04-07T06:22:32Z", "author": {"login": "vgouraba"}, "path": "azure/flow-runner-function/src/main/java/com/marklogic/dhf/azure/FunctionDataHubFlow.java", "diffHunk": "@@ -25,49 +28,108 @@\n     @FunctionName(\"HttpExampleDataHubFlow\")\n     public HttpResponseMessage run(\n             @HttpTrigger(name = \"req\", methods = {HttpMethod.GET, HttpMethod.POST}, authLevel = AuthorizationLevel.ANONYMOUS) HttpRequestMessage<Optional<String>> request,\n-            @QueueOutput(name = \"msg\", queueName = \"dhf-queue\", connection = \"AzureWebJobsStorage\") OutputBinding<String> msg,\n+            @QueueOutput(name = \"msg\", queueName = \"dhf-queue-az\", connection = \"AzureWebJobsStorage\") OutputBinding<String> msg,\n             final ExecutionContext context) {\n         context.getLogger().info(\"Java HTTP trigger processed a request.\");\n \n-        // Parse query parameter\n-        String query = request.getQueryParameters().get(\"name\");\n-        String name = request.getBody().orElse(query);\n+        context.getLogger().info(\"Preparing jsonObj.\");\n+        JSONObject jsonObj = new JSONObject(request.getBody().orElse(null));\n+        context.getLogger().info(\"Done Preparing jsonObj <\" + jsonObj + \">\");\n+        context.getLogger().info(\"json < \" + jsonObj + \">\");  //don't do this to avoid logging password\n+\n+        // Parse request parameters\n+        String mlHost = getValueFromJson (jsonObj, \"ml-host\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5ODYyNA=="}, "originalCommit": {"oid": "da529424a4931453d88e6c544a104bf9a2696f2f"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3377, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}