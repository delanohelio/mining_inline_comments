{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5ODYzNzYy", "number": 4922, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMzo0NjoxMVrOE-42IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMzo1MjoyMlrOE-48bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Mzc4NTI5OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/endpoints/collectorLib/prepareSourceQuery.sjs", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMzo0NjoxMVrOH8SXrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMzo0NjoxMVrOH8SXrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk3NzU4MQ==", "bodyText": "If the code is no longer valid in collectorLib, let's just delete this and not comment it out", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4922#discussion_r532977581", "createdAt": "2020-11-30T23:46:11Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/endpoints/collectorLib/prepareSourceQuery.sjs", "diffHunk": "@@ -16,6 +16,8 @@ let sourceQuery = lib.prepareSourceQuery(\n     type: \"merging\"\n   }\n );\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed90733818ba0fa182b0286c8f7464e5a97cf16c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Mzc4ODI2OnYy", "diffSide": "LEFT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/impl/flow.sjs", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMzo0NzoyNlrOH8SZkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMToyNzoxM1rOH9Aa7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk3ODA2NA==", "bodyText": "This seems really good that we're removing this, as ideally the flow framework has no knowledge of concrete step types. I'm missing what changes in merging.sjs make this possible though?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4922#discussion_r532978064", "createdAt": "2020-11-30T23:47:26Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/impl/flow.sjs", "diffHunk": "@@ -159,15 +159,11 @@ class Flow {\n       query = sourceQuery ? xdmp.eval(sourceQuery) : null;\n     }\n \n-    if (stepDefinition.name === 'default-merging' && stepDefinition.type === 'merging' && uris) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed90733818ba0fa182b0286c8f7464e5a97cf16c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY5NjAzMw==", "bodyText": "Now the merging step will process an entire match summary at a time instead of a single document referenced in the match summary.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4922#discussion_r533696033", "createdAt": "2020-12-01T20:19:58Z", "author": {"login": "ryanjdew"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/impl/flow.sjs", "diffHunk": "@@ -159,15 +159,11 @@ class Flow {\n       query = sourceQuery ? xdmp.eval(sourceQuery) : null;\n     }\n \n-    if (stepDefinition.name === 'default-merging' && stepDefinition.type === 'merging' && uris) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk3ODA2NA=="}, "originalCommit": {"oid": "ed90733818ba0fa182b0286c8f7464e5a97cf16c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzczMjA3OQ==", "bodyText": "Got it - the inclusion of \"thisMatchSummaryURI\" as a variable name in merging.sjs makes that clear too.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4922#discussion_r533732079", "createdAt": "2020-12-01T21:27:13Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/impl/flow.sjs", "diffHunk": "@@ -159,15 +159,11 @@ class Flow {\n       query = sourceQuery ? xdmp.eval(sourceQuery) : null;\n     }\n \n-    if (stepDefinition.name === 'default-merging' && stepDefinition.type === 'merging' && uris) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk3ODA2NA=="}, "originalCommit": {"oid": "ed90733818ba0fa182b0286c8f7464e5a97cf16c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzgwMTQxOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/builtins/steps/mastering/default/merging.sjs", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMzo1MjoyMlrOH8ShKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMzo1MjoyMlrOH8ShKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk4MDAwOQ==", "bodyText": "I kind of follow the logic, but I'm not clear on the goal - it sounds expected that there may be summaries with multiple possible merges for the same URI, and we want to favor the  match summary that recommends merging the most URIs with the current URI we're processing?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4922#discussion_r532980009", "createdAt": "2020-11-30T23:52:22Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/builtins/steps/mastering/default/merging.sjs", "diffHunk": "@@ -38,87 +37,87 @@ function main(content, options) {\n       httpUtils.throwBadRequestWithArray([`Could not find step with stepId ${options.stepId}`]);\n     }\n   }\n-  const jobID = datahub.flow.globalContext.jobId;\n-  const urisPathReference = cts.pathReference('/matchSummary/URIsToProcess', ['type=string','collation=http://marklogic.com/collation/']);\n+  //const jobID = datahub.flow.globalContext.jobId;\n+  const urisPathReference = cts.pathReference('/matchSummary/URIsToProcess', ['type=string', 'collation=http://marklogic.com/collation/']);\n   const datahubCreatedOnRef = cts.fieldReference('datahubCreatedOn', ['type=dateTime']);\n-  const uriToTakeActionOn = content.uri;\n+  const thisMatchSummaryURI = content.uri;\n   masteringStepLib.checkOptions(null, options, null, requiredOptionProperties);\n-  const matchSummaryCollection = `datahubMasteringMatchSummary${options.targetEntityType ? `-${options.targetEntityType}`:''}`;\n+  const matchSummaryCollection = `datahubMasteringMatchSummary${options.targetEntityType ? `-${options.targetEntityType}` : ''}`;\n   const collectionQuery = cts.collectionQuery(matchSummaryCollection);\n-  const uriRangeQuery = cts.rangeQuery(urisPathReference, '=', uriToTakeActionOn);\n-  let relatedMatchSummaries = cts.search(\n-    cts.andQuery([\n-      uriRangeQuery,\n-      collectionQuery\n-    ]),\n-    ['unfiltered',cts.indexOrder(datahubCreatedOnRef, 'descending')]\n-  );\n-  let mostRecentMatchSummary = fn.head(relatedMatchSummaries);\n-  let matchSummaryJson = mostRecentMatchSummary.toObject();\n-  let uriActionDetails = matchSummaryJson.matchSummary.actionDetails[uriToTakeActionOn];\n-  // If the action is merge, ensure we create the merge with the most URIs\n-  if (uriActionDetails && uriActionDetails.action === 'merge') {\n-    const urisQuery = cts.pathRangeQuery('//actionDetails/*/uris', '=', uriActionDetails.uris)\n-    const postiveQuery = [\n-      cts.jsonPropertyValueQuery('action', 'merge'),\n-      urisQuery,\n-      collectionQuery\n-    ];\n-    const otherMergesForURI = cts.search(\n-      cts.andNotQuery(\n-        cts.andQuery(postiveQuery),\n-        uriRangeQuery\n-      ),\n-      ['unfiltered',cts.indexOrder(datahubCreatedOnRef, 'descending')]\n-    ).toArray()\n-        // get the actionNode for the URI\n-        .map(\n-          (result) => result.xpath(`/matchSummary/actionDetails/*[action = 'merge']`).toArray()\n-            .filter((actionNode) => cts.contains(actionNode, urisQuery))[0]\n-        )\n-        // filter out false positives that don't have merge actions for the given URI\n-        .filter((actionNode) => !!actionNode)\n-        // convert node to JSON object\n-        .map((actionNode) => actionNode.toObject());\n-    if (otherMergesForURI.some((otherMerge) => otherMerge.uris.length > uriActionDetails.uris.length)) {\n-      return Sequence.from([]);\n+\n+  let returnArray = [];\n+\n+  let thisMatchSummary = (content.value ? content.value : cts.doc(thisMatchSummaryURI));\n+  if (!thisMatchSummary) {\n+    return Sequence.from([]);\n+  }\n+  thisMatchSummary = thisMatchSummary.toObject();\n+  let theseURIsToProcess = thisMatchSummary.matchSummary.URIsToProcess;\n+\n+  for (uriToProcess of theseURIsToProcess) {\n+\n+    // don't process this \"URIsToProcess\" URI unless we are processing the last matchSummary document\n+    // (in URI order) that contains it\n+    let lastSummaryWithURI = cts.uris(null, [\"descending\", \"limit=1\"],\n+      cts.pathRangeQuery(\"/matchSummary/URIsToProcess\", \"=\" , uriToProcess));\n+    if (lastSummaryWithURI != thisMatchSummaryURI) {\n+      continue;\n     }\n-    otherMergesForURI.forEach((actionDetails) => actionDetails.uris.forEach(\n-      (uri) => {\n-        if (!uriActionDetails.uris.includes(uri)) {\n-          uriActionDetails.uris.push(uri);\n-        }\n+\n+    let uriActionDetails = thisMatchSummary.matchSummary.actionDetails[uriToProcess];\n+    // If the action is merge, ensure we create the merge with the most URIs\n+    if (uriActionDetails && uriActionDetails.action === 'merge') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed90733818ba0fa182b0286c8f7464e5a97cf16c"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2992, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}