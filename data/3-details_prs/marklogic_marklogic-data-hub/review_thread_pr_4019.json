{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0Njc0Nzkw", "number": 4019, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjozMzo1MFrOEA9a7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOTo1Mzo1OFrOEBfmIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDQxNzczOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/hub-internal-config/security/roles/data-hub-ingestion-writer.json", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjozMzo1MFrOGcj75Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOTo1MDozMVrOGdX3VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwMjA4NQ==", "bodyText": "should data-hub-ingestion-writer get data-hub-common-writer role just like data-hub-mapping-writer", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4019#discussion_r432602085", "createdAt": "2020-05-29T16:33:50Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub/src/main/resources/hub-internal-config/security/roles/data-hub-ingestion-writer.json", "diffHunk": "@@ -1,4 +1,7 @@\n {\n   \"role-name\": \"data-hub-ingestion-writer\",\n-  \"description\": \"Permits reading a load data configuration\"\n+  \"description\": \"Permits reading a load data configuration\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "963a458401d6d6714caf7e980223b40f9322215d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NzUwNQ==", "bodyText": "I think that's a good idea.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4019#discussion_r432867505", "createdAt": "2020-05-30T16:20:48Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/hub-internal-config/security/roles/data-hub-ingestion-writer.json", "diffHunk": "@@ -1,4 +1,7 @@\n {\n   \"role-name\": \"data-hub-ingestion-writer\",\n-  \"description\": \"Permits reading a load data configuration\"\n+  \"description\": \"Permits reading a load data configuration\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwMjA4NQ=="}, "originalCommit": {"oid": "963a458401d6d6714caf7e980223b40f9322215d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NzU2Nw==", "bodyText": "Oh wait I take that back - I think we're just using this as a \"data\" role, while the hub-central-* roles are \"privilege\" roles.\nThe description does need to be modified though - change \"reading\" to \"writing\".", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4019#discussion_r432867567", "createdAt": "2020-05-30T16:21:44Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/hub-internal-config/security/roles/data-hub-ingestion-writer.json", "diffHunk": "@@ -1,4 +1,7 @@\n {\n   \"role-name\": \"data-hub-ingestion-writer\",\n-  \"description\": \"Permits reading a load data configuration\"\n+  \"description\": \"Permits reading a load data configuration\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwMjA4NQ=="}, "originalCommit": {"oid": "963a458401d6d6714caf7e980223b40f9322215d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1Mjg4NQ==", "bodyText": "I added the data-hub-common-writer role to the data-hub-ingestion-writer. It makes sense to me that the data-hub-ingestion-writer should be enough provide enough privileges/permissions to write an ingestion step outside the context of hub-central.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4019#discussion_r433452885", "createdAt": "2020-06-01T19:50:31Z", "author": {"login": "ryanjdew"}, "path": "marklogic-data-hub/src/main/resources/hub-internal-config/security/roles/data-hub-ingestion-writer.json", "diffHunk": "@@ -1,4 +1,7 @@\n {\n   \"role-name\": \"data-hub-ingestion-writer\",\n-  \"description\": \"Permits reading a load data configuration\"\n+  \"description\": \"Permits reading a load data configuration\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwMjA4NQ=="}, "originalCommit": {"oid": "963a458401d6d6714caf7e980223b40f9322215d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjEzOTAwOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/hub-internal-config/security/roles/data-hub-common-writer.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNjoyMDo0MFrOGc0Iqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjo0MDoxOFrOGdR2pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NzQ5OQ==", "bodyText": "One downside to JSON is we don't have a way to have inline comments about why a privilege is needed. I've used README.md files in the same directory as JSON files before to provide those comments. But those can be difficult to keep in sync - someone has to remember to update them.\nIn theory though, if someone wonders why this privilege is set, they could remove it and run the test suite and something should fail, which would point out what code needs the privilege, right?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4019#discussion_r432867499", "createdAt": "2020-05-30T16:20:40Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/hub-internal-config/security/roles/data-hub-common-writer.json", "diffHunk": "@@ -29,6 +29,11 @@\n       \"privilege-name\": \"rest-writer\",\n       \"action\": \"http://marklogic.com/xdmp/privileges/rest-writer\",\n       \"kind\": \"execute\"\n+    },\n+    {\n+      \"privilege-name\": \"xdmp:invoke\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "963a458401d6d6714caf7e980223b40f9322215d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1NDQwNg==", "bodyText": "True. This one stems from the need to insert via hub-utils. It was missed when doing the mapping roles since the mapping reader already provided it as part of testing the mapping.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4019#discussion_r433354406", "createdAt": "2020-06-01T16:40:18Z", "author": {"login": "ryanjdew"}, "path": "marklogic-data-hub/src/main/resources/hub-internal-config/security/roles/data-hub-common-writer.json", "diffHunk": "@@ -29,6 +29,11 @@\n       \"privilege-name\": \"rest-writer\",\n       \"action\": \"http://marklogic.com/xdmp/privileges/rest-writer\",\n       \"kind\": \"execute\"\n+    },\n+    {\n+      \"privilege-name\": \"xdmp:invoke\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NzQ5OQ=="}, "originalCommit": {"oid": "963a458401d6d6714caf7e980223b40f9322215d"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjE0MDE3OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/impl/security/getAuthoritiesTest.sjs", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNjoyMzowMFrOGc0JPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMDozOTowNlrOGdZTIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NzY0NA==", "bodyText": "Are these assertions necessary since you have the tests on the controller, which verifies that the ROLE_* stuff works, which means the right authorities are being returned?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4019#discussion_r432867644", "createdAt": "2020-05-30T16:23:00Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/impl/security/getAuthoritiesTest.sjs", "diffHunk": "@@ -45,6 +45,15 @@ hubTest.runWithRolesAndPrivileges(['hub-central-load-reader'], [], function() {\n     assertions.push(test.assertFalse(authorities.includes('writeIngestion'), 'hub-central-load-reader should not have \"writeIngestion\"'));\n });\n \n+// Test hub-central-load-writer\n+hubTest.runWithRolesAndPrivileges(['hub-central-load-writer'], [], function() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "963a458401d6d6714caf7e980223b40f9322215d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ0MTczNQ==", "bodyText": "Will the controller test fail, if the role doesnt include loginToHubCentral or readIngestion authorities?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4019#discussion_r433441735", "createdAt": "2020-06-01T19:28:27Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/impl/security/getAuthoritiesTest.sjs", "diffHunk": "@@ -45,6 +45,15 @@ hubTest.runWithRolesAndPrivileges(['hub-central-load-reader'], [], function() {\n     assertions.push(test.assertFalse(authorities.includes('writeIngestion'), 'hub-central-load-reader should not have \"writeIngestion\"'));\n });\n \n+// Test hub-central-load-writer\n+hubTest.runWithRolesAndPrivileges(['hub-central-load-writer'], [], function() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NzY0NA=="}, "originalCommit": {"oid": "963a458401d6d6714caf7e980223b40f9322215d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1MzM1MA==", "bodyText": "Yes - the loginAsTestUser method in AbstractMvcTest is making a POST to /api/login, so it's going through all the same plumbing as when a user authenticates in HC. So if a call is made with a user that can't login, the test will immediately fail.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4019#discussion_r433453350", "createdAt": "2020-06-01T19:51:32Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/impl/security/getAuthoritiesTest.sjs", "diffHunk": "@@ -45,6 +45,15 @@ hubTest.runWithRolesAndPrivileges(['hub-central-load-reader'], [], function() {\n     assertions.push(test.assertFalse(authorities.includes('writeIngestion'), 'hub-central-load-reader should not have \"writeIngestion\"'));\n });\n \n+// Test hub-central-load-writer\n+hubTest.runWithRolesAndPrivileges(['hub-central-load-writer'], [], function() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NzY0NA=="}, "originalCommit": {"oid": "963a458401d6d6714caf7e980223b40f9322215d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ3NjM4Ng==", "bodyText": "OK Thanks. I will update the test plan likewise.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4019#discussion_r433476386", "createdAt": "2020-06-01T20:39:06Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/impl/security/getAuthoritiesTest.sjs", "diffHunk": "@@ -45,6 +45,15 @@ hubTest.runWithRolesAndPrivileges(['hub-central-load-reader'], [], function() {\n     assertions.push(test.assertFalse(authorities.includes('writeIngestion'), 'hub-central-load-reader should not have \"writeIngestion\"'));\n });\n \n+// Test hub-central-load-writer\n+hubTest.runWithRolesAndPrivileges(['hub-central-load-writer'], [], function() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NzY0NA=="}, "originalCommit": {"oid": "963a458401d6d6714caf7e980223b40f9322215d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDAxNjk4OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/pages/Load.test.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOTo1Mzo1OFrOGdX9rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMDozNjo1MVrOGdZOsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1NDUwOQ==", "bodyText": "With Mike's latest changes, I believe we refactored all the mock responses for the test under config/mocks.config.ts.\nCan this mock delete be moved as well?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4019#discussion_r433454509", "createdAt": "2020-06-01T19:53:58Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/pages/Load.test.tsx", "diffHunk": "@@ -27,58 +27,91 @@ describe('Load component', () => {\n         const authorityService = new AuthoritiesService();\n         authorityService.setAuthorities(['readIngestion']);\n \n-        const { getByText, getByLabelText, getByTestId, debug } = render(<AuthoritiesContext.Provider value={authorityService}><Load/></AuthoritiesContext.Provider>);\n-            debug();\n-        expect(await(waitForElement(() => getByLabelText('load-list')))).toBeInTheDocument();\n+        const { getByText, getByTitle, getByLabelText, getByTestId, queryByTestId, queryByText, queryByTitle } = render(<AuthoritiesContext.Provider value={authorityService}><Load/></AuthoritiesContext.Provider>);\n+\n+        expect(await(waitForElement(() => getByLabelText('switch-view-list')))).toBeInTheDocument();\n \n         // Check for steps to be populated\n         expect(axiosMock.get).toBeCalledWith('/api/steps/ingestion');\n         expect(getByText('testLoad')).toBeInTheDocument();\n \n         // Check list view\n         await fireEvent.click(getByLabelText('switch-view-list'));\n+        // test 'Add New' button\n+        expect(queryByText('Add New')).not.toBeInTheDocument();\n \n         await fireEvent.click(getByTestId('testLoad-settings'));\n         expect(await(waitForElement(() => getByText('Target Database:')))).toBeInTheDocument();\n \n         expect(getByText('Save')).toBeDisabled();\n         await fireEvent.click(getByText('Cancel'));\n-        // Check card view\n+        // test delete\n+        expect(queryByTestId('testLoad-delete')).not.toBeInTheDocument();\n+\n+        // Check card layout\n         await fireEvent.click(getByLabelText('switch-view-card'));\n \n+        // test 'Add New' button\n+        expect(queryByText('Add New')).not.toBeInTheDocument();\n+\n+        // test settings\n         await fireEvent.click(getByLabelText('icon: setting'));\n         expect(await(waitForElement(() => getByText('Target Database:')))).toBeInTheDocument();\n         expect(getByText('Save')).toBeDisabled();\n         await fireEvent.click(getByText('Cancel'));\n+\n+        // test delete\n+        expect(queryByTitle('delete')).not.toBeInTheDocument();\n     });\n \n-    test('Verify can edit with readIngestion and writeIngestion authorities', async () => {\n+    test('Verify edit with readIngestion and writeIngestion authorities', async () => {\n         const authorityService = new AuthoritiesService();\n         authorityService.setAuthorities(['readIngestion','writeIngestion']);\n \n-        const { getByText, getByLabelText, getByTestId } = render(<AuthoritiesContext.Provider value={authorityService}><Load/></AuthoritiesContext.Provider>);\n+        axiosMock.delete['mockImplementation']((url) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5469d7880b6fe419c5354a9987f99a6fb257cdb"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ3NTI1MA==", "bodyText": "sure", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4019#discussion_r433475250", "createdAt": "2020-06-01T20:36:51Z", "author": {"login": "ryanjdew"}, "path": "marklogic-data-hub-central/ui/src/pages/Load.test.tsx", "diffHunk": "@@ -27,58 +27,91 @@ describe('Load component', () => {\n         const authorityService = new AuthoritiesService();\n         authorityService.setAuthorities(['readIngestion']);\n \n-        const { getByText, getByLabelText, getByTestId, debug } = render(<AuthoritiesContext.Provider value={authorityService}><Load/></AuthoritiesContext.Provider>);\n-            debug();\n-        expect(await(waitForElement(() => getByLabelText('load-list')))).toBeInTheDocument();\n+        const { getByText, getByTitle, getByLabelText, getByTestId, queryByTestId, queryByText, queryByTitle } = render(<AuthoritiesContext.Provider value={authorityService}><Load/></AuthoritiesContext.Provider>);\n+\n+        expect(await(waitForElement(() => getByLabelText('switch-view-list')))).toBeInTheDocument();\n \n         // Check for steps to be populated\n         expect(axiosMock.get).toBeCalledWith('/api/steps/ingestion');\n         expect(getByText('testLoad')).toBeInTheDocument();\n \n         // Check list view\n         await fireEvent.click(getByLabelText('switch-view-list'));\n+        // test 'Add New' button\n+        expect(queryByText('Add New')).not.toBeInTheDocument();\n \n         await fireEvent.click(getByTestId('testLoad-settings'));\n         expect(await(waitForElement(() => getByText('Target Database:')))).toBeInTheDocument();\n \n         expect(getByText('Save')).toBeDisabled();\n         await fireEvent.click(getByText('Cancel'));\n-        // Check card view\n+        // test delete\n+        expect(queryByTestId('testLoad-delete')).not.toBeInTheDocument();\n+\n+        // Check card layout\n         await fireEvent.click(getByLabelText('switch-view-card'));\n \n+        // test 'Add New' button\n+        expect(queryByText('Add New')).not.toBeInTheDocument();\n+\n+        // test settings\n         await fireEvent.click(getByLabelText('icon: setting'));\n         expect(await(waitForElement(() => getByText('Target Database:')))).toBeInTheDocument();\n         expect(getByText('Save')).toBeDisabled();\n         await fireEvent.click(getByText('Cancel'));\n+\n+        // test delete\n+        expect(queryByTitle('delete')).not.toBeInTheDocument();\n     });\n \n-    test('Verify can edit with readIngestion and writeIngestion authorities', async () => {\n+    test('Verify edit with readIngestion and writeIngestion authorities', async () => {\n         const authorityService = new AuthoritiesService();\n         authorityService.setAuthorities(['readIngestion','writeIngestion']);\n \n-        const { getByText, getByLabelText, getByTestId } = render(<AuthoritiesContext.Provider value={authorityService}><Load/></AuthoritiesContext.Provider>);\n+        axiosMock.delete['mockImplementation']((url) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1NDUwOQ=="}, "originalCommit": {"oid": "c5469d7880b6fe419c5354a9987f99a6fb257cdb"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3996, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}