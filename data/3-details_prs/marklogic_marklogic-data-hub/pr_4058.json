{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4NzcxNzI1", "number": 4058, "title": "DHFPROD-4969: Update Advanced Settings with JSON fields", "bodyText": "JSON input fields: Header Content, Processors, Custom Hook\nFor Load and Mapping steps.\nAddresses both DHFPROD-4969 and DHFPROD-4973.\n\nTest refactoring for Advanced Settings tests (use mocks.config, use act() to avoid warnings)\nRefactoring of Advanced Settings code for naming consistency and consistency with order in UI (see advanced-settings.*)\nBackend work by @ryanjdew to support Header Content, Processors, Custom Hook in API\n\n@sbayatpur and @jbelonoj have approved UI functionality.\nDescription\nChecklist:\n- Note: do not change the below\n\n\nOwner:\n\n\n JIRA_ID included in all the commit messages\n\n\n PR title is in the format JIRA_ID:Title\n\n\n Rebase the branch with upstream\n\n\n Squashed all commits into a single commit\n\n\n Added Tests\n\n\nReviewer:\n\n\n Reviewed Tests", "createdAt": "2020-06-05T21:24:04Z", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058", "merged": true, "mergeCommit": {"oid": "1ac38887924deaf8381b3c806b7a2b6192475a47"}, "closed": true, "closedAt": "2020-06-10T02:39:18Z", "author": {"login": "wooldridge"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcodUZrgFqTQyNTcwMzYwMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpvzaIAFqTQyNzY1OTg4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NzAzNjAy", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#pullrequestreview-425703602", "createdAt": "2020-06-06T01:52:34Z", "commit": {"oid": "a0c286c6e927364637c056a536f19e25062c02e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwMTo1MjozNVrOGgBLvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwMTo1MjozNVrOGgBLvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyNzAwNQ==", "bodyText": "RTL commands are all internally wrapped in act.\nconst renderResults = await render(.......) will help get rid of the \"wrap in act... \" warning when running the test.\nWe wouldnt need to wrap a fireEvent in act.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r436227005", "createdAt": "2020-06-06T01:52:35Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/pages/Load.test.tsx", "diffHunk": "@@ -27,7 +25,19 @@ describe('Load component', () => {\n         const authorityService = new AuthoritiesService();\n         authorityService.setAuthorities(['readIngestion']);\n \n-        const { getByText, getByTitle, getByLabelText, getByTestId, queryByTestId, queryByText, queryByTitle } = render(<AuthoritiesContext.Provider value={authorityService}><Load/></AuthoritiesContext.Provider>);\n+        let getByText, getByTitle, getByLabelText, getByTestId, queryByTestId, queryByText, queryByTitle;\n+        await act(async () => {\n+          const renderResults = render(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0c286c6e927364637c056a536f19e25062c02e9"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a0c286c6e927364637c056a536f19e25062c02e9", "author": {"user": {"login": "wooldridge", "name": "Mike Wooldridge"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/a0c286c6e927364637c056a536f19e25062c02e9", "committedDate": "2020-06-05T21:11:07Z", "message": "DHFPROD-4969: Update Advanced Settings with JSON fields\n\nFields: Header Content, Processors, Custom Hook\nFor Load and Mapping steps."}, "afterCommit": {"oid": "759c89fac1f2f8975d8c844c4db89f898b8fd669", "author": {"user": {"login": "bsrikan", "name": "Srikanth Balasubramanian"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/759c89fac1f2f8975d8c844c4db89f898b8fd669", "committedDate": "2020-06-07T03:55:53Z", "message": "DHFPROD-4969: Fix \"unmounted component\" warning and cleanup wrapping\nwith act"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "759c89fac1f2f8975d8c844c4db89f898b8fd669", "author": {"user": {"login": "bsrikan", "name": "Srikanth Balasubramanian"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/759c89fac1f2f8975d8c844c4db89f898b8fd669", "committedDate": "2020-06-07T03:55:53Z", "message": "DHFPROD-4969: Fix \"unmounted component\" warning and cleanup wrapping\nwith act"}, "afterCommit": {"oid": "ae7d4734a716cffee4c9d7661df31034d502895b", "author": {"user": {"login": "wooldridge", "name": "Mike Wooldridge"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/ae7d4734a716cffee4c9d7661df31034d502895b", "committedDate": "2020-06-07T03:59:19Z", "message": "DHFPROD-4969: Update Advanced Settings with JSON fields\n\nFields: Header Content, Processors, Custom Hook\nFor Load and Mapping steps.\n\nDHFPROD-4969: Fix \"unmounted component\" warning and cleanup wrapping\nwith act"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1Nzg1MjY4", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#pullrequestreview-425785268", "createdAt": "2020-06-07T04:02:58Z", "commit": {"oid": "ae7d4734a716cffee4c9d7661df31034d502895b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjAwNTcx", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#pullrequestreview-426200571", "createdAt": "2020-06-08T12:53:49Z", "commit": {"oid": "ae7d4734a716cffee4c9d7661df31034d502895b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMjo1Mzo0OVrOGgcMrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMjo1Mzo0OVrOGgcMrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY2OTYxMw==", "bodyText": "I didn't see a reference for these; if that's true, I'd like to use the following descriptions instead:\n\nProcessors = Custom modules that can process content before it is persisted.\nCustom hook = Custom module that can perform updates in a separate transaction.\n\nDescribing how a custom hook behaves is very difficult since its behavior varies based on the step being used. So I think the less said here, the better. I really don't think that Pari - the typical user of a custom hook - is ever going to use this interface to configure processors/custom hook. The complexity in trying to describe what these are is one of the reasons I don't think these should be exposed here either. But since we are exposing them, I think we want brief descriptions that encourage a non-Pari persona to not bother trying to figure out what these are.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r436669613", "createdAt": "2020-06-08T12:53:49Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/ui/src/config/tooltips.config.js", "diffHunk": "@@ -5,11 +5,11 @@ const AdvancedSettings = {\n     'targetFormat': 'The format of the documents in the target database.',\n     'additionalCollections': 'The collection tags to add to the default tags assigned to the processed document.',\n     'targetPermissions': 'The comma-separated permissions required to access the processed document.',\n-    'module': 'The path to your custom hook module.',\n-    'cHParameters': 'Parameters, as key-value pairs, to pass to your custom hook module.',\n-    'user': 'The user account to use to run the module. The default is the user running the flow; e.g., data-hub-operator.',\n-    'runBefore': 'Choose whether to run the module before or after the core processes of the step.',\n-    /* The following are for *Custom*Tooltips. */\n+    'headers': 'A JSON object that represents additional metadata to add to the header section of the envelope of each document.',\n+    'provGranularity': 'The level of detail logged for provenance. Choose *coarse* for the default level or *off* for no provenance logging.',\n+    'processors': 'Custom modules that perform additional processes after the core step processes are completed and before the results are saved.',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae7d4734a716cffee4c9d7661df31034d502895b"}, "originalPosition": 11}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ae7d4734a716cffee4c9d7661df31034d502895b", "author": {"user": {"login": "wooldridge", "name": "Mike Wooldridge"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/ae7d4734a716cffee4c9d7661df31034d502895b", "committedDate": "2020-06-07T03:59:19Z", "message": "DHFPROD-4969: Update Advanced Settings with JSON fields\n\nFields: Header Content, Processors, Custom Hook\nFor Load and Mapping steps.\n\nDHFPROD-4969: Fix \"unmounted component\" warning and cleanup wrapping\nwith act"}, "afterCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428", "author": {"user": {"login": "wooldridge", "name": "Mike Wooldridge"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/aca4d2c8782aaa6c85a64d91547eba14d712f428", "committedDate": "2020-06-09T00:44:21Z", "message": "DHFPROD-4969: Update Advanced Settings with JSON fields\n\nFields: Header Content, Processors, Custom Hook\nFor Load and Mapping steps.\nFix \"unmounted component\" warning and cleanup wrapping\nwith act."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2ODI0MTMy", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#pullrequestreview-426824132", "createdAt": "2020-06-09T06:30:19Z", "commit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "state": "DISMISSED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjozMDoxOVrOGg6hog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjo1NzoxNlrOGg7NnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE2NjQ5OA==", "bodyText": "Its ok to replace PUT tests with POST here. But we need to add a test for PUT; one each in Load and Curate test files(comments further down) and reuse loadSettings and mappingSettings in load.config and run.config for the same.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437166498", "createdAt": "2020-06-09T06:30:19Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/advanced-settings/advanced-settings-dialog.test.tsx", "diffHunk": "@@ -128,83 +169,147 @@ describe('Update data load settings component', () => {\n     const testFormatOptions = getAllByTestId('targetFormatOptions').map(li => li);\n     expect(testFormatOptions.map(li => li.textContent).toString()).toEqual('JSON,XML');\n     fireEvent.select(testFormatOptions[1]);\n-    expect(getByText('XML')).toBeInTheDocument();\n \n-    //Verifying provenance options select field\n-    fireEvent.click(getByText('Coarse-grained'));\n-    const provOptions = getAllByTestId('provOptions').map(li => li);\n-    expect(provOptions.map(li => li.textContent).toString()).toEqual('Coarse-grained,Off');\n-    fireEvent.select(provOptions[1]);\n-    expect(getByText('Off')).toBeInTheDocument();\n+    fireEvent.click(getByText('Processors'));\n+    fireEvent.change(getByLabelText('processors-textarea'), { target: { value: 'processors-changed' }});\n+    expect(getByLabelText('processors-textarea')).toHaveValue('processors-changed');\n+\n+    fireEvent.click(getByText('Custom Hook'));\n+    fireEvent.change(getByLabelText('customHook-textarea'), { target: { value: 'hook-changed' }});\n+    expect(getByLabelText('customHook-textarea')).toHaveValue('hook-changed');\n+\n+  });\n+\n+  test('Verify no/invalid/valid JSON is recognized correctly in JSON fields', async () => {\n+    let getByText, getByLabelText, queryAllByText;\n+    await act(async () => {\n+      const renderResults = render(\n+        <AdvancedSettingsDialog {...data.advancedMapping} />\n+      );\n+      getByText = renderResults.getByText;\n+      getByLabelText = renderResults.getByLabelText;\n+      queryAllByText = renderResults.queryAllByText;\n+    });\n \n+    // Expand all textarea inputs\n+    fireEvent.click(getByText('Processors'));\n     fireEvent.click(getByText('Custom Hook'));\n-    fireEvent.change(getByPlaceholderText('Please enter module'), { target: { value: 'test-module' }});\n-    expect(getByPlaceholderText('Please enter module')).toHaveValue('test-module');\n-    fireEvent.change(getByPlaceholderText('Please enter parameters'), { target: { value: '{}' }});\n-    expect(getByPlaceholderText('Please enter parameters')).toHaveValue('{}');\n-    fireEvent.change(getByPlaceholderText('Please enter user information'), { target: { value: 'test-user' }});\n-    expect(getByPlaceholderText('Please enter user information')).toHaveValue('test-user');\n-    fireEvent.click(getByRole('switch'));\n-    expect(getByText('ON')).toBeInTheDocument();\n+\n+    // No errors at start\n+    expect(queryAllByText('Invalid JSON').length === 0);\n+\n+    // No JSON (empty field)\n+    fireEvent.change(getByLabelText('headers-textarea'), { target: { value: '' }});\n+    expect(queryAllByText('Invalid JSON').length === 0);\n+    fireEvent.change(getByLabelText('processors-textarea'), { target: { value: '' }});\n+    expect(queryAllByText('Invalid JSON').length === 0);\n+    fireEvent.change(getByLabelText('processors-textarea'), { target: { value: '' }});\n+    expect(queryAllByText('Invalid JSON').length === 0);\n+\n+    // Invalid JSON\n+    fireEvent.change(getByLabelText('headers-textarea'), { target: { value: '{\"badJSON\": \"noClosingBracket\"' }});\n+    expect(queryAllByText('Invalid JSON').length === 1);\n+    fireEvent.change(getByLabelText('processors-textarea'), { target: { value: '{\"badJSON\": \"noClosingBracket\"' }});\n+    expect(queryAllByText('Invalid JSON').length === 2);\n+    fireEvent.change(getByLabelText('processors-textarea'), { target: { value: '{\"badJSON\": \"noClosingBracket\"' }});\n+    expect(queryAllByText('Invalid JSON').length === 3);\n+\n+    // Valid JSON\n+    fireEvent.change(getByLabelText('headers-textarea'), { target: { value: '{\"goodJSON\": true}' }});\n+    expect(queryAllByText('Invalid JSON').length === 2);\n+    fireEvent.change(getByLabelText('processors-textarea'), { target: { value: '{\"goodJSON\": true}' }});\n+    expect(queryAllByText('Invalid JSON').length === 1);\n+    fireEvent.change(getByLabelText('processors-textarea'), { target: { value: '{\"goodJSON\": true}' }});\n+    expect(queryAllByText('Invalid JSON').length === 0);\n+\n   });\n \n-  test('Verify read only users cannot edit settings', () => {\n-    const { getByText, getByPlaceholderText, getByRole } = render(<AdvancedSettingsDialog {...data.advancedSettings} canWrite={false} />);\n+  test('Verify read only users cannot edit settings', async () => {\n+    let getByText, getByPlaceholderText;\n+    await act(async () => {\n+      const renderResults = render(\n+        <AdvancedSettingsDialog {...data.advancedMapping} canWrite={false} />\n+      );\n+      getByText = renderResults.getByText;\n+      getByPlaceholderText = renderResults.getByPlaceholderText;\n+    });\n+\n     expect(document.querySelector('#sourceDatabase')).toHaveClass('ant-select-disabled');\n     expect(document.querySelector('#targetDatabase')).toHaveClass('ant-select-disabled');\n     expect(document.querySelector('#additionalColl')).toHaveClass('ant-select-disabled');\n     expect(getByPlaceholderText('Please enter target permissions')).toBeDisabled();\n     expect(getByPlaceholderText('Please enter batch size')).toBeDisabled();\n+    expect(document.querySelector('#headers')).toHaveClass('ant-input-disabled');\n+    expect(document.querySelector('#targetFormat')).toHaveClass('ant-select-disabled');\n     expect(document.querySelector('#provGranularity')).toHaveClass('ant-select-disabled');\n \n+    fireEvent.click(getByText('Processors'));\n+    expect(document.querySelector('#processors')).toHaveClass('ant-input-disabled');\n+\n     fireEvent.click(getByText('Custom Hook'));\n-    expect(getByPlaceholderText('Please enter module')).toBeDisabled();\n-    expect(getByPlaceholderText('Please enter parameters')).toBeDisabled();\n-    expect(getByPlaceholderText('Please enter user information')).toBeDisabled();\n-    expect(getByRole('switch')).toBeDisabled();\n+    expect(document.querySelector('#customHook')).toHaveClass('ant-input-disabled');\n   });\n \n-  test('Verify put is called when Mapping configuration is saved', async () => {\n-    //Enhance this test once DHFPROD-4712 is fixed\n-    axiosMock.put.mockImplementationOnce(jest.fn(() => Promise.resolve({ status: 200, data: {} })));\n-    const { getByText } = render(<AdvancedSettingsDialog {...data.advancedSettings} />);\n+  test('Verify post is called when Mapping settings are saved', async () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 338}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE2ODIxMA==", "bodyText": "Can we remove this.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437168210", "createdAt": "2020-06-09T06:34:40Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/mapping-card.test.tsx", "diffHunk": "@@ -131,16 +131,18 @@ describe(\"Entity Tiles component\", () => {\n       await wait(() => {\n           fireEvent.click(saveButton);\n       });\n-      expect(axiosMock.put).toHaveBeenCalledTimes(1);\n+      expect(axiosMock.post).toHaveBeenCalledTimes(1);\n \n       //Open settings again\n       await wait(() => {\n           fireEvent.click(getByRole(\"settings-mapping\"));\n       })\n-      expect(getByText('Batch Size:')).toBeInTheDocument();\n+\n+      expect(getByText('Batch Size')).toBeInTheDocument();\n       expect(getByPlaceholderText('Please enter batch size')).toHaveValue('50');\n \n       targetPermissions = getByPlaceholderText(\"Please enter target permissions\");\n+      debug();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE2ODQ4NA==", "bodyText": "This should be PUT. We have a test using POST in advanced-settings component already.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437168484", "createdAt": "2020-06-09T06:35:15Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/mapping-card.test.tsx", "diffHunk": "@@ -131,16 +131,18 @@ describe(\"Entity Tiles component\", () => {\n       await wait(() => {\n           fireEvent.click(saveButton);\n       });\n-      expect(axiosMock.put).toHaveBeenCalledTimes(1);\n+      expect(axiosMock.post).toHaveBeenCalledTimes(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE2OTE1Mw==", "bodyText": "This should be PUT. We have a test using POST in advanced-settings component already.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437169153", "createdAt": "2020-06-09T06:37:01Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/load/load-list.test.tsx", "diffHunk": "@@ -62,25 +63,25 @@ describe('Load data component', () => {\n     await wait(() => {\n         fireEvent.click(saveButton);\n     });\n-    expect(axiosMock.put).toHaveBeenCalledTimes(1);\n+    expect(axiosMock.post).toHaveBeenCalledTimes(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE2OTk5Nw==", "bodyText": "GET call to /settings should be restored.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437169997", "createdAt": "2020-06-09T06:39:09Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/load/load-list.test.tsx", "diffHunk": "@@ -62,25 +63,25 @@ describe('Load data component', () => {\n     await wait(() => {\n         fireEvent.click(saveButton);\n     });\n-    expect(axiosMock.put).toHaveBeenCalledTimes(1);\n+    expect(axiosMock.post).toHaveBeenCalledTimes(1);\n \n     //open settings again\n \n     await wait(() => {\n         fireEvent.click(getByTestId(data.loadData.data[0].name+'-settings'));\n     })\n-    let targetCollection = getByTitle('customerCollection'); // Additional target collection (Added by user)\n+    let targetCollection = getByTitle('addedCollection'); // Additional target collection (Added by user)\n \n     expect(getByText('Advanced Settings')).toBeInTheDocument();\n     // Check if the settings API is being called.\n-    expect(axiosMock.get).toBeCalledWith('/api/steps/ingestion/' + data.loadData.data[0].name + '/settings');\n-    expect(getByText('Target Collections:')).toBeInTheDocument();\n+    expect(axiosMock.get).toBeCalledWith('/api/steps/ingestion/' + data.loadData.data[0].name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3MDY2Mw==", "bodyText": "we need the collection name to be same as the step name since this is a default collection. Must restore.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437170663", "createdAt": "2020-06-09T06:40:48Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/config/load.config.ts", "diffHunk": "@@ -49,10 +55,19 @@ const loadSettings = {\"data\" :\n         \"targetFormat\": \"json\",\n         \"targetDatabase\": \"data-hub-STAGING\",\n         \"collections\": [\n-          \"testLoad\"\n+          \"testCollection\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3MTQyOQ==", "bodyText": "Must restore PUT. We need Delete, Put, Post and Get.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437171429", "createdAt": "2020-06-09T06:42:36Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/config/mocks.config.ts", "diffHunk": "@@ -1,156 +1,220 @@\n import loadData from \"./load.config\";\n import curateData from \"./run.config\";\n-import axiosMock from \"axios\";\n+import advancedData from \"./advanced-settings.config\";\n \n const loadAPI = (axiosMock) => {\n-    axiosMock.delete['mockImplementation']((url) => {\n+  axiosMock.delete['mockImplementation']((url) => {\n+    switch (url) {\n+      case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+        return Promise.resolve(loadData.genericSuccess);\n+      default:\n+        return Promise.reject(new Error('not found'))\n+    }\n+  });\n+  axiosMock.post['mockImplementation']((url) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3MTg4Nw==", "bodyText": "Must restore PUT. We need Delete, Put, Post and Get.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437171887", "createdAt": "2020-06-09T06:43:39Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/config/mocks.config.ts", "diffHunk": "@@ -1,156 +1,220 @@\n import loadData from \"./load.config\";\n import curateData from \"./run.config\";\n-import axiosMock from \"axios\";\n+import advancedData from \"./advanced-settings.config\";\n \n const loadAPI = (axiosMock) => {\n-    axiosMock.delete['mockImplementation']((url) => {\n+  axiosMock.delete['mockImplementation']((url) => {\n+    switch (url) {\n+      case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+        return Promise.resolve(loadData.genericSuccess);\n+      default:\n+        return Promise.reject(new Error('not found'))\n+    }\n+  });\n+  axiosMock.post['mockImplementation']((url) => {\n       switch (url) {\n-        case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n-          return Promise.resolve(loadData.genericSuccess);\n-        default:\n-          return Promise.reject(new Error('not found'))\n+          case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+              return Promise.resolve({\n+                  \"data\": {},\n+                  \"status\": 200\n+              });\n+          default:\n+              return Promise.reject(new Error('not found'));\n       }\n-    });\n-    axiosMock.put['mockImplementation']((url) => {\n-        switch (url) {\n-            case '/api/steps/ingestion/' + loadData.loads.data[0].name + '/settings':\n-                return Promise.resolve({\n-                    \"data\": {},\n-                    \"status\": 200\n-                });\n-            default:\n-                return Promise.reject(new Error('not found'));\n-        }\n-    })\n-    return axiosMock.get['mockImplementation']((url) => {\n-      switch (url) {\n-        case '/api/flows':\n-          return Promise.resolve(loadData.flows);\n-        case '/api/steps/ingestion':\n-          return Promise.resolve(loadData.loads);\n-        case '/api/steps/ingestion/' + loadData.loads.data[0].name + '/settings':\n-          return Promise.resolve(loadData.loadSettings);\n-        default:\n-          return Promise.reject(new Error('not found'));\n-      }\n-    })\n-  };\n+  })\n+  return axiosMock.get['mockImplementation']((url) => {\n+    switch (url) {\n+      case '/api/flows':\n+        return Promise.resolve(loadData.flows);\n+      case '/api/steps/ingestion':\n+        return Promise.resolve(loadData.loads);\n+      case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+        return Promise.resolve(loadData.loadSettings);\n+      default:\n+        return Promise.reject(new Error('not found'));\n+    }\n+  })\n+};\n \n-  const curateAPI = (axiosMock) => {\n-    axiosMock.delete['mockImplementation']((url) => {\n-        switch (url) {\n-            case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name:\n-                return Promise.resolve(loadData.genericSuccess);\n-            default:\n-                return Promise.reject(new Error('not found'))\n-        }\n-    });\n-    axiosMock.put['mockImplementation']((url) => {\n-        switch (url) {\n-            case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name + '/settings':\n-                return Promise.resolve({\n-                    \"data\": {},\n-                    \"status\": 200\n-                });\n-            default:\n-                return Promise.reject(new Error('not found'));\n-        }\n-    });\n-    return axiosMock.get['mockImplementation']((url) => {\n-      switch (url) {\n-        case '/api/flows':\n-          return Promise.resolve(curateData.flows)\n-        case '/api/models/primaryEntityTypes':\n-          return Promise.resolve(curateData.primaryEntityTypes);\n-        case '/api/steps/ingestion':\n-          return Promise.resolve(curateData.loads);\n-        case '/api/steps/ingestion/' + loadData.loads.data[0].name + '/settings':\n-          return Promise.resolve(curateData.loadSettings);\n-        case '/api/steps/mapping':\n-          return Promise.resolve(curateData.mappings);\n-        case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name + '/settings':\n-          return Promise.resolve(curateData.mappingSettings);\n-        case '/api/artifacts/matching':\n-          return Promise.resolve(curateData.matchings);\n+const curateAPI = (axiosMock) => {\n+  axiosMock.delete['mockImplementation']((url) => {\n+    switch (url) {\n+      case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+        return Promise.resolve(loadData.genericSuccess);\n+      case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name:\n+        return Promise.resolve(loadData.genericSuccess);\n+      default:\n+        return Promise.reject(new Error('not found'))\n+    }\n+  });\n+  axiosMock.post['mockImplementation']((url) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3NDA2Mg==", "bodyText": "Can delete this block 87-127", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437174062", "createdAt": "2020-06-09T06:48:57Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/config/mocks.config.ts", "diffHunk": "@@ -1,156 +1,220 @@\n import loadData from \"./load.config\";\n import curateData from \"./run.config\";\n-import axiosMock from \"axios\";\n+import advancedData from \"./advanced-settings.config\";\n \n const loadAPI = (axiosMock) => {\n-    axiosMock.delete['mockImplementation']((url) => {\n+  axiosMock.delete['mockImplementation']((url) => {\n+    switch (url) {\n+      case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+        return Promise.resolve(loadData.genericSuccess);\n+      default:\n+        return Promise.reject(new Error('not found'))\n+    }\n+  });\n+  axiosMock.post['mockImplementation']((url) => {\n       switch (url) {\n-        case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n-          return Promise.resolve(loadData.genericSuccess);\n-        default:\n-          return Promise.reject(new Error('not found'))\n+          case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+              return Promise.resolve({\n+                  \"data\": {},\n+                  \"status\": 200\n+              });\n+          default:\n+              return Promise.reject(new Error('not found'));\n       }\n-    });\n-    axiosMock.put['mockImplementation']((url) => {\n-        switch (url) {\n-            case '/api/steps/ingestion/' + loadData.loads.data[0].name + '/settings':\n-                return Promise.resolve({\n-                    \"data\": {},\n-                    \"status\": 200\n-                });\n-            default:\n-                return Promise.reject(new Error('not found'));\n-        }\n-    })\n-    return axiosMock.get['mockImplementation']((url) => {\n-      switch (url) {\n-        case '/api/flows':\n-          return Promise.resolve(loadData.flows);\n-        case '/api/steps/ingestion':\n-          return Promise.resolve(loadData.loads);\n-        case '/api/steps/ingestion/' + loadData.loads.data[0].name + '/settings':\n-          return Promise.resolve(loadData.loadSettings);\n-        default:\n-          return Promise.reject(new Error('not found'));\n-      }\n-    })\n-  };\n+  })\n+  return axiosMock.get['mockImplementation']((url) => {\n+    switch (url) {\n+      case '/api/flows':\n+        return Promise.resolve(loadData.flows);\n+      case '/api/steps/ingestion':\n+        return Promise.resolve(loadData.loads);\n+      case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+        return Promise.resolve(loadData.loadSettings);\n+      default:\n+        return Promise.reject(new Error('not found'));\n+    }\n+  })\n+};\n \n-  const curateAPI = (axiosMock) => {\n-    axiosMock.delete['mockImplementation']((url) => {\n-        switch (url) {\n-            case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name:\n-                return Promise.resolve(loadData.genericSuccess);\n-            default:\n-                return Promise.reject(new Error('not found'))\n-        }\n-    });\n-    axiosMock.put['mockImplementation']((url) => {\n-        switch (url) {\n-            case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name + '/settings':\n-                return Promise.resolve({\n-                    \"data\": {},\n-                    \"status\": 200\n-                });\n-            default:\n-                return Promise.reject(new Error('not found'));\n-        }\n-    });\n-    return axiosMock.get['mockImplementation']((url) => {\n-      switch (url) {\n-        case '/api/flows':\n-          return Promise.resolve(curateData.flows)\n-        case '/api/models/primaryEntityTypes':\n-          return Promise.resolve(curateData.primaryEntityTypes);\n-        case '/api/steps/ingestion':\n-          return Promise.resolve(curateData.loads);\n-        case '/api/steps/ingestion/' + loadData.loads.data[0].name + '/settings':\n-          return Promise.resolve(curateData.loadSettings);\n-        case '/api/steps/mapping':\n-          return Promise.resolve(curateData.mappings);\n-        case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name + '/settings':\n-          return Promise.resolve(curateData.mappingSettings);\n-        case '/api/artifacts/matching':\n-          return Promise.resolve(curateData.matchings);\n+const curateAPI = (axiosMock) => {\n+  axiosMock.delete['mockImplementation']((url) => {\n+    switch (url) {\n+      case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+        return Promise.resolve(loadData.genericSuccess);\n+      case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name:\n+        return Promise.resolve(loadData.genericSuccess);\n+      default:\n+        return Promise.reject(new Error('not found'))\n+    }\n+  });\n+  axiosMock.post['mockImplementation']((url) => {\n+    switch (url) {\n+        case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name:\n+            return Promise.resolve({\n+                \"data\": {},\n+                \"status\": 200\n+            });\n         default:\n-          return Promise.reject(new Error('not found'));\n-      }\n-    })\n-  };\n+            return Promise.reject(new Error('not found'));\n+    }\n+  });\n+  return axiosMock.get['mockImplementation']((url) => {\n+    switch (url) {\n+      case '/api/flows':\n+        return Promise.resolve(loadData.flows);\n+      case '/api/models/primaryEntityTypes':\n+        return Promise.resolve(curateData.primaryEntityTypes);\n+      case '/api/steps/ingestion':\n+        return Promise.resolve(loadData.loads);\n+      // case '/api/steps/ingestion/' + loadData.loads.data[0].name + '/settings':\n+      //   return Promise.resolve(loadData.loadSettings);\n+      case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+        return Promise.resolve(loadData.loadSettings);    \n+      case '/api/steps/mapping':\n+        return Promise.resolve(curateData.mappings);\n+      // case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name + '/settings':\n+      //   return Promise.resolve(curateData.mappingSettings);\n+      case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name:\n+        return Promise.resolve(curateData.mappingSettings);\n+      case '/api/artifacts/matching':\n+        return Promise.resolve(curateData.matchings);\n+      default:\n+        return Promise.reject(new Error('not found'));\n+    }\n+  })\n+};\n \n-  const runAPI = (axiosMock) => {\n-    return axiosMock.get['mockImplementation']((url) => {\n-      switch (url) {\n-        case '/api/flows':\n-          return Promise.resolve(curateData.flowsWithMapping)\n-        case '/api/steps/ingestion':\n-          return Promise.resolve(curateData.loads);\n-        case '/api/steps/mapping':\n-          return Promise.resolve(curateData.mappings);\n-        case '/api/jobs/e4590649-8c4b-419c-b6a1-473069186592':\n-          return Promise.resolve(curateData.jobRespSuccess)\n-        default:\n-          return Promise.reject(new Error('not found'));\n-      }\n-    })\n-  };\n+// const curateAPI = (axiosMock) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3NDY3Ng==", "bodyText": "Need tests asserting tooltip text for headers, processors and customHook.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437174676", "createdAt": "2020-06-09T06:50:24Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/config/tooltips.config.js", "diffHunk": "@@ -5,12 +5,12 @@ const AdvancedSettings = {\n     'targetFormat': 'The format of the documents in the target database.',\n     'additionalCollections': 'The collection tags to add to the default tags assigned to the processed document.',\n     'targetPermissions': 'A comma-delimited string that defines permissions required to access the processed document. ' +\n-      'The string must be in the format role,capability,role,capability,..., where capability can be read, insert, update, or execute.',\n-    'module': 'The path to your custom hook module.',\n-    'cHParameters': 'Parameters, as key-value pairs, to pass to your custom hook module.',\n-    'user': 'The user account to use to run the module. The default is the user running the flow; e.g., data-hub-operator.',\n-    'runBefore': 'Choose whether to run the module before or after the core processes of the step.',\n-    /* The following are for *Custom*Tooltips. */\n+    'The string must be in the format role,capability,role,capability,..., where capability can be read, insert, update, or execute.',\n+    'headers': 'A JSON object that represents additional metadata to add to the header section of the envelope of each document.',\n+    'provGranularity': 'The level of detail logged for provenance. Choose *coarse* for the default level or *off* for no provenance logging.',\n+    'processors': 'Custom modules that perform additional processes after the core step processes are completed and before the results are saved.',\n+    'customHook': 'A custom module that performs additional processes in its own transaction before or after the core step transaction. Results are saved within a transaction.',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3NzAwOQ==", "bodyText": "Need to wrap 28-30 in await act. All other changes to this test must be restored. Edit test shouldnt be removed.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437177009", "createdAt": "2020-06-09T06:55:38Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/pages/Load.test.tsx", "diffHunk": "@@ -25,7 +25,9 @@ describe('Load component', () => {\n         const authorityService = new AuthoritiesService();\n         authorityService.setAuthorities(['readIngestion']);\n \n-        const { getByText, getAllByText, getByLabelText, getByTestId, queryByTestId, queryByText, queryByTitle } = await render(<AuthoritiesContext.Provider value={authorityService}><Load/></AuthoritiesContext.Provider>);\n+        const { getByText, getByTitle, getByLabelText, getByTestId, queryByTestId, queryByText, queryByTitle } = render(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3Nzc1Nw==", "bodyText": "Can we pls remove debug.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437177757", "createdAt": "2020-06-09T06:57:16Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/mapping-card.test.tsx", "diffHunk": "@@ -106,7 +106,7 @@ describe(\"Entity Tiles component\", () => {\n       let mapping = data.mappings.data[0].artifacts;\n       const noopFun = () => {};\n       const deleteMappingArtifact = jest.fn(() => {});\n-      const {getByText,getByRole, getByPlaceholderText} = render(\n+      const {getByText,getByRole, getByPlaceholderText, debug} = render(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MjI0NDM5", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#pullrequestreview-427224439", "createdAt": "2020-06-09T14:42:22Z", "commit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDo0MjoyMlrOGhNhoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDo0MjoyMlrOGhNhoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ3Nzc5Mw==", "bodyText": "Its better to use variable than string literal for test value.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437477793", "createdAt": "2020-06-09T14:42:22Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/load/load-list.test.tsx", "diffHunk": "@@ -62,25 +63,25 @@ describe('Load data component', () => {\n     await wait(() => {\n         fireEvent.click(saveButton);\n     });\n-    expect(axiosMock.put).toHaveBeenCalledTimes(1);\n+    expect(axiosMock.post).toHaveBeenCalledTimes(1);\n \n     //open settings again\n \n     await wait(() => {\n         fireEvent.click(getByTestId(data.loadData.data[0].name+'-settings'));\n     })\n-    let targetCollection = getByTitle('customerCollection'); // Additional target collection (Added by user)\n+    let targetCollection = getByTitle('addedCollection'); // Additional target collection (Added by user)\n \n     expect(getByText('Advanced Settings')).toBeInTheDocument();\n     // Check if the settings API is being called.\n-    expect(axiosMock.get).toBeCalledWith('/api/steps/ingestion/' + data.loadData.data[0].name + '/settings');\n-    expect(getByText('Target Collections:')).toBeInTheDocument();\n+    expect(axiosMock.get).toBeCalledWith('/api/steps/ingestion/' + data.loadData.data[0].name);\n+    expect(getByText('Target Collections')).toBeInTheDocument();\n     expect(targetCollection).toBeInTheDocument(); //Should be available in the document\n-    expect(targetCollection).not.toBe(data.loadData.data[0].name); //Should not be same as the default collection\n-    expect(getByText('Default Collections:')).toBeInTheDocument();\n-    expect(getByTestId(`defaultCollections-${data.loadData.data[0].name}`)).toBeInTheDocument();\n-    expect(queryByTitle(data.loadData.data[0].name)).not.toBeInTheDocument();  // The default collection should not be a part of the Target Collection list\n-    expect(getByText('Batch Size:')).toBeInTheDocument();\n+    expect(targetCollection).not.toBe('testCollection'); //Should not be same as the default collection", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 48}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428", "author": {"user": {"login": "wooldridge", "name": "Mike Wooldridge"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/aca4d2c8782aaa6c85a64d91547eba14d712f428", "committedDate": "2020-06-09T00:44:21Z", "message": "DHFPROD-4969: Update Advanced Settings with JSON fields\n\nFields: Header Content, Processors, Custom Hook\nFor Load and Mapping steps.\nFix \"unmounted component\" warning and cleanup wrapping\nwith act."}, "afterCommit": {"oid": "af983acf25809ebfbd9236eb1c9860ac32217cb1", "author": {"user": {"login": "wooldridge", "name": "Mike Wooldridge"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/af983acf25809ebfbd9236eb1c9860ac32217cb1", "committedDate": "2020-06-09T18:01:33Z", "message": "DHFPROD-4969: Update Advanced Settings with JSON fields\n\nFields: Header Content, Processors, Custom Hook\nFor Load and Mapping steps.\nFix \"unmounted component\" warning and cleanup wrapping\nwith act."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "af983acf25809ebfbd9236eb1c9860ac32217cb1", "author": {"user": {"login": "wooldridge", "name": "Mike Wooldridge"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/af983acf25809ebfbd9236eb1c9860ac32217cb1", "committedDate": "2020-06-09T18:01:33Z", "message": "DHFPROD-4969: Update Advanced Settings with JSON fields\n\nFields: Header Content, Processors, Custom Hook\nFor Load and Mapping steps.\nFix \"unmounted component\" warning and cleanup wrapping\nwith act."}, "afterCommit": {"oid": "03cc46d30695e581a896c7b2847fa68c8b586822", "author": {"user": {"login": "wooldridge", "name": "Mike Wooldridge"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/03cc46d30695e581a896c7b2847fa68c8b586822", "committedDate": "2020-06-09T18:25:38Z", "message": "DHFPROD-4969: Update Advanced Settings with JSON fields\n\nFields: Header Content, Processors, Custom Hook\nFor Load and Mapping steps.\nFix \"unmounted component\" warning and cleanup wrapping\nwith act."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NDQzMDk0", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#pullrequestreview-427443094", "createdAt": "2020-06-09T18:44:17Z", "commit": {"oid": "03cc46d30695e581a896c7b2847fa68c8b586822"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODo0NDoxN1rOGhXmfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODo0NDoxN1rOGhXmfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY0Mjg3Ng==", "bodyText": "test for edit seems to have been removed.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437642876", "createdAt": "2020-06-09T18:44:17Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/pages/Load.test.tsx", "diffHunk": "@@ -38,38 +40,40 @@ describe('Load component', () => {\n         // test 'Add New' button\n         expect(queryByText('Add New')).not.toBeInTheDocument();\n \n-        //test settings\n-        fireEvent.click(getByTestId('testLoad-settings'));\n-        expect(await(waitForElement(() => getByText('Target Database:')))).toBeInTheDocument();\n-        expect(getAllByText('Save')[0]).toBeDisabled();\n-        fireEvent.click(getAllByText('Cancel')[0]);\n+        // test settings\n+        await act(async () => {\n+            await fireEvent.click(getByTestId('testLoad-settings'));\n+        });\n+        expect(await(waitForElement(() => getByText('Target Database')))).toBeInTheDocument();\n+\n+        expect(getByText('Save')).toBeDisabled();\n+        await act(async () => {\n+            await fireEvent.click(getByText('Cancel'));\n+        });\n+        // test delete\n+        expect(queryByTestId('testLoad-delete')).not.toBeInTheDocument();\n \n         //test edit\n         fireEvent.click(getAllByText('testLoad')[0]);\n-        expect(await(waitForElement(() => getByText('Edit Data Load')))).toBeInTheDocument();\n+        expect(getByText('Edit Data Load')).toBeInTheDocument();\n         expect(getAllByText('Save')[0]).toBeDisabled();\n         fireEvent.click(getAllByText('Cancel')[0]);\n \n-        // test delete\n-        expect(queryByTestId('testLoad-delete')).not.toBeInTheDocument();\n-\n         // Check card layout\n         fireEvent.click(getByLabelText('switch-view-card'));\n \n         // test 'Add New' button\n         expect(queryByText('Add New')).not.toBeInTheDocument();\n \n         // test settings\n-        fireEvent.click(getByLabelText('icon: setting'));\n-        expect(await(waitForElement(() => getByText('Target Database:')))).toBeInTheDocument();\n-        expect(getAllByText('Save')[0]).toBeDisabled();\n-        fireEvent.click(getAllByText('Cancel')[0]);\n-\n-        //test edit\n-        fireEvent.click(getByTestId('testLoad-edit'));\n-        expect(await(waitForElement(() => getByText('Edit Data Load')))).toBeInTheDocument();\n-        expect(getAllByText('Save')[0]).toBeDisabled();\n-        fireEvent.click(getAllByText('Cancel')[0]);\n+        await act(async () => {\n+            await fireEvent.click(getByLabelText('icon: setting'));\n+        });\n+        expect(await(waitForElement(() => getByText('Target Database')))).toBeInTheDocument();\n+        expect(getByText('Save')).toBeDisabled();\n+        await act(async () => {\n+            await fireEvent.click(getByText('Cancel'));\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03cc46d30695e581a896c7b2847fa68c8b586822"}, "originalPosition": 75}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "03cc46d30695e581a896c7b2847fa68c8b586822", "author": {"user": {"login": "wooldridge", "name": "Mike Wooldridge"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/03cc46d30695e581a896c7b2847fa68c8b586822", "committedDate": "2020-06-09T18:25:38Z", "message": "DHFPROD-4969: Update Advanced Settings with JSON fields\n\nFields: Header Content, Processors, Custom Hook\nFor Load and Mapping steps.\nFix \"unmounted component\" warning and cleanup wrapping\nwith act."}, "afterCommit": {"oid": "d7647ee86cbef8f93895b533e37be6e9a776d994", "author": {"user": {"login": "wooldridge", "name": "Mike Wooldridge"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/d7647ee86cbef8f93895b533e37be6e9a776d994", "committedDate": "2020-06-09T21:31:54Z", "message": "DHFPROD-4969: Update Advanced Settings with JSON fields\n\nFields: Header Content, Processors, Custom Hook\nFor Load and Mapping steps.\nFix \"unmounted component\" warning and cleanup wrapping\nwith act."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d7647ee86cbef8f93895b533e37be6e9a776d994", "author": {"user": {"login": "wooldridge", "name": "Mike Wooldridge"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/d7647ee86cbef8f93895b533e37be6e9a776d994", "committedDate": "2020-06-09T21:31:54Z", "message": "DHFPROD-4969: Update Advanced Settings with JSON fields\n\nFields: Header Content, Processors, Custom Hook\nFor Load and Mapping steps.\nFix \"unmounted component\" warning and cleanup wrapping\nwith act."}, "afterCommit": {"oid": "d90296310f50d36638790a73b264d9a79fab85c7", "author": {"user": {"login": "wooldridge", "name": "Mike Wooldridge"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/d90296310f50d36638790a73b264d9a79fab85c7", "committedDate": "2020-06-09T22:42:14Z", "message": "DHFPROD-4969: Update Advanced Settings with JSON fields\n\nFields: Header Content, Processors, Custom Hook\nFor Load and Mapping steps.\nFix \"unmounted component\" warning and cleanup wrapping\nwith act."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d90296310f50d36638790a73b264d9a79fab85c7", "author": {"user": {"login": "wooldridge", "name": "Mike Wooldridge"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/d90296310f50d36638790a73b264d9a79fab85c7", "committedDate": "2020-06-09T22:42:14Z", "message": "DHFPROD-4969: Update Advanced Settings with JSON fields\n\nFields: Header Content, Processors, Custom Hook\nFor Load and Mapping steps.\nFix \"unmounted component\" warning and cleanup wrapping\nwith act."}, "afterCommit": {"oid": "53ed19763b347a22cfeb00807f65ffaaba6eb0b0", "author": {"user": {"login": "wooldridge", "name": "Mike Wooldridge"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/53ed19763b347a22cfeb00807f65ffaaba6eb0b0", "committedDate": "2020-06-09T23:07:49Z", "message": "DHFPROD-4969: Update Advanced Settings with JSON fields\n\nFields: Header Content, Processors, Custom Hook\nFor Load and Mapping steps.\nFix \"unmounted component\" warning and cleanup wrapping\nwith act."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73929fc9bfd9b59516ddc1b6b7a17edda171cdb1", "author": {"user": {"login": "wooldridge", "name": "Mike Wooldridge"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/73929fc9bfd9b59516ddc1b6b7a17edda171cdb1", "committedDate": "2020-06-10T00:55:50Z", "message": "DHFPROD-4969: Update Advanced Settings with JSON fields\n\nFields: Header Content, Processors, Custom Hook\nFor Load and Mapping steps.\nFix \"unmounted component\" warning and cleanup wrapping\nwith act.\nCleanup obsolete step settings endpoints"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "53ed19763b347a22cfeb00807f65ffaaba6eb0b0", "author": {"user": {"login": "wooldridge", "name": "Mike Wooldridge"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/53ed19763b347a22cfeb00807f65ffaaba6eb0b0", "committedDate": "2020-06-09T23:07:49Z", "message": "DHFPROD-4969: Update Advanced Settings with JSON fields\n\nFields: Header Content, Processors, Custom Hook\nFor Load and Mapping steps.\nFix \"unmounted component\" warning and cleanup wrapping\nwith act."}, "afterCommit": {"oid": "73929fc9bfd9b59516ddc1b6b7a17edda171cdb1", "author": {"user": {"login": "wooldridge", "name": "Mike Wooldridge"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/73929fc9bfd9b59516ddc1b6b7a17edda171cdb1", "committedDate": "2020-06-10T00:55:50Z", "message": "DHFPROD-4969: Update Advanced Settings with JSON fields\n\nFields: Header Content, Processors, Custom Hook\nFor Load and Mapping steps.\nFix \"unmounted component\" warning and cleanup wrapping\nwith act.\nCleanup obsolete step settings endpoints"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NjQzMDk1", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#pullrequestreview-427643095", "createdAt": "2020-06-10T01:01:42Z", "commit": {"oid": "73929fc9bfd9b59516ddc1b6b7a17edda171cdb1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NjQ1NTE0", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#pullrequestreview-427645514", "createdAt": "2020-06-10T01:09:51Z", "commit": {"oid": "73929fc9bfd9b59516ddc1b6b7a17edda171cdb1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NjU5ODgw", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#pullrequestreview-427659880", "createdAt": "2020-06-10T01:58:40Z", "commit": {"oid": "73929fc9bfd9b59516ddc1b6b7a17edda171cdb1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2731, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}