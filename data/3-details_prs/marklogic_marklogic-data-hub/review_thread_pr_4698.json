{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwODQxMDE2", "number": 4698, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwMDozMjo0MFrOEscEPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMToxMTowNVrOEsx6qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MDMyNjM5OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/ingestion/bulkIngester.sjs", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwMDozMjo0MFrOHfr90g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDoyNTo1NFrOHgMKnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk4ODI0Mg==", "bodyText": "Pinging @srinathgit  about this - there's some duplication between this and invoke-queue-write.sjs. I think what both clients are asking is - are any of these temporal collections, and if so, can you please give me back the array of collections that I should use for inserting the document?\nIf the function returns null, then that means none of the collections are temporal, and the client should do an xdmp.documentInsert using whatever collections were provided.\nIf the functions returns an array of length 1 or greater, then that means at least one of the collections was temporal, and the client should do a temporal.documentInsert. And the client doesn't have to worry about filtering out \"latest\" and \"uri\" either, the function will handle it. Which means the function should take \"uri\" as an argument too.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4698#discussion_r502988242", "createdAt": "2020-10-12T00:32:40Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/ingestion/bulkIngester.sjs", "diffHunk": "@@ -29,11 +29,21 @@ const consts = require(\"/data-hub/5/impl/consts.sjs\");\n const HubUtils = require(\"/data-hub/5/impl/hub-utils.sjs\");\n const state = fn.head(xdmp.fromJSON(endpointState));\n \n+const temporal = require(\"/MarkLogic/temporal.xqy\");\n+const temporalLib = require(\"/data-hub/5/temporal/hub-temporal.sjs\");\n+\n const work = fn.head(xdmp.fromJSON(workUnit));\n \n const uriPrefix = work.uriprefix != null ? work.uriprefix : \"\";\n \n const collections = work.collections != null ? work.collections.split(',') : [];\n+const temporalCollections = temporalLib.getTemporalCollections().toArray().reduce((acc, col) => {\n+    acc[col] = true;\n+    return acc;\n+}, {});\n+\n+let temporalCollection = collections.concat(collections).find((col) => temporalCollections[col]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd0b077c2d11221c834ef81a72b4fce32ba580d2"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyNTM1MQ==", "bodyText": "@rjrudin ,\nIf I understand correctly, you are suggesting refactor the code so as to avoid duplication. If so, @SameeraPriyathamTadikonda , can you file a task and assign it to me, I will take it up once I am done with tasks for this sprint.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4698#discussion_r503425351", "createdAt": "2020-10-12T17:04:58Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/ingestion/bulkIngester.sjs", "diffHunk": "@@ -29,11 +29,21 @@ const consts = require(\"/data-hub/5/impl/consts.sjs\");\n const HubUtils = require(\"/data-hub/5/impl/hub-utils.sjs\");\n const state = fn.head(xdmp.fromJSON(endpointState));\n \n+const temporal = require(\"/MarkLogic/temporal.xqy\");\n+const temporalLib = require(\"/data-hub/5/temporal/hub-temporal.sjs\");\n+\n const work = fn.head(xdmp.fromJSON(workUnit));\n \n const uriPrefix = work.uriprefix != null ? work.uriprefix : \"\";\n \n const collections = work.collections != null ? work.collections.split(',') : [];\n+const temporalCollections = temporalLib.getTemporalCollections().toArray().reduce((acc, col) => {\n+    acc[col] = true;\n+    return acc;\n+}, {});\n+\n+let temporalCollection = collections.concat(collections).find((col) => temporalCollections[col]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk4ODI0Mg=="}, "originalCommit": {"oid": "bd0b077c2d11221c834ef81a72b4fce32ba580d2"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzNjg4OQ==", "bodyText": "A task works well, thanks!", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4698#discussion_r503436889", "createdAt": "2020-10-12T17:29:48Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/ingestion/bulkIngester.sjs", "diffHunk": "@@ -29,11 +29,21 @@ const consts = require(\"/data-hub/5/impl/consts.sjs\");\n const HubUtils = require(\"/data-hub/5/impl/hub-utils.sjs\");\n const state = fn.head(xdmp.fromJSON(endpointState));\n \n+const temporal = require(\"/MarkLogic/temporal.xqy\");\n+const temporalLib = require(\"/data-hub/5/temporal/hub-temporal.sjs\");\n+\n const work = fn.head(xdmp.fromJSON(workUnit));\n \n const uriPrefix = work.uriprefix != null ? work.uriprefix : \"\";\n \n const collections = work.collections != null ? work.collections.split(',') : [];\n+const temporalCollections = temporalLib.getTemporalCollections().toArray().reduce((acc, col) => {\n+    acc[col] = true;\n+    return acc;\n+}, {});\n+\n+let temporalCollection = collections.concat(collections).find((col) => temporalCollections[col]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk4ODI0Mg=="}, "originalCommit": {"oid": "bd0b077c2d11221c834ef81a72b4fce32ba580d2"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUxNTgwNw==", "bodyText": "Created this task(https://project.marklogic.com/jira/browse/DHFPROD-6115) and assigned to @srinathgit .", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4698#discussion_r503515807", "createdAt": "2020-10-12T20:25:54Z", "author": {"login": "SameeraPriyathamTadikonda"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/ingestion/bulkIngester.sjs", "diffHunk": "@@ -29,11 +29,21 @@ const consts = require(\"/data-hub/5/impl/consts.sjs\");\n const HubUtils = require(\"/data-hub/5/impl/hub-utils.sjs\");\n const state = fn.head(xdmp.fromJSON(endpointState));\n \n+const temporal = require(\"/MarkLogic/temporal.xqy\");\n+const temporalLib = require(\"/data-hub/5/temporal/hub-temporal.sjs\");\n+\n const work = fn.head(xdmp.fromJSON(workUnit));\n \n const uriPrefix = work.uriprefix != null ? work.uriprefix : \"\";\n \n const collections = work.collections != null ? work.collections.split(',') : [];\n+const temporalCollections = temporalLib.getTemporalCollections().toArray().reduce((acc, col) => {\n+    acc[col] = true;\n+    return acc;\n+}, {});\n+\n+let temporalCollection = collections.concat(collections).find((col) => temporalCollections[col]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk4ODI0Mg=="}, "originalCommit": {"oid": "bd0b077c2d11221c834ef81a72b4fce32ba580d2"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MDMyNzEwOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/flow/TemporalWriteTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwMDozMzo0MlrOHfr-OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDo1MToxMFrOHgMxIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk4ODM0NA==", "bodyText": "Let's not change what was here - as the comments noted, data-hub-developer should work here. But the test was failing intermittently. Since the purpose of this test isn't to verify that a data-hub-developer can deploy temporal resources, it's fine to run it as admin.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4698#discussion_r502988344", "createdAt": "2020-10-12T00:33:42Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/flow/TemporalWriteTest.java", "diffHunk": "@@ -17,18 +19,21 @@\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.util.stream.Stream;\n+\n import static com.marklogic.client.io.DocumentMetadataHandle.Capability.*;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public class TemporalWriteTest extends AbstractHubCoreTest {\n \n+    private InputEndpoint.BulkInputCaller bulkInputCaller;\n+\n     @BeforeEach\n     void setUp() {\n-        // In theory, a data-hub-developer should be able to deploy these temporal resources. But when run in the\n-        // full suite, this test sometimes fails, presumably due to changes made by a previous test to the databases.\n-        // Since the purpose of this test is to verify that temporal documents can be written as an operator and not\n-        // to verify that a developer can deploy these things (we have other tests for that), admin is used here\n-        runAsAdmin();\n+        runAsDataHubDeveloper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd0b077c2d11221c834ef81a72b4fce32ba580d2"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUyNTY2Nw==", "bodyText": "Done", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4698#discussion_r503525667", "createdAt": "2020-10-12T20:51:10Z", "author": {"login": "SameeraPriyathamTadikonda"}, "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/flow/TemporalWriteTest.java", "diffHunk": "@@ -17,18 +19,21 @@\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.util.stream.Stream;\n+\n import static com.marklogic.client.io.DocumentMetadataHandle.Capability.*;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public class TemporalWriteTest extends AbstractHubCoreTest {\n \n+    private InputEndpoint.BulkInputCaller bulkInputCaller;\n+\n     @BeforeEach\n     void setUp() {\n-        // In theory, a data-hub-developer should be able to deploy these temporal resources. But when run in the\n-        // full suite, this test sometimes fails, presumably due to changes made by a previous test to the databases.\n-        // Since the purpose of this test is to verify that temporal documents can be written as an operator and not\n-        // to verify that a developer can deploy these things (we have other tests for that), admin is used here\n-        runAsAdmin();\n+        runAsDataHubDeveloper();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk4ODM0NA=="}, "originalCommit": {"oid": "bd0b077c2d11221c834ef81a72b4fce32ba580d2"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MDMyODAwOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/flow/TemporalWriteTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwMDozNDo0MlrOHfr-tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwMDozNDo0MlrOHfr-tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk4ODQ2OQ==", "bodyText": "Pinging @anu3990 - let's get this PR merged before your PR is merged that moves this module, that will avoid merge conflicts.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4698#discussion_r502988469", "createdAt": "2020-10-12T00:34:42Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/flow/TemporalWriteTest.java", "diffHunk": "@@ -75,15 +79,45 @@ void writeTemporalFile() {\n             \"declareUpdate();\\n\" +\n             \"temporal.documentDelete('temporal/test', '/temporal/ingestion/test.json');\";\n \n-        try{\n+        try {\n             runAsDataHubOperator().newStagingClient().newServerEval().javascript(deleteTemporalDoc).eval();\n-        }\n-        catch (Exception e){\n+        } catch (Exception e) {\n             logger.error(\"Document deletion failed: \", e);\n             Assertions.fail(\"dh-operator should be able to delete the document\");\n         }\n     }\n \n+    @Test\n+    void ingestDocWithTemporalCollecion() {\n+        String collections = \"fruits,stuff,temporal/test\";\n+        ObjectNode workUnit = objectMapper.createObjectNode();\n+        workUnit.put(\"uriprefix\", \"/bulkJavaTest/\");\n+        workUnit.put(\"collections\", collections);\n+        runAsDataHubOperator();\n+        InputEndpoint endpoint = InputEndpoint.on(\n+            getHubClient().getStagingClient(),\n+            getHubClient().getModulesClient().newTextDocumentManager().read(\"/data-hub/5/data-services/ingestion/bulkIngester.api\", new StringHandle())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd0b077c2d11221c834ef81a72b4fce32ba580d2"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzkwMjA1OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/flow/TemporalWriteTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMTowOTozMlrOHgNPeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMTo0ODoyMFrOHgOWZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzMzQzMw==", "bodyText": "We don't want this as a field, as it's only used by one test as a local variable.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4698#discussion_r503533433", "createdAt": "2020-10-12T21:09:32Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/flow/TemporalWriteTest.java", "diffHunk": "@@ -17,11 +19,18 @@\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.util.stream.Stream;\n+\n import static com.marklogic.client.io.DocumentMetadataHandle.Capability.*;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public class TemporalWriteTest extends AbstractHubCoreTest {\n \n+    private InputEndpoint.BulkInputCaller bulkInputCaller;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba15b982670f87366bfd1b323563a23eb499184"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1MTU4OQ==", "bodyText": "Using it as localvariable", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4698#discussion_r503551589", "createdAt": "2020-10-12T21:48:20Z", "author": {"login": "SameeraPriyathamTadikonda"}, "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/flow/TemporalWriteTest.java", "diffHunk": "@@ -17,11 +19,18 @@\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.util.stream.Stream;\n+\n import static com.marklogic.client.io.DocumentMetadataHandle.Capability.*;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public class TemporalWriteTest extends AbstractHubCoreTest {\n \n+    private InputEndpoint.BulkInputCaller bulkInputCaller;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzMzQzMw=="}, "originalCommit": {"oid": "7ba15b982670f87366bfd1b323563a23eb499184"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzkwNDEyOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/flow/TemporalWriteTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMToxMDoxOVrOHgNQow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMTo0ODozMVrOHgOWnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzMzczMQ==", "bodyText": "This is only used once, and it's one line of code, so it's indirection that doesn't buy us anything - just put that one line of code in the one place where this method is invoked.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4698#discussion_r503533731", "createdAt": "2020-10-12T21:10:19Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/flow/TemporalWriteTest.java", "diffHunk": "@@ -134,4 +172,21 @@ private void addFieldAndIndexes() {\n         systemEndIndex.put(\"range-value-positions\", false);\n         new DatabaseManager(getHubConfig().getManageClient()).save(newNode.toString());\n     }\n+\n+    private InputStream asInputStream(String value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba15b982670f87366bfd1b323563a23eb499184"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1MTY0NA==", "bodyText": "Moved to the method", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4698#discussion_r503551644", "createdAt": "2020-10-12T21:48:31Z", "author": {"login": "SameeraPriyathamTadikonda"}, "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/flow/TemporalWriteTest.java", "diffHunk": "@@ -134,4 +172,21 @@ private void addFieldAndIndexes() {\n         systemEndIndex.put(\"range-value-positions\", false);\n         new DatabaseManager(getHubConfig().getManageClient()).save(newNode.toString());\n     }\n+\n+    private InputStream asInputStream(String value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzMzczMQ=="}, "originalCommit": {"oid": "7ba15b982670f87366bfd1b323563a23eb499184"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzkwNjM0OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/flow/TemporalWriteTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMToxMTowNVrOHgNR9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMTo0ODo0NlrOHgOW4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzNDA3MA==", "bodyText": "Same thing, this is only used once - just move the one line of code here to getDocumentMetadata.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4698#discussion_r503534070", "createdAt": "2020-10-12T21:11:05Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/flow/TemporalWriteTest.java", "diffHunk": "@@ -134,4 +172,21 @@ private void addFieldAndIndexes() {\n         systemEndIndex.put(\"range-value-positions\", false);\n         new DatabaseManager(getHubConfig().getManageClient()).save(newNode.toString());\n     }\n+\n+    private InputStream asInputStream(String value) {\n+        return new ByteArrayInputStream(value.getBytes());\n+    }\n+\n+    private DocumentMetadataHandle getDocumentMetadata() {\n+        String[] uris = getDocUris();\n+        assertTrue(uris.length > 0, \"Expected at least one fruit URI, found zero\");\n+        return getHubClient().getStagingClient().newDocumentManager().readMetadata(uris[0], new DocumentMetadataHandle());\n+    }\n+\n+    private String[] getDocUris() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ba15b982670f87366bfd1b323563a23eb499184"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1MTcxMw==", "bodyText": "Moved to getDocumentMetadata", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4698#discussion_r503551713", "createdAt": "2020-10-12T21:48:46Z", "author": {"login": "SameeraPriyathamTadikonda"}, "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/flow/TemporalWriteTest.java", "diffHunk": "@@ -134,4 +172,21 @@ private void addFieldAndIndexes() {\n         systemEndIndex.put(\"range-value-positions\", false);\n         new DatabaseManager(getHubConfig().getManageClient()).save(newNode.toString());\n     }\n+\n+    private InputStream asInputStream(String value) {\n+        return new ByteArrayInputStream(value.getBytes());\n+    }\n+\n+    private DocumentMetadataHandle getDocumentMetadata() {\n+        String[] uris = getDocUris();\n+        assertTrue(uris.length > 0, \"Expected at least one fruit URI, found zero\");\n+        return getHubClient().getStagingClient().newDocumentManager().readMetadata(uris[0], new DocumentMetadataHandle());\n+    }\n+\n+    private String[] getDocUris() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzNDA3MA=="}, "originalCommit": {"oid": "7ba15b982670f87366bfd1b323563a23eb499184"}, "originalPosition": 116}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3295, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}