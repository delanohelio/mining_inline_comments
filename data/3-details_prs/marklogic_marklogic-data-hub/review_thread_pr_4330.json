{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyMzE0ODIw", "number": 4330, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzozMzo1NlrOEU4ZEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzozMzo1NlrOEU4ZEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMzMwODk3OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/components/queries/managing/manage-query-modal/manage-query.test.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzozMzo1NlrOG7UmOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzozMzo1NlrOG7UmOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg1NjYzMw==", "bodyText": "We would want to test just like a user would, by looking at the delete confirmation text and not the implementation detail, to align with RTL best practices.\nYou can try getByText((_, node) => node.textContent == 'your text here') to check if it asserts text with bold content. Otherwise refer to getSubElements function in Run.test.tsx that asserts text in child nodes as well.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4330#discussion_r464856633", "createdAt": "2020-08-04T07:33:56Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/queries/managing/manage-query-modal/manage-query.test.tsx", "diffHunk": "@@ -38,7 +39,14 @@ describe('Query Modal Component', () => {\n   });\n \n   test('Verify link column does not exist', () => {\n-    const { queryByTitle } = render(<ManageQuery {...defaultProps} modalVisibility={true} />);\n-    expect(queryByTitle('Link')).toBeNull();\n+    const { queryByTestId } = render(<ManageQuery {...defaultProps} isSavedQueryUser={true} />);\n+    expect(queryByTestId('link')).toBeNull();\n+  });\n+\n+  test('Verify confirmation modal message for deleting a query', () => {\n+    const { getByTestId, getByText } = render(<ManageQuery {...defaultProps} isSavedQueryUser={true} />);\n+    expect(getByTestId('delete')).toBeInTheDocument();\n+    fireEvent.click(getByTestId('delete'));\n+    expect(getByTestId('deleteConfirmationText')).toBeInTheDocument();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec3d5b1c96d17c1065c067a4ab835e194b4ca112"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3759, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}