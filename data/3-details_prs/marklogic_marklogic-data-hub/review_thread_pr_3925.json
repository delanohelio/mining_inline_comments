{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0OTY5NzYx", "number": 3925, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNjo1OToxN1rOD6ibEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNToyODo1NFrOD6rmHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNzA3OTg1OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNjo1OToxN1rOGSbdBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMTowNDoxOFrOGSzprg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk3NzM1MQ==", "bodyText": "concat is already available in the expression. So lets look for some other function which isnt in the document already", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3925#discussion_r421977351", "createdAt": "2020-05-08T06:59:17Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.test.tsx", "diffHunk": "@@ -482,6 +482,74 @@ describe('RTL Source-to-entity map tests', () => {\n         expect(onClosestTableRow(firstName)?.style.display).toBe('none');\n         expect(onClosestTableRow(lastName)?.style.display).toBe('none');\n     });\n+    \n+    test('Function selector dropdown in entity table', async () => {\n+\n+        axiosMock.post['mockImplementation'](jest.fn(() => Promise.resolve({ status: 200, data: data.testJSONResponseWithFunctions })));\n+        const { getByText, getByTestId, getAllByRole, debug, queryByText } = render(<SourceToEntityMap {...data.mapProps} mappingVisible={true} />);\n+\n+        //Prepare the map expression field for function signature later\n+        let propAttributeExpression = getByTestId('propAttribute-mapexpression')\n+        fireEvent.change(propAttributeExpression, { target: { value: \"\" } });\n+        fireEvent.blur(propAttributeExpression);\n+\n+        //Grab and click on the function (fx) button\n+        let functionSelector = getByTestId(\"propAttribute-3-functionIcon\");\n+        fireEvent.click(functionSelector);\n+\n+        await (waitForElement(() => getAllByRole(\"option\"), { \"timeout\": 200 }))\n+        let concat = getByText(\"concat\");\n+        let documentLookup = getByText('documentLookup');\n+        //Both of the functions below should be visible\n+        expect(concat).toBeInTheDocument();\n+        expect(documentLookup).toBeInTheDocument();\n+\n+        //Search input box to look for functions\n+        let inputBox = getByText(\n+            (_content, element) =>\n+                element.className != null &&\n+                element.className === \"ant-select-search__field\"\n+        );\n+\n+        fireEvent.click(inputBox) // focus on the search box\n+\n+        // Filter out the funcitons list to get to concat function\n+        fireEvent.change(inputBox, { target: { value: \"conc\" } }); \n+\n+        expect(concat).toBeInTheDocument(); // Still should be visible\n+        expect(queryByText('documentLookup')).not.toBeInTheDocument(); // Should not be visible since we filtered only concat\n+\n+        //Choose the concat function\n+        fireEvent.keyDown(inputBox, { key: 'Enter', code: 'Enter', keyCode: 13, charCode: 13 })\n+\n+        //Map Expression is populated with function signature\n+        expect(propAttributeExpression).toHaveTextContent(\"concat(xs:anyAtomicType?)\");\n+\n+         //Click again on the same function button to verify if it opens up again with the list of functions\n+         fireEvent.click(functionSelector);\n+         await (waitForElement(() => getAllByRole(\"option\"), { \"timeout\": 200 }));\n+         //Function should be visible again\n+         expect(concat).toBeInTheDocument();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c752dc86a740290fdde0f03bf10bc06a8d784dcf"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM3MzgwNg==", "bodyText": "Done", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3925#discussion_r422373806", "createdAt": "2020-05-08T21:04:18Z", "author": {"login": "xnikhil08"}, "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.test.tsx", "diffHunk": "@@ -482,6 +482,74 @@ describe('RTL Source-to-entity map tests', () => {\n         expect(onClosestTableRow(firstName)?.style.display).toBe('none');\n         expect(onClosestTableRow(lastName)?.style.display).toBe('none');\n     });\n+    \n+    test('Function selector dropdown in entity table', async () => {\n+\n+        axiosMock.post['mockImplementation'](jest.fn(() => Promise.resolve({ status: 200, data: data.testJSONResponseWithFunctions })));\n+        const { getByText, getByTestId, getAllByRole, debug, queryByText } = render(<SourceToEntityMap {...data.mapProps} mappingVisible={true} />);\n+\n+        //Prepare the map expression field for function signature later\n+        let propAttributeExpression = getByTestId('propAttribute-mapexpression')\n+        fireEvent.change(propAttributeExpression, { target: { value: \"\" } });\n+        fireEvent.blur(propAttributeExpression);\n+\n+        //Grab and click on the function (fx) button\n+        let functionSelector = getByTestId(\"propAttribute-3-functionIcon\");\n+        fireEvent.click(functionSelector);\n+\n+        await (waitForElement(() => getAllByRole(\"option\"), { \"timeout\": 200 }))\n+        let concat = getByText(\"concat\");\n+        let documentLookup = getByText('documentLookup');\n+        //Both of the functions below should be visible\n+        expect(concat).toBeInTheDocument();\n+        expect(documentLookup).toBeInTheDocument();\n+\n+        //Search input box to look for functions\n+        let inputBox = getByText(\n+            (_content, element) =>\n+                element.className != null &&\n+                element.className === \"ant-select-search__field\"\n+        );\n+\n+        fireEvent.click(inputBox) // focus on the search box\n+\n+        // Filter out the funcitons list to get to concat function\n+        fireEvent.change(inputBox, { target: { value: \"conc\" } }); \n+\n+        expect(concat).toBeInTheDocument(); // Still should be visible\n+        expect(queryByText('documentLookup')).not.toBeInTheDocument(); // Should not be visible since we filtered only concat\n+\n+        //Choose the concat function\n+        fireEvent.keyDown(inputBox, { key: 'Enter', code: 'Enter', keyCode: 13, charCode: 13 })\n+\n+        //Map Expression is populated with function signature\n+        expect(propAttributeExpression).toHaveTextContent(\"concat(xs:anyAtomicType?)\");\n+\n+         //Click again on the same function button to verify if it opens up again with the list of functions\n+         fireEvent.click(functionSelector);\n+         await (waitForElement(() => getAllByRole(\"option\"), { \"timeout\": 200 }));\n+         //Function should be visible again\n+         expect(concat).toBeInTheDocument();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk3NzM1MQ=="}, "originalCommit": {"oid": "c752dc86a740290fdde0f03bf10bc06a8d784dcf"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyODU4MjY4OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNToyODo1NFrOGSpnYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMTowNDoyNlrOGSzp7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIwOTM3Nw==", "bodyText": "Can we change this to \"Lookup\" to verify multiple matches are returned", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3925#discussion_r422209377", "createdAt": "2020-05-08T15:28:54Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.test.tsx", "diffHunk": "@@ -482,6 +482,74 @@ describe('RTL Source-to-entity map tests', () => {\n         expect(onClosestTableRow(firstName)?.style.display).toBe('none');\n         expect(onClosestTableRow(lastName)?.style.display).toBe('none');\n     });\n+    \n+    test('Function selector dropdown in entity table', async () => {\n+\n+        axiosMock.post['mockImplementation'](jest.fn(() => Promise.resolve({ status: 200, data: data.testJSONResponseWithFunctions })));\n+        const { getByText, getByTestId, getAllByRole, debug, queryByText } = render(<SourceToEntityMap {...data.mapProps} mappingVisible={true} />);\n+\n+        //Prepare the map expression field for function signature later\n+        let propAttributeExpression = getByTestId('propAttribute-mapexpression')\n+        fireEvent.change(propAttributeExpression, { target: { value: \"\" } });\n+        fireEvent.blur(propAttributeExpression);\n+\n+        //Grab and click on the function (fx) button\n+        let functionSelector = getByTestId(\"propAttribute-3-functionIcon\");\n+        fireEvent.click(functionSelector);\n+\n+        await (waitForElement(() => getAllByRole(\"option\"), { \"timeout\": 200 }))\n+        let concat = getByText(\"concat\");\n+        let documentLookup = getByText('documentLookup');\n+        //Both of the functions below should be visible\n+        expect(concat).toBeInTheDocument();\n+        expect(documentLookup).toBeInTheDocument();\n+\n+        //Search input box to look for functions\n+        let inputBox = getByText(\n+            (_content, element) =>\n+                element.className != null &&\n+                element.className === \"ant-select-search__field\"\n+        );\n+\n+        fireEvent.click(inputBox) // focus on the search box\n+\n+        // Filter out the funcitons list to get to concat function\n+        fireEvent.change(inputBox, { target: { value: \"conc\" } }); ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c752dc86a740290fdde0f03bf10bc06a8d784dcf"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM3Mzg3MA==", "bodyText": "Done", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3925#discussion_r422373870", "createdAt": "2020-05-08T21:04:26Z", "author": {"login": "xnikhil08"}, "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.test.tsx", "diffHunk": "@@ -482,6 +482,74 @@ describe('RTL Source-to-entity map tests', () => {\n         expect(onClosestTableRow(firstName)?.style.display).toBe('none');\n         expect(onClosestTableRow(lastName)?.style.display).toBe('none');\n     });\n+    \n+    test('Function selector dropdown in entity table', async () => {\n+\n+        axiosMock.post['mockImplementation'](jest.fn(() => Promise.resolve({ status: 200, data: data.testJSONResponseWithFunctions })));\n+        const { getByText, getByTestId, getAllByRole, debug, queryByText } = render(<SourceToEntityMap {...data.mapProps} mappingVisible={true} />);\n+\n+        //Prepare the map expression field for function signature later\n+        let propAttributeExpression = getByTestId('propAttribute-mapexpression')\n+        fireEvent.change(propAttributeExpression, { target: { value: \"\" } });\n+        fireEvent.blur(propAttributeExpression);\n+\n+        //Grab and click on the function (fx) button\n+        let functionSelector = getByTestId(\"propAttribute-3-functionIcon\");\n+        fireEvent.click(functionSelector);\n+\n+        await (waitForElement(() => getAllByRole(\"option\"), { \"timeout\": 200 }))\n+        let concat = getByText(\"concat\");\n+        let documentLookup = getByText('documentLookup');\n+        //Both of the functions below should be visible\n+        expect(concat).toBeInTheDocument();\n+        expect(documentLookup).toBeInTheDocument();\n+\n+        //Search input box to look for functions\n+        let inputBox = getByText(\n+            (_content, element) =>\n+                element.className != null &&\n+                element.className === \"ant-select-search__field\"\n+        );\n+\n+        fireEvent.click(inputBox) // focus on the search box\n+\n+        // Filter out the funcitons list to get to concat function\n+        fireEvent.change(inputBox, { target: { value: \"conc\" } }); ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIwOTM3Nw=="}, "originalCommit": {"oid": "c752dc86a740290fdde0f03bf10bc06a8d784dcf"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4110, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}