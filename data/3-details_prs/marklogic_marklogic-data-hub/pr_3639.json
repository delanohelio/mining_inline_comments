{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMDMyNDA0", "number": 3639, "title": "DHFPROD-4524: 5.3 Roles service doesn't provide granular enough feedb\u2026", "bodyText": "\u2026ack to cover manage-admin/privileges\nhttps://project.marklogic.com/jira/browse/DHFPROD-4524\nWe will remove roles and hasManagePrivileges once UI gets changed.", "createdAt": "2020-03-03T15:55:56Z", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639", "merged": true, "mergeCommit": {"oid": "b42565be8f309896ae350b1f21df44f55f9c27a7"}, "closed": true, "closedAt": "2020-03-06T19:17:27Z", "author": {"login": "hao1st"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKEvu-gFqTM2ODEwOTA1MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcLD8WcgFqTM3MDUxNDkyMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MTA5MDUw", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#pullrequestreview-368109050", "createdAt": "2020-03-03T16:05:04Z", "commit": {"oid": "68f16495f7c1ce4e43a31305bfcf762da58264cc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjowNTowNVrOFxMHZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjoxNjo0N1rOFxMoMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyMzA0Ng==", "bodyText": "Let's not use the term \"privileges\" here, as that already has a definition within ML. Just call it \"response\", since this is the response object.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r387123046", "createdAt": "2020-03-03T16:05:05Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/security/getAuthorities.sjs", "diffHunk": "@@ -15,14 +15,49 @@\n  */\n 'use strict';\n \n-// TODO This is just stubbed out, a real implementation is needed.\n-\n-let response = {\n-  \"authorities\": [\n-    \"canInstallDataHub\",\n-    \"canReadLoadData\",\n-    \"canWriteLoadData\"\n-  ]\n+const Artifacts = require('/data-hub/5/artifacts/core.sjs');\n+const roleIdToName = (roleID) => xdmp.roleName(roleID);\n+const currentRoles = xdmp.getCurrentRoles().toArray().map(String);\n+let currentRoleNames = currentRoles.map(roleIdToName);\n+\n+const defaultManageRoles = ['admin', 'data-hub-environment-manager'].map((roleName) => String(xdmp.role(roleName)));\n+const manageRolesMustAllMatched = ['manage-admin', 'security'].map((roleName) => String(xdmp.role(roleName)));\n+\n+let hasManagerRole = defaultManageRoles.some((role) => currentRoles.includes(role));\n+if (!hasManagerRole) {\n+  hasManagerRole = manageRolesMustAllMatched.every((role) => currentRoles.indexOf(role) !== -1);\n+}\n+\n+if (currentRoleNames.includes('admin')) {\n+  currentRoleNames = xdmp.roles().toArray().map(roleIdToName);\n+}\n+const datahubRoles  = currentRoleNames.filter((roleName) => fn.startsWith(roleName, 'data-hub'));\n+\n+const privileges = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68f16495f7c1ce4e43a31305bfcf762da58264cc"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyNTA5Mw==", "bodyText": "You can do this and the line near the end in one simpler line of code:\nresponse.roles = currentRolesNames.filter(roleName => fn.startsWith(roleName, \"data-hub\");", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r387125093", "createdAt": "2020-03-03T16:08:02Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/security/getAuthorities.sjs", "diffHunk": "@@ -15,14 +15,49 @@\n  */\n 'use strict';\n \n-// TODO This is just stubbed out, a real implementation is needed.\n-\n-let response = {\n-  \"authorities\": [\n-    \"canInstallDataHub\",\n-    \"canReadLoadData\",\n-    \"canWriteLoadData\"\n-  ]\n+const Artifacts = require('/data-hub/5/artifacts/core.sjs');\n+const roleIdToName = (roleID) => xdmp.roleName(roleID);\n+const currentRoles = xdmp.getCurrentRoles().toArray().map(String);\n+let currentRoleNames = currentRoles.map(roleIdToName);\n+\n+const defaultManageRoles = ['admin', 'data-hub-environment-manager'].map((roleName) => String(xdmp.role(roleName)));\n+const manageRolesMustAllMatched = ['manage-admin', 'security'].map((roleName) => String(xdmp.role(roleName)));\n+\n+let hasManagerRole = defaultManageRoles.some((role) => currentRoles.includes(role));\n+if (!hasManagerRole) {\n+  hasManagerRole = manageRolesMustAllMatched.every((role) => currentRoles.indexOf(role) !== -1);\n+}\n+\n+if (currentRoleNames.includes('admin')) {\n+  currentRoleNames = xdmp.roles().toArray().map(roleIdToName);\n+}\n+const datahubRoles  = currentRoleNames.filter((roleName) => fn.startsWith(roleName, 'data-hub'));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68f16495f7c1ce4e43a31305bfcf762da58264cc"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyNjc0NA==", "bodyText": "There are a lot of other scenarios to test here, each as a different user. Switching users is very difficult in marklogic-unit-test though. For that reason, I think this test should be converted into a JUnit test - GetAuthoritiestTest - where each test method uses a different user. We have test-data-hub-developer and test-data-hub-operator already, and I think you can use \"admin\" too.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r387126744", "createdAt": "2020-03-03T16:10:22Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/data-services/security/getAuthoritiesTest.sjs", "diffHunk": "@@ -0,0 +1,24 @@\n+const test = require(\"/test/test-helper.xqy\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68f16495f7c1ce4e43a31305bfcf762da58264cc"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEzMTQ0Mg==", "bodyText": "When we need a method to return a tuple of different things, I'd much rather see us use the Pair class or a custom class instead of passing arrays as ways to capture values.\nSo this can be simplified by returning a Pair<List<GrantedAuthority>, ArrayNode> . That makes it much more obvious what the method is doing.\nFor \"canInstallDataHub\" - can't LoginHandler just iterate over the list of GrantedAuthoritys to see if \"canInstallDataHub\" exists, and if so, write that to the JSON response? It shouldn't need to care about hasManagePrivileges anymore, right? That would get rid of this from this function, which shouldn't care about setting bits specific to the login response. It should just care about getting all the authorities (and for now, all the roles too, though that will soon go away).", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r387131442", "createdAt": "2020-03-03T16:16:47Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/oneui/auth/AuthenticationFilter.java", "diffHunk": "@@ -137,15 +139,24 @@ protected AuthenticationToken authenticateUser(String username, String password)\n      * - see https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#appendix-faq-role-prefix.\n      *\n      * @param stagingClient\n+     * @param roles\n+     * @param canInstallDataHub\n      * @return\n      */\n-    protected List<GrantedAuthority> getAuthoritiesForAuthenticatedUser(DatabaseClient stagingClient) {\n+    protected List<GrantedAuthority> getAuthoritiesForAuthenticatedUser(DatabaseClient stagingClient, ArrayNode[] roles, boolean[] canInstallDataHub) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68f16495f7c1ce4e43a31305bfcf762da58264cc"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MzE4MTgy", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#pullrequestreview-368318182", "createdAt": "2020-03-03T20:57:15Z", "commit": {"oid": "68f16495f7c1ce4e43a31305bfcf762da58264cc"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDo1NzoxNVrOFxWPAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTowOToyMlrOFxWmkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI4ODgzNQ==", "bodyText": "FWIW, \"data-hub-portal-security-admin\" also has manage-admin role.\nmanage and manage-admin are 2 separate roles. Can we be specific and say defaultRolesWithManageAdmin.\n'admin' doesnt have manage-admin role. An 'admin' role just bypasses all the security.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r387288835", "createdAt": "2020-03-03T20:57:15Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/security/getAuthorities.sjs", "diffHunk": "@@ -15,14 +15,49 @@\n  */\n 'use strict';\n \n-// TODO This is just stubbed out, a real implementation is needed.\n-\n-let response = {\n-  \"authorities\": [\n-    \"canInstallDataHub\",\n-    \"canReadLoadData\",\n-    \"canWriteLoadData\"\n-  ]\n+const Artifacts = require('/data-hub/5/artifacts/core.sjs');\n+const roleIdToName = (roleID) => xdmp.roleName(roleID);\n+const currentRoles = xdmp.getCurrentRoles().toArray().map(String);\n+let currentRoleNames = currentRoles.map(roleIdToName);\n+\n+const defaultManageRoles = ['admin', 'data-hub-environment-manager'].map((roleName) => String(xdmp.role(roleName)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68f16495f7c1ce4e43a31305bfcf762da58264cc"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI5MTQwMQ==", "bodyText": "This should be hasManageAdminRole.\nWith manageRolesMustAllMatched are we trying to check if a role has both manage-admin & security? If so, hasManageAdminAndSecurity sounds better to me.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r387291401", "createdAt": "2020-03-03T21:02:15Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/security/getAuthorities.sjs", "diffHunk": "@@ -15,14 +15,49 @@\n  */\n 'use strict';\n \n-// TODO This is just stubbed out, a real implementation is needed.\n-\n-let response = {\n-  \"authorities\": [\n-    \"canInstallDataHub\",\n-    \"canReadLoadData\",\n-    \"canWriteLoadData\"\n-  ]\n+const Artifacts = require('/data-hub/5/artifacts/core.sjs');\n+const roleIdToName = (roleID) => xdmp.roleName(roleID);\n+const currentRoles = xdmp.getCurrentRoles().toArray().map(String);\n+let currentRoleNames = currentRoles.map(roleIdToName);\n+\n+const defaultManageRoles = ['admin', 'data-hub-environment-manager'].map((roleName) => String(xdmp.role(roleName)));\n+const manageRolesMustAllMatched = ['manage-admin', 'security'].map((roleName) => String(xdmp.role(roleName)));\n+\n+let hasManagerRole = defaultManageRoles.some((role) => currentRoles.includes(role));\n+if (!hasManagerRole) {\n+  hasManagerRole = manageRolesMustAllMatched.every((role) => currentRoles.indexOf(role) !== -1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68f16495f7c1ce4e43a31305bfcf762da58264cc"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI5NDg2Nw==", "bodyText": "@ryanjdew we are still at the early stages of 5.3 so maybe we can change this now. Is hasManagePrivileges telling us if the user has manage-admin role? If so, then shouldnt we name it that way. I am saying this because data-hub-operator has manage privilege, will this flag then be true.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r387294867", "createdAt": "2020-03-03T21:09:22Z", "author": {"login": "bsrikan"}, "path": "one-ui/src/test/java/com/marklogic/hub/oneui/AuthTest.java", "diffHunk": "@@ -46,14 +48,67 @@ void loginWithInvalidCredentials() throws Exception {\n     }\n \n     @Test\n-    void loginWithValidCredentialsAndLogout() throws Exception {\n+    void loginWithValidAdminAndLogout() throws Exception {\n         String payload = getLoginPayload(\"admin\", \"admin\");\n         final MockHttpSession session[] = new MockHttpSession[1];\n         // Login\n         mockMvc\n             .perform(post(LOGIN_URL).contentType(MediaType.APPLICATION_JSON).content(payload))\n-            .andDo(\n-                result -> session[0] = (MockHttpSession) result.getRequest().getSession())\n+            .andDo (\n+                result -> {\n+                    session[0] = (MockHttpSession) result.getRequest().getSession();\n+                    assertTrue(result.getResponse().getContentAsString().contains(\"\\\"hasManagePrivileges\\\":true\"));\n+                })\n+            .andExpect(status().isOk());\n+\n+        assertFalse(session[0].isInvalid());\n+\n+        // Logout\n+        mockMvc.perform(get(LOGOUT_URL).session(session[0]))\n+            .andExpect(status().isOk());\n+\n+        assertTrue(session[0].isInvalid());\n+    }\n+\n+    @Test\n+    void loginWithDataHubManagerAndLogout() throws Exception {\n+        String payload = getLoginPayload(\"data-hub-environment-manager-user\", \"data-hub-environment-manager-user\");\n+        final MockHttpSession session[] = new MockHttpSession[1];\n+        // Login\n+        mockMvc\n+            .perform(post(LOGIN_URL).contentType(MediaType.APPLICATION_JSON).content(payload))\n+            .andDo (\n+                result -> {\n+                    session[0] = (MockHttpSession) result.getRequest().getSession();\n+                    String strResponse = result.getResponse().getContentAsString();\n+                    ObjectMapper mapper = new ObjectMapper();\n+                    JsonNode jsonResonse = mapper.readTree(strResponse);\n+                    assertTrue(jsonResonse.get(\"roles\").isArray());\n+                    assertTrue(strResponse.contains(\"\\\"hasManagePrivileges\\\":true\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68f16495f7c1ce4e43a31305bfcf762da58264cc"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c86a18dd7358a4aa2de117290b34f813d0756e10", "author": {"user": {"login": "hao1st", "name": "Hao Liu"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/c86a18dd7358a4aa2de117290b34f813d0756e10", "committedDate": "2020-03-05T22:19:05Z", "message": "DHFPROD-4524: 5.3 Roles service doesn't provide granular enough feedback to cover manage-admin/privileges"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11e70e870b30f3bc3aa90ba2918943f1dfd33740", "author": {"user": {"login": "hao1st", "name": "Hao Liu"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/11e70e870b30f3bc3aa90ba2918943f1dfd33740", "committedDate": "2020-03-05T22:19:05Z", "message": "DHFPROD-4524: rename & simplify"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d31db306306fb89a74eeab0bfc9b6579d104ea4", "author": {"user": {"login": "hao1st", "name": "Hao Liu"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/9d31db306306fb89a74eeab0bfc9b6579d104ea4", "committedDate": "2020-03-05T22:19:05Z", "message": "DHFPROD-4524: let authorities as part of login response"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab45f6c6b9721b3a97a0e2f77759e54e680bc4e6", "author": {"user": {"login": "hao1st", "name": "Hao Liu"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/ab45f6c6b9721b3a97a0e2f77759e54e680bc4e6", "committedDate": "2020-03-05T22:19:05Z", "message": "DHFPROD-4524: fix response name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e20f191fcfc19d80fc9bcb0589c5b1fd724f9b4", "author": {"user": {"login": "hao1st", "name": "Hao Liu"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/8e20f191fcfc19d80fc9bcb0589c5b1fd724f9b4", "committedDate": "2020-03-05T23:01:05Z", "message": "hao/DHFPROD-4524: refactor getAuthorities & test cases"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e918294d56793df11e78bbe3a740965730814e0f", "author": {"user": {"login": "hao1st", "name": "Hao Liu"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/e918294d56793df11e78bbe3a740965730814e0f", "committedDate": "2020-03-04T02:47:36Z", "message": "DHFPROD-4524: fix response name"}, "afterCommit": {"oid": "8e20f191fcfc19d80fc9bcb0589c5b1fd724f9b4", "author": {"user": {"login": "hao1st", "name": "Hao Liu"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/8e20f191fcfc19d80fc9bcb0589c5b1fd724f9b4", "committedDate": "2020-03-05T23:01:05Z", "message": "hao/DHFPROD-4524: refactor getAuthorities & test cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5OTc3MjQ1", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#pullrequestreview-369977245", "createdAt": "2020-03-05T23:06:16Z", "commit": {"oid": "8e20f191fcfc19d80fc9bcb0589c5b1fd724f9b4"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMzEzMzk0", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#pullrequestreview-370313394", "createdAt": "2020-03-06T13:18:05Z", "commit": {"oid": "8e20f191fcfc19d80fc9bcb0589c5b1fd724f9b4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMzoxODowNVrOFy4XmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMzoyMToyMlrOFy4dlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg5NjY2NA==", "bodyText": "Instead of this special case for this one capability, just add a method to AuthenticationToken like this:\n\nboolean hasAuthority(String authorityName);\n\nLoginFilter can then just call token.hasAuthority(\"canInstallDataHub\")\nThen you don't need the boolean array of a single value.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r388896664", "createdAt": "2020-03-06T13:18:05Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/oneui/auth/AuthenticationFilter.java", "diffHunk": "@@ -137,17 +141,38 @@ protected AuthenticationToken authenticateUser(String username, String password)\n      * - see https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#appendix-faq-role-prefix.\n      *\n      * @param stagingClient\n+     * @param roles\n+     * @param canInstallDataHub\n      * @return\n      */\n-    protected List<GrantedAuthority> getAuthoritiesForAuthenticatedUser(DatabaseClient stagingClient) {\n-        List<GrantedAuthority> authorities = new ArrayList<>();\n+    protected Pair<List<GrantedAuthority>, ArrayNode> getAuthoritiesForAuthenticatedUser(DatabaseClient stagingClient, ArrayNode[] roles, boolean[] canInstallDataHub) {\n+        List<GrantedAuthority> grantAuthorities = new ArrayList<>();\n+        ArrayNode authorities = null;\n         JsonNode response = SecurityService.on(stagingClient).getAuthorities();\n-        if (response != null && response.has(\"authorities\")) {\n-            response.get(\"authorities\").iterator().forEachRemaining(node -> {\n-                authorities.add(new SimpleGrantedAuthority(\"ROLE_\" + node.asText()));\n-            });\n+        if (response != null) {\n+            if (response.has(\"authorities\")) {\n+                response.get(\"authorities\").iterator().forEachRemaining(node -> {\n+                    String authority = node.asText();\n+                    if (\"canInstallDataHub\".equals(authority))  {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e20f191fcfc19d80fc9bcb0589c5b1fd724f9b4"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg5ODE5OA==", "bodyText": "\"Authorites\" is misspelled, but if it were spelled correctly, you'd get a compilation error because \"getAuthorities\" already exists.\nWe don't need to store the authorities in two separate fields in AuthenticationToken. Instead, just add a \"getAuthorityNames\" method that returns a List. It will iterate over each GrantedAuthority and get its value and remove the \"ROLE_\", since the UI doesn't want to deal with that.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r388898198", "createdAt": "2020-03-06T13:21:22Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/oneui/auth/LoginHandler.java", "diffHunk": "@@ -47,6 +47,9 @@ public void onAuthenticationSuccess(HttpServletRequest request, HttpServletRespo\n         if (token.getRoles() != null) {\n             jsonResponse.putArray(\"roles\").addAll(token.getRoles());\n         }\n+        if (token.getAuthorites() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e20f191fcfc19d80fc9bcb0589c5b1fd724f9b4"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92d96af85f3522ed79b345b25a487351be90625e", "author": {"user": {"login": "hao1st", "name": "Hao Liu"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/92d96af85f3522ed79b345b25a487351be90625e", "committedDate": "2020-03-06T17:14:06Z", "message": "DHFPROD-4524: refactor authorities"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNDkyMzI4", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#pullrequestreview-370492328", "createdAt": "2020-03-06T17:18:14Z", "commit": {"oid": "92d96af85f3522ed79b345b25a487351be90625e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNTE0OTIz", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#pullrequestreview-370514923", "createdAt": "2020-03-06T17:54:53Z", "commit": {"oid": "92d96af85f3522ed79b345b25a487351be90625e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2286, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}