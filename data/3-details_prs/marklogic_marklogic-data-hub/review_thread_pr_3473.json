{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzODI2Mjc1", "number": 3473, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMDozMDoxN1rODYoeFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMDozMDoxN1rODYoeFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTU1NDc4OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/flow/impl/FlowRunnerImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMDozMDoxN1rOFemmDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMTozMjoxNlrOFeoPvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYzMzkzMw==", "bodyText": "Flowrunner in our implementation, always uses only single thread. I am not sure if increasing threadpool would help. We have to see if the dir that he has chosen for ingestion has a lot of files(or if it is a network storage)  which may cause FileCollector to take a longer time or if there are issues in reporting the state back to the UI.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3473#discussion_r367633933", "createdAt": "2020-01-16T20:30:17Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/flow/impl/FlowRunnerImpl.java", "diffHunk": "@@ -214,7 +214,8 @@ private void initializeFlow(String jobId) {\n             jobDocManager = new JobDocManager(hubConfig.newJobDbClient());\n         }\n         if(threadPool == null || threadPool.isTerminated()) {\n-            threadPool = new CustomPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS\n+            int cores = Runtime.getRuntime().availableProcessors();\n+            threadPool = new CustomPoolExecutor(cores/2, cores, 0L, TimeUnit.MILLISECONDS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7bcc6d1f802baf4e675633b0b0ca07c341dbdff"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY2MDk5MA==", "bodyText": "@srinathgit Good point on the flow runner only using a single thread, but my profiling/testing still indicated that the threadpool was the point of contention. I was encountering the issue when running a single document through multiple steps. After you pointing out that the flow runner only uses one thread, I wonder if simply setting the thread pool size to 2 would be enough. I think what was happening was that afterExecute would add the next step to the threadPool, but the current step execution was occupying the space.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3473#discussion_r367660990", "createdAt": "2020-01-16T21:32:16Z", "author": {"login": "ryanjdew"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/flow/impl/FlowRunnerImpl.java", "diffHunk": "@@ -214,7 +214,8 @@ private void initializeFlow(String jobId) {\n             jobDocManager = new JobDocManager(hubConfig.newJobDbClient());\n         }\n         if(threadPool == null || threadPool.isTerminated()) {\n-            threadPool = new CustomPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS\n+            int cores = Runtime.getRuntime().availableProcessors();\n+            threadPool = new CustomPoolExecutor(cores/2, cores, 0L, TimeUnit.MILLISECONDS", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYzMzkzMw=="}, "originalCommit": {"oid": "a7bcc6d1f802baf4e675633b0b0ca07c341dbdff"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3642, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}