{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4NzcxNzI1", "number": 4058, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwMTo1MjozNVrOEDIv6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODo0NDoxN1rOEEAoOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzI0NTIzOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/pages/Load.test.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwMTo1MjozNVrOGgBLvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QwNDowMTo1MFrOGgG_8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyNzAwNQ==", "bodyText": "RTL commands are all internally wrapped in act.\nconst renderResults = await render(.......) will help get rid of the \"wrap in act... \" warning when running the test.\nWe wouldnt need to wrap a fireEvent in act.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r436227005", "createdAt": "2020-06-06T01:52:35Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/pages/Load.test.tsx", "diffHunk": "@@ -27,7 +25,19 @@ describe('Load component', () => {\n         const authorityService = new AuthoritiesService();\n         authorityService.setAuthorities(['readIngestion']);\n \n-        const { getByText, getByTitle, getByLabelText, getByTestId, queryByTestId, queryByText, queryByTitle } = render(<AuthoritiesContext.Provider value={authorityService}><Load/></AuthoritiesContext.Provider>);\n+        let getByText, getByTitle, getByLabelText, getByTestId, queryByTestId, queryByText, queryByTitle;\n+        await act(async () => {\n+          const renderResults = render(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0c286c6e927364637c056a536f19e25062c02e9"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMyMjI5MA==", "bodyText": "@wooldridge pushed small changes.\n\nwrapping the component in act was sufficient to get rid of the warnings.\nfixed unmount warning", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r436322290", "createdAt": "2020-06-07T04:01:50Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/pages/Load.test.tsx", "diffHunk": "@@ -27,7 +25,19 @@ describe('Load component', () => {\n         const authorityService = new AuthoritiesService();\n         authorityService.setAuthorities(['readIngestion']);\n \n-        const { getByText, getByTitle, getByLabelText, getByTestId, queryByTestId, queryByText, queryByTitle } = render(<AuthoritiesContext.Provider value={authorityService}><Load/></AuthoritiesContext.Provider>);\n+        let getByText, getByTitle, getByLabelText, getByTestId, queryByTestId, queryByText, queryByTitle;\n+        await act(async () => {\n+          const renderResults = render(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyNzAwNQ=="}, "originalCommit": {"oid": "a0c286c6e927364637c056a536f19e25062c02e9"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDMwNTY3OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/config/tooltips.config.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMjo1Mzo0OVrOGgcMrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMjo1Mzo0OVrOGgcMrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY2OTYxMw==", "bodyText": "I didn't see a reference for these; if that's true, I'd like to use the following descriptions instead:\n\nProcessors = Custom modules that can process content before it is persisted.\nCustom hook = Custom module that can perform updates in a separate transaction.\n\nDescribing how a custom hook behaves is very difficult since its behavior varies based on the step being used. So I think the less said here, the better. I really don't think that Pari - the typical user of a custom hook - is ever going to use this interface to configure processors/custom hook. The complexity in trying to describe what these are is one of the reasons I don't think these should be exposed here either. But since we are exposing them, I think we want brief descriptions that encourage a non-Pari persona to not bother trying to figure out what these are.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r436669613", "createdAt": "2020-06-08T12:53:49Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/ui/src/config/tooltips.config.js", "diffHunk": "@@ -5,11 +5,11 @@ const AdvancedSettings = {\n     'targetFormat': 'The format of the documents in the target database.',\n     'additionalCollections': 'The collection tags to add to the default tags assigned to the processed document.',\n     'targetPermissions': 'The comma-separated permissions required to access the processed document.',\n-    'module': 'The path to your custom hook module.',\n-    'cHParameters': 'Parameters, as key-value pairs, to pass to your custom hook module.',\n-    'user': 'The user account to use to run the module. The default is the user running the flow; e.g., data-hub-operator.',\n-    'runBefore': 'Choose whether to run the module before or after the core processes of the step.',\n-    /* The following are for *Custom*Tooltips. */\n+    'headers': 'A JSON object that represents additional metadata to add to the header section of the envelope of each document.',\n+    'provGranularity': 'The level of detail logged for provenance. Choose *coarse* for the default level or *off* for no provenance logging.',\n+    'processors': 'Custom modules that perform additional processes after the core step processes are completed and before the results are saved.',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae7d4734a716cffee4c9d7661df31034d502895b"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzQ0ODM0OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/components/advanced-settings/advanced-settings-dialog.test.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjozMDoxOVrOGg6hog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNToxNDoxMlrOGhPNLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE2NjQ5OA==", "bodyText": "Its ok to replace PUT tests with POST here. But we need to add a test for PUT; one each in Load and Curate test files(comments further down) and reuse loadSettings and mappingSettings in load.config and run.config for the same.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437166498", "createdAt": "2020-06-09T06:30:19Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/advanced-settings/advanced-settings-dialog.test.tsx", "diffHunk": "@@ -128,83 +169,147 @@ describe('Update data load settings component', () => {\n     const testFormatOptions = getAllByTestId('targetFormatOptions').map(li => li);\n     expect(testFormatOptions.map(li => li.textContent).toString()).toEqual('JSON,XML');\n     fireEvent.select(testFormatOptions[1]);\n-    expect(getByText('XML')).toBeInTheDocument();\n \n-    //Verifying provenance options select field\n-    fireEvent.click(getByText('Coarse-grained'));\n-    const provOptions = getAllByTestId('provOptions').map(li => li);\n-    expect(provOptions.map(li => li.textContent).toString()).toEqual('Coarse-grained,Off');\n-    fireEvent.select(provOptions[1]);\n-    expect(getByText('Off')).toBeInTheDocument();\n+    fireEvent.click(getByText('Processors'));\n+    fireEvent.change(getByLabelText('processors-textarea'), { target: { value: 'processors-changed' }});\n+    expect(getByLabelText('processors-textarea')).toHaveValue('processors-changed');\n+\n+    fireEvent.click(getByText('Custom Hook'));\n+    fireEvent.change(getByLabelText('customHook-textarea'), { target: { value: 'hook-changed' }});\n+    expect(getByLabelText('customHook-textarea')).toHaveValue('hook-changed');\n+\n+  });\n+\n+  test('Verify no/invalid/valid JSON is recognized correctly in JSON fields', async () => {\n+    let getByText, getByLabelText, queryAllByText;\n+    await act(async () => {\n+      const renderResults = render(\n+        <AdvancedSettingsDialog {...data.advancedMapping} />\n+      );\n+      getByText = renderResults.getByText;\n+      getByLabelText = renderResults.getByLabelText;\n+      queryAllByText = renderResults.queryAllByText;\n+    });\n \n+    // Expand all textarea inputs\n+    fireEvent.click(getByText('Processors'));\n     fireEvent.click(getByText('Custom Hook'));\n-    fireEvent.change(getByPlaceholderText('Please enter module'), { target: { value: 'test-module' }});\n-    expect(getByPlaceholderText('Please enter module')).toHaveValue('test-module');\n-    fireEvent.change(getByPlaceholderText('Please enter parameters'), { target: { value: '{}' }});\n-    expect(getByPlaceholderText('Please enter parameters')).toHaveValue('{}');\n-    fireEvent.change(getByPlaceholderText('Please enter user information'), { target: { value: 'test-user' }});\n-    expect(getByPlaceholderText('Please enter user information')).toHaveValue('test-user');\n-    fireEvent.click(getByRole('switch'));\n-    expect(getByText('ON')).toBeInTheDocument();\n+\n+    // No errors at start\n+    expect(queryAllByText('Invalid JSON').length === 0);\n+\n+    // No JSON (empty field)\n+    fireEvent.change(getByLabelText('headers-textarea'), { target: { value: '' }});\n+    expect(queryAllByText('Invalid JSON').length === 0);\n+    fireEvent.change(getByLabelText('processors-textarea'), { target: { value: '' }});\n+    expect(queryAllByText('Invalid JSON').length === 0);\n+    fireEvent.change(getByLabelText('processors-textarea'), { target: { value: '' }});\n+    expect(queryAllByText('Invalid JSON').length === 0);\n+\n+    // Invalid JSON\n+    fireEvent.change(getByLabelText('headers-textarea'), { target: { value: '{\"badJSON\": \"noClosingBracket\"' }});\n+    expect(queryAllByText('Invalid JSON').length === 1);\n+    fireEvent.change(getByLabelText('processors-textarea'), { target: { value: '{\"badJSON\": \"noClosingBracket\"' }});\n+    expect(queryAllByText('Invalid JSON').length === 2);\n+    fireEvent.change(getByLabelText('processors-textarea'), { target: { value: '{\"badJSON\": \"noClosingBracket\"' }});\n+    expect(queryAllByText('Invalid JSON').length === 3);\n+\n+    // Valid JSON\n+    fireEvent.change(getByLabelText('headers-textarea'), { target: { value: '{\"goodJSON\": true}' }});\n+    expect(queryAllByText('Invalid JSON').length === 2);\n+    fireEvent.change(getByLabelText('processors-textarea'), { target: { value: '{\"goodJSON\": true}' }});\n+    expect(queryAllByText('Invalid JSON').length === 1);\n+    fireEvent.change(getByLabelText('processors-textarea'), { target: { value: '{\"goodJSON\": true}' }});\n+    expect(queryAllByText('Invalid JSON').length === 0);\n+\n   });\n \n-  test('Verify read only users cannot edit settings', () => {\n-    const { getByText, getByPlaceholderText, getByRole } = render(<AdvancedSettingsDialog {...data.advancedSettings} canWrite={false} />);\n+  test('Verify read only users cannot edit settings', async () => {\n+    let getByText, getByPlaceholderText;\n+    await act(async () => {\n+      const renderResults = render(\n+        <AdvancedSettingsDialog {...data.advancedMapping} canWrite={false} />\n+      );\n+      getByText = renderResults.getByText;\n+      getByPlaceholderText = renderResults.getByPlaceholderText;\n+    });\n+\n     expect(document.querySelector('#sourceDatabase')).toHaveClass('ant-select-disabled');\n     expect(document.querySelector('#targetDatabase')).toHaveClass('ant-select-disabled');\n     expect(document.querySelector('#additionalColl')).toHaveClass('ant-select-disabled');\n     expect(getByPlaceholderText('Please enter target permissions')).toBeDisabled();\n     expect(getByPlaceholderText('Please enter batch size')).toBeDisabled();\n+    expect(document.querySelector('#headers')).toHaveClass('ant-input-disabled');\n+    expect(document.querySelector('#targetFormat')).toHaveClass('ant-select-disabled');\n     expect(document.querySelector('#provGranularity')).toHaveClass('ant-select-disabled');\n \n+    fireEvent.click(getByText('Processors'));\n+    expect(document.querySelector('#processors')).toHaveClass('ant-input-disabled');\n+\n     fireEvent.click(getByText('Custom Hook'));\n-    expect(getByPlaceholderText('Please enter module')).toBeDisabled();\n-    expect(getByPlaceholderText('Please enter parameters')).toBeDisabled();\n-    expect(getByPlaceholderText('Please enter user information')).toBeDisabled();\n-    expect(getByRole('switch')).toBeDisabled();\n+    expect(document.querySelector('#customHook')).toHaveClass('ant-input-disabled');\n   });\n \n-  test('Verify put is called when Mapping configuration is saved', async () => {\n-    //Enhance this test once DHFPROD-4712 is fixed\n-    axiosMock.put.mockImplementationOnce(jest.fn(() => Promise.resolve({ status: 200, data: {} })));\n-    const { getByText } = render(<AdvancedSettingsDialog {...data.advancedSettings} />);\n+  test('Verify post is called when Mapping settings are saved', async () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 338}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUwNTMyNw==", "bodyText": "I switched to POST from PUT here because PUT no longer worked for updating the new JSON fields. We should discuss with @ryanjdew and update Advanced Settings (and possibly other) CRUD across app if necessary so we aren't testing verbs unnecessarily.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437505327", "createdAt": "2020-06-09T15:14:12Z", "author": {"login": "wooldridge"}, "path": "marklogic-data-hub-central/ui/src/components/advanced-settings/advanced-settings-dialog.test.tsx", "diffHunk": "@@ -128,83 +169,147 @@ describe('Update data load settings component', () => {\n     const testFormatOptions = getAllByTestId('targetFormatOptions').map(li => li);\n     expect(testFormatOptions.map(li => li.textContent).toString()).toEqual('JSON,XML');\n     fireEvent.select(testFormatOptions[1]);\n-    expect(getByText('XML')).toBeInTheDocument();\n \n-    //Verifying provenance options select field\n-    fireEvent.click(getByText('Coarse-grained'));\n-    const provOptions = getAllByTestId('provOptions').map(li => li);\n-    expect(provOptions.map(li => li.textContent).toString()).toEqual('Coarse-grained,Off');\n-    fireEvent.select(provOptions[1]);\n-    expect(getByText('Off')).toBeInTheDocument();\n+    fireEvent.click(getByText('Processors'));\n+    fireEvent.change(getByLabelText('processors-textarea'), { target: { value: 'processors-changed' }});\n+    expect(getByLabelText('processors-textarea')).toHaveValue('processors-changed');\n+\n+    fireEvent.click(getByText('Custom Hook'));\n+    fireEvent.change(getByLabelText('customHook-textarea'), { target: { value: 'hook-changed' }});\n+    expect(getByLabelText('customHook-textarea')).toHaveValue('hook-changed');\n+\n+  });\n+\n+  test('Verify no/invalid/valid JSON is recognized correctly in JSON fields', async () => {\n+    let getByText, getByLabelText, queryAllByText;\n+    await act(async () => {\n+      const renderResults = render(\n+        <AdvancedSettingsDialog {...data.advancedMapping} />\n+      );\n+      getByText = renderResults.getByText;\n+      getByLabelText = renderResults.getByLabelText;\n+      queryAllByText = renderResults.queryAllByText;\n+    });\n \n+    // Expand all textarea inputs\n+    fireEvent.click(getByText('Processors'));\n     fireEvent.click(getByText('Custom Hook'));\n-    fireEvent.change(getByPlaceholderText('Please enter module'), { target: { value: 'test-module' }});\n-    expect(getByPlaceholderText('Please enter module')).toHaveValue('test-module');\n-    fireEvent.change(getByPlaceholderText('Please enter parameters'), { target: { value: '{}' }});\n-    expect(getByPlaceholderText('Please enter parameters')).toHaveValue('{}');\n-    fireEvent.change(getByPlaceholderText('Please enter user information'), { target: { value: 'test-user' }});\n-    expect(getByPlaceholderText('Please enter user information')).toHaveValue('test-user');\n-    fireEvent.click(getByRole('switch'));\n-    expect(getByText('ON')).toBeInTheDocument();\n+\n+    // No errors at start\n+    expect(queryAllByText('Invalid JSON').length === 0);\n+\n+    // No JSON (empty field)\n+    fireEvent.change(getByLabelText('headers-textarea'), { target: { value: '' }});\n+    expect(queryAllByText('Invalid JSON').length === 0);\n+    fireEvent.change(getByLabelText('processors-textarea'), { target: { value: '' }});\n+    expect(queryAllByText('Invalid JSON').length === 0);\n+    fireEvent.change(getByLabelText('processors-textarea'), { target: { value: '' }});\n+    expect(queryAllByText('Invalid JSON').length === 0);\n+\n+    // Invalid JSON\n+    fireEvent.change(getByLabelText('headers-textarea'), { target: { value: '{\"badJSON\": \"noClosingBracket\"' }});\n+    expect(queryAllByText('Invalid JSON').length === 1);\n+    fireEvent.change(getByLabelText('processors-textarea'), { target: { value: '{\"badJSON\": \"noClosingBracket\"' }});\n+    expect(queryAllByText('Invalid JSON').length === 2);\n+    fireEvent.change(getByLabelText('processors-textarea'), { target: { value: '{\"badJSON\": \"noClosingBracket\"' }});\n+    expect(queryAllByText('Invalid JSON').length === 3);\n+\n+    // Valid JSON\n+    fireEvent.change(getByLabelText('headers-textarea'), { target: { value: '{\"goodJSON\": true}' }});\n+    expect(queryAllByText('Invalid JSON').length === 2);\n+    fireEvent.change(getByLabelText('processors-textarea'), { target: { value: '{\"goodJSON\": true}' }});\n+    expect(queryAllByText('Invalid JSON').length === 1);\n+    fireEvent.change(getByLabelText('processors-textarea'), { target: { value: '{\"goodJSON\": true}' }});\n+    expect(queryAllByText('Invalid JSON').length === 0);\n+\n   });\n \n-  test('Verify read only users cannot edit settings', () => {\n-    const { getByText, getByPlaceholderText, getByRole } = render(<AdvancedSettingsDialog {...data.advancedSettings} canWrite={false} />);\n+  test('Verify read only users cannot edit settings', async () => {\n+    let getByText, getByPlaceholderText;\n+    await act(async () => {\n+      const renderResults = render(\n+        <AdvancedSettingsDialog {...data.advancedMapping} canWrite={false} />\n+      );\n+      getByText = renderResults.getByText;\n+      getByPlaceholderText = renderResults.getByPlaceholderText;\n+    });\n+\n     expect(document.querySelector('#sourceDatabase')).toHaveClass('ant-select-disabled');\n     expect(document.querySelector('#targetDatabase')).toHaveClass('ant-select-disabled');\n     expect(document.querySelector('#additionalColl')).toHaveClass('ant-select-disabled');\n     expect(getByPlaceholderText('Please enter target permissions')).toBeDisabled();\n     expect(getByPlaceholderText('Please enter batch size')).toBeDisabled();\n+    expect(document.querySelector('#headers')).toHaveClass('ant-input-disabled');\n+    expect(document.querySelector('#targetFormat')).toHaveClass('ant-select-disabled');\n     expect(document.querySelector('#provGranularity')).toHaveClass('ant-select-disabled');\n \n+    fireEvent.click(getByText('Processors'));\n+    expect(document.querySelector('#processors')).toHaveClass('ant-input-disabled');\n+\n     fireEvent.click(getByText('Custom Hook'));\n-    expect(getByPlaceholderText('Please enter module')).toBeDisabled();\n-    expect(getByPlaceholderText('Please enter parameters')).toBeDisabled();\n-    expect(getByPlaceholderText('Please enter user information')).toBeDisabled();\n-    expect(getByRole('switch')).toBeDisabled();\n+    expect(document.querySelector('#customHook')).toHaveClass('ant-input-disabled');\n   });\n \n-  test('Verify put is called when Mapping configuration is saved', async () => {\n-    //Enhance this test once DHFPROD-4712 is fixed\n-    axiosMock.put.mockImplementationOnce(jest.fn(() => Promise.resolve({ status: 200, data: {} })));\n-    const { getByText } = render(<AdvancedSettingsDialog {...data.advancedSettings} />);\n+  test('Verify post is called when Mapping settings are saved', async () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE2NjQ5OA=="}, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 338}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzQ1ODgzOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/mapping-card.test.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjozNDo0MFrOGg6oUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjozNDo0MFrOGg6oUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE2ODIxMA==", "bodyText": "Can we remove this.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437168210", "createdAt": "2020-06-09T06:34:40Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/mapping-card.test.tsx", "diffHunk": "@@ -131,16 +131,18 @@ describe(\"Entity Tiles component\", () => {\n       await wait(() => {\n           fireEvent.click(saveButton);\n       });\n-      expect(axiosMock.put).toHaveBeenCalledTimes(1);\n+      expect(axiosMock.post).toHaveBeenCalledTimes(1);\n \n       //Open settings again\n       await wait(() => {\n           fireEvent.click(getByRole(\"settings-mapping\"));\n       })\n-      expect(getByText('Batch Size:')).toBeInTheDocument();\n+\n+      expect(getByText('Batch Size')).toBeInTheDocument();\n       expect(getByPlaceholderText('Please enter batch size')).toHaveValue('50');\n \n       targetPermissions = getByPlaceholderText(\"Please enter target permissions\");\n+      debug();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzQ2MDYxOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/mapping-card.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjozNToxNVrOGg6pZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNToxODoyM1rOGhPi_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE2ODQ4NA==", "bodyText": "This should be PUT. We have a test using POST in advanced-settings component already.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437168484", "createdAt": "2020-06-09T06:35:15Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/mapping-card.test.tsx", "diffHunk": "@@ -131,16 +131,18 @@ describe(\"Entity Tiles component\", () => {\n       await wait(() => {\n           fireEvent.click(saveButton);\n       });\n-      expect(axiosMock.put).toHaveBeenCalledTimes(1);\n+      expect(axiosMock.post).toHaveBeenCalledTimes(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUxMDkxMQ==", "bodyText": "The advanced-settings component now uses POST, not PUT:\nhttps://github.com/marklogic/marklogic-data-hub/blob/feature/DHFPROD-4969-advanced-settings/marklogic-data-hub-central/ui/src/components/advanced-settings/advanced-settings-dialog.tsx#L148\nFYI: @ryanjdew", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437510911", "createdAt": "2020-06-09T15:18:23Z", "author": {"login": "wooldridge"}, "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/mapping-card.test.tsx", "diffHunk": "@@ -131,16 +131,18 @@ describe(\"Entity Tiles component\", () => {\n       await wait(() => {\n           fireEvent.click(saveButton);\n       });\n-      expect(axiosMock.put).toHaveBeenCalledTimes(1);\n+      expect(axiosMock.post).toHaveBeenCalledTimes(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE2ODQ4NA=="}, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzQ2NDk1OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/components/load/load-list.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjozNzowMVrOGg6sAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNToxODo0NFrOGhPksA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE2OTE1Mw==", "bodyText": "This should be PUT. We have a test using POST in advanced-settings component already.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437169153", "createdAt": "2020-06-09T06:37:01Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/load/load-list.test.tsx", "diffHunk": "@@ -62,25 +63,25 @@ describe('Load data component', () => {\n     await wait(() => {\n         fireEvent.click(saveButton);\n     });\n-    expect(axiosMock.put).toHaveBeenCalledTimes(1);\n+    expect(axiosMock.post).toHaveBeenCalledTimes(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUxMTM0NA==", "bodyText": "See above.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437511344", "createdAt": "2020-06-09T15:18:44Z", "author": {"login": "wooldridge"}, "path": "marklogic-data-hub-central/ui/src/components/load/load-list.test.tsx", "diffHunk": "@@ -62,25 +63,25 @@ describe('Load data component', () => {\n     await wait(() => {\n         fireEvent.click(saveButton);\n     });\n-    expect(axiosMock.put).toHaveBeenCalledTimes(1);\n+    expect(axiosMock.post).toHaveBeenCalledTimes(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE2OTE1Mw=="}, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzQ3MDQ2OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/components/load/load-list.test.tsx", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjozOTowOVrOGg6vTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMDo1MTowNlrOGhb04Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE2OTk5Nw==", "bodyText": "GET call to /settings should be restored.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437169997", "createdAt": "2020-06-09T06:39:09Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/load/load-list.test.tsx", "diffHunk": "@@ -62,25 +63,25 @@ describe('Load data component', () => {\n     await wait(() => {\n         fireEvent.click(saveButton);\n     });\n-    expect(axiosMock.put).toHaveBeenCalledTimes(1);\n+    expect(axiosMock.post).toHaveBeenCalledTimes(1);\n \n     //open settings again\n \n     await wait(() => {\n         fireEvent.click(getByTestId(data.loadData.data[0].name+'-settings'));\n     })\n-    let targetCollection = getByTitle('customerCollection'); // Additional target collection (Added by user)\n+    let targetCollection = getByTitle('addedCollection'); // Additional target collection (Added by user)\n \n     expect(getByText('Advanced Settings')).toBeInTheDocument();\n     // Check if the settings API is being called.\n-    expect(axiosMock.get).toBeCalledWith('/api/steps/ingestion/' + data.loadData.data[0].name + '/settings');\n-    expect(getByText('Target Collections:')).toBeInTheDocument();\n+    expect(axiosMock.get).toBeCalledWith('/api/steps/ingestion/' + data.loadData.data[0].name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUxNDQ5OQ==", "bodyText": "This appropriately mocks the (updated) GET endpoint being used in the component:\nhttps://github.com/marklogic/marklogic-data-hub/blob/feature/DHFPROD-4969-advanced-settings/marklogic-data-hub-central/ui/src/components/advanced-settings/advanced-settings-dialog.tsx#L166", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437514499", "createdAt": "2020-06-09T15:21:03Z", "author": {"login": "wooldridge"}, "path": "marklogic-data-hub-central/ui/src/components/load/load-list.test.tsx", "diffHunk": "@@ -62,25 +63,25 @@ describe('Load data component', () => {\n     await wait(() => {\n         fireEvent.click(saveButton);\n     });\n-    expect(axiosMock.put).toHaveBeenCalledTimes(1);\n+    expect(axiosMock.post).toHaveBeenCalledTimes(1);\n \n     //open settings again\n \n     await wait(() => {\n         fireEvent.click(getByTestId(data.loadData.data[0].name+'-settings'));\n     })\n-    let targetCollection = getByTitle('customerCollection'); // Additional target collection (Added by user)\n+    let targetCollection = getByTitle('addedCollection'); // Additional target collection (Added by user)\n \n     expect(getByText('Advanced Settings')).toBeInTheDocument();\n     // Check if the settings API is being called.\n-    expect(axiosMock.get).toBeCalledWith('/api/steps/ingestion/' + data.loadData.data[0].name + '/settings');\n-    expect(getByText('Target Collections:')).toBeInTheDocument();\n+    expect(axiosMock.get).toBeCalledWith('/api/steps/ingestion/' + data.loadData.data[0].name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE2OTk5Nw=="}, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYzODg2NA==", "bodyText": "hmm.. Swagger UI shows PUT request. Are we missing something. Everytime we try to update a POST request would overwrite as opposed to update.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437638864", "createdAt": "2020-06-09T18:37:08Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/load/load-list.test.tsx", "diffHunk": "@@ -62,25 +63,25 @@ describe('Load data component', () => {\n     await wait(() => {\n         fireEvent.click(saveButton);\n     });\n-    expect(axiosMock.put).toHaveBeenCalledTimes(1);\n+    expect(axiosMock.post).toHaveBeenCalledTimes(1);\n \n     //open settings again\n \n     await wait(() => {\n         fireEvent.click(getByTestId(data.loadData.data[0].name+'-settings'));\n     })\n-    let targetCollection = getByTitle('customerCollection'); // Additional target collection (Added by user)\n+    let targetCollection = getByTitle('addedCollection'); // Additional target collection (Added by user)\n \n     expect(getByText('Advanced Settings')).toBeInTheDocument();\n     // Check if the settings API is being called.\n-    expect(axiosMock.get).toBeCalledWith('/api/steps/ingestion/' + data.loadData.data[0].name + '/settings');\n-    expect(getByText('Target Collections:')).toBeInTheDocument();\n+    expect(axiosMock.get).toBeCalledWith('/api/steps/ingestion/' + data.loadData.data[0].name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE2OTk5Nw=="}, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY1NTc5MQ==", "bodyText": "I believe the Swagger is not up to date, I think @ryanjdew can describe the change (using POST without the \"/settings\" suffix for Advanced Settings updates). I'm hoping we can update the Swagger (if necessary) as part of this PR.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437655791", "createdAt": "2020-06-09T19:07:15Z", "author": {"login": "wooldridge"}, "path": "marklogic-data-hub-central/ui/src/components/load/load-list.test.tsx", "diffHunk": "@@ -62,25 +63,25 @@ describe('Load data component', () => {\n     await wait(() => {\n         fireEvent.click(saveButton);\n     });\n-    expect(axiosMock.put).toHaveBeenCalledTimes(1);\n+    expect(axiosMock.post).toHaveBeenCalledTimes(1);\n \n     //open settings again\n \n     await wait(() => {\n         fireEvent.click(getByTestId(data.loadData.data[0].name+'-settings'));\n     })\n-    let targetCollection = getByTitle('customerCollection'); // Additional target collection (Added by user)\n+    let targetCollection = getByTitle('addedCollection'); // Additional target collection (Added by user)\n \n     expect(getByText('Advanced Settings')).toBeInTheDocument();\n     // Check if the settings API is being called.\n-    expect(axiosMock.get).toBeCalledWith('/api/steps/ingestion/' + data.loadData.data[0].name + '/settings');\n-    expect(getByText('Target Collections:')).toBeInTheDocument();\n+    expect(axiosMock.get).toBeCalledWith('/api/steps/ingestion/' + data.loadData.data[0].name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE2OTk5Nw=="}, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcxMjA5Nw==", "bodyText": "The POST doesn't wipe out properties that aren't included, so it works for these updates.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437712097", "createdAt": "2020-06-09T20:51:06Z", "author": {"login": "wooldridge"}, "path": "marklogic-data-hub-central/ui/src/components/load/load-list.test.tsx", "diffHunk": "@@ -62,25 +63,25 @@ describe('Load data component', () => {\n     await wait(() => {\n         fireEvent.click(saveButton);\n     });\n-    expect(axiosMock.put).toHaveBeenCalledTimes(1);\n+    expect(axiosMock.post).toHaveBeenCalledTimes(1);\n \n     //open settings again\n \n     await wait(() => {\n         fireEvent.click(getByTestId(data.loadData.data[0].name+'-settings'));\n     })\n-    let targetCollection = getByTitle('customerCollection'); // Additional target collection (Added by user)\n+    let targetCollection = getByTitle('addedCollection'); // Additional target collection (Added by user)\n \n     expect(getByText('Advanced Settings')).toBeInTheDocument();\n     // Check if the settings API is being called.\n-    expect(axiosMock.get).toBeCalledWith('/api/steps/ingestion/' + data.loadData.data[0].name + '/settings');\n-    expect(getByText('Target Collections:')).toBeInTheDocument();\n+    expect(axiosMock.get).toBeCalledWith('/api/steps/ingestion/' + data.loadData.data[0].name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE2OTk5Nw=="}, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzQ3NDgxOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/config/load.config.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjo0MDo0OFrOGg6x5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjo0MDo0OFrOGg6x5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3MDY2Mw==", "bodyText": "we need the collection name to be same as the step name since this is a default collection. Must restore.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437170663", "createdAt": "2020-06-09T06:40:48Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/config/load.config.ts", "diffHunk": "@@ -49,10 +55,19 @@ const loadSettings = {\"data\" :\n         \"targetFormat\": \"json\",\n         \"targetDatabase\": \"data-hub-STAGING\",\n         \"collections\": [\n-          \"testLoad\"\n+          \"testCollection\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzQ3OTU2OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/config/mocks.config.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjo0MjozNlrOGg605Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTo0Njo0NVrOGhQ_8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3MTQyOQ==", "bodyText": "Must restore PUT. We need Delete, Put, Post and Get.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437171429", "createdAt": "2020-06-09T06:42:36Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/config/mocks.config.ts", "diffHunk": "@@ -1,156 +1,220 @@\n import loadData from \"./load.config\";\n import curateData from \"./run.config\";\n-import axiosMock from \"axios\";\n+import advancedData from \"./advanced-settings.config\";\n \n const loadAPI = (axiosMock) => {\n-    axiosMock.delete['mockImplementation']((url) => {\n+  axiosMock.delete['mockImplementation']((url) => {\n+    switch (url) {\n+      case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+        return Promise.resolve(loadData.genericSuccess);\n+      default:\n+        return Promise.reject(new Error('not found'))\n+    }\n+  });\n+  axiosMock.post['mockImplementation']((url) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzNDcwNA==", "bodyText": "See above and below.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437534704", "createdAt": "2020-06-09T15:46:45Z", "author": {"login": "wooldridge"}, "path": "marklogic-data-hub-central/ui/src/config/mocks.config.ts", "diffHunk": "@@ -1,156 +1,220 @@\n import loadData from \"./load.config\";\n import curateData from \"./run.config\";\n-import axiosMock from \"axios\";\n+import advancedData from \"./advanced-settings.config\";\n \n const loadAPI = (axiosMock) => {\n-    axiosMock.delete['mockImplementation']((url) => {\n+  axiosMock.delete['mockImplementation']((url) => {\n+    switch (url) {\n+      case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+        return Promise.resolve(loadData.genericSuccess);\n+      default:\n+        return Promise.reject(new Error('not found'))\n+    }\n+  });\n+  axiosMock.post['mockImplementation']((url) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3MTQyOQ=="}, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzQ4MjQ2OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/config/mocks.config.ts", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjo0MzozOVrOGg62rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMjoyNjowNFrOGheiew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3MTg4Nw==", "bodyText": "Must restore PUT. We need Delete, Put, Post and Get.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437171887", "createdAt": "2020-06-09T06:43:39Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/config/mocks.config.ts", "diffHunk": "@@ -1,156 +1,220 @@\n import loadData from \"./load.config\";\n import curateData from \"./run.config\";\n-import axiosMock from \"axios\";\n+import advancedData from \"./advanced-settings.config\";\n \n const loadAPI = (axiosMock) => {\n-    axiosMock.delete['mockImplementation']((url) => {\n+  axiosMock.delete['mockImplementation']((url) => {\n+    switch (url) {\n+      case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+        return Promise.resolve(loadData.genericSuccess);\n+      default:\n+        return Promise.reject(new Error('not found'))\n+    }\n+  });\n+  axiosMock.post['mockImplementation']((url) => {\n       switch (url) {\n-        case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n-          return Promise.resolve(loadData.genericSuccess);\n-        default:\n-          return Promise.reject(new Error('not found'))\n+          case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+              return Promise.resolve({\n+                  \"data\": {},\n+                  \"status\": 200\n+              });\n+          default:\n+              return Promise.reject(new Error('not found'));\n       }\n-    });\n-    axiosMock.put['mockImplementation']((url) => {\n-        switch (url) {\n-            case '/api/steps/ingestion/' + loadData.loads.data[0].name + '/settings':\n-                return Promise.resolve({\n-                    \"data\": {},\n-                    \"status\": 200\n-                });\n-            default:\n-                return Promise.reject(new Error('not found'));\n-        }\n-    })\n-    return axiosMock.get['mockImplementation']((url) => {\n-      switch (url) {\n-        case '/api/flows':\n-          return Promise.resolve(loadData.flows);\n-        case '/api/steps/ingestion':\n-          return Promise.resolve(loadData.loads);\n-        case '/api/steps/ingestion/' + loadData.loads.data[0].name + '/settings':\n-          return Promise.resolve(loadData.loadSettings);\n-        default:\n-          return Promise.reject(new Error('not found'));\n-      }\n-    })\n-  };\n+  })\n+  return axiosMock.get['mockImplementation']((url) => {\n+    switch (url) {\n+      case '/api/flows':\n+        return Promise.resolve(loadData.flows);\n+      case '/api/steps/ingestion':\n+        return Promise.resolve(loadData.loads);\n+      case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+        return Promise.resolve(loadData.loadSettings);\n+      default:\n+        return Promise.reject(new Error('not found'));\n+    }\n+  })\n+};\n \n-  const curateAPI = (axiosMock) => {\n-    axiosMock.delete['mockImplementation']((url) => {\n-        switch (url) {\n-            case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name:\n-                return Promise.resolve(loadData.genericSuccess);\n-            default:\n-                return Promise.reject(new Error('not found'))\n-        }\n-    });\n-    axiosMock.put['mockImplementation']((url) => {\n-        switch (url) {\n-            case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name + '/settings':\n-                return Promise.resolve({\n-                    \"data\": {},\n-                    \"status\": 200\n-                });\n-            default:\n-                return Promise.reject(new Error('not found'));\n-        }\n-    });\n-    return axiosMock.get['mockImplementation']((url) => {\n-      switch (url) {\n-        case '/api/flows':\n-          return Promise.resolve(curateData.flows)\n-        case '/api/models/primaryEntityTypes':\n-          return Promise.resolve(curateData.primaryEntityTypes);\n-        case '/api/steps/ingestion':\n-          return Promise.resolve(curateData.loads);\n-        case '/api/steps/ingestion/' + loadData.loads.data[0].name + '/settings':\n-          return Promise.resolve(curateData.loadSettings);\n-        case '/api/steps/mapping':\n-          return Promise.resolve(curateData.mappings);\n-        case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name + '/settings':\n-          return Promise.resolve(curateData.mappingSettings);\n-        case '/api/artifacts/matching':\n-          return Promise.resolve(curateData.matchings);\n+const curateAPI = (axiosMock) => {\n+  axiosMock.delete['mockImplementation']((url) => {\n+    switch (url) {\n+      case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+        return Promise.resolve(loadData.genericSuccess);\n+      case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name:\n+        return Promise.resolve(loadData.genericSuccess);\n+      default:\n+        return Promise.reject(new Error('not found'))\n+    }\n+  });\n+  axiosMock.post['mockImplementation']((url) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUxNjYzNQ==", "bodyText": "See above, we don't use PUT now, we use POST:\nhttps://github.com/marklogic/marklogic-data-hub/blob/feature/DHFPROD-4969-advanced-settings/marklogic-data-hub-central/ui/src/components/advanced-settings/advanced-settings-dialog.tsx", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437516635", "createdAt": "2020-06-09T15:22:57Z", "author": {"login": "wooldridge"}, "path": "marklogic-data-hub-central/ui/src/config/mocks.config.ts", "diffHunk": "@@ -1,156 +1,220 @@\n import loadData from \"./load.config\";\n import curateData from \"./run.config\";\n-import axiosMock from \"axios\";\n+import advancedData from \"./advanced-settings.config\";\n \n const loadAPI = (axiosMock) => {\n-    axiosMock.delete['mockImplementation']((url) => {\n+  axiosMock.delete['mockImplementation']((url) => {\n+    switch (url) {\n+      case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+        return Promise.resolve(loadData.genericSuccess);\n+      default:\n+        return Promise.reject(new Error('not found'))\n+    }\n+  });\n+  axiosMock.post['mockImplementation']((url) => {\n       switch (url) {\n-        case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n-          return Promise.resolve(loadData.genericSuccess);\n-        default:\n-          return Promise.reject(new Error('not found'))\n+          case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+              return Promise.resolve({\n+                  \"data\": {},\n+                  \"status\": 200\n+              });\n+          default:\n+              return Promise.reject(new Error('not found'));\n       }\n-    });\n-    axiosMock.put['mockImplementation']((url) => {\n-        switch (url) {\n-            case '/api/steps/ingestion/' + loadData.loads.data[0].name + '/settings':\n-                return Promise.resolve({\n-                    \"data\": {},\n-                    \"status\": 200\n-                });\n-            default:\n-                return Promise.reject(new Error('not found'));\n-        }\n-    })\n-    return axiosMock.get['mockImplementation']((url) => {\n-      switch (url) {\n-        case '/api/flows':\n-          return Promise.resolve(loadData.flows);\n-        case '/api/steps/ingestion':\n-          return Promise.resolve(loadData.loads);\n-        case '/api/steps/ingestion/' + loadData.loads.data[0].name + '/settings':\n-          return Promise.resolve(loadData.loadSettings);\n-        default:\n-          return Promise.reject(new Error('not found'));\n-      }\n-    })\n-  };\n+  })\n+  return axiosMock.get['mockImplementation']((url) => {\n+    switch (url) {\n+      case '/api/flows':\n+        return Promise.resolve(loadData.flows);\n+      case '/api/steps/ingestion':\n+        return Promise.resolve(loadData.loads);\n+      case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+        return Promise.resolve(loadData.loadSettings);\n+      default:\n+        return Promise.reject(new Error('not found'));\n+    }\n+  })\n+};\n \n-  const curateAPI = (axiosMock) => {\n-    axiosMock.delete['mockImplementation']((url) => {\n-        switch (url) {\n-            case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name:\n-                return Promise.resolve(loadData.genericSuccess);\n-            default:\n-                return Promise.reject(new Error('not found'))\n-        }\n-    });\n-    axiosMock.put['mockImplementation']((url) => {\n-        switch (url) {\n-            case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name + '/settings':\n-                return Promise.resolve({\n-                    \"data\": {},\n-                    \"status\": 200\n-                });\n-            default:\n-                return Promise.reject(new Error('not found'));\n-        }\n-    });\n-    return axiosMock.get['mockImplementation']((url) => {\n-      switch (url) {\n-        case '/api/flows':\n-          return Promise.resolve(curateData.flows)\n-        case '/api/models/primaryEntityTypes':\n-          return Promise.resolve(curateData.primaryEntityTypes);\n-        case '/api/steps/ingestion':\n-          return Promise.resolve(curateData.loads);\n-        case '/api/steps/ingestion/' + loadData.loads.data[0].name + '/settings':\n-          return Promise.resolve(curateData.loadSettings);\n-        case '/api/steps/mapping':\n-          return Promise.resolve(curateData.mappings);\n-        case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name + '/settings':\n-          return Promise.resolve(curateData.mappingSettings);\n-        case '/api/artifacts/matching':\n-          return Promise.resolve(curateData.matchings);\n+const curateAPI = (axiosMock) => {\n+  axiosMock.delete['mockImplementation']((url) => {\n+    switch (url) {\n+      case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+        return Promise.resolve(loadData.genericSuccess);\n+      case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name:\n+        return Promise.resolve(loadData.genericSuccess);\n+      default:\n+        return Promise.reject(new Error('not found'))\n+    }\n+  });\n+  axiosMock.post['mockImplementation']((url) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3MTg4Nw=="}, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY1ODM1Mg==", "bodyText": "The /settings endpoints have become redundant with these recent updates to the settings page. The majority of the properties now appear there and @rjrudin made changes to the steps endpoints to only update the properties sent. The middle-tier settings endpoint was calling the same code as the regular step endpoint.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437658352", "createdAt": "2020-06-09T19:12:04Z", "author": {"login": "ryanjdew"}, "path": "marklogic-data-hub-central/ui/src/config/mocks.config.ts", "diffHunk": "@@ -1,156 +1,220 @@\n import loadData from \"./load.config\";\n import curateData from \"./run.config\";\n-import axiosMock from \"axios\";\n+import advancedData from \"./advanced-settings.config\";\n \n const loadAPI = (axiosMock) => {\n-    axiosMock.delete['mockImplementation']((url) => {\n+  axiosMock.delete['mockImplementation']((url) => {\n+    switch (url) {\n+      case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+        return Promise.resolve(loadData.genericSuccess);\n+      default:\n+        return Promise.reject(new Error('not found'))\n+    }\n+  });\n+  axiosMock.post['mockImplementation']((url) => {\n       switch (url) {\n-        case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n-          return Promise.resolve(loadData.genericSuccess);\n-        default:\n-          return Promise.reject(new Error('not found'))\n+          case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+              return Promise.resolve({\n+                  \"data\": {},\n+                  \"status\": 200\n+              });\n+          default:\n+              return Promise.reject(new Error('not found'));\n       }\n-    });\n-    axiosMock.put['mockImplementation']((url) => {\n-        switch (url) {\n-            case '/api/steps/ingestion/' + loadData.loads.data[0].name + '/settings':\n-                return Promise.resolve({\n-                    \"data\": {},\n-                    \"status\": 200\n-                });\n-            default:\n-                return Promise.reject(new Error('not found'));\n-        }\n-    })\n-    return axiosMock.get['mockImplementation']((url) => {\n-      switch (url) {\n-        case '/api/flows':\n-          return Promise.resolve(loadData.flows);\n-        case '/api/steps/ingestion':\n-          return Promise.resolve(loadData.loads);\n-        case '/api/steps/ingestion/' + loadData.loads.data[0].name + '/settings':\n-          return Promise.resolve(loadData.loadSettings);\n-        default:\n-          return Promise.reject(new Error('not found'));\n-      }\n-    })\n-  };\n+  })\n+  return axiosMock.get['mockImplementation']((url) => {\n+    switch (url) {\n+      case '/api/flows':\n+        return Promise.resolve(loadData.flows);\n+      case '/api/steps/ingestion':\n+        return Promise.resolve(loadData.loads);\n+      case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+        return Promise.resolve(loadData.loadSettings);\n+      default:\n+        return Promise.reject(new Error('not found'));\n+    }\n+  })\n+};\n \n-  const curateAPI = (axiosMock) => {\n-    axiosMock.delete['mockImplementation']((url) => {\n-        switch (url) {\n-            case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name:\n-                return Promise.resolve(loadData.genericSuccess);\n-            default:\n-                return Promise.reject(new Error('not found'))\n-        }\n-    });\n-    axiosMock.put['mockImplementation']((url) => {\n-        switch (url) {\n-            case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name + '/settings':\n-                return Promise.resolve({\n-                    \"data\": {},\n-                    \"status\": 200\n-                });\n-            default:\n-                return Promise.reject(new Error('not found'));\n-        }\n-    });\n-    return axiosMock.get['mockImplementation']((url) => {\n-      switch (url) {\n-        case '/api/flows':\n-          return Promise.resolve(curateData.flows)\n-        case '/api/models/primaryEntityTypes':\n-          return Promise.resolve(curateData.primaryEntityTypes);\n-        case '/api/steps/ingestion':\n-          return Promise.resolve(curateData.loads);\n-        case '/api/steps/ingestion/' + loadData.loads.data[0].name + '/settings':\n-          return Promise.resolve(curateData.loadSettings);\n-        case '/api/steps/mapping':\n-          return Promise.resolve(curateData.mappings);\n-        case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name + '/settings':\n-          return Promise.resolve(curateData.mappingSettings);\n-        case '/api/artifacts/matching':\n-          return Promise.resolve(curateData.matchings);\n+const curateAPI = (axiosMock) => {\n+  axiosMock.delete['mockImplementation']((url) => {\n+    switch (url) {\n+      case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+        return Promise.resolve(loadData.genericSuccess);\n+      case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name:\n+        return Promise.resolve(loadData.genericSuccess);\n+      default:\n+        return Promise.reject(new Error('not found'))\n+    }\n+  });\n+  axiosMock.post['mockImplementation']((url) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3MTg4Nw=="}, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2NjQ5OQ==", "bodyText": "I am not sure what is the source of truth now to compare the PR against. The JIRA ticket here has all the endpoints.\nhttps://project.marklogic.com/jira/browse/DHFPROD-4951\n@ryanjdew is there a JIRA ticket for the recent updates to settings page you are referring to.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437666499", "createdAt": "2020-06-09T19:27:30Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/config/mocks.config.ts", "diffHunk": "@@ -1,156 +1,220 @@\n import loadData from \"./load.config\";\n import curateData from \"./run.config\";\n-import axiosMock from \"axios\";\n+import advancedData from \"./advanced-settings.config\";\n \n const loadAPI = (axiosMock) => {\n-    axiosMock.delete['mockImplementation']((url) => {\n+  axiosMock.delete['mockImplementation']((url) => {\n+    switch (url) {\n+      case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+        return Promise.resolve(loadData.genericSuccess);\n+      default:\n+        return Promise.reject(new Error('not found'))\n+    }\n+  });\n+  axiosMock.post['mockImplementation']((url) => {\n       switch (url) {\n-        case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n-          return Promise.resolve(loadData.genericSuccess);\n-        default:\n-          return Promise.reject(new Error('not found'))\n+          case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+              return Promise.resolve({\n+                  \"data\": {},\n+                  \"status\": 200\n+              });\n+          default:\n+              return Promise.reject(new Error('not found'));\n       }\n-    });\n-    axiosMock.put['mockImplementation']((url) => {\n-        switch (url) {\n-            case '/api/steps/ingestion/' + loadData.loads.data[0].name + '/settings':\n-                return Promise.resolve({\n-                    \"data\": {},\n-                    \"status\": 200\n-                });\n-            default:\n-                return Promise.reject(new Error('not found'));\n-        }\n-    })\n-    return axiosMock.get['mockImplementation']((url) => {\n-      switch (url) {\n-        case '/api/flows':\n-          return Promise.resolve(loadData.flows);\n-        case '/api/steps/ingestion':\n-          return Promise.resolve(loadData.loads);\n-        case '/api/steps/ingestion/' + loadData.loads.data[0].name + '/settings':\n-          return Promise.resolve(loadData.loadSettings);\n-        default:\n-          return Promise.reject(new Error('not found'));\n-      }\n-    })\n-  };\n+  })\n+  return axiosMock.get['mockImplementation']((url) => {\n+    switch (url) {\n+      case '/api/flows':\n+        return Promise.resolve(loadData.flows);\n+      case '/api/steps/ingestion':\n+        return Promise.resolve(loadData.loads);\n+      case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+        return Promise.resolve(loadData.loadSettings);\n+      default:\n+        return Promise.reject(new Error('not found'));\n+    }\n+  })\n+};\n \n-  const curateAPI = (axiosMock) => {\n-    axiosMock.delete['mockImplementation']((url) => {\n-        switch (url) {\n-            case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name:\n-                return Promise.resolve(loadData.genericSuccess);\n-            default:\n-                return Promise.reject(new Error('not found'))\n-        }\n-    });\n-    axiosMock.put['mockImplementation']((url) => {\n-        switch (url) {\n-            case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name + '/settings':\n-                return Promise.resolve({\n-                    \"data\": {},\n-                    \"status\": 200\n-                });\n-            default:\n-                return Promise.reject(new Error('not found'));\n-        }\n-    });\n-    return axiosMock.get['mockImplementation']((url) => {\n-      switch (url) {\n-        case '/api/flows':\n-          return Promise.resolve(curateData.flows)\n-        case '/api/models/primaryEntityTypes':\n-          return Promise.resolve(curateData.primaryEntityTypes);\n-        case '/api/steps/ingestion':\n-          return Promise.resolve(curateData.loads);\n-        case '/api/steps/ingestion/' + loadData.loads.data[0].name + '/settings':\n-          return Promise.resolve(curateData.loadSettings);\n-        case '/api/steps/mapping':\n-          return Promise.resolve(curateData.mappings);\n-        case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name + '/settings':\n-          return Promise.resolve(curateData.mappingSettings);\n-        case '/api/artifacts/matching':\n-          return Promise.resolve(curateData.matchings);\n+const curateAPI = (axiosMock) => {\n+  axiosMock.delete['mockImplementation']((url) => {\n+    switch (url) {\n+      case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+        return Promise.resolve(loadData.genericSuccess);\n+      case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name:\n+        return Promise.resolve(loadData.genericSuccess);\n+      default:\n+        return Promise.reject(new Error('not found'))\n+    }\n+  });\n+  axiosMock.post['mockImplementation']((url) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3MTg4Nw=="}, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2Nzc0OA==", "bodyText": "I can still see PUT request when settings are saved:", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437667748", "createdAt": "2020-06-09T19:29:54Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/config/mocks.config.ts", "diffHunk": "@@ -1,156 +1,220 @@\n import loadData from \"./load.config\";\n import curateData from \"./run.config\";\n-import axiosMock from \"axios\";\n+import advancedData from \"./advanced-settings.config\";\n \n const loadAPI = (axiosMock) => {\n-    axiosMock.delete['mockImplementation']((url) => {\n+  axiosMock.delete['mockImplementation']((url) => {\n+    switch (url) {\n+      case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+        return Promise.resolve(loadData.genericSuccess);\n+      default:\n+        return Promise.reject(new Error('not found'))\n+    }\n+  });\n+  axiosMock.post['mockImplementation']((url) => {\n       switch (url) {\n-        case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n-          return Promise.resolve(loadData.genericSuccess);\n-        default:\n-          return Promise.reject(new Error('not found'))\n+          case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+              return Promise.resolve({\n+                  \"data\": {},\n+                  \"status\": 200\n+              });\n+          default:\n+              return Promise.reject(new Error('not found'));\n       }\n-    });\n-    axiosMock.put['mockImplementation']((url) => {\n-        switch (url) {\n-            case '/api/steps/ingestion/' + loadData.loads.data[0].name + '/settings':\n-                return Promise.resolve({\n-                    \"data\": {},\n-                    \"status\": 200\n-                });\n-            default:\n-                return Promise.reject(new Error('not found'));\n-        }\n-    })\n-    return axiosMock.get['mockImplementation']((url) => {\n-      switch (url) {\n-        case '/api/flows':\n-          return Promise.resolve(loadData.flows);\n-        case '/api/steps/ingestion':\n-          return Promise.resolve(loadData.loads);\n-        case '/api/steps/ingestion/' + loadData.loads.data[0].name + '/settings':\n-          return Promise.resolve(loadData.loadSettings);\n-        default:\n-          return Promise.reject(new Error('not found'));\n-      }\n-    })\n-  };\n+  })\n+  return axiosMock.get['mockImplementation']((url) => {\n+    switch (url) {\n+      case '/api/flows':\n+        return Promise.resolve(loadData.flows);\n+      case '/api/steps/ingestion':\n+        return Promise.resolve(loadData.loads);\n+      case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+        return Promise.resolve(loadData.loadSettings);\n+      default:\n+        return Promise.reject(new Error('not found'));\n+    }\n+  })\n+};\n \n-  const curateAPI = (axiosMock) => {\n-    axiosMock.delete['mockImplementation']((url) => {\n-        switch (url) {\n-            case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name:\n-                return Promise.resolve(loadData.genericSuccess);\n-            default:\n-                return Promise.reject(new Error('not found'))\n-        }\n-    });\n-    axiosMock.put['mockImplementation']((url) => {\n-        switch (url) {\n-            case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name + '/settings':\n-                return Promise.resolve({\n-                    \"data\": {},\n-                    \"status\": 200\n-                });\n-            default:\n-                return Promise.reject(new Error('not found'));\n-        }\n-    });\n-    return axiosMock.get['mockImplementation']((url) => {\n-      switch (url) {\n-        case '/api/flows':\n-          return Promise.resolve(curateData.flows)\n-        case '/api/models/primaryEntityTypes':\n-          return Promise.resolve(curateData.primaryEntityTypes);\n-        case '/api/steps/ingestion':\n-          return Promise.resolve(curateData.loads);\n-        case '/api/steps/ingestion/' + loadData.loads.data[0].name + '/settings':\n-          return Promise.resolve(curateData.loadSettings);\n-        case '/api/steps/mapping':\n-          return Promise.resolve(curateData.mappings);\n-        case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name + '/settings':\n-          return Promise.resolve(curateData.mappingSettings);\n-        case '/api/artifacts/matching':\n-          return Promise.resolve(curateData.matchings);\n+const curateAPI = (axiosMock) => {\n+  axiosMock.delete['mockImplementation']((url) => {\n+    switch (url) {\n+      case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+        return Promise.resolve(loadData.genericSuccess);\n+      case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name:\n+        return Promise.resolve(loadData.genericSuccess);\n+      default:\n+        return Promise.reject(new Error('not found'))\n+    }\n+  });\n+  axiosMock.post['mockImplementation']((url) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3MTg4Nw=="}, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1NjUzOQ==", "bodyText": "@bsrikan The changes came in this PR: #3936\nThe PUT for /settings was working exactly like the POST \"/api/steps/{stepType}/{stepName}\". The GET for /settings was slightly different because it only contained a subset of properties of the step.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437756539", "createdAt": "2020-06-09T22:26:04Z", "author": {"login": "ryanjdew"}, "path": "marklogic-data-hub-central/ui/src/config/mocks.config.ts", "diffHunk": "@@ -1,156 +1,220 @@\n import loadData from \"./load.config\";\n import curateData from \"./run.config\";\n-import axiosMock from \"axios\";\n+import advancedData from \"./advanced-settings.config\";\n \n const loadAPI = (axiosMock) => {\n-    axiosMock.delete['mockImplementation']((url) => {\n+  axiosMock.delete['mockImplementation']((url) => {\n+    switch (url) {\n+      case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+        return Promise.resolve(loadData.genericSuccess);\n+      default:\n+        return Promise.reject(new Error('not found'))\n+    }\n+  });\n+  axiosMock.post['mockImplementation']((url) => {\n       switch (url) {\n-        case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n-          return Promise.resolve(loadData.genericSuccess);\n-        default:\n-          return Promise.reject(new Error('not found'))\n+          case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+              return Promise.resolve({\n+                  \"data\": {},\n+                  \"status\": 200\n+              });\n+          default:\n+              return Promise.reject(new Error('not found'));\n       }\n-    });\n-    axiosMock.put['mockImplementation']((url) => {\n-        switch (url) {\n-            case '/api/steps/ingestion/' + loadData.loads.data[0].name + '/settings':\n-                return Promise.resolve({\n-                    \"data\": {},\n-                    \"status\": 200\n-                });\n-            default:\n-                return Promise.reject(new Error('not found'));\n-        }\n-    })\n-    return axiosMock.get['mockImplementation']((url) => {\n-      switch (url) {\n-        case '/api/flows':\n-          return Promise.resolve(loadData.flows);\n-        case '/api/steps/ingestion':\n-          return Promise.resolve(loadData.loads);\n-        case '/api/steps/ingestion/' + loadData.loads.data[0].name + '/settings':\n-          return Promise.resolve(loadData.loadSettings);\n-        default:\n-          return Promise.reject(new Error('not found'));\n-      }\n-    })\n-  };\n+  })\n+  return axiosMock.get['mockImplementation']((url) => {\n+    switch (url) {\n+      case '/api/flows':\n+        return Promise.resolve(loadData.flows);\n+      case '/api/steps/ingestion':\n+        return Promise.resolve(loadData.loads);\n+      case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+        return Promise.resolve(loadData.loadSettings);\n+      default:\n+        return Promise.reject(new Error('not found'));\n+    }\n+  })\n+};\n \n-  const curateAPI = (axiosMock) => {\n-    axiosMock.delete['mockImplementation']((url) => {\n-        switch (url) {\n-            case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name:\n-                return Promise.resolve(loadData.genericSuccess);\n-            default:\n-                return Promise.reject(new Error('not found'))\n-        }\n-    });\n-    axiosMock.put['mockImplementation']((url) => {\n-        switch (url) {\n-            case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name + '/settings':\n-                return Promise.resolve({\n-                    \"data\": {},\n-                    \"status\": 200\n-                });\n-            default:\n-                return Promise.reject(new Error('not found'));\n-        }\n-    });\n-    return axiosMock.get['mockImplementation']((url) => {\n-      switch (url) {\n-        case '/api/flows':\n-          return Promise.resolve(curateData.flows)\n-        case '/api/models/primaryEntityTypes':\n-          return Promise.resolve(curateData.primaryEntityTypes);\n-        case '/api/steps/ingestion':\n-          return Promise.resolve(curateData.loads);\n-        case '/api/steps/ingestion/' + loadData.loads.data[0].name + '/settings':\n-          return Promise.resolve(curateData.loadSettings);\n-        case '/api/steps/mapping':\n-          return Promise.resolve(curateData.mappings);\n-        case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name + '/settings':\n-          return Promise.resolve(curateData.mappingSettings);\n-        case '/api/artifacts/matching':\n-          return Promise.resolve(curateData.matchings);\n+const curateAPI = (axiosMock) => {\n+  axiosMock.delete['mockImplementation']((url) => {\n+    switch (url) {\n+      case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+        return Promise.resolve(loadData.genericSuccess);\n+      case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name:\n+        return Promise.resolve(loadData.genericSuccess);\n+      default:\n+        return Promise.reject(new Error('not found'))\n+    }\n+  });\n+  axiosMock.post['mockImplementation']((url) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3MTg4Nw=="}, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzQ5NTgwOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/config/mocks.config.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjo0ODo1N1rOGg6_Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjo0ODo1N1rOGg6_Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3NDA2Mg==", "bodyText": "Can delete this block 87-127", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437174062", "createdAt": "2020-06-09T06:48:57Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/config/mocks.config.ts", "diffHunk": "@@ -1,156 +1,220 @@\n import loadData from \"./load.config\";\n import curateData from \"./run.config\";\n-import axiosMock from \"axios\";\n+import advancedData from \"./advanced-settings.config\";\n \n const loadAPI = (axiosMock) => {\n-    axiosMock.delete['mockImplementation']((url) => {\n+  axiosMock.delete['mockImplementation']((url) => {\n+    switch (url) {\n+      case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+        return Promise.resolve(loadData.genericSuccess);\n+      default:\n+        return Promise.reject(new Error('not found'))\n+    }\n+  });\n+  axiosMock.post['mockImplementation']((url) => {\n       switch (url) {\n-        case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n-          return Promise.resolve(loadData.genericSuccess);\n-        default:\n-          return Promise.reject(new Error('not found'))\n+          case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+              return Promise.resolve({\n+                  \"data\": {},\n+                  \"status\": 200\n+              });\n+          default:\n+              return Promise.reject(new Error('not found'));\n       }\n-    });\n-    axiosMock.put['mockImplementation']((url) => {\n-        switch (url) {\n-            case '/api/steps/ingestion/' + loadData.loads.data[0].name + '/settings':\n-                return Promise.resolve({\n-                    \"data\": {},\n-                    \"status\": 200\n-                });\n-            default:\n-                return Promise.reject(new Error('not found'));\n-        }\n-    })\n-    return axiosMock.get['mockImplementation']((url) => {\n-      switch (url) {\n-        case '/api/flows':\n-          return Promise.resolve(loadData.flows);\n-        case '/api/steps/ingestion':\n-          return Promise.resolve(loadData.loads);\n-        case '/api/steps/ingestion/' + loadData.loads.data[0].name + '/settings':\n-          return Promise.resolve(loadData.loadSettings);\n-        default:\n-          return Promise.reject(new Error('not found'));\n-      }\n-    })\n-  };\n+  })\n+  return axiosMock.get['mockImplementation']((url) => {\n+    switch (url) {\n+      case '/api/flows':\n+        return Promise.resolve(loadData.flows);\n+      case '/api/steps/ingestion':\n+        return Promise.resolve(loadData.loads);\n+      case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+        return Promise.resolve(loadData.loadSettings);\n+      default:\n+        return Promise.reject(new Error('not found'));\n+    }\n+  })\n+};\n \n-  const curateAPI = (axiosMock) => {\n-    axiosMock.delete['mockImplementation']((url) => {\n-        switch (url) {\n-            case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name:\n-                return Promise.resolve(loadData.genericSuccess);\n-            default:\n-                return Promise.reject(new Error('not found'))\n-        }\n-    });\n-    axiosMock.put['mockImplementation']((url) => {\n-        switch (url) {\n-            case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name + '/settings':\n-                return Promise.resolve({\n-                    \"data\": {},\n-                    \"status\": 200\n-                });\n-            default:\n-                return Promise.reject(new Error('not found'));\n-        }\n-    });\n-    return axiosMock.get['mockImplementation']((url) => {\n-      switch (url) {\n-        case '/api/flows':\n-          return Promise.resolve(curateData.flows)\n-        case '/api/models/primaryEntityTypes':\n-          return Promise.resolve(curateData.primaryEntityTypes);\n-        case '/api/steps/ingestion':\n-          return Promise.resolve(curateData.loads);\n-        case '/api/steps/ingestion/' + loadData.loads.data[0].name + '/settings':\n-          return Promise.resolve(curateData.loadSettings);\n-        case '/api/steps/mapping':\n-          return Promise.resolve(curateData.mappings);\n-        case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name + '/settings':\n-          return Promise.resolve(curateData.mappingSettings);\n-        case '/api/artifacts/matching':\n-          return Promise.resolve(curateData.matchings);\n+const curateAPI = (axiosMock) => {\n+  axiosMock.delete['mockImplementation']((url) => {\n+    switch (url) {\n+      case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+        return Promise.resolve(loadData.genericSuccess);\n+      case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name:\n+        return Promise.resolve(loadData.genericSuccess);\n+      default:\n+        return Promise.reject(new Error('not found'))\n+    }\n+  });\n+  axiosMock.post['mockImplementation']((url) => {\n+    switch (url) {\n+        case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name:\n+            return Promise.resolve({\n+                \"data\": {},\n+                \"status\": 200\n+            });\n         default:\n-          return Promise.reject(new Error('not found'));\n-      }\n-    })\n-  };\n+            return Promise.reject(new Error('not found'));\n+    }\n+  });\n+  return axiosMock.get['mockImplementation']((url) => {\n+    switch (url) {\n+      case '/api/flows':\n+        return Promise.resolve(loadData.flows);\n+      case '/api/models/primaryEntityTypes':\n+        return Promise.resolve(curateData.primaryEntityTypes);\n+      case '/api/steps/ingestion':\n+        return Promise.resolve(loadData.loads);\n+      // case '/api/steps/ingestion/' + loadData.loads.data[0].name + '/settings':\n+      //   return Promise.resolve(loadData.loadSettings);\n+      case '/api/steps/ingestion/' + loadData.loads.data[0].name:\n+        return Promise.resolve(loadData.loadSettings);    \n+      case '/api/steps/mapping':\n+        return Promise.resolve(curateData.mappings);\n+      // case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name + '/settings':\n+      //   return Promise.resolve(curateData.mappingSettings);\n+      case '/api/steps/mapping/' + curateData.mappings.data[0].artifacts[0].name:\n+        return Promise.resolve(curateData.mappingSettings);\n+      case '/api/artifacts/matching':\n+        return Promise.resolve(curateData.matchings);\n+      default:\n+        return Promise.reject(new Error('not found'));\n+    }\n+  })\n+};\n \n-  const runAPI = (axiosMock) => {\n-    return axiosMock.get['mockImplementation']((url) => {\n-      switch (url) {\n-        case '/api/flows':\n-          return Promise.resolve(curateData.flowsWithMapping)\n-        case '/api/steps/ingestion':\n-          return Promise.resolve(curateData.loads);\n-        case '/api/steps/mapping':\n-          return Promise.resolve(curateData.mappings);\n-        case '/api/jobs/e4590649-8c4b-419c-b6a1-473069186592':\n-          return Promise.resolve(curateData.jobRespSuccess)\n-        default:\n-          return Promise.reject(new Error('not found'));\n-      }\n-    })\n-  };\n+// const curateAPI = (axiosMock) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzQ5OTY2OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/config/tooltips.config.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjo1MDoyNFrOGg7BlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNToyODozMVrOGhQMtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3NDY3Ng==", "bodyText": "Need tests asserting tooltip text for headers, processors and customHook.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437174676", "createdAt": "2020-06-09T06:50:24Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/config/tooltips.config.js", "diffHunk": "@@ -5,12 +5,12 @@ const AdvancedSettings = {\n     'targetFormat': 'The format of the documents in the target database.',\n     'additionalCollections': 'The collection tags to add to the default tags assigned to the processed document.',\n     'targetPermissions': 'A comma-delimited string that defines permissions required to access the processed document. ' +\n-      'The string must be in the format role,capability,role,capability,..., where capability can be read, insert, update, or execute.',\n-    'module': 'The path to your custom hook module.',\n-    'cHParameters': 'Parameters, as key-value pairs, to pass to your custom hook module.',\n-    'user': 'The user account to use to run the module. The default is the user running the flow; e.g., data-hub-operator.',\n-    'runBefore': 'Choose whether to run the module before or after the core processes of the step.',\n-    /* The following are for *Custom*Tooltips. */\n+    'The string must be in the format role,capability,role,capability,..., where capability can be read, insert, update, or execute.',\n+    'headers': 'A JSON object that represents additional metadata to add to the header section of the envelope of each document.',\n+    'provGranularity': 'The level of detail logged for provenance. Choose *coarse* for the default level or *off* for no provenance logging.',\n+    'processors': 'Custom modules that perform additional processes after the core step processes are completed and before the results are saved.',\n+    'customHook': 'A custom module that performs additional processes in its own transaction before or after the core step transaction. Results are saved within a transaction.',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUyMTU4OQ==", "bodyText": "Are we testing every tooltip in the app? I think a representative one in a view is sufficient as testing all of them increases the development and maintenance burden for something that's trivial and identically implemented.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437521589", "createdAt": "2020-06-09T15:28:31Z", "author": {"login": "wooldridge"}, "path": "marklogic-data-hub-central/ui/src/config/tooltips.config.js", "diffHunk": "@@ -5,12 +5,12 @@ const AdvancedSettings = {\n     'targetFormat': 'The format of the documents in the target database.',\n     'additionalCollections': 'The collection tags to add to the default tags assigned to the processed document.',\n     'targetPermissions': 'A comma-delimited string that defines permissions required to access the processed document. ' +\n-      'The string must be in the format role,capability,role,capability,..., where capability can be read, insert, update, or execute.',\n-    'module': 'The path to your custom hook module.',\n-    'cHParameters': 'Parameters, as key-value pairs, to pass to your custom hook module.',\n-    'user': 'The user account to use to run the module. The default is the user running the flow; e.g., data-hub-operator.',\n-    'runBefore': 'Choose whether to run the module before or after the core processes of the step.',\n-    /* The following are for *Custom*Tooltips. */\n+    'The string must be in the format role,capability,role,capability,..., where capability can be read, insert, update, or execute.',\n+    'headers': 'A JSON object that represents additional metadata to add to the header section of the envelope of each document.',\n+    'provGranularity': 'The level of detail logged for provenance. Choose *coarse* for the default level or *off* for no provenance logging.',\n+    'processors': 'Custom modules that perform additional processes after the core step processes are completed and before the results are saved.',\n+    'customHook': 'A custom module that performs additional processes in its own transaction before or after the core step transaction. Results are saved within a transaction.',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3NDY3Ng=="}, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzUxNDMxOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/pages/Load.test.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjo1NTozOFrOGg7KsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjo1NTozOFrOGg7KsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3NzAwOQ==", "bodyText": "Need to wrap 28-30 in await act. All other changes to this test must be restored. Edit test shouldnt be removed.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437177009", "createdAt": "2020-06-09T06:55:38Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/pages/Load.test.tsx", "diffHunk": "@@ -25,7 +25,9 @@ describe('Load component', () => {\n         const authorityService = new AuthoritiesService();\n         authorityService.setAuthorities(['readIngestion']);\n \n-        const { getByText, getAllByText, getByLabelText, getByTestId, queryByTestId, queryByText, queryByTitle } = await render(<AuthoritiesContext.Provider value={authorityService}><Load/></AuthoritiesContext.Provider>);\n+        const { getByText, getByTitle, getByLabelText, getByTestId, queryByTestId, queryByText, queryByTitle } = render(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzUxOTEyOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/mapping-card.test.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjo1NzoxNlrOGg7NnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjo1NzoxNlrOGg7NnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3Nzc1Nw==", "bodyText": "Can we pls remove debug.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437177757", "createdAt": "2020-06-09T06:57:16Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/mapping-card.test.tsx", "diffHunk": "@@ -106,7 +106,7 @@ describe(\"Entity Tiles component\", () => {\n       let mapping = data.mappings.data[0].artifacts;\n       const noopFun = () => {};\n       const deleteMappingArtifact = jest.fn(() => {});\n-      const {getByText,getByRole, getByPlaceholderText} = render(\n+      const {getByText,getByRole, getByPlaceholderText, debug} = render(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTM5Mzk3OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/components/load/load-list.test.tsx", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDo0MjoyMlrOGhNhoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODozNDoxOFrOGhXQww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ3Nzc5Mw==", "bodyText": "Its better to use variable than string literal for test value.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437477793", "createdAt": "2020-06-09T14:42:22Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/load/load-list.test.tsx", "diffHunk": "@@ -62,25 +63,25 @@ describe('Load data component', () => {\n     await wait(() => {\n         fireEvent.click(saveButton);\n     });\n-    expect(axiosMock.put).toHaveBeenCalledTimes(1);\n+    expect(axiosMock.post).toHaveBeenCalledTimes(1);\n \n     //open settings again\n \n     await wait(() => {\n         fireEvent.click(getByTestId(data.loadData.data[0].name+'-settings'));\n     })\n-    let targetCollection = getByTitle('customerCollection'); // Additional target collection (Added by user)\n+    let targetCollection = getByTitle('addedCollection'); // Additional target collection (Added by user)\n \n     expect(getByText('Advanced Settings')).toBeInTheDocument();\n     // Check if the settings API is being called.\n-    expect(axiosMock.get).toBeCalledWith('/api/steps/ingestion/' + data.loadData.data[0].name + '/settings');\n-    expect(getByText('Target Collections:')).toBeInTheDocument();\n+    expect(axiosMock.get).toBeCalledWith('/api/steps/ingestion/' + data.loadData.data[0].name);\n+    expect(getByText('Target Collections')).toBeInTheDocument();\n     expect(targetCollection).toBeInTheDocument(); //Should be available in the document\n-    expect(targetCollection).not.toBe(data.loadData.data[0].name); //Should not be same as the default collection\n-    expect(getByText('Default Collections:')).toBeInTheDocument();\n-    expect(getByTestId(`defaultCollections-${data.loadData.data[0].name}`)).toBeInTheDocument();\n-    expect(queryByTitle(data.loadData.data[0].name)).not.toBeInTheDocument();  // The default collection should not be a part of the Target Collection list\n-    expect(getByText('Batch Size:')).toBeInTheDocument();\n+    expect(targetCollection).not.toBe('testCollection'); //Should not be same as the default collection", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxNzc4Mg==", "bodyText": "This is data received from the mock endpoint and integrated into the DOM. How do I reference that without it being circular test logic?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437617782", "createdAt": "2020-06-09T18:00:28Z", "author": {"login": "wooldridge"}, "path": "marklogic-data-hub-central/ui/src/components/load/load-list.test.tsx", "diffHunk": "@@ -62,25 +63,25 @@ describe('Load data component', () => {\n     await wait(() => {\n         fireEvent.click(saveButton);\n     });\n-    expect(axiosMock.put).toHaveBeenCalledTimes(1);\n+    expect(axiosMock.post).toHaveBeenCalledTimes(1);\n \n     //open settings again\n \n     await wait(() => {\n         fireEvent.click(getByTestId(data.loadData.data[0].name+'-settings'));\n     })\n-    let targetCollection = getByTitle('customerCollection'); // Additional target collection (Added by user)\n+    let targetCollection = getByTitle('addedCollection'); // Additional target collection (Added by user)\n \n     expect(getByText('Advanced Settings')).toBeInTheDocument();\n     // Check if the settings API is being called.\n-    expect(axiosMock.get).toBeCalledWith('/api/steps/ingestion/' + data.loadData.data[0].name + '/settings');\n-    expect(getByText('Target Collections:')).toBeInTheDocument();\n+    expect(axiosMock.get).toBeCalledWith('/api/steps/ingestion/' + data.loadData.data[0].name);\n+    expect(getByText('Target Collections')).toBeInTheDocument();\n     expect(targetCollection).toBeInTheDocument(); //Should be available in the document\n-    expect(targetCollection).not.toBe(data.loadData.data[0].name); //Should not be same as the default collection\n-    expect(getByText('Default Collections:')).toBeInTheDocument();\n-    expect(getByTestId(`defaultCollections-${data.loadData.data[0].name}`)).toBeInTheDocument();\n-    expect(queryByTitle(data.loadData.data[0].name)).not.toBeInTheDocument();  // The default collection should not be a part of the Target Collection list\n-    expect(getByText('Batch Size:')).toBeInTheDocument();\n+    expect(targetCollection).not.toBe('testCollection'); //Should not be same as the default collection", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ3Nzc5Mw=="}, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYzMzY4OA==", "bodyText": "Right. It is a mock data and so we are trying to include a dataset that matches what we will get back from the server. Hence we had collection name matching the step name. Any collection name would work, but to keep with the response server would return we kept it likewise.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437633688", "createdAt": "2020-06-09T18:27:45Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/load/load-list.test.tsx", "diffHunk": "@@ -62,25 +63,25 @@ describe('Load data component', () => {\n     await wait(() => {\n         fireEvent.click(saveButton);\n     });\n-    expect(axiosMock.put).toHaveBeenCalledTimes(1);\n+    expect(axiosMock.post).toHaveBeenCalledTimes(1);\n \n     //open settings again\n \n     await wait(() => {\n         fireEvent.click(getByTestId(data.loadData.data[0].name+'-settings'));\n     })\n-    let targetCollection = getByTitle('customerCollection'); // Additional target collection (Added by user)\n+    let targetCollection = getByTitle('addedCollection'); // Additional target collection (Added by user)\n \n     expect(getByText('Advanced Settings')).toBeInTheDocument();\n     // Check if the settings API is being called.\n-    expect(axiosMock.get).toBeCalledWith('/api/steps/ingestion/' + data.loadData.data[0].name + '/settings');\n-    expect(getByText('Target Collections:')).toBeInTheDocument();\n+    expect(axiosMock.get).toBeCalledWith('/api/steps/ingestion/' + data.loadData.data[0].name);\n+    expect(getByText('Target Collections')).toBeInTheDocument();\n     expect(targetCollection).toBeInTheDocument(); //Should be available in the document\n-    expect(targetCollection).not.toBe(data.loadData.data[0].name); //Should not be same as the default collection\n-    expect(getByText('Default Collections:')).toBeInTheDocument();\n-    expect(getByTestId(`defaultCollections-${data.loadData.data[0].name}`)).toBeInTheDocument();\n-    expect(queryByTitle(data.loadData.data[0].name)).not.toBeInTheDocument();  // The default collection should not be a part of the Target Collection list\n-    expect(getByText('Batch Size:')).toBeInTheDocument();\n+    expect(targetCollection).not.toBe('testCollection'); //Should not be same as the default collection", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ3Nzc5Mw=="}, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYzNjA4NA==", "bodyText": "But how do I put data retrieved from the mock endpoint into a variable for testing as you are asking?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437636084", "createdAt": "2020-06-09T18:32:04Z", "author": {"login": "wooldridge"}, "path": "marklogic-data-hub-central/ui/src/components/load/load-list.test.tsx", "diffHunk": "@@ -62,25 +63,25 @@ describe('Load data component', () => {\n     await wait(() => {\n         fireEvent.click(saveButton);\n     });\n-    expect(axiosMock.put).toHaveBeenCalledTimes(1);\n+    expect(axiosMock.post).toHaveBeenCalledTimes(1);\n \n     //open settings again\n \n     await wait(() => {\n         fireEvent.click(getByTestId(data.loadData.data[0].name+'-settings'));\n     })\n-    let targetCollection = getByTitle('customerCollection'); // Additional target collection (Added by user)\n+    let targetCollection = getByTitle('addedCollection'); // Additional target collection (Added by user)\n \n     expect(getByText('Advanced Settings')).toBeInTheDocument();\n     // Check if the settings API is being called.\n-    expect(axiosMock.get).toBeCalledWith('/api/steps/ingestion/' + data.loadData.data[0].name + '/settings');\n-    expect(getByText('Target Collections:')).toBeInTheDocument();\n+    expect(axiosMock.get).toBeCalledWith('/api/steps/ingestion/' + data.loadData.data[0].name);\n+    expect(getByText('Target Collections')).toBeInTheDocument();\n     expect(targetCollection).toBeInTheDocument(); //Should be available in the document\n-    expect(targetCollection).not.toBe(data.loadData.data[0].name); //Should not be same as the default collection\n-    expect(getByText('Default Collections:')).toBeInTheDocument();\n-    expect(getByTestId(`defaultCollections-${data.loadData.data[0].name}`)).toBeInTheDocument();\n-    expect(queryByTitle(data.loadData.data[0].name)).not.toBeInTheDocument();  // The default collection should not be a part of the Target Collection list\n-    expect(getByText('Batch Size:')).toBeInTheDocument();\n+    expect(targetCollection).not.toBe('testCollection'); //Should not be same as the default collection", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ3Nzc5Mw=="}, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYzNzMxNQ==", "bodyText": "Ok. I was referring to \"data.loadData.data[0].name)\" as compared to \"testCollection\".\nThat way the changes will only be in the test data(in one place) and we wont have to touch the test, if test data changes.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437637315", "createdAt": "2020-06-09T18:34:18Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/load/load-list.test.tsx", "diffHunk": "@@ -62,25 +63,25 @@ describe('Load data component', () => {\n     await wait(() => {\n         fireEvent.click(saveButton);\n     });\n-    expect(axiosMock.put).toHaveBeenCalledTimes(1);\n+    expect(axiosMock.post).toHaveBeenCalledTimes(1);\n \n     //open settings again\n \n     await wait(() => {\n         fireEvent.click(getByTestId(data.loadData.data[0].name+'-settings'));\n     })\n-    let targetCollection = getByTitle('customerCollection'); // Additional target collection (Added by user)\n+    let targetCollection = getByTitle('addedCollection'); // Additional target collection (Added by user)\n \n     expect(getByText('Advanced Settings')).toBeInTheDocument();\n     // Check if the settings API is being called.\n-    expect(axiosMock.get).toBeCalledWith('/api/steps/ingestion/' + data.loadData.data[0].name + '/settings');\n-    expect(getByText('Target Collections:')).toBeInTheDocument();\n+    expect(axiosMock.get).toBeCalledWith('/api/steps/ingestion/' + data.loadData.data[0].name);\n+    expect(getByText('Target Collections')).toBeInTheDocument();\n     expect(targetCollection).toBeInTheDocument(); //Should be available in the document\n-    expect(targetCollection).not.toBe(data.loadData.data[0].name); //Should not be same as the default collection\n-    expect(getByText('Default Collections:')).toBeInTheDocument();\n-    expect(getByTestId(`defaultCollections-${data.loadData.data[0].name}`)).toBeInTheDocument();\n-    expect(queryByTitle(data.loadData.data[0].name)).not.toBeInTheDocument();  // The default collection should not be a part of the Target Collection list\n-    expect(getByText('Batch Size:')).toBeInTheDocument();\n+    expect(targetCollection).not.toBe('testCollection'); //Should not be same as the default collection", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ3Nzc5Mw=="}, "originalCommit": {"oid": "aca4d2c8782aaa6c85a64d91547eba14d712f428"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjQwMDU2OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/pages/Load.test.tsx", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODo0NDoxN1rOGhXmfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxOToyMjoxNVrOGhY3vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY0Mjg3Ng==", "bodyText": "test for edit seems to have been removed.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437642876", "createdAt": "2020-06-09T18:44:17Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/pages/Load.test.tsx", "diffHunk": "@@ -38,38 +40,40 @@ describe('Load component', () => {\n         // test 'Add New' button\n         expect(queryByText('Add New')).not.toBeInTheDocument();\n \n-        //test settings\n-        fireEvent.click(getByTestId('testLoad-settings'));\n-        expect(await(waitForElement(() => getByText('Target Database:')))).toBeInTheDocument();\n-        expect(getAllByText('Save')[0]).toBeDisabled();\n-        fireEvent.click(getAllByText('Cancel')[0]);\n+        // test settings\n+        await act(async () => {\n+            await fireEvent.click(getByTestId('testLoad-settings'));\n+        });\n+        expect(await(waitForElement(() => getByText('Target Database')))).toBeInTheDocument();\n+\n+        expect(getByText('Save')).toBeDisabled();\n+        await act(async () => {\n+            await fireEvent.click(getByText('Cancel'));\n+        });\n+        // test delete\n+        expect(queryByTestId('testLoad-delete')).not.toBeInTheDocument();\n \n         //test edit\n         fireEvent.click(getAllByText('testLoad')[0]);\n-        expect(await(waitForElement(() => getByText('Edit Data Load')))).toBeInTheDocument();\n+        expect(getByText('Edit Data Load')).toBeInTheDocument();\n         expect(getAllByText('Save')[0]).toBeDisabled();\n         fireEvent.click(getAllByText('Cancel')[0]);\n \n-        // test delete\n-        expect(queryByTestId('testLoad-delete')).not.toBeInTheDocument();\n-\n         // Check card layout\n         fireEvent.click(getByLabelText('switch-view-card'));\n \n         // test 'Add New' button\n         expect(queryByText('Add New')).not.toBeInTheDocument();\n \n         // test settings\n-        fireEvent.click(getByLabelText('icon: setting'));\n-        expect(await(waitForElement(() => getByText('Target Database:')))).toBeInTheDocument();\n-        expect(getAllByText('Save')[0]).toBeDisabled();\n-        fireEvent.click(getAllByText('Cancel')[0]);\n-\n-        //test edit\n-        fireEvent.click(getByTestId('testLoad-edit'));\n-        expect(await(waitForElement(() => getByText('Edit Data Load')))).toBeInTheDocument();\n-        expect(getAllByText('Save')[0]).toBeDisabled();\n-        fireEvent.click(getAllByText('Cancel')[0]);\n+        await act(async () => {\n+            await fireEvent.click(getByLabelText('icon: setting'));\n+        });\n+        expect(await(waitForElement(() => getByText('Target Database')))).toBeInTheDocument();\n+        expect(getByText('Save')).toBeDisabled();\n+        await act(async () => {\n+            await fireEvent.click(getByText('Cancel'));\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03cc46d30695e581a896c7b2847fa68c8b586822"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY1NDcxMw==", "bodyText": "Do you mean this?\nhttps://github.com/marklogic/marklogic-data-hub/pull/4058/files#diff-96cd2afde423c81c4d73a3bd147090c4R56", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437654713", "createdAt": "2020-06-09T19:05:15Z", "author": {"login": "wooldridge"}, "path": "marklogic-data-hub-central/ui/src/pages/Load.test.tsx", "diffHunk": "@@ -38,38 +40,40 @@ describe('Load component', () => {\n         // test 'Add New' button\n         expect(queryByText('Add New')).not.toBeInTheDocument();\n \n-        //test settings\n-        fireEvent.click(getByTestId('testLoad-settings'));\n-        expect(await(waitForElement(() => getByText('Target Database:')))).toBeInTheDocument();\n-        expect(getAllByText('Save')[0]).toBeDisabled();\n-        fireEvent.click(getAllByText('Cancel')[0]);\n+        // test settings\n+        await act(async () => {\n+            await fireEvent.click(getByTestId('testLoad-settings'));\n+        });\n+        expect(await(waitForElement(() => getByText('Target Database')))).toBeInTheDocument();\n+\n+        expect(getByText('Save')).toBeDisabled();\n+        await act(async () => {\n+            await fireEvent.click(getByText('Cancel'));\n+        });\n+        // test delete\n+        expect(queryByTestId('testLoad-delete')).not.toBeInTheDocument();\n \n         //test edit\n         fireEvent.click(getAllByText('testLoad')[0]);\n-        expect(await(waitForElement(() => getByText('Edit Data Load')))).toBeInTheDocument();\n+        expect(getByText('Edit Data Load')).toBeInTheDocument();\n         expect(getAllByText('Save')[0]).toBeDisabled();\n         fireEvent.click(getAllByText('Cancel')[0]);\n \n-        // test delete\n-        expect(queryByTestId('testLoad-delete')).not.toBeInTheDocument();\n-\n         // Check card layout\n         fireEvent.click(getByLabelText('switch-view-card'));\n \n         // test 'Add New' button\n         expect(queryByText('Add New')).not.toBeInTheDocument();\n \n         // test settings\n-        fireEvent.click(getByLabelText('icon: setting'));\n-        expect(await(waitForElement(() => getByText('Target Database:')))).toBeInTheDocument();\n-        expect(getAllByText('Save')[0]).toBeDisabled();\n-        fireEvent.click(getAllByText('Cancel')[0]);\n-\n-        //test edit\n-        fireEvent.click(getByTestId('testLoad-edit'));\n-        expect(await(waitForElement(() => getByText('Edit Data Load')))).toBeInTheDocument();\n-        expect(getAllByText('Save')[0]).toBeDisabled();\n-        fireEvent.click(getAllByText('Cancel')[0]);\n+        await act(async () => {\n+            await fireEvent.click(getByLabelText('icon: setting'));\n+        });\n+        expect(await(waitForElement(() => getByText('Target Database')))).toBeInTheDocument();\n+        expect(getByText('Save')).toBeDisabled();\n+        await act(async () => {\n+            await fireEvent.click(getByText('Cancel'));\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY0Mjg3Ng=="}, "originalCommit": {"oid": "03cc46d30695e581a896c7b2847fa68c8b586822"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2MzY3OA==", "bodyText": "I am viewing the diffs in split view. Maybe that will help.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4058#discussion_r437663678", "createdAt": "2020-06-09T19:22:15Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/pages/Load.test.tsx", "diffHunk": "@@ -38,38 +40,40 @@ describe('Load component', () => {\n         // test 'Add New' button\n         expect(queryByText('Add New')).not.toBeInTheDocument();\n \n-        //test settings\n-        fireEvent.click(getByTestId('testLoad-settings'));\n-        expect(await(waitForElement(() => getByText('Target Database:')))).toBeInTheDocument();\n-        expect(getAllByText('Save')[0]).toBeDisabled();\n-        fireEvent.click(getAllByText('Cancel')[0]);\n+        // test settings\n+        await act(async () => {\n+            await fireEvent.click(getByTestId('testLoad-settings'));\n+        });\n+        expect(await(waitForElement(() => getByText('Target Database')))).toBeInTheDocument();\n+\n+        expect(getByText('Save')).toBeDisabled();\n+        await act(async () => {\n+            await fireEvent.click(getByText('Cancel'));\n+        });\n+        // test delete\n+        expect(queryByTestId('testLoad-delete')).not.toBeInTheDocument();\n \n         //test edit\n         fireEvent.click(getAllByText('testLoad')[0]);\n-        expect(await(waitForElement(() => getByText('Edit Data Load')))).toBeInTheDocument();\n+        expect(getByText('Edit Data Load')).toBeInTheDocument();\n         expect(getAllByText('Save')[0]).toBeDisabled();\n         fireEvent.click(getAllByText('Cancel')[0]);\n \n-        // test delete\n-        expect(queryByTestId('testLoad-delete')).not.toBeInTheDocument();\n-\n         // Check card layout\n         fireEvent.click(getByLabelText('switch-view-card'));\n \n         // test 'Add New' button\n         expect(queryByText('Add New')).not.toBeInTheDocument();\n \n         // test settings\n-        fireEvent.click(getByLabelText('icon: setting'));\n-        expect(await(waitForElement(() => getByText('Target Database:')))).toBeInTheDocument();\n-        expect(getAllByText('Save')[0]).toBeDisabled();\n-        fireEvent.click(getAllByText('Cancel')[0]);\n-\n-        //test edit\n-        fireEvent.click(getByTestId('testLoad-edit'));\n-        expect(await(waitForElement(() => getByText('Edit Data Load')))).toBeInTheDocument();\n-        expect(getAllByText('Save')[0]).toBeDisabled();\n-        fireEvent.click(getAllByText('Cancel')[0]);\n+        await act(async () => {\n+            await fireEvent.click(getByLabelText('icon: setting'));\n+        });\n+        expect(await(waitForElement(() => getByText('Target Database')))).toBeInTheDocument();\n+        expect(getByText('Save')).toBeDisabled();\n+        await act(async () => {\n+            await fireEvent.click(getByText('Cancel'));\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY0Mjg3Ng=="}, "originalCommit": {"oid": "03cc46d30695e581a896c7b2847fa68c8b586822"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4029, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}