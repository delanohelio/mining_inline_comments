{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0OTU5Mzk0", "number": 4636, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjo1NTozMVrOEoqHBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjo1Nzo1NlrOEoqKhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDY4NDIwOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/EntitySearchController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjo1NTozMVrOHZ4Dcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjo1NTozMVrOHZ4Dcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg5NDgzNQ==", "bodyText": "To ensure an NPE is never possible here, do \"staging\".equalsIgnoreCase(database)", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4636#discussion_r496894835", "createdAt": "2020-09-29T16:55:31Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/EntitySearchController.java", "diffHunk": "@@ -138,31 +138,40 @@ public JsonNode getFacetValuesRange(@RequestBody @ApiParam(hidden = true) JsonNo\n     @ResponseBody\n     @Secured(\"ROLE_exportEntityInstances\")\n     @ApiOperation(\"Returns CSV data\")\n-    public ResponseEntity<StreamingResponseBody> export(@RequestParam String queryDocument, @RequestParam String fileType, @RequestParam(required = false) Long limit, final HttpServletResponse response) {\n-        StreamingResponseBody stream = out -> {\n-            newEntitySearchManager().exportByQuery(new ObjectMapper().readTree(queryDocument), fileType, limit, out, response);\n-        };\n-\n+    public ResponseEntity<StreamingResponseBody> export(@RequestParam String queryDocument,\n+                                                        @RequestParam String fileType,\n+                                                        @RequestParam(required = false) Long limit,\n+                                                        final HttpServletResponse response,\n+                                                        @RequestParam(defaultValue = \"final\") String database) {\n+        StreamingResponseBody stream = out -> newEntitySearchManager(database).exportByQuery(new ObjectMapper().readTree(queryDocument), fileType, limit, out, response);\n         return ResponseEntity.ok(stream);\n     }\n \n     @RequestMapping(method = RequestMethod.GET, value = \"/export/query/{queryId}\")\n     @ResponseBody\n     @Secured(\"ROLE_exportEntityInstances\")\n     @ApiOperation(\"Returns CSV data\")\n-    public ResponseEntity<StreamingResponseBody> exportSavedQuery(@PathVariable String queryId, @RequestParam String fileType, @RequestParam(required = false) Long limit, final HttpServletResponse response) {\n-        StreamingResponseBody stream = out -> {\n-            newEntitySearchManager().exportById(queryId, fileType, limit, out, response);\n-        };\n-\n+    public ResponseEntity<StreamingResponseBody> exportSavedQuery(@PathVariable String queryId,\n+                                                                  @RequestParam String fileType,\n+                                                                  @RequestParam(required = false) Long limit,\n+                                                                  final HttpServletResponse response,\n+                                                                  @RequestParam(defaultValue = \"final\") String database) {\n+        StreamingResponseBody stream = out -> newEntitySearchManager(database).exportById(queryId, fileType, limit, out, response);\n         return ResponseEntity.ok(stream);\n     }\n \n-    private EntitySearchManager newEntitySearchManager() {\n-        return new EntitySearchManager(getHubClient());\n+    private EntitySearchManager newEntitySearchManager(String database) {\n+        return new EntitySearchManager(getHubClient(), database);\n     }\n \n     private EntitySearchService getEntitySearchService() {\n+        return getEntitySearchService(\"final\");\n+    }\n+\n+    private EntitySearchService getEntitySearchService(String database) {\n+        if(database.equalsIgnoreCase(\"staging\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b7b4f06abc344053a8b987fd3ff812f5ece9a56"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDY4NjYzOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/EntitySearchManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjo1NjowOVrOHZ4FBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjo1NjowOVrOHZ4FBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg5NTIzNw==", "bodyText": "Same thing, \"staging\".equals", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4636#discussion_r496895237", "createdAt": "2020-09-29T16:56:09Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/EntitySearchManager.java", "diffHunk": "@@ -79,17 +76,31 @@\n \n     public static String QUERY_OPTIONS = \"exp-final-entity-options\";\n     private static Map<String, FacetHandler> facetHandlerMap;\n-    private DatabaseClient finalDatabaseClient;\n+    private DatabaseClient databaseClient;\n+    private DatabaseClient savedQueryDatabaseClient;\n     private ModelManager modelManager;\n \n     public EntitySearchManager(HubClient hubClient) {\n-        this.finalDatabaseClient = hubClient.getFinalClient();\n+        this.databaseClient = hubClient.getFinalClient();\n+        this.modelManager = new ModelManager(hubClient);\n+        initializeFacetHandlerMap();\n+    }\n+\n+    public EntitySearchManager(HubClient hubClient, String database) {\n+        if(database.equalsIgnoreCase(\"staging\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b7b4f06abc344053a8b987fd3ff812f5ece9a56"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDY5MzE4OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/EntitySearchManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjo1Nzo1NlrOHZ4JSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjo1Nzo1NlrOHZ4JSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg5NjMyOQ==", "bodyText": "The below variable has a really nice name, which raises the question of - what's this client used for? I think it'd be good to name this \"searchDatabaseClient\" or something similar to convey what this one is used for.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4636#discussion_r496896329", "createdAt": "2020-09-29T16:57:56Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/entities/search/EntitySearchManager.java", "diffHunk": "@@ -79,17 +76,31 @@\n \n     public static String QUERY_OPTIONS = \"exp-final-entity-options\";\n     private static Map<String, FacetHandler> facetHandlerMap;\n-    private DatabaseClient finalDatabaseClient;\n+    private DatabaseClient databaseClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b7b4f06abc344053a8b987fd3ff812f5ece9a56"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3239, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}