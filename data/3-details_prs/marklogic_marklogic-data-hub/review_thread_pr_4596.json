{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5NTY3MTE5", "number": 4596, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMToxNTozN1rOEl133g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODoyOToyOFrOEmuejQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTE1NDIyOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-spark-connector/src/test/java/com/marklogic/hub/spark/sql/sources/v2/WriteDataTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMToxNTozN1rOHVir_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMToxNTozN1rOHVir_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM1MDQ2MA==", "bodyText": "This test is a little brittle in that if the structure of the document doesn't match, we'll get a null-pointer exception.\nInstead of doing a cts.uriMatch, I recommend doing a cts.uris query like this:\ncts.uris(null, [limit='1'], cts.andQuery([\n  cts.directoryQuery(\"/testFruit/\"),\n  cts.jsonPropertyValueQuery(\"fruitName\", someVariable)\n]))\n\nYou can use newServerEval to execute that and then verify that you get 1 result back and that it starts with \"/testFruit/\".\nThat results in a much simpler test and also much less chance of a null-pointer occurring.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4596#discussion_r492350460", "createdAt": "2020-09-21T21:15:37Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-spark-connector/src/test/java/com/marklogic/hub/spark/sql/sources/v2/WriteDataTest.java", "diffHunk": "@@ -91,10 +94,24 @@ private void verifyFruitCount(int expectedCount, String message) {\n         assertEquals(expectedCount, Integer.parseInt(count), message);\n \n         if (expectedCount > 0) {\n-            String expectedUri = \"/testFruit/2/1.json\";\n-            JsonNode doc = getHubClient().getStagingClient().newJSONDocumentManager().read(expectedUri, new JacksonHandle()).get();\n-            assertEquals(\"apple\", doc.get(\"envelope\").get(\"instance\").get(\"fruitName\").asText());\n-            assertEquals(\"red\", doc.get(\"envelope\").get(\"instance\").get(\"fruitColor\").asText());\n+        String uriQuery = \"cts.uriMatch('/testFruit/**')\";\n+        EvalResultIterator uriQueryResult = getHubClient().getStagingClient().newServerEval().javascript(uriQuery).eval();\n+        AtomicBoolean foundRedApple = new AtomicBoolean(false);\n+        AtomicBoolean foundYellowBanana = new AtomicBoolean(false);\n+        uriQueryResult.iterator().forEachRemaining(item -> {\n+            final String expectUri = item.getString();\n+            JsonNode doc = getHubClient().getStagingClient().newJSONDocumentManager().read(expectUri, new JacksonHandle()).get();\n+            if((doc.get(\"envelope\").get(\"instance\").get(\"fruitName\").asText().equals(\"apple\")) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93bc57a6b4b8635ed418e29640fa0293829ca45e"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzI0MDYwOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/ingestion/bulkIngester.sjs", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMTozMzozOVrOHV1vVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMTozMzozOVrOHV1vVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY2MjYxMg==", "bodyText": "Just realized that we should leave out \"/\". That allows Ernie to have URIs of the form \"(uuid).json\" if he wants. That's consistent with how MLCP works as well - i.e. no \"/\" is added unless the user configures one.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4596#discussion_r492662612", "createdAt": "2020-09-22T11:33:39Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/ingestion/bulkIngester.sjs", "diffHunk": "@@ -36,7 +36,7 @@ const inputs =\n       [{UNKNOWN: input}];\n inputs.forEach(record => {\n   state.next = state.next + 1;\n-  const uri = (state.prefix) + '/' + (work.taskId) + '/' + (state.next) + '.json';\n+  const uri = (state.uriprefix) + '/' + sem.uuidString() + '.json';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b8b72e4d115d083d4280c1e345093bcc4321295"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDQxMzU3OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-spark-connector/src/test/java/com/marklogic/hub/spark/sql/sources/v2/WriteDataTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODoyNToyOVrOHW7Jiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODoyNToyOVrOHW7Jiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc5OTgxOQ==", "bodyText": "No need to change here, but most of the time, it's sufficient to just do this:\nString uri = getHubClient().getStagingClient().newServerEval().javascript(query).evalAs(String.class);\n\nIf that fails because there's not a URI, that's totally fine. And we don't need to worry about verifying that there's not another URI - we know the database was cleaned before the test ran, so it's safe to assume there's one or zero URIs.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4596#discussion_r493799819", "createdAt": "2020-09-23T18:25:29Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-spark-connector/src/test/java/com/marklogic/hub/spark/sql/sources/v2/WriteDataTest.java", "diffHunk": "@@ -48,6 +47,25 @@ void ingestThreeFruitsWithBatchSizeOfTwo() throws IOException {\n         verifyFruitCount(3, \"The commit call should result in the 3rd fruit being ingested\");\n     }\n \n+\n+    @Test\n+    public void testBulkIngestWithoutUriPrefix() throws IOException {\n+        DataWriter<InternalRow> dataWriter = buildDataWriter(\"1\", \"\");\n+        dataWriter.write(buildRow(\"pineapple\", \"green\"));\n+\n+        String uriQuery = \"cts.uris('', null, cts.andQuery([\\n\" +\n+            \"  cts.jsonPropertyValueQuery('fruitName', 'pineapple')\\n\" +\n+            \"]))\";\n+\n+        EvalResultIterator uriQueryResult = getHubClient().getStagingClient().newServerEval().javascript(uriQuery).eval();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ec12f11d1891a5f2ca5bd2125cd577ad99a7812"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDQyODI5OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-spark-connector/src/test/java/com/marklogic/hub/spark/sql/sources/v2/WriteDataTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODoyOToyOFrOHW7Syg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODoyOToyOFrOHW7Syg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgwMjE4Ng==", "bodyText": "Assertion calls are often the best place to document why something should be the way it is. In this case, there's a question of - well why doesn't it start with \"/\"? So I'd do:\nassertFalse(uri.startsWith(\"/\"), \"If the user wants the URI to start with a forward slash, the user must provide one. If the user doesn't, then it's assumed that the user doesn't want a forward slash at the start of the URI, so the endpoint will not add one automatically.\");\n\nThat makes it very clear why it's expected. This isn't needed for every assertion, but this is a good one to document in the above manner.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4596#discussion_r493802186", "createdAt": "2020-09-23T18:29:28Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-spark-connector/src/test/java/com/marklogic/hub/spark/sql/sources/v2/WriteDataTest.java", "diffHunk": "@@ -48,6 +47,25 @@ void ingestThreeFruitsWithBatchSizeOfTwo() throws IOException {\n         verifyFruitCount(3, \"The commit call should result in the 3rd fruit being ingested\");\n     }\n \n+\n+    @Test\n+    public void testBulkIngestWithoutUriPrefix() throws IOException {\n+        DataWriter<InternalRow> dataWriter = buildDataWriter(\"1\", \"\");\n+        dataWriter.write(buildRow(\"pineapple\", \"green\"));\n+\n+        String uriQuery = \"cts.uris('', null, cts.andQuery([\\n\" +\n+            \"  cts.jsonPropertyValueQuery('fruitName', 'pineapple')\\n\" +\n+            \"]))\";\n+\n+        EvalResultIterator uriQueryResult = getHubClient().getStagingClient().newServerEval().javascript(uriQuery).eval();\n+        assertTrue(uriQueryResult.hasNext());\n+        String uri = uriQueryResult.next().getString();\n+\n+        assertTrue(uri.endsWith(\".json\"));\n+        assertFalse(uri.startsWith(\"/\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ec12f11d1891a5f2ca5bd2125cd577ad99a7812"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3371, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}