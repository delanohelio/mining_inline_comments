{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI5NDc5MTMx", "number": 4060, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyMToyMlrOEDcZjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOToyMjoxMlrOEDmGNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDQ2NDc4OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/pages/Run.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyMToyMlrOGgdtrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzoxNToxNlrOGgoJ8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5NDQ0NA==", "bodyText": "Can remove comment", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4060#discussion_r436694444", "createdAt": "2020-06-08T13:21:22Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/ui/src/pages/Run.tsx", "diffHunk": "@@ -20,8 +20,9 @@ const Statuses = {\n     'FINISHED_WITH_ERRORS': 'finished_with_errors'\n }\n \n-const Run: React.FC = () => {\n-   const { resetSessionTime } = useContext(UserContext)\n+// TODO Rename Bench component to Run", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1cad825290206e474044ab747ad07b7299f1da7"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg2NTUyMQ==", "bodyText": "Done", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4060#discussion_r436865521", "createdAt": "2020-06-08T17:15:16Z", "author": {"login": "xnikhil08"}, "path": "marklogic-data-hub-central/ui/src/pages/Run.tsx", "diffHunk": "@@ -20,8 +20,9 @@ const Statuses = {\n     'FINISHED_WITH_ERRORS': 'finished_with_errors'\n }\n \n-const Run: React.FC = () => {\n-   const { resetSessionTime } = useContext(UserContext)\n+// TODO Rename Bench component to Run", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5NDQ0NA=="}, "originalCommit": {"oid": "f1cad825290206e474044ab747ad07b7299f1da7"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTQyNDYwOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/components/load/load-card.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjo0Mzo1MVrOGgm-sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzoxNTowNlrOGgoJhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg0NjI1OQ==", "bodyText": "Are we adding a label here purely for testing? We dont allow duplicate step names. So do we need a lebel text.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4060#discussion_r436846259", "createdAt": "2020-06-08T16:43:51Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/load/load-card.tsx", "diffHunk": "@@ -180,20 +194,27 @@ const LoadCard: React.FC<Props> = (props) => {\n                             size=\"small\"\n                         >\n                             <div className={styles.formatContainer}>\n-                                <div style={sourceFormatStyle(elem.sourceFormat)}>{elem.sourceFormat.toUpperCase()}</div>\n+                                <div style={sourceFormatStyle(elem.sourceFormat)} aria-label={`${elem.name}-sourceFormat`}>{elem.sourceFormat.toUpperCase()}</div>\n                             </div>\n-                            <div className={styles.stepNameStyle}>{getInitialChars(elem.name, 25, '...')}</div>\n+                            <div className={styles.stepNameStyle} aria-label={`${elem.name}-stepName`}>{getInitialChars(elem.name, 25, '...')}</div>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1cad825290206e474044ab747ad07b7299f1da7"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg2NTQxNA==", "bodyText": "Yes, it was added only for testing purpose initially. But i don't think we need it anymore so have removed it.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4060#discussion_r436865414", "createdAt": "2020-06-08T17:15:06Z", "author": {"login": "xnikhil08"}, "path": "marklogic-data-hub-central/ui/src/components/load/load-card.tsx", "diffHunk": "@@ -180,20 +194,27 @@ const LoadCard: React.FC<Props> = (props) => {\n                             size=\"small\"\n                         >\n                             <div className={styles.formatContainer}>\n-                                <div style={sourceFormatStyle(elem.sourceFormat)}>{elem.sourceFormat.toUpperCase()}</div>\n+                                <div style={sourceFormatStyle(elem.sourceFormat)} aria-label={`${elem.name}-sourceFormat`}>{elem.sourceFormat.toUpperCase()}</div>\n                             </div>\n-                            <div className={styles.stepNameStyle}>{getInitialChars(elem.name, 25, '...')}</div>\n+                            <div className={styles.stepNameStyle} aria-label={`${elem.name}-stepName`}>{getInitialChars(elem.name, 25, '...')}</div>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg0NjI1OQ=="}, "originalCommit": {"oid": "f1cad825290206e474044ab747ad07b7299f1da7"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTQzNDExOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/components/load/load-card.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjo0NjoyNlrOGgnEoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzoxMzozOVrOGgoFyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg0Nzc3Nw==", "bodyText": "any particular reason we are waiting for element here, there is no preceding fireEvent.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4060#discussion_r436847777", "createdAt": "2020-06-08T16:46:26Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/load/load-card.test.tsx", "diffHunk": "@@ -1,10 +1,118 @@\n import React from 'react';\n-import { shallow } from 'enzyme';\n+import { render, fireEvent, wait, cleanup, waitForElement } from '@testing-library/react';\n+import { MemoryRouter } from 'react-router-dom';\n import LoadCard from './load-card';\n+import data from '../../config/test-data.config';\n+import axiosMock from 'axios';\n+import mocks from '../../config/mocks.config';\n+import { AuthoritiesService, AuthoritiesContext } from '../../util/authorities';\n+\n+jest.mock('axios');\n+\n+const mockHistoryPush = jest.fn();\n+\n+jest.mock('react-router-dom', () => ({\n+  ...jest.requireActual('react-router-dom'),\n+  useHistory: () => ({\n+    push: mockHistoryPush,\n+  }),\n+}));\n \n describe('Load Card component', () => {\n-  it('should render correctly', () => {\n-    shallow(<LoadCard data deleteLoadArtifact\n-      createLoadArtifact/>);\n+\n+  beforeEach(() => {\n+    mocks.loadAPI(axiosMock);\n+  })\n+\n+  afterEach(() => {\n+    jest.clearAllMocks();\n+    cleanup();\n+  })\n+\n+  test('Load Card - Add step to an existing Flow', async () => {\n+    const authorityService = new AuthoritiesService();\n+    authorityService.setAuthorities(['readIngestion', 'writeIngestion', 'writeFlow']);\n+    const { getByText, getByLabelText, getByTestId } = render(\n+      <MemoryRouter>\n+        <AuthoritiesContext.Provider value={authorityService}>\n+          <LoadCard \n+            {...data.loadData}\n+            flows={data.flows}\n+            canWriteFlow={true}\n+            addStepToFlow={jest.fn()}\n+            addStepToNew={jest.fn()} />\n+        </AuthoritiesContext.Provider>\n+      </MemoryRouter>\n+    )\n+\n+    //Check if the card is rendered properly\n+    expect(getByText('Add New')).toBeInTheDocument();\n+    expect(getByText('testLoadXML')).toBeInTheDocument();\n+    expect(getByLabelText('testLoadXML-sourceFormat')).toBeInTheDocument();\n+    expect(getByText('Last Updated: 04/15/2020 2:22PM')).toBeInTheDocument();\n+    expect(await (waitForElement(() => getByLabelText('testLoadXML-stepName')))).toBeInTheDocument();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1cad825290206e474044ab747ad07b7299f1da7"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg2NDQ1Nw==", "bodyText": "It was added earlier but i guess i never removed it. Did it now as its not needed anymore.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4060#discussion_r436864457", "createdAt": "2020-06-08T17:13:39Z", "author": {"login": "xnikhil08"}, "path": "marklogic-data-hub-central/ui/src/components/load/load-card.test.tsx", "diffHunk": "@@ -1,10 +1,118 @@\n import React from 'react';\n-import { shallow } from 'enzyme';\n+import { render, fireEvent, wait, cleanup, waitForElement } from '@testing-library/react';\n+import { MemoryRouter } from 'react-router-dom';\n import LoadCard from './load-card';\n+import data from '../../config/test-data.config';\n+import axiosMock from 'axios';\n+import mocks from '../../config/mocks.config';\n+import { AuthoritiesService, AuthoritiesContext } from '../../util/authorities';\n+\n+jest.mock('axios');\n+\n+const mockHistoryPush = jest.fn();\n+\n+jest.mock('react-router-dom', () => ({\n+  ...jest.requireActual('react-router-dom'),\n+  useHistory: () => ({\n+    push: mockHistoryPush,\n+  }),\n+}));\n \n describe('Load Card component', () => {\n-  it('should render correctly', () => {\n-    shallow(<LoadCard data deleteLoadArtifact\n-      createLoadArtifact/>);\n+\n+  beforeEach(() => {\n+    mocks.loadAPI(axiosMock);\n+  })\n+\n+  afterEach(() => {\n+    jest.clearAllMocks();\n+    cleanup();\n+  })\n+\n+  test('Load Card - Add step to an existing Flow', async () => {\n+    const authorityService = new AuthoritiesService();\n+    authorityService.setAuthorities(['readIngestion', 'writeIngestion', 'writeFlow']);\n+    const { getByText, getByLabelText, getByTestId } = render(\n+      <MemoryRouter>\n+        <AuthoritiesContext.Provider value={authorityService}>\n+          <LoadCard \n+            {...data.loadData}\n+            flows={data.flows}\n+            canWriteFlow={true}\n+            addStepToFlow={jest.fn()}\n+            addStepToNew={jest.fn()} />\n+        </AuthoritiesContext.Provider>\n+      </MemoryRouter>\n+    )\n+\n+    //Check if the card is rendered properly\n+    expect(getByText('Add New')).toBeInTheDocument();\n+    expect(getByText('testLoadXML')).toBeInTheDocument();\n+    expect(getByLabelText('testLoadXML-sourceFormat')).toBeInTheDocument();\n+    expect(getByText('Last Updated: 04/15/2020 2:22PM')).toBeInTheDocument();\n+    expect(await (waitForElement(() => getByLabelText('testLoadXML-stepName')))).toBeInTheDocument();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg0Nzc3Nw=="}, "originalCommit": {"oid": "f1cad825290206e474044ab747ad07b7299f1da7"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTQ0NjQ4OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/components/load/load-card.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjo0OToyN1rOGgnMUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzowMDoyMFrOGgnlJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg0OTc0NQ==", "bodyText": "At any point only one step could be moused over to display \"Add to New/Existing Flow\" right. Do we need testid. We can just use getByText.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4060#discussion_r436849745", "createdAt": "2020-06-08T16:49:27Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/load/load-card.test.tsx", "diffHunk": "@@ -1,10 +1,118 @@\n import React from 'react';\n-import { shallow } from 'enzyme';\n+import { render, fireEvent, wait, cleanup, waitForElement } from '@testing-library/react';\n+import { MemoryRouter } from 'react-router-dom';\n import LoadCard from './load-card';\n+import data from '../../config/test-data.config';\n+import axiosMock from 'axios';\n+import mocks from '../../config/mocks.config';\n+import { AuthoritiesService, AuthoritiesContext } from '../../util/authorities';\n+\n+jest.mock('axios');\n+\n+const mockHistoryPush = jest.fn();\n+\n+jest.mock('react-router-dom', () => ({\n+  ...jest.requireActual('react-router-dom'),\n+  useHistory: () => ({\n+    push: mockHistoryPush,\n+  }),\n+}));\n \n describe('Load Card component', () => {\n-  it('should render correctly', () => {\n-    shallow(<LoadCard data deleteLoadArtifact\n-      createLoadArtifact/>);\n+\n+  beforeEach(() => {\n+    mocks.loadAPI(axiosMock);\n+  })\n+\n+  afterEach(() => {\n+    jest.clearAllMocks();\n+    cleanup();\n+  })\n+\n+  test('Load Card - Add step to an existing Flow', async () => {\n+    const authorityService = new AuthoritiesService();\n+    authorityService.setAuthorities(['readIngestion', 'writeIngestion', 'writeFlow']);\n+    const { getByText, getByLabelText, getByTestId } = render(\n+      <MemoryRouter>\n+        <AuthoritiesContext.Provider value={authorityService}>\n+          <LoadCard \n+            {...data.loadData}\n+            flows={data.flows}\n+            canWriteFlow={true}\n+            addStepToFlow={jest.fn()}\n+            addStepToNew={jest.fn()} />\n+        </AuthoritiesContext.Provider>\n+      </MemoryRouter>\n+    )\n+\n+    //Check if the card is rendered properly\n+    expect(getByText('Add New')).toBeInTheDocument();\n+    expect(getByText('testLoadXML')).toBeInTheDocument();\n+    expect(getByLabelText('testLoadXML-sourceFormat')).toBeInTheDocument();\n+    expect(getByText('Last Updated: 04/15/2020 2:22PM')).toBeInTheDocument();\n+    expect(await (waitForElement(() => getByLabelText('testLoadXML-stepName')))).toBeInTheDocument();\n+\n+    fireEvent.mouseOver(getByText('testLoadXML')); // Hover over the Load Card to get more options\n+\n+    //Verify if the flow related options are availble on mouseOver\n+    expect(getByTestId('testLoadXML-toNewFlow')).toBeInTheDocument(); // check if option 'Add to a new Flow' is visible", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1cad825290206e474044ab747ad07b7299f1da7"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg1NjEwMg==", "bodyText": "Options \"Add to New/Existing Flow\" are available for every card in the document, but except for the one we hover at any point, all others are marked as 'display: none'. So thats why i could't use just the text \"Add to New/Existing Flow\" and had to provide them a proper unique test id.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4060#discussion_r436856102", "createdAt": "2020-06-08T17:00:20Z", "author": {"login": "xnikhil08"}, "path": "marklogic-data-hub-central/ui/src/components/load/load-card.test.tsx", "diffHunk": "@@ -1,10 +1,118 @@\n import React from 'react';\n-import { shallow } from 'enzyme';\n+import { render, fireEvent, wait, cleanup, waitForElement } from '@testing-library/react';\n+import { MemoryRouter } from 'react-router-dom';\n import LoadCard from './load-card';\n+import data from '../../config/test-data.config';\n+import axiosMock from 'axios';\n+import mocks from '../../config/mocks.config';\n+import { AuthoritiesService, AuthoritiesContext } from '../../util/authorities';\n+\n+jest.mock('axios');\n+\n+const mockHistoryPush = jest.fn();\n+\n+jest.mock('react-router-dom', () => ({\n+  ...jest.requireActual('react-router-dom'),\n+  useHistory: () => ({\n+    push: mockHistoryPush,\n+  }),\n+}));\n \n describe('Load Card component', () => {\n-  it('should render correctly', () => {\n-    shallow(<LoadCard data deleteLoadArtifact\n-      createLoadArtifact/>);\n+\n+  beforeEach(() => {\n+    mocks.loadAPI(axiosMock);\n+  })\n+\n+  afterEach(() => {\n+    jest.clearAllMocks();\n+    cleanup();\n+  })\n+\n+  test('Load Card - Add step to an existing Flow', async () => {\n+    const authorityService = new AuthoritiesService();\n+    authorityService.setAuthorities(['readIngestion', 'writeIngestion', 'writeFlow']);\n+    const { getByText, getByLabelText, getByTestId } = render(\n+      <MemoryRouter>\n+        <AuthoritiesContext.Provider value={authorityService}>\n+          <LoadCard \n+            {...data.loadData}\n+            flows={data.flows}\n+            canWriteFlow={true}\n+            addStepToFlow={jest.fn()}\n+            addStepToNew={jest.fn()} />\n+        </AuthoritiesContext.Provider>\n+      </MemoryRouter>\n+    )\n+\n+    //Check if the card is rendered properly\n+    expect(getByText('Add New')).toBeInTheDocument();\n+    expect(getByText('testLoadXML')).toBeInTheDocument();\n+    expect(getByLabelText('testLoadXML-sourceFormat')).toBeInTheDocument();\n+    expect(getByText('Last Updated: 04/15/2020 2:22PM')).toBeInTheDocument();\n+    expect(await (waitForElement(() => getByLabelText('testLoadXML-stepName')))).toBeInTheDocument();\n+\n+    fireEvent.mouseOver(getByText('testLoadXML')); // Hover over the Load Card to get more options\n+\n+    //Verify if the flow related options are availble on mouseOver\n+    expect(getByTestId('testLoadXML-toNewFlow')).toBeInTheDocument(); // check if option 'Add to a new Flow' is visible", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg0OTc0NQ=="}, "originalCommit": {"oid": "f1cad825290206e474044ab747ad07b7299f1da7"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjA1MzY3OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/mapping-card.test.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOToyMjoxMlrOGgtFwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOToyMjoxMlrOGgtFwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk0NjM2OQ==", "bodyText": "Nice!", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4060#discussion_r436946369", "createdAt": "2020-06-08T19:22:12Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/mapping-card.test.tsx", "diffHunk": "@@ -153,4 +162,120 @@ describe(\"Entity Tiles component\", () => {\n        });\n        expect(getByText(AdvancedSettingsMessages.targetPermissions.incorrectFormat)).toBeInTheDocument();\n   });\n+\n+  test('Adding the step to an existing flow', async () => {\n+    const authorityService = new AuthoritiesService();\n+    authorityService.setAuthorities(['readMapping', 'writeMapping', 'writeFlow']);\n+    let entityModel = data.primaryEntityTypes.data[0];\n+    let mapping = data.mappings.data[0].artifacts;\n+    const noopFun = () => {};\n+    let getByText, getByLabelText, getByTestId;\n+    await act(async () => {\n+      const renderResults = render(\n+        <MemoryRouter>\n+          <AuthoritiesContext.Provider value={authorityService}>\n+            <MappingCard\n+              data={mapping}\n+              flows={data.flows.data}\n+              entityTypeTitle={entityModel.entityName}\n+              getMappingArtifactByMapName={noopFun}\n+              deleteMappingArtifact={noopFun}\n+              createMappingArtifact={noopFun}\n+              updateMappingArtifact={noopFun}\n+              canReadOnly={false}\n+              canReadWrite={true}\n+              canWriteFlow={true}\n+              entityModel={entityModel}\n+              addStepToFlow={noopFun}\n+              addStepToNew={noopFun} />\n+          </AuthoritiesContext.Provider>\n+        </MemoryRouter>\n+      );\n+      getByText = renderResults.getByText;\n+      getByLabelText = renderResults.getByLabelText;\n+      getByTestId = renderResults.getByTestId\n+    })\n+\n+    //Check if the card is rendered properly\n+    expect(getByText('Add New')).toBeInTheDocument();\n+    expect(getByText('Mapping1')).toBeInTheDocument();\n+    //expect(getByLabelText('testLoadXML-sourceFormat')).toBeInTheDocument();\n+    expect(getByText('Last Updated: 04/24/2020 1:21PM')).toBeInTheDocument();\n+\n+    fireEvent.mouseOver(getByText('Mapping1')); // Hover over the Load Card to get more options\n+\n+    //Verify if the flow related options are availble on mouseOver\n+    expect(getByTestId('Mapping1-toNewFlow')).toBeInTheDocument(); // check if option 'Add to a new Flow' is visible\n+    expect(getByTestId('Mapping1-toExistingFlow')).toBeInTheDocument(); // check if option 'Add to an existing Flow' is visible\n+\n+    //Click on the select field to open the list of existing flows.\n+    fireEvent.click(getByTestId('Mapping1-flowsList')); \n+\n+    //Choose testFlow from the dropdown\n+    fireEvent.click(getByText('testFlow'));\n+    \n+    //Click on 'Yes' button\n+    fireEvent.click(getByTestId('Mapping1-to-testFlow-Confirm'));\n+\n+    //Check if the tiles-run route has been called\n+    wait(() => {\n+      expect(mockHistoryPush).toHaveBeenCalledWith('/tiles-run');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7d09cdb42527addedb00e8269264711f8ce6193"}, "originalPosition": 91}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4034, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}