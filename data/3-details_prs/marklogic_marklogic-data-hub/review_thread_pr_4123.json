{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4MDMwNzAz", "number": 4123, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjoxMzowOFrOEHo-Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMzo0NzozOVrOEHw7fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDQ2NzUwOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/pages/Run.tsx", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjoxMzowOFrOGnHrUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjo1NTo1OFrOGnJQOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MzQyNw==", "bodyText": "If the purpose of having targetEntityType on the Job document is to construct a link for exploring search results for a particular entity name, it'd be much easier for the backend to provide that in the initial RunFlowResponse that is returned by running a step. That avoids having to persist additional data, particularly since we'd only be persisting it for a very narrow UI concern.\nIn addition, because a Job document may encompass multiple steps, and each step may be associated with a different entity type, we can't have a single \"targetEntityType\" on a Job document, because we may need multiple values.\nBut the RunFlowResponse returned by running a step has a Map of step responses, so we can have a targetEntityType on each step response (if one exists).\nWe also have multiple scenarios to account for here - 1) running a mapping step with a legacy mapping (can't happen in HC, but we need to account for it); 2) running a mapping step via HC; 3) running a matching/merging/mastering step that currently uses \"targetEntity\" instead of \"targetEntityType\". Regardless of the approach we take, we need to account for all of these scenarios so that users aren't confused when targetEntityType is only set some of the time.\nI recommend opening up a backend task for this, as we'll need to properly define it for the scenarios listed above.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4123#discussion_r443673427", "createdAt": "2020-06-22T16:13:08Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/ui/src/pages/Run.tsx", "diffHunk": "@@ -317,19 +338,25 @@ const Run = (props) => {\n                         return axios.get('/api/jobs/' + jobId);\n                     }, pollConfig.interval)\n                     .then(function(response: any) {\n+                        let entityName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bb003755e6e0e23fee909a3d906797c1b398ea5"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY5Mjc1MA==", "bodyText": "@rjrudin This was done by me as a backend task and the commits have since been squashed. I can adjust to account for targetEntity as well. I had thought that was normalized at this point via the function we have on the backend for constructing the flows to run.\nAs for the issue of multiple target entities, is that something that we need to accommodate for the running of a single job?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4123#discussion_r443692750", "createdAt": "2020-06-22T16:44:45Z", "author": {"login": "ryanjdew"}, "path": "marklogic-data-hub-central/ui/src/pages/Run.tsx", "diffHunk": "@@ -317,19 +338,25 @@ const Run = (props) => {\n                         return axios.get('/api/jobs/' + jobId);\n                     }, pollConfig.interval)\n                     .then(function(response: any) {\n+                        let entityName;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MzQyNw=="}, "originalCommit": {"oid": "0bb003755e6e0e23fee909a3d906797c1b398ea5"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY5OTI1Nw==", "bodyText": "I feel more comfortable providing targetEntityType on a per-step basis as part of the API for running a step, as opposed to persisting it in a Job document where it's a lot more difficult to change.\nIt looks like that this can be easily implemented/tested too by modifying this method in RunStepResponse:\npublic RunStepResponse withStep(String stepNum) {", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4123#discussion_r443699257", "createdAt": "2020-06-22T16:55:58Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/ui/src/pages/Run.tsx", "diffHunk": "@@ -317,19 +338,25 @@ const Run = (props) => {\n                         return axios.get('/api/jobs/' + jobId);\n                     }, pollConfig.interval)\n                     .then(function(response: any) {\n+                        let entityName;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MzQyNw=="}, "originalCommit": {"oid": "0bb003755e6e0e23fee909a3d906797c1b398ea5"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTc3MTUxOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/impl/jobs.sjs", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMzo0NzozOVrOGnUiQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTo0NjowMVrOGnvdNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg4NDA5Ng==", "bodyText": "Is there a reason to add caching here - do we know if there's a performance issue here? My understanding is that since this is only called by the mlJobs endpoint, it's only going to be called once in a given transaction, and thus the caching won't have any impact, correct?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4123#discussion_r443884096", "createdAt": "2020-06-22T23:47:39Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/impl/jobs.sjs", "diffHunk": "@@ -343,11 +355,7 @@ module.exports.updateJob = module.amp(\n           // a better error will be thrown later when the step is run and the module cannot be found.\n         }\n         if (jobsReportFun) {\n-          let flowStep = fn.head(datahub.hubUtils.queryLatest(function () {\n-              return datahub.flow.getFlow(stepResp.flowName).steps[step];\n-            },\n-            datahub.config.FINALDATABASE\n-          ));\n+          let flowStep = getFlowStep(datahub, stepResp.flowName, step);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec0ee59cf992760a38a9c2a5af95cefc7538f958"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMyNTE3NA==", "bodyText": "Removed the caching since it no longer made sense after dreverting other changes.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4123#discussion_r444325174", "createdAt": "2020-06-23T15:46:01Z", "author": {"login": "ryanjdew"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/impl/jobs.sjs", "diffHunk": "@@ -343,11 +355,7 @@ module.exports.updateJob = module.amp(\n           // a better error will be thrown later when the step is run and the module cannot be found.\n         }\n         if (jobsReportFun) {\n-          let flowStep = fn.head(datahub.hubUtils.queryLatest(function () {\n-              return datahub.flow.getFlow(stepResp.flowName).steps[step];\n-            },\n-            datahub.config.FINALDATABASE\n-          ));\n+          let flowStep = getFlowStep(datahub, stepResp.flowName, step);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg4NDA5Ng=="}, "originalCommit": {"oid": "ec0ee59cf992760a38a9c2a5af95cefc7538f958"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3921, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}