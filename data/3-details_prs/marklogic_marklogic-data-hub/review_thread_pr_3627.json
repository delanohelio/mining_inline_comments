{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMDg3MjEz", "number": 3627, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwMjoxOTo0M1rODkINig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwMjoxOTo0M1rODkINig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjA5ODY2OnYy", "diffSide": "RIGHT", "path": "one-ui/src/main/java/com/marklogic/hub/oneui/auth/AuthenticationFilter.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwMjoxOTo0M1rOFwSCyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwMjo1ODoyN1rOFwSciw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE3MTU5Mg==", "bodyText": "very nice refactors... One question is that why we need to have two services (RolesService and SecurityServicce)? Would it better use a SecurityService which consolidate the roles and authorities along with one DS call?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3627#discussion_r386171592", "createdAt": "2020-03-02T02:19:43Z", "author": {"login": "hao1st"}, "path": "one-ui/src/main/java/com/marklogic/hub/oneui/auth/AuthenticationFilter.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.marklogic.hub.oneui.auth;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.marklogic.client.DatabaseClient;\n+import com.marklogic.hub.dataservices.RolesService;\n+import com.marklogic.hub.dataservices.SecurityService;\n+import com.marklogic.hub.oneui.exceptions.BadRequestException;\n+import com.marklogic.hub.oneui.exceptions.ForbiddenException;\n+import com.marklogic.hub.oneui.models.EnvironmentInfo;\n+import com.marklogic.hub.oneui.models.HubConfigSession;\n+import com.marklogic.hub.oneui.services.EnvironmentService;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.authentication.AuthenticationServiceException;\n+import org.springframework.security.authentication.BadCredentialsException;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.AuthenticationException;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.authority.SimpleGrantedAuthority;\n+import org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter;\n+import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.ResourceAccessException;\n+import org.springframework.web.client.RestTemplate;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Custom authentication filter for the one-ui web application. All authentication logic is handled by this class, with\n+ * success handled by LoginHandler and failure handled by LoginFailureHandler.\n+ */\n+public class AuthenticationFilter extends AbstractAuthenticationProcessingFilter {\n+\n+    private EnvironmentService environmentService;\n+    private HubConfigSession hubConfig;\n+\n+    public AuthenticationFilter(EnvironmentService environmentService, HubConfigSession hubConfig) {\n+        super(new AntPathRequestMatcher(\"/api/login\", \"POST\"));\n+        this.environmentService = environmentService;\n+        this.hubConfig = hubConfig;\n+        setAuthenticationSuccessHandler(new LoginHandler());\n+        setAuthenticationFailureHandler(new LoginFailureHandler());\n+    }\n+\n+    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException, IOException {\n+        if (!request.getMethod().toUpperCase().equals(\"POST\")) {\n+            throw new AuthenticationServiceException(\"Authentication method not supported: \" + request.getMethod());\n+        }\n+\n+        final EnvironmentInfo originalEnvironmentInfo = environmentService.getEnvironment();\n+\n+        final LoginInfo loginInfo = new ObjectMapper().readValue(request.getInputStream(), LoginInfo.class);\n+\n+        final boolean datahubIsInstalled = StringUtils.isEmpty(loginInfo.mlHost);\n+        if (!datahubIsInstalled) {\n+            environmentService.setEnvironment(new EnvironmentInfo(loginInfo.mlHost, loginInfo.mlAuthMethod,\n+                loginInfo.mlPort, loginInfo.mlManageAuthMethod, loginInfo.mlManagePort, loginInfo.dhStagingAuthMethod, loginInfo.dhStagingPort, loginInfo.dhFinalAuthMethod, loginInfo.dhFinalPort));\n+        }\n+\n+        try {\n+            AuthenticationToken token = authenticateUser(loginInfo.username, loginInfo.password);\n+            token.setDetails(authenticationDetailsSource.buildDetails(request));\n+            return token;\n+        } catch (Exception e) {\n+            environmentService.setEnvironment(originalEnvironmentInfo);\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * @param username\n+     * @param password\n+     */\n+    protected AuthenticationToken authenticateUser(String username, String password) {\n+        if (StringUtils.isEmpty(username) || StringUtils.isEmpty(password)) {\n+            throw new BadCredentialsException(\"Unauthorized\");\n+        }\n+\n+        username = username.trim();\n+\n+        EnvironmentInfo environmentInfo = environmentService.getEnvironment();\n+        hubConfig.setCredentials(environmentInfo, username, password);\n+\n+        final boolean hasManagePrivileges = canAccessManageServer(environmentInfo.mlHost);\n+\n+        final DatabaseClient stagingClient = hubConfig.newStagingClient(null);\n+\n+        boolean dataHubInstalled = false;\n+        List<GrantedAuthority> authorities = new ArrayList<>();\n+        ArrayNode roles = null;\n+\n+        try {\n+            dataHubInstalled = stagingClient.checkConnection().isConnected();\n+            if (dataHubInstalled) {\n+                roles = (ArrayNode) RolesService.on(stagingClient).getRoles();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "018b55c127465d2984ded76c10c5b1304601d50e"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE3MjczOQ==", "bodyText": "BTW, I still tried to figout out @secured, @PreAuthorize, @PostAuthorize. Another question is that do we really need to return roles of the current users to front-end. I thought that we wanted to client-side has little knowledge about roles rather than authorities (canInstallDataHub, canRead{artifactType}, canWrite{artifact})  ?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3627#discussion_r386172739", "createdAt": "2020-03-02T02:27:07Z", "author": {"login": "hao1st"}, "path": "one-ui/src/main/java/com/marklogic/hub/oneui/auth/AuthenticationFilter.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.marklogic.hub.oneui.auth;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.marklogic.client.DatabaseClient;\n+import com.marklogic.hub.dataservices.RolesService;\n+import com.marklogic.hub.dataservices.SecurityService;\n+import com.marklogic.hub.oneui.exceptions.BadRequestException;\n+import com.marklogic.hub.oneui.exceptions.ForbiddenException;\n+import com.marklogic.hub.oneui.models.EnvironmentInfo;\n+import com.marklogic.hub.oneui.models.HubConfigSession;\n+import com.marklogic.hub.oneui.services.EnvironmentService;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.authentication.AuthenticationServiceException;\n+import org.springframework.security.authentication.BadCredentialsException;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.AuthenticationException;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.authority.SimpleGrantedAuthority;\n+import org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter;\n+import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.ResourceAccessException;\n+import org.springframework.web.client.RestTemplate;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Custom authentication filter for the one-ui web application. All authentication logic is handled by this class, with\n+ * success handled by LoginHandler and failure handled by LoginFailureHandler.\n+ */\n+public class AuthenticationFilter extends AbstractAuthenticationProcessingFilter {\n+\n+    private EnvironmentService environmentService;\n+    private HubConfigSession hubConfig;\n+\n+    public AuthenticationFilter(EnvironmentService environmentService, HubConfigSession hubConfig) {\n+        super(new AntPathRequestMatcher(\"/api/login\", \"POST\"));\n+        this.environmentService = environmentService;\n+        this.hubConfig = hubConfig;\n+        setAuthenticationSuccessHandler(new LoginHandler());\n+        setAuthenticationFailureHandler(new LoginFailureHandler());\n+    }\n+\n+    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException, IOException {\n+        if (!request.getMethod().toUpperCase().equals(\"POST\")) {\n+            throw new AuthenticationServiceException(\"Authentication method not supported: \" + request.getMethod());\n+        }\n+\n+        final EnvironmentInfo originalEnvironmentInfo = environmentService.getEnvironment();\n+\n+        final LoginInfo loginInfo = new ObjectMapper().readValue(request.getInputStream(), LoginInfo.class);\n+\n+        final boolean datahubIsInstalled = StringUtils.isEmpty(loginInfo.mlHost);\n+        if (!datahubIsInstalled) {\n+            environmentService.setEnvironment(new EnvironmentInfo(loginInfo.mlHost, loginInfo.mlAuthMethod,\n+                loginInfo.mlPort, loginInfo.mlManageAuthMethod, loginInfo.mlManagePort, loginInfo.dhStagingAuthMethod, loginInfo.dhStagingPort, loginInfo.dhFinalAuthMethod, loginInfo.dhFinalPort));\n+        }\n+\n+        try {\n+            AuthenticationToken token = authenticateUser(loginInfo.username, loginInfo.password);\n+            token.setDetails(authenticationDetailsSource.buildDetails(request));\n+            return token;\n+        } catch (Exception e) {\n+            environmentService.setEnvironment(originalEnvironmentInfo);\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * @param username\n+     * @param password\n+     */\n+    protected AuthenticationToken authenticateUser(String username, String password) {\n+        if (StringUtils.isEmpty(username) || StringUtils.isEmpty(password)) {\n+            throw new BadCredentialsException(\"Unauthorized\");\n+        }\n+\n+        username = username.trim();\n+\n+        EnvironmentInfo environmentInfo = environmentService.getEnvironment();\n+        hubConfig.setCredentials(environmentInfo, username, password);\n+\n+        final boolean hasManagePrivileges = canAccessManageServer(environmentInfo.mlHost);\n+\n+        final DatabaseClient stagingClient = hubConfig.newStagingClient(null);\n+\n+        boolean dataHubInstalled = false;\n+        List<GrantedAuthority> authorities = new ArrayList<>();\n+        ArrayNode roles = null;\n+\n+        try {\n+            dataHubInstalled = stagingClient.checkConnection().isConnected();\n+            if (dataHubInstalled) {\n+                roles = (ArrayNode) RolesService.on(stagingClient).getRoles();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE3MTU5Mg=="}, "originalCommit": {"oid": "018b55c127465d2984ded76c10c5b1304601d50e"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE3ODA0Nw==", "bodyText": "I didn't want to get rid of RolesService and \"roles\" until the GUI is updated to depend on authorities instead of roles.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3627#discussion_r386178047", "createdAt": "2020-03-02T02:57:43Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/oneui/auth/AuthenticationFilter.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.marklogic.hub.oneui.auth;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.marklogic.client.DatabaseClient;\n+import com.marklogic.hub.dataservices.RolesService;\n+import com.marklogic.hub.dataservices.SecurityService;\n+import com.marklogic.hub.oneui.exceptions.BadRequestException;\n+import com.marklogic.hub.oneui.exceptions.ForbiddenException;\n+import com.marklogic.hub.oneui.models.EnvironmentInfo;\n+import com.marklogic.hub.oneui.models.HubConfigSession;\n+import com.marklogic.hub.oneui.services.EnvironmentService;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.authentication.AuthenticationServiceException;\n+import org.springframework.security.authentication.BadCredentialsException;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.AuthenticationException;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.authority.SimpleGrantedAuthority;\n+import org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter;\n+import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.ResourceAccessException;\n+import org.springframework.web.client.RestTemplate;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Custom authentication filter for the one-ui web application. All authentication logic is handled by this class, with\n+ * success handled by LoginHandler and failure handled by LoginFailureHandler.\n+ */\n+public class AuthenticationFilter extends AbstractAuthenticationProcessingFilter {\n+\n+    private EnvironmentService environmentService;\n+    private HubConfigSession hubConfig;\n+\n+    public AuthenticationFilter(EnvironmentService environmentService, HubConfigSession hubConfig) {\n+        super(new AntPathRequestMatcher(\"/api/login\", \"POST\"));\n+        this.environmentService = environmentService;\n+        this.hubConfig = hubConfig;\n+        setAuthenticationSuccessHandler(new LoginHandler());\n+        setAuthenticationFailureHandler(new LoginFailureHandler());\n+    }\n+\n+    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException, IOException {\n+        if (!request.getMethod().toUpperCase().equals(\"POST\")) {\n+            throw new AuthenticationServiceException(\"Authentication method not supported: \" + request.getMethod());\n+        }\n+\n+        final EnvironmentInfo originalEnvironmentInfo = environmentService.getEnvironment();\n+\n+        final LoginInfo loginInfo = new ObjectMapper().readValue(request.getInputStream(), LoginInfo.class);\n+\n+        final boolean datahubIsInstalled = StringUtils.isEmpty(loginInfo.mlHost);\n+        if (!datahubIsInstalled) {\n+            environmentService.setEnvironment(new EnvironmentInfo(loginInfo.mlHost, loginInfo.mlAuthMethod,\n+                loginInfo.mlPort, loginInfo.mlManageAuthMethod, loginInfo.mlManagePort, loginInfo.dhStagingAuthMethod, loginInfo.dhStagingPort, loginInfo.dhFinalAuthMethod, loginInfo.dhFinalPort));\n+        }\n+\n+        try {\n+            AuthenticationToken token = authenticateUser(loginInfo.username, loginInfo.password);\n+            token.setDetails(authenticationDetailsSource.buildDetails(request));\n+            return token;\n+        } catch (Exception e) {\n+            environmentService.setEnvironment(originalEnvironmentInfo);\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * @param username\n+     * @param password\n+     */\n+    protected AuthenticationToken authenticateUser(String username, String password) {\n+        if (StringUtils.isEmpty(username) || StringUtils.isEmpty(password)) {\n+            throw new BadCredentialsException(\"Unauthorized\");\n+        }\n+\n+        username = username.trim();\n+\n+        EnvironmentInfo environmentInfo = environmentService.getEnvironment();\n+        hubConfig.setCredentials(environmentInfo, username, password);\n+\n+        final boolean hasManagePrivileges = canAccessManageServer(environmentInfo.mlHost);\n+\n+        final DatabaseClient stagingClient = hubConfig.newStagingClient(null);\n+\n+        boolean dataHubInstalled = false;\n+        List<GrantedAuthority> authorities = new ArrayList<>();\n+        ArrayNode roles = null;\n+\n+        try {\n+            dataHubInstalled = stagingClient.checkConnection().isConnected();\n+            if (dataHubInstalled) {\n+                roles = (ArrayNode) RolesService.on(stagingClient).getRoles();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE3MTU5Mg=="}, "originalCommit": {"oid": "018b55c127465d2984ded76c10c5b1304601d50e"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE3ODE4Nw==", "bodyText": "I think @secured should be all we need. That will reference authorities, but will include a \"ROLE_\" prefix to make Spring Security happy. And yes, the GUI shouldn't care about roles anymore.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3627#discussion_r386178187", "createdAt": "2020-03-02T02:58:27Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/oneui/auth/AuthenticationFilter.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.marklogic.hub.oneui.auth;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.marklogic.client.DatabaseClient;\n+import com.marklogic.hub.dataservices.RolesService;\n+import com.marklogic.hub.dataservices.SecurityService;\n+import com.marklogic.hub.oneui.exceptions.BadRequestException;\n+import com.marklogic.hub.oneui.exceptions.ForbiddenException;\n+import com.marklogic.hub.oneui.models.EnvironmentInfo;\n+import com.marklogic.hub.oneui.models.HubConfigSession;\n+import com.marklogic.hub.oneui.services.EnvironmentService;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.authentication.AuthenticationServiceException;\n+import org.springframework.security.authentication.BadCredentialsException;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.AuthenticationException;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.authority.SimpleGrantedAuthority;\n+import org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter;\n+import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.ResourceAccessException;\n+import org.springframework.web.client.RestTemplate;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Custom authentication filter for the one-ui web application. All authentication logic is handled by this class, with\n+ * success handled by LoginHandler and failure handled by LoginFailureHandler.\n+ */\n+public class AuthenticationFilter extends AbstractAuthenticationProcessingFilter {\n+\n+    private EnvironmentService environmentService;\n+    private HubConfigSession hubConfig;\n+\n+    public AuthenticationFilter(EnvironmentService environmentService, HubConfigSession hubConfig) {\n+        super(new AntPathRequestMatcher(\"/api/login\", \"POST\"));\n+        this.environmentService = environmentService;\n+        this.hubConfig = hubConfig;\n+        setAuthenticationSuccessHandler(new LoginHandler());\n+        setAuthenticationFailureHandler(new LoginFailureHandler());\n+    }\n+\n+    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException, IOException {\n+        if (!request.getMethod().toUpperCase().equals(\"POST\")) {\n+            throw new AuthenticationServiceException(\"Authentication method not supported: \" + request.getMethod());\n+        }\n+\n+        final EnvironmentInfo originalEnvironmentInfo = environmentService.getEnvironment();\n+\n+        final LoginInfo loginInfo = new ObjectMapper().readValue(request.getInputStream(), LoginInfo.class);\n+\n+        final boolean datahubIsInstalled = StringUtils.isEmpty(loginInfo.mlHost);\n+        if (!datahubIsInstalled) {\n+            environmentService.setEnvironment(new EnvironmentInfo(loginInfo.mlHost, loginInfo.mlAuthMethod,\n+                loginInfo.mlPort, loginInfo.mlManageAuthMethod, loginInfo.mlManagePort, loginInfo.dhStagingAuthMethod, loginInfo.dhStagingPort, loginInfo.dhFinalAuthMethod, loginInfo.dhFinalPort));\n+        }\n+\n+        try {\n+            AuthenticationToken token = authenticateUser(loginInfo.username, loginInfo.password);\n+            token.setDetails(authenticationDetailsSource.buildDetails(request));\n+            return token;\n+        } catch (Exception e) {\n+            environmentService.setEnvironment(originalEnvironmentInfo);\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * @param username\n+     * @param password\n+     */\n+    protected AuthenticationToken authenticateUser(String username, String password) {\n+        if (StringUtils.isEmpty(username) || StringUtils.isEmpty(password)) {\n+            throw new BadCredentialsException(\"Unauthorized\");\n+        }\n+\n+        username = username.trim();\n+\n+        EnvironmentInfo environmentInfo = environmentService.getEnvironment();\n+        hubConfig.setCredentials(environmentInfo, username, password);\n+\n+        final boolean hasManagePrivileges = canAccessManageServer(environmentInfo.mlHost);\n+\n+        final DatabaseClient stagingClient = hubConfig.newStagingClient(null);\n+\n+        boolean dataHubInstalled = false;\n+        List<GrantedAuthority> authorities = new ArrayList<>();\n+        ArrayNode roles = null;\n+\n+        try {\n+            dataHubInstalled = stagingClient.checkConnection().isConnected();\n+            if (dataHubInstalled) {\n+                roles = (ArrayNode) RolesService.on(stagingClient).getRoles();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE3MTU5Mg=="}, "originalCommit": {"oid": "018b55c127465d2984ded76c10c5b1304601d50e"}, "originalPosition": 117}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3578, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}