{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwOTI2NjI2", "number": 3617, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNTo1NTowOVrODjgjhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODowNTo0N1rODjjpgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTYwMTM1OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/builtins/steps/mapping/entity-services/lib.sjs", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNTo1NTowOVrOFvWsvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNTo1NTowOVrOFvWsvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE5OTI5Mw==", "bodyText": "This is the only change to existing code, as it was a trivial refactoring to perform.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3617#discussion_r385199293", "createdAt": "2020-02-27T15:55:09Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/builtins/steps/mapping/entity-services/lib.sjs", "diffHunk": "@@ -155,7 +156,7 @@ function getRelatedMappings(mapping, related = [mapping]) {\n \n function getTargetEntity(targetEntityType) {\n   if (!entitiesByTargetType[targetEntityType]) {\n-    let entityModel = getModel(targetEntityType);\n+    let entityModel = entityLib.findModelForEntityTypeId(targetEntityType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8273a3aed8e201455b8f834d4f043282c82459ab"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTYyNjI5OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/impl/entity-lib.sjs", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNjowMDozNlrOFvW7tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNjowMDozNlrOFvW7tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIwMzEyNw==", "bodyText": "This still has the issue of not working if the EntityTypeTitle has a slash in it - which seems very unlikely. There's a test to verify that it fails.\n@ryanjdew you had mentioned grabbing the model doc and figuring the baseUri from that. I'd like for this method to not avoid any DB calls though - in fact, I have a convention of \"find\" implying the need to query ML, and \"get\" not involving any queries (I've used that convention in the past, it's a handy way for a client to know how performant a function should be).", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3617#discussion_r385203127", "createdAt": "2020-02-27T16:00:36Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/impl/entity-lib.sjs", "diffHunk": "@@ -0,0 +1,140 @@\n+/**\n+ Copyright 2012-2019 MarkLogic Corporation\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+'use strict';\n+\n+/**\n+ * This library is intended to encapsulate all logic specific to Entity Services models. As of DHF 5.2.0, this logic is\n+ * spread around the DH codebase. It is expected that this will gradually be refactored so that all ES-specific logic\n+ * resides in this module to promote reuse and also simplify upgrades as Entity Services changes within MarkLogic.\n+ */\n+\n+const sem = require(\"/MarkLogic/semantics.xqy\");\n+const semPrefixes = {es: 'http://marklogic.com/entity-services#'};\n+\n+/**\n+ * @return an array of strings, one for each EntityType\n+ */\n+function findEntityTypeIds() {\n+  return cts.triples(null,\n+    sem.iri('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),\n+    sem.iri('http://marklogic.com/entity-services#EntityType')\n+  ).toArray().map(triple => sem.tripleSubject(triple).toString());\n+}\n+\n+/**\n+ * @return a map object where each key is an EntityTypeId, and the value of each key is the corresponding entity type\n+ */\n+function findEntityTypesAsMap() {\n+  const map = {};\n+  for (var doc of cts.search(cts.collectionQuery(\"http://marklogic.com/entity-services/models\"))) {\n+    Object.assign(map, convertModelToEntityTypeMap(doc.toObject()));\n+  }\n+  return map;\n+}\n+\n+/**\n+ * @param entityTypeId string or a sem.iri\n+ * @return the matching model document, or null if one is not found\n+ */\n+function findModelForEntityTypeId(entityTypeId) {\n+  return fn.head(cts.search(\n+    cts.andQuery([\n+      cts.collectionQuery('http://marklogic.com/entity-services/models'),\n+      cts.tripleRangeQuery(sem.iri(entityTypeId), sem.curieExpand(\"rdf:type\"), sem.curieExpand(\"es:EntityType\", semPrefixes))\n+    ])));\n+}\n+\n+/**\n+ * @param entityTypeId string or a sem.iri\n+ * @return null if a model can't be found matching the given EntityTypeId, or if a model is found but there's no an entity type\n+ * with a title matching the entity title in the EntityTypeId. Otherwise, the entity type from the definitions array in the model\n+ * is returned.\n+ */\n+function findEntityType(entityTypeId) {\n+  const modelDoc = findModelForEntityTypeId(entityTypeId);\n+  if (!modelDoc) {\n+    return null;\n+  }\n+  return modelDoc.toObject().definitions[getEntityTypeIdParts(entityTypeId).entityTypeTitle];\n+}\n+\n+/**\n+ * @param entityTypeId sem.iri or string\n+ * @return {{entityTypeTitle: string, baseUri: string, modelTitle: string, version: string}}\n+ */\n+function getEntityTypeIdParts(entityTypeId) {\n+  if (entityTypeId == null) {\n+    throw Error(\"Cannot get EntityTypeId parts from null EntityTypeId\");\n+  }\n+\n+  entityTypeId = entityTypeId.toString();\n+\n+  const tokens = entityTypeId.split(\"/\");\n+  if (tokens.length < 3) {\n+    throw Error(\"Could not get EntityTypeId parts from invalid EntityTypeId: \" + entityTypeId);\n+  }\n+\n+  const infoTokens = tokens[tokens.length - 2].split(\"-\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8273a3aed8e201455b8f834d4f043282c82459ab"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjA5OTk0OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/impl/entity-lib.sjs", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODowMzowMlrOFvbh9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODo1NjoxNFrOFvdP3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3ODQ1Mg==", "bodyText": "Since we always have baseUrl, the length should be 5 after split with \"/\"", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3617#discussion_r385278452", "createdAt": "2020-02-27T18:03:02Z", "author": {"login": "hao1st"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/impl/entity-lib.sjs", "diffHunk": "@@ -0,0 +1,140 @@\n+/**\n+ Copyright 2012-2019 MarkLogic Corporation\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+'use strict';\n+\n+/**\n+ * This library is intended to encapsulate all logic specific to Entity Services models. As of DHF 5.2.0, this logic is\n+ * spread around the DH codebase. It is expected that this will gradually be refactored so that all ES-specific logic\n+ * resides in this module to promote reuse and also simplify upgrades as Entity Services changes within MarkLogic.\n+ */\n+\n+const sem = require(\"/MarkLogic/semantics.xqy\");\n+const semPrefixes = {es: 'http://marklogic.com/entity-services#'};\n+\n+/**\n+ * @return an array of strings, one for each EntityType\n+ */\n+function findEntityTypeIds() {\n+  return cts.triples(null,\n+    sem.iri('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),\n+    sem.iri('http://marklogic.com/entity-services#EntityType')\n+  ).toArray().map(triple => sem.tripleSubject(triple).toString());\n+}\n+\n+/**\n+ * @return a map object where each key is an EntityTypeId, and the value of each key is the corresponding entity type\n+ */\n+function findEntityTypesAsMap() {\n+  const map = {};\n+  for (var doc of cts.search(cts.collectionQuery(\"http://marklogic.com/entity-services/models\"))) {\n+    Object.assign(map, convertModelToEntityTypeMap(doc.toObject()));\n+  }\n+  return map;\n+}\n+\n+/**\n+ * @param entityTypeId string or a sem.iri\n+ * @return the matching model document, or null if one is not found\n+ */\n+function findModelForEntityTypeId(entityTypeId) {\n+  return fn.head(cts.search(\n+    cts.andQuery([\n+      cts.collectionQuery('http://marklogic.com/entity-services/models'),\n+      cts.tripleRangeQuery(sem.iri(entityTypeId), sem.curieExpand(\"rdf:type\"), sem.curieExpand(\"es:EntityType\", semPrefixes))\n+    ])));\n+}\n+\n+/**\n+ * @param entityTypeId string or a sem.iri\n+ * @return null if a model can't be found matching the given EntityTypeId, or if a model is found but there's no an entity type\n+ * with a title matching the entity title in the EntityTypeId. Otherwise, the entity type from the definitions array in the model\n+ * is returned.\n+ */\n+function findEntityType(entityTypeId) {\n+  const modelDoc = findModelForEntityTypeId(entityTypeId);\n+  if (!modelDoc) {\n+    return null;\n+  }\n+  return modelDoc.toObject().definitions[getEntityTypeIdParts(entityTypeId).entityTypeTitle];\n+}\n+\n+/**\n+ * @param entityTypeId sem.iri or string\n+ * @return {{entityTypeTitle: string, baseUri: string, modelTitle: string, version: string}}\n+ */\n+function getEntityTypeIdParts(entityTypeId) {\n+  if (entityTypeId == null) {\n+    throw Error(\"Cannot get EntityTypeId parts from null EntityTypeId\");\n+  }\n+\n+  entityTypeId = entityTypeId.toString();\n+\n+  const tokens = entityTypeId.split(\"/\");\n+  if (tokens.length < 3) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8273a3aed8e201455b8f834d4f043282c82459ab"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3OTM5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              if (tokens.length < 3) {\n          \n          \n            \n              if (tokens.length < 5) {", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3617#discussion_r385279398", "createdAt": "2020-02-27T18:04:52Z", "author": {"login": "hao1st"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/impl/entity-lib.sjs", "diffHunk": "@@ -0,0 +1,140 @@\n+/**\n+ Copyright 2012-2019 MarkLogic Corporation\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+'use strict';\n+\n+/**\n+ * This library is intended to encapsulate all logic specific to Entity Services models. As of DHF 5.2.0, this logic is\n+ * spread around the DH codebase. It is expected that this will gradually be refactored so that all ES-specific logic\n+ * resides in this module to promote reuse and also simplify upgrades as Entity Services changes within MarkLogic.\n+ */\n+\n+const sem = require(\"/MarkLogic/semantics.xqy\");\n+const semPrefixes = {es: 'http://marklogic.com/entity-services#'};\n+\n+/**\n+ * @return an array of strings, one for each EntityType\n+ */\n+function findEntityTypeIds() {\n+  return cts.triples(null,\n+    sem.iri('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),\n+    sem.iri('http://marklogic.com/entity-services#EntityType')\n+  ).toArray().map(triple => sem.tripleSubject(triple).toString());\n+}\n+\n+/**\n+ * @return a map object where each key is an EntityTypeId, and the value of each key is the corresponding entity type\n+ */\n+function findEntityTypesAsMap() {\n+  const map = {};\n+  for (var doc of cts.search(cts.collectionQuery(\"http://marklogic.com/entity-services/models\"))) {\n+    Object.assign(map, convertModelToEntityTypeMap(doc.toObject()));\n+  }\n+  return map;\n+}\n+\n+/**\n+ * @param entityTypeId string or a sem.iri\n+ * @return the matching model document, or null if one is not found\n+ */\n+function findModelForEntityTypeId(entityTypeId) {\n+  return fn.head(cts.search(\n+    cts.andQuery([\n+      cts.collectionQuery('http://marklogic.com/entity-services/models'),\n+      cts.tripleRangeQuery(sem.iri(entityTypeId), sem.curieExpand(\"rdf:type\"), sem.curieExpand(\"es:EntityType\", semPrefixes))\n+    ])));\n+}\n+\n+/**\n+ * @param entityTypeId string or a sem.iri\n+ * @return null if a model can't be found matching the given EntityTypeId, or if a model is found but there's no an entity type\n+ * with a title matching the entity title in the EntityTypeId. Otherwise, the entity type from the definitions array in the model\n+ * is returned.\n+ */\n+function findEntityType(entityTypeId) {\n+  const modelDoc = findModelForEntityTypeId(entityTypeId);\n+  if (!modelDoc) {\n+    return null;\n+  }\n+  return modelDoc.toObject().definitions[getEntityTypeIdParts(entityTypeId).entityTypeTitle];\n+}\n+\n+/**\n+ * @param entityTypeId sem.iri or string\n+ * @return {{entityTypeTitle: string, baseUri: string, modelTitle: string, version: string}}\n+ */\n+function getEntityTypeIdParts(entityTypeId) {\n+  if (entityTypeId == null) {\n+    throw Error(\"Cannot get EntityTypeId parts from null EntityTypeId\");\n+  }\n+\n+  entityTypeId = entityTypeId.toString();\n+\n+  const tokens = entityTypeId.split(\"/\");\n+  if (tokens.length < 3) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3ODQ1Mg=="}, "originalCommit": {"oid": "8273a3aed8e201455b8f834d4f043282c82459ab"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwNjU4OA==", "bodyText": "The problem is ES doesn't require a particular format for baseUri. ES will accept this too: \"something/title-version/title\". So the minimum length we can support is 3, which then assumes that the second token contains the model title and version.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3617#discussion_r385306588", "createdAt": "2020-02-27T18:56:14Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/impl/entity-lib.sjs", "diffHunk": "@@ -0,0 +1,140 @@\n+/**\n+ Copyright 2012-2019 MarkLogic Corporation\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+'use strict';\n+\n+/**\n+ * This library is intended to encapsulate all logic specific to Entity Services models. As of DHF 5.2.0, this logic is\n+ * spread around the DH codebase. It is expected that this will gradually be refactored so that all ES-specific logic\n+ * resides in this module to promote reuse and also simplify upgrades as Entity Services changes within MarkLogic.\n+ */\n+\n+const sem = require(\"/MarkLogic/semantics.xqy\");\n+const semPrefixes = {es: 'http://marklogic.com/entity-services#'};\n+\n+/**\n+ * @return an array of strings, one for each EntityType\n+ */\n+function findEntityTypeIds() {\n+  return cts.triples(null,\n+    sem.iri('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),\n+    sem.iri('http://marklogic.com/entity-services#EntityType')\n+  ).toArray().map(triple => sem.tripleSubject(triple).toString());\n+}\n+\n+/**\n+ * @return a map object where each key is an EntityTypeId, and the value of each key is the corresponding entity type\n+ */\n+function findEntityTypesAsMap() {\n+  const map = {};\n+  for (var doc of cts.search(cts.collectionQuery(\"http://marklogic.com/entity-services/models\"))) {\n+    Object.assign(map, convertModelToEntityTypeMap(doc.toObject()));\n+  }\n+  return map;\n+}\n+\n+/**\n+ * @param entityTypeId string or a sem.iri\n+ * @return the matching model document, or null if one is not found\n+ */\n+function findModelForEntityTypeId(entityTypeId) {\n+  return fn.head(cts.search(\n+    cts.andQuery([\n+      cts.collectionQuery('http://marklogic.com/entity-services/models'),\n+      cts.tripleRangeQuery(sem.iri(entityTypeId), sem.curieExpand(\"rdf:type\"), sem.curieExpand(\"es:EntityType\", semPrefixes))\n+    ])));\n+}\n+\n+/**\n+ * @param entityTypeId string or a sem.iri\n+ * @return null if a model can't be found matching the given EntityTypeId, or if a model is found but there's no an entity type\n+ * with a title matching the entity title in the EntityTypeId. Otherwise, the entity type from the definitions array in the model\n+ * is returned.\n+ */\n+function findEntityType(entityTypeId) {\n+  const modelDoc = findModelForEntityTypeId(entityTypeId);\n+  if (!modelDoc) {\n+    return null;\n+  }\n+  return modelDoc.toObject().definitions[getEntityTypeIdParts(entityTypeId).entityTypeTitle];\n+}\n+\n+/**\n+ * @param entityTypeId sem.iri or string\n+ * @return {{entityTypeTitle: string, baseUri: string, modelTitle: string, version: string}}\n+ */\n+function getEntityTypeIdParts(entityTypeId) {\n+  if (entityTypeId == null) {\n+    throw Error(\"Cannot get EntityTypeId parts from null EntityTypeId\");\n+  }\n+\n+  entityTypeId = entityTypeId.toString();\n+\n+  const tokens = entityTypeId.split(\"/\");\n+  if (tokens.length < 3) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3ODQ1Mg=="}, "originalCommit": {"oid": "8273a3aed8e201455b8f834d4f043282c82459ab"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjEwNDEyOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/impl/entity-lib.sjs", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODowNDoyN1rOFvbkzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODo1NzoxM1rOFvdSAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3OTE4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                version: infoTokens.slice(1).join(\"-\"),\n          \n          \n            \n                version: infoTokens.slice(1)[0],", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3617#discussion_r385279181", "createdAt": "2020-02-27T18:04:27Z", "author": {"login": "hao1st"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/impl/entity-lib.sjs", "diffHunk": "@@ -0,0 +1,140 @@\n+/**\n+ Copyright 2012-2019 MarkLogic Corporation\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+'use strict';\n+\n+/**\n+ * This library is intended to encapsulate all logic specific to Entity Services models. As of DHF 5.2.0, this logic is\n+ * spread around the DH codebase. It is expected that this will gradually be refactored so that all ES-specific logic\n+ * resides in this module to promote reuse and also simplify upgrades as Entity Services changes within MarkLogic.\n+ */\n+\n+const sem = require(\"/MarkLogic/semantics.xqy\");\n+const semPrefixes = {es: 'http://marklogic.com/entity-services#'};\n+\n+/**\n+ * @return an array of strings, one for each EntityType\n+ */\n+function findEntityTypeIds() {\n+  return cts.triples(null,\n+    sem.iri('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),\n+    sem.iri('http://marklogic.com/entity-services#EntityType')\n+  ).toArray().map(triple => sem.tripleSubject(triple).toString());\n+}\n+\n+/**\n+ * @return a map object where each key is an EntityTypeId, and the value of each key is the corresponding entity type\n+ */\n+function findEntityTypesAsMap() {\n+  const map = {};\n+  for (var doc of cts.search(cts.collectionQuery(\"http://marklogic.com/entity-services/models\"))) {\n+    Object.assign(map, convertModelToEntityTypeMap(doc.toObject()));\n+  }\n+  return map;\n+}\n+\n+/**\n+ * @param entityTypeId string or a sem.iri\n+ * @return the matching model document, or null if one is not found\n+ */\n+function findModelForEntityTypeId(entityTypeId) {\n+  return fn.head(cts.search(\n+    cts.andQuery([\n+      cts.collectionQuery('http://marklogic.com/entity-services/models'),\n+      cts.tripleRangeQuery(sem.iri(entityTypeId), sem.curieExpand(\"rdf:type\"), sem.curieExpand(\"es:EntityType\", semPrefixes))\n+    ])));\n+}\n+\n+/**\n+ * @param entityTypeId string or a sem.iri\n+ * @return null if a model can't be found matching the given EntityTypeId, or if a model is found but there's no an entity type\n+ * with a title matching the entity title in the EntityTypeId. Otherwise, the entity type from the definitions array in the model\n+ * is returned.\n+ */\n+function findEntityType(entityTypeId) {\n+  const modelDoc = findModelForEntityTypeId(entityTypeId);\n+  if (!modelDoc) {\n+    return null;\n+  }\n+  return modelDoc.toObject().definitions[getEntityTypeIdParts(entityTypeId).entityTypeTitle];\n+}\n+\n+/**\n+ * @param entityTypeId sem.iri or string\n+ * @return {{entityTypeTitle: string, baseUri: string, modelTitle: string, version: string}}\n+ */\n+function getEntityTypeIdParts(entityTypeId) {\n+  if (entityTypeId == null) {\n+    throw Error(\"Cannot get EntityTypeId parts from null EntityTypeId\");\n+  }\n+\n+  entityTypeId = entityTypeId.toString();\n+\n+  const tokens = entityTypeId.split(\"/\");\n+  if (tokens.length < 3) {\n+    throw Error(\"Could not get EntityTypeId parts from invalid EntityTypeId: \" + entityTypeId);\n+  }\n+\n+  const infoTokens = tokens[tokens.length - 2].split(\"-\");\n+  if (infoTokens.length < 2) {\n+    throw Error(\"Could not get EntityTypeId parts; expected info part did not contain a hyphen; EntityTypeId: \" + entityTypeId);\n+  }\n+\n+  const title = tokens[tokens.length - 1];\n+  const baseUri = tokens.slice(0, tokens.length - 2).join(\"/\") + \"/\";\n+  return {\n+    baseUri: baseUri,\n+    modelTitle: infoTokens[0],\n+    version: infoTokens.slice(1).join(\"-\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8273a3aed8e201455b8f834d4f043282c82459ab"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwNzEzOA==", "bodyText": "The \"join\" is needed to support a version like \"1.0-SNAPSHOT\" - see the test for that.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3617#discussion_r385307138", "createdAt": "2020-02-27T18:57:13Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/impl/entity-lib.sjs", "diffHunk": "@@ -0,0 +1,140 @@\n+/**\n+ Copyright 2012-2019 MarkLogic Corporation\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+'use strict';\n+\n+/**\n+ * This library is intended to encapsulate all logic specific to Entity Services models. As of DHF 5.2.0, this logic is\n+ * spread around the DH codebase. It is expected that this will gradually be refactored so that all ES-specific logic\n+ * resides in this module to promote reuse and also simplify upgrades as Entity Services changes within MarkLogic.\n+ */\n+\n+const sem = require(\"/MarkLogic/semantics.xqy\");\n+const semPrefixes = {es: 'http://marklogic.com/entity-services#'};\n+\n+/**\n+ * @return an array of strings, one for each EntityType\n+ */\n+function findEntityTypeIds() {\n+  return cts.triples(null,\n+    sem.iri('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),\n+    sem.iri('http://marklogic.com/entity-services#EntityType')\n+  ).toArray().map(triple => sem.tripleSubject(triple).toString());\n+}\n+\n+/**\n+ * @return a map object where each key is an EntityTypeId, and the value of each key is the corresponding entity type\n+ */\n+function findEntityTypesAsMap() {\n+  const map = {};\n+  for (var doc of cts.search(cts.collectionQuery(\"http://marklogic.com/entity-services/models\"))) {\n+    Object.assign(map, convertModelToEntityTypeMap(doc.toObject()));\n+  }\n+  return map;\n+}\n+\n+/**\n+ * @param entityTypeId string or a sem.iri\n+ * @return the matching model document, or null if one is not found\n+ */\n+function findModelForEntityTypeId(entityTypeId) {\n+  return fn.head(cts.search(\n+    cts.andQuery([\n+      cts.collectionQuery('http://marklogic.com/entity-services/models'),\n+      cts.tripleRangeQuery(sem.iri(entityTypeId), sem.curieExpand(\"rdf:type\"), sem.curieExpand(\"es:EntityType\", semPrefixes))\n+    ])));\n+}\n+\n+/**\n+ * @param entityTypeId string or a sem.iri\n+ * @return null if a model can't be found matching the given EntityTypeId, or if a model is found but there's no an entity type\n+ * with a title matching the entity title in the EntityTypeId. Otherwise, the entity type from the definitions array in the model\n+ * is returned.\n+ */\n+function findEntityType(entityTypeId) {\n+  const modelDoc = findModelForEntityTypeId(entityTypeId);\n+  if (!modelDoc) {\n+    return null;\n+  }\n+  return modelDoc.toObject().definitions[getEntityTypeIdParts(entityTypeId).entityTypeTitle];\n+}\n+\n+/**\n+ * @param entityTypeId sem.iri or string\n+ * @return {{entityTypeTitle: string, baseUri: string, modelTitle: string, version: string}}\n+ */\n+function getEntityTypeIdParts(entityTypeId) {\n+  if (entityTypeId == null) {\n+    throw Error(\"Cannot get EntityTypeId parts from null EntityTypeId\");\n+  }\n+\n+  entityTypeId = entityTypeId.toString();\n+\n+  const tokens = entityTypeId.split(\"/\");\n+  if (tokens.length < 3) {\n+    throw Error(\"Could not get EntityTypeId parts from invalid EntityTypeId: \" + entityTypeId);\n+  }\n+\n+  const infoTokens = tokens[tokens.length - 2].split(\"-\");\n+  if (infoTokens.length < 2) {\n+    throw Error(\"Could not get EntityTypeId parts; expected info part did not contain a hyphen; EntityTypeId: \" + entityTypeId);\n+  }\n+\n+  const title = tokens[tokens.length - 1];\n+  const baseUri = tokens.slice(0, tokens.length - 2).join(\"/\") + \"/\";\n+  return {\n+    baseUri: baseUri,\n+    modelTitle: infoTokens[0],\n+    version: infoTokens.slice(1).join(\"-\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3OTE4MQ=="}, "originalCommit": {"oid": "8273a3aed8e201455b8f834d4f043282c82459ab"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjEwODE5OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/impl/entity-lib.sjs", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODowNTo0N1rOFvbnZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODo1ODowNFrOFvdTyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3OTg0NA==", "bodyText": "for consistency, add java doc?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3617#discussion_r385279844", "createdAt": "2020-02-27T18:05:47Z", "author": {"login": "hao1st"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/impl/entity-lib.sjs", "diffHunk": "@@ -0,0 +1,140 @@\n+/**\n+ Copyright 2012-2019 MarkLogic Corporation\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+'use strict';\n+\n+/**\n+ * This library is intended to encapsulate all logic specific to Entity Services models. As of DHF 5.2.0, this logic is\n+ * spread around the DH codebase. It is expected that this will gradually be refactored so that all ES-specific logic\n+ * resides in this module to promote reuse and also simplify upgrades as Entity Services changes within MarkLogic.\n+ */\n+\n+const sem = require(\"/MarkLogic/semantics.xqy\");\n+const semPrefixes = {es: 'http://marklogic.com/entity-services#'};\n+\n+/**\n+ * @return an array of strings, one for each EntityType\n+ */\n+function findEntityTypeIds() {\n+  return cts.triples(null,\n+    sem.iri('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),\n+    sem.iri('http://marklogic.com/entity-services#EntityType')\n+  ).toArray().map(triple => sem.tripleSubject(triple).toString());\n+}\n+\n+/**\n+ * @return a map object where each key is an EntityTypeId, and the value of each key is the corresponding entity type\n+ */\n+function findEntityTypesAsMap() {\n+  const map = {};\n+  for (var doc of cts.search(cts.collectionQuery(\"http://marklogic.com/entity-services/models\"))) {\n+    Object.assign(map, convertModelToEntityTypeMap(doc.toObject()));\n+  }\n+  return map;\n+}\n+\n+/**\n+ * @param entityTypeId string or a sem.iri\n+ * @return the matching model document, or null if one is not found\n+ */\n+function findModelForEntityTypeId(entityTypeId) {\n+  return fn.head(cts.search(\n+    cts.andQuery([\n+      cts.collectionQuery('http://marklogic.com/entity-services/models'),\n+      cts.tripleRangeQuery(sem.iri(entityTypeId), sem.curieExpand(\"rdf:type\"), sem.curieExpand(\"es:EntityType\", semPrefixes))\n+    ])));\n+}\n+\n+/**\n+ * @param entityTypeId string or a sem.iri\n+ * @return null if a model can't be found matching the given EntityTypeId, or if a model is found but there's no an entity type\n+ * with a title matching the entity title in the EntityTypeId. Otherwise, the entity type from the definitions array in the model\n+ * is returned.\n+ */\n+function findEntityType(entityTypeId) {\n+  const modelDoc = findModelForEntityTypeId(entityTypeId);\n+  if (!modelDoc) {\n+    return null;\n+  }\n+  return modelDoc.toObject().definitions[getEntityTypeIdParts(entityTypeId).entityTypeTitle];\n+}\n+\n+/**\n+ * @param entityTypeId sem.iri or string\n+ * @return {{entityTypeTitle: string, baseUri: string, modelTitle: string, version: string}}\n+ */\n+function getEntityTypeIdParts(entityTypeId) {\n+  if (entityTypeId == null) {\n+    throw Error(\"Cannot get EntityTypeId parts from null EntityTypeId\");\n+  }\n+\n+  entityTypeId = entityTypeId.toString();\n+\n+  const tokens = entityTypeId.split(\"/\");\n+  if (tokens.length < 3) {\n+    throw Error(\"Could not get EntityTypeId parts from invalid EntityTypeId: \" + entityTypeId);\n+  }\n+\n+  const infoTokens = tokens[tokens.length - 2].split(\"-\");\n+  if (infoTokens.length < 2) {\n+    throw Error(\"Could not get EntityTypeId parts; expected info part did not contain a hyphen; EntityTypeId: \" + entityTypeId);\n+  }\n+\n+  const title = tokens[tokens.length - 1];\n+  const baseUri = tokens.slice(0, tokens.length - 2).join(\"/\") + \"/\";\n+  return {\n+    baseUri: baseUri,\n+    modelTitle: infoTokens[0],\n+    version: infoTokens.slice(1).join(\"-\"),\n+    entityTypeTitle: title\n+  };\n+}\n+\n+/**\n+ * @param model the model object as found in a model descriptor\n+ * @param entityTypeTitle a string identifying the entity type in the definitions array that an IRI is needed for\n+ * @return {string}\n+ */\n+function getEntityTypeId(model, entityTypeTitle) {\n+  return getModelId(model) + \"/\" + entityTypeTitle;\n+}\n+\n+/**\n+ * @param model\n+ * @return a map (object) where each key is an EntityTypeId and the value is the EntityType\n+ */\n+function convertModelToEntityTypeMap(model) {\n+  const map = {};\n+  const modelId = getModelId(model);\n+  for (var entityTypeTitle of Object.keys(model.definitions)) {\n+    map[modelId + \"/\" + entityTypeTitle] = model.definitions[entityTypeTitle];\n+  }\n+  return map;\n+}\n+\n+function getModelId(model) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8273a3aed8e201455b8f834d4f043282c82459ab"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwNzU5NA==", "bodyText": "I didn't yet because it's not an exported function. We also don't have any expectation of comments on methods - the vast majority of DH functions don't have comments. I only included them where I felt they added value in this library, and I didn't think they did for getModelId, which is simple enough to understand by looking at the code.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3617#discussion_r385307594", "createdAt": "2020-02-27T18:58:04Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/impl/entity-lib.sjs", "diffHunk": "@@ -0,0 +1,140 @@\n+/**\n+ Copyright 2012-2019 MarkLogic Corporation\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+'use strict';\n+\n+/**\n+ * This library is intended to encapsulate all logic specific to Entity Services models. As of DHF 5.2.0, this logic is\n+ * spread around the DH codebase. It is expected that this will gradually be refactored so that all ES-specific logic\n+ * resides in this module to promote reuse and also simplify upgrades as Entity Services changes within MarkLogic.\n+ */\n+\n+const sem = require(\"/MarkLogic/semantics.xqy\");\n+const semPrefixes = {es: 'http://marklogic.com/entity-services#'};\n+\n+/**\n+ * @return an array of strings, one for each EntityType\n+ */\n+function findEntityTypeIds() {\n+  return cts.triples(null,\n+    sem.iri('http://www.w3.org/1999/02/22-rdf-syntax-ns#type'),\n+    sem.iri('http://marklogic.com/entity-services#EntityType')\n+  ).toArray().map(triple => sem.tripleSubject(triple).toString());\n+}\n+\n+/**\n+ * @return a map object where each key is an EntityTypeId, and the value of each key is the corresponding entity type\n+ */\n+function findEntityTypesAsMap() {\n+  const map = {};\n+  for (var doc of cts.search(cts.collectionQuery(\"http://marklogic.com/entity-services/models\"))) {\n+    Object.assign(map, convertModelToEntityTypeMap(doc.toObject()));\n+  }\n+  return map;\n+}\n+\n+/**\n+ * @param entityTypeId string or a sem.iri\n+ * @return the matching model document, or null if one is not found\n+ */\n+function findModelForEntityTypeId(entityTypeId) {\n+  return fn.head(cts.search(\n+    cts.andQuery([\n+      cts.collectionQuery('http://marklogic.com/entity-services/models'),\n+      cts.tripleRangeQuery(sem.iri(entityTypeId), sem.curieExpand(\"rdf:type\"), sem.curieExpand(\"es:EntityType\", semPrefixes))\n+    ])));\n+}\n+\n+/**\n+ * @param entityTypeId string or a sem.iri\n+ * @return null if a model can't be found matching the given EntityTypeId, or if a model is found but there's no an entity type\n+ * with a title matching the entity title in the EntityTypeId. Otherwise, the entity type from the definitions array in the model\n+ * is returned.\n+ */\n+function findEntityType(entityTypeId) {\n+  const modelDoc = findModelForEntityTypeId(entityTypeId);\n+  if (!modelDoc) {\n+    return null;\n+  }\n+  return modelDoc.toObject().definitions[getEntityTypeIdParts(entityTypeId).entityTypeTitle];\n+}\n+\n+/**\n+ * @param entityTypeId sem.iri or string\n+ * @return {{entityTypeTitle: string, baseUri: string, modelTitle: string, version: string}}\n+ */\n+function getEntityTypeIdParts(entityTypeId) {\n+  if (entityTypeId == null) {\n+    throw Error(\"Cannot get EntityTypeId parts from null EntityTypeId\");\n+  }\n+\n+  entityTypeId = entityTypeId.toString();\n+\n+  const tokens = entityTypeId.split(\"/\");\n+  if (tokens.length < 3) {\n+    throw Error(\"Could not get EntityTypeId parts from invalid EntityTypeId: \" + entityTypeId);\n+  }\n+\n+  const infoTokens = tokens[tokens.length - 2].split(\"-\");\n+  if (infoTokens.length < 2) {\n+    throw Error(\"Could not get EntityTypeId parts; expected info part did not contain a hyphen; EntityTypeId: \" + entityTypeId);\n+  }\n+\n+  const title = tokens[tokens.length - 1];\n+  const baseUri = tokens.slice(0, tokens.length - 2).join(\"/\") + \"/\";\n+  return {\n+    baseUri: baseUri,\n+    modelTitle: infoTokens[0],\n+    version: infoTokens.slice(1).join(\"-\"),\n+    entityTypeTitle: title\n+  };\n+}\n+\n+/**\n+ * @param model the model object as found in a model descriptor\n+ * @param entityTypeTitle a string identifying the entity type in the definitions array that an IRI is needed for\n+ * @return {string}\n+ */\n+function getEntityTypeId(model, entityTypeTitle) {\n+  return getModelId(model) + \"/\" + entityTypeTitle;\n+}\n+\n+/**\n+ * @param model\n+ * @return a map (object) where each key is an EntityTypeId and the value is the EntityType\n+ */\n+function convertModelToEntityTypeMap(model) {\n+  const map = {};\n+  const modelId = getModelId(model);\n+  for (var entityTypeTitle of Object.keys(model.definitions)) {\n+    map[modelId + \"/\" + entityTypeTitle] = model.definitions[entityTypeTitle];\n+  }\n+  return map;\n+}\n+\n+function getModelId(model) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3OTg0NA=="}, "originalCommit": {"oid": "8273a3aed8e201455b8f834d4f043282c82459ab"}, "originalPosition": 127}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3571, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}