{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NDExNTc2", "number": 3664, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjoyMToxNFrODmQwvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODoxMTozNlrODmzFvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDQ3MTAzOnYy", "diffSide": "RIGHT", "path": "one-ui/src/main/java/com/marklogic/hub/oneui/services/DataHubProjectUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjoyMToxNFrOFzk1rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjoyMToxNFrOFzk1rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyNTI2Mw==", "bodyText": "Just use FileCopyUtils here instead:\nByteArraOutputStream out = new ByteArrayOutputStream();\nFileCopyUtils.copy(in, out);\nreturn new ByteArrayInputStream(out.toByteArray());", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3664#discussion_r389625263", "createdAt": "2020-03-09T12:21:14Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/oneui/services/DataHubProjectUtils.java", "diffHunk": "@@ -140,4 +167,62 @@ public static void extractZipProject(HubProject project, InputStream in, UIDeplo\n         }\n         listener.onStatusChange(0, String.format(\"Completed extracting the uploaded zip project into (%s)\", currProjectDir.toFile().getAbsolutePath()));\n     }\n+\n+    private static InputStream toByteArrayInputStream(InputStream in) {\n+        if (in instanceof ByteArrayInputStream) {\n+            return in;\n+        }\n+        byte[] buff = new byte[8000];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731ed65bc9aa0d0ffcd9ad381e36df8a6306a632"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDQ4NzkyOnYy", "diffSide": "RIGHT", "path": "one-ui/src/test/java/com/marklogic/hub/oneui/TestHelper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjoyNjoyOFrOFzk_cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODoyMDo1OVrOF0bccA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyNzc2Mw==", "bodyText": "It looks like TestHelper already has properties for test.adminUsername and test.adminPassword, so there's no need to do this - the line doesn't really make sense either, as we can safely assume there's an admin user with the admin role.\nAlso, to mirror similar methods in HubTestBase, call this \"runAsAdminUser\".", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3664#discussion_r389627763", "createdAt": "2020-03-09T12:26:28Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/test/java/com/marklogic/hub/oneui/TestHelper.java", "diffHunk": "@@ -79,6 +79,12 @@ public void authenticateSession() {\n        hubConfig.setCredentials(environmentInfo, dataHubDeveloperUsername, dataHubDeveloperPassword);\n     }\n \n+    public void authenticateSessionAsAdmin() {\n+        createUser(\"admin\", \"admin\",\"admin\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731ed65bc9aa0d0ffcd9ad381e36df8a6306a632"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUxMzgwNw==", "bodyText": "@hao1st  Can't this line be removed? There shouldn't be any reason to try to create an admin user.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3664#discussion_r390513807", "createdAt": "2020-03-10T18:10:44Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/test/java/com/marklogic/hub/oneui/TestHelper.java", "diffHunk": "@@ -79,6 +79,12 @@ public void authenticateSession() {\n        hubConfig.setCredentials(environmentInfo, dataHubDeveloperUsername, dataHubDeveloperPassword);\n     }\n \n+    public void authenticateSessionAsAdmin() {\n+        createUser(\"admin\", \"admin\",\"admin\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyNzc2Mw=="}, "originalCommit": {"oid": "731ed65bc9aa0d0ffcd9ad381e36df8a6306a632"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUxOTkyMA==", "bodyText": "@rjrudin I will fall back it to Environment Manager user instead of user though i did not get why we could not use \"admin\".", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3664#discussion_r390519920", "createdAt": "2020-03-10T18:20:59Z", "author": {"login": "hao1st"}, "path": "one-ui/src/test/java/com/marklogic/hub/oneui/TestHelper.java", "diffHunk": "@@ -79,6 +79,12 @@ public void authenticateSession() {\n        hubConfig.setCredentials(environmentInfo, dataHubDeveloperUsername, dataHubDeveloperPassword);\n     }\n \n+    public void authenticateSessionAsAdmin() {\n+        createUser(\"admin\", \"admin\",\"admin\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyNzc2Mw=="}, "originalCommit": {"oid": "731ed65bc9aa0d0ffcd9ad381e36df8a6306a632"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDUxMjM3OnYy", "diffSide": "RIGHT", "path": "one-ui/src/main/java/com/marklogic/hub/oneui/services/DataHubProjectUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjozNDoyNFrOFzlONA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjozNDoyNFrOFzlONA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYzMTU0MA==", "bodyText": "I highly recommend unit tests to verify this functionality. There's a lot of code being added here, and the new test in EnvironmentControllerTest verifies it at an integration level. But if something goes wrong, it'll be difficult to debug because we don't have any unit tests verifying any of the new logic.\nLooking at what this method outputs, it's not clear to me what this method is doing. The name implies an \"archive folder\" is being returned, so I'm first wondering why a Path or File isn't returned. I also see \"return null\" at the bottom - what does that mean if that happens? Unit tests would both verify that this functionality works correctly and document the purposes of the method as well.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3664#discussion_r389631540", "createdAt": "2020-03-09T12:34:24Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/oneui/services/DataHubProjectUtils.java", "diffHunk": "@@ -140,4 +167,62 @@ public static void extractZipProject(HubProject project, InputStream in, UIDeplo\n         }\n         listener.onStatusChange(0, String.format(\"Completed extracting the uploaded zip project into (%s)\", currProjectDir.toFile().getAbsolutePath()));\n     }\n+\n+    private static InputStream toByteArrayInputStream(InputStream in) {\n+        if (in instanceof ByteArrayInputStream) {\n+            return in;\n+        }\n+        byte[] buff = new byte[8000];\n+        int bytesRead = 0;\n+        ByteArrayOutputStream bao = new ByteArrayOutputStream();\n+        try {\n+            while ((bytesRead = in.read(buff)) != -1) {\n+                bao.write(buff, 0, bytesRead);\n+            }\n+        } catch (IOException e) {\n+            throw new RuntimeException(String.format(\"Failed to convert to ByteArrayInputStream due to (%s)\", e.getMessage()));\n+        }\n+        byte[] data = bao.toByteArray();\n+        ByteArrayInputStream bin = new ByteArrayInputStream(data);\n+        return bin;\n+    }\n+\n+    private static String getArchiveFolderOfZipFile(Path currProjectDir, InputStream in) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731ed65bc9aa0d0ffcd9ad381e36df8a6306a632"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDA5NTM1OnYy", "diffSide": "RIGHT", "path": "one-ui/src/test/java/com/marklogic/hub/oneui/services/DataHubProjectUtilsTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODoxMTozNlrOF0bGlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODoxOToxM1rOF0bYJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUxNDMyNQ==", "bodyText": "Just make these methods protected - that's common for unit-testing purposes.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3664#discussion_r390514325", "createdAt": "2020-03-10T18:11:36Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/test/java/com/marklogic/hub/oneui/services/DataHubProjectUtilsTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.marklogic.hub.oneui.services;\n+\n+import com.marklogic.hub.curation.controllers.EnvironmentControllerTest;\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class DataHubProjectUtilsTest {\n+\n+    @Test\n+    public void testExtractZipFileWithoutArchiveFolder() throws Exception {\n+        File file = new File(EnvironmentControllerTest.class.getClassLoader().getResource(\"dhfWithoutArchiveFolder.zip\").getFile());\n+        FileInputStream input = new FileInputStream(file);\n+\n+        Method method = DataHubProjectUtils.class.getDeclaredMethod(\"toByteArrayInputStream\", InputStream.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72ae01e46c47adf2e17aa08f3a0a315896b42e6c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUxNTQ5MA==", "bodyText": "@rjrudin it is arguable though i do not feel it is good to do that. But it is harmless for me.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3664#discussion_r390515490", "createdAt": "2020-03-10T18:13:37Z", "author": {"login": "hao1st"}, "path": "one-ui/src/test/java/com/marklogic/hub/oneui/services/DataHubProjectUtilsTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.marklogic.hub.oneui.services;\n+\n+import com.marklogic.hub.curation.controllers.EnvironmentControllerTest;\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class DataHubProjectUtilsTest {\n+\n+    @Test\n+    public void testExtractZipFileWithoutArchiveFolder() throws Exception {\n+        File file = new File(EnvironmentControllerTest.class.getClassLoader().getResource(\"dhfWithoutArchiveFolder.zip\").getFile());\n+        FileInputStream input = new FileInputStream(file);\n+\n+        Method method = DataHubProjectUtils.class.getDeclaredMethod(\"toByteArrayInputStream\", InputStream.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUxNDMyNQ=="}, "originalCommit": {"oid": "72ae01e46c47adf2e17aa08f3a0a315896b42e6c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUxODgyMA==", "bodyText": "Protected methods can still be changed between minor releases. You can also do package-level protection, which works as long as your test class is in the same package as your class.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3664#discussion_r390518820", "createdAt": "2020-03-10T18:19:13Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/test/java/com/marklogic/hub/oneui/services/DataHubProjectUtilsTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.marklogic.hub.oneui.services;\n+\n+import com.marklogic.hub.curation.controllers.EnvironmentControllerTest;\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class DataHubProjectUtilsTest {\n+\n+    @Test\n+    public void testExtractZipFileWithoutArchiveFolder() throws Exception {\n+        File file = new File(EnvironmentControllerTest.class.getClassLoader().getResource(\"dhfWithoutArchiveFolder.zip\").getFile());\n+        FileInputStream input = new FileInputStream(file);\n+\n+        Method method = DataHubProjectUtils.class.getDeclaredMethod(\"toByteArrayInputStream\", InputStream.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUxNDMyNQ=="}, "originalCommit": {"oid": "72ae01e46c47adf2e17aa08f3a0a315896b42e6c"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3466, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}