{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3NTUzMjE3", "number": 4396, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODoyMjo1OVrOEYLeFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODoyNjo1NFrOEYLjUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzg5MjA3OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/components/sidebar/sidebar.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODoyMjo1OVrOHAYJYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTo1Mzo1M1rOHAbUtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE1NzY2NQ==", "bodyText": "I think we can remove beforeEach and the enzyme test lines 35-51, since the RTL test below verifies the same test better.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4396#discussion_r470157665", "createdAt": "2020-08-13T18:22:59Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/sidebar/sidebar.test.tsx", "diffHunk": "@@ -4,47 +4,70 @@ import Sidebar from './sidebar';\n import { entityFromJSON, entityParser } from '../../util/data-conversion';\n import modelResponse from '../../assets/mock-data/model-response';\n import searchPayloadFacets from '../../assets/mock-data/search-payload-facets';\n+import { render, fireEvent } from '@testing-library/react';\n+\n \n describe(\"Sidebar component\", () => {\n-    let wrapper;\n-    const parsedModelData = entityFromJSON(modelResponse);\n-    const entityDefArray = entityParser(parsedModelData);\n-\n-    describe('All Entities Dropdown Option', () => {\n-      beforeEach(() => {\n-        wrapper = shallow(\n-          <Sidebar\n-            entityDefArray={entityDefArray}\n-            facets={searchPayloadFacets}\n-            selectedEntities={[]}\n-            facetRender = {jest.fn()}\n-            checkFacetRender = {jest.fn()}\n-          />\n-        )\n-      });\n+  let wrapper;\n+  const parsedModelData = entityFromJSON(modelResponse);\n+  const entityDefArray = entityParser(parsedModelData);\n \n-      it('should render only Hub Properties Panel', () => {\n-        expect(wrapper.exists('#hub-properties')).toBe(true);\n-        expect(wrapper.exists('#entity-properties')).toBe(false);\n-      });\n+  describe('All Entities Dropdown Option', () => {\n+    beforeEach(() => {\n+      wrapper = shallow(\n+        <Sidebar\n+          entityDefArray={entityDefArray}\n+          facets={searchPayloadFacets}\n+          selectedEntities={[]}\n+          facetRender={jest.fn()}\n+          checkFacetRender={jest.fn()}\n+        />\n+      )\n     });\n \n-    describe('An Entity is selected', () => {\n-      beforeEach(() => {\n-        wrapper = shallow(\n-          <Sidebar\n-            entityDefArray={entityDefArray}\n-            facets={searchPayloadFacets}\n-            selectedEntities={['Customer']}\n-            facetRender = {jest.fn()}\n-            checkFacetRender = {jest.fn()}\n-          />\n-        )\n-      });\n+    it('should render only Hub Properties Panel', () => {\n+      expect(wrapper.exists('#hub-properties')).toBe(true);\n+      expect(wrapper.exists('#entity-properties')).toBe(false);\n+    });\n+  });\n \n-      it('should render both Entity and Hub Properties panel', () => {\n-        expect(wrapper.exists('#hub-properties')).toBe(true);\n-        expect(wrapper.exists('#entity-properties')).toBe(true);\n-      });\n+  describe('An Entity is selected', () => {\n+    beforeEach(() => {\n+      wrapper = shallow(\n+        <Sidebar\n+          entityDefArray={entityDefArray}\n+          facets={searchPayloadFacets}\n+          selectedEntities={['Customer']}\n+          facetRender={jest.fn()}\n+          checkFacetRender={jest.fn()}\n+        />\n+      )\n     });\n+\n+    it('should render both Entity and Hub Properties panel', () => {\n+      expect(wrapper.exists('#hub-properties')).toBe(true);\n+      expect(wrapper.exists('#entity-properties')).toBe(true);\n+    });\n+  });\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ad650b32d74eace05edefd05a4a75609e84502e"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwOTcxNg==", "bodyText": "Done. Thanks.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4396#discussion_r470209716", "createdAt": "2020-08-13T19:53:53Z", "author": {"login": "timur-isangulov"}, "path": "marklogic-data-hub-central/ui/src/components/sidebar/sidebar.test.tsx", "diffHunk": "@@ -4,47 +4,70 @@ import Sidebar from './sidebar';\n import { entityFromJSON, entityParser } from '../../util/data-conversion';\n import modelResponse from '../../assets/mock-data/model-response';\n import searchPayloadFacets from '../../assets/mock-data/search-payload-facets';\n+import { render, fireEvent } from '@testing-library/react';\n+\n \n describe(\"Sidebar component\", () => {\n-    let wrapper;\n-    const parsedModelData = entityFromJSON(modelResponse);\n-    const entityDefArray = entityParser(parsedModelData);\n-\n-    describe('All Entities Dropdown Option', () => {\n-      beforeEach(() => {\n-        wrapper = shallow(\n-          <Sidebar\n-            entityDefArray={entityDefArray}\n-            facets={searchPayloadFacets}\n-            selectedEntities={[]}\n-            facetRender = {jest.fn()}\n-            checkFacetRender = {jest.fn()}\n-          />\n-        )\n-      });\n+  let wrapper;\n+  const parsedModelData = entityFromJSON(modelResponse);\n+  const entityDefArray = entityParser(parsedModelData);\n \n-      it('should render only Hub Properties Panel', () => {\n-        expect(wrapper.exists('#hub-properties')).toBe(true);\n-        expect(wrapper.exists('#entity-properties')).toBe(false);\n-      });\n+  describe('All Entities Dropdown Option', () => {\n+    beforeEach(() => {\n+      wrapper = shallow(\n+        <Sidebar\n+          entityDefArray={entityDefArray}\n+          facets={searchPayloadFacets}\n+          selectedEntities={[]}\n+          facetRender={jest.fn()}\n+          checkFacetRender={jest.fn()}\n+        />\n+      )\n     });\n \n-    describe('An Entity is selected', () => {\n-      beforeEach(() => {\n-        wrapper = shallow(\n-          <Sidebar\n-            entityDefArray={entityDefArray}\n-            facets={searchPayloadFacets}\n-            selectedEntities={['Customer']}\n-            facetRender = {jest.fn()}\n-            checkFacetRender = {jest.fn()}\n-          />\n-        )\n-      });\n+    it('should render only Hub Properties Panel', () => {\n+      expect(wrapper.exists('#hub-properties')).toBe(true);\n+      expect(wrapper.exists('#entity-properties')).toBe(false);\n+    });\n+  });\n \n-      it('should render both Entity and Hub Properties panel', () => {\n-        expect(wrapper.exists('#hub-properties')).toBe(true);\n-        expect(wrapper.exists('#entity-properties')).toBe(true);\n-      });\n+  describe('An Entity is selected', () => {\n+    beforeEach(() => {\n+      wrapper = shallow(\n+        <Sidebar\n+          entityDefArray={entityDefArray}\n+          facets={searchPayloadFacets}\n+          selectedEntities={['Customer']}\n+          facetRender={jest.fn()}\n+          checkFacetRender={jest.fn()}\n+        />\n+      )\n     });\n+\n+    it('should render both Entity and Hub Properties panel', () => {\n+      expect(wrapper.exists('#hub-properties')).toBe(true);\n+      expect(wrapper.exists('#entity-properties')).toBe(true);\n+    });\n+  });\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE1NzY2NQ=="}, "originalCommit": {"oid": "4ad650b32d74eace05edefd05a4a75609e84502e"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzkwNTQ3OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/components/sidebar/sidebar.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODoyNjo1NFrOHAYRng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTo1NDowMVrOHAbVHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE1OTc3NA==", "bodyText": "We can delete this suite as well lines 15-32. and the suite below with enzyme test.\nThe 2 tests here is when an entity is selected and when All Entities is selected and I think we can have 2 tests in 1 describe, than having 2 describes within a describe.\n@timur-isangulov can you pls clean this up a little and add an RTL test for All entities similar to your RTL test for Customer.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4396#discussion_r470159774", "createdAt": "2020-08-13T18:26:54Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/sidebar/sidebar.test.tsx", "diffHunk": "@@ -4,47 +4,70 @@ import Sidebar from './sidebar';\n import { entityFromJSON, entityParser } from '../../util/data-conversion';\n import modelResponse from '../../assets/mock-data/model-response';\n import searchPayloadFacets from '../../assets/mock-data/search-payload-facets';\n+import { render, fireEvent } from '@testing-library/react';\n+\n \n describe(\"Sidebar component\", () => {\n-    let wrapper;\n-    const parsedModelData = entityFromJSON(modelResponse);\n-    const entityDefArray = entityParser(parsedModelData);\n-\n-    describe('All Entities Dropdown Option', () => {\n-      beforeEach(() => {\n-        wrapper = shallow(\n-          <Sidebar\n-            entityDefArray={entityDefArray}\n-            facets={searchPayloadFacets}\n-            selectedEntities={[]}\n-            facetRender = {jest.fn()}\n-            checkFacetRender = {jest.fn()}\n-          />\n-        )\n-      });\n+  let wrapper;\n+  const parsedModelData = entityFromJSON(modelResponse);\n+  const entityDefArray = entityParser(parsedModelData);\n \n-      it('should render only Hub Properties Panel', () => {\n-        expect(wrapper.exists('#hub-properties')).toBe(true);\n-        expect(wrapper.exists('#entity-properties')).toBe(false);\n-      });\n+  describe('All Entities Dropdown Option', () => {\n+    beforeEach(() => {\n+      wrapper = shallow(\n+        <Sidebar\n+          entityDefArray={entityDefArray}\n+          facets={searchPayloadFacets}\n+          selectedEntities={[]}\n+          facetRender={jest.fn()}\n+          checkFacetRender={jest.fn()}\n+        />\n+      )\n     });\n \n-    describe('An Entity is selected', () => {\n-      beforeEach(() => {\n-        wrapper = shallow(\n-          <Sidebar\n-            entityDefArray={entityDefArray}\n-            facets={searchPayloadFacets}\n-            selectedEntities={['Customer']}\n-            facetRender = {jest.fn()}\n-            checkFacetRender = {jest.fn()}\n-          />\n-        )\n-      });\n+    it('should render only Hub Properties Panel', () => {\n+      expect(wrapper.exists('#hub-properties')).toBe(true);\n+      expect(wrapper.exists('#entity-properties')).toBe(false);\n+    });\n+  });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ad650b32d74eace05edefd05a4a75609e84502e"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwOTgyMw==", "bodyText": "Done. Thanks.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4396#discussion_r470209823", "createdAt": "2020-08-13T19:54:01Z", "author": {"login": "timur-isangulov"}, "path": "marklogic-data-hub-central/ui/src/components/sidebar/sidebar.test.tsx", "diffHunk": "@@ -4,47 +4,70 @@ import Sidebar from './sidebar';\n import { entityFromJSON, entityParser } from '../../util/data-conversion';\n import modelResponse from '../../assets/mock-data/model-response';\n import searchPayloadFacets from '../../assets/mock-data/search-payload-facets';\n+import { render, fireEvent } from '@testing-library/react';\n+\n \n describe(\"Sidebar component\", () => {\n-    let wrapper;\n-    const parsedModelData = entityFromJSON(modelResponse);\n-    const entityDefArray = entityParser(parsedModelData);\n-\n-    describe('All Entities Dropdown Option', () => {\n-      beforeEach(() => {\n-        wrapper = shallow(\n-          <Sidebar\n-            entityDefArray={entityDefArray}\n-            facets={searchPayloadFacets}\n-            selectedEntities={[]}\n-            facetRender = {jest.fn()}\n-            checkFacetRender = {jest.fn()}\n-          />\n-        )\n-      });\n+  let wrapper;\n+  const parsedModelData = entityFromJSON(modelResponse);\n+  const entityDefArray = entityParser(parsedModelData);\n \n-      it('should render only Hub Properties Panel', () => {\n-        expect(wrapper.exists('#hub-properties')).toBe(true);\n-        expect(wrapper.exists('#entity-properties')).toBe(false);\n-      });\n+  describe('All Entities Dropdown Option', () => {\n+    beforeEach(() => {\n+      wrapper = shallow(\n+        <Sidebar\n+          entityDefArray={entityDefArray}\n+          facets={searchPayloadFacets}\n+          selectedEntities={[]}\n+          facetRender={jest.fn()}\n+          checkFacetRender={jest.fn()}\n+        />\n+      )\n     });\n \n-    describe('An Entity is selected', () => {\n-      beforeEach(() => {\n-        wrapper = shallow(\n-          <Sidebar\n-            entityDefArray={entityDefArray}\n-            facets={searchPayloadFacets}\n-            selectedEntities={['Customer']}\n-            facetRender = {jest.fn()}\n-            checkFacetRender = {jest.fn()}\n-          />\n-        )\n-      });\n+    it('should render only Hub Properties Panel', () => {\n+      expect(wrapper.exists('#hub-properties')).toBe(true);\n+      expect(wrapper.exists('#entity-properties')).toBe(false);\n+    });\n+  });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE1OTc3NA=="}, "originalCommit": {"oid": "4ad650b32d74eace05edefd05a4a75609e84502e"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3791, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}