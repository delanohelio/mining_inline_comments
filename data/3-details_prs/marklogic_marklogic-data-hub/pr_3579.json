{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0NjY3NTAy", "number": 3579, "title": "DHFPROD-4337: Create API to install uploaded project", "bodyText": "https://project.marklogic.com/jira/browse/DHFPROD-4337\nhttps://project.marklogic.com/jira/browse/DHFPROD-4358", "createdAt": "2020-02-13T04:47:55Z", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3579", "merged": true, "mergeCommit": {"oid": "b663227f0b4cb4a17ccd7418d0370ff911ef036d"}, "closed": true, "closedAt": "2020-02-20T20:04:10Z", "author": {"login": "hao1st"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcERNAHAFqTM1OTAwNTQ5Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcGQtmbgFqTM2MjE5MjAzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MDA1NDk2", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3579#pullrequestreview-359005496", "createdAt": "2020-02-14T15:07:27Z", "commit": {"oid": "45ac1719d08d5afe8ba4ea0ff48e9923b35c2ed8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNTowNzoyN1rOFp5oHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNToyMjo1MlrOFp6KLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4MDA5NQ==", "bodyText": "How is this used? I don't see any references to it anywhere. I'm also wondering what problem it's solving, as I don't think DHFPROD-4337 spells it out? This may be needed, but if so, we should have a JIRA ticket that spells out the problem that this is solving.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3579#discussion_r379480095", "createdAt": "2020-02-14T15:07:27Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/oneui/auth/HttpHandshakeInterceptor.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package com.marklogic.hub.oneui.auth;\n+\n+import java.util.Map;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+\n+import org.springframework.http.server.ServerHttpRequest;\n+import org.springframework.http.server.ServerHttpResponse;\n+import org.springframework.http.server.ServletServerHttpRequest;\n+import org.springframework.http.server.ServletServerHttpResponse;\n+import org.springframework.security.authentication.BadCredentialsException;\n+import org.springframework.web.socket.WebSocketHandler;\n+import org.springframework.web.socket.server.HandshakeInterceptor;\n+\n+public class HttpHandshakeInterceptor  implements HandshakeInterceptor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45ac1719d08d5afe8ba4ea0ff48e9923b35c2ed8"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4MDkyOQ==", "bodyText": "Since the client for this method doesn't care about the return value, let's declare this as void. It appears the expectation is that if anything goes wrong, the listener will be told about it. So there's no value in returning true/false - the method is expected to have succeeded unless the listener is given an error.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3579#discussion_r379480929", "createdAt": "2020-02-14T15:08:58Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/oneui/services/DataHubService.java", "diffHunk": "@@ -29,6 +29,19 @@ public boolean install(HubDeployStatusListener listener) {\n         return false;\n     }\n \n+    public boolean unInstall(HubDeployStatusListener listener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45ac1719d08d5afe8ba4ea0ff48e9923b35c2ed8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4NTg2MQ==", "bodyText": "I am generally not big on anonymous classes like this. I find them more difficult to read and understand, and they can also complicate the dependencies on a class. For example, EnvironmentController has a dependency on SimpMessagingTemplate, but it doesn't need it - this anonymous impl needs it.\nLet's move this into a real class - call it \"UIDeployListener\" or something like that. Move the SimpMessagingTemplate dependency to it, which can be passed in via the constructor, along with \"boolean isUninstall\".", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3579#discussion_r379485861", "createdAt": "2020-02-14T15:17:50Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/oneui/controllers/EnvironmentController.java", "diffHunk": "@@ -90,31 +96,109 @@ public JsonNode getProject() {\n \n     @RequestMapping(value = \"/install\", method = RequestMethod.POST)\n     @ResponseBody\n-    public JsonNode install(@RequestBody ObjectNode payload) throws Exception {\n-        String originalDirectory = environmentService.getProjectDirectory();\n+    public void install(@RequestBody ObjectNode payload) throws Exception {\n+        String directory = payload.get(\"directory\").asText(\"\");\n+\n         final Exception[] dataHubConfigurationException = {null};\n+        HubDeployStatusListener listener = getInstallListener(dataHubConfigurationException, false);\n+\n+        install(directory, listener, dataHubConfigurationException);\n+    }\n+\n+    @RequestMapping(value = \"/project-download\", produces = \"application/zip\")\n+    public void downloadProject(HttpServletRequest request, HttpServletResponse response) {\n+        HubProject project = hubConfig.getHubProject();\n+        response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);\n+        response.addHeader(\"Content-Disposition\", \"attachment; filename=datahub-project.zip\");\n+        try (OutputStream out = response.getOutputStream()) {\n+            project.exportProject(out);\n+            response.flushBuffer();\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Unable to download project;cause: \" + e.getMessage());\n+        }\n+    }\n+\n+    @RequestMapping(value = \"/reset\", method = RequestMethod.POST)\n+    @ResponseBody\n+    public JsonNode reset() {\n+        environmentService.reset();\n+        ObjectNode obj = mapper.createObjectNode();\n+        obj.put(\"reset\", true);\n+        return obj;\n+    }\n+\n+    @RequestMapping(value = \"/project-info\", method = RequestMethod.GET)\n+    @ResponseBody\n+    public JsonNode getProjectInfo() {\n+        return environmentService.getProjectInfo();\n+    }\n+\n+    @RequestMapping(value = \"/project-upload\", method = RequestMethod.POST)\n+    @ResponseBody\n+    public void uploadProject(@RequestParam(\"zipfile\") MultipartFile uploadedFile) throws Exception {\n+        final Exception[] dataHubConfigurationException = {null};\n+        HubDeployStatusListener listener = getInstallListener(dataHubConfigurationException, false);\n+\n+        HubProject project = hubConfig.getHubProject();\n+\n+        //backup first\n+        backupExistingFSProject(project, listener);\n+\n+        // delete contents from the current project folder\n+        cleanExistingFSProject(project, listener);\n+\n+        // extract the uploaded & zipped project file into the current project folder\n+        extractZipProject(project, uploadedFile, listener);\n+\n+        HubDeployStatusListener uninstalllistener = getInstallListener(dataHubConfigurationException, true);\n+        dataHubService.unInstall(uninstalllistener);\n+\n+        install(project.getProjectDirString(), listener, dataHubConfigurationException);\n+    }\n+\n+    private HubDeployStatusListener getInstallListener(final Exception[] dataHubConfigurationException, boolean isUninstall) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45ac1719d08d5afe8ba4ea0ff48e9923b35c2ed8"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4NjExMw==", "bodyText": "I don't see any use of dataHubConfigurationException - what's its purpose? If it's not used here, can it be removed from the anonymous listener above?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3579#discussion_r379486113", "createdAt": "2020-02-14T15:18:15Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/oneui/controllers/EnvironmentController.java", "diffHunk": "@@ -90,31 +96,109 @@ public JsonNode getProject() {\n \n     @RequestMapping(value = \"/install\", method = RequestMethod.POST)\n     @ResponseBody\n-    public JsonNode install(@RequestBody ObjectNode payload) throws Exception {\n-        String originalDirectory = environmentService.getProjectDirectory();\n+    public void install(@RequestBody ObjectNode payload) throws Exception {\n+        String directory = payload.get(\"directory\").asText(\"\");\n+\n         final Exception[] dataHubConfigurationException = {null};\n+        HubDeployStatusListener listener = getInstallListener(dataHubConfigurationException, false);\n+\n+        install(directory, listener, dataHubConfigurationException);\n+    }\n+\n+    @RequestMapping(value = \"/project-download\", produces = \"application/zip\")\n+    public void downloadProject(HttpServletRequest request, HttpServletResponse response) {\n+        HubProject project = hubConfig.getHubProject();\n+        response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);\n+        response.addHeader(\"Content-Disposition\", \"attachment; filename=datahub-project.zip\");\n+        try (OutputStream out = response.getOutputStream()) {\n+            project.exportProject(out);\n+            response.flushBuffer();\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Unable to download project;cause: \" + e.getMessage());\n+        }\n+    }\n+\n+    @RequestMapping(value = \"/reset\", method = RequestMethod.POST)\n+    @ResponseBody\n+    public JsonNode reset() {\n+        environmentService.reset();\n+        ObjectNode obj = mapper.createObjectNode();\n+        obj.put(\"reset\", true);\n+        return obj;\n+    }\n+\n+    @RequestMapping(value = \"/project-info\", method = RequestMethod.GET)\n+    @ResponseBody\n+    public JsonNode getProjectInfo() {\n+        return environmentService.getProjectInfo();\n+    }\n+\n+    @RequestMapping(value = \"/project-upload\", method = RequestMethod.POST)\n+    @ResponseBody\n+    public void uploadProject(@RequestParam(\"zipfile\") MultipartFile uploadedFile) throws Exception {\n+        final Exception[] dataHubConfigurationException = {null};\n+        HubDeployStatusListener listener = getInstallListener(dataHubConfigurationException, false);\n+\n+        HubProject project = hubConfig.getHubProject();\n+\n+        //backup first\n+        backupExistingFSProject(project, listener);\n+\n+        // delete contents from the current project folder\n+        cleanExistingFSProject(project, listener);\n+\n+        // extract the uploaded & zipped project file into the current project folder\n+        extractZipProject(project, uploadedFile, listener);\n+\n+        HubDeployStatusListener uninstalllistener = getInstallListener(dataHubConfigurationException, true);\n+        dataHubService.unInstall(uninstalllistener);\n+\n+        install(project.getProjectDirString(), listener, dataHubConfigurationException);\n+    }\n+\n+    private HubDeployStatusListener getInstallListener(final Exception[] dataHubConfigurationException, boolean isUninstall) {\n         HubDeployStatusListener listener = new HubDeployStatusListener() {\n             int lastPercentageComplete = 0;\n             @Override\n             public void onStatusChange(int percentComplete, String message) {\n                 if (percentComplete >= 0) {\n                     logger.info(percentComplete + \"% \" + message);\n                     lastPercentageComplete = percentComplete;\n-                    template.convertAndSend(\"/topic/install-status\", new StatusMessage(percentComplete, message), stompHeaders);\n+                    String msg = \"\";\n+                    if (message.endsWith(\"Complete\")) {\n+                        msg = message;\n+                    } else if (isUninstall && !message.startsWith(\"Uninstalling\")) {\n+                       msg = \"Uninstalling...\" + message;\n+                    } else {\n+                       msg = \"Installing...\" + message;\n+                    }\n+                    template.convertAndSend(\"/topic/install-status\", new StatusMessage(percentComplete, msg), stompHeaders);\n                 }\n             }\n \n             @Override\n             public void onError(String commandName, Exception exception) {\n                 String message = \"Error encountered running command: \" + commandName;\n-                template.convertAndSend(\"/topic/install-status\", new StatusMessage(lastPercentageComplete, message));\n+                String msg = \"\";\n+                if (message.endsWith(\"Complete\")) {\n+                    msg = message;\n+                } else if (isUninstall && !message.startsWith(\"Uninstalling\")) {\n+                    msg = \"Uninstalling...\" + message;\n+                } else {\n+                    msg = \"Installing...\" + message;\n+                }\n+                template.convertAndSend(\"/topic/install-status\", new StatusMessage(lastPercentageComplete, msg));\n+\n                 logger.error(message, exception);\n                 dataHubConfigurationException[0] = exception;\n             }\n         };\n-        String directory = payload.get(\"directory\").asText(\"\");\n-        // setting the project directory will resolve any relative paths\n+        return listener;\n+    }\n+\n+    private void install(String directory, HubDeployStatusListener listener, final Exception[] dataHubConfigurationException) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45ac1719d08d5afe8ba4ea0ff48e9923b35c2ed8"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4NzMxNQ==", "bodyText": "I'd much rather see a real class here as opposed to a collection of static methods. This looks more like a \"ProjectManager\" class with methods for backing up a project, cleaning a project, and extracting a project zip.\nThat also makes it easy to write tests for these methods so that we know they work.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3579#discussion_r379487315", "createdAt": "2020-02-14T15:20:23Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/oneui/utils/DataHubProjectUtils.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.marklogic.hub.oneui.utils;\n+\n+import com.marklogic.hub.HubProject;\n+import com.marklogic.hub.deploy.util.HubDeployStatusListener;\n+import java.io.BufferedInputStream;\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.FilenameUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+public class DataHubProjectUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45ac1719d08d5afe8ba4ea0ff48e9923b35c2ed8"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4ODgxNQ==", "bodyText": "Why require the controller to make 3 separate calls here? We want controllers to be as thin and as simple as possible. The controller doesn't care about all of these details - it just wants to say - Hey, I've got this uploadedFile, please make this the new project. A ProjectManager class - see below - can handle all the details of backing up an existing project and then extracting the new one. I think this class just wants to call a method named \"replaceProject\".", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3579#discussion_r379488815", "createdAt": "2020-02-14T15:22:52Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/oneui/controllers/EnvironmentController.java", "diffHunk": "@@ -90,31 +96,109 @@ public JsonNode getProject() {\n \n     @RequestMapping(value = \"/install\", method = RequestMethod.POST)\n     @ResponseBody\n-    public JsonNode install(@RequestBody ObjectNode payload) throws Exception {\n-        String originalDirectory = environmentService.getProjectDirectory();\n+    public void install(@RequestBody ObjectNode payload) throws Exception {\n+        String directory = payload.get(\"directory\").asText(\"\");\n+\n         final Exception[] dataHubConfigurationException = {null};\n+        HubDeployStatusListener listener = getInstallListener(dataHubConfigurationException, false);\n+\n+        install(directory, listener, dataHubConfigurationException);\n+    }\n+\n+    @RequestMapping(value = \"/project-download\", produces = \"application/zip\")\n+    public void downloadProject(HttpServletRequest request, HttpServletResponse response) {\n+        HubProject project = hubConfig.getHubProject();\n+        response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);\n+        response.addHeader(\"Content-Disposition\", \"attachment; filename=datahub-project.zip\");\n+        try (OutputStream out = response.getOutputStream()) {\n+            project.exportProject(out);\n+            response.flushBuffer();\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Unable to download project;cause: \" + e.getMessage());\n+        }\n+    }\n+\n+    @RequestMapping(value = \"/reset\", method = RequestMethod.POST)\n+    @ResponseBody\n+    public JsonNode reset() {\n+        environmentService.reset();\n+        ObjectNode obj = mapper.createObjectNode();\n+        obj.put(\"reset\", true);\n+        return obj;\n+    }\n+\n+    @RequestMapping(value = \"/project-info\", method = RequestMethod.GET)\n+    @ResponseBody\n+    public JsonNode getProjectInfo() {\n+        return environmentService.getProjectInfo();\n+    }\n+\n+    @RequestMapping(value = \"/project-upload\", method = RequestMethod.POST)\n+    @ResponseBody\n+    public void uploadProject(@RequestParam(\"zipfile\") MultipartFile uploadedFile) throws Exception {\n+        final Exception[] dataHubConfigurationException = {null};\n+        HubDeployStatusListener listener = getInstallListener(dataHubConfigurationException, false);\n+\n+        HubProject project = hubConfig.getHubProject();\n+\n+        //backup first\n+        backupExistingFSProject(project, listener);\n+\n+        // delete contents from the current project folder\n+        cleanExistingFSProject(project, listener);\n+\n+        // extract the uploaded & zipped project file into the current project folder\n+        extractZipProject(project, uploadedFile, listener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45ac1719d08d5afe8ba4ea0ff48e9923b35c2ed8"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMDk0Nzgw", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3579#pullrequestreview-360094780", "createdAt": "2020-02-18T06:29:23Z", "commit": {"oid": "a13aa09b202e67e0b88dee327e8c4950f55a398d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNjoyOToyM1rOFq2VFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNjoyOToyM1rOFq2VFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ3NDY0NQ==", "bodyText": "The reason to move the utility class to services package is that \"no such method found\" thrown if it is put into utils package during junit test case was run. I did not figure out the exact reason...", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3579#discussion_r380474645", "createdAt": "2020-02-18T06:29:23Z", "author": {"login": "hao1st"}, "path": "one-ui/src/main/java/com/marklogic/hub/oneui/services/DataHubProjectUtils.java", "diffHunk": "@@ -35,17 +35,34 @@\n import org.springframework.web.multipart.MultipartFile;\n \n public class DataHubProjectUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a13aa09b202e67e0b88dee327e8c4950f55a398d"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2513dc93e51464d7b1c0378298561548aaaedec", "author": {"user": {"login": "hao1st", "name": "Hao Liu"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/e2513dc93e51464d7b1c0378298561548aaaedec", "committedDate": "2020-02-18T21:09:31Z", "message": "DHFPROD-4337: Create API to install uploaded project"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ded252a24d9ba8a96c4954eb4fafe3ebb94c24c6", "author": {"user": {"login": "hao1st", "name": "Hao Liu"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/ded252a24d9ba8a96c4954eb4fafe3ebb94c24c6", "committedDate": "2020-02-18T21:09:31Z", "message": "hao/DHFPROD-4337: Removed the unnecessary class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e93bf91b3162272bf3c69e63958af65777203f4", "author": {"user": {"login": "hao1st", "name": "Hao Liu"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/9e93bf91b3162272bf3c69e63958af65777203f4", "committedDate": "2020-02-18T21:09:31Z", "message": "DHFPROD-4337: Add test case and refactor codes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f6e05fbdab099577e2e1f3ffb8ec9550ca66f39f", "author": {"user": {"login": "hao1st", "name": "Hao Liu"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/f6e05fbdab099577e2e1f3ffb8ec9550ca66f39f", "committedDate": "2020-02-18T20:15:58Z", "message": "Merge branch 'feature/5.3.0' into hao/DHFPROD-4337"}, "afterCommit": {"oid": "9e93bf91b3162272bf3c69e63958af65777203f4", "author": {"user": {"login": "hao1st", "name": "Hao Liu"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/9e93bf91b3162272bf3c69e63958af65777203f4", "committedDate": "2020-02-18T21:09:31Z", "message": "DHFPROD-4337: Add test case and refactor codes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNzE3OTE5", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3579#pullrequestreview-360717919", "createdAt": "2020-02-18T22:23:05Z", "commit": {"oid": "9e93bf91b3162272bf3c69e63958af65777203f4"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNzM1MDQy", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3579#pullrequestreview-360735042", "createdAt": "2020-02-18T22:57:18Z", "commit": {"oid": "9e93bf91b3162272bf3c69e63958af65777203f4"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMjo1NzoxOFrOFrViQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMzowMTowNlrOFrVn4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk4NTkyMA==", "bodyText": "I know this is existing code, but it doesn't seem like an error that is resolvable by logging in as a different ML user. It doesn't matter who the ML user is - what matters is what OS user that the middle tier is running as. Because of that, I think the message should just say \"Unable to deploy project due to IO error: \" + exception.getMessage().", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3579#discussion_r380985920", "createdAt": "2020-02-18T22:57:18Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/oneui/listener/UIDeployListener.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package com.marklogic.hub.oneui.listener;\n+\n+import com.marklogic.hub.deploy.util.HubDeployStatusListener;\n+import com.marklogic.hub.oneui.exceptions.ProjectDirectoryException;\n+import com.marklogic.hub.oneui.models.StatusMessage;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.messaging.simp.SimpMessagingTemplate;\n+\n+public class UIDeployListener implements HubDeployStatusListener {\n+    protected final Logger logger = LoggerFactory.getLogger(UIDeployListener.class);\n+\n+    static final Map<String, Object> stompHeaders = new HashMap<>() {{\n+        put(\"content-type\",\"application/json\");\n+    }};\n+\n+    private SimpMessagingTemplate template;\n+\n+    private boolean isUninstall;\n+\n+    private int lastPercentageComplete;\n+\n+    private Exception exception;\n+\n+    public UIDeployListener(SimpMessagingTemplate template, boolean isUninstall) {\n+        this.template = template;\n+        this.isUninstall = isUninstall;\n+    }\n+\n+    @Override\n+    public void onStatusChange(int percentComplete, String message) {\n+        if (percentComplete >= 0) {\n+            logger.info(percentComplete + \"% \" + message);\n+            lastPercentageComplete = percentComplete;\n+            String msg = parseMessage(message);\n+            template.convertAndSend(\"/topic/install-status\", new StatusMessage(percentComplete, msg), stompHeaders);\n+        }\n+    }\n+\n+    @Override\n+    public void onError(String commandName, Exception exception) {\n+        String message = \"Error encountered running command: \" + commandName;\n+        String msg = parseMessage(message);\n+        template.convertAndSend(\"/topic/install-status\", new StatusMessage(lastPercentageComplete, msg));\n+        logger.error(message, exception);\n+        this.exception = exception;\n+        if (exception instanceof IOException || exception.getCause() instanceof IOException) {\n+            this.exception = new ProjectDirectoryException(\"Your user account does not have write permissions to the installation directory.\", \"Log in as a user with write permissions to the directory you specify, or provide the absolute path to another directory.\", exception);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e93bf91b3162272bf3c69e63958af65777203f4"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk4NjQ1NA==", "bodyText": "Because this depends on an HTTP-specific class - MultipartFile - this should either be in an HTTP-specific Java package, or swap out MultipartFile for a non-HTTP-specific abstraction, such as InputStream.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3579#discussion_r380986454", "createdAt": "2020-02-18T22:58:42Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/oneui/services/DataHubProjectUtils.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.marklogic.hub.oneui.services;\n+\n+import com.marklogic.hub.HubProject;\n+import com.marklogic.hub.oneui.listener.UIDeployListener;\n+import java.io.BufferedInputStream;\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.FilenameUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+public class DataHubProjectUtils {\n+    protected static final Logger logger = LoggerFactory.getLogger(DataHubProjectUtils.class);\n+\n+    /**\n+     *\n+     * @param project\n+     * @param uploadedFile\n+     * @param listener\n+     */\n+    public static void replaceFSProject(HubProject project, MultipartFile uploadedFile, UIDeployListener listener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e93bf91b3162272bf3c69e63958af65777203f4"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk4NjY5MA==", "bodyText": "Also, does FS = Filesystem? I don't think there's any need for that acronym here - I think it's understood that a HubProject exists on the filesystem. So just \"replaceProject\", likewise for the other methods with \"FS\" in the name.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3579#discussion_r380986690", "createdAt": "2020-02-18T22:59:15Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/oneui/services/DataHubProjectUtils.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.marklogic.hub.oneui.services;\n+\n+import com.marklogic.hub.HubProject;\n+import com.marklogic.hub.oneui.listener.UIDeployListener;\n+import java.io.BufferedInputStream;\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.FilenameUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+public class DataHubProjectUtils {\n+    protected static final Logger logger = LoggerFactory.getLogger(DataHubProjectUtils.class);\n+\n+    /**\n+     *\n+     * @param project\n+     * @param uploadedFile\n+     * @param listener\n+     */\n+    public static void replaceFSProject(HubProject project, MultipartFile uploadedFile, UIDeployListener listener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e93bf91b3162272bf3c69e63958af65777203f4"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk4NzM2Mw==", "bodyText": "Seems like this first \"if\" should be done before calling Paths.get, right?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3579#discussion_r380987363", "createdAt": "2020-02-18T23:01:06Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/oneui/controllers/EnvironmentController.java", "diffHunk": "@@ -171,4 +117,42 @@ public JsonNode reset() {\n     public JsonNode getProjectInfo() {\n         return environmentService.getProjectInfo();\n     }\n+\n+    @RequestMapping(value = \"/project-upload\", method = RequestMethod.POST)\n+    @ResponseBody\n+    public void uploadProject(@RequestParam(\"zipfile\") MultipartFile uploadedFile) throws Exception {\n+        UIDeployListener listener = new UIDeployListener(template, false);\n+\n+        HubProject project = hubConfig.getHubProject();\n+        DataHubProjectUtils.replaceFSProject(project, uploadedFile, listener);\n+\n+        dataHubService.unInstall(new UIDeployListener(template,true));\n+        install(project.getProjectDirString(), listener);\n+    }\n+\n+    private void install(String directory, UIDeployListener listener) throws Exception {\n+        try {\n+            // setting the project directory will resolve any relative paths\n+            Path directoryPath = Paths.get(directory);\n+            if (StringUtils.isEmpty(directory)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e93bf91b3162272bf3c69e63958af65777203f4"}, "originalPosition": 134}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "350811d1565f3cb5698c942acde9199c702215b1", "author": {"user": {"login": "hao1st", "name": "Hao Liu"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/350811d1565f3cb5698c942acde9199c702215b1", "committedDate": "2020-02-19T02:18:45Z", "message": "DHFPROD-4337: Refactor codes based on comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMTQ2Mzk3", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3579#pullrequestreview-361146397", "createdAt": "2020-02-19T14:19:35Z", "commit": {"oid": "350811d1565f3cb5698c942acde9199c702215b1"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNDoxOTozNVrOFrp2tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNDoyMjowNlrOFrp9Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMxODgzOA==", "bodyText": "Is this ever going to happen, and what would the user be able to do about it? The user isn't able to enter an absolute path - the user is just uploading a file.\nIf \"directory\" is invalid, then the system is misconfigured, and I don't think any user can do anything about that, right? An IT person would need to fix the path for the HubProject and then restart the middle tier.\n@ryanjdew @wooldridge Am I correct about this? My impression is that a user doesn't have any control over the project directory, except when the application is first initialized.\nI think that means that the value of \"directory\" can be assumed to be valid. If it weren't valid, the user would never have gotten to this point, and there's not anything a user can do about it either. I think that means we just need a single try/catch around the this code, which is already in place.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3579#discussion_r381318838", "createdAt": "2020-02-19T14:19:35Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/oneui/controllers/EnvironmentController.java", "diffHunk": "@@ -171,4 +117,43 @@ public JsonNode reset() {\n     public JsonNode getProjectInfo() {\n         return environmentService.getProjectInfo();\n     }\n+\n+    @RequestMapping(value = \"/project-upload\", method = RequestMethod.POST)\n+    @ResponseBody\n+    public void uploadProject(@RequestParam(\"zipfile\") MultipartFile uploadedFile) throws Exception {\n+        UIDeployListener listener = new UIDeployListener(template, false);\n+\n+        HubProject project = hubConfig.getHubProject();\n+        DataHubProjectUtils.replaceProject(project, uploadedFile.getInputStream(), listener);\n+\n+        dataHubService.unInstall(new UIDeployListener(template,true));\n+        install(project.getProjectDirString(), listener);\n+    }\n+\n+    private void install(String directory, UIDeployListener listener) throws Exception {\n+        try {\n+            if (StringUtils.isEmpty(directory)) {\n+                throw new BadRequestException(\"Property 'directory', identifying project location, not specified\");\n+            }\n+            // setting the project directory will resolve any relative paths\n+            Path directoryPath = Paths.get(directory);\n+            if (!directoryPath.isAbsolute()) {\n+                throw new ProjectDirectoryException(\"The Project Directory field requires an absolute path. You entered: \" + directory, \"Enter the absolute path to an existing local directory.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "350811d1565f3cb5698c942acde9199c702215b1"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMyMDQ1NQ==", "bodyText": "This seems like another error that the user can't possibly resolve. It seems like a confusing error message too, as the user will think it's their MarkLogic user account. But it's the OS user account that matters here - i.e. which OS user was used to fire up the middle tier.\nI think a more appropriate error message is (same with above) - \"Installation (or uninstallation) failed, please contact a system administrator; cause: \" + e.getMessage(). That makes it clear that the expected user can't do anything to resolve the issue, and an IT admin will need to get involved.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3579#discussion_r381320455", "createdAt": "2020-02-19T14:22:06Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/oneui/listener/UIDeployListener.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package com.marklogic.hub.oneui.listener;\n+\n+import com.marklogic.hub.deploy.util.HubDeployStatusListener;\n+import com.marklogic.hub.oneui.exceptions.ProjectDirectoryException;\n+import com.marklogic.hub.oneui.models.StatusMessage;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.messaging.simp.SimpMessagingTemplate;\n+\n+public class UIDeployListener implements HubDeployStatusListener {\n+    protected final Logger logger = LoggerFactory.getLogger(UIDeployListener.class);\n+\n+    static final Map<String, Object> stompHeaders = new HashMap<>() {{\n+        put(\"content-type\",\"application/json\");\n+    }};\n+\n+    private SimpMessagingTemplate template;\n+\n+    private boolean isUninstall;\n+\n+    private int lastPercentageComplete;\n+\n+    private Exception exception;\n+\n+    public UIDeployListener(SimpMessagingTemplate template, boolean isUninstall) {\n+        this.template = template;\n+        this.isUninstall = isUninstall;\n+    }\n+\n+    @Override\n+    public void onStatusChange(int percentComplete, String message) {\n+        if (percentComplete >= 0) {\n+            logger.info(percentComplete + \"% \" + message);\n+            lastPercentageComplete = percentComplete;\n+            String msg = parseMessage(message);\n+            template.convertAndSend(\"/topic/install-status\", new StatusMessage(percentComplete, msg), stompHeaders);\n+        }\n+    }\n+\n+    @Override\n+    public void onError(String commandName, Exception exception) {\n+        String message = \"Error encountered running command: \" + commandName;\n+        String msg = parseMessage(message);\n+        template.convertAndSend(\"/topic/install-status\", new StatusMessage(lastPercentageComplete, msg));\n+        logger.error(message, exception);\n+        this.exception = exception;\n+        if (exception instanceof IOException || exception.getCause() instanceof IOException) {\n+            this.exception = new ProjectDirectoryException(\"Your user account does not have write permissions to the installation directory.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "350811d1565f3cb5698c942acde9199c702215b1"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e4c10d36e4dca0e000b7a3de7cb5dd966a05650", "author": {"user": {"login": "hao1st", "name": "Hao Liu"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/5e4c10d36e4dca0e000b7a3de7cb5dd966a05650", "committedDate": "2020-02-20T18:07:50Z", "message": "DHFPROD-4337: modified error message"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMTY4MTU4", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3579#pullrequestreview-362168158", "createdAt": "2020-02-20T19:21:27Z", "commit": {"oid": "5e4c10d36e4dca0e000b7a3de7cb5dd966a05650"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMTkyMDMy", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3579#pullrequestreview-362192032", "createdAt": "2020-02-20T19:57:55Z", "commit": {"oid": "5e4c10d36e4dca0e000b7a3de7cb5dd966a05650"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3283, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}