{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4MTA2MDY0", "number": 4665, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoyMzowOFrOErxuKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDo0MTowOVrOEryFBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzM4ODU4OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/components/raw-data/raw-data-card-view/raw-data-card-view.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoyMzowOVrOHevEKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDo1NDoxOVrOHewCxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk5MDQ0Mg==", "bodyText": "Let's place the style in the corresponding module.scss file and then refer it here using the className property.\nIt should always be placed in scss file unless the style is customized in a way that scss file cannot process it.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4665#discussion_r501990442", "createdAt": "2020-10-08T20:23:09Z", "author": {"login": "xnikhil08"}, "path": "marklogic-data-hub-central/ui/src/components/raw-data/raw-data-card-view/raw-data-card-view.tsx", "diffHunk": "@@ -1,76 +1,110 @@\n-import React, { CSSProperties, useContext, useState, useEffect } from 'react';\n+import React, { CSSProperties, useContext, useState } from 'react';\n import styles from './raw-data-card-view.module.scss';\n import { Card, Icon, Popover, Row, Col } from 'antd';\n import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n import { faExternalLinkAlt } from '@fortawesome/free-solid-svg-icons';\n import { AuthoritiesContext } from \"../../../util/authorities\";\n import { MLTooltip } from '@marklogic/design-system';\n-import { getLastChars } from '../../../util/conversionFunctions';\n+import { getLastChars, formatCardUri } from '../../../util/conversionFunctions';\n import sourceFormatOptions from '../../../config/formats.config';\n+import ReactHtmlParser from 'react-html-parser';\n+import { FileOutlined } from '@ant-design/icons';\n \n \n const RawDataCardView = (props) => {\n-    const authorityService = useContext(AuthoritiesContext);\n+  const authorityService = useContext(AuthoritiesContext);\n \n-    const handleDetailViewNavigation = () => {\n-    }\n+  const handleDetailViewNavigation = () => {\n+  }\n \n-    const displayDocumentMetadata = () => {\n-    }\n+  const displayDocumentMetadata = () => {\n+  }\n \n-    // Custom CSS for source Format\n-    const sourceFormatStyle = (sourceFmt) => {\n-        let customStyles: CSSProperties = {\n-            display: 'inline-flex',\n-            alignItems: 'center',\n-            justifyContent: 'center',\n-            height: '20px',\n-            width: '20px',\n-            lineHeight: '20px',\n-            backgroundColor: sourceFormatOptions[sourceFmt].color,\n-            fontSize: sourceFmt === 'json' ? '8px' : '8.5px',\n-            borderRadius: '50%',\n-            textAlign: 'center',\n-            color: '#ffffff',\n-            verticalAlign: 'middle',\n-            marginRight: '8px'\n-        }\n-        return customStyles;\n+  // Custom CSS for source Format\n+  const sourceFormatStyle = (sourceFmt) => {\n+    let customStyles: CSSProperties = {\n+      display: 'inline-flex',\n+      alignItems: 'center',\n+      justifyContent: 'center',\n+      height: '20px',\n+      width: '20px',\n+      lineHeight: '20px',\n+      backgroundColor: sourceFormatOptions[sourceFmt].color,\n+      fontSize: sourceFmt === 'json' ? '8px' : '8.5px',\n+      borderRadius: '50%',\n+      textAlign: 'center',\n+      color: '#ffffff',\n+      verticalAlign: 'middle',\n+      marginRight: '8px'\n     }\n+    return customStyles;\n+  }\n \n-    const displayUri = (uri) => {\n-        return getLastChars(uri, 20, '...');\n-    }\n+  const displayUri = (uri) => {\n+    return formatCardUri(uri)\n+  }\n \n-    return (\n-        <div id=\"raw-data-card\" aria-label=\"raw-data-card\" className={styles.rawDataCard}>\n-            <Row gutter={24} type=\"flex\" >\n-                {props.data && props.data.length > 0 ? props.data.map((elem, index) => (\n-                    <Col key={index}>\n-                        <div>\n-                            <Card\n-                                className={styles.cardStyle}\n-                                size=\"small\"\n-                            >\n-                                <div className={styles.cardMetadataContainer}>\n-                                    <span className={styles.uriContainer} data-testid={elem.uri + '-URI'}>URI: <span className={styles.uri}>{displayUri(elem.uri)}</span></span>\n-                                    <span className={styles.cardIcons}>\n-                                        <span><Icon type=\"info-circle\" className={styles.infoIcon} theme=\"filled\" data-testid={elem.uri + '-InfoIcon'} /></span>\n-                                        <span className={styles.sourceFormat}\n-                                            style={sourceFormatStyle(elem.format)}\n-                                            data-testid={elem.uri + '-sourceFormat'}\n-                                        >{sourceFormatOptions[elem.format].label}</span>\n-                                        <MLTooltip title={'Show the raw source data'} placement=\"top\"\n-                                        ><i role=\"detail-link icon\" data-testid={elem.uri + '-detailViewIcon'}><FontAwesomeIcon icon={faExternalLinkAlt} className={styles.detailLinkIcon} size=\"lg\" /></i>\n-                                        </MLTooltip>\n-                                    </span>\n-                                </div>\n-                            </Card>\n-                        </div>\n-                    </Col>)) : <span></span>}\n-            </Row>\n+  const displaySnippet = (item) => {\n+    if (['json', 'xml', 'text'].includes(item.format)) {\n+      let str = '';\n+      item.matches.forEach(item => {\n+        item['match-text'].forEach(element => {\n+          if (typeof element === 'object') {\n+            str = str.concat('<b>').concat(element.highlight).concat('</b>').concat('...')\n+          } else {\n+            str = str.concat(element)\n+          }\n+        });\n+      })\n+      return <p>{ReactHtmlParser(str)}</p>;\n+    } else if ('binary' === item.format) {\n+      return (\n+        <div className={styles.binaryCard} >\n+          <FileOutlined style={{ fontSize: '24px', color: '#777' }} />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "009c4b1832d403d4d8a51e4d547125152d55b811"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAwNjQ2OA==", "bodyText": "Fixed. Thanks.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4665#discussion_r502006468", "createdAt": "2020-10-08T20:54:19Z", "author": {"login": "timur-isangulov"}, "path": "marklogic-data-hub-central/ui/src/components/raw-data/raw-data-card-view/raw-data-card-view.tsx", "diffHunk": "@@ -1,76 +1,110 @@\n-import React, { CSSProperties, useContext, useState, useEffect } from 'react';\n+import React, { CSSProperties, useContext, useState } from 'react';\n import styles from './raw-data-card-view.module.scss';\n import { Card, Icon, Popover, Row, Col } from 'antd';\n import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n import { faExternalLinkAlt } from '@fortawesome/free-solid-svg-icons';\n import { AuthoritiesContext } from \"../../../util/authorities\";\n import { MLTooltip } from '@marklogic/design-system';\n-import { getLastChars } from '../../../util/conversionFunctions';\n+import { getLastChars, formatCardUri } from '../../../util/conversionFunctions';\n import sourceFormatOptions from '../../../config/formats.config';\n+import ReactHtmlParser from 'react-html-parser';\n+import { FileOutlined } from '@ant-design/icons';\n \n \n const RawDataCardView = (props) => {\n-    const authorityService = useContext(AuthoritiesContext);\n+  const authorityService = useContext(AuthoritiesContext);\n \n-    const handleDetailViewNavigation = () => {\n-    }\n+  const handleDetailViewNavigation = () => {\n+  }\n \n-    const displayDocumentMetadata = () => {\n-    }\n+  const displayDocumentMetadata = () => {\n+  }\n \n-    // Custom CSS for source Format\n-    const sourceFormatStyle = (sourceFmt) => {\n-        let customStyles: CSSProperties = {\n-            display: 'inline-flex',\n-            alignItems: 'center',\n-            justifyContent: 'center',\n-            height: '20px',\n-            width: '20px',\n-            lineHeight: '20px',\n-            backgroundColor: sourceFormatOptions[sourceFmt].color,\n-            fontSize: sourceFmt === 'json' ? '8px' : '8.5px',\n-            borderRadius: '50%',\n-            textAlign: 'center',\n-            color: '#ffffff',\n-            verticalAlign: 'middle',\n-            marginRight: '8px'\n-        }\n-        return customStyles;\n+  // Custom CSS for source Format\n+  const sourceFormatStyle = (sourceFmt) => {\n+    let customStyles: CSSProperties = {\n+      display: 'inline-flex',\n+      alignItems: 'center',\n+      justifyContent: 'center',\n+      height: '20px',\n+      width: '20px',\n+      lineHeight: '20px',\n+      backgroundColor: sourceFormatOptions[sourceFmt].color,\n+      fontSize: sourceFmt === 'json' ? '8px' : '8.5px',\n+      borderRadius: '50%',\n+      textAlign: 'center',\n+      color: '#ffffff',\n+      verticalAlign: 'middle',\n+      marginRight: '8px'\n     }\n+    return customStyles;\n+  }\n \n-    const displayUri = (uri) => {\n-        return getLastChars(uri, 20, '...');\n-    }\n+  const displayUri = (uri) => {\n+    return formatCardUri(uri)\n+  }\n \n-    return (\n-        <div id=\"raw-data-card\" aria-label=\"raw-data-card\" className={styles.rawDataCard}>\n-            <Row gutter={24} type=\"flex\" >\n-                {props.data && props.data.length > 0 ? props.data.map((elem, index) => (\n-                    <Col key={index}>\n-                        <div>\n-                            <Card\n-                                className={styles.cardStyle}\n-                                size=\"small\"\n-                            >\n-                                <div className={styles.cardMetadataContainer}>\n-                                    <span className={styles.uriContainer} data-testid={elem.uri + '-URI'}>URI: <span className={styles.uri}>{displayUri(elem.uri)}</span></span>\n-                                    <span className={styles.cardIcons}>\n-                                        <span><Icon type=\"info-circle\" className={styles.infoIcon} theme=\"filled\" data-testid={elem.uri + '-InfoIcon'} /></span>\n-                                        <span className={styles.sourceFormat}\n-                                            style={sourceFormatStyle(elem.format)}\n-                                            data-testid={elem.uri + '-sourceFormat'}\n-                                        >{sourceFormatOptions[elem.format].label}</span>\n-                                        <MLTooltip title={'Show the raw source data'} placement=\"top\"\n-                                        ><i role=\"detail-link icon\" data-testid={elem.uri + '-detailViewIcon'}><FontAwesomeIcon icon={faExternalLinkAlt} className={styles.detailLinkIcon} size=\"lg\" /></i>\n-                                        </MLTooltip>\n-                                    </span>\n-                                </div>\n-                            </Card>\n-                        </div>\n-                    </Col>)) : <span></span>}\n-            </Row>\n+  const displaySnippet = (item) => {\n+    if (['json', 'xml', 'text'].includes(item.format)) {\n+      let str = '';\n+      item.matches.forEach(item => {\n+        item['match-text'].forEach(element => {\n+          if (typeof element === 'object') {\n+            str = str.concat('<b>').concat(element.highlight).concat('</b>').concat('...')\n+          } else {\n+            str = str.concat(element)\n+          }\n+        });\n+      })\n+      return <p>{ReactHtmlParser(str)}</p>;\n+    } else if ('binary' === item.format) {\n+      return (\n+        <div className={styles.binaryCard} >\n+          <FileOutlined style={{ fontSize: '24px', color: '#777' }} />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk5MDQ0Mg=="}, "originalCommit": {"oid": "009c4b1832d403d4d8a51e4d547125152d55b811"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzQzMDAyOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/pages/Browse.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDozNTo1OVrOHevddA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDo1NDoyOVrOHewDIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk5NjkxNg==", "bodyText": "Let's avoid keeping the previous code as a comment, if we have replaced it with new one, unless the comment is relevant to maintain the code piece and help other developers.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4665#discussion_r501996916", "createdAt": "2020-10-08T20:35:59Z", "author": {"login": "xnikhil08"}, "path": "marklogic-data-hub-central/ui/src/pages/Browse.tsx", "diffHunk": "@@ -132,13 +136,15 @@ const Browse: React.FC<Props> = ({ location }) => {\n     return () => {\n       componentIsMounted.current = false\n     }\n-  }, [])  \n+  }, [])\n \n   useEffect(() => {\n     if (entities.length && (!searchOptions.nextEntityType || searchOptions.nextEntityType === 'All Entities' || (searchOptions.entityTypeIds[0] == searchOptions.nextEntityType))) {\n-    getSearchResults(entities);\n-    }\n-  }, [searchOptions, searchOptions.zeroState === false && entities, user.error.type, database]);\n+      // if ((searchOptions.entityTypeIds[0] === searchOptions.nextEntityType) || (!searchOptions.entityTypeIds[0] && (searchOptions.nextEntityType === 'All Entities' || searchOptions.nextEntityType === 'All Data'))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "009c4b1832d403d4d8a51e4d547125152d55b811"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAwNjU2Mg==", "bodyText": "Removed.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4665#discussion_r502006562", "createdAt": "2020-10-08T20:54:29Z", "author": {"login": "timur-isangulov"}, "path": "marklogic-data-hub-central/ui/src/pages/Browse.tsx", "diffHunk": "@@ -132,13 +136,15 @@ const Browse: React.FC<Props> = ({ location }) => {\n     return () => {\n       componentIsMounted.current = false\n     }\n-  }, [])  \n+  }, [])\n \n   useEffect(() => {\n     if (entities.length && (!searchOptions.nextEntityType || searchOptions.nextEntityType === 'All Entities' || (searchOptions.entityTypeIds[0] == searchOptions.nextEntityType))) {\n-    getSearchResults(entities);\n-    }\n-  }, [searchOptions, searchOptions.zeroState === false && entities, user.error.type, database]);\n+      // if ((searchOptions.entityTypeIds[0] === searchOptions.nextEntityType) || (!searchOptions.entityTypeIds[0] && (searchOptions.nextEntityType === 'All Entities' || searchOptions.nextEntityType === 'All Data'))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk5NjkxNg=="}, "originalCommit": {"oid": "009c4b1832d403d4d8a51e4d547125152d55b811"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzQ0NzA5OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/components/raw-data/raw-data-card-view/raw-data-card-view.test.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDo0MTowOVrOHevnwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDo1NDozOFrOHewDZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk5OTU1Mg==", "bodyText": "This line seems redundant because the next line, where we are trying to access the 'textContent' for the same element, does the needful and will definitely fail if the element is not available in the document.\nThe same goes for the lines 47 and 50.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4665#discussion_r501999552", "createdAt": "2020-10-08T20:41:09Z", "author": {"login": "xnikhil08"}, "path": "marklogic-data-hub-central/ui/src/components/raw-data/raw-data-card-view/raw-data-card-view.test.tsx", "diffHunk": "@@ -28,5 +29,30 @@ describe(\"Raw data card view component\", () => {\n         expect(getByTestId('/Customer/Cust3.json-InfoIcon')).toBeInTheDocument();\n         expect(getByTestId('/Customer/Cust3.json-sourceFormat')).toBeInTheDocument();\n         expect(getByTestId('/Customer/Cust3.json-detailViewIcon')).toBeInTheDocument();\n+\n+        //verify tooltips \n+        fireEvent.mouseOver(getByTestId('/Customer/Cust1.json-URI'))\n+        await waitForElement(() => getByText('/Customer/Cust1.json'));\n+\n+        fireEvent.mouseOver(getByTestId('/Customer/Cust1.json-InfoIcon'))\n+        await waitForElement(() => getByText('View info'));\n+\n+        fireEvent.mouseOver(getByTestId('/Customer/Cust1.json-detailViewIcon'))\n+        await waitForElement(() => getByText('Detail view'));\n+\n+        //verify snippet content for json/xml/text docs\n+        expect(getByTestId('/Customer/Cust1.json-snippet')).toBeInTheDocument();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "009c4b1832d403d4d8a51e4d547125152d55b811"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAwNjYzMQ==", "bodyText": "Fixed. Thanks.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4665#discussion_r502006631", "createdAt": "2020-10-08T20:54:38Z", "author": {"login": "timur-isangulov"}, "path": "marklogic-data-hub-central/ui/src/components/raw-data/raw-data-card-view/raw-data-card-view.test.tsx", "diffHunk": "@@ -28,5 +29,30 @@ describe(\"Raw data card view component\", () => {\n         expect(getByTestId('/Customer/Cust3.json-InfoIcon')).toBeInTheDocument();\n         expect(getByTestId('/Customer/Cust3.json-sourceFormat')).toBeInTheDocument();\n         expect(getByTestId('/Customer/Cust3.json-detailViewIcon')).toBeInTheDocument();\n+\n+        //verify tooltips \n+        fireEvent.mouseOver(getByTestId('/Customer/Cust1.json-URI'))\n+        await waitForElement(() => getByText('/Customer/Cust1.json'));\n+\n+        fireEvent.mouseOver(getByTestId('/Customer/Cust1.json-InfoIcon'))\n+        await waitForElement(() => getByText('View info'));\n+\n+        fireEvent.mouseOver(getByTestId('/Customer/Cust1.json-detailViewIcon'))\n+        await waitForElement(() => getByText('Detail view'));\n+\n+        //verify snippet content for json/xml/text docs\n+        expect(getByTestId('/Customer/Cust1.json-snippet')).toBeInTheDocument();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk5OTU1Mg=="}, "originalCommit": {"oid": "009c4b1832d403d4d8a51e4d547125152d55b811"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3266, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}