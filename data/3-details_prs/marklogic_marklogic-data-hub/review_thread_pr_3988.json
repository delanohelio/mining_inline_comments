{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxOTY3ODIz", "number": 3988, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzo0OTo1MFrOD_BxPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzo0OTo1MFrOD_BxPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDE1ODcxOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/impl/ArtifactManagerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzo0OTo1MFrOGZfOTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzo0OTo1MFrOGZfOTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3OTE0OA==", "bodyText": "We probably need to remove this.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3988#discussion_r429379148", "createdAt": "2020-05-22T17:49:50Z", "author": {"login": "akshaysonvane"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/impl/ArtifactManagerImpl.java", "diffHunk": "@@ -90,12 +97,70 @@ protected ArtifactService getArtifactService() {\n \n     public ArtifactTypeInfo getArtifactTypeInfo(String artifactType) {\n         ArtifactTypeInfo artifactTypeInfo = null;\n-        for (ArtifactTypeInfo typeInfo: getArtifactTypeInfoList()) {\n+        for (ArtifactTypeInfo typeInfo : getArtifactTypeInfoList()) {\n             if (typeInfo.getType().equals(artifactType)) {\n                 artifactTypeInfo = typeInfo;\n                 break;\n             }\n         }\n         return artifactTypeInfo;\n     }\n+\n+    public void writeProjectArtifactsAsZip(OutputStream outputStream) {\n+        ArrayNode artifacts = (ArrayNode) ArtifactService.on(hubClient.getStagingClient()).getArtifactsWithProjectPaths();\n+\n+        final ZipOutputStream zipOutputStream = new ZipOutputStream(outputStream);\n+        final ObjectWriter prettyWriter = buildPrettyWriter();\n+\n+        try {\n+            artifacts.forEach(artifact -> {\n+                ZipEntry entry = new ZipEntry(artifact.get(\"path\").asText());\n+                try {\n+                    zipOutputStream.putNextEntry(entry);\n+                    if (artifact.has(\"xml\")) {\n+                        byte[] bytes = artifact.get(\"xml\").asText().getBytes();\n+                        zipOutputStream.write(bytes, 0, bytes.length);\n+                    } else {\n+                        byte[] bytes = prettyWriter.writeValueAsString(artifact.get(\"json\")).getBytes();\n+                        System.out.println(\"JSON: \" + new String(bytes));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40a14e3f31dc21b14c20dea745ada9acfdf70bc6"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4151, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}