{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MDA3NzU1", "number": 4194, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODoyMjoxOVrOENAaVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNDozMDo1N1rOENTEyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDczNjg0OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/steps/StepController.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODoyMjoxOVrOGvcu5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMDo0Njo0MVrOGvhMxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwNzAxMg==", "bodyText": "Pinging @bsrikan and @srinathgit  about this - the issue with our use of \"name\" on a step document will impact an entity \"name\" property with a range index on it (flow documents do the same).\nI am thinking we could kill two birds with one stone here - I think it's very common to need the ID and name from a set of documents, and thus it's common to add range indexes to those. \"stepId\" is a good name, but \"name\" of course is not for a range index.\nHow about if - as part of migration for 5.3 - we use \"stepName\" instead of \"name\" in step documents and add range indexes for stepId and stepName to the staging and final databases? I think that's a good use of indexes. We'd then just do a new DS endpoint that retrieves the ID and name properties for all steps (it looks like \"false\" is always the 3rd parameter, so that's not really needed?).", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4194#discussion_r452407012", "createdAt": "2020-07-09T18:22:19Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/steps/StepController.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.marklogic.hub.central.controllers.steps;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.hub.central.controllers.BaseController;\n+import com.marklogic.hub.dataservices.ArtifactService;\n+import io.swagger.annotations.ApiOperation;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.annotation.Secured;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+@Controller\n+@RequestMapping(\"/api/steps\")\n+public class StepController extends BaseController {\n+    @RequestMapping(method = RequestMethod.GET)\n+    @ApiOperation(value = \"Get all steps grouped by type\", response = Steps.class)\n+    @Secured(\"ROLE_readFlow\")\n+    public ResponseEntity<JsonNode> get() {\n+        ObjectNode response = new ObjectMapper().createObjectNode();\n+        ArtifactService service = newArtifactService();\n+        response.set(\"ingestionSteps\", service.getList(\"ingestion\", Stream.of(\"stepId\", \"name\"), false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "127a4c9221a8651b83569357f5b27f2b6b7670e9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ3MTA0MA==", "bodyText": "@rjrudin ,\nI am ok with changing \"name\" to \"stepName\" and having range index on \"stepName\" and \"stepId\". In addition to flow migration, we will also have to change it back to \"name\" in getFullFlow() method  (in core.sjs)", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4194#discussion_r452471040", "createdAt": "2020-07-09T20:28:05Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/steps/StepController.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.marklogic.hub.central.controllers.steps;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.hub.central.controllers.BaseController;\n+import com.marklogic.hub.dataservices.ArtifactService;\n+import io.swagger.annotations.ApiOperation;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.annotation.Secured;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+@Controller\n+@RequestMapping(\"/api/steps\")\n+public class StepController extends BaseController {\n+    @RequestMapping(method = RequestMethod.GET)\n+    @ApiOperation(value = \"Get all steps grouped by type\", response = Steps.class)\n+    @Secured(\"ROLE_readFlow\")\n+    public ResponseEntity<JsonNode> get() {\n+        ObjectNode response = new ObjectMapper().createObjectNode();\n+        ArtifactService service = newArtifactService();\n+        response.set(\"ingestionSteps\", service.getList(\"ingestion\", Stream.of(\"stepId\", \"name\"), false));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwNzAxMg=="}, "originalCommit": {"oid": "127a4c9221a8651b83569357f5b27f2b6b7670e9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ3Nzc0MA==", "bodyText": "Is this something to cover in this PR?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4194#discussion_r452477740", "createdAt": "2020-07-09T20:41:41Z", "author": {"login": "ryanjdew"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/steps/StepController.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.marklogic.hub.central.controllers.steps;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.hub.central.controllers.BaseController;\n+import com.marklogic.hub.dataservices.ArtifactService;\n+import io.swagger.annotations.ApiOperation;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.annotation.Secured;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+@Controller\n+@RequestMapping(\"/api/steps\")\n+public class StepController extends BaseController {\n+    @RequestMapping(method = RequestMethod.GET)\n+    @ApiOperation(value = \"Get all steps grouped by type\", response = Steps.class)\n+    @Secured(\"ROLE_readFlow\")\n+    public ResponseEntity<JsonNode> get() {\n+        ObjectNode response = new ObjectMapper().createObjectNode();\n+        ArtifactService service = newArtifactService();\n+        response.set(\"ingestionSteps\", service.getList(\"ingestion\", Stream.of(\"stepId\", \"name\"), false));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwNzAxMg=="}, "originalCommit": {"oid": "127a4c9221a8651b83569357f5b27f2b6b7670e9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4MDE5OA==", "bodyText": "I think it would be a separate JIRA ticket so we could fully think through it. It does seem worthwhile to change \"name\" to \"stepName\" as part of 5.3.0.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4194#discussion_r452480198", "createdAt": "2020-07-09T20:46:41Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/steps/StepController.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.marklogic.hub.central.controllers.steps;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.hub.central.controllers.BaseController;\n+import com.marklogic.hub.dataservices.ArtifactService;\n+import io.swagger.annotations.ApiOperation;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.annotation.Secured;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+@Controller\n+@RequestMapping(\"/api/steps\")\n+public class StepController extends BaseController {\n+    @RequestMapping(method = RequestMethod.GET)\n+    @ApiOperation(value = \"Get all steps grouped by type\", response = Steps.class)\n+    @Secured(\"ROLE_readFlow\")\n+    public ResponseEntity<JsonNode> get() {\n+        ObjectNode response = new ObjectMapper().createObjectNode();\n+        ArtifactService service = newArtifactService();\n+        response.set(\"ingestionSteps\", service.getList(\"ingestion\", Stream.of(\"stepId\", \"name\"), false));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwNzAxMg=="}, "originalCommit": {"oid": "127a4c9221a8651b83569357f5b27f2b6b7670e9"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDkyNjMzOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/dataservices/ArtifactService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxOToxOTozNFrOGvelGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMTozNTo1NlrOGvipOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQzNzI3Mg==", "bodyText": "Rather than changing the getList() method here, will it be easier to add a DS endpoint to StepService (something like getAllSteps.sjs), where we can get all ingestion, mapping (custom in the future) steps and return them ?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4194#discussion_r452437272", "createdAt": "2020-07-09T19:19:34Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/dataservices/ArtifactService.java", "diffHunk": "@@ -301,9 +302,11 @@ private ArtifactServiceImpl(DatabaseClient dbClient, JSONWriteHandle servDecl) {\n    * Invokes the getList operation on the database server\n    *\n    * @param artifactType\tprovides input\n+   * @param propertiesToReturn\tList of properties to return. Default behavior returns all properties\n+   * @param groupByEntityType\tIf true, artifacts are grouped by Entity Type; default varies by artifact. Artifact types with entity type relationships default to true.\n    * @return\tas output\n    */\n-    com.fasterxml.jackson.databind.JsonNode getList(String artifactType);\n+    com.fasterxml.jackson.databind.JsonNode getList(String artifactType, Stream<String> propertiesToReturn, Boolean groupByEntityType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "127a4c9221a8651b83569357f5b27f2b6b7670e9"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ0MTM5MQ==", "bodyText": "I agree with that - I think the artifact library is useful for reuse below the service level, but at the service level, life is generally easier with lots of fine-grained endpoints as opposed to fewer coarse-grained ones.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4194#discussion_r452441391", "createdAt": "2020-07-09T19:27:37Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/dataservices/ArtifactService.java", "diffHunk": "@@ -301,9 +302,11 @@ private ArtifactServiceImpl(DatabaseClient dbClient, JSONWriteHandle servDecl) {\n    * Invokes the getList operation on the database server\n    *\n    * @param artifactType\tprovides input\n+   * @param propertiesToReturn\tList of properties to return. Default behavior returns all properties\n+   * @param groupByEntityType\tIf true, artifacts are grouped by Entity Type; default varies by artifact. Artifact types with entity type relationships default to true.\n    * @return\tas output\n    */\n-    com.fasterxml.jackson.databind.JsonNode getList(String artifactType);\n+    com.fasterxml.jackson.databind.JsonNode getList(String artifactType, Stream<String> propertiesToReturn, Boolean groupByEntityType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQzNzI3Mg=="}, "originalCommit": {"oid": "127a4c9221a8651b83569357f5b27f2b6b7670e9"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMzg2Ng==", "bodyText": "Moved to separate DS endpoint.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4194#discussion_r452503866", "createdAt": "2020-07-09T21:35:56Z", "author": {"login": "ryanjdew"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/dataservices/ArtifactService.java", "diffHunk": "@@ -301,9 +302,11 @@ private ArtifactServiceImpl(DatabaseClient dbClient, JSONWriteHandle servDecl) {\n    * Invokes the getList operation on the database server\n    *\n    * @param artifactType\tprovides input\n+   * @param propertiesToReturn\tList of properties to return. Default behavior returns all properties\n+   * @param groupByEntityType\tIf true, artifacts are grouped by Entity Type; default varies by artifact. Artifact types with entity type relationships default to true.\n    * @return\tas output\n    */\n-    com.fasterxml.jackson.databind.JsonNode getList(String artifactType);\n+    com.fasterxml.jackson.databind.JsonNode getList(String artifactType, Stream<String> propertiesToReturn, Boolean groupByEntityType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQzNzI3Mg=="}, "originalCommit": {"oid": "127a4c9221a8651b83569357f5b27f2b6b7670e9"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzc3OTE5OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/artifacts/core.sjs", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNDoyNjo0OFrOGv5feg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNDoyNjo0OFrOGv5feg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg3ODIwMg==", "bodyText": "I think \"clean\" typically means - \"remove bad/malformed stuff from it\". But the intent here is to only return certain top-level properties of each step. I think \"removeAllPropertiesExcept\" would be a better function name.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4194#discussion_r452878202", "createdAt": "2020-07-10T14:26:48Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/artifacts/core.sjs", "diffHunk": "@@ -320,6 +320,17 @@ function convertStepReferenceToInlineStep(stepId) {\n   return newFlowStep;\n }\n \n+function cleanArtifact(artifact, propertiesToReturn) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aab7f1f0956deb3aa4622e4aa62f673ebe8c6365"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzc5NDY3OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/step/getStepsByType.sjs", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNDozMDo1N1rOGv5pXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNDozMDo1N1rOGv5pXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg4MDczMg==", "bodyText": "Because this is the only client that needs to only return certain properties for each step, I'd rather that logic be in here as opposed to being in artifacts/core.sjs. Once we have a second use case for this logic, we can consider how to reuse the logic.\nAlso, since this endpoint is only used for returning stepId and name, I think that logic should go in here as well. If we later have a use case for getting all properties of steps or a different set, we can consider how to address it.\nIn short, I'd postpone adding flexibility until we need it, because that flexibility comes with a cost.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4194#discussion_r452880732", "createdAt": "2020-07-10T14:30:57Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/step/getStepsByType.sjs", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ Copyright (c) 2020 MarkLogic Corporation\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+'use strict';\n+\n+const Artifacts = require('/data-hub/5/artifacts/core.sjs');\n+\n+var propertiesToReturn;\n+\n+const response = {};\n+const stepTypes = ['ingestion', 'mapping'];\n+\n+for (const stepType of stepTypes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aab7f1f0956deb3aa4622e4aa62f673ebe8c6365"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3967, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}