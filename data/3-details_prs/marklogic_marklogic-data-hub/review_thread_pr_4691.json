{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNzA2NTY0", "number": 4691, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzo0NToxNFrOEsJK9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxOTozMjoxNVrOEsLIFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzIzMDYxOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/entities/entity-search-lib.sjs", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzo0NToxNFrOHfTPkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzo0NToxNFrOHfTPkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4MzE4NQ==", "bodyText": "While we don't want to change the labels yet in the UI, I think we should start using accurate names in the code. We can't change the names in the data, but for in-memory data and variables, we can use correct names. So:\n\nlastProcessedByFlow\nlastProcessedByStep\nlastProcessedDateTime\n\nThat should go into the Java class that the controller uses to generate Swagger too. The UI team will see them and at least understand what the values represent.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4691#discussion_r502583185", "createdAt": "2020-10-09T17:45:14Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/entities/entity-search-lib.sjs", "diffHunk": "@@ -482,8 +482,23 @@ function handleDuplicateSources (propToValidate, arrayWithDuplicates) {\n   return deDupedArray;\n }\n \n+function addDocumentMetadataToSearchResults(searchResponse) {\n+  searchResponse.results.forEach(result => {\n+    let metadata = {};\n+    let documentMetadata = xdmp.documentGetMetadata(result.uri);\n+    if(documentMetadata) {\n+      metadata[\"Flow\"] = documentMetadata.datahubCreatedInFlow ? documentMetadata.datahubCreatedInFlow : \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d0e361d55129f846664652200fcc40ef4f713a9"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzIzNTczOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/entities/entity-search-lib.sjs", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzo0NzowMVrOHfTS2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzo0NzowMVrOHfTS2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4NDAyNA==", "bodyText": "To make it clear that this is a hub-specific addition to the search result, let's call this \"hubMetadata\". Otherwise, a developer could see this and think it's provided by the Search API, and specifically that it's the metadata keys on a document.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4691#discussion_r502584024", "createdAt": "2020-10-09T17:47:01Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/entities/entity-search-lib.sjs", "diffHunk": "@@ -482,8 +482,23 @@ function handleDuplicateSources (propToValidate, arrayWithDuplicates) {\n   return deDupedArray;\n }\n \n+function addDocumentMetadataToSearchResults(searchResponse) {\n+  searchResponse.results.forEach(result => {\n+    let metadata = {};\n+    let documentMetadata = xdmp.documentGetMetadata(result.uri);\n+    if(documentMetadata) {\n+      metadata[\"Flow\"] = documentMetadata.datahubCreatedInFlow ? documentMetadata.datahubCreatedInFlow : \"\";\n+      metadata[\"Step\"] = documentMetadata.datahubCreatedByStep ? documentMetadata.datahubCreatedByStep : \"\";\n+      metadata[\"createdOn\"] = documentMetadata.datahubCreatedOn ? documentMetadata.datahubCreatedOn : \"\";\n+      metadata[\"sources\"] = getEntitySources(result.uri);\n+    }\n+    result[\"metadata\"] = metadata;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d0e361d55129f846664652200fcc40ef4f713a9"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzIzODU0OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/entities/search/addDocumentMetadataToSearchResults.sjs", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzo0ODowNlrOHfTUvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzo0ODowNlrOHfTUvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4NDUwOQ==", "bodyText": "Why empty string instead of not setting the property at all? This is often a problematic approach for dates and dateTimes, where \"\" is not a valid value. I think it's best to just not include the property at all - that makes it crystal clear that it doesn't exist for this record.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4691#discussion_r502584509", "createdAt": "2020-10-09T17:48:06Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/entities/search/addDocumentMetadataToSearchResults.sjs", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ Copyright (c) 2020 MarkLogic Corporation\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+'use strict';\n+declareUpdate();\n+const entitySearchLib = require(\"/data-hub/5/entities/entity-search-lib.sjs\");\n+const test = require(\"/test/test-helper.xqy\");\n+\n+function verifyMetadataForDocumentWithAllMetadata() {\n+  let response = {\n+    \"snippet-format\": \"snippet\",\n+    \"total\": 1,\n+    \"results\": [\n+      {\n+        \"index\": 1,\n+        \"uri\": \"/content/sally.json\",\n+      }\n+    ]\n+  };\n+\n+  let expectedSources = [{\"name\":\"loadData\"}, {\"name\":\"someOtherName\"}];\n+\n+  xdmp.invokeFunction(function() {\n+    declareUpdate();\n+    xdmp.documentSetMetadata(\"/content/sally.json\",\n+        {\n+          \"datahubCreatedByStep\": \"map-step\",\n+          \"datahubCreatedInFlow\": \"CurateCustomerJSON\",\n+          \"datahubCreatedOn\": \"2020-10-08T15:14:28.772612-07:00\"\n+        });\n+  });\n+  entitySearchLib.addDocumentMetadataToSearchResults(response);\n+  return[\n+    test.assertEqual(\"CurateCustomerJSON\", response.results[0].metadata.Flow),\n+    test.assertEqual(\"map-step\", response.results[0].metadata.Step),\n+    test.assertEqual(\"2020-10-08T15:14:28.772612-07:00\", response.results[0].metadata.createdOn),\n+    test.assertEqual(expectedSources, response.results[0].metadata.sources)\n+  ];\n+}\n+\n+function verifyMetadataForDocumentWithoutMetadata() {\n+  let response = {\n+    \"snippet-format\": \"snippet\",\n+    \"total\": 1,\n+    \"results\": [\n+      {\n+        \"index\": 1,\n+        \"uri\": \"/content/jane.json\",\n+      }\n+    ]\n+  };\n+  entitySearchLib.addDocumentMetadataToSearchResults(response);\n+  return[\n+      test.assertEqual(0, Object.keys(response.results[0].metadata).length)\n+  ];\n+}\n+\n+function verifyMetadataForDocumentWithPartialMetadata() {\n+  let response = {\n+    \"snippet-format\": \"snippet\",\n+    \"total\": 1,\n+    \"results\": [\n+      {\n+        \"index\": 1,\n+        \"uri\": \"/content/tim.json\",\n+      }\n+    ]\n+  };\n+\n+  xdmp.invokeFunction(function() {\n+    declareUpdate();\n+    xdmp.documentSetMetadata(\"/content/tim.json\",\n+        {\n+          \"datahubCreatedByStep\": \"map-step\"\n+        });\n+  });\n+  entitySearchLib.addDocumentMetadataToSearchResults(response);\n+  return[\n+    test.assertEqual(\"\", response.results[0].metadata.Flow),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d0e361d55129f846664652200fcc40ef4f713a9"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzU0OTM1OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/EntitySearchController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxOTozMTozOVrOHfWSKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxOTozMTozOVrOHfWSKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjYzMzAwMw==", "bodyText": "Let's call this \"HubMetadata\", as it's not all specific to when the document was last processed - for example, the sources are not specific to that concept.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4691#discussion_r502633003", "createdAt": "2020-10-09T19:31:39Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/controllers/EntitySearchController.java", "diffHunk": "@@ -212,4 +212,15 @@ private EntitySearchService getEntitySearchService(String database) {\n \n     public static class SavedQueries extends ArrayList<SavedQuery> {\n     }\n+\n+    public static class LastProcessedMetadata {\n+        public String lastProcessedByFlow;\n+        public String lastProcessedByStep;\n+        public String lastProcessedDateTime;\n+        public ArrayList<DocumentSourceMetadata> sources;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9bab2dcaedbf513832882b14b94cab5c61ee377"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzU1MDk0OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/entities/entity-search-lib.sjs", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxOTozMjoxNVrOHfWTFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxOTozMjoxNVrOHfWTFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjYzMzIzNg==", "bodyText": "Can you put this in alphabetical order with the other functions? Makes life easier for future developers to find functions.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4691#discussion_r502633236", "createdAt": "2020-10-09T19:32:15Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/entities/entity-search-lib.sjs", "diffHunk": "@@ -482,8 +482,23 @@ function handleDuplicateSources (propToValidate, arrayWithDuplicates) {\n   return deDupedArray;\n }\n \n+function addDocumentMetadataToSearchResults(searchResponse) {\n+  searchResponse.results.forEach(result => {\n+    let hubMetadata = {};\n+    let documentMetadata = xdmp.documentGetMetadata(result.uri);\n+    if(documentMetadata) {\n+      hubMetadata[\"lastProcessedByFlow\"] = documentMetadata.datahubCreatedInFlow;\n+      hubMetadata[\"lastProcessedByStep\"] = documentMetadata.datahubCreatedByStep;\n+      hubMetadata[\"lastProcessedDateTime\"] = documentMetadata.datahubCreatedOn;\n+      hubMetadata[\"sources\"] = getEntitySources(result.uri);\n+    }\n+    result[\"hubMetadata\"] = hubMetadata;\n+  });\n+}\n+\n module.exports = {\n   addPropertiesToSearchResponse,\n   buildPropertyMetadata: buildPropertyMetadata,\n-  getEntityInstance: getEntityInstance\n+  getEntityInstance: getEntityInstance,\n+  addDocumentMetadataToSearchResults", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9bab2dcaedbf513832882b14b94cab5c61ee377"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3283, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}