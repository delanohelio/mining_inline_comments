{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5NTIwMjQ1", "number": 4319, "title": "DHFPROD-5265:Create step via Gradle", "bodyText": "Description\nCreate step via Gradle\nChecklist:\n- Note: do not change the below\n\n\nOwner:\n\n\n JIRA_ID included in all the commit messages\n\n\n PR title is in the format JIRA_ID:Title\n\n\n Rebase the branch with upstream\n\n\n Squashed all commits into a single commit\n\n\n Added Tests\n\n\nReviewer:\n\n\n Reviewed Tests", "createdAt": "2020-07-30T19:17:38Z", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4319", "merged": true, "mergeCommit": {"oid": "191e90480ee6f52aa176ff829b1e7b05fbb21127"}, "closed": true, "closedAt": "2020-07-31T21:36:28Z", "author": {"login": "srinathgit"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc6FSQEgFqTQ1ODcwNjc5MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc6ZK_JgFqTQ1OTQwMTk4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NzA2Nzkx", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4319#pullrequestreview-458706791", "createdAt": "2020-07-30T19:49:01Z", "commit": {"oid": "4415448dc457759f3a7967b45bba8eb32001c045"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxOTo0OTowMVrOG5xdeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMDowMTozN1rOG5x3eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIzMjM3Nw==", "bodyText": "Since this is only needed in the createStepFile method, don't declare it as a class variable - just instantiate it when you need it, as you know you have a HubConfig that you can use to construct it.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4319#discussion_r463232377", "createdAt": "2020-07-30T19:49:01Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/impl/ScaffoldingImpl.java", "diffHunk": "@@ -57,6 +62,9 @@\n     @Autowired\n     private ScaffoldingValidator validator;\n \n+    @Autowired\n+    private StepDefinitionManager stepDefinitionManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4415448dc457759f3a7967b45bba8eb32001c045"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIzNTMyMg==", "bodyText": "I like this try/catch, but I think we need separate ones for writing the stepDef and then the step - we should tell Pari exactly which operation failed.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4319#discussion_r463235322", "createdAt": "2020-07-30T19:54:33Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/impl/ScaffoldingImpl.java", "diffHunk": "@@ -77,44 +86,86 @@ public static String getAbsolutePath(String first, String... more) {\n     }\n \n     /**\n-     * Create a step file  based on the given name and type.\n+     * Create a step file  based on the given stepName, stepType, entityType (for non ingestion steps),\n+     *  and stepDefName.\n      *\n-     * @param name\n-     * @param type\n+     * @param stepName\n+     * @param stepType\n+     * @param stepDefName\n+     * @param entityType\n      * @return a Pair with a File representing the created file, and a String representing an optional message that,\n      * if not null, should likely be presented to the caller\n      */\n-    public Pair<File, String> createStepFile(String name, String type) {\n-        StepDefinition.StepDefinitionType stepType = StepDefinition.StepDefinitionType.getStepDefinitionType(type);\n-        Assert.notNull(stepType, \"Unrecognized step type: \" + type);\n-        Assert.isTrue(stepType.equals(StepDefinition.StepDefinitionType.INGESTION) || stepType.equals(StepDefinition.StepDefinitionType.MAPPING),\n-            \"Can only create a step of type 'ingestion' or 'mapping'\");\n-\n-        File stepFile = hubConfig.getHubProject().getStepFile(stepType, name);\n+    public Pair<File, String> createStepFile(String stepName, String stepType, String stepDefName, String entityType) {\n+        StepDefinitionType stepDefType = StepDefinitionType.getStepDefinitionType(stepType);\n+        Assert.notNull(stepDefType, \"Unrecognized step type: \" + stepType);\n+        Assert.isTrue(stepDefType.equals(StepDefinitionType.INGESTION) || stepDefType.equals(StepDefinitionType.MAPPING) ||\n+                stepDefType.equals(StepDefinitionType.CUSTOM),\n+            \"Can only create a step of type 'ingestion', 'mapping' or 'custom'\");\n+\n+\n+        StepDefinition stepDefinition = null;\n+        JsonNode step;\n+        StringBuilder messageBuilder = new StringBuilder();\n+        File stepFile = hubConfig.getHubProject().getStepFile(stepDefType, stepName);\n         if (stepFile.exists()) {\n             throw new IllegalArgumentException(\"Cannot create step; a step file already exists at: \" + stepFile.getAbsolutePath() + \". Please choose a different name for your step.\");\n         }\n         stepFile.getParentFile().mkdirs();\n \n         ObjectMapper objectMapper = new ObjectMapper();\n-        ObjectNode step = objectMapper.createObjectNode();\n-        step.put(\"name\", name);\n-        step.put(\"description\", \"\");\n-\n-        String message = null;\n-        if (StepDefinition.StepDefinitionType.INGESTION.equals(stepType)) {\n-            step.put(\"sourceFormat\", \"json\");\n-            step.put(\"targetFormat\", \"json\");\n-        } else {\n-            step.put(\"targetEntityType\", \"http://example.org/EntityName-1.0.0/EntityName\");\n-            step.put(\"selectedSource\", \"query\");\n-            step.put(\"sourceQuery\", \"cts.collectionQuery('changeme')\");\n-            message = \"The mapping step file will need to be modified before usage, as it has example values for targetEntityType and sourceQuery.\";\n+        ObjectNode stepPayLoad = objectMapper.createObjectNode();\n+        stepPayLoad.put(\"name\", stepName);\n+        stepPayLoad.put(\"description\", \"\");\n+        stepPayLoad.put(\"stepDefinitionType\", stepType);\n+        if(stepDefName != null) {\n+            stepPayLoad.put(\"stepDefinitionName\", stepDefName);\n+        }\n+        else {\n+            if(StepDefinitionType.CUSTOM.equals(stepDefType)){\n+                stepDefName = stepName;\n+                stepPayLoad.put(\"stepDefinitionName\", stepDefName);\n+            }\n+        }\n+\n+        if (StepDefinitionType.INGESTION.equals(stepDefType)) {\n+            stepPayLoad.put(\"sourceFormat\", \"json\");\n+            stepPayLoad.put(\"targetFormat\", \"json\");\n+        }\n+        else {\n+            stepPayLoad.put(\"selectedSource\", \"query\");\n+            stepPayLoad.put(\"sourceQuery\", \"cts.collectionQuery('changeme')\");\n+            if(entityType != null){\n+                stepPayLoad.put(\"entityType\", entityType);\n+            }\n+        }\n+\n+        if (stepDefName != null && stepDefinitionManager.getStepDefinition(stepDefName, StepDefinitionType.getStepDefinitionType(stepType)) == null) {\n+            stepDefinition = StepDefinition.create(stepDefName, StepDefinitionType.getStepDefinitionType(stepType));\n+            createCustomModule(stepDefName, stepType);\n+            stepDefinition.setModulePath(\"/custom-modules/\" + stepType.toLowerCase() + \"/\" + stepDefName + \"/main.sjs\");\n+            stepDefinitionManager.saveStepDefinition(stepDefinition);\n+            messageBuilder.append(String.format(\"Created Step definition '%s' of type '%s'.\", stepName, stepType));\n+            messageBuilder.append(\"The module file for the step definition is available at \"\n+                + \"/custom-modules/\" + stepType.toLowerCase() + \"/\" + stepDefName + \"/main.sjs\" + \". Please run mlWatch while you edit the custom module\\n\");\n+        }\n+        messageBuilder.append(\"Created a step '\" + stepName + \"' of type '\" + stepType + \"' with default properties. It will need to be modified before usage.\");\n+\n+        try {\n+            DatabaseClient stagingClient = hubConfig.newHubClient().getStagingClient();\n+            if(stepDefinition != null) {\n+                ArtifactService artifactService = ArtifactService.on(stagingClient);\n+                artifactService.setArtifact(\"stepDefinition\", stepDefName, objectMapper.valueToTree(stepDefinition));\n+            }\n+            StepService stepService = StepService.on(stagingClient);\n+            step = stepService.saveStep(stepType, stepPayLoad);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Unable to write step/step-definition to database; cause: \" + e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4415448dc457759f3a7967b45bba8eb32001c045"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIzNTQ4Nw==", "bodyText": "Little nit - do \"step\", not \"Step\", for consistency.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4319#discussion_r463235487", "createdAt": "2020-07-30T19:54:52Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/impl/ScaffoldingImpl.java", "diffHunk": "@@ -77,44 +86,86 @@ public static String getAbsolutePath(String first, String... more) {\n     }\n \n     /**\n-     * Create a step file  based on the given name and type.\n+     * Create a step file  based on the given stepName, stepType, entityType (for non ingestion steps),\n+     *  and stepDefName.\n      *\n-     * @param name\n-     * @param type\n+     * @param stepName\n+     * @param stepType\n+     * @param stepDefName\n+     * @param entityType\n      * @return a Pair with a File representing the created file, and a String representing an optional message that,\n      * if not null, should likely be presented to the caller\n      */\n-    public Pair<File, String> createStepFile(String name, String type) {\n-        StepDefinition.StepDefinitionType stepType = StepDefinition.StepDefinitionType.getStepDefinitionType(type);\n-        Assert.notNull(stepType, \"Unrecognized step type: \" + type);\n-        Assert.isTrue(stepType.equals(StepDefinition.StepDefinitionType.INGESTION) || stepType.equals(StepDefinition.StepDefinitionType.MAPPING),\n-            \"Can only create a step of type 'ingestion' or 'mapping'\");\n-\n-        File stepFile = hubConfig.getHubProject().getStepFile(stepType, name);\n+    public Pair<File, String> createStepFile(String stepName, String stepType, String stepDefName, String entityType) {\n+        StepDefinitionType stepDefType = StepDefinitionType.getStepDefinitionType(stepType);\n+        Assert.notNull(stepDefType, \"Unrecognized step type: \" + stepType);\n+        Assert.isTrue(stepDefType.equals(StepDefinitionType.INGESTION) || stepDefType.equals(StepDefinitionType.MAPPING) ||\n+                stepDefType.equals(StepDefinitionType.CUSTOM),\n+            \"Can only create a step of type 'ingestion', 'mapping' or 'custom'\");\n+\n+\n+        StepDefinition stepDefinition = null;\n+        JsonNode step;\n+        StringBuilder messageBuilder = new StringBuilder();\n+        File stepFile = hubConfig.getHubProject().getStepFile(stepDefType, stepName);\n         if (stepFile.exists()) {\n             throw new IllegalArgumentException(\"Cannot create step; a step file already exists at: \" + stepFile.getAbsolutePath() + \". Please choose a different name for your step.\");\n         }\n         stepFile.getParentFile().mkdirs();\n \n         ObjectMapper objectMapper = new ObjectMapper();\n-        ObjectNode step = objectMapper.createObjectNode();\n-        step.put(\"name\", name);\n-        step.put(\"description\", \"\");\n-\n-        String message = null;\n-        if (StepDefinition.StepDefinitionType.INGESTION.equals(stepType)) {\n-            step.put(\"sourceFormat\", \"json\");\n-            step.put(\"targetFormat\", \"json\");\n-        } else {\n-            step.put(\"targetEntityType\", \"http://example.org/EntityName-1.0.0/EntityName\");\n-            step.put(\"selectedSource\", \"query\");\n-            step.put(\"sourceQuery\", \"cts.collectionQuery('changeme')\");\n-            message = \"The mapping step file will need to be modified before usage, as it has example values for targetEntityType and sourceQuery.\";\n+        ObjectNode stepPayLoad = objectMapper.createObjectNode();\n+        stepPayLoad.put(\"name\", stepName);\n+        stepPayLoad.put(\"description\", \"\");\n+        stepPayLoad.put(\"stepDefinitionType\", stepType);\n+        if(stepDefName != null) {\n+            stepPayLoad.put(\"stepDefinitionName\", stepDefName);\n+        }\n+        else {\n+            if(StepDefinitionType.CUSTOM.equals(stepDefType)){\n+                stepDefName = stepName;\n+                stepPayLoad.put(\"stepDefinitionName\", stepDefName);\n+            }\n+        }\n+\n+        if (StepDefinitionType.INGESTION.equals(stepDefType)) {\n+            stepPayLoad.put(\"sourceFormat\", \"json\");\n+            stepPayLoad.put(\"targetFormat\", \"json\");\n+        }\n+        else {\n+            stepPayLoad.put(\"selectedSource\", \"query\");\n+            stepPayLoad.put(\"sourceQuery\", \"cts.collectionQuery('changeme')\");\n+            if(entityType != null){\n+                stepPayLoad.put(\"entityType\", entityType);\n+            }\n+        }\n+\n+        if (stepDefName != null && stepDefinitionManager.getStepDefinition(stepDefName, StepDefinitionType.getStepDefinitionType(stepType)) == null) {\n+            stepDefinition = StepDefinition.create(stepDefName, StepDefinitionType.getStepDefinitionType(stepType));\n+            createCustomModule(stepDefName, stepType);\n+            stepDefinition.setModulePath(\"/custom-modules/\" + stepType.toLowerCase() + \"/\" + stepDefName + \"/main.sjs\");\n+            stepDefinitionManager.saveStepDefinition(stepDefinition);\n+            messageBuilder.append(String.format(\"Created Step definition '%s' of type '%s'.\", stepName, stepType));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4415448dc457759f3a7967b45bba8eb32001c045"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIzNTY2Nw==", "bodyText": "Let's put this on a new line.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4319#discussion_r463235667", "createdAt": "2020-07-30T19:55:11Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/impl/ScaffoldingImpl.java", "diffHunk": "@@ -77,44 +86,86 @@ public static String getAbsolutePath(String first, String... more) {\n     }\n \n     /**\n-     * Create a step file  based on the given name and type.\n+     * Create a step file  based on the given stepName, stepType, entityType (for non ingestion steps),\n+     *  and stepDefName.\n      *\n-     * @param name\n-     * @param type\n+     * @param stepName\n+     * @param stepType\n+     * @param stepDefName\n+     * @param entityType\n      * @return a Pair with a File representing the created file, and a String representing an optional message that,\n      * if not null, should likely be presented to the caller\n      */\n-    public Pair<File, String> createStepFile(String name, String type) {\n-        StepDefinition.StepDefinitionType stepType = StepDefinition.StepDefinitionType.getStepDefinitionType(type);\n-        Assert.notNull(stepType, \"Unrecognized step type: \" + type);\n-        Assert.isTrue(stepType.equals(StepDefinition.StepDefinitionType.INGESTION) || stepType.equals(StepDefinition.StepDefinitionType.MAPPING),\n-            \"Can only create a step of type 'ingestion' or 'mapping'\");\n-\n-        File stepFile = hubConfig.getHubProject().getStepFile(stepType, name);\n+    public Pair<File, String> createStepFile(String stepName, String stepType, String stepDefName, String entityType) {\n+        StepDefinitionType stepDefType = StepDefinitionType.getStepDefinitionType(stepType);\n+        Assert.notNull(stepDefType, \"Unrecognized step type: \" + stepType);\n+        Assert.isTrue(stepDefType.equals(StepDefinitionType.INGESTION) || stepDefType.equals(StepDefinitionType.MAPPING) ||\n+                stepDefType.equals(StepDefinitionType.CUSTOM),\n+            \"Can only create a step of type 'ingestion', 'mapping' or 'custom'\");\n+\n+\n+        StepDefinition stepDefinition = null;\n+        JsonNode step;\n+        StringBuilder messageBuilder = new StringBuilder();\n+        File stepFile = hubConfig.getHubProject().getStepFile(stepDefType, stepName);\n         if (stepFile.exists()) {\n             throw new IllegalArgumentException(\"Cannot create step; a step file already exists at: \" + stepFile.getAbsolutePath() + \". Please choose a different name for your step.\");\n         }\n         stepFile.getParentFile().mkdirs();\n \n         ObjectMapper objectMapper = new ObjectMapper();\n-        ObjectNode step = objectMapper.createObjectNode();\n-        step.put(\"name\", name);\n-        step.put(\"description\", \"\");\n-\n-        String message = null;\n-        if (StepDefinition.StepDefinitionType.INGESTION.equals(stepType)) {\n-            step.put(\"sourceFormat\", \"json\");\n-            step.put(\"targetFormat\", \"json\");\n-        } else {\n-            step.put(\"targetEntityType\", \"http://example.org/EntityName-1.0.0/EntityName\");\n-            step.put(\"selectedSource\", \"query\");\n-            step.put(\"sourceQuery\", \"cts.collectionQuery('changeme')\");\n-            message = \"The mapping step file will need to be modified before usage, as it has example values for targetEntityType and sourceQuery.\";\n+        ObjectNode stepPayLoad = objectMapper.createObjectNode();\n+        stepPayLoad.put(\"name\", stepName);\n+        stepPayLoad.put(\"description\", \"\");\n+        stepPayLoad.put(\"stepDefinitionType\", stepType);\n+        if(stepDefName != null) {\n+            stepPayLoad.put(\"stepDefinitionName\", stepDefName);\n+        }\n+        else {\n+            if(StepDefinitionType.CUSTOM.equals(stepDefType)){\n+                stepDefName = stepName;\n+                stepPayLoad.put(\"stepDefinitionName\", stepDefName);\n+            }\n+        }\n+\n+        if (StepDefinitionType.INGESTION.equals(stepDefType)) {\n+            stepPayLoad.put(\"sourceFormat\", \"json\");\n+            stepPayLoad.put(\"targetFormat\", \"json\");\n+        }\n+        else {\n+            stepPayLoad.put(\"selectedSource\", \"query\");\n+            stepPayLoad.put(\"sourceQuery\", \"cts.collectionQuery('changeme')\");\n+            if(entityType != null){\n+                stepPayLoad.put(\"entityType\", entityType);\n+            }\n+        }\n+\n+        if (stepDefName != null && stepDefinitionManager.getStepDefinition(stepDefName, StepDefinitionType.getStepDefinitionType(stepType)) == null) {\n+            stepDefinition = StepDefinition.create(stepDefName, StepDefinitionType.getStepDefinitionType(stepType));\n+            createCustomModule(stepDefName, stepType);\n+            stepDefinition.setModulePath(\"/custom-modules/\" + stepType.toLowerCase() + \"/\" + stepDefName + \"/main.sjs\");\n+            stepDefinitionManager.saveStepDefinition(stepDefinition);\n+            messageBuilder.append(String.format(\"Created Step definition '%s' of type '%s'.\", stepName, stepType));\n+            messageBuilder.append(\"The module file for the step definition is available at \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4415448dc457759f3a7967b45bba8eb32001c045"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIzNjIyMQ==", "bodyText": "\"Please run\" sounds like it's required, but it's not - we're just recommending it. Let's instead say \"It is recommended to run './gradlew -i mlWatch' so that as you modify the module, it will be automatically loaded into your application's modules database.\" And let's put that on a new line as well.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4319#discussion_r463236221", "createdAt": "2020-07-30T19:56:17Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/impl/ScaffoldingImpl.java", "diffHunk": "@@ -77,44 +86,86 @@ public static String getAbsolutePath(String first, String... more) {\n     }\n \n     /**\n-     * Create a step file  based on the given name and type.\n+     * Create a step file  based on the given stepName, stepType, entityType (for non ingestion steps),\n+     *  and stepDefName.\n      *\n-     * @param name\n-     * @param type\n+     * @param stepName\n+     * @param stepType\n+     * @param stepDefName\n+     * @param entityType\n      * @return a Pair with a File representing the created file, and a String representing an optional message that,\n      * if not null, should likely be presented to the caller\n      */\n-    public Pair<File, String> createStepFile(String name, String type) {\n-        StepDefinition.StepDefinitionType stepType = StepDefinition.StepDefinitionType.getStepDefinitionType(type);\n-        Assert.notNull(stepType, \"Unrecognized step type: \" + type);\n-        Assert.isTrue(stepType.equals(StepDefinition.StepDefinitionType.INGESTION) || stepType.equals(StepDefinition.StepDefinitionType.MAPPING),\n-            \"Can only create a step of type 'ingestion' or 'mapping'\");\n-\n-        File stepFile = hubConfig.getHubProject().getStepFile(stepType, name);\n+    public Pair<File, String> createStepFile(String stepName, String stepType, String stepDefName, String entityType) {\n+        StepDefinitionType stepDefType = StepDefinitionType.getStepDefinitionType(stepType);\n+        Assert.notNull(stepDefType, \"Unrecognized step type: \" + stepType);\n+        Assert.isTrue(stepDefType.equals(StepDefinitionType.INGESTION) || stepDefType.equals(StepDefinitionType.MAPPING) ||\n+                stepDefType.equals(StepDefinitionType.CUSTOM),\n+            \"Can only create a step of type 'ingestion', 'mapping' or 'custom'\");\n+\n+\n+        StepDefinition stepDefinition = null;\n+        JsonNode step;\n+        StringBuilder messageBuilder = new StringBuilder();\n+        File stepFile = hubConfig.getHubProject().getStepFile(stepDefType, stepName);\n         if (stepFile.exists()) {\n             throw new IllegalArgumentException(\"Cannot create step; a step file already exists at: \" + stepFile.getAbsolutePath() + \". Please choose a different name for your step.\");\n         }\n         stepFile.getParentFile().mkdirs();\n \n         ObjectMapper objectMapper = new ObjectMapper();\n-        ObjectNode step = objectMapper.createObjectNode();\n-        step.put(\"name\", name);\n-        step.put(\"description\", \"\");\n-\n-        String message = null;\n-        if (StepDefinition.StepDefinitionType.INGESTION.equals(stepType)) {\n-            step.put(\"sourceFormat\", \"json\");\n-            step.put(\"targetFormat\", \"json\");\n-        } else {\n-            step.put(\"targetEntityType\", \"http://example.org/EntityName-1.0.0/EntityName\");\n-            step.put(\"selectedSource\", \"query\");\n-            step.put(\"sourceQuery\", \"cts.collectionQuery('changeme')\");\n-            message = \"The mapping step file will need to be modified before usage, as it has example values for targetEntityType and sourceQuery.\";\n+        ObjectNode stepPayLoad = objectMapper.createObjectNode();\n+        stepPayLoad.put(\"name\", stepName);\n+        stepPayLoad.put(\"description\", \"\");\n+        stepPayLoad.put(\"stepDefinitionType\", stepType);\n+        if(stepDefName != null) {\n+            stepPayLoad.put(\"stepDefinitionName\", stepDefName);\n+        }\n+        else {\n+            if(StepDefinitionType.CUSTOM.equals(stepDefType)){\n+                stepDefName = stepName;\n+                stepPayLoad.put(\"stepDefinitionName\", stepDefName);\n+            }\n+        }\n+\n+        if (StepDefinitionType.INGESTION.equals(stepDefType)) {\n+            stepPayLoad.put(\"sourceFormat\", \"json\");\n+            stepPayLoad.put(\"targetFormat\", \"json\");\n+        }\n+        else {\n+            stepPayLoad.put(\"selectedSource\", \"query\");\n+            stepPayLoad.put(\"sourceQuery\", \"cts.collectionQuery('changeme')\");\n+            if(entityType != null){\n+                stepPayLoad.put(\"entityType\", entityType);\n+            }\n+        }\n+\n+        if (stepDefName != null && stepDefinitionManager.getStepDefinition(stepDefName, StepDefinitionType.getStepDefinitionType(stepType)) == null) {\n+            stepDefinition = StepDefinition.create(stepDefName, StepDefinitionType.getStepDefinitionType(stepType));\n+            createCustomModule(stepDefName, stepType);\n+            stepDefinition.setModulePath(\"/custom-modules/\" + stepType.toLowerCase() + \"/\" + stepDefName + \"/main.sjs\");\n+            stepDefinitionManager.saveStepDefinition(stepDefinition);\n+            messageBuilder.append(String.format(\"Created Step definition '%s' of type '%s'.\", stepName, stepType));\n+            messageBuilder.append(\"The module file for the step definition is available at \"\n+                + \"/custom-modules/\" + stepType.toLowerCase() + \"/\" + stepDefName + \"/main.sjs\" + \". Please run mlWatch while you edit the custom module\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4415448dc457759f3a7967b45bba8eb32001c045"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIzNjcyNQ==", "bodyText": "For consistency with the message about the step definition, do \"Created step\" instead of \"Created a step\" (I'm very picky about messages we show to users).", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4319#discussion_r463236725", "createdAt": "2020-07-30T19:57:18Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/impl/ScaffoldingImpl.java", "diffHunk": "@@ -77,44 +86,86 @@ public static String getAbsolutePath(String first, String... more) {\n     }\n \n     /**\n-     * Create a step file  based on the given name and type.\n+     * Create a step file  based on the given stepName, stepType, entityType (for non ingestion steps),\n+     *  and stepDefName.\n      *\n-     * @param name\n-     * @param type\n+     * @param stepName\n+     * @param stepType\n+     * @param stepDefName\n+     * @param entityType\n      * @return a Pair with a File representing the created file, and a String representing an optional message that,\n      * if not null, should likely be presented to the caller\n      */\n-    public Pair<File, String> createStepFile(String name, String type) {\n-        StepDefinition.StepDefinitionType stepType = StepDefinition.StepDefinitionType.getStepDefinitionType(type);\n-        Assert.notNull(stepType, \"Unrecognized step type: \" + type);\n-        Assert.isTrue(stepType.equals(StepDefinition.StepDefinitionType.INGESTION) || stepType.equals(StepDefinition.StepDefinitionType.MAPPING),\n-            \"Can only create a step of type 'ingestion' or 'mapping'\");\n-\n-        File stepFile = hubConfig.getHubProject().getStepFile(stepType, name);\n+    public Pair<File, String> createStepFile(String stepName, String stepType, String stepDefName, String entityType) {\n+        StepDefinitionType stepDefType = StepDefinitionType.getStepDefinitionType(stepType);\n+        Assert.notNull(stepDefType, \"Unrecognized step type: \" + stepType);\n+        Assert.isTrue(stepDefType.equals(StepDefinitionType.INGESTION) || stepDefType.equals(StepDefinitionType.MAPPING) ||\n+                stepDefType.equals(StepDefinitionType.CUSTOM),\n+            \"Can only create a step of type 'ingestion', 'mapping' or 'custom'\");\n+\n+\n+        StepDefinition stepDefinition = null;\n+        JsonNode step;\n+        StringBuilder messageBuilder = new StringBuilder();\n+        File stepFile = hubConfig.getHubProject().getStepFile(stepDefType, stepName);\n         if (stepFile.exists()) {\n             throw new IllegalArgumentException(\"Cannot create step; a step file already exists at: \" + stepFile.getAbsolutePath() + \". Please choose a different name for your step.\");\n         }\n         stepFile.getParentFile().mkdirs();\n \n         ObjectMapper objectMapper = new ObjectMapper();\n-        ObjectNode step = objectMapper.createObjectNode();\n-        step.put(\"name\", name);\n-        step.put(\"description\", \"\");\n-\n-        String message = null;\n-        if (StepDefinition.StepDefinitionType.INGESTION.equals(stepType)) {\n-            step.put(\"sourceFormat\", \"json\");\n-            step.put(\"targetFormat\", \"json\");\n-        } else {\n-            step.put(\"targetEntityType\", \"http://example.org/EntityName-1.0.0/EntityName\");\n-            step.put(\"selectedSource\", \"query\");\n-            step.put(\"sourceQuery\", \"cts.collectionQuery('changeme')\");\n-            message = \"The mapping step file will need to be modified before usage, as it has example values for targetEntityType and sourceQuery.\";\n+        ObjectNode stepPayLoad = objectMapper.createObjectNode();\n+        stepPayLoad.put(\"name\", stepName);\n+        stepPayLoad.put(\"description\", \"\");\n+        stepPayLoad.put(\"stepDefinitionType\", stepType);\n+        if(stepDefName != null) {\n+            stepPayLoad.put(\"stepDefinitionName\", stepDefName);\n+        }\n+        else {\n+            if(StepDefinitionType.CUSTOM.equals(stepDefType)){\n+                stepDefName = stepName;\n+                stepPayLoad.put(\"stepDefinitionName\", stepDefName);\n+            }\n+        }\n+\n+        if (StepDefinitionType.INGESTION.equals(stepDefType)) {\n+            stepPayLoad.put(\"sourceFormat\", \"json\");\n+            stepPayLoad.put(\"targetFormat\", \"json\");\n+        }\n+        else {\n+            stepPayLoad.put(\"selectedSource\", \"query\");\n+            stepPayLoad.put(\"sourceQuery\", \"cts.collectionQuery('changeme')\");\n+            if(entityType != null){\n+                stepPayLoad.put(\"entityType\", entityType);\n+            }\n+        }\n+\n+        if (stepDefName != null && stepDefinitionManager.getStepDefinition(stepDefName, StepDefinitionType.getStepDefinitionType(stepType)) == null) {\n+            stepDefinition = StepDefinition.create(stepDefName, StepDefinitionType.getStepDefinitionType(stepType));\n+            createCustomModule(stepDefName, stepType);\n+            stepDefinition.setModulePath(\"/custom-modules/\" + stepType.toLowerCase() + \"/\" + stepDefName + \"/main.sjs\");\n+            stepDefinitionManager.saveStepDefinition(stepDefinition);\n+            messageBuilder.append(String.format(\"Created Step definition '%s' of type '%s'.\", stepName, stepType));\n+            messageBuilder.append(\"The module file for the step definition is available at \"\n+                + \"/custom-modules/\" + stepType.toLowerCase() + \"/\" + stepDefName + \"/main.sjs\" + \". Please run mlWatch while you edit the custom module\\n\");\n+        }\n+        messageBuilder.append(\"Created a step '\" + stepName + \"' of type '\" + stepType + \"' with default properties. It will need to be modified before usage.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4415448dc457759f3a7967b45bba8eb32001c045"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIzOTAzMw==", "bodyText": "This doesn't allow Pari to enter e.g. \"http://example.org/Customer-1.0/Customer\", which she may do.\nWhat we want to do instead is say - if the entity URI you're constructing exists, then we know Pari has entered \"Customer\" and she'd really appreciate it if we converted that into an entityTypeId for her. But if the URI doesn't exist, then we assume Pari entered a valid value. If it's not valid, she'll get an error when the step is saved - which is good, and the try/catch for that operation should make it very clear that saving the step failed.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4319#discussion_r463239033", "createdAt": "2020-07-30T20:01:37Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/step/saveStep.sjs", "diffHunk": "@@ -76,6 +77,17 @@ if (existingStep) {\n     throw new Error(`Missing required property 'stepDefinitionName' for step: ${stepName}`);\n   }\n \n+  if(stepProperties.entityType){\n+    if(fn.docAvailable(\"/entities/\"+ stepProperties.entityType +\".entity.json\")){\n+      const entityTypeId = entityLib.getEntityTypeId(entityLib.findModelByEntityName(stepProperties.entityType), stepProperties.entityType);\n+      stepProperties.targetEntityType = entityTypeId;\n+      delete stepProperties.entityType;\n+    }\n+    else {\n+      throw new Error(`The specified entity type ${stepProperties.entityType} is not found`);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4415448dc457759f3a7967b45bba8eb32001c045"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c9946daf050eac9c0f86eb3c344ce1442683e16", "author": {"user": {"login": "srinathgit", "name": "Srinath S"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/6c9946daf050eac9c0f86eb3c344ce1442683e16", "committedDate": "2020-07-30T20:27:42Z", "message": "DHFPROD-5265:Create step via Gradle"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4415448dc457759f3a7967b45bba8eb32001c045", "author": {"user": {"login": "srinathgit", "name": "Srinath S"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/4415448dc457759f3a7967b45bba8eb32001c045", "committedDate": "2020-07-30T19:16:40Z", "message": "DHFPROD-5265:Create step via Gradle"}, "afterCommit": {"oid": "6c9946daf050eac9c0f86eb3c344ce1442683e16", "author": {"user": {"login": "srinathgit", "name": "Srinath S"}}, "url": "https://github.com/marklogic/marklogic-data-hub/commit/6c9946daf050eac9c0f86eb3c344ce1442683e16", "committedDate": "2020-07-30T20:27:42Z", "message": "DHFPROD-5265:Create step via Gradle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NzM3OTQ4", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4319#pullrequestreview-458737948", "createdAt": "2020-07-30T20:37:14Z", "commit": {"oid": "6c9946daf050eac9c0f86eb3c344ce1442683e16"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NDAxOTg1", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4319#pullrequestreview-459401985", "createdAt": "2020-07-31T19:13:19Z", "commit": {"oid": "6c9946daf050eac9c0f86eb3c344ce1442683e16"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2519, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}