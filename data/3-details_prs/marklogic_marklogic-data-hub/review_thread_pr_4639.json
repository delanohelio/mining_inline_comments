{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1MDM1MjI0", "number": 4639, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTowNTozMVrOEotCkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzo1Nzo1M1rOEpJJ5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTE2NDMzOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/models/getPrimaryEntityTypes.sjs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTowNTozMVrOHZ8vxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTowNTozMVrOHZ8vxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk3MTcxOA==", "bodyText": "I think it'd be better to sort these after they've been populated with \"entityName\". That minimizes the amount of code we have with knowledge of \"info.title\" meaning something important.\nSo build up the array, then sort it by entityName.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4639#discussion_r496971718", "createdAt": "2020-09-29T19:05:31Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/models/getPrimaryEntityTypes.sjs", "diffHunk": "@@ -19,7 +19,20 @@ xdmp.securityAssert(\"http://marklogic.com/data-hub/privileges/read-entity-model\"\n \n const entityLib = require(\"/data-hub/5/impl/entity-lib.sjs\");\n \n-fn.collection(entityLib.getModelCollection()).toArray().map(model => {\n+let modelArr = fn.collection(entityLib.getModelCollection()).toArray();\n+modelArr.sort(function(modelA, modelB) {\n+  var nameA = modelA.toObject().info.title;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68df268613f9af659b8ff498510f0e42ccf11481"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNTc3MDYzOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/dataservices/models/GetPrimaryEntityTypesTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzo1Nzo1M1rOHapJfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzo1Nzo1M1rOHapJfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY5OTE5OA==", "bodyText": "Nice, makes the test simpler!", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4639#discussion_r497699198", "createdAt": "2020-09-30T17:57:53Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/java/com/marklogic/hub/dataservices/models/GetPrimaryEntityTypesTest.java", "diffHunk": "@@ -17,24 +18,22 @@ void referenceModelWithOneCustomerLoaded() {\n \n         ArrayNode entityTypes = (ArrayNode) ModelsService.on(adminHubConfig.newFinalClient(null)).getPrimaryEntityTypes();\n         assertEquals(2, entityTypes.size(), \"Expecting an entry for Customer and for Order\");\n-        // The order of types isn't guaranteed here\n-        entityTypes.forEach(entityType -> {\n-            String name = entityType.get(\"entityName\").asText();\n-            if (\"Order\".equals(name)) {\n-                assertEquals(\"0\", entityType.get(\"entityInstanceCount\").asText());\n-                assertEquals(\"http://marklogic.com/example/Order-0.0.1/Order\", entityType.get(\"entityTypeId\").asText());\n-                assertFalse(entityType.has(\"latestJobId\"), \"Job data shouldn't exist since no flows have been run for this entity\");\n-                assertFalse(entityType.has(\"latestJobDateTime\"));\n-                assertEquals(\"Order\", entityType.get(\"model\").get(\"info\").get(\"title\").asText(), \"Verifying that the model is included\");\n-            } else {\n-                assertEquals(\"Customer\", name);\n-                assertEquals(\"http://example.org/Customer-0.0.1/Customer\", entityType.get(\"entityTypeId\").asText());\n-                assertEquals(\"1\", entityType.get(\"entityInstanceCount\").asText());\n-                assertEquals(\"echoFlow-test\", entityType.get(\"latestJobId\").asText());\n-                assertTrue(entityType.has(\"latestJobDateTime\"));\n-                assertEquals(\"Customer\", entityType.get(\"model\").get(\"info\").get(\"title\").asText());\n-            }\n-        });\n+        // The entity types are sorted alphabetically.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4a4de230264d1b111f701f31fecb3943b3c46cc"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3244, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}