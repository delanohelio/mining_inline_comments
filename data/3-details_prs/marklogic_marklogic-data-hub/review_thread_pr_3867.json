{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MTg5Nzcy", "number": 3867, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMToxNTowNVrOD1eriA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDozNzo1NVrOD1zotw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDAzNzg0OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMToxNTowNVrOGK8b_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDowMzo1MFrOGLZRDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEyOTE1MA==", "bodyText": "Theses props can be replaced with just {...data.mapProps} sourceData={[]} mappingVisible={true}", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3867#discussion_r414129150", "createdAt": "2020-04-23T21:15:05Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.test.tsx", "diffHunk": "@@ -1,14 +1,21 @@\n import React from 'react';\n-import { render, cleanup, fireEvent, getByTestId } from '@testing-library/react';\n+import { waitForElement, render, cleanup, fireEvent, queryByAttribute } from '@testing-library/react';\n import SourceToEntityMap from './source-to-entity-map';\n import data from '../../../../config/data.config';\n import { shallow } from 'enzyme';\n import SplitPane from 'react-split-pane';\n+import axiosMock from 'axios';\n \n+jest.mock('axios');\n+\n+afterEach(() => {\n+    jest.clearAllMocks();\n+    cleanup();\n+});\n describe('RTL Source-to-entity map tests', () => {\n     afterEach(cleanup);\n     test('RTL tests with no source data', () => {\n-        const { getByTestId,  getByText, getByRole } = render(<SourceToEntityMap {... {mapData: data.mapProps.mapData, entityTypeTitle : data.mapProps.entityTypeTitle, sourceData: [], extractCollectionFromSrcQuery: jest.fn()}} mappingVisible={true}/>);\n+        const { getByTestId,  getByText, getByRole } = render(<SourceToEntityMap {... {mapData: data.mapProps.mapData,entityTypeProperties:data.mapProps.entityTypeProperties, entityTypeTitle : data.mapProps.entityTypeTitle, sourceData: [], extractCollectionFromSrcQuery: jest.fn()}} mappingVisible={true}/>);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db944d3b379ac6dd6ff1758457faffff883581b5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYwMTQ4NA==", "bodyText": "Did the proposed change not work for you?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3867#discussion_r414601484", "createdAt": "2020-04-24T14:03:50Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.test.tsx", "diffHunk": "@@ -1,14 +1,21 @@\n import React from 'react';\n-import { render, cleanup, fireEvent, getByTestId } from '@testing-library/react';\n+import { waitForElement, render, cleanup, fireEvent, queryByAttribute } from '@testing-library/react';\n import SourceToEntityMap from './source-to-entity-map';\n import data from '../../../../config/data.config';\n import { shallow } from 'enzyme';\n import SplitPane from 'react-split-pane';\n+import axiosMock from 'axios';\n \n+jest.mock('axios');\n+\n+afterEach(() => {\n+    jest.clearAllMocks();\n+    cleanup();\n+});\n describe('RTL Source-to-entity map tests', () => {\n     afterEach(cleanup);\n     test('RTL tests with no source data', () => {\n-        const { getByTestId,  getByText, getByRole } = render(<SourceToEntityMap {... {mapData: data.mapProps.mapData, entityTypeTitle : data.mapProps.entityTypeTitle, sourceData: [], extractCollectionFromSrcQuery: jest.fn()}} mappingVisible={true}/>);\n+        const { getByTestId,  getByText, getByRole } = render(<SourceToEntityMap {... {mapData: data.mapProps.mapData,entityTypeProperties:data.mapProps.entityTypeProperties, entityTypeTitle : data.mapProps.entityTypeTitle, sourceData: [], extractCollectionFromSrcQuery: jest.fn()}} mappingVisible={true}/>);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEyOTE1MA=="}, "originalCommit": {"oid": "db944d3b379ac6dd6ff1758457faffff883581b5"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzE0ODAyOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzozMTowNFrOGLX0JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzozMTowNFrOGLX0JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU3NzcwMA==", "bodyText": "Try adding data-testid={row.name.split('/').pop()+'-mapexpression'} so we can get map expression for an entity property instead of using getAll*", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3867#discussion_r414577700", "createdAt": "2020-04-24T13:31:04Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.tsx", "diffHunk": "@@ -489,15 +513,20 @@ const SourceToEntityMap = (props) => {\n             render: (text, row) => (<div className={styles.mapExpParentContainer}><div className={styles.mapExpressionContainer}>\n                 <TextArea\n                     id=\"mapexpression\"\n+                    data-testid=\"mapexpression\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa2464d6d6b199c82149017a2195b8fe430e5191"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzE3NzA4OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzozNzozM1rOGLYFcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwMDo0OTo1N1rOGLt0kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU4MjEyOQ==", "bodyText": "Same as above. Try adding data-testid={row.name.split('/').pop()+'-listIcon'}. Selectors should always be unique.\nShould the handleSourceList take row.name as input just like function list handler?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3867#discussion_r414582129", "createdAt": "2020-04-24T13:37:33Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.tsx", "diffHunk": "@@ -489,15 +513,20 @@ const SourceToEntityMap = (props) => {\n             render: (text, row) => (<div className={styles.mapExpParentContainer}><div className={styles.mapExpressionContainer}>\n                 <TextArea\n                     id=\"mapexpression\"\n+                    data-testid=\"mapexpression\"\n                     style={mapExpressionStyle(row.name)}\n                     onClick={handleClickInTextArea}\n                     value={mapExp[row.name]}\n                     onChange={(e) => handleMapExp(row.name, e)}\n                     onBlur={handleExpSubmit}\n                     autoSize={{ minRows: 1 }}\n                     disabled={!props.canReadWrite}></TextArea>&nbsp;&nbsp;\n-                <i id=\"listIcon\"><FontAwesomeIcon icon={faList} size=\"lg\" className={styles.listIcon}\n-                /></i>&nbsp;&nbsp;\n+                <span>\n+                    <Dropdown overlay={sourceSearchMenu} trigger={['click']} >\n+                        <i  id=\"listIcon\"><FontAwesomeIcon icon={faList} size=\"lg\" data-testid= \"listSources\"  className={styles.listIcon} onClick={(e) => handleSourceList(row)}/></i>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa2464d6d6b199c82149017a2195b8fe430e5191"}, "originalPosition": 215}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkzODI1OA==", "bodyText": "The function requires 'row' as parameter", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3867#discussion_r414938258", "createdAt": "2020-04-25T00:49:57Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.tsx", "diffHunk": "@@ -489,15 +513,20 @@ const SourceToEntityMap = (props) => {\n             render: (text, row) => (<div className={styles.mapExpParentContainer}><div className={styles.mapExpressionContainer}>\n                 <TextArea\n                     id=\"mapexpression\"\n+                    data-testid=\"mapexpression\"\n                     style={mapExpressionStyle(row.name)}\n                     onClick={handleClickInTextArea}\n                     value={mapExp[row.name]}\n                     onChange={(e) => handleMapExp(row.name, e)}\n                     onBlur={handleExpSubmit}\n                     autoSize={{ minRows: 1 }}\n                     disabled={!props.canReadWrite}></TextArea>&nbsp;&nbsp;\n-                <i id=\"listIcon\"><FontAwesomeIcon icon={faList} size=\"lg\" className={styles.listIcon}\n-                /></i>&nbsp;&nbsp;\n+                <span>\n+                    <Dropdown overlay={sourceSearchMenu} trigger={['click']} >\n+                        <i  id=\"listIcon\"><FontAwesomeIcon icon={faList} size=\"lg\" data-testid= \"listSources\"  className={styles.listIcon} onClick={(e) => handleSourceList(row)}/></i>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU4MjEyOQ=="}, "originalCommit": {"oid": "fa2464d6d6b199c82149017a2195b8fe430e5191"}, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzI5NTEwOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDowMTo0MVrOGLZLBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwMDoxODozOFrOGLtXrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU5OTk0MQ==", "bodyText": "Do we need a testid for successMessage. Will the test work if we expect(getByText('All changes are saved')). Lets try to use data-testid as last resort if nothing works.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3867#discussion_r414599941", "createdAt": "2020-04-24T14:01:41Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.tsx", "diffHunk": "@@ -544,12 +573,11 @@ const SourceToEntityMap = (props) => {\n         let mesg = `All changes are saved on ${convertDateFromISO(new Date())}`\n         let errorMesg = `An error occured while saving the changes.`\n \n-        let msg = <span id=\"successMessage\"><Alert type=\"success\" message={mesg} banner style={saveMessageCSS} /></span>\n-        let errorMsg = <span id=\"errorMessage\"><Alert type=\"error\" message={errorMesg} banner style={saveMessageCSS} /></span>\n+        let msg = <span data-testid=\"successMessage\" id=\"successMessage\"><Alert type=\"success\" message={mesg} banner style={saveMessageCSS} /></span>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa2464d6d6b199c82149017a2195b8fe430e5191"}, "originalPosition": 228}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkzMDg2MA==", "bodyText": "I did try it but getByText('All changes are saved') doesn't work for some reason even though debug prints this text. I am not sure why this happens with antd Alert messages , until there is another solution, I will go with this", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3867#discussion_r414930860", "createdAt": "2020-04-25T00:18:38Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.tsx", "diffHunk": "@@ -544,12 +573,11 @@ const SourceToEntityMap = (props) => {\n         let mesg = `All changes are saved on ${convertDateFromISO(new Date())}`\n         let errorMesg = `An error occured while saving the changes.`\n \n-        let msg = <span id=\"successMessage\"><Alert type=\"success\" message={mesg} banner style={saveMessageCSS} /></span>\n-        let errorMsg = <span id=\"errorMessage\"><Alert type=\"error\" message={errorMesg} banner style={saveMessageCSS} /></span>\n+        let msg = <span data-testid=\"successMessage\" id=\"successMessage\"><Alert type=\"success\" message={mesg} banner style={saveMessageCSS} /></span>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU5OTk0MQ=="}, "originalCommit": {"oid": "fa2464d6d6b199c82149017a2195b8fe430e5191"}, "originalPosition": 228}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzMxNDU2OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.test.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDowNTo1OFrOGLZWew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDowNTo1OFrOGLZWew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYwMjg3NQ==", "bodyText": "can we move afterEach inside describe. We already have one in there.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3867#discussion_r414602875", "createdAt": "2020-04-24T14:05:58Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.test.tsx", "diffHunk": "@@ -1,15 +1,22 @@\n import React from 'react';\n-import { render, cleanup, fireEvent, within } from '@testing-library/react';\n+import { waitForElement, render, cleanup, fireEvent, queryByAttribute, within } from '@testing-library/react';\n import SourceToEntityMap from './source-to-entity-map';\n import data from '../../../../config/data.config';\n import { shallow } from 'enzyme';\n import SplitPane from 'react-split-pane';\n+import axiosMock from 'axios';\n import { validateMappingTableRow } from '../../../../util/test-utils';\n \n+jest.mock('axios');\n+\n+afterEach(() => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa2464d6d6b199c82149017a2195b8fe430e5191"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzM5ODc4OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDoyMzoyMVrOGLaIcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNzowNjoxMVrOGLhDJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYxNTY2Ng==", "bodyText": "fx search also has the same className. Can we ensure we are getting the correct inputBox here", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3867#discussion_r414615666", "createdAt": "2020-04-24T14:23:21Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.test.tsx", "diffHunk": "@@ -259,6 +266,120 @@ describe('RTL Source-to-entity map tests', () => {\n     });\n });\n \n+\n+test('Nested source data - Right XPATH expression',  async() => {\n+    axiosMock.post.mockImplementationOnce(data.mapProps.updateMappingArtifact);\n+    const { getByText,getAllByText, queryByText, getAllByTestId, getAllByRole, debug} = render(<SourceToEntityMap {...data.mapProps}  mappingVisible={true}/>);\n+    expect(getByText('Source Data')).toBeInTheDocument();\n+    expect(getByText('Entity: Person')).toBeInTheDocument();\n+    expect(getByText('Test')).toBeEnabled();\n+\n+    //Ensure source selectors are present\n+    let sourceSelectors = getAllByTestId(\"listSources\");\n+\n+    expect(sourceSelectors.length).toEqual(8)\n+\n+    //corresponds to 'itemTypes' source selector\n+    fireEvent.click(sourceSelectors[3]);\n+\n+    await(waitForElement(() =>  getAllByRole(\"option\"),{\"timeout\":200}))\n+    let firstName = getAllByText(\"FirstNamePreferred\");\n+    expect(firstName.length).toEqual(2)\n+\n+    //Check if indentation is right\n+    expect(firstName[1]).toHaveStyle(\"line-height: 2vh; text-indent: 20px;\");\n+\n+    //Click on 'FirstNamePreferred'\n+    fireEvent.click(getAllByText(\"FirstNamePreferred\")[1]);\n+\n+    //mapping is saved\n+    expect(await(waitForElement(() => getAllByTestId(\"successMessage\").length,{\"timeout\":200}))).toEqual(1)\n+\n+    let mapExp = getAllByTestId(\"mapexpression\");\n+    //Right Xpath is populated\n+    expect(mapExp[3]).toHaveTextContent(\"nutFreeName/FirstNamePreferred\");\n+\n+});\n+\n+test('Nested source data/entity - Right XPATH with source context',  async() => {\n+    axiosMock.post.mockImplementationOnce(data.mapProps.updateMappingArtifact);\n+    const {getAllByText,getAllByTestId, getAllByRole,debug } = render(<SourceToEntityMap {...data.mapProps}  mappingVisible={true}/>);\n+\n+    //Ensure source selectors are present\n+    let sourceSelectors = getAllByTestId(\"listSources\");\n+    expect(sourceSelectors.length).toEqual(8)\n+\n+    // Set 'sourceContext' for ItemType entity\n+    fireEvent.click(sourceSelectors[2]);\n+    await(waitForElement(() =>  getAllByRole(\"option\"),{\"timeout\":200}))\n+    //Set 'sourceContext' to 'nutFreeName'\n+    fireEvent.click(getAllByText(\"nutFreeName\")[1]);\n+    expect(await(waitForElement(() => getAllByTestId(\"successMessage\").length,{\"timeout\":200}))).toEqual(1)\n+    let mapExp = getAllByTestId(\"mapexpression\");\n+    //Right Xpath is populated\n+    expect(mapExp[2]).toHaveTextContent(\"nutFreeName\");\n+\n+\n+    //Click on the fourth selector (FirstNamePreferred)\n+    fireEvent.click(sourceSelectors[3]);\n+    await(waitForElement(() => getAllByRole(\"option\"),{\"timeout\":400}))\n+    let firstName = getAllByText(\"FirstNamePreferred\");\n+    fireEvent.click(firstName[1]);\n+    //mapping is saved\n+    expect(await(waitForElement(() => getAllByTestId(\"successMessage\").length,{\"timeout\":200}))).toEqual(1)\n+    mapExp = getAllByTestId(\"mapexpression\");\n+\n+    //Right Xpath is populated (and not nutFreeName/FirstNamePreferred since sourceContext is set)\n+    expect(mapExp[3]).toHaveTextContent(\"FirstNamePreferred\");\n+\n+});\n+\n+test('Search source',  async() => {\n+    axiosMock.post.mockImplementationOnce(data.mapProps.updateMappingArtifact);\n+    const {getByText,getAllByText, getAllByTestId, getAllByRole} = render(<SourceToEntityMap {...data.mapProps}  mappingVisible={true}/>);\n+\n+    //Ensure source selectors are present\n+    let sourceSelectors = getAllByTestId(\"listSources\");\n+\n+    expect(sourceSelectors.length).toEqual(8)\n+\n+    //corresponds to 'id' source selector\n+    fireEvent.click(sourceSelectors[3]);\n+\n+    await(waitForElement(() =>  getAllByRole(\"option\"),{\"timeout\":200}))\n+    let firstName = getAllByText(\"FirstNamePreferred\");\n+    expect(firstName.length).toEqual(2)\n+\n+    let lastName = getAllByText(\"LastName\");\n+    expect(lastName.length).toEqual(2)\n+\n+    let inputBox = getByText(\n+        (_content, element) =>\n+            element.className != null &&\n+            element.className ===\"ant-select-search__field\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa2464d6d6b199c82149017a2195b8fe430e5191"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcyODk5Nw==", "bodyText": "The point is only one of them should be rendered in the UI at any time and the one rendered should be the one I click. So, I believe, this is ok", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3867#discussion_r414728997", "createdAt": "2020-04-24T17:06:11Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.test.tsx", "diffHunk": "@@ -259,6 +266,120 @@ describe('RTL Source-to-entity map tests', () => {\n     });\n });\n \n+\n+test('Nested source data - Right XPATH expression',  async() => {\n+    axiosMock.post.mockImplementationOnce(data.mapProps.updateMappingArtifact);\n+    const { getByText,getAllByText, queryByText, getAllByTestId, getAllByRole, debug} = render(<SourceToEntityMap {...data.mapProps}  mappingVisible={true}/>);\n+    expect(getByText('Source Data')).toBeInTheDocument();\n+    expect(getByText('Entity: Person')).toBeInTheDocument();\n+    expect(getByText('Test')).toBeEnabled();\n+\n+    //Ensure source selectors are present\n+    let sourceSelectors = getAllByTestId(\"listSources\");\n+\n+    expect(sourceSelectors.length).toEqual(8)\n+\n+    //corresponds to 'itemTypes' source selector\n+    fireEvent.click(sourceSelectors[3]);\n+\n+    await(waitForElement(() =>  getAllByRole(\"option\"),{\"timeout\":200}))\n+    let firstName = getAllByText(\"FirstNamePreferred\");\n+    expect(firstName.length).toEqual(2)\n+\n+    //Check if indentation is right\n+    expect(firstName[1]).toHaveStyle(\"line-height: 2vh; text-indent: 20px;\");\n+\n+    //Click on 'FirstNamePreferred'\n+    fireEvent.click(getAllByText(\"FirstNamePreferred\")[1]);\n+\n+    //mapping is saved\n+    expect(await(waitForElement(() => getAllByTestId(\"successMessage\").length,{\"timeout\":200}))).toEqual(1)\n+\n+    let mapExp = getAllByTestId(\"mapexpression\");\n+    //Right Xpath is populated\n+    expect(mapExp[3]).toHaveTextContent(\"nutFreeName/FirstNamePreferred\");\n+\n+});\n+\n+test('Nested source data/entity - Right XPATH with source context',  async() => {\n+    axiosMock.post.mockImplementationOnce(data.mapProps.updateMappingArtifact);\n+    const {getAllByText,getAllByTestId, getAllByRole,debug } = render(<SourceToEntityMap {...data.mapProps}  mappingVisible={true}/>);\n+\n+    //Ensure source selectors are present\n+    let sourceSelectors = getAllByTestId(\"listSources\");\n+    expect(sourceSelectors.length).toEqual(8)\n+\n+    // Set 'sourceContext' for ItemType entity\n+    fireEvent.click(sourceSelectors[2]);\n+    await(waitForElement(() =>  getAllByRole(\"option\"),{\"timeout\":200}))\n+    //Set 'sourceContext' to 'nutFreeName'\n+    fireEvent.click(getAllByText(\"nutFreeName\")[1]);\n+    expect(await(waitForElement(() => getAllByTestId(\"successMessage\").length,{\"timeout\":200}))).toEqual(1)\n+    let mapExp = getAllByTestId(\"mapexpression\");\n+    //Right Xpath is populated\n+    expect(mapExp[2]).toHaveTextContent(\"nutFreeName\");\n+\n+\n+    //Click on the fourth selector (FirstNamePreferred)\n+    fireEvent.click(sourceSelectors[3]);\n+    await(waitForElement(() => getAllByRole(\"option\"),{\"timeout\":400}))\n+    let firstName = getAllByText(\"FirstNamePreferred\");\n+    fireEvent.click(firstName[1]);\n+    //mapping is saved\n+    expect(await(waitForElement(() => getAllByTestId(\"successMessage\").length,{\"timeout\":200}))).toEqual(1)\n+    mapExp = getAllByTestId(\"mapexpression\");\n+\n+    //Right Xpath is populated (and not nutFreeName/FirstNamePreferred since sourceContext is set)\n+    expect(mapExp[3]).toHaveTextContent(\"FirstNamePreferred\");\n+\n+});\n+\n+test('Search source',  async() => {\n+    axiosMock.post.mockImplementationOnce(data.mapProps.updateMappingArtifact);\n+    const {getByText,getAllByText, getAllByTestId, getAllByRole} = render(<SourceToEntityMap {...data.mapProps}  mappingVisible={true}/>);\n+\n+    //Ensure source selectors are present\n+    let sourceSelectors = getAllByTestId(\"listSources\");\n+\n+    expect(sourceSelectors.length).toEqual(8)\n+\n+    //corresponds to 'id' source selector\n+    fireEvent.click(sourceSelectors[3]);\n+\n+    await(waitForElement(() =>  getAllByRole(\"option\"),{\"timeout\":200}))\n+    let firstName = getAllByText(\"FirstNamePreferred\");\n+    expect(firstName.length).toEqual(2)\n+\n+    let lastName = getAllByText(\"LastName\");\n+    expect(lastName.length).toEqual(2)\n+\n+    let inputBox = getByText(\n+        (_content, element) =>\n+            element.className != null &&\n+            element.className ===\"ant-select-search__field\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYxNTY2Ng=="}, "originalCommit": {"oid": "fa2464d6d6b199c82149017a2195b8fe430e5191"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzQ3MTI3OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDozNzo1NVrOGLazXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwMDo1NDoyMVrOGLt4bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYyNjY1NQ==", "bodyText": "Since we are able to verify indentation using RTL, can we add a test using XML data to verify indentation, namespaces and attributes.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3867#discussion_r414626655", "createdAt": "2020-04-24T14:37:55Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.test.tsx", "diffHunk": "@@ -259,6 +266,120 @@ describe('RTL Source-to-entity map tests', () => {\n     });\n });\n \n+\n+test('Nested source data - Right XPATH expression',  async() => {\n+    axiosMock.post.mockImplementationOnce(data.mapProps.updateMappingArtifact);\n+    const { getByText,getAllByText, queryByText, getAllByTestId, getAllByRole, debug} = render(<SourceToEntityMap {...data.mapProps}  mappingVisible={true}/>);\n+    expect(getByText('Source Data')).toBeInTheDocument();\n+    expect(getByText('Entity: Person')).toBeInTheDocument();\n+    expect(getByText('Test')).toBeEnabled();\n+\n+    //Ensure source selectors are present\n+    let sourceSelectors = getAllByTestId(\"listSources\");\n+\n+    expect(sourceSelectors.length).toEqual(8)\n+\n+    //corresponds to 'itemTypes' source selector\n+    fireEvent.click(sourceSelectors[3]);\n+\n+    await(waitForElement(() =>  getAllByRole(\"option\"),{\"timeout\":200}))\n+    let firstName = getAllByText(\"FirstNamePreferred\");\n+    expect(firstName.length).toEqual(2)\n+\n+    //Check if indentation is right\n+    expect(firstName[1]).toHaveStyle(\"line-height: 2vh; text-indent: 20px;\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa2464d6d6b199c82149017a2195b8fe430e5191"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkzOTI0Nw==", "bodyText": "Added test for XML data", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3867#discussion_r414939247", "createdAt": "2020-04-25T00:54:21Z", "author": {"login": "srinathgit"}, "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.test.tsx", "diffHunk": "@@ -259,6 +266,120 @@ describe('RTL Source-to-entity map tests', () => {\n     });\n });\n \n+\n+test('Nested source data - Right XPATH expression',  async() => {\n+    axiosMock.post.mockImplementationOnce(data.mapProps.updateMappingArtifact);\n+    const { getByText,getAllByText, queryByText, getAllByTestId, getAllByRole, debug} = render(<SourceToEntityMap {...data.mapProps}  mappingVisible={true}/>);\n+    expect(getByText('Source Data')).toBeInTheDocument();\n+    expect(getByText('Entity: Person')).toBeInTheDocument();\n+    expect(getByText('Test')).toBeEnabled();\n+\n+    //Ensure source selectors are present\n+    let sourceSelectors = getAllByTestId(\"listSources\");\n+\n+    expect(sourceSelectors.length).toEqual(8)\n+\n+    //corresponds to 'itemTypes' source selector\n+    fireEvent.click(sourceSelectors[3]);\n+\n+    await(waitForElement(() =>  getAllByRole(\"option\"),{\"timeout\":200}))\n+    let firstName = getAllByText(\"FirstNamePreferred\");\n+    expect(firstName.length).toEqual(2)\n+\n+    //Check if indentation is right\n+    expect(firstName[1]).toHaveStyle(\"line-height: 2vh; text-indent: 20px;\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYyNjY1NQ=="}, "originalCommit": {"oid": "fa2464d6d6b199c82149017a2195b8fe430e5191"}, "originalPosition": 142}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3443, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}