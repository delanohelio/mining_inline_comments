{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMDMyNDA0", "number": 3639, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjowNTowNVrODkts-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMzoyMToyMlrODlyzSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODI0MTIwOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/security/getAuthorities.sjs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjowNTowNVrOFxMHZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjowNTowNVrOFxMHZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyMzA0Ng==", "bodyText": "Let's not use the term \"privileges\" here, as that already has a definition within ML. Just call it \"response\", since this is the response object.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r387123046", "createdAt": "2020-03-03T16:05:05Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/security/getAuthorities.sjs", "diffHunk": "@@ -15,14 +15,49 @@\n  */\n 'use strict';\n \n-// TODO This is just stubbed out, a real implementation is needed.\n-\n-let response = {\n-  \"authorities\": [\n-    \"canInstallDataHub\",\n-    \"canReadLoadData\",\n-    \"canWriteLoadData\"\n-  ]\n+const Artifacts = require('/data-hub/5/artifacts/core.sjs');\n+const roleIdToName = (roleID) => xdmp.roleName(roleID);\n+const currentRoles = xdmp.getCurrentRoles().toArray().map(String);\n+let currentRoleNames = currentRoles.map(roleIdToName);\n+\n+const defaultManageRoles = ['admin', 'data-hub-environment-manager'].map((roleName) => String(xdmp.role(roleName)));\n+const manageRolesMustAllMatched = ['manage-admin', 'security'].map((roleName) => String(xdmp.role(roleName)));\n+\n+let hasManagerRole = defaultManageRoles.some((role) => currentRoles.includes(role));\n+if (!hasManagerRole) {\n+  hasManagerRole = manageRolesMustAllMatched.every((role) => currentRoles.indexOf(role) !== -1);\n+}\n+\n+if (currentRoleNames.includes('admin')) {\n+  currentRoleNames = xdmp.roles().toArray().map(roleIdToName);\n+}\n+const datahubRoles  = currentRoleNames.filter((roleName) => fn.startsWith(roleName, 'data-hub'));\n+\n+const privileges = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68f16495f7c1ce4e43a31305bfcf762da58264cc"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODI1NDQ0OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/security/getAuthorities.sjs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjowODowMlrOFxMPZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjowODowMlrOFxMPZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyNTA5Mw==", "bodyText": "You can do this and the line near the end in one simpler line of code:\nresponse.roles = currentRolesNames.filter(roleName => fn.startsWith(roleName, \"data-hub\");", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r387125093", "createdAt": "2020-03-03T16:08:02Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/security/getAuthorities.sjs", "diffHunk": "@@ -15,14 +15,49 @@\n  */\n 'use strict';\n \n-// TODO This is just stubbed out, a real implementation is needed.\n-\n-let response = {\n-  \"authorities\": [\n-    \"canInstallDataHub\",\n-    \"canReadLoadData\",\n-    \"canWriteLoadData\"\n-  ]\n+const Artifacts = require('/data-hub/5/artifacts/core.sjs');\n+const roleIdToName = (roleID) => xdmp.roleName(roleID);\n+const currentRoles = xdmp.getCurrentRoles().toArray().map(String);\n+let currentRoleNames = currentRoles.map(roleIdToName);\n+\n+const defaultManageRoles = ['admin', 'data-hub-environment-manager'].map((roleName) => String(xdmp.role(roleName)));\n+const manageRolesMustAllMatched = ['manage-admin', 'security'].map((roleName) => String(xdmp.role(roleName)));\n+\n+let hasManagerRole = defaultManageRoles.some((role) => currentRoles.includes(role));\n+if (!hasManagerRole) {\n+  hasManagerRole = manageRolesMustAllMatched.every((role) => currentRoles.indexOf(role) !== -1);\n+}\n+\n+if (currentRoleNames.includes('admin')) {\n+  currentRoleNames = xdmp.roles().toArray().map(roleIdToName);\n+}\n+const datahubRoles  = currentRoleNames.filter((roleName) => fn.startsWith(roleName, 'data-hub'));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68f16495f7c1ce4e43a31305bfcf762da58264cc"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODI2NDgyOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/data-services/security/getAuthoritiesTest.sjs", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjoxMDoyMlrOFxMV2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTo1Mjo1OVrOFxURAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyNjc0NA==", "bodyText": "There are a lot of other scenarios to test here, each as a different user. Switching users is very difficult in marklogic-unit-test though. For that reason, I think this test should be converted into a JUnit test - GetAuthoritiestTest - where each test method uses a different user. We have test-data-hub-developer and test-data-hub-operator already, and I think you can use \"admin\" too.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r387126744", "createdAt": "2020-03-03T16:10:22Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/data-services/security/getAuthoritiesTest.sjs", "diffHunk": "@@ -0,0 +1,24 @@\n+const test = require(\"/test/test-helper.xqy\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68f16495f7c1ce4e43a31305bfcf762da58264cc"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE0Mjc1Ng==", "bodyText": "@rjrudin I thought about it. It is why I added more test cases in the AuthTest.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r387142756", "createdAt": "2020-03-03T16:31:50Z", "author": {"login": "hao1st"}, "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/data-services/security/getAuthoritiesTest.sjs", "diffHunk": "@@ -0,0 +1,24 @@\n+const test = require(\"/test/test-helper.xqy\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyNjc0NA=="}, "originalCommit": {"oid": "68f16495f7c1ce4e43a31305bfcf762da58264cc"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE2ODk5OQ==", "bodyText": "Consider though that we'll likely add a lot more logic to this endpoint. Will it be easier to write tests against SecurityService, where all we need to do is instantiate a SecurityService, or against the Spring MVC layer, where we need to deal with mock request and response objects and a lot of other logic that we don't really care about?\nIt's good to have one test against Spring MVC to verify that all the parts are integrated together nicely. But for all the different scenarios that getAuthorities.sjs will handle, it'll be a lot cheaper in the long run to verify those scenarios directly against the endpoint.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r387168999", "createdAt": "2020-03-03T17:12:33Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/data-services/security/getAuthoritiesTest.sjs", "diffHunk": "@@ -0,0 +1,24 @@\n+const test = require(\"/test/test-helper.xqy\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyNjc0NA=="}, "originalCommit": {"oid": "68f16495f7c1ce4e43a31305bfcf762da58264cc"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1NTQ1Ng==", "bodyText": "@rjrudin Can you give me an example of a java test class about how to invoke sjs ?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r387255456", "createdAt": "2020-03-03T19:50:49Z", "author": {"login": "hao1st"}, "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/data-services/security/getAuthoritiesTest.sjs", "diffHunk": "@@ -0,0 +1,24 @@\n+const test = require(\"/test/test-helper.xqy\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyNjc0NA=="}, "originalCommit": {"oid": "68f16495f7c1ce4e43a31305bfcf762da58264cc"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1NjU3OQ==", "bodyText": "You'd just use the DS-generated one - SecurityService.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r387256579", "createdAt": "2020-03-03T19:52:59Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/data-services/security/getAuthoritiesTest.sjs", "diffHunk": "@@ -0,0 +1,24 @@\n+const test = require(\"/test/test-helper.xqy\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyNjc0NA=="}, "originalCommit": {"oid": "68f16495f7c1ce4e43a31305bfcf762da58264cc"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODI5NDg1OnYy", "diffSide": "RIGHT", "path": "one-ui/src/main/java/com/marklogic/hub/oneui/auth/AuthenticationFilter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjoxNjo0N1rOFxMoMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzowOToxM1rOFxOzKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEzMTQ0Mg==", "bodyText": "When we need a method to return a tuple of different things, I'd much rather see us use the Pair class or a custom class instead of passing arrays as ways to capture values.\nSo this can be simplified by returning a Pair<List<GrantedAuthority>, ArrayNode> . That makes it much more obvious what the method is doing.\nFor \"canInstallDataHub\" - can't LoginHandler just iterate over the list of GrantedAuthoritys to see if \"canInstallDataHub\" exists, and if so, write that to the JSON response? It shouldn't need to care about hasManagePrivileges anymore, right? That would get rid of this from this function, which shouldn't care about setting bits specific to the login response. It should just care about getting all the authorities (and for now, all the roles too, though that will soon go away).", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r387131442", "createdAt": "2020-03-03T16:16:47Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/oneui/auth/AuthenticationFilter.java", "diffHunk": "@@ -137,15 +139,24 @@ protected AuthenticationToken authenticateUser(String username, String password)\n      * - see https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#appendix-faq-role-prefix.\n      *\n      * @param stagingClient\n+     * @param roles\n+     * @param canInstallDataHub\n      * @return\n      */\n-    protected List<GrantedAuthority> getAuthoritiesForAuthenticatedUser(DatabaseClient stagingClient) {\n+    protected List<GrantedAuthority> getAuthoritiesForAuthenticatedUser(DatabaseClient stagingClient, ArrayNode[] roles, boolean[] canInstallDataHub) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68f16495f7c1ce4e43a31305bfcf762da58264cc"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE0MDk3MQ==", "bodyText": "@rjrudin Now UI needs hasManagePrivileges for convenience. Because we only send roles as response to UI, but those roles does not tell the if the user has manage-admin privilege or not. We can remove it once UI do not need it. Since we will remove roles, we can refactor the codes later on.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r387140971", "createdAt": "2020-03-03T16:29:12Z", "author": {"login": "hao1st"}, "path": "one-ui/src/main/java/com/marklogic/hub/oneui/auth/AuthenticationFilter.java", "diffHunk": "@@ -137,15 +139,24 @@ protected AuthenticationToken authenticateUser(String username, String password)\n      * - see https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#appendix-faq-role-prefix.\n      *\n      * @param stagingClient\n+     * @param roles\n+     * @param canInstallDataHub\n      * @return\n      */\n-    protected List<GrantedAuthority> getAuthoritiesForAuthenticatedUser(DatabaseClient stagingClient) {\n+    protected List<GrantedAuthority> getAuthoritiesForAuthenticatedUser(DatabaseClient stagingClient, ArrayNode[] roles, boolean[] canInstallDataHub) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEzMTQ0Mg=="}, "originalCommit": {"oid": "68f16495f7c1ce4e43a31305bfcf762da58264cc"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE0NTIyMg==", "bodyText": "@rjrudin I do not see any difference between use a Pair as return and pass roles as a parameter...", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r387145222", "createdAt": "2020-03-03T16:35:39Z", "author": {"login": "hao1st"}, "path": "one-ui/src/main/java/com/marklogic/hub/oneui/auth/AuthenticationFilter.java", "diffHunk": "@@ -137,15 +139,24 @@ protected AuthenticationToken authenticateUser(String username, String password)\n      * - see https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#appendix-faq-role-prefix.\n      *\n      * @param stagingClient\n+     * @param roles\n+     * @param canInstallDataHub\n      * @return\n      */\n-    protected List<GrantedAuthority> getAuthoritiesForAuthenticatedUser(DatabaseClient stagingClient) {\n+    protected List<GrantedAuthority> getAuthoritiesForAuthenticatedUser(DatabaseClient stagingClient, ArrayNode[] roles, boolean[] canInstallDataHub) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEzMTQ0Mg=="}, "originalCommit": {"oid": "68f16495f7c1ce4e43a31305bfcf762da58264cc"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE2NzAxOA==", "bodyText": "It's more clear what the inputs and outputs are. A signature of:\nList<GrantedAuthority> getGrantedAuthorities(DatabaseClient, ArrayNode); \n\nimplies that the DatabaseClient and ArrayNode are inputs needed to process a single List as the output. The reader has to do extra work to realize that one of the inputs is actually an output, not an input.\nBut this signature:\nPair<List, ArrayNode> getGrantedAuthorities(DatabaseClient);\n\nimplies that a single input is needed to produce two outputs.\nBut it's fine now not to change it - ideally, the roles will go away soon and we'll have a single output - the List of authorities.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r387167018", "createdAt": "2020-03-03T17:09:13Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/oneui/auth/AuthenticationFilter.java", "diffHunk": "@@ -137,15 +139,24 @@ protected AuthenticationToken authenticateUser(String username, String password)\n      * - see https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#appendix-faq-role-prefix.\n      *\n      * @param stagingClient\n+     * @param roles\n+     * @param canInstallDataHub\n      * @return\n      */\n-    protected List<GrantedAuthority> getAuthoritiesForAuthenticatedUser(DatabaseClient stagingClient) {\n+    protected List<GrantedAuthority> getAuthoritiesForAuthenticatedUser(DatabaseClient stagingClient, ArrayNode[] roles, boolean[] canInstallDataHub) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEzMTQ0Mg=="}, "originalCommit": {"oid": "68f16495f7c1ce4e43a31305bfcf762da58264cc"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTI3ODgwOnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/security/getAuthorities.sjs", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDo1NzoxNVrOFxWPAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjo0NjowOFrOFybVng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI4ODgzNQ==", "bodyText": "FWIW, \"data-hub-portal-security-admin\" also has manage-admin role.\nmanage and manage-admin are 2 separate roles. Can we be specific and say defaultRolesWithManageAdmin.\n'admin' doesnt have manage-admin role. An 'admin' role just bypasses all the security.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r387288835", "createdAt": "2020-03-03T20:57:15Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/security/getAuthorities.sjs", "diffHunk": "@@ -15,14 +15,49 @@\n  */\n 'use strict';\n \n-// TODO This is just stubbed out, a real implementation is needed.\n-\n-let response = {\n-  \"authorities\": [\n-    \"canInstallDataHub\",\n-    \"canReadLoadData\",\n-    \"canWriteLoadData\"\n-  ]\n+const Artifacts = require('/data-hub/5/artifacts/core.sjs');\n+const roleIdToName = (roleID) => xdmp.roleName(roleID);\n+const currentRoles = xdmp.getCurrentRoles().toArray().map(String);\n+let currentRoleNames = currentRoles.map(roleIdToName);\n+\n+const defaultManageRoles = ['admin', 'data-hub-environment-manager'].map((roleName) => String(xdmp.role(roleName)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68f16495f7c1ce4e43a31305bfcf762da58264cc"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5MjAzMg==", "bodyText": "I take that back - xdmp.getCurrentRoles() (and xdmp.roleRoles()) do return all inherited roles.\n@hao1st You don't need to check for \"data-hub-environment-manager\" then.  If a user has that role, then xdmp.getCurrentRoles() will return both \"manage-admin\" and \"security\".\nThe only role that requires special handling is \"admin\", since for a user with only \"admin\", xdmp.getCurrentRoles() will only return \"admin\".", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r387692032", "createdAt": "2020-03-04T14:15:05Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/security/getAuthorities.sjs", "diffHunk": "@@ -15,14 +15,49 @@\n  */\n 'use strict';\n \n-// TODO This is just stubbed out, a real implementation is needed.\n-\n-let response = {\n-  \"authorities\": [\n-    \"canInstallDataHub\",\n-    \"canReadLoadData\",\n-    \"canWriteLoadData\"\n-  ]\n+const Artifacts = require('/data-hub/5/artifacts/core.sjs');\n+const roleIdToName = (roleID) => xdmp.roleName(roleID);\n+const currentRoles = xdmp.getCurrentRoles().toArray().map(String);\n+let currentRoleNames = currentRoles.map(roleIdToName);\n+\n+const defaultManageRoles = ['admin', 'data-hub-environment-manager'].map((roleName) => String(xdmp.role(roleName)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI4ODgzNQ=="}, "originalCommit": {"oid": "68f16495f7c1ce4e43a31305bfcf762da58264cc"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5MDk5Mw==", "bodyText": "@rjrudin if the user has only \"data-hub-portal-security-admin\" role,  should we give \"canInstallDataHub\" authority?", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r388390993", "createdAt": "2020-03-05T16:00:51Z", "author": {"login": "hao1st"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/security/getAuthorities.sjs", "diffHunk": "@@ -15,14 +15,49 @@\n  */\n 'use strict';\n \n-// TODO This is just stubbed out, a real implementation is needed.\n-\n-let response = {\n-  \"authorities\": [\n-    \"canInstallDataHub\",\n-    \"canReadLoadData\",\n-    \"canWriteLoadData\"\n-  ]\n+const Artifacts = require('/data-hub/5/artifacts/core.sjs');\n+const roleIdToName = (roleID) => xdmp.roleName(roleID);\n+const currentRoles = xdmp.getCurrentRoles().toArray().map(String);\n+let currentRoleNames = currentRoles.map(roleIdToName);\n+\n+const defaultManageRoles = ['admin', 'data-hub-environment-manager'].map((roleName) => String(xdmp.role(roleName)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI4ODgzNQ=="}, "originalCommit": {"oid": "68f16495f7c1ce4e43a31305bfcf762da58264cc"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5NTI1OQ==", "bodyText": "@ryanjdew @rjrudin If the user has \"admin\" role, all the canRead{artifactType} and canWrite{artifactType} are false. Only \"canInstallDataHub\" is the authortity. It does not seem right. I mean that \"cores.sjs\" also needs to do special handling for \"admin\" role?\nIf we will use @secured annotation to special one role, it should make sure \"authorities\" includes all the authoritzed roles for a special user.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r388395259", "createdAt": "2020-03-05T16:07:05Z", "author": {"login": "hao1st"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/security/getAuthorities.sjs", "diffHunk": "@@ -15,14 +15,49 @@\n  */\n 'use strict';\n \n-// TODO This is just stubbed out, a real implementation is needed.\n-\n-let response = {\n-  \"authorities\": [\n-    \"canInstallDataHub\",\n-    \"canReadLoadData\",\n-    \"canWriteLoadData\"\n-  ]\n+const Artifacts = require('/data-hub/5/artifacts/core.sjs');\n+const roleIdToName = (roleID) => xdmp.roleName(roleID);\n+const currentRoles = xdmp.getCurrentRoles().toArray().map(String);\n+let currentRoleNames = currentRoles.map(roleIdToName);\n+\n+const defaultManageRoles = ['admin', 'data-hub-environment-manager'].map((roleName) => String(xdmp.role(roleName)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI4ODgzNQ=="}, "originalCommit": {"oid": "68f16495f7c1ce4e43a31305bfcf762da58264cc"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQwMTE5Mw==", "bodyText": "We don't care if the user has \"data-hub-portal-security-admin\" - that role is one of an infinite number of ways that a user may inherit manage-admin and security. All we care about is if the user has both manage-admin and security.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r388401193", "createdAt": "2020-03-05T16:15:59Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/security/getAuthorities.sjs", "diffHunk": "@@ -15,14 +15,49 @@\n  */\n 'use strict';\n \n-// TODO This is just stubbed out, a real implementation is needed.\n-\n-let response = {\n-  \"authorities\": [\n-    \"canInstallDataHub\",\n-    \"canReadLoadData\",\n-    \"canWriteLoadData\"\n-  ]\n+const Artifacts = require('/data-hub/5/artifacts/core.sjs');\n+const roleIdToName = (roleID) => xdmp.roleName(roleID);\n+const currentRoles = xdmp.getCurrentRoles().toArray().map(String);\n+let currentRoleNames = currentRoles.map(roleIdToName);\n+\n+const defaultManageRoles = ['admin', 'data-hub-environment-manager'].map((roleName) => String(xdmp.role(roleName)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI4ODgzNQ=="}, "originalCommit": {"oid": "68f16495f7c1ce4e43a31305bfcf762da58264cc"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQwMTY2NQ==", "bodyText": "Re: the admin role - IMO, the design should be that if the user has the admin role, then the user gains all authorities. That seems like the expected and intuitive approach, along with being consistent with how the admin role works within ML.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r388401665", "createdAt": "2020-03-05T16:16:42Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/security/getAuthorities.sjs", "diffHunk": "@@ -15,14 +15,49 @@\n  */\n 'use strict';\n \n-// TODO This is just stubbed out, a real implementation is needed.\n-\n-let response = {\n-  \"authorities\": [\n-    \"canInstallDataHub\",\n-    \"canReadLoadData\",\n-    \"canWriteLoadData\"\n-  ]\n+const Artifacts = require('/data-hub/5/artifacts/core.sjs');\n+const roleIdToName = (roleID) => xdmp.roleName(roleID);\n+const currentRoles = xdmp.getCurrentRoles().toArray().map(String);\n+let currentRoleNames = currentRoles.map(roleIdToName);\n+\n+const defaultManageRoles = ['admin', 'data-hub-environment-manager'].map((roleName) => String(xdmp.role(roleName)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI4ODgzNQ=="}, "originalCommit": {"oid": "68f16495f7c1ce4e43a31305bfcf762da58264cc"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxMjMzMQ==", "bodyText": "@rjrudin the following response for \"admin\" is correct? As we talked before, we will remove the roles once UI starts to respect authorities.\n{\n\"authorities\": [\n\"canInstallDataHub\"\n], \n\"roles\": [\n\"data-hub-environment-manager\", \n\"data-hub-mapping-reader\", \n\"data-hub-module-writer\", \n\"data-hub-admin-role\", \n\"data-hub-module-reader\", \n\"data-hub-entity-model-reader\", \n\"data-hub-explorer-architect\", \n\"data-hub-security-admin\", \n\"data-hub-flow-reader\", \n\"data-hub-step-definition-writer\", \n\"data-hub-operator\", \n\"data-hub-mapping-writer\", \n\"data-hub-admin\", \n\"data-hub-load-data-writer\", \n\"data-hub-job-reader\", \n\"data-hub-job-internal\", \n\"data-hub-monitor\", \n\"data-hub-entity-model-writer\", \n\"data-hub-developer\", \n\"data-hub-portal-security-admin\", \n\"data-hub-load-data-reader\", \n\"data-hub-step-definition-reader\", \n\"data-hub-flow-writer\"\n]\n}", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r388412331", "createdAt": "2020-03-05T16:32:48Z", "author": {"login": "hao1st"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/security/getAuthorities.sjs", "diffHunk": "@@ -15,14 +15,49 @@\n  */\n 'use strict';\n \n-// TODO This is just stubbed out, a real implementation is needed.\n-\n-let response = {\n-  \"authorities\": [\n-    \"canInstallDataHub\",\n-    \"canReadLoadData\",\n-    \"canWriteLoadData\"\n-  ]\n+const Artifacts = require('/data-hub/5/artifacts/core.sjs');\n+const roleIdToName = (roleID) => xdmp.roleName(roleID);\n+const currentRoles = xdmp.getCurrentRoles().toArray().map(String);\n+let currentRoleNames = currentRoles.map(roleIdToName);\n+\n+const defaultManageRoles = ['admin', 'data-hub-environment-manager'].map((roleName) => String(xdmp.role(roleName)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI4ODgzNQ=="}, "originalCommit": {"oid": "68f16495f7c1ce4e43a31305bfcf762da58264cc"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQyMTAyMg==", "bodyText": "If that's the complete set of authorities and DHF-related roles, then yes, it's correct. With the assumption that roles goes away very soon.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r388421022", "createdAt": "2020-03-05T16:46:08Z", "author": {"login": "rjrudin"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/security/getAuthorities.sjs", "diffHunk": "@@ -15,14 +15,49 @@\n  */\n 'use strict';\n \n-// TODO This is just stubbed out, a real implementation is needed.\n-\n-let response = {\n-  \"authorities\": [\n-    \"canInstallDataHub\",\n-    \"canReadLoadData\",\n-    \"canWriteLoadData\"\n-  ]\n+const Artifacts = require('/data-hub/5/artifacts/core.sjs');\n+const roleIdToName = (roleID) => xdmp.roleName(roleID);\n+const currentRoles = xdmp.getCurrentRoles().toArray().map(String);\n+let currentRoleNames = currentRoles.map(roleIdToName);\n+\n+const defaultManageRoles = ['admin', 'data-hub-environment-manager'].map((roleName) => String(xdmp.role(roleName)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI4ODgzNQ=="}, "originalCommit": {"oid": "68f16495f7c1ce4e43a31305bfcf762da58264cc"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTI5NTA1OnYy", "diffSide": "RIGHT", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/security/getAuthorities.sjs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTowMjoxNVrOFxWZCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTowMjoxNVrOFxWZCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI5MTQwMQ==", "bodyText": "This should be hasManageAdminRole.\nWith manageRolesMustAllMatched are we trying to check if a role has both manage-admin & security? If so, hasManageAdminAndSecurity sounds better to me.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r387291401", "createdAt": "2020-03-03T21:02:15Z", "author": {"login": "bsrikan"}, "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/security/getAuthorities.sjs", "diffHunk": "@@ -15,14 +15,49 @@\n  */\n 'use strict';\n \n-// TODO This is just stubbed out, a real implementation is needed.\n-\n-let response = {\n-  \"authorities\": [\n-    \"canInstallDataHub\",\n-    \"canReadLoadData\",\n-    \"canWriteLoadData\"\n-  ]\n+const Artifacts = require('/data-hub/5/artifacts/core.sjs');\n+const roleIdToName = (roleID) => xdmp.roleName(roleID);\n+const currentRoles = xdmp.getCurrentRoles().toArray().map(String);\n+let currentRoleNames = currentRoles.map(roleIdToName);\n+\n+const defaultManageRoles = ['admin', 'data-hub-environment-manager'].map((roleName) => String(xdmp.role(roleName)));\n+const manageRolesMustAllMatched = ['manage-admin', 'security'].map((roleName) => String(xdmp.role(roleName)));\n+\n+let hasManagerRole = defaultManageRoles.some((role) => currentRoles.includes(role));\n+if (!hasManagerRole) {\n+  hasManagerRole = manageRolesMustAllMatched.every((role) => currentRoles.indexOf(role) !== -1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68f16495f7c1ce4e43a31305bfcf762da58264cc"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTMxNjY5OnYy", "diffSide": "RIGHT", "path": "one-ui/src/test/java/com/marklogic/hub/oneui/AuthTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTowOToyMlrOFxWmkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjoxNTo1MVrOFxhGwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI5NDg2Nw==", "bodyText": "@ryanjdew we are still at the early stages of 5.3 so maybe we can change this now. Is hasManagePrivileges telling us if the user has manage-admin role? If so, then shouldnt we name it that way. I am saying this because data-hub-operator has manage privilege, will this flag then be true.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r387294867", "createdAt": "2020-03-03T21:09:22Z", "author": {"login": "bsrikan"}, "path": "one-ui/src/test/java/com/marklogic/hub/oneui/AuthTest.java", "diffHunk": "@@ -46,14 +48,67 @@ void loginWithInvalidCredentials() throws Exception {\n     }\n \n     @Test\n-    void loginWithValidCredentialsAndLogout() throws Exception {\n+    void loginWithValidAdminAndLogout() throws Exception {\n         String payload = getLoginPayload(\"admin\", \"admin\");\n         final MockHttpSession session[] = new MockHttpSession[1];\n         // Login\n         mockMvc\n             .perform(post(LOGIN_URL).contentType(MediaType.APPLICATION_JSON).content(payload))\n-            .andDo(\n-                result -> session[0] = (MockHttpSession) result.getRequest().getSession())\n+            .andDo (\n+                result -> {\n+                    session[0] = (MockHttpSession) result.getRequest().getSession();\n+                    assertTrue(result.getResponse().getContentAsString().contains(\"\\\"hasManagePrivileges\\\":true\"));\n+                })\n+            .andExpect(status().isOk());\n+\n+        assertFalse(session[0].isInvalid());\n+\n+        // Logout\n+        mockMvc.perform(get(LOGOUT_URL).session(session[0]))\n+            .andExpect(status().isOk());\n+\n+        assertTrue(session[0].isInvalid());\n+    }\n+\n+    @Test\n+    void loginWithDataHubManagerAndLogout() throws Exception {\n+        String payload = getLoginPayload(\"data-hub-environment-manager-user\", \"data-hub-environment-manager-user\");\n+        final MockHttpSession session[] = new MockHttpSession[1];\n+        // Login\n+        mockMvc\n+            .perform(post(LOGIN_URL).contentType(MediaType.APPLICATION_JSON).content(payload))\n+            .andDo (\n+                result -> {\n+                    session[0] = (MockHttpSession) result.getRequest().getSession();\n+                    String strResponse = result.getResponse().getContentAsString();\n+                    ObjectMapper mapper = new ObjectMapper();\n+                    JsonNode jsonResonse = mapper.readTree(strResponse);\n+                    assertTrue(jsonResonse.get(\"roles\").isArray());\n+                    assertTrue(strResponse.contains(\"\\\"hasManagePrivileges\\\":true\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68f16495f7c1ce4e43a31305bfcf762da58264cc"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2Njk0NA==", "bodyText": "It isn't explicitly \"has a role.\" It is depending on whether we have access to the Data Service endpoint it is really either doesn't get forbidden from the manage REST app server or if the Data Service endpoint is available it was checking the role, but now should check \"canInstallDataHub\".", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r387466944", "createdAt": "2020-03-04T06:15:51Z", "author": {"login": "ryanjdew"}, "path": "one-ui/src/test/java/com/marklogic/hub/oneui/AuthTest.java", "diffHunk": "@@ -46,14 +48,67 @@ void loginWithInvalidCredentials() throws Exception {\n     }\n \n     @Test\n-    void loginWithValidCredentialsAndLogout() throws Exception {\n+    void loginWithValidAdminAndLogout() throws Exception {\n         String payload = getLoginPayload(\"admin\", \"admin\");\n         final MockHttpSession session[] = new MockHttpSession[1];\n         // Login\n         mockMvc\n             .perform(post(LOGIN_URL).contentType(MediaType.APPLICATION_JSON).content(payload))\n-            .andDo(\n-                result -> session[0] = (MockHttpSession) result.getRequest().getSession())\n+            .andDo (\n+                result -> {\n+                    session[0] = (MockHttpSession) result.getRequest().getSession();\n+                    assertTrue(result.getResponse().getContentAsString().contains(\"\\\"hasManagePrivileges\\\":true\"));\n+                })\n+            .andExpect(status().isOk());\n+\n+        assertFalse(session[0].isInvalid());\n+\n+        // Logout\n+        mockMvc.perform(get(LOGOUT_URL).session(session[0]))\n+            .andExpect(status().isOk());\n+\n+        assertTrue(session[0].isInvalid());\n+    }\n+\n+    @Test\n+    void loginWithDataHubManagerAndLogout() throws Exception {\n+        String payload = getLoginPayload(\"data-hub-environment-manager-user\", \"data-hub-environment-manager-user\");\n+        final MockHttpSession session[] = new MockHttpSession[1];\n+        // Login\n+        mockMvc\n+            .perform(post(LOGIN_URL).contentType(MediaType.APPLICATION_JSON).content(payload))\n+            .andDo (\n+                result -> {\n+                    session[0] = (MockHttpSession) result.getRequest().getSession();\n+                    String strResponse = result.getResponse().getContentAsString();\n+                    ObjectMapper mapper = new ObjectMapper();\n+                    JsonNode jsonResonse = mapper.readTree(strResponse);\n+                    assertTrue(jsonResonse.get(\"roles\").isArray());\n+                    assertTrue(strResponse.contains(\"\\\"hasManagePrivileges\\\":true\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI5NDg2Nw=="}, "originalCommit": {"oid": "68f16495f7c1ce4e43a31305bfcf762da58264cc"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTU1MjYyOnYy", "diffSide": "RIGHT", "path": "one-ui/src/main/java/com/marklogic/hub/oneui/auth/AuthenticationFilter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMzoxODowNVrOFy4XmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNTo0OTowNFrOFy9gjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg5NjY2NA==", "bodyText": "Instead of this special case for this one capability, just add a method to AuthenticationToken like this:\n\nboolean hasAuthority(String authorityName);\n\nLoginFilter can then just call token.hasAuthority(\"canInstallDataHub\")\nThen you don't need the boolean array of a single value.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r388896664", "createdAt": "2020-03-06T13:18:05Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/oneui/auth/AuthenticationFilter.java", "diffHunk": "@@ -137,17 +141,38 @@ protected AuthenticationToken authenticateUser(String username, String password)\n      * - see https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#appendix-faq-role-prefix.\n      *\n      * @param stagingClient\n+     * @param roles\n+     * @param canInstallDataHub\n      * @return\n      */\n-    protected List<GrantedAuthority> getAuthoritiesForAuthenticatedUser(DatabaseClient stagingClient) {\n-        List<GrantedAuthority> authorities = new ArrayList<>();\n+    protected Pair<List<GrantedAuthority>, ArrayNode> getAuthoritiesForAuthenticatedUser(DatabaseClient stagingClient, ArrayNode[] roles, boolean[] canInstallDataHub) {\n+        List<GrantedAuthority> grantAuthorities = new ArrayList<>();\n+        ArrayNode authorities = null;\n         JsonNode response = SecurityService.on(stagingClient).getAuthorities();\n-        if (response != null && response.has(\"authorities\")) {\n-            response.get(\"authorities\").iterator().forEachRemaining(node -> {\n-                authorities.add(new SimpleGrantedAuthority(\"ROLE_\" + node.asText()));\n-            });\n+        if (response != null) {\n+            if (response.has(\"authorities\")) {\n+                response.get(\"authorities\").iterator().forEachRemaining(node -> {\n+                    String authority = node.asText();\n+                    if (\"canInstallDataHub\".equals(authority))  {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e20f191fcfc19d80fc9bcb0589c5b1fd724f9b4"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk3Nzc0MA==", "bodyText": "@rjrudin I thought about using another method before,.But as we discussed, we do not need to have hasManagerPrivileges after UI change. And I will change the method to remove the canInstallDataHub array.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r388977740", "createdAt": "2020-03-06T15:43:29Z", "author": {"login": "hao1st"}, "path": "one-ui/src/main/java/com/marklogic/hub/oneui/auth/AuthenticationFilter.java", "diffHunk": "@@ -137,17 +141,38 @@ protected AuthenticationToken authenticateUser(String username, String password)\n      * - see https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#appendix-faq-role-prefix.\n      *\n      * @param stagingClient\n+     * @param roles\n+     * @param canInstallDataHub\n      * @return\n      */\n-    protected List<GrantedAuthority> getAuthoritiesForAuthenticatedUser(DatabaseClient stagingClient) {\n-        List<GrantedAuthority> authorities = new ArrayList<>();\n+    protected Pair<List<GrantedAuthority>, ArrayNode> getAuthoritiesForAuthenticatedUser(DatabaseClient stagingClient, ArrayNode[] roles, boolean[] canInstallDataHub) {\n+        List<GrantedAuthority> grantAuthorities = new ArrayList<>();\n+        ArrayNode authorities = null;\n         JsonNode response = SecurityService.on(stagingClient).getAuthorities();\n-        if (response != null && response.has(\"authorities\")) {\n-            response.get(\"authorities\").iterator().forEachRemaining(node -> {\n-                authorities.add(new SimpleGrantedAuthority(\"ROLE_\" + node.asText()));\n-            });\n+        if (response != null) {\n+            if (response.has(\"authorities\")) {\n+                response.get(\"authorities\").iterator().forEachRemaining(node -> {\n+                    String authority = node.asText();\n+                    if (\"canInstallDataHub\".equals(authority))  {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg5NjY2NA=="}, "originalCommit": {"oid": "8e20f191fcfc19d80fc9bcb0589c5b1fd724f9b4"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk4MDg3Nw==", "bodyText": "Okay, that's fair.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r388980877", "createdAt": "2020-03-06T15:49:04Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/oneui/auth/AuthenticationFilter.java", "diffHunk": "@@ -137,17 +141,38 @@ protected AuthenticationToken authenticateUser(String username, String password)\n      * - see https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#appendix-faq-role-prefix.\n      *\n      * @param stagingClient\n+     * @param roles\n+     * @param canInstallDataHub\n      * @return\n      */\n-    protected List<GrantedAuthority> getAuthoritiesForAuthenticatedUser(DatabaseClient stagingClient) {\n-        List<GrantedAuthority> authorities = new ArrayList<>();\n+    protected Pair<List<GrantedAuthority>, ArrayNode> getAuthoritiesForAuthenticatedUser(DatabaseClient stagingClient, ArrayNode[] roles, boolean[] canInstallDataHub) {\n+        List<GrantedAuthority> grantAuthorities = new ArrayList<>();\n+        ArrayNode authorities = null;\n         JsonNode response = SecurityService.on(stagingClient).getAuthorities();\n-        if (response != null && response.has(\"authorities\")) {\n-            response.get(\"authorities\").iterator().forEachRemaining(node -> {\n-                authorities.add(new SimpleGrantedAuthority(\"ROLE_\" + node.asText()));\n-            });\n+        if (response != null) {\n+            if (response.has(\"authorities\")) {\n+                response.get(\"authorities\").iterator().forEachRemaining(node -> {\n+                    String authority = node.asText();\n+                    if (\"canInstallDataHub\".equals(authority))  {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg5NjY2NA=="}, "originalCommit": {"oid": "8e20f191fcfc19d80fc9bcb0589c5b1fd724f9b4"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTU2MjMzOnYy", "diffSide": "RIGHT", "path": "one-ui/src/main/java/com/marklogic/hub/oneui/auth/LoginHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMzoyMToyMlrOFy4dlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNTo0OTowOFrOFy9g1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg5ODE5OA==", "bodyText": "\"Authorites\" is misspelled, but if it were spelled correctly, you'd get a compilation error because \"getAuthorities\" already exists.\nWe don't need to store the authorities in two separate fields in AuthenticationToken. Instead, just add a \"getAuthorityNames\" method that returns a List. It will iterate over each GrantedAuthority and get its value and remove the \"ROLE_\", since the UI doesn't want to deal with that.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r388898198", "createdAt": "2020-03-06T13:21:22Z", "author": {"login": "rjrudin"}, "path": "one-ui/src/main/java/com/marklogic/hub/oneui/auth/LoginHandler.java", "diffHunk": "@@ -47,6 +47,9 @@ public void onAuthenticationSuccess(HttpServletRequest request, HttpServletRespo\n         if (token.getRoles() != null) {\n             jsonResponse.putArray(\"roles\").addAll(token.getRoles());\n         }\n+        if (token.getAuthorites() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e20f191fcfc19d80fc9bcb0589c5b1fd724f9b4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk4MDk0OQ==", "bodyText": "oops, i did not notice that. and will modify it.", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3639#discussion_r388980949", "createdAt": "2020-03-06T15:49:08Z", "author": {"login": "hao1st"}, "path": "one-ui/src/main/java/com/marklogic/hub/oneui/auth/LoginHandler.java", "diffHunk": "@@ -47,6 +47,9 @@ public void onAuthenticationSuccess(HttpServletRequest request, HttpServletRespo\n         if (token.getRoles() != null) {\n             jsonResponse.putArray(\"roles\").addAll(token.getRoles());\n         }\n+        if (token.getAuthorites() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg5ODE5OA=="}, "originalCommit": {"oid": "8e20f191fcfc19d80fc9bcb0589c5b1fd724f9b4"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3594, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}