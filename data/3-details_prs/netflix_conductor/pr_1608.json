{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0NzUxMzY3", "number": 1608, "title": "change nonterminal task statuses to SKIPPED when a TERMINATE task executes", "bodyText": "Currently when a TERMINATE task executes, it terminates the workflow early but leaves any tasks that were SCHEDULED or IN_PROGRESS as is; therefore they might still be pollable. This change will modify those tasks and change their statuses to SKIPPED. For some reason, when WAIT task status is changed from  IN_PROGRESS to SKIPPED, updating the task happens and it gets reverted back to IN_PROGRESS but that does not really cause any issues.", "createdAt": "2020-03-27T13:23:32Z", "url": "https://github.com/Netflix/conductor/pull/1608", "merged": true, "mergeCommit": {"oid": "c538151efae82939ff06a5a0f06c18c1001a519e"}, "closed": true, "closedAt": "2020-07-09T17:26:00Z", "author": {"login": "rickfish"}, "timelineItems": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRwhB_gH2gAyMzk0NzUxMzY3OjM5ZTc0ZjYxMTRiMjJkMWM2Yjk5YTkwMTk3NTNiMDRjZWQ3NTFiYjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABczOVT1AH2gAyMzk0NzUxMzY3OjQ5ZjI1ZWYyMDcyNjg4ZTUyYTQ4ZjFlZTk1Y2EyZDQyYTRmZDNhNzI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "39e74f6114b22d1c6b99a9019753b04ced751bb5", "author": {"user": null}, "url": "https://github.com/Netflix/conductor/commit/39e74f6114b22d1c6b99a9019753b04ced751bb5", "committedDate": "2020-03-27T13:14:19Z", "message": "change non-terminal task statuses to SKIPPED when a TERMINATE task executes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b677f8a64ea26e33cfa28fd08b3de248adc69466", "author": {"user": null}, "url": "https://github.com/Netflix/conductor/commit/b677f8a64ea26e33cfa28fd08b3de248adc69466", "committedDate": "2020-03-31T11:36:58Z", "message": "Merge branch 'dev' of https://github.com/Netflix/conductor into terminate-task-handle-nonterminal-tasks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a180038382566254439838054500c1a9439d63f", "author": {"user": null}, "url": "https://github.com/Netflix/conductor/commit/7a180038382566254439838054500c1a9439d63f", "committedDate": "2020-03-31T11:42:37Z", "message": "handle subworkflows that are still running when TERMINATE task executes in parent workflow"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2ODkwMzM3", "url": "https://github.com/Netflix/conductor/pull/1608#pullrequestreview-386890337", "createdAt": "2020-04-03T01:55:29Z", "commit": {"oid": "7a180038382566254439838054500c1a9439d63f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMTo1NTozMFrOGACf-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMTo1NTozMFrOGACf-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY5NDEzOA==", "bodyText": "In the case of sub workflows, would it be better to terminate the sub workflow instead? The reason could be that the parent workflow was terminated using TERMINATE task.", "url": "https://github.com/Netflix/conductor/pull/1608#discussion_r402694138", "createdAt": "2020-04-03T01:55:30Z", "author": {"login": "apanicker-nflx"}, "path": "core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "diffHunk": "@@ -985,6 +987,26 @@ public boolean decide(String workflowId) {\n                                 workflow.setStatus(workflowInstance.getStatus());\n                                 workflow.setOutput(workflowInstance.getOutput());\n                                 deciderService.externalizeWorkflowData(workflow);\n+                                /*\n+                                 * The TERMINATE task completes the workflow but does not do anything with SCHEDULED or IN_PROGRESS tasks to complete them\n+                                 */\n+                                for(Task workflowTask : workflow.getTasks()) {\n+                                \tif(workflowTask != task && !workflowTask.getStatus().isTerminal()) {\n+                                \t\tworkflowTask.setStatus(SKIPPED);\n+                                \t\ttasksToBeUpdated.add(workflowTask);\n+                                \t}\n+                                }\n+                                /*\n+                                 * Now find nested subworkflows that also need to have their tasks skipped", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a180038382566254439838054500c1a9439d63f"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b68abd4d979a3d14325dc90c088b529490fb4b4a", "author": {"user": null}, "url": "https://github.com/Netflix/conductor/commit/b68abd4d979a3d14325dc90c088b529490fb4b4a", "committedDate": "2020-04-09T17:06:10Z", "message": "Merge branch 'master' of https://github.com/Netflix/conductor into terminate-task-handle-nonterminal-tasks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e066d95c6cee046913eabdb26ad66ff8f638269", "author": {"user": null}, "url": "https://github.com/Netflix/conductor/commit/8e066d95c6cee046913eabdb26ad66ff8f638269", "committedDate": "2020-04-09T17:34:27Z", "message": "Merge branch 'dev' of https://github.com/Netflix/conductor into terminate-task-handle-nonterminal-tasks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e20ff1b40c3d1ea22d617e8c9b88a34f5d251fa1", "author": {"user": null}, "url": "https://github.com/Netflix/conductor/commit/e20ff1b40c3d1ea22d617e8c9b88a34f5d251fa1", "committedDate": "2020-04-09T20:22:01Z", "message": "added subworkflow testing to the terminate task testcase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cda751672c4657707378f89f51df1d64ee9cf4ca", "author": {"user": null}, "url": "https://github.com/Netflix/conductor/commit/cda751672c4657707378f89f51df1d64ee9cf4ca", "committedDate": "2020-04-09T23:38:43Z", "message": "added testing that the subworkflow has a valid status and its task also has a valid statusin the terminate task testcase"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMzg1OTc1", "url": "https://github.com/Netflix/conductor/pull/1608#pullrequestreview-393385975", "createdAt": "2020-04-15T00:41:58Z", "commit": {"oid": "cda751672c4657707378f89f51df1d64ee9cf4ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMDo0MTo1OFrOGFl1OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMDo0MTo1OFrOGFl1OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUxNTg5Ng==", "bodyText": "Since this is a workflow with wait task, this method can be named createWorkflowWithWaitTask() for better clarity.", "url": "https://github.com/Netflix/conductor/pull/1608#discussion_r408515896", "createdAt": "2020-04-15T00:41:58Z", "author": {"login": "apanicker-nflx"}, "path": "test-harness/src/test/java/com/netflix/conductor/tests/integration/AbstractWorkflowServiceTest.java", "diffHunk": "@@ -5272,64 +5274,43 @@ public void testLambda() {\n \n     @Test\n     public void testTerminateTaskWithCompletedStatus() {\n-        WorkflowDef workflowDef = new WorkflowDef();\n-        workflowDef.setName(\"test_terminate_task_wf\");\n-        workflowDef.setSchemaVersion(2);\n-\n-        Map<String, Object> lambdaTaskInputParams = new HashMap<>();\n-        lambdaTaskInputParams.put(\"input\", \"${workflow.input}\");\n-        lambdaTaskInputParams.put(\"scriptExpression\", \"if ($.input.a==1){return {testvalue: true}} else{return {testvalue: false}}\");\n+    \ttestTerminateTask(WorkflowStatus.COMPLETED);\n+    }\n \n-        WorkflowTask lambdaWorkflowTask = new WorkflowTask();\n-        lambdaWorkflowTask.setWorkflowTaskType(TaskType.LAMBDA);\n-        lambdaWorkflowTask.setName(\"lambda\");\n-        lambdaWorkflowTask.setInputParameters(lambdaTaskInputParams);\n-        lambdaWorkflowTask.setTaskReferenceName(\"lambda0\");\n+    @Test\n+    public void testTerminateTaskWithFailedStatus() {\n+    \ttestTerminateTask(WorkflowStatus.FAILED);\n+    }\n \n-        Map<String, Object> terminateTaskInputParams = new HashMap<>();\n-        terminateTaskInputParams.put(Terminate.getTerminationStatusParameter(), \"COMPLETED\");\n-        terminateTaskInputParams.put(Terminate.getTerminationWorkflowOutputParameter(), \"${lambda0.output}\");\n+    private WorkflowDef createSubworkflowDefWithWaitTask() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cda751672c4657707378f89f51df1d64ee9cf4ca"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMzg2OTI0", "url": "https://github.com/Netflix/conductor/pull/1608#pullrequestreview-393386924", "createdAt": "2020-04-15T00:45:01Z", "commit": {"oid": "cda751672c4657707378f89f51df1d64ee9cf4ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMDo0NTowMVrOGFl4fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMDo0NTowMVrOGFl4fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUxNjczMw==", "bodyText": "The last task in the left fork is the terminate task, however, the join is set to an intermediate task (wait). This looks incorrect.", "url": "https://github.com/Netflix/conductor/pull/1608#discussion_r408516733", "createdAt": "2020-04-15T00:45:01Z", "author": {"login": "apanicker-nflx"}, "path": "test-harness/src/test/java/com/netflix/conductor/tests/integration/AbstractWorkflowServiceTest.java", "diffHunk": "@@ -5350,11 +5337,28 @@ public void testTerminateTaskWithFailedStatus() {\n         terminateWorkflowTask.setInputParameters(terminateTaskInputParams);\n         terminateWorkflowTask.setTaskReferenceName(\"terminate0\");\n \n-        WorkflowTask workflowTask2 = new WorkflowTask();\n-        workflowTask2.setName(\"junit_task_2\");\n-        workflowTask2.setTaskReferenceName(\"t2\");\n+        // right fork\n+        WorkflowTask subWorkflow = new WorkflowTask();\n+        subWorkflow.setType(SUB_WORKFLOW.name());\n+        SubWorkflowParams sw = new SubWorkflowParams();\n+        sw.setName(subworkflowDef.getName());\n+        subWorkflow.setSubWorkflowParam(sw);\n+        subWorkflow.setTaskReferenceName(\"sw1\");\n+\n+        fanoutTask.getForkTasks().add(Arrays.asList(subWorkflow));\n+        fanoutTask.getForkTasks().add(Arrays.asList(lambdaWorkflowTask, waitWorkflowTask, terminateWorkflowTask));\n+\n+        // join task\n+        WorkflowTask joinTask = new WorkflowTask();\n+        joinTask.setType(TaskType.JOIN.name());\n+        joinTask.setTaskReferenceName(\"fanouttask_join\");\n+        joinTask.setJoinOn(Arrays.asList(\"sw1\", \"leftfork-wait0\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cda751672c4657707378f89f51df1d64ee9cf4ca"}, "originalPosition": 145}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c00498dcd2571ad794ee88b335b1d0d5bf29df5", "author": {"user": null}, "url": "https://github.com/Netflix/conductor/commit/4c00498dcd2571ad794ee88b335b1d0d5bf29df5", "committedDate": "2020-04-15T14:16:55Z", "message": "Merge branch 'dev' of https://github.com/Netflix/conductor into terminate-task-handle-nonterminal-tasks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81052d4c6ee0a95b62bf6ed919dc54df82264d25", "author": {"user": null}, "url": "https://github.com/Netflix/conductor/commit/81052d4c6ee0a95b62bf6ed919dc54df82264d25", "committedDate": "2020-04-15T15:21:11Z", "message": "for terminate task testing, add simple task to subworkflow and make the join task wait on the terminate task"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNDAyMDM3", "url": "https://github.com/Netflix/conductor/pull/1608#pullrequestreview-401402037", "createdAt": "2020-04-27T23:41:57Z", "commit": {"oid": "81052d4c6ee0a95b62bf6ed919dc54df82264d25"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4059393e455e6d96564375c6919523793f702221", "author": {"user": null}, "url": "https://github.com/Netflix/conductor/commit/4059393e455e6d96564375c6919523793f702221", "committedDate": "2020-05-04T17:00:08Z", "message": "complete/fail workflow quicker (bypass decider) on a TERMINATE task"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43491539bbb1bdee7ec88ac22c647cab4eef5619", "author": {"user": null}, "url": "https://github.com/Netflix/conductor/commit/43491539bbb1bdee7ec88ac22c647cab4eef5619", "committedDate": "2020-05-04T17:06:21Z", "message": "complete/fail workflow quicker (bypass decider) on a TERMINATE task"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b816dbd76011bf02aae22d0070ead7bc5cc7859", "author": {"user": null}, "url": "https://github.com/Netflix/conductor/commit/5b816dbd76011bf02aae22d0070ead7bc5cc7859", "committedDate": "2020-05-04T17:07:35Z", "message": "complete/fail workflow quicker (bypass decider) on a TERMINATE task"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48cc0783553b643d53d594afd873ae6526aa79ea", "author": {"user": {"login": "rickfish", "name": null}}, "url": "https://github.com/Netflix/conductor/commit/48cc0783553b643d53d594afd873ae6526aa79ea", "committedDate": "2020-05-04T17:39:36Z", "message": "Merge branch 'dev' into terminate-task-handle-nonterminal-tasks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78682a73c5eda54f52a765a1ddcedbba464245e3", "author": {"user": null}, "url": "https://github.com/Netflix/conductor/commit/78682a73c5eda54f52a765a1ddcedbba464245e3", "committedDate": "2020-05-04T21:41:38Z", "message": "complete/fail workflow quicker (bypass decider) on a TERMINATE task"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8579a60ea3d108ca525e2c93fda2ceddb322bdad", "author": {"user": null}, "url": "https://github.com/Netflix/conductor/commit/8579a60ea3d108ca525e2c93fda2ceddb322bdad", "committedDate": "2020-05-04T21:42:36Z", "message": "Merge branch 'terminate-task-handle-nonterminal-tasks' of https://github.com/rickfish/conductor into terminate-task-handle-nonterminal-tasks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f05fba9a015ff9e8940d18f3bc34d8fe2e47c805", "author": {"user": null}, "url": "https://github.com/Netflix/conductor/commit/f05fba9a015ff9e8940d18f3bc34d8fe2e47c805", "committedDate": "2020-07-01T20:14:08Z", "message": "add workflow defs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cb53c0575b097c4405c0953b891cbcef7ac82af", "author": {"user": {"login": "rickfish", "name": null}}, "url": "https://github.com/Netflix/conductor/commit/6cb53c0575b097c4405c0953b891cbcef7ac82af", "committedDate": "2020-07-02T11:42:48Z", "message": "deleted sample json files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26f6bb75870e2904ebbc154d8291c2f2bfa66dda", "author": {"user": {"login": "rickfish", "name": null}}, "url": "https://github.com/Netflix/conductor/commit/26f6bb75870e2904ebbc154d8291c2f2bfa66dda", "committedDate": "2020-07-02T12:03:07Z", "message": "prepare for merge of current dev"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1db5b7aafd1307fc4f4de577e9d4135e9114e25a", "author": {"user": {"login": "rickfish", "name": null}}, "url": "https://github.com/Netflix/conductor/commit/1db5b7aafd1307fc4f4de577e9d4135e9114e25a", "committedDate": "2020-07-02T12:04:12Z", "message": "Merge branch 'dev' of https://github.com/Netflix/conductor into terminate-task-handle-nonterminal-tasks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "342abee796c9f06def4a7c1b6478d85e011bcbbe", "author": {"user": {"login": "rickfish", "name": null}}, "url": "https://github.com/Netflix/conductor/commit/342abee796c9f06def4a7c1b6478d85e011bcbbe", "committedDate": "2020-07-02T12:23:15Z", "message": "fix subworkflows when TERMINATE task is executed and there is a nonterminal subworkflow"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82d88f21cf2b59c0849b60723e61cfb715b15093", "author": {"user": {"login": "rickfish", "name": null}}, "url": "https://github.com/Netflix/conductor/commit/82d88f21cf2b59c0849b60723e61cfb715b15093", "committedDate": "2020-07-03T13:59:36Z", "message": "Added back ending curly brace - not sure how it got deleted"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92d2b36bf9aa03876ffacecf1085ec0fe7dad2e6", "author": {"user": {"login": "rickfish", "name": null}}, "url": "https://github.com/Netflix/conductor/commit/92d2b36bf9aa03876ffacecf1085ec0fe7dad2e6", "committedDate": "2020-07-03T14:41:31Z", "message": "add logging to see what test failed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfe93c84e96ad1545277bed8751882bb1685c669", "author": {"user": {"login": "rickfish", "name": null}}, "url": "https://github.com/Netflix/conductor/commit/bfe93c84e96ad1545277bed8751882bb1685c669", "committedDate": "2020-07-03T15:14:54Z", "message": "remove logging to see what test failed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e45cb69f6ad8b843482717a11344cf2447afd70", "author": {"user": {"login": "rickfish", "name": null}}, "url": "https://github.com/Netflix/conductor/commit/3e45cb69f6ad8b843482717a11344cf2447afd70", "committedDate": "2020-07-03T18:23:16Z", "message": "alter the test for a failure workflow where the workflow was terminated with a TERMINATE task"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09f9b492f6ad9f03ae4ae924ec84d04d9b6979ad", "author": {"user": {"login": "rickfish", "name": null}}, "url": "https://github.com/Netflix/conductor/commit/09f9b492f6ad9f03ae4ae924ec84d04d9b6979ad", "committedDate": "2020-07-03T20:01:04Z", "message": "changed the way to terminate the parent workflow and added back the failureWorkflow tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1NDUyODc0", "url": "https://github.com/Netflix/conductor/pull/1608#pullrequestreview-445452874", "createdAt": "2020-07-09T09:39:31Z", "commit": {"oid": "09f9b492f6ad9f03ae4ae924ec84d04d9b6979ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwOTozOTozMVrOGvJlgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwOTozOTozMVrOGvJlgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA5MzMxMw==", "bodyText": "This exception message: Unable to start system task: is not relevant, as we're not starting any system tasks here.", "url": "https://github.com/Netflix/conductor/pull/1608#discussion_r452093313", "createdAt": "2020-07-09T09:39:31Z", "author": {"login": "kishorebanala"}, "path": "core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "diffHunk": "@@ -985,29 +986,56 @@ public boolean decide(String workflowId) {\n                 if (isSystemTask.and(isNonTerminalTask).test(task)) {\n                     WorkflowSystemTask workflowSystemTask = WorkflowSystemTask.get(task.getTaskType());\n                     Workflow workflowInstance = deciderService.populateWorkflowAndTaskData(workflow);\n-                    if (!workflowSystemTask.isAsync() && workflowSystemTask.execute(workflowInstance, task, this)) {\n-                        // FIXME: temporary hack to workaround TERMINATE task\n-                        if (TERMINATE.name().equals(task.getTaskType())) {\n-                            deciderService.externalizeTaskData(task);\n-                            executionDAOFacade.updateTask(task);\n-                            if (workflowInstance.getStatus().equals(WorkflowStatus.COMPLETED)) {\n-                                completeWorkflow(workflow);\n-                            } else {\n-                                workflow.setStatus(workflowInstance.getStatus());\n-                                terminate(workflow, new TerminateWorkflowException(\"Workflow is FAILED by TERMINATE task: \" + task.getTaskId()));\n+                    try {\n+                        if (!workflowSystemTask.isAsync() && workflowSystemTask.execute(workflowInstance, task, this)) {\n+                            // FIXME: temporary hack to workaround TERMINATE task\n+                            if (TERMINATE.name().equals(task.getTaskType())) {\n+                                deciderService.externalizeTaskData(task);\n+                                executionDAOFacade.updateTask(task);\n+                                workflow.setOutput(workflowInstance.getOutput());\n+                                List<Task> terminateTasksToBeUpdated = new ArrayList<Task>();\n+                                /*\n+                                 * The TERMINATE task completes the workflow but does not do anything with SCHEDULED or IN_PROGRESS tasks to complete them\n+                                 */\n+                                for(Task workflowTask : workflow.getTasks()) {\n+                                \tif(workflowTask != task && !workflowTask.getStatus().isTerminal()) {\n+                                \t\tworkflowTask.setStatus(SKIPPED);\n+                                \t\tterminateTasksToBeUpdated.add(workflowTask);\n+                                \t}\n+                                }\n+                                /*\n+                                 * Now find nested subworkflows that also need to have their tasks skipped\n+                                 */\n+                                for(Task workflowTask : workflow.getTasks()) {\n+                                \tif(TaskType.SUB_WORKFLOW.name().equals(workflowTask.getTaskType()) && StringUtils.isNotBlank(workflowTask.getSubWorkflowId())) {\n+                                   \t\tWorkflow subWorkflow = executionDAOFacade.getWorkflowById(workflowTask.getSubWorkflowId(), true);\n+                                \t\tif(subWorkflow != null) {\n+                                \t\t\tskipTasksAffectedByTerminateTask(subWorkflow);\n+                                \t\t}\n+                                \t}\n+                                }\n+                                executionDAOFacade.updateTasks(terminateTasksToBeUpdated);\n+                                if(workflowInstance.getStatus().equals(WorkflowStatus.COMPLETED)) {\n+                                \tcompleteWorkflow(workflow);\n+                                } else {\n+                                    workflow.setStatus(workflowInstance.getStatus());\n+                                \tterminate(workflow, new TerminateWorkflowException(\"Workflow is FAILED by TERMINATE task: \" + task.getTaskId()));\n+                                }\n+                                return true;\n                             }\n-                            return true;\n-                        }\n-                        deciderService.externalizeTaskData(task);\n-                        tasksToBeUpdated.add(task);\n-                        stateChanged = true;\n-                    } else if (SUB_WORKFLOW.name().equals(task.getTaskType()) && task.getStatus().equals(IN_PROGRESS)) {\n-                        // Verifies and updates the task inplace, based on the Subworkflow and parent Workflow state,\n-                        // and continues with the current decide.\n-                        if (updateParentWorkflow(task, workflow)) {\n+                            deciderService.externalizeTaskData(task);\n                             tasksToBeUpdated.add(task);\n                             stateChanged = true;\n+                        } else if (SUB_WORKFLOW.name().equals(task.getTaskType()) && task.getStatus().equals(IN_PROGRESS)) {\n+                            // Verifies and updates the task inplace, based on the Subworkflow and parent Workflow state,\n+                            // and continues with the current decide.\n+                            if (updateParentWorkflow(task, workflow)) {\n+                                tasksToBeUpdated.add(task);\n+                                stateChanged = true;\n+                            }\n                         }\n+                    } catch (Exception e) {\n+                        throw new ApplicationException(Code.INTERNAL_ERROR, String.format(\"Unable to start system task: %s\", workflowSystemTask.getName()), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09f9b492f6ad9f03ae4ae924ec84d04d9b6979ad"}, "originalPosition": 80}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49f25ef2072688e52a48f1ee95ca2d42a4fd3a72", "author": {"user": null}, "url": "https://github.com/Netflix/conductor/commit/49f25ef2072688e52a48f1ee95ca2d42a4fd3a72", "committedDate": "2020-07-09T12:38:10Z", "message": "prepare for merge"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 749, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}