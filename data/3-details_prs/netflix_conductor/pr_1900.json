{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1ODY1NTQw", "number": 1900, "title": "Mark parent workflow as TERMINATED instead of FAILED, when\u2026", "bodyText": "\u2026 a subworkflow is terminated.\nOther refactoring and cleanup.", "createdAt": "2020-10-01T00:03:02Z", "url": "https://github.com/Netflix/conductor/pull/1900", "merged": true, "mergeCommit": {"oid": "8adf958a9d88fa6ce16dab2d624124dd63ba7d20"}, "closed": true, "closedAt": "2020-10-13T19:37:39Z", "author": {"login": "kishorebanala"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdOF5bxABqjM4MjY5MDUzNDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSNHwzgH2gAyNDk1ODY1NTQwOjAzZDYxN2FhNmUzMDA4OTlhNmZhMjgwNjU3NzAxZDE0YmU5ZTk0MDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d24a29960f7fd07f5319be1caa8e1c133f2c5977", "author": {"user": {"login": "kishorebanala", "name": "Kishore"}}, "url": "https://github.com/Netflix/conductor/commit/d24a29960f7fd07f5319be1caa8e1c133f2c5977", "committedDate": "2020-10-01T00:00:05Z", "message": "Updates to mark parent workflow as TERMINATED instead of FAILED, when a subworkflow is terminated. Other cleanup."}, "afterCommit": {"oid": "89ee5710bd486001943e3d1bf2b6b72c6514a4c8", "author": {"user": {"login": "kishorebanala", "name": "Kishore"}}, "url": "https://github.com/Netflix/conductor/commit/89ee5710bd486001943e3d1bf2b6b72c6514a4c8", "committedDate": "2020-10-01T00:03:50Z", "message": "Updates to mark parent workflow as TERMINATED instead of FAILED, when a subworkflow is terminated. Other cleanup."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5OTQwMDQw", "url": "https://github.com/Netflix/conductor/pull/1900#pullrequestreview-499940040", "createdAt": "2020-10-01T00:29:43Z", "commit": {"oid": "89ee5710bd486001943e3d1bf2b6b72c6514a4c8"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoyOTo0M1rOHa0C4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDo0MTowMlrOHa0fpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3NzczMQ==", "bodyText": "do you also want to set the failure reason on the task here?", "url": "https://github.com/Netflix/conductor/pull/1900#discussion_r497877731", "createdAt": "2020-10-01T00:29:43Z", "author": {"login": "apanicker-nflx"}, "path": "core/src/main/java/com/netflix/conductor/core/execution/tasks/SubWorkflow.java", "diffHunk": "@@ -185,9 +185,11 @@ private void updateTaskStatus(WorkflowStatus status, Task task) {\n \t\t\t\ttask.setStatus(Status.COMPLETED);\n \t\t\t\tbreak;\n \t\t\tcase FAILED:\n-\t\t\tcase TERMINATED:\n \t\t\t\ttask.setStatus(Status.FAILED);\n \t\t\t\tbreak;\n+\t\t\tcase TERMINATED:\n+\t\t\t\ttask.setStatus(Status.CANCELED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89ee5710bd486001943e3d1bf2b6b72c6514a4c8"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg4NTA5NQ==", "bodyText": "For consistency, use the with(...) semantics across the test. Lot of the boilerplate code in the then: sections below can be cleaned up with this usage.", "url": "https://github.com/Netflix/conductor/pull/1900#discussion_r497885095", "createdAt": "2020-10-01T00:41:02Z", "author": {"login": "apanicker-nflx"}, "path": "test-harness/src/test/groovy/com/netflix/conductor/test/integration/SubWorkflowSpec.groovy", "diffHunk": "@@ -228,4 +228,90 @@ class SubWorkflowSpec extends Specification {\n         cleanup: \"Ensure that the changes to the workflow def are reverted\"\n         metadataService.updateWorkflowDef([persistedWorkflowDefinition])\n     }\n+\n+    def \"Test terminating a subworkflow terminates parent workflow\"() {\n+        given: \"Existing workflow and subworkflow definitions\"\n+        metadataService.getWorkflowDef(SUB_WORKFLOW, 1)\n+        metadataService.getWorkflowDef(WORKFLOW_WITH_SUBWORKFLOW, 1)\n+\n+        and: \"input required to start the workflow execution\"\n+        String correlationId = 'wf_with_subwf_test_1'\n+        def input = new HashMap()\n+        String inputParam1 = 'p1 value'\n+        input['param1'] = inputParam1\n+        input['param2'] = 'p2 value'\n+\n+        when: \"Start a workflow with subworkflow based on the registered definition\"\n+        def workflowInstanceId = workflowExecutor.startWorkflow(WORKFLOW_WITH_SUBWORKFLOW, 1,\n+                correlationId, input,\n+                null, null, null)\n+\n+        then: \"verify that the workflow is in a running state\"\n+        with(workflowExecutionService.getExecutionStatus(workflowInstanceId, true)) {\n+            status == Workflow.WorkflowStatus.RUNNING\n+            tasks.size() == 1\n+            tasks[0].taskType == 'integration_task_1'\n+            tasks[0].status == Task.Status.SCHEDULED\n+        }\n+\n+        when: \"Polled for integration_task_1 task\"\n+        def pollAndCompleteTask1Try1 = workflowTestUtil.pollAndCompleteTask('integration_task_1', 'task1.integration.worker', ['op': 'task1.done'])\n+\n+        then: \"verify that the 'integration_task_1' was polled and acknowledged\"\n+        verifyPolledAndAcknowledgedTask(pollAndCompleteTask1Try1)\n+\n+        and: \"verify that the 'integration_task1' is complete and the next task (subworkflow) is in scheduled state\"\n+        with(workflowExecutionService.getExecutionStatus(workflowInstanceId, true)) {\n+            status == Workflow.WorkflowStatus.RUNNING\n+            tasks.size() == 2\n+            tasks[0].taskType == 'integration_task_1'\n+            tasks[0].status == Task.Status.COMPLETED\n+            tasks[1].taskType == 'SUB_WORKFLOW'\n+            tasks[1].status == Task.Status.SCHEDULED\n+        }\n+\n+        when: \"Polled for and executed subworkflow task\"\n+        List<String> polledTaskIds = queueDAO.pop(\"SUB_WORKFLOW\", 1, 200);\n+        WorkflowSystemTask systemTask = SystemTaskWorkerCoordinator.taskNameWorkflowTaskMapping.get(\"SUB_WORKFLOW\")\n+        workflowExecutor.executeSystemTask(systemTask, polledTaskIds.get(0), 30)\n+        def workflow = workflowExecutionService.getExecutionStatus(workflowInstanceId, true)\n+\n+        then: \"verify that the 'sub_workflow_task' is polled and IN_PROGRESS\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89ee5710bd486001943e3d1bf2b6b72c6514a4c8"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0896f69d151d00f04fc3113807207a30a089cfa1", "author": {"user": {"login": "kishorebanala", "name": "Kishore"}}, "url": "https://github.com/Netflix/conductor/commit/0896f69d151d00f04fc3113807207a30a089cfa1", "committedDate": "2020-10-11T14:31:39Z", "message": "Updates to mark parent workflow as TERMINATED instead of FAILED, when a subworkflow is terminated. Other cleanup."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4f3f3a764103f8474f68367afecbea075f277b2d", "author": {"user": {"login": "kishorebanala", "name": "Kishore"}}, "url": "https://github.com/Netflix/conductor/commit/4f3f3a764103f8474f68367afecbea075f277b2d", "committedDate": "2020-10-07T18:42:04Z", "message": "Clean up."}, "afterCommit": {"oid": "0896f69d151d00f04fc3113807207a30a089cfa1", "author": {"user": {"login": "kishorebanala", "name": "Kishore"}}, "url": "https://github.com/Netflix/conductor/commit/0896f69d151d00f04fc3113807207a30a089cfa1", "committedDate": "2020-10-11T14:31:39Z", "message": "Updates to mark parent workflow as TERMINATED instead of FAILED, when a subworkflow is terminated. Other cleanup."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3MDU3MzY0", "url": "https://github.com/Netflix/conductor/pull/1900#pullrequestreview-507057364", "createdAt": "2020-10-13T04:16:25Z", "commit": {"oid": "0896f69d151d00f04fc3113807207a30a089cfa1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNDoxNjoyNVrOHgUzOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNDoxNjoyNVrOHgUzOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY1NzI3NA==", "bodyText": "This seems redundant to lines 188 and 192 above.", "url": "https://github.com/Netflix/conductor/pull/1900#discussion_r503657274", "createdAt": "2020-10-13T04:16:25Z", "author": {"login": "apanicker-nflx"}, "path": "core/src/main/java/com/netflix/conductor/core/execution/tasks/SubWorkflow.java", "diffHunk": "@@ -185,14 +184,22 @@ private void updateTaskStatus(WorkflowStatus status, Task task) {\n \t\t\t\ttask.setStatus(Status.COMPLETED);\n \t\t\t\tbreak;\n \t\t\tcase FAILED:\n-\t\t\tcase TERMINATED:\n \t\t\t\ttask.setStatus(Status.FAILED);\n+\t\t\t\ttask.setReasonForIncompletion(subworkflow.getReasonForIncompletion());\n+\t\t\t\tbreak;\n+\t\t\tcase TERMINATED:\n+\t\t\t\ttask.setStatus(Status.CANCELED);\n+\t\t\t\ttask.setReasonForIncompletion(subworkflow.getReasonForIncompletion());\n \t\t\t\tbreak;\n \t\t\tcase TIMED_OUT:\n \t\t\t\ttask.setStatus(Status.TIMED_OUT);\n \t\t\t\tbreak;\n \t\t\tdefault:\n \t\t\t\tthrow new ApplicationException(ApplicationException.Code.INTERNAL_ERROR, \"Subworkflow status does not conform to relevant task status.\");\n \t\t}\n+\n+\t\tif (status.isTerminal() && !status.isSuccessful()) {\n+\t\t\ttask.setReasonForIncompletion(subworkflow.getReasonForIncompletion());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0896f69d151d00f04fc3113807207a30a089cfa1"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3MDU3ODMw", "url": "https://github.com/Netflix/conductor/pull/1900#pullrequestreview-507057830", "createdAt": "2020-10-13T04:17:54Z", "commit": {"oid": "0896f69d151d00f04fc3113807207a30a089cfa1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03d617aa6e300899a6fa280657701d14be9e9406", "author": {"user": {"login": "kishorebanala", "name": "Kishore"}}, "url": "https://github.com/Netflix/conductor/commit/03d617aa6e300899a6fa280657701d14be9e9406", "committedDate": "2020-10-13T18:45:07Z", "message": "Clean up."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 706, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}