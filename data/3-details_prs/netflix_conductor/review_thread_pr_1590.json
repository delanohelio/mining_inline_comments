{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5OTU4MDE0", "number": 1590, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMzowNjo0MlrODpTu5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMzoxMjoyMFrODpTzYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjQxNTEwOnYy", "diffSide": "RIGHT", "path": "docs/docs/configuration/taskdef.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMzowNjo0MlrOF4Z6sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMzowNjo0MlrOF4Z6sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4OTIwMg==", "bodyText": "@scarlac Thanks for pointing this out and updating the documentation accordingly. The implementation of the RateLimitingDAO is provided in the redis-persistence module only and is not available with other persistence layers. Could you please modify this documentation accordingly.", "url": "https://github.com/Netflix/conductor/pull/1590#discussion_r394689202", "createdAt": "2020-03-18T23:06:42Z", "author": {"login": "apanicker-nflx"}, "path": "docs/docs/configuration/taskdef.md", "diffHunk": "@@ -68,7 +68,8 @@ If you have 1000 task executions waiting in the queue, and 1000 workers polling\n * `rateLimitPerFrequency`defines the number of Tasks that can be given to Workers per given \"frequency window\".  \n **Example:**  \n Let's set `rateLimitFrequencyInSeconds = 5`, and `rateLimitPerFrequency = 12`. This means, our frequency window is of 5 seconds duration, and for each frequency window, Conductor would only give 12 tasks to workers. So, in a given minute, Conductor would only give 12*(60/5) = 144 tasks to workers irrespective of the number of workers that are polling for the task.  \n-Note that unlike `concurrentExecLimit`, rate limiting doesn't take into account tasks already in progress/completed. Even if all the previous tasks are executed within 1 sec, or would take a few days, the new tasks are still given to workers at configured frequency, 144 tasks per minute in above example.\n+Note that unlike `concurrentExecLimit`, rate limiting doesn't take into account tasks already in progress/completed. Even if all the previous tasks are executed within 1 sec, or would take a few days, the new tasks are still given to workers at configured frequency, 144 tasks per minute in above example.   \n+Note: MySQL does not currently support `rateLimitPerFrequency` and `rateLimitFrequencyInSeconds`. Please use `concurrentExecLimit` instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "085565ec1b268c0d67722d5cc3551e7f13ae9d05"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjQyNjU5OnYy", "diffSide": "RIGHT", "path": "docs/docs/configuration/taskdef.md", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMzoxMjoyMFrOF4aBsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNjo1Mzo0N1rOF5bvew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY5MDk5Mw==", "bodyText": "@apanicker-nflx Changed the wording. How does this sound?", "url": "https://github.com/Netflix/conductor/pull/1590#discussion_r394690993", "createdAt": "2020-03-18T23:12:20Z", "author": {"login": "scarlac"}, "path": "docs/docs/configuration/taskdef.md", "diffHunk": "@@ -68,7 +68,9 @@ If you have 1000 task executions waiting in the queue, and 1000 workers polling\n * `rateLimitPerFrequency`defines the number of Tasks that can be given to Workers per given \"frequency window\".  \n **Example:**  \n Let's set `rateLimitFrequencyInSeconds = 5`, and `rateLimitPerFrequency = 12`. This means, our frequency window is of 5 seconds duration, and for each frequency window, Conductor would only give 12 tasks to workers. So, in a given minute, Conductor would only give 12*(60/5) = 144 tasks to workers irrespective of the number of workers that are polling for the task.  \n-Note that unlike `concurrentExecLimit`, rate limiting doesn't take into account tasks already in progress/completed. Even if all the previous tasks are executed within 1 sec, or would take a few days, the new tasks are still given to workers at configured frequency, 144 tasks per minute in above example.\n+Note that unlike `concurrentExecLimit`, rate limiting doesn't take into account tasks already in progress/completed. Even if all the previous tasks are executed within 1 sec, or would take a few days, the new tasks are still given to workers at configured frequency, 144 tasks per minute in above example.   \n+The implementation of the RateLimitingDAO is provided in the redis-persistence module only and is not available with other persistence layers.\n+Note: Rate limiting is only supported for the Redis-persistence module and is not available with other persistence layers. Consider using `concurrentExecLimit` instead if you are using a different persistence module.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61975fcd10c79cc6e52a429cfe52a2f5536932d8"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcyOTQ4OA==", "bodyText": "Looks like lines 72 and 73 are identical. Was this intentional?", "url": "https://github.com/Netflix/conductor/pull/1590#discussion_r394729488", "createdAt": "2020-03-19T01:01:06Z", "author": {"login": "apanicker-nflx"}, "path": "docs/docs/configuration/taskdef.md", "diffHunk": "@@ -68,7 +68,9 @@ If you have 1000 task executions waiting in the queue, and 1000 workers polling\n * `rateLimitPerFrequency`defines the number of Tasks that can be given to Workers per given \"frequency window\".  \n **Example:**  \n Let's set `rateLimitFrequencyInSeconds = 5`, and `rateLimitPerFrequency = 12`. This means, our frequency window is of 5 seconds duration, and for each frequency window, Conductor would only give 12 tasks to workers. So, in a given minute, Conductor would only give 12*(60/5) = 144 tasks to workers irrespective of the number of workers that are polling for the task.  \n-Note that unlike `concurrentExecLimit`, rate limiting doesn't take into account tasks already in progress/completed. Even if all the previous tasks are executed within 1 sec, or would take a few days, the new tasks are still given to workers at configured frequency, 144 tasks per minute in above example.\n+Note that unlike `concurrentExecLimit`, rate limiting doesn't take into account tasks already in progress/completed. Even if all the previous tasks are executed within 1 sec, or would take a few days, the new tasks are still given to workers at configured frequency, 144 tasks per minute in above example.   \n+The implementation of the RateLimitingDAO is provided in the redis-persistence module only and is not available with other persistence layers.\n+Note: Rate limiting is only supported for the Redis-persistence module and is not available with other persistence layers. Consider using `concurrentExecLimit` instead if you are using a different persistence module.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY5MDk5Mw=="}, "originalCommit": {"oid": "61975fcd10c79cc6e52a429cfe52a2f5536932d8"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcyOTc0Mw==", "bodyText": "Also, the usage of concurrentExecLimit is slightly different as compared to rate limiting as explained in line 71. Not sure if we want to suggest this as a workaround.", "url": "https://github.com/Netflix/conductor/pull/1590#discussion_r394729743", "createdAt": "2020-03-19T01:02:14Z", "author": {"login": "apanicker-nflx"}, "path": "docs/docs/configuration/taskdef.md", "diffHunk": "@@ -68,7 +68,9 @@ If you have 1000 task executions waiting in the queue, and 1000 workers polling\n * `rateLimitPerFrequency`defines the number of Tasks that can be given to Workers per given \"frequency window\".  \n **Example:**  \n Let's set `rateLimitFrequencyInSeconds = 5`, and `rateLimitPerFrequency = 12`. This means, our frequency window is of 5 seconds duration, and for each frequency window, Conductor would only give 12 tasks to workers. So, in a given minute, Conductor would only give 12*(60/5) = 144 tasks to workers irrespective of the number of workers that are polling for the task.  \n-Note that unlike `concurrentExecLimit`, rate limiting doesn't take into account tasks already in progress/completed. Even if all the previous tasks are executed within 1 sec, or would take a few days, the new tasks are still given to workers at configured frequency, 144 tasks per minute in above example.\n+Note that unlike `concurrentExecLimit`, rate limiting doesn't take into account tasks already in progress/completed. Even if all the previous tasks are executed within 1 sec, or would take a few days, the new tasks are still given to workers at configured frequency, 144 tasks per minute in above example.   \n+The implementation of the RateLimitingDAO is provided in the redis-persistence module only and is not available with other persistence layers.\n+Note: Rate limiting is only supported for the Redis-persistence module and is not available with other persistence layers. Consider using `concurrentExecLimit` instead if you are using a different persistence module.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY5MDk5Mw=="}, "originalCommit": {"oid": "61975fcd10c79cc6e52a429cfe52a2f5536932d8"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgwNTQ4Mg==", "bodyText": "Def not intentional. Will fix tomorrow. Will remove the reference to concurrentExecLimit. Can users expect it to work for all persistence modules?", "url": "https://github.com/Netflix/conductor/pull/1590#discussion_r394805482", "createdAt": "2020-03-19T05:57:32Z", "author": {"login": "scarlac"}, "path": "docs/docs/configuration/taskdef.md", "diffHunk": "@@ -68,7 +68,9 @@ If you have 1000 task executions waiting in the queue, and 1000 workers polling\n * `rateLimitPerFrequency`defines the number of Tasks that can be given to Workers per given \"frequency window\".  \n **Example:**  \n Let's set `rateLimitFrequencyInSeconds = 5`, and `rateLimitPerFrequency = 12`. This means, our frequency window is of 5 seconds duration, and for each frequency window, Conductor would only give 12 tasks to workers. So, in a given minute, Conductor would only give 12*(60/5) = 144 tasks to workers irrespective of the number of workers that are polling for the task.  \n-Note that unlike `concurrentExecLimit`, rate limiting doesn't take into account tasks already in progress/completed. Even if all the previous tasks are executed within 1 sec, or would take a few days, the new tasks are still given to workers at configured frequency, 144 tasks per minute in above example.\n+Note that unlike `concurrentExecLimit`, rate limiting doesn't take into account tasks already in progress/completed. Even if all the previous tasks are executed within 1 sec, or would take a few days, the new tasks are still given to workers at configured frequency, 144 tasks per minute in above example.   \n+The implementation of the RateLimitingDAO is provided in the redis-persistence module only and is not available with other persistence layers.\n+Note: Rate limiting is only supported for the Redis-persistence module and is not available with other persistence layers. Consider using `concurrentExecLimit` instead if you are using a different persistence module.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY5MDk5Mw=="}, "originalCommit": {"oid": "61975fcd10c79cc6e52a429cfe52a2f5536932d8"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE3OTQ1NA==", "bodyText": "The concurrentExecLimit functionality is currently implemented in all the persistence modules and should work correctly.\nFor rate limiting however, this feature may not be possible to be implemented in all the persistence layers, this was the primary motivation behind extracting this out of the ExecutionDAO and moving this into its own RateLimitingDAO. This enables users to implement the rate limiting functionality as needed, even using a custom rate limiter that may already be deployed in their environments.", "url": "https://github.com/Netflix/conductor/pull/1590#discussion_r395179454", "createdAt": "2020-03-19T16:59:58Z", "author": {"login": "apanicker-nflx"}, "path": "docs/docs/configuration/taskdef.md", "diffHunk": "@@ -68,7 +68,9 @@ If you have 1000 task executions waiting in the queue, and 1000 workers polling\n * `rateLimitPerFrequency`defines the number of Tasks that can be given to Workers per given \"frequency window\".  \n **Example:**  \n Let's set `rateLimitFrequencyInSeconds = 5`, and `rateLimitPerFrequency = 12`. This means, our frequency window is of 5 seconds duration, and for each frequency window, Conductor would only give 12 tasks to workers. So, in a given minute, Conductor would only give 12*(60/5) = 144 tasks to workers irrespective of the number of workers that are polling for the task.  \n-Note that unlike `concurrentExecLimit`, rate limiting doesn't take into account tasks already in progress/completed. Even if all the previous tasks are executed within 1 sec, or would take a few days, the new tasks are still given to workers at configured frequency, 144 tasks per minute in above example.\n+Note that unlike `concurrentExecLimit`, rate limiting doesn't take into account tasks already in progress/completed. Even if all the previous tasks are executed within 1 sec, or would take a few days, the new tasks are still given to workers at configured frequency, 144 tasks per minute in above example.   \n+The implementation of the RateLimitingDAO is provided in the redis-persistence module only and is not available with other persistence layers.\n+Note: Rate limiting is only supported for the Redis-persistence module and is not available with other persistence layers. Consider using `concurrentExecLimit` instead if you are using a different persistence module.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY5MDk5Mw=="}, "originalCommit": {"oid": "61975fcd10c79cc6e52a429cfe52a2f5536932d8"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ0MDk4Nw==", "bodyText": "@apanicker-nflx There we go. How's that?", "url": "https://github.com/Netflix/conductor/pull/1590#discussion_r395440987", "createdAt": "2020-03-20T05:07:08Z", "author": {"login": "scarlac"}, "path": "docs/docs/configuration/taskdef.md", "diffHunk": "@@ -68,7 +68,9 @@ If you have 1000 task executions waiting in the queue, and 1000 workers polling\n * `rateLimitPerFrequency`defines the number of Tasks that can be given to Workers per given \"frequency window\".  \n **Example:**  \n Let's set `rateLimitFrequencyInSeconds = 5`, and `rateLimitPerFrequency = 12`. This means, our frequency window is of 5 seconds duration, and for each frequency window, Conductor would only give 12 tasks to workers. So, in a given minute, Conductor would only give 12*(60/5) = 144 tasks to workers irrespective of the number of workers that are polling for the task.  \n-Note that unlike `concurrentExecLimit`, rate limiting doesn't take into account tasks already in progress/completed. Even if all the previous tasks are executed within 1 sec, or would take a few days, the new tasks are still given to workers at configured frequency, 144 tasks per minute in above example.\n+Note that unlike `concurrentExecLimit`, rate limiting doesn't take into account tasks already in progress/completed. Even if all the previous tasks are executed within 1 sec, or would take a few days, the new tasks are still given to workers at configured frequency, 144 tasks per minute in above example.   \n+The implementation of the RateLimitingDAO is provided in the redis-persistence module only and is not available with other persistence layers.\n+Note: Rate limiting is only supported for the Redis-persistence module and is not available with other persistence layers. Consider using `concurrentExecLimit` instead if you are using a different persistence module.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY5MDk5Mw=="}, "originalCommit": {"oid": "61975fcd10c79cc6e52a429cfe52a2f5536932d8"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc2NzY3NQ==", "bodyText": "Awesome, thanks a lot.", "url": "https://github.com/Netflix/conductor/pull/1590#discussion_r395767675", "createdAt": "2020-03-20T16:53:47Z", "author": {"login": "apanicker-nflx"}, "path": "docs/docs/configuration/taskdef.md", "diffHunk": "@@ -68,7 +68,9 @@ If you have 1000 task executions waiting in the queue, and 1000 workers polling\n * `rateLimitPerFrequency`defines the number of Tasks that can be given to Workers per given \"frequency window\".  \n **Example:**  \n Let's set `rateLimitFrequencyInSeconds = 5`, and `rateLimitPerFrequency = 12`. This means, our frequency window is of 5 seconds duration, and for each frequency window, Conductor would only give 12 tasks to workers. So, in a given minute, Conductor would only give 12*(60/5) = 144 tasks to workers irrespective of the number of workers that are polling for the task.  \n-Note that unlike `concurrentExecLimit`, rate limiting doesn't take into account tasks already in progress/completed. Even if all the previous tasks are executed within 1 sec, or would take a few days, the new tasks are still given to workers at configured frequency, 144 tasks per minute in above example.\n+Note that unlike `concurrentExecLimit`, rate limiting doesn't take into account tasks already in progress/completed. Even if all the previous tasks are executed within 1 sec, or would take a few days, the new tasks are still given to workers at configured frequency, 144 tasks per minute in above example.   \n+The implementation of the RateLimitingDAO is provided in the redis-persistence module only and is not available with other persistence layers.\n+Note: Rate limiting is only supported for the Redis-persistence module and is not available with other persistence layers. Consider using `concurrentExecLimit` instead if you are using a different persistence module.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY5MDk5Mw=="}, "originalCommit": {"oid": "61975fcd10c79cc6e52a429cfe52a2f5536932d8"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4270, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}