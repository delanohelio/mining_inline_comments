{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3NTUzMDQz", "number": 1579, "title": "added resiliency during task poll", "bodyText": "When polling for a task, if a db operation fails on a dequeued task, this task will now be lost and the corresponding workflow will be unable to progress.\nThis PR addresses this issue by re-enqueueing this task with a delay so that the workflow will be unblocked.\nNote that the priority of this task is set to 0 since this task need not wait for other tasks with different priority to be dequeued (as it was already dequeued once).", "createdAt": "2020-03-13T02:00:22Z", "url": "https://github.com/Netflix/conductor/pull/1579", "merged": true, "mergeCommit": {"oid": "26e32f849367a4efea16c9ba01769ae947a6da51"}, "closed": true, "closedAt": "2020-03-13T22:09:26Z", "author": {"login": "apanicker-nflx"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcNV0OigBqjMxMjgwMDY1NTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcNXdhzABqjMxMjgzMjYzNTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "279c79188f801f2660836384e67710c302f46c0f", "author": {"user": {"login": "apanicker-nflx", "name": "Anoop Panicker"}}, "url": "https://github.com/Netflix/conductor/commit/279c79188f801f2660836384e67710c302f46c0f", "committedDate": "2020-03-13T01:53:36Z", "message": "added resiliency during task poll"}, "afterCommit": {"oid": "a58061df3b9c5232238ed2041b5a2e12e08a79ff", "author": {"user": {"login": "apanicker-nflx", "name": "Anoop Panicker"}}, "url": "https://github.com/Netflix/conductor/commit/a58061df3b9c5232238ed2041b5a2e12e08a79ff", "committedDate": "2020-03-13T19:51:58Z", "message": "added resiliency during task poll"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NjA0NjAw", "url": "https://github.com/Netflix/conductor/pull/1579#pullrequestreview-374604600", "createdAt": "2020-03-13T20:35:18Z", "commit": {"oid": "a58061df3b9c5232238ed2041b5a2e12e08a79ff"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMDozNToxOFrOF2RvXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMDo0MDo0NFrOF2R9cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ1ODA3Ng==", "bodyText": "It'd be nice to have a metric for this too, which helps in tracing poll failures due to db operations and find out before the clients notice poll delays.", "url": "https://github.com/Netflix/conductor/pull/1579#discussion_r392458076", "createdAt": "2020-03-13T20:35:18Z", "author": {"login": "kishorebanala"}, "path": "core/src/main/java/com/netflix/conductor/service/ExecutionService.java", "diffHunk": "@@ -151,13 +159,14 @@ public Task poll(String taskType, String workerId, String domain) {\n \t\t\t\ttask.setPollCount(task.getPollCount() + 1);\n \t\t\t\texecutionDAOFacade.updateTask(task);\n \t\t\t\ttasks.add(task);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\t// db operation failed for dequeued message, re-enqueue with a delay\n+\t\t\t\tlogger.warn(\"DB operation failed for task: {}, postponing task in queue\", taskId, e);\n+\t\t\t\tqueueDAO.postpone(queueName, taskId, 0, queueTaskMessagePostponeSeconds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a58061df3b9c5232238ed2041b5a2e12e08a79ff"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ2MTY4Mg==", "bodyText": "How about surfacing this exception to client? Also, should we update updateTaskLastPoll if the pop fails?", "url": "https://github.com/Netflix/conductor/pull/1579#discussion_r392461682", "createdAt": "2020-03-13T20:40:44Z", "author": {"login": "kishorebanala"}, "path": "core/src/main/java/com/netflix/conductor/service/ExecutionService.java", "diffHunk": "@@ -123,10 +123,18 @@ public Task poll(String taskType, String workerId, String domain) {\n \t\t}\n \t\tString queueName = QueueUtils.getQueueName(taskType, domain, null,null);\n \n+\t\tList<String> taskIds = new LinkedList<>();\n \t\tList<Task> tasks = new LinkedList<>();\n \t\ttry {\n-\t\t\tList<String> taskIds = queueDAO.pop(queueName, count, timeoutInMilliSecond);\n-\t\t\tfor (String taskId : taskIds) {\n+\t\t\ttaskIds = queueDAO.pop(queueName, count, timeoutInMilliSecond);\n+\t\t} catch (Exception e) {\n+\t\t\tlogger.error(\"Error polling for task: {} from worker: {} in domain: {}, count: {}\", taskType, workerId,\n+\t\t\t\tdomain, count, e);\n+\t\t\tMonitors.error(this.getClass().getCanonicalName(), \"taskPoll\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a58061df3b9c5232238ed2041b5a2e12e08a79ff"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac7bf2f4330231ca5d3cb5c9f444bd06356a8ede", "author": {"user": {"login": "apanicker-nflx", "name": "Anoop Panicker"}}, "url": "https://github.com/Netflix/conductor/commit/ac7bf2f4330231ca5d3cb5c9f444bd06356a8ede", "committedDate": "2020-03-13T21:46:57Z", "message": "added resiliency during task poll"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a58061df3b9c5232238ed2041b5a2e12e08a79ff", "author": {"user": {"login": "apanicker-nflx", "name": "Anoop Panicker"}}, "url": "https://github.com/Netflix/conductor/commit/a58061df3b9c5232238ed2041b5a2e12e08a79ff", "committedDate": "2020-03-13T19:51:58Z", "message": "added resiliency during task poll"}, "afterCommit": {"oid": "ac7bf2f4330231ca5d3cb5c9f444bd06356a8ede", "author": {"user": {"login": "apanicker-nflx", "name": "Anoop Panicker"}}, "url": "https://github.com/Netflix/conductor/commit/ac7bf2f4330231ca5d3cb5c9f444bd06356a8ede", "committedDate": "2020-03-13T21:46:57Z", "message": "added resiliency during task poll"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 859, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}