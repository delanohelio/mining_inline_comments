{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0OTU2MjMz", "number": 1766, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNzo0NDo1MVrOEM_q7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNzo0NDo1MVrOEM_q7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDYxNTUwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/netflix/conductor/service/ExecutionService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNzo0NDo1MVrOGvbfUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNzo0NDo1MVrOGvbfUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4NjY0Mw==", "bodyText": "Comparator.comparingLong(Task::getScheduledTime) is not needed here since sorting by seq here would arrange the tasks in the correct order.", "url": "https://github.com/Netflix/conductor/pull/1766#discussion_r452386643", "createdAt": "2020-07-09T17:44:51Z", "author": {"login": "apanicker-nflx"}, "path": "core/src/main/java/com/netflix/conductor/service/ExecutionService.java", "diffHunk": "@@ -342,14 +343,21 @@ private boolean requeue(Task pending) {\n \n \tpublic List<Workflow> getWorkflowInstances(String workflowName, String correlationId, boolean includeClosed, boolean includeTasks) {\n \n-\t\tList<Workflow> workflows = executionDAOFacade.getWorkflowsByCorrelationId(correlationId, includeTasks);\n+\t\tList<Workflow> workflows = executionDAOFacade.getWorkflowsByCorrelationId(workflowName, correlationId, false);\n \t\tList<Workflow> result = new LinkedList<>();\n-\t\tfor (Workflow wf : workflows) {\n-\t\t\tif (wf.getWorkflowName().equals(workflowName) && (includeClosed || wf.getStatus().equals(Workflow.WorkflowStatus.RUNNING))) {\n-\t\t\t\tresult.add(wf);\n+\t\tresult = workflows.stream().parallel().filter(wf -> {\n+\t\t\tif (includeClosed || wf.getStatus().equals(Workflow.WorkflowStatus.RUNNING)) {\n+\t\t\t\t// including tasks for subset of workflows to increase performance\n+\t\t\t\tif (includeTasks) {\n+\t\t\t\t\tList<Task> tasks = executionDAOFacade.getTasksForWorkflow(wf.getWorkflowId());\n+\t\t\t\t\ttasks.sort(Comparator.comparingLong(Task::getScheduledTime).thenComparingInt(Task::getSeq));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "201bec6a0856ef5048ca220d347afa623011f0e0"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4218, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}