{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMDI5Mjgz", "number": 1631, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMDo1MjozNlrOD0gR0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMDo1MjozNlrOD0gR0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MzgxMzkyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/netflix/conductor/core/orchestration/ExecutionDAOFacade.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMDo1MjozNlrOGJehhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMToyNzoxMVrOGJxWPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU5MDQ2OA==", "bodyText": "As part of async indexing, the contract is that task data for a workflow will only be indexed when a workflow reaches a terminal state. Please move this line to within the if block above.", "url": "https://github.com/Netflix/conductor/pull/1631#discussion_r412590468", "createdAt": "2020-04-22T00:52:36Z", "author": {"login": "apanicker-nflx"}, "path": "core/src/main/java/com/netflix/conductor/core/orchestration/ExecutionDAOFacade.java", "diffHunk": "@@ -215,21 +215,19 @@ public String updateWorkflow(Workflow workflow) {\n             workflow.setEndTime(System.currentTimeMillis());\n         }\n         executionDAO.updateWorkflow(workflow);\n-        if (workflow.getStatus().isTerminal()) {\n-            if (config.enableAsyncIndexing()) {\n-                if (workflow.getEndTime() - workflow.getStartTime() < config.getAsyncUpdateShortRunningWorkflowDuration() * 1000) {\n-                    final String workflowId = workflow.getWorkflowId();\n-                    DelayWorkflowUpdate delayWorkflowUpdate = new DelayWorkflowUpdate(workflowId);\n-                    LOGGER.debug(\"Delayed updating workflow: {} in the index by {} seconds\", workflowId, config.getAsyncUpdateDelay());\n-                    scheduledThreadPoolExecutor.schedule(delayWorkflowUpdate, config.getAsyncUpdateDelay(), TimeUnit.SECONDS);\n-                    Monitors.recordWorkerQueueSize(\"delayQueue\", scheduledThreadPoolExecutor.getQueue().size());\n-                } else {\n-                    indexDAO.asyncIndexWorkflow(workflow);\n-                }\n-                workflow.getTasks().forEach(indexDAO::asyncIndexTask);\n+        if (config.enableAsyncIndexing()) {\n+            if (workflow.getStatus().isTerminal() && workflow.getEndTime() - workflow.getStartTime() < config.getAsyncUpdateShortRunningWorkflowDuration() * 1000) {\n+                final String workflowId = workflow.getWorkflowId();\n+                DelayWorkflowUpdate delayWorkflowUpdate = new DelayWorkflowUpdate(workflowId);\n+                LOGGER.debug(\"Delayed updating workflow: {} in the index by {} seconds\", workflowId, config.getAsyncUpdateDelay());\n+                scheduledThreadPoolExecutor.schedule(delayWorkflowUpdate, config.getAsyncUpdateDelay(), TimeUnit.SECONDS);\n+                Monitors.recordWorkerQueueSize(\"delayQueue\", scheduledThreadPoolExecutor.getQueue().size());\n             } else {\n-                indexDAO.indexWorkflow(workflow);\n+                indexDAO.asyncIndexWorkflow(workflow);\n             }\n+            workflow.getTasks().forEach(indexDAO::asyncIndexTask);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81b9ee0f2046ae0695f0a68fbfbea9a2e517ac07"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg5ODg3OA==", "bodyText": "Oh, now I understand what the intent was...thanks for that. I think I covered that now. I took out the isTerminal() check earlier so I added it later.", "url": "https://github.com/Netflix/conductor/pull/1631#discussion_r412898878", "createdAt": "2020-04-22T11:27:11Z", "author": {"login": "rickfish"}, "path": "core/src/main/java/com/netflix/conductor/core/orchestration/ExecutionDAOFacade.java", "diffHunk": "@@ -215,21 +215,19 @@ public String updateWorkflow(Workflow workflow) {\n             workflow.setEndTime(System.currentTimeMillis());\n         }\n         executionDAO.updateWorkflow(workflow);\n-        if (workflow.getStatus().isTerminal()) {\n-            if (config.enableAsyncIndexing()) {\n-                if (workflow.getEndTime() - workflow.getStartTime() < config.getAsyncUpdateShortRunningWorkflowDuration() * 1000) {\n-                    final String workflowId = workflow.getWorkflowId();\n-                    DelayWorkflowUpdate delayWorkflowUpdate = new DelayWorkflowUpdate(workflowId);\n-                    LOGGER.debug(\"Delayed updating workflow: {} in the index by {} seconds\", workflowId, config.getAsyncUpdateDelay());\n-                    scheduledThreadPoolExecutor.schedule(delayWorkflowUpdate, config.getAsyncUpdateDelay(), TimeUnit.SECONDS);\n-                    Monitors.recordWorkerQueueSize(\"delayQueue\", scheduledThreadPoolExecutor.getQueue().size());\n-                } else {\n-                    indexDAO.asyncIndexWorkflow(workflow);\n-                }\n-                workflow.getTasks().forEach(indexDAO::asyncIndexTask);\n+        if (config.enableAsyncIndexing()) {\n+            if (workflow.getStatus().isTerminal() && workflow.getEndTime() - workflow.getStartTime() < config.getAsyncUpdateShortRunningWorkflowDuration() * 1000) {\n+                final String workflowId = workflow.getWorkflowId();\n+                DelayWorkflowUpdate delayWorkflowUpdate = new DelayWorkflowUpdate(workflowId);\n+                LOGGER.debug(\"Delayed updating workflow: {} in the index by {} seconds\", workflowId, config.getAsyncUpdateDelay());\n+                scheduledThreadPoolExecutor.schedule(delayWorkflowUpdate, config.getAsyncUpdateDelay(), TimeUnit.SECONDS);\n+                Monitors.recordWorkerQueueSize(\"delayQueue\", scheduledThreadPoolExecutor.getQueue().size());\n             } else {\n-                indexDAO.indexWorkflow(workflow);\n+                indexDAO.asyncIndexWorkflow(workflow);\n             }\n+            workflow.getTasks().forEach(indexDAO::asyncIndexTask);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU5MDQ2OA=="}, "originalCommit": {"oid": "81b9ee0f2046ae0695f0a68fbfbea9a2e517ac07"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4162, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}