{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NTgzODk1", "number": 1984, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjo0MToyOVrOE800sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjo0MToyOVrOE800sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjE1NDc1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/netflix/conductor/core/execution/tasks/SubWorkflow.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjo0MToyOVrOH5LjSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNTozODowNFrOH6MfWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcyMDEzNg==", "bodyText": "@sukruthiarjula While this definitely gets the job done for the best-case scenario, there are other cases it misses. Consider how the code does this check/copy over of the payload as seen on lines 135 to 142.\nUsing the isTerminal function will cover more scenarios than just the COMPLETED scenario and then making sure to account for external payload storage is crucial as well.\nPerhaps those lines (135-142) can be refactored out into a function of its own to be called by both the execute function and the start function. just a thought.", "url": "https://github.com/Netflix/conductor/pull/1984#discussion_r529720136", "createdAt": "2020-11-24T16:41:29Z", "author": {"login": "pweatherby-ccctc"}, "path": "core/src/main/java/com/netflix/conductor/core/execution/tasks/SubWorkflow.java", "diffHunk": "@@ -114,7 +114,10 @@ public void start(Workflow workflow, Task task, WorkflowExecutor provider) {\n \t\t\ttask.getOutputData().put(SUB_WORKFLOW_ID, subWorkflowId);\n \n \t\t\t// Set task status based on current sub-workflow status, as the status can change in recursion by the time we update here.\n-\t\t\tWorkflow subWorkflow = provider.getWorkflow(subWorkflowId, false);\n+\t\t\tWorkflow subWorkflow = provider.getWorkflow(subWorkflowId, false);\t\t\t\n+\t\t\tif (subWorkflow.getStatus() == WorkflowStatus.COMPLETED) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a28b63bca3779156c4e67f9e3276d967961b1311"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc4NDA5MA==", "bodyText": "Hi @pweatherby-ccctc,\nAs discussed, I have made the mentioned changes.", "url": "https://github.com/Netflix/conductor/pull/1984#discussion_r530784090", "createdAt": "2020-11-26T05:38:04Z", "author": {"login": "sukruthiarjula"}, "path": "core/src/main/java/com/netflix/conductor/core/execution/tasks/SubWorkflow.java", "diffHunk": "@@ -114,7 +114,10 @@ public void start(Workflow workflow, Task task, WorkflowExecutor provider) {\n \t\t\ttask.getOutputData().put(SUB_WORKFLOW_ID, subWorkflowId);\n \n \t\t\t// Set task status based on current sub-workflow status, as the status can change in recursion by the time we update here.\n-\t\t\tWorkflow subWorkflow = provider.getWorkflow(subWorkflowId, false);\n+\t\t\tWorkflow subWorkflow = provider.getWorkflow(subWorkflowId, false);\t\t\t\n+\t\t\tif (subWorkflow.getStatus() == WorkflowStatus.COMPLETED) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcyMDEzNg=="}, "originalCommit": {"oid": "a28b63bca3779156c4e67f9e3276d967961b1311"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4144, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}