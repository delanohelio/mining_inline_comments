{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MTM1Mzc4", "number": 1823, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjoxMDo0MVrOEYh3cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjoxMzoyOVrOEYh64Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTU2MTQ0OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/netflix/conductor/common/metadata/workflow/WorkflowTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjoxMDo0MVrOHA6bgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwODoyNjowN1rOHYewVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcxOTM2MQ==", "bodyText": "@alex-fu Since we are diverging the DECISION block by so many lines of code. We can define a separate switch case for DO_WHILE task. And move common code to one function.", "url": "https://github.com/Netflix/conductor/pull/1823#discussion_r470719361", "createdAt": "2020-08-14T16:10:41Z", "author": {"login": "manan164"}, "path": "common/src/main/java/com/netflix/conductor/common/metadata/workflow/WorkflowTask.java", "diffHunk": "@@ -569,6 +569,13 @@ public WorkflowTask next(String taskReferenceName, WorkflowTask parent) {\n \t\t\t\t\t\t\treturn nextTask;\n \t\t\t\t\t\t}\n \t\t\t\t\t\tif (task.has(taskReferenceName)) {\n+\t\t\t\t\t\t\tif (TaskType.DO_WHILE.name().equals(task.getType())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4a33fcc451eed883d04ae9ea38fae6634083665"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQzMTc2NQ==", "bodyText": "OK, I'll move this common code to a function. But this function should be called from DECISION block and FORK block, not DO_WHILE block(since we don't allow nested DO_WHILE task).", "url": "https://github.com/Netflix/conductor/pull/1823#discussion_r495431765", "createdAt": "2020-09-26T08:26:07Z", "author": {"login": "alex-fu"}, "path": "common/src/main/java/com/netflix/conductor/common/metadata/workflow/WorkflowTask.java", "diffHunk": "@@ -569,6 +569,13 @@ public WorkflowTask next(String taskReferenceName, WorkflowTask parent) {\n \t\t\t\t\t\t\treturn nextTask;\n \t\t\t\t\t\t}\n \t\t\t\t\t\tif (task.has(taskReferenceName)) {\n+\t\t\t\t\t\t\tif (TaskType.DO_WHILE.name().equals(task.getType())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcxOTM2MQ=="}, "originalCommit": {"oid": "d4a33fcc451eed883d04ae9ea38fae6634083665"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTU3MDI1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjoxMzoyOVrOHA6g7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwODozMzoyNFrOHYeygw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcyMDc0OA==", "bodyText": "Why we are returning an empty list. We are making get next task to return the parent DO_WHILE task let it propagates it further to decider service.", "url": "https://github.com/Netflix/conductor/pull/1823#discussion_r470720748", "createdAt": "2020-08-14T16:13:29Z", "author": {"login": "manan164"}, "path": "core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java", "diffHunk": "@@ -362,6 +363,13 @@ private boolean checkForWorkflowCompletion(final Workflow workflow) throws Termi\n         while (isTaskSkipped(taskToSchedule, workflow)) {\n             taskToSchedule = workflowDef.getNextTask(taskToSchedule.getTaskReferenceName());\n         }\n+        if (taskToSchedule != null && TaskType.DO_WHILE.name().equals(taskToSchedule.getType())) {\n+            // check if already has this DO_WHILE task, ignore it if it already exists\n+            String nextTaskReferenceName = taskToSchedule.getTaskReferenceName();\n+            if (workflow.getTasks().stream().anyMatch(runningTask -> runningTask.getReferenceTaskName().equals(nextTaskReferenceName))) {\n+                return Collections.emptyList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4a33fcc451eed883d04ae9ea38fae6634083665"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQzMjMyMw==", "bodyText": "Because in this case the parent DO_WHILE task is already exist, so we don't need to generate again. By the way, even though we return the parent DO_WHILE task, deciderService will also exclude it in below line. tasksToBeScheduled already contains this task, and putIfAbsent will not add this task again.\nnextTasks.forEach(nextTask -> tasksToBeScheduled.putIfAbsent(nextTask.getReferenceTaskName(), nextTask));", "url": "https://github.com/Netflix/conductor/pull/1823#discussion_r495432323", "createdAt": "2020-09-26T08:33:24Z", "author": {"login": "alex-fu"}, "path": "core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java", "diffHunk": "@@ -362,6 +363,13 @@ private boolean checkForWorkflowCompletion(final Workflow workflow) throws Termi\n         while (isTaskSkipped(taskToSchedule, workflow)) {\n             taskToSchedule = workflowDef.getNextTask(taskToSchedule.getTaskReferenceName());\n         }\n+        if (taskToSchedule != null && TaskType.DO_WHILE.name().equals(taskToSchedule.getType())) {\n+            // check if already has this DO_WHILE task, ignore it if it already exists\n+            String nextTaskReferenceName = taskToSchedule.getTaskReferenceName();\n+            if (workflow.getTasks().stream().anyMatch(runningTask -> runningTask.getReferenceTaskName().equals(nextTaskReferenceName))) {\n+                return Collections.emptyList();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcyMDc0OA=="}, "originalCommit": {"oid": "d4a33fcc451eed883d04ae9ea38fae6634083665"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4111, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}