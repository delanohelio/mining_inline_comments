{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2OTIzOTA2", "number": 1723, "title": "Extend archive module to support TTL and delay", "bodyText": "Added new workflow status listener called ArchivingWithTTLWorkflowStatusListener that supports delayed archiving and setting time-to-live for the documents in Redis for now (can be extended to Cassandra later).\nDelayed Archiving: It is required in cases where short workflows are indexed after a delay and updateIndex will fail in those cases since the document might not exist. Further, when using async indexing, in case of high throughput scenarios, an asynchronous create document index request could be pending in the indexQueue, and the synchronous update request will fail due to missing document.\nTime-to-live: It is helpful in the case of TERMINATED workflows. If the parent workflow is terminated and then sub-workflow is canceled. In those cases, the task worker could still be running the task and when it completes and try to update the status of the task, the task/workflow will be missing in persistence if the workflow is archived immediately after the termination/completion.  So TTL can help in this case.  Also if the parent-workflow need to lookup output from sub-workflow, using TTL can help the data to be available in the memory(Redis case) rather than disk lookup in elasticsearch.", "createdAt": "2020-06-03T02:23:53Z", "url": "https://github.com/Netflix/conductor/pull/1723", "merged": true, "mergeCommit": {"oid": "088c09177e4e9ff1237fe42870fbc0b328bc73d7"}, "closed": true, "closedAt": "2020-07-08T00:00:26Z", "author": {"login": "mdepak"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcngTfngH2gAyNDI2OTIzOTA2Ojc1ODkyOTVkMzk4Yjk0NGE1OTZkNzFiZDY3YWVhNGU2OTdiODc0MjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcyu5DpgFqTQ0NDMyNzIzNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7589295d398b944a596d71bd67aea4e697b87423", "author": {"user": {"login": "mdepak", "name": "Deepak Mahudeswaran"}}, "url": "https://github.com/Netflix/conductor/commit/7589295d398b944a596d71bd67aea4e697b87423", "committedDate": "2020-06-03T02:47:23Z", "message": "Added workflow status listener to archive workflows with TTL"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e5b040f814c1d8d07a78c30dd04f264b26e8d3e", "author": {"user": {"login": "mdepak", "name": "Deepak Mahudeswaran"}}, "url": "https://github.com/Netflix/conductor/commit/5e5b040f814c1d8d07a78c30dd04f264b26e8d3e", "committedDate": "2020-06-03T02:47:23Z", "message": "Disable async indexing on create workflow"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c82c7a3c0ce74ed73a5f48c0a66826d82d88fe7f", "author": {"user": {"login": "mdepak", "name": "Deepak Mahudeswaran"}}, "url": "https://github.com/Netflix/conductor/commit/c82c7a3c0ce74ed73a5f48c0a66826d82d88fe7f", "committedDate": "2020-06-03T02:47:23Z", "message": "Delayed archiving"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39a7c97fd0e8a3ca16eee6c42134f711536f2437", "author": {"user": {"login": "mdepak", "name": "Deepak Mahudeswaran"}}, "url": "https://github.com/Netflix/conductor/commit/39a7c97fd0e8a3ca16eee6c42134f711536f2437", "committedDate": "2020-06-03T02:47:23Z", "message": "Minor refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51209930d464c7116e6218e6440aa3b2bc407667", "author": {"user": {"login": "mdepak", "name": "Deepak Mahudeswaran"}}, "url": "https://github.com/Netflix/conductor/commit/51209930d464c7116e6218e6440aa3b2bc407667", "committedDate": "2020-06-03T03:07:37Z", "message": "Fix unit test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "231ee0544ae4677f92678f11927f5d9f142f5a3e", "author": {"user": {"login": "mdepak", "name": "Deepak Mahudeswaran"}}, "url": "https://github.com/Netflix/conductor/commit/231ee0544ae4677f92678f11927f5d9f142f5a3e", "committedDate": "2020-06-02T22:01:24Z", "message": "Minor refactoring"}, "afterCommit": {"oid": "51209930d464c7116e6218e6440aa3b2bc407667", "author": {"user": {"login": "mdepak", "name": "Deepak Mahudeswaran"}}, "url": "https://github.com/Netflix/conductor/commit/51209930d464c7116e6218e6440aa3b2bc407667", "committedDate": "2020-06-03T03:07:37Z", "message": "Fix unit test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NTgzMjU0", "url": "https://github.com/Netflix/conductor/pull/1723#pullrequestreview-439583254", "createdAt": "2020-06-30T00:10:55Z", "commit": {"oid": "51209930d464c7116e6218e6440aa3b2bc407667"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMDoxMDo1NVrOGqm2MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMDoxNzoyNFrOGqm-Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyOTg0MA==", "bodyText": "Exposing a configuration without an ability to actually configure sounds very counter-intuitive. I believe that it would be better to just use the async update delay property directly.", "url": "https://github.com/Netflix/conductor/pull/1723#discussion_r447329840", "createdAt": "2020-06-30T00:10:55Z", "author": {"login": "apanicker-nflx"}, "path": "core/src/main/java/com/netflix/conductor/core/config/Configuration.java", "diffHunk": "@@ -105,6 +105,14 @@\n     String EVENT_EXECUTION_PERSISTENCE_TTL_SECS_PROPERTY_NAME = \"workflow.event.execution.persistence.ttl.seconds\";\n     int EVENT_EXECUTION_PERSISTENCE_TTL_SECS_DEFAULT_VALUE = 0;\n \n+    String WORKFLOW_ARCHIVAL_TTL_SECS_PROPERTY_NAME = \"workflow.archival.ttl.seconds\";\n+    int WORKFLOW_ARCHIVAL_TTL_SECS_DEFAULT_VALUE = 0;\n+\n+    String WORKFLOW_ARCHIVAL_DELAY_SECS_PROPERTY_NAME = \"workflow.archival.delay.seconds\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51209930d464c7116e6218e6440aa3b2bc407667"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMzMDA1Mw==", "bodyText": "Consider using getAsyncUpdateDelay directly over this indirection to reduce confusion.", "url": "https://github.com/Netflix/conductor/pull/1723#discussion_r447330053", "createdAt": "2020-06-30T00:11:32Z", "author": {"login": "apanicker-nflx"}, "path": "core/src/main/java/com/netflix/conductor/core/config/Configuration.java", "diffHunk": "@@ -317,6 +325,28 @@ default String getElasticSearchDocumentTypeOverride() {\n             ELASTIC_SEARCH_DOCUMENT_TYPE_OVERRIDE_DEFAULT_VALUE);\n     }\n \n+    /**\n+     * @return The time to live in seconds for workflow archiving module. Currently, only RedisExecutionDAO supports it.\n+     */\n+    default int getWorkflowArchivalTTL() {\n+        return getIntProperty(WORKFLOW_ARCHIVAL_TTL_SECS_PROPERTY_NAME, WORKFLOW_ARCHIVAL_TTL_SECS_DEFAULT_VALUE);\n+    }\n+\n+    /**\n+     * @return the time to delay the archival of workflow\n+     */\n+    default int getWorkflowArchivalDelay() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51209930d464c7116e6218e6440aa3b2bc407667"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMzMTkxMA==", "bodyText": "Since the removal of the workflow only uses the workflowId in the run method below in line 105, the object size can be reduced tremendously by only saving the worklfowId as part of the instance.", "url": "https://github.com/Netflix/conductor/pull/1723#discussion_r447331910", "createdAt": "2020-06-30T00:17:24Z", "author": {"login": "apanicker-nflx"}, "path": "contribs/src/main/java/com/netflix/conductor/contribs/listener/ArchivingWithTTLWorkflowStatusListener.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ * <p>\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.conductor.contribs.listener;\n+\n+import com.netflix.conductor.common.run.Workflow;\n+import com.netflix.conductor.core.config.Configuration;\n+import com.netflix.conductor.core.execution.WorkflowStatusListener;\n+import com.netflix.conductor.core.orchestration.ExecutionDAOFacade;\n+import com.netflix.conductor.metrics.Monitors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.PreDestroy;\n+import javax.inject.Inject;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+public class ArchivingWithTTLWorkflowStatusListener implements WorkflowStatusListener {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ArchivingWorkflowStatusListener.class);\n+\n+    private final ExecutionDAOFacade executionDAOFacade;\n+    private final int archiveTTLSeconds;\n+    private final int delayArchiveSeconds;\n+    private final ScheduledThreadPoolExecutor scheduledThreadPoolExecutor;\n+\n+    @Inject\n+    public ArchivingWithTTLWorkflowStatusListener(ExecutionDAOFacade executionDAOFacade, Configuration config) {\n+        this.executionDAOFacade = executionDAOFacade;\n+        this.archiveTTLSeconds = config.getWorkflowArchivalTTL();\n+        this.delayArchiveSeconds = config.getWorkflowArchivalDelay();\n+\n+        this.scheduledThreadPoolExecutor = new ScheduledThreadPoolExecutor(config.getWorkflowArchivalDelayQueueWorkerThreadCount(),\n+                (runnable, executor) -> {\n+                    LOGGER.warn(\"Request {} to delay archiving index dropped in executor {}\", runnable, executor);\n+                    Monitors.recordDiscardedArchivalCount();\n+                });\n+        this.scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);\n+    }\n+\n+    @PreDestroy\n+    public void shutdownExecutorService() {\n+        try {\n+            LOGGER.info(\"Gracefully shutdown executor service\");\n+            scheduledThreadPoolExecutor.shutdown();\n+            if (scheduledThreadPoolExecutor.awaitTermination(delayArchiveSeconds, TimeUnit.SECONDS)) {\n+                LOGGER.debug(\"tasks completed, shutting down\");\n+            } else {\n+                LOGGER.warn(\"Forcing shutdown after waiting for {} seconds\", delayArchiveSeconds);\n+                scheduledThreadPoolExecutor.shutdownNow();\n+            }\n+        } catch (InterruptedException ie) {\n+            LOGGER.warn(\"Shutdown interrupted, invoking shutdownNow on scheduledThreadPoolExecutor for delay queue\");\n+            scheduledThreadPoolExecutor.shutdownNow();\n+            Thread.currentThread().interrupt();\n+        }\n+    }\n+\n+    @Override\n+    public void onWorkflowCompleted(Workflow workflow) {\n+        LOGGER.info(\"Archiving workflow {} on completion \", workflow.getWorkflowId());\n+        if (delayArchiveSeconds > 0) {\n+            scheduledThreadPoolExecutor.schedule(new DelayArchiveWorkflow(workflow, executionDAOFacade), delayArchiveSeconds, TimeUnit.SECONDS);\n+        } else {\n+            this.executionDAOFacade.removeWorkflowWithExpiry(workflow.getWorkflowId(), true, archiveTTLSeconds);\n+            Monitors.recordWorkflowArchived(workflow.getWorkflowName(), workflow.getStatus());\n+        }\n+    }\n+\n+    @Override\n+    public void onWorkflowTerminated(Workflow workflow) {\n+        LOGGER.info(\"Archiving workflow {} on termination\", workflow.getWorkflowId());\n+        if (delayArchiveSeconds > 0) {\n+            scheduledThreadPoolExecutor.schedule(new DelayArchiveWorkflow(workflow, executionDAOFacade), delayArchiveSeconds, TimeUnit.SECONDS);\n+        } else {\n+            this.executionDAOFacade.removeWorkflowWithExpiry(workflow.getWorkflowId(), true, archiveTTLSeconds);\n+            Monitors.recordWorkflowArchived(workflow.getWorkflowName(), workflow.getStatus());\n+        }\n+    }\n+\n+    private class DelayArchiveWorkflow implements Runnable {\n+        private final Workflow workflow;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51209930d464c7116e6218e6440aa3b2bc407667"}, "originalPosition": 94}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36e222fbe6dc04779d87a7adc0bb3b69381379a1", "author": {"user": {"login": "mdepak", "name": "Deepak Mahudeswaran"}}, "url": "https://github.com/Netflix/conductor/commit/36e222fbe6dc04779d87a7adc0bb3b69381379a1", "committedDate": "2020-06-30T17:26:26Z", "message": "Minor refactoring in delayed workflow archival"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MzI3MjM3", "url": "https://github.com/Netflix/conductor/pull/1723#pullrequestreview-444327237", "createdAt": "2020-07-08T00:00:15Z", "commit": {"oid": "36e222fbe6dc04779d87a7adc0bb3b69381379a1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 800, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}