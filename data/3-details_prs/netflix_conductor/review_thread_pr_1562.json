{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MjAzMjQz", "number": 1562, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMToxNTo0OFrODlYi-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDo0ODowNFrODl-zKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTI2MDc0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMToxNTo0OFrOFyPo2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzoxNDozM1rOFyS_7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyOTMzNg==", "bodyText": "if taskDef.getPollTimeoutSeconds() is null (the case for all tasks defined before that functionality has been merged, and it's optional), this check is a bit weird.\nPerhaps only checking it's not null is enough instead.", "url": "https://github.com/Netflix/conductor/pull/1562#discussion_r388229336", "createdAt": "2020-03-05T11:15:48Z", "author": {"login": "Jiehong"}, "path": "core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java", "diffHunk": "@@ -524,23 +524,38 @@ void checkTaskTimeout(TaskDef taskDef, Task task) {\n             LOGGER.warn(\"Missing task definition for task:{}/{} in workflow:{}\", task.getTaskId(), task.getTaskDefName(), task.getWorkflowInstanceId());\n             return;\n         }\n-        if (task.getStatus().isTerminal() || taskDef.getTimeoutSeconds() <= 0 || task.getStartTime() <= 0) {\n+        if (task.getStatus().isTerminal()) {\n             return;\n         }\n \n-        long timeout = 1000L * taskDef.getTimeoutSeconds();\n-        long now = System.currentTimeMillis();\n-        long elapsedTime = now - (task.getStartTime() + ((long) task.getStartDelayInSeconds() * 1000L));\n+        String reason = null;\n+        final long now = System.currentTimeMillis();\n+        final long startDelay = 1000L * task.getStartDelayInSeconds();\n \n-        if (elapsedTime < timeout) {\n-            return;\n+        if (task.getStatus().equals(SCHEDULED) && taskDef.getPollTimeoutSeconds() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d28d220cba9adf36efac7186d68bdfd88359521d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI1MzExMQ==", "bodyText": "I think both (!= null and > 0) need to be checked. We can assume (to write down on the doc) that if pollTimeoutSeconds is set to 0, no checkTaskTimeout should be performed in this case", "url": "https://github.com/Netflix/conductor/pull/1562#discussion_r388253111", "createdAt": "2020-03-05T12:07:36Z", "author": {"login": "andrea11"}, "path": "core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java", "diffHunk": "@@ -524,23 +524,38 @@ void checkTaskTimeout(TaskDef taskDef, Task task) {\n             LOGGER.warn(\"Missing task definition for task:{}/{} in workflow:{}\", task.getTaskId(), task.getTaskDefName(), task.getWorkflowInstanceId());\n             return;\n         }\n-        if (task.getStatus().isTerminal() || taskDef.getTimeoutSeconds() <= 0 || task.getStartTime() <= 0) {\n+        if (task.getStatus().isTerminal()) {\n             return;\n         }\n \n-        long timeout = 1000L * taskDef.getTimeoutSeconds();\n-        long now = System.currentTimeMillis();\n-        long elapsedTime = now - (task.getStartTime() + ((long) task.getStartDelayInSeconds() * 1000L));\n+        String reason = null;\n+        final long now = System.currentTimeMillis();\n+        final long startDelay = 1000L * task.getStartDelayInSeconds();\n \n-        if (elapsedTime < timeout) {\n-            return;\n+        if (task.getStatus().equals(SCHEDULED) && taskDef.getPollTimeoutSeconds() > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyOTMzNg=="}, "originalCommit": {"oid": "d28d220cba9adf36efac7186d68bdfd88359521d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4NDM5Nw==", "bodyText": "Done", "url": "https://github.com/Netflix/conductor/pull/1562#discussion_r388284397", "createdAt": "2020-03-05T13:14:33Z", "author": {"login": "nbraquart"}, "path": "core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java", "diffHunk": "@@ -524,23 +524,38 @@ void checkTaskTimeout(TaskDef taskDef, Task task) {\n             LOGGER.warn(\"Missing task definition for task:{}/{} in workflow:{}\", task.getTaskId(), task.getTaskDefName(), task.getWorkflowInstanceId());\n             return;\n         }\n-        if (task.getStatus().isTerminal() || taskDef.getTimeoutSeconds() <= 0 || task.getStartTime() <= 0) {\n+        if (task.getStatus().isTerminal()) {\n             return;\n         }\n \n-        long timeout = 1000L * taskDef.getTimeoutSeconds();\n-        long now = System.currentTimeMillis();\n-        long elapsedTime = now - (task.getStartTime() + ((long) task.getStartDelayInSeconds() * 1000L));\n+        String reason = null;\n+        final long now = System.currentTimeMillis();\n+        final long startDelay = 1000L * task.getStartDelayInSeconds();\n \n-        if (elapsedTime < timeout) {\n-            return;\n+        if (task.getStatus().equals(SCHEDULED) && taskDef.getPollTimeoutSeconds() > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyOTMzNg=="}, "originalCommit": {"oid": "d28d220cba9adf36efac7186d68bdfd88359521d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTI2Njk5OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/netflix/conductor/common/metadata/tasks/TaskDef.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMToxNzo1MlrOFyPsoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzoxNDoyOFrOFyS_wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzMDMwNQ==", "bodyText": "This field shouldn't be allowed to be negative. Could you please add a @Min like for responseTimeoutSeconds ?", "url": "https://github.com/Netflix/conductor/pull/1562#discussion_r388230305", "createdAt": "2020-03-05T11:17:52Z", "author": {"login": "Jiehong"}, "path": "common/src/main/java/com/netflix/conductor/common/metadata/tasks/TaskDef.java", "diffHunk": "@@ -113,6 +113,9 @@\n \t@Email(message = \"ownerEmail should be valid email address\")\n \tprivate String ownerEmail;\n \n+\t@ProtoField(id = 19)\n+\tprivate Integer pollTimeoutSeconds;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d28d220cba9adf36efac7186d68bdfd88359521d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4NDM1Mg==", "bodyText": "Done", "url": "https://github.com/Netflix/conductor/pull/1562#discussion_r388284352", "createdAt": "2020-03-05T13:14:28Z", "author": {"login": "nbraquart"}, "path": "common/src/main/java/com/netflix/conductor/common/metadata/tasks/TaskDef.java", "diffHunk": "@@ -113,6 +113,9 @@\n \t@Email(message = \"ownerEmail should be valid email address\")\n \tprivate String ownerEmail;\n \n+\t@ProtoField(id = 19)\n+\tprivate Integer pollTimeoutSeconds;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzMDMwNQ=="}, "originalCommit": {"oid": "d28d220cba9adf36efac7186d68bdfd88359521d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTQzMTAyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMjoxMzo0NVrOFyRQGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzoxNDoyNVrOFyS_nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI1NTc2OQ==", "bodyText": "maybe use Optional?", "url": "https://github.com/Netflix/conductor/pull/1562#discussion_r388255769", "createdAt": "2020-03-05T12:13:45Z", "author": {"login": "andrea11"}, "path": "core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java", "diffHunk": "@@ -524,23 +524,38 @@ void checkTaskTimeout(TaskDef taskDef, Task task) {\n             LOGGER.warn(\"Missing task definition for task:{}/{} in workflow:{}\", task.getTaskId(), task.getTaskDefName(), task.getWorkflowInstanceId());\n             return;\n         }\n-        if (task.getStatus().isTerminal() || taskDef.getTimeoutSeconds() <= 0 || task.getStartTime() <= 0) {\n+        if (task.getStatus().isTerminal()) {\n             return;\n         }\n \n-        long timeout = 1000L * taskDef.getTimeoutSeconds();\n-        long now = System.currentTimeMillis();\n-        long elapsedTime = now - (task.getStartTime() + ((long) task.getStartDelayInSeconds() * 1000L));\n+        String reason = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d28d220cba9adf36efac7186d68bdfd88359521d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4NDMxNg==", "bodyText": "No longer applicable", "url": "https://github.com/Netflix/conductor/pull/1562#discussion_r388284316", "createdAt": "2020-03-05T13:14:25Z", "author": {"login": "nbraquart"}, "path": "core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java", "diffHunk": "@@ -524,23 +524,38 @@ void checkTaskTimeout(TaskDef taskDef, Task task) {\n             LOGGER.warn(\"Missing task definition for task:{}/{} in workflow:{}\", task.getTaskId(), task.getTaskDefName(), task.getWorkflowInstanceId());\n             return;\n         }\n-        if (task.getStatus().isTerminal() || taskDef.getTimeoutSeconds() <= 0 || task.getStartTime() <= 0) {\n+        if (task.getStatus().isTerminal()) {\n             return;\n         }\n \n-        long timeout = 1000L * taskDef.getTimeoutSeconds();\n-        long now = System.currentTimeMillis();\n-        long elapsedTime = now - (task.getStartTime() + ((long) task.getStartDelayInSeconds() * 1000L));\n+        String reason = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI1NTc2OQ=="}, "originalCommit": {"oid": "d28d220cba9adf36efac7186d68bdfd88359521d"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTUyODEwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDo0ODowNFrOFzLW1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTowNjozNFrOFzfM_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNzc2Ng==", "bodyText": "When a task is sent back from the worker with callbackAfterSeconds set and IN_PROGRESS status, Conductor will mark this task as SCHEDULED and set it to invisible state in the queue to be available for polling after the specified callbackAfterSeconds. Reference\nIn these cases, the pollElapsedTime calculation here would wrongly mark this task to be poll timed out. This calculation would need to take into account, this scenario of callbackAfterSeconds and invisibility period on the queues. A similar time calculation can be found in the isResponseTimedOut method in this class for reference.", "url": "https://github.com/Netflix/conductor/pull/1562#discussion_r389207766", "createdAt": "2020-03-07T00:48:04Z", "author": {"login": "apanicker-nflx"}, "path": "core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java", "diffHunk": "@@ -536,8 +537,36 @@ void checkTaskTimeout(TaskDef taskDef, Task task) {\n             return;\n         }\n \n-        String reason = String.format(\"Task timed out after %d seconds. Timeout configured as %d. \"\n-            + \"Timeout policy configured to %s\", elapsedTime/1000L, timeout, taskDef.getTimeoutPolicy().name());\n+        String reason = String.format(\"Task timed out after %d seconds. Timeout configured as %d seconds. \"\n+            + \"Timeout policy configured to %s\", elapsedTime / 1000L, timeout / 1000L, taskDef.getTimeoutPolicy().name());\n+        timeoutTaskWithTimeoutPolicy(reason, taskDef, task);\n+    }\n+\n+    @VisibleForTesting\n+    void checkTaskPollTimeout(TaskDef taskDef, Task task) {\n+        if (taskDef == null) {\n+            LOGGER.warn(\"Missing task definition for task:{}/{} in workflow:{}\", task.getTaskId(), task.getTaskDefName(), task.getWorkflowInstanceId());\n+            return;\n+        }\n+        if (taskDef.getPollTimeoutSeconds() == null || taskDef.getPollTimeoutSeconds() <= 0 || !task.getStatus().equals(SCHEDULED)) {\n+            return;\n+        }\n+\n+        final long pollTimeout = 1000L * taskDef.getPollTimeoutSeconds();\n+        final long now = System.currentTimeMillis();\n+        final long pollElapsedTime = now - (task.getScheduledTime() + ((long) task.getStartDelayInSeconds() * 1000L));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb1c6f1715b3ae16b5143e7956f205f854998e00"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUzMjkyNA==", "bodyText": "Thanks for the feedback. I have added the callbackAfterSeconds to the timeout for a correct computation as per your suggestion.", "url": "https://github.com/Netflix/conductor/pull/1562#discussion_r389532924", "createdAt": "2020-03-09T09:06:34Z", "author": {"login": "nbraquart"}, "path": "core/src/main/java/com/netflix/conductor/core/execution/DeciderService.java", "diffHunk": "@@ -536,8 +537,36 @@ void checkTaskTimeout(TaskDef taskDef, Task task) {\n             return;\n         }\n \n-        String reason = String.format(\"Task timed out after %d seconds. Timeout configured as %d. \"\n-            + \"Timeout policy configured to %s\", elapsedTime/1000L, timeout, taskDef.getTimeoutPolicy().name());\n+        String reason = String.format(\"Task timed out after %d seconds. Timeout configured as %d seconds. \"\n+            + \"Timeout policy configured to %s\", elapsedTime / 1000L, timeout / 1000L, taskDef.getTimeoutPolicy().name());\n+        timeoutTaskWithTimeoutPolicy(reason, taskDef, task);\n+    }\n+\n+    @VisibleForTesting\n+    void checkTaskPollTimeout(TaskDef taskDef, Task task) {\n+        if (taskDef == null) {\n+            LOGGER.warn(\"Missing task definition for task:{}/{} in workflow:{}\", task.getTaskId(), task.getTaskDefName(), task.getWorkflowInstanceId());\n+            return;\n+        }\n+        if (taskDef.getPollTimeoutSeconds() == null || taskDef.getPollTimeoutSeconds() <= 0 || !task.getStatus().equals(SCHEDULED)) {\n+            return;\n+        }\n+\n+        final long pollTimeout = 1000L * taskDef.getPollTimeoutSeconds();\n+        final long now = System.currentTimeMillis();\n+        final long pollElapsedTime = now - (task.getScheduledTime() + ((long) task.getStartDelayInSeconds() * 1000L));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNzc2Ng=="}, "originalCommit": {"oid": "fb1c6f1715b3ae16b5143e7956f205f854998e00"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4250, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}