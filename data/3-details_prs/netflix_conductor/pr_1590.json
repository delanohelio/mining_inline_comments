{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5OTU4MDE0", "number": 1590, "title": "Document MySQL lack of rate limiting support", "bodyText": "The lack of support for time-based rate limiting for a MySQL-backed Conductor seems completely undocumented. If it's documented, it's fairly hidden (I was not able to find it by specifically Googling \"conductor rate limit\"). It should be clearly documented in context.", "createdAt": "2020-03-17T16:55:45Z", "url": "https://github.com/Netflix/conductor/pull/1590", "merged": true, "mergeCommit": {"oid": "d139217183ef73b33e79c7ebefb70b0734e21945"}, "closed": true, "closedAt": "2020-03-20T16:54:11Z", "author": {"login": "scarlac"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcO_mI9AFqTM3NzI5NzM1NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPZYJigBqjMxNDgwNjUxNzI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3Mjk3MzU1", "url": "https://github.com/Netflix/conductor/pull/1590#pullrequestreview-377297355", "createdAt": "2020-03-18T23:06:42Z", "commit": {"oid": "085565ec1b268c0d67722d5cc3551e7f13ae9d05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMzowNjo0MlrOF4Z6sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMzowNjo0MlrOF4Z6sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4OTIwMg==", "bodyText": "@scarlac Thanks for pointing this out and updating the documentation accordingly. The implementation of the RateLimitingDAO is provided in the redis-persistence module only and is not available with other persistence layers. Could you please modify this documentation accordingly.", "url": "https://github.com/Netflix/conductor/pull/1590#discussion_r394689202", "createdAt": "2020-03-18T23:06:42Z", "author": {"login": "apanicker-nflx"}, "path": "docs/docs/configuration/taskdef.md", "diffHunk": "@@ -68,7 +68,8 @@ If you have 1000 task executions waiting in the queue, and 1000 workers polling\n * `rateLimitPerFrequency`defines the number of Tasks that can be given to Workers per given \"frequency window\".  \n **Example:**  \n Let's set `rateLimitFrequencyInSeconds = 5`, and `rateLimitPerFrequency = 12`. This means, our frequency window is of 5 seconds duration, and for each frequency window, Conductor would only give 12 tasks to workers. So, in a given minute, Conductor would only give 12*(60/5) = 144 tasks to workers irrespective of the number of workers that are polling for the task.  \n-Note that unlike `concurrentExecLimit`, rate limiting doesn't take into account tasks already in progress/completed. Even if all the previous tasks are executed within 1 sec, or would take a few days, the new tasks are still given to workers at configured frequency, 144 tasks per minute in above example.\n+Note that unlike `concurrentExecLimit`, rate limiting doesn't take into account tasks already in progress/completed. Even if all the previous tasks are executed within 1 sec, or would take a few days, the new tasks are still given to workers at configured frequency, 144 tasks per minute in above example.   \n+Note: MySQL does not currently support `rateLimitPerFrequency` and `rateLimitFrequencyInSeconds`. Please use `concurrentExecLimit` instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "085565ec1b268c0d67722d5cc3551e7f13ae9d05"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3Mjk5NzU3", "url": "https://github.com/Netflix/conductor/pull/1590#pullrequestreview-377299757", "createdAt": "2020-03-18T23:12:19Z", "commit": {"oid": "61975fcd10c79cc6e52a429cfe52a2f5536932d8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMzoxMjoyMFrOF4aBsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMzoxMjoyMFrOF4aBsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY5MDk5Mw==", "bodyText": "@apanicker-nflx Changed the wording. How does this sound?", "url": "https://github.com/Netflix/conductor/pull/1590#discussion_r394690993", "createdAt": "2020-03-18T23:12:20Z", "author": {"login": "scarlac"}, "path": "docs/docs/configuration/taskdef.md", "diffHunk": "@@ -68,7 +68,9 @@ If you have 1000 task executions waiting in the queue, and 1000 workers polling\n * `rateLimitPerFrequency`defines the number of Tasks that can be given to Workers per given \"frequency window\".  \n **Example:**  \n Let's set `rateLimitFrequencyInSeconds = 5`, and `rateLimitPerFrequency = 12`. This means, our frequency window is of 5 seconds duration, and for each frequency window, Conductor would only give 12 tasks to workers. So, in a given minute, Conductor would only give 12*(60/5) = 144 tasks to workers irrespective of the number of workers that are polling for the task.  \n-Note that unlike `concurrentExecLimit`, rate limiting doesn't take into account tasks already in progress/completed. Even if all the previous tasks are executed within 1 sec, or would take a few days, the new tasks are still given to workers at configured frequency, 144 tasks per minute in above example.\n+Note that unlike `concurrentExecLimit`, rate limiting doesn't take into account tasks already in progress/completed. Even if all the previous tasks are executed within 1 sec, or would take a few days, the new tasks are still given to workers at configured frequency, 144 tasks per minute in above example.   \n+The implementation of the RateLimitingDAO is provided in the redis-persistence module only and is not available with other persistence layers.\n+Note: Rate limiting is only supported for the Redis-persistence module and is not available with other persistence layers. Consider using `concurrentExecLimit` instead if you are using a different persistence module.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61975fcd10c79cc6e52a429cfe52a2f5536932d8"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cdf444f2c8830b886f76d0308aa104e31de378c", "author": {"user": {"login": "scarlac", "name": "Seph Soliman"}}, "url": "https://github.com/Netflix/conductor/commit/6cdf444f2c8830b886f76d0308aa104e31de378c", "committedDate": "2020-03-20T05:08:37Z", "message": "Document MySQL lack of rate limiting support"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d26df24f70476d6dc8d77abb53df3fa738e8d2df", "author": {"user": {"login": "scarlac", "name": "Seph Soliman"}}, "url": "https://github.com/Netflix/conductor/commit/d26df24f70476d6dc8d77abb53df3fa738e8d2df", "committedDate": "2020-03-20T05:05:26Z", "message": "Removed duplicated blurb"}, "afterCommit": {"oid": "6cdf444f2c8830b886f76d0308aa104e31de378c", "author": {"user": {"login": "scarlac", "name": "Seph Soliman"}}, "url": "https://github.com/Netflix/conductor/commit/6cdf444f2c8830b886f76d0308aa104e31de378c", "committedDate": "2020-03-20T05:08:37Z", "message": "Document MySQL lack of rate limiting support"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 866, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}