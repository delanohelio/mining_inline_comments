{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0MTA5MDIy", "number": 1996, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xOFQwMToxMDo0OFrOFnSs6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xOFQwMToxMjo0NVrOFnSuNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc2NzQ1MTk0OnYy", "diffSide": "RIGHT", "path": ".github/workflows/ci.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xOFQwMToxMDo0OFrOI42jJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xOFQyMDoyNjowNFrOI5jTgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjQ4NDkwMA==", "bodyText": "Should this line be calling a modified version of buildViaTravis.sh? One that acts accordingly whether its a PR build, branch or release.", "url": "https://github.com/Netflix/conductor/pull/1996#discussion_r596484900", "createdAt": "2021-03-18T01:10:48Z", "author": {"login": "aravindanr"}, "path": ".github/workflows/ci.yml", "diffHunk": "@@ -0,0 +1,42 @@\n+# This workflow will build the project\n+\n+name: CI\n+\n+on:\n+  push:\n+    branches:\n+      - '3.0'\n+    tags:\n+      - v3.*\n+  pull_request:\n+    branches:\n+      - '3.0'\n+\n+  # Allow running this workflow manually from the Actions tab\n+  workflow_dispatch:\n+\n+jobs:\n+  build:\n+    # The type of runner that the job will run on\n+    runs-on: ubuntu-latest\n+\n+    steps:\n+      - uses: actions/checkout@v2\n+        with:\n+          ref: ${{ github.event.pull_request.head.sha }}\n+      - name: Gradle wrapper validation\n+        uses: gradle/wrapper-validation-action@v1\n+      - name: Set up JDK 1.8\n+        uses: actions/setup-java@v1\n+        with:\n+          java-version: 1.8\n+      - name: Cache Gradle packages\n+        uses: actions/cache@v2\n+        with:\n+          path: ~/.gradle/caches\n+          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}\n+          restore-keys: ${{ runner.os }}-gradle\n+      - name: Build with Gradle\n+        run: |\n+          echo \"Running build for commit ${{ github.sha }} in ${{ github.head_ref }}\"\n+          ./gradlew build -x javadoc", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54bdad1ee600bbe02189249344c5489627cfe2f0"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzIxODE3Ng==", "bodyText": "This PR is only to get the CI action working in GitHub. I will create another one for the publishing action.", "url": "https://github.com/Netflix/conductor/pull/1996#discussion_r597218176", "createdAt": "2021-03-18T20:26:04Z", "author": {"login": "apanicker-nflx"}, "path": ".github/workflows/ci.yml", "diffHunk": "@@ -0,0 +1,42 @@\n+# This workflow will build the project\n+\n+name: CI\n+\n+on:\n+  push:\n+    branches:\n+      - '3.0'\n+    tags:\n+      - v3.*\n+  pull_request:\n+    branches:\n+      - '3.0'\n+\n+  # Allow running this workflow manually from the Actions tab\n+  workflow_dispatch:\n+\n+jobs:\n+  build:\n+    # The type of runner that the job will run on\n+    runs-on: ubuntu-latest\n+\n+    steps:\n+      - uses: actions/checkout@v2\n+        with:\n+          ref: ${{ github.event.pull_request.head.sha }}\n+      - name: Gradle wrapper validation\n+        uses: gradle/wrapper-validation-action@v1\n+      - name: Set up JDK 1.8\n+        uses: actions/setup-java@v1\n+        with:\n+          java-version: 1.8\n+      - name: Cache Gradle packages\n+        uses: actions/cache@v2\n+        with:\n+          path: ~/.gradle/caches\n+          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}\n+          restore-keys: ${{ runner.os }}-gradle\n+      - name: Build with Gradle\n+        run: |\n+          echo \"Running build for commit ${{ github.sha }} in ${{ github.head_ref }}\"\n+          ./gradlew build -x javadoc", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjQ4NDkwMA=="}, "originalCommit": {"oid": "54bdad1ee600bbe02189249344c5489627cfe2f0"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc2NzQ1NTI1OnYy", "diffSide": "RIGHT", "path": "contribs/src/test/java/com/netflix/conductor/contribs/tasks/http/HttpTaskTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xOFQwMToxMjo0NVrOI42lJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xOFQwMToxMjo0NVrOI42lJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjQ4NTQxMg==", "bodyText": "This is not needed. @ClassRule takes care of destroying the docker container.", "url": "https://github.com/Netflix/conductor/pull/1996#discussion_r596485412", "createdAt": "2021-03-18T01:12:45Z", "author": {"login": "aravindanr"}, "path": "contribs/src/test/java/com/netflix/conductor/contribs/tasks/http/HttpTaskTest.java", "diffHunk": "@@ -77,18 +77,62 @@ public static void init() throws Exception {\n         map.put(\"SomeKey\", null);\n         JSON_RESPONSE = objectMapper.writeValueAsString(map);\n \n-        server = new Server(7009);\n-        ServletContextHandler servletContextHandler = new ServletContextHandler(server, \"/\",\n-            ServletContextHandler.SESSIONS);\n-        servletContextHandler.setHandler(new EchoHandler());\n-        server.start();\n+        final TypeReference<Map<String, Object>> mapOfObj = new TypeReference<Map<String, Object>>() {\n+        };\n+        MockServerClient client = new MockServerClient(mockServer.getHost(), mockServer.getServerPort());\n+        client.when(\n+            request()\n+                .withPath(\"/post\")\n+                .withMethod(\"POST\"))\n+            .respond(request -> {\n+                Map<String, Object> reqBody = objectMapper.readValue(request.getBody().toString(), mapOfObj);\n+                Set<String> keys = reqBody.keySet();\n+                Map<String, Object> respBody = new HashMap<>();\n+                keys.forEach(k -> respBody.put(k, k));\n+                return response()\n+                    .withContentType(MediaType.APPLICATION_JSON)\n+                    .withBody(objectMapper.writeValueAsString(respBody));\n+            });\n+        client.when(\n+            request()\n+                .withPath(\"/post2\")\n+                .withMethod(\"POST\"))\n+            .respond(response()\n+                .withStatusCode(204));\n+        client.when(\n+            request()\n+                .withPath(\"/failure\")\n+                .withMethod(\"GET\"))\n+            .respond(response()\n+                .withStatusCode(500)\n+                .withContentType(MediaType.TEXT_PLAIN)\n+                .withBody(ERROR_RESPONSE));\n+        client.when(\n+            request()\n+                .withPath(\"/text\")\n+                .withMethod(\"GET\"))\n+            .respond(response()\n+                .withBody(TEXT_RESPONSE));\n+        client.when(\n+            request()\n+                .withPath(\"/numeric\")\n+                .withMethod(\"GET\"))\n+            .respond(response()\n+                .withBody(String.valueOf(NUM_RESPONSE)));\n+        client.when(\n+            request()\n+                .withPath(\"/json\")\n+                .withMethod(\"GET\"))\n+            .respond(response()\n+                .withContentType(MediaType.APPLICATION_JSON)\n+                .withBody(JSON_RESPONSE));\n     }\n \n     @AfterClass\n     public static void cleanup() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54bdad1ee600bbe02189249344c5489627cfe2f0"}, "originalPosition": 133}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4150, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}