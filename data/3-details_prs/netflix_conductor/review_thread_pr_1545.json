{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4ODAxMTE2", "number": 1545, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODozMzozNFrODize4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODozMzozNFrODize4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODIxNjY0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODozMzozNFrOFuQYMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo1Mjo0MlrOFuUx7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0NzE1NA==", "bodyText": "Can we make this time duration configurable using a property? Overriding to a customizable value can provide more controls over the invisibility duration.", "url": "https://github.com/Netflix/conductor/pull/1545#discussion_r384047154", "createdAt": "2020-02-25T18:33:34Z", "author": {"login": "apanicker-nflx"}, "path": "core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "diffHunk": "@@ -1171,18 +1172,22 @@ public void executeSystemTask(WorkflowSystemTask systemTask, String taskId, int\n                     task.setStatus(CANCELED);\n                 }\n                 executionDAOFacade.updateTask(task);\n-                queueDAO.remove(QueueUtils.getQueueName(task), task.getTaskId());\n+                queueDAO.remove(queueName, task.getTaskId());\n                 return;\n             }\n \n             if (task.getStatus().equals(SCHEDULED)) {\n                 if (executionDAOFacade.exceedsInProgressLimit(task)) {\n                     //to do add a metric to record this\n                     LOGGER.warn(\"Concurrent Execution limited for {}:{}\", taskId, task.getTaskDefName());\n+                    // Postpone a message with duration of 60 seconds, so that it would be available for poll again.\n+                    queueDAO.postpone(queueName, taskId, task.getWorkflowPriority(), 60);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc12aff58f7bd93825c585613bb7577b6b18d4cb"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExOTI3OA==", "bodyText": "Done.", "url": "https://github.com/Netflix/conductor/pull/1545#discussion_r384119278", "createdAt": "2020-02-25T20:52:42Z", "author": {"login": "kishorebanala"}, "path": "core/src/main/java/com/netflix/conductor/core/execution/WorkflowExecutor.java", "diffHunk": "@@ -1171,18 +1172,22 @@ public void executeSystemTask(WorkflowSystemTask systemTask, String taskId, int\n                     task.setStatus(CANCELED);\n                 }\n                 executionDAOFacade.updateTask(task);\n-                queueDAO.remove(QueueUtils.getQueueName(task), task.getTaskId());\n+                queueDAO.remove(queueName, task.getTaskId());\n                 return;\n             }\n \n             if (task.getStatus().equals(SCHEDULED)) {\n                 if (executionDAOFacade.exceedsInProgressLimit(task)) {\n                     //to do add a metric to record this\n                     LOGGER.warn(\"Concurrent Execution limited for {}:{}\", taskId, task.getTaskDefName());\n+                    // Postpone a message with duration of 60 seconds, so that it would be available for poll again.\n+                    queueDAO.postpone(queueName, taskId, task.getWorkflowPriority(), 60);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0NzE1NA=="}, "originalCommit": {"oid": "cc12aff58f7bd93825c585613bb7577b6b18d4cb"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4241, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}