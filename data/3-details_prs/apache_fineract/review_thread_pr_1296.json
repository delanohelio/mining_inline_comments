{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0Njk2MTE4", "number": 1296, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwMjoxMDowOFrOEd7dQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwMjozMzowNFrOEd7jjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODE4MzA3OnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanReadPlatformServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwMjoxMDowOFrOHJYIQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMTo1ODowM1rOHKy9HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU5NDU2MQ==", "bodyText": "If we are removing one parameter from the query, should we not also pass one less parameter when we execute the query?", "url": "https://github.com/apache/fineract/pull/1296#discussion_r479594561", "createdAt": "2020-08-29T02:10:08Z", "author": {"login": "ptuomola"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanReadPlatformServiceImpl.java", "diffHunk": "@@ -431,7 +431,7 @@ public LoanTransactionData retrieveLoanTransactionTemplate(final Long loanId) {\n         this.context.authenticatedUser();\n \n         RepaymentTransactionTemplateMapper mapper = new RepaymentTransactionTemplateMapper();\n-        String sql = \"select \" + mapper.schema() + \" where l.id =?\";\n+        String sql = \"select \" + mapper.schema();\n         LoanTransactionData loanTransactionData = this.jdbcTemplate.queryForObject(sql, mapper, LoanTransactionType.REPAYMENT.getValue(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6202be1c442548d36a54d6dc5d24f0044082abe5"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA4MjY1Mg==", "bodyText": "I did not remove the parameter i only put it in its rightful place\nsqlBuilder.append(\" GROUP BY ls.duedate\");\t            sqlBuilder.append(\"WHERE l.id = ? \");\njust before the groub by object\nlook at line 2200\nBut still the sql runs even without this paramater is it is already called in other places like line 2198, line 2200 is just a \"fail safe\" parameter just in case there could be more than one result generated by the SQL script ( you never know)", "url": "https://github.com/apache/fineract/pull/1296#discussion_r481082652", "createdAt": "2020-09-01T11:58:03Z", "author": {"login": "francisguchie"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanReadPlatformServiceImpl.java", "diffHunk": "@@ -431,7 +431,7 @@ public LoanTransactionData retrieveLoanTransactionTemplate(final Long loanId) {\n         this.context.authenticatedUser();\n \n         RepaymentTransactionTemplateMapper mapper = new RepaymentTransactionTemplateMapper();\n-        String sql = \"select \" + mapper.schema() + \" where l.id =?\";\n+        String sql = \"select \" + mapper.schema();\n         LoanTransactionData loanTransactionData = this.jdbcTemplate.queryForObject(sql, mapper, LoanTransactionType.REPAYMENT.getValue(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU5NDU2MQ=="}, "originalCommit": {"oid": "6202be1c442548d36a54d6dc5d24f0044082abe5"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODE5OTE5OnYy", "diffSide": "LEFT", "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanReadPlatformServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwMjozMzowNFrOHJYQBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwMjozMzowNFrOHJYQBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU5NjU1MQ==", "bodyText": "Is there a reason for removing all these spaces from beginning of the strings? The reason for them, as far as I can see, is avoiding a situation where someone adds before a string that doesn't have a space at the end, and causes the next string to therefore generate broken SQL. I don't think they are harmful and can save us from some accidental illegal SQL...", "url": "https://github.com/apache/fineract/pull/1296#discussion_r479596551", "createdAt": "2020-08-29T02:33:04Z", "author": {"login": "ptuomola"}, "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanReadPlatformServiceImpl.java", "diffHunk": "@@ -2176,35 +2176,36 @@ public CurrencyData mapRow(ResultSet rs, @SuppressWarnings(\"unused\") int rowNum)\n         public String schema() {\n             StringBuilder sqlBuilder = new StringBuilder();\n \n-            sqlBuilder.append(\"if(max(tr.transaction_date)>ls.dueDate,max(tr.transaction_date),ls.dueDate) as transactionDate,\");\n+            sqlBuilder.append(\"if(max(tr.transaction_date)>ls.dueDate,max(tr.transaction_date),ls.dueDate) as transactionDate, \");\n             sqlBuilder.append(\n-                    \"ls.principal_amount - IFNULL(ls.principal_writtenoff_derived,0) - IFNULL(ls.principal_completed_derived,0) as principalDue,\");\n+                    \"ls.principal_amount - IFNULL(ls.principal_writtenoff_derived,0) - IFNULL(ls.principal_completed_derived,0) as principalDue, \");\n             sqlBuilder.append(\n-                    \"ls.interest_amount - IFNULL(ls.interest_completed_derived,0) - IFNULL(ls.interest_waived_derived,0) - IFNULL(ls.interest_writtenoff_derived,0) as interestDue,\");\n+                    \"ls.interest_amount - IFNULL(ls.interest_completed_derived,0) - IFNULL(ls.interest_waived_derived,0) - IFNULL(ls.interest_writtenoff_derived,0) as interestDue, \");\n             sqlBuilder.append(\n-                    \"ls.fee_charges_amount - IFNULL(ls.fee_charges_completed_derived,0) - IFNULL(ls.fee_charges_writtenoff_derived,0) - IFNULL(ls.fee_charges_waived_derived,0) as feeDue,\");\n+                    \"ls.fee_charges_amount - IFNULL(ls.fee_charges_completed_derived,0) - IFNULL(ls.fee_charges_writtenoff_derived,0) - IFNULL(ls.fee_charges_waived_derived,0) as feeDue, \");\n             sqlBuilder.append(\n-                    \"ls.penalty_charges_amount - IFNULL(ls.penalty_charges_completed_derived,0) - IFNULL(ls.penalty_charges_writtenoff_derived,0) - IFNULL(ls.penalty_charges_waived_derived,0) as penaltyDue,\");\n+                    \"ls.penalty_charges_amount - IFNULL(ls.penalty_charges_completed_derived,0) - IFNULL(ls.penalty_charges_writtenoff_derived,0) - IFNULL(ls.penalty_charges_waived_derived,0) as penaltyDue, \");\n             sqlBuilder.append(\n-                    \" l.currency_code as currencyCode, l.currency_digits as currencyDigits, l.currency_multiplesof as inMultiplesOf, rc.`name` as currencyName, \");\n-            sqlBuilder.append(\" rc.display_symbol as currencyDisplaySymbol, rc.internationalized_name_code as currencyNameCode \");\n-            sqlBuilder.append(\" FROM m_loan l\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6202be1c442548d36a54d6dc5d24f0044082abe5"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1825, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}