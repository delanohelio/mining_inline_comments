{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3Nzg0MjIw", "number": 1100, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTowNTo1OFrOEH4aAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOToxMjoyNFrOEH4jAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2Njk5NjQ4OnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/common/AuditHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTowNTo1OFrOGngO3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTo1Mjo1OFrOGnh74Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3NTc0MA==", "bodyText": "very minor feedback FYI, more for your learning: We usually use the abstract List instead of the concrete ArrayList implementation as type of the variable. Even better, since we are now on Java 11, why not start using var instead? Try just var responseAuditIDs = Utils.performServerGet(requestSpec, responseSpec, AUDIT_URL, \"id\"); (and don't use final var, that's just ugly).\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final ArrayList<Integer> responseAuditIDs = Utils.performServerGet(requestSpec, responseSpec, AUDIT_URL, \"id\");\n          \n          \n            \n                    final List<Integer> responseAuditIDs = Utils.performServerGet(requestSpec, responseSpec, AUDIT_URL, \"id\");", "url": "https://github.com/apache/fineract/pull/1100#discussion_r444075740", "createdAt": "2020-06-23T09:05:58Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/common/AuditHelper.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.integrationtests.common;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import io.restassured.specification.RequestSpecification;\n+import io.restassured.specification.ResponseSpecification;\n+import java.util.ArrayList;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * @author Manthan Surkar\n+ *\n+ */\n+\n+public class AuditHelper {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AuditHelper.class);\n+    private static final String AUDIT_BASE_URL = \"/fineract-provider/api/v1/audits?\" + Utils.TENANT_IDENTIFIER;\n+\n+    public static void verifyAuditCreatedOnServer(final RequestSpecification requestSpec, final ResponseSpecification responseSpec,\n+            final Integer resourceId, final String actionName, final String entityName) {\n+        LOG.info(\"------------------------------CHECK IF AUDIT CREATED------------------------------------\\n\");\n+        final String AUDIT_URL = \"/fineract-provider/api/v1/audits/?\" + \"entityName=\" + entityName + \"&resourceId=\" + resourceId\n+                + \"&actionName=\" + actionName + \"&\" + Utils.TENANT_IDENTIFIER;\n+        final ArrayList<Integer> responseAuditIDs = Utils.performServerGet(requestSpec, responseSpec, AUDIT_URL, \"id\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEwMzY0OQ==", "bodyText": "understood!", "url": "https://github.com/apache/fineract/pull/1100#discussion_r444103649", "createdAt": "2020-06-23T09:52:58Z", "author": {"login": "thesmallstar"}, "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/common/AuditHelper.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.integrationtests.common;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import io.restassured.specification.RequestSpecification;\n+import io.restassured.specification.ResponseSpecification;\n+import java.util.ArrayList;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * @author Manthan Surkar\n+ *\n+ */\n+\n+public class AuditHelper {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AuditHelper.class);\n+    private static final String AUDIT_BASE_URL = \"/fineract-provider/api/v1/audits?\" + Utils.TENANT_IDENTIFIER;\n+\n+    public static void verifyAuditCreatedOnServer(final RequestSpecification requestSpec, final ResponseSpecification responseSpec,\n+            final Integer resourceId, final String actionName, final String entityName) {\n+        LOG.info(\"------------------------------CHECK IF AUDIT CREATED------------------------------------\\n\");\n+        final String AUDIT_URL = \"/fineract-provider/api/v1/audits/?\" + \"entityName=\" + entityName + \"&resourceId=\" + resourceId\n+                + \"&actionName=\" + actionName + \"&\" + Utils.TENANT_IDENTIFIER;\n+        final ArrayList<Integer> responseAuditIDs = Utils.performServerGet(requestSpec, responseSpec, AUDIT_URL, \"id\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3NTc0MA=="}, "originalCommit": null, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzAwOTYzOnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/AuditIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTowOTo0NVrOGngXjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTo0Nzo0OVrOGnhwKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3Nzk2NA==", "bodyText": "as we've started discussing in #1019, it's actually kind of very wrong and confusing how classes such as ClientHelper and many other existing *Helper, take this.requestSpec, this.responseSpec BOTH as constructor arguments AND for their methods - that makes no sense; I should be either/or. That's not really the point of this PR though - just thought I'd let you know here for illustration.", "url": "https://github.com/apache/fineract/pull/1100#discussion_r444077964", "createdAt": "2020-06-23T09:09:45Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/AuditIntegrationTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.integrationtests;\n+\n+import io.restassured.builder.RequestSpecBuilder;\n+import io.restassured.builder.ResponseSpecBuilder;\n+import io.restassured.http.ContentType;\n+import io.restassured.specification.RequestSpecification;\n+import io.restassured.specification.ResponseSpecification;\n+import java.util.HashMap;\n+import org.apache.fineract.integrationtests.common.AuditHelper;\n+import org.apache.fineract.integrationtests.common.ClientHelper;\n+import org.apache.fineract.integrationtests.common.OfficeHelper;\n+import org.apache.fineract.integrationtests.common.Utils;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ *\n+ * @author Manthan Surkar\n+ *\n+ */\n+public class AuditIntegrationTest {\n+\n+    private ResponseSpecification responseSpec;\n+    private RequestSpecification requestSpec;\n+    private ClientHelper clientHelper;\n+\n+    /**\n+     * Sets up the essential settings for the TEST like contentType,\n+     * expectedStatusCode. It uses the '@BeforeEach' annotation provided by\n+     * jUnit.\n+     */\n+    @BeforeEach\n+    public void setup() {\n+        Utils.initializeRESTAssured();\n+        this.requestSpec = new RequestSpecBuilder().setContentType(ContentType.JSON).build();\n+        this.requestSpec.header(\"Authorization\", \"Basic \" + Utils.loginIntoServerAndGetBase64EncodedAuthenticationKey());\n+        this.responseSpec = new ResponseSpecBuilder().expectStatusCode(200).build();\n+    }\n+\n+    /**\n+     * Here we Create/Update different Entities and verify an audit is generated\n+     * for each action. This can be further extened with more entities and\n+     * actions in similiar way.\n+     */\n+    @Test\n+    public void auditShouldbeCreated() {\n+        this.clientHelper = new ClientHelper(this.requestSpec, this.responseSpec);\n+\n+        // When Client is created\n+        final Integer clientId = ClientHelper.createClient(this.requestSpec, this.responseSpec);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5ODYwMA==", "bodyText": "Yes, I thought about it, but I thought not to mix two PRs since it has to covered in the other PR anyways.", "url": "https://github.com/apache/fineract/pull/1100#discussion_r444098600", "createdAt": "2020-06-23T09:44:23Z", "author": {"login": "thesmallstar"}, "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/AuditIntegrationTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.integrationtests;\n+\n+import io.restassured.builder.RequestSpecBuilder;\n+import io.restassured.builder.ResponseSpecBuilder;\n+import io.restassured.http.ContentType;\n+import io.restassured.specification.RequestSpecification;\n+import io.restassured.specification.ResponseSpecification;\n+import java.util.HashMap;\n+import org.apache.fineract.integrationtests.common.AuditHelper;\n+import org.apache.fineract.integrationtests.common.ClientHelper;\n+import org.apache.fineract.integrationtests.common.OfficeHelper;\n+import org.apache.fineract.integrationtests.common.Utils;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ *\n+ * @author Manthan Surkar\n+ *\n+ */\n+public class AuditIntegrationTest {\n+\n+    private ResponseSpecification responseSpec;\n+    private RequestSpecification requestSpec;\n+    private ClientHelper clientHelper;\n+\n+    /**\n+     * Sets up the essential settings for the TEST like contentType,\n+     * expectedStatusCode. It uses the '@BeforeEach' annotation provided by\n+     * jUnit.\n+     */\n+    @BeforeEach\n+    public void setup() {\n+        Utils.initializeRESTAssured();\n+        this.requestSpec = new RequestSpecBuilder().setContentType(ContentType.JSON).build();\n+        this.requestSpec.header(\"Authorization\", \"Basic \" + Utils.loginIntoServerAndGetBase64EncodedAuthenticationKey());\n+        this.responseSpec = new ResponseSpecBuilder().expectStatusCode(200).build();\n+    }\n+\n+    /**\n+     * Here we Create/Update different Entities and verify an audit is generated\n+     * for each action. This can be further extened with more entities and\n+     * actions in similiar way.\n+     */\n+    @Test\n+    public void auditShouldbeCreated() {\n+        this.clientHelper = new ClientHelper(this.requestSpec, this.responseSpec);\n+\n+        // When Client is created\n+        final Integer clientId = ClientHelper.createClient(this.requestSpec, this.responseSpec);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3Nzk2NA=="}, "originalCommit": null, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEwMDY1MA==", "bodyText": "SGTM - resolving this conversation, you are absolutely right, fixing that is not part of this PR!", "url": "https://github.com/apache/fineract/pull/1100#discussion_r444100650", "createdAt": "2020-06-23T09:47:49Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/AuditIntegrationTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.integrationtests;\n+\n+import io.restassured.builder.RequestSpecBuilder;\n+import io.restassured.builder.ResponseSpecBuilder;\n+import io.restassured.http.ContentType;\n+import io.restassured.specification.RequestSpecification;\n+import io.restassured.specification.ResponseSpecification;\n+import java.util.HashMap;\n+import org.apache.fineract.integrationtests.common.AuditHelper;\n+import org.apache.fineract.integrationtests.common.ClientHelper;\n+import org.apache.fineract.integrationtests.common.OfficeHelper;\n+import org.apache.fineract.integrationtests.common.Utils;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ *\n+ * @author Manthan Surkar\n+ *\n+ */\n+public class AuditIntegrationTest {\n+\n+    private ResponseSpecification responseSpec;\n+    private RequestSpecification requestSpec;\n+    private ClientHelper clientHelper;\n+\n+    /**\n+     * Sets up the essential settings for the TEST like contentType,\n+     * expectedStatusCode. It uses the '@BeforeEach' annotation provided by\n+     * jUnit.\n+     */\n+    @BeforeEach\n+    public void setup() {\n+        Utils.initializeRESTAssured();\n+        this.requestSpec = new RequestSpecBuilder().setContentType(ContentType.JSON).build();\n+        this.requestSpec.header(\"Authorization\", \"Basic \" + Utils.loginIntoServerAndGetBase64EncodedAuthenticationKey());\n+        this.responseSpec = new ResponseSpecBuilder().expectStatusCode(200).build();\n+    }\n+\n+    /**\n+     * Here we Create/Update different Entities and verify an audit is generated\n+     * for each action. This can be further extened with more entities and\n+     * actions in similiar way.\n+     */\n+    @Test\n+    public void auditShouldbeCreated() {\n+        this.clientHelper = new ClientHelper(this.requestSpec, this.responseSpec);\n+\n+        // When Client is created\n+        final Integer clientId = ClientHelper.createClient(this.requestSpec, this.responseSpec);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3Nzk2NA=="}, "originalCommit": null, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzAxOTUyOnYy", "diffSide": "RIGHT", "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/AuditIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOToxMjoyNFrOGngd4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTo1MjoxOFrOGnh6OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3OTU4Ng==", "bodyText": "For a new class like AuditHelper, I would go with the pattern of passing this.requestSpec, this.responseSpec to the constructor, and then have a method like verifyAuditCreatedOnServer not require it. Actually, even better, how about only passing the requestSpec and even just hard-code the responseSpec without having to pass it. This would make ITs more readable.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    AuditHelper.verifyAuditCreatedOnServer(this.requestSpec, this.responseSpec, clientId, \"CREATE\", \"CLIENT\");\n          \n          \n            \n                    AuditHelper.verifyAuditCreatedOnServer(this.requestSpec, this.responseSpec, clientId, \"CREATE\", \"CLIENT\");", "url": "https://github.com/apache/fineract/pull/1100#discussion_r444079586", "createdAt": "2020-06-23T09:12:24Z", "author": {"login": "vorburger"}, "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/AuditIntegrationTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.integrationtests;\n+\n+import io.restassured.builder.RequestSpecBuilder;\n+import io.restassured.builder.ResponseSpecBuilder;\n+import io.restassured.http.ContentType;\n+import io.restassured.specification.RequestSpecification;\n+import io.restassured.specification.ResponseSpecification;\n+import java.util.HashMap;\n+import org.apache.fineract.integrationtests.common.AuditHelper;\n+import org.apache.fineract.integrationtests.common.ClientHelper;\n+import org.apache.fineract.integrationtests.common.OfficeHelper;\n+import org.apache.fineract.integrationtests.common.Utils;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ *\n+ * @author Manthan Surkar\n+ *\n+ */\n+public class AuditIntegrationTest {\n+\n+    private ResponseSpecification responseSpec;\n+    private RequestSpecification requestSpec;\n+    private ClientHelper clientHelper;\n+\n+    /**\n+     * Sets up the essential settings for the TEST like contentType,\n+     * expectedStatusCode. It uses the '@BeforeEach' annotation provided by\n+     * jUnit.\n+     */\n+    @BeforeEach\n+    public void setup() {\n+        Utils.initializeRESTAssured();\n+        this.requestSpec = new RequestSpecBuilder().setContentType(ContentType.JSON).build();\n+        this.requestSpec.header(\"Authorization\", \"Basic \" + Utils.loginIntoServerAndGetBase64EncodedAuthenticationKey());\n+        this.responseSpec = new ResponseSpecBuilder().expectStatusCode(200).build();\n+    }\n+\n+    /**\n+     * Here we Create/Update different Entities and verify an audit is generated\n+     * for each action. This can be further extened with more entities and\n+     * actions in similiar way.\n+     */\n+    @Test\n+    public void auditShouldbeCreated() {\n+        this.clientHelper = new ClientHelper(this.requestSpec, this.responseSpec);\n+\n+        // When Client is created\n+        final Integer clientId = ClientHelper.createClient(this.requestSpec, this.responseSpec);\n+        Assertions.assertNotNull(clientId);\n+        AuditHelper.verifyAuditCreatedOnServer(this.requestSpec, this.responseSpec, clientId, \"CREATE\", \"CLIENT\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEwMzIyNA==", "bodyText": "I was actually going to point this on #1019, HideUtilityClassConstructor checks if it is utility class by its name, to do this(using non-private constructor) we would need to either suppress the warning for that checkstyle then or call this something that does not have Helper or util in its name. What do you suggest?", "url": "https://github.com/apache/fineract/pull/1100#discussion_r444103224", "createdAt": "2020-06-23T09:52:18Z", "author": {"login": "thesmallstar"}, "path": "fineract-provider/src/integrationTest/java/org/apache/fineract/integrationtests/AuditIntegrationTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.integrationtests;\n+\n+import io.restassured.builder.RequestSpecBuilder;\n+import io.restassured.builder.ResponseSpecBuilder;\n+import io.restassured.http.ContentType;\n+import io.restassured.specification.RequestSpecification;\n+import io.restassured.specification.ResponseSpecification;\n+import java.util.HashMap;\n+import org.apache.fineract.integrationtests.common.AuditHelper;\n+import org.apache.fineract.integrationtests.common.ClientHelper;\n+import org.apache.fineract.integrationtests.common.OfficeHelper;\n+import org.apache.fineract.integrationtests.common.Utils;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ *\n+ * @author Manthan Surkar\n+ *\n+ */\n+public class AuditIntegrationTest {\n+\n+    private ResponseSpecification responseSpec;\n+    private RequestSpecification requestSpec;\n+    private ClientHelper clientHelper;\n+\n+    /**\n+     * Sets up the essential settings for the TEST like contentType,\n+     * expectedStatusCode. It uses the '@BeforeEach' annotation provided by\n+     * jUnit.\n+     */\n+    @BeforeEach\n+    public void setup() {\n+        Utils.initializeRESTAssured();\n+        this.requestSpec = new RequestSpecBuilder().setContentType(ContentType.JSON).build();\n+        this.requestSpec.header(\"Authorization\", \"Basic \" + Utils.loginIntoServerAndGetBase64EncodedAuthenticationKey());\n+        this.responseSpec = new ResponseSpecBuilder().expectStatusCode(200).build();\n+    }\n+\n+    /**\n+     * Here we Create/Update different Entities and verify an audit is generated\n+     * for each action. This can be further extened with more entities and\n+     * actions in similiar way.\n+     */\n+    @Test\n+    public void auditShouldbeCreated() {\n+        this.clientHelper = new ClientHelper(this.requestSpec, this.responseSpec);\n+\n+        // When Client is created\n+        final Integer clientId = ClientHelper.createClient(this.requestSpec, this.responseSpec);\n+        Assertions.assertNotNull(clientId);\n+        AuditHelper.verifyAuditCreatedOnServer(this.requestSpec, this.responseSpec, clientId, \"CREATE\", \"CLIENT\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3OTU4Ng=="}, "originalCommit": null, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1885, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}